

Abstract?- This paper proposes a method of mining multi- dimension association rule based on the Adaptive Genetic Algorithm (AGA) with crossover matrix and mutation matrix.

In this association rule mining system, selection, mutation, and crossover are all parameter-free in evolution process. Results show that: combined with the adaptive genetic algorithm, the precision and efficiency of mining association rules is improved.

Keywords- Multi-dimension Association Rule; Adaptive Genetic Algorithm; Crossover Matrix; Mutation Matrix

I.  INTRODUCTION Since its introduction, Association Rule Mining (R.

Agrawal, H. Mannila, R. Srikant, H. Toivonen, and A.

Inkeri Verkamo. 1996), has become one of the core data mining tasks, and has attracted tremendous interest among data mining researchers and practitioners. It is widely recognized that the set of association rules can rapidly grow to be unwieldy, especially as we lower the frequency requirements. The larger the set of frequent itemsets the more the number of rules presented to the user, many of which are redundant. This is true even for sparse datasets, but for dense datasets it is simply not feasible to mine all possible frequent itemsets, let alone to generate rules between itemsets. In such datasets one typically ?nds an exponential number of frequent itemsets.

Being the factor mention above, many researchers study association rule mining by using computation intelligence algorithms. Cattral R., Oppacher F. and Deugo D. (1999) describes the implementation and the functioning of RAGA (rule acquisition with a genetic algorithm), a genetic- algorithm-based data mining system suitable for both supervised and certain types of unsupervised knowledge extraction from large and possibly noisy databases. Zhu Yu, Zhang Hong, and Kong Ling-dong (2009) proposed a method of mining multi-dimensional association rules based on artificial immune algorithm, and the algorithm has faster speed of mining multi-dimensional association rules. Wu Zhao-hui, Zhang Gui-juan, and Liu Xi-yu (2005) presented A new association rule mining algorithm based on improved simulated  annealing genetic algorithm, This algorithm used adaptive crossover probability and mutation probability, and restrained premature convergence effectively.

It?s well know that the selection of optimal parameter values for the genetic algorithm is tedious. Thus an adaptive system, where the parameter values are automatically adapted on the basis of the problem instance, would be highly desired. In this paper we propose an adaptive genetic algorithm (AGA) with mutation matrix and crossover matrix for the multi-dimension association rule problem.

The aim is to give an effective and straight-forward algorithm which obtains good solutions for mining multi- dimension association rule. Selection, mutation, and crossover are all parameter-free in the sense that the problem at a particular stage of evolution will choose the parameters automatically.

The rest of the paper is organized as follows. We begin in section 2 by giving a formal de?nition of the association rule mining. The adaptive genetic algorithm is described in section 3. In section 4 we show how to make use of the adaptive genetic algorithm in order to mine association rule.

The performance of the algorithm is studied experimentally in section 5. Conclusions are drawn in section 6.



II. MULTI-DIMENSION ASSOCIATION RULE Let I={I1, I2, ?, Im} be a set of items. Let D, the task- relevant data, be a set of database transactions where each transaction T is a set of items such that IT ? . Each transaction is associated with an identi?er, called TID. Let A be a set of items. A transaction T is said to contain A if and only if TA? . An association rule is an implication of the form BA? , where IA ? , IB ? , and ??? BA .

The rule BA?  holds in the transaction set D with support s, where s is the percentage of transactions in D that contain BA? . This is taken to be the probability )( BAP ? .

The rule BA?  has con?dence c in the transaction set D, where c is the percentage of transactions in D containing A that also contain B. This is taken to be the conditional probability, )|( ABP .  That is,  )()(sup BAPBAport ??? ,  )(sup )(sup)|()(  Aport BAportABPBAconfidence ???? .

Rules that satisfy both a minimum support threshold (min_sup) and a minimum con?dence threshold (min_conf) are called strong. By convention, we write support and con?dence values so as to occur between 0% and 100%, rather than 0 to 1.0.

In general, association rule mining can be viewed as a two- step process:  Find all frequent itemsets: By de?nition, each of these itemsets will occur at least as frequently as a predetermined minimum support count, min sup.

Generate strong association rules from the frequent itemsets: By de?nition, these rules must satisfy minimum support and minimum con?dence.

If a rule references two or more dimensions, such as the dimensions age, income, and buys, then it is a multi-         dimensional association rule. The following rule is an example of a multidimensional rule:  )TV" resolutionhigh "buy(X,)48K""42K income(X,)39""30 age(X, ?? ??

III. ADAPTIVE GENETIC ALGORITHM (AGA) WITH MUTATION MATRIX AND CROSSVOER MATRIX  In this section, we introduce mainly adaptive genetic algorithm with mutation matrix and crossover matrix.

A. AGA with mutation matrix The notion of mutation matrix is used in the development of adaptive genetic algorithm so that the selection process does not require any external input parameter. Szeto and Zhang (2005) propose mutation only genetic algorithm (MOGA) firstly. MOGA is superior to many traditional methods (Ma and Szeto,2004; Szeto and Zhang, 2005; Zhang and Szeto, 2005). The idea behind MOGA is that mutation probability is a function of time, ?tness ranking of the chromosome, and locus.

For a population of Np chromosomes, each encoded by L locus, can be arranged into a population matrix A with Np rows and L columns. In matrix A, The rows are listed in decreasing order of the ?tness: fi? fj if i<j. Each element of the matrix A has a probability p (0<p<1) to undergo mutation. These mutation probabilities of Aij (i =1,..., NP ; j =1, ..., L) form a mutation matrix M.  MOGA makes use of the information of the ?tness ranking and loci statistics to determine Mij dynamically.

The mutation matrix can be viewed as an arrangement of genes based on the informative measures: the ?tness cumulative probability and the standard deviation for the allele distribution. So in each generation, rows in the mutation matrix were ?rst selected for mutation based on the ?tness cumulative probability. The probability ?(i) to choose the ith row for mutation is de?ned as,  ))((1)( ifci 	? (1) where  ? ?  ? fgp  gN N  ifc )(1))((   (2)  N(g) is the number of chromosomes with ?tness value g.

Note that C(f) is a non-decreasing function of f where C(fmax)=1 and ( 1/NP?C(f)? 1).

Therefore, a chromosome with higher ?tness has a lower probability to participate in mutation. As the chromosomes are kept in a decreasing order of the ?tness: fi ? fj if i<j, in the matrix A; ?(i) is a non-decreasing function of the row index i. Thus, ?(i) is higher for less ?t rows. The ?ttest chromosome, i.e. the ?rst row of the population matrix A, ?(i)=0. It is, hence, never selected for mutation. The worst chromosome, i.e. the last row of A, will mutate with a probability close to unity for large enough NP : ?(NP)=1?1/NP? 1.

Next, we employ the ?tness cumulative probability again to determine the number Nmg of loci to undergo mutation for  the selected chromosomes, each with L loci. Stating the formula for Nmg,  Nmg= ?(i) ? L (3) It is obvious that Nmg is also a function of the row index i. If a selected chromosome has a high ?tness, it has fewer loci to undergo mutation. If a selected chromosome has a low ?tness, it has more loci to mutate.

B. AGA with crossover matrix Besides the chromosome ?tness ranking and the loci statistics, the Hamming distance can also be used to describe relationship of chromosomes in matrix A.

The distance matrix H is a square NP?NP matrix with matrix element Hii? de?ned by a distance measure between the i-th chromosome, represented by Ri which is the i-th row vector of the population matrix A, and the i?-th chromosome Ri?.

we have a measures for H called long Hamming distance crossover (LHDC) (Lam and Szeto 2007) in which Hii?=Hi?i=Dii?, where Dii? is equal to the number of different alleles in these two rows.

Next, we have to select two chromosomes for crossover.

The probabilities to choose the two chromosomes are different, but they are both related to H. One probability is just the ?tness cumulative probability, and we call it the ?rst crossover probability PCI (i).

PCI (i)=C(f(i)) (4) A chromosome, which we call the ?rst chromosome, is ?rst chosen with this ?rst crossover probability. As the row index in H is also the row index in A, chromosome represented by smaller H row index has higher probability to be selected for crossover. Then, the second chromosome is selected with another probability called the second crossover probability. The second crossover probability depends on the chromosome already chosen. If chromosome i is the ?rst chromosome, then the second crossover probability PCII (i?) to choose chromosome i' as the second chromosome is:  ? ? ?  pN  k ik  ii CII  H  H ip   ' ')(   (5)  If the ?rst and the second chromosome are the same, the second one is chosen again until they are both different.

Finally, we use single-point crossover to deal the two selected chromosome with the crossing points chosen randomly once in a generation. In each generation, a total of NP chromosomes are selected to participate in the crossover.

Later, the ?ttest NP chromosomes are selected to form a new generation from the pool of NP original chromosomes and the NP children chromosomes produced by crossover.



IV. MULTI-DIMENSION ASSOCIATION RULE MINING BASED ON AGA  In  order to apply the Genetic Algorithm (AGA) to the  task of association rule  mining  we  found  it  desirable  to modify  the AGA mentioned above in  a  number  of respects.  Detail as following:       A. Encode Being Database include quantitative attributes, so we have to preprocess the data before mining. Firstly, we de?ne a discretization of the attribute for given numerical attributes, then replacing numerous values by a small number of interval labels. For instance, a concept hierarchy for age be used to replace the original numeric values of this attribute by interval labels, such as ?0-29?, ?30-39?, ?40-49?, ?50- 59?, ?60-?and so on. Finally, the chromosomes encoded by an array of integers in our paper. This approach allows for greater precision and complexity than the comparatively restricted method of using binary numbers.

B. initial population The initial population is generated randomly, and its preset size is 200.

C. Definition of fitness function The fitness function is f(x)=s(x)/s_min , here s(x) is the support number of chromosome x in population, s_min is a minimum support threshold user given.

D. Crossover Firstly, system generate a random number p1, get ith row in matrix A by comparing p1 and result of formula (4). Then, system generates another number p2 which unequal p1, we get i'th row by using formula (5) and p2. We were using single-point crossovers with the crossing points chosen randomly in a generation.

E. Mutation System generates a random number p, then we can get ith row in matrix A from formula (3). We mutate Nmg loci located in the selected rows in the mutation matrix randomly.

For discretization of quantitative attribute, the loci replaced by a interval labels which generated randomly by system.

F. Termination condition In this paper, Processing stops after a specified number of generations, e.g. 200.

G. Description of algorithm The detail mining process is consists of a sequence of the following steps: step1: data preprocess, especially discretize quantitative attributes.

step2: initialize parameters, set s_min and c_min from user, and set value of population size and termination condition.

step3: after initial population generated randomly, we get population matrix A.

step4: calculate fitness for each individual.

step5: ranking rows of matrix A by fitness, and calculate ?tness cumulative probability of each individual.

step6: update matrix M and H.

setp7: crossover and mutation.

setp8: update next generation, if system meet the termination condition then end, else go to setp4.

setp9: rules extract using c_min.



V. EXPERIMENTAL RESULTS  This paper use common Synthetic standards database generated by IBM QUEST(Agrawal R, I mielinski T, and Swami A. 1993) as test dataset. The dataset tested uses 20 attributes, and contains 1000 records. We run separately AGA algorithm and GA algorithm by using the dataset 10 times. Figure 1 shows the comparison of algorithm performance between AGA and GA, it states that the convergence of AGA algorithm better than GA. In figure 2, it shows the number of rule acquisition of two association rule mining methods for the test dataset.

Fig.1: Comparison of Algorithm performance between AGA and GA   Fig.2: Comparison of number of rules between AGA and GA

VI. CONCLUSIONS We have described a flexible new data mining system based on  a self-adaptive Genetic Algorithm with crossover matrix and mutation matrix. Experiments show that AGA?s performance compares favorably with GA to association rule mining.

