A Database-Reduction-Based Algorithm for Episode Mining

Abstract   Event Sequence arises naturally in many applications. Episode mining can discovery the knowledge hidden in the event sequence. Currently, the most influential algorithm for episode mining is WINEPI. However, it is likely to suffer from the tendency of generating too many of candidate episodes.

In this paper, a novel algorithm named DRE for mining frequent episodes is presented. It studied the conditions for the events which can be pruned from the database, so the size of database is reduced gradually.

The performance of algorithm DRE was evaluated and compared with WINEPI algorithm. The results demonstrate that the DRE has better performance.

1. Introduction   Sequence data arises naturally in many applications.

Examples of such data are alarms in a computer network, occurrences of recurrent illnesses, etc.

Abstractly, such a data collection can be viewed as a sequence of events, where each event has an associated time of occurrence. Episode [1][2] is defined as a collection of events that occur in the same time window. The task of episode mining is to discover the episodes that occur frequently. Once such episodes are known, one can produce rules for describing or predicting the behavior of the system. Sequential patterns [3][4] are similar to frequent episodes to some degree. However, there is no concept of time window, so it is not suit for mining the time-window-related episodes.

Algorithm WINEPI [1] is devised for mining frequent episodes. While being the first algorithm for episode mining, WINEPI is likely to suffer from the requirement of scanning database many times and scanning the whole database at each time. The similar problem also exists in the Apriori-based algorithms [5] for association rules. To solve this problem, DHP [6]  employs pruning techniques to gradually reduce the transaction database size. However, in episode mining, one event is included in win windows, where win is the width of the window. It is more difficult to determine whether an event can be pruned from the sequence or not.

In this paper, we propose an algorithm named DRE to discover frequent episodes in event sequence. It studies the conditions of events can be pruned. Thus the size of events sequence can be reduced gradually.

Data experiments show that DRE has outstanding time performance.

The remainder of the paper is organized as follows.

The problem statements are discussed in section 2. The algorithm DRE is presented in section 3. The performance study of DRE is reported in section 4. The conclusions are given in section 5.

2   Problem Statements   In this section, we present the formal definitions of event sequence, window, episode, frequent episode, etc, which are the basic concept in episode mining [1].

Definition 1. (event sequence) Suppose E is the set of event types. An event sequence S  on E  is a triple ),,( es TTs , where s = {( 1,1  tA ), ( 22  , tA ),  ?, ( nn tA  , )}, sT  denotes the start time and eT  denotes the end time of the sequence. The pair ) ,( ii tA  is an event, where EAi ?  is the event type and it  ( eis ttt <? ) is the occurrence time.

For example, Figure 1 is an event sequence, where the integer denotes the time; the letter is the event type.

Definition 2. (sub-sequence) Given an event sequence  ),,( es TTs , ),,( '''  es TTs  is a sub-sequence of ),,( es TTs  if and only if ss ?'  and eess TTTT ?<? '' .

For example, the event sequence 'S   in Figure 2 is a sub-sequence of  S in Figure 1.

Parallel and Distributed Computing,Applications and Technologies (PDCAT'06) 0-7695-2736-1/06 $20.00  ? 2006     Definition 3. (episode) Episode is a subset of the set of event types. There can be repeated events in the same episode.

For example, { }EC, , { }EDC ,,  and { }BAA ,, are all episodes.

Definition 4. (sub-episode) Episode ?  is the sub- episode of ?  if and only if ?? ? .

For example, episode { }EC, is a sub-episode of episode { }DEC ,, .

Definition 5. (window) A window on the event sequence ),,( es TTsS =  is an event sub-sequence  ),,( es ttwW = , where eess TttT ?<?  and w  consists  of those pairs ),( tA  from s  where es ttt  <? . The time span se tt ?  is called the width of the window.

),( winSW  denotes the set of windows W on S  such that winWwidth =)( .

For example, the window in Figure 3 is )15,11)},14,(),13,(),12,(),11,({( ACBAW = , the width  of the window is 4, the start time of the window is 11 and the end time is 15. Table 1 shows all the windows in Figure 1, where the width of the windows is 4.

Definition 6. (episode occurs in a window) An episode ?  occurs in a window =W (w, st , wints + ) if and only if all the event types in ?  are contained in W and for each event type, the times of its occurrence in the window is no less than that in episode? .

For example, in Figure 3 episode ),( CA and ),,( ACA are occur in window W, but episode ),,( CCB is not.

Definition 7. (frequent episode) Given an event sequence S  and a window width win, the frequency of an episode ? in S  is =),,( winSfr ? { }  )W( in    occurs  ),(  S,win w?winSWw ?  . In other  words, the frequency of an episode is defined as the fraction of windows in which the episode occurs.

Given a frequency threshold frmin _ , ?  is frequent if and only if frminwinSfr _),,( ?? .

For example, in Figure 1 the number of windows is 18. If 3/1_ =frmin , it is easy to know that the set of frequent 1-episode is { } { } { } { }{ }ECBAF ,,,1 = .

Table 1. All the windows in the event sequence S  ID st  et  Events  1 8 12 (A,11) 2 9 13 (A,11),(B,12) 3 10 14 (A,11),(B,12),(C,13) 4 11 15 (A,11),(B,12),(C,13),(A,14) 5 12 16 (B,12),(C,13),(A,14),(A,15) 6 13 17 (C,13),(A,14),(A,15),(E,16) 7 14 18 (A,14),(A,15),(E,16) 8 15 19 (A,15),(E,16) 9 16 20 (E,16),(C,19) 10 17 21 (C,19),(E,20) 11 18 22 (C,19),(E,20),(D,21) 12 19 23 (C,19),(E,20),(D,21),(F,22) 13 20 24 (E,20),(D,21),(F,22),(B,23) 14 21 25 (D,21),(F,22),(B,23),(A,24) 15 22 26 (F,22),(B,23),(A,24),(A,25) 16 23 27 (B,23),(A,24),(A,25) 17 24 28 (A,24),(A,25) 18 25 29 (A,25)   Lemma 1. If episode ?  is frequent in an event sequence, all sub-episodes ?? ?  are frequent.

3   Algorithm DRE   The task of episode mining consists of two main steps. The first step involves finding the set of all frequent episodes. The second step consists of generating all the episode rules with the confidence above the threshold confidence. Given all frequent episodes, episode rules generation is straightforward.

So we only concentrate on how to find the frequency episodes.

3.1. The Database Reduction Techniques in DRE   To improve the algorithm performance, we studied the condition for the event can be pruned from the event sequence database. The gain is as follows: Theorem 1. In k-iteration, if the type of an event is not a member of any frequent ( )1?k episode, it can be pruned from the database.

Proof. If an event type is not a member of any frequent k-episode, it is impossible to be a member of any (k + 1)-frequent episode. So it can be pruned.

Parallel and Distributed Computing,Applications and Technologies (PDCAT'06) 0-7695-2736-1/06 $20.00  ? 2006    In our example, because D is not frequent, so the event (D, 21) can be pruned from the database.

Theorem 1 gives the obvious pruning condition for the event. Theorem 2 discloses the abstract and profound pruning condition.

Lemma 2. Suppose ),( tA  be an event in event sequence, there are win  windows contain ),( tA , where win is the width of the window. We denote these windows as ))(,( itA , where wini ??1 .

Proof. It is obvious that ),( tA  is contained in win windows, the first window that contains ),( tA  is in time span )1,1[ ++? twint , and the last window is in time span ),[ wintt + .

In our example, event )20,(E  occurs in 4 windows, the identifiers of these windows are 10, 11, 12 and 13.

Theorem 2. Suppose ),( tA  be an event in event sequence and the set of candidate k-episodes which occur in window ])[,( itA  and contain event type A is epiitA ].)[,( , where wini ??1 . Let =eitA ].)[,(  }].[),(.min{ epiitAe ??? , where e.?  denotes the number of event types in episode ? .  If )1( winii ??? ,  0].)[,( =epiitA  or <epiitA ].)[,( eitA ].)[,( , then event ),( tA can be pruned from the event sequence.

Proof.  For the aim of contradiction, we suppose that ),( tA  is contained in a candidate (k+1)-episode ?  and  ?  occurs in window ))(,( itA . Suppose 1. += me? and the event types in ?  are 121 ,...,, +mEEE . Each event type occurs )11( +?? mini  times, where  11 +?? mi . It is obvious that )1(1 +??? mjj , satisfies that AE j = . Suppose the set of k-sub-episodes of ? that contain ),( tA  is A? . It can be proved that if  1=jn , mA =?  and if 1>jn , 1+= mA? . According to lemma 1, all the episodes in A?  occur in ])[,( itA .

So ??? mepiitA A?].)[,( eitA ].)[,( . It is conflict with the assumption. So event ),( tA  is impossible to occur in any candidate (k+1)-episode. So it can be pruned from the event sequence.

It is easy to know that in our example, the candidate 2-episodes are { },, AA { } ,, BA { },, CA { },, EA { },, BB { },,CB  { },, EB { },,CC  { }EC, and { }EE, . =])[19,( iC { }{ }EC, ,  where 41 ?? i . It is obvious that 41 ??? i ,  1].)[19,( =epiiC  2].)[19,( =< eiC . It?s impossible that )19,(C  is contained in a candidate 3-episode. So it can  be pruned from event sequence.

3.2. The Iteration Procedure of DRE   The iteration procedure of DRE is as follows:  1) The set of candidate 1-episode is EC =1 . 1F  is obtained by scanning the database once; Let  1=k ; 2) while ??kF 3) The set of candidate (k+1)-episode 1+kC  is  derived from kF , let 1+= kk ; 4) The sliding window technique is used to get the  frequent counts of the candidate k-episode.

When the window slide, the events whose type are not the member of any frequent ( )1?k episode are pruned firstly. At the same time, the frequent counts of the candidate episodes are counted. According to theorem 2, the events that satisfy the pruning condition are deleted from event sequence. Finally, the set of frequent k-episode kF  can be determined, then go to 2);  5) Output all the frequent episodes.

The step1), 2) and 3) are same to algorithm  WINEPI. The distinct feature of DRE is the database reduction techniques in )2( ?kk  iterations. The pseudo code is presented below. We first give the denotations which are used in the pseudo code. couA.

denotes the number of type A  events in current window,  fc.? denotes the number of windows in which episode ? occurs, the set of event types that is not a member of any candidate k -episode is denoted as De , e.?  is the number of event types in episode ? , inw  is the set of candidate k- episodes that are contained in current window, ),( iAcon is the set of episodes that contain exactly i events of type A,  in.? indicates the time when episode is entirely contained in the window, ec.?  indicates how many events of ? appear  in current window, and epiitAepn itA ].)[,(])[,( = .

Input: Event sequence ),,( es TTsS = ; window width win ; the set of candidate k -episode kC ; the frequency threshold frmin _ .

Output: The frequent k-episodes kF Method: /* Initialization */  ?=inw ; 0. =couA , where EA? ; 0. =ec? ; 0. =fc? , where kC??  for ( 1+?= winTst s ; eTst ? ; ++st ) /*Bring in new events to the window */ for all events ),( tA  such that 1?+= winstt  Parallel and Distributed Computing,Applications and Technologies (PDCAT'06) 0-7695-2736-1/06 $20.00  ? 2006    if DeA ?  /* theorem 1 */ Delete ),( tA ; continue; ;. ++couA for( ++?= iwinii  ; ;1 ) 0])[,( =itAepn ; keitA =].)[,( ; /* current window contains episode ? */  for each inw?? if ??A  ++]1)[,( tAepn ; )e. ,].1)[,min((].1)[,( ?etAetA = ;  for each ). ,( couAAcon?? couAec . . =+? ; if ?? =ec.   then  stin =.? ; ++]1)[,( tAepn ; { }??= inwinw ;  )e. ,].1)[,min((].1)[,( ?etAetA = ; /* Update the related variables of the event type A*/ for all ),( 'tA  such that ttwint <?+? '1  +++? ]1)[,( '' tttAepn ;  )e. ,].1)[,min((  ].1)[,( ''  ''  ?etttA etttA  +?=  +? ;  /* Drop out old events from the window */ for all events ),( tA  in s  such that 1?= stt  for each ).,( couAAcon?? if kec =.?  then  instfc . . ?? ?=+ ; couAec .  . =?? ;  ??couA. ; { }?/inwinw = ; if )1( winii ??? , eitAepi itA ].)[,(])[,( <  Delete ),( tA ; /*theorem 2*/ /*output frequent k-episode*/  { })1(min_. ?+?????= winTTfrfcCF sekk ??? .

4. Performance Study   To assess the performance of DRE, we conducted several experiments on the campus grid management database of Northwestern Polytechnical University.

The database covers a time period of one year.  Since the most important concept in episode mining is event type. Jobs submission, data transaction, network congestion, load unbalance etc can all be viewed as events. The decision tree algorithm is used to cluster the events to 98 clusters. Then the algorithm DRE is used to mining the frequent episodes.

Figure 4.  The relative performance with respect to different  minimum support threshold  Figure 4 shows the relative performance between WINEPI and DRE. It is shown that algorithm DRE in general outperforms algorithm WINEPI for various frequency thresholds, indicating the robust performance of algorithm DRE.

Figure 5.  The remaining of events in each iterations  Figure 5 shows the effect of gradually trimming the database size by DRE. The number of events in the database scanned by DRE gradually decreases due to the elimination of events which ate deemed useless for later frequent episode generation. The relation between the window width and the effect of events pruning is also studied. The wider the window is, the more slowly the number of events decreases. This result can be explained by the difference in the number of events in the windows when the width of the window is different. When the window is wide, the more events can be included in a window. The support of the candidate episode may be increase. So there are more frequent episodes. As a result, fewer events can be pruned. At the same time, the number of iteration increases.

5. Conclusions   This paper investigates the problem of discovering frequent episodes in event sequence. We proposed an effective algorithm DRE for mining frequent  Parallel and Distributed Computing,Applications and Technologies (PDCAT'06) 0-7695-2736-1/06 $20.00  ? 2006    episodes. DRE employs effective pruning techniques to reduce the database size. We have conducted several experiments to evaluate the performances of DRE. It is shown that by utilizing database reduction technique for events sequence, algorithm DRE incurs an execution time that is significantly shorter than that of WINEPI.

