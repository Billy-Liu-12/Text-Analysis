Visually Contrast Two Collections of Frequent Patterns

Abstract?Frequent pattern mining searches for frequently occurring sets of items or events. While users are interested in finding these frequent patterns in most situations, they may want to compare and contrast the mined frequent patterns in some other situations. For example, store managers may want to find out how the collections of frequently purchased items changed from one season to another. Similarly, regional managers may want to compare the frequently purchased items between two different branches. These are some examples of looking for temporal and/or spatial changes between mined frequent patterns. A visual representation of these patterns would be more comprehensive to users than the long textual list returned by many existing frequent pattern mining algorithms.

However, many existing visualizers were not designed to show frequent patterns, let alone show the differences between them. In this paper, we propose a visualization system called ContrastViz that enables users to visualize the mined frequent patterns and their differences.

Keywords?Contrast data mining; association analysis; human-machine interaction; pattern discovery; data and result visualization

I. INTRODUCTION  Frequent pattern mining [1], [4], [7], [8], [13], [16]? which searches for implicit, previously unknown, and po- tentially useful information in terms of frequently occurring sets of items?helps in identifying frequent patterns in many analytical tasks in real-life applications. Items can be real objects (e.g., words in a document, merchandises in a store, courses offered at a university) or events. An analyst may require information about the most common words or groups of words in a document. Similarly, a store manager may want to identify merchandise items that are frequently purchased together. A college or university administrator may want to know the collection of popular courses, taken together in a semester. A botanist may want to find out characteristics of wild plants collected in a forest. In all of these cases, a subtask in the analytical chain of tasks involves an inquiry about items or itemsets that frequently occur together.

Over the past two decades, numerous algorithms have been proposed to find these frequent patterns. Most of these algorithms return the mining results (i.e., frequent patterns) in textual forms (e.g., a very long list of frequent patterns). Consequently, users may not easily discover the knowledge and useful information from the list. As such, a visual representation of these patterns would be more comprehensive to users. So far, a few visualization tools have  been developed to support frequent pattern mining. Exam- ples include PowerSetViewer [17], FIsViz [11], FpVAT [9], SocialVis [10], as well as WiFIsViz [12] proposed in ICDM 2008. In general, these visualizers show only the frequent patterns mined from a single database instance.

However, there are situations in which users may be interested in differences between the results returned from two database instances [2], [3], [14], [15]. For example, a store manager may be interested in finding out the difference between popular sets of merchandise items sold in the sum- mer and in the winter (i.e., comparing the frequent patterns mined from the summer dataset with those mined from the winter dataset). He may also be interested in detecting the (temporal) changes in frequencies of the mined frequent patterns as well as their trends from one database instance to another. Similarly, a regional manager may want to find out the difference between the popular sets of merchandise items sold in two different locations (e.g., Vancouver vs.

Winnipeg).

To handle with these real-life applications, we propose a visualization system?called ContrastViz?to contrast two related sets of mined frequent patterns (e.g., the addition of new patterns, the deletion of old patterns, changes in frequencies of interesting frequent patterns) visually. The key contribution of this paper is our system that enables users to visualize and analyze two sets of mined frequent patterns as well as their differences (for comparison purposes).

This paper is organized as follows. The next section discusses related work. We propose our visualization sys- tem, called ContrastViz, in Sections III?V. Evaluation on ContrastViz is shown in Section VI. Finally, conclusions are presented in Section VII.



II. BACKGROUND AND RELATED WORK  Recently, some visualization tools and techniques have been designed to visualize patterns involving related items or co-occurring entities. For example, Wong et al. [19] designed visualization tools for visualizing topic association rules and sequential patterns appearing in documents. Their visual tools are similar to parallel coordinates in which item keywords appear on the parallel coordinate axes in the y-direction and the sequential index (temporal or other) on the x-axis. Frequency thresholds are color-coded, thereby facilitating the view of patterns occurring more frequently   DOI 10.1109/ICDMW.2011.177     than others. Jigsaw [18] is a system that represents docu- ments and their entities visually in order to help analysts examine reports more efficiently and develop theories about potential actions more quickly. In the List View, Jigsaw users can see if two or more entities (or items) appear together in one or more reports. Co-occurring items are presented with nodes and links, where the items are the nodes and the links suggest that they co-occur. PatternFinder [5] is an integrated multiple-view system for the query and result-set visualization for search and discovery of temporal patterns within multivariate and categorical datasets. PatternFinder uses a ball-and-chain representation (node-link with thick se- mantics on the edges) to show pattern matches in a timeline.

An event is a node in the chain and the connecting edges depict the event-set. PowerSetViewer [17], FIsViz [11], and WiFIsViz [12] all showing only frequent patterns of a single data instance but not the difference (e.g., frequency changes) between two data instances.

While all the above tools have included visualizations for either itemsets or co-occurring items, they have not considered the use of frequent pattern mining as a back-end driver in their design space. In contrast, our visualization system is designed to visualize the result sets obtained from frequent pattern mining algorithms, especially their changes.



III. CONTRASTVIZ: OUR PROPOSED VISUALIZATION SYSTEM  Here, we present our proposed visualization system, called ContrastViz, which allows users to visualize the differences or changes in the mined frequent patterns. ContrastViz provides users with three views: (i) the ?A? view, (ii) the ?B? view, and (iii) the difference ?A?B? view. In general, both the ?A? and ?B? views show the frequent patterns mined from two database instances. In real life, they could be popular merchandise items sold in two different loca- tions (e.g., Vancouver vs. Winnipeg) or two time instances (e.g., summer vs. winter). As a preview, a user could use ContrastViz to guide him to select an appropriate minimum support threshold value. Hence, the ?B? and ?A? views can sometimes be considered as the ?Before? and ?After? views (e.g., before and after the user adjusts the minimum support threshold).

A. Representing a Frequent Pattern  In all three views of ContrastViz, the mined frequent patterns are represented in a two-dimensional space, where the x-axis lists the domain items. To allow users to easily compare and contrast the three views, the domain items are listed in the same order throughout the three views.

The y-axis of the ?A? and ?B? views shows the frequency, whereas the y-axis of the ?A?B? view shows the difference in frequency.

To make a good use of visual clues, ContrastViz logically represents a k-itemset (i.e., each set of k items) by a  (a) k-itemsets  (b) Multiple k-itemsets  Figure 1. Representation of k-itemsets in ContrastViz  horizontal line connecting a left-triangle (which indicates the first item according to the ordering R of domain items), k?2 circles (which indicate the k?2 intermediate items), and a right-triangle (which indicates the last item). For k=2, the item pair is represented by horizontal line connecting a left-triangle and a right-triangle. For k=1, the singleton item is represented by a diamond (formed by putting a left- triangle and a right-triangle together). Figure 1(a) shows how ContrastViz represents three itemsets {a}, {c, d} and {a, b, c, d}.

B. Visualizing Patterns that Have the Same Frequency or Change in Frequency  Recall that, in any of the three views used in ContrastViz, the y-axis shows the frequency of frequent patterns. Such a representation works reasonably well when each itemset has a distinct frequency (i.e., at most one horizontal line for each frequency value-the y-value). However, for many real-life situations, it is not uncommon that several itemsets happen to have the same frequency. Showing multiple itemsets of the same frequency may take up too much space on the screen. To reduce the screen space, ContrastViz applies the following compression techniques so as to reduce the amount of vertical space on the screen as much as possible.

First, given two itemsets X and Y of the same frequency, if they are related by a prefix-?extension? relationship such that X is a prefix of Y (or, equivalently, Y is an ?extension? of X), their corresponding horizontal lines are merged into one line (having two right-triangles, one for the last item of each itemset). For example, if itemsets {a, b} and {a, b, c, d} have the same frequency, they can be compressed into a line, as shown in Figure 1(b). Note that (i) this compression technique reduces the number of horizontal lines to be shown and (ii) no information was lost when using this compression technique.

Second, given two itemsets X and Y of the same frequency, if they are not related by a prefix-?extension? relationship but they share a common prefix, their corre- sponding horizontal lines are merged and forked (i.e., the common portion of the two lines are merged and the non- common portions are then branched from the last item of the merged line). For example, Figure 1(b) shows how to compress itemsets {a, b, c, d} and {a, b, d, e} that have the same frequency and the common prefix {a, b}. Note that, although this compression technique does not reduce the number of horizontal lines, it reduces the number of nodes to be shown. Again, no information was lost when using this compression technique.

Third, given two itemsets X and Y of the same frequency, if they are not related by a prefix-?extension? relationship and they do not share any common prefix, then ContrastViz collapses and projects their corresponding horizontal lines into one line. The common line portions are thickened or represented by dashed line (instead of the usual solid line). By doing so, ContrastViz reduces the number of nodes and horizontal lines at the cost of losing some information. To distinguish real itemsets from the results of collapsing/projecting multiple lines, ContrastViz uses solid lines to represent real itemsets (e.g., {a, c}, {b, d}) and thickened/dashed lines represent the common line portion (cf. {a, b, c, d}). Furthermore, ContrastViz also uses the thickness of the line to indicate the number of horizontal lines that were collapsed into one. Since the compressed line omitted some information, in order to reveal the omitted information, ContrastViz provides the user with an option to expand any dashed line. Specifically, by clicking the [+] button, ContrastViz expands the dashed lines to reveal all solid lines (representing real itemsets) that were collapsed into the dashed line. Conversely, by clicking the [?] button, ContrastViz collapses these solid lines back into the dashed line. See Figure 1(b).

C. Indicate Different Types of Frequency Changes  In the ?A?B? view, the values on the y-axis (i.e., frequency) can be as positive numbers, zero, or negative numbers:  Diff(X) = frequencyA(X) ? frequencyB(X) (1) where frequencyA(X) denotes the frequency of a frequent pattern X in the ?A? view and frequencyB(X) denotes the frequency of X in the ?B? view. Here, a positive Diff(X) value indicates an increase in the frequency of X in the ?A? (after) view when compared with the ?B? (before) view.

A value of 0 for Diff(X) value indicates the frequency of X remains unchanged, and a negative Diff(X) value indicates a decrease in the frequency of X in the ?A? (after) view when compared with the ?B? (before) view. For example, in real- life applications, ContrastViz visualizes the difference be- tween the items frequently purchased in Vancouver and those in Winnipeg (i.e., difference of frequent patterns between  the two locations) over the Christmas holiday. Similarly, ContrastViz could also visualize the difference between the items frequently purchased in December 2011 and those frequently purchased by the same groups of customers in December 2010 (i.e., i.e., difference of frequent patterns between the two time instances or ?snapshots?).

In general, ContrastViz allows the users to specify the two time instances when dealing with spatial and/or temporal data. For example, one can use ContrastViz to show the changes in frequencies between the current time and the start time. At the beginning (say, before we start the mining process), there is no frequent itemset. Hence, the frequencies of all itemsets are 0. By showing the changes in frequencies between the current time and the start time, we get the current frequencies of all itemsets because the change in frequency of an itemset Y = (current frequency of Y ) ? 0 = current frequency of Y . This is a special case of showing the changes. For other (more general) case, we show the change in frequencies of itemsets between two time instances A and B. ContrastViz shows the frequent patterns as soon as the patterns are mined/returned by the mining engine. This allows the users to monitor the mining process by viewing the changes.

On the surface, it may appear that there are only three types of changes (based on their Diff(X) values):  1) Diff(X) > 0, 2) Diff(X) = 0, and 3) Diff(X) < 0.

However, some types of these changes can be further subdi- vided. Recall that Diff(X) = frequency(X) in the ?A? view ? frequency(X) in the ?B? view. Here, we assume that an itemset X is frequent in both the ?A? and ?B? views. What if X is infrequent in one or both views? In this situation, the frequency of X in that view may be 0 or with a value < minimum support threshold. In other words, the frequency of X in that view is unknown to ContrastViz because we do not keep the frequency of any infrequent patterns (as most frequent pattern mining algorithms prune away infrequent patterns). A careful analysis reveals that, although we do not know the exact frequency of an infrequent pattern, we do know its upper bound. Consider the following situations:  ? If X is frequent in both ?A? and ?B? views, then ContrastViz uses Equation (1) to compute Diff(X). It can be positive, zero, or negative. ContrastViz indicates Diff(X) as a yellow horizontal line.

? If X is frequent in the ?A? view but not in the ?B? views, then the frequency of X in the ?B? view is within the integer range of [0, minsup). In other words, the frequency of X in the ?B? view is bounded above by minsup. As such, Diff(X) is in the range of (frequencyA(X) ? minsup, frequencyA(X)]. As X is frequent in the ?A? view, frequencyA(X) > minsup > 0. Hence, Diff(X) > 0. Instead of showing     Table I COLOUR SCHEME FOR DIFFERENT TYPES OF FREQUENCY CHANGE  Type Condition y-pos Colour Difference  i Frequent in ?A? view, infrequent in ?B? view > 0 Red Upper bound for difference ii Frequent in both ?A? & ?B? views > 0 Yellow Actual difference iii Frequent in both ?A? & ?B? views = 0 Yellow Actual difference vi Frequent in both ?A? & ?B? views < 0 Yellow Actual difference v Infrequent in ?A? view, frequent in ?B? view < 0 Blue Lower bound for difference  a range of frequency for the difference, ContrastViz shows the upper bound (i.e., frequencyA(X)). To make good use of visual clues, ContrastViz uses a different color?namely red?to indicate that the horizontal line does not represent the actual difference. The red line represents an upper bound of the difference (cf. the yellow line for indicating that the horizontal line rep- resenting the actual difference).

? If X is frequent in the ?B? view but not in the ?A? views, then the frequency of X in the ?A? view is within the integer range of [0, minsup). In other words, the frequency of X in the ?A? view is bounded above by minsup. As such, Diff(X) is in the range of [?frequencyB(X), minsup ? frequencyB(X)). As X is frequent in the ?B? view, frequencyB(X) > minsup > 0. Hence, Diff(X) < 0. Instead of showing a range of frequency for the difference, ContrastViz shows the lower bound (i.e., ?frequencyB(X)). Again, to make good use of visual clues, ContrastViz uses a different color?namely blue?to indicate that the horizontal line does not represent the actual difference.

The blue line represents a lower bound of the difference (cf. the yellow line for indicating that the horizontal line representing the actual difference).

Again, to make good use of visual clues, we use the colour scheme in Table I. This allows users to easily spot these five types of changes. For these types of changes, the ?A?B? view can be conceptually divided into three portions.

The top portion shows the positive changes, indicating either increases of frequencies for some frequent patterns or additions of some new frequent patterns. Besides the top portion, the middle portion of ContrastViz shows the frequent patterns with no changes in frequencies. The bottom portion shows the negative changes (indicating decreases of frequencies for some frequent patterns as well as deletions of some old frequent patterns.

Recall that, to reduce the amount of vertical space, ContrastViz applies three compression techniques to reduce the number of nodes and horizontal lines to be shown. It collapsed all horizontal lines representing itemsets of the same frequency onto a single line. In order to distinguish the line representing a real itemset from that representing a ?virtual? itemset formed as a compression result, Con- trastViz uses a solid line for the former and a dashed line for the latter. Here, as reader can easily observe horizontal  Figure 2. Representation of different types of frequency changes  lines for frequency changes in Types i and ii may have the same (positive) frequency-change value. For example, the frequencies of {a, c} and {b, e} are currently 250 and 50, respectively, in the ?A? view. The frequency of {a, c} were 200 in the ?B? view, and itemset {b, e} was even infrequent.

Then, the horizontal lines of these two itemsets are located at y=+50. In order to distinguish the line representing a real itemset of a certain type from that representing a ?virtual? itemset formed as a compressing horizontal lines of different types, ContrastViz follows the subtractive primary colour model and uses a red line to represent itemsets of Type i frequency-change and a yellow line to represent itemsets of Type ii frequency-change (in the expanded view), as shown in the top portion of Figure 2(a). ContrastViz uses an orange line to represent the line formed by collapsing itemsets of Types i and ii frequency-changes (in the collapsed/projected view), as shown in the bottom portion of Figure 2(a).

Similarly, horizontal lines for frequency changes in Types iv and v may have the same (negative) frequency- change value. For example, the frequencies of {b, c} and {a, e} were previously 250 and 20, respectively, in the ?B? view. The frequency of {b, c} is currently 230 in the ?A? view, and itemset {a, e} is infrequent. As such, the horizontal lines of these two itemsets are located at y=?20. In this case, ContrastViz again follows the subtrac- tive primary colour model and uses a blue line to represent itemsets of Type v frequency-change and a yellow line to represent itemsets of Type iv frequency-change (in the expanded view), as shown in the top portion of Figure 2(b).

ContrastViz uses a green line to represent the line formed by collapsing itemsets of Types iv and v frequency-changes (in the collapsed/projected view), as shown in the bottom portion of Figure 2(b).

(a) The ?A? view (b) The ?A?B? view Figure 3. ContrastViz showing mushroom data  In addition, ContrastViz provides users with an interactive feature (see Section IV) to select itemsets based on different types of frequency changes. Figure 3 shows two snapshots of ContrastViz. For example, after seeing the changes in the ?A?B? view (as shown in Figure 3(a)), the user clicked on [A] and [B] buttons to observe the ?A? and ?B? views (as shown in Figure 3(b)) respectively in order to understand how the changes were computed.

D. Brief Discussions  Discussion 1: Showing closed itemsets. So far, we have presented ContrastViz to show the frequencies and frequency changes of frequent itemsets. To reduce the number of itemsets to be displayed (especially in the expanded/zoom-in view), ContrastViz provides users with an option to present only closed frequent itemsets. Note that, although showing maximal frequent itemsets may further reduce the number, showing maximal itemsets loses frequency information, let alone visualizing its changes. This explains why ContrastViz provides users with an option to show only closed frequent itemsets?but not their maximal counterparts.

Discussion 2: Showing itemsets with a huge number of distinct values for frequency (or changes in frequency).

Recall that ContrastViz compresses several horizontal lines representing frequent patterns of the same frequency into one line. To a further extent, if the number of distinct frequencies in the mined results exceeds the number of vertical pixels (or the number of horizontal lines allocated for the space), we can apply the compression techniques further. To elaborate, we not only compress the itemsets of the same frequency (e.g., 83%) but also merge the itemsets with the same frequency range?say, frequency within the range [80%, 85%]. The lesser the allocated space, the broader the frequency range to be used in compression.

Discussion 3: Showing patterns comprising a large num- ber of domain items. While the above dealt with the scal- ability issue on the y-axis (i.e., scalable for large range of frequency values), a natural question is how to deal with the scalability issue on the x-axis? More specifically, what if the number of items exceeds the number of pixels allocated for the x-axis? The challenge here is that the y-axis contains frequency information (which is numerical data)  but the x-axis contains items (which are categorical data). In ContrastViz, we group items according to some hierarchy or taxonomy. For example, we group items ?apples?, ?bananas? and ?cherries? into a mega-item ?fruits?. Similarly, we also group ?donuts? and ?egg-tarts? into a mega-item ?snack?.

Since ContrastViz uses merging technique to collapse several horizontal lines representing several frequent itemsets of the same frequencies, it allows the user to expand (by clicking the [+] button)-or zoom in-so that he could get more detail regarding the frequent itemsets. Moreover, to save space, ContrastViz also allows the user to zoom out.



IV. EXTENSIONS OF CONTRASTVIZ  So far, we have shown the basic features of our proposed ContrastViz. In this section, we present some extensions of ContrastViz beyond the aforementioned basic features.

A. Determination of Minimum Frequency Threshold  Recall that frequent pattern mining aims to find all frequent itemsets. Since the introduction of the frequent itemset mining problem, an itemset is considered frequent if its frequency is no less than the user-specified minimum frequency threshold value. It is well known that finding an appropriate minimum frequency threshold value is not easy. With the help of ContrastViz, the user can now easily adjust the minimum frequency threshold value and view the corresponding frequent itemsets. Let us elaborate. With ContrastViz, the user can visualize all the frequent itemsets mined using a specific minimum frequency threshold value in the ?B? (i.e., before) view. He can then adjust the minimum frequency threshold to a different value (say, y%) and visualize all the frequent itemsets mined using y% in the ?A? (i.e., after) view. Moreover, he can also visualize the changes in the number of frequent itemsets in the ?A?B? view. For example, if he gets a very slight increase in the number of frequent itemsets in the ?A?B? view, he can then keep lowering the minimum frequency threshold value a bit more. On other hand, he gets a huge increase in the number of frequent itemsets in the ?A?B? view, which is an indication that he decreased the minimum frequency threshold value too much. Hence, he may want to raise the minimum frequency threshold value a bit in order to get     an appropriate minimum frequency threshold value for the database. By using our proposed ContrastViz, the user can easily compare the results (i.e., the mined frequent itemsets) obtained using two different minimum frequency threshold values so as to find an appropriate user-specified minimum frequency threshold value.

B. Online Mining  Many existing frequent itemset mining algorithms func- tion in a black-box fashion. In other words, at the beginning of the mining process, the algorithm takes the database and a user-specified minimum frequency threshold value as input; at the end, the algorithm returns to the user all the frequent itemsets. The user cannot monitor the mining process in between. Recall that setting the appropriate user-specified minimum frequency threshold value can be an iterative process. Hence, being able to monitor the mining process and being able to change the threshold value earlier would save unnecessary computation. To this end, our proposed ContrastViz allows the user to monitor the mining process as follows. We open the black box, and allow the user to visualize the frequent itemsets that have been mined so far.

Specifically, we set the ?B? view to show the results obtained at the beginning of the mining process (in which nothing has been mined) and we set the ?A? view to show the results obtained at the current time. This allows the user to visualize all the frequent itemsets have been mined when 10% of the database has been read; it also allows the user to visualize (a) all the frequent itemsets have been mined and (b) how the frequencies of these itemsets have changed when 20% of the database has been read. Similarly, the user can view (a) all the frequent itemsets have been mined and (b) how the frequencies of these itemsets have changed when 30%, 40%, ..., 100% of the database has been read. By using ContrastViz, the user is able to monitor the entire online mining process. Note that ContrastViz also allows the user to adjust the monitoring/display rate (i.e., adjust how often the results can be visualized: every 5% of transactions; or 10%).

During the monitoring process, the user is also allowed to stop the mining process, adjust the minimum frequency threshold, and re-mine the frequent itemsets. Consequently, it saves lots of unnecessary computation.

C. Incremental Mining  Besides online mining, our proposed ContrastViz is also applicable for visualizing and analyzing frequent patterns mined from incremental databases. For incremental mining, a database is updated periodically with insertion, deletion and/or update of transactions. To accommodate the chang- ing nature of the database, ContrastViz keeps receiving the mined frequent patterns from the mining engine. As soon as the database is updated, ContrastViz updates the representation of frequent itemsets.

Moreover, ContrastViz also shows the change in fre- quency. Note that in some applications, the user may want to find out the actual frequency of an itemset in a database instance, which can be seen from the ?A? or the ?B? views.

In some other applications, the user may want to figure out the difference in frequency of an itemset (instead of the actual frequency), which can be seen from the ?A?B? view. When using the ?A?B? view, changes in frequencies can be positive or negative. A positive change in frequency may be an indication of an increasing popularity of some itemsets. Conversely, a negative change in frequency may be an indication of a decreasing popularity of some other itemsets.

Let us consider a concrete example. We could find frequent itemsets from sales transactions over the period of January?December 2011. A month later, we obtain the sales transactions for January 2012. Instead of re-computing all frequent itemsets, we would like to apply incremental mining to update our mining results so that it reflects the inclusion of January 2012 data in the mining process. In this situation, we could use our proposed ContrastViz with the ?B? view showing the results for the frequent itemsets mined from data for the period January?December 2011 and the ?A? view showing the results for the frequent itemsets mined from data for the period up to January 2012. The ?A?B? view shows the difference between the two views (i.e., the increment). This view gives the user an insight about how the sales of different sets of items get changed (say, due to change in weather conditions).

D. Interactive Mining  Note that we can apply frequent itemset mining with interactive mining. Here, ContrastViz provides the user with the following interactive features for mining. While these interactive features are not essential, they do provide user convenience.

1) Query on types of changes. ContrastViz allows users to interactively set their preference on visualizing all types of changes or only a specified type of changes (e.g., only showing the changes caused by an addition of new frequent patterns).

2) Query on cardinality. ContrastViz allows the user to pose a query on cardinality, and it shows frequent itemsets of the user-specified cardinality k.

3) Query on itemsets. ContrastViz allows users to interac- tively select certain items of interest (e.g., promotional items in a store) and to pose queries on frequent itemsets.

4) Details-on-demand. Details-on-demand consists of techniques that provide more details whenever the user requests them. The key idea here is that ContrastViz gives users an overview of the entire dataset and then allows users to interactively select parts of the overview for which they request more details by hovering the mouse over different parts of the display.

5) Guaranteed visibility. Our proposed ContrastViz allows the user to specify his preference on an update of frequency.

For example, if the user is interested in finding those item- sets with decreasing frequencies, ContrastViz ensures that all horizontal lines with decreased frequencies are clearly shown even when these lines are collapsed into one.



V. USE OF CONTRASTVIZ IN REAL-LIFE APPLICATIONS  Orthogonal to different data mining tasks (e.g., incremen- tal mining, stream mining), our proposed ContrastViz can be used in many different real-life applications including the following scenarios.

Application 1: Differences in characteristics between two sets of mushroom collected at two sampling times. Botanists can use our proposed ContrastViz to visualize and analyze the differences in characteristics between two sets of mush- room collected at two different sampling times. For instance, observed from Figure 3, the top red line in the ?A?B? view indicates that 4 bruised mushroom samples have pungent odour are found in the ?A? view. These mushroom samples were not found before (i.e., absent from the ?B? view).

Similarly, the yellow diamond on y=?2 in the ?A?B? view and the diamond on y=5 in the ?A? view reveals that there were 7 poisonous mushrooms in the previous sample but their number is decreased by 2 (as indicated by ?2 in the ?A?B? view) to 5 in the current sample (shown in the ?A? view). Other changes in sets of characteristics of mushrooms can be observed from this figure.

Application 2: Trend of some mutual funds. Financial planners can use our proposed ContrastViz to visualize and analyze the trend of some interesting mutual funds. It is important to note that, while the scatter-plots with lines showing the prices of each stock are helpful in revealing the trend of a single stock, these scatter-plots with lines may not be too helpful in showing the trend of mutual funds, where each fund is a combination of multiple stocks. Two funds may overlap, but their compositions (or percentages of compositions) may be different. ContrastViz is an effective visualization system to show this information and tell the financial planners or their investors that, among similar in- vestments (which are similar in composition or percentage of multiple stocks), which combination (e.g., {Stock1, Stock3, Stock5} vs. {Stock2, Stock4, Stock6}) or which percentage (e.g., {50% of Stock7, 50% of Stock8} vs. {90% of Stock7, 10% of Stock8}) is more profitable.

Application 3: Offering and scheduling of popular courses. University administrators can use our proposed ContrastViz to find which collection of popular elective courses (e.g., AI, Bioinformatics, Computational Geometry) is frequently taken by students. With this information, the University administrators ensure that these courses will be offered in the next academic year. When scheduling classes, the University administrators also ensure that there will be no time conflict among these courses.



VI. EVALUATION  In this section, we show our results on evaluating our proposed ContrastViz. First, we compared functionality and performance of ContrastViz with some existing systems (e.g., PowerSetViewer [17], FIsViz [11], WiFIsViz [12]).

Then, we provide results on our user evaluation on the effectiveness of visualization provided by ContrastViz. We conducted two sets of evaluation tests. In the first set, we tested functionality of ContrastViz by discussing its applicability in various scenarios of real-life applications.

In the second set, we tested performance of ContrastViz.

A. Functionality  In the first set of evaluation tests, we considered differ- ent real-life scenarios. For each scenario, we determined whether our visualization system can handle these scenarios.

If so, we examined how these systems display the mining results. The evaluation results show that ContrastViz was effective in all these scenarios. A few samples of these scenarios are shown below: (Q1) Which combinations of elective courses have the high-  est increase in enrolment? The answer can be easily visible by noting the frequent patterns having the highest frequency change in the ?A?B? view.

(Q2) How big was the changes? The user can easily ob- tain the answer by noting the change value in the ?A?B? view.

(Q3) What was the old enrolment figure for this combi- nation of courses? The answer can be obtained by checking the frequency of this combination in the ?B? (i.e., before) view.

(Q4) Similarly, what is the new enrolment figure for this combination of courses? The answer can be obtained by checking the frequency of this combination in the ?A? (i.e., after) view. By using the interactive feature, the user can even be able to find out whether this combination is newly introduced or it is an existing combination having a sharp increase.

When compared with some existing visualization systems (e.g., PowerSetViewer, FIsViz, WiFIsViz), it was a lot easier to visually determine what is the differences in frequencies when using ContrastViz. This is because those existing visualizers were designed to visualize frequent patterns but were not designed to visualize frequency changes of these patterns.

B. Performance  In the performance test, we used (i) some real-life databases (e.g., mushroom dataset) from UC Irvine Machine Learning Depository, (ii) several IBM synthetic datasets [1], (iii) a student database for our department. In the first experiment, we varied the size of databases. The results showed that the runtime (which includes CPU and I/Os) increased almost linearly with the number of transactions     in the database. In the second experiment, we varied the number of items in the domain. The results showed that the runtime increased when the number of domain items increased. In the third experiment, we varied the user-defined frequency threshold. When the threshold increased, the num- ber of itemsets that satisfy the threshold (i.e., itemsets to be displayed) decreased, which in turn leads to a decrease in runtime.

C. Case Study: VAST 2008 Cell Phone Calls  In addition, we also applied ContrastViz to visually ana- lyze the cell phone call records provided in an IEEE VAST 2008 mini-challenge [6]. We used ContrastViz to compare the changes in frequencies of cell phone calls made by Caller 200 and its friends. For example, the experimental results indicate a sharp decrease in frequency from Day 7 to Day 8 (deletions of frequent patterns related to Caller 200 in Day 8 as he had no incoming or outgoing calls in Day 8).

When comparing the differences between Days 1 and 2, the ?A?B? view of ContrastViz showed that the change is 0 in terms of the number of incoming calls remain unchanged.

Then, we clicked the [A] button to get the ?A? view in order to find out the number of incoming calls was 4. There were other observations.



VII. CONCLUSIONS  Most of frequent pattern mining studies return a collection of the mined frequent patterns in textual forms, which can be very long and difficult to comprehend. To improve this situation, we proposed a frequent pattern visualiza- tion system, called ContrastViz, which provides users with explicit and easily-visible information among the frequent patterns (especially, the differences between two collections of frequent patterns). ContrastViz helps users to visualize and analyze all the frequent itemsets, their frequencies, as well as changes in frequencies; it also provides in-depth details of interesting itemsets (e.g., itemsets of a certain frequency and/or cardinality) through human interaction like mouse hover. Moreover, ContrastViz also provides users with additional features.

