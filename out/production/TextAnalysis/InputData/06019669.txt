

Abstract?Mining generalized association rules between items in the presence of taxonomies has been recognized as an important model in data mining. The classic Apriori itemset generation works in the presence of taxonomy but fails in the case of non- uniform minimum supports. In this paper, we extended the scope of mining generalized association rules in the presence of taxonomies to allow any form of user-specified multiple minimum supports. This method considers taxonomy of itemset, and can discover some deviations or exceptions that are more interesting but much less supported than general trends. Finally, the algorithms is validated by the example of  transaction database.

The result indicates this algorithm is successful in discovering consumer?s purchasing behavior by user specifing different minimum support for different items.

Keywords-consumer; minimum support; association rule; item; purchasing behavior

I.   INTRODUCTION The advent of the Internet is arguably one of the most  important innovations related to the field of marketing since 90?s in the 20th century. Its diffusion rate has been quite amazing. More and more organizations develop sophisticated interactive web environments to accommodate the on-line shopping for consumers. E-shoppers desire to define their preferences and customize the purchase information within the electronic shopping environment according to their individual needs. Therefore, consumer?s purchase behavior grows important for decisioner to do marketing.  An understanding consumer?s  purchase behavior contributes to decisioner drawing up enterprise?s marketing strategies, and  further makes success in competitive market.

Data mining can transform the vast amounts of data into useful information and knowledge, which extracts useful information from large data sets or databases[1-3]. It is the process of discovering consumers? knowledge, such as clusters, patterns, associations, changes or significant structures from large amounts of data stored in database.

Association rule mining is an important data mining method that determines consumer purchasing behavior in transaction databases [4-5]. Many applications [6-8] have used association rule mining techniques to discover useful information, including market basket analysis, product recommendation, web page pre-fetch, and so on. Agrawal et al. first introduced  the problem, and defined it as finding all rules from transaction data satisfying the minimum support and the minimum confidence constraints.

Due to its great success and widespread usage, many variants of association rule mining algorithms have been proposed, including algorithmic improvements[9], fuzzy rules , multi-level and generalized rules [10-12], quantitative rules, spatial rules[13], inter-transactional rules, interesting rules, temporal association rules, and hybrid optimization modeling.

Comprehensive reviews of this field of research are given in Chen et al.[14] and Han and Kamber [15].

These algorithms can be roughly classified into three categories, according to the data types they can handle: nominal/Boolean data, ordinal data [16-18], and quantitative data. Based on different assumptions about the underlying data, different methods have been developed to help discover association rules between items.

Briefly, an association rule mining algorithm works in two steps: (1) generate all frequent itemsets that satisfy minsup and (2) generate all association rules that satisfy minconf using the large itemsets. Intuitively, to discover frequent itemsets, each transaction has to be inspected to generate the supports of all combinations of items, which, however, will suffer for lots of I/O operations as well as computations. Therefore, most early work was focused on deriving efficient algorithms for finding frequent itemsets [19-20].

Although the great achievement in improving the efficiency of mining algorithms have already been made, the existing association rule models used in all of these studies incur some problems. In many applications, there are hierarchies, explicitly or implicitly, over the items. It may be more useful to find association at different levels of the taxonomy than only at the primitive concept level. In addition, the frequencies of items are not uniform. Some items occur very frequently in the transactions while others rarely appear.

In reality, however, the data items may occur either relatively frequently or not, according to the characteristics of the database, and its frequency in the database does not satisfy the minimum support but appears associated with the specific data in high proportion of its frequency. Nevertheless, the existing association rule discovery techniques do not consider the occurrence frequency pattern of data, and discover the association rules using the same support on the whole data, so     the rules associating with infrequent data cannot be discovered.

In this paper, a novel algorithm of discovering association rules with multiple minimum supports is proposed in order to solve the problems above. The rest of this paper is organized as follows. In section 2, the basic concept about generalized association rules is introduced. In section 3, we present the proposed algorithm with multiple minimum supports for finding some exceptions that are more interesting but much less supported than general trends. In section 4, we illustrate an example of discovering consumer?s purchasing behavior by the new algorithm. Finally, discussion and conclusion for this algorithm is stated in section 5.



II. THE BASIC CONCEPTS  OF ASSOCIATION RULE Association rule is represented by X ?Y, where X and Y  are a set of items. The rule means that the transaction records in database that contain X tend to contain Y. The probability whose transactions in the database containing items in A tend to contain items in B is called the confidence of the rule.

The support of the rule is the fraction of the transactions that contain all items in both A and B.

Let I = {i1, i2, . . . , im} be a set of items and D = {t1, t2, . . . , tn} be a set of transactions, where each transaction ti = {tid, A}has a unique identifier tid and a set of items A (A? I ). To study the mining of generalized association rules from D, we assume that the taxonomy of items, T, is available and denoted as a directed acyclic graph on I?J, where J = {j1, j2, . . ., jp} represents the set of generalized items derived from I. An edge in T denotes an is-a relationship, that is, if there is an edge from j to i we call j a parent (generalization) of i and i a child of j. The meanings of ancestor and descendant follow from the transitive-closure of the is-a relationship.

Given a transaction t = {ID, A}, we say an itemset B is in t if every item in B is in A or is an ancestor of some items in A.

An itemset B has support s, denoted as s = sup(B), in the transaction set D if s% of transactions in D contain B. Given a set of transactions D and a taxonomy T, a generalized association rule is an implication of the following form:A ? B.

According to the definition of generalized association rules, an itemset is composed not simply of items in leaves of the taxonomy but also of generalized items in higher levels of the hierarchy. The ancestors of items in a transaction must be taken into account while determining the support of an itemset.

To allow the user to specify different minimum supports for different items, the uniform support used in generalized association rules must be extended, and  the minimum support should be changed. The following concepts are introduced so that user can specify different minimum supports for different items in the taxonomy.

Let )(ams  denote the minimum support of an item a in I?J. An itemset A = {a1,a2, . . .,ak}, where ai?I?J for 1? i ?k, is frequent if the support of A is larger than the lowest value of minimum support of items in A.

sup(A) ? min )(ams i , ?ai A  Generalized associations rule A?B is strong if the support satisfies the following condition:  sup(A?B) ? min )(ams i , ?ai A?B, and Conf(A?B) ?  minconf Given a set of transactions D, a taxonomy T composed of  items a1, a2, . . .an, and a minimum confidence, minconf, the problem of mining generalized association rules with multiple user-specified minsupports ms(a1),ms(a2), . . .ms(an) associated with each item in T is to find all generalized association rules that are strong.



III.   ALGORITHM WITH MULTIPLE MINIMUM SUPPORTS  The process of mining generalized association rules with multiple minimum supports is the same as that used in traditional association rules mining.

Let k-itemset denote an itemset with k items. Our algorithm follows the level-wise approach widely used in most efficient algorithms to generate all frequent k-itemsets. First, scan the entire database D and count the occurrence of each item to generate the set of all frequent 1-itemsets (L1). In each subsequent step k, k?2, the set of frequent k-itemsets, Lk , is generated as follows: (1) Generate a set of candidate k- itemsets, Ck, from Lk--1, using the apriori-gen procedure to scan the database D, count the occurrence of each itemset in Ck, and prune those with less support. The resulting set is Lk.

The effectiveness of this approach relies heavily on  Apriori algorithm. If a k-itemset is frequent, then all of its subsets are frequent or, contrapositively, if any subset of a k-itemset is not frequent, then neither is the k-itemset. Hence, we can preprune some less supported k-itemsets in the course of examining (k - 1)-itemsets. Apriori algorithm, however, may fail in the case of multiple minimum supports.

To solve this problem, we make the following definition: If a sorted k-itemset {a1, a2, . . ., ak}, for k?2 and ms(a1) ?  ms(a2)?. . . ?ms(ak), is frequent, then all of its sorted subsets with k-1 items are frequent, except for the subset {a2, a3, . . .,aki}.The k-itemset {a1, a2, . . ., ak} has k subsets with k- 1 items, which can be divided into two groups with or without a1 included:  group 1: {a1, a2, . . ., ak-1}, {a1, a2, . . ., ak-2, ak}, {a1, a3, . . ., ak};  group 2: {a2, a3, . . ., ak}; Note that all of the itemsets in group 1 have the same lowest  minimum item support as that of {a1, a2, . . ., ak}, while {a2, a3, . . ., ak}does not has. Again, let Lk and Ck represent the set of frequent k-itemsets and candidate k-itemsets, respectively.

Assume that any itemset in Lk or Ck is sorted in increasing order of the minimum item supports. The apriori-gen procedure has obstacles in generating frequent itemsets . For k =2, the procedure apriori-gen(L2) fails to generate all candidate 2-itemsets in C2. To solve this problem, we suggest to use a sorted itemset, called frontier set, F={aj; aj1 ; aj2 ; . . . ; ajl }, to generate the set of candidate 2-itemsets, where     aj = min{ ai | sup(ai ) ?ms(ai)} ms(aj) ?ms(aj1) ?ms(aj2)?. . . ?ms(ajl), sup(aji ) ? ms(aj) for 1?i?l The procedure, C2-gen(F), using F to generate C2 is as  follows: for each item a? F in the same order do if sup(a) ? ms(a) then for each item b?F that is after a do if sup(b) ? ms(a) then insert <a, b> into C2;  if (k=2)  then  insert into Ck; select  p.iteml; q.item1 from L1  else insert into Ck select  p.iteml; p.item2;?; p.itemk-1; q.itemk-1 where  p.item1=q.item1, ?, p.itemk-2=q.itemk-2, p.itemk-1 < q.itemk-1  In addition, the main problem arisen from incorporating taxonomy information into association rule mining is how to effectively compute the occurrences of an itemset A in the transaction database D. This involves checking for each item ? A whether or any of its descendants are contained in a transaction t. Firstly, we simplify the task by first adding the ancestors of all items in a transaction t into D. Then a transaction t contains A and only if the extended transaction t contains A.

Ancestors pre-computing: instead of traversing the taxonomy T to determine the ancestors for each item, we pre- compute the ancestors of each item. The result is stored as a table called IA. Ancestors filtering: only ancestors that are in one or more candidates of the current Ck are added into a transaction. That is, any ancestor in IA that is not present in any of the candidates in Ck is pruned. Itemset pruning: in each Ck, any itemset that contains both an item and its ancestor is pruned. This is derived from the following observation. Note that the pruning should be performed for each Ck (k?2), instead of C2 only.

To solve the problem of computing the occurrences of an itemset A in the transaction database D, the computing algorithm is as follows.

Create IA; SMS = sort(IMS); F = F-gen(SMS, D, IA); L1 = {a?F | sup(a) ? ms(a)}; for ( k = 2; Lk?1? ?; k++ ) do  if k = 2 then C2 = C2-gen(F); else Ck = Ck-gen(Lk?1); Delete any candidate in Ck that consists of an item and its ancestor; Delete any ancestor in IA that is not present in any of the candidates in Ck; Delete any item in F that is not present in any of the  candidates in Ck; for each transaction t  D do  for each item a?t do Add all ancestors of a in IA into t;  Remove any duplicates from t; Delete any item in t that is not present in F; Ct = subset(Ck, t ); for each candidate A ?Ct do  Increase the count of A; end for Lk = {A?Ck | sup(A) ? ms(A[1])};  end for Result =?kLk; F = F-gen(SMS, D, IA): for each transaction t ?D do  for each item a ? t do Add all ancestors of a in IA into t; Remove any duplicates from t;  for each item a ?t do Increase the count of a;  end for for each item a in SMS in the same order do  if sup(a) ? ms(a) then Insert a into F; break;  end if end for  for each item b in SMS that is after a in the same order do if sup(b) ? ms(a) then insert b into F.



IV.  ILLUSTRATIVE EXAMPLE To prove the proposed algorithm above, we give an  example to illustrate the algorithm with multiple minimum supports. Suppose that a shopping transaction database D in Table 1 consists of items I = {PR3, PR4, PR2, CR1, CR2, SR}.

The taxonomy of the items is as shown in Fig.1.

TABLE I. TRANSACTION RECORDS  ID of  Transaction Items Purchased 110 PR3, CR2 111 PR2, SR 112 PR4, PR2  PR  PR1 PR2  PR3 PR4  CR  CR1 CR2  SR  Fig.1 Taxonomy of items in database D     113 PR3, PR2, CR2  114 SR  115 CR1  Let the minimum support (ms) associated with each item in the taxonomy be as follows:   TABLE II. THE MINIMUM SUPPORT OF EACH ITEM  Item Minimum Support Item Minimum Support PR 80% SR 20%  PR1 65% CR 35% PR2 70% CR1 25% PR3 25% CR2 25% PR4 60%   The resulting F is shown in Table 3. We observe that ms(SR)  is the smallest of all items, and SR could join with any item whose support is greater than or equal to ms(SR) = 20% to become a candidate 2-itemset without losing any 2-itemsets.

The 2-itemsets {SR, CR1} and {SR, PR4} could not become candidates because sup(CR1) or sup(PR4) is less than ms(SR),  and the supports of {SR,CR1} and {SR, PR4} could not be greater than sup(CR1) and sup(PR4), respectively, according to the downward closure property. Therefore, we keep items whose support is greater than or equal to ms(SR) in F, and discard CR1 and PR4.

TABLE III.  THE MINIMUM SUPPORT OF EACH ITEM Item Sorted  ms Support F SR 20% 33.3% SR  PR3 25% 33.3% PR3 CR1 25% 16.7% CR2 CR2 25% 33.3% CR CR 35% 50% PR1 PR4 60% 16.3% PR2 PR1 65% 50.2% PR PR2 70% 50.0% PR 80% 66.7%  According to the algorithm with multiple minimum supports, the generalized result of the transaction database D is as shown in table 4 and 5.

TABLE IV.   SUPPORT AND COUNTS OF TRANSACTION DATABASE D  1-itemset Counts Support 2-itemset Counts Support 3-itemset Counts Support  SR 2 33.3% SR, PR 1 16.5% CR, PR1, PR2 1 16.6%  CR 3 50.0% SR, PR2 1 16.5% PR3, CR, PR2 1 16.6%  CR1 1 16.6% CR, PR 2 33.3% CR2, PR1, PR2 1 16.6%  CR2 2 33.3% CR, PR1 2 33.3% CR2, PR3 , PR2 1 16.6%  PR 4 66.7% CR, PR2 1 16.5%  PR1 3 50.0% PR3 , CR 2 33.3%  PR2 3 50.0% PR3, PR2 1 16.6%  PR3 2 33.3% CR2, PR 2 33.3%  PR4 1 16.6% CR2, PR1 2 33.3%  CR2, PR3 2 33.3%  CR2, PR2 1 16.6%  PR1, PR2 2 33.3%  PR4, PR2 1 16.6%   TABLE V. THE RUNNING RESULTS OF THE ALGORITHMS IN TRANSACTION DATABASE D  Item ms Support F L1 C2 L2 Item ms Support F L1 C2 L2  SR 2 33.3% SR SR SR,  PR3 SR, PR2 1     PR3, PR4  PR3 3 50.0% PR3 PR3 SR, CR2 SR, PR 1     PR3, PR2  CR2 1 16.6% CR2 CR SR, CR PR3, CR 1     CR, PR1  CR 2 33.3% CR PR4 SR, PR4 PR3, PR4 1     CR, PR2  PR4 4 66.7% PR4  SR,  PR1 CR,  PR1      CR, PR  PR1 3 50.0% PR1  SR,  PR1 CR, PR      PR4, PR1,  PR2 3 50.0% PR2  SR,  PR2       PR4, PR2,  PR 2 33.3% PR  PR3, CR       PR4, PR

V. CONCLUSIONS The classic Apriori itemset generation works in the  presence of taxonomy but fails in the case of non-uniform minimum supports. In this study, this paper proposes  novel     algorithms with multiple minimum support for mining generalized association rules. This method considers taxonomy of itemset, and allows users to specify different minimum support for different items. The merits of this algorithm lie in finding association rules between items at different hierarchy levels.

Finally, this algorithm is validated by the example of transaction database. The result indicates the algorithm is successful in discovering consumer?s purchasing behavior.

The research presented in this paper makes contribution to understanding consumer?s behavior. However, there is still space for improvement. The future work should still consist of more experiments with other data sets. It is believed that the better result will be obtained.

