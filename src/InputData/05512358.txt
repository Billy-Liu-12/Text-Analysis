A Novel Method of Mining Frequent Item Sets

Abstract ? The aim of mining association rules is to discover the association relationship among the item sets from mass data.

In some practical applications, its role is mainly to assist decision- maker. The paper proposes a novel association rule algorithm of mining frequent item sets, which introduces a new data structure and adopts compressed storage tree to improve the run performance of this algorithm. At last, the experiment indicates that the algorithm proposed in this paper has much more advantages in load balance and run time compared with most existing algorithms.

Index Terms ? Data Mining, Association Rules, Frequent Item Sets

I.  INTRODUCTION  Data mining[1], a multidisciplinary field, is a KDD process. And its aim is to extract some interesting patterns and rules from mass data. As one of the most well-known Data mining problems, association rules mining is more and more attractive to some scientists. At present, we know lots of association rules mining technology have been successfully applied in some financial enterprises, and have exerted much more effect on the customer requirement in bank.

The aim of mining association rules[2] is to discover the association relationship among item sets from mass data.

An association rule is an implication of the form A B , where A  and B are the disjoint subsets of the item set  1 2 7{ , ,... }I i i i= . And each association rule holds support s and confidence c in the transaction set D , where s and c respectively is the percentage of transactions in D  that contain A B  and A  that also contain B , namely[3],  ( ) ( ) ( ) ( | )  s A B p A B c A B p B A  = =    Considering the arguments s and c, rules could be divided into two classes: strong rule and weak rule. Rules are called strong, if and only if they satisfy both a minimum support threshold and a minimum confidence threshold.

In most cases, A transaction could be denoted by a binary string[4], and each numerical digit denotes the existing state of corresponding item. In this method the computation of the frequency  of  items is very easy, but in practice, the size of a transaction is much smaller than the size of the set I , and so the transaction set D  may be denoted by a sparse matrix which would not take well advantage of the limited memory resource. The paper adopts transaction tree to storage transaction. Before detailing the theory of transaction tree, we first need to acquaint ourselves with the concept of storage  tree. To illustrate this method, let?s study the following figure 1, where a complete storage tree between i1 and i3 has the formal as: brother nodes are sunwise arranged according to alphabet order, and every node is denoted by a set, which consists of two parts, namely node element and all nodes in the path from this node to the root.

Fig. 1 A complete storage tree between i1 and i4  Above tree structure could be view as a set containing all paths from the root to each leaf node, and each element of this set corresponds to the all item sets occurring in some transaction.

Now, we introduce the concept of transaction tree[5].

Transaction tree is the modified version of storage tree, and it gives a mark to every node for recording the number of the transactions containing corresponding item set. Figure 2 indicate a transaction database D  and corresponding transaction tree.

Fig. 2 Transaction database D and the corresponding transaction tree Besides, we also want to present the data structure  applied in our paper. We know, the data structures in different algorithms are different, and according to the data layout, these data represents could be grouped into three classes: horizontal method, vertical method and hybrid method[6].

Most candidate sets generating detection algorithms like Apriori algorithm adopt horizontal data layout, while most pattern growth algorithms, which contain FP-growth   Root                  7 1  Iid Items 1 3 4 5 6 7 9  2 1 3 4 5 13  3 1 2 4 5 7 11  4 1 3 4 8 1 3  5 1 3 4 10  Root  1 2 3  2 3     Proceedings of the 2010 IEEE  June 20 - 23, Harbin, China    algorithm, H-Ming algorithm and OP algorithm and so forth, adopt the hybrid method[7] that combines horizontal method with vertical method[8]. In this paper, we use a data structure called ?IG?, which also is hybrid method. And this structure possesses the following advantages[9]:  One-to-one mapping relation between  item labels and natural number field;  Ignoring transaction labels and linking corresponding item in different transactions;  Item table IT storing all items occurring in the transaction database, which element has a support count. And the first occurrence of all items all link to the item table IT.

Linking all transactions to the item table IT; IL represents mass transactions in transaction  database D , and these transactions are the subsets of all items in the item table IT. The relative position of the elements in these item sets is in accordance with the position in the item set IT. Besides, each item in one transaction is linked to corresponding item in next transaction. In other words, we use a chain table to link the first occurrences of all items, and so we could easily get the support count of every item.

As shown in figure 3, all frequent item sets whose support greater than the smallest support count 2 in the transaction database D are considered and recorded in the item table IT. For example, to examine the occurrence of i7, we first localize the position of i7 in I1 from IL, and then find i7 in I3 other than to scan I2.

Fig. 3 The data structure IG  Due to holding all advantages of horizontal data layout and vertical data layout, similar to H-structure, IG guarantees the implement of the algorithm that applies these two data layouts. The difference between IG and H-structure is: in IG, there is a link between every occurrence and next occurrence of each item, while in H-structure, the chain table always points to the first occurrence of each item, so to fetch some item, and we have to traverse from the head of some transaction. Because the chain table in IG directly points to the same item of different transactions, when we traverse all occurrences of each item, the time needed is drastically shortened to some extent.



II. MINING ALGORITHM  At present, many relative algorithms have been proposed, and could be group into three classes[10,11]: the first class is the improved algorithm based on Apriori algorithm, which is built upon the Boolean association rule problem proposed by Agrawal R. in 1994; the second class is partition-based algorithm, and which is high parallelable, because ultimate frequent item sets generating depends on the frequent item sets on many independent logical blocks; the last class is FP-tree frequent item sets algorithm whose proposal successfully overcomes the drawback that Apriori algorithm may brings redundant candidate item sets. The paper proposes an association rules mining algorithm based on the third class algorithm.

Firstly, we introduce the concept of compressed transaction tree. Because of having many same subtrees, a complete storage tree must waste lots of memory resource, so to diminish the node size of the transaction tree, we would adopt a compression method to group all transactions to share the same nodes. As shown in figure 4, the storage tree has three same subtrees t1, t2 and t3, and generating a complete storage tree needs lots of extra memory.

Fig. 4 The storage tree containing three same subtrees  So in the paper, we adopt a compressive technology to store the same subtrees to diminish the node size of the storage tree, as shown in figure 5, which node size is decreased to 8 nodes from 16 nodes in figure 4. For example, for an n-item set, its corresponding complete storage tree has 2n nodes, while its compressed storage tree has 2n-1 nodes at the most, so the size of the storage tree is diminished to the half at the least. In fact, the number of all nodes in the transaction database D  is always seriously less than the maximum of the problems discovered in the frequent item sets.

Of course, each node in the compressed storage tree needs to add a new field, which includes two parts that are the layer and the access count of the head item of each different sub item set, to store some extra information about the nodes pruned from the complete storage tree.

t3 t2  t1  Root          3 4      Item 1 3 4 5 7 Count 4 4 5 3 2IT  IL 3 4 5 7  1 4 5 7  1 3 4 5  1 3 4  1 3 4  I1  I2  I5  I4  I3      Fig. 5 The compressed transaction tree;  In figure 5, the node 3 has three access counts: (0,1), (1,1) and (2,1), where the mean of the access count (0,1) is that there is a transaction, which head item locates the zeroth layer, and a path, which includes three nodes i1,i2 and i3, from the root to the node 3. The next access count (1,1) means: there is a transaction whose head node locates the first layer and a path that consists of the i2 and i3 from the root the node 3. In like manner, (2, 1) also means there is a transaction whose head node locates the second layer and a path that is composed of the root and the node 3. So if we suppose the transaction count of each node of the storage tree in figure 4 is 1, then the item sets surrounded by dash rectangles could map to the item sets of the compressed transaction tree in figure 4.

we note these dash rectangles are not the parts of the data structure IG, just for illustration expediently.

Because the paths from the root to those different nodes correspond to the different transactions, we could group all transactions by sharing the same items, which high improves the performance of the mining algorithm.

Next, we would describe the mining algorithm based on the pattern growth algorithm in detail, which adopts the above compressed transaction tree.

Algorithm IFP-growth includes four procedures: the first procedure is to extract the 1-item sets. Firstly, we should initialize the item table IT. Because the frequent item sets meet the prior principle, which means they hold the character of anti-monotone, for mining frequent item sets, we only need 1-item sets, which are attained by scanning the transaction database and finding the item sets whose support count greater than mini-sup. Then we store these frequent 1-item sets to the item table IT. To facilitate the carryout of the next procedure, we sort all elements by ascent according to their support count and denote them by the integer; the second procedure is to generate the compressed transaction tree. When we generate the compressed transaction tree, the items is denoted by their label, and insert all different transactions to the compressed transaction tree. The nodes of the compressed transaction tree correspond to the all frequent 1-itemsets. The count set of each node denotes the number of the transactions, which contain the subsets of all items in the path from the root to this node; The next procedure is to traverse the compressed transaction  tree to constitute the item table IT and the transaction chain IL for generating IG; The last procedure is to mine frequent item sets. In this procedure, we use a recursive function to assist mining the frequent k-item sets, where k > 2.

To illustrate the above procedures, we consider the following example. Suppose mini-sup is 2, we want to mine all frequent item sets in the transaction database. The first step is to scan all transaction for attaining frequent 1-item sets.

Examine every item in each transaction whether is the element of the item table IT or not, if the answer is positive, and then add the count of corresponding element, otherwise we should add this item to the IT and let its count be 1. When we finish scanning the database, we get all frequent 1-item sets {1}, {3}, {4}, {5}, {7}. After attaining all 1-item sets, we should sort all elements in IT by ascent according to their supports and use the integer to denote them. As show in table 1,  Table 1 Item table IT index item  Count  The second step is to generate a transaction tree. We utilize the information in table 1 to insert all transactions containing some 1-item set corresponding to some node into the transaction tree. For example, i7 is mapped to it1 in the transaction tree, i5 is mapped to i2, i3 is mapped to it3 and so on. As shown in figure 6,   Fig. 6 The compressed storage tree of the sample database  Each node all stores the count of the transactions that contain the corresponding item, so every node in the tree may be accessed many times. For example, the count (0, 0) of the node 5 in the transaction tree denote the item set {it1, it2, it3, it4, it5} that is not occur all the time, where the first 0 means the item set starts at the zeroth layer and the second 0 means the count of the transactions that contain this item set.

To implement this compressed transaction tree, we need to put all access point into a array, and some layer of a access point is a array index other than storing it explicitly.

The third step is to generate IL in the item table IT, and traverse the transaction tree by applying depth-first algorithm.

Theoretically, all nodes whose transaction counts greater than    0 0 1 1 2 2 3 0 4 0  0 0 1 0 2 0 3 0   0 0 1 0 2 0  0 0 1 0  0 0 1 0    3 4  0 0 1      55 1235  0 1 1 0 2 0  0 1 1 0   0 1 1 1 2 1 3 1     0 1 1 1 2 1    0 1 1 1  0 1 0 1 1 1   2 3 4  3 4 4   0 1 1     13 0 1  0 1 134       0 in the tree should be mapped to the access points of the transaction chain. In figure 6, there are 3 such nodes, and it means there are 3 corresponding access points of the transaction tree. What we to do is only to link the all non-zero accesses to the corresponding lines in the transaction chain. As shown in figure 7,   Fig. 7 Item Group data structure  In the improved IG data structure, we put the access count of every line to a array, so the array indexes are not stored directly.

The last step is to mine longer frequent item sets than 1- item sets. The result is shown in table 2.

table 2 The frequent item sets mined recursively Prefix T1(count) Frequent Item set (count)  1 2(2),3(1),4(1),5(2) 1(2),1 2(2),1 5(2)  12 3(1),4(1).5(2) 1 2 5(2)  2 3(2),4(2),5(3) 2(3),2 3(2),2 4(2),2 5(3)  23 4(1),5(2) 2 3 5(2)  24 5(2) 2 4 5(2)  3 4(3),5(4) 3(4),3 4(3),3 5(4)  34 5(3) 3 4 5(3)  4 5(4) 4(4),4 5(4)  5 None 5(5)   The algorithm IFP-growth is described as follow:   Algorithm IFP-growth(D, min-sup. All frequent item sets) begin procedure Generate_IFIS ( DB ) //generating 1-item sets // transaction I, item i begin for I D? ? for i I? if i IT? then count ( i ) ++; else inset i to IT; count ( i )  = 1; end procedure Gene_ITree ( D ) //generating transaction tree begin for I D? ?  for i I? if i IT?  and count ( i ) >= min-sup then insert i to transaction ree; end procedure Gene_IG ( ITree )         //generating IG //transaction IL begin for depth-first traverse path ITree? ? let path map  to a access  in IL; add the access count into the access; link IL to the previous occurrence of  i? ; end procedure IFP-growth ( IG ) //temporary list T1 begin for i IT? ? and count ( i ) >= min-sup add i to the frequent item sets; generate T1; for 1m T? ?  and count ( m ) >= min-sup add im to frequent item sets; for 1n T? ?  and count ( n ) >= min-sup after m Mfis ( im, n ); end procedure Mfis ( im, n ) //generating frequent pattern  recursively begin      // im is prefix, n is the item after im patterm cim=the count list of im item; cn=the count list of n item; cimn cim cn= ; if cimn>=min-sup new_im = union im and n; add new_im to the frequent item sets; for 1i T? ?  and count ( i ) >= min-sup after n Mfis ( new_im , 1); end end   After generating frequent 2-item sets using the prefix it1, we use the count list of the associative items to generate frequent 3-item sets. The rest can be done in the same manner.



III. THE EXPERIMENTAL ESTIMATION  The paper uses PC as the experimental environment, and the configuration of the PC is Pentium(R) Dual Core CPU 1.80GHZ, 896M memory, 120G IDE hard disk. The operating system we use is Windows XP, and the programming environment is Visual Studio 2008, and the programming language is C#, and the dataset we use is commercial transaction record.

In our dataset, there are 150, 000 records, and in all records there are 1000 items. Besides, in each record, there is about 15 items.

IT Index 1 2 3 4 5 Item 7 5 3 1 4  Count 2 3 4 4 5  IL 2 3 4 5  1 2 4 5  1 2 3 5  I1  I2  I3 1        The scalability is an index that measures the ability to either handle growing amounts of work in a graceful manner or to be readily enlarged. The following figure 8 indicates the scalability of our algorithm whose minimum supports respectively is 0.002, 0.004 and 0.005.

The size of dataset/10,000  R es  po ns  e tim  e( S  )  (a) min-sup=0.002       The size of dataset/10,000  R es  po ns  e tim  e( S  )  (b) min-sup=0.004      The size of data/10, 000  R es  po ns  e tie  m (S  )  (c) min-sup=0.005 Fig. 8 The change of the response time in our algorithm as the size of data  growing, We know FP-growth algorithm is a classical algorithm.

In our paper, we compare our algorithm with FP-growth upon the scalability when the size of data respectively are 0.002, 0.004 and 0.005. As shown in figure 9.

The size of dataset/10,000  R es  po ns  e tim  e( S  )  (a) min-sup=0.002       The size of dataset/10,000  R es  po ns  e tim  e( S  )  (b) min-sup=0.004   The size of dataset/30,000  R es  po ns  e tim  e( S  )  (c)min-sup=0.005 Fig. 9 The scalability of our algorithm compared with FP-growth   Paper [12] proposed a way to reduce times of scanning  transaction database to reduce the cost of I/O.



IV. CONCLUSIONS AND FUTURE WORK  This paper first discusses the theory of foundations and association rules and presents an association rules mining algorithm, namely, FP-growth algorithm. And then we propose an improved algorithm IFP-growth based on many association rules mining algorithms. At last we implement the algorithm we propose and compare it with algorithm FP- growth algorithm. The experimental evaluation demonstrates its scalability is much better than algorithm FP-growth.

Now, let?s forecast something we want to do someday.

Firstly, we would parallelize our algorithm, because data mining needs massive computation, and a parallelable environment could high improve the performance of the algorithm; Secondly, we would apply our algorithm on much more datasets and study the run performance; At last, we would study the performance when the algorithm deal with other kinds of association rules.

