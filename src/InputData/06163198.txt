An Efficient Agent based Framework  for Distributed Medical Databases

Abstract?Many algorithms have been proposed for the discovery of association rules. The efficiency of these algorithms needs to be  improved to handle real-world large datasets. Specifically, for data stored in heterogeneous and geographically distributed healthcare centers. This efficiency can be determined mainly by three factors. The way candidates are generated, the way their supports are counted and the data structure used. Most papers focus on the first and the second factors while few focus on the underlying data structures. In this paper, we present a distributed Multi-Agent based algorithm for mining association rules in distributed environments. The distributed MAS algorithm uses Bit vector data structure that was proved to have better performance in centralized environments. The algorithm is implemented in the context of Multi-Agent systems and complies with global communication standard Foundation for Intelligent Physical Agents (FIPA). The distributed Multi-Agent based algorithm with its new data structure improves implementations reported in the literature that were based on Apriori. The algorithm has better performance over Apriori-like algorithms.

Index Terms?Association Rules, Distributed Data Mining, Multi-Agent System.



I. INTRODUCTION Finding frequent itemsets is one of the most important data  mining research fields. The problem was first presented in [1] with another extension in [2]. Its main algorithm, Apriori, had an impact on other data mining techniques as well.

Association rules and frequent itemsets mining became a widely research area, and hence, most researchers have tried to present faster algorithms. Many of these algorithms were Apriori-based or Apriori extensions. Most association rule algorithms use hash-trees extensively to speed up the search for itemsets. Those who adopted Apriori strategy tended to adopt the whole set of procedures and data structures as well.

Recently, algorithms have been proposed to increase the efficiency of these algorithms to improve real-world large datasets. Some algorithms focused on the way candidates are generated. Others focused on the way their supports are counted. Few researchers have focused on the underlying data structure used which was a hash-tree in case of Apriori-based algorithms. Park et al. [3] has invented a well known technique called DHP (Direct Hashing and Pruning) and was enhanced in [4]. DHP uses a hash technique that makes it very efficient for the generation of candidate itemsets, in particular for the large two-itemsets and employs effective pruning techniques. The reduction of the number of generated candidates greatly improves the performance of the whole process. However, Park used this hashing technique to mine association rules in centralized database.

Bodon [5] has demonstrated that a Trie data structure outperforms hash-trees. Tries appeared to offer simpler and scalable algorithms which turned out to be faster. Bodon has implemented Apriori association rule mining algorithm using Trie data structure rather than Hash Tree. Further publication [6] proved that the data structure Trie appeared to be faster than the original algorithm. Bodon has extended his  implementation for mining itemset sequences in [7]. Many other researchers have adopted the Trie structure to mine association rules on centralized databases [8] [9].

Recently, a novel approach by Dong has presented a very effective algorithm named as BitTableFI [10]. The algorithm uses a special data structure BitTable horizontally and vertically to compress database for quick candidate itemsets generation and support count, respectively. Dong has proven that this data structure is faster than the hash tree used by Apriori. Results were obtained by applying the BitTable data structure on two synthetic centralized datasets. Song et al. [11] is one of the extensions that is based on this technique.

In this paper, we present an efficient distributed MAS algorithm. The efficiency of the algorithm is obtained by modifying the data structure used and the way candidates are generated and counted. The rest of the paper is organized as follows. The next section describes the proposed distributed BitTable Multi-Agent based algorithm. Section 3 describes the implementation of the proposed algorithm on a real world distributed medical databases. The algorithm analysis and evaluation are presented in Section 4. The last section presents the conclusion and the future work.



II. DISTRIBUTED BITTABLE MULTI-AGENT ASSOCIATION RULES MINING ALGORITHM  In earlier work, we have presented an enhancement for Apriori algorithm using a simpler data structure [12]. The algorithm was implemented on centralized database. Previous work has extended the basic concepts of Apriori like algorithms to work in distributed environments using cooperative Multi-Agents [13]. The parallelism of the candidate generation and the support count processes among these distributed agents helped in decreasing the time needed for the whole mining process. The previously proposed      algorithm was implemented on distributed medical databases [14] for patient diagnostic system regarding Inflammation of urinary bladder and Nephritis of renal pelvis origin diseases.

The proposed algorithm improved the diagnostic knowledge and discovered the diseases based on the minimum number of effective tests, thus, provided accurate medical decisions based on cost effective treatments. The constructed Knowledge base could predict the existence or the absence of the diseases, thus improving the patient medical service.

In this section, we present the distributed BMAS algorithm which combines the best of different association rules algorithms and techniques in order to achieve the best performance and execution time. The proposed algorithm combines the association rules as a data mining technique, the Multi-Agents to decrease the time needed for the candidate generation and the support count processes [13] and the BitTable data structure that was proved to be a very efficient data structure for mining frequent itemsets [11] [15].

Databases with this structure are very compressed and can be easily fit in memory at local sites. Moreover, it has a great effect on the performance in the candidate generation phase and the support counting which are considered the most lengthy processes in the frequent itemsets generation algorithms. However, Dong has implemented his BitTableFI algorithm on centralized database only. For some reasons which were not clearly stated in the paper, the BitTableFI algorithm constructs the frequent itemsets BitTable data structure after the frequent 2-itemsets are generated. We believe that constructing the frequent itemsets BitTableFI from the first iteration will increase the performance of the candidate generation and counting for the first and the second itemsets. Consequently, this will have a good impact on the algorithm performance. The proposed algorithm can be described as follows:  1. The proposed algorithm is based on the distributed Multi- Agent based algorithm described in [12] which was based on Apriori like algorithms.

2. The proposed algorithm uses the BitTable data structure in [7] instead of the previously implemented data structure in [12].

3. Unlike the BitTableFI algorithm, the proposed algorithm constructs the Bit-Table data structure before the first iteration.

4. Unlike the BitTableFI algorithm which was implemented on two synthetic centralized datasets, the proposed algorithm together with the BitTableFI algorithm are to be implemented and tested on five distributed real world benchmark datasets.

5. The distributed Multi-Agent based algorithm complies with the global standards in communication between agents, namely the FIPA, thus enabling the ability for cooperating with other standard agents also the future extension for the proposed model.

A. The Database Conversion Algorithm This section describes how local databases are converted  before the first iteration into the BitTable format instead of the Apriori format. Every item is checked for existence in the  transaction. If the item exists, the item is replaced with 1 otherwise it is replaced with 0. For instance if we have the items ABCDE and the transaction ACD, the result transactional bitvector will be: 10110. This format is called the bitvector representation for the transaction. The conversion of the database into the BitTables format is described in details in Algorithm 1.

Let I = {i1, i2, ???. in} be a finite set of items and D be a dataset containing N transactions, where each transaction t ? D is a list of distinct items t = {i1,i2, ??. ij } where ij ? I (1 ?  j ? |t|), and each transaction can be identified by a distinct identifier tid.

Algorithm 1  Transaction conversion into bit vectors (local agents)  1: begin 2:    Let {I} = the finite set of all items {i1, i2, ???. In} ; 3:   For every item ij in the set of items {I} where  (1 ?  j ? n) do 4:   If ij = ik where ik ? t ={i1, i2 ... i|t|}, ik ? I, (1 ?  k ? |t|) then 5:   t bitvector += 1 ; 6:   Else 7:   t bitvector += 0 ; 8:  End If; 9:   Next; 10:   Output the database transactional bit vector t bitvector  ; 11: End;    B. The Distributed BitTable MAS Algorithm This section presents the proposed distributed BitTable  Multi-Agent association rules algorithm. The algorithm consists of three types of cooperative agents that work together to achieve the required goals. The first kind of agents is the Interface Agent. This agent can cooperate with the human and accepts the user required support. The second kind of agents is the local agents which are distributed at local sites for generating the candidate itemset. The third kind of agents is the main agent which has a global view of all local agents and is responsible for the candidate generation process. All agents work together to achieve the required association rules mining goal. The proposed algorithm is compliant to the Foundation for Intelligent Physical Agents standard.

The proposed algorithm and the message negotiation between agents are described as follows:  1. The Interface Agent accepts the support from the user.

2. The Interface Agent sends the required support to the main agent.

3. Main Agent sends a "propose performative" FIPA message to Local Agents:  (Propose :sender (agent-identifier :name main_agent) :receiver (set (agent-identifier :name local_agent)) :content "Start mining with support = minsupp" :reply-with start_mining_proposal )  4. Local Agents reply with an "agree performative" to Main Agent as follows:  (Agree :sender (agent-identifier :name local_agent) :receiver (set (agent-identifier :name main_agent))      :content "proposal approved and mining started at k=1" :in-reply-to start_mining_proposal )  5. Each Local Agent starts counting the local supports for all 1- candidate itemsets in its local database according to its local number of records. Algorithm 2 explains the counting process in details.

6. Local Agent replies with "inform performative" to Main Agent as follows:  (Inform :sender (agent-identifier :name local_agent) :receiver (set (agent-identifier :name main_agent)) :content "finished counting candidate 1-itemsets")  7. Main Agent compares the summation of the local supports sent from all agents for 1-candidate itemsets with the min support supplied by the user.

8. Main Agent finds the 1-large itemsets and save it in the database in the list of frequent itemsets.

9. Main Agent sends an "Inform performative" FIPA message to Local Agents:  (Inform :sender (agent-identifier :name main_agent) :receiver (set (agent-identifier :name local_agent)) :content "frequent itemsets at k=1 are successfully generated" )  10. Main Agent generates the k-candidate itemsets.

Candidate generation process is explained in details in algorithm 3.

11. Main Agent sends the generated k-candidate itemsets to all local agents.

12. Main Agent sends a "Request performative" FIPA message to all Local Agents as follows:  (Request :sender (agent-identifier :name main_agent) :receiver (set (agent-identifier :name local_agent)) :content "candidate itemsets are generated at iteration K, please count the support" :reply-with iteration_k )  13. Each Local Agent calculates the k-candidate itemsets in its local databases. This can be explained in details in algorithm 4.

14. Local Agents send an "Inform performative" FIPA message to Main Agent: (Inform :sender (agent-identifier :name local_agent)  :receiver (set (agent-identifier :name main_agent)) :content "finished counting candidate itemsets for the current iteration K" :in-reply-to iteration_k )  15. The Main Agent considers any k-candidate itemset as frequent if the summation of all local supports for this itemset from all local agents is greater than the min global support  16. Frequent itemsets are saved in the central database in the list of k-frequent itemsets while small itemsets are not considered in the next iteration.

17. Steps (10) to (15) are iterative and finish when there are no more k+1 candidate itemsets.

18. Main Agent sends an "Inform performative" message  to all Local Agent : (Inform :sender (agent-identifier :name main_agent) :receiver (set (agent-identifier :name local_agent)) :content "Finished mining of frequent itemsets" )  19. Main Agent sends all frequent itemsets to Interface Agent for representation.

C. The Proposed Algorithm at the First Iteration The generation of candidate itemsets and the large itemsets  counting in the early iterations (k=1 and 2) are usually the most time consuming processes for the overall association rules mining process. Unlike the BitFI algorithm, we apply the BitTableFI data structure starting from the first phase. This has significantly reduced time needed for the first two iterations and has resolved the performance bottleneck. The algorithm is implemented by local agents at local sites.

Algorithm 2 presents how the 1-frequent itemsets are counted by local agents.

Algorithm 2  Counting the 1-frequent itemsets (local agents)  1:   begin 2:     For every item bit vector Ibi in the items bit table do 3:     Loop on every transaction in the database 4:    Perform BitWise AND operation with t bitvector ; 5:    If Ibi AND t bitvector  = Ibi then 6:   Increment the support(Ibi) ; 7:    End If; 8:     End Loop; 9:     If total support (Ibi) >= minsupp then 10:    Add Ibi to set of large itemsets Lb1 ; 11:     End if; 12:     Next; 13:     Output set of 1-Frequent itemsets ; 14:    End;    D. The Proposed Algorithm at the K-Iteration When the itemsets are counted by the local agents, they are  sent to the main agent which generates the k-frequent itemset and the (k+1) candidate itemsets for the next iteration. The algorithm for (k+1) candidate itemsets generation at k iteration is described in Algorithm 3   Algorithm 3  candidate k+1itemsets generation (main agent)  1:  begin 2:    For every frequent k-itemset bit vector Fibitvector in the set of  frequent itemsets bit table(Fbk) do 3:   Get the Mid of Fibitvector = (set of items with the last bit = 1  change to 0) ; 4:   Loop on frequent k-itemsets Fjbitvector where (i+1 ?  j ?  number of frequent k-itemsets) ; 5:    Perform BitWise AND operation with Fjbitvector  ; 6:    If Mid of Fibitvector AND Fjbitvector = Mid of Fibitvector then 7:   Generate Candidate k-itemset bit vector Ck+1bitvector  = Fibitvector OR Fjbitvector  ; 8:   Add Ck+1bitvector to the set of candidate k+1itemsets  bit table (Cbk+1)  ; 9:    End If ; 10:   End Loop ; 11:    Next; 12:    Output set of Candidate k+1itemsets bit table (Cbk+1)  ; 13:    End;      The generated candidate itemsets are sent to local agents.

The supports of these candidate itemsets are counted by local agents at every local site and are sent to the main agent.

Algorithm 4 explains the counting process for the k-candidate itemsets. The main agent sums the supports counted by all agents. Itemsets whose total support are greater than or equal to the minimum support are considered as large itemsets and are considered for the next iterations. Itemsets whose total supports are less than the minimum supports are not considered for the next iterations.

Algorithm 4  Counting the k-frequent itemsets (local agents)  1:    begin 2:    For every candidate k-itemset bit vector Cibitvector in the  candidates bit table (Ck) do 3:   Loop on every transaction in the database ; 4:    Perform BitWise AND operation with t bitvector ; 5:    If Cibitvector AND t bitvector  = Cibitvector then 6:   Increment the support(Cibitvector) ; 7:    End If; 8:   End Loop ; 9:   If total support (Cibitvector) >= minsupp 10:    Add Cibitvector to set of large itemsets Lbk ; 11:   End if; 12:    Next; 13:    Output set of k-Frequent itemsets ; 14:    End;

III. APPLYING THE PROPOSED ALGORITHM ON MEDICAL DATABASE  Inflammatory lesions of urinary bladder and kidneys exist in 3 - 5% of the population. Women suffer more often due to anatomic peculiarities of their urogenital system. There are conditions to transfer adjacently the bacterial contamination from vagina. Pregnancy is also a factor due to compression of urethra by the fetus and retention of urine. By advancing of age and appearance of prostate adenoma in some males, infections of urinary bladder and kidney become more frequent in them. Nephrolithiasis is also the reason for development of inflammatory of urinary bladder and kidneys.

When the inflammatory process has covered the kidneys, the status of patients is significantly damaged, and it is possible to develop more severe complications like inflammation of adjacent tissues or acute renal failure [16]. It is necessary to carry out many examinations for the patients under investigation. These examinations may be costly and time consuming. Our goal is to construct a model that can discover the effective minimum number of tests to identify the previously mentioned diseases. Moreover, the model should use the constructed knowledge base to help doctors in future prediction thus saving time and effort which is very critical for the patients.

A. Data structure and data variables The medical data used by the proposed multi-agent based  algorithm contains instances for patients symptoms related to the diseases Inflammation of urinary bladder and Nephritis of renal pelvis origin. These symptoms are Burn or itch of urethra and swell for its outlet, Lumbar pain, Micturition pains, Occurrence of nausea and Urine pushing (continuous  need for urination). The columns of Table 1 represent these symptoms and diseases in the same order. We should note that although the algorithm was implemented on specific parameters of the medical data for the previously mentioned disease, but it can be applied on different other items representing other symptoms or tests for the patient medical records. Data was distributed in two hospitals as follows. One hospital has 99960 medical records while the other has 71400 medical records, with total of medical records to be mined 171,360 medical records. Data of each hospital was loaded into a data warehouse. After ensuring that data is not volatile, missing values which was about 8% of the total amount of data were removed from the data warehouse. There was some data preprocessing for the initial data before the implementation of the proposed algorithm.

TABLE 1. DATA SAMPLES FOR THE MEDICAL DATA AFTER BEING  PREPROCESSED TO THE APRIORI LIKE FORMAT TID BURN LUMB MICT NAUSEA PUSH INF NEPH 1 No Yes No No No No No 2 Yes No Yes No Yes Yes No 3 No Yes No No No No No 4 Yes No Yes No Yes Yes No 5 No Yes No No No No No    B. Rules generation The algorithm was implemented many times on the same  data using different values for the support and the confidence.

Increasing the value of the confidence led to a small number of generated rules. On the other side, decreasing the value of the confidence lead to a huge number of rules, some of them were not relevant and were not interesting. Many researches were done to eliminate the huge number of redundant [17] and non interesting [18] association rules. Although we did not tackle this problem as it is out of our scope in this paper, yet we have found that the best confidence for our medical data was 80%. Table 2 describes some of the medical rules generated by rule agent in the proposed multi-agent based system at confidence = 80%   TABLE 2. SAMPLE OF THE GENERATED MEDICAL RULES (AT  CONFIDENCE=80% Ant. ? Cons. Confidence A-D-E ? X 100 D-E-L ? W 100 L-U ? Z 100 M-U ? Y 100 C-X ? Y 80  C-E-X ? Y 80   C. Justification of the generated rules Association rules generated by the Rule agent are stored in  the knowledge base in the form:   Antecedent Itemset ? Consequent Itemset With Confidence = c          We have selected some of the generated rules in the knowledge base for illustration as follows:  1. L-U ? Z IF Lumbar pain AND Urine pushing (continuous need for urination) THEN Nephritis of renal pelvis origin WITH CONFIDENCE 100%   2. M-U ? Y IF Micturition pains AND Urine pushing (continuous need for urination) THEN Inflammation of urinary bladder WITH CONFIDENCE 100%   3. D-E-L ? W IF No Micturition pains AND No Occurrence of nausea AND Lumbar pain THEN No Inflammation of urinary bladder WITH CONFIDENCE 100%   4. A-D-E ? X IF No Burn /itch of urethra AND No swell for its outlet AND No Micturition pains AND No Occurrence of nausea THEN No Nephritis of renal pelvis origin WITH CONFIDENCE 100%   D. Testing the performance of the algorithms The experiments included the implementation and testing  of four algorithms on two distributed real world medical databases for the inflammation of urinary bladder disease.

Two of the algorithms were centralized (PEA [12] and BT [10]). The other two algorithms were distributed (MAS [13] and our proposed distributed BitTable Multi-Agent based algorithm BMAS). The test bed used was windows XP, Intel Pentium IV processor, 2 gigs ram. Figure 1 presents the implementation of the four algorithms at five different supports with total of 20 readings.

Figure 1. Implementation of the algorithms on Inflamation of Urinary Bladder Database at different supports

IV. ALGORITHM ANALYSIS AND EVALUATION This section presents the performance evaluation of the  system. The system is also evaluated from the technical and the medical point of views.

A. Performance Evaluation: From Figure 1 we can observe the following: 1. In case of the centralized algorithms, BT algorithm with  the BitTableFI data structure outperforms PEA algorithm.

2. In case of the distributed algorithms, the proposed BMAS  with the BitTableFI data structure outperforms the previously implemented algorithm MAS.

3. The distributed algorithms BMAS and MAS outperform the centralized algorithms BT and PEA.

4. The proposed distributed algorithm BMAS outperforms BT, PEA and MAS algorithms. Moreover, the time difference increases when the minimum support decreases.

The performance of BMAS has been achieved due to the  following reasons: 1. The use of the Bitwise And/Or operation to generate  candidate itemsets based on BitTable data structure which was proved to be greatly faster than the traditional item comparing method used in many Apriori-like algorithms [6].

2. The highly compressed BitTable database constructed which helps in quick counting for the support of the candidate itemsets using the Bitwise ?And? operation.

3. The construction of the BitTable data structure before the first iteration.

4. The use of the distributed Multi-Agents which decrease the time needed for candidate generation and support counting.

From Figure 1 we deduce that the time needed for mining frequent itemsets using the proposed distributed BitTable Multi-Agent based algorithm (BMAS) is less than that needed by other algorithms.

B. From the technical point of view: 1) The model is compliant To FIPA: The model complies with the Foundation for Intelligent  Physical Agents (FIPA) global standards described in the next section. It also combines different techniques, like multi-agent systems, association rules as a data mining and the distributed medical databases.

2) The model agents satisfy the MAS properties: During the implementation of the multi-agent based model  on the distributed medical databases, the model agents achieved the agent properties in which each agent in the model individually exhibited the autonomous behavior. On the other side all agents have presented a coherent behavior when communicating with each other.

C. From the medical point of view: From the medical point of view, the model presents a  generic platform for multi-agent systems and provides contributions for the medical data distributed over different      departments in a hospital or different distributed hospitals.

These contributions can be listed as follows:  1) The model is an accumulating knowledge base association rule:  The model has constructed a knowledge base containing many interesting rules that can be very useful for medical experts. This knowledge base architecture can improve the system real time response by identifying some basic features that indicated the presence or the absence of the disease, for instance, rule (1) and (2)) can help to identify the presence of the Inflammation of urinary bladder AND Nephritis of renal pelvis origin respectively based on the minimal number of symptoms/tests for the patient, thus reducing time to identify the disease and reducing cost for doing other tests.

On the other side, rules (3) and (4) identify some basic features that indicate the absence of the disease, which means that if these symptoms do not exist, there is no need for further patient examinations for other symptoms or tests.

2) The model as a medical diagnostic platform: The model has presented a diagnostic platform that can help  in investigating patients diagnosis based on symptoms or tests done in different hospitals or within the hospital departments.

3) The model can be used for disease predication: Based on the rules generated, the model can help doctors in  the early prediction for the existence or the absence of the disease based on the previously discovered association rules.

4) The model is a cost effective method: Due to the early prediction feature of the model described  above. This led to minimize the number of tests needed by the doctors, thus minimizing the effort, the cost and the time needed for the patients to do other tests or to be checked for other symptoms.



V. CONCLUSION The efficiency of association rules algorithms needs to be  improved to handle real world large datasets. To increase the overall efficiency of the association rule mining, we presented a distributed Multi-Agent based algorithm to enhance the three main factors affecting the overall efficiency. First, to improve the way candidates are generated, our distributed algorithm is based on BitTable data structure which has a better performance in the candidate generation phase. Second, to improve the way by which candidate supports are counted, we have implemented distributed agents in local sites that help in the counting process. Third, the implemented BitTable data structure helps in compressing the database thus can easily fit in memory at local sites. The BitTable data structure was implemented before the first iteration and not like the BitTableFI algorithm after the second iteration. This had a great impact on the algorithm performance. The distributed BitTable Multi-Agent based algorithm complies with the global standards in communication between agents, namely the FIPA, thus enabling the ability for cooperating with other standard agents also the future extension for the proposed model. Unlike the BitTableFI algorithm which was tested on synthetic centralized datasets, the performance of algorithms were measured against two distributed medical databases for  the Inflammation of urinary bladder and the Nephritis of renal pelvis origin diseases. The implementation can provide many benefits from the medical point of views. These benefits are the extraction of medical rules that helps in identifying the minimum effective number of tests and the prediction of the existence or the absence of the diseases for patients. The proposed system also improves the diagnostic knowledge for the doctors. The distributed BitTable Multi-Agent based algorithm has proved to have a better performance and execution time.



VI. REFERENCES [1] R. Agrawal, et al., "Mining association rules between sets of items in  large databases," ACM SIGMOD Record, vol. 22, pp. 207-216, 1993.

[2] R. Agrawal and R. Srikant, "Fast algorithms for mining association rules  in large Databases," presented at the Proceedings of the 20th  [3] J. Park, et al., "An effective hash-based algorithm for mining association rules," ACM SIGMOD Record, vol. 24, p. 186, 1995.

[4] J. Park, et al., "Using a hash-based method with transaction trimming for mining association rules," Knowledge and Data Engineering, IEEE Transactions on, vol. 9, pp. 813-825, 2002.

[5] F. Bodon and L. R?nyai, "Trie: An alternative data structure for data mining algorithms," Mathematical and Computer Modelling, vol. 38, pp. 739-751, 2003.

[6] F. Bodon, "A fast apriori implementation," in Proceedings of the IEEE ICDM Workshop on Frequent Itemset Mining Implementations (FIMI?03), 2003.

[7] F. Bodon, "A trie-based APRIORI implementation for mining frequent item sequences," 2005, p. 65.

[8] Y. Woon and E. Lim, "A support-ordered trie for fast frequent itemset vol. 16, p. 875, 2004.

[9] F. Bodon, "Surprising results of trie-based FIM algorithms," in In Proceedings of the IEEE ICDM Workshop on Frequent Itemset Mining Implementations (FIMI?04).

[10] J. Dong and M. Han, "BitTableFI: An efficient mining frequent itemsets algorithm," Knowledge-Based Systems, vol. 20, pp. 329-335, 2007.

[11] W. Song, et al., "Index-BitTableFI: An improved algorithm for mining frequent itemsets," Knowledge-Based Systems, vol. 21, pp. 507-513, 2008.

[12] M. M. Fakhry and W. A. Atteya, "An Enhanced Algorithm for Mining Intelligent Computing and Information Systems, Cairo, Egypt, 2002.

[13] W. A. Atteya, et al., "Multi-Agent Association Rules Mining in Distributed Databases," in 15th World Conference on Soft Computing in Industrial Applications (WSC15), 2010.

[14] W. A. Atteya, et al., "Multi-agent system for early prediction of urinary bladder inflammation disease," in Intelligent Systems Design and 539-544.

[15] M. Zaki, "Scalable algorithms for association mining," Knowledge and  [16] NKUDIC. (June, 2006, National Kidney and Urologic Diseases Information Clearinghouse:Prostate Enlargement. Available: http://kidney.niddk.nih.gov/kudiseases/pubs/prostateenlargement/, accessed on 10/06/2010  [17] M. J. ZAKI, "Mining Non-Redundant Association Rules," Data Mining and Knowledge Discovery, 2004.

[18] Y. Xu and Y. Li, "Mining for Useful Association Rules Using the Intelligence for Modelling, Control and Automation, and International Conference on Intelligent Agents, Web Technologies and Internet Commerce (CIMCA-IAWTIC?05), 2005.

