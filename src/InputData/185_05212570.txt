

Abstract: High utility itemsets mining is another hot topic besides  association rule in data mining field. It considers not only item?s support values but also the quantities and profit. In current research, all algorithms mining high utility itemsets are based on candidate set generation-and-test category where too many candidates will be generated and tested. In this paper, an algorithm-DHUI based on PHUI-Tree structure is proposed. Using pattern growth approach mines high utility itemsets in PHUI-Tree without candidate generation, and calculates the utility of itemsets without scanning database repeatedly. The results of experiment show that DHUI is efficiency.

Keywords: Data mining; High utility mining; Pattern growth  1.  Introduction  In recent years, association rule mining is studied deeply in data mining field for its widely application, including financial analysis, the retail industry, and business decision-making[1]. Traditionally, an association rule is interesting if its support and confidence values are not less than thresholds given. In association rule mining, only support value is considered.

Support considers whether an item is bought or not in a transaction, which does not reflect the quantities and the unit utility of item for the importance of each item to user varies. In reality, multiple quantities of a product may be bought in one transaction. In order to overcome this problem, several researchers have proposed weighted association rules[2], but these algorithms still employ support values of itemsets to measure their importance.

Several models including share-confidence and share-frequent have been proposed to discover utility mining itemsets. These models can be used to measure the utility of an itemset in terms of net profit, total cost, or time spent[3][4][5][6]. In conventional utility mining  model, an item has both internal and external utility[7][8].The internal utility of an item is the numerical value assigned to it in a transaction, and the external utility is the unit profit or unit cost which is stored in a utility table. In [3], Yao et al. proposed Umining and Umining_H, but these algorithms can not find out the complete high utility itemsets. The other algorithms, such as Two-Phase[7], FSM[4],SHFSM[5], DCG[6], and DCG+[8] discover the complete high utility itemsets using candidate set generation-pruning-test category where too many candidates will be produced and tested, which spent too much time. The need for efficient algorithm to effectively discover high utility itemsets remains urgent. In this paper, an algorithm___DHUI (Discover High Utility Itemsets in possible high utility Item tree)based on PHUI-Tree (Possible high utility item tree)structure is proposed.

Using pattern growth approach mines high utility itemsets directly in PHUI-Tree without candidate generation, and calculates the utility of itemsets without scanning database repeatedly. The results of experiment show that DHUI is efficiency.

The rest of this paper is organized as follows: related definitions and theorems are presented in Section 2; Section 3 describes PHUI-Tree structure; Algorithm DHUI based on PHUI-Tree is produced in Section 4; Section 5 is experimental results; Section 6 is the conclusions.

2.  Problem statement  Given a transaction database (for example table1), a minimum utility threshold minutil, and a utility table(for example table 2 corresponding to table 1), the goal of utility mining is to discover all itemsets with utility is less than minutil .

Definition 1  A k-itemset X has an association set of transaction in DB, denoted as DBX, where      { | }X q qDB T DB X T I= ? ? ? .

Definition 2 The quantities of an item ip in  transaction Tq is denoted as iu(ip,Tq), and the unit profit of an item ip in a transaction is denoted as eu(ip).

Table 1. Transaction database  Table 2. Utility table corresponding to table 1  Definition 3  The utility of item ip in transaction Tq,denoted as util(ip,Tq), is the product of iu(ip,Tq)and eu(ip).

That is, util(ip,Tq)= iu(ip,Tq)?eu(ip). The utility of itemset X in transaction Tq is denoted as  ( ), ,( ) p q  q p q i X T  util X T util i T ? ?  =? . The utility of a transaction Tq is denoted as ,( ) ( )  p q q p q  i T tu T util i T  ? =? .

Definition 4  In database DB, the sum of utility value of all the transactions which contains X is denoted as. Twu(X)=?Tq?DBXtu(Tq).

From the definition, we can find util(X) ? twu(X),that is, twu(X) is the upper of util(X).

Theorem 1  If itemset Y is the superset of itemset X, then util(Y)?twu(X).

Proof: Since X Y? , so, Y XDB DB? , ( ) ( )twu Y twu X? . According to  Definition 4, util(Y) ? twu(Y), such that, util(Y) ? twu(X).

Lemma 1 If twu(X)<minutil?then an arbitrary superset of itemset X is not high utility itemset.

Proof: Let Y be an arbitrary superset of itemset X, according to theorem 1, util(Y) ?twu(X), such that util(Y)<minutil, hence, Lemma 1 is proved.

Definition 5  if  twu(X)?minutil?then X is the possible high utility itemset. In particular, if the length of X is 1, then X is the possible high utility item.

Lemma 2  All the high utility itemsets are composed of possible high utility items.

Proof?assume that there exists a high utility itemset  X ? ip ? X ? and twu({ip})<minutil, then ( ) mintwu X util? . According to theorem 1, twu (Y)  ?twu({ip})<minutil?therefore, assumption does not hold.

Hence, Lemma 2 is proved.

3.  PHUI-Tree  To avoid candidate generation-and-test, we designed a data structure PHUI-Tree which is a tree extended from FP-Tree. It is defined as fellow; (1)  It consists of one root labeled as ?root?, a set of item  prefix sub-trees (conditional PHUI-Tree ? as the children of the root, and a possible high utility item header table which is named PHUI-List.

(2)  Each node in the item prefix sub-tree consists of four fields: item-name, LTid, pointer, and node-link, where item-name registers which item this node represents, LTid registers the identifications of transactions in which the item appears, and node-link links to the next node in the PHUI-Tree carrying the same item-name, or null if there is none.

(3)  Each entry in the PHUI-List consists of four fields: item-name, item-util (utility of item) , item-twu(the upper bound of item), and head of node-link, which points to the first node in the PHUI-Tree carrying the item-name.

The PHUI-Tree is constructed as the following steps: Input DB Output PHUI-Tree Begin (1) Scan the database DB. For each item ip,  calculate support, twu({ip }),util({ip }); (2) For each item ip, if  util({ip })<minutil,  isolate item ip. End for (3) If exist util({ip })<minutil, Scan the database  DB, calculate twu({ip }), jump to (2); (4) Else create the root of a PHUI-Tree and a  PHUI-List; (5) For each transaction T in DB, sort them  according to the order of TABLES. Calculate tu(T);  (6) Let T be ([p|P,T])., p is the first element and P is the remaining list. Call insert_tree ([p|P,T]);  (7) End for (8) End // insert_tree ([p|P,T]) insert_tree ([p|P,T]) { (9) if T has a child N such that N.item-name=p.

item-name insert Tid and p.item_count into  TID A B C D E F G H T01 1 1 1 1 0 0 1 1 T02 4 0 3 0 1 2 0 0 T03 4 0 3 0 3 0 0 0 T04 0 4 1 2 0 2 0 0 T05 3 1 0 2 0 0 0 0 T06 0 3 2 1 0 0 0 0  Item A B C D E F G H Profit 3 2 1 3 5 2 8 4      N.Ltid; (10) else create a new node N, insert Tid and  p.item_count into N.Ltid, and its node-link linked to the nodes with the same item-name;  (11) if P is not empty, call insert-tree(P,T) }  According to the steps, we can obtain the PHUI-Tree corresponding to the example database as figure 1.

4.  Description of algorithm DHUI    Figure 1. The PHUI-Tree corresponding to table 1 and table  Definition 6  Set of the itemsets with suffix item pi  is denoted as itemset pi . And the set of the itemsets  with suffix itemset X is denoted as itemsetx.

property 1 All the nodes in PHUI-Tree are possible  high uitility items. All possible high utility itemsets containing the possible item pi  can be obtained by mining conditional tree PHUI Tree? of item pi .

Theorem 2  X is an itemset?Tree-X is the initial conditional PHUI-Tree of X?pi is an item in Tree-X?such  that, all the transactions which contain pX i?  are the same with the transactions in pi ?s LTid in Tree-X. That is,  ( ) { . , }pX i q q p pDB T T i LTid i Tree X? = ? ? ? Theorem 3  The complete set of high utility  itemsets can be partitioned into the unions of itemset pi , where  pi is  different item in Tree-X.

Theorem 3 shows when all possible high utility  itemsetip are discovered, item ip can be isolated from PHUI-Tree. Accordingly, update tu value of related transaction.

Theorem 4  X is an itemset, PHUI-Tree of X is null shows that itemsetX is not high utility itemset.

Proof? assume that there exists itemset Y, Y is high uitility itemsetX,and PHUI-Tree of X is null, the difference sets of Y and X is denoted as Y X? , then  ( ) minutil Y util? . According to Theorem 2, we have twu(Y) ? util(Y),and twu(Y-X)=twu(Y), such that PHUI-Tree of X is not null, it is conflicted with assumption.

Theorem 5  Tree X? is PHUI-Tree of X?then: ( ) ( ) ( )  q p q p  T Tree X i Tree X util X tu T util i  ? ? ? ? = ?? ? spe  cially ? when Tree X? is null ? then ( ) ( )  q q  T Tree X util X tu T  ? ? =? .

The goal of algorithm PHUI is to find out all the high utility itemsets from PHUI Tree? .The steps are as follows?  ?1? For item pi in PHUI-Tree , build initial conditional PHUI-Tree of item pi ?  ?2? If PHUI-Tree of pi is not null?then build PHUI-Tree of itemset pi  until conditional PHUI-Tree of pi  is null;  ?3? For other item in PHUI-Tree, do the  same operator, until global PHUI-Tree is null.

DHUI algorithm is described as fellows: Algorithm 2 (DHUI: Mining high utility itemset with PHUI-Tree by pattern growth).

Input: A database DB, represented by PHUI-Tree constructed according to Algorithm 1, and a minimum      utility threshold min util .

Output: The complete set of high utility itemset.

Begin  (1)  While (PHUI-Tree is not null) { (2)  Let pi  be the last item in PHUI-List; (3)  Construct conditional PHUI-Tree of pi  named Tree- pi ; (4)  Call DHUI-Growth (Tree- pi , pi ); (5)  Isolate pi .//theorem 3  } End.

Procedure DHUI-Growth(Tree, X) Begin (6) let Q be Tree; (7) for each item pi  in Q do { (8) Y= pi ?X; (9) Construct Y? conditional PHUI-Tree from X?  conditional PHUI-Tree (Y? conditional PHUI-Tree is denoted as Tree-Y);  (10)  Calculate util(Y); (11)  if (util(Y) ? minutil), Y is the high utility  itemset, store Y; (12)  if (Tree-Y is not null) call  DHUI-growth(Tree-Y,Y); (13)  Isolate pi ;} End.

5.  Experiments results  We implemented the algorithm and DCG+ on Centrino Duo with 2GB memory by synthetic datasets (T10.16.D1000K.N1000)[ 10]. The utility of each item is between 1 and 10 generated randomly. Based on DCG, using Lemma 2 can derive DCG+. DCG+ is an efficient utility mining method. DCG+ maintains an array for each candidate during each pass, the array of each candidate k-itemset stores the critical function values of its (k+1)-supersets. Thus, after the kth pass, DCG+ discovers all high utility k-itemsets and directly generates all candidate (k+1)-itemsets for the next pass without join and prune steps. A utility mining method with Lemma 2 scans a database that is smaller than the original by skipping isolated items to reduce the critical function values of candidates, But DCG+ is also a level-wise utility mining method using candidate set generation-pruning-test category where too many candidates will be produced and tested and need to scan the database repeatedly. Figure 2 is the item?s utility distribution, and figure 3 is the result. It shows that our algorithm DHUI is more efficient than  DCG+.

Figure 2. Utility distribution of 1000 items  Figure 3. Experimental result  6.  Conclusions  Traditional association rule mining considers only whether an item is bought or not in a transaction. In reality, a custom may buy the same item more than one in a transaction, and the importance of each item varies. In some occasions, utility model may be more important than support model. Mining high utility itemset becomes more significant. Although there are several methods mining high utility itemsets proposed that are based on generation_and_test category, there will spend too much time. In this paper, we designed a data structure PHUI-Tree, which is a tree extended from FP tree, then proposed an algorithm DHUI to mine complete high utility itemset in transaction database efficiently. Experiment shows that algorithm DHUI is effective.

Acknowledgements  We would like to acknowledge the support of the      National Natural Science Foundation of China (60603069), the projects of science and research plan of Hubei provincial department of education (D20060003) and the Natural Science Foundation Of Hubei Province of China (2006ABA016).

