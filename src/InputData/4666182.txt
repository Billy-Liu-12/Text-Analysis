CODEM: A Novel Spatial Co-location and De-location Patterns Mining  Algorithm

Abstract   Spatial co-location and de-location patterns represent subsets of Boolean spatial feature types whose instances are often located in close/separate geographic proximity.

Existing literatures pay more attention on mining co- location patterns based on distance threshold spatial relation. In this paper, we proposed a novel co-location and de-location patterns mining algorithm (CODEM) to discover useful co-location and de-location patterns in large spatial datasets. We used k nearest features (k-NF) to measure spatial close/separate relationships of co- location/de-location patterns in spatial datasets. The k- NF set of one feature type's instances was used to evaluate the close/separation relationship between other features and one feature. Then, a correlation checking operation was adopted to filter the uninteresting patterns, and moreover a grid index method was used to accelerate the k nearest features query, while a T-tree (Total support tree) structure was also used to compress the candidate frequent and infrequent item sets, and generate patterns efficiently. Experimental results prove that the algorithm is accurate and efficient, has a time complexity of O(n).

1. Introduction   Extracting interesting and useful patterns from spatial datasets is more difficult than extracting untrivial patterns from traditional numeric and categorical data due to the complexity of spatial data types, spatial relationships and spatial autocorrelation. Spatial co-location and de-location patterns are similar to positive and negative association rules. Spatial co-location patterns represent subsets of Boolean spatial feature types whose instances are often located in close geographic proximity[1]. Spatial de- location patterns extend traditional spatial associations to include association rules in the form of A??B, which indicate that B will not exist nearby A. They are both very useful patterns in some spatial problems and are capable of extracting some useful and previously unknown hidden information.

Figure 1 shows a sample spatial dataset S, four spatial feature types named by lexicographic order (A, B, C, D) and represented by different shapes. As can be seen, instances of spatial features in sets {A, C} and {B, D} tend to be located together; and instances of spatial features in sets {A, D} and {B, C} tend to be tends to be separate. We identify {A, C} and {B, D} are two co- location patterns; {A, D} and {B, C} are two de-location patterns in S.

Figure 1. A sample spatial dataset   2. Related works   In data mining area, approaches to discover co-location patterns in the literature can be classified into four general categories: (i) clustering-based map overlay approach[2], (ii) reference feature based approach[3], (iii) data-partition approach[4], and (iv) event centric model based approach[1][5]. All above-mentioned approaches have some shortcomings. The clustering-based map overlay approach assumes instances of each spatial feature are clustered, but many spatial features can be completely spatially random or de-clustered at many scales. Other three approaches use a distance threshold to treat spatial close relationship. Spatial features which have a distance below this threshold are considered to be close relationship. However, it is hard to decide the distance threshold for each spatial dataset without specific prior knowledge. Moreover, spatial datasets are not usually even distributed, so a unique distance value cannot fit an   DOI 10.1109/FSKD.2008.467     irregularly distributed spatial dataset well. In the end, they don?t have a correlation or interestingness judgment to the patterns they have got, so some useless and confusion patterns may exist in the results.

The spatial de-location pattern mining problem could be treated as the combination of spatial negative association rules mining and spatial co-location pattern mining. Sharma et al. proposed an approach[9] combine Wu?s interestingness function[7] with  Koperski?s Multi- lever spatial association rules mining algorithm[3], can extract interesting positive and negative association rules in spatial data sets. However, two shortcomings exist.

Firstly, the infrequent itemsets are generated from frequent itemsets, which means that only a few infrequent itemsets can be discovered and in turn only a few negative association rules can be obtained. And the negative association rules in infrequent itemsets have not been discovered. Although Dong[8] used multi-confidence and multi-level support thresholds to get more interesting negative association rules, the value of different kinds of confidence and the support thresholds to different lengths of items are not easy to choose, and also complicated.

Secondly, Existing algorithms pay more attention on how to effectively identify negative association rules of interest in those infrequent itemsets. The methods to generate infrequent and frequent itemsets are all use Aprior algorithm, which is inefficient enough.

In this paper, we defined a k nearest features (k-NF) based spatial close relationship measurement. The k-NF set of one feature type?s instances is used to evaluate close/separate relationship between other features and this feature. The itemsets? support value in one feature type?s k-NF set is used to measure the frequency of their close relationship. A k nearest features based CO-location and DE-location pattern Mining (CODEM) algorithm was proposed to discover useful co-location and de-location patterns from k-NF sets, which contains a three level support thresholds strategy. A grid index and a T-tree structure were adopted to mine co-location and de- location patterns in large spatial dataset efficiently.

Experimental results prove that CODEM can handle large spatial datasets very accurately and efficiently.

3. Problem formulation   The k nearest neighbor relationship is widely used in data mining area, like classification, clustering. However, different from those traditional k nearest neighbor based algorithms, the close relationships of spatial features are between distinguished spatial features. In this section, we used Euclidean distance to evaluate the distance between two spatial feature objects (p, q), denoted as dist(p, q), and gave the definition of k-NF instances set. Then introduce the quantized k-nearest features based co- location and de-location pattern.

Definition 2: k-nearest feature instances set (short for k-NF(i)). Let i be a feature instance in dataset S, k-NF(i) is a subset of  the top k-NF instances of i, and any instance in k-NF(i) has the same feature type of i is omitted. That is,  (a) |k-NF(i)|?k; (b) i?k-NF(i); (c) If i?s feature type is O where O ?S, ?p?k-NF(i),  then p?s feature type is not O; (d) If p, q are i?s k-th and (k+1)-th nearest feature  instances, then dist(i, q)?dist(i, p).

Definition 3: k-nearest feature types set (short for k-  NF(O)). Let O be a feature type in S, k-NF(O) is the union of each O?s instance i?s k-NF(i), and then abstracted to feature type level. It can be formally represented as: k- NF(O) = {?k-NF(i)|i?O}.

Set O  is the complementary feature type set of O, S= {O? O}, then the range of k-NF(O) is the subset of all unions of each element in O . The maximize number of  different elements of k-NF(O) is   k i m  i C ?  = ?  . Here, m is the number of feature types, k is the threshold value. To exhaust all the elements may exist in each k-NF(O) will cost much, as the space needed is m*2m. In the algorithm, we create T-trees for each spatial feature type O, to store all the elements in k-NF(O), and to calculate each element?s support value. Each node in the T-tree is an object comprised of a support value and a reference to an array of child T-tree node. A detailed explanation is in section 5.

Definition 4: Support of k-NF(O)?s k-nearest feature types set O?. (Denote as Support(O, O?)). Let O? is a subset of O , and O? ?k-NF(O); we record the number of times when O? and O?s super set exists in k-NF(O) as N, then the Support of O? can be evaluated as follows: Support(O, O?)=N/|k-NF(O)|, range from 0 to1.

Because the patterns we found are spatial feature type oriented, instead using the total number of all feature objects, here we use each feature type?s instance number to calculate every itemset?s support value, which can be more accurate in getting the close relationship between feature types.

Definition 5: Frequent k nearest feature types set.

(Denote as Frequent(O,O?)). Given a support threshold ?, O? is a frequent k nearest feature types set in k-NF(O) only if: { O? ? k-NF(O), and Support(O, O?)?? }.

Definition 6: Infrequent k nearest feature types set.

(Denote as Infrequent(O, O?)). Given a support threshold ??, O? is a infrequent k nearest types set in k-NF(O) only if: { O? ? k-NF(O), and Support(O, O?)??? }.

Definition 7: Correlation value between feature types.

(Denote as Correlation(O|O?)). Given Frequent(O, O?) (or Inrequent(O,O?)), O? is a frequent(infrequent) k nearest types set in k-NF(O). Let P, Q are subset of O?, P?Q=?     and P?Q=O?. Then, Correlation(O|O?)=|Support(O,O?)- Support(O,P) *Support(O,Q)|. Here we choose Piatetsky- Shapiro?s interestingness measurement[10] to check whether two itemsets have correlation ship. Spatially, the correlations are calculated between consequent side of the frequent and infrequent k-NF types set?s items. If the Correlation(O|O?)?0, then P and Q are approximately independent, which means the frequent(O,O?) or Infrequent(O,O?) is not interesting.

Definition 8: k nearest features based spatial Co- location pattern (Denote as Co-locationk(O?O?)). Given the correlation threshold ? (a value near to zero), O? and O is a couple of co-location features only if: { O? ? k- NF(O) ? Frequent (O, O?) ? Correlation(O|O?)? ?}.

Definition 9: k nearest features based spatial De- location pattern (Denote as De-locationk(O?O?)). Given the correlation threshold ?, O? and O is a couple of de- location features only if: { O? ? k-NF(O) ? Inrequent (O, O?) ? Correlation(O|O?)? ?}.

4. CODEM algorithm   The CODEM algorithm can be decomposed into three sub-problems:  (1) Find each spatial feature instance i?s k-NF(i); (2) Build T-tree for each spatial feature type?s k-  NF(O), and calculate Support(O, O?); (3) Generate co-locationk and de-locationk patterns  from each T-tree.

A detailed description is below for these three parts.

4.1 Grid index structure for the k-NF query   The k nearest neighbors (k-nn) query problem is usually a high computational complexity process, which affects the whole algorithm?s performance very much. In CODEM algorithm, we use the grid index structure to divide data space into appropriate numbers of cells, one instance?s k-NF query is only done to those features locate in the same cells and cells nearby. So the calculations will only happen to a constant number of objects. In this way, the k-NF query process is very efficient, even for large spatial datasets.

The cell?s length is the key parameter to k-NF query process. In CODEM, take two dimensional attributes for example, the Cell?s length, row count (row_cnt) and column count (col_cnt) can be calculated as blow:  The domain's D_length = max_x-min_x; D_width = max_y-min_y; ? Its area D_area = D_length*D_width;  The cell's total number m = [N/k]+1, ? Cell's length= square(D_area/m).

? Cell's row_cnt=(height/Cell.length)+1, ? Cell's col_cnt=(width/Cell.length)+1   4.2 Three level support thresholds for the T-tree generation   Unlike previous co-location pattern mining algorithm,  a T-tree structure is used in the CODEM algorithm to compress the dataset and candidate frequent itemsets, then generate co-location and de-location patterns. T-tree is based on Rymon?s set enumeration tree[11]. The T-tree, representing the target sets for which the total support is to be calculated. Compared with Fp-tree based algorithms[5], T-tree based algorithms[6] also need scan dataset twice. But they offer significant advantages in terms of storage and execution time. As they can save memory space by fewer pointers and do not need to reorder the itemsets.

In order to mining both co-location and de-location patterns effectively, CODEM algorithm uses a three level support thresholds strategy. One minimum interestingness support threshold (MIS) for specializing all frequent close sets; and one minimum un-interestingness support threshold (MUS) for all separate sets, and additionally a middle support value (mid_supp, average value of MIS adds MUS), for pruning the usefulness itemsets after each iteration. The experiments in section 6 give a strong support that a mid_supp will not cost much time in the whole algorithm, and it can get better results.

4.3 Co-location and de-location patterns generation   The co-location patterns generation is just a traverse operation on the created T-tree structure, with a MIS threshold in it. However, the de-location patterns generation is a different thing. As the infrequent itemsets are all pruned after each level of T-tree generated, no de- location pattern left in the final T-tree. So we have to check and store each de-location pattern before pruning the infrequent itemsets during each iteration.

5. Experiments   We implemented the algorithm by Java language, and the experimental platform is a Pentium ? 2.66GHz-based machine with 512MB main memory. The experimental data is ?StreetMap of USA on 2004? from Environmental Systems Research Institute (ESRI), which contains over 330 thousands spatial instance in it.

5.1 Mining co-location and de-location patterns   The first experiment was done on one State ? California of StreetMap dataset, seven kinds of spatial feature about California?s culture theme places exist in this dataset and the total number of places is 6195. A detailed explanation is shown in table 1. And we aimed to     mine important co-location and de-location patterns between different kinds of places in California.

Table 1. Seven kinds of culture places in California  Places Marks Number Airport A 977 Cemetery B 675 Church C 1383 Hospital D 464 Park E 1037 Post Office F 363 School G 1296   Using CODEM algorithm, when set k=5, ?=60%, ??=  20% and ?=0.05, we got some results shown in table 2.

Table 2. Patterns between different kinds of places Co-location5 support De-location5 support  B ? A 0.64 B ? CG 0.13  C ? D 0.68 B ? CE 0.14  D ? G 0.67 D ? CE 0.18  E ? G 0.73 E ? AC 0.09  G ? E 0.66 E ? CD 0.19  E ? G 0.66 G ? F 0.19  From table 2, we could make some conclusions: The  assertion that a hospital?s five nearest neighbour places (5-NF) will contain school has a 67% possibility. The assertion that all parks and schools may exist in each other?s 5-NF has a 66% possibility. The assertion that one school?s 5-NF will not contain post office has an 81% possibility. Other conclusions can also be made like this.

5.2 Influence of parameters on CODEM  5.2.1 Middle support value   The pruning strategy of T-tree?s generation is impaired by different support values. Here, two experiments were done on the same dataset as in 6.1, to test the influence of mid_supp on CODEM.

When set different ? to test the influence on T-tree?s storage, we found the algorithm using three level thresholds needs more storages than that with the two thresholds situation, but it still not cost much due to the great effect of T-tree?s compression.

Then a comparison test was made between CODEM algorithm with and without mid_supp. From figure 2, the co-location patterns number was the same whether using or not using mid_supp, as the same MIS value was taken.

However, the de-location patterns number had a little difference. The algorithm with three lever thresholds found more useful de-location patterns when ? has a large value. And the number of found patterns decreased smoothly when using mid_supp.

Figure 2. Influence of support values on pattern number   Figure 3. Time complexity on different data sizes   5.2.2 Different data sizes   To test the scalability of CODEM to large datasets, we ran the algorithm on four datasets with different data sizes from 50 thousand to 290 thousand. When set parameter k=5, ?=60%, ??=20% and ?=0.05, we got a series of results in figure 3. The total time cost of CODEM was divided into two parts: k-NF calculation and patterns generation. It is clear that the key problem in CODEM is k-NF calculation. As we used a efficient grid index-based method, the time complexity of k-NF dropped to O(n).

Although the data size is up to 200 thousand, the time cost of patterns generation is only a few seconds. So, the algorithm with a grid index and T-tree structure is competent enough for large dataset?s co-location and de- location pattern mining tasks.

5.2.3 Different k values      As the most significant parameter, k influences the results of CODEM very much. To test the influence of different k values on the number of patterns generated, an experiment on StreetMap dataset, containing 330 thousand spatial objects, was done. Taking ?  as 60%, and ?? as 20%, we got a series of results in figure 4.

Figure 4. Influence of k values on patterns number   It is obvious that the number of co-location patterns  founded increase when increasing k value, while the number of de-location patterns identified decrease when increasing k. Figure 4 indicates that k value should not be too large or too small; otherwise, the results may be confused. Too large k value will impair the close relationships in k-NF set, lead to many useless co-location patterns and fewer de-location patterns. Moreover, the time consuming is increased rapidly as k value increasing, because k value can affects the k-NF calculation and limits the T-tree?s total lever (its total lever is less than k+1). On the other hand, too small k values lead to fewer co-locations and many useless de-location patterns. A feasible suggestion is to set the k value under 10. In the StreetMap of USA, which has 7 different feature types, we set the k value to 5.

6. Conclusions   In this paper, we proposed a novel co-location and de- location patterns mining algorithm (CODEM) to discover both spatial co-location and de-location patters in spatial datasets. In the algorithm, k-nearest features were used to measure the spatial close/separate relationships of co- location/de-location patterns, and a grid index and a T- tree structure were also adopted to reduce the computational complexity of the algorithm. Finally, a three level support thresholds strategy was presented to prune away trivial candidate item sets and discover interesting patterns. Experimental results prove that CODEM algorithm is accurate and efficient.

