Concise Representation of Frequent Patterns  based on Disjunction-free Generators

Abstract  Many data mining problems require the discovery of frequent patterns in order to be solved. Frequent itemsets are useful in the discovery of association rules, episode rules, sequential patterns and clusters.

The number of frequent itemsets is usually huge.

Therefore, it is important to work out concise representations of frequent itemsets. In the paper, we describe three basic. lossless representations of frequent patterns in an uniform way and ofer  a new lossless representation of frequent patterns based on disjunction-free generators. The new representation is more concise than two of the basic representations and more efficiently, computable than the third representation. We propose an algorithm for determining the new representation.

1. Introduction  Many data mining problems require the discovery of frequent patterns in order to be solved. Frequent itemsets are useful in the discovery of association rules, episode rules, sequential patterns and clusters etc. (see [6] for overview): Nevertheless, the number of frequent itemsets is usually huge. Therefore, it is important to work out concise, preferably lossless, representations of frequent itemsets. Recently, there have been investigated the following interesting subsets of frequent itemsets: closed itemsets (see e.g. [2,8-9]), generators (see e.g. [2,8]), and the representation based on disjunction-free sets [5]. Both frequent closed itemsets and the disjunction-free sets representation are lossless representations in the sense that they allow derivation and support determination of all frequent itemsets without accessing the database. The frequent generators themselves do not possess this property unless augmented by the set of minimal  0-7695-1 119-8101 $17.00 0 2001 IEEE 305  infrequent generators. Applications of frequent closed itemsets and frequent generators have been demonstrated in the case of the discovery of association rules and their essential subsets (see e.g. [7-8,lO-113). In particular, in the case of representative association rules [7] and informative basis [SI, the antecedent of any such rule is a generator, whle the consequent is a closed itemset decreased by the items present in the rule?s antecedent.

In this paper, we introduce yet another lossless representation of frequent itemsets that benefits both from the properties of generators and disjunction-free sets. We prove that the new representation constitutes a subset of the generators representation and the disjunction-free sets representation. On the other hand, the frequent closed itemsets representation may happen to be either more concise or less concise depending on particular data.

Conciseness of the frequent closed itemsets representation has been proved experimentally (see e.g. [ l l ] ) .  The algorithms for computing this representation require the discovery of frequent generators first (see e.g. [2,8-91). In [2,8], generators are treated as seeds of closed itemsets that are determined by intersecting database transactions.

This makes the discovery of frequent closed itemsets inefficient. To the contrary, the new representation does not require such a computational overhead. In the paper, we propose an algorithm for determining the new representation.

The layout of the paper is as follows: Section 2 introduces the notions and properties of  frequent itemsets, closed itemsets and generators, as well as the representations based on closed itemsets, on generators, and on disjunction-free sets. In Section 3 we introduce the new representation based on disjunction-free generators and prove that all frequent itemsets and their supports can be derived from it. In Section 4 we prove that the new representation is not less concise than the ones based on generators and on disjunction-free sets. An algorithm for determining the new representation is presented in Section 5 .  Section 6 concludes the results.

2. Basic notions and properties  2.1. Itemsets, frequent itemsets  Let I =  {i,, i2, ..., im}, Z+0, be a set of distinct literals, called items. In the case of a transactional database, a notion of an item corresponds to a sold product, while in the case of a relational database an item will be an (attribute,value) pair. Any non-empty set of items is called an itemset. An itemset consisting of k items will be called k-itemset. Let D be a set of transactions (or tuples, respectively), where each transaction (tuple) T i s  a subset of Z. (Without any loss of generality, we will restrict further considerations to transactional databases.) By ID we will denote a subset of items in I that occurred in D at least once. Support of an itemset X is denoted by sup(X) and defined as the number of transactions in D that contain X.  The itemset X is calledfrequent if its support is greater than some user-defined threshold minSup. The set of all frequent itemsets will be denoted by F:  F = {XcA sup(X)>minSup}.

Property 2.1.1 111.

a) b) Property 2.1.2. Let X,Y,VEI. If X c Y  and sup(X)=sup(Y), then sup(Xu V)=sup( Y u  V) .

Let X,Ycl. If X c Y ,  then sup(X)bup( Y).

If XE F, then V Y d ,  YE F.

2.2. Closures, closed itemsets and generators  Closure of an itemset X is denoted by y ( X )  and is defined as the greatest (w.r.t. set inclusion) itemset that occurs in all transactions in D in which X occurs.

Property 2.2.1. Let X c I .

b) V YGI, if XcYcy(X), then sup( Y)=sup(X).

Proof Ad. a) Immediate by definition of a closure.

Ad. b). By Prop. 2.1.1 a, sup(,y)2riup( Y)hup(y(X)) and by Prop. 2.2. la, sup(y(X))=sup(X). Thus, sup(Y)=sup(X). 0  The itemset X i s  defined closed iff y(X)=X. The set of all  a) suP(Y(X))=suP(x3.

closed itemsets will be denoted by C, i.e.

c = {Xd y(X)=*.

Let X be a closed itemset. A minimal itemset Y satisfying  y( Y)=X is called a generator of X.  By G(X) we will denote the set of all generators of X. The union of generators of all closed itemsets will be denoted by G, i.e.

G = U{G(X) XEC}.

Example 2.2.1. Let D be the database from Table 1. The itemset {A,B,C,D,E} is closed since y( {A,B,C,D,E})=  {A,B,C,D,E}. The itemsets {A,B,C} and {A,B,C,D} are not closed because y({A,B,C})={A,B,C,D,~}#{A,B,C} and y( {A,B,C,D})={A,B,C,D,E}#{A,B,C,D}, respectively.

The support of {A,B,C} and {A,B,C,D} is the same as the support of their closure {A,B,C,D,E}, and is equal to 3.

{A,B,C} is a minimal subset the closure of which equals to  0 {A,B,C,D,E} . Hence, { A,B,C} E G( {A,B,C,D,E}).

I Id I Transaction I  Table 1. Example database D.

Property 2.2.2 [SI. Let X d .

y ( X ) = n { T E D I  T z X )  = n { Y c A  Y E C A Y ~ X ) .

Property 2.2.2 states that the closure of an itemset X can be computed: 1) as the intersection of the transactions in D that are supersets ofX, or 2) as the intersection of the closed itemsets that are supersets ofX.

Property 2.2.3 [2]. Let XGZ.

XEG iffsup(X) f min{sup(Al{A})I AEIY) .

Property 2.2.4. Let X c I .  XEG iff V Y d ,  sup(X)#sup(Y).

Proof By Property 2.2.3 and Property 2.1 . la.  0  Lemma 2.2.1. Let X,YcZ. IfXcYg(X) then VZaY ,  ZeG.

Proof (By contradiction): Let XcYcy(X)  and ZEG, Z=YuV, Y n  V=0 .  Since XcYcy(,Y), then sup(Y)=sup(x) (by Property 2.2.lb) and sup(z)=sup(Yuv)=sup(Xuv) (by Property 2.1.2). Hence, Xu V, whch is a proper subset of Z=YuV, has the same support as Z. Then by Property 2.2.4, Z e  G, which contradicts the assumption. 0  Lemma 2.2.2. If X c Y  and sup( Y)=sup(X), then y( Y)=y(a.

Proof: Let XcY and sup(Y)=sup(X). Then, the set of transactions in D in which X occurs, say D?, equals to the set of transactions in which Y occurs. Thus, by definition of a closure, y(X) as well as y(Y) are the greatest itemset that occurs in all transactions in D?. Hence, y( Y)=y(X). 0  Theorem 2.2.1. LetXcZ. IfXEG, then V Y m ,  YEG.

Proof (By contradiction): Let XEG and Y d  such that YEG. Then, by Property 2.2.4 there is some Z c Y  such that sup(Z)=sup(Y). Hence, by Lemma 2.2.2, y(Z)=y(Y) and thus ZcYg(Y)=y(z).  By Lemma 2.2.1, we conclude that X ,  which is a superset of Y, is not a generator. This  Theorem 2.2.1 states that subsets of generators are  conclusion contradicts the assumption. 0  generators (a different proof was provided in [2]).

Property 2.2.5. Let X z I .

a) sup(X) = max{sup(r)l YEC A Yza.

b) sup(X) = min(sup(Y) YEG A Y m .

Proof: Ad. a). Let Z=y(X). Then, Z z X  and ZEC. Thus, sup(X)=sup(Z) (by Prop. 2.2.la) and sup(X)hup(y) for every Y E  C such that YzX (by Prop. 2.1.1 a). Therefore, sup(X)=max{sup(Y)I YEC A Yza.

Ad. b). Let Z G  such that Z?G(y(X)). Then, ZEG and ZOq@i')=y(z). Thus, sup(X)=sup(Z) (by Prop. 2.2.1 b) andsup(X)Qup(Y) for every YEG, Yfl(by Prop. 2.1.1a).

Hence, in order to compute support of any itemset it is sufficient to know either supports of all closed itemsets or supports of all generators.

Therefore, sup(X)=min{sup(Y)I YEC A Y g .

2.3. Closed itemsets representation  Most research on concise representations of frequent itemsets was devoted to closed itemsets. Here we will present this representation.

An itemset X is defined to be frequent closed iff X is closed and frequent. In the sequel, the set of all frequent closed itemsets will be denoted by FC, i.e.

FC  = FnC.

Closed itemsets representation is defined as the set FC enriched by the information on support for each XE FC.

The property below is an immediate consequence of Property 2.2.5a and shows how to determine if an itemset is frequent and if so, how to determine its support based on the closed itemsets representation.

Property 2.3.1. Let Xcl .

Otherwise, XE F.

If there is ZEFC, such that Z z X ,  then XEF and sup(X) = max({sup(Y)[ YEFCA YzX)).

2.4. Generators representation  Generators are commonly used as an intermediate step for the discovery of closed itemsets. However, the generators themselves can constitute a concise lossless representation of frequent itemsets. Below we introduce such a generators representation:  Frequent generators, denoted by FG, are defined as:  FG = FnG.

Negative generators border, denoted by GBd,  is  G B d =  {XEG~XEFA(VYCY, YEFG)}.

GBd consists of all minimal (w.r.t. set inclusion)  defined as follows:  infrequent generators.

Generators representation is defined as:  0 the border set G B 6 ,  It can be proved that the generators representation as introduced here is equivalent to the approximate &free sets representation [3-41 for 6 0 ,  in which case the approximate representation becomes lossless.

The property below is an immediate consequence of Property 2.2.5b and shows how to determine if an itemset is frequent and if so, how to determine its support based on the generators representation.

Property 2.4.1. Let X E ~ .

the set FG enriched by the information on support for each XE FG,  the set ID of items that occurred in D.

If +&ID) or (326 G B d ,  Z f l ,  then XE F.

Otherwise, XE F and sup(* = min( {sup( Y)l YE FG A Y&).

2.5. Disjunction-free sets representation  The notion of disjunction-free sets was introduced in [SI. Let us present this concept by means of an auxiliary notion called a 2-disjunctive rule.

X3AlvA2 is defined a 2-disjunctive rule if X c I , A 1 , A z ~ / ,  Xn{AI,Az}=O. Observe, that a 2-disjunctive rule X=AlvAz can have an empty antecedent (X=0) and its consequents can be equal (A I=A2).

Support of XaA,vAz, denoted by sup(XaAIvA2), is defined as the number of transactions in D in which X occurs together with A I  or Az, that is:  S U ~ ( X ~ A I V A ~ )  = SUP(XLJ{AI}) + SU~(XU{A,}) - suP(Xu{AIJlz)).

Confidence of the rule X=AIvAz, denoted by condX3A IvAz), is defined as follows:  condXzA IvAz) = sup(X3A IvA~)/sup(X).

X3AlvA2 is defined a certain rule if confiX=AIvYz)=l. Thus, X3AIvA2 is certain if each transaction containing X contains also A I  or A 2 .

Example 2.5.1. Let us consider the database D from Table 1. To make the notation brief, we will write itemsets without brackets and commas (e.g. AC instead of {A,C}).

Let us consider the 2-disjunctive rule 0 3 A v A .  The rule is not certain since there is a transaction (T6) that contains 0, and does not contain A.  On the other hand, 0 a A v C  is a certain rule as each transaction in D contains A or C. Similarly, C a D v E  is a certain rule since each transaction containing C contains also D or E. 0  Property 2.5.1 (5 ) .  X=AlvA2 is certain iff sup(X) = sup(Xu{A 1 1 )  + s u p ( ~ 4 4 2 }  1 -sup(XLJ{A IJld 1.

Property 2.5.2 [SI. If X s A l v A z  is certain, then VZIX, Z 3 A l v A z  is also certain.

Example 2.5.2. Let us consider the database D from Table 1. The rule C ~ D V E  is certain, thus A C z D v E  and A B C s D v E  (and so forth) are also certain rules. 17  An itemset Xis defined disjunctive iff there are A,BEX such that A ( A , B } a A v B  is a certain rule. Otherwise, the itemset is called disjunction-free'. The set of all disjunction-free sets will be denoted by DFree.

Example 2.5.3. Let us consider the database D from Table 1 and the itemset DE. The only 2-disjunctive rules involving all items in DE are: 0 3 D v E ,  D s E v E , E-DvD. The rule E z D v D  is not certain, however Q ~ D V E  and D s E v E  are certain, thus DE is a disjunctive set (i.e. DEeDFree). Now, since 0 3 D v E  is certain in D, then by Property 2.5.2, A a D v E  is also certain. Hence ADEe DFree. Similarly, we can conclude ACDEeDFree (and so forth). The property below generalizes this observation. U Property 2.5.3 151.

a) b)  are defined as:  If XE DFree, then V Y S f ,  YE DFree.

If X E  DFree, then V Y d ,  Y E  DFree.

Frequent disjunction-free itemsets, denoted by FDFree,  FDFree = DFreenF.

Negative border of FDFree is denoted by DFreeBd and  DFreeBd = {XcA  X G  FDFree A (V Y c X ,  Y E  FDFree)) .

Disjunction-jiree sets representation is defined as: the set FDFree enriched by the information on support for each X E  FDFree, the border set DFreeBd enriched by the information on support for each XE DFreeBd, the set ID of items that occurred in D.

The disjunction-free sets representation is sufficient to determine all frequent itemsets and their supports [5] .

defined as:  3. New representation of frequent itemsets based on disjunction-free generators  In this section we will introduce a new representation of frequent itemsets based on frequent generators that are disjunction-free sets. We will prove that the new representation is sufficient to derive all frequent itemsets.

Disjunction-free generators, denoted by DFreeG, are  ' For the original definition of a disjunction-free set see [ 5 ] .  Based on Lemma 3 in [ 5 ] ,  we propose an equivalent definition that is more suitable for further presentation  defined as follows:  DFreeG = DFreenG.

Property 3.1. If X E  DFreeG, then V Y c X ,  Y E  DFreeG.

Proof: By Theorem 2.2.1 and Property 2.5.3b. U  Frequent disjunction-free generators, denoted by FDFreeG, are defined as:  FDFreeG = DFreenFnG.

Property 3.2. If X E  FDFreeG, then V Y d ,  Y E  FDFreeG.

Proof: By Property 2.1.1 b and Property 3.1. 0  Negative infrequent generators border, denoted by IDFreeGBd, is defined as follows:  IDFreeGBd = { X E  GI X E  F A (V Y d ,  Y E  FDFreeG)] .

IDFreeGBd consists of all minimal (w.r.t. set inclusion) infrequent generators the subsets of which are disjunction- free generators.

Negative frequent generators border, denoted by FDFreeGBd, is defined as:  FDFreeGBd = {XE GI XE F A X E  DFreeG A ( V Y d ,  YEFDFreeG)}.

DFreeGBd consists of all minimal (w.r.t. set inclusion)  Let us note that IDFreeGBd n FDFreeGBd = 0.

Disjunction-free generators representation is defined as:  the set FDFreeG enriched by the information on support for each X E  FDFreeC, the border set FDFreeGBd enriched by the information on support for each X E  FDFreeCBd, the border set IDFreeGBd, the set ID of items that occurred in D.

frequent disjunctive generators.

Theorem 3.1. The disjunction-free generators representation is sufficient to determine for any itemset if it is frequent and if so, to determine its support.

Proof (constructive): Any itemset X that is not a subset of ID is infrequent. In the sequel of the proof, we assume Xzl,,. The proof will be made by induction on N.

Induction hypothesis. For every itemset V a  we can determine if it is frequent or not, and if V is frequent then we can determine its support.

One can distinguish the following five cases: If X E  FDFreeC, then X E  F and sup(X) is known.

If X E  FDFreeGBd then XE F and sup(X) is known.

If 3 YEIDFreeGBd, Y f l ,  then XE F.

If 4 2 ~ I D F r e e G B d ,  Z G ,  and 3 Y E  FDFreeGBd, Y d ,  then X is a disjunctive set as a superset of some disjunctive itemset in FDFreeCBd (by Property 2.5.3a). Let Y E  FDFreeGBd and Y d .

Hence, there are some items A,BEY such that the     rule M { A , B } z A v B  is certain. Let A and B be such items. Then, by Property 2.5.2, A{A,B}=AvB is also certain and sup(X)=sup(A { A } )+sup(A { B}  )- sup(A{A,B}).  By induction hypothesis, we can determine if A { A } ,  A { B } ,  and A { A , B }  are frequent, and if so, we can determine their supports. If any of these itemsets is not frequent, then X g F .  Now, if all the three itemsets are frequent, then sup(X) can be determined according to the formula above. If sup(X)>minSup, then X E  F; otherwise X g  F.

Let XBFDFreeG and 4ZEFDFreeGBd vIDFreeGBd, Z O .  Then no generator being a subset of X is a superset of any ZEFDFreeCBd UIDFreeGBd. Hence, all generators being subsets of X are contained in FDFreeG. By Property 2.2.5b, sup(X)=min({sup(Y)J Y E G  A Y a ) .  In our case, this equation is equivalent to: sup(X)= min( {sup(Y)I Y E  FDFreeG A Y M ) .  Clearly, X E  F as sup(X) is equal to the support of some frequent  The proof of Theorem 3.1 can be treated as a naive algorithm for determining frequent itemsets and their supports.

Example 3.1. Given minSup=l, the following disjunction- free generators representation will be discovered in the database D from Table 1 (The information on supports of the itemsets is provided in the form of a subscript.):  disjunction-free generator. 0  FDFreeG = {Q, A5, B5, C5, D5, H2, Id, FDFreeGBd = (AB,, AC4, BC4, BD4, CO,}, IDFreeGBd = {F,  G, BH, BI}, ID = ABCDEFGHI.

Thus, the disjunction-free generators representation consists of 17 itemsets. Below we illustrate how to use this representation for evaluating the itemsets: ACDF and ACD.

The itemset ACDF is infrequent, as it is a superset of the itemset F i n  IDFreeGBd;  0 The itemset ACD is a superset of ACEFDFreeGBd, so ACD is disjunctive. The following 2-disjunctive rule is certain for AC: 0 a A v C .  Hence, D-.AvC is a certain 2-disjunctive rule for ACD. Thus, sup(ACD)= sup(AD)+sup(CD)-sup(D)=sup(AD)+4-5. We note that ADgFDFreeG and there is no subset of AD in the border FDFreeGBdvIDFreeGBd. Hence, sup(AD) = min({sup(Y)J YEFDFreeG A Y e D } )  = min{sup(0),sup(A),sup(D)} =5. Finally, sup(ACD)= 5+4-5=4. 0  In the disjunction-free generators representation all infrequent items are kept in IDFreeGBd. An alternative more concise representation of frequent itemsets will not  contain this information. Below, we specify such a reduced disjunction-free generators representation:  FDFreeG? = FDFreeG, FDFreeGBd? = FDFreeGBd, IDFreeGBd? = IDFreeGBd \ { { A }  I A E ID A {Aim, ID?=ID\ {AEIDJ  { A } E F } .

We observe that only IDFreeGBd and ID are reduced in this representation. The reduced disjunction-free generators representation can be used for retrieving frequent itemsets the same way as the original one.

Example 3.2. Given minSup=l, the following reduced disjunction-free generators representation will be obtained for the database D from Table 1 :  IDFreeGBd? = {BH, BI} ,  FDFreeG? = {06, A5, B5, C5, Dg, H2, 12], FDFreeGBd? = (AB4, AC4, BC4, BD4, CD.41,  ID? = ABCDEHI.

Let us note that the infrequent items F and G do not  0 occur in the reduced representation.

4. Disjunction-free generators versus generators and disjunction-free sets  In this section we investigate the relationship between generators and disjunction-free. sets and compare the disjunction-free generators representation with the generators and the disjunction-free sets representations.

Theorem 4.1. Let X c I .

a) b) c) DFreeG = DFree.

Proof: Ad. a) IfXeG, then 3 A d ,  sup(A{A})=sup(A?) (by Property 2.2.3). Thus A{A}-.AvA is a certain disjunctive rule. So, X g  DisFree.

Ad. b) By Theorem 4.1 a: X62 G implies XB DisFree. Now, X g G  implies X ~ D i s F r e e  iff 1XPG v XgDisFree iff --XE DisFree v X E  G iff XE DisFree implies X E  G.

Theorem 4.1 states an interesting fact that each disjunction-free set is a generator. The proposition below compares the disjunction-free generators representation with the generators representation.

Proposition 4.1.

a) FDFreeG v FDFreeGBd c FG, b) IDFreeGBd c G B d , c) FDFreeG U FDFreeGBd v IDFreeGBd v { I D }  E  Proof: By definitions of the disjunction-free generators representation and the generators representation. - 0  If XB G, then X E  DFree.

If X E  DFree, then X E  G.

Ad. c) Follows immediately from Theorem 4.lb.

FG v G B d  v { I D } .

It follows from Proposition 4. I that the disjunction-free generators representation constitutes a subset of the generators representation.

Example 4.1. Let us assume minSup=l. The following generators representation will be discovered in the database D from Table 1 :  FG = { a b ,  A5,Bs, C5, Ds, H2,I2, AB4, AC4, BC4, BD4, CD4, ABC3, B C D 3 1 , G B d  = {F ,  G, BH, BI} , 1, = ABCDEFGHI.

The generators representation consists of 19 itemsets.

In comparison with the disjunction-free generators representation (see Example 3.  l), the generators representation contains 2 more itemsets (the underlined ones). 0  In order to compare the new representation with the disjunction-free sets one, below we specify properties of sets characteristic for these representations.

Lemma 4.1.

a) IDFreeGBd = {XEGI X g F  A ( V Y d ,  y ~ F D F r e e ) } , b) FDFreeGBd = {XEGI X E F  A XgDFree A ( V Y d ,  YE FDFree)}, c) DFreeBdV; = {XcA X g  F A (V YcX,  Y E  FDFree)}, d) DFreeBdnF = { X z A  X E F  A XgDFree A ( V Y d ,  Y E  FDFree)} .

Proof: Ad. a) By Theorem 2.2.1, if an itemset X is a generator, then all its -subsets are generators. Thus, {XEGI X E F  A ( V Y d ,  YeFDFree)} = { X E  GI X E  F A (V YcX,  Y E  FDFreeG)} = IDFreeGBd.

Ad. b) Similar to that for the case a).

Ad. c, d) Immediate by definition of DFreeBd.  0  Now, we are able to compare both representations:  Proposition 4.2.

a) FDFreeG = FDFree, b) FDFreeCBd z DFreeBdnF, c )  IDFreeGBd = DFreeBdV;, d) FDFreeG v FDFreeGBd v IDFreeGBd v { I D }  FDFree v DFreeBd U { I D } .

Proof: Ad. a) Follows immediately from Theorem 4.1 c.

Ad. b) Immediate from Lemma 4.1 b, d.

Ad. c) We will prove that tDFreeCBd=DFreeBd\F by showing the equivalence of the following sets {XE GI X E  F A (VYcX,  Y E  FDFree)} and {XcA X g  F A ( V Y c X ,  YEFDFree)} that are equal to IDFreeGBd and DFreeBdV;, respectively (by Lemma 4.la,c).

Let X be an infrequent itemset whose all proper subsets are frequent. Then, V YcX,  sup( Y)>sup(X). By Property 2.2.4, each such itemset X i s  a generator.

The set {Xa X E  F A ( V Y c X ,  YE FDFree)} consists of infrequent itemsets whose proper subsets are frequent.

Thus, each itemset in { X z A X g F  A ( V Y d ,  YEFDFree)}  is a generator. Hence, {XzA X E F  A (VYcX,  YEFDFree)} ={XEGI X E F A  (VYcX,  YEFDFree)}.

As follows from Proposition 4.2, the disjunction-fiee generators representation constitutes a subset of the disjunction-free sets representation. Surprisingly, the both representations differ solely on the parts of the respective negative borders that contain frequent itemsets.

Example 4.2. Let us assume minSup=l. The following disjunction-free sets representation will be discovered in the database D from Table 1 :  DFreeBdnF = {~6 ,AB4 ,AC4 ,AD5,AH2,A12 ,  BC4,  Ad. d) Immediate from Proposition 4.2a-c.

FG = { @ 6 ,  A5, B5, C5, D5, H2, h},  BD4, CD4, CH2, c l 2 7  D H 2 ,  m2, H21, DFreeBdV; = { F, G, BH, BI} , I D  = ABCDEFGHI.

The disjunction-free sets representation consists of 26 itemsets. In comparison with the disjunction-free generators representation (see Example 3. l), the disjunction-free generators representation contains 9 more itemsets (the underlined ones). In accordance with Proposition 4.2, all the redundant itemsets belong to DFreeBdnF.  0  5. Computing disjunction-free generators representation  5.1. Algorithmic properties of disjunction-free generators representation  In this subsection, we provide properties that will be used in the algorithm determining the disjunction-free generators representation.

Lemma 5.1.1. Let X c I .  The following statements are equivalent.

3 A ~ X s u c h  thatA{A}=AvA is a certain rule.

3 A ~ X s u c h  that sup(x) = s u p ( A { A } ) .

e X E G .

Proof: ~ A E X  such that A{A)aAvA is a certain rule iff sup(X)=sup(A{A})+sup(X\{A})-sup(A{AJi}) iff sup(x)=  Lemma 5.1.2.

a) 0 ~ D F r e e .

b) ~ E G .

c) Proof: Ad. a) There is no 2-disjunctive rule involving only 0 and no more items. Hence, XEDFree.

Ad. b) Immediate from Lemma 5.1.2a and Theorem 4.lb.

Ad. c) (a) Immediate from Theorem 4.1 b.

( t ) I f  {A}EG, then D-AvA, which is the only  s u p ( A { A } )  iffXEG (by Property 2.2.3).

Let A E I .  { A }  EDFree iff { A }  EG.

2-disjunctive rule that can be built from { A } ,  is not certain  Lemma 5.1.3. Let XEG.  The following statements are equivalent.

X i s  a disjunctive set.

~ A , B E X  such that A+B and X \ { A , B } s A v B  is a certain rule.

~ A , B E X  such that A+B and sup(X)=sup(A{A})+ sup(A{BI )-sup(fi{A,B}.

Proof: Immediate by definition of a disjunctive set and Lemma 5.1.1. 0  (by Lemma 5.1.1). Thus { A }  E DFree.

5.2. Algorithm for determining disjunction-free generators representation  The outline of the DFreeCenApriori algorithm we propose is similar to that of Apriori (see [l]). It differs from the original algorithm by additional constraints that guarantee the resultant set to be restricted to the frequent disjunction-free generators and their border instead of the whole set of frequent itemsets.

In the algorithm we use the following notation: FDFreeGk, FDFreeCBdk, IDFreeGBdk, - k-itemsets in the respective components of the disjunction-free generators representation; ck - candidate frequent disjunction-free k-generators.

The itemsets are assumed to be kept in an ascending order. With each itemset c there are associated the following fields:  sup - support of c; minSubSup - minimum of the supports of the proper subsets of c.

The DFreeCenApriori algorithm starts with checking if the number of transactions in D is greater than minSup. If so, then 0 is frequent. By Lemma 5.1.2a-b, 0 is a disjunction-free generator. Hence, 0 is included in FDFreeCo provided 0 is frequent. Next, all items in D are identified and stored as I-candidates in C,. Their union determines ID. By Property 2.2.3, each itemset in C, is a generator if its support differs from s u p ( 0 ) .  In addition, Lemma 5 .1 .2~  guarantees that each generator in C ,  is a disjunction-free set. Hence, each generator in C I  is added to the set of frequent disjunction-free generators FDFreeCI, if its support is sufficiently high. Otherwise, it is included in the negative infrequent generators border IDFreeGBd,. Next, the 2-candidates C, are created from FDFreeC, by the AprioriCCen algorithm (see Subsection 5.3). Now, the following steps are performed level-wise for all k-candidates, for k22: 1. Supports for the candidate k-itemsets Ck are  determined by a pass over the database (see proc.

Supportcount)  The k-candidates ck the support of which differs from the supports of their proper subsets (c.sup;t c.minSubSup) are found generators (by Property 2.2.3).

Infrequent k-generators in Ck are added to the negative infrequent generators border IDFreeCBdk.

The IsDis function determines for each frequent k-generator if it is disjunctive (see Subsection 5.4).

Frequent disjunctive k-generators are added to the negative frequent generators border FDFreecBdk.

The remaining frequent k-generators are disjunction- free and hence, they are added to DFreeGk.

The AprioriGGen function is called to generate the candidate (k+l)-itemsets ck+l from the frequent disjunction free k-generators FDFreeCk and to initialize the minSubSup field for each new candidate (see Subsection 5.3). AprioriCCen follows Property 3.2 to guarantee that the (k+l)-candidates include all itemsets having all their subsets in FDFreeCk.

The algorithm ends when there are no more candidates.

Algorithm DFreeCenApriori(var FDFreeC, FDFreeCBd,  FDFreeG = {}; FDFreeGBd = {}; IDFreeCBd = {} ;  I D =  0; if ID1 > rninSup then begin  IDFreeCBd, ID);  0.sup = ID]; FDFreeGo = (0); C,  = { 1-itemsets in D with rninSubSup initialized to 0.sup);  forall candidates ceCI  do begin ID=UCi;  SupporrCount(C,); if c m p  # 0.sup then // c is a generator  if csup 5 minSup then add c to IDFreeCBd, /*or remove c from I D  if computing the reduced representation*/  else add c to FDFreeCl endif;  endif; endfor; C, = AprioriCCen(FDFreeC,); for (k  = 2;  ck # 0; k++) do begin  SupportCount( Ck); forall candidates C G c k  do  if c.sup # c.rninSubSup then // c is a generator if c.sup I rninSup then add c to IDFreeGBdk elseif IsDis(c, FDFreeGk., , FDFreeCk.2) then  else add c to FDFreeCk endif;  add c to FDFreeCBdk  endif; endfor; ck+l = AprioriGGen(FDFreeCk);  endfor; FDFreeG = u k  FDFreeGk ; FDFreeCBd = u k  FDFreeGBdk ; IDFreeCBd = u k  IDFreeCBdk ;  endif; return <FDFreeG, FDFreeCBd, IDFreeGBd, I&;     procedure SupportCount(var ck); forall transactions t e D  do  forall candidates ceck do if c t then c.count++; endif;  end for; end for; endproc;  Let us observe that an algorithm for computing the reduced disjunction-free generators representation would differ only slightly from the presented DFreeCenApriori algorithm. The only change would occur for candidate infrequent 1 -generators. Such candidates should be discarded from 1, instead of being added to IDFreeGBdl.

5.3. Generating candidates  The AprioriGGen function is similar to AprioriGen (see [ l ]  for details). The difference consists in additional computing the value of minSubSup field. For each new candidate c, minSubSup is assigned the minimum from the supports of the proper subsets of c.

function AprioriCCen(Gk); forallf; h EGk do  iff[l]=h[ 11 A ... ~f[k-l]=h[k-l] ~f[k]<h[k] then begin c =Al]*A2]* ...*A k]*h[k]; add C to c k + l  endif; endfor; I* Pruning *I forall C E C ~ + ~  do  forall k-itemsets s c c do i f s  e Gk then delete c from c k + ) else c.minSubSup = min(c.rninSubSup, s.sup) endif;  endfor; endfor; return c k + j ;  5.4. Checking if generator is disjunctive  The IsDis function checks if an itemset c provided as the first argument is disjunctive or not. It is assumed that c is a frequent generator of the size k22. The second and thrd arguments: FDFreeGk.I, FDFreeGk.z, contain all frequent disjunction-free generators of the size k-1 and k-2, respectively. Let us note that for every pair (gl,gz) of different (k-1)-subsets of c, g l n g z  is a (k-2)-subset of c.

IsDis checks if there is a pair (gl,gz) of different (k-1)-subsets of c satisfying the equation: sup(c)=sup(gl) +sup(g2)-sup(glng2). If so, then by Lemma 5.1.3 the itemset c is disjunctive and the function returns true.

Otherwise, c is not disjunctive and the function returns false.

function IsDis(k4temset c, FDFreeGk.l, FDFreeG,.?); I* Assert: c is a frequent generator of the size k 2 2 *I forall (k-1)-itemsets g,,g2 c c such that gl  f gz do begin  determine supports of gl  and gz based on FDFreeGk.l; determine support of (gl ngz> based on FDFreeGk.$ if c.sup = g,.sup + g2.sup - (glngz).sup then return true; endif;  end for; return false;  6. Conclus ions  An overview of concise lossless representations of frequent itemsets was provided. The new lossless disjunction-free generators representation was offered. It was proved that the new representation constitutes a subset of the generators representation and the disjunction-free sets representation. It was also proved that each disjunction-free set is a generator. The algorithm for determining the new representation was offered.

