

Sen Su, Shengzhi Xu, Xiang Cheng, Zhengyi Li, Fangchun Yang # State Key Laboratory of Networking and Switching Technology  Beijing University of Posts and Telecommunications, Beijing, China # {susen, dear_shengzhi, chengxiang, lizhengyi, fcyang}@bupt.edu.cn

I. INTRODUCTION Frequent itemset mining (FIM) is one of the most funda-  mental problems in data mining. It has practical importance in a wide range of application areas such as decision support, Web usage mining, bioinformatics, etc. Given a database, where each transaction contains a set of items, FIM tries to find itemsets that occur in transactions more frequently than a given threshold. Despite valuable insights the discovery of frequent itemsets can potentially provide, if the data is sensitive (e.g., web browsing history and medical records), releasing the discovered frequent itemsets might pose considerable threats to individual privacy.

Differential privacy [1] has been proposed as a way to address such problem. Unlike the anonymization-based privacy models (e.g., k-anonymity [2] and l-diversity [3]), differential privacy offers strong theoretical guarantees on the privacy of released data against adversaries with prior knowledge.

In particular, by adding a carefully chosen amount of noise, differential privacy assures that the output of a computation is insensitive to changes in any individual?s record, and thus restricting privacy leaks through the results.

A variety of algorithms have been proposed for mining frequent itemsets. FP-growth [4] is one of the most prominent ones. In particular, FP-growth is a depth-first search algorithm, which requires no candidate generation. Moreover, FP-growth only performs two database scans, which makes FP-growth an order of magnitude faster than classic FIM algorithm Apriori [5]. The appealing features of FP-growth motivate us to design a differentially private FIM algorithm based on the FP-growth algorithm. In this paper, we argue that a practical differentially private FIM algorithm should not only achieve high data utility and a high degree of privacy, but also offer high time efficiency. Although several differentially private FIM algorithms have been proposed [6], [7], [8], [9], we are not aware of any existing studies that can satisfy all these requirements simultaneously.

To this end, we propose a differentially private FIM al- gorithm based on the FP-growth algorithm, which is referred to as PFP-growth. The PFP-growth algorithm consists of a preprocessing phase and a mining phase. In the preprocessing phase, to improve the utility and privacy tradeoff, a novel smart splitting method is proposed to transform the database. For a given database, the preprocessing phase needs to be performed only once. In the mining phase, to offset the information loss caused by transaction splitting, we devise a run-time estimation method to estimate the actual support of itemsets in the original  database. In addition, by leveraging the downward closure property [5] (i.e., any supersets of an infrequent itemset are infrequent), we put forward a dynamic reduction method to dynamically reduce the amount of noise added to guarantee privacy during the mining process.

Through formal privacy analysis, we show that our PFP- growth algorithm is ?-differentially private. Extensive exper- iments on real datasets illustrate our algorithm substantially outperforms the state-of-the-art techniques.



II. BACKGROUND INFORMATION A. Differential Privacy  Differential privacy has gradually emerged as the de facto standard notion of privacy in data analysis. For two databases D and D?, they are neighboring databases if they differ by at most one record. Formally, differential privacy is defined as follows.

Definition 1: (?-differential privacy [1]). A private algo- rithm A satisfies ?-differential privacy iff for any two neigh- boring databases D and D?, and any subset of outputs S ? Range(A),  Pr[A(D) ? S] ? e? ? Pr[A(D?) ? S], where the probability is taken over the randomness of A.

B. Frequent Itemset Mining  Given the alphabet I, a transaction t is a subset of I and a transaction database D is a multiset of transactions. Each transaction represents an individual?s record. A non-empty set X ? I is called an itemset. We say a transaction t contains an itemset X if X is a subset of t. The support of itemset X is the number of transactions containing X in the database.

An itemset is frequent if its support is no less than the user- specified threshold. Given a transaction database and a user- specified threshold, the goal of FIM is to find the complete set of frequent itemsets.



III. SUMMARY OF THE TECHNICAL IDEAS In this paper, we present a private FP-growth algorithm,  which is referred to as PFP-growth. The framework of our PFP-growth algorithm is shown in Fig.2.

Our PFP-growth algorithm consists of a reprocessing phase and a mining phase. In the preprocessing phase, we transform the database to limit the length of transactions. The preprocess- ing phase is irrelevant to user-specified thresholds and needs to be performed only once for a given database. We argue, to enforce such a limit, long transactions should be split rather  Differentially Private Frequent Itemset Mining via Transaction Splitting  (Extended Abstract)      0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9   0.54 0.58 0.62 0.66 0.7  F -S  c o  re  Threshold  PFP  TT  PB  (a) PUMSB: F-score   0.04  0.08  0.12  0.16  0.2  0.24  0.28  0.32  0.36  0.4  0.54 0.58 0.62 0.66 0.7  R E  Threshold  PFP  TT  PB  (b) PUMSB: RE   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9   0.54 0.58 0.62 0.66 0.7  F -S  c o  re  Threshold  PFP  TT  (c) Accidents: F-score   0.04  0.08  0.12  0.16  0.2  0.24  0.28  0.32  0.36  0.4  0.54 0.58 0.62 0.66 0.7  R E  Threshold  PFP  TT  (d) Accidents: RE   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9   0.025 0.03 0.035 0.04 0.045  F -S  c o  re  Threshold  PFP  TT  PB  (e) POS: F-score   0.04  0.08  0.12  0.16  0.2  0.24  0.28  0.32  0.36  0.4  0.025 0.03 0.035 0.04 0.045  R E  Threshold  PFP  TT  PB  (f) POS: RE   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9   0.015 0.02 0.025 0.03 0.035  F -S  c o  re  Threshold  PFP  TT  PB  (g) Retail: F-score   0.04  0.08  0.12  0.16  0.2  0.24  0.28  0.32  0.36  0.4  0.015 0.02 0.025 0.03 0.035  R E  Threshold  PFP  TT  PB  (h) Retail: RE  Fig. 1. Frequent Itemset Mining  than truncated. That is, if a transaction has more items than the limit, we divide it into multiple subsets (i.e., sub-transactions) and guarantee each subset is under the limit. We devise a novel smart splitting method to transform the database. In particular, to ensure applying ?-differentially private algorithm on the transformed database still satisfies ?-differential privacy for the original database, we propose a weighted splitting operation.

Moreover, to preserve more frequency information in subsets, we propose a graph-based approach to reveal the correlation of items within transactions and utilize such correlation to guide the splitting process.

In the mining phase, given the transformed database and a user-specified threshold, we privately discover frequent item- sets. Despite the potential advantages of transaction splitting, it might bring frequency information loss. In the mining phase, inspired by the double standards method in [8], we propose a run-time estimation method to offset such information loss.

In particular, given the noisy support of an itemset in the database transformed by transaction splitting, we first estimate its actual support in the transformed database, and then further compute its actual support in the original database. In addition, by leveraging the downward closure property, we put forward a dynamic reduction method. During the mining process, we dynamically estimate the number of support computations, so that we can gradually reduce the amount of noise required by differential privacy.

Through formal privacy analysis, we show that our PFP- growth algorithm is ?-differentially private.

???? ???? ????   ?????	????????  ?????	???????  ??????	????????  ???????	????????  ?????????? ????????  ????!	"???	??#????  $????%?????	????????   ?????!	&???	"???	??????? ?????????? ??????  ?  ??????  Fig. 2. The Framework of PFP-growth Algorithm

IV. EXPERIMENTAL RESULTS We compare our PFP-growth algorithm with the following  two algorithms. 1) the ?TT? private algorithm proposed in [8], which privately find itemsets whose support exceeds a given threshold. 2) the ?PrivBasis? algorithm proposed in [7], which privately find the k most frequent itemsets. Besides, to evaluate the performance of the algorithms, we follow two widely used standard metrics: F-score [8] and Relative Error (RE) [7].

Fig. 1 shows the performance of PFP, TT and PB with different values of threshold on four publicly available real datasets Pumsb-star (PUMSB), Accidents, BMS-POS (POS) and Retail [10], [11]. We do not show the performance of PB in Accidents since PB does not scale to deal with large k. For metric F-score, from Fig. 1, we can see PFP achieves better performance. Moreover, for metric RE, we can see that PFP can gain comparable performance with PB in term of RE in most cases.

