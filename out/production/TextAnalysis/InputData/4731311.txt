SCOPE: An Efficient One Pass Approach to find strongly Correlated Item Pairs

Abstract  This paper presents an efficient one pass technique, SCOPE (Strongly COrrelated item Pairs Extraction), which finds all the strongly correlated item pairs from transaction database, without generating any candidate sets. We ex- perimented with real and synthetic datasets and compared the performance of SCOPE with its other counterparts i.e.

TAPER and Tcp and found satisfactory.

1 Introduction  Traditional association rule mining technique [3] is based on support-confidence framework. However, support-confidence framework can be misleading; it can identify a rule (A ? B) as interesting (strong) when, in fact the occurrence of A might not imply the occurrence of B. Thus, the support and confidence measures are insuffi- cient at filtering out the uninteresting association rules [3].

It has been well observed that item pairs with high support value may not imply statistically highly correlated. Simi- larly a highly correlated items pair may exhibits low sup- port value. To tackle this weakness, a correlation analy- sis [5] can be used to provide an alternative framework for finding statistically interesting relationships. To define this problem, assume that a user-specified minimum correlation threshold ? and a market basket database with N items and T transactions are given, an all-strong-pairs correlation query attempts to find all item pairs with correlations above the threshold ?.

To address this issue, this paper presents a technique which extracts all the strongly correlated item pairs in only one pass over the database and it does not generate candi- date sets. The technique uses a data structure, i.e a corel- logram matrix for capturing the frequency count of all the 1- and 2-itemsets using single pass over the database. Next, it extracts all the strongly correlated item pairs based on the support count from corellogram matrix. The performance of the proposed technique has been found satisfactory in  comparison to both TAPER [5] and Tcp [8], in light of vari- ous real and synthetic datasets.

2 Background and Related Works  In statistics, relationships among nominal variables can be analyzed with nominal measures of association such as Pearson?s correlation coefficient and measures based on Chi Square [4]. The correlation coefficient [4] is the compu- tational form of Pearson?s correlation coefficient (PCC) for binary variables. An equivalent support measure based ? correlation coefficient computation technique has been in- troduced in [5] to find correlation of item pairs in a trans- action database based on their support count. For any two items X and Y in a transaction database, the support based correlation coefficient can be calculated as:  ? = Sup(X, Y )? Sup(X) ? Sup(Y )?  Sup(X) ? Sup(Y ) ? (1? Sup(X)) ? (1? Sup(Y )) (1)  Where Sup(X),Sup(Y) and Sup(X, Y) are the support of item X , Y and joint support count of (X,Y) respec- tively.Next we discuss and analyze two relevant algorithms, TAPER and Tcp.

2.1 TAPER [5]  It is a candidate generation based technique for find- ing all strongly correlated item pairs. It consists of two steps: filtering and refinement. In filtering step, it applies two pruning techniques. The first technique uses an upper bound of the ? correlation coefficient as a coarse filter, or, in other words, if the upper bound of the ? correlation coef- ficient for an item pair is less than the user-specified corre- lation threshold ?, right way the item pair is pruned. In or- der to minimize the effort for computation of upper bound of all possible item pairs, TAPER applies second pruning technique based on the conditional monotone property of the upper bound of the ? correlation coefficient. For an   DOI 10.1109/ICIT.2008.10     item pair X,Y, if upper bound is less than ?, then all the item pairs involving item X and the rest target items hav- ing support less than Y will also give upper bound less than ?. Based on that monotone property, straightway one can avoid such computation of upper bound for other items. In the refinement step, TAPER computes the exact correlation for each surviving pair and retrieves the pairs with correla- tions above ?. As usually the two element candidate sets are huge. The upper bound based pruning technique is very effective in eliminating such large number of item pairs dur- ing candidate generation phase. However, with a database of large number of items and transactions, testing of those candidate pairs can be found expensive.

2.2 Tcp [8]  It is an FP-tree [6] based technique, is another milestone in the strongly correlated item pair extraction, which breaks the bottlenecks of the TAPER. The strongly correlated item pairs are generated without any candidate generation. Tcp includes two sub processes: (i) construction of the FP-Tree, and (ii) computation of correlation coefficient of each item pairs using the support count from FP-tree and extraction of all the strongly correlated item pairs having correlation greater than ?. The efficiency of FP-Tree based algorithm can be justified as follows: (i) FP-Tree is a compressed rep- resentation of the original database, (ii) the algorithm scans the database twice only and (iii) the support value of all the item pairs is available in the FP-Tree. However, it (i) con- structs the entire FP-tree with initial support threshold zero and the time taken to construct such FP-tree is quite large, especially when size of dimensionality is large, and (ii) re- quires large space to store the entire FP-Tree in the memory; particularly when the number of items is very large. Next, we report a technique which handles these issues efficiently.

3 SCOPE: The one pass approach  SCOPE finds all the strongly correlated item pairs from any transaction database using single scan over the database without generating any candidates. It uses a correlogram matrix to store the support counts of all 1- and 2- element itemsets. Later, the matrix is used to calculate ? (correla- tion coefficient) of all the item pairs and extracts the pairs with correlations above ?. Next, we describe SCOPE phase- wise. n ? (n + 1)/2  3.1 Correlogram Matrix based Technique  Correlogram matrix i.e. the co-occurrence frequency matrix is a matrix of size: n ? (n + 1)/2, where, n is the number of dimensions present in the database. Each cell of the matrix contains the frequency of co-occurrence of item  Figure 1. Sample market basket dataset.

Figure 2. Correlogram matrix.

pairs. Item pairs are specified by row index and column in- dex of the cell. For example, to specify the frequency of co- occurrence of item pair 4, 5, corresponding to sample mar- ket basket dataset depicted in Figure 1, the content of the cell (4,5) in the matrix (see Figure 2) with an index of row 4 and column 5 will indicate the co-occurrence frequency of the item pairs 4, 5. On the other hand, the diagonal cells having same indices i.e. row and column indices are same, specifies the occurrence frequency of the single element set.

Thus, as can be found in Figure 2, the cell (3, 3) indicates the occurrence frequency of the single itemset 3.

3.1.1 Construction of Correlogram Matrix  To construct the correlogram matrix, we try to model the situation as graph. All the items participated in a particular transaction are considered as nodes. As the items are ap- peared in the transaction in a lexicographical order, so we can say that they form a directed graph involving all those items as nodes of the graph. All the items are linked by a single link or edge. Thus, there is only one directional path exists between any two nodes. To illustrate it, let us con- sider the same sample market basket dataset given in Figure 1. In case of Transaction 4, item 1, 2, 4 and 5 participated in the transaction. Thus, they form a directed graph as shown in the Figure 3. To count the co-occurrence frequency of all the items participated in a particular transaction, we count the links among all the pairs of nodes and correspondingly increment the content of a cell having index (say, node1 and node2). Thus, if we consider the above example depicted in Figure 3, we increment the content of cell (1, 2), (1, 4), (1,     Figure 3. Item nodes forming directed graph.

5), (2, 4), (2, 5) and so on. We also increment the count of first node of a pair i.e. during increment of the count for pair (1, 2), we also increment the content of the cell (1, 1).

The intension behind such increment is to keep track of the frequency of occurrence of 1-itemset. Thus by following this procedure, one can construct the correlogram matrix by scanning the database once only.

3.1.2 Extracting strongly correlated item pairs  From the correlogram matrix it is very simple to extract the support count of 1 and 2-itemsets. Using these support counts, next we compute the correlation coefficient of all the item pairs using equation (1) and extract all the item pairs those satisfy the given ? (i.e. correlation coefficient) constraints. It is advantageous, because it (i) provides inter- active strongly correlated item pairs mining for different ? values; (ii) requires no candidate generation; (iii) requires only single scan over the database; (iv) faster, and (v) easy to implement.

4 SCOPE: The Algorithm  The algorithm accepts the market-basket database i.e.

D and the correlation coefficient threshold ? as input and it generates all the strongly correlated item pairs as out- put. Step 1 of SCOPE, (see Figure 4), is dedicated to the construction of the correlogram matrix using single scan of the original database. In step 2a, the correlation coeffi- cient of each item pair is computed and in step 2b, all those item pairs are extracted, whose coefficient values are greater than or equal to ?. Finally, the algorithm returns list of all strongly correlated item pairs.

4.1 Analysis of SCOPE algorithm  Here, we analyse SCOPE in terms of completeness, cor- rectness and the computation savings.

4.1.1 Completeness and Correctness  Lemma 1. SCOPE is complete i.e. SCOPE finds all strongly correlated pairs.

Figure 4. SCOPE Algorithm  Proof. Since SCOPE is based on exhaustive search and computes correlation coefficient of all pairs without prun- ing any item pairs, so, SCOPE extracts all the strongly cor- related item pairs having coefficient greater than threshold ?. This fact ensures that SCOPE is complete in all re- spects.

Lemma 2. SCOPE is correct i.e. the correlation coefficient of all the pairs, extracted by SCOPE, is above threshold ?.

Proof. The correctness of SCOPE can be guaranteed by the fact that,SCOPE calculates exact correlation of each pair present in the database and prune all those pairs whose correlation coefficient lower than user specified threshold ?.

4.1.2 Space Complexity  TAPER needs memory space for keeping support count of all items and also to store a huge number of candidate item pairs, depending on the threshold value ?. Tcp creates an entire FP-tree in the memory which is normally very huge when the number of transactions as well as the dimension- ality is large and also depends on the number of unique pat- terns of items in the database. Sometimes it is difficult to construct such tree in the memory. However, SCOPE al- ways requires a fix memory of size,n ? (n + 1)/2 for n dimensional market basket database, to construct correlo- gram matrix .

4.1.3 Time Complexity  The computational time complexity of SCOPE can be ana- lyzed as follows: a)Construction of correlogram matrix. Let us consider that the database contains T number of transactions and maxi- mum E number of items in each transaction. So, to scan the database once it requires (T ?E) times. For storing and updating support count in correlogram matrix with respect to each transaction it requires to find out the all pair com- bination of the items present in that transaction. Thus, the     Table 1. Detail specification of datasets Data Set No.of No. of Avg. size of No. of  Transactions Items Transaction Pattens  Mushroom 8124 128 - - T10I400D100K 100,000 400 10 20 T10I600D100K 100,000 600 10 20 T10I800D100K 100,000 800 10 20  T10I1000D100K 100,000 1000 10 20 T10P1000D100K 100,000 1000 10 1000  time requirement for updating the count is E2. Thus the to- tal time complexity for construction of correlogram matrix is: O(T ? E2).

b)Extraction of strongly correlated item pairs. Since for calculating the correlation of each pair SCOPE has to tra- verse the correlogram matrix once, thus the time require- ment for extracting all the strongly correlated item pairs is O(n? (n+1)/2) ? O(n2/2), for n dimensional databsase.

5 Performance Evaluation  To evaluate the performance of SCOPE we implemented and tested SCOPE and its other counterparts (i.e. TAPER and Tcp) in a P-IV 2.80 GHz machine with 512 MB mem- ory. We used Java for implementation of SCOPE and TA- PER. Since performance of Tcp highly dependent on FP- tree implementation, we used FP-tree implementation by Christian Borgelt [1] to avoid implementation bias. To test the performance, we generated several synthetic datasets us- ing ARMiner [2] according to the specifications given in Table 1. We also used real life Mushroom dataset (market basket) [7].

Performances of all the three algorithms were compared in terms of execution time for different values of ?(see Figure 5). In case of Tcp, it is found to be expensive, especially when the dimensionality is large, as it generates entire FP- Tree with initial minimum support value zero. For exam- ple, in case of T10P1000D100K dataset, Tcp failed to mine.

However, in all cases, SCOPE exhibits comparatively bet- ter performance than TAPER and Tcp. With the decrease in ?,the running time requirements of TAPER also increases, since low ? value generates large number of candidate sets.

But, SCOPE and Tcp keeps stable running time for the whole range of correlation threshold in different datasets.

It further confirmed the fact that like Tcp, SCOPE is also robust with respect to input parameters.

6 Conclusion  An efficient strongly correlated item pairs finding tech- nique has been presented in this paper. The technique is ca-  Figure 5. Execution time comparison be- tween SCOPE, Tcp and TAPER.

pable to generate all the strongly correlated item pairs just in one scan over the database. Experiments have shown that SCOPE is faster than both Tcp and TAPER.

