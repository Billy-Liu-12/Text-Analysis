Proceedings of International Workshop on Data Mining and Artificial Intelligence (DMAI' 08) 24 December, 2008, Khulna, Bangladesh

Abstract  Association rule mining is to extract the interesting correlation and relation between the large volumes of transactions. This process is divided into tlvo sub problem: first problem is to find the frequent itemsets from the transaction and second problem is to construct the rule from the mined frequent itemset.

Frequent itemsets generation is the requirement and most time vast process for association rule mining.

Nawadays, most efficient Apriori-like algorithms rely heavily on the minimum support constraints to prune the vast amount of non-candidate itemsets. These algorithms store many unwanted itemsets and transactions. In this paper propose a novel frequency itemsets generation algorithm called MTR-FMA (Modified Transaction Reduction based Frequent Itemset Mining algorithm) that maintains its performance even at relative low supports. The experimental reports also sholv that proposed MTR- FMA algorithm on an outset is faster than High Efficient AprioriTid and other some algorithms.

Keywords Association rule mining, Frequent itemsets,  Modified Transaction Reduction, MTR-FMA  1. Introduction  Data Mining refers to extracting or mining knowledge from large amounts of data. In 1993, Agarwal, Imielinski, and Swami introduced a class of regularities, association rules and gave an algorithm for finding such rules [3]. The typical example for association rule mining is Market Basket analysis. The Bar code technology has made it possible for retail organizations to collect and store massive amounts of sales data. A record in it typically consists of itemsets bought in each transaction in each row. Finding association rules for such basket data will improve the   sales and cross marketing. Other applications include store layout, add on sales and customer segmentation.

In general, the work of association rule can be decomposed into two phases:  (1) Frequent itemsets generation - find out all itemsets that sufficiently exceed the minsup, and (2) Rules construction - from the frequent itemsets, generate all association rules having confidence higher than the mincont: Since the second phase is straightforward and less expensive, This paper concentrate only on the first phase for finding all frequent itemsets.

This paper has proposed a new algorithm called MTR-FMA (Modified Transaction Reduction based Frequent Itemset Mining algorithm) to efficiently mine frequent itemsets. This paper has also proved that the proposed algorithm MTR-FMA has an edge over existing algorithms like Apriori, AprioriTID, HEA (High Efficient AprioriTid) and FP-Growth in terms of transaction reduction and speed. The rest of the paper is organized as follows. A review of the previous works regarding AprioriTid and HEA are given in the next section. Then this paper will describe the proposed theorem with proof and the proposed algorithm called MTR-FMA for finding frequent item sets. Empirical evaluations and results of the proposed algorithm (MTR-FMA) over other algorithms using FIMI's dataset (retail.dat) and other synthetic data sets are described in the next section.

Conclusions are stated in the last section.

2. Previous Works  2.1. Apriori Algorithm  The Apriori [3-6] algorithm is a level wise search algorithm for mining frequent itemsets for boolean association rules. The large itemsets are computed through iterations. In each iteration, the database is scanned once and all large itemsets of same size are computed. The large itemsets are computed in the    ascending order of their sizes. In the first iteration, the size 1- large itemsets are computed by scanning the database once. Subsequently, in the kth iteration (k> 1), a set of candidate sets Ck is created by applying the candidate set generating function Apriori-gen on Lk - 1, where Lk - 1 is the set of all large (k-I) - itemsets found in the iteration k-l. Apriori-gen generates only those k-itemsets whose every (k-l)- itemsets subset is in L k-l' The support counts of the candidate itemsets in Ck are then computed by scanning the database once and the size-k large itemsets are extracted from the candidates. The drawback of Apriori is that when the cardinality of the longest frequent itemsets is k, Apriori needs k passes of database scans. In addition, this algorithm is computation intensive in generating the candidate itemsets and computing the support values, especially for application with very low support threshold and / or vast amount of items. In this algorithm, if the number of first itemsets element is k, DB will be scanned k times at least. So it will have low efficiency. It is a base point to reduce the number of itemset for improving the Apriori algorithm.

2.2. AprioriTID Algorithm  The AprioriTID [2] is another variant of Apriori which reduces the time needed for the frequency counting procedure by replacing every transaction in the database by the set of candidate sets that occurs in that transaction. This is done repeatedly at every iteration k. The adapted transaction database is denoted  by Ck. Although the AprioriTID algorithm is much faster in later iterations, it performs much slower than Apriori in early iterations. This is mainly due to the  additional overhead that is created when Ck does not fit into main memory and has to be written to disk [7- 10]. If a transaction does not contain any candidate k-  sets, then Ck will not have an entry for this  transaction. Hence, the number of entries in Ck may be smaller than the number of transactions in the database, especially at later iterations of the algorithm.

The AprioriTid algorithm also uses the Apriori-gen function to determine the candidate itemsets before the pass begins.

The transaction in Ck will be of the form <TID, {Xk}>, where each Xk is a potentially a large k-itemset present in the transaction with identifier TID. The  member of Ck corresponding to the transaction t is defined as  Ck = <1. TID, {c ? Ck I c contained t} >   The drawbacks of ApririTID are that the modified data structure can be much larger than the initial database and only faster in the later stage of the passes.

2.3. High Efficient AprioriTid Algorithm  HEA [1] is the improved algorithm of AprioriTID.

Here, the member of Ck corresponding to the transaction t is defined as  Ck = < 1. TID, {c ? Ck I c contained t, c.support ~ minsup} >  This considerably decreases the size of stored data  in Ck [1] Moreover, searching data scale is reduced when computing support of itemsets in Ck' At the same time, it reduces much time of I/O and running.

The process is described as follows: (a). Confirming itemset c in Ck, then the transaction set Te presented with TID including the item of c, is computed. (b).

The number of entries computed in Te, defined as the ITel, which is support of itemset c. (c). IflTel2: minsup, c is included into L k and Ck, otherwise deleting c.

Through the above process, with the computed support  in Ck, void itemset can be directly deleted from Ck or  added to Ck and Lk. After analyzing this algorithm, this paper found that HEA can be further improved by reducing unwanted transactions and itemsets which is explained in next section through the proposed new algorithm MTR-FMA.

3. Proposed MTR-FMA Algorithm  MTR-FMA-Modified Transaction Reduction based Frequent Itemset Mining algorithm in Figure 1 is an improvement algorithm of AprioriTid and HEA whose idea is based on the theorem described in next sub section. Here relationship of transaction t with the  entry in Ck is defined as  Ck= < t.TID, {c c Ck I c contained t, c.support 2: minsup, Titems > k, t.no-of combinations> I} >  Each member of the set Ck will be of the form <TID, {Xk}> where each Xk is a potentially large k- itemset present in the transaction with identifier TID.

3.1. Theorem and Proof  Theorem: If c ? Ck - 1 and c.support < minsup, Titems :s k, m = 1, then c is useless in Ck - 1 where Titems is total itemcount in each transaction and m is the no. of combinations.

If (Titems > k) then begin  c= Uk<p,c>; end end  Ifl C I * 1 then begin Ck=C;  12)  13)  14) 15)  16)  17) 18) end 19) end 20) end 21) end  22) Ans = Uk Lk ;  Proof: 1. [For Titems ~ k] From the Apriori-gen algorithm, it is known that Ck  is formed from Lk - 1. Consider a transaction Ti={Ij , 12, I j , ???? , 1m }. The candidate generation would lineup  from Cl =< {II}, {I2},{Ij }, ???? , {1m}>; C2=<{ II, I2},{ II, Ij }, ????? ?,{ II, 1m}.{ 12, 1m}, , {1m-I, 1m}>;  C3=<{ II, 12, I j },{ II, I], I-I}, ,{ I], Ij , 1-1 } { Im-2, 1m-I, 1m}>;  and it will go up to Cm =< {II, I], Ij , ???? , 1m}>. So {II, I], Ij , ???? , Im}will not appear in Cm + 1. That is to say that this algorithm need not compute the Cm + 1 inTi.

Hence, VTi E Cm + 1, Ti need not be taken  into account. So, Ti can be rejected in Cm + 1 . Hence the proof  2. [For m =1, where m is no. of combinations] Now consider the same transaction Ti = {II,  I], Ij , ???? , 1m}. In general the candidate generation would have <{ II},{ 12}, ???? , {II, 12},?? ,{ I}, Im}, ??? ,{ 12, 1m} ????? { II, 12,... , 1m}>  Ifall the itemsets in CK except one is rejected during Lm - 1due to above hypothesis (say Ab remains) then Ck + 1will contain only <{Ab}>. So <{Ab}> alone will not able to form a candidate in Ck + 1. Hence in  Such VTi E Ck + 1 , Ti can be rejected in Ck + 1 ? Hence the proof.

Figure 1. MTR-FMA Algorithm  INPUT : D, minsup OUTPUT: L (D, minsup)  1) Ll = {large l-itemsets};  2) Cl = Database D; (With all items not in Ll and VIi Titems =1 removed)  3) For (k=2; Ck - 1 *<I>; k++) do begin 4) Ck = Apriori-gen( Lk - 1) II New candidates  5) Ck = <I>; 6) For all c ? Ck do begin  7) C =cI>;  8) Tc ={t.TID I t ? Ck - 1 ,(c - c[k]) ? t.set-of- itemsets 1\ (c - c[k]) ? t.set-of-itemsets)}  9) Ifl Tc I~ minsup then begin  10) Lk =Uk {c}; 11) For all p ? Tc do  3.2. MTR-FMA Algorithm Details  Let consider the following example in Table 1 to show how MTR-FMA works. The algorithm starts by scanning the database to generate 1- frequent  itemset L1 ? C1 is generated with itemsets that are  present in L1. For k = 1, C1 corresponds to the database D although conceptually each item I is  replaced by the itemset {i}. For k> 1, CK is generated by the apriori-gen algorithm. Confirming itemset c in Ck, then the transaction set Tc presented with TID, including itemset c is computed. The number of entries is computed in Tc defined as I Tel which is support of itemset c. If I Tel 2: minsup, c is included into Lk and  Ck , otherwise deleting c.

If the total itemcount of a transaction Titems ~ k,  then that transaction t is deleted from Ck - 1 ? Also, if - - ICk I = 1, then it is also not included in Ck and that transaction is deleted from Ck - 1 ? Thus the entries in  Ck may be smaller than the transaction in database especially for large values of k. The corresponding  LK and Ck are shown in Tables 2,3,4,5,6 and 7.

Table 1. Sample Database  Tid Items  Tl a, e, t: h T2 b,d,h  T3 d, e, g  T4 b,c  T5 e, t: g T6 b, c, d  T7 b, t: g, i T8 e     T9 h TIO c, e, g  TIl c, e, g  TI2 e, t: h  TI3 b, d, t: g  TI4 a, c, e, g  Tl5 b, c, i  Table 2. Lt  Table 5. C2  TID Items T5 {e, g},{e, f},{t: g} T6 {b, c},{b, d}  TIO {c, e},{c, g},{e, g} TIl {c, e},{c, g},{e, g} TI3 {b, d},{f, g} Tl4 {c, e},{c, g},{e, g}  TID Items  Item set Frequency  b 6  c 6  d 4  e 8  f 5  g 7  h 4  Item set {c, e, g}  Table 6. L3  Frequency  Table 7. C3  Table 3. Cl  Tid Items TI {e},{f},{h} T2 {b},{d},{h} T3 {d},{e},{g} T4 {b},{c} T5 {e},{f},{g} T6 {b},{c},{d} T7 {b},{f},{g} TIO {c},{e},{g} TIl {c},{e},{g} Tl2 {e},{f},{h} Tl3 {b},{d},{f},{g} TI4 {c},{e},{g} TI5 {b},{c}  Table 4. L2  Item set Frequency {b, c} 3 {b, d} 3 {c, e} 3 {c, g} 3 {e, f} 3 {e, g} 5  {t: g} 3   4. Result and Discussion  The proposed algorithm have tested various datasets like FIMI data set [16] and synthetic dataset and compared them with Apriori, and FP growth whose implementations were used from [17] and [18]. Since no public implementation of AprioriTID and HEA is available this paper used the own implementations to compare with MTR-FMA algorithm. Using a sample Database of 1020 transactions with 9 items this paper tested MTR-FMA with AprioriTID and HEA. With the minimum support as 20%, the results are as shown in the Table 8 [11 - 15] and figure 2.

Table 8. Contrast of Record numbers  Records AprioriTID HEA MTR-FMA -  2720 2720 2584Cl -  2584 1524 1088C2 - C3 340 204 0 - C4 0 0 0    Figure 2. Comparison of Apriori , REA and MTR- FMA  ~ 2500 ....-Apriori Tid~ lo-o  2000ull) cz::: -4-HEA e...-. 15000 0 1000 _MTR-FMAZ    This paper used the dataset retail.dat from FIMI site [16] with 17822 transactions and 9999 items. The experiment is performed on HP dx 2280 with processor clock cycle 2.0 GHz, 512 MB of main memory. The Figure 4 shows the result up to the minimum support of8%.

Figure 4.Execution Times of FP- Growth and MTR- FMA on retail.dat  5.-------------------.

K Value 4  ,,, -+-------------1__ --_a__-.--. ? ....

TIME (in sec) 2  3 -+---------+~From the Table 8 it is observed that number of records is averagely reduced to 35 % when compared to AprioriTID and 18 % when compared to HEA.

Hence the execution will also be considerably reduced.

The graph in the Figure 2 is plotted with the help of the Table 8.

Figure 3.Execution times of Apriori and MTR- FMA  2 3 4 5  SUPPORT (in %)  6 7 8  TIME (in sec)      l2      o --I--t_~""'---r----r------r----r------r--l 1000 10000 100000 200000 300000 400000  No. ofTransaction (3 % Support)  5. Conclusion  This paper proposed a novel data structure, an MTR-FMA algorithm to mine frequent itemsets. The advantages of MTR-FMA over existing algorithms include (1) Interactive mining with different supports (2) Faster execution time (3) Infrequently used item are not stored and hence improves the size of the query data. This paper has implemented MTR-FMA algorithm and compared proposed approach with other known algorithms. From the experimental results, MTR-FMA is shown to be more efficient and scalable to large amount of transactions and out perform other algorithms.

6. References  This paper also compared proposed MTR-FMA algorithm with Apriori using the synthetic dataset whose transaction varies from 1000 to 500000 and with a constant minimum support of3% in Figure 3.

[I] Zhi-Choa Li, Pi-Lian Hi and Ming Lei, "A High Efficient AprioriTID Algorithm for mining Association rule", learning and cybemetics,18-21 AUG 2005.

[2]He Li-jia~ Chen Li-chao, Liu shuang-ying, "Improvement of AprioriTid Algorithm for Mining Association Rules", Journal ofYantai University, Vol. 16, No.4, 2003.

[3] R. Agrawal, lShafer, ....Parallel mining of association Engineering, 8(6), December 1996.

[4] Agrawal, T Imielinski, A Swami, ""Mining association rules between sets of items in large databases'\ Proceedings of the ACM SIGMOD Conference on management of data, 1993, pp. 207-216.

[5] R.C. Agarwal, C.C. Aggarwal, and V.V.V. Prasad. Depth first generation of long patterns. In Ramakrishnan et at. [32], pp. 108-118.

[6] R. Agrawal, T. Imielinski, and A.N. Swami. Mining association rules between sets of items in large databases. In P. Buneman and S. Jajodia, editors, Proceedings of the Management of Data, volume 22(2) of SIGMOD Record, ACM Press, 1993, pp. 207-216.

[7] R. Agrawal, H. Mannila, R. Srikant, H. Toivonen, and A.I. Verkamo. Fast discovery of association rules. In U.M. Fayyad, G. Piatetsky- Shapiro, P. Smyth, and R. Uthurusamy, editors, Advances in Knowledge Discovery and Data Mining, MIT Press, 1996, pp 307-328.

[8] R. Agrawal and R. Srikant. Fast algorithms for mining association rules. In lB. Bocca, M. Jarke, and C. Zaniolo, Very Large Data Bases, Morgan Kaufmann, 1994, pp: 487- 499.

[9] R. Agrawal and R. Srikant. Fast algorithms for mining association rules. IBM Research Report RJ9839, IBM Almaden Research Center, San Jose, California, June 1994.

[10] C. Borgelt and R. Kruse. Induction of association rules: Apriori implementation. In W. H"ardle and B. R"onz, editors, Proceedings of the 15th Conference on Computational Statistics, 2002, pp. 395--400.

[11] R. Agrawal and R. Srikant. Quest Synthetic Data Generator. ffiM Almaden Research Center, San Jose, California, ttp:llwww.almaden.ibm.com/cs Iquest I syndata.html.

[12] Basket and Sequence Analysis Benchmarks, XELPOES Java Version 1.1.7, Prudsys AG, Germany.

[13] Survey on Frequent Pattern Mining, Bart Goethals, HIlT Basic Research Unit, University of Helsinki, Finland.

[14] Ja-Hwung Su, Wen-Yang Lin: CBW: An efficient algorithm for Frequent Itemset Mining, Proceedings of 37th    [15] Jiawei Han, Jian Pei and Yiwen Yin, Mining Frequent Pattern without Candidate Generation, School of Computing Science, Simon Fraser University.

[16] FIMI dataset - http://fimLcs.helsinki.fI!

[17] Apriori public implementation http://fuzzy.cs.uni- magdeburg.del -borgelt/software.

[18] FPGrowth public implementation- \VW\v.csc.1 iv.ac.uk/frans/KDD/Sofhvare/FPgrowth/fbGro\vth.

html  [19] Data Mining - Concepts and Techniques, Jiawei Han, Micheline Kamber.

