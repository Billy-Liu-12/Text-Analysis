

TransparenT CompuTing  Transparent Computing: A Promising Network Computing Paradigm  Yaoxue Zhang, Kehua guo, and Ju ren | Central South University, China Yuezhi Zhou | Tsinghua University, China Jianxin Wang and Jianer Chen | Central South University, China  By adopting the transparent computing paradigm, user terminals are becoming more lightweight with enhanced security, improved energy efficiency, and cross-platform capability. A comprehensive survey indicates future directions of transparent computing, from traditional terminals to mobile devices. New challenges and potential research directions for applying transparent computing to mobile devices could foster further study.

I n the past 10 years, the emergence of new technologies such as cloud computing and big data have changed the core functions of computers and the Internet from computing and communicating to col- lecting, storing, analyzing, and using various data and services. Simultaneously, we have witnessed the proliferation of mobile devices and are heading toward the Internet-of-Things (IoT) era, where light-  weight and mobile devices are the dominant terminals on the Internet and in our daily life. In 2014, the global revenue of the mobile Internet totaled US$3.3 trillion, and smartphone shipments exceeded 1.3 bil- lion units (approximately three times the volume of PC shipments; www.catr.cn/kxyj/qwfb/bps/201512/ P020151211378960738048.pdf). Clearly, the network computing environment is gradually evolving into a mobile Internet in which mobile devices request different services via various wireless communication networks, such as Wi-Fi, cellular, and ad hoc networks.

The dramatic increase in mobile devices and services provides significant opportunities and motivates the evolution of the computing paradigm from PCs to mobile devices. However, new terminals and net- work environments also introduce new challenges. Lightweight terminals and smart applications (apps)    TransparenT CompuTing  8  January/February 2017  possess such characteristics as mobility, portabil- ity, user dependency, immediacy, and privacy. In the mobile Internet era, server-centric computing paradigms (virtual desktops, cloud computing, and big data processing) have been the representative technologies, but they offer only partial solutions to certain problems.1 On these platforms, multiple virtual operating systems (OSs) run on cloud serv- ers, and users access various resources via a remote desktop from different types of terminals. Com- puting is performed by servers, whereas terminals exclusively receive and display the processed data.

Although server-centric computing paradigms such as cloud computing have the advantages of easy maintenance, centralized management, and high server utilization, they present limitations and numerous challenges to terminals. First, termi- nals require a lot of storage and a high processing capability to store and execute OSs and software programs as they communicate with central serv- ers. Second, because of the loss of credibility and controllability in terminals, users might be vulner- able to many types of security attacks, such as data theft, data tampering, and privacy leakage Third, because terminals only display computing or pro- cessing results, an inferior user experience could happen when terminals support apps that require frequent user interactions. In short, server-centric computing paradigms only solve problems from the server and network perspective, not from that of users and services.

Transparent computing,2 which was first pro- posed in 2004, is a promising solution for mitigat- ing or addressing these challenges. The core idea  is that all data and software, including OSs, apps, and user information, are stored on servers, with data computing performed on terminals. Users can obtain heterogeneous OSs and apps from servers and run them at their own terminals without need- ing to know underlying hardware and implementa- tion details.3 User interruptions from terminals are redirected to a server through a network connec- tion to request the corresponding instructions and data, which are subsequently executed in a page- streaming pattern. Thus, transparent computing possesses the following four advantages:  ?	 It reduces terminals? complexity and cost. Terminals can become extremely simple, nearly bare machines without software, thus making them more lightweight and reducing hardware costs.

?	 It improves the user experience. The terminal is not only responsible for cross-platform display, but it can also run heterogeneous programs from various platforms, thus making it capable of supporting apps that require frequent inter- actions, such as video games.

?	 It offers a high level of security. We can track pro- gram execution routes from servers to termi- nals, and because instructions on terminals are dumped after use, system security is enhanced.

?	 It offers cross-platform capability. With a transpar- ent computing platform, it?s possible to develop apps that work across hardware and software platforms. For example, iOS apps can be com- patible with Android apps, which lets users freely access services hosted on networks that cross het- erogeneous software and hardware platforms.4  Server-centric computing paradigms such as cloud computing are based on parallel virtualiza- tion and solve the issue of data in the cloud, whereas transparent computing emphasizes data storage on servers and computation on terminals, streaming both execution and heterogeneous services support for heterogeneous terminals. However, server-centric computing paradigms and transparent computing aren?t mutually exclusive; cloud resource manage- ment and big data processing can also be applied on the server side of transparent computing. In essence, transparent computing extends the bus transmission found in traditional computer architecture to the network (see Figure 1).

Given the inherent advantages of transparent computing, a large number of researcher and compa- nies have focused on the topic over the past decade.

Many transparent computing standards and products  Figure 1. A new paradigm. Transparent computing extends the bus transmission found in traditional computer architectures.

Input Output Storage  Computing  Traditional computer architecture  Bus  Input Output  Storage  Computing  Transparent computing architecture  Network  Bus Bus  Network  Network    www.computer.org/cise     9  have emerged, attracting significant attention from both industry and academia. In 2007, a research team at Intel designed a transparent computing plat- form called UEFI (Unified Extensible Firmware In- terface) and developed several apps on it by utilizing Intel?s new-generation BIOS (Basic Input Output System).5 Academic researchers have also developed transparent computing systems to support heteroge- neous hardware architectures based on UEFI.6 Dur- ing the 2012 Intel Developer Forum, Renee James, executive vice president and general manager of the company?s Software & Services Group, proclaimed, ?The next era of computing is transparent comput- ing? (http://download.intel.com/newsroom/kits/ idf/2012_fall/pdfs/IDF2012_Renee_James.pdf).

Transparent computing has garnered attention from the media as well. In 2012, ScienceDaily post- ed, ?An Operating System in the Cloud: TransOS Could Displace Conventional Desktop Operat- ing Systems? (https://www.sciencedaily.com/re- leases/2012/10/121009111944.htm), and TechEye posted, ?Researchers to Push OS into the Cloud? (www.techeye.net/software/researchers-to-push-os- into-the-cloud). TechNewsDaily, ScienceNewsline, iSGTW, gizmag, Xataka, and eWeek have also re- ported on the topic.

In this article, we provide a comprehensive sur- vey of transparent computing and indicate some future directions for it, from traditional terminals to mobile devices.

Transparent Computing: Concept, architecture, and Key Technologies Transparent computing lets users enjoy services via on-demand network access with any type of device, without needing to know the location of OSs, middleware, and apps.3 This paradigm sepa- rates data storage and program execution in dif- ferent computers connected by communication networks. Data and software (including OSs) are stored and scheduled by servers but executed on users? terminals.7 No OS, middleware, or appli- cation programs are installed on users? terminals; rather, they?re dynamically loaded from the server through the network when users submit requests.2  As Figure 2 shows, transparent computing has an architecture consisting of service, OS, network, and terminal layers.

In the service layer, software and user data are stored on servers. Services can be heterogeneous and are automatically associated with different underly- ing Oss; users can request any service regardless of the underlying OS.2 Services can be deployed by download or user install, and they generally include a wide variety of options, such as games, instant messaging tools, and smart home apps.

The OS layer stores heterogeneous OSs. To sup- port heterogeneous services, underlying OSs must be maintained by the servers. When a user requests a service, the servers automatically choose the un- derlying OS and select the OS kernel, thereafter  Figure 2. Transparent computing. The four-layer architecture consists of (a) service, (b) operating system, (c) network, and (d) terminal layers.

Wired/wireless network Client system  Skype Game TV  Internet karaoke DVD  QQ iPad OVi  (b) Operating system  (c) Network  (d) Terminal layers  Heterogeneous service  (a) Service  Server  Client  MRBP NSAP?  ((Heterogeneous OS    TransparenT CompuTing  10  January/February 2017  transmitting the kernel together with any requested service apps to the user?s terminal. Generally, both services and OSs are stored on the servers that are responsible for managing OSs, software, and user data. In transparent computing, computation and storage are spatiotemporally separated. Suit- able OSs and software are dynamically dispatched from the servers to users? terminals and executed on the terminals in a buffer-enabled block or a streaming way.

The network layer controls communications and data transmission between servers and users.

Software, OSs, and data are formed as blocks or streams that flow from the servers to users? ter- minals. Some communication protocols such as MRBP (Multi-OS Remote Booting Protocol)8 and NSAP (Network Storage Access Protocol)9 have  been developed to support remote booting and block transmission.

The fourth layer is responsible for receiving and executing services on user terminals, which are of- ten diverse and frequently lightweight, ranging from PCs to smartphones or pads to wearable devices.10 The terminals need only store the underlying BIOS and a selection of protocols and management pro- grams, thus enabling the terminals to be securely and easily managed and maintained.

Figure 3 shows a technical overview of the key technologies in transparent computing. There are eight technical points in a transparent comput- ing platform, namely, multi-OS remote booting, streaming loading, lightweight virtualization, data transport protocols, server management, client in- terface, security, and performance optimization.

Figure 3. Key technologies in transparent computing. There are eight technical points in a transparent computing platform, namely, multi-OS remote booting, streaming loading, lightweight virtualization, data transport protocols, server management, client interface, security, and performance optimization.

Hardware  EFI/UEFI (MRBP, device driver)  NSAP client NSAP server  Network card  driver  Disk I/O, streaming load  I/O  OS  App  Transparent server  management  OS resource management  App management  server  App management  Apps and resource library  Hardware  EFI/UEFI (MRBP, device driver)  MRBP  Data storage and  conversion  Interface  Security verification  Transparent network Transparent terminal  (X86/ARM/...) Transparent server  (1) Multi- OS remote  booting  (7) Security  (2) streaming  load (3) Lightweight  virtualization  (4) Data transport protocol  (8) Performance optimization  (5) Server management  (6) Client interface  Transparent client  Identity authentication  Caching strategy  Schedule optimization  Transmission optimization  Load balancing  Transport protocol  Security monitoring  Transparent networkNetwork  card driver  Transport protocol    www.computer.org/cise     11  representative solutions for implementing Transparent Computing In the past decade, several studies have focused on transparent computing. Concomitantly, some sys- tems based on its underlying concept have been suc- cessfully developed and invested for industrialization.

In 2007, researchers developed a transparent comput- ing system for PCs and proposed a novel Meta OS approach for streaming programs named 4VP.10 In 2008, another team proposed a performance model- ing and analysis algorithm for the Multi-OS booting process in a transparent computing environment.11 In 2012, researchers developed a virtual machine-based network storage system for a transparent computing platform.12 Since 2007, Intel has embedded UEFI into transparent computing architecture and devel- oped many apps based on this combined platform.5,6  According to its definition, we can divide transparent computing?s eight core technologies into three general ones, namely, transparent cloud architecture (Figure 3, parts 1 through 6), Meta OS (Figure 3, parts 1 through 3), and client imple- mentation (Figure 3, part 6), plus two additional technologies (security, Figure 3, part 7, and perfor- mance optimization, Figure 3, part 8). The follow- ing subsections describe the three core categories in detail, followed by the additional technologies.

Transparent Cloud architecture In the transparent cloud architecture (see Figure 4), existing algorithms and schemes13 that have been verified to improve cloud computing?s performance can be employed at transparent servers to manage and schedule resources. The difference being that, in cloud computing, both data storage and com- puting are performed on servers, whereas in trans- parent computing, data storage happens on servers, but data computing happens on user terminals.4  A transparent computing system has two pri- mary types of units: transparent servers and trans- parent users. Transparent servers are a cluster of cloud servers for storing OSs, apps, and user data.

A well-developed system (Meta OS) runs on the server side and handles three jobs14: creating and managing an OS pool, creating and managing an app pool, and communicating with users based on transmission protocols. Additionally, management algorithms are employed on the server side to pro- vide access control and file management.13 In terms of transparent users on the user side, Meta OS is responsible for remote accessing, OS booting, and executing required apps. OSs and apps can run through lightweight virtualization technologies.12  The transparent cloud architecture can support heterogeneous terminals, such as PCs, smartphones, and embedded and wearable devices. Figure 5 shows an example of heterogeneous terminal support. In this example, a Linux-supported calling service is stored on transparent servers and provided for user access. All OSs and apps stored on the servers are managed by Meta OS. Users need only install the Meta OS on their terminals; services, together with the supported OS (Linux), are transported to the ter- minals in a buffer-enabled block or streaming way.

As the foundation of transparent computing sys- tems, the transparent cloud architecture has attracted significant attention from both research and industri- al communities. Researchers have designed a virtual machine to implement a transparent computing sys- tem15 that lets users enjoy services without needing to worry about technical issues. Based on that, other researchers developed a lightweight virtual machine, called LBTC, to implement a transparent computing system that can decrease extra overhead and redirect storage I/O requests to transparent servers.16 Another study has proposed a virtual machine-based network storage system in which heterogeneous OSs and apps can be supported on demand without any modifi- cation.12 A remote resource management method (TMON) has been proposed17 for transparent com- puting, and a virtual machine monitor (VMM) has been exploited to enable client virtualization and computation with very little overhead, especially in support of graphically intensive apps.18  Figure 4. Transparent cloud architecture. In cloud computing, both data storage and computing are performed on servers, whereas in transparent computing, data storage happens on servers, but data computing happens on user terminals.

Virtual apps  Meta OS  Hardware (x86, ARM,  MIPS?)  Server Terminal (phone, instrumentation, manufacturing control equipment, wearable devices, and so on  Network  Virtual OSs  App pool  Hardware  U se  r/ da  ta m  an ag  em en  t  Softwares (including OS) are stored at server  Apps are run at lightweight terminals  Meta OS  OS pool    TransparenT CompuTing  12  January/February 2017  meta os Located between the hardware platform and OS, Meta OS is responsible for managing hardware and software resources, including OSs, to provide users with secure and reliable computing services. The key technologies of Meta OS include kernel distri- bution, computing, storage, management separa- tion, ?block-flow? execution, cache, protocol, and virtualization. The Meta OS empowers users to se- lect their desired services across different OS plat- forms, thus making computers more powerful and convenient. An improvement of Meta OS was pro- posed7 to manage the separation of software and data, which systematically introduces the mecha-  nisms and algorithms for separating software and user data.

Meta OS contains three critical components: Multi-OS remote booting protocol (MRBP), net- work service access protocol (NSAP), and virtual device, I/O, and resource management.

MRBP. The function of MRBP is to boot an OS re- motely, from transparent servers to users? terminals, via networks based on a user?s selection.14 MRBP has two parts: an MRBP client running on the user side, and an MRBP server running on the server side. Figure 6 shows the interaction procedures of the MRBP protocol.

Some achievements related to MRBP have been proposed in the past decade. In 2003, research- ers19 presented a network-based client booting pro- tocol, NCBP, which utilizes an extended dynamic host configuration protocol (DHCP) to obtain a lo- cal identifier. The proposed NCBP can load a batch script language environment based on a secure and active program transport protocol (APTP). In 2006, researchers20 proposed a remote booting mechanism, in which the remote booting protocol is based on file downloading and can support multi-file OS kernel (Windows 2000 as well as XP, for example) booting protocols. Another study8 proposed a new remote booting protocol, MRBP2, by which different OSs can be accessed from servers and dynamically execut- ed on users? terminals. In 2008, researchers11 designed a closed queuing network model to investigate the per- formance of remote booting in transparent computing for workload evaluation. In 2009, a study21 proposed ENCBP, an extended NCBP for remotely booting multiple OSs, that can improve the performance of remote booting and further enhance security by dif- ferentiating the kernel types of loaded OSs.

NSAP. As an integral part of Meta OS, NSAP is employed to transmit signals, instructions, and data between transparent servers and users. In 2009, researchers9 proposed NSAP for transparent computing, to provide reliable data transmission throughout a local area network (LAN) and realize OSs and other data shared among different users.

The working procedures of NSAP can be il- lustrated as follows. To start, NSAP establishes and maintains communication connections between transparent servers and users. Then, each user forms a request queue to store his or her service requirements and sends that queue to the servers. Upon receiving the user?s request, servers analyze the request queue and read/write corresponding data from/to the storage  Figure 5. Example of heterogeneous terminal support in transparent computing. A Linux-supported calling service is stored on transparent servers and provided for user access. All OSs and apps stored on the servers are managed by Meta OS. Users need only install the Meta OS on their terminals.

Digital home appliances  Calling service  PC  Phone  MID  LID  Heterogeneous hardware platform  Calling service  One service  Te rm  in al  Server  MRBP NSAP? Meta OS  Figure 6. Interaction procedures of Multi-OS remote booting protocol (MRBP).

MRBP client(n) MRBP server(1) Network boot  request  Image/data transportation  User authentication  Acquisition of instance OS list    www.computer.org/cise     13  system. Finally, servers send a response, including the required data or services, to the user. In Meta OS, NSAP can collaborate with MRBP to complete data transmission and remote booting (see Figure 7).

Some related works have proposed performance improvements for data transmission in transparent computing. One group22 significantly improved network file system (NFS) performance by setting the optimal block size for reading/writing and us- ing TCP as an NFS transport protocol. Other re- searchers23 proposed a dynamic trivial file transport protocol (DTFTP) that?s based on a cross-layer design to improve data transmission performance and reduce packet loss. By utilizing DTFTP, the transmission rate can increase by 54 percent. Other studies24,25 proposed an efficient multicast group- ing mechanism over wireless local area network (WLAN), by which the average system loading time (average waiting time) can be greatly reduced and user experience can be improved.

Virtual device, I/O, and resource management. Vir- tual device and I/O management are of significant importance in transparent computing. In 2007, researchers26 proposed an I/O management meth- od, IOMan, to support multi-OS remote booting and apps running in LAN and to reduce the cost of using and maintaining computer systems. IO- Man uses a software solution to set up disk access redirection; it doesn?t need to modify the booting mechanism of certain commercial OSs, such as Windows, and doesn?t affect other I/O operations.

In 2008, researchers27 proposed an optimal fore- cast algorithm and a prefetching strategy to ac- celerate I/O processing. In addition, researchers28 proposed a novel method, Control-Splitted Data Transfer (CSDT), to process data transmission requests in transparent computing systems, which can improve the efficiency of data transmission.

In 2012, researchers12 proposed a virtual ma- chine-based network storage system for transparent computing to support heterogeneous OSs and apps.

After that, they proposed a virtual storage device driver model for transparent computing, TVDSM, to support remote loading and running of heteroge- neous OSs and apps on heterogeneous platforms.29 A multimedia I/O access control policy for transpar- ent computing, the classification and aggregation- based virtual I/O mechanism (CAVIO), was pre- sented30 to enhance multimedia I/O performance.

In 2014, researchers31 developed a virtual disk-based cloud computing platform, combining the charac- teristics of cloud computing and transparent com-  puting, to provide heterogeneous services.

Importantly, virtualization in transparent  computing is different from traditional virtualiza- tion technologies (such as VMWare). In VMWare, virtualization is parallel, while in transparent computing, virtualization is serially implemented from servers to users, which can be more adapted to lightweight terminals. Figure 8 shows the virtu- alization differences between VMWare and trans- parent computing are shown in Fig. 8.

In transparent computing, resource manage- ment mainly includes data and user management.

In 2009, researchers32 proposed a block-based data consistency method (BDCM) to solve the data in- consistency problem in transparent computing.

It has a superior performance to normal PCs and similar systems with the same hardware. In 2013, a study33 proposed a shared resource and service management (SRSM) scheme, in which heteroge- neous resources and services can be dynamically scheduled and accounted on demand. In 2014, a researcher34 designed a multi-OS booting program for smart terminals in mobile transparent comput- ing that completes multi-OS booting by embed- ding lightweight system booting programs and Meta OS in smart terminals. In 2015, a team35 pre- sented a new solution to ensure quality of service for resource provisioning in virtualized environments.

Figure 7. Collaboration of network service access protocol (NSAP) and MRBP.

UEFI (BIOS)  Meta OS  UEFI (BIOS)  MetaOS NSAP  MRBP  OSs (Windows, Linux?)  OSs (Windows, Linux?)  ServerClient  Figure 8. Virtualization differences between VMWare and transparent computing.

V1  V1  Vi  Vn  VMWare: parallel virtualization  TC: serial virtualization    TransparenT CompuTing  14  January/February 2017  Client implementation One of the most important characteristics of trans- parent computing is its support of heterogeneous ser- vices over heterogeneous terminals. Therefore, client implementation is critical for transparent computing.

At the Intel Developer Forum 2012, representa- tives for Intel stated that HTML 5 is the preferred technology for achieving client implementation in transparent computing ( http://download.intel.com/ newsroom/kits/idf/2012_fall/pdfs/IDF2012_Re- nee_James.pdf). In October 2014, based on modifi- cations to HTML 4 (standardized in 1997), the fifth revision of the HTML standard was proposed by the World Wide Web Consortium (W3C).36 Compared with the previous versions, HTML 5 possesses the following new characteristics: rich semantic infor- mation, client canvas support, client offline storage support, rich multimedia support, cross-document message, and multithread support.

In transparent computing, HTML 5 is a suit- able candidate for client implementation. Com- pared with traditional client apps, HTML5 has its own advantages (see Figure 9). HTML 5 possesses the advantages of cross-platform support and low development costs. However, browser differences and Web security attacks also pose challenges to the use of HTML 5. In transparent computing, a browser engine can be implemented down to the  Meta OS layer, browser differences can be shield- ed, and cross-platform streaming execution can be achieved to improve the user experience.

security Although transparent computing can provide ad- vanced security for transparent users, it?s still vul- nerable to some traditional security risks, such as privileged user access, viruses, malicious attack, and data theft. Meanwhile, this new computing paradigm also faces new security challenges,37 in- cluding Multi-OS remote booting, virtual disk sharing, centralized security, confidentiality, integ- rity, and availability. To address the potential secu- rity risks in transparent computing systems, several approaches have been proposed.

One approach provides active protection in Meta OS.38 Because Meta OS is located between the hardware and the OS layer, it can monitor software and user data. We can change the boot- ing area of the file system and develop secure OS booting and data transmission protocols, such that security can be guaranteed in the OS boot- ing process by adding a control and protection module over the original file system. Figure 10 describes the location of the control and protec- tion module.

In 2007, researchers38 proposed a security en- hancement for MRBP and MRBP2, called RBIS (remote booting integrity service), to resist attacks by downloading code into the networks. Based on RBIS, transparent computing can guarantee a se- cure booting process based on integrity checksum, which can also establish credible links from UEFI firmware and pass up step-by-step to enhance secu- rity. Figure 11 shows the RBIS framework.

A second approach is to provide virus immu- nity via streaming execution. In transparent com- puting, all data obtained from transparent servers, including software and user data, will be eliminat- ed from users? terminals after execution, such that viruses have few opportunities to jeopardize those terminals.

Another approach is to conveniently monitor and manage data streams. In transparent comput- ing, monitoring points can be added to I/O devices for inspecting the transmitted data stream. Because data reading and writing can be intercepted by net- work interruption, data stream monitoring can en- sure data integrity and accuracy (see Figure 12).

In 2010, researchers37 summarized the secu- rity challenges in transparent computing. In 2014, a study39 proposed the transparent computing security  Figure 9. Differences between HTML 5 and traditional client apps.

Local resource and system API  APP Browser APP shell  HTML 5  Implementation  APP search  Download Install  Browser URL HTML parser  UseAPP  HTML 5  Usage mode  Figure 10. Control and protection module.

?? File  sector ??  Boot sector  Master node sector  Boot sector  Master node sector  ?? File  sector ??  File structure in traditional pattern  File structure in TC  Control and protection module    www.computer.org/cise     15  architecture (TCSA), which empowers users to take the initiative to protect their own data. In addition, researchers40 proposed a provably secure key agree- ment protocol using smart cards that?s based on three-party authentication and can provide high- level security protection.

performance optimization Performance optimization is another research fo- cus in transparent computing. To improve quality of service and the overall user experience in trans- parent computing, existing works mainly optimize system performance from two aspects: buffer opti- mization and load balancing.

Buffer optimization involves designing buffer management algorithms to control the data buffers in both servers and user terminals.41 On the user side, frequently accessed software and user data can be cached to reduce network load, while on the server side, frequently requested OSs, software, and user data can be pre-fetched from hard disks into memory with the purpose of reducing the I/O cost. In 2009, researchers42 proposed a shared storage cache simulator (SSCS) algorithm that improves the traditional stack-distance model by developing user management and providing accu- rate cache performance analysis. In 2011, a study43 presented the LRU-AFS algorithm based on the count threshold of data accessing times to increase the hit ratio. In 2012, researchers44 proposed an optimal cache arrangement policy for transpar- ent computing to improve system performance by analyzing workload characteristics and building a queuing model accordingly. In 2013, a team45 de- signed a buffer adaptation method for high-speed data transmission. In 2015, researchers46 proposed a TCCRM cache replacement algorithm, deployed on the server side, to improve the server cache hit rate and reduce the frequency of I/O responses.

Another method for improving transparent computing performance is to balance the data I/O requests among a cluster of servers. Researchers47 proposed a dynamic load-balancing algorithm based on transparent computing to share resources among clusters of servers. Another team48 theoretically for- mulated the data scheduling problem in transpar- ent computing as a two-stage flow shop scheduling problem, which has been proven to be NP-hard.

Accordingly, the researchers proposed two approxi- mation algorithms to reduce the make span of re- sponding data requests and theoretically analyzed the upper bounds of the proposed algorithms. Other works focused on developing load-balancing algo-  rithms to improve energy efficiency49 or investigated and optimized the performance of transparent com- puting from other aspects. One team50 analyzed and evaluated the performance of LongXing Network Computers, which are developed based on transpar- ent computing. Another work51 proposed a simple algorithm to extend the traditional two-hop relay algorithms with delay constraints. Researchers52 also proposed an enhanced algorithm to provide good performance in transparent computing systems by reducing the number of spurious timeouts and im- proving transmission efficiency.

Transparent Computing for mobile Devices: new Challenges and Future Directions Because of the inherent advantages of the comput- ing paradigm, mobile transparent computing of- fers a promising way to make mobile devices more powerful, convenient, and secure. However, when applying this computing paradigm to mobile de- vices, we face some new challenges caused by new terminals and network environments.

new Challenges The first new challenge is how to support lightweight and energy-constrained mobile user terminals in a transparent computing framework. Generally, desk- tops and laptops have more powerful processing  Figure 11. Remote booting integrity service (RBIS) framework.

Meta OS  Transparent client  Transparent server  RBIS interactive proxy  RBIS management (certificate  generation and maintenance)  MRBPserver  OS  PreOS  ICode  MRBP client  NSAPserver  RBIS implementation  Configuration  Startup  Integrity checksum layer by  layer  Figure 12. Monitoring and managing data streams.

Client CPU  Client RAM  Client cache  Server ROM  Monitoring point  Server cache  Network buffer  Server RAM    TransparenT CompuTing  16  January/February 2017  capabilities than lightweight mobile terminals, such as mobile phones and wearable devices. Therefore, existing solutions for client implementation and re- source management should be carefully improved for resource-limited mobile terminals. In 2013, re- searchers53 proposed a completely cross-platform mobile transparent computing (CPMTC) method that can allocate on-demand resources and services to support various OSs and apps. Energy is a criti- cal and unreplenishable resource in battery-powered mobile devices, thus, guaranteeing the battery life of terminals without compromising quality of service is an important and challenging research issue in mobile transparent computing.

Another challenge is the unstable and costly wireless communication found in the mobile In- ternet. Wireless networks are characterized by low- bandwidth, intermittent, and less-reliable trans- mission grounds, compared with wired networks.

When mobile terminals connect to remote trans- parent servers to run apps, those apps and their users? data would be fully transmitted by unstable wireless communications. Although current wire- less technologies, such as 4G and the anticipated 5G technology, might be able to facilitate high- speed data transmission, unstable wireless com- munications, caused by temporally and spatially varying wireless radio environments, still pose con- siderable challenges in guaranteeing the user expe- rience in mobile transparent computing. Latency  is another challenge that could have significantly adverse impacts in terms of energy efficiency and the interactive response of transparent computing applications by consuming abundant mobile re- sources and increasing transmission delays. More- over, costly data traffic in the mobile Internet is a problem should also be addressed to encourage mobile transparent computing.

Last but not least is the challenge of supporting heterogeneous wireless networks and continuous user mobility while ensuring seamless connec- tivity to transparent servers. In mobile transpar- ent computing, the integration of heterogeneous wireless networks (such as Wi-Fi and cellular net- works) poses many technical challenges caused by the heterogeneity in different architectures, access protocols, and user mobility patterns. To address these challenges, it?s critical to develop an adaptive protocol suit, similar to AdaptNet,43 that can al- leviate a plethora of heterogeneity issues, particu- larly rate adaptation and congestion control, and facilitate interoperation among various networks.

Additionally, the integration and interoperation of heterogeneous networks in mobile transparent computing require lightweight, resource- and cost- effective, sustainable, and user-friendly approaches with optimized performance to address seamless mobility. A mobile user?s movement out of range from transparent servers would prove fatal to the task being performed unless there are additional resource providers along the user?s path, so it?s im- portant to maintain seamless connectivity with the least signal traffic and latency, to enrich the mobile user?s experience.

Future research and Development Directions In academia, technical issues remain that require further investigation to improve the performance of mobile transparent computing. First, a tailored architecture should be designed for mobile transparent computing to alleviate the challenges caused by new terminals and network environments.

The architecture should be able to jointly leverage the advantages of the transparent computing paradigm and the characteristics of mobile devices and networks to improve the mobile user?s experience. Moreover, because mobile data traffic is tremendously hiked by ever-increasing user demands, future research efforts should be devoted to achieving high-speed and reliable data communication between transparent terminals and servers. In addition, because mobile devices have become the information hub in our daily lives, user data?including contextual information  Figure 13. Xiangya medical big data platform.

Medical Big Data Platform  Data sharing  Software reuse  ??  Tr an  sp ar  en t  co m  p ut  in g  Computing at terminal  Software stream load  Xiangya 1st hospital  Xiangya 3rd hospital  APP2APP1CT  Data analysis system  Data Software  MRI ? ?    www.computer.org/cise     17  such as location?can be leaked, putting user privacy into jeopardy. How to preserve user privacy in the mobile transparent computing framework thus constitutes a critical issue for future study.

In industry, transparent computing has expe- rienced some successful application?for example, China Mobile?s Aspire Company developed a new type of network operating system based on transpar- ent computing, called TNOS. In Changsha, trans- parent computing is being applied to help build the Xiangya medical big data platform, which can sup- port cross-regional, cross-hospital, and cross-system treatment services, medical information collection, and scientific research. In this platform, data and user privacy can be preserved without impacting health data access for mobile users (see Figure 13).

If the challenges of mobile transparent comput- ing can be addressed effectively, transparent com- puting could create a new industrial chain from heterogeneous mobile and embedded terminals to new infrastructures and services. Figure 14 shows some future transparent computing applications, indicating that that transparent computing-based devices can be developed and deployed for dif-  ferent data collection and processing tasks. These data can then be transmitted to transparent severs, which can also be developed as a big data platform to perform industrial big data analysis.

Recently, a research team at the Central South University of China released a smart watch, Ti- Watch, which is being developed based on the con- cept of mobile transparent computing. Because smart watches are usually associated with smart- phones, TiWatch uses the associated smartphone as a transparent server while the watch itself acts as a transparent client. The data communication between TiWatch and the smartphone is based on Bluetooth 4.1, and the watch?s data computation is performed on demand in a page-streaming pattern. Based on this computing paradigm, TiWatch can run various apps smoothly with low-cost hardware and greatly improve energy efficiency. The battery life is report- edly longer than one week under normal usage.

As we step into the IoT era, where lightweight and mobile devices become dominate termi- nals in the Internet and our daily life, we?re gaining  Figure 14. Some future applications of transparent computing.

Aviation  St an  da rd  T C  t er  m in  al  Transparent terminal provider Chip manufacturer Interface service provider ?  Agriculture  Education  Stream detector  Soil detector  Air detector  Temperature detector  Precision detector  Computing center service provider Hardware provider Infrastructure integrator Backbone network service provider Chip manufacturer?  Transparent application & service  Industry big data analytics  Operating system and infrastructure  Internet service provider Third-party payment service providers Network accelerator service provider Information security service provider?  Internet+ Industry    TransparenT CompuTing  18  January/February 2017  new opportunities, as well as new challenges, to exploit transparent computing from traditional ter- minals to mobile devices. Transparent computing is a promising computing paradigm in the current mobile computing era and will continue to attract increasing attention from both academia and in- dustry.

