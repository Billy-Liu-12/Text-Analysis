Mining Actionable Combined Patterns of High Utility and Frequency

Abstract?In recent years, the importance of identifying ac- tionable patterns has become increasingly recognized so that decision-support actions can be inspired by the resultant patterns.

A typical shift is on identifying high utility rather than highly frequent patterns. Accordingly, High Utility Itemset (HUI) Mining methods have become quite popular as well as faster and more reliable than before. However, the current research focus has been on improving the efficiency while the coupling relationships between items are ignored. It is important to study item and itemset couplings inbuilt in the data. For example, the utility of one itemset might be lower than user-specified threshold until one additional itemset takes part in; and vice versa, an item?s utility might be high until another one joins in. In this way, even though some absolutely high utility itemsets can be discovered, sometimes it is easily to find out that quite a lot of redundant itemsets sharing the same item are mined (e.g., if the utility of a diamond is high enough, all its supersets are proved to be HUIs). Such itemsets are not actionable, and sellers cannot make higher profit if marketing strategies are created on top of such findings. To this end, here we introduce a new framework for mining actionable high utility association rules, called Combined Utility-Association Rules (CUAR), which aims to find high utility and strong association of itemset combinations incorporating item/itemset relations. The algorithm is proved to be efficient per experimental outcomes on both real and synthetic datasets.

Keywords - high utility itemset mining, actionable combined pattern mining, association rule, pattern relation analysis

I. INTRODUCTION  Typical data mining applications such as basket analysis rely on mining interesting patterns, in which two major ob- jectives are addressed progressively: (1) identifying frequently associated items for commercial purpose such as cross-selling, and (2) discovering high utility itemsets [21] towards profitable selling. By using these methods, retailers can discover the most frequent or profitable products or product combinations.

For example, a helmet is recommended when someone wants to buy a bicycle by mining associations between purchasing helmets and bicycles. Moreover, the outcomes delivered by high utility itemset mining make it possible to discover the most profitable brand of products or product combinations, and help retailers and shopkeepers build marketing strategies to sell highly profitable goods.

While the utility-based framework greatly enhances the actionability [5] of resultant patterns, comparing to frequent pattern mining, it alone is still defective in some circumstances.

As in utility mining, the unit profit of each item is given,   TABLE I. AN EXAMPLE DATABASE  TID Transaction TU  T1 (A, 1) (C, 1) (D, 1) 8  T2 (A, 1) (B, 6) (C, 2) (F, 5) 24  T3 (A, 2) (B, 2) (C, 6) (D, 5) (E, 1) 60  T4 (B, 4) (C, 3) (D, 2) (F, 3) 18  T5 (B, 2) (C, 2) (F, 3) 9  TABLE II. PROFIT TABLE  Item A B C D E F  Profit 5 2 1 2 30 1  while the quantity of an item depends on the transaction.

Mining the utility of an itemset can be regarded as a statistic way to discover the itemsets whose utility is larger than a specific value [14]. However, the use of utility alone makes it ineffective to discover strongly associated items. For instance, selling a pedigree cat in a pet store happens maybe once a month or even more rarely. Although the profit is extremely high, it is probably not very wise for a manager to spend too much on designing strategies to promote such kind of pedigree pet with pet foods, because selling the pedigree pet could be just a coincidence. Furthermore, if a customer happens to purchase many other items at the same time, patterns like ?pedigree cat, cat food, cattery, troughs? or ?pedigree cat, necklace, cattery, cat litter? etc. could be selected as high utility itemsets. Obviously, such itemsets are neither representative nor actionable to the manager.

Such situations are described in Table I and Table II as an example. All subsets belong to T3, containing {F} are finally proved to be HUIs, while the given threshold is no less than 50.

All other itemsets are filtered as they fail to pass the thresh- old. Obviously, such itemsets are neither representative nor actionable to most of businessmen. However, if the threshold is set too low, new problem would appear. Searching a large number of itemsets on a large dataset may encounter a large search space.

With the examples in the above tables, Table III lists the utility, support and confidence of itemsets (here each rule is also called as an itemset). The support of an itemset reduces when the itemset size (length) increases because of the Down- ward Closure Property (DCP) [1]. However, some patterns still contain more information than others. For example, the    TABLE III. A COMPARISON OF ITEMSET UTILITY, SUPPORT AND CONFIDENCE  Itemset(Pattern) Utility Support Confidence  {A} 20 60% Nil  {A ? E} 40 20% 33%  {C} 14 100% Nil  {C ? B} 41 80% 80%  {BC ? E} 40 20% 25%  association rule {C ? B} is not of a high confidence, but also associated with a high utility increment from {C} (with utility 14) to {BC} (41), which should be more interesting than other rules in this table.

To overcome the above issues, a new framework is required to discover the really actionable patterns: they are not only succinct in terms of presentation (for a given item, only the most profitable itemset instead of many should be chosen) but also actionable (both utility-contrasted and strongly as- sociated). Even though this seems to be very promising and interesting to users, it is critically challenging to build such a framework. The major challenges are below.

? The downward closure property [1] cannot be applied in the utility-based framework. The utility of one itemset is neither monotonic nor anti-monotonic while the length of the itemset changes, which means the utility of the itemset might be either higher or lower compared with its superset or subset. In addition, for a tree-structured algorithm, it is hard to assert which branch is with the highest utility until all the branches are calculated. Thus, fast algorithms such as in [6] could not be applied to mining HUI.

? In high utility itemsets mining, a large number of candidates would be generated if a lower threshold is given. On the contrary, if the threshold is set too high, only the absolutely high utility itemsets can be discovered, and it is then hard to identify the most profitable itemsets for a given item. Subsequently, when utility is considered as the only metric to select patterns, high utility pattern mining may result in findings that are not typical and do not consider the couplings between items.

? While the combination of utility mining with frequent pattern mining is promising, the question is how to combine the utility framework with association rule mining. Association rule mining cares about the co- occurrence relationship between items based on the supports of items, while it is not clear how to measure the itemset associations for high utility items. An item?s utility depends on not only the quantity of an item in a transaction, but also its item utility.

Fig. 1 illustrates the utility dynamics of utility-based item- sets when itemset grows.

Since there are significant gaps existing in objectives and definitions between utility-based itemsets and association rules, it is hard to simply merge them. We introduce the concept  1 2 3 4          x 10   itemset?length  u ti lit  y  X  X a  X b  X c  X d  X e  +? X  +? X  ? Utility  X  X a  X b  X c  X d  X e  +? X  +? X  ? Utility  Fig. 1. Example of utility dynamics in terms of itemset growth  TABLE IV. PATTERN EXPRESSION  Utility-Association Traditional Association Structure of Pattern Relation  X0 ? Xa X0 ? ?X1 X0 + ?X1 = Xa  X0 ? Xb X0 ? ?X2 X0 + ?X2 = Xb  combined mining [3] to combine the utility-based framework and basket analysis. In combined mining, taking Fig. 1 and Table IV as an example, Derivative Itemset (DI) (e.g. Xa, Xb), also called combined itemset, is an itemset consisting of two parts. One part is called Underlying Itemset (UI), which is the same part X0 shared in both Xa and Xb in Equation 1. The other part is called Additional Itemset (AI), which is different in (a) and (b), marked as ?X1 and ?X2. The combined patterns are called ?Utility-Association Combined Patterns? shown in Table IV. {  X0 ? Xa (a) X0 ? Xb (b) (1)  With a single underlying itemset, a cluster of DIs might be discovered with respect to different AIs. Here we define actionable high utility itemsets as a pair of DIs. Furthermore, we define that one of the pairs has the highest utility among all the DIs with the same UI, whereas the other DIs have the lowest utility. This type of combined high utility patterns is informative for decision-making. For instance, in marketing, it may suggest a manager that some products should be sold with the others for high profit, whereas the same products sold with something else may result in a loss. Obviously, such kind of combined patterns incorporate item and itemset relationship and utility, is thus more actionable for decision making.

The contributions of the work are listed below.

? A novel pattern structure, called Actionable Combined Utility-Association Rule (CUAR), is proposed. The proposed pattern structure enables the generation of patterns that are of both high utility and are strongly associated, by considering the relationships between items, which provides users with actionable knowl- edge.

? A new interestingness for selecting patterns, called Associated-Utility Growth (AUG), which integrates the relationship (association) and the utility, is proposed.

To our knowledge, it is the first method for select- ing patterns that have high utility without losing the representativeness (namely strong association).

? Intensive experiments on both synthetic and real datasets are conducted to evaluate the proposed meth- ods.

The rest of the paper is organized as follows. In Section 2, the background is introduced. The problem is stated in Section 3. In Section 4, we propose the UG-Tree, a baseline approach before introducing the CUARM algorithm. Section 5 presents the experimental results, and Section 6 concludes this work.



II. RELATED WORK  A. Frequent Itemset and Association Rule Mining  Mining frequent itemsets [1] is a primary research topic and has been fully extended into diversified directions [7] for a score of years since it was first introduced in 1994 by Rakesh Agrawal et al. It is intended to identify strong rules discovered in databases using different measures of interestingness. Based on the concept of strong rules, Rakesh Agrawal et al. [1] in- troduced association rules for discovering regularities between products in large-scale transaction data recorded by point-of- sale (POS) systems in supermarkets. After that, a variety of algorithms were proposed to tackle the efficiency issue. Among them, FP-Growth proposed by Han et al. [6] is one of the most efficient algorithms in FIM.

However, the frequency-based FIM framework often leads to many patterns which are not actionable at all [4]. To enhance pattern actionability, one recent effort is the high utility pattern mining which considers the utilities of unit items and itemsets in addition to their statistical significance.

The existing FIM and association rule mining algorithms are incapable of capturing such high utility patterns, because they ignore the business interest [4] of each item and itemset which is essential for decision-making.

B. High Utility Itemset Mining  High Utility Itemset (HUI) Mining emerges as a recent solution for enhancing pattern actionability [5], since it was first introduced in 2004 [19]. Then a series of approaches have been proposed based on Transaction-Weighted Utilization (TWU) and Transaction-Weighted Downward Closure (TWDC) Property, for example Two-Phase [12], IHUP [2], UP-Growth [14], CHUD [17], TKU [18], d2HUP [10], and HUIM [11].

In addition, mining high utility sequential itemsets becomes popular, such as USpan [21] and UP-Span [16].

The UP-Growth algorithm proposed by Tseng et al. is one of algorithms in utility itemset mining domain. UP-Growth is a tree-based mining algorithm with four strategies to prune candidate itemsets. Two strategies for constructing a global UP-Tree (a structure for containing the items) called Discard- ing Global Unpromising (DGU) Items and Decreasing Global Node (DGU) Utilities, and two strategies for constructing a local UP-Tree called Discarding Local Unpromising (DLU)  Items and Decreasing Local Node (DLN) Utilities are proposed for mining HUIs.

Even though mining algorithms such as UP-Growth extract high utility itemset efficiently, some HUIs may take place just as coincidences and are not representative and reliable for action taking. This is caused by the fact that utility is the only interestingness in the HUI mining algorithms, while utility is a subjective matter.

C. Combined Pattern Mining  The concept of ?Combined Association Rules? was in- troduced in [24], and then extended in [22]. Combined rule mining provides a new way of merging knowledge typically for such scenarios that two features are not in the same dataset and it is not feasible to merge two datasets. For example, different features from two sets cannot be merged into one set as one is with customer IDs, age, address, gender, living region, nationality and such details, while the other contains gender, annually incomes, debt, debt repaying method, and repaying period. In this way, rather than integrating two datasets into one, a more feasible way is to build patterns consisting of constituents from respective data sets.

Further, the high impact combined pattern mining was pro- posed in [3]. These patterns are either frequent or infrequent, but show important business impact that is crucial for solving business problems. These patterns are exceptional because they won?t be detected by traditional frequent pattern mining methods which can only find patterns with high frequency.

The resultant combined patterns are represented in Equation 2.

For each equation in Equation 2, A is a feature, an itemset, a sequence, or a sub-pattern, B is another, and C is the impact associated with the pattern consisting of A and B. C may refer to different risk levels, fraud or not, outlier or not. Yet, this approach is only used in the frequency-based framework.?????  A1 +B1 ? C1 A1 +B2 ? C2 A1 +B3 ? C3 ...

(2)  D. Frequency-Utility Mining Model  Seeking for both high profit and effective itemset combi- nations, Yeh et al. proposed a novel utility-frequent mining model with the algorithm called BU-UFM [20]. A new defi- nition of support called QSupport was proposed to measure the interestingness of the combination of both utility and frequency. Years after that, algorithm called S-UFPM [9] with a shared tree structure was proposed and proved to be faster.

Several other Algorithms such as WUARM7 [8], FUFM [13] with small missing rate and less running time compared with UMining (Foundational) [19] and MWIT [15] were proposed to reduce the execution time compared to traditional HUI mining method.

However, none of the above methods are applicable for solving our proposed problem due to the following reasons: 1) although it is also called ?utility? in [20], but the definition is different [14], and 2) the measurements and proposed algorithms perform as just filters for selecting patterns, they do not combine patterns considering their utilities and frequencies.



III. PROBLEM STATEMENT  In this section, we define Associated-Utility Growth (AUG) Pattern, which introduces both association and utility growth into combined mining and mining actionable combined pattern pairs.

A. Definitions  Taking Table I and Table II as an example, let D = {T1, T2, ..., Tm} be a transaction database, and I = {i1, i2, ..., in} be a set of finite and discriminative items. Each transaction Tc ? D (1 < c < m) is a subset of I with a distinct identifier called TID. In a given transaction Tc, each item ik appearing with a positive integer, q(ik, Tc) is called ik?s quantity utility in Tc. Also, each item in I is associated with a positive number p(ik, I), which is called ik?s profit utility in I.

Definition 1: The frequency of an itemset X counts the times it appears in all transactions and is denoted as SC(X).

The support of X is SC(X), divided by the number of transactions in D, and is denoted as supp(X).

Based on Table I, SC(A) is 3, SC(AB) is 2, and Supp(AB) = 40%.

Definition 2: The utility of item ik in a transaction Tc is the profit utility of the item times its quantity utility in a transaction, defined as  u(ik, Tc) = p(ik, I) ? q(ik, Tc) (3)  An item ik with its utility in a transaction Tc is denoted as u(ik, Tc) (ik ? Tc).

Definition 3: The utility of an itemset X in a transaction Tc is the utility sum of all items belong to the itemset, defined as  u(X,Tc) = ? ik?X  u(ik, Tc) (4)  An itemset contains l discriminative items is called an l- length itemset, where X ? I. The utility of the same item in different transactions might be different considering the quantity of each item purchased.

Definition 4: The utility of an itemset X in the whole database D is the sum of the utility of this itemset in all transactions. It is denoted as U(X), and defined as  U(X) = ?  X?Tc?Tc?D  u(X,Tc) (5)  In addition, one item can be regarded as an 1-length itemset.

Definition 5: The minimum utility threshold is denoted as min util, and a set of all itemsets whose utilities are higher than min util is denoted as fH(D,min util). The goal of HUI mining is to find such itemset, fH(D,min util).

Definition 6: The transaction utility of the transaction Tc is denoted as TU(Tc) and defined as  TU(Tc) = ? ik?Tc  u(ik, Tc) (6)  Definition 7: The transaction-weighted utility of the item- set X is the sum of the transaction utilities of all the transac- tions that X belongs to. It is denoted as TWU(X) and defined as  TWU(X) = ?  X?Tc?Tc?D  TU(Tc) (7)  Definition 8: The high transaction-weighted utility itemset (HTWUI) consists of those itemsets whose TWU is no less than min util.

Property 1: The transaction-weighted downward closure property holds for HUI, says that if an itemset X is not a HTWUI, all its supersets are not HUIs because U(X) ? TWU(X).

B. Mining Combined Utility-Association Rules  HUI Mining is to discover itemsets with high utility whose utilities are higher than the minimum threshold, in which their frequencies are not concerned. HUI could be regarded as an extension of FIM towards addressing business interest [4] represented by utility. Large number of itemsets would come out if the threshold is not proper. As shown in Fig. 1 of the utilities in a cluster of incremental itemsets, we can see the utility is changing dynamically and irregularly. As the basic rule in social marketing is to gain profit, businessmen might only care about products that can make profit for them, and are also interested in converting those less popular goods to be more preferred. It is helpful for business purposes to figure out those itemsets which 1) are low utility itemsets, but become high utility after one additional item (or itemset) is added; 2) are high utility, but become low utility after one item (or itemset) added. An itemset whose length increases with adding new items is called Incremental Itemset, which means the number of items it contains would grow but never reduce.

Even though the utility metric provides reasonable ev- idence for selecting patterns of business interest, it does not provide sound insurance about how sound a high utility pattern could be, which can be complemented by frequency- based filters. Therefore, we propose a new strategy which combines both utility and frequency, named as Associated- Utility Growth (AUG) Pattern Mining, to identify Association- Maximum Incremental Itemsets (AMII) and Utility-Increasing Incremental Itemsets (UIII). The utility of an incremental itemset is dynamic, meaning that the utility evolves when additional items are added to the underlying items, which forms a utility curve. A UIII structure is necessary to discover those utility increment-oriented itemsets. Also, it is no doubt that the frequency of an incremental itemset monotonically decreases. Here maximum association does not refer to those itemsets with the highest frequency, but those itemsets where items share a reasonable relationship with each other. In some way, it also means that the frequency would not change too much after adding one or several items. Subsequently, the measurement of AUG is considered for candidate pruning to    TABLE V. REORGANIZED TRANSACTIONS WITH THEIR REORGANIZED-TUS  TID Transaction RTU  T ?1 (C, 1) (A, 1) (D, 1) 8  T ?2 (C, 2) (B, 6) (A, 1) (F, 5) 24  T ?3 (C, 6) (B, 2) (A, 2) (D, 5) (E, 1) 60  T ?4 (C, 3) (B, 4) (D, 2) (F, 3) 18  T ?5 (C, 2) (B, 2) (F, 3) 9  TABLE VI. ITEMS WITH THEIR TWUS  Item A B C D E F  Profit 92 111 119 77 60 51  find out those having both high utility growth and highly associated items. In this way, only one significant combined pattern is selected for each UI.

C. An Abstract Model: 2-length Combined Utility-Association Pattern Pair  Here we illustrate the application of actionable Combined Utility-Association Rules through identifying 2-length Com- bined Utility-Association Pattern Pair. Take Fig. 1 as an example (here we suppose they hold the minimum confidence threshold, or Xa and Xb share the same relation with X0), the 1-length itemset X0 is firstly treated as a UI, then two items added separately form two 2-length itemsets: ?X1 is added and forms one new itemset Xa with higher utility, ?X2 is added and forms the other new itemset Xb with lower utility.

Xa and Xb are two supersets of X0. The pattern pair is shown in Equation 8.

{ X0 ? Xa ? U ? Increase (a) X0 ? Xb ? U ?Decrease (b) (8)  Definition 9: Positive/Negative Impact Rule (PIR/NIR): re- ferring to rules structured as Equation 8(a)/(b) which is called positive/negative impact rules, whose right-hand side is asso- ciated with utility higher/lower than X0 on the left-hand side.

If such rules are used for marketing purposes, a retailer should know what promotion mixtures make more profit and what would lead to low profit if they are put together, based on the positive and negative rules.



IV. THE CUARM APPROACH  We aim to provide patterns to retailers for promotion strate- gies include increase high utility product combinations which are highly associated with each other. We name it as Utility- Association Rules, which cannot be discovered by traditional association rule methods or utility mining algorithms alone.

The algorithm for identifying interesting utility-association rules is called Combined Utility-Association Rules Mining (CUARM). To this end, two factors, Contribution and Weight, are proposed to select combined patterns of both high utility growth and strong association.

Item TWU Link  C 119  B 111  A 92  D 77  E 60  F 51    {R}  {C}: 5, 14  {B}: 4, 41  {A}: 2, 39  {E}: 1, 60  {A}: 1, 6  {F}: 1, 24  {D}: 1, 15  {D}: 1, 30 {D}: 1, 8 {F}: 1, 18  {F}: 1, 19  Fig. 2. Header Table and A UP-Tree When min util = 0  TABLE VII. COMPOSITION IN EACH NODE  Formation Explanation  N.na the item name of this node  N.sc the support count of this node  N.u the node utility of this node  N.p the parent node of this node  N.nl the node link which points to a node whose name is same as N.na  A. The Baseline Approach  As stated above, the purpose of HUI mining is to find the set of all high utility itemsets fH(D,min util) efficiently.

One way to obtain the target patterns is to obtain fH(D, 0) first, which can be achieved by using UP-Growth with min util = 0, and then extract the UARs from it. In essence, the baseline approach is a strategy to maintain all itemsets with their utilities. Readers can refer to [14] for the detailed structure and examples about UP-Growth and UP-Tree. In addition, the UG-Tree we proposed is built with min util = 0 based on Table V and Table VI.

B. The Proposed Approach  1) UG-Tree: Our algorithm is based on utility growth and association rule mining, thus all branches whose utilities decreasing should be pruned from the UP-Tree. Since the utility growth of each node in a given branch could be either positive or negative, we prune branches from its external node until the first node whose utility growth becomes positive.

Such re-organized tree structure is called UG-Tree, as shown in Fig. 3.

The composition of each node N is listed in Table VII. The Rebuilt Table is displayed to demonstrate the traversal of a UG- Tree. In the downward table, each row is composed of an item name, a transaction-weighted utilization value and a link. Each link points to the node having the same item name as shown in the UG-Tree. The nodes with the same item names can be traversed efficiently by following the links between downward table and the nodes in UG-Tree.

2) UG-Tree Construction: A UG-Tree can be constructed by only scanning the original database twice. During the first database scan, items and their TWUs are captured via the          Item TWU Link  C 119  B 111  A 92  D 77  E 60  F 51    {R}  {C}: 5, 14  {B}: 4, 41  {A}: 2, 39  {E}: 1, 60  {A}: 1, 6 {D}: 1, 15  {D}: 1, 30 {D}: 1, 8 {F}: 1, 18  Fig. 3. Downward Table and A UG-Tree When min util = 0  calculation of the TU of each transaction and TWU of each item. The downward table is then formed by items inserted in the TWU-decreasing order. In the second scan, the reorganized transactions as well as their utilities are inserted into the UG- Tree, as shown in Table V. In addition, all utility-decrement branches are pruned and shown in Fig. 3. Finally, an UG-Tree is created with root R. The composition of each node is listed in Table VII.

Definition 10: A transaction after the process of the above reorganization is called Rebuilt Transaction and its TU is called rebuilt transaction utility (RTU), denoted as RTU(Tc).

The construction of UG-Tree will be completed after all RTs are inserted with their RTUs. Fig. 3 presents a UG-Tree when the minimum utility threshold is set to be zero.

By using the UG-Tree, which contains enough information, we can generate the utility-association rules. While the UG- Tree is retrieved, the utility of each itemset can be discovered and prepared for the calculation of Factor C. At the same time, the support count of each item can also be found through item.nl and used for Factor W. These two factors will be discussed in the next subsections.

C. Impact Factor of Utility Growth across Combined Itemsets  Both PIRs and NIRs are not difficult to be acquired, since just scanning the database one more time with a comparison added will help. However, this belongs to post-processing approach which is less efficient, and ignores item relation analysis during the mining process. For these, a measurement called contribution is proposed below to discuss the relation- ship among these three itemsets (UI, AI and DI), on top of PIRs and NIRs.

Definition 11: The contribution of Additional Itemset (?X) to make utility change (increase or decrease) from the Underlying Itemset (X0) to Derivative Itemset (X), denoted as C(?X|X0), is defined as:  C(?X|X0) = {  1+e?R  ? 1 , U(X) > U(X0) R , U(X) ? U(X0)  (9)  In Equation (9),  R = U(X) U(X0)  (10)  This equation is proposed to measure whether itemset ?X , as an additional part of X0, plays an important role in transforming itemset X0 to X in the utility perspective.

Here, U(X) is the utility of X in the whole database. The first equation is associated with utility increase, corresponding to PIR, while the second corresponds to NIR. In the first function, a logistic function is used to converge the contribution to the range of [0,1], which will be discussed later in the next section.

As demonstrated in Fig. 1, the function of utility and item- length is neither monotonic nor anti-monotonic, meaning the utility of an itemset is dynamic with its length increasing.

The utility of each item is taken into consideration to analyze the contribution. Furthermore, the contribution of additional itemset provides influence within the itemset sharing the same support counts, which is not suitable for the operation of con- tribution. However, even though the contribution is presented to measure whether ?X plays a significant role to promote the utility from X0 to X , it is still measured by the rate R because ?X might appear in other itemsets, and the utility should be calculated in another way.

Two conditions might appear: 1) The contribution of this ?X is high enough to make X(DI) a significant PIR, which also means itemset X0 has a strong utility-association with itemset X; 2) The contribution of this ?X is so low that this {X0 ? X} is proved to be a significant NIR thus itemset X0 is rarely utility-associated with itemset X .

D. Co-occurrence Association between Underlying and Addi- tional Itemsets  Definition 12: The weight of additional itemset to measure the co-occurrence frequency of underlying itemset and addi- tional itemset, denoted as W (?X|X0), is defined as:  W (?X|X0) = Supp(X)  Supp(X0 ??X) (11)  It is a reduction of the Jaccard similarity coefficient 1:  J(X0,?X) = |X0 ??X| |X0 ??X|  (12)  This equation is to examine whether itemset ?X has a high or low association by measuring their co-occurring frequency with itemset X0.

In Equation (11), Supp(X) is the support of X0 and ?X appearing together, and Supp(X0??X) is the support of either X0 or ?X appearing:  Supp(X0??X) = Supp(X0)+Supp(?X)?Supp(X) (13)  1http://en.wikipedia.org/wiki/Jaccard index    E. Impacted Coefficient of the Additional Itemset  Definition 13: The impacted coefficient of an additional itemset is to describe how effective this itemset is to manufac- ture the derivative itemset from underlying itemset, denoted as AUG(?X|X0), defined as:  AUG(?X|X0) = ? C2(?X|X0) +W 2(?X|X0)  (14)  This equation averages the value of C(?X) in Equation 9 and W (?X) in Equation 11. Here we use the Quadratic Mean (QM) (also known as Root-Mean Square) to measure the significance of the itemset ?X in terms of both utility and relationship perspectives because it represents the sample standard deviation of the difference between W and C, thus the result cannot be affected heavily by the smaller value. It is easy to prove:  QM2(X) = (X)2 + ?2(X) (15)  Here, X and ?(X) stand for the arithmetic mean and the stan- dard deviation of W and C. We also tried another measurement by Harmonic Mean (HM) as a baseline, which is proven to be less effective in our experiments.

For a specific X0, for each itemset ?X to be considered, the higher AUG means this itemset is likely to impel the underlying itemset into higher utility itemset. On the contrary, the lower the AUG is, the lower utility that derivative itemset might be. As all the AUG would be calculated, only the largest AUG value itemset will be chosen.

F. The CUARM Algorithm  In this section, an algorithm named Combined Utility- Association Rule Mining (CUARM) is proposed to discover all the actionable combined utility-association rules. At the beginning of the algorithm, it picks all UIs as candidates. For each UI, all the combined patterns are discovered with their AUGs which form a combined pattern cluster as in Equation 2, and only the most effective pattern would be selected. In addition, if two patterns are coupled with utility increment and decrement, a combined pattern pair forms.

The input is the transaction database, including all trans- actions with the utility of each item, and the output is the combined pattern pairs, their underlying itemset and the cor- responding utilities. In line 1, we prepare all the itemsets with their utilities in the alphabetical order and the length of longest itemset. In lines 2-5, we start with each of the UIs named itemset0 with its utility U0. In lines 6-11, the DIs are ready and we calculate their AUGs. In line 12-13, we select the pattern with max AUG values as CUAR.



V. EXPERIMENTS  In this section, we conduct intensive experiments to eval- uate the proposed methods. Our experiments were run on a PC with a 2.30 GHz Intel Core, 16 gigabyte memory.

CUARM is implemented in Java. Two real datasets and two synthetic datasets are used for the experiments. The real  Algorithm 1: CUARM Input: Transaction database D, including the utility  U(X) of each item in D Output: All actionable combined utility-association  rules 1 Get all itemsets? utilities via UG-Tree ; 2 Get the length of longest itemset: lmax ; 3 for len = 1, len < lmax, len++ do 4 for Itemset whose length is equal to len do 5 Get itemset0 with U0(itemset-utility); 6 for itemset.length > len do 7 Check inclusive and utility changes; 8 Get itemset1 with U1; 9 Calculate C;  10 Scan the database, get W; 11 Calculate AUG; 12 Selected max one; 13 Present this utility-association rule;  TABLE VIII. CHARACTERISTICS OF DATASETS  Dataset Number of Transactions Number of Items Average Length  Retail2 88162 16470 10.3  Chainstore3 1112949 46086 7.3  t20i6d100k 100000 658 13.7  c20d10k 10000 187 13  datasets are Retail2 and Chainstore3, and the synthetic datasets are t20i6d100k and c20d10k. The parameters of the datasets are listed in Table VIII.

A. Comparison of Two Functions for Calculating Impacted Coefficient  Here we propose two functions for calculating the impacted coefficient. One is the quadratic mean (QM), which is adopted in this paper, the other function is the harmonic mean (HM), which is proved to be less accurate in the experiments. Those itemsets with a good coefficient measurement should be asso- ciated with both high frequency and high utility growth, we thus can separate the database randomly. If the output itemsets discovered in each sub-database are stable, we can assume that this measurement is suitable.

The experiments were conducted on the Retail dataset for the sake of simply examining the QM function. The top 100 experimental results are selected and shown in Fig. 4. The figure on the left shows the comparison between UP-Growth and QM, while the figure on the right shows the result of QM and HM on C(?X) and W (?X). The database is split into 10 parts randomly. The first part contains 10% transactions in the database and each later part contains 10% more transactions than the former part (such that the second part contains 20% and the last part is 100%). The X axis is the kth (1 ? k ? 10) part of the database, and the Y axis is the match ratio, which means the ratio of the exact patterns found in the kth part  2http://www.philippe-fournier-viger.com/spmf/index.php?link=datasets.php 3http://cucis.ece.northwestern.edu/projects/DMS/MineBench.html    1 2 3 4 5 6 7 8 9 10           M  a tc  h R  a ti  o (%  )  Percentage of Database  UP-Growth 100  QM 100  1 2 3 4 5 6 7 8 9 10            M a  tc h  R a  ti o  (% )  Percentage of Database  HM 100  QM 100  Fig. 4. The Comparison of HM, QM and UP-Growth  matching with the (k + 1)th part. As seen from the figures, the QM method outperforms both HM and UP-Growth.

B. Experimental Evaluation of CUARM  Next, we present the experimental results of comparing derivative itemsets with the traditional HUIs, FIs and UIs (Underlying Itemsets) respectively. The statistic values of each dataset are shown in Table VIII. The experiment is conducted as follows. Firstly, we collect all the utility itemsets with their utilities and frequencies in each dataset respectively. Secondly, we also collect all the frequent itemsets with their frequency and utility. Then we calculate the utilities of the frequent item- sets, frequencies of the HUIs and both utilities and frequencies of the derivative itemsets. At last, we plot the frequency of itemsets discovered via UP-Growth and CUARM, the utility of itemsets discovered by FP-Growth and CUARM and the utility changes from each underlying itemset to derivative itemset as shown in Fig. 5. Such exhibition is made for the comparison of our algorithm with FIM and HUI to demonstrate the Utility- Association Rules we discovered have both high utility and high frequency.

Here, all the frequent and utility itemsets we compare with contain at least two items because the derivative itemsets our algorithm discover contain no less than two items.

Experiments on Real Datasets  We first present the outputs of dataset Retail in Fig. 5(a) and Fig. 5(b). Top 50 patterns of each algorithm are selected for experiments. By analyzing the frequencies and utilities of patterns, many of them are without much difference in both two experiments, which means the association rules we found via traditional AR algorithms are also high utility-association rules via our method. In addition, such rules are also with high utilities. This explains why some parts of the curves overlap.

In addition, customers prefer to buy a few products at one time, that is, most of FIs and HUIs contain only one or two items, which also explains the observations.

In datasets Chainstore, the differences are much clearer, because customers usually prefer a variety of products in each of transactions, and high utility itemsets are always low in frequency, while highly frequent itemsets are with low utility.

For example, in Fig. 5(d), the CUARM performs much better than that of FP-Growth, while in Fig. 5(e), even at some points, the performance is not so good, the global performance is much better. To sum up, we can assert that the performance of our algorithm CUARM is much better than the others.

Experiments on Synthetic Datasets  Experimental results on synthetic datasets t20i6d100k and c20d10k are shown in Fig. 5(g), Fig. 5(h), Fig. 5(j) and Fig. 5(k). The results are much clearer than those from real datasets because the items included are much neat and with orderliness. For most of the patterns discovered via CUARM, the frequencies are much higher than those traditional high utility itemsets. At the same time, most Utility-associated rules are also with much higher, i.e., twice the utility, than tradi- tional association rules, especially in Fig. 5(h) from dataset t20i6d100k.

C. Evaluation of the Utility Increment  We demonstrate the utility increment in a graphic way to show how the utility increases from underlying itemset to derivative itemset. The utility increment is valued based on the same datasets as above. points are ordered by the utility of derivative itemsets. The performance of our algorithm varies from one dataset to another. The performance in chainstore is much better than that in retail because the transaction time in chainstore is 12 times more than that in retail while the item types are only twice more. However, in the synthetic datasets, the performance is better. In conclusion, for each dataset, the performance is different but the utility actually increases.

D. Utility Variation Experiments Conclusion  Based on the above datasets and experimental results, a table is used to demonstrate the conclusion that comes from our experiments and shown as Table IX. This table describes the number of itemsets whose utilities are increase or decrease with given threshold. Also, two kinds of utility incremental forms are listed. One is the utility of derivative itemset is higher than both the utilities of underlying itemset and additional itemset, which is denoted as FA; the other is that the utility of derivative itemset is higher than only the utility of underlying itemset, which is denoted as FB. As for each underlying itemset, only one derivative itemset would be discovered, some FA and FB might be ignored.

For the utility decrement itemsets whose utilities are only lower than the underlying itemsets would not be considered in this table because these itemsets can also be regarded as FBs when the underlying itemsets and additional itemsets exchange.

TABLE IX. UTILITY VARIATION CONCLUSION  Dataset Min Sup N.DI R.U N.FA N.FB N.DecI  Retail 0.01 89 20.3% - 50.4% 28 22 39  0.008 135 18.6% - 50.4% 37 46 52  0.002 1667 8.4% - 50.4% 473 769 425  Chainstore 0.002 79 4.6% - 207.2% 7 19 53  t20i6d100k 0.017 33 25.7% - 78.5% 8 11 14  0.015 79 22.8% - 78.5% 24 19 36  0.012 383 1.8% - 78.5% 112 137 134  c20d10k 0.05 120 19.7% - 150.9% 28 48 44  In Table IX, Min Sup in the minimum support for mining itemsets. N.DI is the number of derivative itemsets discovered    figures1//retail_f-eps-converted-to.pdf  (a) retail  figures1//retail_u-eps-converted-to.pdf  (b) retail  figures1//retail_i-eps-converted-to.pdf  (c) retail  figures1//ds7_f-eps-converted-to.pdf  (d) chainstore  figures1//ds7_u-eps-converted-to.pdf  (e) chainstore  figures1//ds7_i-eps-converted-to.pdf  (f) chainstore  figures1//t20i6d100k_f-eps-converted-to.pdf  (g) t20i6d100k  figures1//t20i6d100k_u-eps-converted-to.pdf  (h) t20i6d100k  figures1//t20i6d100k_i-eps-converted-to.pdf  (i) t20i6d100k  figures1//c20d10k_f-eps-converted-to.pdf  (j) c20d10k  figures1//c20d10k_u-eps-converted-to.pdf  (k) c20d10k  figures1//c20d10k_i-eps-converted-to.pdf  (l) c20d10k  Fig. 5. Experiments for FP, UP and CUARM  with the threshold Min Sup. R.U in the utility incremental rate from underlying itemset to derivative itemset. N.FA is the number of FA itemsets, N.FB is the number of FB itemsets, and N.DecI is the number of decremental itemsets.



VI. CONCLUSIONS AND FUTURE WORK  Traditional high utility itemset mining methods have the weak point that if the minimum utility threshold is set too high, the itemsets discovered might contain unrepresentative items; while if the threshold is set too low, too many redundant item- sets will be found. On the other hand, traditional association rule mining ignores the utility hidden among the items. This work proposes a novel pattern select method from two aspects.

One is the co-occurrence of two (underlying and additional) itemsets; another is the utility increment from underlying itemset to derivative itemset. It is an effective approach for identifying actionable combined utility itemsets, in which, for different items, only one itemset will be selected with the highest association-utility growth, which caters for both high association and high utility. Thus, only the most effectively impacted itemsets will be presented. The results demonstrate that our method can discover patterns that are composed of different item combinations of both utility increment and high representativeness.

For the future work, we may find some more interesting pattern selection method. For example, there exists a dependent relationship between two itemsets A and B, which means A might appear frequently alone or with other items, but for most time B appears together with A.



VII. ACKNOWLEDGMENTS  This work is sponsored in part by Australian Research Council.

Discovery Grant (P130102691).

