Tool for Generating Access Patterns to Replicate Web Sites in

Abstract.

A common problem facing mobile computing is disconnected operation, or computing in the absence of a network. Hoarding eases disconnected operation by selecting a subset of files for local storage. The purpose of this work focuses on the extraction of Web site access patterns. These patterns permit to establish access probabilities to Web sites, aiming at preselecting and replicating HTML files in a mobile computer. This approach of resource preloading in mobile computer permits the continuity of clients work without caring for the state of their connection to the network. Our system utilizes association rules that are extracted by data mining techniques for determining the set of items that should be hoarded to a mobile computer prior disconnection.

1   Introduction  The use of laptops, notebooks computers, and PDAs is increasing, and likely to increase in the future with more and more applications residing on these mobile systems as a result, the traditional user's profile has changed from simple fixed user to mobile user, who is usually time-constrained when he accesses the Web.

For this kind of user the interaction with the Web is generally expensive since it consumes time and attention. The solution to this problem is a non interactive architecture that accepts requests, finds appropriate servers and executes tasks on the Web without the user's intervention.

Another aspect to consider is the traditional client/server architecture, which is inadequate for  users that are disconnected most of the time. The term disconnection refers to the condition that occurs when a mobile computer is unable to communicate with some or all its connection points to the fixed network.

An example of this scenario is a mobile task force (that moves physically in a geographical area). In this scenario the users need to access and update information of customers? files or records of a database (DB) kept in a server. The kind of access and the work load generated by these users are different from the load of traditional users of client/server systems.

To solve some of these problems, a new disconnection mode of operation has been proposed, in which mobile clients can be disconnected without losing their processing capacity under the client/server architecture. However, this involves many aspects; one of these is the replication of information, which implies keeping information in a mobile computer for permitting work to proceed when it is disconnected from the fixed network. In order to obtain the replicated information that a mobile client could need when it is disconnected, mining of association rules is used to generate access patterns, which allows deciding what information should be replicated in the mobile client.

In the absence of communication guarantees, users are being forced to operate disconnected from the network. For this reason it has become necessary to develop a software tool for identifying data access patterns in distributed systems. To this end, mining of association rules is utilized to increase, through replicas, access availability to data by a client application being executed in a mobile computer.

This investigation work is part of a project (MovirWare) whose main objective is to demonstrate     that the use of the reflexive design technique combined with a middleware architecture permits to improve the design and implementation of mobile computing applications. In particular the objective of the project consists of developing a platform of reflexive components for this kind of applications.

The project architecture consists of four large modules: 1) disconnection management, 2) prediction mechanism, 3) hoarding management, and 4) transcoding of Web pages for PDAs [4]. Specifically this paper describes the prediction mechanism module.

2.   Generation of Access Patterns to  Information Resources  An attractive solution to solve the disconnection problem is the generation of hoarding that allows deciding the data that should be replicated in mobile equipment. The evident problem of this approach is the identification and implementation of the prediction  mechanism of the best suited hoarding scheme for selecting the items that are necessary to replicate.

There are many data mining algorithms that were designed for specific applications, and therefore it is necessary to identify the domains of application of the most efficient.

Some previous works have simply opted for choosing the most recently referenced files, or asking the user to handle contents hoarding. The first solution is wasteful of hoarding space, and the second demands more experience and involvement on the part of the user [2]. A recently used mechanism is mining of association rules, which describes the access behavior to information resources occurred during a certain time interval [2]. For example, the access logfile generated by a Web server during one month is analyzed; based on the analysis of the behavior recorded in this logfile, it is possible to detect behavior patterns that permit to preselect information resources for replication in the mobile clients equipment. The algorithms implemented in this project have been used in file system and mobile database applications [8, 9]; however they have no been used for hoarding of Web objects (Web pages, pdf files, image files, etc.).

2.1.   Mining of Association Rules  An approach from data mining consists of finding a set of rules that describe properties of data. For example, if we consider a database organized in tables, each one with a set of columns corresponding to a set of attributes, this kind of data exploration, informally speaking, finds rules of the type f(X) => g(Y), where X and Y are subsets of all the attributes involved, and f and g denote any type of formula that can be defined on these attributes.

The rule means that when formula f is satisfied for a given set X of attributes, formula g will be satisfied for another concrete group Y of attributes. The rules obtained this way, will have, however, a degree of truthfulness or confidence that indicates the extent to which the rule can be trusted, i.e., how many times this rule is satisfied in the sample of explored data, with respect to the number of times the left part of the rule is satisfied.

2.2.   Description of the Mining Algorithm of  Association Rules  Mining algorithms of association rules are constituted by three sequential parts. Each part carries out a specific task that is used as input for the following part of the algorithm.

-The first stage, which is the simplest, is in charge of finding large items, i.e., finding those items that were only used sporadically. This is achieved in the following way: each item is assigned a counter, the transactions database is scanned, and for each appearance of an item its counter is increased.

Items that have a support larger than the indicated value (minsup) are stored for the following stage of the algorithm.

-In the second stage the large items obtained in the previous stage are used to generate combinations of items. For each generated group of items its support is calculated. Those groups of items with support larger than minsup are kept aside for the third and last stage.

-In the third stage of this algorithm, subsets of the generated groups of items are generated, and their confidence is calculated by scanning the transactions database. Those groups with a confidence larger than the value indicated by the user are utilized to create association rules.

This last stage differentiates each mining algorithm  of association rules. The first two stages are common to all the mining algorithms, so the last stage is the one that determines each miner's special characteristics.

3.   Generator of Web Site Access Patterns  3.1.   Implemented Mining Algorithms  The mining algorithms of association rules implemented in the Generator of Web Site Access Patterns are the following:  -Composite Items (CI). This algorithm offers an alternative for the creation of association rules based on the creation of candidate sets. This algorithm is described in [1].

-Time Windows (TW). The main characteristic of this algorithm is that it proposes the use of heuristic mechanisms and     inference for the generation of association rules. It is presented in [2].

-Seer. Another mechanism to carry out automatic replication is the one proposed in [3], in which the use of semantic distance is proposed for finding the existing relationship among items.

3.2.   Description of the Generator  This tool permits the generation of Web site access patterns using the logfile of transactions carried out through a proxy or Web server. Next we describe the most important elements of the tool.

Support. It is the first filter of the algorithms, which is used to discard those items that were only used sporadically. Support is used to obtain patterns that are really significant. Formally, support is the percentage of appearances of item X in the logfile of information access. The support value can be specified anywhere in the range from 0 to 100% as deemed necessary. The number of rules and groups of patterns is inversely proportional to the support value, and their significance is proportional to this value.

Confidence. It is the second filter of the algorithms. This is used to discard those groups of not very significant items; i.e., it discards the association rules that are not very significant or that have a very low probability of being used. Formally, confidence is the percentage of simultaneous appearances of item X and item Y. The confidence value can be set between 0 and 100%. The rule significance is proportional to the confidence. For example, let us consider the following rule: X => Y with support = 0.1 and confidence = 0.85.

This is interpreted in the following way: the probability that a user accesses item X is 10%, and out of this 10% the probability that he accesses item Y after accessing X is 85%.

Window. This is a very important parameter for the generation of association rules, since it is the one in charge of transactions generation. This is so because mining algorithms of association rules only work on transactions, and logfiles are not built this way. To generate transactions one or more items accessed by a user are grouped together. There exist two types of partitions for carrying out this process:  -Fixed partition. In this partition type the logfile is grouped in a fixed way based on the users and a fixed number of items; i.e., each transaction will contain n items, where n is the same for all the transactions. In general, for any user several transactions can be generated if the number of item accesses by the user is larger than n.

-Time partition. In this partition type the logfile is grouped based on the users and the items they have  accessed in a time interval t. For any user several transactions can be generated, and each transaction will have a different number of items, since this depends on what the user has accessed in that time interval.

Fixed partition is used by the Seer and Composite  Items algorithms, and time partition is used by the Time Windows algorithm. Window values can be set from 0 to 100, and their meaning depends on the algorithm. For Time Windows it means a time interval expressed in minutes, and for Seer or Composite Items it indicates a number of items. For example, if a value of 10 is specified each transaction will vary depending on the partition type being used.

Output rules. It is the file for storing the association rules generated by the mining algorithms of association rules. This file has two formats: the first one is used by the Seer and Time Windows algorithms and the second is used by the Composite Items algorithm.

Output groups. There exist two formats to store the groups: format 1 is used by the Time Windows and Seer algorithms, and format 2 is used by the Composite Items algorithm.

4.   Experimental Results  Figure 1 shows the processing time for each algorithm. Notice that this time varies according to the support value. As the support gets smaller the execution time increases; this is so because the support indicates the appearance frequency that the items used to generate association rules must have. In other words, the smaller the support the larger the number of items involved in the generation of association rules, and the larger the execution time, since this is proportional to the number of items.

The seer line shows the results obtained by this algorithm. Notice that the execution time is smaller than that of the other two algorithms. This is explained mainly by the way items are dealt with: each item has an associated identifier that speedups access to the items. The cross line corresponds to the Time Windows algorithm, whose execution time is very similar to that of the Seer algorithm. However, when the support gets smaller its execution time tends to grow larger, this is because as the number of items involved grows larger the handling of items becomes less efficient, resulting in an increase in execution time.

Fig. 1. Execution time of the algorithms  The square line corresponds to the Composite Items algorithm. This algorithm is very fast with a     high support, but as the support gets smaller its execution time increases, because this algorithm  consists of two stages: the generation of composite items and the generation of sets. Consequently, the number of items handled by this algorithm is larger than those of the other two algorithms; i.e., since this algorithm handles simple items and composite items, execution time increases when the number of items grows.

Figure 2 shows the number of association rules generated by each algorithm for different support values. Notice that when the support gets smaller the number of accepted items grows larger, therefore more item sets can be created for the generation of association rules and consequently the number of rules increases.

Fig. 2. Number of rules vs. support for the Seer and Time Windows algorithms  In Figure 2 the results obtained by the Seer algorithm are represented by a cross line. Notice that the number of rules generated varies inversely with  respect to the support. The number of rules generated differs from those of the other algorithms due to the way in which the Seer algorithm partitions the logfile and creates item sets. Figure 2 shows with a square line the results obtained by the Time Windows algorithm, which reveals that when the support is high, it has a similar behavior to that of the Seer algorithm, but when the support decreases the Time Windows algorithm generates more rules, this is why it is a little slower than Seer. This difference among the algorithms can be explained mainly by the way each algorithm partitions the logfile.

The Seer algorithm carries out a fixed partition, which implies that a smaller number of transactions is  generated and the support of the item sets is smaller and some of these are rejected. For this reason the number of generated association rules decreases. The Time Windows algorithm uses a time partition, which generates a larger number of transactions that those obtained by fixed partition, for this reason the support of the item sets increases, which implies that a larger number of items is accepted and the number of association rules generated increases.

Figure 3 shows the results for the generation of association rules by the Composite Items algorithm, which are represented by a yellow line. Notice that, with respect to the Time Windows and Seer  algorithms, the number of rules that it generates is very high, and this is the reason for being the slowest algorithm. This large number of association rules is due to the generation of composite items.

Fig. 3. Number of rules vs. support for the Composite Items  algorithm  4.1.   Efficiency of the Algorithms  To conduct efficiency tests a software was implemented, which uses the patterns generated by each of the algorithms and simulates how these patterns would work in a real life environment. For carrying out this process two logfiles were used; let us assume that the first logfile comprises from Sep. 1 through Sep. 30, and the second from Oct. 1 through Oct. 31. The first logfile is used as input for the System for Hoarding Pattern Generation in order to obtain the patterns for each of the algorithms.

Upon obtaining the patterns the second logfile is used to carry out the simulation of clients requests.

When a request arrives, it is looked up in the patterns and the information related to the request is obtained, this information is compared with the subsequent requests. This way we can know how reliable the patterns obtained are.

Figure 4 shows the results of the algorithms efficiency, where the users' identifiers are indicated along the x axis, and the percentage of requests satisfied for each user is shown on the y axis. For each user three bars are displayed, each one represents the result obtained with one the algorithms. The results shown in the graph are just a sample from a set of            2 3 4 5 6 7 8 9  Suppor t            2 3 4 5 6 7 8 9 10  Suppor t  SEER  TW  -40000         2 3 4 5 6 7 8 9 10  Suppor t  SEER  TW  CI     approximately 250 users that were involved in the logfile. It is worth noting that the Seer and the Time Windows algorithms have very similar efficiencies, and the Composite Items algorithm has a smaller efficiency than that of the other algorithms. Notice, however, that this algorithm generated results for users where the Seer and Time Windows algorithms failed; this is the case for user 21. Notice also that there are users for which their requests could not be predicted; while for other users it was possible to predict all their requests.

4.2.   Construction of Web site pattern tree  The client that issues a hoard request has limited resources. The storage resource is of particular importance for hoarding since we have a limited space to load the set of files that compose a Web site.

Therefore, the set of files obtained in the process of generating access patterns should shrink to the original site so that it fits the client storage capability.

The association rules obtained after mining the access logfile of a Web site are used for constructing the Web site pattern tree that should be replicated in a mobile computer upon disconnection. The candidate set is defined as the set of all candidates files for hoarding for a specific client. Hoard set is the set of files actually loaded to the client prior to disconnection.

The process of automated hoarding via association rules can be summarized as follows: 1) Request of the client in the current session are used through an inferencing mechanism to construct the candidate set prior to disconnection, 2) Candidate set is pruned to form the hoard set, 3) Hoard set is loaded to the client.

A Web site can be conceptualized as a structure tree with many levels, each level corresponds with a new html file or other data resources (e.g., .pdf files, .doc files, ps files, etc). Figure 5 shows this structure.

1 2 3 4 5 6 7 8 9  Levels  In our system we conceptualized this tree structure as a sub-tree, in other words, a subset of html files and data resources that compose the original site. Figure 6 shows a Web site pattern tree.

This sub-tree or pattern tree is hoarded in computer client prior disconnection. The preselection of this set of files and data resources let clients operate in disconnection mode.

4.3. Hoarding Web site pattern in a mobile  computers  Hoarding is a concept that has been successfully applied to file systems. These systems allow clients to load replicas of files while disconnected. In this work we applied this concept to hoarding subsets of files that compose a Web site at mobile computer. This subset of files we called pattern tree.

Our system hoards patterns trees in a mobile computer. This is achieved in the following way: 1. The system analyses the URL address request  issued by a client at mobile computer and searching this address in a pattern container.

2. If a pattern of this URL address is found then the pattern tree of this Web site is hoarding in to client's mobile computer.

3. The replica in the mobile computer is uncompress and load in a local cache repository.

4. When a mobile computer disconnects to the network, the local cache provides a subset of Web site that previously was replicate from hoarding manager. All processes are shown in Figure 8.

0%  10%  20%  30%  40%  50%  60%  70%  80%  90%  100%  S u  c c e  s s  p e  rc e n  ta g  e  1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49  Users  SEER  VT  EC  Seer  TW  CI  Fig. 4. Efficiency of the algorithms  Fig. 5. Tree structure of Web site     5.   Final Remarks  In this work a System for Hoarding Pattern Generation was implemented, which uses three  mining algorithms of association rules: Windows of Time, Seer and Composite Items. These algorithms generate data access patterns, aiming at preselecting information resources (Web pages, files, or database fragments) before a mobile client requests them.

The results obtained with this work are the following:  -Based on the obtained results it can be concluded that the algorithms are able to predict with up to 50% of confidence. There are users that cannot be located in any pattern, and there are others for which the prediction rate can be as high as 100%.

-The Time Windows algorithm is slower than the Seer algorithm, but generates more rules and can obtain patterns for time intervals. Its efficiency is 49% of success.

-The Composite Items algorithm is the slowest and generates a huge number of association rules. Its average efficiency is 32%, the lowest of the three algorithms. However, this algorithm generates patterns for users that the other two algorithms are unable to generate.

-On the average the Seer algorithm outperforms the other algorithms since it is slightly faster. It generates the smallest number of rules, but has an efficiency of 50%, the highest for the three algorithms.

We can mention some additional benefits of the  System for Hoarding Pattern Generation: -A user should not be an expert in mining of association rules to operate this system. He should only understand the support and confidence concepts to be able to use it.

-Since the system includes three mining algorithms of association rules, it can produce different results that complement each other for better performance.

-The process of hoarding pattern generation is automatic and does not need user intervention.

-The system was tested and evaluated and it was found that it generates information access patterns, which are useful for automatic hoarding and the preselection of items that are necessary to replicate.

When comparing the system with a statistical tool  (Analog), one finds out that this last tool cannot predict requests issued by users. Such a tool only provides information such as the most requested item, the busiest hour and day, etc.; while the System for Hoarding Pattern Generation permits to obtain patterns that can be used for predicting with a certain confidence the items that a user may request.

