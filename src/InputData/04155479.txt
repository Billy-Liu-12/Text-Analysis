3rd International IEEE Conference Intelligent Systems, September 2006

Abstract- Sequential pattern mining algorithms have been developed which mine the set of frequent subsequences satisfying a minimum support constraint in a sequence database. However, previous sequential mining algorithms treat sequential patterns uniformly while sequential patterns have different importance.

Another main problem in most of the sequence mining algorithms is that they still generate an exponentially large number of sequential patterns when a minimum support is lowered and they do not provide alternative ways to adjust the number of sequential patterns other than increasing the minimum support. In this paper, we propose a Weighted Sequential pattern mining algorithm called WSpan. Our main approach is to push the weight constraints into the sequential pattern growth approach while maintaining the downward closure property. A weight range is defined to maintain the downward closure property and items are given different weights within the weight range. In scanning a sequence database, a maximum weight in the sequence database is used to prune weighted infrequent sequential patterns and in the mining step, maximum weights of projected sequence databases are used. By doing so, the downward closure property can be maintained. WSpan generates fewer but important weighted sequential patterns in large databases, particularly dense databases with a low minimum support, by adjusting a weight range. Introduction  Index Terms-Data Mining, downward closure property, sequential pattern mining, weight constraints,

I. INTRODUCTION  Sequential pattern mining has been researched extensively since first introduced by Agrawal [1] in 1995. Before prefix projected sequential pattern mining [6, 7, 10] was developed, Apriori based sequential pattern mining [1, 12] was used based on the downward closure property [1]. That is, if any length k sequential pattern is not frequent in a sequence database, superset sequential patterns can not be frequent. Using this characteristic, Apriori based sequential pattern mining algorithms prune candidate sequential patterns. However, this generates huge candidate sequences and a large amount of the original sequence database must be repeatedly scanned in order to check if a candidate is frequent. This is inefficient and ineffective.

To overcome problems of Apriori based sequential  pattern mining algorithms [1, 2, 5], prefix projected sequential pattern growth based approaches [6, 7, 9, 10, 11 ] have been developed. Sequential pattern growth methods mine the complete set of frequent patterns using a divide  and conquer method to reduce the search space without generating all the candidates. Fourth main limitations exist in the previous sequential pattern mining algorithms.

First, in the real world, some sequences are more important and others are less important. However, previous sequential pattern mining approaches do not consider this characteristic of real datasets. In other words, all items and sequences are treated uniformly. However, elements in sequences and items of elements have different importance.

For example, in real applications, when finding the traversal patterns in the World Wide Web, different pages can have different importance. In biomedical and DNA data analysis, some genes are more important than others in causing a particular disease and some genes are more effective than others in fighting diseases. In the real world, there are many applications in which specific gene sequences are more important or have more priority than other sequences.

Second, most sequential pattern mining algorithms use a support constraint to prune the combinatorial search space.

This strategy provides for basic pruning. However, support based pruning is not enough when considering the characteristics of real datasets. In previous mining approaches, after mining datasets to obtain the sequential patterns, there is no way to adjust the number of sequential patterns through user feedback without changing the minimum support. Sequential pattern mining algorithms such as [8, 13, 14] have better performance when a minimum support is high, the database is sparse and the length of the maximum sequential pattern is short.

Meanwhile, the main problem with these algorithms is that they can still generate an exponentially large number of sequential patterns and the runtime increases dramatically when a minimum support is lowered. Although closed sequential pattern mining approaches [13, 14] have been used, many sequential patterns are still generated in large dense databases.

Currently, no weighted sequential pattern mining algorithm exists, although weights are important in the real world. The main problem in weight based sequential pattern mining is that the downward closure property is broken when simply applying weights. A sequence with lower weight can not be pruned because super sequences may have higher weight.

We propose an efficient method for weighted sequential  pattern mining to tackle these problems of previous sequential pattern mining. Our main goal in this framework is to push weight constraints into the sequential pattern growth algorithm while keeping the downward closure property. In WSpan, a weight range is defined, items are given different weights within the weight range to reflect characteristics of the real dataset, and the weights of     sequences are calculated. The weight range is used to generate a reasonable number of weighted sequential frequent patterns even in a dense database with a low minimum support. Additionally, both the weight and support of each item are considered separately for pruning the search space. An extensive performance study shows that the number of weighted sequential patterns can be easily adjusted by setting a weight range and the runtime is efficient.

The main contributions of this paper are: 1) introduction  of the concept of weighted sequential patterns, 2) classification and incorporation of two key features, a weight and a support, 3) description of weighted sequential pattern mining by using a weight range, 4) analysis of applications of weighted sequential patterns, 5) implementation of our algorithm, WSpan, and 6) execution of an extensive experimental study to compare the performance of our algorithm with a recently developed algorithm, SPAM [2].

The remainder of the paper is organized as follows. In  section 2, we describe the problem definition and related work in sequential pattern mining. In Section 3, we develop WSpan. Section 4 shows extensive experimental results.

Finally, conclusions are presented in section 5.

Sequence ID Sequence  1O <a (abc) (ac) d (cf)>  20 <(ad) c (bc) (ae) bc>  30 <(ef) (ab) (df) cb> 40 <eg (at) cbc>  50 <a (ab) (cd) egh>  60 <a (abd) bc>  Table 1: a sequence database as a running example

II. PROBLEM DEFINITION AND RELATED WORK  A. Problem definition Let I = {il, i2... i11 be a unique set of items. A sequence S  is an ordered list of itemsets, denoted as (sl, s2, .., sm), where sj is an itemset which is also called an element of the sequence, and sj c I. That is, S = (sI, S2, ..., sm) and sj is (x1x2...xk),where xt is an item. The brackets are omitted if an itemset has only one item. An item can occur at most one time in an element of a sequence but it can occur multiple times in different elements of a sequence. The size S of a sequence is the number of elements in the sequence.

The length, 1(s), is the total number of items in the sequence. A sequence with length 1 is called an 1-sequence.

A sequence database, D = {SI, S2, .., S11, is a set of tuples (sid, s), where sid is a sequence identifier and Sk is an input sequence. A sequence oc = (X1, X2, .., X,1) is called a subsequence of another sequence D3= (Y, Y2, .., Ym) (n < m), and D is called a super sequence of oc if there exist an integer I< ii< ... < in < m such that XI c Yi1, ..., c Xn c Yi n. A tuple (sid, S) is said to contain a sequence Sa if S is a super sequence of Sa. The support of a sequence Sa in a sequence database D is the number of tuples in SDB that contains Sa.

Given a support threshold, min sup, a sequence Sa is a frequent sequence in the sequence database if the support of the sequence Sa is no less than a minimum support threshold. The problem of sequential pattern mining is to find the complete set of sequential patterns in the database with a support constraint.

Example 1 Table 1 shows the input sequence database SDB in our running example. Assume that a minimum support is 2. The SDB has 8 unique items, and six input sequences. A sequence (a (abc) (ac) d (cf)) in SDB has five itemsets: a, (abc), (ac), d, (cf) where items "a" and "c" appear three times in different itemsets of the sequence.

The size of (a (abc) (ac) d (cf)) is 5 and the length of this sequence is 9. Sequence (a (bc) d) is a sub sequence of (a (abc) (ac) d (cf)) since a c a, (bc) c (abc) and d c d.

Additionally, the sequence <a(bc)d> is a frequent sequential pattern because sequences 10 and 20 contain sub sequence s =(a (bc) d) and the support (2) of the sequence is no less than 2.

Meanwhile, a sequential pattern <(ab)g> is not a frequent pattern since the support (1) of the pattern is less than the minimum support (2). Based on the downward closure property, we can know that all super patterns of the sequential pattern <ag> such as sequential patterns such as <a(ab)g>, <a(ab)cg>, and <a(ab)(cd)g> are infrequent patterns.

B. Related work No sequential pattern mining algorithms, to date, have  considered weighted sequences Instead, all the sequential pattern mining algorithms suggested so far have given the same importance to the sequences and the elements in a sequence. However, it is important to distinguish important sequences from a large number of sequence patterns.

Previous studies have suggested efficient algorithms [2, 3, 4, 15] for mining sequential patterns.

GSP [12] mines sequential patterns based on an Apriori-  like approach by generating all candidate sequences. This is inefficient and ineffective. To overcome this problem, the database projection growth based approach, FreeSpan [6], was developed. Although FreeSpan outperforms the Apriori based GSP algorithm, FreeSpan may generate any substring combination in a sequence. The projection in FreeSpan must keep all sequences in the original sequence database without length reduction.

PrefixSpan [7], a more efficient pattern growth algorithm was proposed which improves the mining process. The main idea of PrefixSpan is to examine only the prefix subsequences and project only their corresponding suffix subsequences into projected databases. In each projected database, sequential patterns are grown by exploring only local frequent patterns.

In SPADE [18], a vertical id-list data format was presented and the frequent sequence enumeration was performed by a simple join on id lists. SPADE can be considered as an extension of vertical format based frequent pattern mining.

SPAM [2] utilizes depth first traversal of the search  space combined with a vertical bitmap representation of each sequence. Before SPAM, SPADE and PrefixSpan were two of the fastest algorithms. According to    performance evaluations [2], SPAM outperforms SPADE on most datasets and PrefixSpan outperforms SPAM slightly on very small datasets. Except for this case, SPAM outperforms PrefixSpan. Therefore, WSpan will be compared with SPAM for performance evaluation.



III. WSPAN (WEIGHTED SEUENTIAL PATTERN MINING)  In this section, we suggest an efficient sequential pattern mining algorithm in which the main approach is to push weight constraints into the sequential pattern growth algorithm while maintaining the downward closure property. We present our algorithm in detail and show actual examples for weighted sequential pattern mining.

The problem of weighted sequential pattern mining is to  find the complete set of weighted sequential patterns in the database with a support constraint and a weight constraint.

The main consideration in applying a weight constraint to sequential pattern mining is that the downward closure property may be broken by simply applying a weight constraint. A sequence with lower weight can be a frequent sequential pattern by combining items with higher weight in the sequence. To tackle these problems, a weight range is defined and used to give weight boundaries.

Definition 3.1 Weight Range (WR) A weight of an item is a non-negative real number that  shows the importance of each item. The weight of each item is assigned to reflect the importance of each item in the sequence database. A weight is given to an item within a weight range, Wmiin * WR Wmax.

Defi'nition 3.2 Weighted sequence and Maximum Weight (MaxW)  We can use the term, weighted sequence to represent a set of weighted sequential patterns. Weights of weighted sequences are obtained by calculating the average value of the weights in items of a sequence. A maximum weight (MaxW) is defined as a value of the maximum weight of items in a sequence database or a projected database. In mining weighted sequential patterns, the number of weighted sequential patterns can be decreased if MaxW is less than one, otherwise, the number of weighted sequential patterns will be increased.

Item <a> <b> <c> <d> <e> <f> <g> <h>  Support 6 6 6 5 4 3 2 1  Weight (0.7 < WR1 < 1.3) 1.1 1.0 0.9 1.0 0.7 0.9 1.3 1.2  Weight (0.7 < WR2 < 0.9) 0.9 0.75 0.8 0.85 0.75 0.7 0.85 0.8  Weight (0.2 < WR3 < 0.6) 0.5 0.2 0.6 0.4 0.6 0.3 0.5 0.3  Table 2: the example of sets of items with different WRs  Example 2: Given the sequence database in Table 1, the examples of sets of items with different weights in Table 2 and minimum support = 2, the set of items in the database, i.e., length-I subsequences in the form of "item:support" is <a>: 6, <b>: 6, <c>: 6, <d>: 5, <e>: 4, <f>: 3, <g>: 2, <h>: 1. When WR2is used, weight list is: <a:, 0.9, b:0.75, c:0.8, d:0.85, e:0.75, f:0.7, g:0.85, h:0.8>. Weights of items within a sequence are considered, the weight of a weighted   sequence, <a (bc) (ac) d (cf)> is 0.825 ((0.9 + (0.75 + 0.8)/2 + (0.9 + 0.8)/2 + 0.85 + (0.8+0.7)/2) / 5). MaxW of the weight range is the maximum value of a weight range. For example, the MaxW of WR1, WR2, and WR3 is 1.3, 0.9 and 0.6 respectively.

A. Weightedsequentialpattern In this section, we suggest the concept of weighted  sequential patterns, and show their properties. A sequential pattern is a weighted frequent sequential pattern if following pruning condition 1 is satisfied. If the sequential pattern does not satisfy the pruning condition, the pattern is called a weighted infrequent sequential pattern.

Pruning condition (support * MaxW < min-sup) In a sequence database, the value of multiplying the  support of a sequential pattern with a maximum weight among items in the sequence database is less than a minimum support. In projected sequential databases, the value of multiplying the support of a sequence with a maximum weight of items in the projected sequential databases is less than the minimum support.

Example 3: When WR3 is applied and a minimum support is 2, pattern f s support is 3, MaxW is 0.6 and the value (1.8) of multiplying the sequential pattern's support (3) with a MaxW (0.6) in the SDB is less than minimum support (2), so a pattern "f' in each sequence in SDB can be removed. Meanwhile, the number of weighted sequential patterns can be increased when WR1 is used as a weight range. The support of a pattern "g" in the sequence database is 2. However, a maximum weight is 1.3 so the value (2.6) of multiplying pattern's support (2) with a MaxW (1.3) of a pattern is greater than a minimum support (2), so the pattern "g" is not pruned in the weighted sequence list.

B. WSPan algorithm WSpan pushes weight constraints into the projection  based sequential pattern mining approach. A weight range is used and items are given different weights within the weight range. We now show the weighted sequential pattern mining process and present the mining algorithm.

Procedure WSpan (WSP, , L, SI )  Parameter:  (1) a is a weighted sequential pattern that satisfies the above pruning conditions, (2) L is the length of a,  (3) S a is the sequence database, SDB if a is null, otherwise, it is the a-projected database.

1. Scan S , once, count the support of each item, and find each weighted frequent item, : in sequences: : is a weighted sequential item if the following pruning condition is not satisfied.

Pruning condition: (support * MaxW > min-sup) (a) : can be assembled to the last element of a to form a sequential pattern or    (b) <j> can be appended to a to form a sequential pattern.

2. For each weighted frequent item J,  Add it to a to form a sequential pattern a, and output a'.

End for  3. For each a',  Construct a'-projected database SI oc; Call WSpan (oc, L+1, S oc)  End for  C. Applications ofweighted sequential pattern mining andfurther extension  Applications ofweighted sequentialpattern mining In this section, we show concrete examples of  applications for weighted sequential pattern mining. The sequential order in a sequence database is important in many situations. In huge datasets, extracting valuable sequential patterns is not easy work. Previous sequential pattern mining algorithms use the same priority for each pattern or sequence. The number of frequent sequential patterns becomes huge as the minimum support becomes lower.

Therefore, it is difficult for users to find more important sequential patterns. Applying weights is effective and efficient to not only generate more important sequential patterns but also adjust the number of sequential patterns.

Specifically, it is more effective to apply weight constraints to sequential pattern mining with lower minimum support.

Many opportunities exist to apply weight based sequential pattern mining.

Biomedical andDNA data analysis  Weight-based sequential pattern mining can be applied in biomedical data and DNA analysis. The weighed sequential pattern mining approach can be applied in search and comparison among DNA sequences, and identification of co-related gene sequences. For example, most diseases are not triggered by a single gene but by a combination of genes. When identifying specific disease gene sequences, we can give more weight to the important gene sequences and identify co-occurring gene sequences including the disease gene sequences.

Analysis of Web access pattern  In web log mining, we can apply weighted sequential pattern mining to analyze web access patterns. It is more efficient to find important sequential patterns by giving more weights to items within important sequences. For example, in application domain such as financial data analysis, retail industry and telecommunication industry, weighted sequential pattern mining can also be used to detect unusual access such as sequences related to financial crimes, fraudulent telecommunication activities, and purchase of expensive items within a short time. In this case, high weights are given to previously found fraudulent sequences to discover the suspicious sequential patterns.

Further extension  WSpan focuses on weighted sequential pattern mining based on the pattern growth algorithm and uses a weight range to adjust the number of sequential patterns. Weighted frequent pattern mining can be extended by considering levels of support and/or weight of sequential patterns. It is important to prune spurious sequential patterns involving items from different support levels and/or weight levels first. There are many areas in which items have different importance and patterns with a similar level of support and/or weight are more meaningful.

For example, the concept of strong support and/or weight affinity can be applied in DNA analysis and web log mining. We can give importance to specific DNA patterns or web log sequences and find weighted interesting DNA patterns or web log sequences. WSpan can be extended by considering the levels of support and/or weight of sequential patterns. By not only giving a balance between the two measures of support and/or weight, but also considering both support and/or weight affinity between items within patterns, more valuable sequential patterns can be generated.

Symbol Meaning D Number of customers in 000s in the  dataset C Average number of transactions per  customer  T Average number of items per transactions  S Average length ofmaximal sequences I Average length of transactions within the  maximal sequences N Number of different items in 000s  Table 3: Parameters for IBM Quest Data Generator

IV. PERFORMANCE EVALUATION  In this section, we present our performance study over various datasets. The WSpan is the first sequential pattern mining algorithm to consider weight of items within sequences and sequential patterns. We report our experimental results on the performance of WSpan in comparison with a recently developed algorithm, SPAM [2], which is the fastest algorithm for mining sequential patterns.

The main purpose of this experiment is to demonstrate how effectively the weighted sequential patterns can be generated by incorporating a weight measure with a support measure. First, we show how the number of weighted sequential patterns can be adjusted through user feedback, the efficiency in terms of runtime of the WSpan algorithm, and the quality of weighted sequential patterns. Second, we show that WSpan has good scalability against the number of sequence transactions in the datasets.

A. Test environment and datasets We used synthetic datasets generated by the IBM dataset  generator. It accepts essential parameters such as the number of sequences (customers), the average number of itemsets (transactions) in each sequence, the average number of items (products) in each itemset, and the number     of different items in the dataset.

Table 3 shows parameters and their meanings in this  synthetic sequential dataset generation. More detail information can be found in [1]. WSpan was written in C++ and experiments were performed on a sparcv9 processor operating at 1062 MHz, with 2048MB of memory. All experiments were performed on a Unix machine. In our experiments, a random generation function was used to generate weights for each item.

B. Environmental results. Comparison of WSpan and SPAM In this performance test, we focused on the efficiency of  using a weight range. Our experiment shows that in most cases, WSpan outperforms SPAM. First, we evaluate the performance on the DICIOT5S8I5 dataset. We set up different weight ranges for testing the effect of the WR.

U70000 -+SPAM ,60000 WSpan (WR: 0.4 - 0.5) =50000 WSpan (WR: 0.3 - 0.4) 'o40000 WSpan (WR: 0.2 - 0.3) Q30000 - E20000 -  25 3 35 4 45 5 55 6  Minimum support (in %)  Fig. 1. Num of patterns   ,,120 SA  WSpan (WR: 0.4 -0.5) C  80 WSpan (WR: 0.3 - 0.4)  60 WSpan (WR: 0.2 - 0.3)  60XjX-40-20  2.5 3 3.5 4 4.5 5 5.5 6 Minimum support (in %)  Fig. 2. Runtime  D7C7T7S717 dataset  Fig. 1 and Fig. 2 demonstrate the results of performance test using the D7C7T7S717 dataset by setting different weight ranges from 0.2 to 0.5. WSpan outperforms SPAM and the performance difference becomes larger when the support threshold is lowered. In Fig. 2, the number of sequential patterns is increased as the minimum support is decreased, but the number of sequential patterns in SPAM is substantially increased as the minimum support becomes lower.

In SPAM, there is no way to adjust the number of sequential patterns except for decreasing the minimum support. Recall that the number of sequential patterns in WSpan can be adjusted by changing the weight ranges. In Fig. 4, the runtime of WSpan is faster than SPAM and the  difference becomes bigger as a minimum support is lowered.



V. CONCLUSION  Many studies exist on mining sequential frequent patterns. One of the main limitations of the traditional approach for mining sequential patterns is that all items are treated uniformly, while real items have different characteristics. Moreover, previous sequential pattern mining generates a very large number of patterns as the minimum support becomes lower. Although frequent closed sequential pattern mining algorithms have been suggested, in large databases, they still generate too many patterns when support is low or the sequential pattern becomes long. In this paper, we developed WSpan which focused on weighted frequent pattern mining based on the prefix projected sequential pattern growth approach. A weight range is used to adjust the number of sequential patterns. The extensive performance analysis shows that WSpan is efficient and scalable in mining sequential patterns.



VI.ACKNOLEDGE  We would like to thank Jay Ayres and Dr. Johannes for giving not only source code ofSPAM but also datasets they used.

