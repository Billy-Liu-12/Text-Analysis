Systems, Man, and Cybernetics October 8-11, 2006, Taipei, Taiwan

Abstract- Online mining of streaming data is one of the most important issues in data mining. In this paper, we proposed an efficient one-pass algorithm, called MFI-TransSW (Mining Frequent Itemsets over a Transaction-sensitive Sliding Window), to mine the set of all frequent itemsets in data streams with a transaction-sensitive sliding window. An effective bit-sequence representation of items is used in the proposed algorithm to reduce the time and memory needed to slide the windows. The experiments show that the proposed algorithm not only attain highly accurate mining results, but also run significant faster and consume less memory than existing algorithms for mining frequent itemsets over recent data streams.



I. INTRODUCTION  A data stream is an ordered sequence of elements that arrives in timely order. Different from data in traditional  static datasets, data streams are continuous, unbounded, usually come with high speed and have a data distribution that often changes with time [10]. It is often refer to as streaming data. Many applications generate large amount of data streams in real time, such as sensor data generated from sensor networks, online transaction flows in retail chains, Web record and click-streams in Web applications, call records in telecommunications, performance measurement in network monitoring and traffic management, etc.

Data streams can be further classified into offline data streams and online data streams. Offline data streams are characterized by regular bulk arrivals [15], such as a bulk addition of new transactions as in a data warehouse system.

Online data streams are characterized by real-time updated data that come one by one in time, such as an a continuously generated transaction as in a network monitoring system. Bulk data processing is not possible for one streaming data.

Due to the characteristics of data streams, there are some  inherent challenges for mining streaming data [3, 8, 10]. First, each data element of stream should be examined at most once.

Second, the memory usage in the process of mining data streams should be bounded even though new data elements are continuously generated from the streams. Third, each element  This work was supported in part by the National Science Council under Grant NSC 94-221 3-E-009-012.

Hua-Fu Li is with the Department of Computer Science, National Chiao-Tung University, Hsinchu, Taiwan 300, R.OC. (corresponding author to provide phone: 886-3-5717172#56601; fax: 886-3-5721490; e-mail: hfli@csie.nctu.edu.tw).

Chin-Chuan Ho is with the Department of Computer Science, National Chiao-Tung IJniversity, Hsinchu, Taiwan 300, R.O.C. (e-mail: hocc@csie.nctu.edu.tw).

Man-Kwan Shan is with Department of Computer Science, National Chengchi University, Taipei, Taiwan 116, R.O.C. (e-mail: mkshan@cs.nccu.edu.tw).

Suh-Yin Lee is with the Department of Computer Science, National Chiao-Tung University, Hsinchu, Taiwan 300, R.O.C. (e-mail: sylee@csie.nctu.edu.tw).

in the stream should be processed as fast as possible. Fourth, the analytical outputs of the stream should be instantly available when the user requested. Finally, the errors of outputs should be constricted as small as possible. The continuous characteristic of streaming data makes it essential to use the algorithms which require only one scan over the stream for knowledge discovery. The huge nature of stream makes it impossible to store all the data into main memory or even in secondary storage. This motivates the design of a summary data structure with small footprints that can support both one-time and continuous queries. In other words, one-pass data stream mining algorithms have to sacrifice the correctness in the analytical results by allowing some counting errors. Consequently, previous multiple-pass data mining algorithms studied for static datasets are not feasible for mining data streams.

Many previous studies contributed to the efficient mining  of frequent itemsets (FI) in streaming data [4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19]. According to the stream processing model [20], the research of mining frequent itemsets in data streams can be divided into three categories: landmark windows [15, 12, 19, 11, 13], sliding windows [5, 6, 14, 16, 17, 18], and damped windows [7, 4], as described briefly as follows. In the landmark window model, knowledge discovery is performed based on the values between a specific timestamp called landmark and the present. In the sliding window model, knowledge discovery is performed over a fixed number of recently generated data elements which is the target of data mining. Two types of sliding widow, i.e., transaction- sensitive sliding window and time-sensitive sliding window, are used in mining data streams. The basic processing unit of window sliding of first type is an expired transaction while the basic unit of window sliding of second one is a time unit, such as a minute or a hour. In the damped window model, recent sliding windows are more important than previous ones.

In [15], Manku and Motwani developed two single-pass algorithms, Sticky-Sampling and Lossy Counting, to mine frequent items over offline data streams with a landmark window. Moreover, Manku and Motwani proposed a Lossy-Counting based three module method BTS (Buffer- Trie-SetGen) for mining the set of frequent itemsets from offline data streams. Li et al. proposed prefix tree-based single-pass algorithms, called DSM-FI [12] and DSM-MFI [13], to mine the set of all frequent itemsets and maximal frequent itemsets over the entire history of offline data streams.

1-4244-0100-3/06/$20.00 C2006 IEEE 2672    Jin and Agrawal [11] proposed an algorithm, called StreamMining, for in-core frequent itemset mining over online data streams. Yu et al. [ 19] discussed the issues of false negative or false positive in mining frequent itemsets from high speed offline transactional data streams.

Chang and Lee [5] proposed a BTS-based algorithm, called SWH-stream, for mining frequent itemsets in online data streams with a transaction-sensitive sliding windows model.

Li et al. [13] proposed a DSM-MFI-based algorithm called DSM-RMFI to find maximal frequent itemsets over offline data streams with a transaction-sensitive sliding window.

Teng et al. [ 16] proposed a regression-based algorithm, called FTP-DS, to find temporal pattems (frequent inter-transaction itemsets) across multiple online data streams in a time-sensitive sliding window. Teng et al. [17] proposed a resource-aware algorithm called RAM-DS, to mine temporal pattems in multiple online data streams with a time-sensitive sliding window. Lin et al. [14] proposed an incremental mining algorithm to find the set of frequent itemsets in offline data streams with a time-sensitive sliding window. Wong and Fu [ 18] proposed an efficient algorithm to mine top-kfrequent itemsets in offline data streams with a transaction-sensitive sliding window without a user-defined minimum support constraint. Chi et al. [6] proposed a transaction-sensitive sliding window based algorithm, called MOMENT, which might be the first to find frequent closed itemsets (FCI) from online data streams with a transaction- sensitive sliding window. A summary data structure, called CET, is used in the MOMENT algorithm to maintain the information of closed frequent itemsets.

Chang and Lee [4] developed a damped window based algorithm, called estDec, for mining frequent itemsets in online streaming data in which each transaction has a weight decreasing with age. In other words, older transactions contribute less toward itemset frequencies, and it is a kind of damped windows model. Giannella et al. [7] proposed a frequent pattem tree (abbreviated as FP-tree) [9] based algorithm, called FP-stream, to mine frequent itemsets at multiple time granularities by a novel titled-time windows technique. FP-stream focuses on offline data streams.

The purpose of this paper is on frequent itemsets mining  over online data streams with a transaction-sensitive sliding window, we mainly address it by comparison with the SWFI-stream algorithm proposed by Chang and Lee [5]. An efficient algorithm, called MFI-TransSW (Mining Frequent Itemsets over Transaction-sensitive Sliding Windows), is proposed to mine frequent itemsets over online data streams with a transaction-sensitive sliding window. The experiments show that the MH-TransSW algorithm not only attain highly accurate mining results, but also run significant faster and consume less memory than SWFI-stream algorithm for mining frequent itemsets over recent data streams.

The remainder of this paper is organized as follows. The  problem of Fl mining in a transaction-sensitive sliding window is defined and the algorithm MFI-TransSW is  proposed in Section 2. Experiments are discussed in Section 3.

Finally, we conclude the work in Section 4.



II. MINING OF FREQUENT ITEMSETS OVER TRANSACTION SENSITIVE SLIDING WINDOWS  A. Problem Definition  LetT = {il, i2, ..., ijI be a set of items. A transaction T= (tid, x1x2 xn), xi E , for 1 < i < n, is a set of items, while n is called the size of the transaction, and tid is the unique identifier of the transaction. An itemset is a non-empty set of items. An itemset with size k is called a k-itemset. A transaction data stream TDS = T1, T2, .., TN is a continuous sequence of transactions, where N is the tid of latest incoming transaction TN.

A transaction-sensitive sliding window (TransSW) in the  transaction data stream is a window that slides forward for every transaction. The window at each slide has a fixed number, w, of transactions, and w is called the size of the window. Hence, the current transaction-sensitive sliding window is TransSWN w,l = [TN-+I, TN-W+2, . TN], where N-w+l is the window id of current TransSW. The support of an itemset X over TransSW, denoted as sup(X)Trans W, is the number of transactions in TransSW containing X as a subset.

An itemset X is called a frequent itemset (FI) if sup(X)TTanssW > s-w, where s is a user-defined minimum support threshold (MST) in the range of [0, 1]. The value s w is called the frequent threshold of TransSW (FTTranssw).

Given a transaction-sensitive sliding window TransSW, and a MST s, the problem of online mining of frequent itemsets in recent transaction data streams is to mine the set of all frequent itemsets by one scan of the TransSW.

Transaction Data Stream Fls in TransSWI FHs in TransSW2 <T1, (acd) > (a), (b), (c), (e), (b), (c), (e), (bc), <T2, (bce) > (ac), (be), (be), (be), (ce), (bce) <T3, (abce) > (ce), (bce)  i <<T4, (be) > A transaction data stream is formed by transactions arriving in series  Figure 1: An example transaction data stream and the frequent itemsets over two consecutive TransSWs  Example 1 Let the first four transactions in a transaction data stream be <Tj, (acd)>, <T2, (bce)>, <T3, (abce)>, and <T4, (be)>, where T1, T2, T3, and T4 are transactions and a, b, c, d, and e are items. Let the size of sliding window w be 3 and the user-defined minimum support threshold s be 0.6. Hence, the transaction data stream consists of two transaction-sensitive sliding windows, i.e., TransSWI = [T1, T2, T3] and TransSW2 = [T2, T3, T4], where first window TransSW1 contains the transactions T1, T2, and T3, and the second window TransSW2 contains the transactions T2, T3, and T4. The example is shown in Figure 1.

In Figure 1, the frequent itemsets in TransSWI are (a), (b), (c), (e), (ac), (bc), (be), (ce), and (bce), and the frequent     itemsets in TransSW2 are (b), (c), (e), (bc), (be), (ce), and (bce). In this instance, we can find that (a), and (ac) are frequent itemsets in TransSWI, but not frequent ones in TransSW2.

B. The Proposes Algorithm  1) Bit-Sequence Representation In the proposed algorithm called MFI-TransSW (Mining Frequent Itemsets in a Transaction-sensitive Sliding Window), for each item X in the current transaction-sensitive sliding window TransSW, a bit-sequence with w bits, denoted as Bit(X), is constructed. If an item X is in the i-th transaction of current TransSW, the i-th bit of Bit(X) is set to be 1; otherwise, it is set to be 0. The process is called bit-sequence transform.

For example, in Figure 1, the first sliding window TransSWI consists of three transactions: <T1, (acd) >, <T2, (bce) >, and <T3, (abce) >, but the TransSW2 consists of transactions: <T2, (bce) >, <T3, (abce) >, and <T4, (be) >.

Because item a appears in the 1st and 3rd transactions of TransSWI, the bit-sequence of a, Bit(a), is 101. Similarly, Bit(b) = 01 1, Bit(c) = I I 1, Bit(d) = 100, and Bit(e) = 01 1.

Figure 2: Bit-sequences of items in window initialization phase of TransSW  Algorithm MFI-TransSW Input: TDS (a transaction data stream), s (a user-defined minimum support threshold in the range of [0, 1]), and w (the user-specified sliding window size).

Output: a set of frequent itemsets, Fl-Output.

Begin  TransSW = NULL; /* TransSW consists of w transactions */ Repeat:  for each incoming transaction Ti in TransSW do if TransSW = FULL then  Do bitwise-shift on bit-sequences of all items in TransSW; else  for each item X in Ti do Do bit-sequence transform(X);  end for end if  end for for each bit-sequence Bit(X) in TransSW do  if sup(X) = 0 then Drop X from TransSW;  end if end for  /* The following is the frequent itemsets generation phase. The phase is performed only when requested by users.

FI1 = (frequent I-itemsetsj; for (k=2; FIA 1, NULL; k++) do CIA= CIGA(Flk.1); Do bitwise AND to find the supports of CI; for each candidate Ck E CIk do  if SUP(CA)rr(nSsw> w-s then Flk- (C cE CIA SUp(Ck)lrins . WsJ;  end if end for  end for Fl-Output = UAFIk;  End  tid Items Bit-Sequences in current TransSW1 T1 (acd) Bit(a)=100, Bit(c)=100, Bit(d)=100 7'2 (bce) Bit(a)= 100,Bit(c)= I I 0,Bit(d)= I00,Bit(b)=O 10,  Bit(e)-0itO T3 (abce) Bit(a) 101,Bit(c)=l 1 l,Bit(d)=100, Bit(b)=Ol 1,  Bit(e)=O 1I  Figure 3: Bit-sequences of items after sliding TransSWI to TransSW2  2) MFI-TransSWAlgorithm The proposed MFI-TransSW algorithm consists of three phases, window initialization phase, window sliding phase, andfrequent itemsets generation phase.

a) Window Initialization Phase  The phase is activated while the number of transactions generated so far in a transaction data stream is less than or equal to a user-predefined sliding window size w. In this phase, each item in the new incoming transaction is transformed into its bit-sequence representation.

For instance, in Figure 1, the first sliding window TransSWI contains three transactions: T1, T2, and T3. The bit-sequences of items of TransSW1 in the window initialization phase are shown in Figure 2.

Figure 4: Algorithm MFI-TransSW  b) Window Sliding Phase  The phase is activated after the sliding window TransSW becomes full. A new incoming transaction is appended to the sliding window, and the oldest transaction is removed from the window.

For removing oldest information, an efficient method is used in the proposed algorithm. Based on the bit-sequence representation, MFI-TransSW algorithm uses the bitwise left shift operation to remove the aged transaction from the set of items in the current sliding window. After sliding the window, an effective pruning method, called Item-Prune, is used to improve the memory usage. The pruning approach is that an item X in the current transaction-sensitive sliding window is dropped ifand only ifsup(X)Trchssw = O.

For example, in Figure 1, before the fourth transaction <T4, (be)> is processed, the first transaction T1 must be removed from the current window using bitwise left shift on the set of items. Hence, Bit(a) is modified from 101 to 010. Similarly, Bit(c)=l 10, Bit(d)=000, Bit(b)=l 10, and Bit(e)=l 10. Then, the new transaction <T4, (be)> is processed by bit-sequence transform. The result is shown in Figure 3. Note that item d is   Window-id Transactions Bit-Sequences of items TransSW1 <T1, (acd) > Bit(a) = O1, Bit(c) = Ill, Bit(d) = t00,  <T2, (bce) > Bit(b) = 011, Bit(e) = 011 <T3, (abce) >  TransSW2 <T2, (bce) > Bit(a) = 010, Bit(c) = 110, Bit(d) = 000, <T3, (abce) > Bit(b) = 111, Bit(e) = 111 <T4, (be) >    dropped since Bit(d)=000, i.e.. sup(d)7ransSW = 0.

c) Frequent Itemsets Generation Phase  The phase is performed only when the up-to-date set of frequent itemsets is requested. In this phase, MFI-TransSW algorithm uses a level-wise method to generate the set of candidate itemsets CIk (candidate itemsets with k items) from the pre-known frequent itemsets Flk I (frequent itemsets with k-I items) according to the Apriori property [I]1. The step is called CIGA (Candidate Itemset Generation using Apriori property). Then, the proposed algorithm uses the bitwise AND operation to compute the support (the number of bit 1) of these candidates in order to find the frequent k-itemsets FIk. The candidate-generation-then-testing process is stopped until no new candidates with k+1 items (CIk+l) are generated. The MFI-TransSW algorithm is shown in Figure 4.

For instance, consider the bit-sequences of TransSW2 in Figure 3, and let the minimum support threshold s be 0.6.

Hence, an itemset X is frequent if sup(X)T .sw> 0.6.3 = 1.8.

In the following, we discuss the step of frequent itemset mining of TransSW2. The generated patterns are shown in Figure 1.

First, MFI-TransSW algorithm generates three candidate 2-itemsets, (bc), (be) and (ce), by combining frequent 1-itemsets: (b), (c) and (e), where Bit(b) = Il l , i.e., sup(b) = 3, Bit(c) = 110, i.e., sup(c) = 2, and Bit(e) = 1 10, i.e., sup(e) = 2.

1-itemset (a) is an infrequent itemset, since its Bit(a) = 010, i.e., sup(a) = 1. All these candidates are frequent itemsets after using bitwise AND operations to count the supports of these candidates. Because the Bit(bc) is 110, the support of candidate 2-itemset bc are 2, i.e., sup(bc) = 2. Similarity, sup(be) = 3, and sup(ce) = 2. Second, MFI-TransSW generates one candidate 3-itemset (bce) according to Apriori property and uses bitwise AND operation to count the sup(bce) = 2, i.e., Bit(bc) AND Bit(be) AND Bit(ce) = 110. Because no new candidates are generated, the generation-then-test process is stopped. Hence, there are six frequent itemsets, (b), (c), (bc), (be), (ce), (bce), generated by MFI-TransSW algorithm in TransSW2. The process is shown in Figure 5.

Transactions in TransSW2  <T2, (bce) > <T3, (abce) > <T4, (be) >  Bit-Sequences in Fl, in TransSW2 (s = sup TransSW2 0.6)  Bit(a) = 010 {(b) Bit(b) = I I 1 3 Bit(c) = II 0 1(c) Bit(c) = 1 101 2 Bit(b) = I1 (e) Bit(e) = I I I 3  _ Bit(e) = I111 II  C12 in SW2 {(bc) Bit(b) = 11 1 AND Bit(c) = 1101 {(be) Bit(b) = 11 1 AND Bit(e) = 11 11 {(ce) Bit(c) = 1 10 AND Bit(e) =- 11 1  C13 in TransSW2 {(bce) Bit(bc) = 110 AND Bit(be) = 111 AND Bit(ce) = 1101  I Ft2 in TransSW2 sup{(bc) Bit(bc) = I 10 2{(be) Bit(be)=1=1 1 3{ (ce) Bit(ce) = 101 2 Ft3 in TransSW2 sup  { (bce) Bit(bce) = 2  Figure 5: Steps of frequent itemsets generation in TransSW2  In the next section, we will discuss the problem of online mining of frequent itemsets over time-sensitive stream sliding windows and extend the MFI-TransSW algorithm to solve this problem.



III. EXPERIMENTS  In this section, we report the experimental results of the proposed algorithm MFI-TransSW. All the programs are implemented using Microsoft Visual C++ Version 6.0 and performed on a 1.80 GHz Pentium(R) PC machine with 512 MB memory running on Windows 2000. For testing frequent itemset mining over sliding windows, we generate online data streams using IBM synthetic data generator proposed by Agrawal and Srikant [1, 2]. The synthetic data stream, denoted by T5.14.DIOOOK, of size 1 million transactions (D 1OOOK) has an average transaction size of 5 items (T5) with average maximal frequent itemset size of 4 items (14). In all experiments, the transactions of T5.I4DlOOOK are looked up in sequence to simulate the environment of an online data stream.

A. Performance Evaluation ofMFI-TransSW algorithm Because the the purpose of the paper is on frequent itemsets mining over online data streams with a transaction-sensitive sliding window, we mainly address it by comparison with the SWFI-stream algorithm [5]. The experiments of memory usage are shown in Figures 6, 7, and 8, and the processing times are shown in Figures 9 and 10. The minimum support threshold s and the size of a sliding window w are set to 0.1% and 20,000, respectively. As shown in these experiments, MFI-TransSW significantly outperforms SWFI-stream for both memory consumption and CPU cost.

Figure 6 shows the memory usage of the window initialization phase. As shown in Figure 6, MFI-TransSW algorithm requires only about 2.1 MB in window initialization phase, but the memory requirement of SWFI-stream is increased linearly from 11.2 MB to 109.7 MB. Figure 7 shows the memory usage of the window sliding phase. In this phase, the memory requirement of MFI-TransSW is also approximately 2.1 MB, but that of SWFI-stream is between 109.7 MB to 120.3 MB. Figure 8 gives the memory usage of the frequent itemsets generation phase. In this phase, the memory requirement of MFI-TransSW is between 33.5MB to 39MB. As shown in Figures 6-8, MFI-TransSW algorithm outperforms SWFI-stream for memory consumption.

Figure 9 shows the processing time of window initialization phase under different window sizes from 20,000 (200K) transactions to 100,000 (1,000K) transactions. Figure 10 shows the total time of window sliding time and pattern mining time at each lOOK transactions using various window sizes from 200K transactions to 1000K transactions. As shown in Figures 9 and 10, MFI-TransSW algorithm outperforms SWFI-stream for processing time consumption.

I It is a downward closure property, i.e., if a pattern is frequent, all of its sub-patterns will also be frequent.

h ,_ - -, -- -1-1 --- ---I     MFI-TransSW   > 60  S 40   2000 4000 6000 8000 10000 12000 14000 16000 18000 20000  Incoming Transactions (window size = 20000)  Figure 6. Memory usages in window initialization phases of algorithms SWFI-stream and MFI-TransSW.

8+SWFI-steam  Z 60 MFI-TransSW F  > 40   0' 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th  Incoming Sliding Windows  Figure 7. Memory usages in window sliding phases of algorithms SWFI-stream and MFI-TransSW.

m 100  80 +--SWFI-stream -4- MFI-TransSW  > 60  S 40   1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th Incoming Sliding Window  Figure 8. Memory usages in frequent itemset generation phases of algorithms SWFH-stream and MH-TransSW.

F.

C-':- 200   0- 20000 40000 60000 80000  Window Size  Figure 9. Processing time in window initialization phases of algorithms SWFH-stream and MFI-TransSW under different window sizes.

k800   0 400 +SWFI-stream  200 MFI-TransSW  O  lOOK 200K 300K 400K 500K 600K 700K 800K 900K 1OOOK Incoming Transactions (K = 1,000)  Figure 10. Processing time including window sliding time and pattern generation time of algorithms SWFI-stream and MFI-TransSW under  window size 200K transactions.



IV. CONCLUSIONS  In this paper, we proposed an efficient one-pass algorithm, called MFI-TransSW, for mining frequent itemsets over online data streams with a transaction-sensitive sliding window. Experiments show that the proposed algorithm not only attain highly accurate mining results, but also run significant faster and consume less memory than existing algorithms for mining frequent itemsets over online data streams.

