Query Fuzzy Association Rules in Relational Database

Abstract An important issue to extend database management systems functionality is to allow the expression of imprecise queries to make these systems able to satisfy user needs more closely. In the last few years, some authors have dealt with the problem of relaxing the relational model in order to admit some imprecision.

Two significant data mining problems have been addressed recently, namely, the mining fuzzy association rules, and set-oriented mining for association rules in relational database (SETM algorithms) in [l]. At present, the problem how to express the mining fuzzy association rules algorithm as SQL queries have not been proposed. In this paper, we attempted to develop a fuzzy version of SETM algorithms that can be expressed as SQL queries in relational databases and discuss optimization of the algorithm.

Index Ternif-Data mining, fuzzy association rules, linguistic terms  1. Introduction  Association rule, which is widely used to represent sequence relationships between various factors, is a kind of important knowledge to which the data mining tools are applied, especially areas involving large amount of transaction data such as retail industry and banking.

Fuzzy association rule provides a powerful tool to represent imprecision and discovers qualitative patterns for massive numerical and continuous data.

Linguistic data mining solution is a general strategy proposed in this paper to deal with the data and other business applications. It is motivated by the various challenges that have been emerged with the proliferation of numerical, continuous and rapidly changing data, as well as the acute need to improve the understandability of discovered knowledge.

Nowadays, DBMS systems are used widely in different areas. Fast, reliable and unlimited secondary  storage provides a perfect environment for the users to collect and store large amounts of the data. The mountain of raw data was stored in databases.

Relational database is a major role, which is full of all trades and professionals. The emerging data mining sys tem lead naturally to the demand of a powerful data mining query language, on top of which many interactive and flexible graphical user interfaces can be developed.

This motivates vigorous researchers on mining association rules in relational databases for several years. Several researchers have proposed a series of excellent works about data mining query language for relational database [ 1,4]. To discovery association rules in relational database, M.Houtsma and A. Swami described set-oriented algorithm, SETM, in [ll.  In [4], J. Han examine the general philosophies which influence the design of such a data mining query language and present stepby-step a tentatively designed Data Mining Query Language, DMQL.

Today, relational databases are full of all trades and professionals. In this paper, we are interested in describing set-oriented algorithm for mining fuzzy association rules.

The remains of the paper are organized as follows. In Section 2, the related works on the generalizing fuzzy relational database and studies on the querying language for relational databases are outlined. Section 3 investigates the definitions and methodology of querying fuzzy association rules in relational databases. Section 4 shows the experimental results.

The last section concludes the paper.

2. Generalize fuzzy relational database from the classic databases  Before we express the mining fuzzy association rules algorithm as SQL queries, the first part is to generalize the fuzzy relational database from the numerical relational databases.

0-7803-7@78-3/0l/$lO~OO (C)U)ol IEEE. Page: 2989    2.1 Data Structure  For mining linguistic association rules in relational database, we store information in a relational database system using a table with the following schema: TRANSACTIONS(trans-id, item, linguistic-term). To map the numeric data into linguistic term, the basic elements of a fuzzy extension of the relational model called GEFRED has been used. From the model described in [2] some criteria for representation and handling of imprecise information are introduced. The main goal to achieve with the model is to give support that is general enough for the representation and handling of all kinds of fuzzy information. Some of the data types are:  . A single number (Age = 28, represented by the possibility distribution, 1/28)  A set of mutually exclusive possible scalar assignations (Behavior = (good, bad), represented by the possibility distribution, { llgood, lhad) )  A possibility distribution in a scalar domain (Bchavior = (0.6had, 0.7/normal]) . A possibility distribution in a numeric domain (Age = (0.3/23, 1.0/24, 0.8/25), fuzzy numbers or linguistic labels).

As we are concerned with the representation of imprecise data, we must store the following information in the database (Table 1).

Data Type F TYPE CRISP 0 LABEL 1 INTERVAL[A,B] 2 APROX(d) 3  Table 1: Data Type representation  2.2 Fiizzy relutional model  To store data, we have to define our fuzzy relational model. Mathematically, a fuzzy relational schema R(A,,--.,A,,,pu,) is made up of a relation name R  Definition I: (Chiang et al. [3]). Let R ( A , ,  + -. , A, , p , ( t  )) be a fuzzy relational schema.

An n-ary fuzzy relation r over R is a set of Dom(A,)x. . .x  Dom(A,), f[A;] refers to the value in t for attribute Ai, and each tuple, t, is an element of Dom(A,)x...xDom(A,). That is,  2.3 Fuuifying numerical attribute into linguistic terms  This is a process of fuzzifying numerical numbers into linguistic terms, which is often used to reduce information overload in human making decision process. The numerical salary, for example, may be perceived in linguistic terms as high, average and low.

One way of determining membership functions of these linguistic terms is by expert opinion or by people?s perception. Yet another way is by statistical methods [5]. Fuzzy clustering based on self-organized learning can also be used to generate membership functions [6] .  What follows is an algorithm for generating certain type of membership functions.

.

Let X be the considered data set. We intend to cluster X into k linguistic terms p j ,  j =1, 2, ..., k. For simplicity, we assume the type of membership to be triangular. Each linguistic term, p i ,  will have the triangular membership functions as follows:  Each pair of adjacent membership functions crosses at the membership value of 0.5. The only parameters needed to be determined are the k centers ( n l , n l , . . . , n , )  . An effective method to determine these centers is the Kohonen feature maps algorithm [6] .  At the initial time, k centers are set to be distributed evenly on the range of X. Let  1 x l 4 (az-xMa2-4)  4 cxca ,  0 x 2 a ,  and a list of attributes A,, Az, ..., An, pr . Each attribute A; is the name of a role played by some domain, Dom(A;), and p, is characterized by the following membership function:  Page: 2990    (aj, - X ) / ( U ~ + ~  - a j )  aj < X < U , + ~  (x-uj-,)/(uj -aj-J Uj-I < X < Q j P j W  =  w  0 x 5 a j-l  2 Male 0 2 Female 1  3 Middle 3 3 Young 2  1< j<k  t  To illustrate the complete mechanism of the fuzzy information in a relational database, we give an example of how the information related to a table involving both crisp and fuzzy data is expressed. Our example is based on a group of adults shown in Table 2.

The items AGE (Column 3) and EDUCATION (Column 4) permit fuzzy information: so some labels are used to represent the linguistic concepts in the following Table 3.

In this way, the whole data set is transformed into a generalized linguistic relational table (Table 4).

200 M 46 5"-6" 300 F 44 HS-grad 400 F 53 Preschol  Table 2: Part of Adult Records  a1 a? a3 --- ar.1  I I terms I I  Figure 1: Membership functions of the linguistic terms  Table 3: Linguistic variables  The centers will be adjusted iteratively. Each iteration consists of three steps:  1. Randomly take a value x from X, denoted by x [ n ] ; 2. Search for an integer m such that  Ix[n J - a,,, [.]I = Min j l x ~ n  J - a [rill ; 3. Put  and 4. keep other centers unchanged, where n is the  iteration time and Ct is the learning rate.

The iteration ends when d(X.A) converges.

a,,,[. + I] = a,n [n] + a ( x [ n ]  - an, [n])  2.4 Example of the linguistic iigormation in the database  Table 4: Linguistic relational table  Page: 2991    3. FSETM Algorithm  In this section, we use the algorithm SETM [l] in querying fuzzy association rules in relational databases.

In order to find fuzzy association rules, we need to scan transactions for reoccurring patterns that occur often enough to be of interest. The pattern?s relation C? has relational schema (iteml, linguistic-terml, .. ., item, linguistic-rermb count). All rules are found by consecutively generating all qualifying pattems from length 1 to k. Now, we assume that there is no duplication of record in the relational database. In other word, if the trans-id and item are the same, the linguistic-term must be different. In this case, the framework of our proposed algorithm for querying fuzzy association rules, named FSETM is similar to the SETM algorithm, but the detailed steps contain some differences such as count support, generate candidate relations C, and generate relations RP; from c,.

Algorithm FSETM consists of a single loop, in which two sorted operations and one merge-scan join are performed. The problem of mining fuzzy association rules in relational databases can be decomposed into the following three steps:  Generate all lexicographically ordered patterns of length k in R i  from Rf+l ,  and the original transaction table R,, .

RP := merge-scan R,,,-,, , R, , We sorted Rf(k-l ,  on:  trans-idjterq, linguistic_tew, . . . , i t e q , linguistic_terq Generate C, according to count for the pattems in  Rk that meet the minimum support constraint.

This step involves a simple sequential scan over  .

R,  Cll := generate counts from R iL . Select R ,  from R;  SELECT p.transjd, p.iteml, ..., p.itemk.l, p.linguistic-term,, . . ., p.linguistic-termk q.item, q.linguistic-term  FROM Rk-1 p, TRANSACTION 9  WHERE q.trans-id = p.trans-id AMD ?.item > p.itemk.1  Generate C?:  INSERTINTO Ck  SELECT pitem,, .. ., p.itemk, p.linguistic_term,, .. ., p.linguistic-termk, COUNT(*)  FROM Rkp,  GROUP BY p.item,, ..., p.item, p.linguistic-terml , . . ., p.linguistic-termk  HA VI? COUNT( *)>=:min-support  Generate Rfi: INSERT INTO Rk? SELECT p.item,. .... pitem,,  p.linguistic-term,, . . ., p.linguistic-termk, FROM Rk.1 p, Cfiq  WHERE q.iteml=p. item,, q.linguistic-termr=p.linguistic-terml  AND  q.itemt=p. itemk,  q.linguistic-termk=p .linguistic- termk  ORDER BY p.trans-id, p.iteml, ..., p.itemk, p.linguistic-terml, . , ., p.linguistic-termk  4. Demonstration  This section gives a case study of the adult data selected by a census of the United States in 1990 (Table I in section 1) to illustrate how to discovery  R, := filter R b  to retain supported patterns We can repeat this process, until R ,  = 4.

The subroutines are outlined as follows:  Generate Rfl?: INSERT INTO Rr -?  fuzzy association rules in relational databases. In the following, we will compare the execution time between the set-oriented mining association rules algorithm, S E W ,  and it?s fuzzy version FSETM.

Page: 2992    Data Source and systems  In order to test the algorithm with the real world application, we selected 10000 transaction records as our testing data set. In our example data, six attributes, i.e., income, education level, sex, age, marital status and relationship with others in family, are taken into account.

Execution time  The execution time in this experiment is carried out to show the performance of the algorithm FSETM on the DELL Optiplex GXlMDSK500. In order to test the algorithm, we use the (0.2, 0.25, 0.3, 0.35, 0.4, 0.45) as the minimum supports. We choose these values because they can help to generate a reasonable number of large itemsets.

Comparing the algorithm SETM proposed in [l], we see that algorithm SETM and algorithm FSETM are very stable. These result are presented in Table 5, in which Table (a) shows the execution time of the algorithm FSETM; (b) the execution time of the algorithm SETM.

(b) Table 5: Execution time  5. Conclusion  We designed a preliminary version of querying fuzzy association rules, FSETM, for effective data mining in relational databases. The major contribution of this paper is that it developed the algorithm SETM into mining fuzzy association rules applications. In the future, we will attempt to use the algorithm in financial data analysis, such as stock movement prediction.

0-7803-707&3/0U$lO.~ (C)zoOl IEEE.

Acknowledgement This work is supported by the Hong Kong Polytechnic University Central Research Grant G-V762.

Reference  M. Houtsma and A. Swami, ?Set-oriented Mining for Association Rules in Relational Databases,? In proceeding of the II Ih Engineering, 1995, pp 25-33.

J.M. Medina, 0. Pons. and M.A. Vila, GEFRED: ?A Generalized Model for Fuzzy Relational Databases,? Information Sciences 76, 1994. pp 87-109.

D. A. Chiang, L. R. Chow, and Y. F. Wang, ?Mining time series data by a fuzzy linguistic summary system,? Fuzzy Sets and Systems 112,2000. Pages, pp 419-432.

J. Han, Y. Fu, K,Kopershi, W. Wang, and O.Zaiane, ?DMQL: A Data Mining Query Language for Relational Databases,? 1996 SIGOMOD Workshop on Research Issues on Data Mining and Knowledge Discovery.

(DMKD?96), Montreal, Canada, June, 1996.

M. R. Civanlar, and H. J. Trussell, ?Constructing membership functions using statistical data, ? F u w  Sets and Systems, vol.

18, 1986. pp 1-14.

T. Kohonen, ?Self-Organization and Associate Memory,? Springer, Berlin, 1988.

