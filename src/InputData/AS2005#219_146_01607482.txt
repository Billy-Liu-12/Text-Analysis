Visual Interface for Online Watching of Frequent Itemset Generation in Apriori and Eclat

Abstract  This paper describes an interactive graphical user in- terface tool called Visual Apriori that can be used to study two famous frequent itemset generation algorithms, namely, Apriori and Eclat. Understanding the functional behavior of these two algorithms is critical for students taking a data mining course; and Visual Apriori provides a hands-on en- vironment for doing so. Visual Apriori relies on active par- ticipation from the user, where one inputs a transactional database and the tool produces a tree-based frequent item- set generation animation for the algorithm chosen. Visual Apriori provides an effortless learning experience by fea- turing user-friendly and easy to understand controls.

keywords: Animation, Apriori, association rules, data min- ing, Eclat, frequent itemset generation, Visual Apriori.

1 Introduction  The notion of association rules is an important concept in knowledge discovery in databases. Association rule min- ing can provide pertinent information about relationships among various objects based on how frequently they occur in a database [5]. The first application of association rule mining is market basket analysis [8]. This method is em- ployed by store managers to find patterns in consumer buy- ing behavior and identify what combinations of items in the store are sold most frequently. Results of such analysis help managers in devising profitable sale strategies. Other appli- cations of association rule mining include customer profil- ing, fraud detection, telecommunications networks failure prediction, credit risk analysis, etc.

The first step in association rule mining is the task of finding frequent sets of items or itemsets. Frequent or large itemsets are itemsets that appear as much or more fre- quently in the transactional database than the user-defined  frequency. It is well known that finding frequent itemsets in very large databases is computationally expensive and thus is the major focus in association rule mining research.

This fact rules out the scope of using naive algorithms as these would result in impractical computation times in case of large databases. Two famous algorithms, namely, Apri- ori [1, 2] and Eclat [7], use sophisticated approaches to find frequent itemsets.

a b  bc bd cd  abc abd acd bcd  abcd  ab ac  c  ad  d  a b c  b c d  d  Figure 1. Prefix tree for four distinct items  Both algorithms use a top down approach in traversing through the prefix tree of the items in a database [3]. A prefix tree (also referred to as ?tree?) is a graphical rep- resentation of the power set of items under consideration.

To understand in more details about the properties of prefix trees, let us consider an example. Figure 1 shows a prefix tree for four distinct items: a, b, c, and d. The root node is designated as level one, while the level for any child node is calculated as one plus the level of its parent node. Itemsets are arranged according to their cardinality, with all itemsets of cardinality one being placed at the root node. At a cer- tain level, the itemsets having a common prefix are arranged according to a fixed order in the node. In the example, an alphabetical ordering is used. To create a child node for an itemset, it is simply combined with the itemsets on its right hand side. So, the child node for itemset a at level one is     created by combining it with b, c, and d to yield ab, ac, and ad. The labels on the edges show the common prefix for the itemsets in the child node.

Understanding association rule mining is a critical task for students taking a data mining course. Using the tree- based approach for finding frequent itemsets in a transac- tional database is the easiest method for learning the basics of Apriori and Eclat algorithms. In this paper, we present Visual Apriori, an interactive graphical user interface tool that allows the user to input a transactional database and vi- sualize the tree-based frequent itemset generation process in case of the above-mentioned algorithms. Visual Apri- ori allows students to actively participate in the animation process by providing easy to use features that gives them control over every step of the animation.

The remainder of this paper is organized as follows. Sec- tion 2 provides background information about association rules and frequent itemset generation. Also, provided in Section 2 is a brief description of Apriori and Eclat algo- rithms along with a discussion on their main differences.

Section 3 describes Visual Apriori and gives a detailed ac- count of its functionality and the various features available.

Section 4 provides additional information about the tool such as system requirements and validation procedure. Sec- tion 5 illustrates the use of the tool and highlights its usabil- ity characteristics through an example. Section 6 summa- rizes the paper and provides concluding remarks.

2 Background  2.1 Definitions  An association rule can be formally stated in terms of the following statements [1]:  (a) Consider a set of n distinct items that is represented by I . Let D be the database on which association rule mining is to be applied. Each tuple in D consists of sets of items T such that T ? I . An association rule can be defined as an implication of the form X ? Y , where X, Y ? I are sets of items called itemsets, and X?Y = ?; X and Y are called antecedent and consequent of the association rule, respectively.

(b) The support for an itemset is the number of tuples wherein the items in an itemset appear together in D.

Support of an association rule, X ? Y , can be ex- pressed as n(X?Y )n(D) , where n(X ? Y ) represents num- ber of tuples containing both X and Y , and n(D) is the total number of tuples in D. Support is a measure of the statistical significance of an association rule.

(c) The confidence for an association rule, X ? Y , can be expressed as n(X?Y )n(X) , where n(X) is the number of  tuples in X. Confidence is a measure of the strength of an association rule.

Usually support and confidence are expressed in percent- age.

2.2 Frequent Itemset Generation  The basic two-step algorithm behind finding association rules between itemsets given I , D, threshold support (s), and threshold confidence (?) can be described as follows [1, 5]:  (a) Find all itemsets in D with support ? s.

(b) Generate association rules from the itemsets that satisfy  (a) and have a confidence ? ?.

The first step of the algorithm finds what are called large  or frequent itemsets. Those itemsets that do not satisfy (a) are labeled small or infrequent itemsets. Our focus is on fre- quent itemset generation since this step of association rule mining takes up most of the time and computing resources.

Two well-known algorithms that do this task are Apriori and Eclat. Apriori and Eclat differ from each other in the sense that they use different techniques for traversing the tree and for calculating the support of the itemsets.

2.2.1 Apriori  Apriori is a breadth-first search algorithm where the tree is traversed one level at a time. Apriori employs a two-pass strategy for finding frequent itemsets for all levels, but level one. In the first pass, a list of candidate itemsets are gen- erated at each level and any itemsets that are supersets of infrequent itemsets are pruned. The second pass involves calculating the support values for the remaining itemsets and doing a further pruning of those itemsets which have a support less than the user-defined threshold. The support for the itemsets is calculated by either counting the number of transactions in the database for each itemset or by tra- versing the transactions instead and counting the itemsets contained in each transaction [3].

2.2.2 Eclat  Eclat is a depth-first search algorithm where itemsets with the same prefix are traversed first. Starting from the left- most node at level one, Eclat traverses down the tree and prunes itemsets that have a lower support than the thresh- old. If all nodes having common prefix are processed, then Eclat backtracks to the next level and continues processing itemsets with a different prefix. Eclat calculates support for itemsets by maintaining a transaction list for each item [3].

This way the transaction database is only required once for     counting the support at the first level. Support for the subse- quent levels is calculated by means of intersecting the trans- actions list of parent itemsets which were combined to form the new child node.

3 Description of Visual Apriori  Visual Apriori allows users to input a transaction data- base and a threshold support value (in percentage) and visu- alize an animation showing how the tree is built depending on their choice of algorithm. The Visual Apriori interface consists of three main parts corresponding to a menu bar, an animation display area, and a status bar. The tool menu bar located at the top of the program window has five menu items which are as follows: File, Action, Algorithm, Statis- tics, and Help. All the menu items and their corresponding options have keyboard shortcuts designed for better usabil- ity. The functionality and usage of the options offered by these menu items is discussed in the successive sections.

The animation display area is the central part of the program window where all the animations are shown. The status bar is located at the bottom of the main window and displays in- formation regarding what input file has been loaded, the an- imation state, and the algorithm and support value chosen.

Four animation states are possible which are as follows:  ? Animation Running: The tool is running an animation showing the tree being drawn for the algorithm chosen and consequently being pruned according to the sup- port value.

? Animation Paused: The animation has been temporar- ily stopped. Pausing the animation allows the user to review the tree generation process.

? Animation Complete: The tool has finished drawing the tree.

? Animation Stopped: The user prematurely stopped the animation.

Note that the animation state is reset when a new input file is loaded.

3.1 File Menu  The File menu provides four options to the user: pro- vide the input (Load File), enter the threshold support (Sup- port), save the tree as an image (Save Tree), and quit the program (Exit). The input to Visual Apriori is a plain text file that contains a (1, 0)?matrix, where each row repre- sents a transaction and each column represents a distinct item.

Figure 2. Sample input file for Visual Apriori a b c d e f 1 1 0 1 1 0 1 1 0 1 1 1 0 0 0 0 1 0 0 1 1 0 1 1  Figure 2 shows an example input file. This file depicts a transaction database with six distinct items and four transac- tions. Note that the entries are space separated. The header for the matrix is only provided for readability purposes and should not be included in the actual input file as the tool automatically assigns identifiers to the items in an alphabet- ical order. A one in the input matrix signifies the presence of an item while a zero means otherwise. For example, the first transaction in the input file contains items a, b, d, and e.

If the input file is not in the correct format, the tool re- sponds with an error message. Such a message is shown when the matrix in the input file has characters other than ones and zeros, the matrix is incomplete or when the file does not contain a matrix at all. Once the input file has been accepted by the tool, the user needs to enter the support value and choose the algorithm after which the tool would start showing the tree generation animation. The support value has to be a positive integer value between 10 and 90, inclusive. The user has the option of saving the tree either as a Bitmap (BMP) or Joint Photographic Experts Group (JPEG) image, when the animation has been completed.

3.2 Action Menu  The action menu provides the user with the ability to control the animation. There are four options available in this menu, namely, Pause, Back, Resume, and Stop. The Pause option allows the user to temporality stop the anima- tion from progressing further. This gives the user the flexi- bility of reviewing how the algorithms work and take notes without missing any step that would have been executed if the animation were continuously running.

The Back option is only active in the Animation Paused state. This option provides the user with additional control over the animation process. If the user somehow missed an animation step, she could pause the animation and by clicking on the Back option each time she would be able to go back one step.

Clicking on the Resume option allows the animation to continue. The Stop option completely halts the animation.

This option is particularly helpful when the user has acci- dentally entered the wrong support value and wants to use a different support or algorithm for the same input.

3.3 Algorithm Menu  The Algorithm menu allows the user to choose from Apriori and Eclat for the tree generation animation. Once an input file has been loaded the user has the freedom to use any algorithm and support value of one?s choosing.

3.4 Statistics Menu  The Statistics menu has two options available, namely, Current Statistics and Final Statistics. The Current Statis- tics option displays a small window showing three repre- sentative indicators which change as the tree grows and is pruned at each level. These indicators numerically reflect the current state of the animation process and provide point- ers to the user as to what is happening.

The three indicators are as follows: Current Level, Item- sets Pruned, and Itemsets Processed. The Current Level indicator describes the level at which the node process- ing is taking place. The Itemsets Pruned indicator shows how many itemsets have been deleted, while the Itemsets Processed indicator keeps a count of the total number of itemsets drawn. By default the Current Statistics box is vis- ible when the animation is in progress, however, the user has the ability to hide it by clicking on the Current Sta- tistics option in the Statistics menu. Clicking on the same option again brings back the window. This option is only active when the animation is in the Animation Paused or Animation Running state.

Once the tool has finished drawing the tree, the results of applying the frequent itemset generation algorithms are displayed in the Final Statistics dialog box. This dialog box lists the frequent itemsets ordered according to their size, the height of the tree drawn, the total number of itemsets processed, the number of frequent itemsets, and the time to calculate the tree. The input parameters are also listed for completeness.

3.5 Help Menu  The Help menu has three options, namely, Help Con- tents, License, and About Visual Apriori. When clicked on the Help Contents option, a pop-up window opens up which provides information on how to use the tool. The help contents are organized in Hypertext Markup Language (HTML) format for easy navigation. License and About Vi- sual Apriori show the terms of use and copyright informa- tion about the tool.

4 General Information  4.1 System Requirements  Visual Apriori is written in Java. It has been developed to run on any operating system installed with the Java 2 Plat- form, Standard Edition (Java Runtime Environment and/or Java Standard Development Kit). For hardware require- ments, at least 64 MB RAM and 10 Megabytes of disk stor- age capacity is desirable.

The tool is available as an executable Java Archive (JAR) file and can be started by double clicking on the file icon in case of Windows and Mac OS X. For a Unix-based environ- ment running X windows the tool can be started by typing the command java -jar Visual_Apriori.jar in the shell from the source directory.

4.2 Validation  The purpose of validation is to ensure that the animations and results produced by Visual Apriori are correct. The val- idation process establishes confidence in the tool and makes sure that it aptly simulates the Apriori and Eclat algorithms.

The validation of Visual Apriori was achieved in two ways.

In the first approach, Visual Apriori was tested on a small input of six distinct items and fifty transactions. Each step executed by the tool in the animation of the two algorithms was followed by manual verification to ensure that the tool behaved in the manner expected of it. The second approach included verifying the frequent itemsets results reported by Visual Apriori to the output produced by another implemen- tation of the Apriori algorithm [6].

5 Visual Apriori Demonstration  In this section, we demonstrate the tree-based animation process using Visual Apriori when applying the Apriori al- gorithm on a database. Suppose a student has a transac- tion database composed of 6 distinct items and 100 trans- actions. She/he is interested in finding the itemsets that ap- pear at least 30 times in the database. She/he also wants to know: how does Apriori calculate the frequent itemsets in this case? The student starts Visual Apriori and loads the database by accessing the Load File option from the File menu. After loading the file she/he enters a support value of 30% into the Support dialog box. Having done that, she/he proceeds to choose Apriori from the Algorithm menu. As soon as the algorithm is selected, Visual Apri- ori starts drawing the tree on the screen. Figure 3 shows a summarized version of the different stages in the animation process.

The tool starts at the root node by filling in the support values for itemsets with cardinality one. A succinct repre-     (a) Filling in the support values for itemsets in the second level after candidate generation  (b) Pruning supersets of infrequent itemsets in the third level before calculating the support values  (c) Filling in the support values and pruning itemset(s) having support less than the user-defined threshold  (d) Displaying the results after completion of the tree  Figure 3. Different stages in the tree generation animation for an input with 6 distinct items and 100 transactions using Apriori (threshold support=30%)     sentation of the prefix tree is used in the tool where at any level the complete itemset can be determined by adding to the current identifier in the node all the preceding prefixes, i.e., labels of the edges leading to the root node. The support values for the itemsets are posted next to their names in the nodes. Observe that no itemsets are pruned at the first level because all of them have a higher support than the threshold support value of 30. Also, note how the Current Statistics counter keeps track of the animation process. After com- pleting the first level, the tool moves to the second level.

Figure 3(a) shows the candidate itemsets being created at the second level. The tool first creates the nodes for all can- didate itemsets of cardinality two without calculating their support. This fact is represented by the tool showing a ??? next to the itemset identifiers. Apriori wants to reduce the number of nodes for which it has to calculate the support by applying the rule: any superset of an infrequent itemset is also infrequent [1]. As there were no infrequent itemsets in the first level the tool does not prune any itemsets and fills in the support values for all of them at the second level. Now, the tool prunes ae, de, and df because they have a support of 20, which is less than the threshold support value. This situation is shown using red crosses over the itemsets (See Figure 3(b).).

After pruning the infrequent itemsets at the second level, the tool creates the candidate nodes at the third level. From the pruning done at the second level, we know that any su- perset of ae, de, or df is also infrequent. Applying this the- ory, itemsets abe, ace, ade, adf, bde, bdf, cde, and cdf are pruned. Here, the pruning is shown using blue crosses over the itemsets to distinguish them as supersets of infrequent itemsets. Next, the support values for the remaining item- sets are calculated and filled in. Observe that the support of itemset cef is lower than the threshold support and is thus deleted. Figure 3(c) depicts this scenario.

Just like before, at the fourth level, the tool again cre- ates the candidate nodes. All itemsets except abcd and abcf are pruned because they were supersets of pruned itemsets in the previous levels. No itemsets are deleted after filling in the support for the two remaining itemsets. In a similar fashion, all the itemsets are pruned at the last level. This way, the tree animation state changes to Animation Com- plete and the Current Statistics counter is replaced by the Final Statistics dialog box. Figure 3(d) shows the final tree along with the results. The Final Statistics dialog box shows frequent itemsets ordered according to increasing cardinal- ity values. It also shows that Visual Apriori took minimal time to do the calculations for drawing the resulting tree of height three.

6 Conclusions and Future Work  This paper presented a graphical user interface tool that visualizes tree-based frequent itemset generation for Apri- ori and Eclat algorithms. Features like Pause, Back, Re- sume, and Stop ensure that the users are active participants in controlling the animations. In addition, the tool through its Current Statistics window and status bar illustrate the animation process by displaying indicators that depict the status of the tree. The results of the animation are arranged in an easy to understand format in the Final Statistics dia- log box. Overall, Visual Apriori provides an interactive and hands-on learning experience for students.

We plan to expand Visual Apriori to include more fre- quent itemset generation algorithms such as the frequent- pattern tree (FP-tree) structure algorithm [4]. We also in- tend to integrate association rule mining options into the tool.

