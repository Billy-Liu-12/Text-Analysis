

The Research of Association Rules Mining Algorithm Based on Binary    Gang FANG1, Zu-Kuan WEI1*, Qian YIN2 1 School of Computer Science and Engineering, University of Electronic Science and Technology of China, Chengdu 610054,  P.R. China 2 College of Information Science and Technology, Beijing Normal University, Beijing 100875, P.R. China  E-MAIL: fg_7@163.com, anlexwee@uestc.edu.cn*, yinqian@bnu.edu.cn    Abstract?An algorithm of association rules mining based on binary has been introduced to solve two problems that how to easily generate candidate frequent itemsets and fast compute support. However the basic notion of presented algorithms in generating candidate itemsets is still similar to Apriori. In some degree the efficiency of these algorithms is very confined, and so this paper proposes two different searching strategies of association rules mining algorithms based on binary, which are suitable for mining corresponding characteristic database. One is that the notion of generating candidate frequent itemsets is similar to up-down searching of traditional association rules mining algorithm, which uses the method of forming subset to generate candidate frequent itemsets from long to short and is suitable for mining long frequent itemsets. The other is that the method of increasing value is used to generate candidate frequent itemsets, which is more efficient than Apriori based on binary and is more suitable for mining short frequent itemsets, in this mining course length of candidate frequent itemsets crossways varies from short to long. The both algorithms use digital character to reduce the number of scanned transactions. The experiment based on above three algorithms indicates that the efficiency of two presented algorithms is fast and efficient when mining corresponding characteristic database.

Keywords?data mining, association rules, binary, increasing search, digital transaction

I.  INTRODUCTION Traditional association rules mining algorithm Apriori [1]  mainly wants to solve two problems: one is that how to reduce the number of candidate frequent itemsets and the times of browsing database, the other is that how to generate candidate frequent itemsets and compute the support of candidate frequent itemsets. In order to solve the first problem, scholars presented many algorithms, such as Max-Miner [2], Pincer- Search [3], DMFI [6] and DMFIA [7]. And then, in order to solve the second, some algorithms based on binary [8, 9, 11] were presented, such as B-Apriori [8]. The kind of algorithm calculates support by binary logic ?and? operation to indeed improve efficiency. However, at present, some of algorithms based on binary generate candidate frequent itemsets still according to the notion of Apriori. When mining some   * corresponding author  This work was fully supported by a grant from the S&T Foundation of Chengdu Sci.&Tech. Bureau. (Project No. 06GGYB801GX-032)  character of database, the efficiency of these algorithms is badly influenced, therefor this paper proposes two kinds of association rules mining algorithm based on binary. An algorithm denoted by B_UDMA uses strategy of up-down searching to generate candidate frequent itemsets of binary.

The algorithm uses binary logical ?and? operation to compute support of itemsets and uses the method of forming subset to generate candidate frequent itemsets from long to short, which is suitable for mining long frequent itemsets. The other denoted by B_IVMA uses the method of increasing value to generate candidate frequent itemsets of digital, which is more efficient than Apriori and is suitable for mining short frequent itemsets.

In this mining course length of candidate frequent itemsets crossways varies from short to long. The both algorithms use digital character to reduce the number of scanned transactions.

The experiment based on above three algorithms indicates that the efficiency of two presented algorithms is fast and efficient at the time of mining corresponding characteristic database.



II. BASIC NOTIONS AND PROPERTIES  Let I= {i1, i2?im} be a set of items, if ik (ik?I), let T= {i1 ? i2 ? ? ? im} (Tk ? I) be a subset of items, called a Transactions. For example, let Tk= {i1, i2, i3} be a subset of items, called a transaction. And then let D= {T1, T2?Tn}, let Tk ?I, (k=1?n) be a set of transactions, called Transaction Database (TD).

Definition 1 Binary Transaction (BT), a transaction is expressed as binary, binary transaction of transaction T is expressed as BT= (b1 b2?bm), bk? [0, 1], k=1?m.

If ik?Ti, and then bk=1, otherwise bk=0, the order of binary digits is as same as items which have been fixed.

Example, let I={1,2,3,4,5} be a set of items, if a transaction is expressed as Ti={2,3,5}, and then BTi=(01101).

Definition 2 Digital Transaction (DT), which is an integer, the value of which would be obtained by turning binary of transaction into algorism.

Example, if BT=01101, and then DT=13.

Definition 3 Digital Transaction Length (DTL), which is an  integer, the value of which is equal to the number of digital ?1? that is contained in digital transaction.

Example, if DT=13, and then DTL=3.

Definition 4 Relation of digital transaction accord with relation of transaction set.

Example, suppose digital transaction of a transaction T1 is denoted by DT1, digital transaction of a transaction T2 is denoted by DT2. If T1 ? T2, and then DT1 ? DT2, DT1 is regarded as subset of DT2, DT2 is regarded as superset of DT1.

Definition 5 Frequent Digital Transaction (FDT), which is a digital transaction, the support of which excess minimal support given by users.

Definition 6 Candidate Digital Transaction Section (CDTS), this is an integral section from 3 to max, which includes all the candidate frequent digital transaction that may generate frequent digital transaction except for power of 2. Here 3 is regarded as initialization because 3 is the least digital transaction expressing dualistic relation, and max is regarded as the maximal digital transaction in database.

Example, if the maximal digital transaction in database is denoted by max=63, and so CDTS = [3, 63].

Definition 7 Candidate Frequent Digital Transaction (CFDT), which is a digital transaction that may become frequent digital transaction from CDTS.

Property 1 The given binary transaction uniquely corresponds to a digital transaction, vice versa.

Property 2 Let p and q be binary transactions with m bits, let Tp be transaction about p, let Tq be transaction about q, then Tp ? Tq ?p ?q=p.

Proof is expressed as follows: Suppose digit 1 locates each bit of binary p from ij1 to ijk  (jk?m), digit 0 locates other ones. If p and q=p, then digit 1 locates each bit of binary q from ij1 to ijk (jk?m) (otherwise these bits must occur digit 0 with logic ?and? operation), other ones will be either 0 or 1, so Tp ? Tq according to definition 1.

And then via the hypothesis about p as before, since Tp ? Tq , then digit 1 must locate each bits of binary q from ij1 to ijk (jk?m) (otherwise, ? ik, so ik?Tp , ik ? Tq, the conclusion is contrary to premises as Tp ? Tq), other ones will be either 0 or 1, so p ?q=p.

Via theorems as before, there are two conclusions obviously deduced.

Conclusion 1 Let p and q be binary transactions, let DTp be digital transaction about p, let DTq be digital transaction about q. If p ?q=p, and then DTp ?DTq.

Conclusion 2 Let p and q be binary transactions, let Tp be transaction about p, let DTp be digital transaction about p, let Tq be transaction about q, let DTq be digital transaction about q.

If DTp?DTq, then Tq ? Tp.

Property 3 Let p and q be binary transactions with m bits, let Tp be transaction about p, let Tq be transaction about q, and p ?q=p, let F be frequent itemsets.

?If  Tq ?F, then Tp ?F.

?If  Tp ?F, then Tq ?F Proof is expressed as follows: Since p ?q=p, via property 2, then Tp ? Tq, and Tq ? F,  based on set theory, then Tp ?F. If Tp ?F, then Tq ?F as the same theory.



III. THE UP-DOWN SEARCHING STRATEGY MINING ALGORITHM BASED ON BINARY  A. The key technologies of mining algorithm As we all know, it is the most key technology for  association rules mining algorithm to search frequent itemsets which includes generating candidate frequent itemsets and pruning redundancy candidate frequent items. According to up-down [6] searching strategy of traditional association rules, the process of up-down searching frequent digital transaction based on binary is expressed as follows:  Let I= {i1, i2?im} be a set of items, digital transactions of database are sorted on descending. If candidate frequent digital transaction is denoted by CFDTk, where k is equal to the number of items in CFDT, and is also equal to digital transaction length.

Step1: Generating the first Ck= {i1, i2?im} (k=m) which is denoted by CFDTk.

Step2: At first, if CFDTk can?t belong to frequent digital transaction denoted by FDT, and then calculating support of CFDTk which is denoted by Sk. if Sk?minimal support, then CFDTk is became into FDTk, and adding FDTk to FDT, otherwise the algorithm would go on generating candidate frequent digital transaction CFDTik-1, which is the (k-1) subsets of CFDTk, and if CFDTik-1 is subsets of FDT, it will be pruned via property 3.

Step3: Aiming to each CFDTik-1, we regard CFDTik-1 as CFDTk in step 1, and then repeatedly execute from step 2 to 3 until k=1.

The algorithm of generating candidate digital transaction from CFDTk to CFDTik-1 is expressed as follows:  We regarded {ik} (k=1?m) as a transaction, digital transaction of which is denoted by DTk.

The algorithm of Creating-Candidate (int [] Array) will return all CFDTik-1 after inputting CFDTk.

(1)   Array [0] =CFDTk; (2)   c=0; (3)   For (i=1; i?m; i++) (4)  { (5)     If (DTi ? Array [0]) (6)      Array [++c] =Array [0] & (~ DTi); (7)   } (8)   Array [0] =c; (9)   Return Array;  B. The algorithm of up-down generating frequent digital transaction based on binary  Firstly, we define following signs: DT0: expressing digital transaction of {i1, i2?im}.

DB: expressing database with N digital transactions in a  descending order.

DTi: expressing digital transaction in DB, which includes  value and count.

F:    saving frequent digital transaction.

NF:  saving non-frequent digital transaction.

C:    saving candidate frequent digital transaction.

The algorithm is expressed as follows:  (1)    Write DT0 to C;      (2)    While (exit=false) { (3)       If(C!= ? ) { (4)         NF = ? ; (5)         For(all CFDTik?C){ (6)          S_count=Count-Support (CFDTik); (7)          If (S_count?minisup) (8)             Write CFDTik to F; (9)          Else (10)              Write CFDTik to NF; (11)        }//separating candidate itemsets (12)        C=? ; (13)        For(all DTik?NF) { (14)          Array [0]= DTik; (15)         Creating-Candidate (Array); (16)         Write Array[i] (i?0) to C and pruning all repeated digital transactions in C; (17)          } (18)         Deleting all subset of F from C; (19)        } (20)     Else (21)         exit=true; (22)     } Count-Support (int DT) (1)    While (i?N&&DT?DBi.value) { (2)       If (DT ? DBi.value) support+=DBi.count; (3)       i++; (4)       } (5)     Return support;

IV. THE INCREASING VALUE SEARCHING STRATEGY MINING ALGORITHM BASED ON BINARY  A. The process of generating frequent digital transaction According to basic notion of algorithm Apriori, we further  propose an increasing value searching strategy of mining algorithm based on binary, but the notion of generating candidate frequent itemsets is different from the other algorithm. The process of generating frequent digital transaction is expressed as follows:  Step1: Creating candidate digital transaction section (CDTS) according to database and definition 5.

Step2: Generating candidate frequent digital transaction (CFDT) from minimum digital to maximum digital by increasing value.

Setp3: Computing support of CFDT when it isn?t superset of non frequent digital transaction denoted by NFDT. If support? minimal support, and then writing CFDT to frequent digital transaction denoted by FDT after deleting all subsets of CFDT from FDT, otherwise, writing CFDT to NFDT.

Setp4: Generating the next CFDT, and then repeatedly execute Step3 until maximum of CDTS.

B. The algorithm of increasing-value generating frequent digital transaction  Let [3, max] be a CDTS, and there are N digital transaction saved in DB on descending, where data are different from each other, and we define following signs:  DB: expressing database with N digital transactions in a descending order.

Di: expressing digital transaction in DB, which includes value and count.

FDT:    saving frequent digital transaction.

NFDT:  saving non-frequent digital transaction.

The algorithm is expressed as follows:  (1)  While (DT? [3, max]) { (2)      DT=3; (3)      If (all   NFDTj ?DT) { (4)       While (i?N&&DT?Di.value) {// Di?DB (5)         If (DT ?Di.value) (6)              s_count+= Di.count; (7)          i++; (8)         }//calculating support of items (9)        If (s_count/N?support) { (10)           Delete all FDTk (FDTk ? DT) from FDT; (11)           Write DT to FDT; (12)         } (13)      Else (14)          Write DT to NFDT; (15)       } (16)      DT++; (17)      }

V. COMPARING CAPABILITY OF ALGORITHM Aiming to the algorithm of B_Apriori presented by  reference[8], this paper proposes two different searching strategies of mining algorithm based on binary, which are B_UDMA and B_IVMA. Firstly, we compare capability of these algorithms, which are expressed as follows:  B_Apriori: The algorithm uses combination of items to generate candidate frequent items based on binary. The number of items contained by candidate frequent itemsets varies from fewness to many, namely, generating (k+1)- candidate itemsets after inputting some k-frequent itemsets.

The algorithm uses the method of ? in property 3 to prune redundant candidate frequent itemsets. And the algorithm uses binary logical ?and? operation to calculate support of itemsets.

However, if the number of item contained by frequent itemsets is too many, the algorithm will generate a lot of candidate frequent itemsets and repeatedly scan database, and because of these the efficiency of B_Apriori is too bad. Hence, the algorithm is suitable for mining relative short frequent itemsets.

B_UDMA: The algorithm uses forming subset of non frequent itemsets to generate candidate frequent items based on binary. The number of items contained by candidate frequent itemsets varies from many to fewness, namely, generating k-candidate itemsets after inputting (k+1) non- frequent itemsets. The algorithm uses the method of ? in property 3 to prune redundant frequent itemsets. And the algorithm also uses binary logical ?and? operation to calculate support of itemsets, and at the time it is the most key to use conclusion 2 of property 2, namely digital character, to reduce the number of scanned transactions in database, which is different from B_Apriori. However, if the number of item      contained by frequent itemsets is too few and the number of frequent itemsets is too many, the algorithm will generate a lot of candidate frequent itemsets and repeatedly scan database, and so since these the efficiency of B_UDMA is also too bad.

Hence, the algorithm is suitable for mining long frequent itemsets.

B_IVMA: The algorithm generates candidate frequent itemsets by automatically increasing value. DTL of candidate frequent digital transaction generated across varies, but trend of variation is from few to many. For example:  If CDTS= [3, 15], the sequence of generating candidate frequent itemsets is expressed as follows:  DT1=3, DTL1=2.

DT*=4, DTL*=1. (4 have been pruned via definition 6) DT2=5, DTL2=2.

DT3=6, DTL3=2.

DT4=7, DTL4=3.

DT*=8, DTL*=1. (8 have been pruned via definition 6) DT5=9, DTL5=2.

DT6=10, DTL6=2.

DT7=11, DTL7=3.

DT8=12, DTL8=2.

DT9=13, DTL9=3.

DT10=14, DTL10=3.

DT11=15, DTL11=4.

As before their lengths crossways vary from 2 to 4,  candidate frequent itemsets are easily generated. The method of the algorithm is different from the other algorithm. The algorithm uses the method of ? and ? in property 3 to prune redundant candidate frequent itemsets. The algorithm also uses binary logical ?and? operation to calculate support of itemsets, and at the time it is the most key to use conclusion 2 of property 2, namely digital character, to reduce the number of scanned transactions in database. However, if the number of item contained by frequent digital transaction is too many, the algorithm will generate a lot of candidate frequent digital transaction, and so since these the efficiency of B_IVMA is too bad. But it is easier to create candidate frequent items than B_Apriori and B_UDMA. Hence, the algorithm is more efficient than B_Apriori, which is more suitable for mining short frequent itemsets.

Now we use result of experiment to testify above analyses.

Three mining algorithms are used to generate frequent itemsets from these digital transactions, which are expresses as digital from 3 to 4095, m=12, N=4083. Our experimental circumstances are expressed as follow: AMD Athlon (tm) 64X2 Dual Core Processor 3800+ 2.00 GHz, 512MB, language of the procedure is Visual C# 2005.NET, OS is Windows XP Professional.

One of experiment results is expressed as figure 1 and figure 2, here is absolute support. As the relative support of frequent itemsets changes, the executed time of algorithms is expressed as figure 3. As the length of frequent itemsets changes, the executed time of algorithms is expressed as figure 4 and 5.

According to these result, we can draw a conclusion as follows: B_UDMA is suitable for mining long frequent  itemsets. B_IVMA is more efficient than B_Apriori and is more suitable for mining relative short frequent itemsets.

Figure 1.  The result of experiment Length=3.

B_IVMA< B_Apriori< B_UDMA     Figure 2.  The result of experiment  Length=8. B_UDMA< B_IVMA< B_Apriori           0.07 0.24 0.5 0.7 1.2 2.4 6 12 24  MinimumSupport(%)  E x e c u t e d T im  e ( m i l l i s e co  n d )  B_Apriori  B_IVMA  B_UDMA   Figure 3.  The executed time of three algorithms as changing of support           10 8 7 6 5 4 3 2  Length(Item)  Ex ec  u te  d Ti  me ( Mi  ll i se  c on  d)  B_Apriori  B_IVMA   Figure 4.  The executed time as changing of length             10 8 7 6 5 4 3 2  Length(item)  E xe  c ut  ed Ti  me ( mi  ll is  ec o nd  ) B_IVMA  B_UDMA   Figure 5.  The executed time as changing of length

VI. CONCLUSIONS The algorithms of association rules mining based on binary  have been presented in order to easily generate candidate frequent itemsets and fast compute support of itemsets. This paper proposes an algorithm of up-down association rules mining based on the notion of Apriori denoted by B_UDMA, which is suitable for mining long frequent. Another algorithm of increasing value association rules mining denoted by B_IVMA is different from the basic notion of Apriori, which is more efficient than B_Apriori and is more suitable for mining relative short frequent itemsets. It is two key ways of innovation to use the method of increasing value to generate candidate frequent itemsets and use digital character to reduce the number of scanned transactions in database. The experiment indicates two kinds of algorithms are fast and efficient for mining corresponding to character database.

