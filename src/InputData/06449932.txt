Periodic Knowledge Discovery through Parallel  Paradigm

Abstract- Temporal association rules are largely different from traditional association rules by the fact that temporal association  rules attempt to model temporal relationships in the data.

Effective gain in any business is possible to achieve due to the  adaptive knowledge which demands customized rules for specific  conditions. Several parallel algorithms are useful to extract  frequent patterns from large databases. This paper proposes a  novel methodology for extracting calendric association rules and  hence the general rules for a timestamp transactional database  through modified Parallel Compact Pattern Tree construction  strategy. The same has been demonstrated through mushroom  dataset and synthetic temporal transactions.

Keywords-CP-Tree; Parallel Processing; Transactional Database; Knowledge Discovery; Temporal association rules

I. INTRODUCTlON  Data mining is a powerful technology in order to extract hidden information which is used for making decisions and allowing businesses to make prospective and proactive information delivery. Data Mining Techniques are being evolved and enhanced over the years, to cater to the needs of handling massive data, to employ HPC (High Performance Computing) environment for building effective as well as timely advisory systems/ agents. Frequent Pattern Mining was first proposed by Agrawal et al. (1993) for mining transactional databases in the form of association rule mining.

Later years, based on this data mining task the research activity in this area extended tremendously with new scalable data mining algorithms for various applications.

Temporal association helps to fmd the valuable relationship among the different itemsets, in temporal database. There are different types of temporal association rules defined in the literature such as intertransaction rules, episode rules, trend dependencies, sequence association rules and calendric association rules.

Several researchers [1-3] employed parallel algorithms for association rule mining. FP-Forest [1] is to store data using multi-trees. Agrawal et al. [2] developed three parallel algorithms such as count distribution, data distribution and candidate distribution. Zaki et al. [3] proposed the Common   Candidate Partitioned Database (CCPD) and the Partition Candidate Common Database (PCCD) algorithms, both are Apriori-based framework.

In this paper, the parallel algorithm proposed by Tanbeer et al. [6] for Compact Pattern Trees has been modified to elicit incidental periodic knowledge and to discover seasonal trends which focus on business and decision perspectives in the context of temporal mining. This paper experiments with the temporal database in order to describe real-life concepts such as the business in the first week of month and the remaining weeks of the same month which is not constant  The remainder of the paper is organized as follows.

Section II gives a brief review of related works. Section III gives the description of proposed work of Parallel Computing of Compact Pattern Trees. Section IV gives experimental results. Section V concludes our study.



II. RELATED WORKS  In this section, some parallel based algorithms are briefly discussed. Jian Hu et al. proposed FP-Forest [1] presents two useful operations called combination operation and join operation to merge two FP-Forest, at the same time defining peculiar mutation of FP-Tree according to the study of the structure of MFP-tree, named single frequent branch, it is found that it can get frequent item sets by easy enumeration nodes on MFP-tree and designed to accelerate association rule mmmg. Osmar et al. [4] proposed a parallel algorithm by taking the partition of the database it builds the FP-tree and calculates the candidate pattern from FP-tree and then merges the candidate pattern bases.

Dehao Chen et al. [5] proposed tree partition algorithm with two phases such as master/ slave phase and content based tree partition phase. In the fust phase in terms of multi-thread environment, making one thread as master and the remaining as slave. Master thread distributes the transaction from the database to slave threads and acting as a producer. This model has the possibility to do some changes of the transaction before delivering to the slave. In the second phase, partitioning the tree equally so that each thread can get equal workload.

Above two phases avoids the overhead problem by building multi trees and the workload is perfectly balanced.

Tanbeer et al. [6] proposed Parallel and Distributed FP Mining with PP-Tree. The transactional database divides into nwnber of partitions and each partition assigned to each processor to construct the PP-Tree with header table list in first phase. Second phase constructs an array of HTs (combining all header tables). By HTA (frequencies sorted in descending order), all the PP-Trees are restructured and then mined using FP-growth[7] algorithm.

Vadivel et al. [11] proposed modified Compact Pattern Tree. In this approach the entire database is scanned once in order to construct the tree and rearrange the tree based on sorted items list.

In contrast to all the above methods discussed, our proposed approach Parallel Computing of Compact Pattern Trees build periodic knowledge and discover seasonal trends from the periodic knowledge to focus on business and decision perspectives is the extension of the work [12]. The proposed method is described in the next section.



III. PROPOSED ApPROACH (PARALLEL CONSTRUCTION OF COMPACT PATTERN TREES)  In this paper we modify the proposed parallel algorithm by Tanbeer et al. [6] in order to obtain periodic knowledge for databases having timestamp information and to discover the patterns within the same time or among different time sequences.

Consider the transactional database shown in Table 1. A set of time series in the database indicate the transaction records from first week to last week in the month. In the following, we use the time-variant transactions for illustrations.

In this application, we would like to mine the transaction database for a periodic knowledge. Considering TIDs as monthly transactions and each window as week logs and mining the rules for that particular log in order to obtain knowledge for time series analysis.

The following is the procedure for Parallel Compact Pattern Tree to discover periodic knowledge.

Step 1: Based on the application, database is split into required time intervals (like monthly transactions, weekly transactions etc. , )  by preprocessing using the timestamp information provided. This process of splitting database is called sharding [8], this division of data is nothing but fragmenting the dataset.

Step 2: All fragments are parallelly deployed to different processors.

Step 3(i): Each processor parallelly constructs Transaction Tree (TT) for fragment dataset by maintaining item list occurrences (TL). Parallel Processing can occur on a multiprocessor computer or on a network of workstations or PCs.

Step 3(ii): Sorting TL in frequency descending order and maintaining as item sorted list (TS).

Step 3(iii): Based on TS, restructure the TT and maintain as Restructured Tree (RT).

Step 3(iv): Each processor is having local TT for fragmented dataset .

Step 3(v): Then the mining process is carried out on temporal database (fragmented dataset) by applying the algorithm FP? Growth [7], then the frequent patterns are generated by satisfying the predefined minimwn support to each fragmented dataset. Temporal Association rules are generated by satisfying the predefined minimwn confidence.

From Step 3(i) to 3(v) the process executes parallelly in different processors (control parallelism). Each processor generates CPTree in order to derive the periodic knowledge for fragmented dataset such as weekly transaction.

The Transaction Tree and Restructure Tree construction are carried out using the OpenMP (Multi-processing tool) mechanism.

A. Illustrations o/Construction and Restructure o/CPTree  Compact Pattern Tree [9] requires only one scan.

Asswning Table I as monthly transactional database and treating each 'Pi' (generated by applying the algorithm D) as weekly transactions below are the illustrations shown in figures. All four windows database executes independently in different processors parallelly. We can obtain periodic knowledge parallelly at the same time. Considering PI as first week timestamp dataset the construction and restructuring of Compact Pattern Tree is followed based on the algorithms E and F are shown in Figures 1 and 2 along with TL and TS. The same procedure executes independently for each window in each processor at the same time. The resultant CPTrees are generated by applying the algorithm A.

TABLET.

Database  SAMPLE TRANSACTION DATABASE USED IN THE EXPERIMENT  Date TID Item set t, {a,b,d,g,e,c}  t2 {c,a,e}  t3 {d,f,b,a,e} 1 st t4 {b,d,f}  PI Week t5 {a}  t6 {a,b,d}  t7 {d,a,b}  ts {b,d,e}  nd t9 {a,c,b}  P2 Week tlO {f}  til {c,b,a,e}  t'2 {g} 3rd t13 {a,b,c}  P3 Week t'4 {f,e}  tiS {a,b,c}  t'6 {b,d,e}  t17 {b,d,e}  tiS {c,a,e} P4 4th t'9 {b,d,f}  Week t20 {a,b,d}     a: 3  b: 2  I d: 2  {}  e: I  d: 2  a .?: 1  hi, J, I  a: I  I e: I  Figure 1. First week Transactional Tree  TL  a:6  b:6  d:6  g:I  e:4  c:2  f:2  Figures I and 2 are the Transactional and Restructure Tree of PI partition. The trees are generated and shown only for PI partition. Similarly, the construction and restructuring of the trees have to be done for other partitions such as P2, P3 and P4.

B. Periodic Knowledge Our approach is different from Tanbeer et al. [9] approach.

Tanbeer proposed by dividing the whole database into partitions and constructing the tree in each site by maintaining header table list. Combining all the header table list and sorting in frequency descending order and named as HT A.

With the help ofHTA restructuring takes place parallelly.

Based on Tanbeer's approach, we can derive only the global frequent patterns. Business process requires several layers of knowledge description such as trends of purchasing (like weekly, monthly etc.,) so the developed framework is useful in such scenarios to derive knowledge suitable to user requirements. Further the proposed method is also useful to derive global frequent patterns and the additional data of subsequent periods (months) can be added to the respective processors. The incremental rule discovery method can also be employed for updating periodic knowledge.

From Figure 2 the periodic knowledge can be derived by applying the algorithm FP-Growth [7]. Similarly, from the remaining partitions of restructured tree one can derive periodic knowledge. The frequent patterns are generated by satisfying the predefined minimum support to each fragment dataset.

Temporal Association rules are generated by satisfying the predefined minimum confidence.

{} a?.2  b:0: 1 I I I  d: 2  d: 4 c:l A  I f: I e: 1  e: 2  C ?:l I  g: 1  TS  a:6  b:6  d:6  e:4  c:2  f:2  g:I  Figure 2. First week Restructured Tree according to TS of Fig. 1  C. An Algorithmfor Parallel Compact Pattern Tree Input: Transactional Database(D) Output: TR"TR2,TR3 ........................ TRn Method:  (1) [WD"WD2, .......... WDn]= Shard(D) (2) Invoke in parallel for i= I to n (3) do  a. TTj= TransactionTree(WDD b. TRj= Restructure Tree(TTj)  (4) done  D. An Algorithm for Sharding  Input: Transactional Database(D) Output: WD"WD2, . ? . ? . .  WDn Method:  Divide D into various 'n' timestamps as WD, to WDn.

E. An Algorithm for Constructing Transactional Tree Input: WD: Periodic Data  N: Number of transactions in WD Output:TT: Transactional Tree  TS: Item Sorted List  Method: (1) Create the root of a TT and label it as "null" (2) Read WD, N and set i=l (3) Create the root 'r' of the tree T and label it as  "null" (4) while (j<=N) { (5) Scan the transaction tj once     (6) Let the transaction be [piP], where p is the first element and P is the remaining elements in the transaction, then call construct_tree ([p/P],r)  (7) j=j+ I } (8) Find occurrences of each item in the tree and arrange  each item based on occurrence such as TL. The arranged items TL are sorted in TS.

Function construct tree Input: [piP]: p current element of a transaction,  P:Remaining portion of transaction T: Current node of the Tree.

Method: (1) If T has a child C such that  C.item name= P.item name - - (2) then increment count by 1.

(3) If length of P>O and P is [q/Q] (4) then  construct_tree ([ q/Q],C) (5) else  Attach[p/P] as the child branch of T  F. An Algorithm for Restructuring Transactional Tree Input:TT: Transactional Tree  TS: Item Sorted List Output:TR: Compact Pattern Tree  Method: (1) (2)  (3)  For each branch bi in TT do  a.

b.

c.

done  Remove the branch bi from TT Sort the nodes according to TS Insert sorted bi into TR  TABLE II. THE FOLLOWING TABLE SHOWS THE MINING TIME WITH SINGLE AND MULTIPLE PROCESSORS  *ms - milliseconds * S-Single Processor *P-Number of Processors  Transact Restruct Mining Total time(*ms) Transactio ion Tree ure Time(*ms)  nal Time(*m Time(*m Database s) s)  (D)  *S *P *S *P *S *P *S *P  400 15 10 26 14 64 55 105 79  800 21 12 40 16 66 61 127 89  1000 22 14 42 22 67 63 131 99  2000 26 19 51 24 76 72 153 liS

IV. EXPERIMENTATION AND ANALYSIS  The implementation of the existing and proposed algorithms is done using Java Programming Lanaguage. The construction of Transactional Tree and Restructure Tree are carried out using the OpenMP (Multi-processing tool) mechanism. Tests are performed using different size datasets.

Different libraries like JOMP and Xstream Libraries are used.

Performance is evaluated using MushRoom Data Set and synthetic dataset by assuming the temporal field as timestamp and the data is converted into transactional database suitable to our experiments. Table II. describes the experimental results by using number of processors. Figure 3 shows the execution time of Parallel Compact Pattern Tree.

'E 250 " g  ......

200 " Vi , ----Sequential <II  E '1:1 150 ? c Implement :;::; 0 c u 100 ation 0 <II III :;::; 50 u  - Parallel I1l ...

.... 0 Implement x w  c:::>1\) c:::>1\) ?I\) ?I\) ation ? CO -$S "'c::s  Number of Transactions  Figure 3. Execution time for Temporal Compact Pattern Tree  Dotted lines indicates number of transactions that are executed in single processor environment. Straight line indicates number of transactions that are executed in parallel environment.



V. CONCLUSION  By this periodic knowledge extraction system in the category of temporal association rule mining one can have rules for predefinedl spell-out time zones. The rules can be further abstracted by updating rules pertaining to a particular period like day-wise (Monday, Tuesday, Wednesday and so) and week-wise (first week, second week so on) and month? wise (January, February, March and so on). Thus the proposed method supports for periodic knowledge and even long term knowledge.

