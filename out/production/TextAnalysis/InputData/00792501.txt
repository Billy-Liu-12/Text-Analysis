

ABSTRACT This paper describes the use of a simulated real time system of a feed-forward neural network, a recurrent neural network and a set of expert rules in solving the problem of Multiple Target Tracking. It is assumed that data is provided in the from of blips, taken off 3 consecutive focal plane arrays, operating at visible or infrared wavelengths. In this paper, the task of multiple target tracking is transformed from one of blip- frame data association to one of target clustering, which in turn is broken down and solved in four stages.

Each stage is described and mapped with the use of a feed-forward, a recurrent neural network or a set of fuzzy rules. The first and second stages of the solution procedure involve the use of two feed-forward neural network modules, while the third and forth stages use a recurrent neural network module and a set of expert rules module. The Multiple Target Tracking solution procedure is simulated through use of a FORTRAN Code. In principle the number of targets that can be tracked with the routine is unlimited. However, in reality, the number of targets is dictated by the number of neurons, which in turn is constrained by hardware requirements. Software simulation results shows that the Multiple Target Tracking code is capable of tracking an arbitrary number of targets very efficiently. The program was tested and debugged for use in the tracking of sets of multiple targets; ranging from 2 to 14. Results indicated that once the average acceleration of the targets is adequately evaluated, track files could be developed with 100% accuracy.

INTRODUCTION Air and Missile Defense, and Battlefield Awareness face unprecedented challenges in target detection and tracking. Traditional single-sensor systems experience unacceptable performance degradation when dealing with multiple targets in the highly mobile environment in which today's forces must operate. New developments in multiple sensor data fusion are addressing many of these issues and advanced techniques, such as pre-detection tracking, context-sensitive data association and tracking, adaptive data fusion and tightly-coupled fusion and sensor management, are under development.

Fig. 1. A Typical Multiple Target Problem [ 1-31,  0-7803-5489-3/99/$10.00 01999 IEEE.

One of the key functions performed by a surveillance system is to keep track of all targets of interest within the coverage region of its sensors. For military surveillance systems, the coverage region generally involves several thousand cubic miles containing several hundred targets. The sensors available for use in these surveillance systems operate at visible or infrared wavelengths, and cannot provide perfect information about all targets. In general, sensor measurements of targets tend to be ambiguous, (lack of knowledge as to which target was reported), incorrect (reports of false targets), and imprecise (random errors in the measurements) [4]. A typical multiple target-tracking scenario of interest to our defense forces is illustrated in Figure 1.

A BRIEF REVIEW OF MULTIPLE TARGET TRACKING RESEARCH Multiple target tracking (MTT) is an essential requirement for surveillance systems employing one or more sensors together with computer subsystems in order to interpret an environment that includes both true targets and false alarms. The objective of MTT [ 1-61 is to partition the sensor data into sets of observations or tracks produced by the same source. The crux of MTT is to carry out data association process of measurements whose origin is uncertain due to one or all of the following reasons:  random false alarms in the detection process; clutter due to spurious reflectors or radiators near the target of interest;  decoys or other counter measures.

Nearest Neighbor (NN) method, which is computationally efficient but unreliable for tracking targets in a highly cluttered environment.

Joint Probabilistic Data association (JPDA), which has i1:s own shortcomings. In tracking closely spaced targets, JPDA delivers poor performance because of the persistent interference from neighboring targets. Also, when the problem size increases, the required computation increases exponentially.

Multiple Hypotheses Tracking (MHT), which is a multiple scan method and both the memory and computation requirement of which increase exponentially with problem size.

At the Center of Aerospace Research at North Carolina A&T State University research in MTT has been focused on the NN method. Sensor data is provided in the form of blips, taken off three consecutive focal plane arrays, operating at visible or infrared wavelengths. A typical RF-communication unit capable of providing the required data and currently used to characterize sea and surface targets, is illustrated in Figure 2. Our goal is to develop an algorithm that simultaneously traces the paths described by multiple targets in  i.

ii.

111. interfering targets; iv.

i.

ii.

...

The three basic methods for data association are as follows [l-SI:  iii.

Fig. 2. A typical RF-communication unit used to characterize sea and surface targets.

n  real time as they traverse a given domain. The algorithm of interest to this study involves the use of the following paradigms; a feed-forward neural network, a recurrent neural network, and a set of fuzzy rules.

An interesting advantage of this algorithm is the fact that it can be configured on Digital Signal Processors and used in real time applications.

Xfl yll  REAL-TIME MULTIPLE TARGET TRACKING In a multiple target environment surveillance systems are faced with the prospect of identifying and tracking individual targets, based on models developed from sensor reports and target kinematics. The best choice of target and sensor models will depend on specified missions or applications. Nevertheless, regardless of the choice of sensors and target models, the bottom line capability of any reasonable multiple target tracking algorithm is its ability to trace the appropriate location of all objects of interest over specified time intervals.

In general, a simplification of the problem of multiple target tracking can be described as shown in Figure 1.

Over time, target indications move across the field of view of the sensor, and it is required the targets be clustered by their location. To accomplish this task, any multiple target-tracking algorithm must identify, discriminate and locate all targets of interest at specified time instances. However, sensors can only provide focal plane array data of ambiguous targets or blips, i.e., the lack of specific knowledge as to which target was reported, at discreet time intervals. In this analysis, it is also assumed that information on the target location (x, y, z) and target speed with a time resolution of 1/50 second. Available systems 11-41, as illustrated in Figures 1 and 2, capable of delivering these requirements are available off the shelf.

Moreover, the surveillance system illustrated in Figure 2 can deliver information on target length, shape, speed, internal motion, sea spectrum and estimated weight. The most common sensors of this type are focal plane arrays, operating at visible or infrared wavelengths. In this paper, it is assumed that each target will be tracked in a 256x256 focal plane array, which can be represented by the Cartesian system of coordinates in the form of blips. A proposed field of view, which includes hardware assembly and data frame, is illustrated in Figure 3.

Fig. 3. Illustration of Observation Domain.

The type of preprocessing that is necessary depends greatly on whether the input blip data is already ordered in some fashion. Typical focal plane imagers come out in row scan order. In this paper it is assumed that blip data is extracted and labeled from each pixel, based on the rule of fixed row with varying columns.

Only the pixels containing objects are labeled. Results of the blip/frame data extraction using this method are illustrated in Table 1.

Table 1: Typical Ambiguous Data Clusters  Blip Label I Blip x Location I Blip y Location I    3 20  DATA PROCESSING DURING MULTIPLE TARGET TRACKING The task of real time multiple target tracking is equivalent to the re-organization of the input blip/frame data into track files. The mapping of input to output is based on the use of three very important mathematical paradigms, namely, the feed-forward neural network, the recurrent neural networks, and a set of fuzzy rules.

The uses of these paradigms in the multiple target tracking algorithm presented herein is described in the following five sub-sections. The mapping of the input data to track files, and the details of the mapping process are illustrated in Figure 4.

- Fig. 4. The three stages of input to output MTT data mapping.

Elementary Data Unit for Multiple Target Tracking The algorithm described herein is based on 3 frames of data, which is provided by a sensor capable of mapping a two-dimensional image of the observation. No depth information is needed, only speed and/or acceleration. Figure 5 illustrates a single data plane, and its use with a previous and past neighbors forming a basic unit of three consecutive data frames from which appropriate track files are developed.

Fig. 5. Consecutive arrays of ambiguous targets.

Track files contains information about the targets and their location history. The successhl tracking of a given target specified by the i" blip in frame', involves the identification of two corresponding blips located in frame' and frame3 respectively. When i" blip in frame' combines with the identified blips in frame' and frame3 the result is the most likely path of the target for the duration of time, t-dt, through time, t+dt.

Notation Convention for the Multiple Target Tracking Process In figure 5, and through out this paper a convention on the use the indices i, j ,  and k is adopted. The indices i, j ,  and k are such, that, i, i = 1, NI; represents any blip in frame', at time t-dt; k, k = I ,  N2 represents any blip in frame', at time t; and j ,  j = 1, N3, represents the blips in frame3, at time t+dt. Besides, the indices, i, j , and k carry a special implication when used with the coordinate of a vector. Under the terms of this convention any parameter or variable labeled by the indices, i, j ,  and k, refers to all of the possible combination of the three indices as they vary independently from their minimum to maximum values. As a result any parameter labeled by the indices, i, j ,  and k, refers to a vector of nInpz3 coordinates. A coordinate of the vector described by the indices, i, j ,  and k, will be described by the expression, Pn,;iik, where the index m varies from 1 through nlnln3.

The notations adopted in this analysis are outlined as follows: Convention # 1: PVk = vector of nln~n3 coordinates Convention # 2:  P,,ijk= mth coordinate of vector Pi,k  Acceleration and Probability Mapping with Feed-Forward Neural Networks In this analysis it is assumed that the time interval between frames is uniform, and moreover, that the frame rate is high enough so that differentiation can be conducted by finite differences. With these assumption, the velocity vector, V, can be evaluated with any two consecutive frames, using the expression,  v,, = L, - Ll 1.

Vector, L, represents the two dimensional blip coordinates, x and y .  The indices i, j ,  and k represents the appropriate frames in which the coordinates are taken. On the other hand, the acceleration vector, A,, is evaluated with three frames, using the expression,  . .

= vjk -'g = Lk -2L1 -Li  2 .

In the expressions given in equations (1 - 2) ,  the notation convention adopted earlier is used. The acceleration vector, A,, consists of nln2n3 coordinates, each of which is evaluated using one of the possible combinations of the indices, i, j and k. It is of interest to note that the vectors, L, V and A, are described by 1,2, and 3, subscripts, respectively. This fact indicates that whereas, the velocity vector can be described by only 2 frames, the acceleration vector must be described with the use of 3 frames.

Since this analysis deals with the 'angle-only' or the two dimensional model for target tracking, the acceleration vector, A, has two components, one along each axis in the Cartesian system of coordinates. As a result, the evaluation of the acceleration vector, Aijk, can be conducted with the aid of two feed-forward neural network modules, as follows  Parameters, axijk and ayijk, represent the components of the acceleration vector. Equation (3) can be evaluated with the use of a single feed-forward neural networks. However, for real time on board analysis, two neural networks module are recommended.

Probability Mapping with Feed-Forward Neural Networks The kinetic model used in this analysis is based on the acceleration association probability. Having a priori determined a mean acceleration value, A, for the targets of interest, the normal probability density function for the acceleration vector gives,     The vector P will be referred to as the acceleration association probability vector. Again, in expression (4), the notation convention adopted earlier is used. The acceleration association probability vector P, consists of n1n2n3 coordinates P,$, each of which is evaluated using one of the possible combinations of the indices, i, j and k. Evaluating the acceleration association probability coordinates can be accomplished real time with the aid of a feed-forward neural network module.

Track Association using Recurrent Neural Networks The recurrent neural network is merely a single layer feed-forward network with feedback connections of the network output channels bridging its input channels. The dynamics of the recurrent network is equivalent to the evaluation of an equation of the type, described by the following equation:  5.

where the variables; wln1 represents the network weights, P,l,ijk the input acceleration probabilities, tsgk the track association vector and the function, g, represents the nonlinear activation or threshold function used in this analysis. Once again, the notation convention adopted earlier is used in equation (5). In this report the threshold function takes the form of a piecewise linear sigmoid function.

'  The very first thing to be defined when using the recurrent neural network is the network weights. Typically, the network weights are determined by differentiating the network energy, E, or cost function with respects to the acceleration association probability. The shape and state of this energy function is determined by the network initial input and the interconnection constraints and strengths of its, neurons, as follows:  6 .

Here t i jk  represents the tracks, pijk defines the probability of the ijk track, 6, is the Kronecker Delta function, a and p are the optimization parameters and X is the Exclusive OR function. The Exclusive OR function, X, is defined as follows  1; if x , z = l ,  y # l y , z = l ,  X # l  X(X,YJ)  = { 1 7.

lo; otherwise  When equation (7) is twice differentiated with respect to t,,,;c the appriopriate weights to the recurrent neural network is found in the form,  8.

The range of values for p used in this analysis is: 0 < p < 0. 50. Once activated the network converges toward a minimum of the energy function in which some neurons are on and others are off. The set of neurons that are on at convergence represents the group of tracks that are part of a final solution. Within the context of the multiple target tracking problem, the network weights also enforces the constraints of having one corresponding blip per frame per track.

Association Probabilities to Track Files Mapping Once activated the recurrent neural network converges toward a minimum of the energy function, E, in which some neurons are on and others are off. The set of neurons that are on at convergence represents the     group of tracks that are part of a final solution. At convergence the track vector, t y k ,  of nlnzn3 coordinates will have values clustered around the values of zero and one. Only the coordinates with values that are clustered in the upper range are of interest. The next step in the evaluation process is to identify the coordinates with values that are clustered in the region of unity and represents these tracks in terms of targets located in frames 1,2, and 3.

TECHNICAL RESULTS When properly initiated the simulated real time multiple target tracking accepts data in the form of 3 consecutive blip-frame data sets. The data is processed and track files are developed. A FORTRAN Code was developed to simulated the functions of the two feed-forward neural networks, the recurrent neural network and the set of expert rules modules. The code for multiple target tracking is program according to the flow chart illustrated in Figure 4. Results from observing the tracking algorithm at work with four objects on a 256x256 focal array plane over 30 frames are illustrated in Figures 6. As indicated by these results the multiple target-tracking algorithm is capable of tracing very complex movements, even when there are crossover in motions.

0 50 100 150 200 250  Fig. 6.  Results from tracking four targets.

In principle the number of targets that can be tracked with this algorithm is unlimited. However, in reality, the number of targets is dictated by the number of neurons, which in turn is constrained by hardware requirements. Software simulation results showed that the MTT algorithm is capable of tracking an arbitrary number of targets very efficiently. The program was tested and debugged for use in the tracking of sets of multiple targets; ranging from 3 to 14. Preliminary results indicated that once the average acceleration of the targets is adequately evaluated, track files can be developed with 100% accuracy.

