

On one hand, design technologies provide solution principles to deliver product functions; on the other hand, they play a major role in achieving efficiency and effectiveness in product design and production. Recognizing this importance of technologies in product development and in response to the lack of investigation, this study proposes an approach based on association rule mining to identify mapping relationships between functions and technologies.

Such mapping relationships not only help firms effectively decide on technologies and the corresponding details but also enable them to reuse proven knowledge about functions and technologies. A case study of microlithography machines is reported to demonstrate how the proposed approach identifies mapping relationships from given function and technology data and how these relationships help select technologies and determine details.

Keywords ? Association rule mining, product  development, generic rules, technology selection

I.  INTRODUCTION  In product development, design technologies deliver product functions by providing solution principles and determine the design of products and their components [1]. In practice, it is not uncommon that multiple technology alternatives with different solution principles can deliver the exactly same function. From these alternatives, manufacturing firms select one (or one set of) technology for carrying out the subsequent development activities (e.g., designing physical components). These technology alternatives lead to very different product and component design, incurring different degrees of design and production complexity and cost. Therefore, decision making in technology selection plays a major role in achieving efficiency and effectiveness in downstream development activities, and in particular design and production. In this regard, technology selection and the corresponding detail determination suggests itself to be a key in product development [2].

To survive, today?s firm strive to quickly develop families of customized products while using the available design and manufacturing capabilities. As stated in [e.g., 3, 4], most of the reported studies on product family development are centered on two issues: 1) the design of physical components and their relationships and 2) the articulation of customer needs and the subsequent transformation of these needs to the required functions.

Moreover, these studies assume design technologies pre- determined, thus not addressing technology selection and  the determination of technology details (e.g., technology attributes, attribute values).

In accordance with various individualized customer requirements, there are large volumes of function and technology data existing in firms? databases and file systems. However, these data is not well organized in the way that can facilitate existing data management and new product design, resulting in ?data rich while knowledge poor? [5]. On the other hand, reusing knowledge from historical data suggests itself as a natural technique to facilitate solving problems. As a data mining technique, association rule mining lends itself to gaining knowledge from historical data, that is, to reveal previously unknown yet useful patterns of product family development [ 6, 7].

In response to the lack of studies and in view of the importance of design technologies in developing products, this study applies association rule mining technique to identify mapping relationships (i.e., knowledge) between functions and technologies, in attempting to assist technology selection and detail determination while leveraging upon existing design expertise and production competence in product family development.



II.  PROBLEM FORMULATION  Definition 1: A function family (i.e., a group of functions), fF , consists of all specific functions that comprise the offerings of a product family. In line with the theory of function decomposition [8], specific functions featuring product variants can be organized at different levels of the respective function hierarchies.

Definition 2: A generic function structure, fG , exists in an fF  and is assumed by specific functions pertaining to product variants.

As with a generic product structure representing the physical view of a product family, a fG  underpins an  fF  in relation to a product family. It consists of a set ? of n generic functions, ? ?  nf F?? , and a set ?  of generic  relationships among generic functions, ? ? nnij  R ?  ?? . A  generic relationship, ijR , exists between two generic  functions: iF and jF , i.e., jiij FFR ,? .

Definition 3: A generic function, F , represents a set of specific functions (or function variants) of the same type: ? ?nifF *? . In this regard, an F , de facto, represents  Identifying Mapping Relationships between Functions and Technologies: an Approach based on Association Rule Mining     Linda L. Zhang1 and Roger J. Jiao2 Department of Management, IESEG School of Management, Lille, France  The G.W. Woodruff School of Mechanical Engineering, Georgia Institute of Technology, Atlanta, USA (l.zhang@ieseg.fr; jianxin.jiao@me.gatech.edu)       a family of function variants of a same type. It is characterized by a number of properties.

Definition 4: A function variant, *f , is defined by a set of property and value pairs, ? ? vustpvf ?? ** , where u represents the total number of properties that characterize the function variant and v denotes the total number of values that can be assumed by the s-th property.

Accordingly, function variants of the same type differ from one another in specific property values. In addition, specific relationships between function variants of different types form generic relationships between the corresponding generic functions.

Definition 5: A technology family, tF , includes all technologies that can deliver the function family in relation to a product family. In the light of function similarities, similarities exist among technologies in the corresponding technology family.

Definition 6: In accordance with technology similarities and the generic function structure, a generic technology structure, tG , can be organized to represent the corresponding technology family. It includes specific technologies, which are adopted to deliver function variants in the corresponding function family.

A tG  consists of a set ?  of generic technologies,  ? ?mtT?? , and a set 	  of generic relationships, ? ?  mmij ?  ?	 . A generic relationship, ij , exists between  two generic technologies: iT and jT , i.e., jiij TT ,? .

Definition 7: A generic technology, T , represents a set of specific technologies (or technology variants) of the same type, i.e., ? ?nitT *? . Similarly, it represents a family of technologies of a specific type. A T  is characterized by the technology type, attributes, tools, and materials. In practice, a tool is a supporting device for implementing or testing a technology. It can be a physical one, software or the combination of both. A material is the fundamental material for applying a technology.

Definition 8: A technology variant, *t , contributes to the delivery of a function variant *f . It is defined by the technology type (? ), a set of technology attribute values (? ?  nmxy av  ? * ), and the specific tool ( L ) and material ( M ),  i.e., ? ? MLavt nmxy  ,,, ** ?  ? ? , where m represents the total number of attributes that characterize the technology variant and n denotes the total number of values that can be assumed by the x-th attribute.

Technology variants of the same type differ from one another in specific attribute values, tools, and materials.

The meaningful combination of technology variants of different types can deliver function variants featuring a product variant and further determines the product design.

The specific relationships between technology variants of different types form the generic relationships between the corresponding generic technologies.

Definition 9: The mapping relationship between an *f  and *t  is defined as a tuple, ? **, tf? . In accordance  with classification of all *f  and all *t  as the corresponding generic function F  and generic technology T , ? TF,?  exists between F  and T . In this regard, the mapping between instances of F  and T entails the instantiation of the generic mapping ? TF,? with respect to the specific function property values.



III.  MAPPING RELATIONSHIP MINING  A. Association Rule Mining  Among the reported mining algorithms, this study adopts the Apriori algorithm [9, 10] due to its efficiency.

This algorithm involves two steps. First, it finds all large itemsets, i.e., sets of items that have transaction support no less than the pre-defined minimum support.

Subsequently, it generates association rules from these identified itemsets. Rule generation is influenced by the specification of a minimum confidence. Note, a support level (s%) and a confidence level (c%) are two measures in association rule mining. The support of a rule is the percentage of transactions, which contain the two sets of items in the rule?s condition and consequence, among all transactions in the transaction database (TDB). The confidence of a rule is the percentage of transactions, which contain the set of items in the rule?s consequence, among those containing the set of items in its precedence.

See more in [6].

In traditional association rule mining, a TDB contains items that all belong to one single domain. In the context of mining association rules (i.e., mapping relationships) between functions and technologies, transaction data exists in both the function and technology domains besides interrelations within each individual domain. In other words, the TDB comprises two types of items,  **,~ tfTDB , where *f  and *t  denote the itemsets of function and technology data, respectively.

In the fG , functions can be of either a basic or composite type. While a composite function is formed by more than one child function, a basic function cannot be decomposed further and is located at the lowest level of a branch of the hierarchy. Mining mapping relationships between functions and technologies is thus carried out for these two general types of functions: basic and composite functions. Every transaction, Z, in the TDB of a function family corresponds to a particular function variant, be it a basic type or a composite type. Each basic function is defined by specific values of the characterizing properties.

Based on these specific property values, corresponding technology details are determined in the technology domain. A composite function is formed by several child functions of basic types and/or composite types, which influence the determination of technology details. (Note, associated with a TDB, a function family is the group of     function variants of a specific type, instead of all functions comprising the offerings of a product family.)  B.  Itemset for Basic Functions  For a given TDB of a basic function family A  with n variants, each Z is related to a function variant *ia . The total number of transactions in the TDB is thus the same as that of basic function variants in the family, n. The function-related items in a iZ  are described as a list of property value pairs,  ? ? ? ? vustnii pvaZ ?? ** ~  (1)     where *stpv  represents the t-th value instance of the s-th property assumed by *ia ; u is the total number of properties in the basic function family; and v is the total number of possible values to be assumed by all variants in the family with respect to the s-th property, nv ? .

In practice, a basic function is usually delivered by more than one technology. Each technology is implemented based on a certain material and tested using a certain tool. It is defined by a set of attribute value pairs.

Thus, technology data associated with a basic function include the type (? ), tool ( L ), material ( M ), and a set of attribute value pairs ( ? ?  nmxy av  ? * ). Such technology-  related elements of iZ  in the TDB are formulated as  ? ? ? ? ? ?? ? qnmxybbbqbnii  avLMtaZ ?  ?? *** ,,,~ ?  (2) where q is the total number of technologies for delivering  * ia .

C.  Itemset for Composite Functions  A composite function contains more than one child function and is delivered by all technologies contributing to the delivery of these child functions. Composite function variants ? ?mib*  of a family B differ from one another in property values. In turn, property value differences lead to differences in child functions and in technologies as well.

If a iZ  in a TDB of B  corresponds to a specific composite function variant, the total number of Z in the TDB equals to that of composite function variants in the family. The function-related items of each iZ  is related to the child functions of the corresponding *ib  as follows:  ? ? ? ? nmijmii  bbZ ?  ? ** ~  (3)   (3),  where n is the total number of child functions of *ib .

A composite function is jointly delivered by several technologies, which contribute to the delivery of its child functions. in this regard, the technology-related elements of iZ  are formulated similar as these of a basic function:  ? ? ? ? ? ?? ? lpo  efccclmii avLMbZ ??? **  c * ,,,t~ ?  (4)  where l is the total number of technologies for delivering * ib ; o is total number of attributes featuring the c-th  technology; and p is the total number of values that can be assumed by the e-th attribute of the c-th technology.



VI.  MAPPING RELATIONSHIP MINING PROCEDURE   D. Organization of Function and Technology  Data  Mining mapping rules starts with organizing the large volumes of function and technology data existing in firms? databases and file systems. To ensure rule mining efficiency and effectiveness, such data organization is geared towards a product family, instead of more than one product family.

For each product variant of a chosen family, all functions are identified first. Also identified are connections between these functions and the corresponding product items. Subsequently, based on the identified connections and hierarchical product structures, functions are organized into a hierarchy, as shown in Step (1) in the process of data organization and transaction database preparation in Fig. 1. The detailed function data pertaining to each product item is then organized in function data tables, as shown in Step (2). Each data record contains the function?s name, ID, description, property values, and the corresponding product item. In a similar way, technologies associated with each product variant are identified and organized into a hierarchy, as shown in Step (3); technology details are organized as technology data tables, as shown in Step (4). Each technology data record includes the technology?s name, ID, description, type, material, tool, attribute values, and the corresponding product items. Based on the same product items that appear in both function data tables and technology data tables, the transaction database is formed, as shown in Step (5).

Hierarchies of func variants  Function Data Table Technology Data Table  Product development databases/File systems  * if *  2f *  3f *  4f  Function ID Description Property value pairs xx xxx  xx xxx  xx xxx  xx xxx  ? ? ?  * 1f *  2f *  3f  * 4f ?  * 1n  *  * 11 pv,,pv,pv ?  *  *  * 11 pv,pv,pv  * 4n  *  * 16 pv,,pv,pv ?  *  * 33 pv,pv  Item * 1i * 2i * 3i  * 4i ?  Tech. ID Descrip. Attribute value pairs xx xxx  xx xxx  xx xxx  xx xxx  ? ? ?  * 1t * 2t * 3t  * 4t ?  * 1n  *  * 11 av,,av,av ?  *  *  * 11 av,av,av  * 4n  *  * 16 av,,av,av ?  *  * 33 av,av  Item * 1i * 2i * 3i  * 4i ?  Type  1? 2? 3?  4? ?  Matl  1M 2M 3M  4M ?  Tool  1L 2L 3L  4L ?  Transaction DB * it * 2t * 3t * 4t     45 5  * 1f  * 2f *4f  * 3f *5f  * 6f *8f  * 7f *9f  * 10f  * 1t  * 2t *4t  * 3t *5t  * 6t *8t  * 7t *9t  * 10t  Hierarchies of tech variants   Fig. 1.  Data organization and transaction database preparation.

E. Rule Mining for Basic and Composite Functions  Given function-related data in the form of basic functions, ? ?nia* , or composite functions, ? ?mib* , the TDB consists of two set of records, ? ? vustpvX ?? * and       ? ? ? ? ? ? ? ?? ? ryxoprjrjrj  avLMY ?  ???? ? , where r is the  total number of records in technology data tables. To calculate s% and c%, ? YXCount ?  is introduced to indicate the number of transactions in the TDB that contain records from both X and Y, ? TDBCount  the total number of transactions in the TDB, and ? XCount  the number of transactions in the TDB that contain all the records in X. A mapping relationship hence means that the occurrence of certain property values of functions is correlated to the occurrence of certain attribute values of technologies with s% support and c% confidence.

F. Generalization of Mapping Relationships  The mappings discovered above are related to specific function and technology variants. Such concrete and low level associations cannot explain variety mapping at a family (or class) level. It is thus necessary to generalize individual relationships as generic associations at the class level. Each generic relationship, ? TF,? , relates a generic function, F, to one or more than one generic technology T. The result of rule generalization is a list of generic mapping rules between generic function and technology elements, along with selection conditions for each generic rule and its occurrence frequency. Thus, mapping between functions and technologies is embodied by relationships of both specific and generic functions and technologies. This study develops a procedure to generalize generic mappings between generic functions and generic technologies based on specific ones as follows:  Step 1: List all specific association rules identified from a TDB.

Step 2: In the consequence of a rule, keep the technology types, material types and tool types intact, replace attributes value pairs with attributes.

Step 3: Allocate the rules that have exactly the same consequence into a group, and count the total number of rules in each group.

Step 4: For each basic function group, 4.1. In the condition of a rule, check the function  properties with discrete values; 4.2. Specify the value range (i.e., the lowest value and the highest value) of each such property; 4.3. Replace specific property values with the identified value ranges; 4.4. In the condition of a rule, check the properties having nominal values; (An example of a nominal value is red for the property color.) 4.5. List the set of nominal values for each such property; 4.6.

Replace specific nominal values with the entire set; 4.7. In the condition of a rule, keep these properties, whose values are ranges, intact; 4.8. For these rules that have the exactly same consequence, combine the conditions of these rules as an OR relation and keep the consequence intact to form one unified generic rule; and 4.9. Specify the selection condition for this generic rule based on its instances.

Step 5: For each composite function,  5.1. Check the child function variants in the condition of each rule; 5.2. Replace child function variants with the corresponding generic functions; 5.3. For these rules with the exactly same consequence, combine all conditions of rules using an OR relations (note: the same generic functions are only documented once) and keep the consequence intact to form one unified generic rule; and 5.4. Specify the selection condition for each group according to the instances; and  Step 6: Count the occurrence frequency of each generic rule and compute the percentage of every generic rule against the total number of identified specific rules.



V.  MAPPING RELATIONSHIP DEPLOYMENT FOR  TECHNOLOGY SELECTION  The mapping relationships between functions and technologies lend themselves to a mechanism to accommodate technology selection and detail determination for designing new product variants. Fig. 2 shows the proposed process of selecting technologies and determining details for designing a customized product based on the mapping relationships.

Specific functions Customer requirements  Function hierarchy Existing function family  Generic technologies Mapping relationships(generic/specific)  Specific technologies Existing technology famiy  Technology hierarchy for designing the customized products            Fig. 2.  Technology selection based on mapping relationships.

Based on valid customer requirements and the past product development experience, all product functions that are necessary to satisfy customer requirements are first determined, as shown in Step (1). In accordance with the generic function structure associated with the product family in consideration (shown in Step (2)), the functions can be organized as a hierarchy( in Step (3)). By applying the generic mappings to the above function hierarchy (shown in Step (4)), the generic technologies (i.e., technology types) can be determined (shown in Step (5)).

Further applying the specific mappings (shown in Step (6)) leads to determination of technology details, such as attribute values (shown in Step (7)). In accordance with the generic technology structure underpinning the technology family in relation to the product family (shown in Step (8)), the selected technologies and the details can be organized into a hierarchy for designing the customized product (shown in Step (9)).



VI.  AN APPLICATION CASE      In the case study, we apply the proposed relationship mining approach and deployment to a family of customized microlithography machines from a Dutch company. A microlithography machine (shown in Fig.

3(a)) prints integrated circuit patterns from a reticle onto a wafer through a projection lens. To fulfill this overall function, a number of functions at different levels are necessary. To deliver all these functions and ultimately the overall product function, a number of technologies are utilized. Some of these functions and technologies are shown in Fig. 3(b).

(a) A microlithography machine (b) Examples of functions and technologies  Function examples: ? To provide and condition the light for the  imaging process ? To position the reticle in the imaging process ? To control wafer temperature  Technology examples: ? Wafer handling temperature technolgoy ? Remote temperature sensing technology ? Temperature control system techmology  (a) A microlithography machine (b) Examples of functions and technologies  Function examples: ? To provide and condition the light for the  imaging process ? To position the reticle in the imaging process ? To control wafer temperature  Technology examples: ? Wafer handling temperature technolgoy ? Remote temperature sensing technology ? Temperature control system techmology  Function examples: ? To provide and condition the light for the  imaging process ? To position the reticle in the imaging process ? To control wafer temperature  Technology examples: ? Wafer handling temperature technolgoy ? Remote temperature sensing technology ? Temperature control system techmology   Fig. 3.  A microlithography machine and examples of functions and  technologies.

For illustrative simplicity, a family of variants (35 in total) of function: ?To control wafer temperature? and the relevant technology variants are used to demonstrate the proposed relationship mining approach. ?To control wafer temperature? is a type of basic function characterized by several properties, including the maximum non- uniformity in the wafer, the maximum offset of the air temperature inside the wafer stage compartment with respect to the wafer table, and the maximum offset of the air temperature inside the wafer stage compartment with respect to lens cool water. To deliver this function, three technology types are involved, including temperature control system technology, air conditioning system technology, and remote temperature sensing technology.

Each of these technologies is characterized by their unique attributes. For instance, temperature control system technology is characterized by four attributes, including air temperature, chill plate temperature, air temperature stability, and chill plate temperature stability.

To deliver the 35 function variants, 35 technology variant groups are utilized. Each group includes variants of the above three technology types. The transaction database is established for these 35 function variants and the corresponding technology variant groups. (Note the transaction database is available upon request. Due to the page issue, it is not included in this paper.) For this application, an association rule mining tool, Magnum Opus (http://www.giwebb.com/), is adopted.

Among all, one unique strength of Magnum Opus lies in the fact that it resembles the confidence metric in the Apriori algorithm. All relevant data are extracted from the transaction database and is input as a text file into Magnum Opus. In the search setting, the maximum number of associations is set to be as large as 10000 to thoroughly search possible associations in transaction  databases. Fig. 4 shows the setting of search modes, their metrics, and input windows for records of the transaction database.

Fig. 4.  Mapping relationship mining in Magnum Opus.

The mining results are shown in Fig. 5. A total number of 46 rules are discovered that reveal the relationships between function properties and technology changes. Take Rule 16 as an example. It indicates when the maximum non-uniformity in the wafer is 20mK, the measurement accuracy of the remote temperature sensing technology should be 0.1mK. The number in the parentheses indicates the number of instances that satisfy that rule. By following the proposed rule generalization procedure, generic associations are derived, revealing the relationships between generic function and technology elements.

Fig. 5.  Mapping relationships discovered.

A customized microlithography machine outside the data samples is adopted to test the application of the mapping relationships to select technologies and to determine technology attribute details. Similarly, the function: ?To control wafer temperature? is used as an example to demonstrate the proposed relationship deployment. Based on the customer requirements     pertaining to this customized microlithography machine, the specific variant of this function is determined. The maximum non-uniformity in the wafer of this function variant is 20mK; the maximum offset of the air temperature inside the wafer stage compartment with respect to lens cool water is 30mK; and the maximum offset of the air temperature inside the wafer stage compartment with respect to the wafer table is 30mK.

By following the relationship deployment process in Fig. 2, technologies are selected and technology details are determined, as shown in Table I. The senior design engineers in the case company have confirmed these technology details.

TABLE I.

THE DETAILS OF TECHNOLOGIES THAT DELIVER THE FUNCTION  VARIANT Technology  type Attribute values  Temperature control system  Air temperature (21.5, 22.1) Chill plate temperature (22.5, 23.1) Air temperature stability (greater than 12mK/min) Chill plate temperature stability (greater than 2.4mK/min)  Air conditioning system  Air supply flow (300m3/hour, 450m3/hour) Pressure stability (5mbar/s) Temperature offset with respect to lens cool water (200mK, 300mK) Temperature offset with respect to the wafer table (250mK, 350mK)  Remote temperature  sensing  Sensing type (Vacuum)  Measurement accuracy (0.1mK)

VII.  CONCLUSIONS   This study proposed to identify and construct mapping relationships between functions and technologies and used microlithography machines to demonstrate the applicability of the proposed relationship mining approach and deployment. Organizing function and technology data as mapping relationships helps alleviate data redundancy resulting from the maintenance of a large amount of variant forms of function and technology structures. The mapping relationships between functions and technologies can also assist in making decisions about the selection of appropriate technology details, such as types, materials, tools, and attribute values.

As a starting point, this study explores the feasibility and potential of the Apriori algorithm for identifying the implicit knowledge hidden in large volumes of function and technology data. More sophisticated association rule mining techniques may deserve scrutiny, in particular, in terms of computational efficiency, mining quality, complexity, and other issues. While this study proposes a relationship deployment procedure, it does not touch on the process of technology selection and the influence of proceeding technology selection on the following technology selection. In this regard, another avenue for future research is to develop or adopt suitable tools to model the dynamic process of technology selection.

