Fast Updating Maximal Frequent Itemsets Based On

Abstract?Because of the low efficiency of Maximal Frequent  Itemsets(MFI) updating methods, the MFI's updating methods  were analyzed. A new algorithm UAMFI based on Full Merged  Sorted FP-Tree (FMSFP-Tree) was proposed. By merging the  Sorted FP-Tree and then obtaining the FMSFP-Tree, UAMFI  use  the depth-first method to find and update MFI. Finally, the  algorithm was tested on the mushroom and T15I4D100K  database, and UAMFI's performance  were compared with  Mafia. The experimental results indicate that UAMFI is an efficient algorithm for updating Maximal Frequent Itemsets.

Keywords- Data mining; Association rule; Maximal Frequent  Itemsets; Sorted FP-Tree; Updating

I. INTRODUCTION  Frequent itemsets play an essential role in many data mining tasks that try to find interesting patterns from databases, such as association rules, correlations, sequences, episodes, classifiers, clusters and many more of which the mining of association rules is one of the most popular problems.

Various of the proposed itemset mining algorithms are a variant of Apriori[1] , which employs a bottom-up, breadth- first search that enumerates every single frequent itemset. In many applications with long frequent patterns enumerating all possible 2m -2 subsets of a m length pattern is computationally unfeasible. Thus, there has been recent interest in mining maximal frequent patterns in these "hard" dense databases. As the maximal frequent itemsets (MFI) contains all the frequent itemsets , it is easy to analyze some interesting properties of the database, such as the longest pattern, etc. As a result, the maximal frequent pattern discovering plays an essential role in current research [3, 4, 8-10].

In actual applications, users may adjust the minimum support dynamically to mine MFS which can meet the actual needs. Thus high efficiency algorithm for updating MFS need to be studied in order to maintain and manage the MFS mined.

MFS? updating has two situations: (1) how to update MFS when the database has changed and the minimum support hasn?t changed. There are many algorithms to handle this  problems, such as FUP[5] IUA[6] UMFIA[7]. (2) How to update the MFS when the database does not change but the minimum support has changed. However, algorithms to handle this problem are rarely proposed. In this paper we focused on the MFS updating problems based on data transformation. We use a novel full merged Sorted FP-tree (FMSFP-Tree) to represent sub database containing all relevant frequency  information and with this data structure, our algorithm UAMFI (Update Algorithm for mining Maximal Frequent Itemsets) takes a new updating method to maintain the MFS.

This paper is organized as follows. In section II, we briefly review the MFI mining problems and introduce the related works. Section III gives the MFI updating algorithm, UAMFI, which update MFI based on FMSFP-Tree. In section IV, we compare our algorithm with Mafia [10]. Finally, in section V we give our conclusion.



II. PRELIMINARIES  A. Frequent pattern & Maximal frequent pattern  Let I={i1,i2,?,im}, be a set of different items, and D be a database of transactions, where each transaction T is a set of  items such that T ? I. The number of the transactions in D is denoted by |D|, associated with each transaction is a unique  identifier, called its TID. We call X ? I a pattern (or an itemset). The count of X is the number of transactions in D that contain X, which is labeled as count(X), and let supp(X)  be the percentage of transactions in D that contain X.

Definition 1.Given a transaction database D and a minimum  support threshold s(or the minimum support count ), if  supp(X) s (or count(X) ), we say that X is a frequent  pattern, and we denote the set of all frequent patterns by FI.

The frequent 1-itemset is called frequent itemset for short.

Definition 2.The frequent itemsets list L1 is all the  frequent itemsets in database D and sorted by its support  count. The frequent item sequence list L1  is the L1 numbered from 1.

Example 1. As the database D shown in table 1,with  =  2,the L1 of D is a b c g and e; the corresponding L1  of D  is 1(namely as a) 2(b) 3(c) 4(g) and 5(e).

Definition 3. If X is frequent and no superset of X is  frequent, we say that X is a maximal frequent pattern, and the  sets of all maximal frequent patterns denoted by MFS.

Property 1.Let L1 be a list of all frequent items sorted by their frequency in descending order, and each of the maximal  frequent pattern are made up of the item in L1.

B. Sorted FP-Tree (SFP-Tree)  We introduced a new data structure SFP-Tree to avoid the low efficiency of constructing and creating a number of sub- trees, by investigating the relative article [2, 8,  9].

Definition 4. A Sorted FP-Tree (or SFP-Tree for short) is a tree structure by improving the FP-Tree [2] structure designed for maximal frequent pattern?s storage and search. The structure of SFP-Tree is defined below.

1. It consists of one root labeled as "root", a set of items prefix sub-trees as the children of the root.

2. Each node in the item prefix sub-tree consists of four fields: node-no, count, first-child and brother-link where node- no registers which item this node represents in the frequent item sequence list L1 , count registers the number of transactions represented by the portion of the path reaching this node, first-child registers the node?s first child and brother-link links to the next node in the SFP-Tree carrying the same parent, or null if there is none. The nodes in the brother-link are sorted by their node-no.

Based on this definition, we have the following FP-tree construction algorithm.

Algorithm 1 (SFP-Tree construction)  Input: A transaction database DB and a minimum support count  Output: SFP-Tree  Method: The SFP-Tree is constructed in the following steps.

(1).Scan the DB once. Collect the set of frequent items F and their supports. Sort F in support descending order as L1 .Then get the frequent item sequence list L1 .

(2).Create the root of FP-tree, T, and label it as "root".  For each transaction trans in DB do the following.

Select and sort the frequent items in trans according to the order of L1 and then replace them by their location in L1 . Let the frequent item sequence list in trans be [n|N], where n is the first element and N is the remaining list. Call Create_tree([n|N],T).

The function Create_tree([n|N],T) is performed as follows.

If T.first-child = null, then create a new node P, set its node-no = n,count = 1,and link P to T.first-child; else search  the node Q in  T.first-child P and P.brother-link which  Q.node-no = n, if we find this node ,add it by 1, else create a  new node Q, set its node-no = n, count = 1, and insert Q into  P?s brother-link, make all the node-no in ascending order. If N  is not empty, call Create_tree (N; P) recursively.

Analysis. From the SFP-Tree construction process, we can  see that one needs exactly two scans of the transaction  database D: the first collects the set of frequent items, and the  second constructs the SFP-Tree. The cost of inserting a  transaction trans into the SFP-Tree is O(|trans|), here |trans|  is the number of frequent items in trans. When the SFP-Tree  is finally constructed, each trans ? first element is the root?s  sub-node, these nodes are brothers and linked by brother-  link. All the nodes are in ascending order by their node-no,  and the root only point to the node in the left.

Example 2. For database D in table 1 with = 2, Fig.1 shows the final SFP-Tree of D. Each node in Fig.1 has a section such  as (1:4), the number in front of ": " is node?s node-no, and the  number after ": " is the count. The break-line indicates  brother-link that the nodes are brothers and the real-line  indicates the first-child that the parent is at the top and the  child is on the bottom.

C. FMSFP-Tree  In SFP-Tree, the same itemset may be separated in different  sub-trees, and the support counts of itemset in sub-tree are all  less than . Let?s take the database D shown in table 1 for  example ,the sequence 2 3 4 with support count 2 is a MFI  under  =2, but it distributed in two sub-trees, each itemset has the support count 1,when mining each sub-tree and just use the  theorem 1 to examine the itemset whether is MFI, the MFI 2 3  4 is leaked. So merging strategy was proposed to solve the  problem.

The merging strategy is described as follows: when dealing  with the current node P, first make sure whether P?s sub-tree S  (its parent is P) contains the same nodes in P?s brother-tree T  (the tree that P.brother-link point to). If true, then it can merge,  that is adding S?s node contained in T to T by node level. If  the same node is contained in T at the same level (the T?s level  is 1), then add this node?s count to the node contains in T, otherwise it will insert the node into T using the SFP-Tree?s  construction method.

Example 3. Considering Fig.1,when dealing with the node P (1:4), P?s sub-tree S has a path [2 3 4], as (2:2) contained in  P?s brother-tree T, then the (2:2)?s level is 1 and the node (2:2)  should be inserted into T?s 1 level, in T?s 1 level, there is a  node(2:1) has the same node-no, so node (2:2)?s count is  added to the node (2:1), thus obtain the merging result (2:3).

The node (3:2) is also contained in T, as its parent contained in  T, then the node (3:2)?s level is 2; it should insert into T?s 2nd  level and get the result (3:1)  (3:3). The node (4:1) is inserting into T?s 3rd level and the node in T (4:1)  (4:2).

Another path in S is [3 4], because in T?s 1 st level there is no  node which has the same node-no equal to 3, so it creates a  new node (3:1) and inserts  it into T?s 1st level, (3:1)?s sub-  node (4:1) is inserted into T?s 2nd level as (3:1)?s sub-node.

Figure.1 SFP-Tree according to the D of Table 1  TABLE I. TRANSACTION DATABASE D  TID item Frequent Items t  100 a,b,c,g a,b,c,g 1 2 3 4  200 a,b,c a,b,c 1 2 3  300 a,c,g a,c,g 1 3 4  400 a a 1  500 b,c,e,g b,c,e,g 2 3 4 5 600 e,g g,e 4 5  TABLE II.L1 & L1  L1 L1  1 a  2 b  3 c  4 g  5 e     Finally, the merging result is shown in Fig.2. After handling  all nodes, the final FMSFP-Tree is shown in Fig. 3.

D. Correlative property  FMSFP-Tree is a novel data structure, in has its own  attributes. We can draw a conclusion of such attributes by  surveying FMSFP-Tree?s structure and its construction.

Property 2.  Each item in the database D has appeared in a path of FMSFP-Tree.

Property 3.  In FMSFP-Tree, each path?s count indicate the item it represent  appeared in the database.

Property 4. In FMSFP-Tree, the node?s count declined from top to down. Given a node, its count is greater or equal to the  sum of nodes in its sub-level.

Property 5. In FMSFP-Tree, if we change each node?s node-no into the path which from to this node, then the  FMSFP-Tree will transform into set enumeration tree[11].

Theorem 1. In FMSFP-Tree, we assume the current node N?s first-child is P, if P.count <  (  is the minimum support  count ), then neither count of  N?s sub-node is greater than ,  thus the path from root to current node N is a MFI or MFI?s candidate.

Proof : If the node P which current node N?s first-child points to has a count < , from the Property 3 we can draw the  conclusion that all N?s sub-node has a count less than  ,  which means that all the sub-node is infrequent .Thus the path  from root to current node N is a MFI or MFI?s candidate.

Theorem 2. If the initial minimum support count is 0, then given any support, all the MFS under this support included are  in the FMSFP-Tree.

Proof : When the initial support is 0, then the FMSFP-Tree  contains the entire information of the database . From property 5, the paths in the FMSFP-Tree are the set numeration tree?s value. Because of the set enumeration tree enumerates all the combinations of 1-item, so in any support all the MFS also contained in FMSFP-Tree.



III. UAMFI FOR EFFICIENT MFI UPDATING  Assume the database D retain the same, while the minimum  support has changed. The minimum supports vary from s to s*.

The corresponding frequent item lists are L1 and L1 *, the  maximal frequent sets are MFS and MFS* .

Property 6: Assume D retain the same, if s*<s, then L1 ? L1*, MFS ? MFS*; else if s* >s, then L1 ?  L1*, MFS ? MFS*.

When the minimum support has changed, there are two conditions: s*<s and s* >s. If s = 0 and we constructed the  corresponding FMSFP-Tree. After that, given any s* > 0, there  exists MFS ?  MFS*, from theorem 2 we know that FMSFP- Tree contains all the MFS under s*, so  we just need to use  depth-first strategy  and directly traverse FMSFP-Tree, then  we get the MFS* under s*.

Algorithm 2 UAMFI for efficient MFI mining  Input minimum support count , the FMSFP-Tree  construct under 0 = 0  Output MFS with  1).MFS = CFS = NULL ; //CFS is the candidate set 2).root.count = -1; //set the root?s label  3).call   DFMF (root,CFS );  4).return MFS;  Procedure DFMF (pTree,CFS)  (1)   if (pTree .count = = -1) // pTree is the root  (2) then CFS =  NULL ;  (3) else CFS = CFS  pTree.node-no;  //add current node?s node-no into CFS  (4) exist = true;  //assume there exist MFI  (5)  Current_Pointer = pTree.first-child;  (6)  while (Current_Pointer != NULL)  (7)  { if ( Current_Pointer.count >= )  (8) {  exist = false;  (9)     call DFMF (Current_Pointer,CFS); // recursionly  (10)  }//end if  (11)  Current_Pointer=Current_Pointer.brother-link;  (12) } //end while  (13)  if (exist = = true && CFS ? MFS) (14)   then MFS = MFS CFS;  (15)  end  Example 4 : As  FMSFP-Tree constructed in example 1, given a minimum support count =2,the updating process is  described as follows  When dealing with the path with 1 as pre-fix, the node 1  has two sub-nodes 2 and 3 with count , deal with the node  2 and 3 respectively. When processing pre-fix path 12, node  2?s first-child 3 with a count = 2 , then using depth-first  strategy to deal with the path with pre-fix 1 2, the node (3:2)  has only one sub-node (4:1) with count = 1 < , then from  theorem 1 we known {1 2 3} is a MFI and add it into MFS,  MFS ={{1 2 3}}. Then using the same method deal with the remain node recursively, and finally we obtain the MFS={{1  2 3},{1 3 4},{2 3 4}, {4 5}}.

Figure.2 Merge example  Figure.3   final FMSFP-Tree     Transfer node-no into the element it represented, then  MFS ={{abc},{acg},{bcg},{ge}}.



IV. EXPERIMENTAL RESULTS  All experiments were performed on 2.1G Hz AMD Athlon  64 X2 with 896MB of memory, Windows XP SP2 . There are  fewer studies related to this situation so far, so we compare  UAMFI with Mafia, downloaded from FIMI [12]. The codes  of the two algorithms were complied using Visual C++ 6.0.

We report experimental results on two datasets. The first  one is mushroom downloaded from the Website [13] which has 8124 transactions and 23 kinds of attributes. The second  dataset T15I4D100K is a synthetic and sparse data set. It was  generated from the application of [14]. It has 100,000  transactions. The average transaction length is 15 and the  average pattern length is 4.

Timings in the figures are based on total wall-clock time,  and include all preprocessing costs .The test schemed as  follows  first use Mafia to mine the MFS with a given  support s , then change s and use UAMFI for updating , in  order to compare the performance, run Mafia again with the  new support and compare the run-time with UAMFI .

Fig.4 and 5 display the algorithms? performance in different  minimum support threshold (10~90%).For mushroom,  UAMFI is faster than Mafia (example: in 30%, UAMFI runs  0. 187s, Mafia costs 1.98s).

For T15I4D100K, when the minimum support threshold is  low, UAMFI has to process more traverses to find the MFS  and the runtime is a little longer when the minimum support  threshold is higher. To this dataset, Mafia?s runtime is also  greater than UAFMI (in 30% runs 0.684s, Mafia runs 1.827s).

UAMFI is a high efficient algorithm for MFS updating,  while updating, it only use the FMSFP-Tree which constructed  with =0.Because, when =0, the FMSFP-Tree contained all  the MFS with any support, the MFS with a given support are  distributed in the tree, so it just needs to traverse the tree to  find the MFS* at any given support.

Analysis. Reasons of high efficiency are:1) base on FMSFP-  Tree, it highly compressed the database and contained all the  information of MFS; 2).No need scan the database, directly  mine the MFS on FMSFP-Tree and traverse some paths.



V. CONCLUSIONS  We have proposed a novel data structure, FMSFP-Tree, for  storing the data contains all the information of MFS  compressively, and developed a depth-first algorithm, UAMFI  , for efficient updating MFS in large databases.

We have implemented UAMFI , studied its performance in  comparison with Mafia in large databases. Our performance  study shows that the method updating short and long patterns  both efficiently. It outperforms Mafia.

Theoretic analyses and experimental results indicate this  algorithm has good performance.

