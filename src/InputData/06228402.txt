Reversible Fragile Database Watermarking Technology using Difference Expansion  Based on SVR Prediction

Abstract? In this paper, the proposed scheme detects database tampering by embedding the important characteristics of the original database. The association rule of frequent pattern tree (FP-tree) data mining is utilized to determine the relationship existing among the protected attributes and others in the database. Meanwhile, support vector regression (SVR) is applied to predict each protected attribute value. By applying difference expansion (DE) and the differences between the original and predicted values, the owner can embed the digital watermark in the protected database. If the protected database is distorted, the SVR function can still predict the protected values. Then, an examination of the difference between original protected and predicted values allows for the extraction of the watermark. Data which has been tampered with can be found by comparing the original watermark with the extracted one.

In this paper, FP-tree mining method is used to reduce SVR training time. Moreover, if the database has not been attacked then the proposed method can recover the original attribute values. When we extract watermark from the protected database and if this database has been tampered with, the proposed method can use the extracted watermark to authenticate and locate the tampered tuples. Therefore, the proposed database watermarking method can effectively authenticate the database integrity and protect the database.

Keywords- fragile database watermarking, difference expansion, support vector regression, FP-tree mining

I.  INTRODUCTION People and organizations store digital information in  databases for convenient management. Since this information includes data related to important decisions, protecting the databases from tampering is an important issue.

In recent years, researchers have developed database watermark technology where digital watermark is embedded in databases such that the protected columns in databases will allow for the detection of tampering.

The digital watermark embedded in the database is supposed to ensure and protect the correctness and consistency of the digital decision data stored by using watermark technology in all the columns of the databases.

However, if digital watermark are embedded in the columns, and the values in the columns require modification, the digital decision data may become distorted which would result in incorrect decision data.

In databases, the digital decision data stored do not allow for distortion and the data in the decision databases cannot be modified randomly. Though the current embedded watermark technology can verify the correctness in the columns, it is not able to restore the original digital data.

Thus, in this paper according to SVR technology, a digital watermark is embedded in the digital decision databases. The purpose to protect the digital databases where the databases embedded with digital watermark can be restored during verification.

Agrawal et al. [1] pose new challenges for watermarking by using unique features to represent the relational data.

Whether the database has been tampered with or not can be detected through extracting the embedded digital watermark.

The watermark embedded process can be used to any database relation. However, if the tampering attacks occur to insert new attributes to the database and then the extracted watermark might be incorrect.

Y.Li et al. [7] proposed a database watermarking technique to embed the watermark by establishing an index table of additional information in the database. The watermark is embedded by changing the sequence in the index tables without changing the values of the contents in the data table. Therefore, the content in the database is not influenced and not necessary to modify them after the watermark is embedded. However, since the index values are additional information as regards the contents of the database, the watermark may be wrong or may completely disappear if the index values are deleted or re-established.

To solve the above-mentioned problems, the proposed method filters out the relationships among the protected columns and other columns by using FP-tree data mining [6] to protect the important columns in the digital decision databases. There have been many methods developed for data mining technology, and among which FP-tree data mining has shown high levels of efficiency in practical execution. Therefore, FP-tree technology has become the most common data mining method.  FP-tree data mining technology first counts the number of appearing times of the columns in the major statistic databases. The more times the columns appear, the more important the columns. As regards the selected important columns, a tree structure is established to prevent multiple scanning to save time.

2012 International Symposium on Computer, Consumer and Control  DOI 10.1109/IS3C.2012.179   2012 International Symposium on Computer, Consumer and Control  DOI 10.1109/IS3C.2012.179   2012 International Symposium on Computer, Consumer and Control  DOI 10.1109/IS3C.2012.179     Next, through SVR [8, 9, 12], the predicted values of the protective columns are calculated by the values of the selected columns from FP-tree data mining. By the differences between the predicted values and the original protected columns, as well as the Regression Difference Expansion (RDE), the watermark is embedded to protect the columns. The advantage of the proposed method lays in the tiny differences between the digital database embedded with digital watermark and the original database. Thus, the proposed method can determine whether the values in the decision database have been maliciously tampered with and determine the columns that have been tampered with. On the contrary, if the digital decision database embedded with watermark is not tampered with, the values in the columns can be restored to the original ones with RDE. This method shows a good detective rate.

In this paper, the remaining sections are as follows.

Section II provides insight into our methodology. Section III shows our experimental results. Conclusions are described in Section IV.



II. THE PROPOSED SCHEME In the proposed scheme, the selection of important features in the database table is improved by using FP-tree data mining. Then, the related important features of the protected field in the mining results are further trained by SVR for predicting the protected field. Therefore, a difference between the predicted value and the original value of the protected field can be computed for each record. On the other hand, DE is a reversible hiding scheme [3, 11]. A basic approach of DE-based reversible watermarking is proposed to select an embedding objective value [4, 10].

Through this objective value and the LSB embedding scheme, the result is updated into the table. The details of the proposed scheme are described in the following subsections. The block diagram of the proposed technique is shown in Figure 1.

A. FP-tree Feature Mining In this phase, the important features of the original  database O are elected using FP-tree mining technology. The FP-tree structure can find out the associative features of the protected attribute. First, calculate the number of features and create the tree structure based on the frequent of attributes.

Step 1: Count the frequent for each attribute value.

Step 2: Construct the FP-tree for the database O.

Table 1 is an example of transaction table in the supermarket; ID column represents the purchaser ID; Items bought represents purchase transaction data; frequent item is filtered using the support threshold after statistics. Assume the minimum support threshold is 3, as in Han et al. [6].The support of a pattern a, where a represents a set of items, is the number of transactions containing a in the transaction database.

For example, the set collects the frequent items: <(a:3),(b:3),(c:4),(d:1),(e:1),)(f:4),(g:1),(h:1),(i:1),(j:1),(k:1),( l:2),(m:3),(n:1),(o:2),(p:3),(s:1)> and in this set, a represents  the feature, while the number 4 indicates the support. The items bought order is important since each path of the tree will follow this order. The frequent items are filtered through the minimum support threshold value.

First, a scan of the transaction database derives a list of frequent items. Second, create the root value with null of the tree. The ID number 1 inserts these frequent items into the tree: <(f:1),(c:1),(a:1),(m:1),(p:1)> as shown in Figure 2(a).The ID number 2 inserts these frequent items into the tree: <(f:1),(c:1),(a:1),(b:1),(m:1)> as shown in Figure 2(b).

Because frequent items (f, c, a) exist in the path (f, c, a, m, p), the sum of each node in the frequent items list is incremented by 1, and (b:1) creates a new node and is linked as a child of (a:2).

The ID number 5 inserts these frequent items into the tree : < (f: 1), (c: 1), (a: 1), (m: 1), (p: 1)> as shown in Figure 2(c) and the final FP-tree is constructed.

B. SVR Training Algorithm In the above phase, the attributes in the FP-tree are stored  in table X. Next, the important features in table X are selected to the training process. Using SVR can involve training samples and gets the training function f(Y) from SVR.

Input: The database O and table X with g attributes A1, A2, ?, Ag Output: The trained SVR function f(Y) Step 1: Use the attributes in table X to predict the protected attribute in the database O. The training dataset T can be denoted as: }, ,...2 ,1},..., ,,{|{  ,,2,1 njAAAssT  jgjjjj ???  where  sj is defined to be the jth selected training tuples in the database O.

Step 2: Train SVR model by using the training tuples set T to obtain the SVR function f(Y).

C. Database Watermark Embedding In this phase, for the protected objective attribute U in  database O, the proposed watermark embedding process uses the objective attribute U in database O and SVR prediction function f(Y) to embed the watermark using DE. The watermark W could be divided into 1-LSB bit, 2-LSBs bits, or 3-LSBs bits for embedding into modified U.

Input: The database O, the trained SVR function f(Y), and watermark W Output: The embed database O?  Step 1: Compare the objective value Ui with the trained SVR function value f(yi). If the Ui  is less than f(yi ), define di = f(yi) - Ui  , and go to Step 2 ; otherwise define  di = Ui - f(yi) and go to Step 3.

Step 2: Modify the objective value through di and an embedded watermark Wi by computing iiii WdUU ???  and go to Step 4 Step 3: Use DE to make the difference between the objective values larger than the predicted value by multiplying by a factor and compute )(2 iii WdU ??? .

Step 4: Repeat Steps 1 to 3 until all watermark bits are embedded into the database O and obtain the watermarked database O? .

Assume the objective value Ui and the predict value f(yi) are 15 and 9, respectively. Subtract 9 from 15 to obtain the remainder 6. Use the proposed database watermark embedding algorithm, and assume that the watermark bit is 1.

In Step 3, 13)16(2 ????iU  and embed it in the objective value to be 28.

D. Database Watermark Extraction In our proposed scheme, for verifying the contents of the database, the important features can be found by data mining and SVR is used to predict f(Y).We use the concept of DE to extract the embedded watermark from the protected objective values. Afterwards, we obtain the watermark and the objective values. If the watermark has been destroyed, it reflects that the database is tampered with. Otherwise, the database would display the original values. The process of database watermark extraction is illustrated in Figure 3.

Input: The suspected database O , the trained SVR function  f(Y), and original watermark W Output: The suspected watermark W? Step 1: Use FP-Tree mining  to database O and obtain  }, ,...2 ,1},..., ,,{|{ ,,2,1  ' njAAAssT jgjjjj  ??? .

Step 2: Train SVR model by using the training tuples set T? to obtain the SVR function f(Y).

Step 3: Compare the objective value  iU  with the trained SVR function f(yi).  If the iU  is less than f(yi ), define di = f(yi) -  iU  , and go to step 4 ; otherwise define  di = iU  - f(yi) and go to step 5.

Step 4: Compute  ?? ?    ?  i  i dc  and ??  ? ? ?  i  i dk  , and extract the  watermark iii kcW ?? '  ; go to step 6.

Step 5: Firstly suppose 0' ?iW  and li=0, and calculate  )(2 'iiii Wllp ????  . If di pi then extract the watermark bit 0' ?iW  ; otherwise  repeat Step 5 by increasing li with 1 until  ii pl 2  and obtain 1' ?iW .

Step 6: Repeat Steps 1 to 5 until all watermark bits are extracted from the database O .

Step 7: Compare the extracted watermark and original watermark to determine whether the database is tampered or not.

According to Step 5 in the proposed watermark extraction process, suppose di=15 and the embedded watermark bit is 0, compute )(2  ' iiii Wllp ???? to get pi=0. Repeat Step 5  until ii pl 2 , the watermark bit is 1. Finally, the li value is 7; and if the data is not tampered with, li can be added to the predicted value f(yi) (suppose it is 9) to get the original  value 16.



III. EXPERIMENTAL RESULTS In the experimental results, two different databases - Iris  and Abalone - were used as the test databases. The first is tested using the FP-tree data mining. Using FP-tree data mining method can reduce the number of features and save time. The method also identifies features for SVR prediction.

The SVM tool adopted was LIBSVM [5]. The Iris database has 150 tuples and 4 attributes [2]. The training parameters include the balanceable parameter C (C=3) and the minimal fitting error ? (?=0.1); the number of training tuples is 150. The attributes are: sepal length, sepal width, petal length, petal width, and class. The experimental results are shown in Table 2.

The number of tuples of the Abalone database is 4096 with 8 attributes [2].The attributes are: sex, length, diameter, height, whole weight, shucked weight, viscera weight, and shell weight. Balanceable parameter C (C=3) and the minimal fitting error ? (?=0.1), and the number of training tuples is 1000. The experimental results are shown in Table 3.

In the case of the Abalone database, the average detection rate of watermark embedded with 1-LSB is 58.5%; watermark embedded with 2-LSB is 88%; watermark embedded with 3-LSB position is close to 98.8%. On the other hand, compared with the Iris database, it improves to a 98.6% detection rate, which means that almost all  the tampered data can be successfully detected and located. The experimental results show that the proposed method indeed can maintain the integrity of the contents of the database.

Notably, by data mining in advance, we can reduce the SVR training time in the follow-up steps. Assume that the data dimension is quite high, we find out the important features first. In the absence of signs of tampering, the proposed program can recover the original values. During the recovery process, it can obtain the original objective attributes by the predictive values and li. Specifically, to restore the contents of the database is the most important feature in this new proposed method. It is effective and can immediately reduce management costs.



IV. CONCLUSIONS In this paper, we propose a reversible fragile watermark  algorithm based on SVR prediction, which uses the FP-free data mining method. The proposed technique can be used to verify the contents of the database. First, identify important features by FP-tree mining with association rules. The characteristics of each selected data are used for the prediction of SVR. Association rules would select the most relevant one. The main purpose of this approach is to prevent the training time from becoming too lengthy when the dimension is high during the SVR prediction. Therefore, by mining through the association rules, this method can greatly reduce the wasted time caused by SVR training. Because differences are computed between SVR prediction and the original value, we can use the DE approach as the basic concept with which to embed the digital watermark. If the database is under attacks and is maliciously tampered with, differences can be generated by the SVR predicted values; we can extract the watermark with this method, and then       calculate and locate the attacked records. In the case of not being attacked, the original database can be restored by extracting the watermark.

