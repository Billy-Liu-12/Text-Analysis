OPTIMIZING INDEX FOR SEMISTRUCTURED DATA

Abstract: In the paper, we propose a set of strategies for optimizing  index for semistructured data. For example, for optimizing path index, we propose Improvea algorithm for mining association rules. Besides, we propose a Colv algorithm which links index combined with value index. Based on these strategies, we provide optimizing algorithms for part of the basic query operations such as merger operation, selection operation and projection operation. These algorithms can improve query efiiciency.

Keywords: Data mining; Semistructured data; Index optimization  1 Introduction  Although popular search engines can query information on the Internet, they cannot acquire information in detail because they ignore Web structure. In order to solve this problem, researchers turn to using database technique to query this kind of information. But traditional database cannot process data with irregular structure. Thus, it is important that query languages, which can process not only shuctured data but also semistructured data, should be developed. The famous Tsimmis project"" ' 14] at Stanford University proposes a framework and a tool set for data obtaining and integration from heterogeneous data integration systems. It describes the self-describing ROEM as a common data model. The Araneus project [" at Roma Tre University describes the page model as a common data model. The Page Model extends the heterogeneous union type, but it lacks flexibility and has limited functionalities.

We feel that the above-mentioned systems have the main defects that their query efficiency is not very high. To solve this problem, the paper proposes a set of strategies for indexing. Based on these strategies, the paper also describes the implementation of the algorithms for part of the basic query operations. These algorithms can improve query efficiency.

2 Optimizing index  2.1 Optimizing path index  Improvea algorithm for mining association rules Improve algorithm is the algorithm that is used to  optimize path index. Improvea algorithm sets out from the  largest frequent itemset, and uses the pruning strategy that the popular Apriori algorithm puts forward. That is, the subset of frequent itemsets must be frequent itemsets. Thus, through using the Improvea algorithm, all frequent itemsets can be obtained. We describe the main idea of the algorithm as follows: If a larger itemset is a frequent itemset, it is unnecessary to decide if its sub-itemset is a frequent itemset, and the sub-itemsets are pruned. If a larger itemset is not a frequent itemset, its sub-itemset should be sorted according to the extent of support, because those itemsets with larger support are more likely to be a part of the frequent itemsets.

Contrast with Apriori algorithm, Improvea algorithm uses the top-down strategy for search space. Because it uses the hottom-up strategy for search space, Apriori algorithm applies to shorter frequent itemsets. However, the path is longer, so Apriori algorithm is less efficient. To solve this problem, Improvea algorithm should give up the bottom-up strategy.

We describe Improvea algorithm as the following steps: Input: path set Effect: path statistic [count all path frequency; While path set 0 nil [fetch the largest path I. from path set; if l.is a frequent itemset then [delete all sub-path in the path from the path set; 1 else [ sort on frequency in all In.,;  While [ 1. 0 nil [if is a frequent itemset then delete all sub-path in the path from the path set;  else [ ln.,]= ( In.,] -ln.,; if [ ln.,] = nil then n=n-I:  I I  I I make use of the frequent itemsets to produce the association rules with the least confidence; acquire path statistic; ' I 2.2 The optimization technology combining link  index with value index  0-7803-7508-4/02/$17.00 02002 IEEE      0 Colv algorithm To avoid the problem of low efficiency caused by using  link index or value index separately, we adopt the optimization technology that combines link index with value index.

We describe Colv algorithm as the following steps: [if don't exist join operation then call val function to find all values that meetcondition; else [find root node involved with join operation!

in the graph including the roots, call val function to find all values that meet condition;  ) call parent function to traverse upwards so as to attain  the query result;  To improve parallel, the algorithm is modified as fnllows: [ if don't exist join operation then call val function to find all values that meet condition; else (find the root node involved with join operation;  in the graph including the roots, call val function to find all values that meet condition;  I call child function to traverse downwards from root  Intersect the result of child function with the result of val node to leaf node;  function to attain the final results; I  3 Optimizing Query Operations  Based on the previous strategies for optimizing index, we implemented the algorithms for part of the basic query operations.

3.1 Basic operations  Basic operations are described as fnllows.

Because the structure of semistructured data may be irregular, redundant structures in the source may appear.

We use merger operation to solve redundant structures.

Contrast with general merger algorithms, our algorithms is better in parallel.

We introduce a few definitions that are useful for us to describe merger algorithms.

Definition 1: Pi is similar to Pj. suppose Pi= (Oil. a i l l ..,Oi.ai.) .Pj= (OjI.ajl;~,Ojn.aj.) ,where P i m d P i a r e path, aid (Oil) =oid tojl) ,ail=ajl;.,ai.=aj..

Definition 2: prefix merger is such a merger. If there are pairs of similar paths, and there is the same start object among these similar paths, then these similar paths merge into one path.

Definition 3: suffix merger is such a merger. If there are pairs of similar paths, and there is the same end object among these similar paths, then these similar paths merge into one path.

0 merger operation  Definition 4: merger operation is such an operation that merges redundant structure in the original source.

We describe merger operation as the following steps: Input: original source Effect: target pattern set [while exist sub-tree [fetch sub-tree of the node; if success (prefix merger) I /  prefix merger is success then [prefix merger] ; if success (suftix merger) 11 suffix merger is success then [suffix merger] i node = the roots in sub-trees: )  I 0 selection operation  Contrast with general selection algorithms, our algorithm uses optimization strategy of both link index and value index in the above text.

We introduce the definition that is useful for us to describe selection algorithms.

Definition 5 :  selection operation is such an operation that path collection to meet condition is selected from a given object collection.

We describe selection operation as the following steps: Input: Hash table that stores key index Effect: path collection that meets condition Condition = find ( ) ; I /  find the final node collection in hash table that meets condition .

ai = first (condition ) ; k=l: while conditiononil {condition = condition-( ail ; while aj<zroot node [ ( aj]=parent ( ( a j ) )  : pathk = pathk +( aj); //pathi is used to store the i path that meets condition I k=k+l: q= next (condition 1 : I 0 projection operation  We introduce the definition that is useful for us to describe projection algorithms.

Definition 6: projection operation is such an operation that is based on selection operation, the path collection that meets condition is selected from mot object to projection location.

We describe the projection operation as the following steps:  Input : the appointed attribute collection and path collection that meets condition      Effect : gain the appointed path collection after projection operation I/ qathibute is used to store the appointed attribute collection path =(pathl,---, pathn);//path is used to store the path collection that meets condition i=l; result = ( ] ; while pathiE path ( if finial (pathi) Eqattribnte then result = pathi +result; //result is used to store the appointed path collection i=i+l ] ;  4 Prototype system DM-Prototype  In the prototype system DM-Prototype we implemented, we adopted the above optimization strategy. The hardware platform of the prototype system DM-Prototype is composed of three microcomputers. These microcomputers' EMS memories are WMB, CPUs are Intel PII400MHz, hard disks are 8.4GB. Their operating systems are Windows NT 4.0. The prototype system consists of user Interface, query compiler, data process, data management, and search. engine. Our program language is JAVA language. The prototype system can query the detailed information that common search engines cannot offer, and process information on the Internet that cannot be stored in RDBMS or OODBMS. It is proved that the prototype system has good effect. This is because we use a set of strategies for index optimization. Based on these strategies, the paper provides the optimizing algorithms for part of the basic query operations. For example, it applies the optimization technique that combines link index with value index for selection operation, so the query is considerably speeded up. Besides, it can also merge redundant structures to speed up query.

5 Conclusion  Since nowadays there are a great deal of semistructured data on the Internet and heterogeneous data integration systems, in-depth research on this kind of data is very important. We propose a set of strategies for query optimization. For example, path index and. link index combined with value index. Based on these strategies, we provide the optimizing algorithms for some basic query operations such as merger operation, selection operation and projection operation. Using these algorithms can improve query efficiency.

In the future, we will consider how to process dynamic information.

