Extracting Knowledge from Association Relationships to Build Navigational Models

Abstract  This paper analyzes how the semantics of association re- lationships in OO conceptual modeling can help to build Navigational Models for Web Applications. The work has been developed in the context of OOWS (a Model-Driven Development Method for building Web Applications). We study some structural and behavioral properties of those conceptual abstractions in order to extract knowledge to be applied in the construction of navigational models. From this study, a set of design rules has been obtained. These rules help the modeler to build navigational models in a systematic way. The results of this work have improved the modeling and code generation processes introduced by OOWS.

1 Introduction  Currently the most representative web application mod- eling methods (OOHDM [15], WebML [3], ADM [2], RMM [7], Autoweb [5], UWE [8], WSDM [4], EORM [9], etc.) introduce navigation models to graphically specify navigational requirements of web applications.

Navigational models are based on structural semantic models as EER or UML Class Diagrams. These semantic models provide commonly used abstractions and/or struc- tural relationships (association, aggregation, composition and generalization/specialization taxonomies) that are the basic building blocks of the navigational views of a web application. These views basically define data, operations and links between views that the user can access through navigation. Most development methods take structural re- lationships as simple tools to define navigation relation- ships between entities of the system. Sometimes this is because the modeling tools (semantic models) do not have enough expressive power or because the underlying knowl-  edge/information that relationships provide is not used as (1) a methodological guide, in order to make easier the con- struction of navigational models, or as (2) a tool to pro- vide a concrete/precise semantics to navigational relation- ships induced by structural relationships (assuring its con- sistency with the object model that has been taken as the basis for building navigational models). In this context, we are interested in extracting as much knowledge as we can from structural relationships (in this case, from associ- ations, aggregations and compositions) specified in a class diagram. We use this knowledge for identifying modeling rules and/or recommendations. These rules can be used to build navigational models, providing modeling guidelines that allow speeding up web applications modeling [11] and introducing mechanisms that guarantee the semantic qual- ity [10] of navigational models.

This paper studies how a particular semantic interpreta- tion of UML association, aggregation and composition re- lationships can help to build Navigational Models in a Web Application Modeling Method (OOWS). A set of structural and behavioral properties defined for these relationships [1] allow us to give a clearly defined semantics to relationships of this kind. This semantics help to make navigational dia- grams richer and to systematize their construction.

The main contributions of this work are: (1) the study and the identification of the effects that association, aggre- gation and composition relationships can influence in navi- gational models construction and (2) the definition of rules as methodological guides for the construction of these mod- els in the OOWS navigational specification step.

The paper is organized as follows: section 2 describes the OOWS methodological approach, which defines a full software development process for the web. OOWS provides the required expressivity to capture navigational and pre- sentational requirements for developing web applications.

Section 3 presents a particular interpretation for the seman- tics of the UML association, aggregation and composition  Proceedings of the First Latin American Web Congress (LA-WEB 2003)    Architecture  Conceptual Modelling  Implementation  REQUIREMENTS ELICITATION  Use Cases and Scenarios  Structural Model  Dynamic Model  Functional Model  Navigational Model  Presentational Model  Presentation Tier (WEB Environments (HTML,XML/XSLT)  Application Tier (XML WEB Services (Java, .NET, EJB, COM+))  Persistence Tier   (SQL Server, Oracle)    Figure 1. The OOWS Methodological Ap- proach  concepts by identifying the properties that allow us to char- acterize every kind of association/aggregation relationship.

Section 4 presents navigational design rules, which have been derived from the extracted knowledge taking as an in- put the properties identified in Section 3. These rules can help modelers to build navigational models of web appli- cations. Finally, we present some conclusions and further work.

2 The OOWS Methodological Approach  The term Web Engineering is used to refer to those methods, techniques and tools that have arisen to provide methodological support to undertake the development of web applications [10]. Approaches of this kind (1) intro- duce new models and abstraction mechanisms to capture the essentials of web applications and (2) give support for the development process and implementation of a web solution.

Following these ideas, OOWS (Object Oriented Web So- lution) is the extension of the OO-Method [14] that intro- duces the required expressivity to capture navigational and presentational requirements to develop web applications  It defines a full software development process for the web that comprises two major steps: ?system specification? and ?solution development?. At first, a full specification of the system requirements is built. A strategy oriented to- wards generating the software components that constitute the solution (the final software product) is defined in the second step.

The steps and their associated techniques are the follow- ing:  Conceptual Modeling: conceptual models are built to appropriately capture the requirements of web appli- cations. The modeling tools allow us to specify the functional, navigational and presentation requirements  of dynamic web applications. The modeling process is divided into three steps:  1. functional requirements elicitation. Techniques based on use cases and scenarios are applied to build a conceptual schema (class, sequence and state diagrams are built). An extensive work has been developed in our research group in the OO- Method context [6]. See box number 1 in Fig- ure 1.

2. classic conceptual modeling. Using Structural, Functional and Dynamic models, the system structure and behavior is captured (box number 2).

3. navigational and presentational modeling. A navigational model is built in order to capture the navigational requirements. Once the nav- igational model is built, presentation require- ments are specified by means of a presentational model that uses a set of simple presentation pat- terns.

Architectural Design: A multi-tier architectural style (Presentation, Application and Persistency Tiers) is chosen to develop the application.

Implementation: A set of correspondences (transforma- tion rules) between the conceptual abstractions and the software elements that implement each tier of the ar- chitecture are defined, making intensive use of design patterns.

In order to better understand the work presented in this paper, the next subsection presents the navigational model introduced by the OOWS approach.

2.1 The OOWS Navigational Model  This model allows capturing the navigational semantics of web applications by describing how users would access the system information and functionality. This model rep- resents the users of the system and their inter-relationships by means of a User Diagram. To describe the navigation capabilities for each kind of user, this navigational model proposes five navigational abstraction primitives: Naviga- tional Map, Navigational Context, Navigational Link, Nav- igational Class and Navigational Relationship.

A Navigational Map represents the global view of the system for each kind of user. It is represented by a directed graph where nodes are Navigational Contexts and the arcs represent Navigational Links. A Navigational Context rep- resents a partial view of the system that helps the user to ful- fill certain requirements. A Navigational Link represents a  Proceedings of the First Latin American Web Congress (LA-WEB 2003)    ?context? ResearchLines  E  Member  ?context? Resources  E  ?context? Projects  E  ?context? Groups  E  ?context? Activities  E  ?context? Publications  E ?context?  Researchers  E ?context? Guests  S  Figure 2. Navigational Map  directed reachability between contexts, defining valid navi- gation paths. Figure 2 shows an example of a navigational map. It is made up of eight contexts (graph nodes), with its reachabilities (graph links). For instance, from the Publica- tions context the user can get two contexts: the Research- Lines context to browse the lines of research of the involved publications, or the Researchers context to explore the ?au- thors? of each publication.

Navigational contexts (graphically represented as UML packages stereotyped with the ?context? keyword) rep- resent user interaction points that provide a set of cohesive data and operations. They can be of two types:  ? exploration navigational contexts. They are reachable nodes from any node (depicted with the ?E? label).

These contexts define implicit navigational links from any node and explicitly from the root of the map that is represented by the user. In the example of Figure 2, seven exploration navigational contexts have been in- cluded (Activities, Groups, Resources, . . . ).

? sequence navigational contexts. They can only be accessed via a predefined navigational path (depicted with the ?S? label). In Figure 2, Guests acts as a se- quence navigational context only reachable from the Researchers and Projects contexts.

Navigational contexts are made up of a set of Naviga- tional Classes and Navigational Relationships.

A navigational class (represented by a UML class stereotyped with the ?view? keyword) denotes a class view. It specifies which attributes and operations are vis- ible/executable for the user in this context. Moreover, a population filter for a navigational class can be specified, defining an object retrieval filter depending on an OCL for- mula. In Figure 3, the navigational class Researchers has the population filter ?not hasGone? representing that only  << context >> Researchers  +modify()  -name -surname -personalID -email -isDoctor -isPhDStudent -web -photo  ?view? Researcher -name  -address -web -city -state -country -phones -status  ?view? Entity  -name -acronym -web  ?view? RGroup/ Leader /  RGroup.name [ Groups ]  not hasGone  E  Figure 3. Researchers Navigational Context  those researchers which currently work at the group must be shown.

Each navigational context has one mandatory naviga- tional class from which the information retrieval starts, called manager class and other optional navigational classes to provide complementary information, called com- plementary classes.

All navigational classes must be related by a unidirectional binary relationship (navigational re- lationship). It is defined over an existing aggrega- tion/association/composition or specialization relationship from the class diagram. Navigational relationships of two types can be defined:  1. Context dependency relationships (graphically repre- sented using dashed arrows) represent a basic informa- tion recovery by crossing structural relationships be- tween classes. When a context dependency relation- ship is defined, all the related instances between these classes are retrieved.

2. Context relationships (graphically represented using solid arrows) represent the same information recovery as context dependency relationships do, plus an ad- ditional navigation to a target context. In this case, two additional relationships appear: the context at- tribute (represented between brackets) specifies the target context that will be accessed through navigation and the link attribute that specifies the attribute that will act as the ?anchor? for the navigation.

Figure 3 presents the Researchers navigational context.

The main objective of this context is to provide information about researchers (name, email, photo, etc.). This naviga- tional class plays the manager class role. It is related to the Entity navigational class through a context dependency relationship to represent a requirement for retrieving infor- mation about where the researcher does the research work  Proceedings of the First Latin American Web Congress (LA-WEB 2003)    (entity name, address, status, phones, etc.). Moreover, the researchers are also related to the RGroup navigational class through a context relationship to retrieve information about the research groups (group name, acronym and web URL) in which the researcher is involved. This context relation- ship enables a navigation to the Groups navigational context (context attribute) using the name of the group as the ?an- chor? (link attribute) in order to get additional information about the research group.

3 Association, Aggregation and Composition in OOWS  Association, Aggregation and Composition are very use- ful abstractions in the OO Conceptual Modeling. However, no consensus exists on their semantics in the OO commu- nity. UML does not give solution to this problem, since its proposal (UML 1.5 [12]) holds some ambiguities in the def- inition of these abstractions. In this section, we propose a particular semantic interpretation for the UML Association, Aggregation and Composition to avoid these ambiguities, taking into account that we develop our work in the context of OOWS/OO-Method.

In order to define the particular semantic interpretation, we have adopted a subset (?core?) of the semantics for the UML concepts that has a clear interpretation, settling its se- mantics through well known properties. The following as- sertions are adopted:  ? Association: ?An association declares a connection (link) between instances of the associated classifiers (e.g., classes). It consists of at least two association ends, each specifying a connected classifier and a set of properties that must be fulfilled for the relationship to be valid? (introduced on page 2-64 [12]).

? Aggregation: ?An aggregation is ?a whole/part re- lationship. In this case, the association-end attached to the whole element is designated, and the other association-end of the association represents the parts of the aggregation. Only binary associations may be aggregations? (introduced on page 2-66 [12]).

? Composition: ?A composite aggregation is ?a strong form of aggregation? (introduced on page 2-66 [12]).

Although we adopt these assertions, we must set up the semantics of these concepts to avoid the ambiguity intro- duced by the UML standard. One way to define the precise semantics of these concepts is (1) to identify properties that allow to characterize association, aggregation and compo- sition relationships and (2) to determine the value of each property for each concept.

Table 1. The fixed values of the dimensions for association, aggregation and composition.

Prop./Concept Assoc. Aggreg. Comp.(W/P)  Multiplicity * * (1,1) / (*,*) Del. Propagation * * Cascade / * Tmp. Behaviour * * * / Static  Id. Projection * * Proj / Not Proj Encapsulation * * Not Enc / Enc  Reflexivity * Not Refl Not Refl Antisymmetry * Antisym Antisym  In order to identify the properties that allow us character- izing the association, aggregation and composition relation- ships, we have achieved an analysis process [1] in which we have studied different approaches that deal with the associ- ation, aggregation and composition relationships. This pro- cess identifies seven properties that characterize these rela- tionships:  Multiplicity: it specifies the upper/lower number of as- sociated objects that can/must be connected to one ob- ject.

Delete Propagation: it determines the actions that must be achieved when an object is destroyed.

Temporal Behaviour: it specifies whether an object, dur- ing its existence, can be dynamically connected or dis- connected to an object of the associated class.

Identity Projection: it specifies whether an object projects its identity onto its associated object/s.

Encapsulation: it specifies whether an object can be ac- cessed only through its associated object/s.

Reflexivity: it specifies whether an object can be con- nected to itself.

Antisymmetry: it specifies whether an object can be con- nected to an object which is already connected to it.

Once the properties have been identified, we have to de- fine the semantics of the UML association, aggregation and composition concepts. To do this, we have determined the value of each property for each UML concept. Table 1 shows these mappings. The required value for each prop- erty (row) is shown for each concept (column). The value * indicates that the property can be set up to any value.

In this work, we are focusing on Temporal Behaviour, Encapsulation and Identity Projection properties. In order to better understand the further discussion, next we provide a more detailed definition:  Proceedings of the First Latin American Web Congress (LA-WEB 2003)    ? Temporal Behaviour. It is specified for each end of the relationship. Temporal Behaviour specifies whether the objects of the class at the opposite end can be dy- namically connected or disconnected (creating or de- stroying a link1) to one or more objects of the class associated to the end (through the association, aggre- gation or composition relationship) along its existence.

The {Static} value specified over a relationship end indicates that creating or destroying a link during the existence of an object at the opposite end is not pos- sible (it is only possible during its creation). The {Dynamic} value indicates that it is possible through- out the whole life of the object. The values are graph- ically represented in the class diagram by the UML ?Dynamic? and ?Static? stereotypes at the rela- tionship ends.

? Identity Projection. It is specified for each end of the relationship. Identity Projection specifies whether an object projects its identity onto its associated objects.

When an association-end has the {Projected} value, the objects of the class of that end are identified by their related objects through the corresponding asso- ciation relationship. The {Not Projected} value indi- cates the contrary. The values are graphically repre- sented in the class diagram by the UML ?Projected? and ?Not Projected? stereotypes at the relationship ends. We take {Not Projected} as the default value.

? Encapsulation. It is specified for each end of the re- lationship. Encapsulation specifies whether an object can be accessed only through its associated object/s.

The {Encapsulated} value indicates that the objects of the class associated to the end can be accessed only through their associated object/s at the opposite end.

The {Not Encapsulated} value specifies that the ob- ject can be acceded through other objects. The values are graphically represented in the class diagram by the UML ?Encapsulated? and ?Not Encapsulated? stereotypes at the relationship ends. We take {Not En- capsulated} as the default value.

4 Extracting Knowledge from Association, Aggregation and Composition Relation- ships  This section discusses the knowledge that can be ex- tracted from the Association, Aggregation and Composition Relationships2, in order to provide modeling guidelines that  1?association-end? in UML, it is the endpoint of the relationship.

2We use the term ?association relationship? to refer generically to As-  sociation, Aggregation and Composition.

help to build Navigational Models. This knowledge is ob- tained by analyzing the structural and behavioral properties of the relationships introduced in the previous section.

Our objective is to derive a set of rules that allows us to define a methodological guide that supports the design of the basic interaction units (graph nodes) of the navigational models and their inter-relationships (navigational paths). In the OOWS approach, these rules affect the definition of navigational classes and relationships in the specification of navigational contexts.

In order to extract some knowledge, we tackle the fol- lowing strategy:  1. We study how association relationships can influence in the construction of navigational models.

2. We analyze the relationship properties (introduced in the previous section) that introduce additional knowl- edge to those detected in the previous step.

4.1 Association Relationships in Navigational Modeling  Association Relationships are the basis to define navi- gational relationships in Navigation Contexts. This knowl- edge leads us to the following general rule: Given an as- sociation relationship between two classes (A and B) that exists in a class diagram, two navigational classes (A and B ?view?s) and a navigational relationship between them should appear in a navigational context. This navigational relationship can be classified in one of these two types:  Context relationship , which must connect the navigational context to another context whose manager class is the target navigational class of the context relationship.

This kind of relationship should be chosen when it is necessary to provide additional information of the target class. For instance, in the navigational context shown in Figure 3, the Researcher manager class is related with the RGroup navigational class by means of a context relationship, specifying that the user can navigate to the Groups context to get additional infor- mation of a research group.

Context dependency relationship , which must connect one navigational class (source) to another class (target) in the navigational context. This kind of relationship should be chosen when there is enough information in the target class to fulfill the information requirements for this context (navigation is not necessary in order to provide additional information of the target class).

For instance, Figure 3 shows a context dependency re- lationship between Researcher and Entity navigational classes.

Proceedings of the First Latin American Web Congress (LA-WEB 2003)    RESEARCH LINERESEARCHER  RESOURCE  1..* 1..*   1..*  <<Dynamic>><<Dynamic>>  <<Static>>  <<Dynamic>> <<Encapsulated>> <<Projected>>  Works_In  In_Charge_Of  Figure 4. Part of the Class Diagram for the RGMS System  We introduce an example of a navigational model for the Research Group Management System (RGMS) [13] to il- lustrate our approach. Due to space restrictions, a small portion of this application is presented. A research group is composed by several Research Lines, each of them con- stituted by several Researchers (professors, PhD students, fellows, etc.). Each researcher uses and is responsible of a set of resources (computers, specific tools, etc.). Once a resource is assigned to one researcher, it is not possible to reassign it to another researcher.

Figure 4 shows three classes of the Class Diagram for RGMS Systems. The classes are related by two association relationships: the Works In association between Researcher and Resource classes and the In Charge Of aggregation be- tween Researcher and Research Line classes.

Applying the general rule to these classes and its re- lationships, two navigational contexts are defined (Re- searcher Info and Research Line Info, see Figures 5 and 6, respectively), with Researcher and Research Line naviga- tional classes as their respective manager classes. Applying the criterion for navigational relationships classification de- scribed above, context relationships for allowing the navi- gation from one context to the other one has been included.

At this time (in the modeling process), it seems that the Resource class is not as important as the Researcher and Research Line classes in the problem space; for this reason, no other navigational context has been defined until now.

Next we are going to introduce design rules that can modify our modeling decision (incorporating another navigational context) or confirm it.

In the next subsections, we describe the extracted knowl- edge from the association relationships properties and the navigational design rules derived from it. Finally, we present the results of the application of these rules on the construction of the Navigational Model for the Web appli- cation of the example.

4.2 Extracting Knowledge for Association Rela- tionships Properties  We have determined that the three selected properties of the set of association properties (Identity Projection, Tem- poral Behaviour and Encapsulation) have a major influence in the construction of navigational models. For each prop- erty, we provide the following information:  Extracted Knowledge: It is a description of the way that the relationship and its property values affect the nav- igational model primitives. This knowledge helps to determine the structure of a navigational context by means of navigational classes and relationships.

Design Rules: They are a set of rules that can be applied on the construction of navigational contexts, based on the corresponding extracted knowledge. A Design Rule is introduced for each property value.

4.2.1 Identity Projection  Extracted Knowledge. The identity projection property allows determining the definition of complementary classes with their navigational relationships in a nav- igational context.

Design Rules for Property values:  Case IP1: ?Projected? value at the A class association- end.3  Objects of class A are identified by their associated ob- jects of class B.

Design Rules: Each navigational class of A must have a navigational relationship to a navigational class of B, except for when a navigational relationship from B to A already exists.

Case IP2: ?Not Projected? value at the A class association-end.

Objects of class A are not identified by objects of their related class.

Design Rules: Navigational relationships from naviga- tional classes of A to navigational classes of B are not mandatory.

In the example, the ?Projected? value for the Identity Projection property is depicted in the association-end of the Resource class (see Figure 4). This means that one resource is identified by its ?responsible? researcher. In this case, we must apply the design rule IP1, which provide us with two design alternatives:  3The design rules that we describe in this section can be applied to both association-ends. The reference to one particular association-end is done for explanatory purposes.

Proceedings of the First Latin American Web Congress (LA-WEB 2003)    <<context>> Researcher Info  -add_resline() -del_resline() -add_resource() -del_resource()  -name -Academic Grade -e-mail -photo  ?view? Researcher -name  ?view? Research Line  [Research Line Info]  E  -name  ?view? Resource  Research Line.name  Figure 5. Researcher Info Navigational Con- text  1. create a context relationship to a navigational context Resource as its manager class, enforcing the inclusion of a navigational relationship to a navigational class or Researcher.

2. define a context dependency relationship from some navigational class of Researcher to a navigational class of Resource.

The decision was made considering the formerly intro- duced general rule. Navigation to objects of Resource class has not been considered as a necessary feature. So, the sec- ond alternative has been chosen. Figure 5 shows the Re- searcher Info navigational context, which includes the con- text dependency relationship (see the dashed arrow) from the Researcher manager class to the Resource navigational class.

4.2.2 Encapsulation  Extracted Knowledge. Knowledge extracted from the En- capsulation property values allows to establish which navigational relationships corresponding to a given as- sociation relationship between A and B classes are de- fined for a given navigational class.

Design Rules for Property values:  Case E1: ?Not Encapsulated? value at the A class association-end.

Objects of the class A can be accessed from objects of any related class.

Design Rules: Defining navigational relationships to A as contextual and context dependency relationships is completely allowed.

Case E2: ?Encapsulated? value at the A class association-end.

E  <<context>> Research Line Info  -add_researcher() -del_researcher()  -name -description  ?view? Research Line  -name  ?view? Researcher  [Researcher Info]  Researcher.name  Figure 6. Research Line Info Navigational Context  Objects of the A are only reachable from related ob- jects of the B class.

Design Rules: Defining navigational relationships to A as contextual and context dependency relationships is only allowed from B navigational classes. Naviga- tional contexts where the A navigational class is the manager class must be sequence navigational contexts and they can only be reached from context relation- ships with a navigational class of B as the source class.

In the example, the association-ends of the Works In have the ?Not Encapsulated? value (Case E1). Thus, accessing to Researchers and Research Lines is not con- strained.

The ?Encapsulated? value of the Resource class association-end (Case E2) enforces to access to resource objects through their associated researchers. The inclusion of a context dependency relationship in the Researcher Info context allows fulfilling this condition, reaffirming the de- cision previously made about the type of navigational re- lationship between Researcher and Resource navigational classes.

4.2.3 Temporal Behaviour  Extracted Knowledge. Given two classes (A and B) related by an r association relationship, the extracted knowl- edge from this property allows to determine which navigational classes (A and B ?view?s) can include operations for creating and destroying r relationships and which others cannot.

Design Rules for Property values:  Case TB1: ?Dynamic? value at the B class association- end.

Objects of A can create or destroy r relationships to  Proceedings of the First Latin American Web Congress (LA-WEB 2003)    objects of class B along their existence.

Design Rules: Operations for creating and destroy- ing association relationships must be included in the A navigational class, in at least one of the navigational contexts with A as their manager class and where a navigational relationship corresponding to r exists in the navigational map.

Case TB2: ?Static? value at the B class association- end.

Objects of class A are not allowed to create or destroy any association relationship of r to objects of class B along their existence.

Design Rules: Navigational classes of A are not al- lowed to include operations for creating and destroying relationships of r to objects of class B.

In the example, due to the ?Dynamic? value for the Works In association-end of the Researcher class (Case TB1), the add researcher and del researcher operations have been included in the Research Line navigational class of the Research Line Info navigational context (shown in Figure 6).

In the same way, the ?Dynamic? value of the other Works In association-end, corresponding to the Research Line class, forces the inclusion of similar operations in the Researcher manager class of the Researcher Info naviga- tional context.

The ?Dynamic? value for the In Charge Of association-end of Resource class (Case TB1) justify the inclusion of operations add resource and del resource in Researcher manager class of Researcher Info naviga- tional context (Figure 6).

The ?Static? value for the In Charge Of association- end of Researcher class (Case TB2) prohibits to include these kind of operations in some Resource navigational class.

4.3 Resulting Web Application  As a result of the application of the described rules, we obtain a Navigational Model. Following the ?Solution De- velopment? step proposed by the OOWS approach, a set of linked pages representing the navigational contexts is gen- erated for each navigational map. Figures 8 and 7 show two pages corresponding to Research Line Info and Researcher Info navigational contexts, respectively:  In Figure 8, we can distinguish an instance of Research Line navigational class (see area 1) showing the name and description of the research line, and the add researcher and del researcher operations by means of buttons. Area 2 shows the researcher associated to the research line of the area 1 retrieved by means of the corresponding navigational relationship.

Figure 7. Research Line Info Web page  Figure 8. Researcher Info Web page  In Figure 7, we can see a Web page corresponding to the Researcher Info navigational context. Area 1 shows an instance of the Researcher navigational class, and Area 2 provides buttons for activating add resline, del resline, add resource and del resource operations. Area 3 shows the research lines related to the researcher through the con- text relationship defined over the Works In aggregation. The name of each research line acts as the anchor (link attribute) to the Research Line Info page. Finally, Area 4 shows the resources related to the researcher through the context de- pendency relationship defined over the In Charge Of asso- ciation.

In addition, we can infer the structure of the navigational map from the created contexts, considering the context rela- tionships that have been included. Other considerations of navigational design allow the modeler to label the naviga- tional contexts, classifying them as exploration or sequence contexts. Figure 9 shows the part of the navigational map for this case-study.

According to the navigational map shown in Figure 9, users can access information about any particular research  Proceedings of the First Latin American Web Congress (LA-WEB 2003)    User  ?context? Researcher  Info  E  ?context? Research Line Info  E  Figure 9. Part of the Navigational Map  line and researcher, due to the type (exploration) of both contexts. Furthermore, from a particular research line, users can navigate to its associated researchers, and from any re- searcher, users can access the information of the research lines he/she is member of. In this way, an easy way of inter- action is provided to application users, with a meaningful and intuitive navigational semantics.

5 Conclusions  This paper analyzes how the semantics of Association, Aggregation and Composition relationships in OO concep- tual modeling can help to build Navigational Models for Web Applications. The work has been developed in the context of OOWS (a Model-Driven Development Method for building Web Applications). We have studied structural and behavioral properties of those conceptual abstractions in order to extract knowledge to be applied in the construc- tion of navigational models. A set of navigational design rules has been proposed taking this knowledge as an input.

This guide provides rules that help the modeler to build nav- igational models in a systematic way.

The results of this work will improve the modeling and code generation processes introduced by OOWS. As shown in the example, the presented rules have been successfully applied helping us to build navigational models. Although these rules can help the modeler to build complete and co- herent specifications, they are not mandatory and the mod- eler can decide when to apply them or not.

To provide this flexibility and taking these rules as a ba- sis, we are defining a wizard to guide the construction of navigational specifications in a systematic way. Currently, we are working on detecting new rules in order to complete the whole pool of properties to be used by that wizard. In particular, we are studying association relationship proper- ties combinations and relationships with other existing con- ceptual modeling primitives.

