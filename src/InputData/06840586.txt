Association Rule Discovery Based on Formal  Concept Analysis

Abstract?Association rule discovery, as the kernel task of data mining, has been studied widely. However, most algorithms based on frequent item sets have to scan databases many times.

This reduces the algorithms? efficiency. Formal concept analysis is a useful tool in many fields. In this paper, an association rule mining algorithm is proposed based on the formal concept analysis. Through analysis the relationship between concepts in different levels, we can simplify the process of discovery association rules. Experiments on real dataset demonstrate the effectiveness of our methods.

Keywords-formal concept analysis; association rule; Concept lattices ;data mining

I. INTRODUCTION Association rules mining is an important task in data mining  and knowledge discovery. They have been applied in so many fields, such as basket analysis, text mining, web mining and other fields. Numerous efficient algorithms are available in the literature for mining frequent item sets and association rules.

Certain association rules enhance the business value and the data mining community has acknowledged the mining of these rules of interest since a long time. The most famous algorithm of association rules mining is apriori[1]. The problem of apriori algorithm is that it produces a large number of candidate item sets and requires frequent scan databases. Many studies show that formal concept analysis if an effective tool for extracting rules.

Let I = {i1, i2 ...., im} be a set of literals, called items. Let D be a set of transactions, where each transaction T is a set of items such that T subset I.

Definition 1. Let I = {i1, i2... im} is the set of all items in a database; D is the set of all transactions in the database; each transaction T is a collection of some of the items, T contained in I, each with a unique transaction identified as TID. Let X be a collection of some of the items, if X T? , called transaction T contains X, association rule is expressed as X Y? , where  , ,X I Y I X Y? ? ? ? ? .

Support measures fraction of transactions that contain both  X and Y. Given a rule X Y?  and N being the total number of transactions then the support of an association rule is defined as.

Support = (X union Y )/ N  Confidence measures how often item in Y appear in transactions that contain X. Given the rule X->Y its confidence  is defined as follows.

Confidence = X union Y / X  The problem of mining association rules is to generate all association rules that have support and confidence greater than the user-specified minimum support (called minsup) and minimum confidence (called minconf)  respectively. Mining association rules basically consists of two phases: (1)compute the frequent itemsets w.r.t the minsup, and (2)generate rules from the frequent itemsets w.r.t the minconf.

The rest of the paper is organized as follows. In Section II, we introduce the formal concept analysis and algorithms for constructing concept lattices. In Section III, describes data structures we use during the computation and introduces the algorithm for constructing concept lattices, Section IV we comment on the implementation of the algorithm and its performance.



II. FORMAL CONCEPT ANALYSIS Formal concept analysis (FCA) [2, 3] proposed by Wille in  80?s. It is a formal, generic framework, generally associated with the fields of data mining and knowledge discovery. FCA starts with a formal context, which represents a raw data. It provided a mathematical framework for the knowledge discovery and concept lattice structure.

A formal context is a triplet K=(G,M,R),Where G is a set of objects, M is a set of attributes and R is the relation between G and M. Each relation ,o a R? represents that a object o  is in a relation R with an attribute a and is read as ?the object o has the attribute a?. The input for FCA is a cross data table with rows corresponding to objects, columns corresponding to attributes, and table entries being 1 or 0.Fig.1 shows an example of a formal context in a cross table form. In this paper, we are going to use a set ? 0,1, ...G n? of objects and a set  ? , , ...,M a b z?  of attributes. A concept in K is a pair of ,A B , where A is the set of all objects which have all attributes from B, and B is the set of all attributes shared by all objects from A.

In this concept, A is called extent and B is call intent.

? |  each o G: ,A a M for o a R? ? ? ? ?  ? |  each a : ,B o G for M o a R? ? ? ? ?   DOI 10.1109/IMCCC.2013.196     The most common algorithms for computing formal concepts include Ganter?s algorithm [4], Lindig?s algorithm [5], and Berry?s [6] algorithm. Formal concepts can be partially ordered by a subconcept-superconcept hierarchy. If    1 1 ,A B  and   2 2 ,A B  are formal concepts of the formal  context K=(G,M,R),  1 1 ,A B  is called a subconcept of    2 2 ,A B if   1 2 2 1 A A or B B? ?  and is denoted by     1 1 2 2 , ,A B A B? ,   2 2 ,A B  is called a superconcept of   1 1 ,A B  and is denoted by   2 2 1 1 , ,A B A B? .

Figure1. formal context  Consider a formal context corresponding to the incidence data table from Fig.1. The concept-forming operators induced by this context have 16 concept C1, . . . , C16 .

?  ? 1 1, 2,3, 4,5 ,c ?  ,  ?  ? 2 2,3, 4,5 ,c a?  , ?  ? 3 2 , ,c a b?    ,  ?  ? 4 2, 4, 5 , ,c a c? , ?  ? 5 2, 4 , , ,c a c d? , ?  ? 6 4 , , , ,c a c d f? , ?  ? 7 2, 5 , , ,c a c g? ,  ?  ? 8 5 , , , ,c a c e g? , ?  ? 9 2 , , , ,c a c d g? ,  ?  ? 10 1, 3 ,c b? , ?  ? 11 1 , , , , ,c b c e f g? , ?  ? 12 1, 2, 4, 5 ,c c? , ?  ? 13 1, 5 , , ,c c e g? ,  ?  ? 14 1, 4 , ,c c f? , ?  ? 15 1, 2, 5 , ,c c g? , ?  ? 16 , , , , , , ,c a b c d e f g?  The set of all concepts constructs a concept lattice and there are several algorithms to compute concepts and concepts lattices from a given formal context.

The line diagram in Fig.2 shows an example of the  concept lattice for the formal concept in Fig.1.

From Fig.2 , we can see that the concept c3 is sub concept of c5 because the extent of c3 is the subset of c5 and the intent of c5 is the subset of c3.There are many partial orders in the lattice, such as 2 4 5c c c? ? , 12 1?5 13c c c? ? .



III. MINING THE ASSOCIATION RULES In this section we will introduce our algorithm RFC of  association rule mining based on formal concept analysis.

In the concept lattice, there is an edge (ci, cj) if ci<cj, and there is no other element ck in the lattice such that ci<ck<cj.

The lattice reveals the generalization/specialization relationship between the concepts corresponding to the subset  relationship between the extension and intension of the concepts. There are so many algorithms to generate the concept lattice [7, 8, 9, 10]. The concepts in the lattice have the partial relationship. These partial relations can be used to find the association, but there are so many redundant rules. For example, in Fig.2, concept c2 is the super concept of c4 and c5, then the rules introduced from c2 is the redundancy rules of c4 and c5. Our algorithm is to generate the concept lattice not include the superconcept such as c2.

c1  c2               c10                            c12  c4                             c15                  c14  c3                c9              c5            c13 c11  c8               c7            c6  c16  Figure2. concept  lattice  First, we calculate the closure of any concept. It generates a new concept from an existing one by enlarging its intent and shrinking its extent. In this step, if a concept has no new concept, then delete the concept from the concept set. It means we do not generate the super concept of any concept. It means that, for example, in fig.2 we do not generate the concept such as c2, c12. But we generate c1 although it is the sub concept of all concepts, because it has no mean for discovery association rules.

Algorithm 1. Compute the Closure of one concept (<A,B>, y)  Input: the concept <A,B>  and one attribute y  Output: formal concepts  Begin:  for i from 0 to m do  Set c[i] to 0  for j from 0 to n do  set d[j] to 1  sumd=n;  for each I in [ ]A rows y?  do set c[i] to 1  for j from n down to 0 do  if A[I,j]=0 then  if d[j]=1  R a b c d e f g 1 0 1 1 0 1 1 1 2 1 0 1 1 0 0 1  3 1 1 0 0 0 0 0 4 1 0 1 1 0 1 0  5 1 0 1 0 1 0 1     Begin  set d[j]=0  sumd=sumd-1  End  If d[n]=0 then  Begin  N=n-1  Sumd=n-1  End  If <C,D>  is not new then  Delete   <A,B>  Else  Return <C, D>  Second step is discovery the association rules from the concepts generated from Alg.1. Discovery the association rules according to user-specified minimum confidence and support.

First, we calculate the support of any association rule. If the association rule is not large than the minimum support, then stop to calculate the confidence, else continue to calculate the confidence. If the confidence larger than the minimum confidence, then output this association rule, else go to next.

The algorithm is described as Alg.2.

Algorithm 2.  Discovery the association rules  Input: the concept sets C, minimum confidence, minimum support Output: association rules FOR EACH attribute ai of c in C FOR j:=1to |c| IF support (ai, aj)>minimum support then If confidence (ai, aj)>minimum confidence then Output ai, aj END IF END FOR END FOR

IV. EXPERIMENT RESULTS Our algorithm was implemented in JAVA and the computer  equipped with Intel Core 2 Duo(2.19GHz) processors,2GB RAM  and Windows XP system. We use the UCI adult data sets and mushroom data sets to test our algorithm. The adult data set has 27039 records and fifteen attributes. The mushroom data set has 8124 records.

First, we transfer the two data sets to the formal context.

Then, we use Apriori and our algorithm RFC to discovery the association rules. TABLE 1 shows the number of rules with n length.Fig.3 shows the rule number of the two algorithms under different min_sup and min_conf.

From these experiments, we can see that our algorithm RFC can reduce the number of association rule. RFC discover the simplest association rules and don?t have redundant rules.

