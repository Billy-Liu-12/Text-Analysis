<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">Proceedings

Abstract: Association rule mining h an important researeh branch of Data mining. However, most algorithms based on the tkpuent itemsets have to scan data- many times. This paper p m n t s  an algorithm that can tpnd association rules quickly. The algorithm is based on the concept lattice and can certify all assoeistion rules with only one scan of databases.

Firstly, this paper dislrres the principle of building the concept lattice, and then it describes the assoeistion rules mining algorithm based on concept lattice. At last the paper proves the efficiency and advantages of this algorithm by several experiments.

Keywords: '; KDD; Data Minlng; Association rules; Concept lattice 1. Introduction As an important pattern of Data Mining, association rule has been receiving much attention 'from miny researchers. Since Agrawal presented Apriori[ Ilalgorithm, there have been many other algorithms that have emerged, such as F P - p w d 9 b y  Han, J., CLOSETL1']by Pei, J. and Ha&amp; J.,CHARML191b Zaki and so on. Apriori and some improved alg~rithm~~~~~~'~~~'zO'will generate a huge number of candidate itemsets, especially for m g  long patterns.

And the most crucial disadvantage is that they need to repeatedly scan the databases and check a large set of ,candidates by pattem matching. The FP-growth algorithm method transforms the problem of finding long frequent patterns to looking for short ones recursively and then concatenating the suKi%ut it also need to scan the databases repeatedly . To design a method to quickly mine association rules with only one scan of databases, this paper presents an algorithm based on the concept lattice.

The concept lattice built on binary relationships by WiUe.R.'41has become a kind of forms to represent knowledge and an efficient tool to analyze data and draw rules. It has been applied in many field'611121such as knowledge engineering. Furthermore, research hitherto demonstrates that among the sets of the association rules there exits a kind of partial order that can be explicitly expressed by the concept lattice, and by the concept lattice the association rules, classification rules and equivalent rules can be mined quickly and easily13'~s"'2"'31'1~. Several methodP1'Io1to build the concept lattice have been studied.

Most definitions used here are formal standard ahd others are from EcL1311171by Hu X,~Plll'2111311171 his paper is Organized as follows: section 2 of the paper 'describes some formal standard and other new definitions; section 3 introduces the principle and method of building concept lattice; section 4 describes the algorithm for fmding association rules in detail, and section 5 proves the efficiency of OUT algorithm with a comparison with Apriori and this comparison is based on theoretic consideration and concrete run time experiments; At last, the paper concludes with a summary of the results.

2. Related Concepts  First, we give some standard definitions of Formal Concept Analysis[Z][lO] and some new definitions[31[171: Definitionl[Z]: A Context. is defined as a aiple C=(O,D,R),where 0 is the set of objects, D is the set of attributes, and R is the b m q  relationship between 0 and D.

A couple (A$) derived from context is called a concept,    A couple (A$) derived from context is called a concept, whereAGO,BGD,B'=[gE OIVm? B,gRmJ=A.

In the ECL, If Bl'=B2', then B1 and B2 are called equivalent basic intensions. Denote Equ(A)={BlIBl'=A).

Define C=(A, Equ(A)) as extended concept, or simply called concept in ECL.. We also denote the concept &amp; CO'), where T is the intension.

D e f ~ t i o n  2'Io1: The partial order is used to generate the lattice graph in the following way: there is an edge (CI,C2) if Cl&lt;C2 and there is no other element C3 in the lattice such that Cl&lt;C3&lt;C2. C1 is called parent of C2 and C2 child of C1.

Definition 3: If B1 C B 2  ,then C1 is sup concept of C2 ,and if for every concept 'Cd belonging to the sub concept of C1, there does not exit Cd=(Ad, Bd)satisfying .BdCBZ, then C1 is a immediate sup concept of C2 and C2 1 687 26-20 August 2004 is a immediate sub concept of C1.

is derived according to the relation "&lt;" between concepts.

concept lattice to mine association rules.

3. Building the Concept Lattice Definition 4[31['71:The Extended concept lattice(ECL) Now based on these definitions we build the needed Firstly, to improve the efficiency of building concept lattice, some tecbnologies are introduced, such as setting index and using proper data structure to store intensions. In the process of scanning the database, we count the number of records and the cardinality of the attributes, and establish the index based on these numbers. For the fact that the indices occupy very little space, we can deal with records as many as possible in the limited memory and build concept lattice with only one scan of database.

Secondly, we improved thetraditional godin algorithm by changing some searcbing path of the algorithm. Our concept lattice is built by incremental formation algorithm through inserting records into the lattice from up to down.

And the concept C=(A,B) being insetted may be along different paths searched according to its concrete intension so as to minimize the number of concepts searched. In godin algorithm, when a new concept is being inserted, it must compare with every one in the concept arrays. And the complex intension comparison in godin algorithm is a time resuming work. While in our algorithm, all of intensions are only their address in the index, so the work becomes easier.

And thirdly, when a database is linked, in the process 'of building index and initiating the concept lattice, records are converted to.initial concepts whose extension only contains one element and one important method we use is that if the intension of concept C1 and that of C2 are equal, then the extension of C2 are merged into that of C1 and delete C2. By.this way, we can greatly reduce the number of, concepts searched when inserting a concept.

Fuirhemore, taking into account that the characteristic of the concept lattice, the complete concept Ctop=(all,( 1) and the empty concept Cbottom=([),all) can be easily built fustly. When inserting a concept C=(A,B), Ctop can be directly set as the sup concept of C, and the Cbottom as the  immediate sub concept of C. At last, when looking for the immediate sup concept of C (the concept being inserted), if there is a concept Ca =(Aa,Ba)wbicb is sup concept of C, and the intension Bd of one of its immediate sub concepts satisfying BdcBa ,  then the searching process can switch to another immediate sup concept of C without scanning all of tIie immediate sub concepts of Ca.

Algorithml: (brief code) Initiate () [scan database and set the indices once, construct bit set and initiate as empty; ) BuildingConceptLattice() 1    BuildingConceptLattice() 1 merged concepts with same intensions; Ctop=(all,l 1): Cbottom=({ ),all); set CurrentConcept[i] =( Ctop , Cbottom); Temp[i]=( ] storing possible immediate sup concepts; For ( every Ci in CurrentConcept[i])( If Ciintension G C.intension Then ( Ci.extension+=C.extension; Add Ci to Temp[il; I If Ci.intension=C.intension Then exit Else ( Tempintension=Ci.intension  Cintension; For( every C, in Temp[lTempntensionl])( If C,.intension=Tempintension Then exit; generate new concept C': c' .extension=Ci.extension U C.extension: c' .intension=Tempintension: Temp[lTempintensionl]+== : CnrrentConcept[lC'.intensionl]+=C' ; C'.childem[l+$; C+parent[l+=C': Forfj=O tolc'intensionl-1) I Fodevery concept C. in Tempti])( If C..intension C Tempintension 1 isparent=rme; For( every immediate sub concept C, of C.) (If Cd.intension C Tempintension isparent=false; break, I If isparent==true Then( If C..intension C Ci Then 1 C..children[l-=Ci; Cj.parent[l-=C.;) C..children[lt=C.'; c'.parent[l+=G;) I I 1  I 1 In the above we discuss the improved algorithm for building concept lattice, and with the help of the index, the concept lattice can be built with only one scan of database.

Thus can expedite speed of mining association rule from the concept lattice to some extent.

4.

I Mining Association Rules Using Concept Lattice Apriori is based on the fact that the algorithm uses priori knowledge of frequent itemsets properties, but it employs an iterative approach known as a level-wise search, where Lk are used to explore Lr+,. The process generates a large amounts of candidates. And its perfom'ance is poor especially for mining long pattems. When it comes to the dynamic databases, even the transactions are added only one, Apriori will has to repeat all of its process. .However, when the databases change the scale, using concept lattice 26-29 August 2004 can generate all frequent itemsets due to its maintainability, not to mention its only one scan of databases. For the method of generating association rules from frequent items is simple, here we focus on how to find frequent items from the concept lattice.

Let I=(&amp; i2, ... im} be a set of items. An association rule is an implication of the form X=&gt;Y, where X=X=Al A ..... A Am, Y= B1 A ...... A Bn, X&lt;I,Y&lt;I and X n Y is empty. The rule X=&gt;Y holds in the traction set D with suppott and confidence: support(X=&gt;Y)= Po( U Y); confidence(X=&gt;Y)= P(YIX);given the minimum suppott threshold min-sup.

TheoremZ:For the concept C=(A,B),suppolt(B)=lAVIDI, where IAl is the cardinal number of extensions of C and ID1 is the total number of the transactions of database D.

If support(B)&gt;min-sup. then B is frequent and belongs to    If support(B)&gt;min-sup. then B is frequent and belongs to LIB1 (the IBI-frequent itemsets).

Theorem2:For the concept C=(A,B), suppose Ci=(Ai,Bi),i=1,2 ,...... U are the immediate sup concepts of C and B is frequent, Then Bi is also frequent and LIBI&gt; LIBiI; If Bf=B-Bl U _..... U Bn=(Bfl, Bf2 ,._. Bfj,.:.Bfk), then BO is frequent and B, Bf and Bfj compose the basic frequent itemsets.

Theored.For the concept C=(A,B) and i=(Ai,Bi) , i=1,2 ,...... n, if Ci is the immediate sub concept of C, and B is not frequent, then Bi is not frequent.

Theorem 4 In the basic frequent itemsets, suppose the maximal frequent ,itemsets is Lm, then Lm can not generates Lm+l when finding all frequent itemsets.

Theorem 5: In the basic frequent itemsets, t l  contains all the I-frequent itemsets.

Theorem 6Fmd the (k-1)-subset s? of every itemset s in Lk, a l l  of the (k-1)-subsets are frequent; If there does not exit s? in Lk.l where sup&gt;sup(s?), then it is impossible to fmd s? in in Lk., where sup&lt;sup(s?), and in Lk there is not an itemset ss? whose (k-1)-subset contain a set eqhal to s?.

Based on these theorems described above, after buildhg concept lattice, one scan of it can generates all frequent itemsets without another. scanning the database.

When all frequent itemsets are found, association?ru1es can he generated as foUows[ll]: for each frequent itemset B, generate all nonempty subsets of B; for every nonempty subset 8? of B, output the rule ?B?=&gt;(B-B?)? only if support(B)/suppoa(B?)&gt;min-conf, where min-conf is the minimum confidence threshold.

AlgorifhmZ:( brief code of findmg frequent itemsets using concept lattice, see right page) FindFrequentItems(min-sup) I FindBasicFRquentIt(min-sup); FindOtberFrequentItem(L, k); Prin@requentItems(t); I FindOtherFrequentIt(L, k) 1 while @2) do for every k-itemset in LK do( Get-k-l-SubsetOfLK; do while (sup&gt;sup(s?) fors in Get_k-lSubsetOfLK do if not in LK.I then add s into LE.,; 1 5. Experiments and Analysis 5.1. Results of experiments to prove validity On the platform J2SE1.4.0, we build the concept lattice to mine the association rules and in the same time, we use godin algorithm to prove the correctness of our  improved algorithm. Suppose the min-conf=0.8 and min_sup=2/(the number of records according to specific database), on some random test databases we mine the association rules using our algorithm and the Apriori algorithm to prove the validity of our algorithm, and by comparing with the rules mined by the two methods we can prove the high quality of the association rules. The results of exoeriments are shown as Table 1: Table 1. comparison of building concept lattice and mining rules 18 48 48 16 99 99 nofe:[nre: number of records; na: number of attributes: nc:number of concepts; mumumber of rules; algl: our algorithm for building concept lattice; alg2: our algorithm for mining rules from concept lance;] And the result of comparing the quality of rules mined using OUI method with that from apnori tells us that we need less time to get association rules with the same quality as those from apriori.

Next we use large database from real Life to compare the efficiency with the Apriori algorithm.

the efficiency with the Apriori algorithm.

5.2. Results of experiments to prove etliaency The experiment platform is J2SE1.4.0. The following Table 2 shows our test result.

26-29 August 2004 note: [tl:time for mining rules used concept lattice,including building concept lattice; t2:time for mining mles used apriori.] Experiments prove that the frequent itemsets mined using the two different methods are same and the quality of those rules is high. AU the rules are strong.

Use the database2, Fig 1 shows the concrete runtime for incremental building concept lattice .and a group of bansactions are inserted once; Fig 2 shows the runtime comparison between finding frequent itemsets using concept lattice(time for building lattice included) and using Apriori algorithm. Experiments prove that our algorithm?s performance is much better than Apriori.

The total time of building concept lattice and finding frequent itemsets is shorter than?that of Apriori as shown in Fig 2. So our algorithm is a better choice for mining association rues in large or dynamic database.

6.? Conclusions In this paper we present a fast algorithm of mining association rules using concept lattice. After ?introducing the principle a d  the improved algorithm for building concept lattice, we describes the algorithm of finding association rules using concept lattice in detail.

Furthermore, based on the theoretic consideration and concrete run time experiments?we prove the efficiency and advantages of the algorithm.

