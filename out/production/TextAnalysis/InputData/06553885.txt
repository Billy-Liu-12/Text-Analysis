

COf"!lputer Science & Education (ICCSE 2013) April 26-28, 2013. Colombo, Sri Lanka SaP2.7  Association Rules Mining for Discussion Information  in Group Deliberation Support System  XIONG Cai-quan* School of Computer Science  Hubei University of Technology Wuhan, China  x_cquan@163.com  CHEN Shao-bin DING Ming School of Computer  Hubei University of Technology Wuhan, China  School of Computer Hubei University of Technology  Wuhan, China dingming2008@163.com csb_tom _ new@163.com  Ahstract-The purpose of group deliberation support system  (GDSS) is to support cooperative group to discuss and reach consensus. In the course of deliberation, the group will produce a  lot of discussion information, in which the consensus is hidden.

This paper presents a method to analyze the discussion  information in GDSS. We first design the discussion information  structure based on Toulmin formalism, and then introduce an  improved algorithm called aprioriTid for association rules  mining. Finally, we use an example coming from the group  deliberation support system called DTS to validate the  effectiveness of the method.

Index Terms-Group deliberation support system; Discussion  Information; Association Rules; ApriorTid Algorithm

I. INTRODUCTION  Deliberation is a form of group thinking which involves a group of experts to interchange their opinions about a given topic, to propose a claim, or to use evidence and reasons to support or oppose a proposed claim[l]. The aim of the deliberation is to decide what action or course of action should be adopted in some situation[2]. The process of deliberation can be roughly divided into two stages, one is brainstorm which stimulates participants to propose claims as much as possible, and the other is consensus building which guides the group decision making. Deliberation produces a lot of discussion information, which make experts submerged in the ocean of information and can not catch the essence of the problem, so it is necessary to collect, manage and analyze the discussion information. Group deliberation support system (GDSS) is a computer system which guides the group to discuss efficiently. The role of GDSS is to record the discussion information, and show the status of consensus building real-time.

There are three aspects of the research on deliberation and group deliberation support system. One is formal model of deliberation[ I], the second is design and implementation of  GDSS[3], and the third is data mining for discussion information[4]. Formal model is the basis ofGDSS, while data mining is the extension application of GDSS. There are a lot of researches on the formal model of deliberation, such as Toulmin[5], lBIS[6] etc., and some systems such as Belvedere[7], Reason!Able[8], ECBAR[9] etc. have been developed. Unfortunately, there are few researches on data mining for discussion information.

This paper uses association rules to analysis the discussion information, and applies the method in a group deliberation   support system named DTS. The remainder of the paper is  organized as follows. Section II designs the discussion information structure based on Toulmin formalism. Section III introduces association rules and aprioriTid algorithm. Section  N applies association rules to analysis the discussion information, and uses an example to verifY the feasibility of  the method. In Section V, we draw our conclusions and point out the future works.

IT. DISCUSSION INFORMATION STRUCTURE  The purpose of the design of discussion information structure is to divide the expert's speech into several parts that can be saved in the database, by which we can query and analyze the discussion information using the technology of database. The association rules mining in this paper is just based on the structured discussion information.

The most famous structured discussion model is Toulmin model[5], which founds six components of arguments, such as claim, data, warrant, backing, modality and rebuttal. All components of Toulmin model can be implemented by database technology. So a discussion information structure based on Toulmin model is practical for us. However, Toulmin model has too many components, which will make the database more complex. Most of the works are to simplifY Toulmin model. Mitroff and Hamalainen[IO] presented Premise-Warrant-Claim model, in which the premise refer to the data in Toulmin, while backing and rebuttal are ignored.

In the work of Ramesh and Whinston[ll], a Claims? Arguments-Proposals model, and a dialog grammar were presented. However, those simplified Toulmin argument structures are not feasible to be applied in the design of discussion information structuring because they lack the important component-"modality". Modality plays an important role in the connection of expert and claim, and reflects the experts' attitude to claim. The integration of experts' attitudes is the source of consensus building.

In this paper, we use a model of Premise-Warrant? Modality-Claim model[2], which incorporates the above two models and is easy to be implemented in group deliberation support system. The core of Premise-Warrant-Modality? Claim model is modality and claim. Claim is the object of experts' argument, while modality reflects the expert's attitude to claim. The premise and the warrant are complementary to the expert's attitude. Backing is an argument that strengthen claim, and Rebuttal is a argument that weakens claim, so we    can take backing and rebuttal integrated into modality. Thus, the conceptual model of discussion information can be constructed using a simply ER model as shown in Figure 1, in which an expert can response multiple claims, and a claim can be responded by multiple experts. Modality is the connection between expert and claim.

I expert ? claim Figure I. Discussion Tnfonnation Conceptual Model  We define the tables in database as follows.

Argument Table (expert TD, claim TD, premise, warrant,  modality, time stamp).

Expert Table (expert lD, expert's name, expert's credit).

Claim Table (claim lD, claim details, consensus value).

The connection between expert and claim can be roughly  classified into four types such as propose, support, oppose and query. An expert who proposes a claim will also support the claim, so propose can be looked as support. Query gives no contribution to a claim, so query will be ignored in discussion information analysis.

Ill. ASSOCIATION RULES MINING AND ITS ALGORITHM  A. Association rule mining  Association rule mining, one of the most important and well researched techniques of data mining, was first introduced in [12]. It aims to extract interesting correlations, frequent patterns, associations or casual structures among sets of items in the transaction databases or other data repositories. The formal statement of association rule mining is as follows. Let  I={il' i2, . . .  , im} be a set of m distinct attributes, T be  transaction that contains a set of items such that T ? I, D be a  database with different transaction records. An association rule is an implication in the form of X ----+ Y, where X, Y ? I are sets  of items called itemset, and xn Y=cfJ. X is called antecedent while Y is called consequent, the rule means X implies Y.

There are two important basic measures for association rules: Support(X ----+ Y) and conjidence(X ----+ y), such that:  S (X Y ) I {T:X UY?T, TE D}I  IOO O,  upport ? = X /0 I D I  C ,I';J (X Y ) I {T:X UY?T,TE D}I 1000/ onJluence ? = X /0  I {T:X?T,TE D}I  where I {T : X U  Y ? T, TED} I is the number of transactions in  D that contain X U  Y , I {T: X ? T, T ED} I is the number of  transactions that contain X, and I DI is the total number of transactions in D. Association rule mining is to find out association rules that satisfy the predefined minimum support minsup and minimum confidence minconf from a given database.

B. Apriori algorithm  The best known algorithm for association rule mining is Apriori algorithm. It has two steps:   SaP2.7  i)Find all itemsets that have minimum support (frequent itemset, also called large itemset).

A frequent itemset is an itemset whose support is :::: minsup. It is clear that any subset of a frequent itemset is also a frequent itemset.

ii)Use frequent itemsets to generate association rules.

For each element I in a frequent itemset, for each subset s  .1{T:lcT,TED}1 if of I, If  - xl 00% :::: mincon , then the rule of I{T:s?T,TED}1  s----+(l-s) will be output.

Apriori algorithm is described as follows:  Frequent-itemsets-gen(D) 1): F1 ={II iE 1/\ a( {i} )::::minsup} I Ito find 1-frequent-itemsets  Ila( {i}) is support count of {i} 2): for ( k = 2; Lk-1 !=0; k++ ) do 3): Ck=apriori-gen(Fk_1) lito find k-candidate-itemsets 4): for each tE D doll t is a transaction in D 5): Ct=subset(Ck, t)IICt is a k-candidate-itemset in t 6): for each cE Ct do 7): a(c) ++ Ila(c) is support count of c  8): endfor  9): endfor  ): Fk={clcE Ck/\ a(c)::::minsup}  11): endfor  12): return U Fk  apriori-gen(Fk_1) II to generate Ck from Fk-1 1): Ck=cfJ 2): For each IE Lk-1 do 3): For each J#E L;_1 do 4): If(I[I]=J[I] /\ ... /\I[k-2]=J[k-2] /\I[k-I]!=J[k-l]) then  5): {c= I UJ;  6): Ck = Ck UC;} 7): end for 8): endfor  Apriori algorithm has two disadvantages: i) it may produce a large number of candidate item sets, ii)it needs to repeatedly scan the transaction database.

C. AprioriTid algorithm In order to overcome the shortage of Apriori algorithm,  Agrawal etc. put forward aprioriTid algorithm. In aprioriTid algorithm, I-frequent-itemset is produced by the transaction database D , while the k-frequent-itemset(k> 1) is produced by scanning a set h Each member of Tk is of the form <Tid,{Xk}>, where each Xk is a potentially k-frequent-itemset presented in the transaction with identifier Tid. For k = 1, Tl corresponds to the database D, with each item i replaced by the itemset {i}. The member of Tk corresponding to transaction t is as the form of <t. Tid, {CE Ckl C ? t}> where Ck is k? candidate-itemset. For k = 1, C1 = D, for k> 1, Ck is generated by Ck-1? If a transaction does not contain any k-candidate? itemset, then Tk will not have an entry for this transaction.

Thus, the number of entries in Tk may be smaller than the number of transactions in the database, especially for large values of k, so the computing efficiency will be improved.

AprioriTid algorithm is described as follows:  1: LI=find l-frequent-itemset(D)llgenerate I-frequent itemset 2: TI=D; 3: for (k=2; Lk.1 !=0; k++) do 4: Ck = apriori-gen(Lk_1) Ilgenerate k-candidate-itemsets 5: Tk = tidset-gen(Ck, hi); Ilgenerate Tk from Ck and hi 6: for each itemset CtE Tk do 7: if(CtE Ck) a(Ct) ++; 8: endfor 9: Lk={CtE Ckla(Ct)?minsup} 10: Endfor  11: return UFk  IV APPLIES ASSOCIATION RULES TO ANALYSIS THE DISCUSSION LNFORMA nON  A. Transaction database  In group deliberation support system, an expert will propose some claims, or response to claims proposed by other experts.

Association rules mining is used to find the relationship between claims. For example, some experts support a set of claims {C), . .  ? ,Cn}, and when the count of supporting experts exceed a specified threshold, we will see that there are some  association rules among the claims, such as C1 support) {ClI C3} which implies an expert who supports claim C1 will also supports C2 and C3. Similarly, we can also find association  rules such as CI oppose ) {C2, C3} which implies an expert who opposes claim CI will also opposes C2 and C3?  We have applied aprioriTid algorithm to mine association rules for a group deliberation support system named DTS (Discussion Teaching System). DTS is an interactive platform used to enhance students' critical thinking in philosophy.ln DTS, the experts can express their views and can also respond to others or their own views. The type of response can be divided into four such as propose, support, oppose, query. All the utterances are structured according to the model of Toulmin[5] and stored into the database. The system will analyze the claims proposed by experts and output the association rules among the claims.

As an example, nine experts entered DTS and began to discuss. Nine claims {Cj, ClI C3, C4, Cs, C6, C7, Cg, C9} are proposed. The experts' responses to claims are shown in Table T, in which A stands for an expert supporting a claim, B stands for opposing a claim, C stands for not respond to a claim. If we take experts as transactions, claims as items, we can construct the supporting transaction database and opposing transaction database, and do association rules mining to find the relationship among the claims and obtain the group's consensus. We focus on the supporting transaction database which is shown in Table n. The opposing transaction database can be analyzed similarly.

SaP2.7  TABLE I: EXPERTS' RESPONSES TO CLAIMS  claims C1 C2 C3 C4 Cs C6 C7 Cg C9  expert I A A B B A A B C A expert2 B A B A C C B A C expert3 B A A B B C A B A expert4 A A B A C C C B B expertS A B A A B A B A C expert6 B A A C C A B B A expert7 A B A B B A A C B expert8 A A A B A C B A C expert9 A A A C B C B C A  TABLE IT: THE SUPPORTING TRANSACTION DAT ABASE  TID Claims  expert I C], Cb Cs, C6, C9 expert2 C], C4, Cg expert3 C2, C3, C7, C9 expert4 C], Cb C4 expertS C], C3, C4, C6, Cs expert6 Cb C3, C6, C9 expert7 C], C3, C6, C7 expert8 C], Cb C3, Cs, Cs eX12ert9 C], Cb C3, C9  B. Association Rules  Now we use aprioriTid algorithm to do association rules mining in Table 11, setting minsup with 30%, the process of the algorithm is as follows:  TI  TID Set ofItemsets  expertl {Cd,{C,), {C5), {Co}, {C,) expert2 {Cd, {C.), {CB) expert3 {C,}, {C,}, {C,}, {C,}  expert4 {Cd, {C,l, {c.}  expertS {Cd, {C,}, {C4}, {Co}, {Cg}  expert6 {C2l, {C,), {Co), {C,) expert7 {Cd, {C,), {Co}, {C,) expert8 {Cd, {C2l, {C,}, {Cs}, {CB}  expert9 {Cd, {C,l, {C,}, {C,}  TID Set of Item sets  expertl {CI, C,}, {CI, Co}, {CI, C,}, {C" Co},  {C" C,}, {Co, C,}  expert2 {Clo C,}, {C I, Cs}, {C" C,}  expert3 {C" Cl}, {C" C9}, {C" C9}  expert4 {CI, C2}, {CI, C,}, {C" C,}  expert5 {CI, C,}, {C I, C,}, {CI, Co}, {CI. C,},  {C,. C,}, {C" Co}, {C" C,}, {C,. Co},  {C,. C,}, {Co, C,}  expert6 {C" Cl}, {C" Co}, {C" C9}, {Cl. Co},  {Cl, C9}, {Co, C9}  expert7 {CI, C,}. {C I. Co), {C" Co}  expert8 {CI. C,}. {CI, C,l. {CI, C,}, {C" C,},  {C" C,}, {C" C,}  expert9 {CI. C2}, {CI, Cl), {CI, C,}, {C" Cl},  {C" C,}, {C,. C9}  LI  Itemset Support  {Cd 7  {C,) 6  {C,} 6  {C4}  {Co} 4  {Cg)  {C,} 4  Itemset Support  {CI, C,} 4  {CI, Co}  {C" C9) 4  {CI, C,}  {CI, C,}  {C2, C3} 4  {Cl, C9}  {CI, C,) 4  {C" Co)    TJ LJ  TID Set of Item sets Itemset Support  expertl {C" C" C6), {C" C', Cg} {C" C3, Cg)  expert2 {C" C4, Cs)  expert3 {C" C), C9)  expert4 {C" C" C4)  expert5 {C" C3, C4), {C" Cl, C6),  {C" C3, Cs)  expert6 {C" Cl, C6), {C" Cl, Co),  {C3, C6, C9)  expert7 {C" C), C6)  expert8 {C" C2, Cl), {C" C2, Cs)  expert9 {C" C', Cl), {C" C', Cg),  {C2, C3, C9)  Figure 2 The process of generating large item sets  After running aprioriTid algorithm, we can obtain the result shown in the figure 2. I-Frequent-itemset(L)) is generated by T1 which corresponds to the supporting transaction database contained in Table I. T2 is generated by referencing to 2- candidate-itemset(C2, which is omitted in figure 2) and the supporting transaction database(Table IT). 2-Frequent? itemset(L2) is generated by scanning h The algorithm stops when the last frequent itemset T.1 is generated. All the frequent itemsets are as follows: {C], C2},{C], C6},{C2, C9}, {C], C4}, {C), CS}, {C2, C3}, {C3, C9}, {C), C3}, {C3, C6}, {C2, C3, C9}. If we set confidence threshold as 75.0%, the association rules is as shown in Table Ill.

T ABLE TIT: ASSOCIA nON RULES TID support confidence  C6--+C1 33.3% 75.0% C9--+C2 44.4% 100% C4--+C1 33.3% 100% C8--+C1 33.3% 100% C9--+C3 33.3% 75.0% C6--+C3 33.3% 75.0%  75.0%  According to the above generated association rules, we can see that: if an experts support claim C6, he(she) will also supports claim C) with the possibility of 75.0%; if an experts support claim C9, he (she) will also completely supports claim C1(the confidence is 100%); if an experts support claim C9, he(she) will also supports both claim C2 and C3 with the possibility of 75.0%, ect.. We can also do clustering analysis based on the association rules. In the above example, we can see there are some claim clusters such as {C2, C3, C9} ect.. The results of data mining will guide experts to think convergently and improve the consensus building.

TV. CONCLUSION AND THE FUTURE WORK  GDSS is a useful tool for group discussion. The aim of GDSS is to help experts to think and reach consensus. The process of group thinking can be roughly divided into two stages, one is brainstorm in which GDSS guides experts to propose claims as many as possible, the other is consensus building in which GDSS guides experts to think convergently.

SaP2.7  Convergent thinking needs some auxiliary information which can be produced by data mining. This paper uses aprioriTid algorithm to mine association rules among claims, and uses an example in DTS to verify the effectiveness of the method.

The results shows that association rules mining can find some interesting model among the proposed claims and help the group to do consensus building efficiently. The next work is to do association rules mining both in supporting transaction database and opposing transaction database and do clustering analysis.

ACKNOWLEDGEMENTS  This research is supported by National Natural Science  Foundation of China under grant number 61075059, and Key Program of Hubei Provincial Department of Education in China under grant number D20 101402.

