A Step Toward Foundation of Class Diagram Algebra for Enterprise Service Systems

Abstract-An enterprise service system is large and com plex and manages big and complicated data. A large set of partial data models are used during designing an information system for a large enterprise because each service application consisting of an enterprise service system uses only a part of big and com plicated data in most cases. The skill of modelers makes fluctuation and discrepancy among data models. It is necessary how to keep consistency among data models. There are several diagram methods to support data modeling. The Unified Modeling Language is a popular standard modeling language. A class diagram is describing a static view of data model. There are two kinds of inconsistency among data models described in class diagrams. One is inconsistency within a data model described in a class diagram. The other is inconsistency depending on operations for class diagrams. We present syntax of a class diagram describing a data model for syntactical foundation for class diagram algebra. Then we introduce syntactical merger, remain, complement and intersection operations on class diagrams.

Consolidation and restoration conditions keep consistency of class diagrams syntactically during results of those operations.

Index Terms-class diagram algebra, data modeling, Unified Modeling Language

I. INTRODUCTION  A N enterprise service system is large and complex andmanages big and complicated data. It is very hard to handle big and complicated data. For example, it is difficult to describe a big and complicated data model of an enterprise service system into one diagram. A large set of partial data models are used during designing an information system for a large enterprise because each service application consisting of an enterprise service system uses only a part of big and complicated data in most cases. This situation raises a risk of embedding inconsistency caused by modelers' mistakes because the skill of modelers makes fluctuation and discrepancy among data models. And inconsistency within the set of partial data models decreases the quality of the data model. Without dependency of modelers' skill, formal  Manuscript received February 2 2009.

Hidekazu Enjo is with NTT DATA CORPORTATION, 3-3-9 Koto-ku,  Tokyo 135-8671, Japan (phone: +81-50-5546-2297; fax: +81-30-3532-0488; e-mail: enjouh@nttdata.cojp).

Motonari Tanabu is with Yokohama National University, 79-4 Tokiwadai, Hodogaya, Yokohama 240-8501, Japan. (e-mail: tanabu@ynu.acjp).

Junichi Iijima is with Tokyo Institute of Technology, 2-12-1 Ookayama, Meguro-ku, Tokyo 152-8550, Japan (e-mail: iijimaj.aa@m.titech.acjp).

operations like merger and remain are preventing inconsistency for manipulating partial data models. However, it is unclear which operations for partial data models have well properties keeping consistency among data models.

There are several diagram methods to support data modeling.

The Unified Modeling Language (UML) [1] is a popular standard modeling language, especially for object oriented design. A class diagram, which is a type of UML diagrams, is describing a static view of data model. It is necessary to clear how to keep consistency among class diagrams.

There are two kinds of inconsistency among data models described in class diagrams. One is inconsistency within a data model described in a class diagram like differences between attributes, data types, or multiplicities of same name classes [2], [3], [4]. The other is inconsistency depending on operations like merger and remain for class diagrams. Because a class diagram as result ofan operation isn't always consistent even if there is consistency in each data model as augments of an operation. In this paper, we focus the latter situation and propose consistent operations toward class diagram algebra.



II. MERGER AND REMAIN OF CLASS DIAGRAMS  It is easy to merge two parts of class diagram like class diagram X - Fig. 1 - and class diagram Y - Fig. 2 - and the result is class diagram Universe - Fig. 3 - because same classes are merged into one class in a result diagram and same associations are merged into one association of that.

A remain operation is one of the basic operations for dividing and analogized as difference of set. But remain operation is a little different from difference of set. If the class diagram Y is remained of class diagram Universe and class diagram X, class diagram X includes class Order and class OrderDetails but the remain result as class diagram Y also includes Order and OrderDetails. Because association PO in class diagram Y is relating those classes.

However, there are several ways to divide a large class diagram like Universe into parts of class diagram like X and Y or X and Z - Fig 4 - because the result of merging two parts of class diagram as class diagram X and class diagram Z is as same as class diagram Universe.

If class diagram Universe is the whole class diagram, class diagram Y is complement of class diagram X. Because class diagram Y is remained of class diagram Universe and class diagram X. Class diagram Y is complement of class diagram X and class diagram X is complement of class diagram Y. It     means that class diagram X is double complement of class diagram X. However, class diagram Y is also a complement of class diagram Z and class diagram X is a double complement of class diagram Z. It means that class diagram Z isn't satisfied double complement law. We need to know the condition for satisfying double complement law because this property is important for algebraic foundation.

Buyer PO Order  Contact: String[ 1..*] --0 Date: Date [1..1] Tel: String[1..1]  Order Details  Goods: String[ 1..*] Num: Int[1 ..1]  Contract Remarks: String[O..*] Deal BU)er  C011act: Smrg] l ..*] Tel: String[l..l]  PO Order  Date: Dare[1. .1] Clause: String [1..*] Date: Date [1..1]  Order  Fig. 3. Example of Class Diagram Universe  Fig. 1. Example of Class Diagram X  Fig. 4. Example of Class Diagram Z

III. RELATED WORK  There are several studies of mathematical foundation of class diagrams. Following are studies related consistency analyses for one class diagram. Berardi, Calvanese, and Giacomo [2] presented the correspondence between class diagrams and Description Logics, which enable us to utilize Description Logics based systems for reasoning on class diagrams. Szlenk [3] presented the mathematical definition of class diagrams and studied the consistency within a single class diagram. Kaneiwa and Satoh [4] proposed optimized algorithms that compute respective consistencies for class diagrams based on first order predicate logic. They discussed mathematical foundation of class diagram but didn't mention about algebraic structure.

Following studies are related algebra for class. Calvanese, Lenzerini, and Nardi [5] surveyed four type of knowledge representations -- description logic, frame based system, semantic data model, object-oriented data model and propose unifying framework. Bueher[6] formalized object-oriented data model based on Boolean algebra and query based on set theory.

They discussed classes but didn't mention about class diagrams.

Sabetzadeh and Easterbrook [7] studied the merging of class diagrams to gain a unified perspective. However, they focused how to merge inconsistent and incomplete class diagrams for requirement engineering and they hadn't been clear detail of algebraic structure for a merging operation.



IV. NOTATION  A set Name is a set of name of all elements consist of class diagram including a class name, an association name, an attribute name and a role name. A set DataType is a set of data type, where type of all data including integer and character represented by {Int,Bool,Char,String,Date,...} . A set Multiplicity is a set ofmultiplicity (m,n) that is a pair of lower bound m and upper bound n where o~ m ~ n,m E No,n E N j ? A set No is a set of integer grater than or equal to o. A set N j is a set of integer grater than or equal to 1.

Deal  Seller  Date: Date[ 1..1]  Contact: String[ 1..1] Tel: String[1..1]  Date: Date[ 1..1]  Order Details  Goods: String[1..*] Num: Int[1..1]  Remarks: String[O..*]  Order Details  Goods: String[l ..*] Num: h1[1 .. I]  Remarks: Strirg[O..*]  Buyer  Contract  Contract  Contact: String[ 1..*] Tel: String[1..1]  Fig. 2. Example of Class Diagram Y  Clause: String[ 1..*]  Clause: String[l ..*]  Order Quote Seller  Date: Date[1 ..1]  T Contact: String[ 1..1] Tel: String[1..1]  Order Details  Goods: String [1..*] Num: Int[1 ..1]  Remarks: String[O..*]  Deal  Date: Date[ 1..1]     Order  (Buyer,(Contact, String,(l, *)),(Tei, String,(l,l))),  Fig. 6. Example of an Association  0..1  r-------O~d~r- -------: Request: :>--__....,L------- .,  Date: Date] l ..I] : I  ~ - - - - - - - - - - - - - - - - - - _I  PO  Details 1..*  r-------B~~~;------: , I Party  :-C-o~~~t~ s;ri~~[-1~.:j-: : Tel: String[1..1] : 1..1 ..-------------------'  Fig. 5. Example of a Class  Contact: String[ 1..*] Tel: String[1..1]  In order to reduce the complexity, we consider eliminating some components as operation and generalization. Because we discuss only behavior of data model rather than object model.

(PO,((Party, (l, l), (Buyer, (Contact,String, (l, *)),(Tei, String,(l,l)))), (Request,(O,l),(Order,(Date, Date,(l,l)))), (Details,(l, *),(OrderDetails,(Goods, String.Il, *)),(Num, Int,(l,l))))))  v. SYNTAX OF A CLASS DIAGRAM A class diagram is a type of UML and employed to model  concepts in static views for an information structure of enterprise system consisting of classes and their interrelationships. A class diagram has been represented by graphical and abstract syntax. In this section, we focus abstract syntax for simplifying discussions. We define the abstract syntax of the class diagram as followed:  A. Syntactical definition ofa class A class c is a pair (Name(c),Attrs(c)) where  Name(c) E Name is a name of the class c and Attrs(c) is a list of attributes in the class c. An attribute list Attrs(c) is a finite list (Attr(c,l),...,Attr(c,n)) of finite number n . An attribute Attrs(c,i) is a triple of (Name(c,i), Type(c,i),Multi(c,i)) , where Name(c,i) E Name is  a name of i th attribute and a member of a set Name , Type(c,i) E DataType is a type of t th attribute and a member of a set Data Type , Multi(c,i) E Multiplicity is a multiplicity  of i th attribute and a member of a set Multiplicity. A set Class is a set of all classes.

B. Syntactical definition ofan association An association a is a pair (Name(a),Assocs(a)) , where  Nameta)? Name is a name of the association a and Assocs(a) is a list of associated classes in the association a.

An list Assocs(a) of associated classes is a finite list (Assoc(a,l),...,Assoc(a,n)) of finite number n . An associated class Assoc(a,i) is a triple of (Role(a,i),Multi(a,i),AC(a,i)) , where Role(a,i) E Name is a name of l th association, Multi(a,i) E Multiplicity is a multiplicity of t th association, A C(a,i) E Class is a related class of t th association. A length of the list Assocs(a) must be at least 2. A set Association is a set of all associations.

c. Syntactical definition ofa class diagram A class diagram is a pair (C,A) , where C ~ Class is a  subset of Class and A ~ Association is a subset of Association . A class diagram (C,A) suffers following conditions.

Condition 1: if names of two classes are same, two classes are same.

VCi EC,VCj EC,Name(ci)=Name(cj)~ci =cj (1)  Condition 2: if names of two associations are same, two associations are same.

Va i E A, Va j E AsNameta.] = Name(a j)~ a, =aj (2)  Condition 3: all associated classes of an association are included in the set of classes in the class diagram.

\:faE A,(r,m,ac) E Assocsta):? ac E C (3)  Buyer Party PO Request  Order  Contact: String[1..*]  1..1 ~ 0..1 Date: Date[ 1..1]Tel: String[1..1]  Details 1..*  Order Details  Goods: String[1..*] Num: Int[1..1]  Fig. 7. Example of a Class Diagram

VI. SYNTACTICAL OPERATIONS FOR CLASS DIAGRAMS  A merger operation is defined in an analogous to union of set because same classes are merged into one class and same associations are merged into one association. A remain operation is defined in an analogous to difference of set but has little difference because the result of a remain operation should satisfy conditions of class diagram. Merger and remain operations are defined as followed:  A. Syntactical definition ofmerger operation Given two class diagrams (Cx ,Ax) and (C y ,Ay ) , a  syntactical merger operation V : (C,A) x (C,A) ~ (C,A) is defined as (CxuCy,AXuAy).

(Cx,Ax )V(Cy,Ay):= (Cx uCy,Ax uAy) (4)  Not all results of a merger operation are satisfied conditions of class diagram. Although we omit the proof because of space limitations, following conditions are formed.

Proposition 1 The syntactical merger operation (V) is closed on class  diagrams if and only if following consolidation condition is satisfied.

Fig.8. Restoration Condition   Consolidation condition: Let (C x' Ax) and (C y, Ay) be class diagrams. If names of any classes in C x and C; are same, those classes are same. If name of any associations in Ax and A y are same, those associations are same.

VCx E C x ?VCy E C; .Nametc c ) = Nametc c ) => Cx = cy (5) Vax E Ax, Va y E A y, Name(a x) = Nameta c ) => ax =ay  B. Syntactical definition ofremain operation Given two class diagrams (Cx,Ax) and (Cy,Ay) , a  syntactical remain operation - : (C,A) x (C,A) ~ (C,A) is  defined as ((C x \ C y) U C Ax lAy ,Ax \ A y) where  Cx \Cy :={CICECX,cflCy} , Ax \Ay :={alaEAX,aflAy} and CAx\Ay := {ac Ia E (Ax \ A y ),(r,m,ac) E Assocstai}: (C x ,Ax) - (C; ,Ay):= ((Cx \ Cc ) U CAXIAy ,Ax \ A y) (6)  Although we omit the proof because of space limitations, following proposition is formed.

Proposition 2 The syntactical remain operation (-) is closed on class  diagrams.

C. Syntactical definition ofcomplement operation Given a class diagram X = (Cx ,Ax) , a syntactical  complement operation X : (C,A)~ (C,A) is defined as U - X = (Class,Association) - (CxAx) where U is (Class.Associatim) .

X:= U - X =(Class, Association) - (CxAx ) (7)  Although we omit the proof because of space limitations, following lemma is formed.

Lemma 1 X =U - X =(C XC U C C ,AxC ) whereAx cCx := Class \ Cx = {c ICE Class, c fl Cx }  AxC := Association \ Ax = {a Ia E Association,a fl Ax} and CCAxC := {ac, IVa E Ax ,V(ri,mpaci) E Assocstai}:  (9)

VII. CONCLUSION  We present syntax ofa class diagram describing a data model  All results of remain operation are satisfied conditions of class diagram. However, not all results of that are satisfied double complement law. Although we omit the proof because of space limitations, following preposition is formed.

Proposition 3 The double complement law X =X is satisfied if and only  if following restoration condition is satisfied.

Restoration condition: Let (C x ,Ax) be a class diagram.

Cx n CAssociation n CAx C =? where CAssociation := (ac Ia E Association,(r,m,ac) E Assocs(a)} and  CCAx := {c ICE Class,a E Ax ?(r,m, ac) E Assocs(a), ac 7:- c}  XI1.Y=XVy =U - ((U - X)V(U -lJ) = (((C x nCy)\ (C(AxnAy{ ))uCAXnAy,Ax nAy)  C=?c, nCy)n(CAssociation UCAXnAy),Ax nAy) Proposition 4 Following equations are formed if and only if consolidation  and restoration conditions are satisfied.

X -y = (Cx,Ax)-(Cy,Ay) = ((Cx \Cy)UCAXIAy ,Ax \Ay) (10)  C C ----=(C, uCAyc,Ay )~(Cx,Ax) = (Cy,Ay)~(Cx,Ax)= y~  (X -11 = ((Cx,Ax)-(Cy,Ay)) = (Cy,Ay)V(Cx,Ax) = lVX(II) We can construct variety class diagrams with use of merger,  intersection, remain and complement operations. Those operations have good properties for foundation of class diagram algebra where class diagrams are satisfied consolidation and restoration conditions.

It is safe to merge partial data models of applications describe in class diagrams with use of merger operation. It is also safe to eliminate a part of class diagram with use of remain operation. And it is easy to handle many partial data model during development of enterprise service systems.

D. Syntactical definition ofintersection operation Intersection operation is defined with use of merger and  complement operations as followed: For any two class diagrams (Cx ,Ax) and (C y ,Ay ) , a  syntactical intersection operation ~: (C,A) x (C,A) ~ (C,A)  is defined as (Cx ,Ax )V(Cy,Ay).

(Cx ,Ax )11.(Cy,Ay) := (Cx ,Ax )V(C y,Ay) (8) Although we omit the proof because of space limitations,  following two lemmas and one proposition are formed.

Lemma 2 The syntactical intersection operation ( ~ ) is closed on class  diagrams if and only if consolidation and restoration conditions are satisfied.

Lemma 3 Following equations are formed if and only if consolidation  and restoration conditions are satisfied.

Class CAssociation  Cx n CAssociatioll n CAs C = ?  Association    and introduce a part of foundation for class diagram algebra with merger, remain, complement and intersection operations on class diagrams. Consolidation and restoration conditions keep consistency of class diagrams syntactically for results of those operations.

We propose a part of foundation for class diagram algebra but couldn't clear to generate any class diagrams as results of merger, remain, complement and intersection operations. We couldn't clear semantic of those operations.

