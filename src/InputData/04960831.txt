Implementing Symbolic Simulation Using SAT  Solvers by Variables Partition *

Abstract- Although parametric representations and reparameteriz- ations are used, the bottleneck of symbolic simulation is still the blowup of BDDs which may grow rapidly with the increase of simulation steps.

In this paper, we implement symbolic simulation using SAT solvers with variables partition which reduces the sizes of BDDs and remains enough coverage while lowering backtracks of SAT solvers.  This method partitions a big CNF into two smaller subsets A and B, and then divides the variables into three disjoint sets. Through the constraint that the symbolic values are only assigned to the variables which occur in both A and B, the symbolic simulation implemented by SAT solvers obtains both the fewer backtracks and lower memory occupation. This method is proved to be sound and complete.



I.  INTRODUCTION With the growing complexity of digital circuits and system  designs, the verification for their functionality has become the most important and time-consuming task. Verification methods can be categorized into two basic types: formal methods and simulation-based methods. Formal methods such as model checking work well on small designs, but do not scale to larger designs. Simulation-based methods scale easily to large designs, but do not possess enough coverage [1]. Symbolic simulation is an alternative method.

Symbolic simulation, which offers a good promise between formal verifications and simulation-based methods for the digital circuit design correctness, reliability and robustness, has become a widely applied technique in many formal verification tools, for example, ESP-CV [2] and Intel Forte [3]. A symbolic simulator works in the following way: it first constructs the model for a circuit design, and imposes symbolic expressions to the input of the model, then propagates it to the output of the model, and compares the final results with the expectations, determines whether the system design is in accordance with its specifications [4]. A symbolic simulator runs same as a digital simulator except that its test sectors include not only digital values, but also symbolic values.

Introducing symbolic values in the simulator has the following advantages: First, in one single simulation run, symbolic simulator can process the task which needs to be completed in many simulation runs by traditional simulator; Second, symbolic simulation provides enough coverage [1].

As a Boolean representation, BDD is usually used as the basic data structure in many symbolic simulators [5].

However, as with all other BDD-based verification techniq-   * This work is supported by National Natural Science Foundation of China under Grant No. 60373113 and by NKBRPC (No. 2004CB318000)  ues, the size of  BDDs  in  symbolic  simulators  may grow exponentially in the number of variables in circuit designs [6], especially IP-based designs. In order to address this problem, parametric representations and reparameterizations are usually computed during the process of symbolic simulation [7, 8]. The size of parametric representations is significantly smaller than original BDDs since they always require fewer variables. Unfortunately, parametric representations may also be too big to be loaded into memory. The basic reason for BDD blow-up is that the BDD contains too many variables. In order to solve this problem, we investigate an alternative way to reduce the number of BDD variables, that is, we give a restriction to the variables such that only part of them is symbolic simulated. The method is implemented by combining the symbolic simulation with A SAT solver.

SAT, also called Boolean satisfiability problem, can be described as following: Given a Boolean formula, to determine if there exists an assignment to the Boolean variables such that the formula can be evaluated to 1. DPLL and Zchaff [9] are widely-used algorithms in many sat solvers.

Usually, a SAT solver chooses a variable to branch on each time. In our algorithm, we would like to restrict the branching only on part variables, for other variables, the symbolic simulation is adopted.

In order to implement the above goal, the algorithm we propose in this paper first divides the variables into two different sets, then symbolic simulates the common variables occurred in both  sets, and branch on the other variables.

It must be noted that the algorithm is not for the purpose of assuring the satisfiability of CNF, but for testing the unsatisfiability of CNF rapidly. Instead of simulating all the variables, our algorithm only simulates part variables, so that lowers the number of symbolic values, and improves the efficiency of verification.

In recent years, many techniques which combine the symbolic simulation and SAT have occurred [7, 10]. But too many symbolic variables lead one prone to memory blow-up [7].

This paper is organized as follow. Section 2 simply introduces the relative knowledge. Section 3 discusses that how to implement symbolic simulation using SAT solvers.

Section 4 proposes the algorithm that implements symbolic simulation using SAT solvers with variables partition, and proves its soundness and completeness. Section 5 gives an     experimental result, which shows that the symbolic simulation-based SAT algorithm is effective. The last section gives the conclusions.



II. RELATIVE KNOWLEDGE  A.  SAT Boolean satisfiability problem is a typical problem in  artificial intelligence and the design of digital circuit. Usually, given a Boolean function f(x1, ?, xn) on n binary variables x1, ?, xn, the Boolean satisfiability is concerned with finding an assignment to the variables {x1, ?, xn} that make the function equal to constant 1, or proving that the function is equal to the constant 0 [10].

The basic method of SAT is to enumerate all the assignments of input variables, search those assignments making formula under test true. All possible assignments form the input space which can be represented as a binary tree. Each node of the tree denotes a variable. Each node variable has two outgoing edges. The left edge represents that the variable was assigned to 1; the right edge represents the appositive. A path is a sequence of assigns to node variables from root node to leaf node. A leaf node assigned to 1 represents the formula is satisfiable. Thus, to solve the SAT problem of formula ? is to search a path which starts from root node leading to a leaf node assigned to 1. Obviously, if formula ? has n variables, the tree of ? has 2n leaf nodes [6].

Usually, Boolean formulas are represented as conjunctive normal form (simply, CNF). Formally, a conjunctive normal form is the conjunction a set of clauses, and a clause is the disjunction of a set of literals, where a literal is a variable or its complement.

B. Basic SAT Algorithm The sound and complete DPLL algorithm is adopted by  many SAT solvers. In essence, DPLL algorithm computes the assign for a new variable at a time. The selection of variable in each computation may affect the efficiency of the algorithm. Heuristic algorithm is often used to select the most suitable variable in computations. But, whichever heuristic algorithms are adopted, DPLL algorithm always starts from the variable which appears most frequently.

Due to lack of space, we only introduce the basic processing method of SAT algorithm which includes three steps.

First: preprocessing the clause set. In this step, Boolean constraint propagation which is also known as BCP is used.

Second: selecting the suitable variable.

Third: induce all the implied values which can be got from  the known assigns and BCP. In this step, if a conflict occurs, then algorithm backtracks to the nearest variable.

Although different in somewhere, currently used SAT solvers mainly based on the above framework.



III.  IMPLEMENT SYMBOLIC SIMULATION USING SAT METHOD  Symbolic simulation computes from input nodes to the output nodes, the Boolean function for each inner node. The values for output nodes are Boolean functions in initial  variables. Although symbolic simulation can offer a complete coverage, but too many symbolic values will make these BDDs too large to build.

A.  Why Implement Symbolic Simulation Using SAT Solvers  Implement symbolic simulation using a SAT solver adds three advantages to the functional verification of a circuit design.

The first advantage is that the use of symbolic values in the SAT solver reduces the number of branches on the CNF variables. As we know, the disadvantage of traditional simulation is that only one scalar vector is simulated at a time.

But a symbolic vector may include much more information than scalar vectors. Same in SAT solvers, symbolic value contains much more information that requires many branches to obtain.

For example, Let A be a CNF, which contains two variables, x and y. In order to determine the satisfiability of the A, the SAT solver may need 4 branches. The procedure is shown as the Fig. 1.

Fig. 1. The determination tree of SAT  We can find from Fig. 1 that the determination tree of A contains four leaf nodes {3, 4, 5, 6}. But as for symbolic values, only two leaf nodes in the determination tree. This is shown as Fig.2..

Fig. 2. The determination tree of  SAT using symbolic values  As shown as in Fig.2, variable x is given a symbolic value a, then SAT solver branch on variable y. First, symbolic value a is assigned to variable y. If a conflict occurs, the SAT solver backtracks to node 1, and select node 3. In fact, although the determination tree using symbolic value has only 2 leaf nodes, but it give the same analysis as original SAT solver.

The second advantage is that the use of SAT solvers avoids constructing BDDs for each node. The SAT solver turns the circuit design to a CNF. This gives us an opportunity to select that which variable should be symbolic simulated, and which should be branched on using binary value.

Why some variable are still branching by using binary  y = a  Root  x = a  y = ?a   2 3  y = 0  Root  x = 0 x = 1  y = 0 y = 1 y = 1  1 2  3 4 5 6    values? This is because sometimes symbolic simulating all variables will not bring conveniences. We will show this point through an example.

Example 1. Let A be the following CNF: ( )( ) ( )( )( )x y x y z x y z x y z x y z+ + + + + + + + + The above CNF has three variables. In order to investigate  the satisfiability of the CNF, symbolic simulation first select variable x, and assigns symbolic value a to it. We can not induce any information from the symbolic value. Then, let y = a, we get the following CNF:  ))(( zaza ++ .

The CNF implies that z=1. So, the symbolic vector {x=a,  y=a, z=1} make the CNF satisfiable. In fact, according to DPLL algorithm, a binary sector {x=1, z=1} is obtained and the determination procedure is simpler.

From this example, we know that it is necessary to restrict the symbolic simulation only on specific variables, instead of all variables in CNFs.

The third advantage is that the introduction of symbolic values reduces the necessary backtracks. Since symbolic values in SAT solvers reduces the branches, the backtracks is decreased also once conflicts are encountered.

B. The Goal of Symbolic Simulation In SAT solvers Although having the above three advantages, symbolic  values are not always suitable for all SAT problems.

Example 1 has shown that the introduction of symbolic  simulation directly to SAT solvers may not bring good effect.

But, it is convenient to determine the unsatisfiability of a CNF using symbolic simulation. So, symbolic simulation in out algorithm is not used to determine the satisfiability, but the unsatisfiability.

The corresponding algorithm is given in the following section.



IV. SYMBOLIC SIMULATION ALGORITHM USING SAT SOLVERS  The algorithm divides clauses set of CNF into two subsets A and B according to the literal occurred most frequently. For example, let the literal be x, then all the clauses containing literal x or x? construct subset A, the other clauses form the subset B.

Let VA denote the set of variables which occur in clauses set A, and let VB denote the set of variables which occur in clauses set B. Then computer the intersection of A and B, denoted as V = VA?VB.

If the number of literal x in the CNF is greater than x?, then x is assigned 1, otherwise, x is assigned to 0.

Note that symbolic simulation only processes those variables in set V. For other variables, the normal binary simulation is adopted. In this way, a CNF can be recognized to UNSAT rapidly if it is unsatisfiable. If there exists binary assigns for those variables in VA - V, such that A is satisfiable, then the bigger SAT problem for original CNF is turned to a smaller SAT problem for B. If A is unsatisfiable, current values are modified. Thus, backtraces is reduced.

ss_sat_solver (CNF) Input: a CNF  Output: SAT or UNSAT while TRUE do  if preprocess() == CONFLICT then return UNSAT;  x = select_max_var(); A, B = partition(CNF, x); V2 = var(A)?var(B); V1 = var(A) ? V2; if ss_sat(A) == UNSAT  return UNSAT; else if ss_sat(A) == UNSOLVED  sat_solver(CNF); else  CNF = B; Done  Fig. 3. Symbolic simulation algorithm using SAT solvers with variables partition  When a conflict occurs during preprocessing, the algorithm returns UNSAT. Function partition(CNF, x) divides CNF into two subset A and B with variable x. Method ss_sat(A) checks the satisfiablilty of set A with symbolic simulation. The code of ss_sat(A) is as follow.

ss_sat(A): while TRUE do  if select_next_var() == 0 then return SAT;  else if select_next_var() ? V2 then ss_decide();  else bin_decide();  while deduce( ) == CONFLICT do bk_level = resolve_conflicts( ); if bk_level == 0 then  return UNSAT; else  backtrack(bk_level); done if deduce( ) == UNSOLVED then  return UNSOLVED; done  Fig. 4. Function ss_sat Select_next_var() selects next variable needed to be  assigned, if the variable belongs to V2, then a symbolic value is assigned to it. Ss_decide() invokes symbolic simulation to decide the satisfiability of A. If the selected variable does not belong to V2, then the binary decision procedure bin_decide() is invoked.

Deduce() is a function which deduce the unknown variable values from the known variable values. The basic principle for deduction is known as BCP which in our algorithm has been extended to symbolic values. BDDs are used when necessary.

During Boolean constraint propagation, history of assigns to the variables including both symbolic values and binary values must be recorded in case that once a conflict occurs, BCP can cancel current value and backtrack to the original assigns.

Backtrack() functions that if current assigns do not satisfy the formula, then withdraw the values of some variables and re-assigns it.

Finally, set B is assigned to CNF, sat_solver(CNF) run recursively until the problem is solved.

Next, we will discuss the soundness and completeness of the symbolic simulation algorithm using SAT solvers with    variables partition ss_sat_solver().

Theorem: The symbolic simulation algorithm  ss_sat_solver using SAT solvers with variables partition is soundness and completeness.

Proof: Given a CNF and variable x, according to x, partition the  CNF into two set  A and B. Each clause of A contains x or its complement. B is opposite to A. Let VA denote the variable set of A, and VB be the set of variables in B, let V2 = VA?VB and V1=VA - V2.

Then the theorem is equivalent to the following two propositions.

Proposition 1: If A is unsatisfiable, original CNF is unsatisfiable too.

Proposition 2: If there exists an assign ?1 of variables set V1, such that A is satisfiable, and then original CNF is satisfiable if and only if B is satisfiable.

Proposition 1 holds obviously. We only discuss proposition 2. We deduce first from left to right. Clearly, B is satisfiable if original CNF is satisfiable.

Then, we deduce from right. Assume that original CNF is unsatisfiable. Since B is satisfiable, there must exist a set of assigns of VB, such that B is evaluated to 1. Without loss of generality, let the set of assigns be ?B, denotes the projection of ?B into V2 as ?2.  Then ?2 makes A unsatisfiable. But, we know from the proposition that there exists also a set of assigns ?1, such that A is satisfiable. It can be concluded that there must exist conflict between ?1 and ?2. Actually, V1 = VA - V2, thus, V1?V2 = ?, that is to say; there are no conflict between ?1 and ?2. The conclusion conflict with the assumption.

Then, proposition 2 holds and the theorem is also holds.



V. EXPERIMENTAL RESULTS We report our experimental results on 1.8GHz Intel  Pentium processor machine with 512MB of main memory running Windows XP professional. The experimental bench we use includes two CNF files which contain 100 and 4821 variables respectively. One CNF file contains 449 initial clauses, 1347 initial literal, the other contains 48221 initial clauses, 137185 initial literal.

We compare our algorithm against Zchaff SAT checker.

Table gives the experimental results.

TABLE I Experimental result on two CNFs  Item Zchaff SS_sat  variables  Max_depth 415 351  Assign-count 6952 2834  Time(s) 4.672 4.006  variables  Max_depth 23 17  Assign-count 782 557  Time(s) 1.703 1.046  Result Sat Sat   In table 1, the column marked ?SS_sat?, denotes our  symbolic simulation-based algorithm. ?Assign-count? row records the counts of assigns to variables. ?Time? records the amount of time the algorithm required to solve the SAT problem. Experimental results show that the assign-count of symbolic simulation-based algorithm is less than Zchaff, ?Time? row also shows that our algorithm run fast than Zcahaff..

We would like to point that if too many literal in a clause, for example, average more than 4 variables in a clause may lower the efficiency, because the computation of BDD costs some resource. Our algorithm is suitable for those SAT problem in which CNFs are based on the circuit structure.



VI. CONCLUSIONS AND FUTURE WORK This paper presents a symbolic simulation-based SAT  algorithm, which allows performing symbolic simulation to improve the efficiency of SAT algorithm. The method partitions the CNF under test into two subsets, and thus forms two set of variables. The algorithm, in order to test the unsatisfiability, symbolic simulates only those variables belonging to both two set. The introduction of symbolic simulation to part variables makes it possible to run rapidly to exclude the possibility of unsatisfiability or verify the UNSAT.

The algorithm as given is proved to be soundness and completeness.

In the future, we would like to improve the ability and efficiency of the algorithm further. In particular, we would like to investigate how to partition the CNF so that each subset has the minimal impact on other subsets.

