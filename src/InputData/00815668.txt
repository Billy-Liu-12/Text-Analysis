Mining Approximate Dependencies Using Partitions on  Similarity-relation-based Fuzzy Databases

ABSTRACT  In this work, we present a data mining technique for determining approximate dependencies in similarity-relation-based fuzzy databases. Similarity-relation-based fuzzy data model is most suitable for describing analogical data over discrete domains, in addition to fuzzy-set-based fuzzy data models. Approximate dependency is an extension of functional dependency such that equality of tuples is extended and replaced with the notion of equivalence class. The approximate dependency we define here can capture more real-world integrity constraints then most existing functional dependencies on fuzzy databases. A level- wise mining technique is adopted here for the search of all possible nontrivial minimal approximate dependencies based on equivalence classes of attribute values. An algorithm based on Huhtala [ 5 ]  is presented here whereas other approximate types of functional dependencies introduce only conceptual viewpoints.

Keyword: data mining, approximate dependency, similarity relation, fuzzy database  1. INTRODUCTION  Data mining, also referred to as knowledge discovery on databases, is the nontrivial extraction of implicit, previously unknown, and potentially useful information from data [4]. It is the search for relationships and patterns that exist in large databases, but are "hidden" among the vast amount of data.

Association rules, classification rules, discrimination rules, characteristic rules, functional dependencies, and clusterings are some of the relationships and patterns typically searched.

Mining of functional and approximate dependencies from relations has been identified as an important database analysis technique. Functional dependencies are relationships between attributes of a relation: a functional dependency states that the value of an attribute is uniquely determined by the values of some other attributes. The discovery of functional dependencies from relations has received considerable interests.

An approximate dependency can be considered as a functional dependency that almost holds. It describes approximate  0-7803-5731-0/99$10.00 01999 IEEE V-871  relationships between attributes of a relation in databases.

Many mechanisms for incorporating approximate relationships have been proposed previously: the fuzzy functional dependency framework of Raju and Majumdar [9],  the probabilistic dependency framework of Haux and Eckert [ 5 ] ,  and cluster dependency framework of Saharia and Barron [lo], etc.

However, current mining techniques of determining functional and approximate dependencies are based on crisp databases.

Although various forms of approximate dependency on fuzzy databases have been proposed, their emphases are on the conceptual viewpoints, and no algorithms are given.

In this work, we present an approach for finding approximate dependencies from databases that contain similarity-relation- based fuzzy data. A similarity relation is a generalization of an equivalence relation such that reflexiveness, symmetry, and max- min transitivity is satisfied. In addition to fuzzy-set-based fuzzy databases, similarity-relation-based fuzzy data model has been proposed by Buckles and Petry [3] as an important tool for storing fuzzy information in database technology. It is also recognized as a model that is most suitable for describing analogical data over discrete domain [8]. When a similarity relation is defined on an attribute domain, its attribute values can be partitioned into equivalence classes with respect to a specified level value. Attribute values in an equivalence class are similar to each other to the degree of the given level value.

The approximate dependency in our fuzzy database is defined as a functional dependency based on equivalence classes of attribute values. If attribute A is approximately dependent on attributes in X, it means that each equivalence class in A is functionally dependent on an equivalence class in X. For each attribute with a corresponding level value, the tuples in database are partitioned into a set of equivalence classes. The use of partitions on the tuples makes the discovery of approximate dependencies easy and efficient as tuple-wise computation is reduced to equivalence-class-wise manipulation. Our algorithm is based on the level-wise algorithm that has been used in many data mining applications [6,7]. It starts from dependencies with a small left-hand side and works towards larger dependencies, until the minima1 dependencies    that hold are found  Sec SW Eng Acct Sys Eng Salesman Dn Eng  The rest of our paper is organized as follows. Section 2 reviews the basic concept of partitions and approximate dependencies on fuzzy databases based on similarity relations.

Section 3 describes the searching algorithm of finding the approximate dependencies based on Huhtala etc. Finally a discussion is given at the end of paper.

Sec Sw Acct Sys Sales- Dn  1 0.6 0.7 0.6 0.5 0.6 0.6 1 0.6 0.8 0.5 0.8 0.7 0.6 1 0.6 0.5 0.6 0.6 0.8 0.6 1 0.5 0.8 0.5 0.5 0.5 0.5 1 0.5 0.6 0.8 0.6 0.8 0.5 1  Eng Eng man Eng  2. PARTITIONS AND APPROXIMATE DEPENDENCIES ON FUZZY DATABASES   Fuzzy relational databases to accommodate incomplete, imprecise or uncertain information have been studied extensively in recent years [l-3,113. To represent fuzzy information in the data model, two basic approaches can be classified: model through similarity relations (or proximity relations) [3] and model through possibility distribution [ 1,2]. Similarity- relation-based fuzzy database has been recognized as a model that is most suitable for describing analogical data over discrete domains. In the following, we review the basic concept of the model.

0.9 .7 0.7 0.5 0.5 0.5  For each attribute domain D, a similarity relation s is defined over its domain elements: s : D x D + [0, 11. A similarity relation is a generalization of an equivalence relation in that if a, b, c E D, then s is  reflexive: s(a, a) = 1 symmetric: s(a, b) = s(b, a) transitive: s(a, c) 2 max[min(s(a, b), s(b, c))]  for all b E D  A similarity-relation-based fuzzy relational database[3] is defined as a set of relations consists of tuples. Let ti represent the i-th tuples of a relation R, it has the form (til, ti2, ..., tirn) where t- is defined on the domain set Dj, 1 IjSm. Unlike the  ordinary relational database, two simple but important extensions are defined. The first extension is that the tuple component tu  selected from Dj is not constrained to be singleton, instead,  c Dj and t.. # 0. Allowing tuple component tij to be a subset of the domain Dj means that fuzzy information can be represented. If t- consists of a single element, it represents the most precise information; whereas if t.. is the domain D. itself, it  corresponds to the fuzziest information. This leads to the definition [3]:  1J  tij  ?J  U ?J J  DEFINITlON A fuzzy database relation R is a subset of the set cross product  aD1 xZD2 x ... x z D m , D. D. D. where 2 J = 2 J - 0 , 2 J represents the power set of Dj.

The second extension of the fuzzy relational database is that, for each domain set D. of a relation, a similarity relation S, is defined over the set elements:  J Sj : Dj x Dj + [ 0, 1 1.

The similarity relation introduces different degrees of similarity to the elements in each domain and this is another mechanism for the representation of ?fuzziness? in this fuzzy relational data model.

A simple illustration of the fuzzy database relation is shown in the Table 1 below representing the JOB, EXPERIENCE and SALARY of eight EMPLOYEES. The similarity relations for domain attributes JOB, EXPERIENCE and SALARY are shown in Fig. 1.

EMP#  JOB IEXP  SALARY 1 (Salesman (3  (37K 2 IDesign Engineer I10 1 4 0 ~ 3 ISystem Engineer 15 145K I 4 (Software Engineer 15 (45K 5 1 Accountant I12 1 4 7 ~  I I  6 1 Accountant 15 150 J 7 I Secretary 110 I53 8 lsecretary 115 l55K  Table 1 A Fuzzy Database Relation  137 40 45 47 50 53 55  Fig. 1  0.9 0.7 0.7 0.5 0.5 0.5 1 0.7 0.7 0.5 0.5 0.5 0.7 1 0.9 0.5 0.5 0.5 0.7 0.9 1 0.5 0.5 0.5 0.5 0.5 0.5 1 0.9 0.9 0.5 0.5 0.5 0.9 1 0.9 0.5 0.5 0.5 0.9 0.9 1  Similarity relations for attribute domains SALARY  V -872    An approximate dependency over a relation schema r is expressed as X + A, where X Informally, an approximate dependency X + A holds if all tuples that agree on X approximately also agree on A approximately. Formally, the dependency holds or is valid in a given relation R over r if for all  pairs of tuples t, and tl E R we have: if [t ] = [t ] for all  DJ E X, then [tt];4 = [tl];? , where [tl];, represents the equivalence class of tuple t, with respect to an attribute DJ with level value a,.

r, and A E r.

a, a1  I DI 1 DI  We explain the notations as follows.

Two tuples ti and tl are equivalent with respect to an attribute Dj for a given level value aj if tij and tlj belong to the same equivalence class of Dj. The equivalence classes of Dj are determined by the level value aj and defined by the similarity relation. For example, for attribute JOB with level value 0.8, the equivalence classes are {Secretary}, {Accountant}, {Software Engineering, System Engineering, Design Engineering}, and {Salesman}. It means that Software Engineering, System Engineering and Design Engineering are similar to each other with value higher or equal to 0.8 and they are in the same equivalence class of attribute JOB. We denote it by Software Engineering wa System Engineering (or System Engineering ma Design Engineering) where a = 0.8. Tuples 2 , 3 and 4 in Table 1 therefore belong to the same equivalence class in terms of attribute JOB. In general, an attribute Dj partitions the tuples of a relation into a set of equivalence classes.

We denote the equivalence class of a tuple ti E R with respect  to an attribute Dj with level value aj by , i.e.,  The set  aI rD, = {[t, I?:, I t ,  E RI  of equivalence classes is a partition of R under DJ with level value a,. That is, XE; is a collection  of disjoint sets (equivalence classes) of tuples, such that each set has values belonging to an equivalence class in DJ, and the union of the sets equals the relation R. The rank 1x1 of a partition is the number of equivalence classes in x ? .

Example 1 Consider the relation in Table 1. Attribute JOB with attribute value 0.8 has equivalence classes {Secretary}, {Accountant}, {Software Engineering, System Engineering, Design Engineering}, and {Salesman}. For {salesman}, it forms an equivalence class of tuple (1).  For {Software Engineering, System Engineering, Design Engineering}, it forms an equivalence class of tuple {2,3,4}. The partition with  respect to JOB is X,,08 = {{I},  {2,3,4}, {5,6}, (7 ,s)) .  The  partition with respect to EXPERIENCE is = { { 1,3,4,6}, 0.9 {2,5,7}, ( 8 ) ) .  The partition with respect to SALARY is X a L  0.8  = {{1,2}, {3,4,5), {6,7,8}}.

The concept of partition refinement gives almost directly approximate dependencies. A partition x is a refinement of another partition x? if every equivalence class in x is a subset of some equivalence class of x ? .  We have the following lemma [61.

Lemma 1 An approximate dependency X + A holds if and only if xX refines x{A).

Example 2 Continuing example 1, to find out whether the approximate dependency JOB + SALARY holds, we can compare the partitions ZJoB and XExp and check whether  ZJoB refines X E x p .  Since equivalence class {2,3,4} of  ZJOB is not contained in any equivalence class of ZEm,  the  approximate dependency JOB + SALARY does not hold.

However, approximate dependency {JOB, EXPERIENCE} + SALARY holds, since ZJoB,Exp = { {  11, (21, {3,4}, (51, (61,  {7}, (8)) is arefinement of ZSAL = {{1,2}, {3,4,5}, {6,7,8}}.

0.8 0.9  0.8 0.9  0.8 . 0.9  (0.8,0.9)  0.9  There is an even simpler test for determining the approximate dependency X + A. If xx refines x(,+ then adding A to X does not increase any equivalence classes of xx, thus x x u  (A) equals xX. Therefore, we have the following lemma [6].

Lemma 2 An approximate dependency X + A holds if and Only if IbXI = b X  U (A)l.

3. SEARCHING ALGORITHM  An approximate dependency X -+ A is minimal (in R) if A is not approximately dependent on any proper subset of X, i.e., if Y + A does not hold in R for any Y c X. The dependency X + A is trivial if A E X. Our task is to find the following: given a relation R, find all minimal non-trivial approximate dependencies that hold in R.

To find all minimal non-trivial dependencies X + A, we search through the space of all possible non-trivial dependencies and test the validity and minimality of each dependency. The validity test means testing Inx/ = Inx U (A)(  as described in lemma 2, which requires computing the partitions. Minimality test reduces the number of dependencies we have to consider. For example, if we find X -+ A holds, then Z + A is not minimal for any proper superset Z of X.

The collection of all possible left-hand sides of dependencies is the collection of all attribute sets. They constitute a set containment lattice such as in Figure 2 [6,7]. The level-wise algorithm starts the search from the singleton sets, and work its way through the lattice level by level until the minimal dependencies that hold are found. During this level-wise search, false dependencies are eliminated as early as possible with some pruning techniques.

V -873     partitions with respect to two subsets of X.

different subsets of size 1x1-1 will do.

In fact., any two  A B D  AB- fic AD BC BD CD  ABC ABD ACD BCD  ABCD  Fig. 2 The set containment lattice for {A,B,C,D} representing the search space of all possible left-hand sides  The possible right-hand sides consist of single attribute that can be obtained with a single bread-first or level-wise pass through the lattice. In addition, there is a one-to-one correspondence between the edges of the lattice and the non-trivial dependencies: the edge between sets X and Xw{A} is viewed as a non-trivial dependency X + A.

The efficiency of the level-wise algorithm is based on reducing the computation of each level by using results from previous levels. We do not need to compute the partitions from scratch for every set of attributes. In fact, the partitions of the next level in the lattice can be obtained as a product of two earlier partitions in the previous level. The product of two partitions  n? and n? , denoted n * n , is the least refined partition , 0,  thatrefines both n and K  Lemma 3 For all X, Y E r, Zx - Ky = nXvY Example 3 Continuing from Example 1, the partitions with respect to JOB, EXPERIENCE, SALARY are njiB = { { I } , (2,3,4), {5,6}, {7,8}), ngp = {{1,3,4,6}, {2,5,7}, (811,  0.9  (0.8.0.9) =  Tw = { { l } ,  {2}, {3,4,5}, (6)) respectively. Partition  ZJoB,m ((11, (21, {3,4}, (51, (61, (71, (8) )  is the least  refinement of nJoB and nExp . Partition nJoi,sAL =  ( { I } ,  {2}, {3,4), ( 5 ) ,  ( 6 ) )  is the least refinement of nJOB and  0.8 0.9 (0.8 0.9)  0.8  0.9 (0.9 0.9) = Z a L .  Partition n E x p : w L  ((11, {2}, {3,4}, (51, (6}, (71,  0.9 0.9 { 8 ) )  is the least refinement of EEXp and Xw.

For partitions nx, 1x1 2 2, they are computed as a product of  When the algorithm is processing a set X, it will test dependencies of the form X\(A} + A, where A E X. This allows validity testing based on Lemma 2, since both zX and ~ x \ ( A )  have already been computed. To test minimality of X\{A} + A, we need to know whether W{A} + A, holds for some proper subset Y of X. The information is stored in the set C?(X) of right-hand side candidates of X [6], where C?(X) = { A E r 1 for all B E X, X \ {A,B} + B does not hold}.

To find all valid minimal non-trivial dependencies, we search the set containment lattice in a level-wise manner. A level L, is the collection of attribute sets of size e such that the sets in L, can potentially be used to construct dependencies based on the considerations of previous sections. We start with Ll = {{A} I A E r}, and compute Lz from L1, and L3 from Lz, and so on.

According to these information, we obtain the following algorithm derived from Huhtala [6],  where the pruning and next level generations procedures can be found.

Algorithm: level-wise search of dependencies.

1 .  Lo :={0} 2. C?(0) : = r  3.  LI  :={{DJaJ I DJaJ E r ,  1 I j I m} 4. e := 1 5. whi leL,#0 6. COMPUTE-PARTITION(L,) 7. COMPUTE-DEPENDENCIES(L,) 8. PRUNE(L,) 9. Lt+l := GENERATE-NEXT-LEVEL(L,) io. e : = e +  I  4. DISCUSSION  We have presented an approach for finding approximate dependencies from fuzzy relational databases based on similarity relations. The similarity-relation-based fuzzy data model has been recognized as a model that is most suitable for analogical data over discrete domains. Approximate dependencies considered here is defined as a functional dependency based on equivalence classes of attribute values, instead of equality of attribute values. The mining algorithm is based on level-wise search of Mannila. The determination of approximate dependency is an extension of Huhtala?s approach, which discovers functional dependency on crisp data. The concept of approximate dependency can be further extended to other types of fuzzy data models and will widen applications in the areas of database management, reverse engineering and query optimization.

5. REFERENCE  [l]  M. Anvari, and G.F. Rose, ?Fuzzy relational databases?, in Bezdek, Ed., Analysis of Fuzzy Information, Vol. I1  V -874    (CRC Press, Boca Raton, FL, 1987).

P. Bosc, and 0. Pivert, ?Fuzzy querying in conventional databases?, In Fuzzy Logic for the Management of Uncertainty, Zadeh, L. and Kacprzyk, J. Eds, John Wiley, New York, 1992, 645-671.

B.P. Buckles and F.E. Petry, ?A fuzzy representation of data for relational databases?, Fuzzy Sets and Systems, 7,  W.J. Frawley, G. Piatesky-Shapiro, and C.J. Matheus, ?Knowledge Discovery in Databases: An Overview?, Knowledge Discovery in Databases, G. Piateskey-Shapiro and W.J. Frawley, eds, pp 1-27, AAAI/MIT Press, 1991.

R. Haux and U. Eckert, ?Nondeterministic dependencies in relations: an extension of the concept of functional dependency?, Information Systems, IO (2), 1985, 139- 148.

Y. Huhtala, J Karkkainen, P. Porkka, and H. Toivonen, ??Efficient discovery of functional and approximate dependencies using partitions?, Proceedings of IEEE 410.

H. Mannila and H. Toivonen, ?Levelwise search and borders of theories in knowledge discovery?, Data Mining and Knowledge Discovery, 1 (3), 1997,241-258.

J.M. Medina, M.A. Vila, J.C. Cubero, and 0. Pons, ?Towards the implementation of a generalized fuzzy relational database model?, Fuzzy Sets and Systems, 75,  K.V.S.V.N. Raju and A.K. Majumdar, ?Fuzzy functional dependencies and lossless join decomposition of fuzzy relational database systems?, ACM Transactions on Database Systems, 13 (2), 1988, 129-166.

A.N. Saharia, T.M. Barron, ?Approximate dependencies in database systems?, Decision Support Systems, 13, 1995, 335-347.

L.A. Zadeh, ?Similarity relations and fuzzy orderings?, Info. Sci., vol3, no. 1 ,  Mar. 1971, 177-200.

1982,213-226.

1995,273-289.

