TAAT2015 Tainan, Taiwan Nov. 20-22, 2015

Abstract-The earlier ideas for time interval sequential pattern mining discovering the time interval pattern between two  product items help managers promote the sale prediction of the  items. For example, if most of the customers purchased product  item A, and then they bought item Band C after r to sand t to u days respectively, the time interval between r to sand t to u days can be provided for managers to make marketing decision while  predicting the purchasing time interval between A and B, as well as B and C based on the prediction. Nevertheless, the earlier  research for the mining does not consider the significance of  product items while mining the time-interval sequential patterns.

This work implements the previous work and keeps time interval  patterns with high utility in which the mining does not just  consider the frequent item sets. This is intended to make the  sequential pattern mining close to business behaviors. The  experimental results show the differences between two mining  approaches if considering item utility or item frequency for the  purchased items.

Keywords-time interval; sequential pattern mining; pattern; utility;

I. INTRODUCTION  The large number of data in which they are produced in various application domains and getting larger today is considered identitying same groups of objects based on the values of their attributes [ I]. Some of the information may be useful for decision makers to make better decisions. And, researchers defined that data mining is a process of extraction of interesting and implicit useful patterns from large number of data [2]. Therefore, this paper primarily investigates on how to apply utility [3][7] and time-interval [4][6] on sequential pattern mining to discover the so useful time interval patterns from the large databases that the quality of decision can be enhanced.

Conceptually, a transaction database stores a set of transactions consisting the transaction number (TN), the customer number (CN), the transaction time (Time), and the product items (ItemSet) purchased in this transaction. For example in Table I, there are 9 transactions in a transaction database containing all of transactions of customers purchase product items from different time. Table II is a transaction-time   Anna Y.-Q. Huang Dept. of Computer Science and Information Engineering  National Central University Taoyuan, Taiwan  anna.yuqing@gmail.com  sequence database which is transformed from a transaction database from Table I. The transaction-time sequence database is built up based on different customer number each of that corresponds to a set of transaction-time sequence purchasing different product items ordered by time.

TABLE I. A TRANSACTION DATABASE  TN CN Time ltemSet 1 1 8 (a) 2 4 II (b) 3 3 14 (c) 4 1 16 {a, bl 5 2 18 (b, c) 6 3 18 (a, d) 7 4 21 {cl 8 I 24 (c, d) 9 2 27 (a)  TABLE II. A TRANSACTION-TIME SEQUENCE DATABASE  CN Transaction-time se uence 1 a(8), a(16), b(16), c(24), d(24) 2 b(18), c(18), a(27) 3 c(14), a(l8), d(J8) 4 bell), c(21)  The idea [5] [6] for time-interval sequential pattern mining is to discover the time interval pattern between two adjacent purchased product items so as to help managers promote item sale prediction. An example of the mining is that most of the customers purchased item A, and then they bought item B and C after r to sand t to u days respectively. Based on the idea, the time interval between r to sand t to u days can be provided for managers to make marketing decision while predicting the purchasing time-interval between A and B, as well as Band C.

However, the earlier research for the mining does not discuss the significance of product items while mining the time interval sequential patterns. They mines the databases and retrieves the patterns by using frequent item sets in which higher frequency itemsets are not considered. For instance, a    TAAT2015 Tainan, Taiwan Nov. 20-22, 2015  transaction-time sequence database is illustrated in Table II.

Based on the earlier works [2][5][6], the transaction-time sequence support for each item is evaluated with the ratio of the number of the transaction-time sequences containing the product item to the total number of the transaction-time sequences. If the support for a transaction-time sequence is not less than the minimum support threshold, then the sequence is called as a frequent sequence. Assume that the minimum support is 60 % is used in the database. Obviously, the product item d in TABLE II is not qualified due to few frequencies.

Generally speaking, if there is only item frequency used in sequential pattern mining that seems it is not satisfied with business managers [3][7]. Yao and Hamilton [3] presented utility based sequential mining method that allows mangers to specify user preferences during the mining in which the utility value is multiplication of quantity and profit of the item. The method considers the significance of product items not just item frequency so that more reasonable mining is closed to business behaviors.

As example of such utilities consideration in Table III and Table IV, the the interval sequence pattern A (2-3)B means most of the customers purchased 2 item A, and then they bought 3 item B after 2 to 3 days. In addition, the itemsets illustrated in Table III are not less than the minimum support. As mentioned, business managers are more interesting in utility value which contains cost, quantity, aesthetic or profit as the measurement [3]. Hence, we assume the profit for each item 5, 10, 1, and 20 for item A, B, C, and D respectively to indicate the preferences of managers. Thus, the profit of the pattern A(2-3)B(4-6)C could be considered to be 5 . 2+ 10 . 1 + 1 . 2 = 22. The profit  per day is evaluated as maximal value 221 (2+4) = 3.7 and minimal value 221 (3+6) = 2.4. However, sequence pattern A (2)B(2)D with amount sold {2, 3, -, 7} is not selected in Table III due to unqualified support . But, its profit is 5 . 2+ 10 . 3  + 20 . 7 = 180 and 45 is its profit per day. Compared to the  sequence pattern A (2-3)B(4-6)C, pattern A (2)B(2)D gain more profit due to the item significance. This scenarios does not shows their semantic significance in which the mining result in some important item sets pruned out.

TABLE III. ATRANSACTION-TIME SEQUENCE DATABASE WITH UTILITIES  Time Interval Sold amount Sequence {A,B,C,D} pattern  A(2-3)B  A(3-5)C B(4-6)C B(4-5)D  A(2-3)B(4-6)C  (2, 3, -,-)  (3,-,3,-) (-, 1,2, -) (-, 5, -, 7) (2,1,2,-)  TABLE IV. ITEMS AND THEIR PROFITS  [tern Profit per UUlt  A 5 B 10  C 1  D 20   According the motivation described above, this work implements utilities into time interval sequential mining to have the mining approach closed to business behaviors. The rest of the paper is organized into sections. Section 2 summarized the related work. We describe our methods using time interval and utility-based mining in Section 3. The experimental results are presented and analyzed in Section 4.

Conclusions and future works are fmally given in Section 5.



II. RELATED WORK  A. Sequential Pattern Mining  Agrawal and Srikant proposed algorithms based on Apriori property for association rule mining in 1994 [8], and introduced the problem of mining sequential patterns and used it for business behaviors in 1995 [9]. Actually, most of earlier research [10] [ll] [12] for frequent pattern mining is extended from the Apriori property [8] which describes any sub-pattern of a frequent pattern must be frequent. Agrawal and Srikant stated AprioriAII and GSP algorithms for finding specific sequential patterns whose support is not less than a predefmed minimal support threshold in a transaction seq 1 uence database [9, 10]. However, the algorithms incurred poor performance whi Ie searching the successive sequences and frequent sequences in the database.

The problems of AprioriAII were to produce too many candidates and process too many passes. As mentioned, the algorithm is inefficient but it is the basis of many efficient algorithms developed later. With GSP implementation, it also spends lots of time to find a great number of the candidates in the databases even time constraints were used in the algorithm.

Zaki and et. al. [12] proposed an efficient algorithm named as SPADE to find sequential patterns which used an efficient lattice search techniques and simple joins. The temporal join in the algorithm was to search the sequence. This method scans once with pre-processing and scans database 3 times at most of time for searching all sequential patterns. The algorithm is based an incremental mining method and utilize smaller sub? mining problems to fit into the main memory for running mining procedures.

Although SPADE outperforms AprioriAII and GSP, it exploits complex hash-tree structures that keep sub-optimal locality resident in memory. Ayres and et. al. [11] presented a vertical bit map presentation for long sequential pattern and utilized depth-first traversal with efficient pruning approach for support counting. As compared to SPADE, it implemented bitwise operation for searching the sequence unlike SPADE exploited temporal joins.

In addition to the Apriori-like algorithms above, FP? Growth-like algorithms [13, 14, 15] which extends FP-growth method are used for frequent pattern mining by exploiting a series of data projection based algorithms .The algorithms also solved the Apriori-like algorithms ' problems that produced the huge number of candidate sequences. Since Apriori-like algorithms follows generation-and-test methods to generate such large candidate sequences in main memory that the system performance went down.

TAAT2015 Tainan, Taiwan Nov. 20-22, 2015  Among the FP-Growth-like algorithms, FreeSpan [13] is the first FP-growth based method introduced for sequential pattern mining. This method partitions the search spaces and fmds each sequential patterns connected to the corresponding the projected databases. Then, it creates the frequent item set matrix and recursively find the frequent sequence patterns via the matrix. It is obvious that the construction of the projected database took some time [13].

Prefix Span [14] is established in a large database based on FreeSpan algorithm. This algorithm scans database twice to search sequential patterns in which it checks the prefix subsequences and projects the corresponding postfix subsequences into projected database. As compared to time? consuming methods AprioriAll and GSP even the length of sequential pattern is long, it is still efficient because this method does not need to produce and count candidate sequences.

B. Time Interval Sequential Pattern Mining  Time interval based sequential pattern mining [4] [19] [5] [6] has recently been discussed in the field of data mining.

Different from traditional sequential pattern mining, this kind of mining takes into account time interval between successive items in real application for mining time-gap sequential patterns.

Chen and et. al. [4] [19] extended sequential pattern mining by employ time-interval methods that implemented I-Apriori and I-PrefixSpan algorithms for discovering the time interval pattern between two product items in sequence database. 1- Apriori and I-PrefixSpan are created as well as based on Apriori [8] and PrefIxSpan [14] respectively. This work [19] made assumptions with the same time interval in prior to running the system although I-PrefixSpan was scalable as well as I-Apriori performed better than Apriori.

Chen and et. al. [4] extended the earlier work [19] to apply fuzzy theory to partition the time intervals by using changed Apriori algorithm named as FTI-Apriori by using distinct fuzzy membership function. This method is useful in predicting the customer's behaviors and solves shape boundary problem [19] when a time interval is close to the boundary of two adjoining ranges that was ignore or overemphasize.

Yen and et. al. [5][6] presented a new algorithm that implements Clique method to search time gap sequential patterns between successive items so that managers are able to use the information to promote item sale promotion. Yen and et. al. [6] improved the duplicated items problems [5] in transaction-time sequence database in which those repeated items could not be processed. Besides, redundant sequential pattern [5] in which one sequential pattern is mined and covered by the other one is removed out [6] via a counter.

C. Utility-based Pattern Mining  Utility-based pattern mining uses semantic significance for the mining constraints. Yao and Hamilton [3] consider useful items and their significance by using utility values. This work exploits pruner strategies incorporating with UMiniing and H _Mining algorithms to mine sequential patterns on the   databases. UMining was used to search itemsets in which their utility values are not less than minimal utility. In addition, upper bound utility of each item is evaluated in which items are pruned out because its upper bound is less than the minimum utility threshold. H _Mining extends Apriori strategy and convertible constraints to develop heuristic evaluation for mining most high utility itemsets.

In 2009, Shankar and et. al. [20] proposed a new version of UMining called FUM that run faster than UMining because of considering the purchased item only by customer in databases.

Besides, its results demonstrated more accurate and reliable under low threshold in a large number of databases.

Hong and et. al. [7] [21] proposed average utility and two? phase mining methods to mine high average utility itemsets.

The method in the phase I overestimates utility of the itemsets in order to keep downward closure property running for pruning out unqualified utility item sets while mining. Then, the candidate itemsets produced by phase I are determined the actual high average-utility item sets on phase II in which one database scan needs to be executed. Although two-phase method reduces a large number of candidate itemsets, it consumes lots of memory to maintain level-based property.



III. METHODS  This work takes into account time interval sequential mining along with high utility to find sequential patterns that may be used by decision maker to help them make more decision for sale prediction. In this section, key definitions are presented to describe our ideas some of which extended from earlier works [3][6][16][17].

Definition 1. I = {if, i2, ... , im} is a set ofm putchased items in a transaction database TDB. Thus, an itemset is a subset of items from I. Namely, IS={i], i2, ... , ip}, where 1 -:s.p -:s. m, and If 1-:s. x-:s. p, ix E f, is called as itemset which uses < i] i2 ...

ip> for short.

For example, the pattern A(2-3)B(4-6)C in Table III is presented as itemset {A} {B} {C} each of which corresponds to distinct transactions respectively  Definition 2. The time interval sequence in a transaction time sequence database TTSDB which is trnasformed from TDB is denoted as TS = <II (tl) 12 (t2) ... In_I (tn-I) In>, where I -:s. h -:s.

n and h E 1, such that th is a purchased time interval between two adjacent purchased items Ih and h+I' Namly, h is  purchased after th time units, then h-I is purchased  A time-interval sequence is a series of purchased itemsets any two of which has a time interval. About <lSI (tl) IS2, we can say most of customers purchase IS], and then purchase IS2 after tl time units. For example, the sequence pattern A (2-3)B in Table III means most of customers purchase A and then purchase B after 2 to 3 time units.

TAAT2015 Tainan, Taiwan Nov. 20-22, 2015  Definition 3. There exists a unit uffor an item if in which if E 1 and uf is the small purchased component for the item if' such that sold amount for this item is denoted as saf which is a multiple of Ul'  Consider the pattern A(2-3)B(4-6)C in Table 3. The purchased item A, B, and C have 2, 1, and 2 units respectively.

Definition 4. There exists a unit profit up; for an item ij in  which ij E I and up; is a profit for the item ?, such that sa;. up; for the purchased item if is a purchased profit or called utility of it  About the item A of A (2-3)B(4-6)C, its purchased profit is 25 because the sold amount and unit profit are 5. Based on the purchased profit, managers can set up their marketing decisions to check what the purchased items affect business profits. This work also exploits the purchased profit as the basic idea that guides time-interval sequential pattern mining to help them make more decisions.

Definition 5. The MinUtil which is a minimum utility threshold and accepted by user for the profit of purchased itemsetis in a database is called as minimum utility. And MinUtil is the percentage of total utilities in the database where the percentage is specified by user.

The frequent itemset mining is to use a specified minimum support for fmding frequent itemset. Utility-based mining considering the usefulness and significance of purchased items presents different evaluation way in contrast to the frequent itemset mining using the percentage of transactions. This work uses MinUtil as a utility constraint that filters out unquantified itemset.

Definition 6. The MinUtilPerUint is a mInimUm utility threshold per time unit between two adjacent purchased items, and is defined as  tu is a time unit which is specified by user. Hence, MinUtilPerUtil denotes the minimum profit per time unit is useful to the user. Namely, users specify how many tu units in which they expect to obtain the profit of purchased items under MinUtil. This work assumes all of the purchased items have same expected time unit tu.

The Algorithm UTMining  UTMining (TDB, UTs, CTI, CT2, CT3, tu)  Inupt: TDB: Transaction Database,  UTs: utility for distinct items,  CTl: constraint threshold 1 ,   CT2: constraint threshold2,  CT3: constraint threshold3,  tu: an expected time unit  Output: H: a set of high utility itemsets with time intervals

I. {  2. transform TDB into TTSDB and compute utility for each  item with UTs;  3. find high I-sequence for the utility of the items no  less than MinUtil (i. e. CTI constraint); And set k =2;  4. do {  5. produce high k-sequences and compute their utilities  per time unit for the utility of the sequences no less  than MinUtilPerUint;  6. produce the corresponding time interval table for the  high k-sequences;  7. map the time interval table into k-dimension spaces, and  compute density unit and cluster based on CT2, CT3 and  MinUtilPerUint; Also leave out the sequences which  do not matched with the thresholds.

8. produce (k+ I)-sequences with two k-sequences;  9. k =k+ 1;  10. } while (no (k+ I)-sequences produced ) I lend do_while  11. return H;  12. } Ilend UTMiningO  Statement 2 transforms TDB into TTSDB, and computes utility for each purchased item with item unit profit UTs. This work used an input dataset as TDB for data processing. As illustrated in Table V, TTSDB is constructed with different customer identification which is followed by the purchased items, their corresponding purchased quantities, and the purchased time. Statement 3 finds the high I-sequence for those items with no less than MinUtil. The MinUtil, CTl constraint, is evaluated with total utilities in the database and the percentage of the utilities. And a constant k is set up with 2 for k-sequence.

Statement 4 to 10 is a do_while loop for k-sequences which is ended until no more (k+ I)-sequences produced. Statement 5 combines and permutes two high (k-l)-sequences for k? sequences. MinUtilPerUint at this step is calculated with tu for k-sequences items which are potential candidates for the hgh k? sequences.

Statement 6 generates the time interval table to record the time unit and the time interval between two adjacent purchased items for k-sequences. In statement 7, user specifies CT2 and cn as float multiplication of MinUtilPerUint for minimum    TAAT2015 Tainan, Taiwan Nov. 20-22, 2015  density unit and cluster which a set of density unit. Namely, CT2 and CT3 are the minimum thresholds for a density unit and a cluster, respectively. Hence, the high k-sequenees are produced for those k-sequenees which are no less than CTl, CT2 and CT3 thresholds after k-dimension mapping. In addition, the sequences not matched with thresholds needs to be left out. Statement 8 produces (k+ I)-sequences with two high k-sequences for next loop processing.

TABLE V. TRANSACTION-TIME SEQUENCE DATABASE  CID Transaction-time se uence  a(5)], b(8)2' d(l2)], a(17)2' e(18)3 b(6h c(IOk a(15h d(16)" e(16)1 c(8) I, a(l3)" b(l7)" d(l9) 1, e(20), b(9) 2, c(13) 3, a(18) ], e(19) 2, d(21) 2, e(25) 2 a(IO)" b(13)" c(l8h d(24)z, e(27)" f(27) 2 a(13h b(16) I, d(l8)" f(19) 2 d(12)" a(l4lJ, b(17h c(22lz, a(26)] e(13) 1, a(15) I, c(19) 2, a(23) 1 f(14h c(17lz, d(23);, e(24) ,  TABLE VI. ITEMS AND THEIR PROFIT  Table V and VI are illustrated a transaction-time sequence database and item profits. a(5) 1 on CID 5 of the Table V represents that the customer number 5 purchases one item a at time unit 5. So, the customer number 5 in the database purchases item a, b, d, a and e which corresponds the purchased time unit 5, 8, 12, 17 and 18 respectively as well as the purchased quantities (i.e. 1, 2 ,  1, 2 and 3).

Hence, if we assume the expected percentage of the total utilities is 7% for the database utility 769. Then, MinUtil is 53.83. The high items for I-sequence are b, e, d andfwhose utilities of the four items are 55, 280, 300 and 70. Next step, the 2-sequenees candidate itemsets, <bd>, <be>, <bj>, <cd>, <eb>, <ef>, <df>, <fe> and <fd> can be found.

MinUtilPerUint is 5.383 when tu is assumed as 10. This means user expects the the every time unit is 5.383 which is evaluated with minimum utilities under 10 time units. So, the high itemsets, <bd>, <be>, <bf>, <cd>, <df>, <fe> and <fd>, are calculated based on not less than MinUtilPerUint. Then, this work produces the corresponding time interval table for the high 2-sequences. Additionally, we assume that CT2 and CT3 constraint are 10.77 and 13.46 under the evaluation of 2 and 2.5 times respectively. The length parameter c is set up with 1  for dimension partitions [10][6]. So, the high 3-sequenees <bdj>, <bed>, <fed> are obtained. Because there is no any 4- sequences that match the constraints, the 3-sequences are final   sequences we find. They are also the patterns we mind out.

And, we obtain the time intervals are 2 and 7 for the itemset bd and df of the sequence <bdj>. Thus, the interval sequence pattern written in b(2)d(7)f means most of the customers purchased item dafter 2 time units they purchases item b, and then they purchase items f after 7 time units they purchases item d. Similarly, the other two mined patterns are b(6)e(6)d and f(3) e(6) d.



IV. EXPERIMENTAL RESULTS  The experiments in this work were performed on a personal computer with Intel Pentium 3.33 GHz Processor E6800 and 8G main memory. UTMing used a dataset as an input file which was extracted from a retail supermarket database built in MYSQL. Customer number, purchased time and purchased items in the database were transformed into corresponding and sequential customer numbers, sequential time and simple names such as A, B and so on for easy identification and processing before dumping into the dataset.

The number of purchased items was exported out for the dataset without any transformation. Although the transactions in the database can be identified, they do not have any transactions number on each table record. Thus, this work generates transaction number for the corresponding customer, purchased items, purchased time, and the number of purchased items while being transformed. The experiments were conducted on the dataset with 60,241 transactions. The dataset also contains 2,723 distinct customers and 955 distinct purchased items. This work implemented the time-gap sequential pattern mining (TSPM) [6] for understanding the results produced from UTMing. The big difference between our approach and Yen's one [6] is that we used an interval time table instead of the time table and its corresponding time-gap table.

TABLE VII. THE EXECUTION OF THE TWO ALGORITHMS  llTMing TSPM PU execution MS execution  4.50% 4.00% 3.50% 3.00% 2.50% 2.00% l.50% 1.00% 0.50% 0.25% 0.20% 0.15% 0.10% 0.05%  time(sec.) time(sec.) 1335 4.50% 1261 2311 4.00% 19l1 2879 3.50% 2345 3510 3.00% 2733 4889 2.50% 3791 5718 2.00% 4553 6723 l.50% 5112 7897 1.00% 5721 9737 0.50% 7635  10559 0.25% 8583 12333 0.20% 9100 13622 0.15% 9826 15578 0.l0% 10095 17007 0.05% 12366  The results shown in Table VII are the execution time for the two algorithms. This work extracts the experimental results    TAAT2015 Tainan, Taiwan Nov. 20-22, 2015  with same values of percentage of total utilities (PU) and minimum support (MS). It is obviously that the execution time increases when two values decrease. This is because the approaches take more time to do more mining processes. We also can observe that UTMing takes more execution time as compared to TSPM. UTMing considers utility profits for mining procedure in which takes some time on itemset utility competition and comparison.

TABLE VIII. THE FOUND ITEMSETS OF THE TWO ALGORITHMS  UTMmg TSPM PU #patterns HUI(%found) MS #patterns HUI(%found) 4.50% 22 22(100%) 4.50% 1261 20(74.07%) 4.00% 29 29 (100%) 4.00% 1911 24(72.73%) 3.50% 33 33 (100%) 3.50% 2345 31(70.45%) 3.00% 50 50 (100%) 3.00% 2733 48(68. 57%) 2.50% 103 103(100%) 2.50% 3791 77(63.11%) 2.00% 114 114(100%) 2.00% 4553 88(40.18%) 1.50% 159 159(100%) l.50% 5112 133(3l.07% l.00% 245 245(100%) 1.00% 5721 219(28.74%) 0.50% 412 412(100%) 0.50% 7635 255(3l.95%) 0.25% 623 623(100%) 0.25% 8583 311(3l.54%) 0.20% 711 711(100%) 0.20% 9100 312(31.48%) 0.15% 821 821(100%) 0.l5% 9826 320(3l.31 %) 0.10% 899 899(100%) 0.l0% 10095 323(30.79%) 0.05% 962 962(100%) 0.05% 12366 325(30.15%)  The column #patterns on Table VIII is the number of patterns found. The column Hel represents the number of high utility itemset found. According to the results on this table, we find that that #patterns and HUI increase when the values of PU and MS decrease. This scenarios match with Table VII results when more mining processes are considered. On Table VIII, TSPM produces more patterns on the similar execution time on UTMing PU=0.50% and TSPM MS=0.15%, or UTMing PU=2.00% and TSPM MS=1.00%. Additionally, TSPM also generates more patterns compared to UTMing when the values of PU and MS decrease. However, UTMing has more HUI due to utility-based method in term of accuracy rate. Namely, the frequent intemset mining results in retrieving more missing rate when producing more patterns. As contrast to UTMing, this situation does not happing on utility-based mining.



V. CONCLUSIONS  In this paper, we have proposed novel algorithm UTMing to process sequential patterns with time interval and utility. The other algorithm TSPM is implemented on the experiments for comparing the results of two approaches. TSPM is a frequent? based items mining which used the number of transaction consisting of purchased items. The approach we use is a utility? based method that considers significance of purchased items while mining the sequential patterns. This is intended to provide another option for manager when make business decision. Although the results show UTMing performed worse compared to TSPM, UTMing demonstrates more accuracy rate when mining sequential patterns.

