PBFMCSP: Prefix Based Fast Mining of Closed Sequential Patterns

Abstract - In recent years, mining of sequential patterns has been studied extensively in various domains. Most of the existing algorithms find patterns in transactional databases  by scanning the records whether they contain patterns or not.

This paper proposes a novel algorithm to mine closed sequential patterns using an inverted matrix and prefix based sequence element matrix. Inverted matrix minimizes the search space for discovering various sequential patterns of different items. We use a prefix based sequence element matrix to minimize the scans required at levels k and k+1  in the mining process. Our experimental results show the performance improvement of the new algorithm over the previous work.

Keywords: - data mining, sequential patterns mining, closed sequential patterns

I. INTRODUCTION  The goal of data mining or knowledge discovery is to utilize those existing data to find out new facts and to uncover new relationships that were previously unknown, in an efficient manner with minimum utilization of the space and time [8]. Frequent Itemset Mining plays an essential role in many data mining tasks and applications, such as mining association rules, correlations, sequential patterns, classification and clustering.  Frequent item set construction has been a major research area over  the years and several algorithms have been proposed in the literature to address the problem of mining association rules. FIM algorithm could be broadly classified into two categories.

The first category, candidate -generation methods such as Apriori [1] and another category of method, pattern- growth method such as FP-growth [2].

Frequent pattern mining in temporal domain , an emerging research trend is the focus of this study. Existing frequent pattern mining algorithms in temporal domain are all based on Apriori?s candidate generation logic and hence suffer from repeated input scans setback  [3]. Prefix Span, a variant of FP-growth proposed for efficient sequential pattern mining requires input to be in the form of transactions or records and does not mai ntain temporal continuity across transactions  [4]. An algorithm on fast mining of closed sequential patterns mines patterns on transactional records using lattice concept [5].

An efficient algorithm for frequent temporal pattern (EFTP) discusses sequential pattern mining on single lengthy sequence, but it suffers from repeated scans of the original input and traversal of the tree  [6].

A sequence s is called closed if there exists no super sequence of s with the same support in the database.

Several studies were recently proposed to mine closed sequential patterns [9,10,11,12,13]. Mining sequential patterns with closed patterns may largely reduce the number of patterns generated in the process and without losing any information because it can be used to derive the complete set of sequential patterns.  Mining closed patterns may significantly reduce the number of patterns generated and is information lossless because it can be used to derive the complete set of sequential patterns.

In this paper, we focus on the problem of mining closed sequential patterns based on prefixes using inverted and prefix based sequence element matri ces. As a result, this study proposes an efficient algorithm to find various sequential patterns by minimizing the search space a nd reduces the number of scans of the original input .

The rest of the paper is organized is as follows:  Section 2 discusses the problem statement with an illustration.

Section 3 illustrates the organization of the inverted matrix.

Section 4 describes the prefix based fast mining of closed sequential patterns (PBFMCSP) with algorithms. Section 5 exhibits the experimental results. Finally, Section 6 presents the conclusion.



II. PROBLEM DEFINITION  This section discusses the basic concepts in sequential pattern mining and the problem of mining frequent closed sequential patterns in a sequence database.

Let D be a sequence dataset and I= { i 1, i2,?., ik }be a set of items in the dataset. A sequence S = <s1, s2,?., sk>, (si I) for 1?i?k, is an ordered list. We assume that there exists a linear order in S. A sequence S is closed iff no supersequences of S with the same support exist in the database.

Given a minimum support threshold min_sup and the input sequence dataset D, the task of prefix based mining of   DOI 10.1109/ACT.2009.125     sequential patterns is to mine the complete set of frequent patterns based on prefix in the dataset D.

Example 1: Consider the input sequence ABCDBDACDBACBDCDABCD in which the patterns to be mined and assume that the support count is 2. The frequent patterns of item A of this sequence would be for frequent 1-itemset = {A,B,C,D}, frequent 2 -itemset = {AB, AC, AD}, frequent 3-itemset = {ABC, ABD, ACB,ACD,ADB} and frequent 4-itemset = {ABCD, ACBD, ACDB}.



III. INVERTED MATRIX  This paper uses an inverted matrix approach  [7] to associate each item with its sequence segments those are subsequences of the sequence in which it occurs  as a prefix and to associate all items in each segment using pointers.

Similar to the vertical approach  in the transactional database representation, the item is the key of each record in this layout. The difference between this approach and the vertical approach is that each attribute on the inverted matrix is not the transaction ID, but a pointer points to the location of the next item on the same sequence segment.

The construction of the inverted matrix is assumed to be pre-processing of the mining process. The inverted matrix that is made of two parts: the index and the sequence array.

The index contains the items and the sequence array is a set of rows in which each row is associated with one item in the index part. Each row is made of pairs representing pointers, where each pair holds two information: the physical address in the index part of the next ite m in the same sequence segment, and the physical address in the row of the next item in the same sequence segment. The entries of the sequence segments with items are done as follows: the given sequence is read, the location of the first item in the sequence is sought and an entry to its sequence array is added that holds the location of the next item in this sequence. For the second time the same process occurs, in which an entry in the inverted matrix of the second item is added to hold the location of the third item in the sequence.

Table I shows the inverted matrix of the sample sequence ABCDBDACDBACBDCDABCD.

TABLE I INVERTED MATRIX  Index 1 2 3 4 5 6  1-A 2,1 3,2 3,3 2,5  2-B 3,1 4,2 1,3 4,4 3,5  3-C 4,1 4,3 2,4 4,5 4,6  4-D 2,2 1,2 2,3 3,4 1,4 $, $

IV. PREFIX BASED FAST MINING OF CLOSED SEQUENTIAL PATTERNS (PBFMCSP)  The proposed algorithm PBFM CSP consists of three algorithms namely the creation of inverted matrix , mining of sequential patterns and mining of closed sequential patterns. These three algorithms are developed to mine the frequent and closed sequential patterns in a sequence database. The steps for creation of inverted matrix are given in Algorithm 1. The inverted matrix is used to store the subsequences or sequence segments having various items as prefix in the sequence [6]. The mining phase steps are explained in two sub phases namely Phase I and Phase II as given in Algorithm 2. The process of mining closed sequential patterns is described in Algorithm 3.

A. Creation of Inverted Matrix Algorithm 1 Step 1: Scan the input sequence and find the frequent 1- itemset for the given threshold.  Assign an index to each item in the frequent 1-itemset and create an inverted  matrix with index of the items as rows.

Step 2: Scan the input sequence and seek for the current item index in the inverted matrix and an entry to its sequential array is added that holds the index of the next item in this sequence.

Step3: Repeat Step 2 until end of sequence is encountered.

B. Mining of Sequential Patterns Algorithm 2 Phase I For each item in the frequent 1-itemset  Step 1: Find all the 2-itemset having the item as a prefix.

Step 2: Scan the sequence segments of the concerned item in the inverted matrix using the index of the prefix item in the itemset and find the frequencies of 2- itemset. Do the pruning process to remove infrequent itemsets like Apriori.

Phase II For each item in k-itemset  Step 1: Create a prefix based sequence element matrix having the itemset as prefix with remaining items as rows and columns. The diagonal elements of the matrix represent the frequency of k+1-itemset  and the non-diagonal elements represent the frequency of k+ 2- itemset.

Step 2: Scan the sequence segments having the sequence element matrix prefix as sequence prefix in the inverted matrix, find the frequencies of k+1-itemset and k+2-itemset and update entries in the matrix.

Step 3: Do the pruning process to remove infrequent itemsets before generating candidate itemset in the next level and repeat the above steps in Phase II.

For the sequence ABCDBDACDBACBDCDABCD  given in Example 1, the following prefix based se quence element matrices with AB as prefix is first created using the frequent 2-itemset {AB, AC, AD} for patterns of item A.

The diagonal elements represent the frequency of ABC and ABD and the non-diagonal elements represent  the frequency of ABCD and ABDC.

Table II. PREFIX BASED SEQUENCE ELEMENT MATRIX WITH PREFIX AB  AB C D C 3 3  D 1 4  Similarly, the prefix based sequence mat rices are created for each itemset at level k in the mining process in order to find the frequent sequential patterns. The advantage of this method is that the number of scans is minimized by scanning sequence elements at k and k+1 levels at the same time. That is, the frequency of the patterns ABC and ABCD are found using a single scan and the same process is done for the patterns ABD and ABDC in a single scan.

C. Mining of Frequent Closed Sequential Patterns Algorithm 3  Step 1: Classify the frequent sequential patterns using the transactions in which they exist .

Step 2: Identify their equivalence classes containing elements sharing the same supporting transactions.  (ie itemsets that belong to the same equivalence class iff they are supported by the same set of transactions).

Step 3: Find the closed sequences which are maximal elements in each equivalent class.

Example 2: Let the transaction segments of item A be as shown in Table III.

Table III. TRANSACTIONS SEGMENT TABLE FOR ITEM A  Segment id Sequence  1 ABCD  2 ACD  3 ACBD  4 ABCD  The existence of sequential frequent patterns with prefix A and support count as 2 in transaction segments, are as follows:  AB={1,3,4} AC={1,2,3,4} AD={1,2,3,4} ABC={1,4} ABD={1,3,4} ACD={1,2,3,4} ABCD={1,4}  The equivalence classes for the above patterns are shown in Table IV.

Table IV. EQUIVALENCE CLASS TABLE FOR ITEM A  Equivalence class Patterns  {1,4} ABC,ABCD  {1,3,4} AB,ABD  {1,2,3,4} AC,AD,ACD  Here, the maximal frequent itemsets ABCD,ABD and ACD identified from each equivalence class are closed patterns.

5. EXPERIMENTAL RESULTS  This section reports the performance testing of PBF MCSP with Splice dataset with nucleotide sequences and MSNBC dataset with web page navigation sequences . We compare the performance of PBFMCSP with Apriori and FMCSP (Fast Mining of Closed Sequential Patterns). The analysis exhibits that the execution time of algorithm PBFMCSP is slightly better than FMCSP and outperforms Apriori.

During the preprocessing, the consecutive occurre nce of the same item is replaced by its single occurrence in both the datasets in order to avoid the more number of candidate generation.

The Splice and MSNBC datasets are distributed as part of the UCI KDD Archive. The splice dataset contains nucleotide sequences with 767 EIs (exon/intron boundary) and 768 IEs (intron/exon boundary). The proposed algorithm outperforms the two existing algorithms as mentioned in the Figure 1 for splice dataset.

100 200 300 400 500  Number ofTtransactions  Ti m  e in  S ec  on ds  PBFMCSP FMCSP Apriori  Figure 1. Result of Performance Analysis on Splice Dataset  Table V illustrates the comparative study on performance of algorithms 1 and 2 and the proposed algorithm and shows the performance improvement in the proposed algorithm with the minimum support as 2 , for the splice dataset.

TABLE V. COMPARISON OF ALGORITHMS (TIME IN SECONDS) FOR SPLICE DATASET  Number of Transactions  Algorithm1 (FMCSP)  Algorithm2 (Apriori)  Proposed Algorithm  100 3 27 2  200 4 35 3  300 5 45 4  400 6 58 5  500 8 67 6  The MSNBC Dataset contains the page vis its of 989818 users who visited msnbc.com. The average number of visits per user is 5.7. Each sequence in the dataset corresponds to page views of a user during that twenty -four hour period.

Each event in the sequence corresponds to a user's request for a page. Figure 2 shows the performance analysis  of the algorithms on MSNBC dataset.

100 200 300 400 500  Number of Transactions  Ti m  e in  S ec  on ds  FMCSP Apriori PBFMCSP  Figure 2. Result of Performance Analysis on MSNBC Dataset  Table VI shows the comparative study on performance of the three algorithms tested with for MSNBC dataset, having minimum support as 2.

TABLE VI. COMPARISON OF ALGORITHMS (TIME IN SECONDS) FOR MSNBC DATASET  Number of Transactions  Algorithm1 (FMCSP)  Algorithm2 (Apriori)  Proposed Algorithm  100 17 398 17  200 22 650 21  300 27 989 26  400 32 1312 30  500 38 1706 36

VI. CONCLUSION In this paper, we have studied the problem of mining closed sequential patterns by minimizing the search space and reducing number of input scans. The algorithm adopts a novel approach to mine the frequent closed sequential patterns using inverted matrix and prefix based sequence element matrix. Unfortunately, Apriori -like algorithms scan the database every time to mine the frequent patterns and suffer from more numbers of input scans. The same process is done for finding patterns of par ticular items, though the transactions do not contain those items. Our study exhibits that the number of scans could be reduced by finding the patterns based on prefix and it is also easier to perform mining process for any particular item using inverted matrix.

