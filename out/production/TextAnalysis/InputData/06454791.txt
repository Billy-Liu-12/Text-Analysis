A frequent itemsets mining algorithm based on matrix in sliding window over data  streams

Abstract?According to the nature of data stream which can only scans database several times, this paper proposed a mining frequent itemsets algorithm based on matrix in sliding window over data streams. The algorithm used two 0-1 matrices to store transaction and 2-itemsets, then we could get frequent itemsets through some relative operation of the two matrices. Experimental results demonstrated the efficiency of the algorithm.

Keywords- data stream; sliding window; frequent itemsets; matrix

I. INTRODUCTION Data streams are continuous, time-varying and  potentially unbounded in size. Examples include the large amount of daily sales records of supermarket, web page click streams, data stream of telephone records in the field of communication, etc. The data generated by the data stream can only be read once or several times because it cannot be stored in memory. Data stream min ing is the process of acquiring potentially useful information and knowledge from continuous data stream. The query of data streams require real-time processing, obviously, many of traditional data mining algorithms are not suitable for data stream min ing.

Data stream mining algorithms acquire mining results by scanning data stream once, and the result is usually approximate results.

In practical application, people pay more attention to the short-term data. Therefore, data stream mining is usually based on a certain time interval. There has been algorithm based on window over data streams. There are three window modes[1],it includes Snapshot Model Landmark Model and Sliding Window Model. Presently, Landmark Model and Sliding Window Model are widely applied.

Recently, there has been many frequent itemsets min ing algorithm over data streams. Typical algorithm is FP-stream [2], the algorithm has high time efficiency, but it requires access data stream twice, which lead to poor real-time. Lossy Counting algorithm proposed by G.S.Mankyu[3] ensure the accuracy of frequent itemsets mining, because the algorithm can only scans data stream once. Change [4] presented an algorithm based on BTS, and it has the large space complexity.

This paper presents a frequent itemsets min ing algorithm based on matrix in sliding window over data streams (TMFI).

The algorithm introduces two 0-1 matrices, one is transaction matrix which stores relevant information of each item; another is 2-itemsets matrix which stores information  of 2-itemsets. The algorithm gets the frequent itemsets through the operation of the two matrices, and it can only scans data stream once, therefore, it  reduces mining time and improves data mining efficiency.



II. RELATED CONCEPTS  Defin ition 1: Let ? ?1 2, ,..., mI I I I? be itemsets, the data stream DS  is a data items in a sequence ? ?1 2, ,..., nT T T which arrives continuously at certain speed, where iT  expresses i- th transaction (1 i n), for any iT , we have iT I? . Each transaction Ti has unique identifier TID .

Defin ition 2: The beginning and the end of sliding window W are no clear-cut distinction, and the end of W is the current moment. Where the size of W predefined by user is the number of transactions in sliding window. The window slides once when a new transaction arrives at the window.New transactions arrive continuously, old transactions are removed from the window, and the sliding window is renewed continuously.

Defin ition 3: A set of items is referred to as an itemset, an itemset that contains k items is a k-itemset[5].

X I? ? ,the number of transaction X in sliding window is called support count, written as N . ( ) / | |SUP X N W? is the support of  X  in W . If ( ) min_supSUP X ? ,then we call X  as frequent itemsets in sliding window for the given minimum support threshold min_sup .

Defin ition 4[6]: Total ordering relation ? .If X is less than Y according to the lexicographic order, written as X Y? ,such as A B C? ? .Similarly, we can define lexicographic order of two itemsets as ? ,such as A ABC CD? ? .

Suppose all the items are arranged by total ordering relation in the article.



III. THE ALGORITHM TMFI  A. Correlation matrix 1) Construct transaction matrix A  Rows in matrix A  express set of items ? ?1 2, ,..., mI I I  in the data stream, columns are the transaction ? ?1 2, ,..., nT T T .Let the size of the slid ing window | |W  be equal to n  (that is columns of the matrix). We construct a ( 1)m n? 	  matrix because itemsets contain m items, and   DOI 10.1109/ISDEA.2012.23     each element in the matrix is init ialized  to 0, where the  1m? row are SUM . When we scan the data stream, if the  window is not full, then we add the transaction iT which arrives in sequence to matrix. If item i is in the transaction  j , then let ijA be equal to 1, otherwise 0.If the window is  full, then we delete the oldest transaction and add new transaction to the sliding window. Suppose the current transaction is iT and the column of the oldest transaction is  CL , so the method of deleting the oldest transaction is  %CL i n ?  . SUM  row stores the number of 1 of each column,that is the size of transaction.

2) Construct 2-itemsets matrix B Suppose itemsets have m item, then we construct a  ( 1) ( 1)m m  2-itemsets matrix, and each element in the matrix is initialized to 0.If i jI I? ,then we get the i  row and  the j row in the matrix A  to do AND operation for iI  and  jI in frequent 1-itemsets 1L .If the support is higher than(or  equal to) a given threshold min_sup ,then itemsets ? ?,i jI I is frequent 2-itemsets.And let ijB  be equal to 1,otherwise 0.

B. The basic idea of the algorithm TMFI In this section, we explain the generation process of  frequent k-itemsets.

We can obtain k-itemsets by extending (k-1)-  itemsets.Let ? ?1 2 ( 1), ,...,i i i kI I I be frequent (k-1)-itemsets, if [ ( 1), ] 1B i k iu ? ( ( 1)i k iuI I ? ), and [ 1, ] [ 2, ] ... [ ( 2), ] 1B i iu B i iu B i k iu? ? ? ? in the 2-itemsets  matrix B , then ? ?1 2 ( 1), ,..., ,i i i k uI I I I is extended to k-  itemsets. If the value is higher than (or equal to) min_sup | |W	  through AND operation of corresponding row in the transaction matrix A , then ? ?1 2 ( 1), ,..., ,i i i k uI I I I  is frequent k-itemsets. Repeat this step until there are no new (k+1)-itemsets, the algorithm ends.

We introduce the basic idea of the algorithm TMFI by the example of transaction data stream shown in table 1.Suppose min_sup 2? | | 5W ? .

Table1. Transaction data stream  TID Items  1T ? ?1 2 4, ,I I I  2T ? ?1 2 3, ,I I I  3T ? ?1 2 3 5, , ,I I I I  4T ? ?2 3 5, ,I I I  5T ? ?1 2,I I  6T  ?  ? ?1 4 5, ,I I I  ?  1) The preliminary stage of the window The window is at the preliminary stage when the number  of transaction in the window is less than | |W . New transaction enters the window continuously until the window is full in this stage. The transaction matrix A  of transaction data stream in table 1 is shown in Table 2.

Table2. Transaction matrix A at the preliminary stage of the window  T1 T2 T3 T4 T5  I1 1 1 1 0 1  I2 1 1 1 1 1  I3 0 1 1 1 0  I4 1 0 0 0 0  I5 0 0 1 1 0  SUM 3 3 4 3 2  2) Sliding window stage The window is at sliding window stage when the window  is full. The oldest transaction is removed and new transactions are added to the sliding window in this stage.

Transaction matrix in table 2 is updated to table 3.

Table3. Transaction matrix A  at  sliding window stage  T6 T2 T3 T4 T5  I1 1 1 1 0 1  I2 0 1 1 1 1  I3 0 1 1 1 0  I4 1 0 0 0 0  I5 1 0 1 1 0  SUM 3 3 4 3 2  3) Frequent itemsets generation stage Step 1: Calculate the number of 1 of each row of  transaction matrix A  in table 3, if the value is higher than     (or equal to) min_sup | |W	 , then related items are frequent 1-itemset.We can get ? ?1 1 2 3 5, , ,L I I I I? .

Step 2: Construct 2-itemsets matrix B .As shown in table 4, we can obtain  ? ? ? ? ? ? ? ? ? ? ? ?? ?2 1 2 1 3 1 5 2 3 2 5 3 5, , , , , , , , , , ,L I I I I I I I I I I I I? .

Table4. 2-itemsets matrix B  I2 I3 I4 I5  I1 1 1 0 1  I2 0 1 0 1  I3 0 0 0 1  I4 0 0 0 0  Step 3: The frequent 2-itemsets can be extended to 3- itemsets ? ? ? ? ? ?? ?1 2 3 1 2 5 1 3 5, , , , , , , ,I I I I I I I I I  according to the items of 2L  and the information of matrix B . We can get  ? ?3 1 2 3, ,L I I I?  through AND operation of corresponding row in the transaction matrix A. There are no 4-itemsets in this example, the algorithm ends.

C. The process of the algorithm TMFI The algorithm includes three key steps which are the  preliminary stage of the window, sliding window stage and frequent itemsets generation stage. The framework of the algorithm TMFI is as follows:  Input: data stream DS , the given threshold min_sup , the size of slid ing window | |W  Output: frequent k-itemsets Each transaction Tj  in sliding window If ( W  is not full)//the preliminary stage of the window  { for (i=1; i<=m;i++)  if(Ii in Tj) A[i,j]=1; else        A[i,j]=0; } Else//sliding window stage int  %CL i n? ; Update the value of the CL-th column of matrix A,  the remain ing columns hold changeless ; Produce L1 through scanning the first m rows in the  matrix A; Construct 2-itemset matrix B; // frequent itemsets generation stage,  // ? ?1 1 2 ( 1), ,...,k i i i kL I I I  ?  is frequent (k-1)-itemsets.

While (there are new frequent (k+1)-itemsets) If (B[i(k-1),iu]=1) and (B[i1,iu] =B[i2,iu]  =?=B[i(k-2),iu] =1)  Frequent (k-1)-itemsets is extended to k- itemsets  ? ?1 2 ( 1), ,..., ,i i i k uI I I I ;  If (sup (? ?1 2 ( 1), ,..., ,i i i k uI I I I )>= min_sup ) ? ?1 2 ( 1), ,..., ,k i i i k uL I I I I ? ; End while

IV. EXPERIMENTAL RESULTS The algorithm in this article took simulated data  generated by IBM data generator[8].All experiments were carried out on Intel core 3.30GHz CPU and 3062MB memory in C# programming environment with Windows XP.

The data set was dense set T40I10D100K in experiments, where the average length of transaction was 40, the average length of maximal frequent itemsets was 10 and the total of transaction was 100,000.

We compared the algorithm TMFI with the algorithm FIM-SW [9]. The algorithm FIM-SW use Apriori property to get frequent k-itemsets, and it needs join and looping operations in the process of generating frequent itemsets , therefore, the algorithm is time-consuming and inefficient.

But the algorithm TMFI avoids the large amount of the candidate itemsets and leave out join and looping operations, it improves efficiency of mining. Set | |W =1000 and min_sup =0.02, Figure 1 gives the comparison of mining time changing with the number of transaction of TMFI and FIM-SW algorithm. Figure 2 g ives the comparison of mining time changing with support of TMFI and FIM-SW algorithm with the premise of | |W =5000 and min ing 50,000 transactions.

Figure 1.  The comparison of processing time under different the number of transaction     Figure 2. The comparison of processing time under different support

V. CONCLUSIONS This article presents a frequent itemsets min ing  algorithm based on matrix in sliding window over data streams. The algorithm uses two 0-1 matrix to store transaction and the information of 2-itemsets through scanning data stream once. We obtain support of the related items by AND operation and the algorithm avoids the large number of the candidate itemsets, therefore, it raises the efficiency of mining.

