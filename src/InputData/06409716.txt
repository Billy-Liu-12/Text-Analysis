Speed up the Execution Efficiency of Finding  Fuzzy Frequent Itemsets

Abstract?This paper proposes an efficient fuzzy mining approach, namely GDF, to speed up the execution efficiency of finding fuzzy frequent itemsets in a quantitative database.

Unlike the existing approaches, the proposed GDF adopts the data-reduction strategy to effectively reduce the number of unpromising candidate fuzzy itemsets for mining. The experimental results on a synthetic dataset reveal that the proposed GDF approach could outperform the traditional fuzzy mining algorithm.

Keywords?data mining; fuzzy data mining; fuzzy frequent itemset; pruning

I.  INTRODUCTION In data mining researches, deriving association rules  from transaction data is the most commonly seen. The reason is that association-rule mining [1][2] was first proposed and developed to find the relationship of items in a set of data.

For instance, assume the frequency of the product combination {bread, milk} is high in a transaction database.

It means that most customers usually buy breads and milks together in the store. Other than items bought in transactions, however, quantities bought of the items are usually also recorded in the transactions. As above describes, since the traditional association-rule mining only considers the occurrence of items in transactions, it is not sufficient to handle such data with quantitative values.

To address this problem, Srikant et al. subsequently proposed a new research issue, namely quantitative association rule mining, which partitioned several attribute value ranges for each attribute to find useful quantitative rules [13]. However, quantitative association rules could  extra provide the quantity intervals information of items in comparison with traditional association rules, but how to determine the suitable intervals for each attribute is quite difficult, and the discovered rules are not easily to comprehend.

Fuzzy theory had been widely applied to various problems because of its simplicity and similarity to human reasoning. Based on the reason, Kuok et al. then proposed fuzzy data mining, which applies the concept of fuzzy set theory to data mining [11]. In their study [11], quantitative values of items in transactions are converted into linguistic regions, and then the count of a fuzzy itemset in a transaction could be calculated by the product of fuzzy regions of all fuzzy terms of the itemset in that transaction. Different from the calculation function in [11], Hong et al. applied the fuzzy minimum operator in fuzzy set theory to evaluate counts of fuzzy itemsets in a set of transactions, and they also proposed an Apriori-based mining algorithm to efficiently find fuzzy association rules [8]. Afterward, Hong et al. also investigated the trade-off problem between the number of fuzzy rules and computation time [9]. The main concept is that only the fuzzy region with highest degree value for the items could be kept in the set of fuzzy frequent 1-itemsets to continue the mining task. Through such way, a great deal of fuzzy rules could thus be avoided or the efficiency could be improved [9]. However, since Hong et al.?s two approaches had to keep all unpromising items in transactions, and thus their approaches had to spend a good deal of time cost generating a large number of candidates and counting their actual fuzzy counts in transactions.

National Chung Hsing University, Taichung, Taiwan, Nov.16-18, 2012     In this study, we thus propose an efficient fuzzy mining algorithm, which is a gradual data-reduction approach (termed GDF), to discover fuzzy association rules from a quantitative database. In particular, the new data-reduction strategy consists of two procedures, pruning and merging.

The pruning procedure is mainly applied to reduce the number of candidates in each pass, in which unpromising items are removed early from transactions. Next in the merging procedure, the data size in each pass can be gradually reduced to save the scanning time needed for mining. The experimental results also show the proposed GDF algorithm executes faster than the existing algorithms as well.

The rest of parts in this paper are organized as follows.

The related works are reviewed in Section II. The execution details of the proposed GDF algorithm are introduced in Section III. The experimental results are then showed in Section VI. Finally, conclusions and future work are discussed in Section V.



II. REVIEW OF RELATED WORKS In the field of data mining, discovery of association rules  in large databases is one of important issues due to the consideration of relationship of items [1][2]. To address this, Agrawal et al. first proposed a famous algorithm, named Apriori, to find frequent itemsets in databases. However, in general databases, a transaction usually includes quantities of bought items other than items bought in that transaction.

Srikant et al. thus proposed a new issue, namely quantitative association rules, which partitioned several attribute value ranges for each attribute to find useful quantitative rules [13].

On the other hand, the fuzzy set theory has widely been used various intelligent systems because of its simplicity and comprehensibility to human reasoning. Kuok et al. thus proposed a new research issue, fuzzy data mining, which applied the concept of fuzzy set theory to data mining [11].

Different from the calculation function in [11], Hong et al.

proposed a new calculation of fuzzy count for itemsets [8].

That is, the fuzzy minimum operator in fuzzy set theory is applied to the new fuzzy count calculation of itemsets in a set of transactions. In addition, they also proposed an Apriori-based mining algorithm to efficiently find fuzzy association rules [8]. Afterward, most studies [3][4][5][12] [14] were still based on the principle of Hong et al.?s approach to find various kinds of fuzzy association rules in databases.



III. THE PROPOSED ALGORITHM In the study, the problem of fuzzy mining to be solved  can be defined as follows. Assume a quantitative transaction database (QDB) contains a number of quantitative transactions, and each transaction is recorded with the purchased items and quantities. The problem to be solved here is to find all the fuzzy frequent itemsets with their actual fuzzy values being larger than or equal to a predefined minimum fuzzy support threshold ?. In this paper, a novel gradual data-reduction fuzzy mining approach (named GDF) is proposed to effectively and efficiently discover fuzzy association rules in a given quantitative transaction database,  QDB. Then, the data-reduction strategy used in the proposed algorithm is first described in the following section.

A. The Data-reduction Strategy In the section, an effective strategy is developed to prune  unpromising fuzzy terms in transactions and then merge transactions with the same fuzzy terms into one. The unnecessary process for matching candidate fuzzy itemsets can be avoided with the help of the strategy. The main concept behind the strategy is that the fuzzy terms not appearing in the set of candidate fuzzy itemsets at this pass must be impossible to be members of any fuzzy frequent itemsets later according to downward-closure property with the minimum operator in fuzzy frequent itemset mining.

After transactions are modified in each level, the fuzzy terms in some transactions may be the same. The same transactions with the same fuzzy terms can then be merged into one to avoid unnecessary process in matching fuzzy itemsets and counting their fuzzy supports from the merged transactions.

As mentioned above, it can be known that the data size for a transaction database will be getting smaller and smaller at later passes. Here a simple example is given to illustrate how to gradually reduce the scale of data in each pass by using the strategy.

For example, assume the two transactions to be processed are Trans1:{2A, 1B, 1C, 1D} and Trans2:{2A, 1C, 1D}, where numbers represent quantities and symbols represent items. There are four items in the two transactions, respectively denoted as A to D. For simplicity, the same membership function (as shown in Figure 1) with the three fuzzy regions, Low, Middle and High, are given for the four items.

Figure 1: Membership functions for all the four items in this example.

According to the membership function in Figure 1, the  quantity values of the four items in Trans1 can be then converted into the four fuzzy sets, (0.8/A.Low + 0.2/A.Middle + 0/A.High), (1/B.Low + 0/B.Middle + 0/B.High), (1/C.Low + 0/C.Middle + 0/C.High), and (1/D.Low + 0/D.Middle + 0/D.High), respectively. The same process is done for the other transaction. After the step, the actual count of each fuzzy term in the two transactions could be found, as shown in Table I.

National Chung Hsing University, Taichung, Taiwan, Nov.16-18, 2012     TABLE I.  THE COUNTS OF THE CANDIDATE FUZZY 1-ITEMSETS.

1-itemset count 1-itemset count {A.Low} 1.6 {C.Low} 2  {A.Middle} 0.4 {C.Middle} 0 {A.High} 0 {C.High} 0 {B.Low} 1 {D.Low} 2  {B.Middle} 0 {D.Midde} 0 {B.High} 0 {D.High} 0   Here assume the minimum fuzzy support threshold is set  at 1.6. Since the count values of the three fuzzy 1-itemset, {A.Low}, {C.Low}, and {D.Low}, are larger than the minimum fuzzy support threshold, they are put into the set of the fuzzy frequent 1-itemset (FF1). Next, the three candidate fuzzy 2-itemset, {A.Low, C.Low}, {A.Low, D.Low}, and {C.Low, D.Low}, can be generated from the set of FF1, and the itemsets are put in the set of candidate fuzzy 2-itemsets, C2. According to the set of C2, the unpromising fuzzy terms not appearing in transactions can be removed from transactions. After this process, the two transactions are then all {0.8/A.Low, 1/C.Low, 1/D.Low}. In addition, since the two transactions have the same fuzzy terms, they can be merged into one transaction, and the value of 2 is attached to the merged transaction {0.8/A.Low, 1/C.Low, 1/D.Low}: 2.

Next, the above process is repeatedly executed later until no candidate itemsets could be generated. Then, all fuzzy frequent itemsets could be found from the set of transactions.

As this example describes, the proposed strategy can thus increase the efficiency of finding fuzzy frequent itemsets in a transaction database. The details of the proposed algorithm are stated in the following subsection.

B. The Proposed Fuzzy Mining Algorithm, GDF In the section, the execution procedures of the proposed  gradual data-reduction fuzzy mining algorithm (abbreviated as GDF) are then described as follows.

INPUT: A set of items, a set of membership functions, and a  quantitative transaction database QDB, in which each transaction includes a subset of items with quantities, and the minimum fuzzy support threshold ?.

OUTPUT: A final set of fuzzy frequent itemsets (FF).

STEP 1. For each quantitative transaction Transy in QDB,  convert the quantitative value vyz of each item iz in  Transy to a fuzzy set fyz as ???  ? ???  ? +++  zh  yzh  z  yz  z  yz  R f  ...

R f  R f     1 ,  using the given membership functions for item quantities, where h is the number of regions for iz, Rzl is the l-th fuzzy region (linguistic term) of iz, and fyzl is the fuzzy membership value of vyz of iz in the l-th fuzzy region Rzl.

STEP 2. For each fuzzy term izl in QDB, calculate the summation of the scalar cardinality values of the fuzzy memberships for the fuzzy term izl in the transactions including izl.

? ???  = QDBTransTransi  i yyzl  yzlzl fcount  where fyzl represent the fuzzy membership value of the l-th fuzzy region Rzl of the quantity vyz of the item iz in Transy.

STEP 3. For each fuzzy term izl in QDB, check the count value of fuzzy term izl is larger than or equal to the minimum fuzzy support threshold ?. If yes, put it in the set of fuzzy frequent 1-itemsets, FF1; otherwise, omit izl.

STEP 4. Set r = 1, where r represents the number of items in the current set of candidate fuzzy r-itemsets (Cr) to be processed.

STEP 5. Generate the candidate set Cr+1 from the set FFr, in which all the  r-sub-itemsets of each candidate must be contained in the set of FFr, and remove the candidate fuzzy (r+1)-itemsets with at least two different fuzzy terms but the same item from the set Cr+1.

STEP 6. Gather the fuzzy terms existing in the set FFr and denote them as Sr.

STEP 7. For each transaction Transy in QDB, do the following substeps.

(a) Remove the fuzzy terms not appearing in Sr in Transy.

(b) Check whether the number of items kept in the modified transaction is smaller than the value of r+1. If it is, remove the transaction from the set of modified transactions; otherwise, keep the modified transaction in the set of modified transactions.

(c) Merge the modification transactions with the same fuzzy region of fuzzy term.

STEP 8. For each fuzzy itemset (r+1)-itemset X in the set Cr+1, calculate the summation of the scalar cardinality values of the fuzzy term izl in the modification transactions including the fuzzy term izl.

? ? ???  = QDBTrans TransXXi  X y  yzl yzl  fMincount ,   where fyX is the intersection value of all membership values of all items in X in Transy by using the minimum operator.

STEP 9.  For each candidate fuzzy frequent (r+1)-itemset X in set Cr+1, check the value of the fuzzy term izl is larger than or equal to the minimum fuzzy support threshold ?, put it in the set of fuzzy frequent (r+1)- itemsets, FFr+1.

STEP 10. If FFr+1 is null, do STEP 11; otherwise, set r = r + 1 and repeat STEPs 5 to 10.

STEP 11. Output the final set of fuzzy frequent itemsets, FF.



IV. EXPERIMENTAL EVALUATION A series of experiments were conducted to compare the  performance of the proposed Gradual Data-Reduction Approach for Fuzzy Itemset Mining (GDF), and the traditional fuzzy itemset mining algorithm (termed FApriori) [8] for various parameter values. The all algorithms were  National Chung Hsing University, Taichung, Taiwan, Nov.16-18, 2012     implemented in J2SDK 1.6.0 and executed on a PC with a 3.30 GHz CPU and 4 GB memory.

In the experiments, the public IBM data generator [10] was also used in our experiments to produce the data sets.

The five parameters used in the IBM data generator, T, I, N, D, and min_FSup, represented the average length of items per transaction, the average length of maximal potentially frequent itemsets, the total number of items, the total number of transactions, and the minimum fuzzy support threshold, respectively.

Moreover, since our purpose was to find out fuzzy frequent itemsets, we thus developed a simulation model, which was similar to that used in traditional FApriori algorithm, to generate the quantities of the items in the transactions, and each quantity ranged among 1 to 10. In the experiments, we assumed that all items have the same membership function, as shown in Figure 2.

Figure 2: The memnership function used in the experiments.

Figure 2 showed the efficiency comparisons of the two algorithms, GDF, and FApriori, for datasets for different minimum fuzzy support thresholds min_FSup, respectively.

1,000  0.10% 0.08% 0.06% 0.04% 0.02% 0.01%  E xe  cu tio  n Ti  m e  (S ec  .)  Minimum Fuzzy Support Threshold, min_FSup  T10I4N4KD200K dataset  GDF FApriori    Figure 3: Execution efficiency of the two algorithms under different minimum fuzzy support thresholds, min_FSup.

It could be observed from Figure 2 that the execution efficiency of the GDF was superior to the FApriori, in execution efficiency. The main reason for this is that the GDF adopted the data-reduction strategy to reduce unpromising items in the mining, and then the unnecessary time cost for counting the supports of fuzzy itemsets could be effectively saved. Thus, GDF had a better efficiency in finding fuzzy frequent itemsets in quantitative databases in comparison with the FApriori.



V. CONCLUSIONS This paper proposes an efficient fuzzy mining approach  (GDF) to discover fuzzy association rules. Different from the existing algorithms, the proposed GDF approach adopts an effective strategy consisting of two procedures, pruning and merging, to improve efficiency in finding fuzzy association rules. Finally, the experimental results reveal the proposed algorithm has good efficiency performance in comparison with the traditional FApriori algorithm under various parameter settings.

