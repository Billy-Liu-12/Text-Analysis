MAD-ARM: Mobile Agent based Distributed

Abstract- Rapid advancement in information technology, business applications and its data storage are distributed in nature. Due to  this distributed nature of the transaction databases, distributed  association rule mining plays on important role to discover the  interesting association and/or correlation relationships among  large set of data items. Current research on distributed  association rule mining focused to improve the efficiency of the  algorithm and speed up the mining process. Few researchers  have focused on to improve the efficiency of association rule  mining in distributed environment by deploying intelligent  agents for the mining frequent itemsets and generate association  rule. Existing mobile agent based distributed association rule  mining framework such as IDMA, EMADS, AeMSAR suffers the  communication overhead.  In this paper, the proposed  framework called MAD-ARM, which attempts to reduce the  communication overhead.

Keywords: FI-Mining, Association Rule Mining,  Distributed Data Mining, Intelligent Agent Based Mining

I. INTRODUCTION  Data mining is an emerging research area, whose  goal is to discover potentially useful information embedded  in databases. Due to the wide availability of huge amounts of  data and the imminent need for turning such data into useful  knowledge. Hence the data mining has attracted a great deal  of attention in recent years. There are several data mining  techniques are available to analyse such the volume of data.

Association rule mining is one of the most important  techniques of data mining which was introduced by Agrawal  et al in 1993 [1]. It finds the interesting association and/or  correlation relationships among large set of data items.

Discovering this association rules can guide the decision  making. A typical and widely used example of association  rule mining is Market Basket Analysis.

Association Rule Mining includes two major  processes, frequent itemset mining (FIM) and strong  association rule generation.

? Frequent Item Generation: This is to find all the itemsets that satisfy the minimum support threshold. The  itemsets are called frequent itemsets.

? Rule Generation: This is to extract all the high confidence rules from the frequent itemsets found in the first step.

These rules are called strong rules.

The majority of the research has focused on frequent  itemsets mining as its complexity is significantly greater than  that of association rule generation.

Rest of the paper is organized as follows. Section 2  outlines the distributed association rule mining. Section 3  introduces the agent based DDM. Section 4 describes the  existing agent based DDM architectures. Section 5 presents  the agent based distributed association rule mining. Section 6  present the new framework, MAD-ARM In section 7  conclude the.



II. DISTRIBUTED ASSOCIATION RULE MINING  There are few requirements that dictate the need for  distributed and parallel association rule mining: 1. Data are  inherently distributed for variety of practical reasons  including security and fault tolerance etc. Moreover cost of  transporting data to single site is usually high and sometime  unacceptable. 2. The second requirement is that many of the  association rule mining algorithm requires all data to be  resident in memory. This might be unfeasible for large  datasets. Data partitioning is one of the popular solution for  this problem. 3. Process high dimensional datasets, typically  available as input to the problem of association rule  discovery requires multiple processors parallel system.

A. Algorithms for Parallel and Distributed Association Rule  Mining    The current parallel and distributed algorithms are  based on the Apriori algorithm. Two major classes of  parallelism normally used: data parallelism and task  parallelism [2]. The major algorithms used for parallel and  distributed association rule mining are: Count Distribution  (CD), Data Distribution (DD) and Candidate Distribution.

In the data parallelism paradigm, a representative  algorithm is the count distribution (CD) algorithm in [3]. The  candidates are duplicated on all processors, and the database is  distributed across the processors.  Each processor is  responsible for computing the local support counts of all the     candidates, which are the support counts in its database  partition. All processors then compute the global support  counts of the candidates, which are the total support counts of  the candidates in the whole database, by exchanging the local  support counts (Global Reduction).  Subsequently, large  itemsets are computed by each processor independently.

In the task parallelism paradigm, a representative  algorithm is the data distribution algorithm (DD) in [3]. The  candidate set is partitioned and distributed across the  processors as is the database. Each processor is responsible for  keeping the global support counts of only a subset of the  candidates.   This approach requires two rounds of  communication at each iteration.  In the first round, every  processor sends its database partition to all the other  processors. In the second round, every processor broadcasts  the large itemsets that it has found to all the other processors  for computing the candidates for the next iteration.

The candidate distributed algorithm [3] attempts to  reduce the synchronization and communication overhead in  the count distribution (CD) and data distribution (DD) by  selectively partitioning the database such that each processor  has locally the data needed to process its candidate set. It does  this after a fixed number of passes of the standard data  distribution algorithm.



III. AGENT BASED DISTRIBUTED DATA MINING  Objective of many existing distributed data mining is  to integrating the knowledge which is discovered out of data  at different geographically distributed network sites with  minimum amount of network communication and maximum  of local computation [4]. To achieve this objective, few  architectural models were proposed which are still very open  for further research. In general, there are two architectural  model used in the development of Distributed Data Mining  (DDM) system namely Client-Server (CS) and Software  Agent (SA). The agent category can be further divided on the  basis of whether the agents have ability to migrate in a self-  directed manner or not. This is shown in the Figure 1.

Figure 1: Taxonomy of Distributed Data Mining Architectures [5]      A. Client Server based DDM Model  The client-server model uses the technologies like:  RPC, CORBA, DCOM, RMI, JDBC etc. The client side  requests are sent to DM server that determines the required  data sources and collects data from different locations and  brings all the required data for the specified mining process  to the DM server. DM server in turn houses the data mining  algorithms. The mining process is accomplished on the DM  server and the results are returned to the requested client.

Figure 2 shows the typical client-server based DDM process.

Figure 2: Client-Server based DDM Process [6]  B.  Software Agent based DDM Model  Software Agents refers to intelligent program that  performs certain tasks on behalf of the user. Software agents  endowed with the property of mobility are called Mobile  Agents [MA]. MA is an autonomous transportable program  that can migrate under its own or host control from one node  to another in the heterogeneous network to perform a task. In  other words, the program running at a host can suspend its  execution at an arbitrary point, transfer itself to another host  or request the host to transfer it to its next destination and  resume execution from the point of suspension. Once the  agent is launched, it can continue to function even if the user  is disconnected from the network. MA not only moves from  one host to another but also spawns new agents; interact with  other stationary agents and searches services/resources [7].

The advantages provided by the MA model over  Client-Server model are: 1. Increasing scalability. 2. Reduces  the network traffic and save the network bandwidth by  allowing only shared resultant data to be carried over the  network. 3. MA can operate asynchronously.

Multi-agent systems (MAS) are communities of  software entities, operating under decentralized control,  designed to address (often complex) applications in a  distributed problem solving manner. Multi-Agent Systems  (MAS) offer a number of general advantages with respect to  computer supported cooperative working, distributed  computation and resource sharing.

The advantages offered by MAS are entirely  applicable to Knowledge Discovery in Data (KDD). By its  nature data mining is often applied to sensitive data. MAS  allow data to be mined remotely. Similarly, with respect to     data mining algorithms, MAS can make use of algorithms  without necessitating their transfer to users, thus contributing  to the preservation of intellectual property rights [8].



IV. RELATED WORK ON MOBILE AGENT BASED  DISTRIBUTED ASSOCIATION RULE MINING  This section presents the review of existing  framework for agent based distributed association rule  mining. Only limited literature is available for this domain.

IDMA [9] architecture shows mobile agent based  distributed and incremental association rule mining. The  system includes the distributed knowledge discovery  management system (KDMS), the knowledge discovery sub-  system (sub-KDS), the data mining mobile agent (DMMA)  and the local knowledge base (LKB). The KDMS dispatches  the mobile agent DMMA to each site. The mobile agents  move to the sub-KDS and execute the mission of data  mining. The local large itemset scan be got so the local  association rules can be obtained and the local knowledge  base can be refreshed. The set of local large itemsets and  their support counts led back to the KDMS by the mobile  agents. When all the mobile agents come back to KDMS, the  possible minimum and maximum support counts of the  potential global itemsets can be got. This system was  implemented based on IBM Aglet.

MADDM-Mobile agent based Distributed Data  Mining [10] method used an algorithm which reduces the  time to compute global frequent itemsets. It has two steps:  1. Mining Local Frequent Itemsets(LFI) at each site in parallel and send them to central site to calculate Global  Frequent Itemsets(GFI).

2. Central site calculates the Candidate Global Frequent Itemsets(CGFI) and send them to all sites. Each local  site computes the count of such CGFI and sends them  back to central site to complete the process of finding  GFI.

An Extendible Multi-Agent Data mining System  (EMADS) [8] framework promotes the ideas of high-  availability and high performance without compromising  data or DM algorithm integrity. The proposed framework  provides a highly flexible and extendible data-mining  platform. The resulting system allows users to build  collaborative DM approaches. The proposed framework has  been applied to a number of DM scenarios: Meta association  rule mining (Meta ARM) and classifier generation.

Distributed BitTable Multi-Agent Association Rule  Algorithm (Distributed BMAS algorithm)[11] combines the  association rules  as a data mining technique, the BitTable  data structure that was proved to be a very efficient data  structure for mining frequent itemsets and the Multi-agents  technique to decrease the time needed for candidate  generation and the support count processes. Databases with  this structure are very compressed and can easily fit in  memory. The BitTable data structure was implemented  before the first iteration. This had a great impact on the  algorithm performance. This algorithm was implemented and  tested on two synthetic centralized datasets and five  distributed real world benchmark datasets and has proved  better performance and execution time.

Recently proposed framework, AeMSAR (Agent  Enriched Mining of Strong Association Rules) [7], highlights  the agent based approach for mining the strong association  rules from distributed data sources. This framework consist  of one central site (SCENTRAL) where global knowledge is  computed and n distributed sites {Si, i=1?n} where  horizontal partitioned transaction datasets {DBi, i=1?n} are  stored. Synthetic Transactional Data sets are generated and  stored at each distributed site using a tool called  TDSGenerator. SCENTRAL acts as the agent launching station  from where mobile agents are dispatched carrying some  information and returned back with results. Mobile as well as  Stationary agents are stored in Agent Pool at this site. A  Central Security Agency (CSA) at this site assigns a legal  certificate to every mobile agent before its launch and when  that agent reaches at a node in its itinerary authenticity of this  certificate is verified again so that no malicious agent can  attack local node. There are five agents in the architecture,  three of these are MAs and other two are stationary  intelligent agents to perform different tasks. Mobile Agents  are ? Local Frequent Itemset Generator Agent (LFIGA),  Local Knowledge Generator Agent (LKGA), Total Frequent  Itemset Collector Agent (TFICA). These agents maintains  dynamic itinerary, whenever required this can be updated at  any node at any time in the itinerary. These agents maintain  two containers- Result container and State container. One for  transporting result data across the network and other for state  variables and their intermediate values. Stationary Agents are  ? Global Frequent itemset Generator Agent (GFIGA) and  Global Knowledge Generator Agent (GKGA). The detailed  relationship among these agents and working behaviour of  each agent is as follows.

LFIGA: It is launched from the SCENTRAL carrying given minimum threshold support (min_sup) and visits n sites  in its itinerary. It generates and stores the list of local  frequent k-itemsets and list of support count of every  items in a site Si by applying Apriori algorithm on the  local transactional dataset (DBi) at that site with the  constraint of min_sup.

LKGA: It is also launched from the SCENTRAL and visits n sites in its itinerary. It applies the constrains of given  minimum threshold confidence (min_conf) to generate  and store the list of locally strong association rules by  using local frequent k-itemset and list of support count  generated by LFIGA at site Si.

TFICA: It is also launched from the SCENTRAL and visits  n sites in its itinerary. While visiting each site, it collects  lists of local frequent k-itemset generated by LFICA and  carries back the list of total frequent k-itemset at  SCENTRAL. Local frequent k-itemset can be encrypted so  that privacy of the local data can be preserved.

GFIGA: It is a stationary agent at SCENTRAL mainly used for processing the total frequent k-itemset list generated  by TFIGA to generate the global frequent itemset list,  which is the intersection of all the local frequent k-  itemset.

GKGA: It is also a stationary agent at SCENTRAL mainly used for processing the global frequent itemset list  generated by GFIGA to complete the global knowledge  i.e., the list of globally strong association rules.

The existing mobile agent based distributed association  rule mining frameworks attempt to integrate global  knowledge after the local mining. This obviously initiates  several research problems: Reducing high communication  cost, handling multiple heterogeneous data sources, improve  the efficiency of incremental knowledge integration,  scalability of the framework, data privacy & security, fault  Tolerance of DARM and efficient Data Partitioning.



V. PROPOSED FRAMEWORK  This section presents our proposed framework called  Mobile Agent based Distributed Association Rule Mining  (MAD-ARM) on transactional data. This framework builds  on IBM?s Aglets Workbench System. The main objective of  this paper is, to reduce the communication cost involved in  MADM framework and also ensure the agent security.

In our MAD-ARM frame work, we used horizontally  partitioned dataset across the site, which are homogenous.

MAD-ARM based on IDMA and AeMSAR framework. The  detailed architecture is shown in figure : This  framework  consist of one knowledge server (K-Server)  where the global  association rule is computed, some stationary agent (SA) and  one mobile agent. Entire transactional database is divided  into n partitions (D=P1, P2?.Pn). Partitions are located in n  remote sites (Sn, n=1,2?n). Each site has stationary agent,  which computes the frequent itemset based on the min_sup  (minimum support count). K-Server launches the one mobile  agent (MA) which carries secret-key, list of sites (LS), empty  GFIL(Global Frequent Itemset List) and min-sup. The  function of proposed framework is as follows:  Algorithm 1: Routine K-Server  1. function K-Server (minsup,ls) 2. { 3.     min_sup=minsup; 4.     key=genkey(); 5.     GFIL=?; 6.     LS=ls; 7.     visit=true; 8. if (visit) then 9. { 10.     AG=MAGen(LS,min_sup,key,GFIL,visit); 11.     Dispatch(AG,LS.next()); 12. } 13. else 14. { 15.      AG=Receive(AG);  16.     GenAsso(GFIL); 17. } 18. }    Algorithm 2: Routine SA  1. function SA(ls,ms,k,fil,v) 2. { 3. If (v) 4. { 5. If (key==k) 6. { 7.     Find FI ; 8.      Update GFIL; 9. If (ls-id.next()==k-server) 10. { 11.       v=false; 12. } 13. Dispatch(AG,ls.next()); 14. } 15. } 16. }    This MA visits the each site as per the LS. In each  site, SA verifies the key and GFIL then it updates the GFIL.

Once this process is completed the MA will move to the next  site. Finally it brings back the GFIL to the K-Server. Based  on the GFIL, Association Rule will be generated.

Figure 3: MAD-ARM Model  In this proposed framework GFIL is computed in  each site. MA carries GFIL to each site so it reduces  communication between K-Server and each site.



VI. CONCLUSION  In this paper, we present the overview of Distributed  Association Rule Mining algorithms and Agent based  distributed data mining architecture and an inside view of the  existing agent based association rule mining frameworks and  point out the issues in existing framework. Finally, we  present the framework called Mobile Agent based     Distributed Association Rule Mining (MAD-ARM), which is  attempt to reduce the communication overhead and ensures  the mobile agent security. Implementation and results of this  framework would be included in forthcoming paper.

