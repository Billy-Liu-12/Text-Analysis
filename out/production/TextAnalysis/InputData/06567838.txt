Granular association rules for multi-valued data Fan Min and William Zhu

Abstract?Granular association rule is a new approach to reveal patterns hide in many-to-many relationships of relational databases. Different types of data such as nominal, numeric and multi-valued ones should be dealt with in the process of rule mining. In this paper, we study multi-valued data and develop techniques to filter out strong however uninteresting rules. An example of such rule might be ?male students rate movies released in 1990s that are not thriller.? This kind of rules, called negative granular association rules, often overwhelms positive ones which are more useful. To address this issue, we filter out negative granules such as ?not thriller? in the process of granule generation. In this way, only positive granular association rules are generated and strong ones are mined. Experimental results on the movielens data set indicate that most rules are negative, and our technique is effective to filter them out.

Index Terms?Association rule, recommender system, multi- value, positive granule, negative granule.



I. INTRODUCTION  Granular association rule [1], [2] is a new approach to build recommender systems [3], [4], [5]. The data model is a many-to-many entity-relationship system (MMER) which is composed of two information systems and a relation between them [2]. For example, the movielens data set [6] is composed of users, movies, and the rating of movies by users. Suppose we are interested in what kind of users rate what kind of movies. ?Women rate horror movies? and ?male students rate thriller movies released in 1995? might be two interesting granular association rules. Here we observe that both sides of a granular association rule can take different number of attributes, therefore they have different granules [7], [8], [9], [10], [11]. This is the major difference of this types of rules from other relational association rules (e.g., [12], [13], [14]).

The original definition of granular association rule [2] considers only nominal data. In applications, there are other types such as numeric, multi-valued, and interval valued data.

Numeric data might be the most important type in applications.

For example, in the movielens data set, each movie has a release date. It is hard to construct strong rules using this information directly since few movies are released in the same day. We would like to use release year, or even the release decade instead to obtain coarser granules and stronger rules.

In this paper, we consider multi-valued data which are also common in applications. In the movielens data set, each movie may belong 1 to 18 genres, including action, adventure, children, and so on. However, multi-valued data cannot be stored directly into relational databases. We need to preprocess them before constructing information systems and MMERs.

There are at least three approaches to this issue.

1) Combine existing movie genres to form new ones. For example, action + children is a new genre. In this way, if a movie is action + children, it is neither action nor children. Hence this approach is unreasonable from the semantic viewpoint.

2) Assign a priority to each genre and keep only the most important one for a movie [15]. For example, if a movie is action + children, we will view it only as action. The drawbacks are also obvious: many interesting rules cannot be found.

3) Scale the movie genre attribute into 18 boolean at- tributes. With this approach, we obtain ?male students rate movies released in 1990s that are not thriller,? which is stronger than ?male students rate thriller movies released in 1990s.? This is because that each user rate only a small fraction of all movies. Therefore we need to filter out this kind of uninteresting rules.

We adopt the third approach and amend the drawback directly. For this purpose we define positive granules, positive granular association rules and negative ones. A granule is positive if and only if all attribute values of the scaled data are true. For example, ?thriller movies released in 1990s? is a positive granule, while ?movies released in 1990s that are not thriller? is a negative granule. A granular association rule is positive if and only if both sides of the rule are positive granules. For brevity, a positive (negative) granular association rule will be called a positive (negative) rule.

We propose an algorithm with three main steps to mine all strong positive rules satisfying thresholds of four measures [2]. Step 1, generate positive granules with length one. Step 2, produce longer positive granules following the structure of the Apriori algorithm. Naturally, only positive granules satisfying coverage measures are kept. Step 3, generate candidate rules through connecting positive granules on two universes, and check wether or not these rules satisfy the confidence thresh- olds. A technique developed in [16] is employed to speed up the third step.

Experiments are undertaken on the movielens data set [6].

We have a number of observations. First, many interesting rules are lost if we adopt the priority assigning approach.

Therefore the priority-based approach is unacceptable. Second, if we do not filter out negative granular association rules, they will overwhelm positive ones. In fact, with thresholds settings that generates thousands of rules, not even one positive rule is generated. In summary, our algorithm keeps all interesting rules, and at the same time filters out a large number of uninteresting rules.

2013 26th IEEE Canadian Conference Of Electrical And Computer Engineering (CCECE)

II. POSITIVE RULES  In this section, we define positive granules and positive rules. Since granules and granular association rules have been well defined in [2], we will focus on new ones.

A. Information systems and granules  The data model is based on information systems and binary relations.

Definition 1: S = (U,A) is an information system, where U = {x1, x2, . . . , xn} is the set of all objects, A = {a1, a2, . . . , am} is the set of all attributes, and aj(xi) is the value of xi on attribute aj for i ? [1..n] and j ? [1..m].

User information of the movielens data set are stored in an information system given by Table I(a), where |U | = 943 and A = {User-id, Age, Gender, Occupation}. This table is different from its original version in two aspects. First, the Zip-code attribute is removed since they are not useful in the mining process. Second, the age of the user is discretized according to given intervals [0, 17], [18, 24], . . . , [56,?). In this way, all attributes in Table I(a) are nominal.

In an information system, any A? ? A induces an equivalent relation [17], [18]  EA? = {(x, y) ? U ? U |?a ? A?, a(x) = a(y)}, (1)  and partitions U into a number of disjoint subsets called blocks. The block containing x ? U is  EA?(x) = {y ? U |?a ? A?, a(y) = a(x)}. (2)  Definition 2: [19] A granule is a triple  G = (g, i(g), e(g)), (3)  where g is the name assigned to the granule, i(g) is a representation of the granule, and e(g) is a set of objects that are instances of the granule.

g = g(A?, x) is a natural name to the granule.

i(g(A?, x)) = ? a?A? ?a : a(x)?. (4)  e(g(A?, x)) = EA?(x). (5)  The support of g(A?, x) is  supp(g(A?, x)) = supp( ? a?A? ?a : a(x)?) = |EA  ?(x)| |U |  . (6)  B. Scaled attributes and positive granules  A multi-valued attribute has a domain of a power set.

In the movielens data set, there are 18 genres includ- ing action, children, adventure, etc. Since movies can be in several genres at once, the domain of genre is 218 instead of 18. Attribute values include {action}, {children}, {adventure}, {action, children}, {action, adventure}, etc. unknown correspond to ?.

This attribute can be replaced by 18 boolean attributes, with each indicating whether or not the movie is in the respective genre. This technique is called scaling [20] and serves as the  foundation of formal concept analysis [21]. In fact, the original data set contain the scaled information instead of the multi- valued one. It is given by Table I(a). Here we use release decade instead of release date to obtain a finer granule.

In order to describe this kind of data, we propose the following definition.

Definition 3: Let S = (U,A) be an information system.

Any a ? A is a scaled attribute if a(x) ? {0, 1}, a(x) = 1 indicate that x has the attribute specified by a, and a(x) = 0 for otherwise.

With scaled attributes identified by the expert, we can focus on granules that are interesting to us.

Definition 4: Let S = (U,A) be an information system and Ab be the set of all scaled attributes. C = (A?, x) where x ? U , A? ? A is called a positive granule iff ?a ? A? ? Ab, a(x) ? 1.

In other words, a positive granule requires that all scaled attributes take true values. With positive granules identified, we can filter out unimportant granule from the very beginning.

C. Many-to-many entity-relationship systems  Definition 5: Let U = {x1, x2, . . . , xn} and V = {y1, y2, . . . , yk} be two sets of objects. Any R ? U ? V is a binary relation from U to V . The neighborhood of x ? U is  R(x) = {y ? V |(x, y) ? R}. (7)  When U = V and R is an equivalence relation, R(x) is the equivalence class containing x. From this definition we know immediately that for y ? V ,  R?1(y) = {x ? U |(x, y) ? R}. (8)  An example of binary relation is given by Table I(c), where U is the set of users as indicated by Table I(a), and V is the set of movies as indicated by Table I(b).

Definition 6: [2] A many-to-many entity-relationship sys- tem (MMER) is a 5-tuple ES = (U,A, V,B,R), where (U,A) and (V,B) are two information systems, and R ? U ? V is a binary relation from U to V .

An example of MMER is given by Table I.

D. Positive rules  Granular association rules reveal patterns in the MMERs.

They connect granules of two universes.

Definition 7: [2] A granular association rule is an impli- cation of the form  (GR) : ? a?A? ?a : a(x)? ?  ? b?B? ?b : b(y)?, (9)  where A? ? A and B? ? B.

Definition 8: A granular association rule indicated by  Equation (9) is positive if both (A?, x) and (B?, y) are positive granules.

For brevity, in the following context granular association rules will be simply called rules, and positive (negative) gran- ular association rules will be simply called positive (negative)    TABLE I A MANY-TO-MANY ENTITY-RELATIONSHIP SYSTEM  (a) User User-id Age Gender Occupation  1 [18, 24] M technician 2 [50, 55] F other 3 [18, 24] M writer  . . .

943 [18, 24] M student  (b) Movie Movie-id Release-decade Action Adventure Animation . . . Western  1 1990s 0 0 0 . . . 0 2 1990s 0 1 1 . . . 0 3 1990s 0 0 0 . . . 0  . . .

1,682 1990s 0 0 0 . . . 0  (c) Rates User-id? Movie-id 1 2 3 4 5 . . . 1,682  1 0 1 0 1 0 . . . 0 2 1 0 0 1 0 . . . 1 3 0 0 0 0 1 . . . 1  . . .

943 0 0 1 1 0 . . . 1  rules. According to Equation (2), the set of objects meeting the left-hand side of the rule is  LH(GR) = EA?(x); (10)  while the set of objects meeting the right-hand side is  RH(GR) = EB?(y). (11)

III. POSITIVE RULE MINING  In this section, we first revisit four measures that evaluate the strength of a granular association rule [2]. Then we define a positive rule mining problem. The problem is slightly different from the one define in [2] in that it only requires positive rules.

Finally we develop a rule mining algorithm which is similar to the one proposed in [15] for the new problem.

A. Measures of granular association rule  From the movielens data set, we may obtain a rule ?35.5% male students rate 26.7% thriller movies released in 1990s, 14.4% users are male students and 12.5% movies are thriller released in 1990s.? Here 35.5%, 26.7%, 14.4%, and 12.5% are the source coverage, the target coverage, the source confi- dence, and the target confidence, respectively. These measures are defined as follows. The source coverage of a rule is  scov(GR) = |LH(GR)|/|U |. (12)  The target coverage of GR is  tcov(GR) = |RH(GR)|/|V |. (13)  There is a tradeoff between the source confidence and the target confidence of a rule. Consequently, neither value can be obtained directly from the rule. To compute any one of them, we should specify the threshold of the other. Let tc be the  Algorithm 1 A backward algorithm Input: ES = (U,A, V,B,R), ms, mt, sc, tc.

Output: All positive rules satisfying given thresholds.

Method: backward  1: SG(ms) = {(A?, x) ? 2A ? U |(A?, x) is positive, |EA? (x)| |U | ? ms};  2: TG(mt) = {(B?, y) ? 2B ? V |(B?, y) is positive, |EB? (y)| |V | ? mt};  3: for each g? ? TG(mt) do 4: Y = e(g?); 5: X = R?1tc(Y ); 6: for each g ? SG(ms) do 7: if (|X ? e(g)|/|e(g)| ? sc) then 8: output rule i(g)? i(g?); 9: end if  10: end for 11: end for  target confidence threshold. The source confidence of the rule is  sconf(GR, tc) = |{x ? LH(GR)| |R(x)?RH(GR)||RH(GR)| ? tc}|  |LH(GR)| .

(14)  B. The positive rule mining problem  Now we propose a rule mining problem as follow.

Problem 1: The positive rule mining problem.

Input: An ES = (U,A, V,B,R), a minimal source cover-  age threshold ms, a minimal target coverage threshold mt, a minimal source confidence threshold sc, and a minimal target confidence threshold tc.

Output: All positive rules satisfying scov(GR) ? ms, tcov(GR) ? mt, sconf(GR) ? sc, and tconf(GR) ? tc.

This problem is quite similar to the one discussed in [1], [2], [15], [16]. The only difference is that positive rules instead of all rules are output.

C. A backward algorithm  We propose an algorithm to deal with Problem 1. The algorithm is listed in Algorithm 1. It is very similar to the algorithm proposed in [16]. The difference lies in the first two lines. To implement these lines, we first produce positive granules with length one. For example, ?gender is male,? ?genre is thriller? and ?release decade is 1990s?. Then we follow the structure of the Apriori algorithm to produce longer positive granules. For example, ?genre is thriller and release decade is 1990s?, or equivalently, ?thriller movies released in 1990s?. In this way, only positive granules are generated. The conditions |EA? (x)||U | ? ms and  |EB? (y)| |V | ? mt ensure that only  positive granules satisfying coverage measures are kept.

Lines 3 through 10 mine rules satisfying confidence mea-  sures. To explain these codes we should revisit the definition of lower approximation on two universes.

0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12          ms(mt)  N um  be r o  f r ul  es     Priority-based approach Scaling-based approach  Fig. 1. Rules mined through priority-based and scaling-based approaches  Definition 9: [16] Let U and V be two universes, R ? U ?V be a binary relation, and 0 < ? ? 1 be a user-specified threshold. The lower approximation of X ? U with respect to R for threshold ? is  R?(X) = {y ? V | |R?1(y) ?X|  |X| ? ?}. (15)  From this definition we know immediately that the lower approximation of Y ? V with respect to R is  R?1?(Y ) = {x ? U | |R(x) ? Y | |Y |  ? ?}. (16)  Here ? corresponds with the target confidence instead. The lower approximation can help speeding up the mining process.

This issue has been discussed in [16], and similar phenomenon holds for our problem.



IV. EXPERIMENTS ON THE MOVIELENS DATA SET  The Internet Movie Database [6] is widely used in recom- mender systems (see, e.g., [22]). It contains 100,000 ratings (1-5) from 943 users on 1,682 movies, with each user rating at least 20 movies. The main purpose of our experiments is to answer the following questions.

1) Does the priority-based approach lose important infor- mation?

2) Is it necessary to remove negative rules?

A. Priority-based approach vs. scaling-based approach  With the priority-based approach, we assign a priority to each genre and keep the most important one for a movie [15].

In this way, no negative rule exists. However, some infor- mation is lost. In contrast, with the scaling-based approach, no information is lost, and negative rules are filtered out by Algorithm 1. Now we compare the number of positive rules that are generated through these two approaches. We use the following setting: (Setting 1) sc = tc = 0.1, ms = mt, and mt ? [0.05, 0.12].

Results are depicted in Figure 1. Here we observe that the number of rules mined through the scaling-based approach is more than twice of the priori-based approach. Therefore the  0.05 0.1 0.15 0.2 0.25 0.3 0.35      mt  N um  be r o  f p os  iti ve  ru le  s  (a)  0.75 0.8 0.85 0.9 0.95 1       mt N  um be  r o f n  eg at  iv e  ru le  s (b)  Fig. 2. sc = 0.12, tc = 0.15, ms = 0.1 (a) Number of positive rules; (b) Number of negative rules.

information lost by the priority-based approach is unacceptable in applications.

B. Influence of negative rules  In applications, we want the recommender system to gen- erate a number of rules. This number should not be too big; otherwise it will be impossible for users to pick up interesting and useful ones. Therefore we need to specify thresholds on four measures carefully such that a few to a few hundred rules are generated.

First, we generate rules using the algorithm presented in [16]. We use the following setting: (Setting 2) ms = 0.1, mt = 0.85, sc = 0.12, tc = 0.15.

With this setting we obtain 3,300 rules. Some of them are given below: (Rule 1) ?Gender, Male? ? ?Occupation, Student?(136) ? ?Adventure, 0? ? ?Mystery, 0?(1488)  [scov = 0.144, tcov = 0.884, sconf = 0.132, tconf = 0.150] (Rule 2) ?Gender, Male? ? ?Age, (0, 18]?(136) ? ?Animation, 0? ? ?War, 0?(1569)  [scov = 0.144, tcov = 0.933, sconf = 0.132, tconf = 0.150] The target coverage threshold is mt = 0.85, therefore  these rules are very strong from this viewpoint. Unfortunately, they are all negative rules, and they are not quite interesting.

Rule 1 is read as ?Male students rate movies that are neither Adventure nor Mystery, 136 users are male students and 1,488    movies are neither Adventure nor Mystery.? It is straight forward to compute the source/target coverage. The source coverage of the rule is 136/943 ? 0.1442 > 0.1, and the target coverage is 1488/1682 ? 0.8847 > 0.85. As discussed earlier, we cannot obtain the source/target confidence directly.

We only know that they exceed the given thresholds.

Second, we generate positive rules using Algorithm 1. We use the following setting: (Setting 3) ms = 0.1, mt = 0.1, sc = 0.12, tc = 0.15.

This setting is different from Setting 2 only on mt = 0.1.

With this setting we obtain 72 positive rules. Some of them are given below: (Rule 3) ?Gender, Male? ? ?Age, (0, 18]?(136) ? ?Year, 1990s? ? ?Action, 1?(206)  [scov = 0.144, tcov = 0.122, sconf = 0.250, tconf = 0.150]  (Rule 4) ?Gender, Male? ? ?Occupation, Student?(136) ? ?Year, 1990s? ? ?Thriller, 1?(211)  [scov = 0.144, tcov = 0.125, sconf = 0.220, tconf = 0.150]  Rule 3 is read as ?Young men no more than 18 years old rate action movies released in 1990s.? This is quite interesting to us even though there are only 206 action movies released in 1990s.

Third, we observe the change of the number of rules with different settings of mt. Figure 2(a) shows the number of rules for mt ? [0.75, 1]. Unfortunately, all rules are negative ones.

To produce positive rules, we should use lower mt. Figure 2(b) shows the number of positive rules for mt ? [0.05, 0.35]. We observe that there would be no positive at all for mt ? 0.35.

However, according to Figure 2(a), there are about 9,000 negative rules for mt = 0.75. Hence we cannot generate negative rules for mt ? 0.35 since there are too many of them. In other words, if we do not filter out negative granular association rules, they will overwhelm positive ones.

C. Discussions  Now we can answer the questions proposed at the beginning of this section.

1) The priority-based approach loses important information and rules. The scaling-based approach, on the other hand, keeps all information and helps mining all positive rules.

2) It is very important to remove negative rules because they overwhelm positive ones.



V. CONCLUSIONS AND FURTHER WORKS  In this paper, we deal with multi-value data with two objectives. The first is to keep all useful information such that all interesting granular association rules can be mined. This is achieved through attribute scaling. The second is to remove strong however uninteresting rules. This is achieved through filtering out negative granules and negative rules. In the future, we will address other types of data such as interval valued for more applications.

ACKNOWLEDGEMENTS  This work is in part supported by National Science Foun- dation of China under Grant No. 61170128, the Natural Science Foundation of Fujian Province, China under Grant No. 2012J01294, and Fujian Province Foundation of Higher Education under Grant No. JK2012028.

