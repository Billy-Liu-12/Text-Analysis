Game Theoretic Analysis of Distributed Spectrum Sharing With Database

Abstract?According to FCC?s ruling for white-space spec- trum access, white-space devices are required to query a database to determine the spectrum availability. In this paper, we adopt a game theoretic approach for the database-assisted white-space access point (AP) network design. We first model the channel selection problem among the APs as a distributed AP channel selection game, and design a distributed AP chan- nel selection algorithm that achieves a Nash equilibrium. We then propose a state-based game formulation for the distributed AP association problem of the secondary users by taking the cost of mobility into account. We show that the state-based distributed AP association game has the finite improvement property, and design a distributed AP association algorithm can converge to a state-based Nash equilibrium. Numerical results show that the algorithm is robust to the perturbation by secondary users? dynamical leaving and entering the system.



I. INTRODUCTION  The most recent FCC ruling requires that TV white-space devices must rely on a geo-location database to determine the spectrum availability [1]. In such a database-assisted architecture, the incumbents (primary licensed holders of TV spectrum) provide the database with the up-to-date information including TV tower transmission parameters and TV receiver protection requirements. Based on this information, the database will be able to tell a white-space device (secondary users of TV spectrum) vacant TV chan- nels at a particular location, given the white-space device?s transmission parameters such as the transmission power.

Although the database-assisted approach obviates the need of spectrum sensing, the task of developing a comprehensive and reliable database-assisted white-space network system remains challenging [2]. Motivated by the successful de- ployments of Wi-Fi over the unlicensed ISM bands, in this paper we consider an infrastructure-based white-space network (see Figure 1 for an illustration), where there are multiple secondary access points (APs) operating on white spaces. Such an infrastructure-based architecture has been adopted in IEEE 802.22 standard [3] and Microsoft Red- mond campus white-space networking experiment [2]. More specifically, each AP first sends the required information such as its location and the transmission power to the database via wire-line connection. The database then feeds back the set of vacant TV channels at the location of each AP. Afterwards, each AP chooses one feasible channel to  ????????  ?? ??	?  ??	?  ???????????	????????  ???????	????  ??????? ????? ??? ?????  Figure 1. Distributed spectrum sharing with geo-location database  ????????  ??????	??????  ?????? ?? ???????? ???????? ??  ??????	???? ?????	?????????  ?????????	?????  ???	????	????????? ?????????????????  ????????	?	??? ?????????????????  ????????? ??  ????????? ????????  ???? ?????	??? ?? ???  ????  ??	???  Figure 2. System architecture  operate in order to serve the secondary users (i.e., unlicensed white-space user devices) within its transmission range.

The key challenges for operating such an infrastructure- based white-space network design are twofold (see Figure 2 for an illustration). First, each AP must choose a proper va- cant channel to operate in order to avoid severe interference with other APs. Second, when an AP is overloaded with too many secondary users within its transmission range, a secondary user can improve its throughput by moving to and associating with another AP with less contending users.

Each secondary user hence needs to decide which AP to associate with.

In this paper, we adopt the game theoretic approach to address these challenges. Game theory is a useful framework for designing distributed mechanisms, such that the white- space devices in the system including APs and secondary users can self-organize into an incentive compatible resource   DOI 10.1109/ICDCS.2012.37     allocation. We first model the channel selection problem among the APs as a distributed AP channel selection game.

We then propose a state-based game framework to model the distributed AP association problem of the secondary users by taking the cost of mobility into account.

The main results and contributions of this paper are as follows: ? General game formulation: We formulate the channel  selection problem among the APs as a distributed AP channel selection game based on the physical interfer- ence model [4]. We then propose a state-based game framework to formulate the distributed AP association problem of the secondary users and explicitly take the cost of mobility into account.

? Existence of Nash equilibrium and finite improvement property: For the distributed AP channel selection game, we show that it is a potential game, and hence it has a Nash equilibrium and the finite improvement property. For the state-based distributed AP association game, we show that it also has a state-based Nash equilibrium and the finite improvement property.

? Distributed algorithms for achieving Nash equilibrium: For the distributed AP channel selection game, we propose a distributed AP channel selection algorithm that achieves an Nash equilibrium of the game. For the state-based distributed AP association game, we design a distributed AP association algorithm that converges to a state-based Nash equilibrium. Numerical results show that the algorithm is robust to the perturbation by secondary users? dynamical leaving and entering the system.

The rest of the paper is organized as follows. We introduce the distributed AP channel selection game, and propose the distributed AP channel selection algorithm in Sections II and III, respectively. We present the distributed AP associ- ation game in Section IV. Then we design the distributed AP association algorithm in Section V. We illustrate the performance of the proposed mechanisms through numerical results in Section VI, and finally introduce the related work and conclude in Sections VII and VIII, respectively.



II. DISTRIBUTED AP CHANNEL SELECTION  A. Problem Formulation  We first consider the distributed channel selection problem among the APs. Let M = {1, 2, ...,M} denote the set of TV channels, and B denote the bandwidth of each channel (e.g., B = 6 MHz in the United States and B = 8 MHz in the European Union). We consider a set N = {1, 2, ..., N} of APs that operate on the white spaces. Each AP n ? N has a specified transmission power Pn based on its quality of service and coverage requirements.

Each AP n can acquire the information of the vacant channels at its location from the geo-location database.

We denote Mn ? M as the set of feasible channels of AP n, an ? Mn as the channel chosen by AP n, and a = (a1, ..., aN ) as the channel selection profile of all APs.

Then the down-link throughput of AP n can be computed according to the physical interference model [4] as  Un(A) = B log2  ( 1 +  Pn/d ? n  ?nan + ? i?N/{n}:ai=an Pi/d  ? in  ) ,  (1) where ? is the path loss factor, dn denotes the distance between AP n and its associated secondary user (assuming that all users associating with the same AP have roughly the same distance from the AP), and din denotes the distance between AP i and AP n. Furthermore, ?nan denotes the background noise power including the interference from incumbent users on the channel an, and  ? i?N :ai=an Pi/d  ? in  denotes the accumulated interference from other APs that choose the same channel an. Notice that we shall assume that the channel selection by an AP does not depend on the number of its associated users. On the other hand, the secondary users can increase their data rates by moving to and associating with a less congested AP (see Section IV for detailed discussions). Note that our model also applies to the up-link case if the secondary users within an AP transmit with the same power level.

We next consider the distributed channel selection prob- lem among the APs. Let a?n = (a1, ..., an?1, an+1, ..., aN ) be the set of channels chosen by all other APs except AP n. Given other APs? channel selections a?n, AP n wants to choose the channel an to maximize its down-link throughput, i.e.,  max an?Mn  Un(an, a?n), ?n ? N .

The distributed nature of the channel selection problem naturally leads to a formulation based on game theory, such that each AP can self organize into a mutually acceptable channel selection (Nash equilibrium) a? = (a?1, a?2, ..., a?N ) with  a?n = arg max an?Mn  Un(an, a ? ?n), ?n ? N .

B. Distributed AP Channel Selection Game  We now formulate the distributed channel selection prob- lem as a strategic game ? = (N , {Mn}n?N , {Un}n?N ), where N is the set of APs, Mn is the set of strategies for AP n, and Un is the payoff function of AP n. We refer this as the distributed AP channel selection game in the sequel.

We can show that it is a potential game, which is defined as  Definition 1 (Potential Game [5]). A game is called a potential game if it admits a potential function ?(a) such that for every n ? N and a?n ?  ? i?=nMi,  sgn ( ?(a  ? n, a?n)? ?(an, a?n)  )     = sgn ( Un(a  ? n, a?n)? Un(an, a?n)  ) ,  where sgn(?) is the sign function defined as  sgn(z) =  ??? ?? 1 if z > 0, 0 if z = 0, ?1 if z < 0.

Definition 2 (Better Response Update [5]). The event where a player n changes to an action a  ? n from the action  an is a better response update if and only if Un(a ? n, a?n) >  Un(an, a?n).

An appealing property of the potential game is that it admits the finite improvement property, such that any asynchronous better response update process (i.e., no more than one player updates the strategy at any given time) must be finite and leads to a Nash equilibrium [5].

To show that the distributed AP channel selection game ? is a potential game, we now consider a closely related game ?? = (N , {Mn}n?N , {U?n}n?N ), where the new payoff functions are  U?n(a) = Pn/d  ? n  ?nan + ? i?N/{n}:ai=an Pi/d  ? in  . (2)  Obviously, the utility function Un(a) can be obtained from the utility function U?n(a) by the following monotone trans- formation  Un(a) = B log2  ( 1 + U?n(a)  ) . (3)  Due to the property of monotone transformation, we have  Lemma 1. If the modified game ?? is a potential game, then the original distributed AP channel selection game ? is also a potential game with the same potential function.

For the modified game ??, we show in Theorem 1 that it is a potential game with the following potential function  ?(a) = ? ? i  ? j ?=i  PiPj d?ij  I{ai=aj} ? 2 N? i=1  Pi? i ai , (4)  where I{ai=aj} = 1 if ai = aj , and I{ai=aj} = 0 otherwise.

Theorem 1. The modified game ?? is a potential function ?(a) as given in (4).

Proof: Suppose that a user k changes its channel ak to a ? k such that strategy profile changes from a to a  ? . We have  ?(a ? )? ?(a)  = ? ? j ?=k  PkPj d?kj  I{a?k=aj} + ? j ?=k  PkPj d?kj  I{ak=aj}  ? ? i ?=k  PiPk d?ik  I{ai=a?k} + ? i ?=k  PiPk d?ik  I{ai=ak}  ?2Pk?ka?k + 2Pk? k ak  .

Since dij denotes the distance between AP i and AP j, we have dij = dji. Thus,  ?(a ? )? ?(a)  = ?2 ? i?=k  PiPk d?ik  I{ai=a?k} + 2 ? i?=k  PiPk d?ik  I{ai=ak}  ?2Pk?ka?k + 2Pk? k ak  = ?2Pk  ? ?? ? i?=k:I{ai=a?k}  Pi d?ik  + ?k,a?k  ? ??  +2Pk  ? ? ? i?=k:I{ai=ak}  Pi d?ik  + ?k,ak  ? ?  = 2d?k  ? ?? ? i?=k:I{ai=a?k}  Pi d?ik  + ?k,a?k  ? ?? ? ? ? i?=k:I{ai=ak}  Pi d?ik  + ?k,ak  ? ?  ? ? ? Pk/d?k?  i?=k:I{ai=a?k} Pi d?ik  + ?k a ? k  ? Pk/d ? k?  i?=k:I{ai=ak} Pi d?ik  + ?kak  ? ?  = 2d?k  ? ?? ? i?=k:I{ai=a?k}  Pi d?ik  + ?k a ? k  ? ?? ? ? ? i?=k:I{ai=ak}  Pi d?ik  + ?kak  ? ?  ? ( U?k(ak, a?k)? U?k(a?k, a?k)  ) ,  which completes the proof.

According to Lemma 1 and Theorem 1, we know that  Theorem 2. The distributed AP channel selection game ? is a potential game, which has a Nash equilibrium and the finite improvement property.

The result in Theorem 2 implies that any asynchronous better response update is guaranteed to reach a Nash equi- librium within a finite number of iterations. This motivates the algorithm design in Section III.



III. DISTRIBUTED AP CHANNEL SELECTION ALGORITHM  The purpose of designing this algorithm is to allow APs to select their channels in a distributed manner to achieve a mutually acceptable resource allocation, i.e., an Nash equilibrium. The key idea is to let APs asynchronously improve their channel selections according to the finite improvement property.

We assume that when an AP queries the geo-location database, the database will assign it with a unique ID indexed as 1, 2, 3, ..., and each AP can communicate with each other through the Internet. For initialization, we let each AP n select the channel mn that has the smallest channel ID index among its feasible channels Mn, i.e., an(0) = mn. Then based on the initialized channel selection     Algorithm 1 Distributed AP Channel Selection Algorithm 1: initialization: 2: set the initial channel an(0) = mn for each AP  n ? N , initial channel selection profile as a(0) = (a1(0), ..., aN (0)), and the stage index t = 0.

3: end initialization  4: while a(t) is not a Nash equilibrium do 5: for AP n = 1 to N do 6: choose the channel an(t+1) that maximizes its  own throughput according to (5).

7: end for 8: set channel selection profile as a(t + 1) = (a1(t + 1), ..., aN (t+ 1)) and the stage index t = t+ 1.

9: end while  profile a(0) = (a1(0), ..., aN (0)), each AP n in turn (according to the assigned IDs) carries out the best response update, i.e., select a channel an(t + 1) that maximizes its own throughput as  an(t+ 1) = arg max a?Mn  Un(a, a1(t+ 1),  ..., an?1(t+ 1), an+1(t), ..., aN (t)), (5)  given the channel selections {a1(t + 1), ..., an?1(t + 1)} of the updated APs, and the channel selections {an+1(t), ..., aN (t)} of remaining APs that are not updated at the current stage t. Such update procedure continues until an Nash equilibrium is reached. Since the best re- sponse update is also a better response update, according to the finite improvement property, such asynchronous best response updates must achieve a Nash equilibrium within finite number of iterations. We summarize the distributed AP channel selection algorithm in Algorithm 1.

The Algorithm 1 requires that APs have ability to com- municate with each other about their channel selections.

When this is not feasible, each AP can independently implement Algorithm 1 by acquiring the assigned IDs, available channels and transmission powers of other APs from the database. Note that such an off-line implementation is incentive compatible, since given other APs adhere to the algorithm, no AP has an incentive to deviate unilaterally from the algorithm (due to the Nash equilibrium output).



IV. DISTRIBUTED AP ASSOCIATION BY MOBILE SECONDARY USERS  We now consider the distributed AP association problem among a set of mobile secondary users K = {1, 2, ...,K}.

Let xn be the number of users that associate with AP n, which satisfies that  ?N n=1 xn = K. We assume that the  APs? channel selections and the users? AP associations are decoupled, and users can improve their data rates by proper AP associations. For the load-aware AP channel selection  ??????? ???????	??  ????? ??????	??	??  ? ??? ????  Figure 3. Time slot structure of channel contention  will be considered in the future work.

A. Channel Contention Within an AP  We first consider the channel contention when multiple secondary users associate with the same AP. Here we adopt a random backoff mechanism to resolve the channel contention. More specifically, the time is slotted (see Figure 3), with a contention stage being divided into ?max mini- slots. Each secondary user k executes the following two steps:  1) Count down according to a randomly and uniformly chosen integral backoff time (number of mini-slots) ?k between 1 and ?max.

2) Once the timer expires, monitor the channel and exchange RTS/CTS messages with the AP in order to grab the channel if the channel is clear (i.e., no on- going transmission). Note that if multiple users choose the same backoff mini-slot, a collision will occur with RTS/CTS transmissions and no users can grab the channel. Once the RTS/CTS message exchange goes through, then the AP starts to transmit the data packets to the user.

Since xn users contend for the channel in AP n, the probability that a user k (out of these xn users) grabs the channel successfully is  g(xn) = Pr{?k < min i?=k {?i}}  =  ?max? ?=1  Pr{?k = ?}Pr{? < min i?=k {?i}|?k = ?}  =  ?max? ?=1   ?max  ( ?max ? ?  ?max  )xn?1 , (6)  which is a decreasing function of total number of contending users xn. Then the average data rate of a secondary user k associating with AP n is given as  rk = Un(a ?)g(xn), (7)  where Un(a?) is the throughput of AP n at the Nash equi- librium channel selection a? of the distributed AP channel selection game.

B. Distributed AP Association Game  Due to the channel contention within an AP n, the average data rate rk of a secondary user k decreases with the total number of contending users xn. To improve the data rate rk, the secondary user k can choose to move to another AP n? with less users. However, in practices people may not prefer long distance movements (just for the sake of obtaining better communication experiences), which motivates us to take the cost of mobility into account. By defining the current location profile of all secondary users as a system state, we next formulate the distributed AP association problem as a state-based game [6] as follows:  ? Player k: a secondary user from the set K.

? Strategy bk: choose an AP n ? N to associate with.

We denote the strategy profile of all users as b ? (b1, ..., bK).

? State s ? (s1, ..., sK): the current locations (i.e., the associated APs) of all secondary users, where sk denote the location of user k.

? State Transition s ? = F (b, s): in general the new state  s ?  is determined by the strategies b of all secondary users and the original state s, where F (?) denotes the state transition function. For our problem, we have that F (b, s) = b, i.e., the new locations just depend on secondary users? AP choices and independent of the original system state.

? Payoff Vk(b, s): secondary user k?s utility obtained from the strategy profile b in state s. To take the cost of mobility into account, we define  Vk(b, s) = rk ? ?kdbksk = Ubk(a  ?)g(xbk(b))? ?kdbksk , (8) where xbk(b) is the number of contending users asso- ciated with AP bk under strategy profile b, ?k > 0 is the factor representing the weight of mobility cost in user k?s decision, and dbksk is the distance of moving to AP bk from AP sk (dbksk = 0 if bk = sk). Note that the distance measure here can represent more general preference functions and can also be asymmetric. For example, we can define that db?kbk > dbkb  ? k  if bk is a popular shopping mall where uses like to stay. The physical meaning of (8) is to balance the average data rate that a user can obtain from moving to a new AP bk with the mobility cost by moving from its current associated AP sk.

Since the state-based game is a generalized game theoretic framework (by regarding the classical strategic game as a state-based game with a constant state), we need an equilibrium concept other than the Nash equilibrium. Here we follow the recent results in [6] and introduce the state- based Nash equilibrium. To proceed, we first define the set of reachable states ?(b0, s0) starting from a strategy state  pair (b0, s0) as  ?(b0, s0) ? {st : st = F (b0, st?1), ?t ? 1}. (9) We then extend the definition of Nash equilibrium to the state-based game setting as follows.

Definition 3 (State-based Nash Equilibrium [6]). A strat- egy state pair (b?, s?) is a state-based Nash equilibrium if 1) the state s? is reachable from (b?, s?), i.e., s? ? ?(b?, s?).

2) for every player k ? K and every state s ? ?(b?, s?), we have  Vk(b ?, s) = max  bk Vk(bk, b  ? ?k, s). (10)  The physical meaning of the state-based Nash equilibrium is that the state s? is recurrent and the strategy profile b? is the best response no matter how the game state evolves after- wards. In principle, the state-based game is a special case of the stochastic game, which is difficult to tackle. However, we are able to solve the distributed AP association game by exploiting its inherent structure property. A key observation is that, similarly to the classical potential game, the state- based distributed AP association game also admits a state- based potential function as  ?(b, s) = N? n=1  xn(b)? i=0  Un(a ?)g(i)?  K? k=1  ?kdbksk . (11)  For the state-based potential function ?(b, s), we have  Lemma 2. For the state-based distributed AP association game, the state-based potential function ?(b, s) satisfies that 1) for any player k ? K and any strategy bk, b?k ? N , Vk(bk, b?k, s)?Vk(b?k, b?k, s) = ?(bk, b?k, s)??(b  ? k, b?k, s).

(12) 2) for any state s  ? = F (b, s), if s  ? ?= s then ?(b, s  ? ) > ?(b, s). (13)  Proof: For 1), we have  ?(bk, b?k, s)??(b?k, b?k, s)  =  N? n=1  xn(b)? i=0  Un(a ?)g(i)? ?kdbksk  ? N? n=1  xn(b ? )?  i=0  Un(a ?)g(i) + ?kdb?ksk  =  xbk (bk,b?k)? i=0  Un(a ?)g(i)?  xbk (b ? k,b?k)? i=0  Un(a ?)g(i)  +  x b ? k  (bk,b?k)? i=0  Un(a ?)g(i)?  x b ? k  (b ? k,b?k)? i=0  Un(a ?)g(i)     ??kdbksk + ?kdb?ksk = Un(a  ?)g(xbk(bk, b?k))? Un(a?)g(xb?k(b ? k, b?k))  ??kdbksk + ?kdb?ksk = Vk(bk, b?k, s)? Vk(b?k, b?k, s).

For 2), since s ? = F (b, s) = b, we have  ?(b, s ? ) = ?(b, b) =  N? n=1  xn(b)? i=0  Un(a ?)g(i)  >  N? n=1  xn(b)? i=0  Un(a ?)g(i)?  K? k=1  ?kdbksk = ?(b, s).

Similarly to the classical potential game, we can also define the finite improvement property for the state-based game. Let st = (st1, ...s  t K) be the state of the game in the  t-th update, and bt = (bt1, ...b t K) be the strategy profile of  all players in t-th update. According to the state transition, we have st+1 = F (bt, st). A path of the state-based game is a sequence ? = ((b0, s0), (b1, s1), ...) such that for every t ? 1 there exists a unique player, say player kt, such that bt = (bkt , b  t?1 ?k ) for some strategy bkt ?= bt?1kt .

? = ((b0, s0), (b1, s1), ...) is an improvement path if for all t ? 1 we have Vkt(bt, st) > Vkt(bt?1, st?1), where kt is the unique deviator at the t-th update. From the properties of the state-based potential function ?(b, s), we first show that every improvement path is finite.

Theorem 3. For the state-based distributed AP association game, every improvement path is finite.

Proof: For any improvement path ? = ((b0, s0), (b1, s1), ...), we have  Vk0(b 0, s0) > Vk0(s  0, s0),  Vk1(b 1, s1) > Vk1(b  0, s1),  Vk2(b 2, s2) > Vk2(b  1, s2),  ...

where s1 = F (b0, s0) = b0, s2 = F (b1, s1) = b1, and so on. From (12) and (13), we know that  ?(s0, s0) < ?(b0, s0),  ?(b0, s0) < ?(b0, s1),  ?(b0, s1) < ?(b1, s1),  ?(b1, s1) < ?(b1, s2),  ?(b1, s2) < ?(b2, s2),  ...

which is increasing along the improvement path. Since ?(b, s) < ?, then the improvement path ? = ((b0, s0), (b1, s1), ...) must be finite.

Similarly to the classical potential game, we further show that any asynchronous better response update process also leads to a state-based Nash equilibrium.

Theorem 4. For the state-based distributed AP association game, any asynchronous better response update process leads to a state-based Nash equilibrium (b?, s?) with s? = F (b?, s?).

Proof: Suppose that an asynchronous better response update process ? = ((b0, s0), (b1, s1), ...) terminates at the point (b?, s?). In this case, we must have ?(b?n, b  ? ?n, s  ?) ? maxbn ?(bn, b  ? ?n, s  ?), otherwise the improvement path ? does not terminate at point (b?, s?). Since  Vk(b ? n, b  ? ?n, s  ?)? Vk(bk, b?k, s?) = ?(b?n, b  ? ?n, s  ?)??(bk, b?k, s?), we have that Vk(b?n, b  ? ?n, s  ?) ? maxbn Vk(bn, b??n, s?).

Furthermore, we must have s? = b? = F (b?, s?), otherwise the potential function can be improved since ?(b?, b?) > ?(b?, s?) if b? ?= s?, and thus the improvement path does not terminate here. Thus, we have s? ? ?(b?, s?) and Vk(b  ? n, b  ? ?n, s) ? maxbn Vk(bn, b??n, s), ?s ? ?(b?, s?),  which satisfies the conditions in Definition 3.

Since s? = b? = F (b?, s?), Theorem 4 implies that the  asynchronous better response update process leads to the state-based Nash equilibrium (b?, b?), i.e., the equilibrium that all users are satisfied with the current AP associations b? and have no incentive to move anymore.



V. DISTRIBUTED AP ASSOCIATION ALGORITHM We next design a distributed AP association algorithm  based on the finite improvement property shown in Theorem 3, which allows secondary users to select their associated APs in a distributed manner and achieve mutually acceptable AP associations, i.e., a state-based Nash equilibrium.

The key idea is to let secondary users asynchronously improve their AP selections. Unlike the deterministic AP channel selection update with the fixed order enforced by the geo-location database, the distributed AP association algorithm can not be deterministic. This is because that, as secondary users dynamically enter and leave the net- work, a deterministic distributed AP association algorithm according to the fixed strategy update order is not robust.

Hence we will design a randomized algorithm by letting each secondary user countdown according to a timer value that follows the exponential distribution with a mean equal to ?. Since the exponential distribution has support over (0,?) and its probability density function is continuous, the probability that more than one users generate the same timer value and update their strategies simultaneously equals zero.1 When a user k activates its strategy update at time t,  1The timer in practice is always finite, and the collision probability is not exactly zero. However, as long as the collision probability is very small, the following analysis is a very good approximation of the reality.

the user can computes its best response strategy as  b?k = argmax bk  Vk(bk, b t ?k, s  t)  = argmax bk  Ubk(a ?)g(xbk(b  t))? ?kdbksk , (14)  which requires the information of user distribution (x1(b  t), ...xN (b t)) at time t, the throughput Un(a?), and  geo-locations of all the APs.

To facilitate the best response update, we propose to setup a social database (accessible by all secondary users), wherein each AP reports its channel throughput Un(a?) and geo- location, and each secondary user k  ? ? K posts and shares its AP association b?  k? with other users in the manner like Twitter once it updates. Based on the information from the social database, a secondary user k can first figure out the user distribution (x1(bt), ...xN (bt)) as  xn(b t) =  K? k?=1  I{bt k?=n}, ?n ? N , (15)  where I{bt k?=n} = 1 if user k  ? associates with AP n, and I{bt  k?=n} = 0 otherwise. Based on the user distribution, the secondary user k can then compute the corresponding best response strategy according to (14).

The success of social database requires that each user is willing to share the information of its AP association. When this is not feasible, each AP n can estimate its associated user population xn locally. Let g?(xn) denote the probability that no user among xn associated with the same AP grabs the channel in a time slot ? . This can be computed as g?(xn) = 1?xng(xn), where g(xn) is given in (6). In a time slot ? , AP n can observe the information Ia?n(?) ? {1, 0}, i.e., whether the channel a?n is used by any users or not. Then over a long period that consists of L time slots, AP n can observe the  outcome {Ia?n(?)}L?=1 and estimate g?(xn) = ?L ?=1 Ia?n (?)  L by the sample-average. Since Ia?n(?) is independently and identically distributed according to the probability g?(xn), according to the law of large number, the estimation will be accurate when the observation period length L is large enough. This is feasible in practices since user?s mobility decision is often carried out at a large time scale (say every few minutes), compared with the time scale of a time slot (say 50 microseconds in the standard 802.11 system). Then AP n can obtain the number of its associated users xn by  solving that xn = g??1 (?L  ?=1 Ia?n (?) L  ) , and report it in the  social database.

We summarize the distributed AP association algorithm in Algorithm 2. According to Theorem 4, such asynchronous best response update process must reach a state-based Nash equilibrium. Numerical results show that the algorithm is also robust to the dynamics of secondary users? leaving and entering the system.

Algorithm 2 Distributed AP Association Algorithm 1: initialization: 2: set the mean ? for strategy update countdown.

3: end initialization  4: loop for each secondary user k ? K in parallel: 5: generate a timer value that follows the exponential  distribution with the mean ?.

6: count down until the timer expires.

7: if the timer expires then 8: acquire the information of channel throughput {Un(a?)}, the geo-location of APs, and user distribution {xn}Nn=1.

9: compute the user distribution by (15).

10: update the strategy b?k according to the best  response in (14).

11: end if 12: end loop

VI. SIMULATION RESULTS  In this part, we investigate the proposed distributed AP channel selection and distributed AP association algorithms by simulations.

A. Distributed AP Channel Selection  We first implement the distributed AP channel selection algorithm in Section III. We consider a white-space wireless system consisting of M = 4 channels and N = 8 APs, which are scattered across a square area of a length of 500 m (see Figure 4). The bandwidth of each channel is 6 MHz, the noise power is ?nm = ?100 dBm, and the path loss factor ? = 4. Each AP n operates with a specific transmission power Pn and has a different set of vacant channels by consulting the geo-location database (please refer to Figure 4 for the details of these parameters). We set the distance dn between AP n and its associated secondary user to be 20 m, which is much smaller than the distances between any two APs.

We show the dynamics of the distributed AP channel selection algorithm in Figure 5. We see that the algo- rithm converges to an equilibrium a? in less 20 itera- tions. To verify that the equilibrium is a Nash equilib- rium, we show the the dynamics of the potential function ? in Figure 6. We see that the algorithm can lead the potential function to a maximum point, which is a Nash equilibrium according to the property of potential game.

At the equilibrium a?, 8 APs achieve the throughputs Un(a  ?) of {101.4, 100.1, 82.6, 97.6, 83.2, 98.7, 85.6, 84.5} Mbps, respectively, and no AP has the incentive to deviate its channel selection unilaterally.

????  ????  ????  ????  ????  ????  ????  ????  ?? ??	?  ??	? ??	?  ??	? ??	?  ??	? ??  !?"?"?# ??$?%  !

"?"?# ?$$?%  !

"?"?# ??$?%  !

"?"?# ?$$?%  !

"?#  ?$?%  !

"?# ?$$?%  !

"?#  $$?%  !

"?"?# ? $?%  Figure 4. A square area of a side-length of 500m with 8 scattered APs. Each AP has a set of vacant channels, and operates with a specific transmission power. For example, the available channels of AP 1 are {2, 3, 4} with a transmission power of 350 mW.

0 5 10 15 20 25 30             Iterations  Th ro  ug hp  ut (M  bp s)  AP 3 AP 8 AP 5  AP 6 AP 1AP 2  AP 7AP 4  Figure 5. Dynamics of distributed AP channel selections  0 5 10 15 20 25 30  ?4  ?3  ?2  ?1   x 10?3  Iterations  P ot  en tia  l F un  ct io  n ?  Figure 6. Dynamics of potential function value ? corresponding to the dynamics in Figure 5  0 5 10 15 20 25 30     Iterations  U se  rs ? A  ve ra  ge T  hr ou  gh pu  t ( M  bp s)  Figure 7. Dynamics of distributed AP associations  0 5 10 15 20 25 30         Iterations  P ot  en tia  l F un  ct io  n ?  Figure 8. Dynamics of potential function value ? corresponding to the dynamics in Figure 7  B. Distributed AP Association  We next implement the distributed AP association algo- rithm in Section IV. We consider K = 20 mobile secondary users who can move around and try to find a proper AP to associate with. Within an AP n, the throughput Un(a?) of AP n is computed according to the Nash equilibrium a? in Section VI-A. For the channel contention by multiple secondary users, we set the number of backoff mini-slots ?max = 10.

We first show the dynamics of the distributed AP asso- ciation algorithm with the random initial APs selection and the mobility cost factor ?k = 0.06 Mbps/m in Figure 7. We see that the algorithm converges to an equilibrium (b?, b?) in less 30 iterations. We also show the dynamics of the state-based potential function ? in Figure 8. We see that the equilibrium (b?, b?) is a state-based Nash equilibrium, since the algorithm leads the state-based potential function to a maximum point.

To investigate the impact of the cost factor ?k, we imple-     ??  ??	?  ??	? ??	?  ??	? ??	?  ??	? ??  &???	'?????	( )*$+? &???	'?????	( ) *$+$?  Figure 9. The equilibrium secondary user distribution with a mixture of two types of secondary users. The black dots represent the secondary users with a high cost factor, and the black stars represent the secondary users with a low cost factor.

0 100 200 300 400 500 600         Iterations  U se  rs ? A  ve ra  ge T  hr ou  gh pu  t ( M  bp s)  10 users leave the system  15 users enter the system  Users at AP 1  Users at AP 6  Users at AP 5  Users at AP 2  Users at AP 3  Users at AP 4 Users at AP 7 & 8  Figure 10. Dynamics of distributed AP association with perturbations. At iteration t = 200 and 400, 10 users leave the system and 15 new users enter the system, respectively.

ment the distributed AP association algorithm with a mixture of two types of secondary users: high and low mobility cost factors. We see from Figure 9 that users of low mobility cost will spread out to achieve better data rates, while most users of high mobility cost choose to stay in AP 1 and suffer from severe congestion.

We next investigate the robustness of the distributed AP association algorithm. We consider K = 30 mobile secondary users with the cost factor ?k randomly generated from a uniform distribution in (0, 0.2). At iteration t = 200 and 400, we let 10 users leave the system and 15 new users enter the system, respectively. The results in Figures 10 and 11 show that the algorithm can quickly converge to a state-based Nash equilibrium after the perturbations occur.

This verifies that the distributed AP association algorithm is robust to the dynamics of secondary users? leaving and entering the system.

0 100 200 300 400 500 600         Iterations  P ot  en tia  l F un  ct io  n ?  10 users leave the system  15 users enter the system  Figure 11. Dynamics of potential function value ? with perturbations. At iteration t = 200 and 400, 10 users leave the system and 15 new users enter the system, respectively.



VII. RELATED WORK  Most research efforts in database-assisted white-space systems are devoted to the design of geo-location service.

Gurney et al. in [7] calculated the spectrum availability based on the transmission power of the white-space devices.

Karimi in [8] presented a method to derive location-specific maximum permitted emission levels for white space devices.

Murty et al. in [2] proposed a framework to determine the vacant spectrum by using propagation model and terrain data. Nekovee in [9] studied the white-space availability and frequency composition in UK.

For the white-space networking system design, many existing works focus on the experimental testbed implemen- tation. Bahl et al. in [10] designed a single white-space AP system. Murty et al. in [2] addressed the client bootstrapping and mobility handling issues in white-space AP networks.

Feng et al. in [11] considered the OFDM-based AP white- space network system design. Deb et al. in [12] presented a centralized white-space spectrum allocation algorithm. In this paper, we propose a theoretic framework based on game theory for distributed resource allocation in white-space AP networks.

The game theory has been used to study wireless resource allocation problems in non-white-space infrastructure-based networks. Southwell et al. in [13] modeled the distributed channel selection problem with switching cost as a network congestion game. Chen and Huang in [14] proposed a spatial spectrum access game framework for distributed spectrum sharing with spatial reuse. Wang et al. in [15] proposed an auction approach for incentive-compatible spectrum resource allocation. Gajic? et al. in [16] and Duan et. al in [17] studied the pricing mechanisms to achieve efficient wireless service provider association solutions. Hong et al. in [18] investigated distributed AP association game with power control, by assuming that the chosen channels among APs     are non-overlapping. These previous results focus on the case that users are stationary, and can associate with any AP. When users are mobile, Mittal et al. in [19] studied the distributed access point selection game by assuming that users are homogeneous with the same cost of mobility. Here we propose a state-based game framework to formulate the more general case that users have heterogeneous cost of mobility.



VIII. CONCLUSION  In this paper, we consider the database-assisted white- space AP network design. We address the channel selection problem among the APs and the distributed AP association problem of the secondary users through the game theoretic approach. We propose a distributed AP channel selection algorithm and a distributed AP association algorithm, both of which that converge to the corresponding equilibrium globally. Numerical results show that the algorithms can achieve mutually acceptable resource allocation, and are robust to the perturbation by secondary users? dynamical leaving and entering the system.

For the future work, we are going to generalize the results to the case that each AP can choose multiple vacant channels to operate, and the number of channels that an AP chooses depends on the number of its associated users. Although the distributed AP association algorithm can achieve the state-based Nash equilibrium wherein all users are satisfied given their mobility cost factors, the loads among different APs can be quite imbalanced when the mobility cost is high as demonstrated in the numerical results. Thus, how to design an incentive compatible mechanism such as pricing to achieve load balance among the APs with mobile secondary users will be very interesting and challenging.

