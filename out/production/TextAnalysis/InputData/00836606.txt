Mining Quantitative Association Rules under Inequality Constraints

Abstract  In the past several years, there has been much active  work in developing algorithms for mining association  rules. However, in many real-life situations, not all as-  sociation rules are of interest to the users. An user may  want to ?nd association rules which satisfy a given in-  equality constraint for a set of quantitative items. In  other words, users are more interested in the subsets of  those associations. In this paper, we present how to in-  tegrate the inequality constraints into the mining pro-  cess and reduce the number of database scanning. The  algorithm we present generates the large itemsets by  building the expression tree and prunes away the un-  desired one by checking the acceptance range. In our  work, we consider constraints of arithmetic inequali-  ties which are composed of common operators such as  (+;?; ?; =). Preliminary experimental results of the  algorithm in comparison with the classical Apriori al-  gorithm are also reported1.

1 Overview of our work  The problem of discovering association rules was ?rst introduced in [1]. It is to ?nd the possible as- sociations between items when a user speci?es a minimum support (s) and a minimum con?dence (c). For example, one possible association rule can be \there are 10% of customers who made long distance calls to England last month and 80% of those customers also called USA." In this exam- ple, the support is 10% and the con?dence is 80%.

However, the items in the above rule are binary attributes and does not posses any quantitative values. It merely reveals the existence of di?erent items in transactions but not the possible quan- titative relationships between them. Di?erent ex- tensions on the binary association rules have been appeared in the past several years [2, 3, 4, 5, 6, 8].

In Section 2, we introduce the important research work of mining association rules and a clear prob- lem is stated in Section 3. Later in Section 4, we will discuss our new algorithm. In Section 5, pre-  1The work of the authors were supported in part by the Hong Kong RGC Grant: Q120.

liminary experimental results are presented, which is followed by a conclusion of our work.

2 Related Work  Database mining has recently attracted tremen- dous amount of attention in database research be- cause of its applicability in many areas. Many interesting and e?cient association mining algo- rithms have been proposed. One of the most im- portant work was written in 1993.

2.1 Mining Association Rules between Sets of Items in Large Database  Although this paper was written in 1993, it pro- vides the fundamental idea for mining association rules [1]. It proposed the famous Apriori algo- rithm which can be divided into two steps.

? Find all itemsets whose supports are greater than the minimum support s and these item- sets are called large itemsets.

? Generate the association rules. If fABCg and fABg are both in the large itemsets, we com- pute its con?dence which is (the support of fABCg)/(the support of fABg). If the ratio is higher than a preset threshold c, the rule is established.

Apriori gives the fundamental idea of how to ?nd out all the large itemsets e?ectively among thou- sands of transactions. However, the algorithm is only dealing with binary attributes. In practice, we usually deal with transactions containing items with positive values instead of 0 or 1. Also, Apri- ori only focuses on the existence of items without performing any manipulation on the input.

Later on, many di?erent algorithms [5, 6, 7, 9] were introduced to enrich the mining methodol- ogy. In general, they improve the mining process by two ways: (1) ?nding the more useful associ- ation rules or (2) speeding up the mining process of association rules. In this paper, we present the     QMIC algorithm which also enhances the mining process in the similar ways.

3 Problems Statement  In practice, not all association rules are of in- terest to the users. In addition, databases con- tain quantitative attributes instead of binary at- tributes. A user may want to ?nd association rules which satisfy a given inequality constraint for a set of quantitative items. We consider the constraints of arithmetic inequalities which are composed of (+;?; ?; =).

Let V = I1; I2; : : : ; IM be a set of quantitative items, and T be the transactions of a database D. For each transaction t, t[k] > 0 means that t contains item Ik with the value t[k], and t[k]=0 means that Ik does not exist in t. In our work, we are interested in ?nding all quantitative associa- tion rules that satisfy the user speci?ed constraint S which consist of an arithmetic expression(E), an inequality operator(r) and a constant(C).

Therefore, a given constraint can be speci?ed as E r C, where  ? E is any arithmetic expression composing of a number of unknown quantitative items and the operators (+;?;?; =) with or without brack- ets,  ? r ? f<;>;=;?;?g,  ? C is a scalar value.

Some examples of the inequality constraints are given below.

1. A+B+C < 100 - Find any three items in the database where their sum of values is smaller than 100.

2. A ? 2 ? B = 0 - Find any pair of items where one's value is the double of the other.

4 The QMIC Approach  Frequency constraint, which considers the support count of an itemset is a common criterion widely used in today's association mining algorithm. In our interest, mining association rules in a database of quantitative items, we like to consider the value constraint of the itemsets as the second criterion in the pruning process. Our strategy is to divide the pruning process into two stages. Stage 1 de- ?nes the acceptance range (AR) for the candidate itemsets in each iteration. Whenever the value  /  * *  + -  *  -  *  +  A B C D  E F G H I J  (A + B) * (C - D) + E * F (G * H) - (I * J)  (A + B) * (C - D) E * F G * H I * J  A + B C - D  (A + B) * (C - D) + E * F (G * H) - (I * J)  (a) an expression tree  /  * *  + -  *  -  *  +  A B C D  E F G H I J  (A + B) * (C - D) + E * F (G * H) - (I * J)  (A + B) * (C - D) E * F G * H I * J  A + B C - D  (A + B) * (C - D) + E * F (G * H) - (I * J)  (b) bottom-up assignment of min-max range  Bottom Up Process(5, 10) (5, 10)  (10,20)  /  * *  + -  *  -  *  +  A B C D  E F G H I J  (A + B) * (C - D) + E * F (G * H) - (I * J)  (A + B) * (C - D) E * F G * H I * J  A + B C - D  (A + B) * (C - D) + E * F (G * H) - (I * J)  (c) top-down assignment of AR assumed min-max ranges of childs are (0,100) and (2,30) respectively  Top Down Process  (2,10)(5,100)  8(10, )  Figure 1: Building an IET.

range (VR) 2 of a candidate itemset is overlapped with any AR, it can be passed to stage 2. Other- wise, it will be pruned away without the support counting. Stage 2 is simply the original support counting which makes use of the frequency con- straint. The QMIC algorithm implements stage 1 by constructing the IET.

4.1 Inequality Expression Tree (IET)  4.1.1 Expression Tree There are three steps in constructing an IET. The ?rst step is to con- vert an expression E of the user speci?ed con- straint into the expression tree structure. There are two interesting properties about an expression tree built in QMIC.

? A leaf node represents any possible item in the database.

? Each internal node represents a sub-expression rooted at itself. The itemset size of the node represents the number of items that this sub- expression has.

For example, an internal node rooted with the ex- pression x+ y? z has node size equal to three. A more detail example is shown in Figure 1a which shows the expression tree with size equals to 10.

An arithmetic expression can be represented by di?erent expression trees. In constructing the expression tree, we have adopted a simple heuris- tic. The expression is separated into terms and the (+;?) operators. Each term is either composed of (?; =) operators and/or brackets. Amongst the (+;?) operators in the expression, we choose the center one as the root, and recursively selected the two middle ones in the left and right hand side.

The same heuristic is applied to each term until the tree is completely done. The details of how the heuristic work will be given in our complete paper.

4.1.2 Minimum and Maximum Range The second step is to assign each node a min- max range, (Eimin; Eimax) which represents the minimum and maximum values of the associated expression of the node. The calculation of the min-max ranges is a bottom-up process. That is, it starts at the leaf level and processes up until the  2The VR represents the possible values after evaluat-  ing the itemset with the sub-expression associated with the  node.

root. The min-max ranges of the leaf nodes which represent the single items are all the same and it can be simply obtained by scanning the database once. Based on the operators in the intermediate nodes, all the min-max ranges of the intermediate nodes can be calculated. In Figure 2, we show the four general formulae to calculate the ranges under the bottom-up process.

All min-max ranges of the leaf nodes, size equals to 1, are the same at the beginning. The ex- ample of an expression tree with min-max ranges is shown in Figure 1b.

4.1.3 Acceptance Range The third step is the assignments of the acceptance range (AR), (Elow; Eup) to the nodes. The AR of a node is the valid range of values that an itemset can be ac- cepted after evaluating with the sub-expression at the node. Unlike the min-max range, the AR as- signment is a top-down process which starts from the root this time. The AR of the root can be found easily since it represents the whole left- hand-side expression of the input constraint. In our continuing example, it is (10;1). Once the root's AR is de?ned, other AR's can be calculated.

Because of space limitation, we omit the detail of the calculation procedure but show the four gen- eral formulae for the (?) condition in Figure 3.

The other four formulae for the (?) is skipped here.

After the calculation of the ARs, the initial IET for the expression in Figure 1a is completed as in Figure 1c. It has a number of properties.

1. If the value range of a candidate itemset over- laps with any AR's of the leaf node, it is passed to stage 2 for support counting.

2. If the value range of a candidate itemset does not overlap any AR's, it is pruned away.

3. During mining, each leaf node is associated with a set of large itemsets whose size is the same length as of the sub-expression.

4. Both min-max range and AR's intervals will be adjusted after each iteration (will be discussed in Section 4.2).

5. The structure, especially the depth informa- tion, of the IET determines the Generating Mining Sequence, GMS, which will be dis- cussed next.

+  E1  ( E 2 min , E 2 m a x)( E 1 min , E 1m a x)  The  min-max range  of  the  parent  node  p  i s (E 1 m in  +  E 2 min ,  E 1 max +  E 2 m a x) respect ively.

p  E2  *  E1  ( E 2 min , E 2 m a x)( E 1 min , E 1m a x)  p  E2  The min-max range  of  the  parent  node  p  i s (E 1 m in  *  E2 min ,  E 1 max *  E2 m a x) respect ively.

-  E1  ( E 2 min , E 2m a x)( E 1 min , E 1m a x)  The  min-max range  of  the  parent  node  p  i s (E 1 m in  -  E2 max ,  E 1 max -  E2 min ) respect ively.

p  E2  /  E1  ( E 2 min , E 2m a x)( E 1 min , E 1m a x)  p  E2  The min-max range  of  the  parent  node  p  i s (E 1 m in  /  E2max ,  E 1 max /  E2 min) respect ively.

Figure 2: The four general formulae in the bottom-up process  +  E1  ( E l o w ,E u p )  ( E 2 m i n ,E2 m a x)( E 1 m i n ,E1 m a x)  The  AR range  o f  E1  and  E2  a re (E low  -  E2max ,E 1 max )  and (E low -  E1max , E 2max )  respect ively.

p  E2  *  E1  ( E l o w ,E u p )  ( E 2 m i n ,E2 m a x)( E 1 m i n ,E1 m a x)  The  AR range  o f  E1  and  E2  a re (E low  /  E2max ,E 1 max )  and (E low  /  E1max , E 2max )  respect ively.

p  E2  -  E 1  ( E l o w ,E u p )  ( E 2 m i n ,E2 m a x)( E 1 m i n ,E1 m a x)  The  AR range  o f  E1  and  E2  a re (E low  -  E2min ,E 1 max )  and (E 2 m in ,  E1max-  E low )  respect ively.

p  E 2  /  E 1  ( E l o w ,E u p )  ( E 2 m i n ,E2 m a x)( E 1 m i n ,E1 m a x)  The  AR range  o f  E1  and  E2  a re (E low  /  E2min ,E 1 max )  and (E 2 m in ,  E1max  /  Elo w )  respect ively.

p  E 2  Figure 3: The AR calculations for the? condition.

The ?rst two properties are guaranteed by the general formulae. The rest will be useful in de?n- ing the GMS of the mining process.

4.2 Generating Mining Sequence  GMS is responsible to determine the sizes of the iterations during the mining process. In the Apri- ori algorithm, the generation sequence is simply as 1; 2; 3; : : :. However, this is not necessary in our case since we can skip the generation of the itemset with certain size. That is, we can shorten the generating sequence of mining. In QMIC, the depth of the IET determines the GMS. This is because QMIC generates the large itemsets by traversing from the leaf nodes of IET to its root.

For the example in Figure 1c, the sequence from GMS is f1; 2; 4; 6; 10g and it is only half of the length of the one in Apriori f1; 2; 3; : : : ; 10g.

4.2.1 AR Pruning In the iteration k of Apri- ori, the candidate itemset Ck is generated from the large itemset Lk?1. For those itemsets in Ck which have su?cient support counts, they will be in Lk. Then the iteration is completed and move to iteration k + 1. In the QMIC algorithm, we start from the leaf nodes of IET and use the se- quence from GMS to guide the candidate item- set generation steps. At each iteration, once the candidate itemsets with Ck are generated, their itemsets' VRs are veri?ed with AR's in each leaf node. If the VRs of the itemsets in Ck does not overlap with any ARs, it should be pruned away because it fails to satisfy the inequality constraint.

By ?nding the support counts of the rest, we can determine Lk. Unlike Apriori, the next iteration of QMIC is not necessary Lk+1. It will be Lk+l where l is the size of the siblings of the current node. In other words, if both large itemsets as- sociated with child nodes are available, the next iteration is to generate the large itemsets to be as- sociated with their parent. That is why the depth of the IET de?nes the GMS.

4.2.2 The QMIC Algorithm In this sec- tion, we show the complete QMIC algorithm be- low. Note that the notations used are shown in Figure 5. The details of candidate itemset gener- ation and its support counting is omitted because their functions are similar to those in Apriori.

5 Experiments  To evaluate the performance of QMIC, we com- pare it to a modi?ed Apriori algorithm which has  1. Given the database D and the completed IET, scan the database for L1 and V R1.

2. Itemset generation of C2 from L1  3. i:=2  4. Repeat f  ? delete the LNi from the IET  ? for x = 1 to sizeof(Ci) for y= 1 to sizeof(LNi)  { if ((V Rix \ ARiy) 6= ?) append Cix into C 0i  ? support counting of the C 0i to obtain the large itemsets Li  ? /*adjust the AR of the parent node of LNi*/  { for any node associated with the Li  ? update the min-max range of their parent node  ? update AR of parent since their min- max range has been updated  ? /*update the IET and its parameter*/  { for any pair of leaf nodes (LNi; LNj) which are siblings  ? i= min (sum of the node size of each pair)  ? itemset generation of Ci from the large item- sets which are represented by LNi and LNj  g while depth of the IET > 1  Figure 4: The QMIC Algorithm.

Notation Meaning  LNm leaf nodes with node size equal to m LNmn specify nth leaf node in LNm ARm acceptance range set of the leaf nodes LNm ARmn acceptance range of the speci?ed leaf node LNmn V Ri value range set of all the itemsets with size i V Rij value range of a specify jth itemset in V Ri Li large itemsets with size i Ci candidate itemsets with size i Cij jth candidate itemset in Ci C   i candidate itemsets which satisfy the user constraint  Nk tree node which represent the large itemsets  Figure 5: Notations for the QMIC Algorithm.

been enhanced to handle the constraint mining.

The experiment was conducted under the con- straint size of 5, 10 and 15. And the result of the size 10 is shown in following ?gures. We notice that it is not su?cient to determine the e?ciency of the algorithms by only counting the number of steps in generating the candidate itemsets.

In order to assess the performance of the algo- rithms, we have implemented the Apriori algo- rithm and the QMIC algorithm in C++. We ran our preliminary experiments on a Solaris work- station with 32 Mbytes of main memory. There are two sets of experiments. The ?rst set of ex- periments ?xed the number of items as 1000 and experimented with di?erent database sizes. The corresponding results is shown in Figure 6. The second set experiments is also based on a ?xed number of items (1000) but with a more com- plicated user speci?ed constraint which involved more than 15 di?erent items The results are shown in Figure 7. The results show us that the number of transactions has a large impact to the database.

This is reasonable since we have to scan the whole database once for each size-k of the large itemset Lk. The proposed algorithm skipped the genera- tion of many unnecessary candidate itemsets. So, the more transactions in the database, the bet- ter the algorithm can save time. As we can see from the result, the QMIC works better for larger database. In other words, it becomes even more e?ective when the size of the database is getting bigger.

6 Conclusion  In this paper, we present how an inequality con- straint can be integrated into the mining of associ- ation rules. The QMIC algorithm is proposed. It improves the association mining algorithm in two areas: 1) reduce the size of the candidate item- sets in each iteration, 2) reduce the number of database scans. These are done by introducing the concept of IET and GSM. The preliminary  1 2 3 4 5 6 7 8 9 10  x 10         Number of Transactions  Ti m  e (s  ec on  ds )  "QMIC" ????  "Apriori" .....

Figure 6: Discovery time for di?erent number of transactions.

1 2 3 4 5 6 7 8 9 10  x 10         Number of Transactions  Ti m  e (s  ec on  ds )  "QMIC" ????  "Apriori" .....

Figure 7: Discovery time for di?erent number of transactions.

experimental results showed that the QMIC out- performed the Apriori algorithm more than 100% when there are more than 100 thousand transac- tions in the database.

