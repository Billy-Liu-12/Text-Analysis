<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">Mining Web  Transaction Patterns in Electronic Commerce Environment

Abstract World Wide Web is the most excited impacts to the human society in the past few years.  It provides another way for doing business.  This paper proposes a new algorithm, IPA (Integrating Path traversal patterns and Association rules), for mining web transaction patterns in the electronic commerce environment.  The IPA algorithm takes both the traveling and purchasing behaviors of customers into consideration at the same time to overcome the disadvantages of pure association rules mining and pure path traversal pattern mining.  The experimental results show that the IPA algorithm can simultaneously and efficiently capture the user?s traversing and purchasing behaviors.

1. Introduction Today, Web has turned to be the largest information source.  Applications are ported to the Web at rapid pace.  As the electronic commerce (EC) activities become more and more diverse, it is very critical to provide the right information to the right customers.

In EC environment, how to find the association rules between purchasing items is very important.  If we provide this kind of information to the web site manager, the performance of cross-selling should be improved.  There are many researches worked on this field, e.g., Apriori algorithm [1], DHP (Direct Hashing and Pruning) algorithm [2], and FP-Growth (Frequent Pattern-Growth) algorithm [3].  However, the web site managers may also pay attention to the navigation behaviors of customers.  Association rule mining just purely considered the purchasing behaviors of customers.  It cannot fully satisfy the managers? requirements.

Path traversal pattern mining is the technique that finds most of the navigation behaviors of customers in the EC environment.  The web site designer can use this information to improve the web site design, and to increase the web site performance.  Besides, this information can also provide the navigation suggestions to customers.  There are many researches worked on this field, e.g., FS (Full Scan) algorithm, SS (Selective Scan) algorithm [4], MFTP (Mining Frequent Traversal Patterns) algorithm [5], and other algorithm [6, 7, 8].  However, the web site manager considers not only the pure navigation behaviors but also the purchasing behaviors of customers.  Do these purchasing items have associations?  As the result, path traversal pattern mining just purely considered  purchasing behaviors of customers.  It also cannot fully satisfy the managers? requirements.

To overcome the disadvantages of the pure association rules mining and pure path traversal pattern mining, [9] proposed an algorithm that takes both the traveling and purchasing behaviors of customers into    traveling and purchasing behaviors of customers into consideration at the same time.  We use an example to explain their method.  Figure 1 is an example of web transaction of a customer.  It shows the customer traverses from A to B (buys the item 1).  Next, the customer goes to C, and then goes to D.  Thereafter, the customer backs to C and then goes to E (buys item 3, 4).  Finally, the customer goes back to C and buys the item 2 at that time.

First, [9] cuts each web transaction into several web transaction records.  Then, MTS algorithm is used to discover the final results based on these web transaction records.  In [9], when the customer has the backward behavior, a web transaction record is generated.  Besides, if the last web page of a web transaction record does not purchase any items, it cannot be generated.  According to the Figure 1, three web transaction records are generated shown in Table 1.

Because web pages D and I do not purchase any items, the ABCD and ASI cannot be generated.

(CEC-East?04) 0-7695-2206-8/04 $ 20.00 IEEE Figure  1. Web transaction of a user Table 1. Web transaction records Path Purchases ABCE B{1}, C{2}, E{4}, E{3} ABFGH B{1}, H{6} ASJL S{7}, S{8}, L{9} The reason for cutting each web transaction into web transaction records is that they think the backward movement is not meaningful.  Also, it can reduce the complexity of the algorithm.  However, this assumption is not always true in all situations.  In Figure 1, it is easy to see that the customer traverse to E and purchase items 3 and 4, and then back to C and purchase item 2 at that time.  However, the web transaction records in Table 1 show that the customer buys the item 2 at C and then buys items 3 and 4 at E.

Therefore, the order of traversing and purchasing is not correct after dividing.  Thus, MTS algorithm cannot generate the correct results based on these web transaction records.

For this reason, this paper proposes a new algorithm, IPA (Integrating Path traversal patterns and Association rules), for mining web transaction patterns without dividing any web transactions.  The IPA algorithm also takes both the traveling and purchasing behaviors of customers into consideration at the same time, and considers not only user forward traversal information but also backward information.  Besides, web structure is also used in this algorithm to prune the unnecessary candidates.  Especially, the IPA algorithm allows the noise exist in web transactions.

The rest of the paper is organized as follows.

Section 2 introduces several definitions used in this paper.  Section 3 describes our algorithm.  Before concluding, we compare our algorithm with the existing methods.

2. Definitions  The following shows an example of mining results.

&lt;ABCE: B{1} ? E{4}&gt; This example explains that if the customers purchase item 1 at web page B, they usually buy item 4 at web page E and the traversal path is ABCE.  Now, we define the support of &lt;ABCE: B{1},E{4}&gt; is X/N.

N denotes the number of total customers.  X denotes the number of total customers who visit ABCE sequentially and purchase item 1 at web page B then purchase item 4 at web page E.  We also define the support of &lt;ABC: B{1}&gt; is Y/N.  N is the same as    support of &lt;ABC: B{1}&gt; is Y/N.  N is the same as above.  Y denotes the number of total customers who visit ABC sequentially and purchase item 1 at web page B.  Based on the definition of support, we can define the confidence of &lt;ABCE: B{1} ? E{4}&gt;.  It is shown below.

(CEC-East?04) 0-7695-2206-8/04 $ 20.00 IEEE YX )B{1}:ABCSupport( )E{4}B{1},:ABCESupport( )E{4}B{1}:ABCE(Confidence  ! ? ! ? ! ! ? The confidence explains that customers traverse ABC and purchase item 1 at web page B, and the probability of purchasing item 4 at web page E is X/Y.

Besides, a traversal sequence, e.g., ABC, is a set of web pages ordered by increasing traversal-time.  The support for a traversal sequence is the number of customers who visit this sequence sequentially divide by the number of total customers.  If the support for a traversal sequence q satisfies the user-specified minimum support, then q is called a frequent traversal sequence.  The length of a traversal sequence is the number of web pages in the sequence.  A traversal sequence of length k is called a k-traversal sequence, and a frequent traversal sequence of length k is called a frequent k-traversal sequence.  Before generating the frequent traversal sequences, we need to generate the candidate traversal sequences, and scan the database to count the support for each candidate traversal sequence.

A candidate traversal sequence of length k is called a candidate k-traversal sequence.  Similarly, a purchase sequence, e.g., AB?C, is a set of web pages ordered by increasing traversal-time, and at least one of these web pages, e.g., B, has purchasing behaviors.  The length of a purchase sequence is the number of web pages in the sequence.  A purchase sequence of length k is called a k-purchase sequence, and a frequent purchase sequence of length k is called a frequent k- purchase sequence.

3. IPA Algorithm Based on the definitions described in Section 2, the IPA (Integrating Path traversal patterns and Association rules) algorithm is listed below.  The input of the IPA algorithm is the customer traversing and purchasing database, i.e., TDB, the user-specified minimum support for traversal sequence, i.e., s, and the user-specified minimum support for purchase sequence, i.e., s?.  Because most of the users do not purchase any items in access paths, we usually set s? to s * (t / n).

The t denotes the total number of web transactions which have purchasing behaviors and n denotes the total number of web transactions.

In IPA algorithm, CTS.k denotes the candidate k-traversal sequence, and CPS.k denotes the candidate k-purchase sequence.  The FTS.k denotes the frequent k-traversal sequence, and FPS.k denotes the frequent k-purchase sequence.

Algorithm IPA(s, s?, TDB) Begin (FTS.1, FPS.1, M) = Count1(CTS.1, CPS.1, s, s?, TDB); (FTS.2, FPS.2) = Scan(M, s, s?); (CTS.3, CPS.3) = CandidateGeneration(FTS.2, FPS.2); k = 3; While(CPS.k z I) begin    begin (FTS.k, FPS.k) = CountK(CTS.k, CPS.k, s, s?, TDB); TDB = TrimDB(FTS.k, FPS.k, s, TDB); (CTS.(k+1), CPS.(k+1)) = CandidateGeneration(FTS.k, FPS.k); k++; end End The IPA algorithm uses the Count1 module to count the supports of CTS.1 and CPS.1 based on the TDB, and output FTS.1 and FPS.1 based on s and s?.  The Count1 module also constructs a two-dimensional matrix M for counting the possible CTS.2 and CPS.2.  The Scan module is used to output FTS.2 and FPS.2 based on M, s and s?.  The CandidateGeneration module then firstly put FTS.(k-1) and FPS.(k-1) into a set A.  For any two different frequent (k-1)-sequences in A, i.e., ^ `2-k21 S,,S,Sr, }  and ^ `t,S,,S,S 2-k21 } , a k-sequences ^ `t,S,,S,Sr, 2-k21 }  will be generated.  Finally, the CandidateGeneration module checks the subsequences of all generated k-sequences.  If a subsequence, which has a direct link in the web site structure for any two consecutive web pages of subsequence, is not frequent, the k-sequence will be eliminated.

When CPS.k is not empty, the IPA algorithm will generate longer patterns.  FTS.k and FPS.k are generated by the CountK module based on CTS.k, CPS.k, s, s?, and TDB.  The TrimDB module then is used to remove redundant records from TDB.

In order to clearly explain our algorithm, the following shows an example.  The web site structure is shown in Figure 2, and the customer traversing and purchasing database (TDB) is shown in Table 2.

Figure 2. Web site structure B D A C F E (CEC-East?04) 0-7695-2206-8/04 $ 20.00 IEEE The notation ???  in Table 2 represents that the customer purchases on that web page.

Table 2. Customer traversing and purchasing database ID Access Paths Items Bought 1 BECAF?C F{1} 2 DBAC?AE? C{2}, E{3} 3 BDAE  4 BDECAF?C F{1} 5 BAC?AE? C{2}, E{3} 6 DAC? C{2} Suppose the minimum support for traversal sequence is set to 3/6.  Then, the minimum support for purchase sequence is usually set to 3/6 ? 5/6 (the minimum support count is 2).

In this example, CTS.1 is {A, B, C, D, E, F} and CPS.1 is {C', E', F'}.  Next, we count the supports of CTS.1 and CPS.1.  After the Count1 module, we find that FTS.1 and FPS.1 are the same as CTS.1 and CPS.1, respectively.

In Count1 module, the support count of C is added up the original support count of C, i.e., 2, and support count of C', i.e., 3.  This is because C? includes traveling and purchasing behaviors.

At the same time, we construct a two-dimensional matrix M in Count1 module for counting the possible CTS.2 and CPS.2.  The results are listed below.

Table 3. Matrix M A B C D E F C? E? F? A 0 0 5 0 3 2 3 2 2    A 0 0 5 0 3 2 3 2 2 B 5 0 0 2 5 0 0 2 0 C 4 0 0 0 0 0 0 0 0 D 4 1 0 0 3 0 0 1 0 E 0 0 2 0 0 0 0 0 0 F 0 0 2 0 0 0 0 0 0 C? 2 0 0 0 0 0 0 0 0 E? 0 0 0 0 0 0 0 0 0 F? 0 0 2 0 0 0 0 0 0 For the first access path, i.e., BECAF?C, it originally supports sequences BE, BC, BA, BF, BF?, EC, EA, EF, EF?, CA, CF, CF?, AF, AF?, AC, FC and F?C.

Because BC, BF, BF?, EA, EF, EF?, CF and CF? do not have a direct link between web pages, the first access path only supports BE, BA, EC, CA, AF, AF?, AC, FC and F?C.  That is, only these 9 sequences are counted in M.  According to M and two minimum supports, i.e., s and s?, we can FTS.2 and FPS.2.  In this example, FTS.2 is {AC, AE, BA, BE, CA, DA, DE} and FPS.2 is {AC', AE', AF', BE', C'A, FC'}.

Then, CandidateGeneration module joins FTS.2 and FPS.2 into the same set, i.e., {AC, AE, BA, BE, CA, DA, DE, AC', AE', AF', BE', C'A, FC'}.  For any two different frequent 2-sequences, i.e., ^ `1Sr,  and ^ `t,S1 , a 3-sequences ^ `t,Sr, 1  will be generated.  According to this way, we can generate the following 3-sequences, i.e., {ACA, BAC, BAE, CAC, CAE, DAC, DAE, AC'A, AF'C, BAC', BAE', BAF', CAC', CAE', CAF', DAC', DAF', C'AC, C'AE, C'AC', C'AE', C'AF', F'CA}.

After we generate these 3-sequences, we check each subsequence of these 3-sequences.  If a subsequence, which has a direct link in the web site structure for any two consecutive web pages of subsequence, is not frequent, the sequence will be eliminated.  For example, DAE' will be eliminated.  This is because D and E have a direct link in the web site structure, and DE' is not frequent in FPS.2.  After this process, we output FTS.3 and FPS.3.  In this example, FTS.3 is {ACA, BAC, BAE, CAC, CAE, DAC, DAE} and FPS.3 is {AC'A, AF'C, BAC', BAE', BAF', CAC', CAE', CAF', DAC', DAF', C'AC, C'AE, C'AC', C'AE', C'AF', F'CA}.

After we find FTS.3 and FPS.3, we calculate the possible generation length for each transaction to trim TDB.  It is listed in Table 4.  In this example, we  trim two records, i.e., IDs 3 and 6, because the possible generation lengths for these two IDs are all less than 4.

Table 4. Possible generation length ID Access Paths Possible Generation Length 1 BECAF?C 4 2 DBAC?AE? 5 3 BDAE 3 4 BDECAF?C 4 5 BAC?AE? 5 6 DAC? 3 When k is equal to 5, we can generate all frequent sequences.  Suppose the minimum confidence is set to 1/2.  The final mining results are listed below.

Table 5. Mining results Patterns Support Confidence &lt;BECAF: F{4}&gt; 2/6 2/2 &lt;BACAE: C{2} ? E{3}&gt; 2/6 2/2 &lt;ACAE: C{2} ? E{3}&gt; 2/6 2/2 &lt;ECAF: F{4}&gt; 2/6 2/2 &lt;BAE: E{3}&gt; 2/6 2/5 &lt;CAF: F{4}&gt; 2/6 2/4 &lt;DAC: C{2}&gt; 2/6 2/4 &lt;CAE: C{2} ? E{3}&gt; 2/6 2/2 &lt;AC: C{2}&gt; 3/6 3/6 (CEC-East?04)    (CEC-East?04) 0-7695-2206-8/04 $ 20.00 IEEE Figure 3. Web Site Structure for the Real Dataset As shown in Table 5, we consider not only forward information but also backward information, and we use web site structure to prune unnecessary candidates.

Especially, our algorithm allows the noise exist in the transactions.  For example, suppose that a user traverses AXBC and the web site structure has a direct link between A and B.  Although AB is not successive in the access path, AB is counted in the counting procedure.  In other words, X can be seen as a noise, hence we can ignore it.

4. Experimental results The following experiments use a real web transaction dataset and several simulated datasets for testing the performance of IPA algorithm.  In the real dataset, it is a networked database used to store information for renting DVD movies.  There are 82 web pages in the web site.

We collect the user traversing and purchasing behaviors from 02/18/2001 to 03/24/2001 (seven days).

There are 428,596 log entries in the original dataset.

Before mining the web transaction patterns, we need to preprocess these web logs.  The steps are listed below.

1. Data Arrangement: A customer's request to view a particular web page often results in several log entries, since images are downloaded in addition to the HTML file.  Because we want to get a picture of the customer's behavior, the log entries about images are not important.  Thus, all log entries with filename suffix like .JPG, .GIF, .SME, .CDF are removed.

After this step, 53,246 log entries are reserved.

2. User Identification: Next, users must be identified.

In this paper, we partition the log entries according to the user's IP address.  That is, we assume that each IP address is used by only one user even if different users may share the same IP address.

(CEC-East?04) 0-7695-2206-8/04 $ 20.00 IEEE 3. Session Identification: It is very possible that user visit a web site more than once.  Thus, the goal of the session identification is to identify the different visits for each user.  The method of achieving this is through time out.  That is, if the time between two requests exceed the time limit, we assume that the user start a new session.

According to these steps, we reorganize the original log entries into 12,157 users? traversing and purchasing sections.  In these sections, the maximum traversing and purchasing length is 27, the minimum length is 1, and the average length is 3.9.  Only 535 (4.4%) records have purchased items.  Based on this real dataset, Table 6 shows the execution time of IPA algorithm in different minimum supports for traversal sequences.  It ranges from 1.251 to 1.071 seconds.

Table 7 then shows the rule number generated by the IPA algorithm.  It ranges from 44 to 8 rules.

Table 6. Execution time (seconds) in real dataset Minimum Support for Traversal Sequence Frequent Itemset 5% 10% 15% 20% L1 0.03 0.02 0.02 0.02 L2 1.091 1.131 1.061 1.041 L3 0.02 0.01 0.01 0.01 L4 0.03 0.02 0.01 N/A L5 0.04 0.02 N/A N/A L6 0.04 N/A N/A N/A Total 1.251 1.201 1.101 1.071    Total 1.251 1.201 1.101 1.071 Table 7. Rule number in real dataset Minimum Support for Traversal Sequence Frequent Itemset 5% 10% 15% 20% L1 14 4 4 4 L2 13 6 4 3 L3 8 6 2 1 L4 5 4 0 0 L5 3 1 0 0 L6 1 0 0 0 Total 44 21 10 8 In the simulated dataset, we set the number of web pages to 100.  The connection probability for any two web pages is set to 30%.  The purchasing probability for a customer in a web page is set to 30%.  The maximum rule length and navigation length is set to 6 and 20, respectively.  According to these settings, we generate 200,000 users' traversing and purchasing records.  Table 8 shows the execution time of IPA algorithm in different minimum supports for traversal sequence.  It ranges from 48.881 to 39.016 seconds.

Table 9 shows the rule number generated by the IPA algorithm.  It ranges from 234 to 3 rules.

Table 8. Execution time (seconds) in simulated dataset Minimum Support for Traversal Sequence Frequent Itemset 5% 10% 15% 20% L1 0.401 0.401 0.391 0.391 L2 38.735 38.665 38.715 38.625 L3 0.713 0.130 N/A N/A L4 2.404 N/A N/A N/A  L5 2.734 N/A N/A N/A L6 2.894 N/A N/A N/A Total 48.881 39.196 39.106 39.016 Table 9. Rule number in simulated dataset Minimum Support for Traversal Sequence Frequent Itemset 5% 10% 15% 20% L1 97 45 10 3 L2 70 4 0 0 L3 34 1 0 0 L4 22 0 0 0 L5 9 0 0 0 L6 2 0 0 0 Total 234 50 10 3 If we set the minimum support for traversal sequence to 5% and vary the number of transaction records, the experimental results are shown in Figures 4 and 5.  If we set the minimum support for traversal sequence to 5%, the number of web pages to 50, and vary the transaction length, the experimental results are shown in Figures 6 and 7.

(CEC-East?04) 0-7695-2206-8/04 $ 20.00 IEEE Figure 4. Execution time for different transaction records Figure 5. Rule number for different transaction records Figure 6. Execution time for different transaction length Figure 7. Rule number for different transaction length (CEC-East?04) 0-7695-2206-8/04 $ 20.00 IEEE From the above experiments, we can find that the IPA algorithm outperforms MTS when they generate equal size of rules.

The main purpose of IPA algorithm is to find useful patterns and to help user?s purchasing and navigation.

patterns and to help user?s purchasing and navigation.

Thus, it is important to use these patterns in real world situation.  In real dataset experiments, one of the special rules is &lt;children.htm, bogustheclown.htm, children.htm, thebuppetsgotolondon.htm: thebuppetsgotolondon&gt;.  According to the web structure in Figure 5, the children.htm is the genre page.  It contains links to all associated product pages.  The bogustheclown.htm and thebuppetsgotolondon.htm are all product pages.

They introduce the related information about the product.  Because many customers bought the product (thebuppetsgotolondon) after visit the bogustheclown.htm.  Thus, we can establish a dynamic hyperlink from bogustheclown.htm to thebuppetsgotolondon.htm.  This dynamic hyperlink is oriented towards the possible purchasing product according to this user behavior.  If we adopt the MTS algorithm to the same work, this rule cannot be discovered because of their assumptions for backward movements.  Obviously, our algorithm can efficiently capture the whole behaviors of users.

4. Conclusions In this paper, we propose an IPA (Integrating Path traversal patterns and Association rules) model for mining web transactions in the EC (Electronic Commerce) environment.  The experimental results show that our algorithm can correctly find the customer?s traversing and purchasing behaviors and outperforms MTS algorithm when they generate equal  size of rules.  In the future, we shall efficiently improve the process of trimming database and pruning candidates to speed up the algorithm.

Acknowledgement Research on this paper was partially supported by National Science Council grant NSC 92-2213-E-130- 007?NSC 92-2622-E-130-002-CC3? NSC 92-2213-E- 030-019.

