A Fast Algorithm For Discovering Maximum Frequent Item sets

Abstract-Max Frequent pattern mining is a essential  technology and step in mining associations rules. Max frequent  item sets contain the exact information of all the frequent  itemsets. This paper proposed a fast algorithm for discovering  maximuum frequent itemsets called FA-DMFI which can store attributes association information through scanning database  only once. Then the max frequent itemsets is discovered in the  association matrix by means of the bottom-up and top-down  searching strategy. Therefore the algorithm execute time is  reduced remarkably.mExperimental results show its  effectiveness and efficiency.

Keywords data mining; association rule; max frequent itemset; information matrix

I. INTRODUCTION  Finding patterns in databases is the fundamental operation behind several common data mining tasks including association rule[!] and sequential pattern mining[2].

Mining frequent itemsets is instrumental for mining association rules[3]. Most existing work focuses on mining all frequent itemsets. Performance of this algorithms decrease drastically when some of the max frequent itemsets is relatively long. However, since any subset of a frequent set also is frequent, it is sufficient to discover only the set of maximal frequent itemsets. To reduce the number of generated frequent itemsets, it is thoroughly feasible to convert the issue of finding all frequent itmesets to finding the maximum frequent itemsets. Thus trivially, discovering all the maximum frequent itemsets imply immediate discovery of all frequent itemsets.

The concept of maximum frequent itemsets[4] is firstly proposed by Bayardo in 1998 and he proposed the Max? Miner algOlithm for efftciently extracting only the maximal frequent itemsets, Max-Miner abandons a strict bottom-up traversal of the search space and compress the search space through pruning all it's subsets from consideration. The Pincer-Search algorithm[5] which search for the maximum frequent itemsets efficiently from both bottom-up and top? down directions can reduce both the number of times the database is read and the number of candidates considerd. The FP-Tree algorithm[6] can avoid candidates generation and integrate tree technique in order to solve the problem. Fistly, a large database was compressed into a condensed, smaller data structure called FP-Tree. Then it adopted a pattern? fragment growth method to avoid costly generation of a large number of candidates sets. Third, a partition-based, divide and conquer method was used to mine the confined patterns in conditional database efficiently. In the recent years, the    Mayuan  School of Software University of science and technology LiaoNing  Anshan, Liao ning e-mail: mayuanas@sina.com  research for this field give rise to more public attention in domestic. A varity of analogy algorithm appear successivel?, such as DMFI[7], DMFIA[8? FP-Tree improved algorithm[], A Com}Jact FP-Tree and Array-Technique Based Algorithm[!O] and so on.

In the case that the large number of all frequent itemsets pose a problem for people to understand it, this paper propose a fast algorithm for discovering maximum frequent itemsets called FA DMFI in order to reduce the number of frequent itemsets. Efficiency mining is achieved with two steps: in the first place, we compressed the large database into a condensed, smaller data structure through dividing the atrributes, called information matrix which can avoid repeatly,costly database scans. Secondly, the maximum frequent itemsets is generated utimately be means of cover relation in such infonnation matrix and the costly generation of a large number of candidates is avoided. In such case, both I/O time and cpu time are reduced by eliminating the candidates that are subsets of the max frequent itemsets.



II. RELATED KNOWLEDGE  Let 1 ={i),i2,i3,??,im} be a set of m distinct items. A transaction T is a set of items in 1. A database D is just a set of transactions. A set of items is called itemset. The support of itemsets X, denoted as support( X) , is the number of transactions containing X in database. An itemset is frequent if its support is above some user-defined minimum support threshold. Otherwise, it is infrequent. An itemset is a maximal frequent itemset if it is frequent and no proper superset of it is frequent. The maximum frequent set( MFS) is the set of all the maximal frequent itemsets.

Defmition 1: For the set 1 = g,i2,i3," ?,im} , we assume a binary string ( P),P2"",Pm) with m bits corresponding to 1.

Suppose a transaction T contain itemset X if Pk=1, ik E 1 is a element of X Otherwise, ik E 1 is not a element of X  Defmition 2: In order to compute conveniently, we use a function CTD(I) which can convert the binary string ( corresponding to 1) to r carry number. If the set 1 is divided into k segments 1),12,13,??,1k' CTD(1k) can convert the  binary string corresponding to k-th segment 1 k to r array  digit. Let r= 10 in this paper in consideration of simple discussion.

For example, Let 1 = {i),i2,i3.i4,is.i6} be a set of six items. We divide 1 into two segments, I) = {i), i2, i3}, 12 = {i4,is.i6} .If a transaction contain {i),i2,i4}. we obtain    the results: CTD(I\) = 6, CTD(I2) = 4 .We usually write  CTD(I) for convenient as CTD(I) = CTD(I\) &CTD(I2)  &???& CTD(Ik)' "&" is a string linking sign in it. Then we  obtain CTD(I) ={6, 4} .

Definition 3: We define a function Contain(x,m) whose  task is to generate the set of r-carry digits containing x .

Input: x.

Output: the set of r-array digits .

Firstly, it convert X to a m-bits binary number Pm' If  there exists a m-bits binary number qm satisfies: the result of  and-operating between Pm and qm is the same as Pm' then  all the qm meeting condition should be convert to r-array  digit and return. The set of this return values is called contain set ofx.

For example, Contain( 3,4) = {7,11,15} (r=1O, decimal).

Defmition 4: We also defme a function Cover(x,m)  whose task is to generate the set of r-carry digits contained byx.

Input x.

Output the set of r-array digits.

Firstly, it convert x to a m-bits binary number Pm' If  there exists a m-bits binary number qm satisfies: the result of  and-operating between Pm and qm is the same as qm' then  all the qrn meeting condition should be convert to r-array  digit and return. The set of this return values is called cover set ofx. For example, Cover(6,3)={ 4,2} (k= 1O, decimal).

TABLE!. REFERENCE table of CONTAIN and Cover OPERATING (m=3)     3 1 , 2   5 1,4  6 2 , 4  7 1,2,3,4,5,6 . .

According to the defimtlOn of frequent itemset and maximum frequent itemset, there are two properties:  Property 1: If an itemset is frequent, all its subsets must be frequent.

Property 2: If an itemset is infrequent, all it supersets must be infrequent.

The property 1 show that we can derive all the frequent itemsets from the maximum frequent itemset and it's subsets.

Because the number of maximum frequent itemsets is so smaller than the number of all frequent itemsets, mining maximum frequent itemsets is of great significance in the condition of not losing information of all frequent itemsets.



III. A FAST ALGORITHM FOR DISCOVERING THE MAXIMUM FREQUENT ITEM SETS  The F A-DMFI algorithm we proposed take two steps to accomplish mining process: firstly a new data structure information matrix is builded up through only once scanning database. Then it generate the maximum frequent itemsets interesting for user based on the matrix established before.

A. The algorithm for build up information matrix  The algorithm 1 can record the association relation of items contained by all transactions through scanning database only once. The association relation is stored in a new data structrue denoted by a matrix we called information matrix on which efficient and integrate mining is accomplished.

The database D is divided into three groups along colunm direction. It is writen as follows:  {X, Y, Z I X r;;;, 1 ,Y r;;;, 1 ,Z r;;;, 1 , X n Y = ?, X n Z = ? ,ynz =? , X U Y U Z =I } .

Thus we apply the former function CTD(I) to each  transaction of D and get the result CTD(I) = {x, y ,  z }  . In the  information matrix, we use x as row number, z as colunm number and y as the value at x row and y colunm. In this paer, we assume the number of items is nine.

Algorithm 1 : Information matrix generation algorithm Input : database D Output information matrix A 1). suppose the set of attributes 1 = {i\,i2,i3, . .  ? , im} .  1 is  divided averagely into three groups 1\,12,13' If m is not a  mutiple of 3, we can add some empty colunms so as to satisfy the condition.

2). If the number of items in every group is n, then we  allocate a matrix A with size 2n x 2n. The first index of ail specifies the row and the second the colunm. The initial value of aij is equl to -1.

3). Read a record TID from D and compute CTD(TID) .

The result is denoted as {xyz } .

4). In the matrix A , if y ?  axz, then we add y to axz and  obtain axz = axz u {y } .  The index is used for illustrating the  emergence count of a number in aij . The initial index of y is  equal to 1. If y E  axz, then we add 1 to the index ofy .

5). If there has a record in D, transfer to step 3).

Otherwise algorithm terminates.

B. The algorighm for generating maximum frequent itemsets of each segment X; Y,Z  Let MFX={7,6,5,4,3,2,1} . We should fmd frequent itemsets in the information matrix A in this order. If  xE MFX is infrequent ( Suppose that x is decimal number coppresponding to the first segment of a transaction), then x is deleted from the set MFX If xE MFX is frequent, then items of cover(x ) is deleted from the setMFX The maximum    frequent itemsets of part X is obtained [mally after all elements in MFX is passed.

Algorithm 2: maximum frequent itemsets of segment X generation algorithm  1.

2.

3.

4.

5.

6.

7.

Input: MF){, the itemsets sequence in descending order.

Output: MF){, maximum frequent itemsetof segment X Let MFX={7,6,5,4,3,2, I} F or Each x In MFX  If IsFrequent(x )=True Then delete Cover(x ) inMFX  Else delete x in MFX  EndIf 8. Next  The set MFX is the maximum frequent itemsets of segment X In order to derive the maximum frequent itemsets of other two segments Y and Z, we may also apply the same algorithm to segment Y and Z and obtain the destination sets  MFY andMFZ similarly.

C. The algorighm for generating maximum frequent itemsets of segments XU L XU Z, YU Z  Fistly, we can derive all the frequent itemsets FY from the max frequent itemsets MFY. Thus, for each element x in  MFX and each item y in FY, it is easily for us to form a linking result ? .  If xy is frequent, then y and cover(y) are deleted in FY2, a duplication of FY. These item don't take part in the latter linking operation. After fIrst recurrence, the linking result between elements in FY2 and x is infrequent.

Therefore, we take consideration of items of cover(x ). The detail description is as follows.

Algorithm 3: maximum frequent itemsets of X U Y generation algOlithm  Input: MF){, MFY Output: MFXY, maximum frequent itemsetof XU Y  1. Arrange each item y in MFY and Cover(y) in descending order, delete iterative ones, form set FY 2. For Each x inMFX 3. FY2=FY 4. ForEachy inFY2 5. If x Uy? Cover(MFXY ) And IsFrequent(x Uy)=True  Then 6. x Uy?MFXY  7. delete cover(x Uy) inMFXY  8. delete y and Cover(y) in FY2 9. End If 10. Next 11. For Each x' in Cover(x ) 12. For Eachy' in FY2 13. If x' U y' E Cover(MFXY) And IsFrequent(x'  U y ,)=True Then  14. x' Uy' ?MFXY  15. delete cover(x' Uy' ) inMFXY  16. End if l7. Next 18. Next 19.Next   After algorithm 3, the set MFXY is the maximum frequent itemset of part XU Y. Similarly, we can also obtain  the maximum frequent itemsets MFXZ,MFYZ of part XU Z  and Y U Z by adopting the same method to corresponding sets.

D. The algorighm for generating maximum frequent itemsets ofXUYUZ  Frstly, the algorithm derive full frequent itemsets FXZ and FYZ from MFXZ and MFYZ by mean of cover relation.

F or each element xy in MFXY and each element xz in FXZ, it is easily to form linking result xyz under equal x condition.

Meanwhile, Ifyz E FYZ and xyz is frequent, then ?z is added to the set MFXYZ. Simultaneitly, delete xz and cover( xz) in  FXZ avoid repeatly linking operation between cover(? ) and xz . After fIrst circle, the elements of set FXZ cann't make a link with xy . Consequently, we consider the situation whether cover(xy) could make a link with the remaining elements in FXZ. After this process, the maximum frequent itemsets MFXYZ is generated.

Algorithm 4: maximum frequent itemsets of XU YU Z  generation algorithm Input: MFXY ,MFXZ,MFZY Output: MFXYZ, maximum frequent itemsetof XU YU Z

I.Arrange each element xz in MFXZ and Cover(xz) m descending order, form full frequent itemsets FXZ.

2.Arrange each element yz in MFYZ and Cover(yz ) m descending order, form full frquent itemsets FXZ.

3.For Eachxy inMFXY 4. FXZ2=FXZ 5. For Eachxz in FXZ2 6. xyx xz ? xyz  7. If yz Exists in FYZ And xyz E cover(MFXYZ) And IsFrequent(xyz ) = True Then  8. xyz?MFXYZ 9. delete cover( xy z) inMFXYZ 10. delete Cover( xz) inFXZ2 11. End if 12. Next 13. F or Each x ' y , in Cover( XY ) 14. ForEachx 'z' inFXZ2 15. x' y' x x'z' ? x' y' z' 16. If y' z' exists In FYZ And xyzE cover(MFXYZ) And  IsFrequent (x ' y , z ' )  =True Then 17. x' y' z' ?MFXYZ 18. delete cover(x' y' z' ) inMFXYZ 19. End IF 20. Next 21. Next 22.Next Algrithm 5: IsFrequent algorithm Input: S, sequence of itemsets.

Out: TruelFalse 1. IF SEXThen 2. Find the count of elements whose value is not "-1" at  rows SUContain(S) inA ? count    3. If count ? minsup Then Return True 4. Elself SE Y Then 5. Find the count of elements whose value is "s" or  "Contain(S)" inA ? count 6. If count ? minsup Then Return True 7. Elself SE Z Then 8. Find the count of elements whose value is not "-1" at  columns SU Contain(S) ? count  9. If count ? minsup Then Return True 10. Elself SE XU YThen  11. Assume S= xy, XE X, y E  Y 12. Find the count of elements whose value IS "y " or  "Contain(y)" at rows xU Contain( x) ? count  13. If count ? min sup Then Return True 14. Elself SE YU Z Then  15. Assume S=yz, y E  y, ZE Z 16. Find the count of elements whose value is "y " or  "Contain(y )" at columns Z U Contain(z ) ? count  17. If count ? minsup Then Return True 18. Elself SEXU ZThen  19. Assume S= XZ, XE X, ZE Z 20. Find the count of elements whose value is not "-1" at  rows x U Contain( x) and columns Z U Contain( z)  ? count 21. If count ? minsup Then Return True 22. Elself SEXU YU ZThen  23. Assume S= xyz, XE X, y E  y, ZE Z 24. Find the count of elements whose value is "y " or  "Contain(y )" at rows x U Contain( x) and columns  Z U Contain(z) ? count  25. If count ? minsup Then Return True 26. EndIF  The purpose of algorithm5 is to find the count of a itemset S in the information matrix A produced in first step.

It is arranged in seven cases. If S is frequent, return true.

Otherwise, return false. Because this algorithm doesn't delete the itemset in MFXY ,MFXZ,MFYZ that is the subset of the elements in MFXYZ, it need to delete these elements to gurantee the three sets are maximum frequent itemsets.



IV. EXAMPLE  To facilitate the understanding of all algorithms we proposed related to mining, we first go through an example which pelforms mining on the constructed matrix.Table2 show a trade database D with nine attributes. Each row in D represent a trade record and "x" mean a customer purchase some goods. Table 3 is a information matrix A( with  size 23 x 23) produced by scanning database only once. We assume the minimum support threshold is equal to 3.

TABLE II. A DATABASE D   TOl X X X X  T02 X X X X X  T03 X X X X X X  T04 X X X X X  TOS X X X X  T06 X X X X X X  T07 X X X X X X  T08 X X X X X X  T09 X X  no x x x x  The process of algorithm 1 is as follows: 1). Firstly, 1 is divided into three groups:  X = {ipi2 ,i3 } ,Y ={i4,i5,i6}'Z = {i7,ig,i9} ? 2). Read a record TOl from database and compute  DCTD(T01) = {3,2,4} .

3). Add 2 to the matrix A with position of row 3 and  column 4.

4). Read other records and add it to the matrix A.  Table3  show the result of algorithm 1 after scanning database.

o        o  TABLE III INFORMATION MATRIX A  2 3 4 5 6 7  4 2   2 5   3 3  6 6  After algorithm2-5, the maximum frequent itemsets of each stage are given:  1). XYZ section : {434,421,124,114} , corresponding itemset is {1567, 159,357,367}  2). XY section : {24,22} , corresponding itemset is {24,25} .

3). YZ section: {42,41,25}, corresponding itemset is {48, 49,579} .

4). XZ section: {22, 12, 11 } ,  corresponding itemset is {28,38,39} .

There are twelve maximum frequent itemsets in all.

v. EXPERIMENTAL EVALUATION  All experiments described below were performed on a 1.66Ghz Intel PC with 1G of memory, running windows xp operating system. The FA-DMFI Algorithm and the BFI? DMFI algorithm based on Apriori were coded in C#2005.

The Database we used was a random database and contained nine attributes. Performance comparison is provided in figure1( a) on different level of min support( five ranks: 2%, 4%, 6%, 8%, 10%) between algorithms of FA-DMFI and BFI-DMFI.Because the FA-DMFI algorithm form a stored    matrix by scanning database only once on which the max frequent itemsets is mined completely afterward, the performance of the FA-DMFI algorithm is superior to the BFI-DMFI algorithm to large degree.

Moreover, as we are always discovering the max frequent itemsets on the same association matrix staying in the memory and it don't need to scan database repeatly whenever the min support is changed, the efficient of the algorithm after the database pass is so quick. To perform a preliminary comparison with FA-DMFI algorithm and BFI? DMFI algorithm, we discover the max frequent itemsets from a new information matrix which generated from database as soon as the min support is changed.

50r---------------------------?  Record quantities (104) (b) expansibility  Figure l. Execution time of a1goritlun FA-DMFI and BFI-DMFI based on apriori  In order to understand the extensibility performanceon on datasets with different characteristics, we apply dynamic database the number of which increasd by 104 at a time using fixed minimum support( 1% ). The execution effect is shown in figurel( b).



VI. CONCLUSIONS  An efficient way to discover the maximum frequent set can be very important in some kinds of data mining problems.

The maximum frequent set provides a effective representation of all the frequent itemsets. Discovering all the maximum frequent itemsets imply immediate discovery of all frequent itemsets.

In this paper, we presents a new algorithm called F A? DMFI that can efficiently discover the max frequent sets.

The bottom-up and top-down searching strategy are both adopted in this algorithm . Compared with BFI-DMFI based on apriori algorithm which need several database scans, the FA-DMFI method only needs one database scans when mmmg all frequent itemsets.Experiments shown the improvement of using this approach can be very significant and effective.

