A Cross Platform Computing Method and Its Application for Mobile Device in Transparent Computing

Abstract?Recently, the fact that mobile devices with various kinds of hardware and software platforms constantly appear on the market has resulted in huge amount of mobile applications coming out based on different platforms. Thus a big challenge has emerged to design applications on the heterogeneous devices and operating systems (OSes). This paper proposes a completely cross platform mobile transparent computing (CPMTC) method to make it possible for mobile devices to support various operating systems and application programs from underlying platform to application perspective based on the concept of transparent computing on PC. On the underlying platform of mobile device, a mobile pre-boot firmware (MPBF) is designed to initialize the mobile device and stream the OS image data to device through network. Within the firmware program, multiple OSes image data are able to be loaded on demand at runtime. In order to provide the cross platform support on the application layer, we develop an application design method based on HTML5 using the transparent server to manage the application and user data, and apply it to the e-Learning system. We deploy the MPBF on the experimental tablet, and then load different OSes into the tablet using the MPBF. After that, we run and evaluate the e-learning system over every loaded OS. The practical experiment results confirm that the CPMTC can be taken as the effective method to decouple not only OSes from hardware but also application programs from OS in mobile devices.

Keywords-transparent computing; cross-platform; mobile de- vice; HTML5

I. INTRODUCTION  With the increasing popularity of mobile devices, variety of mainstream underlying mobile operating systems like iOS, Android and Windows Phone have emerged and com- peted with each other in the market intensively. Since all these operating systems have their own application develop- ment platforms, it is difficult to develop an application on these heterogeneous platforms which is more complex than the desktop ones. Cross-platform application design faces the challenges from the heterogeneous hardware architecture to the different underlying operating systems [1].

An application can be made cross platform in several perspectives. Some proposed approaches intend to decouple the application development on different layer from the OS.

Giron in [2] focuses on the Graphical User Interface (GUI) layer and presents an application development process for  mobile devices to dynamically adapt the GUI of applica- tions to changing in the context of use, which is defined in terms of the user, the environment and the platform.

The component-based hierarchical application development method [3] packs the main features of mobile development into single component which can be reused in subsequent de- velopment. Software developed with these components can migrate to new platform rapidly and easily. However, these components are still bound up with particular platforms and need to be compiled on those platforms respectively.

Another kind of method devotes to developing application with some cross-platform tools. Palmieri compares four widely used cross-platform mobile development tools named as XMTs as Rhodes, PhoneGap, DragonRad and MoSync in [4]. Ohrt [5] makes use of XMTs to create applications for different smart phone platforms from the same code base.

However, XMTs must be improved considerably to become a serious alternative to native applications for its far less development support and much higher resource requirements than purely native ones.

In addition, several researches focus on the middleware layer to provide unified services for applications on different platforms. For example, a novel middleware architecture called as flexible Web service middleware (FWSM) pre- sented in [6] enables mobile clients to bind with WS and generates user interface (UI) more dynamically and flexibly.

Another service orient architecture has also been introduced by Vaidyanathan in [7]. In the architecture, JavaScript Object Notation (JSON) is used as an alternative approach to communicate with different platforms to interchange data across various service oriented architecture (SOA) applica- tions, communication middleware and network infrastructure layers.

On the underlying operating system layer, both the traditional multi-boot approach and mobile virtualization technologies like ViMo [8] support running multiple OS- es on single device. The multi-boot approach utilizes the boot loader to boot the selected OS from local storage with full speed and access to hardware while it cannot preserve the previous OS working states very well. The virtualization technologies basically need high performance  on Embedded and Ubiquitous Computing  DOI 10.1109/HPCC.and.EUC.2013.264   on Embedded and Ubiquitous Computing  DOI 10.1109/HPCC.and.EUC.2013.264     hardware resource and make a little bit performance degra- dation compared to native single OS. Sun [9] promote a new approach called OS switching to enable multiple OSes timeshare the same computer cooperatively. The OS switching approach promises fast native execution speed with shorter switching time than traditional multi-boot ap- proach. Kim [10] implements this method on ARM-based consumer electronics in the bootloader layer without any modification of OS. Transparent computing introduced by Zhang [11] puts forward a method to load multiple operating systems on a single desktop computer at runtime, which can be taken as a new way to solve the problem of cross- platform computing between the hardware and operating system layer. At present, transparent computing system has partly implemented on the x86 architecture of PC, while researches of transparent computing based on mobile devices have not yet reach any ideal results.

Our work is primarily focused on applying transparent computing concept to mobile devices and proposes the cross platform mobile transparent computing (CPMTC) method to decouple application programs from OSes and hardware.

There are three main contributions of our work. First, we analyze the main challenge in cross-platform mobile computing comparing to PC and introduce a completely cross-platform computing mode from underlying hardware to upper application layer. The second contribution is the MPBF firmware which applies transparent computing con- cept on PC architecture to mobile devices to load and boot the mobile operating system through network at runtime.

The third one is the transparent user data management that enables user to access their data on any devices.

Compared with the methods mentioned above, the pro- posed solution demands neither OS nor any application data to be pre-installed on the mobile devices but loads it dynami- cally from transparent server according to users requirement.

The visualization technologies have not been involved in the solution which ensures the execution performance. Another important merit of CPMTC is that they can run across all the OSes without using any XMTs. The applications installation and update are transparently and instantly available to all users. Using the CPMTC, users are able to consume the application services via any mobile devices on any OSes.

The paper is organized as follows. The next section in- troduces the basic motivation and concept of cross-platform mobile transparent computing. Section 3 presents the MPBF architecture and its key components. Section 4 describes the details of cross platform application design issues of CMPTC. The proposed platform is evaluated via practical deploying and experimenting of a prototype system in Sec- tion 5. Conclusion and future work are addressed in the last section.

?????????? ??????  ?	? ??  ??	?????????? ??  ???????	???  ?????????? ?????  ?	? ??  ???  ????  ?????????? ??	????  Figure 1. Transparent computing architecture

II. CROSS-PLATFORM MOBILE TRANSPARENT COMPUTING  Before interpreting the CPMTC, it is necessary to intro- duce transparent computing at first, and then the solution is extended from desktop PC to mobile devices.

A. Transparent computing  Transparent computing is a new kind of pervasive com- puting with the architecture composed of transparent client and server machine, as shown in Fig. 1.

The client can be desktop computers, PDA, digital em- bedded appliances or mobile devices which are designed according to transparent computing principles. The essential idea of transparent computing is to extend the traditional stored program concept in von Neumann architecture to client/server mode under the network environment [12].

Specifically, the storage and execution of programs are achieved on different computers respectively. Programs are stored on the servers as opposed to local storage devices in traditional computers. The programs are fetched and scheduled on demand in streaming block to be executed on any computers (light-weight devices or clients) with their local CPU and memory resources.

Transparent computing proposes a super operating system called Meta OS [13] including Multi-OS Remote Booting Protocol (MRBP), application scheduling and management module, user request management module, user management module and server resource management module, etc. The multimedia network computing (MMNC) system [14] built via Tsinghua transparent computing laboratory realizes this computing mode successfully. The system offers users the client OSes with Windows and Linux and the corresponding multimedia application software to choose through the built- in Meta OS thin client.

Transparent computing provides a new mechanism for cross-platform computing. It loads a variety of heteroge- neous operating systems dynamically on the same physical device, allowing users to focus on the available application services without caring about which physical device will be used and what operating system should be run on it. This computing mode provides the underlying support for cross- platform application development which is fairly valuable to apply to mobile devices.

B. Cross-platform mobile transparent computing  With the rapid developing of Mobile computing, mobile device becomes the essential tool in peoples daily life instead of ordinary PC. However there are several issues when designing a cross-platform solution on mobile device comparing to PC.

And it is well known that mobile software is tightly cou- pled with OS and the OS is highly dependent on hardware in mobile computing. There are so many different mobile devices produced by different manufactories appearing on market every day. Each of them supports different platform, and usually one mobile device supports only one mobile operating system or even a particular version one. For exam- ple, iPad tablet supports iOS system only and Nokia Lumia 920 running Windows Mobile 8 instead, etc. Apparently, it is quite hard to run two kinds of heterogeneous operating system on a single device.

Besides, each kind of operating system has its own application development platform and application market, which means the application developers need to develop different version of applications for each platform. Another big challenge of mobile computing is the unstable wireless connection and limited bandwidth issues which do not exist on PC platform.

Obviously the traditional transparent computing technol- ogy applied on PC platform can hardly resolve these issues.

This paper puts forward a novel cross-platform mobile transparent computing (CPMTC) method, which improves the idea of transparent computing for PC and applies it to the mobile device to enhance ubiquitous process ability for mobile device from underlying layer to application layer.

As described in Fig. 2, CPMTC mainly works in mobile devices, and the client always communicates with server via wireless network (e.g. Wi-Fi, 3G, WiMax).

In this mode, mobile OS is not necessarily to be installed previously on mobile devices (tablet, PDA, smart phone, embedded appliances, etc.), for they can load and launch heterogeneous mobile OSes (Android, iOS, Blackberry, Windows mobile, etc.) through network according to users requirement. On the process of the mobile clients booting, the application binary code is loaded to memory on demand from the server, which makes full use of mobile devices computing capability and reduces the pressure of its limited storage. Under ideal conditions, users can access to the  ?????????? ??????  ?????????? ??	????  ??????? ??$???	?  ???????? %????  &??? '( &??)  ?? ????  *?+, +?????  ??	???? ???	????  ????  -?*.

????/.

?,-.

,?  -????0???	????  ???????	????  ?%??? ???????  ?? ?????????? ?  ??	????????? ?? ,?????  -????0???	???? ???????	???  *??? +?	?  Figure 2. CPMTC architecture.

required services through the wireless transparent network at any time, any place, without paying close attention to the hardware equipment, operating systems and network transmission pattern but just using a custom transparent computing mobile terminal.

Combining with the advantages of C/S and B/S com- puting mode, CPMTC completely realizes cross-platform computing from underlying operating system to upper layer application perspective, the key principle and functionality are described as follows.

1) Local computing and network storage: In order to solve the problem that one mobile device can only boot the pre-installed OS, the execution and storage of the program are separated by CPMTC. The program binary code and application data are stored on the server that can be streamed to client dynamically according to users requirement. So the client can boot several heterogeneous OS at runtime without local storage.

2) Application streaming loading and execution: The built-in MPBF service on the client will hook this interrupt at first and issue a network remote request with the local IO request wrapped in. The server receive and parse the request, get the program instruction address through the address mapping algorithm and send the data to client.

3) Cross-platform computing from underlying platform to application perspective: The features provided by MTC enable us to run multiple OSes on one mobile device.

Native applications are linked to the underlying OS tightly and are impossible to run across heterogeneous OSes. The application development mode that we adopted is a web based cross-platform application design method. It utilizes the new emerging web standard HTML5 to provide feature- rich APIs for cross-platform application development. Using this method the application can be executed on all mobile     devices and OSes which support for Webkit browser.



III. MOBILE PRE-BOOT FIRMWARE A. Workflow of MPBF  To implement the mobile transparent computing stated above, we introduce a novel concept of mobile pre-boot firmware (MPBF)program that runs beneath the mobile operating systems to support the multiple OSes remote boot and application remote loading.

We support two boot modes in MTC: the dynamic remote boot and the static local boot. In dynamic boot mode, the bare mobile devices without local storage use MPBF to establish network connection with the server and download the desired mobile operating system kernel to memory to complete boot process. The operating system is loaded dynamically in this mode and will no longer exist once the mobile device is turned off. It will load the operating system from a remote server again when the terminal starts next time.

Considering the portable characteristic of mobile comput- ing and the unstable wireless connection condition, MTC supports static boot operating systems as well. In this mode, the operating system can be pre-installed in the mobile device local storage as usual, or be cached during the remote boot process. The operating system still resides on the mobile device when powered down. The MPBF process work flow is shown in Fig. 3.

As shown in Fig. 3, the MPBF program will initialize the hardware that boot requires such as memory, IO devices, network interface card. It will broadcast the DHCP request to network packet and establish a network connection when the NIC is ready. And then start to send the block IO Request to the remote server to load the OS kernel. Once the OS kernel is loaded completely, MPBF will switch the control to the OS kernel to finish the boot process. The key services supported by MPBF mainly include network  ??????  ?%??? ?????  ????? ??  -?*.

??.

,?  ,??	????1?  ,??	??? ??	????  ?	???  ?,- ?????? ???  +?-?  ????????  ???????  +?-? ??$???  ??	?? ??	????  ??????	???  ??$?? ????  ???  -???  ?? ??????  ,? ???????  ??	??? ??????%??  ???? ???  2?+ ??	?# ,?  ??$???  ?????????? #?  ??$??? ??	? %????  3??? ??  ?????? ??	?   %????  3???? %?? ??  ????? #? ,?  ??$???  ??? ???? ???#?  ?? /??  ???	?# ???	???  ? ??????  ??? ??  Figure 3. MPBF workflow  services, multiple operating systems support and client cache service which will be described in detail in the following sections.

B. Network service in MPBF  Before the mobile client starts loading the operating system binary code from server, we need to build up a network connection at first. MPBF will be responsible for driving the network hardware device and installing the necessary network protocol stack program on the client so as to provide the basic network message sending and receiving functionality.

Most mobile devices use wireless network adapter to access the Ethernet. As we known, different wireless cards vary a lot in supporting the network transmission standards (802.11 a/b/g/n, etc.). We design a wireless card UNDI (Uni- versal Network Driver Interface) Driver based on mac80211 wireless Driver framework which is suitable for versatile wireless NIC devices. And also we transplant the necessary network protocol (such as DHCP, TFTP, SNP) referred to the Linux kernel to the builtCin firmware program. Thus, the mobile devices can receive or transmit the network data package buffer with the proper network standard before the operating system startup which is the basis for the next phase of the remote boot.

C. Multiple OSes boot support  The main difference reflected by the heterogeneous oper- ating systems is the partition table described in the MPBF program. We analyze and integrate multiple supported OSes to unified compatible partition table. We conclude the par- tition merge rules as follows:  SAhybrid(par) = min{SAn(par)} (1) where SAhybrid(par) indicates the starting address of  the hybrid system partition and SAn(par) is the partition starting address for each single OS, n represents the number of the OSes merged and par stands for each partition for the OS such as bootloader, kernel, file system, user data, etc.

Equation (1) implies that the hybrid partition starting address must be aligned with the lowest OS partition address.

Shybrid(par) ? min{Sn(par)} (2) where Shybrid(par) is the size of the hybrid system  partition and Sn(par) represents the partition size for each single OS. It seems from (2) that each hybrid partition size must be less than the minimal OS partition size.

Take Android and Linux QT system as example. Fig. 5 illustrates the above partition merging rule. We make the hy- brid bootloader partition start from the address of 0x0000000 and end with 0x00080000. For the kernel partition, the orig- inal Android kernel image is 3.2 megabytes and Linux QT has 2.8 megabytes, so the integration kernel partition start     4)4  4)544444  4)644444  4)7444444  %??	??????  ???????/  ??????  ???????  ???#?  ??????	?  4)4%??	?????? ????  ??????  ??????  ??????  ?/?	??  ??	?  ??????	?  4)4  4)84444  4)944444  4)?44444  4)9444444  4)--44444  %??	??????  ????  ??????  ?/?	??  ??	?  ??????	?  ??????? 3???) :? ?/%???  ?/?	??  Figure 4. Android and Linux QT partition table integration  from 0x00060000 to 0x00B00000 which has 5 megabytes size and is large enough to hold these two kernel images.

The partition merging rules are also applied to the other ones such as system, user data, etc. With this methodology we solved two heterogeneous kinds of operating systems physical flash storage compatibility issues.



IV. DESIGN METHOD OF CROSS-PLATFORM APPLICATION  A. Architecture of cross-platform application  On the underlying platform layer, MPBF program realizes cross-platform computing upon the hardware and operating system. Under the transparent network environment, users can remotely load multiple OSes dynamically on just a single bare mobile device with built-in MPBF firmware.

On the upper layer application perspective, we put forward a cross-platform application design method to realize the completely mobile cross-platform computing mode. Both native and cross-platform applications are supported in this computing mode as shown in Fig. 6.

It is well known that native applications are tightly coupled with the specific OS. In CPMTC computing mode, we have not installed any kind of OSes and applications  ??	???  ????  ??5  -????0???	???? ???????	????  ?%??? ?????? #???????%?? ? ? # ?  ??  ??	???  ????  ??"  ??	???  ????  ???  ? ??  &?%?? ???????  ?????????? ??	????  Figure 5. Cross-platform application architecture  on client but fetched the data blocks of program execution instruction from server at runtime so as to save the limited client storage resources. In order to provide the rich perva- sive mobile application services to users, we make different kinds of OS images and install relevant native applications onto the image respectively. All these image files are stored on the transparent server.

Unlike native application, cross-platform application is developed via the new emerging web technology HTML5.

The application running on the web browser, independent of OSes, will communicate with transparent application server to download and submit personal user data via user credential. Comparing with the native application scenario, there is no need to put any application and user data on the mobile client. Users can access the application service and their data on any physical device and operating system. The paper takes e-Learning system as an example to demonstrate the cross-platform applications fundamental development and optimization principles.

B. Implement via net version of WWW standard  HTML5 is the new HTML standard that evolves from the previous version HTML 4.01. It supports lots of new features for building rich cross-platform applications. Intels global senior vice President Mrs. James Renee made it clear that Intel will make HTML5 a transparent computing core cross-platform programming language in the future at Intel global development forum in 2012 1 . We utilize the new WWW standard including HTML5, CCS3 and JavaScript to make a series of optimizatio0n work for the mobile device as below.

1) HTML optimization: Optimize the user interface and asynchronous data transmission of the application using JavaScript. For example we hide the URL address bar for the browser to make it look more like the native local application.

2) Canvas element: The canvas element is part of HTM- L5 and allows for dynamic, scriptable rendering of 2D shapes and bitmap images. As a result, theres no needs for the application to use Flash or Silverlight to draw vector graphic or animations any more, which makes the applica- tion more suitable for using across different platforms.

3) Rich user experience: Using CSS3 to control the style and layout of applications. It provides rich user experience without affecting the program structure and application performance.

C. Offline support  Traditional web applications must keep network connec- tion online to download the resources and render it on client web browser. With the offline feature supported by HTML5,  1http://software.intel.com/en-us/blogs/2012/09/13/transparent- computing-one-platform-to-develop-them-all     users can still consume the application while disconnected from the network.

The offline web application revolves around a cache manifest file, which is a list of all resources that our web application might need to access while its disconnected from the network. In order to bootstrap the process of downloading and caching these resources, we use a manifest attribute on the html element markup tag to point to the manifest file with which all the resources in the manifest will get downloaded and cached locally, and will be used in place of their online counterparts whenever users are disconnected from the network.

D. Data exchange using JSON  Data exchange is the key point in the application. The transparent computing client does not store any resources locally, neither operating system image nor user data. The client needs to retrieve from and post user data to the server, during which, the data transferring performance is vital to the user experience. This paper uses JSON (JavaScript Object Notion) as a data interchange format, which is a lightweight data-interchange format and easy for people to read and write and convenient for machines to parse and generate. Different from the XML data format, JSON is easier to be processed by JavaScript, and does not contain a large number of redundant tags. As a consequence, the size of data is much smaller than XML document. And the most important thing is JSON adapts to almost all kinds of platforms with no compatibility issues.

E. Personal user data process  The client does not store any user data including user?s personal information, learning courses, learning progress, personalized notes, etc. All of these data are stored on the transparent server with users credential as the search index.

When accessing this application service, the client needs the specific credential to be submitted to the application server, which will check the credential and then process the corresponding data from the cloud storage with JSON formats and then send back to the client. The client will render them to the end user via HTML5 API and JavaScript.

User is asked to input his personal information when logging into the application system to establish the user credential index on the transparent application server. When user complete the operations on the client side, the system related incremental data will be merged into the user image file on the server, and the application cache data will be synchronized to the database. The server will query and send the latest system image and user related data back to the mobile client respectively when the user accesses the service next time. The explicit data exchange algorithm refers to Algorithm 1.

Algorithm 1 Algorithm1: Transparent data exchange 1: Get user records information via user id 2: if cached then 3: Update cache with new records data 4: else 5: Insert new records data 6: end if 7: while true do 8: Monitor users operation 9: if update record data then  10: Update local Cache 11: end if 12: if open a book then 13: if book record cached then 14: Get records from cache 15: else 16: Send request to server for record data; 17: Update local cache with response 18: end if 19: end if 20: if close a book then 21: Build and send records JSON message 22: Break 23: end if 24: end while

V. EXPERIMENTAL RESULTS AND ANALYSIS  The paper implements a prototype of CPMTC on ex- perimental mobile device. The designed MRBP has been installed on the mobile devices to support remote boot of Linux and Android operating systems. At last we tested the cross-platform E-learning application upon these two different OSes via both smart phone and tablet devices.

A. Deployment envionment  The paper implements a prototype of CPMTC on ex- perimental mobile device with the following configurations, ARM Cortex-A8 processor, 512 megabyte DDR2 SDRAM and 4GB Flash Storage. The physical topology for the CPMTC experiment is described in Fig. 7.

We setup TFTP, NFS services on the transparent server which provide the capability to answer the boot request from transparent client. The application server hosts the E- learning web application services. The transparent mobile clients including smart phone, PDA and tablet are bare devices with MPBF program installed only. The network environment is composed of gigabit wired Ethernet and supports wireless 802.11 b/g/n standards with transmission data rates up to 150Mbps.

B. MPBF implementation  In CPMTC computing mode, the OS and application data are stored on the transparent server rather than the mobile     ?????????? ?????	??? ??	#????  ???	?#  -????  ???????	??? ?????? +?	? ??????  ?????? ???  ?????????? ??????   ???? ?#?????%??	 ?+? &???  ??	?%???     Figure 6. CPMTC Experimental environment topology  device. These data are streaming to mobile client on demand, which is controlled by the MPBF firmware. To verify the feasibility of MPBF, we load the Android 2.3 and Linux QT 3.0 system on the experimental tablet mobile device dynamically. Fig. 8 shows the user interface of bootable OSes choice menu provided by the MPBF program. The first two options are used for booting OSes from transparent server through network, while the third one is used for booting the cached OS locally.

The MPBF sends the booting request to server to load OS kernel at first, and then get the corresponding mounted file system data through the NFS service on server after the kernel has been loaded into memory. Also the client cache supports booting locally without communicating with server when the network connection is unavailable or unstable.

C. CPMTC in application layer  We tested the cross-platform E-learning web application on different platform from hardware to operating system.

The application server hosts the application services for different kinds of transparent clients. All the user data can be loaded to the client via users credential at runtime without being tied up to any specific OS or hardware device. As shown in Fig. 9, we can access the E-learning application     Figure 7. Boot menu of MPBF     Figure 8. E-Learning application running on different platforms  services on both notebook computer and mobile devices (e.g.

smart phone and tablet device). Both wired and wireless connections are supported as showed in the chart in this experimental environment.

The experimental scenario combines cross-platform appli- cation services with the underlying MPBF booting process.

At first we remotely boot Android system using MPBF on the smart phone successfully and login into the E- Learning application with the specific user credential. We make some updates on the application including personal information modification, learning progress and personal notes data changes, etc. These user data have been submitted to application server and then saved in database when user exits the application.

After that we boot the Linux QT system on the tablet device and open the application again with the same user account used before. All the previous application states and user data will be synchronized from server to the device automatically. In addition, any other users can boot the demanded OSes on the same device without being affected by the previous users operation because both the OS and application data are stored on the server.

D. MPBF performance  We evaluate the remote boot performance of MPBF and the experimental results are showed in Table 1. As we can see, the boot process containing kernel and file system loading consumes nearly 20 seconds only if we do not synchronize the cache data. The synchronization process will download and write the operating system from transparent server into local storage which will spend a few minutes to finish.

To switch and load the OS onto mobile devices with traditional manner, we need to burn the OS image into the flash ROM, which will spend several minutes to finish. It is a time consuming and risky work. While the method presented in this paper spends only 20 seconds to complete switching     Table I PERFOMANCE OF MPBF  OS MPBF booting process(s)  Sync cache? Kernel File system  Android Yes 10 134 No 9 10  Linux QT Yes 12 178 No 12 12  from Android system to Linux QT under the gigabit Ethernet environment if we do not synchronize the OS cache.

These results verified that CPMTC is an effective com- puting mode for cross-platform computing from underlying infrastructure to upper application layer. In this computing mode, users can access their desired services and user data via any CPMTC mobile device at anytime and anywhere without concerning about the technical details of underlying hardware and operating systems at all.



VI. CONCLUSION  The paper proposed a completely cross-platform applica- tion design method called CPMTC on mobile devices. The CPMTC implements a MPBF firmware, which can load the desired operating systems through network at runtime for mobile devices. The e-Learning application developed by HTML5 can run on both Android and Linux QT system.

It fully utilizes clients computing capability to render and cache users data. The user data is submit to transparent server and can be accessed by any device at any time. It is totally platform-independent and data-security since there is no data stored in client at all. We also gave some assessment results of the system, which verified the feasibility and ensured the performance of the proposed method.

There still remain some issues to be discussed in our future work. For example, how to the MPBF to support more other operating system such like windows 8 and find out the solution to supporting x86 architecture platform.

