978-1-4244-5934-6/10/$26.00 2010 IEEE                                 1428

AbstractFrequent pattern mining and utility mining have been  studied popularly. However, frequent pattern mining only mines  frequent patterns without considering the different utility values  of individual items and utility mining focuses on identifying the  patterns with high utilities but no guarantee their frequencies. In  this paper, we introduce a utility frequent pattern mining model  based on a share strategy to find the combination of items with  high frequencies and utilities. This model first find all patterns  with a given minimum support threshold. In this step, a share  strategy gives a way to share most of the results from the  previous mining process instead of separating them distinctively,  thereby dramatically reducing the cost of computation. And then  all patterns that do not satisfy a user specified utility are pruned.

The performance study shows that the share strategy is efficient  for utility frequent patterns mining.

Keywords-data mining; association rules; utility frequent  patterns; frequent pattern mining; utility mining

I.  INTRODUCTION  Association rules mining (ARM), one of the most  important data mining strategies, was firstly introduced by [1].

So far, many algorithms for mining association rules have been  presented in the literature. The main goal of ARM is to find  interesting association or correlation relationships among a set  of items. It first finds all the patterns whose co-occurrence  frequency are beyond a minimum support threshold, and then  generates rules from the frequent patterns based on a minimum  confidence threshold. Compared to the first problem, the  solution for the second one is rather straightforward [2].

Finding correlations among a set of items is very useful,  but frequent patterns identified by ARM may only contribute  a small portion of the overall profit, because traditional ARM  model treat all the items in the database equally by only  considering if an item is present in a transaction or not [3].

In order to overcome the limitation of AMR, a utility  mining model was defined. The goal of utility mining is to  identify high utility patterns which drive a large portion of the  total utility [4]. Utility is a measure of how useful an itemset  (i. e. pattern) is. The utility of an item is based on local  transaction utility and external utility. The local transaction  utility of an item is defined according to the information stored  in a transaction, like the quantity of the item sold in the  transaction. The external utility of an item is based on  information from resources besides transactions, like a profit  table. Traditional ARM model assumes that the utility of each  item is always 1 and the sales quantity is either 0 or 1, thus it is  only a special case of utility mining, where the utility or the  sales quantity of each item could be any number [5].

Although utility mining is important in a great amount of  applications, it does not indicate how often such patterns  appear in the database. There may be some high utility  patterns but only appear in few transactions. Such patterns  may not be contributed to decision because of their  infrequencies.

The main contributions of this paper are as follow. Based  on a share strategy, we present a utility frequent pattern  mining (UFPM) model to find the combination of items with  high frequencies and utilities. This model first discovers all  patterns with a given minimum support threshold. In this step,  a share strategy gives a way to share most of the results from  the previous mining process instead of separating them  distinctively, thereby dramatically reducing the cost of  computation. And then all patterns that do not satisfy a user  specified utility threshold are pruned. We propose an  algorithm, called Share Utility Frequent Pattern Mining  (Share-UFPM for short) algorithm, for efficiently mining  utility frequent patterns. The performance study shows that  the share strategy is efficient for mining utility frequent  patterns.

The rest of the paper is organized as follows. Section II  states the definitions and reviews the related work. Section III  proposes the UFPM model and algorithms. Section IV presents  the performance study. Finally, Section V lists the conclusion  and the future work.



II. DEFINITIONS  A. Frequent patterns mining    Let I= {x1, x2  xm} be a set of items. An itemset X, also  called a pattern, is a subset of I and is denoted by X ? I. A  transaction TX = (TID, X) is a pair, where X is a pattern and  TID is its unique identifier. A transaction TX is said to contain  TY if and only if Y ? X. Let D = {T1, T2 Tn} be a set of  transactions. The ratios of the number of transactions in D that  contain X and the total number of transactions is called the  support of X. A pattern X is a frequent pattern, if and only if  its support is larger than or equal to s, where s is a threshold  called minimum support. The problem of frequent patterns  mining is to find the complete set of frequent patterns in a  given transaction database with respect to a certain support  threshold s. According to many studies for mining frequent  patterns from databases, the algorithms can be separated into  two classes: candidate set generation and pattern growth. [6]  B.  Utility mining  The following are the definitions of a set of terms that lead  to the formal definition of utility mining problem [7].

I = {i1, i2 im} is a set of items.

D = {T1, T2 Tn} be a transaction database where each  transaction Ti ? D is a subset of I.

This work is partially supported by the Fundamental Research Funds for  the Central Universities #QN0906.

o(ip, Tq), local transaction utility value of item ip in  transaction Tq, represents the sales quantity of item ip in Tq.

s(ip), external utility value of item ip, is the value associated  with item ip in the utility table. This value reflects the  importance of an item, which is independent of transactions.

u(ip, Tq), utility value of item ip in Tq, the quantitative  measure of utility for item ip in Tq, is defined as o(ip, Tq) *  s(ip).

u(X, Tq), utility value of itemset X in Tq, is defined as  ?

??? qp  qp  TXXi  Tiu ),(  Where X= {i1, i2 ik} is a k-itemset, ip?I, 1?p?k, 1?k?

m.

u(X), utility value of itemset X in the whole database, is  defined as    ?

??? qq  q  TXDT  TXu ),(  The goal of utility mining is to discover all patterns  (itemsets) whose utility values are beyond a user specified  threshold in a transaction database. It overcomes the  shortcomings of traditional frequent patterns mining, which  ignores the different utility values of items. A pattern X is a  utility pattern if u(X) ??, where X ? I and ? is the minimum  utility threshold, otherwise, it is not a utility pattern.

Since the utility mining was presented, there have been  extensive studies on the improvements or extensions, as in [8].

Example 1 Table 1 is a transaction database which is listed in  [4]. The number in each transaction in Table 1(a) is the sales  quantities of each item (local transaction utility value of each  item), and Table 1(b) is the external utility value of each item.

Let X= {A, C}, u(X) = u (X, T3) + u (X, T8) = (u(A, T3) +  u (C, T3))+ (u(A, T8) + u (C, T8)) = (o(A, T3) * s(A) + o(C, T3)  * s(C)) + (o(A, T8) * s(A) + o(C, T8) * s(C)) =(2*3+1*1) +  (3*3 +25*1) = 7+34=41. If the minimum utility threshold is  set at 40, X is a utility pattern.

Utility mining is useful in many applications, but it does  not consider how often such patterns appear. Because some  utility frequent patterns only accidentally appear in few  transactions, they should not be contributed to decision  support.

TABLE I.  TRANSACTION DATABASE AND ITS UTILITY TABLE  (a) Transaction table              (b) The external utility table                C. Utility frequent patterns mining  The following are the definitions of utility frequent pattern  mining problem.

T (X, ?) = {Tq ? D | X ? Tq ? u( X, Tq) ? ?}, be the set of  transactions that contain X and generate at least utility ? on X.

Support(X, ?) =  |D|  | ) (x, T | ?

, the ratio of the size of T (X, ?)  and the total number of transactions.

Utility frequent patterns mining is to mine all patterns in  which the percentage of transactions, containing X and  generating utility value on X beyond a user specified  threshold ?, is greater than or equal to a user specified  threshold s. Namely,  UFP = {X ? I | Support(X, ?) ? s}  Example 2 In Table 1, let ? = 20 and s =20% (the absolute  number is 2), the complete UFP = {B(3), BD(2), BE(3),  CE(2), BDE(2)}. The number after a pattern is its utility  support count (the number of transactions, containing the  pattern and generating utility value beyond 20).

Let us take another example, if ? = 20 and s =20%, T (C, ?)  = {T8}, T (CE, ?) = {T1, T8}, and T (CDE, ?) = {T8}, so Support(C,  ?) =10%, Support(CE, ?) =20%, and Support(CDE, ?) =10%.

Pattern CE is utility frequent, however, neither C nor CDE.

Namely, the utility frequent patterns mining is neither  downward nor upward closed with respect to the lattice of all  patterns like frequent patterns, and there is still no efficient  approach for finding all the utility frequent patterns [7].



III. A SHARE STRATEGY FOR UTILITY FREQUENT PATTERNS  MINING  A. Model description  Theorem 1 For a given minimum utility threshold ? and a  given minimum support threshold s, if a pattern X (X?I) is  utility frequent, then X must be frequent.

Proof Because X is utility frequent, Support(X, ?) =  |D|  | )  (x, T | ?

? s. T(X, ?) = {Tq ? D | X ? Tq ? u( X, Tq) ? ?}  ? {Tq ? D | X ? Tq }=T(X) (i.e. the set of transactions that  contain X). So, Support(X) =  |D|  |T(x) |  ? Support(X,?) =  |D|  | )  (x, T | ?

? s. Therefore, X is also frequent.

According to Theorem 1, the complete set of utility  frequent patterns is a subset of all frequent patterns. So, we  have a two-step model for utility frequent patterns mining. In  the first step, Share-FPM algorithm is proposed to find all  frequent patterns. In the second step, Share-UFPM scans the  database once to check whether each frequent pattern is utility  frequent.

TID  Items sold  A B C D E  T1 0 0 18 0 1  T2 0 6 0 1 1  T3 2 0 1 0 1  T4 1 0 0 1 1  T5 0 0 4 0 2  T6 1 1 0 0 0  T7 0 10 0 1 1  T8 3 0 25 3 1  T9 1 1 0 0 0  T10 0 6 2 0 2  Item Utility  A 3  B 10  C 1  D 6  E 5   B. Share strategy for frequent patterns mining  In this subsection, we first propose a new data structure,  Share-struct, which is derived but obviously different from FP-  tree. Then we developed an efficient algorithm, Share-FPM,  for mining all frequent patterns.

Definition 1 Share-struct is a structure defined below.

It consists of a FP-tree and Share-tables. For each node in  the FP-tree of Share-struct, the link fields for parent and next  are redundant, so they are removed to save space, and once the  tree is built, it will never be changed during the whole mining  process, making the FP-tree more compressed and stable. Each  entry in a Share-table consists of four fields: item-name, local-  count, new, and old, where item-name represents an item,  local-count records the local support of an item in a given  prefix, new field links the nodes not considered in the tree, and    old field points to the nodes traversed or a Share-table  constructed.

Based on the definition mentioned above, we have the  following Share-struct construction algorithm.

Algorithm 1 Share-struct-Construction  Input:  a database DB, and a minimum support threshold s.

Output:  a Share-struct, S?

Method:Call Share-struct-Construction (DB, s, S?)  Procedure Share-struct-Construction (DB, s, S?) {  L1 = {the set of all frequent items};  sort items in L1 in support descending order;  create a FP-tree, T;  call Initialize (S?, T, ?);  }  The procedure Initialize is shown in the following.

Procedure Initialize (S?, new, old) {  for each child ci of new/old  add ci to the relevant new field in S?;  ci.local-count= ci.local-count + ci.count ;  }  Example 3 Table 2 shows the example transaction database  which is borrowed from [9]. Let the minimum support  threshold be 2.

TABLE II.  A TRANSACTION DATABASE AS RUNNING EXAMPLE, DB    Because only the frequent items will play a role in the  frequent pattern mining, it is necessary to scan the DB once to  identify the set of frequent items (L1). In order to obtain high  compactness, we order L1 in support descending order  (L1={f:4, c:4, a:3, b:3, m:3, p:3, l:2, o:2}). Then, we scan the  DB for a second time to construct the FP-tree. The  construction algorithm of a FP-tree is proposed in [10].

Readers are referred to the cited paper for details. The FP-tree  in a Share-struct is almost the same as the one in [10] except  for each notes parent and next fields. They are redundant in  Share-struct, so they are removed. Afterwards, we create the  first Share-table S? according to L1. Fig. 1(a) shows the  original Share-struct (The FP-tree with Share-table S?). For  the convenience of later discussion, the number before each  node in the FP-tree represents its address in memory and all  blank grids in S? indicate 0 or null.

(a) The original Share-struct    Figure 1.  The original Share-struct and the steps of S?s change.

C. Share-FPM algorithm  In this subsection, we will develop an efficient algorithm for  mining all frequent patterns.

Algorithm 2 Share-FPM  Input: S?, the Share-struct constructed based on Algorithm 1,  and s, the minimum support threshold  Output: The complete set of frequent patterns  Method:Call Share-FPM (S?,?, s)  Procedure Share-FPM (S? ,?, s) {  1 for each entry si in S?

2   if (si.local-count<s and si->new! =NULL)  3     add all si ->news children to the new fields of relevant  entries in S?;  4   else ? =??si; ?-SD = ?-SD;  5     if (si ->new != NULL)  6       if si is the only active entry  7         ?-SD=?-SD?si;  8         add all children of si to relevant entries in S?;  9         si ->old= S?;  10      else ?-Postfix = ?-Postfix ?si;  11        if (si ->old == S?)  12          call Inherit(si, S?);  TID Items Bought (Ordered)Frequent Items  100 f, a, c, d, g, i, m, p f, c, a, m, p  200 a, b, c, f, l, m, o f, c, a, b, m, l, o  300 b, f, h, j, o f, b, o  400 b, c, k, s, p c, b, p  500 a, f, c, e, l, p, m, n f, c, a, m, p, l   13        else call Initialize (S?, si->new, si->old);  14        if (si ->old == NULL)  15          flag_upload =TRUE;  16        si->old = S?;  17        call Share-FPM (S?, ?, s);  18        if (flag_upload ==TRUE)  19          call Upload (S?, S?);`  20    else if (si ->old ? S?)  21      ?-SD=?-SD?the items that appear after ? in ?-SD  22      ?-Postfix=the items that appear after ? in ?-Postfix    23      for each pi in ?-Postfix  24        ? = ??pi;  25        ?-SD = the items that appear before pi in ?-SD  26        call Share-FPM (pi->old, ?, s);  27      call Generate-FP (?, ?-SD, ?-Postfix);  28 call Generate-FP (?,?-SD, ?-Postfix);  } //the end of Share-FPM  The procedures Inherit, Upload and Generate-FP are shown  in the following.

Procedure Inherit (s, S?) {  if s->old can be released then //memory management  S? = s->old;  else  create a new Share-table S? by inheriting s->old;  call Initialize (S?, s->new, ?);  }  Procedure Upload (S?, S?) {  for each entry si in S?

upload all new and old fields in S? to old fields in S?;  add si.local-count in S? to si.local-count in S?;  }  Procedure Generate-FP (?,?-SD, ?-Postfix) {  for each nonempty combination ? of the items in ?-SD  generate pattern ?? ? with support  = minimum support of items in it.

for each item pi in ?-Postfix  for each combination ? of the items  (which appear before pi) in ?-SD  generate pattern ?? ? ? pi with support  = minimum support of items in it.

}  D. Share-UFPM Algorithm  According to our mining model description, each utility  frequent pattern is also frequent. After Share-FPM algorithm  finds all frequent patterns, the Share-UFPM algorithm scans  the database once to check whether each frequent pattern  (candidate) is utility frequent pattern. The Share-UFPM  algorithm is as follow.

Algorithm 3 Share-UFPM  Input:   S?, s, ?

Output:   UFP, utility frequent patterns in DB  Method:  Call Share-UFPM(S?, s, ?)    Procedure Share-UFPM(S?, s, ?) {  UFP =?;  FP = Share-FPM (S?,?, s)  for each transaction Ti ? DB  for each candidate c ? FP  if (c ? Ti and u (c, Ti) <? )  c.support --;  for each candidate c ? FP  if (c.support ? s)  UFP = UFP + c;  return UFP;  }

IV. PERFORMANCE STUDY  To evaluate the efficiency and effectiveness of our  algorithms, we have done extensive experiments on various  kinds of datasets with different features. The experiments are  based on a 2.4GMHz Pentium IV PC with 512MB main  memory and 60 GB hard driver, running on Microsoft  Windows 2000 Server. All the programs are written in  Microsoft/Visual C++6.0.

The measured performance is algorithms execution time  on the datasets with different minimum support threshold. The  execution time only includes the disk reading time (scan  datasets) and CPU time, not disk writing time (output frequent  patterns). It is enough to reduce the influence of different  speed of disk writing.

A. Datasets and characteristics  We use real world and synthetic data for our performance  study. The basic characteristics of datasets are listed in the  following.

The real world dataset called Retail is achieved from a  retailing company. Retail contains products from various  categories. There are 16469 items and 88162 transactions in  the dataset. Each transaction consists of the products  purchased by a customer at a time point. Its average  transaction size and average maximal potentially frequent  patterns size are 10.3 and 3. The size of this dataset is 4M.

The synthetic data sets which were used for the  experiments were achieved from the online FIMI repository.

See the RUL: http://fimi.cs.helsinki.fi/. The data sets are  T10I4D100K and T40I10D100K. In T10I4D100K, the average  record size and average maximal potentially frequent patterns    size are 10 and 4. In T40I10D100K, they are 40 and 10. The  numbers of transactions in both two dataset are set to 100K.

There are exponentially numerous frequent patterns when the  support threshold goes down.

B. Experimental results  In order to mine the utility frequent patterns, we randomly  generate the count of each item between 1 and 6. In fact, most  items are in the low profit range, we synthetically generate  utility values of each item from 0.01 to 10.00, using a log  normal distribution. For instance, Fig.2 shows the distribution  of the utility values of items in T10I4D100K.

0 1 2 3 4 5 6 7 8 9 10            N  um  be  r o  f i  te  m  s  Utility value    Figure 2.  Utility value distribution in T10I4D100K  For selecting appropriate utility thresholds, we use the  average transaction utility value to constraint the utility  threshold instead of randomly choosing it. For example, in  Table 1, where the average transaction utility value is 40. If  the utility threshold is equal to 25%, it represents that ? = 10  (40  25% =10).

We compare the performance of Share-FPM with BU-  UFM [5], an up to date algorithm for utility frequent patterns    mining. Fig.3 through Fig.5 show the performance curves of  two algorithms on three datasets respectively. We can see that  the Share-UFPM algorithm outperforms BU-UFM on all  datasets, and the performance gap becomes significant when  the minimum support threshold drops low enough.

0.0 0.2 0.4 0.6 0.8 1.0 1.2               Ti  m  e  (S  ec  on  ds  )  Minimum support (%0)  Share-UFPM  BU-UFM  Utility threshold=5%    Figure 3.  Fig.12 Utility frequent patterns mining on Retail  0.0 0.2 0.4 0.6 0.8 1.0                 Ti  m  e  (S  ec  on  ds  )  Minimum support (%0)  Share-UFPM  BU-UFM  Utility threshold=5%    Figure 4.  Fig.13 Utility frequent patterns mining on T10I4D100K  0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8              Ti  m  e  (S  ec  on  ds  )  Minimum support (%)  Share-UFPM    BU-UFM  Utility threshold=5%    Figure 5.  Utility frequent patterns mining on T40I10D100K

V. CONCLUSIONS  In this paper, we introduce a utility frequent pattern mining  model based on a share strategy to find the combination of  items with high frequencies and utilities. This model first find  all patterns with a given minimum support threshold. In this  step, a share strategy gives a way to share most of the results  from the previous mining process instead of separating them  distinctively, thereby dramatically reducing the cost of  computation. And then all patterns that do not satisfy a  minimum utility threshold are pruned.

The extension of our technique, for maintenance of the  already mined utility frequent patterns when updating  databases, is an interesting topic for future research.

