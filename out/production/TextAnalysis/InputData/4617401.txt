An Effective Method for Chinese Related Queries Recommendation

Abstract   With the explosive growth of the Internet resources, web search engines have become the most popular web service to help people find relevant information on a given topic on the web. However, many novice users have difficulty in formulating effective queries for their information needs, in the worst case, users are even not sure what exactly their specific information is.

Under this condition, query suggestion technology is proposed to recommend a list of related queries for a given initial query submitted to a search engine, which can help users specify their information needs better.

In this paper, we present an effective approach for query suggestion. For a given Chinese web query, the approach can not only identify related queries already existed in the log of past submitted queries to search engines but also use synonyms extracted from web- based corpuses to construct new related queries. Our method not only discovers the related queries, but also ranks them according to the degree of their relatedness, effectiveness and freshness. The achieved performance shows that the proposed approach is very effective in recommending related queries for high-frequency queries, moreover, it also performs reasonably well on less frequent queries.

1. Introduction  With the explosive growth of the Internet resources,  the web has become an essential repository of huge up- to-date information that covers almost all the topics human users could be interested in. Web search engines have become the most popular web service to help people exploit such an extremely valuable resources and find relevant information related to his/her queries. However, with the overwhelming volume of information on the web, it is increasingly difficult to find relevant information related to a given topic. On one hand, most existing search engines still  use the keywords contained in the queries solely to search relevant documents, and dialog context is seldom taken into account during the ranking process.

On the other hand, since the fact that ambiguity is an essential part of language, search engine users often fail to organize precise terms that can best represent their specific information needs. The fact that many synonyms and polysemous words exist in language decreases the possibility that two people use same keywords to describe an identical object or action [1], it also results in term mismatch problem between queries and documents corresponding to the same topic. Moreover, it is observed that web users usually submit very short and imprecise queries to search engines and the average length of web queries is less than two words in reality [2], so it brings more difficulty to improve the retrieval quality only rely on the short queries users submitted.

In order to tackle the problem mentioned above, several advanced technologies have been developed and are being used in commercial search engines such as Google, Baidu and Yahoo. One of the most popular technologies which search engines provide to web users is to show a list of related queries suggestion to the user initial query. For instance, if a user submitted a query ? ? (Beijing University of Posts and Telecommunications), search engines may present several related queries, such as ?  ? (School of Computer Science in Beijing University of Posts and Telecommunications). This technology can guide users to reformulate their queries to clarify their information needs, to remove possible ambiguities, and to obtain better results. As it turns out, recommending related queries automatically is an effective approach to improve user satisfaction when they are searching specific information they need.

2. Related Work    DOI 10.1109/SNPD.2008.63    DOI 10.1109/SNPD.2008.63     A good number of methods have been developed to mine related queries for a given query. [3] presented a method to recommend better queries based on click- through data recorded in user log. Although they claimed that method can discover alternate queries which may improve the search engine ranking of documents, they did not present any experiment results to show it superiority.

Fonseca et al. [4] presented a method to discover related queries based on association rules. They extracted user sessions from search engine query logs as transactions, where each session represented several queries submitted by a user within a pre-defined time interval. Their method is based on the hypothesis below: during a session, a user defines his information need by submitting a set of queries, if distinct queries occur simultaneously in many user sessions, these queries should be related. Unfortunately, they did not suggest any effective and efficient method to segment users sessions, moreover, some related queries submitted by different users cannot be discovered easily. In their later work [5], they slightly improved the session extraction algorithm and built a query relation graph by using the relatedness between queries mined from sessions. Subsets of queries that are strongly related themselves were identified as concepts and shown to users.

Shi and Yang [6] [7] developed an enhanced model based on association rules to mine related queries.

They proposed a simple but effective user session segmentation algorithm, and brought Levenshtein Distance into the calculation of confidence factor when finding related queries. But we think that Levenshtein Distance do not always work well when denote the similarity between two Chinese queries, for example, the Levenshtein Distance  between ?  ?(Beijing University of Posts and Telecommunications) and ? ? (Nanjing University of Posts and Telecommunications) is only one, but lexeme of them is total different.

Huang, Chien and Oyang [8] [9] presented another log-based terms suggestion approach for interactive web search. Using their approach, it was able to suggest more precise terms for user?s query sessions rather than single query. They showed that the relevance between terms can be estimated from co- occurrence matrix and the suggestion precision would be higher than document-based methods.

Baeza-Yates et al. [10] proposed a method to cluster queries from a session log based on the terms in clicked documents. The related queries in the same cluster as the initial query were ordered according to  their similarity to the input query and were suggested to users.

Jones et al. [11] introduced another method of query suggestions. Different from technologies above, their method can either replace the initial query as a whole or only substitute some phrases. The phrase pairs which can be exchanged each other were identified from log if its mutual information was above a threshold. Then both linear regression and classification algorithms were explored to calculate the degree of relatedness between input query and related queries. Their work did not consider the distinction between phrases in a query, so this inspired us to develop an enhanced model to take the IDF factor of phrases into account.

All of method above mentioned did not consider the freshness of queries they suggested. In our opinion, the queries submitted during recent days may be more valuable for users than queries seldom submitted in recent days. Given all that, the major contributions of our work are the following: (1) We bring freshness weight function to modify the relatedness score of suggested queries; (2) We bring IDF factor to decide which phrase is the most important one in a query and use binary weight score to alleviate the lexeme drift problem.

The rest of the paper is organized as follows. In Section 3, we demonstrate the architecture of our query suggestion system. In Section 4-6, we describe each step of our method in more detail. Section 7 provides our experimental evaluation to show the performance of our method. Section 8 presents the conclusion and some future work.

3. System Architecture Description   Figure 1 shows the architecture of our queries suggestion system. The system generally consists of three modules:  (1) Update Module: This module extracts all intraday queries from the query log and uses them to update a query indexes library. The keys stored in the library are the words segmented from queries by using Chinese segmentation algorithm. The value corresponding to a given word key K is a set of query- score pairs. The query of each pair contains the given word K and the score of each pair is calculated according to the query?s freshness and effectiveness.

Details of the score are discussed in the next section.

It is worth noting that if the queries contain one or more English words, we can treat each word as a segmented word, technologies above can also be used     to build the query indexes for such queries who contain English word.

For example, query ?   ? will update three query indexes:<  >, < > and < >; query ?qq  ?(qq car) will update two query indexes:<qq qq >, < qq >.

(2) Synonyms Extract Module: This module uses a revised PMI-IR[12] method to calculate the word- similarity and then extracts all word pairs with the highest scores as the synonymy pairs. We will discuss this module in section 5.

(3) Query Suggestion Module: In this module, when an initial input query submitted by a web user, the similarities between the query and queries which indexed in library are calculated. If more than one query has the same similarity, the query with higher score is suggested with higher rank. Besides that, some phrases in the initial query can also be substituted by their synonyms when there are not adequate related queries can be found in indexes library. We will discuss this module in detail in Section 6.

When a user submits an initial query Q, the system will work in this way: Update module will save Q into intraday query log, and the query indexes will be updated day by day by this module when it collects all intraday queries; Query Suggestion module will segment Q into words sequences T=t1t2?tn, then a list of related queries will be generated according to Query Indexes and Synonyms Pair. At last, the user can have chance to choose the query interested from the related queries list and to modify his search.

Figure 1 Process of our query suggestion system   4. Calculate score of queries from query logs   The score of a query stands for the intrinsic weight when choosing the relative position in related queries list and is obtained by combining the following notions: 1. Freshness of the query. This metric is a measure of the popularity of a query in recent days. Those queries which submitted recently frequently may be more useful for web users. In order to use a quantitative representation to describe the hypothesis, we define the Freshness of a given query q as F(q):   1( ) ( , ) n  i F q freq q i  i? ? ?  (1) Where freq(q, x) is the submitted frequency of q in  the day i days before today, n is the longest duration which is considered to have contribution to F(q). In our implementation, we let n is 30, that means, we only consider the submitted times during a period of a month.

2. Effectiveness of the query. This metric is a measure of the attraction of a query for users. Those queries which have more clicked times may be more effective for users to find information on a given topic, so we define the effectiveness of a given query q as E(q):    ( , ) ( )  ( , )  i u  i  clicked u i N E q  freq q i M  ?  ? ?  ?  ? ?  ?  ??  ? (2)  Where clicked(u, i) is the total clicked times of different users for a given url u when submit query q in the day i days before today, M, N is the smoothing factor. E(q) can approximately reflect the average clicked times when submit query q.

The freshness and effectiveness of a query can be normalized by its maximum, and then linearly combined, yielding the score of the query:  ( ) ( )( ) max ( ) max ( )q  F q E qScore q F q E q  ? ?? ? q      (3)  Where ?, ? is the tuning weight, we think freshness may be more important than effectiveness, and let ? > ?.

In Update Module, the score of query is updated day by day, and the F(q) and E(q) can be recalculated easily from the daily query log.

5. Extract Synonyms from Web Corpus   In order to suggest some useful related queries which is semantic similar to the input query, we can segment the input query into words, and replace some     words by their synonyms. We use a simple unsupervised learning algorithm which is revised from PMI-IR [12] for collecting synonyms. The differences between PIM-IR and our method are listed as follows:  1. Since we want to find Chinese synonyms, the atomic processing units of PMI-IR method are words outputted by Chinese segmentation algorithm rather than English words.

2. In order to avoid generating so much noise, we only consider words with its length longer than 1, moreover, all words which contain non Chinese characters are also be omitted.

3. In order to generate synonyms pairs automatically, we first collect word pairs which co-occur in the title of web documents in a small corpus, then for two words t1, t2, we calculate the similarity between them by using PMI-IR method. Stimulated by Higgins [13].

We also use the minimum number of hits for the two possible orders in which the two words could be found in the title of documents to eliminate the influence of collocation, and we also choose a very small window size, which is 3, in our implementation,  Given all that, the similarity between two words t1, t2 is defined as:  1 2 2 1 2  1 2  min( ( ), ( ))( , ) ( ) ( )  hits t near t hits t near tS t t hits t hits t  ? 1     (4)  Where hits(t) is the number of documents whose title has word t, hits(t1 near t2) is the number of documents whose title has both t1 and t2 and t1 is ahead of t2 within given window size.

4. We collect 20000 pairs with the highest similarity got from corpus and issue them to Google to calculate the similarity between them again(also use formula 4, but do not consider window size), then we collect the top 5000 pairs as the candidates, after human judgment, almost 1000 noun pairs are selected as synonyms pairs.

6. Suggesting Related Queries   In order to quantify the relevance between initial query and suggested queries, we proposed the following hypothesis:  1. All related queries should have the same words as the initial query, or they are the direct result of substituting synonyms for some words in initial query.

For example, when the initial query is ?  ?(bicycle), the possible related queries may be ? ?(bicycle) and ? ?(brand of bicycle).

2. A high relevant query should have as many  words with high IDF in initial query as possible, so, when the initial query is ? ?(color of  sulfur),  we think ? ?(smell of sulfur) is better than ? ? (color of apple).

3. If both two queries have all words of initial query, the one which is a superstring of initial query is considered better.

4. All queries which are the result of synonyms substitution should be given a lower rank, and words with lower IDF in initial query are preferred to substitute firstly.

In order to compare relevance easily, we define a query?s relevance score to initial query as a (n + 1) bits binary number, where n is the number of words segmented from initial query. The higher a query?s score is, the more relevant to initial query it is. A query?s relevance score can be obtained according to following rules: first, sort the n words segmented from initial query according to its IDF, then we set the (i+1)-th bit of the query?s relevance score to 1 if it contains the word with i-th high IDF in initial query, finally, if the query is a superstring of initial query, we also set the lowest bit of the score to 1. For example, if ? ?(sulfur)?s IDF is higher than ? ?(color)?s IDF,   the relevance score of  ? ?(smell of sulfur) to ? ?(color of  sulfur) is 100, whereas the score of  ? ? is 010.

The query suggestion module extracts all related queries corresponding to the initial query and ranks them with their relevance score. If two queries have the same relevance score, the query with higher score is ahead. The procedure of the module is shown in Figure 2, where MAX1, MAX2 are used to limit the maximum size of result list. ? is a threshold to limit that a query contain too many words which initial query do not have.

Input: Initial query Q; Queries Indexes library L = {<t, list(q,s)>}, where t is a word, list(q,s) is the set of query-score pairs, and the query in each pair contains t; Synonyms pairs P = {<t1, t2>}.

Output: A list of related queries.

Procedure SUGGEST T = segment(Q) int n = T.size sort T in IDF descending order for each ti in T l = L.get(ti) for each qj in l if S do not contain qj append qj in R rel (qj) = 2^n + (Q is the substring of qj ? 1: 0) else  rel (qj) +=  2^n n = n ? 1  sort S in rel ascending order     for each qi in S && R.size < MAX1 n = common(qi, Q)  if segment(qi).size + T.size <= ?*n insert qi into R and keep the rule:	q in R, rel (q)  > rel (qi) || (rel(q) == rel(qi) && q.score > qi.score)  q is ahead of qi  sort T in IDF ascending order for each ti in T && R?.size < MAX2  p = P.get(ti) for each tj in p && R?.size < MAX2 q = substitute(Q.ti, tj) if q is not in R and q can be found in L append q to R? append all query in R? to R return R  Figure 2 Query suggestion algorithm In Fig 2, subroutine ?segment? will segment query  Q into word sequences T=t1t2?tn, subroutine ?common? will compute the number of common words between query qi and Q after segmented.

7. Experimental Evaluation   In this section, we report the experimental results on the performance of our query suggestion method. All experiments were performed using a log with almost 20,000,000 queries from a commercial search engine in China (sogou). The log covers a total period of 31 days between March 1st and March 31st in 2007 and is downloaded from http://www.sogou.com/labs/.

For our experiments, we first built a query indexes library by iterating everyday?s submitted queries. Then we selected 50 test input queries following the probability distribution from the list of all queries in the query log (all sensitive queries such as adult queries are eliminated when sampling). Given a test input query, our system accepted it as input and generated a ranked list of queries that is output by SUGGEST procedure mention above. If there were no related queries for a test queries, that query was omitted from test set and substitutive query was selected from log again. Finally, all 50 test queries which had a non-empty related queries list were selected to measure the method performance. The 50 test queries which are selected at last are listed in Table 1.

In order to access the quality of the related queries, we used the similar approach to [10]. For each test query, the relevance of top K queries in result list was judged by five students of our laboratory. In our experiments, we set K from 1 to 10(MAX2 always set to 1), and if the number of related queries in the list was less than K for some test queries, we only  evaluated the maximal number of available queries instead. Similar to [6], the overall average precision and per query average precision were used to quantify the performance of retrieving related queries, The evaluating results which were given in graphs showing precision vs. number of related queries are showed in Figure 3:  Result Number  0 2 4 6 8 10 12  Pr ec  is io  n( %  )             Poverall Pquery  Figure 3 Suggestion query precision for the input queries in the experiments  For both two precision, the figure shows that using our method, on average, we obtain a precision of almost 80% for the first 10 recommended queries and the precision decreases slowly when the number of recommended queries less than 9. If there are more available query log, we believe the result can be improved further.

8. Conclusion and Future Work   In this paper, we present a method of automatically suggesting related queries from web search engine query logs. Recommended queries can also be ranked according to their relevance, freshness and effectiveness. The method proposed is simple, has low computational cost and presents good results.

According to the experiment results, our proposed method performs well enough to be applied in real web search engines as a query recommendation system.

As future work, we are planning to investigate the possibility of expanding queries with our method by performing more detailed experiments. We are also studying more approach to improve the synonyms mining precision and to expand our synonyms set, it can be very useful when recommending queries for short and ambiguous queries.

9. Acknowledgment   The authors would like to thank the anonymous referees for their valuable comments for this paper.

They would also like to thank all their colleagues who     took their time to evaluate our approach. This paper is sponsored by project 60432010 supported by the National Natural Science Foundation of China, National 973 project (Universal trustworthy Network and pervasive Services, No. 2007CB307100), National Key Project of Scientific and Technical Supporting Programs Funded by Ministry of Science & Technology of China (No. 2006BAH 02A 11), Mobile City project of Beijing Scientific Association (No.

D0106012040491) and Production-study-research cooperation project of Beijing Education Commission (No. zh100130525).

10. References  [1] Furnas, G.W., et al., ?Vocabulary Problem in Human- System Communication?, Communications of the ACM, ACM Press, New York,  United States, 1987, vol.30, no.11, pp. 964-971.

[2] Wen, J.-R., J.-Y. Nie, and H.-J. Zhang, ?Clustering user queries of a search engine?, Proc. 10th International Conference on World Wide Web, Hong Kong, China, 2001, pp.162-168.

[3] Dupret, G. and M. Mendoza, ?Recommending better queries from click-through data?, Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), Springer Verlag, Heidelberg, Germany, 2005, pp.41-44.

[4] Fonseca, B.M., et al, ?Using association rules to discover search engines related queries?, Proc. First Latin American Web Congress,  2003,  pp.66-71.

[5] Fonseca, B.M., et al, ?Concept-based interactive query and Knowledge Management, Association for Computing Machinery, New York, United States, 2005, pp.696-703.

[6] Xiaodong, S. and C.C. Yang, ?Mining related queries from web search engine query logs using an improved association rule mining model?, Journal of the American Society for Information Science and Technology, 2007, vol.58, no.12,  pp. 1871-1883.

[7] Shi, X. and C.C. Yang, ?Mining related queries from search engine query logs?, Proc. 15th International Conference on World Wide Web, Association for Computing Machinery, New York, United States, 2006, pp.943-944.

[8] Huang, C.-K., L.-F. Chien, and Y.-J. Oyang, ?Query- Session-Based Term Suggestion for Interactive Web Search?, Hong Kong, China, 2001.

[9] Huang, C.-K., L.-F. Chien, and Y.-J. Oyang, ?Relevant term suggestion in interactive web search based on contextual information in query session logs?, Journal of the American Society for Information Science and Technology, 2003, vol. 54, no.7, pp. 638-649.

[10] Baeza-Yates, R., C. Hurtado, and M. Mendoza, ?Query Recommendation Using Query Logs in Search Engines?, in Current Trends in Database Technology - EDBT 2004 Workshops, 2004. pp. 588-596.

[11] Jones, R., et al, ?Generating query substitutions?. Proc.

Association for Computing Machinery, New York, United States, pp.387-396..

[12] Turney, P.D. ?Mining the Web for synonyms: PMI-IR versus LSA on TOEFL?, Proc. 23rd International Conference on Machine Learning (ECML-01), 2001, pp.

491-502.

[13] Higgins, D. ?Which statistics reflect semantics?

Rethinking synonymy and word similarity?,  2004.

