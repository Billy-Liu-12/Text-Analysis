Balanced Tidset-based Parallel FP-tree Algorithm for  the Frequent Pattern Mining on Grid System*

Abstract?Mining frequent patterns from transaction-oriented  database is an important problem. Frequent patterns are essential for generate association rules, time series, etc. Most of frequent patterns mining algorithm can be classified into two categories: generate-and- test approach (Apriori-like) and pattern growth approach (FP-tree).

In recent times, many methods have been proposed for solving this problem based on FP-tree, because this approach can reduce the number of database scan. However, even for pattern growth methods, the execution time grows rapidly when the database size is getting large and the given support is small. Therefore, parallel-distributed computing is a good strategy to solve this problem. Some parallel algorithms have been proposed, but the execution time is costly when the database size is large. In this paper, we proposed an efficient parallel and distributed mining algorithm?Balanced Tidset Parallel FP-tree (BTP-tree) algorithm on grid computing system. Grid system is a heterogeneous computing environment, our proposed method can balance the loading according to the tree depth and width. In order to exchange transactions efficiently, transaction identification set (Tidset) was used to directly select transactions instead of scanning database. BTP-tree, TPFP-tree and PFP-tree were implemented and the datasets generated by IBM Quest Synthetic Data Generator are used to verify the performance of BTP-tree. The experimental results show that BTP-tree can reduce the execution time significantly and has better loading balance capability than TPFP-tree and PFP-tree.

Index Terms?frequent pattern mining, load balancing, association rules, tidset, grid computing

I. INTRODUCTION To extract frequent patterns in transaction-oriented  database is an important problem for mining association rules [1,11], time series, classification [4], etc. The basic conception of frequent pattern mining problem is to find how many times of the given pattern appeared in a database. Most research either used the generate-and-test (Apriori-like) or Pattern growth approach (FP-growth) [3,5].

For Apriori-like approach, the core idea is if any length of the ?? pattern is not frequent in the database, then the super- pattern (length ?? + 1 ) cannot be frequent.

However, the approach generates a great number of candidate datasets and repetitively scans the database to verify whether it is frequent or not. For example, 250  (about 1015) candidate datasets may needed to be verified whether a set is frequent or not in a database with 50 items.

Hen et al. [5] proposed a novel data structure and method for mining frequent patterns. The Frequent Pattern (FP) tree data structure which only stores compressed, necessary information for mining. Moreover, a mining algorithm ? FP growth ? based on FP-tree also developed. Unlike the Apriori algorithm, the FP-tree only scans the databases twice and the mining information can be obtained from the proposed data structure.

Afterward, many methods based on FP-tree have been proposed. Moreover, these researches also illustrated those FP-tree-like algorithms performed better than Apriori-like algorithm. However, finding frequent patterns increase the execution time when the database size is large. Javed et al. [8] had proposed a parallel FP-tree mining algorithm (PFP-tree) to solve the problem. Many parallel-distributed methods have been proposed [6,7,9,10,12]. However, when the given threshold is small, or the average length of transaction is long, too much information should be exchanged among processors.

The performance deteriorates notably when the database size increase or the given support decrease.

Grid computing and pervasive computing can solve complex problems with large-scale computation power and data storage resources. Grid is a loosely coupled computing architecture based on internet connection, it shares heterogeneous computation and storage resources instead of traditional cluster system, and it can easily add additional computing resources with lower cost. Knowledge grid is one kind of grid system which will go beyond traditional and improved information retrieval, filtering and mining and question-answering techniques [14]. In order to mine the frequent patterns for large database, it needs large computation resources. A Grid computing can aggregate resources into a large computing power for mining use.

In this paper, a parallel frequent-pattern mining algorithm was proposed to solve frequent pattern mining problem.

Moreover, transaction identification set (Tidset) was used to select transactions directly instead of the whole database. The   * This work is partially supported by National Science Council. (NSC 97-2221-E-216-020 and NSC 97-2622- E-216-002-CC3)    DOI 10.1109/SKG.2008.65     goal of proposed Balanced Tidset Parallel FP-tree (BTP-tree) algorithm is reducing the communication cost and tree insertion cost to decrease the execution time.

In order to verify the performance, we implement BTP- tree, TPFP- tree and PFP-tree on multi-cluster grid system with MPICH library. The results show that BTP- tree has better performance with different sizes of database, different given thresholds, and various number of computing nodes.

Moreover, we also can observe that our algorithm has a better load balance ability on heterogeneous computing environment.

This paper is organized as follows: in Section 2, FP-tree, FP-growth, PFP-tree, and grid computing system are described. The BTP-tree is introduced in Section 3 and Section 4 illustrates our experimental results. Finally, the conclusion and future work are discussed in Section 5.



II. RELATED WORK Firstly, we define the frequent pattern mining problem.

???? = {??1,??2,? ,????} is a set of transactions. Each transaction ???? ? ?? where ?? = {??1, ??2,????? } is a set of all items in database.

??????????(??) denotes the support of itemset ?? in a database ???? is the number of transactions in ????  contains ?? . ??????????(??) = |{??|?? ? ???? ?????? ?? ? ??}|  The frequent pattern mining problem is to find all itemset ?? where ??????????(??) ? ?? for a given threshold (1 ? ?? ? |????|).

A. Frequent Pattern Growth (FP-growth) FP-growth [5] algorithm is proposed by Han et al., the  characteristic of FP-growth is only to scan database twice. It is notable that FP-growth algorithm can be decomposed into two phases: the FP-tree construction and mining frequent patterns from FP-tree.

FP-tree is a data structure representing the necessary information for mining. It consists of a root node labelled as null and child nodes consisting of the item-name, support and node link. Moreover, it only needs to scan database twice.

First of all, it scans database to create frequent 1-itemset and descend sorted in header table. Secondly, it extracts frequent items from ????  (?? = [1???]). Afterward, sort these items then frequent items are inserted to the tree. For tree insertion, increasing the support of the node if the node corresponds to the items name found; otherwise a new node is created and the support is set to 1. The header table keeps node-link that connects nodes with the same items name in FP-tree used in traversal the tree during mining process.

Afterward, FP-growth is used for mining frequent patterns.

It selects an item as mining target from header table. The prefix path can be found by node-link and follow the node to root to get conditional pattern base of item. Then a new FP- tree, conditional FP-tree, constructed from conditional pattern.

Subsequently, recursive this mining process until an empty tree of single path is found. Then another mining target selected from header table to find all frequent item set.

B. Parallel FP-tree algorithm (PFP-tree) The execution time for mining frequent patterns is a  computation intensive job. The computing time increase  significantly when the database size is large or the given support is small. Javed et al. proposed PFP-tree algorithm [8] to decrease the execution time. PFP-tree is developed for SIMD computing environment. PFP-tree is based on FP-tree data structure and divide DB into different partition ??????(?? = 1???, ?? ???? ???????????? ???? ????????????????????). After that, ????  constructs a local header table (LHT) from their own database. Then master computing node (MN) aggregates LHT from slave computing nodes (SN) to create a global header table (GHT).

Consequently, SN creates local FP-tree according to GHT. MN assigns each SN the mining item by block distribution. Finally, each SN exchanges partial FP-tree and using FP-growth mining algorithm to find all frequent patterns.

The main idea of PFP-tree algorithm is that it uses a special tree exchange technique. The technique can reduce the repeated data exchange by grouping the SNs. SNs need to communicate with each other at most ????????  rounds. For example, processor ????  communicate with processor ?????2+???%??  ??  in round ?? where 0 ? ?? ? ?? and 1 ? ?? ? ???????? . However, too many trees are needed to exchange if the given threshold is small. Thus, for the worst case, more processors will lead to the execution time longer, since too many subtrees needed to send, receive and insert back.

C. Grid Computing System Grid computing is a loosely coupled distributed system, and  it can solve complex problem with large-scale computing and storage resources. Middlewares play an important role to integrate heterogeneous computing nodes. Globus Toolkit is a popular open source middleware. There are many categories of grid computing system. Multi-cluster is the most popular type of grid environment. Resources are distributed across difference network on multi-cluster grid. Moreover, each cluster can be a grid site and there is a grid head in each site.

Jobs dispatch to grid head and grid head dispatch the jobs to the computing node inside cluster according to it job scheduling algorithm. The advantage of multi-cluster is the scalability; we regard a cluster as a grid site with a grid head.

Therefore, the administrator issue a certificate to the grid head and permit grid head to manage computing nodes inside the cluster. Moreover, when the cluster size varied, it only requires grid head to manage the setting instead of grid administrator.



III. BALANCED TIDSET PARALLEL FP-TREE (BTP-TREE) Execution time does not decrease linearly when the number  of processors grows in PFP-tree. In the worst case, the execution time increasing when the processors grow. We implement the PFP-tree to observe the execution time of difference stages. Table I shows the execution time of each stage of PFP-tree. Therefore, we observed that the exchange stage dominates others since there are too many subtrees required to insert back when the given threshold is small.

TABLE I EXECUTION TIME FOR DIFFERENCE STAGE  P02 P04 P08 Data Transfer 0.04 0.12 0.04 Header Table 0.59 0.59 0.59 All reduce 0.17 0.17 0.17 FP-tree 12.49 12.40 12.51 Exchange 157.11 233.51 197.02 FP-growth 26.34 31.1 12.59 Total 196.74 277.89 222.92   The main idea of speed-up the mining process is to reduce  the insertion operation in exchange stage. Therefore, we assign item needed to mine after created the header table. The necessary transaction can be exchanged among processors and each processor can create an FP-tree and using FP-growth to mine their own transactions. Six primary stages in this parallel algorithm: (1) create header table and Tidset, (2) evaluate the performance index of computing nodes, (3) distribute mining item set, (4) exchange transactions, (5) creating FP-tree and (6) FP-growth.

Since creating header table require lots of computing time when the database size is large. Moreover, transaction identification set (Tidset) also created in this stage to speed-up the transaction selection for future use. After creating the head table, 1-frequent item set was found. Moreover, these items were also the target mining items in FP-growth.

Since the grid is a heterogeneous computing system, the processor?s capability and memory size are different. Equally partition will increase the makespan and cause some computing nodes idle. In order to balance the workload, we partition the targe mining items according to the performance index (PI) of each processor. For evaluating the PI, we let each processor processes small set of transactions with FP- tree creation procedure. Later, we can obtain the PI of each processor and partition the mining item according to this index.

The next stage is the transaction exchanging stage. Each processor must have all transactions containing the assigned mining items to correctly create the FP-tree and FP-growth.

Only the transactions containing the mining items were needed from other processors. However, scanning local transactions to determine which are required by others is costly. Therefore, each processor needed to scan its local transactions ?? ? 1 times. Hence the Tidset for each processor was created in the header table creation stage. The transaction required by other processor was directly selected by using Tidset instead of scanning all local transactions. Therefore, exchanging transactions was efficient even with many processors.

Finally, after processing the transaction exchanges, each processor ran the FP-tree construction procedures as well as the FP-growth mining processes. The detailed algorithm of the BTP-tree is given below.

Input: a transaction database ???? = {??1,??2, ????? }, and each transaction ???? ? ??, ?? = {??1, ??2, ? , ???? }. A given minimum threshold ??. ?? is the number of processors.

(??1 is master node (MN), and ??2, ??3, ? , ????  are salve nodes (SNs))  Output: a complete set of frequent patterns, where ??????(????) > ??,?????  ???? ????????????????????????????????????.

Method: 1. MN equally divides the database ???? into ?? disjointed  partitions ( ????1,????2, ? ,?????? ?  ????1 ? ????2 ?  ?? ?????? = ????) and assigns ??????  to ???? .

2. Each processor ????  receives the database ?????? and scans the ??????  to create local header table (??????).

3. Each processor creates the local transaction identification set (?????????????? ) of ?????? .

4. Processors perform all-reduce of ??????  to get a global header table (GHT).

5. MN send first 1000 transactions to each processor, after that ????  executes the FP-tree construct procedure and records the execution time as ???? .

6. Let performance index ?????? = 1/???? .

7. MN gathers all performance index and let ?????????????? =  ? ?????? ?? ??=0 .

8. MN sorts items in GHT in descending order according to their support and those items into mining set according to performance index (?????? = ??????  ?????????????? ? ?????????? ???? ???? ) where ????1 ?????2 ? ??  ?????? = ?????????? ???? ??????.

9. MN performs broadcast to distribute mining set  information to all processors. (Fig. 1) 10. In order to create an FP-tree, each processor ????  has to  obtain transaction ??????  on processor ?? (?? = 1 ? ??, ?? ? ??)  such that ?????? ? ?????? ? ? (?? = 1 ? ??????? ?) . Since the mining set ??????  is partitioned statically, each processor knows the mining set of others. Moreover, ??????????????  (?? = 1 ???) helps selecting the transactions directly in the local database. After that, each processor exchanges the transactions required for mining and ???????????? = ??????  ? ????????????????????????????????????????.

11. Each processor ????  performs the FP-tree constructing procedure of ???????????? .

12. Each processor ????  performs the FP-growth procedure to mine the given ??????  from their local FP-tree.

13. MN performs the MPI All-Reduce function to collect the frequent pattern from ????  (?? = 1 ? ??).

Fig. 1. An example of DB partitioning into 4 processors with the given threshold ??

IV.  EXPERIMENTAL RESULTS In order to verify the performance of the proposed  algorithm, the BTP-tree, TPFP-tree[13], and PFP-tree were implemented with Message Passing Library 2 (MPICH2).

TPFP-tree is our previous research on frequent pattern mining that designed for cluster computing environment, moreover TPFP-tree also uses Tidset to choose transactions directly to avoid scanning all transactions. The program executed on a multi-cluster grid system which consists of three Linux based PC clusters and connected via fast ethernet. Table II gives the hardware and software specification. Synthesized dataset generated by IBM Quest Synthetic Data Generator [2] was used to verify the algorithm. There were 1, 53713, 109284, and 234649 frequent patterns with threshold 0.005, 0.0005, 0.0003, and 0.0001 respectively. Therefore, we use the threshold 0.0005, 0.0003, 0.0001 to examine BTP-tree to make sure that the frequent patterns existed. Furthermore, t10.i4.d050k.n100k, t10.i4.d100k.n100k, t20.i4.d050k.n100k, and t20.i4.d100k.n100k were used to verify the performance of BTP-tree.

TABLE II EXECUTION TIME FOR DIFFERENCE STAGE  Cluster 1 Cluster 2 Cluster 3 Number of Nodes  5 5 3  CPU Pentium 4 3.2G AMD XP 2.0G Pentium 4 3.0G Memory 512 MB 1024 MB 1024 MB Software Ubuntu Linux 6.06  Globus Toolkit 4.0 MPICH-G2   In order to construct a heterogeneous computing  environment, for 3 processors, we select one node from each cluster. For 6 and 9 processors, we select 2 and 3 nodes from each cluster. Finally, for 13 processors, we used all processors in Table II.

Fig. 2 and Fig. 3 show the execution time of BTP-tree, TPFP-tree, and PFP-tree with different number of processors with 50k and 100k transactions respectively. From the results of Fig. 2, we can observe that our algorithm (BTP) performed  better than the TPFP and PFP regardless of different number of  processors were assigned. Moreover it can be seen that BTP can reduce about 20% and 58% than TPFP and PFP. Fig.

3 also shows that BTP saved on execution time compared to TPFP and PFP.

Fig. 2. Execution time of different processors (d50k)     Fig. 3. Execution time of different processors (d100k)   Fig. 4 and Fig. 5 illustrate the execution time of various  thresholds with 50k and 100k transactions respectively. It confirmed that BTP can efficiently reduce the execution related to TPFP and PFP. Moreover, we can observe that in a heterogeneous computing environment (3 types of CPU in this case), to balance the workload can reduce the execution time.

Fig. 6 shows BTP could balance the workload to save the execution time. The experimental results show BTP has better balancing capability and it can save about 25% and 66% of execution time relate to TPFP and PFP.

TID Items  1 F C A M B P  2 F C A M B P  3 F C A M B H  4 F C A M B H G  TID Items  1 F C A G O H  2 F C A G O H  3 F C A M K L  4 F A M K L  TID Items  1 F C A G P K L  2 F G P D E  3 F C A M B H  4 F A M H G  TID Items  1 F C A G D E K  2 F C M B P  3 F C A M B H  4 F C M H  F C A M H G B P K L D E O  16 14 13 11 8 7 7 5 4 3 2 2 2  F C A M B P H G          F A G C M P H K L D E B         1 1 2 2 3  F A C G M O K H L           F C M A B H G D E K P        1 1 1 1 2  DB1 DB2 DB3 DB4  TIDSET1 TIDSET2 TIDSET3 TIDSET4  F C A M B P H G  4 4 4 4 4 2 2 1  F A G C M P H K L D E B  4 3 3 2 2 2 2 1 1 1 1 1  F A C G M O K H L  4 4 3 2 2 2 2 2 2  F C M A B H G D E K P  4 4 3 2 2 2 1 1 1 1 1  HT1 HT2 HT3 HT4  GHT  MS1 MS2 MS3 MS4  DB (p = 4, ? = 2)            3 6 9 13  Ti m  e (S  ec .)  Number of processors  Execution time (t20.i4.d050k.n100k, threshold=0.0003)  BTP  TPFP  PFP        3 6 9 13  Ti m  e (S  ec .)  Number of processors  Execution time (t20.i4.d100k.n100k, threshold=0.0003)  BTP  TPFP  PFP          0.0001 0.0003 0.0005  Ti m  e (S  ec .)  Threshold  Execution time (t20.i4.d050k.n100k) with 13 processors  BTP  TPFP  PFP     Fig. 4. Execution time of different threshold (d050k)     Fig. 5. Execution time of different threshold (d100k)     Fig. 6. Execution time of each processor (d050k)   Table III depicts the completion time for dataset t10.i4.d050k.n100k, t10.i4.d100k.n100k, t20.i4.d050k.n100k, and t20.i4.d100k.n100k with threshold 0.0005, 0.0003, and 0.0001. Here we can observe that BTP performs better than TPFP and PFP for all combinations.

TABLE III EXECUTION TIME OF BTP, TPFP, AND PFP  Dataset  Number of processors 3 6 9 13 Threshold: 0.0005  t10.d050k BTP 7.73 5.84 5.68 6.43 TPFP 9.4 6.66 6.16 6.72 PFP 12.04 10.21 8.35 8.2  t10.d100k BTP 15.99 10.95 9.68 9.9 TPFP 20.05 13.14 11.25 10.72 PFP 28.6 22 18 17.31  t20.d050k BTP 38.93 26.03 21 18.27 TPFP 51.4 33.8 28.03 22.54 PFP 66.31 52.99 49.37 44.8  t20.d100k BTP 111.11 65.45 50.42 39.41 TPFP 138.27 90.11 69.67 52.65 PFP 192.61 148.21 129.03 117.32  Threshold: 0.0003  t10.d050k BTP 10.84 7.89 7.11 7.65 TPFP 14.57 9.79 9.14 8.98 PFP 18.59 15.46 12.51 12.65  t10.d100k BTP 25.04 15.02 12.84 12.29 TPFP 32.37 19.5 17.3 14.43 PFP 45.84 33.65 27.09 26.28  t20.d050k BTP 48.34 31.46 24.85 21.43 TPFP 60.92 39.18 32.01 27.1 PFP 79.16 61.19 56.75 51.87  t20.d100k BTP 138.07 82.14 62.18 46.22 TPFP 166.78 107.82 81.81 64.66 PFP 230.14 172.8 149.78 136.69  Threshold: 0.0001  t10.d050k BTP 15.86 11.46 10.32 10.89 TPFP 20.29 13.96 11.92 11.55 PFP 25.7 21 18.03 17.04  t10.d100k BTP 36.05 21.91 19.14 16.86 TPFP 46.49 29.17 23.76 18.9 PFP 62.45 46.17 41.85 38.62  t20.d050k BTP 56.47 35.84 29.5 24 TPFP 68.04 46.88 37.44 31.36 PFP 87.63 69.98 61.77 58.05  t20.d100k BTP 162.18 98.38 72.31 54.47 TPFP 197.38 127.13 96.48 73.8 PFP 258.85 198.49 169.08 153.85

V. CONCLUSIONS Mining frequent patterns from transactional database is an  important problem in data mining research. There are many sequential or parallel methods had been proposed to solve this problem. However, the execution time increases quickly with an increase database size or a decrease in the given threshold.

In this paper, we proposed a Balanced Tidset-based Parallel FP-tree (BTP-tree) algorithm to solve the frequent pattern mining problem. For verifying the performance of BTP-tree, we compared with TPFP- and PFP-tree with MPICH library on multi-cluster grid system. The experimental results show that BTP-tree performed better than TPFP and PFP judged upon either on various number of computing nodes, database sizes or different given thresholds. Moreover, we also observed that BTP-tree has better load balancing capability and reduces computation time.

