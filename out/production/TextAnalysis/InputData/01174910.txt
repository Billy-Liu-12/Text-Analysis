Information Flow Control among Objects: Taking Foreign Objects into  Control

Abstract  This paper proposes a model to control  information flows among objects. It improves flexibility of the control by independently assigning security levels to attributes, arguments, and return values. It uses associations and multiple labels to control information flows among objects that may be dynamically instantiated during program execution.

According to our survey, no model offers the control as precisely as our model does. In addition to controlling objects, the model also controls foreign objects, which are those dynamically retrieved for reuse during program execution. Rules are designed to prevent foreign objects from becoming Trojan horses.

Keywords: Information flow, information flow  control, security   1. Introduction   Quite a few models have been developed for information flow control [1-11, 14, 17, 19-23, 25, 28-32, 34], which prevents information leakage within an application. Approaches to information flow control include discretionary access control (DAC), mandatory access control (MAC) [7-9, 29], and forms other than DAC and MAC [1-5, 20, 25].

DAC fails to avoid Trojan horses [2-4], which motivated the research of MAC. MAC is criticized as too restricted [5]. This causes some researches to provide flexibility to MAC [10-11, 23, 28], and some use a form other than MAC and DAC [1-5, 20, 25].

Recently, many models control information flows in object-oriented or object-based systems [10-11, 19, 21-23, 28, 31-32]. Since objects may be dynamically instantiated during program execution, controlling information flows among objects is difficult. That control, however, is necessary. For example, if a manager and a worker are friends, they can read each  other?s general information, such as address, age, and so on. On the other hand, if they are not friends, the manager can read the worker?s general information but not vice versa. In this example, information flow control between a manager and his worker friend and that control between a manager and a worker who is not his friend are different. According to our survey, no model can precisely control information flows in this example.

Another problem association with information flow control is controlling foreign objects. Here a foreign object is an object not implemented by programmers. For example, objects dynamically retrieved for reuse by a CORBA broker [16] are foreign objects. Although an information flow control model is difficult to apply to the pre-existing foreign objects, the objects should still be controlled.

Otherwise, they may become Trojan horses.

Currently, we cannot identify a model that controls foreign objects.

We designed a model that controls information flows among objects using associations and method limitations. It also controls foreign objects and offers important features such as declassification [1-4, 20], purpose-oriented method invocation [21-22, 31], write access control [4], and so on. This paper describes the control of information flows among objects and foreign objects. Other features will be described elsewhere.

2. Example   This section describes an example used throughout  the paper. Suppose in a company, a worker may be assigned to one or more managers for monitoring purposes. When a manager monitors a worker assigned to him, the manager can read the worker?s general information, hour pay, and work hours. If the manager browses the worker?s information for non-monitoring purpose, the manager can only read     the worker?s general information. If a worker is not assigned to a manager, the manager can only read the worker?s general information. If a worker and a manager are friends, they can read each other?s general information. Periodically, foreign objects are invoked to compute the salaries and taxes of workers.

A worker?s salary is computed using his work hours, hour pay, and a private equation, whereas his tax is computed using his salary and a well-known equation. Here we suppose that a worker?s salary and tax can only be accessed by himself.

worker manager  assigned  not assigned  Legend:  class  relationship  Figure 1. Class relationships for the example  friend  obtain tax  foreign class 2  obtain salary  foreign class 1    manager  self_general_info worker_general_info worker_work_hour worker_hour_pay  get_self_general_info get_others_general_info monitor browse  worker  self_general_info others_general_info hour_pay work_hour salary_equation salary tax  get_info get_self_general_info get_others_general_info compute_salary compute_tax  foreign class 2  worker_salary worker_tax  compute_worker_tax  foreign class 1  worker_hour_pay worker_work_hour worker_salary_eq worker_salary  compute_worker_salary  Figure 2. Class diagram for the example   We use Figure 1 to show the relationships among  the classes worker, manager, and foreign classes. We also model the example in a class diagram shown in Figure 2, in which arrows are invocation relationships. Since the details of the foreign objects may be unknown, we only show the attributes and methods we need. To model this example, an information flow control model should control objects and foreign objects, as described below: 1. Control objects.

As stated in the example, the information flows between a worker and a manager are different in the following cases: (a) when the manager is monitoring the worker, (b) when the manager is not monitoring the worker, and (c) when the worker and the manager are friends. Information flows between managers and workers should be precisely controlled to differentiate the above cases.

2. Control foreign objects.

In the example, we use two foreign classes (in  fact, they may be the same class) to compute worker salary and tax, respectively. Since the details of a foreign class are unknown, improper use of the classes? instances (i.e., objects) may cause them to become Trojan horses. For example, after a worker invokes the instance ?fo1? of ?foreign class 1? to compute his salary, the worker?s work hours, hour pay, and equation may be recorded in ?fo1?. If ?fo1? is not controlled, it may leak the worker?s private information.

3. Association, method limitation, and foreign object control   Our model uses association [13, 18] and method  limitation to control information flows among objects, and uses rules to control foreign objects.

3.1 Association and method limitation   In an object-oriented system, relationships exist  among classes (see Figure 1 for an example). We call a relationship among classes an association. When an object-oriented program is executed, classes can be instantiated to create objects and associations can be instantiated to link objects. For example (see Figure 1), we can instantiate an object ?manager1? from the class ?manager?, an object ?worker1? from the class ?worker?, and an instance of the association ?assigned? to link ?manager1? and ?worker1?.

Objects linked by an association are regarded as coexisting in an association group (AG) according to the association. For example, ?manager1? and ?worker1? just mentioned coexist in an AG according to the association ?assigned?. Note that objects may coexist in more than one AG. For example, a manager and a worker may coexist in the AGs respectively according to ?assigned? and ?friend? (i.e., the worker is assigned to the manager and they are friends).

After grouping objects into AGs, security policies can be defined. In our model, an AG according to an association obeys the policy required by the     association. Nevertheless, using association is not enough. We use two cases below to explain this. In the first case, ?manager1? and ?worker2? coexist in an AG according to the association ?friend?. This allows the worker to invoke the manager?s method ?get_self_general_info? (see Figure 2) to read the manager?s general information. In the second case, ?manager1? and ?worker3? are not friends. This disallows the worker to read the manager?s general information. To make sure that information flows in the above two cases are correctly controlled, method invocation should be limited. Only when a manager and a worker coexist in an AG according to the association ?friend?, the worker can invoke the manager?s method ?get_self_general_info?. We thus attach a method limitation (ML) to each method. A ML is composed of associations. If ?association1? belongs to the ML of the method ?obj1.md1?, ?obj1.md1? can be invoked by the methods of the object ?obj2? if ?obj1? and ?obj2? coexist in an AG according to ?association1?.

With AGs and MLs, we use the following rules to justify whether the method ?obj2.md2? can invoke the method ?obj1.md1?. Here we suppose that the ML of ?obj1.md1? is ?ML1?.

Rule 1: If ?obj1? and ?obj2? do not coexist in any AG,  the invocation is blocked. That is, information flows among objects without any relationship is prohibited.

Rule 2: If ?obj1? and ?obj2? coexists in an AG according to the association ?association1?, then the invocation is allowed if ?association1? belongs to ?ML1?.

Rule 3: If ?obj1? and ?obj2? coexists in more than one AG, the invocation is allowed if one or more of the AGs fulfill the requirement of the previous rule.

To make the third rule clear, we suppose that  ?worker1? is assigned to ?manager1? and they are friends. Then, ?manager1? can invoke the methods of ?worker1? by playing either the role of a monitor or that of a friend. Note that the above rules merely say that ?obj2.md2? can invoke ?obj1.md1?. Regarding the security of the invocation, it is determined by labels described in section 4.

3.2 Foreign object control   Our model cannot change the pre-existing contents  of foreign objects. We thus designed the following rules for foreign object control: Rule 1: Suppress the information flow control  mechanism originally designed for foreign objects.

This rule is obvious because the mechanism originally designed for foreign objects may be incompatible with our model. Suppressing the original mechanism allows us to control the objects using a mechanism that is compatible with our model. We call this rule the ?Suppression rule?.

Rule 2: Let the methods of a foreign object be accessible by every method.

This rule is obvious because we cannot change the contents of foreign objects to add MLs to their methods. We call this rule the ?No ML rule?.

Rule 3: Stick a foreign object to a method after the method invoked the foreign object?s method.

This rule is designed to avoid Trojan horses. We call it the ?Stuck to? rule. We use the example described in section 2 to explain this. Suppose ?foreign class 1? in Figure 2 offers an additional method ?get_info? to read the class?s attributes.

Then, after the method ?compute_salary? of the object ?worker1? invokes the method ?compute_worker_salary? of the foreign object ?fo1? (which is an instance of the class ?foreign class 1?), the attribute of ?fo1? will store the private information of ?worker1?, including ?salary_equation?, ?salary?, and so on. If another method invokes the method ?get_info? of ?fo1?, then the private information of ?worker1? is leaked.

To prevent the leakage, ?fo1? should be stuck to the method ?compute_salary? of the object ?worker1?. After that, methods of ?fo1? can only be invoked by the method ?compute_salary? of the object ?worker1?.

Note that we let a foreign object to be stuck to a method instead of stuck to the object owing the method. This is to preventing information leakage within an object. We use an example to explain this.

Suppose the class ?worker? offers a method ?get_work_hour? to read his work hours. Also suppose that the method cannot access other information of the worker. In the example mentioned in the previous paragraph, if we let the foreign object ?fo1? to be stuck to the object ?worker1? instead of stuck to the method ?compute_salary? of the object ?worker1?, then the method ?get_work_hour? can invoke the method ?get_info? of ?fo1? to obtain the private information of ?worker1?. This again makes the foreign object a Trojan horse.

4. Model   Our model associates variables with labels for  information flow control. A variable may associate with multiple labels, in which each enforces the     security policy of an association.

4.1 Label   A label is composed of an ASSOCIATION and a  RACL (read access control list). The ASSOCIATION component indicates the association whose security policy is enforced by the label. The RACL records the methods that are allowed to read the variable.

Definition 1: A label of a variable ?var1?, namely  ?lblvar1?, is defined below: lblvar1 = (ASSOCIATIONvar1, RACLvar1), in which ASSOCIATIONvar1 is the association whose  security policy is enforced by the label ?lblvar1?, RACLvar1 = {md | ?md? is a method that is allowed  to read ?var1?},  The following reserved words with special meanings can be used for a label: 1. The word ?WORLD? represents a set containing  everything such as every method, every AG, and so on.

2. The word ?NONE? represents an empty set.

3. The word ?XCARE? means don?t care.

We use Example 1 to explain labels, which declares  the classes ?worker? and ?manager? described in section 2. A label is quoted by a pair of braces, and components in a label are separated by semicolon.

The following attribute declaration shows label examples:   String self_general_info {assigned; worker.get_info, worker.get_self_general_info, manager.monitor, manager.browse}, {not_assigned; worker.get_self_general_info, manager.browse}, {friend; worker.get_self_general_info, manager.get_others_general_info};  The string-typed attribute ?self_general_info? is associated with three labels, which respectively enforce the policies of the associations ?assigned?, ?not_assigned?, and ?friend?. The label for the association ?assigned? states that the RACL is ?{worker.get_info, worker.get_self_general_info, manager.monitor, manager.browse}?, in which the notation ?worker.get_info? corresponds to the method ?get_info? of the worker class?s instances.

Example 1. The classes ?worker? and ?manager? class worker { attributes {  String self_general_info {assigned; worker.get_info, worker.get_self_general_info, manager.monitor, manager.browse}, {not_assigned; worker.get_self_general_info, manager.browse}, {friend; worker.get_self_general_info, manager.get_others_general_info}; String others_general_info {friend; worker.get_others_general_info}; Float hour_pay {assigned; worker.get_info, manager.monitor}, {obtain_salary; worker.compute_salary, STUB: stub1}; Float work_hour {assigned; worker.get_info, manager.monitor}, {obtain_salary; worker.compute_salary, STUB: stub1}; String salary_equation {obtain_salary; worker.compute_salary, STUB:stub1}; Float salary {obtain_salary; worker.compute_salary, STUB: stub1}, {obtain_tax; worker.compute_tax, STUB: stub2}; Float tax {obtain_tax; worker.compute_tax, STUB: stub2}; } /* end of attributes */ stubs { stub1: {fo1, fmd1, qry1}; stub2: {fo2, fmd2, qry2}; } methods { get_info{assigned}(String, g_info, Float w_hour, Float h_pay) { /* the ML of this method is {assigned} */  g_info := self_general_info; w_hour := work_hour; h_pay := hour_pay;  } get_self_general_info{assigned, friend}  (String g_info) { g_info := self_general_info; } get_others_general_info{friend}  (manager manager_a) { manager_a.get_self_info(others_general_info); } compute_salary {obtain_salary} (foreign_object fo1) { fo1.fmd1(Float work_hour, Float hour_pay, String salary_equation, Float salary); } compute_tax {obtain_tax} (foreign_object fo2) { fo2.fmd2(Float salary, Float tax); }  } /* end of methods */ } /* end of class ?worker? */     class manager { attributes { String self_general_info {friend;  worker.get_others_general_info, manager.get_self_general_info}; String worker_general_info {assigned; manager.monitor, manager.browse}, {not_assigned; manager.browse}, {friend; manager.get_others_general_info}; Float worker_work_hour {assigned; manager.monitor}; Float worker_hour_pay {assigned; manager.monitor}; } methods: monitor {assigned} (worker worker_a) { worker_a.get_info(worker_general_info, worker_work_hour, worker_hour_pay); } browse {assigned, not_assigned} (worker worker_a){ worker_a.get_others_general_info(worker_general_info); }  get_self_general_info{friend}(String g_info) { g_info := self_general_info; } get_others_general_info{friend}(worker worker_a) { worker_a.get_self_info(worker_general_info); }  } /* end of methods */ } /* end of class ?manager? */   As we have described, labels are attached to variable. In practice, literals should also be labeled.

Generally, a literal can be read by everyone and the association will not affect a literal?s label. Therefore, a literal is implicitly labeled ?{XCARE; WORLD}?.

4.2 Join   The join operator ? ? ? records the derivation  history of a variable?s data. Therefore, it prevents Trojan horses. If the value of ?var3? is derived from the variables ?var1? and ?var2?, ?var3? should be attached with a label derived from joining the labels of ?var1? and ?var2?.

Definition 2: The join of the label ?lbl1? and ?lbl2?,  which are respectively ?{ASSOCIATIONlbl1; RACLlbl1}? and ?{ASSOCIATIONlbl2; RACLlbl2}?, is defined below:  lbl1 ?  lbl2 = {ASSOCIATIONlbl1; RACLlbl1 ?  RACLlbl2}    Note that ?ASSOCIATIONlbl? and ?ASSOCIATIONlbl2? should be the same. Otherwise, ?lbl1? and ?lbl2? are considered incomparable.

The join operation trusts less readers (or at most the same set of readers). Therefore, it will not lower down security level. If a variable have multiple labels, the join operation operated on the labels determined by AGs. For example, if ?worker1? is assigned to ?manager1?, then labels with the association ?assigned? will be used to control the information flows between the worker and the manager.

4.3 Foreign object control mechanism   Since foreign objects are reused dynamically, we  cannot change the internal of the objects. What we can do is to prevent the objects from becoming Trojan horses. The control mechanism is based on the rules described in section 3.2, which dynamically monitor foreign objects during program execution. In a program that invokes methods of foreign objects, stubs are used. The stubs then guide the control mechanism to control foreign objects. We use Example 1 to explain this.

In Example 1, two stubs are declared in the class ?worker?, in which ?stub1? is for computing a worker?s salary according to the worker?s work hours, hour pay, and salary equation, and ?stub2? for computing a worker?s tax according to the worker?s salary. Since we cannot expect what foreign object method will be retrieved, virtual foreign object identity and virtual method name are used in a stub.

For example, the stub ?stub1? is declared as ?{fo1, fmd1, qry1}?, in which ?fo1? is the virtual identity of the foreign object, ?fmd1? is the virtual name of the method, and ?qry1? is a query to retrieve foreign object method. When using the stub, the virtual object identity and virtual method name are used. For example, the method ?compute_salary? of the class ?worker? invokes ?stub1? to compute a worker?s salary using the following statement:  fo1.fmd1(Float work_hour, Float hour_pay, String salary_equation, Float salary);  After a foreign object method is retrieved according to ?qry1? of ?stub1?, ?fo1? and ?fmd1? will be replaced by the reused foreign object and method.

Note that the format of a query and how the query is processed are out of the scope of this paper.

4.4 Secure information flow   To ensure that the information flows related to  foreign objects are secure, the objects should be dynamically monitored using the rules mentioned in     section 3.2. A runtime mechanism is used to enforce the rules. This section described secure information flows among non-foreign objects.

In an object-oriented system, information may flow within an object or among objects. Both kinds of flows should be secure. To ensure that information flows within an object is secure, information flow in the statement ?derived_var := expression_of(var1, var2, . . ., varn);? is considered secured if the following secure flow condition is true (suppose the statement appears in the method ?mdx? and ?mdx? is invoked by ?mdy?).

Secure flow condition:  (RACLderived_var ? RACLvar1) ? (RACLderived_var ? RACLvar2) ? ... ? (RACLderived_var ? RACLvarn) ?  ({mdx, mdy} ?RACLvar1) ?  ({mdx, mdy} ? RACLvar2) ? ... ?  ({mdx, mdy} ? RACLvarn)   Here we suppose the original label of the variable ?derived_var? is ?{ASSOCIATIONderived_var; RACLderived_var}? and the label of the ith variable to derive ?derived_var? is ?{ASSOCIATIONvari; RACLvari}?.

The conditions ?RACLderived_var ? RACLvar1?, ?RACLderived_var ? RACLvar2?, ?RACLderived_var ? RACLvarn?, and so on in the condition require that ?derived_var? must be more restricted then or the same restricted as ?var1?, ?var2?, ?varn?, and so on. The conditions ?{mdx, mdy} ? RACLvar1?, ?{mdx, mdy} ? RACLvar2?, ?{mdx, mdy} ? RACLvarn?, and so on are needed because the variables to derive ?derived_var? are directly read by ?mdx? and indirectly read by ?mdy?.

After the value of the variable ?derived_var? is derived, its label becomes ?lbl1 ?  lbl2 ?  . . .

?  lbln?, in which ?lbl1?, ?lbl2?, and ?lbln? are the labels of ?var1?, ?var2?, and ?varn?, respectively.

In addition to ensuring the security of information flows within an object, we should also ensure the security of information flows among objects. We use examples to explain this. Suppose the method ?md1? invokes the method ?md2? by passing the arguments ?arg1, arg2, . . ., argn?, and ?md2? provides the parameters ?par1, par2, . . ., parn?. Then, to ensure the invocation is secure, the following operations are taken in sequence. (Note that we differentiate parameters defined in a method from arguments passed to the method. See [15] to find definitions of parameters and arguments.) 1. Label ?pari? as ?{ASSOCIATIONargi; RACLargi}?,  in which ?argi? is the ith argument passed to ?md2?, ?pari? is the ith parameter of ?md2?, and the label  of ?argi? is ?{ASSOCIATIONargi; RACLargi}?. This operation copies labels of arguments to parameters.

This copying is safe because information flow security will be checked within the method invoked.

2. Within the method, if ?pari? and other variables are used to derive the value of another variable, labels with the association ?ASSOCIATIONargi? should be used for label comparison. The derivation is considered secure only when the label comparison causes the secure flow condition true.

3. If the invoked method uses a ?return? statement to return a value, the label of the variable being returned should be checked against the variable that receives the return value. Here the labels with the same association should be used, and the secure flow condition should be true.

We use Example 1 to explain the above operations.

Suppose ?worker1? is assigned to ?manager1?. When the manager?s method ?browse? invokes the worker?s method ?get_info? using the manager?s attributes ?worker_general_info?, ?worker_work_hour?, and ?worker_hour_pay? as arguments, the parameters ?g_info?, ?w_hour?, and ?h_pay? of the worker?s method ?get_info? will respectively be labeled ?{assigned; manager.monitor, manager.browse}?, ?{assigned; manager.monitor}?, and ?{assigned; manager.monitor}?. Note that the labels with the association ?assigned? are used here because the worker is assigned to the manager. With the labels, the statements ?w_hour := work_hour;? and ?h_pay := hour_pay;? within the worker?s method ?get_info? cannot be executed (and hence the invocation is not secure). The rationale is that the labels of ?w_hour? and ?h_pay? fail to fulfill the secure flow condition (i.e., ?manager.browse? is not in the RACL of the worker?s attributes ?work_hour? and ?hour_pay?).

5. Security checker   To check whether the information flow in the statement ?des := computation_of(var1, var2, . . ., varn);? is secure, the following algorithm is used.

Here we suppose that the computation appears in the method ?md1? of the object ?obj1?, and ?md1? is invoked by the method ?md2? of the object ?obj2?.

We also let the set ?src? represent the set ?{var1, var2, . . ., varn}?.

Algorithm 1: variables: AGS: the set of AGs in which obj1 and obj2 coexist;     ASSOAGS: the set of association extracted from AGS; MLmd1: the ML of md1; EFF_ASSO: effective associations, which are those allowed to invoke md1; EFF_VAR_ASSO: common effective associations of the variables in the computation; ASSO_SRCVARi : the set of associations extracted from the labels of the ith variable in src; ASSO_DES: the set of associations extracted from the labels of des; asso: an association; VARS: a set of variable; LBLS: a set of labels; algorithm: if AGS is empty then the information flow is not secure, exit algorithm; end if; EFF_ASSO := ASSOAGS ? MLmd1; if EFF_ASSO is empty then /* md1 is not allowed to invoke under the associations */ the information flow is not secure, exit algorithm; end if; EFF_VAR_ASSO := EFF_ASSO ? ( ? i ASSO_SRCVARi) ?  ASSO_DES; if EFF_VAR_ASSO is empty then /* no common association exists among variables in the computation */ the information flow is not secure, exit algorithm; end if; VARS := {des} ?  src; for each association asso in EFF_VAR_ASSO do LBLS := {lbl | lbl is the label of an element in VARS whose association is asso}; if applying LBLS to the computation causes the secure condition true then the information flow is secure, exit algorithm; end if; end for; the information flow in not secure, exit algorithm;   The algorithm first checks whether ?obj1? and ?obj2? coexist in an AG. If the check fails, the statement cannot be executed. If they coexist in one or more AGs, the algorithm checks whether the method ?md1? can be invoked under the associations of the AGs the objects coexist (by comparing the associations in the AGs with the ML of ?md1?). If no association in the AGs is allowed to invoke the method, the statement cannot be executed. If one or more associations are allowed to invoke the method, the algorithm identifies the common associations of the variables involved in the statement. If no common association is identified, labels of the statement are incomparable and the statement cannot  be executed. If one or more common associations among the variables are identified, labels with any common association can be selected to check information flow security. If a common association causes the secure flow condition true, the information flow is considered secure. This consideration is reasonable. For example, if a worker is assigned to a manager and they are friends, the manager can play the role of either a manager or a friend to invoke the worker?s methods.

6. Case study   The example described in section 2 is revisited here.

We use the proposed model to label the application.

The labeling result is shown in Example 1. We simplify the example by hiding the possibly complicated structure of an attribute. For example, the attributes ?general_info? of the object ?worker? may be as complicated as a C structure. Let?s trace Example 1 to prove that the information flow control requirements described in section 2 are fulfilled.

Requirement 1: When a manager monitors a worker  assigned to him, the manager can read the worker?s general information, hour pay, and work hours.

This requirement is accomplished by the manager?s method ?monitor? and the labels with the association ?assigned?. To get the information of a worker, the manager?s method ?monitor? invokes the worker?s method ?get_info? using the manager?s attributes ?worker_general_info?, ?worker_work_hour?, and ?worker_hour_pay? as arguments. Comparing the label of ?worker_general_info? with that of the worker?s attribute ?self_general_info?, the secure flow condition mentioned in section 4.4 is true (note that the labels with the association ?assigned? are used here). Therefore, the statement ?g_info := self_general_info;? within the worker?s method ?get_info? can be executed. Moreover, the statements ?w_hour := work_hour;? and ?h_pay := hour_pay;? within ?get_info? can be executed after a similar comparison.

Requirement 2. If a manager browses the information of a worker assigned to him, the manager can only read the worker?s general information.

This requirement is accomplished by the method ?browse? of the object ?manager? and the labels with the association ?assigned?. To get the general information of a worker assigned to a manage, the method ?browse? invokes the worker?s method ?get_self_general_info? using the manager?s attribute ?others_general_info? as an argument.

The statement ?g_info := self_general_info;? within the worker?s method ?get_self_general_info? can be executed after comparing labels. Note that the manager?s method ?browse? cannot read the worker?s ?work_hour? and ?hour_pay?. The rationale is described in the last paragraph of section 4.4.

Requirement 3. If a worker is not assigned to a manager, the manager can only read the worker?s general information.

This requirement is accomplished by the method ?browse? of the object ?manager? and the labels with the association ?not_assigned?. To get the general information of a worker not assigned to a manager, the method ?browse? invokes the worker?s method ?get_self_general_info? using the manager?s attribute ?others_general_info? as an argument. The statement ?g_info := self_general_info;? within the worker?s method ?get_self_general_info? can be executed after comparing labels.

Requirement 4. If a worker and a manager are friends, they can read each other?s general information.

This requirement is achieved by the labels with the association ?friend?. For example, a worker can read his manager friend?s general information through the worker?s method ?get_others_general_info?, which invokes the manager?s ?get_self_general_info? using the worker?s attribute ?others_general_info? as an argument. After comparing the label of the worker?s attribute ?others_general_info? and the manager?s attribute ?self_general_info?, one can see that the secure flow condition is true. The statement ?g_info := self_general_info;? within the manager?s method ?get_self_general_info;? can be executed.

Requirement 5: Periodically, the company invokes foreign objects to compute the salaries and taxes of workers.

This requirement is fulfilled by the stubs ?stub1? and stub2? in Example 1. Please refer to the description in section 4.3. Moreover, the three rules mentioned in section 3.2 prevent the foreign objects from becoming Trojan horses.

7. Evaluation   We implemented a prototype system to evaluate the  model. The system uses reusable software repository to simulate foreign object control. Moreover, it uses the language shown in Example 1 to write programs.

A program written in the language is first  pre-processed to produce a program without labels and MLs. The program produced by the preprocessor is conceptually composed of two parts. One is the program before labeling and the other a security monitor. The latter checks information flows of the former using Algorithm 1 during program execution.

Currently, the security monitor checks security dynamically, which contradicts the proposal of static checking [1, 12, 24]. Nevertheless, dynamic checking cannot be totally avoided because objects and AGs may be dynamically instantiated or removed during program execution.

To evaluate the model, we used the example described in section 2 as an assignment to students of different grades and experiences. The students are required to develop a program, namely program a, without the proposed model embedded and another program, namely program b, with the model embedded. We then collected and averaged the following metrics data: 1) LOC (lines of code) of programs a and b, 2) execution time of programs a and b, and 3) numbers of non-secure statements found in program b. The collected data showed that the averaged LOC and execution time of program b are respectively 3.2 and 3.8 times those of program a.

Nevertheless, the data also showed that 2.3 non-secure information flows (per 100 LOC) in average are identified from program b. Although the runtime overhead seems high, we still think that the model is valuable because of the ability to identify non-secure statements. Nevertheless, reducing the overhead should be an important future work.

8. Related work   The simplest information flow control approach is  DAC. Since DAC fails to avoid Trojan horses, the multilevel security approach was proposed [6-9, 26].

The approach is generally categorized as MAC.

MAC was criticized as too restricted [5]. To loosen the restriction, quite a few approaches have been proposed. Below we survey some researches.

The model proposed in [23] controls the information flows in object-oriented systems. It uses ACL of objects to compute the ACL of executions. A message filter is used to filter out possibly non-secure information flows. Since the computation of an execution?s ACL takes information propagation into consideration, no Trojan horses will result.

Moreover, interactions among executions are categorized into five modes including synchronized unrestricted, synchronous restricted, asynchronous, deferred reply unrestricted, and deferred reply restricted. Different modes result in different ACLs,     which loosens the restriction of MAC. More flexibility is added to the model by allowing exceptions during or after method execution [10-11].

The purpose-oriented model [21-22, 31] proposes that invoking a method may be allowed for some methods but disallowed for other methods, even when the invokers belong to the same object. This consideration is correct, because the security levels of methods in an object may be different [32].

Different methods can thus access information in different security levels.

The decentralized label approach [1-4] marks the security levels of variables using labels. A label is composed of one or more policies, which should be simultaneously obeyed. A policy in a label is composed of an owner and zero or more readers that are allowed to access the data. When computation are applied to data, join operation is used to compute the label of the result data. This avoids Trojan horses.

Another feature proposed by this approach is that declassification (downgrading of security level) is provided. This allows non-sensitive data, which are in high security level, to be accessed by low security level processes. The model also takes write access control into consideration [4]. Currently, the model has been used to develop a programming language Jflow [1]. In addition, the model has been used in a distributed system with untrusted hosts through secure program partitioning [30].

Role-based access control models [19, 27, 33] define the roles a subject can play. A role is a collection of permissions (i.e., access rights) [27].

When a subject plays a role, it possesses the rights belonging to the role. A subject can play multiple roles and even change role during a session [27].

Inheritance and other relationships can be established among roles [27, 33] to structure them. Moreover, constraints, such as two specific roles should be mutually exclusive, can be attached to roles. The advantage of role-based access control is that subjects can change roles dynamically, which facilitates obeying the ?need-to-know? principle. It seems that the role-based models operate well in an application that protects not too many resources, because roles should be defined before the application?s execution. In case that many resources should be protected (such as every variable in a program should be protected), defining roles becomes tedious and the access control may become imprecise.

From the survey, we identified many necessary features for controlling information flows in object-oriented systems such as Trojan horse prevention, declassification, purpose-oriented  method invocation, and so on. In fact, our model offers those features, although we do not present them in this paper. What we present in this paper are the control of information flows among objects and foreign objects. According to our survey, no model offers the control well.

9. Conclusions   This paper proposes a model to control information  flows among objects. The model uses associations and method limitations (ML) to control information flows among objects. Information flows are controlled by attaching labels to variables. Trojan horses are avoided by join operations. Within an application, every variable and literal is associated with one or more labels. If a variable is associated with multiple labels, each label enforces the security policy of an association. To check the security of an information flow, labels are compared. An information flow is secure if the comparison causes the secure flow condition true.

In addition to controlling objects developed by programmers, the model also controls foreign objects, which are pre-existing objects for reused. Since the details of a foreign object are unknown, our model only prevents foreign objects from becoming Trojan horses. We use the ?Suppression rule?, ?No ML rule?, and ?Stuck to rules? to control foreign objects.

We implemented a prototype system to evaluate the model. From the data collected, we found that the model does facilitate identifying non-secure information flows. We thus believe that the model is useful in spite of runtime overhead.

Acknowledgement   This research is sponsored by the National Science  Council in Taiwan under Grant NSC91-2213-E-259-006.

