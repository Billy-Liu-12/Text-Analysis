Software Cost Estimation using Fuzzy Decision Trees

Abstract? This paper addresses the issue of software cost estimation through fuzzy decision trees, aiming at acquiring accurate and reliable effort estimates for project resource allocation and control. Two algorithms, namely CHAID and CART, are applied on empirical software cost data recorded in the ISBSG repository. Approximately 1000 project data records are selected for analysis and experimentation, with fuzzy decision trees instances being generated and evaluated based on prediction accuracy. The set of association rules extracted is used for providing mean effort value ranges. The experimental results suggest that the proposed approach may provide accurate cost predictions in terms of effort. In addition, there is strong evidence that the fuzzy transformation of cost drivers contribute to enhancing the estimation process.

Keywords- Cost estimation, fuzzy decsion trees, association rules

I. INTRODUCTION Effort estimation is considered as a promising method for  approaching the issue of reliable software cost estimation [12].

The dynamic nature of the software development process often hinders robust effort estimates, while the process remains highly prone to human errors and biases [15]. The continuously evolving software development environment relates to the rapid change of technologies used, tasks performed, people involved, unique internal social networks and environment of each organization, as well as specifications and conditions of the systems under production. These result in major volatility regarding a software project?s progress, productivity rates, resource allocation, schedules and costs.

In this work, we approximate the issue of software cost estimation by classifying information describing a plethora of past projects, deriving association rules for cost drivers associated with effort; these rules are then used to successfully predict the actual development effort. To this end, a large publicly available database is used containing empirical samples of past project data, namely the ISBSG Rel. 9 [7]. The main assumption is that historical data of completed projects can be representative of real world values and can be used for predicting software development effort of current or future projects. More specifically, we attempt to build an automated fuzzy software cost estimation model combining fuzzy logic theory [10] and decision trees [8]. Particularly, we apply the Chi-squared Automatic Interaction Detection (CHAID) [6] and  Classification and Regression Trees (CART) [3] algorithms for deriving a finite set of association rules. Our proposition indicates that we can device instances of Fuzzy Decision Trees (FDT) that yield robust rules, which can then be used for estimating effort values. Finally, once the automated tool is validated and relatively accurate and reliable software cost estimates are obtained, then this tool may be used for assisting the development of optimized software estimators in an increasingly competitive and complex environment.

The rest of the paper is organized as follows: In the following section we briefly mention customary techniques used in software cost estimation and discuss the recent emergence of fuzzy methods. In the third section, we describe the proposed approach of FDT using specific pre-processed cost attributes, while in the fourth section we describe the experiments conducted and the results obtained. Finally, in the last section, we present our conclusions along with some suggestions for improving our approach and future research steps.



II. BRIEF LITERATURE REVIEW Over the last fifteen years software cost estimation research  has shown a growing interest in the use of combinations of statistical prediction and machine learning techniques as these were proved able to detect composite relationships. Classic approaches like algorithmic models [14, 2] involve analytical or statistical equations relating the software project costs to a number of input parameters called cost drivers. Usually, machine learning models utilize neural networks [1, 5, 13], fuzzy logic [1, 17] and evolutionary algorithms [4, 9] for performing improved software cost estimations.

Moreover, research studies propose various data mining techniques to extract knowledge and produce useful rules.

Particularly [11] utilizes classification trees combined with regression-based models applied on historical datasets (COCOMO and Kemerer) to obtain software cost estimates. In addition, techniques using notions of fuzzy logic have gained much interest among researchers and were soon adopted into models to act as universal approximators. In fact, an effort to embed risk assessment into a fuzzy decision tree approach for software cost estimation [16] showed that such structures (even if they are hard to interpret) can be better depicted and explained if fuzzification of the values is applied. The fuzzification empowered the characteristics of FDTs offering     them significant advantages compared to other machine learning techniques regarding their ability to produce accurate predictive tools and extract self-descriptive rules in a way that is easier to interpret by humans.



III. THE FUZZY DECISION TREE (FDT) APPROACH The proposed approach attempts to provide a tool for  automatic software cost estimation by generating Fuzzy Decision Tree (FDT) instances that produce  association rules having the following scope: (i) classify project data and provide conditional probabilities, (ii) promote significant cost drivers from a wide pool of characteristics, (iii) enhance two common decision tree algorithms, namely CHAID and CART, (iv) search for interesting relationships holding among cost attributes and provide insights into the influence degrees, and finally, (v) extract useful rules. The novelty lies within the attempt to determine a plausible way to derive a hierarchy of significant attributes and also provide an insight of the most noteworthy association rules holding in the dataset. The basic steps of the approach are presented in the subsequent sections.

A. 7Description of Cost Drivers The ISBSG dataset [7] used in the experiments consists of  various software project cost records coming from a broad cross section of the industry and range in size, effort, platform, language and development technique data. It contains 92 variables from which a reduced number of project attributes was selected, as these are described in Table I.

The attributes were initially used in their pure form but they were considered difficult to manipulate as they contained highly heterogeneous, dispersed, or even biased samples., Close examination of the probability distribution of each cost driver on the corresponding histograms confirmed that an ordinal representation of each variable by a trapezoidal membership function may be generated and exploited thus transforming actual numerical values to their fuzzy counterparts. Therefore, the numerical values of the attributes whose values ranges were relatively large (i.e. of the order of thousands) were separated into five ordinal intervals of equal size, whereas those that had small value ranges (i.e. of the order of hundreds) were separated into three ordinal intervals of equal size.

TABLE I. SOFTWARE COST DRIVERS DESCRIPTION  ABBR. NAME DESCRIPTION EFF Full Cycle Work Effort Total effort (in hours) recorded against the project.

AFP Adjusted Function Points Functional size of the project at the final count.

PET Project Elapsed Time Total elapsed time for the project (in calendar months).

PDRU Project PDR ufp Project delivery rate (in hours per function point) equals to the quotient of effort and functional size.

PIT Project Inactive Time The number of calendar months in which no activity occurred.

ATS Average Team Size The average number of people that worked on the project.

B. Creating the FDT The FDT structure built contained flow-chart-like nodes,  with the top-most node called the root, the terminal nodes called leaves, the internal nodes representing attributes and each branch representing an outcome of the test performed on the cost attribute. The FDTs formed the basis to discover interrelations among vital project variables and attempted to predict the dependent variable (Effort - EFF), which is placed at the root of the tree (as shown in the example of Fig. 1). By applying various criteria the project data is split into groups and with the greedy local search method the optimal FDT structures are iteratively identified until the algorithm stops.

The FDT structure is interpreted by rules from the root node to the terminal node of the form: ?If (condition 1 and condition 2 and ? condition N) then Z?, where the conditions are extracted from the nodes and Z is the root. Additionally, the FDT yields probability degrees which can be used to evaluate the appropriateness of the structure according to the problem being modeled. The degree of confidence and significance are used as evaluation metrics to indicate the probability of correct classification. A new project can be classified by starting at the root node of the FDT and sliding down selecting a branch based on the project?s attribute values and until a terminal node is reached. At the terminal node the effort is calculated by using the rules extracted and the mean effort value of the ranges associated with the linguistic value in the inference part of the rule.

Figure 1. An example of a FDT and a rule extracted

IV. EXPERIMENTS AND RESULTS In this section the experiments conducted and results  obtained are presented. Firstly, we created trees with the raw data and extracted the splitting sets of ranges for each attribute (classes identified by the trees). Then, we used the pre- processed data (i.e., after normalization and transformation into ordinal values according to the ranges) to create FDTs, from which we extracted a hierarchy of the significant project attributes. The FDTs constructed with SPSS v.15.0 were tested with both algorithms CHAID and CART, for which the optimal parameter settings were found in empirically manner: the minimum number of cases per node was set to 2. For CHAID, the significance level value was set to 0.05 and the chi-squared test statistic used was the Pearson. For CART, the minimum change in improvement was set to 0.0001 and both Twoing and Gini splitting methods were tested. According to the results obtained by both algorithms, the FDTs managed to locate the most significant project attributes, that is, those factors that seemed to influence more the value of the work effort attribute, among the thirteen attributes under investigation. These appeared in tree level and hence significance descending order as follows: first AFP, then PET, followed by PDRU, ID, DT and LT, and last PIT and PPL. We also observed that the projects were classified in each node according to distinct classes of intervals, meaning five distinct ranges for AFP and three for the rest of the attributes, thus confirming our value ranges used for the fuzzification.

Secondly, in the rest of the experiments we used only the ordinal attributes (see Table I) excluding all categorical attributes. The hypothesis was that the ordinal attributes are more qualified for producing cost estimates and represent measurable data values. The reduced dataset was randomly separated into training and testing subsets, the former for constructing the trees and the latter for evaluating cost estimation ability by validating the rules extracted and providing an initial mean effort value prediction based on the intervals.

Table II lists indicative significant rules in terms of degree of confidence (marked as CONF.). Each rule was evaluated according to this degree, the number of times it appeared in each experiment and whether it appeared in the results of both algorithms or not. The threshold for selecting the best rules was set to CONF. > 50%. Thus, the output of this process was actually a condensed set of common (best) rules based on which a mean effort estimation was obtained. The rules were evaluated with the testing subset and performance was assessed with the Mean Relative Error (MRE), the Normalized Root Mean Squared Error (NRMSE) and the Correlation Coefficient (CC) metrics.

TABLE II. INDICATIVE RULES OBTAINED FROM FDTS  IF-RULE THEN CONF.

(AFP = "LOW" or "MEDIUM" or "VERY HIGH"  or "HIGH")  and  (PET = "" or "MEDIUM" or "HIGH")  EFF = 'VERY HIGH'  79%  (AFP = "VERY LOW")  and  (PDRU = "LOW" ) and  (PET = "MEDIUM" or "HIGH" )  EFF = 'HIGH' 66%  (AFP = "VERY LOW" ) AND (PET = "MEDIUM" or "HIGH")  EFF = 'HIGH' 66%  The three different validation cost driver schemes that we used consisted of different attributes. In the first scheme the five most significant attributes, i.e. those that were placed at the top-most levels of the FDT,were taken into consideration and yielded MRE=0.13, NRMSE=1.04 and CC=0.53. The second scheme included four out of five most significant attributes (i.e.

AFP, PET, PIT and ATS) and yielded MRE=0.11, NRMSE=0.87 and CC=0.65 which is the most optimal prediction obtained. The third scheme included three out of the five most significant attributes and particularly those attributes that are available and can be measured from the early stages of the project development (i.e. AFP, PDRU and ATS) and yielded MRE=0.17, NRMSE=1.32 and CC=0.45. The effort estimations obtained may be considered quite successful with MRE and NRMSE being confined to quite low levels and the ?early available attributes? scheme, which may be considered more valuable in practice, exhibiting small performance accuracy decrease.



V. 4CONCLUSIONS This work attempted to propose the use of automatic  generation and evaluation of decision trees instances enhanced with fuzzy logic for software cost estimation. The approach of Fuzzy Decision Trees (FDT) extracts sets of association rules to express relationships located among project attributes under investigation and effort. These relationships are stated in a comprehensible manner using gradual linguistic terms that are easier to grasp by project managers. The simple structure of decision trees is enhanced from capable classifiers to automatic generators of sets of rules. Finally, the approach provides a hierarchy of the important project attributes grouped into three validation schemes and used to obtain preliminary effort predictions.

The experiments conducted showed that sufficiently accurate cost predictions, close to the actual development costs, can be achieved. The rules extracted promote the linguistic representation of the attributes? associations and provide added value to the whole estimation process with optimized accuracy in relation to other approaches. The results indicated the applicability of the approach and suggested that the generation FDT may be conceived as a fairly good solution in classifying projects and extracting rules describing the nature of the software development environment. Future work will utilize these rules into other structures or software cost models.

Additional investigation will include comparison of other classification algorithms and further improvement on the structure and on the algorithms employed in the experiments.



VI. 5REFERENCES [1] A. Idri, T. M. Khoshgoftaar, and A. Abran, ?Can Neural Networks be  Easily Interpreted in Software Cost Estimation??, Proceedings of the 2002 IEEE World Congress on Computational Intelligence, IEEE Computer Press, Washington D.C., 2002, pp. 1162-1167.

[2] B. W. Boehm, C. Abts, and S. Chulani, ?Software Development Cost Estimation Approaches ? A Survey?, Annals of Software Engineering, Vol. 10, No. 1, Springer, Netherlands, 2000, pp. 177-205.

[3] Breiman, L., J. Friedman, R. Oshlen, and C. Stone, Classification and Regression Trees, Wadsworth International Group, 1984.

[4] C. J. Burgess, and M. Leftley, ?Can Geneic Programming Improve Software Effort Estimation? A Comparative Evaluation?, Information and Software Technology, Vol. 43, No. 14, Elsevier, Amsterdam, 2001, pp. 863-873.

[5] E. S. Jun, and J. K. Lee, ?Quasi-optimal Case-selective Neural Network Model for Software Effort Estimation?, Expert Systems with Applications, Vol. 21, No. 1, Elsevier, New York, 2001, pp. 1-14.

[6] G. V. Kass, ?An Exploratory Technique for Investigating Large Quantities of Categorical Data?, Applied Statistics, Vol. 20, No. 2, 1980, pp. 119-127.

[7] International Software Benchmarking Standards Group, The Benchmark Release 9, 2005, HUhttp://www.isbsg.orgUH.

[8] J. R. Quinlan, Induction of Decision Trees, Machine Learning, Vol. 1, 1986, pp. 81-106.

[9] J. J. Dolado, ?On the Problem of the Software Cost Function?, Information and Software Technology, Vol. 43, No. 1, Elsevier, Amsterdam, 2001, pp. 61-72.

[10] L. A. Zadeh, ?Fuzzy Set?, Information and Control, Vol. 8, 1965, pp.

338-353.

[11] L. C. Briand, V. R. Basili, and W. M. Thomas, ?A Pattern Recognition on Software Engineering, Vol. 18, 1992, pp. 931-942.

[12] M. J?rgensen, and M. Shepperd, ?A Systematic Review of Software Engineering, Vol. 33, No. 1, IEEE Computer Press, Washington D.C., 2007, pp. 33-53.

[13] N. Tadayon, ?Neural Network Approach for Software Cost Estimation?, Coding and Computing, IEEE Computer Press, Washington D.C., 2005, pp. 815-818.

[14] Putnam L. H., and W. Myers, Measures for Excellence, Reliable Software on Time, Within Budget, Yourdan Press, New Jersey, 1992.

[15] R. Valerdi, ?Cognitive Limits of Software Cost Estimation?, First International Symposium on Empirical Software Engineering and Measurement (ESEM), 2007, pp. 117-125.

[16] S.-J. Huang, C.-Y. Lin and, N.-H. Chiu, ?Fuzzy Decision Tree Apporoach for Embedding Risk Assessment Information into Software Cost Estimation Model?, Software Engineering and Software, Vol. 22, 2006, pp. 297-313.

[17] Z. Xu, and T. M. Khoshgoftaar, ?Identification of Fuzzy Models of Software Cost Estimation?, Fuzzy Sets and Systems, Vol. 145, No. 1, Elsevier, New York, 2004, pp. 141-163.

