Laws on Support Counts of Apriori Algorithm Candidates

Abstract?This paper proposes three novel laws for finding useful candidates in database and preventing useless candidates by researching frequent itemset support. Some new concepts are introduced so as to explain these three laws. For example, independent itemset and support count, which can effectively avoid losing any interest associational rules during pruning, are introduced. In this paper, firstly, some key definitions on these approaches are presented such as support count, constant support count on fixed item sets then three novel approaches are detailed. Secondly, demonstrations and applications on these approaches are presented. The application of these approaches is used to test significances of these laws by an example which proves that these novel approaches can more efficiently reduce redundant candidates than A-Priori algorithm.

Keywords- A-Priori algorithm; associational rule; constant on fix item support count; independent support count

I.  INTRODUCTION Associational rule mining is famous for discovering large  item sets for commerce from transactional database.

Generally, association rule mining contains following algorithms: A-Priori algorithm sample algorithm [2], DIC algorithm [3], and etc. Among these algorithms, A-Priori algorithm is the most popular one. Its famous property is that the sub-itemsets of large itemsets must be frequent itemsets.

This algorithm fits for small database but not for very large databases because a great many of useless candidates produce during for frequent item sets and a great deal of time is wasted for checking infrequent candidates. Moreover some important candidates are falsely pruned out and some irrelative candidates to large itemsets are created during checking process. Efficient algorithms for finding inter- transaction association rules have been proposed [1,7]. A reduced prefix projection strategy with a low space and time complexity is used in the inter-transaction association rule mining process. PSP algorithm introduced to reduce project database [6].

This paper studies candidate generations of A-Priori algorithm and find three relationships between frequent itemsets and its subsets according to their corresponding support counts. These laws can efficiently cut down some useless candidate items born and avoid losing some useful information during pruning. The following are some basic concepts and applications.



II. RELATIVE CONCEPTS Generally, association rule algorithm contains four  parameters: confidence, support, expected confidence and lift [2]. Confidence is the precision on association rule and support decides the importance of association rule. Support plays an important role in association rule for it decides association rules popularity.

A. 2.1 Basic Concepts on Rules Definitions serve for the following three laws. The  comprehension on these definitions can make these laws understood deeply.

Support: the percentage of one item is in a database. E.g.

in a transaction database there are s% items support item B and item A, and s% is regarded as the support of association rule: A B.

Support Count: the number of one item is in a transaction database. For example, one database holds D transaction items, and one itemset?s support is s% then its support count is s%?D.

Attenuation law for association rule support count: the support count of one itemset does not increase with becoming larger ones which contain more one-items.

Invariability on fixed item set support count: one fixed itemset will not change its support count because of its joining with other itemsets to create high-dimension itemsets in an unchanged database or a warehouse database.

Independent item sets: if one itemset does not contribute to one associational rule which is called as independence from this association rule. E.g. the support count of one k-1- itemset is m, while the support count of k-itemset, which contains the above k-1-itemset, is n. Then there are m-n k-1- itemsets which are not taken part in the connection of k-item sets. These m-n k-1-itemsets are defined as independent from the k-itemsets and m-n is the independence support count.

B. A-Priori  Algorithm The aim of A-Priori algorithm is to discover large  itemsets. It is famous for its anti-monotone property of large itemsets: if one item set is a frequent itemset then its subsets are frequent itemsets, too. According to this property it discovers candidates for its next high dimensional itemsets.

A-Priori algorithm prunes out some candidates by comparing supports of candidates to threshold support. Only when the  2009 International Joint Conference on Artificial Intelligence  DOI 10.1109/JCAI.2009.18     support count of one candidate exceeds the threshold will it be regarded as a frequent itemsets and does it have the right to join with another itemset for a large item. But this algorithm often incorrectly prunes out some useful candidates for their low dimension support counts do not exceed the threshold. While a great many of useless candidates may be produced, if A-Priori algorithm is only used. So the key is how to avoid useless candidates producing. According to this order three laws are concluded to predict itemsets support count and abort useless candidates.

C. Laws on Support Count   This paper concludes three laws by investigating differences support count of frequent itemsets and support count of its sub-itemsets.

Law 1: the support count of one itemset does not exceed any support count of its corresponding subsets. For example, the support count of itemsets I1I2I3 must less or equal to the support count of its subsets (such as I1I2, I2I3, and I1I3).

Law 2: the support count of frequent itemsets Sc,k ( ,minSc,k-1)   is the threshold of k-itemsets. The minSc,k-1 is the minimum support counts of its k-1-item subsets.

Law 3: suppose one k+1-item has two k-item subsets, meanwhile these two k-items have the same k-1-item subsets, and between these two k-items one k-item has the same support count as its k-1-item subsets, according to these conditions we can tell the k+1-itemset has the same support count as the other support count of k-item.

Benefiting from these three laws we can efficiently tell some itemsets support counts so as to improve the quality of A-Priori algorithm candidates and reduce those useless candidates. Their demonstrations and applications will be detailed as the following sections.



III. DEMONSTRATIONS ON LAWS The essences of these laws are depletion of association  rule support count and consistence on the support count of fixed itemset. To efficiently avoid some useless candidates resulting and prune out them during the process of finding frequent itemset we name a definition of independence support count. Then following sections detail these definitions.

A. Consistent Support Count for Fixed Itemset In a transactional database one item has a fixed support  count during algorithm process and will not change because it joins to another itemset. E.g. in a shop there are 1000 clients during October, there are 200 clients to buy cream, among these 200 clients there are 100 clients buy bread at the same time. So we can tell the support count Sc(cream)=200 and Sc(cream, bread)=100, an association rule is buy(cream) buy(bread). But the number of client who had bought bread cannot change and the same to buy cream or the both in this transaction database. We consider this phenomenon as consistence on support count of a fixed itemset.

B. Significances of Independence Support Count One mainly reason for support count attenuation is the  itemset independence. And two parameters are set to discover candidates of frequent itemsets. One is support count Sc and the other is independence support count Sic.

The subtrahend between Sc and Sic decides whether these items are to be pruned out. If the subtrahend of one item does not exceed the threshold of next high dimensional frequent itemsets, they can be cut off safely. This measure can exactly prune out some candidates.

C. Demonstrations of Laws Law 1 develops from attenuation of association rule  support count or affected by some sub-items independence.

While law 2 concludes these two definitions: depletion of association rule and consistence on the support count of fixed itemsets. While law 3 can be considered as one example of law 1 or law 2.

Now law 3 is demonstrated particularly.

law 3: if one k+1-itemset has two k-item subsets, which  have the same k-1-item subsets, and between these two k- items there exists one k-item has the same support count as its k-1-item subsets, according to these conditions we can tell the k+1-itemset has the same support count as the other support count of k-item.

The following will explain the demonstration.

Suppose k+1-item is L1L2??Lk-1LkLk+1, and these  two k-items are L1L2??Lk-1Lk and  L1L2??Lk-1 Lk+1, Sc(L1L2??Lk-1)=Sc(L1L2??Lk-1Lk)=n, Sc(L1L2??Lk-1Lk+1)=m, and Sc(L1L2??Lk- 1LkLk+1)=j.

From law 1 we can tell m n, j m. Hypothesize j<m not j=m, then according to the definition of support count independence we can tell that Sic(L1L2??Lk-1Lk+1)=m-j and Sic(L1L2??Lk-1Lk)=n-j. According to the above hypothesis we can judge that m-j>0. Due to the definition of consistence on support count of one fixed itemset we can tell that Sc(L1L2??Lk-1)= (n-j)+(m-j)+j=n+(m-j)>n, but Sc( L1L2??Lk-1)=n, so the above hypothesis  disobeys the definition of the support count consistence on a fixed item.

From the above we can judge the hypothesis is wrong.

The above demonstration has shown on the correction of law 3.



IV. ALGORITHM EXPLAIN AND EXAMPLE  A. Steps of Algorithm According to Laws According to the order of this paper the algorithm takes  the following steps: a) Set threshold values to every dimensional frequent  itemsets and initiate k=1; b) Scan the database to get k-itemsets support counts  Sc,k, and their independence support counts Sic,k, then get S= Sc,k -Sic,k;  c) Predict k+2-itemsets: join two k-itemsets into k+1- itemsets with a pointer then scan the database for support count of k+1-itemsets Sc,k+1, estimate whether these     itemset suit to law 3 if yes then estimate whether the support count fits for the needed threshold if yes endow the value support count to k+2-itemsets according to law 3 or prune out it without scanning it.

d) Estimate the value scope of k+2-itemsets according to law 1 and law 2, which can not be predicted by law 3, and compare to the threshold then prune out some pointer so as to abort those useless candidate.

e) Judge whether there are any other frequent itemsets.

If there is no frequent itemsets then end.

f) k++ g) return 2.

B. Steps of Algorithm According to Laws Now an example of [1] will be used to detail the  algorithm again, and show on the advantages of these laws.

Suppose the transaction database is figure 1.

From Figure 1 can tell that this database has 9 transactions. Steps of  the algorithm is the following:  a) Set the threshold of 1-itemsets is 4, 2-itemsets is 3 and 3-itemsets is 2, k=1.

b) Scan the data transactions and get every support count and independent count of I1, I2, I3, I4, I5 as Sc(I1)=6, Sc(I2)=7, Sc(I3)=6, Sc(I4)=2, Sc(I5)=2; Sic(I1)= Sic(I2)= Sic(I3) =Sic(I4) =Sic(I5)=0. Then we can consist of five two dimensional vectors of every items as (6,0), (7,0), (6,0), (2,0), (2,0). Compare the threshold of 1-itemsets to support counts of every item sets, I1, I2 and I3 have exceeded the threshold. While support counts of I5 are not suited to the threshold, they have reached the threshold of 3-itemsets.

c) Join 1-itemsets to 2-itemsets with pointers, then scan the database for every 2-itemsets, and discover their support counts and independent counts from the vectors of the above pointers in the figure 2. Such as I1I2(4,0) means that Sc(I1I2)=4 and Sic(I1I2)=0 as so on. Then I1I2(4,0), I1I3(4,2), I1I4(1,0), I1I5(2,0)??I4I5(0,0).

d) Then according to the subtrahend of every itemsets pruning. Prune out I4 and pointers I3I4, I4I5. For the large itemsets threshold of 3-itemsets is 2, ignore any itemsets whose support counts don?t reach 2. Then according to law 3 predict support count of I1I2I3 is 2 and I1I2I5 is 2. Of course, if 3-itemset is not the large item, the algorithm may need every 3-itemsets whose support count is 1 for high level itemsets.

e) Then join other 2-itemsets for 3-itemsets and scan the database transaction.

f) K++ g) Test whether the support count of every itemsets has  reached the threshold, yes scan, no end.

Compare to [1], the above algorithm has more prominent  merits for these laws importance because it can more effectively and efficiently obtain frequent itemsets support count than only uses A-Priori  algorithm, at the same time they can avoid some important information losing in the process of pruning.



V. CONCLUSION Three laws are concluded by the relationship between  frequent itemsets support count and their candidates support count. Law 1 and law 2 can predict the range of candidates support count or some high dimensional candidates support count. Law 3 can predict the support count exactlly if conditions are suitable for. These three laws can reduce scanning times in discovering support count of candidates.

With the attenuation between candidate support count and its independent support count can efficiently avoid losing some significant association rules. Some examples have been proved efficiencies of these laws.

