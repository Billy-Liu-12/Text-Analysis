A New Algorithm for Mining Global Frequent Itemsets in a Stream*

Abstract   To find global frequent itemsets in a multiple, continuous, rapid and time-varying data stream, a fast, incremental, real-time, and little-memory-cost algorithm should be used. Based on the max-frequency window model, a BHS summary structure and a novel algorithm called GGFI-MFW are proposed. It merely updates the summaries for subsets of the data new arrived and could directly generate the max-frequency for a given itemset without scanning the whole summary. Experiment results indicate that the proposed algorithm could efficiently find global frequent itemsets over a data stream with a small memory and perform overwhelming superiority for a large number of distinct items.

1. Introduction   Mining frequent itemsets, particularly over a multiple, continuous, rapid, and time-varying data stream, is among the leading challenges for knowledge discovery and data mining. The new arriving data has to be processed immediately and cannot be revisited.

Consequently it is always hard to store the whole stream or even a part of the stream for a long time.

Most previous research work of mining frequent itemsets on data streams focuses on the sliding window model [6, 12, 13], the time-fading model [7], and the land-mark model [6, 10]. To discover the rules and trend of a recent period, the sliding window model always uses a fixed window length. When a new data arrives, the window will update immediately, and the data older than the predefined window length will be discarded and never affected. The time-fading model takes the entire stream to compute the frequency of an itemset. In this model, with a decay factor d , the older data has a smaller weight and the newer data has a  larger weight. The land-mark model always has a fixed starter. The window of the land-mark model starts from the starter, and ends to the most recent data. All the models above need one or more factors predefined by users. When the factors change, the result will be different [4]. However, in many applications, it is always impossible to set the most appropriate factors.

For example, take the sale record of a large retail chain as a stream. Finding frequent itemsets is used to do market baskets analysis. However, it is difficult to choose a proper length of sliding window to collect all the data we are interested. For many products, the sale amount depends highly on seasons of the year, for instance ice creams sale more in summer. For some other products the sale amount depends highly on some special background, such as when the Olympic Game is held, sports products and even beer sell more. The seasonal information could only be discovered when choosing the appropriate window length. When this ?appropriate? length is chose, however, it may hide some other seasonal information of other products.

Toon Calders et al. [5] presented a new model to find frequent itemsets using maximal frequency window (FFI-MFW). They used the maximal frequency of an itemset over the whole stream as the measurement. Their experiments showed that the algorithm could efficiently find the frequent items without any factors predefined. However, when a new itemset arrives, the whole summaries for each itemset need to be updated. When there are a large number of items, which will lead to numerous itemsets, their algorithm could not be efficient any more.

Based on the max-frequency measure, a Binary Hash Summary (BHS) structure and an efficient algorithm, called GGFI-MFW (Generating Global Frequent Itemsets on Max-Frequency Window) are presented in this paper. The algorithm GGFI-MFW possesses excellent performance by the following:   DOI 10.1109/FSKD.2009.265    DOI 10.1109/FSKD.2009.265     (1) The max-frequency for a given itemset could be efficiently found out without scanning the whole summary;  (2) When a new itemset arrives, instead of updating the whole summary, we only have to update the summaries for the subsets of the new arrived itemset.

Experiments on a random generated data set with 10000 itemsets derived from 2-15 distinct items are carried out. The results show the proposed algorithm GGFI-MFW could efficiently find global frequent itemsets on a data stream, while maintaining a small summary. Especially when the data stream contains a large number of distinct items, the algorithm possesses overwhelming superiority.

The rest of the paper is organized as follows.

Section 2 provides preliminaries about data streams and related work about the max-frequency window model. In Section 3, the BHS structure and the Selective Updating Mechanism for the GGFI-MFW algorithm are introduced. Section 4 discusses some optimization of the proposed algorithm. In Section 5, the experiments using the GGFI-MFW algorithm and experimental results are presented in detail. The conclusion is presented in Section 6.

2. Preliminaries & Related work  2.1. Streams and Max-Frequency   A stream 1 2, , , nI I I< >  is a sequence of itemsets,  denoted S? , where ?n S=  is the length of the stream.

1I  is considered the first and oldest itemset in the stream, and nI  is the latest and most recent itemset.

We assume that the items in the stream S?  all come from a predefined itemset I? , called the meta-itemset for S? .

The number of sets in the stream S?  that contain itemset I  is denoted ?( , )count I S .

The frequency of I  in S?  is defined as   ?( , )?( , ) :  ? count I Sfreq I S  S =  Let minfreq denote the minimal frequency threshold.

Let    1 1 1 1  ? , , nS I I=< > ,    2 2 2 1  ? , , nS I I=< > ,    1? , , m m m  m nS I I=< > ,  the concatenation of 1 2? ? ?, , , mS S S  is denoted as  1 2  1 1 2 2 1 2 1 1 1  ? ? ? : , , , , , , , , , m  m m m n n nS S S I I I I I I? =< >  The sub-stream of S?  from sI  to tI  is denoted as  1?[ , ] : , , ,s s tS s t I I I+=< >  The last k  items of S?  is denoted as ? ? ? ?( , ) : [ 1, ]last k S S S k S= ? +  The maximal frequency of itemset I  over the stream S?  is defined as   ?1, ,  ? ?( , ) : max ( ( , ( , ))) k S  mfreq I S freq I last k S =  =  When given a minimal window length threshold, denoted as mwl , the max-frequency of itemset I  over the stream S?  is defined as   ?, ,  ? ?( , ) : max ( ( , ( , )))mwl k mwl S  mfreq I S freq I last k S =  =  If the length of the stream is less than mwl , the max-frequency is defined to be 0.

The max-frequency window for itemset I  in the stream S?  is denoted as ?( , )mwlmaxwin I S , and there is  ? ?( , ) : ( , ( , ))mwl mwlmfreq I S freq I maxwin I S=  The starting point of ?( , )mwlmaxwin I S  is denoted as ?( , )mwlmaxstart I S , and there is ? ? ? ?( , ) : ( , [ ( , ), ])mwl mwlmfreq I S freq I S maxstart I S S=   2.2. Borders   Timestamp q  is called a border for itemset I  in S? ,  if there exist a stream B?  such that ? ?( , )q maxstart I S B= ? That means a border is a point in the stream that  could become the starting point of a max-frequency window. On the opposite, a non-border for I  is a point that would never become the starting point of max- frequency window for I , and it cannot become a border either.

We restate the following theorem proved in [5].

Theorem 1 : Let S?  be a stream of length L , and let  ?[ , ]S q L  be the max-frequency window for itemset A .

Then, for any ,p r  with p q r< ? , there is  ? ?( , [ , 1]) ( , [ , ])freq A S p q freq A S q r? <  Corollary 1: Let S?  be a stream of length L , and let 1 q L? ? . Position q  is a border for target itemset A     in S? , if and only if for all indices ,j k  with 1 j q? < and q k L? ? , it holds that  ? ?( , [ , 1]) ( , [ , ])freq A S j q freq A S q k? <   3. GGFI-MFW Algorithm   In this section, a Binary Hash Summary (BHS) structure will be used to store borders, and a Selective Updating Mechanism (SUM) will be introduced to maintain the summary.

3.1. BHS Structure   Binary Hash Summary (BHS) is an index summary proposed to process the summary more efficiently for streaming data, especially when the meta-itemset is large. The index structure of BHS is: set the index number of the meta-itemset I?  to be 2(11 1)  m , m  is the  number of items of I? ; for an itemset A , if the thi  item  of I?  exists in A , set the thi  position of the binary code to be ?1?, otherwise, set it to be ?0?.

Let 1 2? ( , , , )mI i i i=  be the meta-itemset for S? , and m  is the number of distinct items.

Let 1 2 ?[ ],   r r rsA i i i A I= ? .

Let 1,  ( , ) ,     1 0,  k k  k  i A g i A k m  i A ??  = ? ?? ?? .

The index function of BHS ( )BHSf A  is defined as   1 2 2   ( ) ( ( , ) ( , ) ( , ))  ( , ) 2  BHS m  m m k  k k  f A g i A g i A g i A  g i A ? =  =  = ??   Example 1: For the itemset [ ]A bc= , if ? (    )I a b c d= , then the  index number for itemset A  is 2 10(0110) (6)= .

Let 1 2 rq q q< < <  denote the borders of itemset  A  in the steam S? , r  is the number of the borders.

Let ,  1ic i r? <  denote the count of A  between  1,i iq q + , and rc  denotes the count of A  from rq  to the current timestamp t ,  ?( , [ , 1]),   1 ?( , [ , ]),  i i i  i  count A S q q i r c  count A S q t i r +  ? ? ? <?= ? =??    Let sumS  denotes the summary of the stream S? .

The summary of the itemset A  is defined as 1 1 2 2[ ( )] : [( , ), ( , ), , ( , )]sum r rS f A q c q c q c= Then frequencies for itemset A  from borders are  ?( , [ , ]) ,     1  r  j j i  i i  c freq A S q t i r  t q == ? ?  ? +  ?   Considering Corollary 1,  1 2 ? ?( , [ , ]) ( , [ , ])  ?( , [ , ])r  freq A S q t freq A S q t  freq A S q t  < <  <   and  1 2 2 1 3 2 1  r  r  c c c q q q q t q  < < < ? ? ? +    Hence, the max-frequency for A  is  ? ?( , ) ( , [ , ])  r r  r  c mfreq A S freq A S q t  t q = =  ? +   The pseudo code of BHS is described as the following    ( ) : 1:    [], [], 0  ?2 :    1  ( ) 3 : 4 :           1  ?5 :           [ ] ( ) - 6 :    1  2 -1 7 :        0 8 :  t  m t  t  findsubsets I initial Index ItemsetsNum t  for m to length I if i I then  t t  Index t length I m for m to  set num for  = = =  = ?  = +  = =  =  -1  [ ]  9 :            mod( , 2 ) / 2 1 10 :               2 11:     [ ] 12 :  n n  Index n  n to t if m then  num num ItemsetsNum m num  return ItemsetsNum  =  = = +  =     3.2. Selective Updating Mechanism   To maintain the BHS structure introduced above, an efficient Selective Updating Mechanism (SUM) is presented. It merely updates the summaries for subsets of the new arrived itemset. The updating operator consists of adding borders and discarding borders.

3.2.1 Adding Borders. From the definition of borders, it follows directly that a non-border will never become a border. Therefore, only the new incoming itemset may add a border.

Let tI  be the incoming itemset on time t , and 1tI + be the incoming itemset on time 1t + . A border of itemset A  is added to the summary if and only if A  is a subset of 1tI +  and is not a subset of tI .

Let 1 1 2 2[ ( )] [( , ), ( , ), , ( , )]sum BHS t r rS f A q c q c q c=     denote the summary for A  on time t .

Let 1tI +  be the incoming itemset on time 1t + .

If [ ( )] . [ ( )] . 1sum BHS t r sum BHS t rS f A q S f A c t+ < + , and 1tA I +? , then  1 1 2 2  [ ( )] [ ( )] ( 1,1) [( , ), ( , ), , ( , ), ( 1,1)]  sum BHS t sum BHS t  r r  S f A S f A t q c q c q c t  + = + + = +  .

In the other case, if A  is a subset of both 1tI +  and  tI  then 1 1 1 2 2[ ( )] [( , ), ( , ), , ( , 1)]sum BHS t r rS f A q c q c q c+ = + The pseudo code is described as the following    ( ) 1:    . . 1 2 :       . . 1 3 : 4 :       (( 1,1), )  r r  r r  updatelastborder Sum if Sum q Sum c t then  Sum c Sum c else  add t Sum  + = + = +  +     3.2.2 Discarding Borders. Considering the definition of borders and the minimal frequency threshold, there are two conditions in which a border has to be discarded.

1. If the frequency from an older border becomes higher than the frequency from a newer border, the newer border is no longer a border. Furthermore, it will never become a border again. Therefore it could be discarded safely.

Let 1 1 1 2 2[ ( )] [( , ), ( , ), , ( , )]sum BHS t r rS f A q c q c q c+ = denotes the summary for A  on time 1t + , if 1? ?( , [ , 1]) ( , [ , 1])k kfreq A S q t freq A S q t?+ ? + , then  1 1 1 1 1 1  [ ( )] [( , ), , ( , ), ( , ), , ( , )]  sum BHS t  k k k k r r  S f A q c q c q c q c  +  ? ? + +  =   Considering Theorem 1, it follows directly that if kq  is a border, then 1 2 1, , , kq q q ?  are all borders.

Therefore, the discarding judgment above should start from the newest border.

2. If the frequency from the oldest border is less  than the minimal frequency threshold,   ?( , [ , 1])  r  k k  c freq A S q t minfreq  t q =+ = <  ? +  ? ,  then the border 1 1( , )q c  could be removed safely from the left-side of the summary. Although the frequency  from 1q  may become higher than minfreq  again, it is easy to proof that it could never become the starting point of the max-frequency window.

The pseudo code is described as the following    1 1  ( ) 1:    .   2  -1  . . .

2 :  . 1 . 1 3 :            . . .

4 :           (( , ), ) 5 :  m m m  m m  m m m  m m  filterbyborders Sum for m Sum r to step  Sum c Sum c Sum c if then  t Sum q t Sum q set Sum c Sum c Sum c remove q c Sum  else br  ?  ?  ? ?  = +  ? ? + ? +  = +  eak    , , .

( ) 1:    1  .

.

2 :  . 1 3 :           (( , ), ) 4 :  k k m Sum r  m  m m  filterbyminfreq Sum for m to Sum r  Sum c if minfreq then  t Sum q remove q c Sum  else break  =  =  ? ? +  ?    3.3. Generating Global Frequent Itemsets   Based on the BHS structure and SUM presented above, the GGFI-MFW algorithm could be described with the following steps, (1) Find out the index numbers of all subsets of the  incoming itemset 1tI + . For every subset, do step (2)?(6).

(2) For a subset A  that already has a summary, do step (3)?(5).

(3) If A  appeared in the previous incoming itemset tI , add one count to the last statistics variable rc  of the summary of A . Otherwise, add a new border ( 1,1)t +  to end of the summary.

(4) Check the borders. Discard those no longer borders.

(5) Check the borders. Discard those no longer following the minimal frequency threshold.

(6) For a subset A  that has no summary in sumS , start a new summary for A  with [( 1,1)]t + .

Then the Pseudo code of the basic algorithm can be described as the following  Algorithm GGFI-MFW:       11:    ( ); 2 :    1  ( ) 3 :        [ [ ]] 4 :           ( [ [ ]]); 5 :           ( [  t  sum  sum  sum  set Itemsets findsubsets I for k to length Itemsets  if S Itemsets k is not empty then updatelastborder S Itemsets k filterbyborders S Itemset  += =  [ ]]); 6 :           ( [ [ ]]); 7 : 8 :           [ [ ]] [( 1,1)]  sum  sum  s k filterbyminfreq S Itemsets k  else S Itemsets k t= +     4. Discussions  4.1. Minimal Window Length   Considering the minimal window length constraint, the border-discarding algorithm will face a challenge: a border discarded may become a border again [5]. To solve this problem, Algorithm GGFI-MFW will be applied on the sub-stream ?[1, ]S L mwl? . When the max-frequency is needed, check all the borders of the sub-stream ?[1, ]S L mwl?  in the full stream S? , and the max-frequency could be calculated out with the newest border of the full stream S? .

4.1. Filter   As algorithm 1 updates all the summaries of the subsets of new coming itemset 1tI + , there is always a new border record added into every summary of the subsets of 1tI + . It keeps summaries for all itemsets that ever appeared, although many of them only have one border record, which is probably a non-border at the current time. For optimization, a filter is built and executed every a period of time.

Let [ ] ( )BHS nSumIndex n f A= , n  is the serial number of a itemset of the summary sumS ,  Let SumNum  denotes the number of itemsets of the summary sumS ,  So the whole summary could be denoted as [ [ ]],     1sumS SumIndex i i SumNum? ? With the definitions above, the line 8 in Algorithm  GGFI-MFW should be   8 :   [ [ ]] [( 1,1)] 9 :   1 10 :   [ ] [ ]  sumS Itemsets k t SumNum SumNum SumIndex SumNum Itemsets k  = + = +  =   The filtration function is described as the following,   ( ) :  1:   1 2 : 3 :     ( [ [ ]]) 4 :      [ [ ]] 5 :        [ [ ]] [ [ ]] 6 : 7 :        1  sum  sum  sum  sum sum  filtration S set k while k SumNum do  filterbyminfreq S SumIndex k if S SumIndex k is empty then  S SumIndex k S SumIndex SumNum else  k k  = ?  =  = +     5. Numerical Experiment   In the following numerical experiment, GGFI-MFW and FFI-MFW will be used to do the comparison on execution time, summary number and summary accuracy.

The data set is random generated. The size of meta- itemset I?  is from 2 to 15. The size of the stream is from 100 to 10000 itemsets. For different size of the meta-itemset, we record the execution time, the summary number for all items and the summary for a specific itemset [ ]A a= .

Table 1 is the comparison on numbers of borders for itemset A . In the table, only two cases have the different number of borders.

Table 2 lists the total number of borders for all itemsets. The GGFI-MFW algorithm still has a little more borders than FFI-MFW. However, compared with the total number, it is quite a small one, that would have little impaction to the efficiency of the algorithm.

To be clear about the difference, table 3 lists the borders in the two cases in table 1. As the table shows, the difference for the two cases is only on the last border: GGFI-MFW will generate one more border, which is exactly not a border at that time. However, this ?one more border? is exactly what our algorithm proposed: it could save a huge amount of execution time by discarding the non-border in a later time.

Table 1. Numbers of borders for A  100(stream length) 1000 10000 2(items) 6\6(GGFI\FFI) 7\7 11\11 5 4\4 10\9 8\8 10 4\4 8\8 13\12   Table 2. Number of borders for all itemsets  100(stream length) 1000 10000 2(items) 15\15(GGFI\FFI) 22\22 31\31 5 67\67 77\74 67\64 10 227\227 448\438 281\239     Table 3. Borders for itemset A Cases GGFI-MFW FFI-MFW Items: 5 Stream Length:  (7,2), (12,155), (339,110), (559,16), (590,156), (884,35), (941,18), (970,2), (973,18), (999,1)  (7,2), (12,155), (339,110), (559,16), (590,156), (884,35), (941,18), (970,2), (973,19)  Items: Stream Length:  (2,16), (42,18), (82,121), (349,247), (861,2), (865,4020), (8731,399), (9485,175), (9808,21), (9846,58), (9950,5), (9958,26), (9999,1)  (2,16), (42,18), (82,121), (349,247), (861,2), (865,4020), (8731,399), (9485,175), (9808,21), (9846,58), (9950,5), (9958,27)  Table 4 gives the execution time of the two algorithms. When the meta-itemset has 2 items, the execution time of our algorithm GGFI-MFW is almost the same as FFI-MFW. When the size of meta-itemset increases to 5 or 10, the execution time of GGFI-MFW rises slowly, while the execution time of FFI-MFW rises quickly to a large number.

Table 4. Execution time 100(Stream Length) 1000 10000 (Items)  0.015s(GGFI) 0.014s(FFI)  0.164s\ 0.161s  1.585s\ 1.476s  5 0.065s\ 0.115s  0.676s\ 1.259s  7.093s\ 13.444s  10 0.401s\ 1.700s  4.588s\ 17.946s  48.688s\ 185.433s  Figure 1-3 show the execution time comparison with 2, 5 and 10 items in the meta-itemset, while the stream flows from 0 to 10000. Figure 4 shows the execution time comparison with the size of the meta- itemset raised from 2 to 15, while the stream length is 100.

Figure 1. Execution time comparison.

(Size of meta-itemset is 2; Stream length is from 0 to 10000)     Figure 2. Execution time comparison.

(Size of meta-itemset is 5; Stream length is from 0 to 10000)     Figure 3. Execution time comparison.

(Size of meta-itemset is 10; Stream length is from 0 to 10000)     Figure 4. Execution time comparison.

(Stream length is 100; Size of meta-itemset is from 2 to 15)  From the experiment results above, we can conclude that the summary number and the summary accuracy of our algorithm GGFI-MFW is almost the same as FFI-MFW, while the execution time is quite shorter. Especially when the meta-itemset has a large number of items, the GGFI-MFW is more efficiency than the FFI-MFW which uses an extremely more time cost.

6. Conclusion   In this paper, we have investigated how to find frequent itemsets in a multiple, continuous, rapid, and time-varying data stream. We proposed a Binary Hash Summary (BHS) structure and a novel algorithm called Generating Global Frequent Itemsets on Max- Frequency Window (GGFI-MFW). Different from previous work, our proposed algorithm only has to update the summaries of subsets of the new coming itemset. Finally, experiments on a random generated data stream are carried out. The results show that GGFI-MFW could effectively and efficiently generate the frequent itemsets with a small summary.

7. References  [1] S. Guha, A. Meyerson, N. Mishra, R. Motwani, and L.

on Knowledge and Data Engineering, IEEE Computer Society, Los Alamitos, 2003, pp. 515-528.

[2] B. Babcock, S. Babu, M. Datar, R. Motwani, and J.

Widom, ?Models and Issues in data stream systems?, Proceedings of the 21st ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems, ACM, Madison, Wisconsin, 2002, pp. 1-16  [3] G.S. Manku, R. Motwani, ?Approximate frequency counts over data streams?, Proceedings of the 28th Endowment, Hong Kong, China, 2002, pp. 346-357  [4] T. Calders, N. Dexters, and B. Goethals, ?Mining frequent items in a stream using flexible windows?, Intelligent Data Analysis, IOS Press, 2008, pp. 293-304  [5] T. Calders, N. Dexters, and B. Goethals, ?Mining frequent itemsets in a stream?, Data Mining. 2007. ICDM 83-92  [6] R. Jin, and G. Agrawal, ?An algorithm for in-core frequent itemset mining on streaming data?, ICDM, 2005, pp.

210-217  [7] D. Lee, and W. Lee, ?Finding maximal frequent itemsets over online data streams adaptively?, ICDM, 2005, pp. 266-  [8] A. Veloso, W. Meira Jr., M. de Carvalho, B. Possas, S.

