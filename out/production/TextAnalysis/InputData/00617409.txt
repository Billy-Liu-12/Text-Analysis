An Efficient Data Mining Technique for  Discovering Interesting Association Rules*

Abstract Mining association rules is an important task. Past  transaction data can be analyzed to discover customer purchasing behaviors such that the quality of busi- ness decision can be improved. The association rules describe the associations among items in the large database of customer transactions. However, the size of the database can be very large. It is very time con- suming to find all the association rules from a large database] and users may be only interested in the as- sociations among some items. Moreover, the criteria of the discovered rules for the user requirements may not be the same. Many uninteresting association rules for the user requirements can be generated when tra- ditional mining methods are applied. Hence, a data mining language needs to  be provided such that users can query only interesting knowledge to  them from a large database of customer transactions. In this pa- per, a data mining language is presented. From the data mining language, users ca.n specify the interested items and the criteria of the rules to be discovered.

Also, an efficient data mining technique is proposed to extract the association rules according to  the users? requests.

1 Introduction Data mining has high applicability in retail indus-  try. The effective management of business is signifi- cantly dependent on the quality of its decision making.

It is therefore important to analyze past transaction data to discover customer purchasing behaviors and improve the quality of business decision. Because the amount of these transaction data is very large, an ef- ficient algorithm needs to be devised for discovering useful information embedded in the transaction data.

An association rule describes the association among items in which when some items are purchased in a transaction, others are purchased too. The follow- ing definitions are adopted from [l]. A transaction s u p p o r t s  an itemset Z ,  if Z is contained in the trans- action. The s u p p o r t  for a n  z t e m s e t  is defined as the  *This work was partially supported by the Republic of China National Science Council under Contract No. NSC 86-2213-E- 007-009.

0-8186-8147-0197 $10.00 0 1997 IEEE  ratio of the total number of transactions which sup- port this itemset to the total number of transactions in the database. To make the discussion easier, occa- sionally, we also let the total number of transactions which support the itemset denote the support for the itemset. The major work of mining association rules is to  find all itemsets that satisfy a certain user-specified minimum s u p p o r t .  Each such itcmsct is rcferred to as large itemset.

In order to find association rules, all large itemsets need to be generated from the database. However, the size of the database can be very large. It is very time consuming to find all association rules from the large database, and users may be only interested in the associations among cert,ain items. Moreover, the criteria (such as minimum support) to  discover rules for the users may not be the same. Many uninter- esting association rules to the users can be generated when traditional methods of mining association rules are applied [l, 2,  4,  51. Hence, a data mining language is needed such that users can query knowledge from a large database of customer transactions.

Meo, Psaila and Ceri [3] proposed a SQL-like op- erator for extracting association rules. The SQL-like operator is capable of expressing the problem of min- ing association rules. However, the expressive power of the SQL-like operator is still limitary. For exam- ple, users may want to query the associations between certain items and all the other items. The SQL-like operator cannot express this kind of query. Further- more, the SQL-like query language is inconvenient for naive users, which is suita.ble to SQL programmers and experts, and the SQL-like operator performs set- oriented operations (i.e., join operations), which are very inefficient operations.

For designing a data mining language, two impor- tant issues need to  be considered: the easy-to-use user interface and the efficient data mining language pro- cessing. This paper is concerned with the two issues.

We present a data mining language] from which users only need to  specify the criteria for discovering the rules, and the items in the antecedent and the conse- quent in the rules. We also propose an efficient data mining technique to process user?s request. Accord- ing to the user?s request, the discovered large item-     sets are called the anterestang large atemsets, and the discovered association rules the anterestang assocaataon rules.

For the efficient data mining technique, the inter- esting large itemsets are discovered firstly. After dis- covering all interesting large itemsets, the interesting association rules can be extracted according to the antecedent and the consequent specified in the user?s request. For an interesting large itemset Z ,  if itemsets X and Y match the user-specified antecedent and the consequent, respectively, and X U Y = 2, then the rule X Y can be generated. The confidence of X Y in database D is the probability that when itemset X occurs in a transaction in D ,  itemset Y also occurs in the same transaction. That is, the ratio of the support for itemset Z to  the support for itemset X .  This rule is an interesting association rule if its confidence achieves the manLmum conjidence specified in the user?s request. An example of such an associ- ation rule is ?95% of the transactions in which coffee and sugar are purchased, milk is purchased too.? The form of this rule is ?coffee, sugar =+ milk 95%.? The antecedent of this rule consists of coffee and sugar and the consequent consists of milk alone. The percentage 95% is the confidence of the rule.

The rest of the paper is organized as follows: Sec- tion 2 presents the data mining language. Section 3 proposes the efficient data mining algorithm for the presented data mining language. The performance analysis for the data mining algorithm is presented in Section 4. Finally, we conclude this paper and present directions for future research in Section 5.

Mining Association Rules From < Database > With  Antecedent < Items > (*)) r Consequent < Items > (*)) Support s Confidence c  < Items > ::= item[, itemIk Where 0 6 s,c 5 1 and k > 0. The parameter  < Database > is used to  specify the database name to which users query the association rules.

In the With clause, users can specify items in the antecedent and the consequent of the rules to  be dis- covered after the keywords Antecedent and Con- sequent, respectively. If the items are specified in < Items > after the keyword Antecedent (Conse- quent), then the antecedent (consequent) of each dis- covered rule will contain these items. Besides, users need to  specify the two criteria: minimum support and minimum confidence by the keywords Support and Confidence, respectively.

Notice that the phrase within the parentheses is optional. If the user does not specify the keyword  Antecedent (Consequent), then any item can ap- pear in the antecedent (consequent) of the discovered rules. If the user does not specify the two keywords Antecedent and Consequent, all association rules which achieve the user-specified criteria will be dis- covered. The notation ?*? represents all items except the items specified in < I tems >. If the notation ?*? is specified after the keyword Antecedent (Con- sequent), then in addition to the items specified in < Items >, other items can also be contained in the antecedent (consequent) of each discovered rule.

3 Efficient Data Mining Algorithm In this section, we describe how to process a user?s  request. We develop an efficient data mining (EDM) algorithm to generate the interesting association rules according to the user?s request.

For a user?s request, if both the two keywords An- tecedent and Consequent are specified in the With clause and there is no notation ?*? specified, then the antecedent and the consequent of the discovered rule will contain only the items specified in < Items >?s after the keywords Antecedent and Consequent, respectively. We call this type of users? requests the Type  I request. If the user likes to  extract associa- tion rules whose antecedent or consequent can contain other items except the items specified in < Items >, then the noataion ?*? has to be specified in the With clause. We call this type of users? requests the Type II request. The request in which only one of the two key- words Antecedent and Consequent is specified also belongs to the Type I1 request. If both keywords An-  is the large atem generataon phase. In this phase, EDM algorithm scans the database to record related infor- mation for each anterested atem and find large items.

The interested items for the Type I request are the items specified in the With clause. The interested items for the Type I1 and Type I11 requests are all items in the database.

The second phase is the assocaataon graph construc- tion phase which constructs an association graph to in- dicate the associations between every two large items generated in the first phase. The third phase is the znterestang large atemset generataon phase which gen- erates all interesting large itemsets by traversing the constructed association graph according to the user?s request. The final phase is the anterestang assocaa- ihon rule generataon phase which generates all inter- esting association rules according to  the discovered in- teresting large itemsets, the items specified after the two keywords Antecedent and Consequent, and the user-specified minimum confidence in the user?s request.

3.1 Large item generation  In the first phase, algorithm EDM scans the database and builds a bit vector for each interested     item. The length of each bit vector is the number of transactions in the database. If an item appears in the ith transaction, the ith bit of the bit vector associated with this item is set to 1. Otherwise, the ith bit of the bit vector is set to  0. The bit vector associated with item z is denoted as BV,. The number of 1?s in SV, is equal to the number of transactions which support the item 2, that is, the support for the item z.

Property 1: The support for the itemset { i l , i 2 , ... , i k }  is S K I  0 BV,, 0 ... 0 B K k ,  where ?d? is the inner product of two vectors.

Lemma 1: If an item i j  (1 5 j 5 k )  is not a large item, then the itemset { i ~ , . . . , i ~ , . . . , i ~ }  cannot be alarge itemset.

Rationale: Because item ij is not a large item, the number of 1?s in the bit vector BV,, is less than the minimum support. Hence, S K I  ... BV,, 0 ... e SV,, must be less than the minimum support. The sup- port for the itemset {i~,...,ij,...,i~} i s  also less than the minimum support according to  the Property 1.

So, the itemset { i ~ , . . . , i j , . . . , i ~ }  is not a large itemset.

For the Type I request, if there is an interested item which is not a large item, then there is no answer to the request, because any itemset which contains the interested item cannot be a large itemset according to Lemma 1. Otherwise (i.e., all the interested items are large items), the inner products are performed on the bit vectors associated with all the interested items. If the result is no less than the user-specified minimum support, then the set of the interested items is an in- teresting large itemset. Hence, for the Type I request, the interesting large itemset can be generated after the first phase.

Itemset 1 C E A G B  B D A E C G A B C E G  E C G A G E A C D  B D F C H  D F B  C E  Table 1: Database TDB  Consider the example transaction database TDB shown in Table 1. Each record is a <TID, Itemset> pair, where TID is the identifier of the corresponding transaction, and Itemset records the items purchased in the transaction.

For example, if a user wants to know if the rule whose antecedent contains only items A and C,  and consequent contains only item E is an association rule whose support and confidence achieve 20% and SO%,  respectively, then the request is described as follows:  Request 1: Mining Association Rules From TDB With  Antecedent A, C Consequent E Support 20% Confidence 80%  This request belongs to the Type I request and the interested items are A, C and E. Because the minimum support is 20% (i.e., 3 transactions), the interested items A, C and E are all large items, and the associated bit vectors BVA, BVc and BVE are (111111110000000), (11111000111 1001) and (111111100000000), respectively. After performing in- ner products on BVA, BVc and BVE, the support for the itemset {A, C, E} is 5 (2 3). Hence, the itemset {A, C ,  E} is an interesting large itemset.

3.2 Association Graph Construction  After building the bit vector for each interested item, the database need not be scanned again for the algorithm EDM. For the Type I1 and Type I11 re- quests, EDM needs to  construct an association graph for the interesting large itemset generation.

Before constructing the association graph, each large item is assigned a unique integer number. Sup- pose item i represents the item whose item number is i, and the bit vector associated with item i is denoted as SV,. In the association graph construction phase, for every two large items i and j ( i  < j) , if SV, BV, is no less than the user-specified minimum support, a directed edge from item i to item j is created. Also, itemset ( i , j )  is a large 2-itemset. Note that an ordered list notation is used to  indicate the order of the items in an itemset for the following discussion. Since the two itemsets ( i , j )  and ( j , i )  are the same, we consider only one direction to avoid computing the supports for the same itemsets.

For example, if we like to extract the association rules whose antecedent and consequent contain item C and item E, respectively, and support and confidence achieve 20% and SO%, respectively, then the request can be written as Request 2.

Request 2: Mining Association Rules From TDB With  Antecedent C * Consequent E * Support 20% Confidence 80%  For Request 2, the interested items are all items in the database. After the first phase, the large items (i.e., items A,  B, C,  D, E, F and G) are found and the bit vectors associated with the large items are built.

The item numbers for the items A,  B, C, D, E, F and G are 1, 2 ,  3,  4, 5, 6 and 7, respectively. The association graph for Request 2 is shown in Figure 1.

Figure 1: The association graph for Request 2 and Request 3  3.3 Interesting large itemset generation In the third phase, the algorithm EDM generates  all interesting large itemsets according to the user?s request. In this phase, we develop two algorithms: LGTE (Large itemset Generation by Tree Expansion) and LGDE (large itemset Generation by Direct Ex- tension) to process the Type I1 and Type I11 requests, respectively.

3.3.1 interesting large itemset generation for Type I1 requests  For Type I1 requests, in addition to the items specified in < Items >Is, other items can also be contained in the antecedent and the consequent of each rule to be discovered. The Algorithm LGTE is applied to  gen- erate interesting large itemsets for Type I1 requests.

LGTE constructs an expunszon tree based on the as- sociation graph. Each node in the expansion tree con- tains an large itemset. During the expansion tree con- struction, LGTE expands each node which contains a large k-itemset (k >_ 1) to generate its child nodes which contain large k + 1-itemsets.

First, LGTE checks if the set of the items specified in < Items > I s  is a large itemset. If this itemset is a large itemset, then the itemset is designated the root node of the expansion tree, and the item numbers of the items in the root node is in the increasing order.

Subsequently, LGTE marks ?*? between every two items, before the first item and after the last item in the root node. For example, consider Request 2, which is a Type I1 request. The itemset specified in Request 2 is (3, 5), which is a large itemset since BGoB& is5 (2 3). After marking?*? in the itemset, the root node of the expansion tree becomes *3*5*.

After creating the root node of the expansion tree, the itemset in the root node will be extended to gener- ate extended itemsets. We have the following Lemmas to check if an itemset in a node can be extended.

Lemma 2: If an itemset is not a large itemset, then any itemset which contains the items in this itemset cannot be a large itemset.

Rationale: Because the itemset is not, a large itemset, the support for the itemset is less than the minimum support. Hence, the support for an itemset which con- tains the items in this itemset must be also less than the minimum support.

Lemma 3: For a large itemset ( i l ,  i 2 ,  ..., io) ,  if there is no directed edge from any item ih  ( i k - 1  < ih  when k > 1) to item i k  (1 5 k 5 n) ,  then item- set (ill  ..., i k - 1 ,  i h ,  i k  , ... , in) (or ( i h  , i l ,  i 2 ,  . . . , in) when k = 1) cannot be a large itemset.

Rationale: Because there is no directed edge from any item i h  ( i k - 1  < ih  when k > 1) to item i k ,  the itemset ( i h , i k )  (or ( i h ,  i l )  when k = 1) is not a large 2-itemset. . .  Hence, by Lemma 2, item- set ( i l l  ..., i k - 1 ,  I , + ,  l k ,  ..., in) (or ( i h ,  i l l  i 2 ,  ,.., in) when k = 1) is not a large itemset.

Lemma 4: For a large itemset (ill  i a ,  ... ,in), if there is no directed edge from item ik (1 5 k 5 n) to any item ip (ip < i k + l  when k < n) ,  then item- set (ill  ..., zk, z p ,  2 k + 1 ,  ... , in) (or ( i l l  i 2 ,  ... , io,  ip)  when k = n)  cannot be a large itemset.

Rationale: Because there is no directed edge from item i k  to  any item i, ( i p  < i k + l  when k < n), itemset ( i k ,  ip )  is not a large 2-itemset. Hence, item- set ( i l ,  ..., i k ,  ip, i k + 1 ,  ..., in) (or (ill i 2 ,  ..., in, ip) when k = n)  is not a large itemset according to  Lemma 2.

If there is an n-itemset in a node with a ?*I? marked, then this n-itemset can be extended into n + 1-itemset from the position of the mark ?*? except one of the cases stated in Lemma 3 and Lemma 4 holds. Hence, for each ?*? marked in a node, LGTE checks if the itemset I=( i l ,  i2, ..., in) in the node can be extended.

Suppose node N which contains itemset I is a root node, and is marked as *il*i2*...*in*. In the following, we describe how to construct an expansion tree.

If the position of the mark ?*? is before the first item i l  of the itemset I in node N I  then LGTE checks if there are directed edges from some items to the item i l  in the association graph. If there is no directed edge from any item i h  to the item i l l  then the itemset cannot be extended for this mark ?*? , because for any item i h ,  itemset ( i h ,  i l l  i 2 ,  ... ,in) is not a large itemset according to Lemma3. The mark ?*? is then removed from node N .  Hence, node N becomes i l * i 2 *  ...* in*.

If there is a directed edge from an item i, to the item i l ,  then the itemset I is extended into the itemset (i,, i l ,  i 2 ,  ... , in) ,  because this extended itemset can be a large itemset. If the extended itemset is a large itemset, the node *ie i l* i2* . . .* in*  is created, and this node becomes a child node of node N.

If the position of the mark ?*? is between items i k  and i k+1 of the itemset I in node NI then LGTE checks if there are directed edges from the item i k to the other items whose item nu i k + l .  If there is no directed edge from the item ik to the other item i, ( ip  < i k + l ) ,  then the itemset can- not be extended for this mark ?*?, because for any item i,, itemset ( i l ,  ..., i k ,  i,, i k + 1 ,  ..., in) is not a large itemset according to Lemma 4. The mark ?*? be- tween items i k  and i k + l  is then removed from node N and its child nodes created so far, and node N be- comes *il*...*ikik+l*...*in*. However, if there is a di- rected edge from item ik to  an item i, ( i ,  < i k + l ) and item i, to item i k + l ,  then the itemset I is ex- tended into the itemset ( i l l  ..., i k ,  i,, i k + l ,  ..., in),  be- cause this extended itemset can be a large itemset. If the extended itemset is a large itemset, then the node *il*...*i~i,*ik+l*...*in* is created, and this node also becomes a child node of node N .

. . .

If the position of the mark ?*? is after the last item in of the itemset 1 in node N ,  then LGTE checks if there are directed edges from item in to  the other items in the association graph. If there is no directed edge from item in to the other item i,, then the itemset cannot be extended for this mark ?*?, because for any item i,, itemset ( i l ,  ..., in, i,) is not a large itemset according to Lemma4. The mark ?*? is then removed from node N and its child nodes created so far, and node N becomes *il*i2*...*in. However, if there is a directed edge from item in to  an item i t ,  then the itemset I is extended into the itemset ( i l ,  ..., in, it), because this extended itemset can be a large itemset.

If the extended itemset is a large itemset, the node *il*i2*...*init* is created, and this node becomes a child node of node N .

For each created node, if there exist ?*??s in the node, LGTE expands all children of this node for each mark ?*?, and removes the mark ?*? from the node af- ter the expansion. For a node, if all extended itemsets for a mark ?*? are not large itemsets, then the mark ?*? is removed from the node and its child node cre- ated so far. After constructing the expansion tree, the itemset in each node is an interesting large itemset.

Finally, LGTE generates all interesting large itemsets from each node of the expansion tree. The algorithm LGTE is described as follows:  For example, consider Request 2. First, LGTE creates the root node *3*5*. For the first mark ?*? in the node, because there exist directed edges from items 1 and 2 to item 3 in the association graph shown in Figure 1, the extended itemsets are (1, 3,  5) and (2, 3,  5). Because the itemsets (1, 3,  5) and (2,  3,  5) both are large itemsets, *13*5* and *23*5* are created as child nodes of the original node *3*5*. After expand- ing all child nodes for this mark ?*?, the original node *3*5* becomes 3*5*.

For the mark ?*? between item 3 and item 5 in the root node, there is only one directed edge from item 3 to item 4 whose item number is less than item 5.

However, there is no directed edge from item 4 to item 5. Hence, the itemset (3, 5 in the root node cannot  item 3 and item 5 is removed from the root node and its child nodes created so far. Hence, the root node becomes 35* and the two child nodes become ?135? and *235*, respectively.

For the mark ?*? after the item 5 in th root node, there is only one directed edge from item 5 to item 7 in Figure 1, and the extended itemset ( 3 ,  5, 7) is a large itemset. Hence, the node 357* is created as a child node of the root node. After the expansion, this mark ?*? is removed from the root node and the root node becomes 35. Similarly, LGTE continues to expand all created child nodes. The expansion tree for Request 2 is shown in Figure 2.

Finally, LGTE generates all interesting large item- sets from each node of the expansion tree in Figure 2.

Because there are eight nodes in the expansion tree, there are eight interesting large itemsets generated.

be extended for this mark ? 2 ? . The mark ?*? between  I 3 5 7  1235 z357   Figure 2: The expansion tree for Request 2  3.3.2 interesting large itemset generation for Type I11 requests  For Type I11 requests, there are no keywords An- tecedent and Consequent specified in the users? re- quests. Hence, all association rules achieve the user- specified criteria will be discovered. For example, if we like to  extract all association rules whose support and confidence achieve 20% and SO%, respectively, then the request is written as Request 3.

Request 3: Mining Association Rules From TDB With  Support 20% Confidence 80%  The LGDE algorithm is proposed to  generate all interesting large itemsets for Type I11 requests. Sup- pose the set of large k-itemsets is L k  ( k  > 1). The 2-itemsets Lz is found in the association graph con- struction phase. In the interesting large itemset gen- eration phase, the LGDE algorithm generates large k-itemsets LI,  ( k  > 2).  For each large k-itemset in L k  ( k  2 2), the last item of the k-itemset is used to extend the itemset into k + 1-itemsets. Suppose (il , i ~ , ..., i k )  is a large k-itemset. If there is a directed edge from item ik to item U in the association graph, then the itemset ( i l ,  i z ,  ..., i k )  is extended into k+l-itemset ( i l , i 2 ,  ..., i k , ~ ) ,  because this extended itemset can be a large itemset. The extended itemset ( i l , i 2 ,  ..., i k , ~ ) is a large k + 1-itemset if BE:  0 L?x2 0 ... 0 SE, 0 SV, is no less than the user-specified minimum support.

If no large k-itemsets can be generated, the LGDE algorithm terminates.

For example, consider Request 3. In the associa- tion graph construction phase, 15 large 2-itemsets are generated and the association graph is shown in Fig- ure 1. For large 2-itemset (1, a ) ,  there are five directed edges from item 2 of the itemset (1, 2) to  items 3, 4, 5, 6 and 7, respectively. Hence, the 2-itemset (1, 2) can be extended into 3-itemsets (1, 2,  3), (1, 2, 4), (1, 2, 5), (1, 2 ,  6) and (1, 2 ,  7). Because SV, 0 BVz BVq and BV1 0 BV2 0 BVc are 1 and 0,  which are less than the user-specified minimum support (i.e., 3 ) ,  the 3- itemsets (1, 2, 4) and (1, 2,  6) are not large itemsets.

The other 3-itemsets (1, 2, 3), (1, 2, 5) and (1, 2, 7) are large 3-itemsets. The LGDE algorithm terminates when no large 6-itemsets can be further generated.

3.4 Association rule generation After discovering all interesting large itemsets,  EDM generates interesting association rules according to the interesting large itemsets, the items specified after the keywords Antecedent and Consequent, and the minimum confidence specified by the keyword Confidence in the user's request. If the keywords Antecedent and Consequent are not specified in the user's request, i.e., it is a Type I11 request, then for any interesting large itemset A P ,  all rules that reference items in the interesting large itemset can be generated. The antecedent of each of these rules is a proper subset SAP of A P ,  and the consequent is AP- SAP. For each SAP AP - S A P ,  EDM checks if the confidence achieves the user-specified minimum confidence. If the confidence achieves the minimum confidence, then the rule SAP --I A P  - SAP is an interesting association rule.

If both keywords Antecedent and Consequent are specified in the user's request and there are no notation "*"'s specified in the user's request, i.e., it is a Type I request, then EDM checks if the rule whose antecedent and consequent contain only the items specified after the keywords Antecedent and Consequent , respectively, is an interesting associa- tion rule. If there is only one of the keywords An- tecedent and Consequent specified or there is a no- tation "*'"s specified in the user's request, i.e., it is a Type I1 request, then EDM generates rules whose an- tecedents (consequents) need to  match the items spec- ified after the keywords Antecedent (Consequent).

For example, consider Request 2. For the interest- ing large itemset {A, C, E}, two combinations of the antecedent and consequent match the items specified in Request 2: AC E and C AE. The confi-  less than the minimum confidence 80%. Hence, C ==+ AE is not an interesting association rule. However, the confidence for AC j E is s ~ ~ ~ ~ : ~ ~ f " : ~ f ~ ~ $ l  = 1 which is greater than 80%. Hence, AC E is gen- erated, which is an interesting association rule.

dence for C 3 AE is s u p p o r t f o r { A , C ~ E )  = S which is s u p p o r t f o r {  C }  10  4 Performance Analysis In this section, we analyze the performance for  the efficient data mining algorithm EDM. The effi- cient data mining technique is implemented in Sun SPARC/ 10 workst at ion,  In the large item generation phase, EDM scans the database to find large items from the interested items and build the bit vector for each generated large item.

The cost for the first phase is one database scan. For the Type I request, suppose there are k items speci- fied in the With clause. After the first phase, EDM performs ( k  - 1) inner products on the bit vectors.

For the Type I1 and Type I11 requests, EDM gen- erates interesting large itemsets through the following two phases. For the graph construction phase, suppose there are 1 large items generated in the first phase.

EDM performs inner products on bit vectors to construct association graph  For the interesting large itemset generation phase, EDM develops two algorithms LGTE and LGDE to process the Type I1 request and the Type I11 request, respectively. In the kth ( k  > 2) iteration, LGDE extends each large k - l-itemset into k-itemsets ac- cording to the association graph. Suppose the average out-degree of each node is q in the association graph.

LGDE performs ( k  - 1) x ILk-11  x q inner products to  find all large k-itemsets, which has been demon- strated to have a better performance [5] than the other approaches.

For LGTE algorithm, suppose there are n nodes in the constructed expansion tree, and on the average, there are m extended itemsets on each node and the length of each extended itemset is k .  LGTE algorithm performs n x m x ( k  - 1) inner products to  construct expansion tree. Hence, EDM is an efficient algorithm for generating association rules according to  the user's request.

5 Conclusion and Future Work We introduce a data mining language. From the  data mining language, users can specify the items in the antecedent and the consequent, and the two cri- teria: minimum support and minimum confidence of the association rules to be discovered.

We propose an efficient data mining algorithm (EDM) to process a user's request. The algorithm EDM needs only one database scan and some inner products to  generate all interesting association rules according to the user's request, which is very efficient.

In the future, we shall extend the data mining lan- guage to allow more flexible query specifications, and develop an interactive data mining technique to  dis- cover other kinds of association rules according to the user's request, such as generalized association rules and multiple-level association rules.

