SysCon 2008 - IEEE International Systems Conference Montreal, Canada, April 7-10, 2008

Abstract - As the situations change very often and extensively today, is to deliver good grownups to our customers to serve them.

the role ofa user becomes increasingly important because it is he or Software industries did the same.

she who really can understand the current situation and make decisions to cope with it. A user cannot operate machines or systems But it was soon made clear that developing software that adequately if they cannot trust it. But formerly, machines and way is too much unrealistic and Al technology taught them systems are very simple so that a user can expect how it would that prototyping is not just one ofthe steps before delivery behave. But increasing complexity and diversification makes it more but you can grow your product function while in serve ifyou and more difficult. Software introduced the idea of continual introduce continual prototyping.

prototyping and by evolving its functions step by step to a higher level after a user gets accustomed to it and build up trust in it. This One of the features of software is that you cannot "see" paper points out that ifwe recall that most of the systems today are what it is or how it works until you use it. Even if software is the combination of hardware and software, we might as well 100% completed before delivery, customers would still feel introduce the concept of continual prototyping into hardware- uneasy because they cannot "see" how it works.

dominant systems. This would serve for a customer to build up trust more easily so that it is expected he or she can make decisions better Continual prototyping changed the whole scene. Software and respond quicker and better. As hardware is physical, it has life. industries stopped delivering "grownups" and instead they But software is non-physical so that it is eternal. Ifwe consider that moved toward growing "babies" together with their decommissioning of software is becoming a very big problem, we customers. Babies are simple so that customers can easily may utilize the phenomenon of deterioration as an indicator of the understand them. As they grow older, customers learn remaining life. Thus, ifwe put advantages ofsoftware and hardware together with them.

together, we may come up with a system which will cancel the disadvantages each other so that it will increase user's confidence. In fact, the growing function curve of software is quite  similar to our (positive) learning curve. Once customers Keywords - trust, hardware system, frequent and extensive understand how our babies would behave, then they are ready situational changes, adaptability, flexibility, continualprototyping, if some new functions are added on, because they know that  their babies would behave as they expect. They "grow" trust as their babies grow.



I. INTRODUCTION When it comes to hardware, their product development  With increasing diversification and complexities, style is still very much traditional. Hardware is being customers are getting more and more frustrated and anxious produced with fixed function. Their increasing complexities because they cannot "see" how the system works. As Donald and diversification drives our customers more and more Norman pointed out in his book "Emotional Design"[1], uneasy.

simple mechanical objects can be trusted, if only because But ifwe change our way ofhardware product their behavior is so simple that our expectations are apt to be development and adopt the same style as the one in software, accurate. He also points out that the problems of current a great amount of our customers' concern or uneasiness objects are that you don't know what to expect. would be removed.

This paper points out that ifwe introduce continual In the case of hardware, 20% of our customers used to buy prototyping into our system development, these issues, ifnot our products as soon as they appeared on the market. 80% all but most of them certainly, may be solved. others could follow suit iftheir reputation was good. But The way of software development changed remarkably nowadays, product life cycle is getting shorter and shorter  since the emergence of knowledge engineering or Al and before these 200% can establish their product reviews, technology. It changed the way of thinking in software products are replaced by another model or by a new product.

technology. Until then, software was developed in the same So we don't have any lighthouse now. What we have to way as hardware. Hardware is still being developed in the provide to our customers is a lighthouse showing their way.

same old style, i.e. with the fixed function. Their philosophy Continual prototyping would throw light into the hardware     market. In fact, all systems are now combination ofhardware and software and it would not be too much to say that there is no system which is composed ofhardware alone. Then, it would be quite natural to introduce continual prototyping into l_l our hardware system development.

We will discuss in this paper how continual prototyping may be introduced into hardware development in order for the customer to "see" or "expect" how the developed system 000L will behave.

Characteristics of Natural Product FunctionsII. DEVELOPMENT OFPrdcFutin HARDWARE AND SOFTWARE Resources  Fig.2 Hardware development A. Hardware development  But software development, on the other hand, is from Hardware is produced with the fixed function as shown scratch. There is no such pre-existing material. Creating a  in Fig. 1. functional pattern ofthe requirement is the task (Fig.3)  Design Degradation Function  Restore  Production Maintenance in Use Product Functions  Shipping Fig.3 Software development  Hardware (Delivery of Finished Product) In short, hardware development is to process what nature  produced (Fig.4) while software development is to produce Fig. 1 Hardware development material from the start and process it (Fig.5).

Software used to be produced in the same way as hardware.

But as requirements become more and more stringent and complex, it becomes very much difficult to produce software in the same way as hardware.

Hardware development is nothing other than processing or Processing manufacturing of the already existing natural resources.

Therefore, the core task ofhardware development is to Material change or adapt material characteristics to the requirements. Product It is to match the characteristic pattern of a material and that of functional requirements as shown in Fig.2. Fig. 4 Hardware development    might not be able to cope with the quickly increasing demand for software because software has to be developed from nothing. Knowledge engineering or Al technology helped us get over the crisis. It introduced the concept of continual prototyping as shown in Fig.8  A Irr Creation Customizing  function  Product Function  Fig.5 Software development Ship ing Use  Thus, software development takes more time and efforts and we cannot tell easily what will come out. In hardware, material is already there so you can "see" or "expect" what Software you can get (Fig.6). The big issue of software is you cannot (Continuous Prototyping) "see" or "expect" until your system is finished (Fig.7)  Fig. 8 Software development  Material Product With the introduction of continual prototyping, software Characteristics Behavior can be delivered with the minimum function at first and let its  function grow with time after it is shipped. But since the core See of software development is adaptation, it is more appropriate  Expect to describe the function evolves with time rather than it growswith time. To achieve higher level of adaptation, more and more pieces of software are coming to be combined. Another  Fig.6 Hardware visibility reason is because as we produce material from the first in the case of software development, it takes too much time and efforts so that it is unrealistic to start everything from the first.

It is far better to combine existing pieces together to produce new functions to adapt to the changing extent or level of  Product Behavior requirements.

See B. Advantages and disadvantages  Fig.7 Software visibility Hardware has such an advantage over software in terms of development as you don't worry too much about its "visibility" of functions. The functions you are developing  In other words, hardware development can be compared to are more "visible" or at least it is "easier to expect" to how it the growth of an individual living thing. Hardware will behave. People used to trust hardware more because they development is to grow each individual physical entity so that felt they could expect their behaviors more easily than it will match the requirements. Software development, on the software.

other hand is more of a problem of adaptation. To adapt better, we have to think as species. Hardware discusses the The core of software development is combination. So you problems of John and Smith, while software discusses the cannot "see" or "expect" how it behaves easily. The problem of the human species. continual prototyping removed this concern greatly. People  can use simple functions first and as they get accustomed to it So the fundamental nature of software development is how and as their trust grows, software system evolves to next  we can produce resources which will adapt to the changing higher level. And after the user get accustomed to this level requirements. In mid-80's, it was very much worried that we and their trust is fully attained, then it evolves to the next    higher level. This process is repeated so that people's trust grows proportionally as the function grows. But ifwe consider that extent ofhardware usage is  intrinsically limited, no matter how diversified their use may And the seeming disadvantage turns out to be an advantage be and how much rapid its operating conditions may change.

for software. Today, situations change very rapidly and Ifwe can classify user patterns, we may be able to prepare extensively so the flexibility or the adaptability becomes very suitable group of add-on's to fit to each case. Then continual much important to cope with them. People trust increases prototyping can be introduced into hardware development.

because they can cope with different situations better.

The traditional advantage of hardware, therefore, becomes D. Decommissioning disadvantage. The problem ofhow we can make our hardware more adaptive to the changing situations becomes Another advantage ofhardware is that since it is a physical very important. How can we realize this and how can we entity, the definition of decommissioning is very much recover trust from our customers in this quickly and straightforward. The battle against degradation and the extensively changing world. limited life has been very severe and until now it was  considered disadvantage. But ifwe recall that

III. CONTINUAL PROTOTYPING decommissioning is now becoming a very big issue in  software, the fact that hardware deteriorates a blessing.

One conceivable solution would be to equip our hardware We can consider deterioration as a signal for  system with all kinds of functions from the first and to let the decommissioning.

functions work, which are necessary to respond to the current situation. Ifwe embed many IC chips into the hardware In the case of software, the increased use ofCOTS system, it would increase adaptability. (Commercial Off The Shelf) makes the definition of  decommissioning much more difficult because nobody can But ifwe were to realize such a system, it will come heavy see "the whole picture".

and a designer must prepare a wide variety of sensors beforehand because he or she cannot predict what situations IV. COMBINED SYSTEM will take place.

But ifwe combine hardware and software adequately to Ifwe introduce continual prototyping into hardware achieve continual prototyping in hardware, then hardware  development, it would be easier to add adaptability to will be an indicator for decommissioning while software will hardware system. work for continual prototyping realization.

Continual prototyping brought user-centric development. We can start from a very primitive set of elements and with The development of a system with the fixed function is based the increase of its use time, we will add necessary elements upon the idea that a designer can "foresee" the operating element by element in order to move up to the next higher conditions. And based upon this "expected" operating level. If some elements will not be used anymore after a conditions, hardware systems have been developed. But with certain period of time, we can just remove them. So if increasing changes and diversifications, designers can no adequate combination can be achieved in a hardware- longer "foresee" the operating conditions of his or her system. dominant system, we will be able to decommission a system  adequately and we can keep our system consistently light, but What software industry realized in mid-80s is the change still keep enough adaptability and flexibility.

from designer-centric to user-centric development, or in other words, the changed from one way to interactive development. V. CONCLUDING REMARK The users trust a system better because they feel what they want is gradually implemented and they have time to learn Traditionally, our way of design a system is primary based how they will behave. upon the idea of actuation. We give commands to machines  or systems and they are expected to operate exactly as we Then, how can we introduce continual prototyping concept instruct them, no matter how the situation might change. But  into hardware development? this is workable because the situation did not change appreciably. And what make things easier is that in these  C. Add-on days machines and systems are very much simple so that users can tell how they would behave.

The idea of continual prototyping is to add functions onto the present system. If we develop hardware with prior But today, situations change very often and extensively consideration for add-ons, then the function of hardware can and what makes the matter worse is that the requirements are evolve. Of course, in the case of hardware, the realization of very much diversifying. So it is getting harder and harder for add-on is not so easy as in software.

a designer to foresee the operating conditions and prepare adequate commands for operation.

Ifwe recall that it is a user who knows what is happening now, then the design of a system moves from the traditional designer-centric to user-centric approach.

Thus, the primary role of a system now is to help a user make adequate decisions at the right time and respond quicker and better.

In other words, a machine or a system must be designed in such a way that it teams well up with a user and works together well. To achieve such a goal, user's trust is indispensable. But increasing complexity and diversification makes such trust building difficult.

This paper points out that if we introduce the idea of continual prototyping which is popular in software development today into hardware development, it will serve to build up user's trust.

