Mining High Utility Itemsets over Uncertain Databases

Abstract?Recently, with the growing popularity of Internet  of Things (IoT) and pervasive computing, a large amount of uncertain data, i.e. RFID data, sensor data, real-time monitoring data, etc., has been collected. As one of the most fundamental issues of uncertain data mining, the problem of mining un- certain frequent itemsets has attracted much attention in the database and data mining communities. Although some efficient approaches of mining uncertain frequent itemsets have been proposed, most of them only consider each item in one transaction as a random variable and ignore the utility of each item in the real scenarios. In this paper, we focus on the problem of mining high utility itemsets (MHUI) over uncertain databases, in which each item has a utility. In order to solve the MHUI problem over uncertain databases, we propose an efficient mining algorithm, named UHUI-apriori. Extensive experiments on both real and synthetic datasets verify the effectiveness and efficiency of our proposed solutions.



I. INTRODUCTION  Recently, with the growing popularity of Internet of Things (IoT) and pervasive computing, a large amount of uncertain data has been collected from different kinds of devices, such as RFID, sensors, and real-time monitoring systems[1], [2].

As one of the most fundamental issues of uncertain data mining, the problem of mining uncertain frequent itemsets has attracted much attention in the database and data mining communities[3], [4], [5], [6], [7]. Although some efficient approaches of mining uncertain frequent itemsets have been proposed[8], most of them only consider each item in one transaction as a random variable and ignore the unit utilities of items in the real scenarios.

In kinds of recommender system (e.g. music, video) analy- sis, mining frequent itemsets from an uncertain database refers to the discovery of itemsets which may frequently appear together in the records (transactions). However, in these works, the unit values (utilities) of items are not considered in their frameworks of uncertain frequent itemsets mining. Hence, it cannot satisfy the requirement of a user who is interested in discovering itemsets with high enjoyment values. For example, a table shows some songs and their utility values. The utility value of each song is scored by all the persons listened to it according to their preference degree to the song. Another is the listening records of some users showing which songs they listened to and the probability they like them. Namely, in a song transaction of a user, the probability he likes these songs are 0.8, 0.8, 0.7, and 0.7.When songs are recommended, not  only the frequency of songs in records of different user should be considered, but the popularity of songs should also be taken into account. In view of this, utility mining is a necessary topic in data mining for discovering itemsets with high utility, such as values (utilities), in uncertain databases.

Mining high utility itemsets from the databases refers to finding the itemsets with high utilities[9], [10], [11]. The basic meaning of utility is the interestingness / importance / profitability of an item to the users.

To sum up, we make the following contributions:: ? To the best of our knowledge, this is the first work to  formulate the problem of mining high utility itemsets over uncertain databases (MHUI).

? Due to the challenges from utility constraints, the downward closure could not be directly used to mine HUIs, we propose the UHUI-Apriori algorithm to mine HUIs.

? We verify the effectiveness and efficiency of the proposed methods through extensive experiments on real and synthetic datasets.

The rest of the paper is organized as follows. Problem statement are introduced in Section 2. In Section 3, we present an efficient mining algorithm, named UHUI-Apriori. In Section 4, experimental evaluation on both real and synthetic datasets are reported. Finally, we conclude this paper in Section 5.



II. PROBLEM STATEMENT  In this section, we give several basic definitions about mining high utility itemsets from uncertain data.

Let I = {i1, i2, ..., in} be a set of distinct items. Each item ip has a unit value u(ip). We name a non-empty subset, X , of I as an itemset. For brevity, we use X = x1x2...xn to denote itemset X = {x1, x2, ...xn}. X is a l - item set if it has l items. Given an uncertain transaction database D, each transaction is denoted as < tid, Y >, where tid is the transaction identifier, and Y = {y1(p1), y2(p2), ..., ym(pm)}.

Y contains m units. Each unit has an item yi and probability pi, denoting the possibility of item yi appearing in the tid tuple. A threshold, the minimum utility threshold, is defined as ?.

An example of uncertain databases is shown in Table 1.

The corresponding utility table is shown in Table 2. In this example, the minimum utility threshold is set at ? (= 25%).

DOI 10.1109/CyberC.2015.76    DOI 10.1109/CyberC.2015.76     TABLE I. AN UNCERTAIN DATABASE  TID Transactions T1 A (0.2) C (0.3) E (0.2) T2 B (0.2) D (0.3) T3 A (0.1) B (0.2) C (0.1) E (0.3) T4 C (0.2) T5 B (0.3) D (0.2) E (0.1) T6 A (0.2) C (0.2) D (0.5) T7 A (0.1) B (0.1) D (0.4) E (0.1) T8 B (0.4) E (0.1) T9 A (0.3) C (0.3) D (0.2) T10 B (0.2) C (0.3) E (0.1)  TABLE II. AN UTILITY TABLE  TID A B C D E Utility 4 1 12 6 15  Definition 1: The utility of an item ij in Td is defined as: U(ij , Td) = p(ij , Td)? u(ij) (1)  For example, the utility of an item (A) in T1 is U(A, T1) = p(A, T1)? u(A) = 0.2? 4 = 0.8 .

Definition 2: The utility of an itemset X in transaction Td is denoted as U(X,Td), which can be defined as:  U(X,Td) = ?  ij?X?X?Td U(ij , Td) (2)  For example, the utility of (AC) in T1 is calculated as U(AC, T1) = U(A, T1) + U(C, T1) = p(A, T1) ? u(A) + p(C, T1)? u(C) = (0.2? 4) + (0.3? 12) = 4.4.

Definition 3: The utility of an itemset X in Uncertain database D is denoted as U(X), which can be defined as:  U(X) = ?  X?Td?Td?D U(X,Td) (3)  For example, U(A) = U(A, T1)+U(A, T3)+U(A, T6)+ U(A, T7) + U(A, T8) = (0.8 + 0.4 + 0.8 + 0.4 + 1.2) = 3.6, and U(AC) = U(AC, T1) + U(AC, T3) + U(AC, T6) + U(AC, T9) = (4.4 + 1.6 + 3.2 + 4.8) = 14.

Definition 4: The transaction utility of transaction Tq is denoted as tu(Tq), which can be defined as:  tu(Tq) =  m?  j=1  U(ij , Td) (4)  in which m is the number of items in Td.

For example, TU(T1) = U(A, T1)+U(C, T1)+U(E, T1) = 0.8 + 3.6 + 3 = 7.4.

Definition 5: The total utility in D is the sum of all transaction utilities in D and is denoted as TU, which can be defined as:  TU = ?  Td?D TU(Td) (5)  For example, the transaction utilities for T1 to T10 are respectively calculated as TU(T1) = 7.4, TU(T2) = 1.3, TU(T3) = 6.3, TU(T4) = 2.4, TU(T5) = 3, TU(T6) = 6.2, TU(T7) = 4.4, TU(T8) = 1.9, TU(T9) = 6.0, TU(T10) = 5.3.

The total utility in D is the sum of all transaction utilities in D, which is calculated as: TU = (7.4 + 1.3 + 6.3 + 2.4 + 3 + 6.2 + 4.4 + 1.9 + 6 + 5.3) = 44.2.

TABLE III. DERIVED HUIS OVER AN UNCERTAIN DATABASE  Itemset Actual Utility (C) 16.8 (E) 13.5  (AC) 14 (BE) 11.7 (CE) 17.4  (ACD) 12.2 (ACE) 13.5  Definition 6: An itemset X is defined as a high utility itemset (HUI) if its utility value U(X) is not less than the minimum utility count as:  ?  X?Td?Td?D U(X,Td) = U(X) ? ?? TU (6)  For example, suppose that the minimum utility threshold ? is set at 25%. An item (A) is not considered as a HUI since U(A) = 3.6, which is smaller than (0.25? 44.2) = 11.05. An itemset(AC) is considered as a HUI in D since U(AC) = 14, which is larger than the minimum utility count = 11.05.

Based on the above definitions, the problem statement of mining HUIs over uncertain databases can be formulated as follows:  Given an uncertain database D with total utility is TU , the minimum utility threshold which is set as ?. The problem of MHUI over uncertain databases is to mine HUIs whose utilities are not less than (?? TU ).

From the example given in Tables 1 and Table 2, the set of HUIs is shown in Table 3 when the minimum utility threshold is set at ? = 25%.



III. PROPOSED A MINING HIGH UTILITY ITEMSETS ALGORITHM OVER UNCERTAIN DATABASES  To the best of our knowledge, this is the first paper to discuss the MHUI over uncertain databases. In this section, we propose the UHUI-apriori algorithm to mine HUIs over uncertain databases.

A. Pruning strategy by downward closure property  In the well-known Apriori algorithm, the downward closure (DC) property is kept to reduce the number of candidates for association-rule mining (ARM). The DC property is also kept in the designed UHUI-apriori algorithm for mining HUIs. In MUHI over uncertain databases, the DC property of ARM could not be directly extended to mine HUIs. The transaction- weighted downward closure (TWDC) property was proposed to reduce the search space in MHUI.

Definition 7: The transaction-weighted utility (TWU) of an itemset X is the sum of all transaction utilities TU(Td) containing an itemset X, which is defined as:  TWU(X) = ?  X?Td?Td?D TU(Td) (7)  Definition 8: An itemset X is considered as a high transaction-weighted utilization itemset (HTWUI) if its TWU(X) ? TU ? ?.

In Table 1, the TWU of an item (E) is calculated as TWU(E) = TU(T1) + TU(T3) + TU(T5) + TU(T7) +     TU(T8) + TU(T10) = (74 + 63 + 30 + 44 + 19 + 53) = 283.

An item (E) is considered as a HTWUI since TWU(E) = 283 ? 134.

Theorem 1 (Downward Closure Property of HTWUI): Let Xk and Xk?1 be the HTWUI from uncertain databases, and Xk?1 ? Xk. The TWU(Xk?1) ? TWU(Xk).

Proof: Let Xk?1 be a (k-1)-itemset and its superset k- itemset is denoted as Xk. Since Xk?1 ? Xk, thus,  TWU(Xk) = ?  Xk?Td?Td?D TU(Td)  ? ?  Xk?1?Td?Td?D TU(Td)  = TWU(Xk?1). (8)  corollary 1: If an itemset Xk is a HTWUI, every subset Xk?1 of Xk is a HTWUI.

corollary 2: If an itemset Xk is not a HTWUI, no superset Xk+1 of Xk is a HTWUI.

Theorem 2 (HUIs ? HTWUIs): The transaction-weighted downward closure(TWDC) property ensures that HUIs ? HTWUIs, which indicates that if an itemset is not a HTWUI, then none of its supersets will be HUIs.

Proof: ?X ? D, X is an itemset; thus, U(X) =  ?  X?Td?Td?D U(X,Td)  ? ?  X?Td?Td?D TU(Td)  = TWU(X). (9)  B. Detail of UHUI-apriori algorithm  The proposed UHUI-apriori algorithms has two phases: in the first phase, the HTWUIs are found, and in the second phase, the HUIs are drived with an additional database rescan.

The TWUDC property inherits the TWDC property of the two-phase model to keep the downward closure property, thus reducing the search space for finding HUIs. Only the remaining HTWUIk?1 will be used to generate the next Ck at each level. Based on the above definitions and theorems, detail of the proposed UHUI-apriori algorithm is described in UHUI- apriori algorithm.

Based on the designed TWUDC property, Theorem 2 en- sures that the proposed UHUI-apriori algorithm can make sure that no supersets of small transaction-weighted itemsets are in the preliminary candidate set (correctness) and can extract the complete HUIs from the candidate HTWUIs (completeness).

Therefore, the results of the proposed UHUI-apriori algorithm are correct and complete.

The proposed UHUI-apriori algorithm first scans the database to find the TWU values and the probabilities of all 1-itemsets in database(Line 1 to 3). The set of HTWUIk (k is initially set as 1) is then produced (Lines 4 to 8) and will be further used to generate the next candidates CK+1 for discovering HTWUIk+1 in a level-wise way (Lines 11 to 20).

In this process, the original database has to be rescanned to find the HTWUIk+1 (Line 14). The first phase of UHUI-apriori algorithm is terminated when no candidate is generated. An additional database rescan is required in the second phase to find the final HUIs from the HTWUIs (Lines 22 to 29).

Algorithm 1: Sample algorithm Require: D, an uncertain database; utable, utility table; ?  minimum utility threshold; Ensure: the set of high utility itemsets (HUIs).

1: for each Td in D ? ij in Td do 2: calculate TWU(ij).

3: end for 4: for each Td in D ? ij in Td do 5: if TWU(ij)? TU ? ? then 6: HTWUI1 ?? ij .

7: end if 8: end for 9: set k ?? 2.

10: set X as (k)-itemset.

11: while HTWUIk?1 ?= null do 12: Ck ?? Apriorigen(HTWUIk?1).

13: for each k-itemset X in Ck do 14: scan D to find TWU(X).

15: if TWU(X)? TU ? ? then 16: HTWUIk ?? X.

17: end if 18: end for 19: k ?? K+1.

20: end while 21: HTWUIs ?? HTWUIk 22: for each k-itemset X in HTWUIs do 23: scan D to find u(X).

24: if u(X)? TU ? ? then 25: HUIk ?? X .

26: end if 27: end for 28: HUIs ?? HUIk.

C. An illustrated example of UHUI-apriori algorithm  In order to keep consistency, Tables 1 and 2 are used to illustrate the proposed UHUI-apriori algorithm as the example step-by-step. Assume the minimum utility threshold is also set at 25%. The minimum support count can be calculated as (44.2 ? 25%) = 11.05. The UHUI-apriori algorithm first scans the database to find the TWU values of all 1-itemsets in the databases. The results are (A:30.3; B:22.2; C:33.6; D:20.9; E:28.3) in (A:30.3) indicates that the TWU(A) = 30.3. In this example, all itemsets satisfies the above conditions and then put into the set of HTWUI1. Based on the designed UHUI- apriori algorithm, C2 are then generated from HTWUI1.

A database scan is required to find the TWU values of C2 as (AB:10.7; AC:25.9; AD:16.6; AE:18.1; BC:11.6; BD:8.7; BE:20.9; CD:12.2; CE:19; DE:7.4). Among them, only the itemsets (AC, AD, AE, BE, CD, CE) satisfy the condition as TWU(X) ? 11.05; they are then put into the set of HTWUI2. The variable k is then set to 3. This process is repeated until no candidates are generated. The results are shown in Table 4.

After the first phase, the second phase is executed with an additional database scan to find the actual utility value of each remaining candidate. The results of HUIs were shown in Table 3.

TABLE IV. DERIVED HTWUIS OVER AN UNCERTAIN DATABASE  Itemset TWU (A) 30.3 (B) 22.2 (C) 33.6 (D) 20.9 (E) 28.3  (AC) 25.9 (AD) 16.6 (AE) 18.1 (BE) 20.9 (CD) 12.2 (CE) 19  (ACD) 12.2 (ACE) 13.7  TABLE V. CHARACTERISTICS OF USED DATASETS  Database |D| |I| AvgLen MaxLen Type accidents 340,183 468 33.8 51 dense  T10I4D100K 100,000 870 10.1 29 sparse

IV. EXPERIMENTAL EVALUATION  Experiments for mining HUIs over uncertain datasets were conducted to evaluate the performance of the UHUI-apriori algorithm and the algorithm of direct traversal in terms of run- time, memory consumption. The algorithms in the experiments were implemented in C++ and performed on a PC with an Intel Core i5-3460 processor and 4GB of RAM. The platform is Visual Studio 2010 and 64-bit Microsoft Windows 7 OS.

Experiments under varied minimum utility thresholds (MUs) is discussed below.

A. Datasets  Both real-life and synthetic datasets were used in the experiments. A real-life datasets, namely accidents datasets, as well as one synthetic dataset, T10I4D100K, were used in the experiments to evaluate the performance of two algorithms.

The utility values are assigned to the items in accidents and T10I4D100K datasets by simulation model. In addition, due to the tuple uncertainty property, each transaction in these datasets is assigned a unique probability value in the range of 0.1 to 0.5. The characteristics of used datasets are shown in Table 5.

0.6 0.8 1 1.2 1.4  R u  n ?  m e  (s )  Minimum u?lity threthold(%)  (a) accidents UHUI-apriori  Traversal        0.05 0.1 0.15 0.2 0.25  R u  n ?  m e  (s )  Minimum u?lity threthold(%)  (b) T10I4D100K  UHUI-apriori  Traversal  Fig. 1. Runtime of two algorithms under varied MUs  B. Runtime  The runtime of the two algorithms under varied MUs are compared and shown in Fig.1.

From Fig.1, we can observe that the proposed UHUI- apriori algorithm has better performance than the algorithm of direct traversal.

C. Memory Consumption  The memory consumption of the two algorithms under varied MUs are compared and shown in Fig.2.

0.6 0.8 1 1.2 1.4  ) B  M( yr  o m  e M  Minimum u?lity threshold(%)  (a)accidents  UHUI-apriori Traversal          0.05 0.1 0.15 0.2 0.25  M e  m o  ry ?  M B ?  Minimum u?lity threshold(%)  (b)T10I4D100K  UHUI-apriori Traversal  Fig. 2. Memory consumption under varied MUs  From Fig.2, it can be clearly seen that the proposed UHUI-apriori algorithm requires less memory compared to the algorithm of direct traversal under varied MUs.



V. CONCLUSION AND FUTURE WORKS  In this paper, a UHUI-apriori algorithm is proposed for mining high utility itemsets over uncertain databases. Different from the algorithm of direct traversal, UHUI-apriori algorithm is based on the TWUDC property. By the evaluation of experiments, UHUI-apriori algorithm is much better than the algorithm of direct traversal in both running time and memory consumption.

Since this is the first work for mining high utility itemsets over uncertain databases, further research issues including dy- namic data mining, stream mining, and top-k patterns mining can also be studied. Besides, designing more efficient and condensed structure based on different uncertain models for mining the desired information is also another critical issue in the nearly future.

