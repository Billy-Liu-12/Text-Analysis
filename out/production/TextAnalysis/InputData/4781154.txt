Finding Good Itemsets by Packing Data

Abstract  The problem of selecting small groups of itemsets that  represent the data well has recently gained a lot of atten-  tion. We approach the problem by searching for the itemsets  that compress the data efficiently. As a compression tech-  nique we use decision trees combined with a refined ver-  sion of MDL. More formally, assuming that the items are  ordered, we create a decision tree for each item that may  only depend on the previous items. Our approach allows  us to find complex interactions between the attributes, not  just co-occurrences of 1s. Further, we present a link be-  tween the itemsets and the decision trees and use this link  to export the itemsets from the decision trees. In this paper  we present two algorithms. The first one is a simple greedy  approach that builds a family of itemsets directly from data.

The second one, given a collection of candidate itemsets, se-  lects a small subset of these itemsets. Our experiments show  that these approaches result in compact and high quality de-  scriptions of the data.

1 Introduction  One of the major topics in data mining research is the  discovery of interesting patterns in data. From the introduc-  tion of frequent itemset mining and association rules [2],  the pattern explosion was acknowledged: at high frequency  thresholds only common knowledge is revealed, while at  low thresholds prohibitively many patterns are returned.

Part of this problem can be solved by reducing these col-  lections either lossless or lossy, however even then the re-  sulting collections are often so large that they cannot be an-  alyzed by hand or even machine. Recently, it was therefore  argued [14] that while the efficiency of the search process  has received ample attention, there still exists a strong need  for pattern mining approaches that deliver compact, yet high  quality, collections of patterns (see Section 6 for a more  detailed discussion). Our goal is to identify the family of  itemsets that form the best description of the data. Recent  proposals to this end all consider just part of the data, by ei-  ther only considering co-occurrences [30] or being lossy in  nature [5, 7, 20]. In this paper, we present two methods that  do describe all interactions in the data. Although different  in approach, both methods return small families of itemsets,  which are selected to provide high-quality lossless descrip-  tions of the data in terms of local patterns. Importantly, our  parameterless methods regard the data symmetrically. That  is, we consider not just the 1s in the data, but also the 0s.

Therefore, we are able to find patterns that describe all inter-  actions between items in the data, not just co-occurrences.

As a measure of quality for the collection of itemsets  we employ the practical variant of Kolmogorov Complex-  ity [23], the Minimum Description Length (MDL) princi-  ple [13]. This principle implies that we should do induction  through compression. It states that the best model is the  model that provides the best compression of the data: it is  the model that captures best the regularities of the data, with  as little redundancy as possible.

The main idea of our approach is to use decision trees  to determine the shortest possible encoding of an attribute,  by using the values of already transmitted attributes. For  example, let us assume two binary attributes A and B. Now say that for 90% of the time when the attribute A has a value of 1, the attribute B has a value of 0. If this situation occurs frequently, we recognize this dependency, and include the  item A in the tree deciding how to encode B.

Using such trees allows us to find complex interactions  between the items while at the same time MDL provides  us with a parameter-free framework for removing fake in-  teractions that are due to the noise in the data. The main  outcome of our methods is not the decision trees, but the  group of itemsets that form their paths: these are the impor-   DOI 10.1109/ICDM.2008.39    DOI 10.1109/ICDM.2008.39     tant patterns in the data since they capture the dependencies  between the attributes implied by the decision trees.

The two algorithms we introduce to this end are orthogo-  nal in approach. Our first method builds the encoding deci-  sion trees directly from the data; it greedily introduces splits  until no split can help to compress the data further. Just as  naturally as we can extract itemsets from these trees, we can  consider the trees that can be built from a collection of item-  sets. That link is exploited by our second method, which  tries to select the best itemsets from a larger collection.

Experimental evaluation shows that both methods return  small collections of itemsets that provide high quality data  descriptions. These sets allow for very short encoding of  the data, which inherently shows that the most important  patterns in the data are captured. As the number of item-  sets are small, we can easily expose the resulting itemsets  to further analysis, either by hand or by machine.

The rest of this paper is as follows. After the covering  preliminaries in Section 2, we discuss how to use decision  trees to optimally encode the data succinct in Section 3.

Next, in Section 4, we explain the connection between de-  cision trees and itemsets. Section 5 introduces our method  with which good itemsets can be selected by weighing these  through our decision tree encoding. Related work is dis-  cussed in Section 6, after which we present the experiments  on our methods in Section 7. We round up with discussion  and conclusions in Sections 8 and 9.

2 Preliminaries and Notation  In this section we introduce preliminaries and notations  used in subsequent sections.

A binary dataset D is a collection of |D| transactions, binary vectors of length K . The ith element of a random transaction is represented by an attribute ai, a Bernoulli ran- dom variable. We denote the collection of all the attributes  by A = {a1, . . . , aK}. An itemset X = {x1, . . . , xL} ? A is a subset of attributes. We will often use the dense notation  X = x1 ? ? ?xL.

Given an itemset X and a binary vector v of length L,  we use the notation p(X = v) to express the probability of p(x1 = v1, . . . , xL = vL). If v contains only 1s, then we will use the notation p(X = 1), if v contains only 0s, then we will use the notation p(X = 0).

Given a binary dataset D we define qD to be an empirical distribution,  qD(A = v) = |{t ? D | t = v}|/|D|.

We define the frequency of an itemset X to be fr(X) = qD(X = 1).

In the paper we use the common convention 0 log 0 = 0.

All logarithms in the paper are of base 2.

In the subsequent sections we will need some knowledge  of graphs. All the graphs in the paper are directed. Given  a graph G we denote by V (G) the set of vertices and by E(G) the edges of G. A directed graph is said to be acyclic (DAG) if there is no cycle in the graph. A directed graph is  said to be directed spanning tree if each node (except one  special node) has exactly one outgoing edge. The special  node has no outgoing edge and is called sink.

3 Packing Binary Data with Decision Trees  In this section we present our model for packing the data  and a greedy algorithm for searching good models.

3.1 The Definition of the Model  Our goal in this section is to define a model that is used to  transmit a binary dataset D from a transmitter to a receiver.

We do this by transmitting one transaction at the time, the  order of which does not matter. Within a single transaction  we transmit the items one at the time.

Assume that we are transmitting an attribute at. As the attribute may have two values, we need to have two codes  to indicate its value. We define the table in which these two  codes are stored to be a coding table. Obviously, the codes  need to be optimal, that is, as short as possible. From infor-  mation theory [10], we have the optimal Shannon codes of  length? log(p(x)). Here, the optimal code lengths are thus ? log qD(at = 1) and ? log qD(at = 0). We need to trans- mit the attribute |D| times. The cost of these transmissions is  ?|D| ?  v={0,1}  qD(at = v) log qD(at = v) .

This is the simplest case of encoding at. Note that we are not interested in the actual codes, but only in their lengths:  they allow us to determine the complexity of a model.

A more complex and more interesting approach to en-  code at succinct is to have several coding tables from which the transmitter chooses one for transmission. Choosing the  coding table is done via a decision tree that branches on the  values of other attributes in the same transaction. That is,  we have a decision tree used for encoding at in which each leaf node is associated with a different coding table of at.

The leaf is selected by testing the values of other attributes  within the same transaction.

Example 1. Assume that we have three attributes, a, b, and c and consider the trees given in Figure 1. In Figure 1(a) we have the simplest tree, a simple coding table with no depen-  dencies at all. A more complex tree is given in Figure 1(b)  where the transmitter chooses from two coding table for a based on the value of c. Similarly in, Figure 1(d) we have     p(a = 1) = 0.5  p(a = 0) = 0.5  (a) T1, Trivial tree encoding a  p(a = 1) = 0.6  p(a = 0) = 0.4  p(a = 1) = 0.8  p(a = 0) = 0.2  c  1 0  (b) T2, Alternative tree for a  p(b = 1) = 0.3  p(b = 0) = 0.7  p(b = 1) = 0.1  p(b = 0) = 0.9  a  1 0  (c) T3, Tree for b  p(c = 1) = 0.6  p(c = 0) = 0.4  p(c = 1) = 0.8  p(c = 0) = 0.2  p(c = 1) = 0.3  p(c = 0) = 0.7  a   b   1 0  (d) T4, Tree for c  Figure 1. Toy decision trees.

three different coding tables for c. The choice of the coding table in this case is based on the values of a and b.

Let us introduce some notation. Let T be a tree encoding at. We use the notation t(T ) = at. We set src(T ) to be the set of all items used in T for choosing the coding table.

Example 2. For the tree T3 in Figure 1(c) we have t(T3) = b and src(T3) = {a} and for T4 in Figure 1(d) we have t(T4) and src(T4) = {a, b}.

To define the cost of transmitting at we first define lvs(T ) to be the set of all leaves in T . Let L ? lvs(T ) be a leaf and qD(L) be the probability of L being chosen.

Further, qD(at = v | L) is the probability of at = v given that L is chosen. We now know that the optimal cost, de- noted by cD(T ), is  ?|D| ?  L?lvs(T )  ?  v={0,1}  qD(at = v, L) log qD(at = v | L) .

Example 3. The number of bits needed by T1 in Figure 1(a) to transmit a in a random transaction is  ?0.5 log 0.5? 0.5 log 0.5 = 1.

Similarly, if we assume that qD(a = 1) = qD(a = 0) = 0.5, the number of bits needed by T3 to transmit c in a ran- dom transaction is  0.5 (?0.3 log 0.3? 0.7 log 0.7)+  0.5 (?0.1 log 0.1? 0.9 log 0.9) = 0.62.

In order for the receiver to decode the attribute at he must know what coding table was used. Thus, he must be  able to use the same decision tree that the transmitter used  for encoding at. To ensure this, the transmitter must know  src(T ) when decoding at. So, the attributes must have an order in which they are sent and the decision trees may only  use the attributes that have already been transmitted.

The aforementioned requirement is easily characterized  by the following construction. Let G be a directed graph with K nodes, each node corresponding to an attribute. The graph G contains all the edges of form (at, as) where as ? src(T ), where T is the tree encoding at. We call G the dependency graph. It is easy to see that there exists an order  of the attributes if and only if G is an acyclic graph (DAG).

If G constructed from a set of trees T = {T1, . . . , TK} is indeed DAG we call the set T a decision tree model.

Example 4. Consider a graph given in Figure 2(a) con-  structed from the trees T2, T3, and T4 (Figure 1). We cannot use this combination of trees for encoding since there is a  cycle in the graph. On the other hand if we use trees T1, T3, and T4, then the resulting graph (given in Figure 2(b)) is acyclic and thus these trees can be used for the transmis-  sion.

c  a  b  (a) Dependency graph with cycles  c  a  b  (b) Dependency acyclic graph  Figure 2. Dependency graphs constructed from the trees given in Figure 1.

3.2 Encoding the Data  In order for the receiver to be able to decode the at-  tributes, he must know both the coding tables and the trees.

Hence, we need to transmit both of these. First, we cover  how the coding tables, the leafs of the decision trees, are  transmitted.

To transmit the coding tables we use the concept of Re-  fined MDL [13]. Refined MDL is an improved version of  the more traditional two-part MDL (sometimes referred to  as the crude MDL). The basic idea of the refined variant is  that instead of transmitting the coding tables, the transmit-  ter and the receiver use so called universal codes. Universal  codes are the cornerstone of Refined MDL. As these are  codes can be derived without any further shared informa-  tion, this allows for a good weighing of the actual complex-  ity of the data and model, with virtually no overhead. While  the practicality of applying such codes depends on the type  of the model, our decision trees are particularly well-suited.

These universal codes provide a cost called the complex-  ity of the model. This cost can be calculated as follows: let  L be a leaf in the decision tree (i.e. coding table), and M be the number of transactions for which L is used. Then the complexity of this leaf, denoted by cMDL(L), is  cMDL(L) = log M ?  k=0  (  M  k  ) (  k  M  )k ( M ? k  M  )M?k  .

In general, there is no known closed formula for the com-  plexity of the model. Hence estimates are usually em-  ployed [29]. However, for our tree models we can apply  an existing linear-time algorithm that solves the complexity  for multinomial models [21]. We should also point out that  the Refined MDL is asymptotically equivalent to Bayes In-  formation Criteria (BIC) if the number of transactions goes  to infinity and the number of free parameters stays fixed.

However, for moderate numbers of transactions there may  be significant differences [13].

Now that the coding tables can be transmitted, we need  to know how to transmit the actual tree T . To encode the tree we simply transmit the nodes of the tree in a sequence.

We use one bit to indicate whether the node is a leaf, or an  intermediate node N ? intr(T ). For an intermediate node we additionally use log K bits, where K is the number of attributes in D, to indicate the item that is used for the split.

The combined cost of a tree T , denoted by c(T ), is  c(T ) = ?  N?intr(T )  (  1 + log K )  + cD(T ) + ?  L?lvs(T )  (  1 + cMDL(L) )  ,  that is, the cost c(T ) is the number of bits needed to transmit the tree and the attribute at in each transaction of D.

Example 5. Assume that we have a dataset with 100 trans- actions and 3 items. Assume also that qD(a = 0) = qD(a = 1) = 0.5. We know that the complexity of the leaves in this case is cMDL(L) = 3.25. The cost of the tree T3 (Fig- ure 1(c) is  c(T3) =1 + log 3  + 1 + 3.25 + 50 (?0.3 log 0.3? 0.7 log 0.7)  + 1 + 3.25 + 50 (?0.1 log 0.1? 0.9 log 0.9)  =69.8.

Given a decision tree model T = {T1, . . . , TK} we de- fine the cost c(T ) =  ?  i c(Ti). The cost c(T ) is the number of bits needed to transmit the trees, one for each attribute,  and the complete dataset D.

We should point out that for data with many items, the  term log K grows and hence the threshold increases for se- lecting an attribute into any decision tree. This is an inter-  esting behavior, as due to the finite number of transactions,  for datasets with many items there is an increased proba-  bility that two items will correlate, even though they are  independent according to the generative distribution.

3.3 Greedy Algorithm  Our goal is to find the decision tree model with the lowest  complexity cost. However, since many problems related to  the decision trees are NP-complete [26] we will resort to a  greedy heuristic to approximate the decision tree model T with the lowest c(T ). It is based on the ID3 algorithm.

To fully introduce the algorithm we need some notation:  By TRIVIALTREE(at) we mean the simplest tree packing at without any other attributes (see Figure 1(a)). Given a tree  T , a leaf L ? lvs(T ), and an item c not occurring in the path from L to the root of T , we define SPLITTREE(T, L, c) to be a new tree where L is replaced by a non-leaf node testing the value of c and having two leaves as the branches.

The algorithm GREEDYPACK starts with a tree model  consisting only of trivial trees. The algorithm finds the tree  which saves the most bits by splitting. To ensure that the  decision tree model is valid, GREEDYPACK builds a de-  pendency graph G describing the dependencies of the trees and makes sure that G is acyclic. The algorithm terminates when no further split can be made that saves any bits.

Algorithm 1 GREEDYPACK algorithm constructs a deci-  sion tree model T = {T1, . . . , TK} from a binary data D.

1: V ? {v1, . . . , vK}, E ? ?.

2: G? (V, E).

3: Ti ? TRIVIALTREE(ai) , for i = 1, . . . , K .

4: while there are changes do  5: for i = 1, . . . , K do 6: Oi ? Ti.

7: for L ? lvs(Ti), j = 1, . . . , K do 8: if E?(vi, vj) is acyclic and aj /? path(L) then 9: U ? SPLITTREE(Ti, L, aj).

10: if c(U) < c(Oi) then 11: Oi ? U , si ? j.

12: end if  13: end if  14: end for  15: end for  16: k ? arg mini {c(Oi)? c(Ti)}.

17: if c(Ok) < c(Tk) then 18: Tk ? Ok.

19: E ? E ? (vk, vsk).

20: end if  21: end while  22: return {T1, . . . , TK}.

4 Itemsets and Decision Trees  So far we have discussed how to transmit binary data by  using decision trees. In this section we present how to select  the itemsets representing the dependencies implied by the  decision trees. We will use this link in Section 5. A similar  link between itemsets and decision trees is explored in [27]  although our setup and goals are different.

Given a leaf L, the dependency of the item at is captured in the coding table of L. Hence we are interested in finding itemsets that carry the same information. That is, itemsets  from which we can compute the coding table. To derive the  codes for the leaf L it is sufficient to compute the probability  qD(at = 1 | L) = qD(at = 1, L) /qD(L) . (1)  Our goal is to express the probabilities on the right side  of the equation using itemsets. In order to do that let P be the path from L to its root. Let pos(L) be the items along the path P which are tested positive. Similarly, let neg(L) be the attributes which are tested negative. Using the inclusion-exclusion principle we see that  qD(L) = qD(pos(L) = 1, neg(L) = 0)  = ?  V ?neg(L)  (?1)|V |fr(pos(L) ? V ) . (2)  We compute qD(at = 1, L) in a similar fashion. Let us de- fine sets(L) for a given leaf L to be  sets(L) = {V ? pos(L) | V ? neg(L)}  ? {V ? pos(L) ? {at} | V ? neg(L)} .

Combining Eqs. 1?2 we see that the collection sets(L) sat- isfies our goal.

Proposition 6. The coding table associated with the leaf L can be computed from the frequencies of sets(L).

Example 7. Let L1, L2, and L3 be the leaves (from left to right) of T4 in Figure 1(d). Then the corresponding families of itemsets are sets(L1) = {a, ac}, sets(L2) = {b, ab, bc, abc}, and sets(L3) = {?, a, b, ab, c, ac, bc, abc}.

We can easily see that the family sets(L) is essentially the smallest family of itemsets from which the coding table  can be derived uniquely.

Proposition 8. Let G 6= sets(L) be a family of itemsets.

Then there are two data sets, say D1 and D2, for which qD1(at = 1 | L) 6= qD2(at = 1 | L) but fr(G; D1) = fr(G; D2).

Given a tree T we define sets(T ) to be sets(T ) = ?  L?lvs(T ) sets(L). We also define sets(T ) = ?  i sets(Ti)  where T = {T1, . . . , TK} is a decision tree model.

5 Choosing Good Itemsets  The connection between itemsets and decision trees  made in the previous section allows us to consider an or-  thogonal approach to identify good itemsets. Informally,  our goal is to construct decision trees from a family of item-  sets F , selecting the subset from F that provides the best compression of the data. More formally, our new approach  is as follows: given a downward closed family of itemsets  F , we build a decision tree model T = {T1, . . . , TK} pro- viding a good compression of the data, with sets(T ) ? F .

Before we can describe our main algorithm, we  need to introduce some further notation. Firstly, given  two trees Tp and Tn not using attribute c, we define JOINTREE(c, Tp, Tn) to be the join tree with c as the root node, Tp as the positive branch of c, and Tn as the negative branch of c. Secondly, to define our search algorithm we need to find the best tree  bt(at; S,F) = argmin T {c(T ) | t(T ) = at,  src(T ) ? S, sets(T ) ? F} ,  that is, bt(at; S,F), returns the best tree for at for which the related sets are in F and only splits on attributes in S.

To compute the optimal tree bt(at; S,F), we use the ex- haustive method (presented originally in [27]) given in Al-  gorithm 2. The algorithm is straightforward: it tests each  valid item as the root and recurses itself on both branches.

Algorithm 2 GENERATE algorithm for calculating  bt(at; S,F), that is, the best tree T for at using only S as source and having sets(T ) ? F .

1: B ? S ? ( ?  F).

2: C ? TRIVIALTREE(at).

3: for b ? B do 4: G ? {X ? b | b ? X ? F}.

5: (Dp, Dn)? SPLIT(D, b).

6: Tp ? GENERATE(at,G, S, Dp).

7: Tn ? GENERATE(at,G, S, Dn).

8: C ? C ? JOINTREE(b, Tp, Tn).

9: end for  10: return argminT {c(T ) | T ? C}.

We can now describe the actual algorithm for construct-  ing decision tree models with a low cost. Our method au-  tomatically discovers the order in which the attributes can  be transmitted most succinct. For this, it needs to find sets  of attributes Si for each attribute ai such that these should be encoded before ai. The collection S = {S1, . . . , SK} should define an acyclic graph and the actual trees are  bt(ai; Si,F). We use c(S) as a shorthand for the total com- plexity  ?  i c(bt(ai; Si,F)) of the best model built from S.

We construct the set S iteratively. At the beginning of the algorithm we have Si = ? and we increase the sets Si one attribute at a time. We allow ourselves to mark the at-  tributes. The idea is that once the attribute ai is marked, then we are not allowed to augment Si any longer. At the beginning none of the nodes are marked.

To describe a single step in the algorithm we consider  a graph H = (v0, . . . , vK), where v1, . . . , vK represent the attributes and v0 is a special auxiliary node. We start by adding edges (vi, v0) having the weight c(bt(ai; Si,F)), thus the cost of the best tree possible from F using only the attributes in Si. Then, for each unmarked node vi we find out what other extra attribute will help most to encode  it succinct. To do this, we add the edge (vi, vj) for each vj with the weight c(bt(ai; Si ? {aj} ,F)). Now, let U be the minimum directed spanning tree of H having v0 as the sink.

Consider an unmarked node vi such that (vi, v0) ? E(U).

That node is now the best choice to be fixed, as it helps to  encode the data best. We therefore mark attribute ai and add ai to each Sj for each ancestor vj of vi in U . This process is repeated until all attributes are marked. The details of the  algorithm are given in Algorithm 3.

Algorithm 3 The algorithm SETPACK constructs a deci-  sion tree model T given a family of itemsets F such that sets(T ) ? F . Returns a DAG, a family S = (S1, . . . , SK) of sets of attributes. The trees are Ti = bt(ai, Si,F).

1: S = (S1, . . . , SK)? (?, . . . , ?).

2: r = (r1, . . . , rK)? (false, . . . , false).

3: V ? {v0, . . . , vK}.

4: while there exists ri = false do 5: E ? ?.

6: for i = 1, . . . , K do 7: E ? E ? (vi, v0).

8: w(vi, v0)? c(bt(ai; Si,F)).

9: if ri = false then  10: for j = 1, . . . , K do 11: T ? bt(ai; Si ? {aj} ,F).

12: if c(T ) ? w(vi, v0) then 13: E ? E ? (vi, vj), w(vi, vj)? c(T ).

14: end if  15: end for  16: end if  17: end for  18: U ? dmst(V, E) {Directed Min. Spanning Tree.} 19: for (vi, v0) ? E(U) and ri = false do 20: ri ? true.

21: for vj is a parent of vi in U do 22: Sj ? Sj + ai.

23: end for  24: end for  25: end while  26: return S.

The marking of the attributes guarantees that there can  be no cycles in S. In fact, the marking order also tells us a valid order for transmitting the attributes. Further, as at least  one attribute is marked at each step, this guarantees that the  algorithm terminates in K steps.

Let S be the collection of sources. The following propo-  sition tells us that the augmentation performed by SETPACK  does not compromise the optimality of collections next to S.

Proposition 9. Assume the collection of sources S = {S1, . . . , SK}. Let O = {O1, . . . , OK} be the collection of sources such that Si ? Oi and |Oi| ? |Si|+1. Let S? be the collection that Algorithm 3 produces from S in a single step. Then there is a collection S? such that S?i ? S  ? i and  that c(S?) ? c(O).

Proof. Let G be the graph constructed by Algorithm 3 for the collection S. Construct the following graph W : For each Oi such that Oi = Si add the edge (vi, v0). For each Oi 6= Si add the edge (vi, vj), where {aj} = Oi ? Si.

But W is a directed spanning tree of G. Let U be the di- rected minimum spanning tree returned by the algorithm.

Let S?i = S ? i if (vi, v0) ? E(U) and S  ? i = S  ? i ? {aj} if  (vi, vj) ? E(U). Note that S ? defines a valid model and  because U is optimal we must have c(S?) ? c(O).

Corollary 10. Assume that F is a family of itemsets having 2 items, at maximum. The algorithm SETPACK returns the  optimal tree model.

Let us consider the complexity of the algorithms. The  algorithm SETPACK runs in a polynomial time. By using  dynamic programming we can show that GENERATE runs  in O(|F |2) time. We also tested a faster variant of the al- gorithm in which the exhaustive search in GENERATE is re-  placed by the greedy approach similar to the ID3 algorithm.

We call this variant SETPACKGREEDY.

6 Related Work  Finding interesting itemsets is a major research theme  in data mining. To this end, many measures have been  suggested over time. A classic measure for ranking item-  sets is frequency, for which there exist efficient search al-  gorithms [2, 15]. Other measures involve comparing how  much an itemset deviates from the independence assump-  tion [1,3,4,11]. In yet other approaches more flexible mod-  els are used, such as, Bayes networks [17, 18], Maximum  Entropy estimates [24, 31]. Related are also low-entropy  sets: itemsets for which the entropy of the data is low [16].

Many of these approaches suffer from the fact that they  require a user-defined threshold and further that at low  thresholds extremely many itemsets are returned, many of  which convey the same information. To address the latter     problem we can use closed [28] or non-derivable [6] item-  sets that provide a concise representation of the original  itemsets. However, these methods deteriorate even under  small amounts of noise.

Alternative to these approaches of describing the pattern  set, there are methods that instead pick groups of itemsets  that describe the data well. As such, we are not the first to  embrace the compression approach to data mining [12]. Re-  cently, Siebes et al. [30] introduced the MDL-based KRIMP  algorithm to battle the frequent itemset explosion at low  support thresholds. It returns small subsets of itemsets that  together capture the distribution of the data well. These  code tables have been successfully applied in classifica-  tion [22], measuring the dissimilarity of data [33], and data  generation [34]. While these applications shows the prac-  ticality of the approach, KRIMP can only describe the pat-  terns between the items that are present in the dataset. On  the other hand, we consider the 0s and the 1s in the data symmetrically and hence we are able to provide more de-  tailed descriptions of the data; including patterns between  the presence and absence of items.

More different from our methods are the lossy data de-  scription approaches. These strive to describe just part of  the data, and as such may overlook important interactions.

Summarization [7] is a compression approach that identifies  a group of itemsets such that each transaction is summarized  by one set with as little loss of information as possible. Yet  different are pattern teams [20], which are groups of most-  informative length-k itemsets [19], selected through an ex- ternal interestingness measure. As this approach is compu-  tationally intensive, the number of team members is typi-  cally < 10. Bringmann et al. [5] proposed a similar selec- tion method that can consider larger pattern sets. However,  it also requires the user to choose a quality measure to which  the pattern set has to be optimized, unlike our parameter-  free and lossless method.

Alternatively we can view the approach in this paper as  building a global model for data and then selecting the item-  sets that describe the model. This approach then allows us  to use MDL as a model selection technique. In a related  work [32] the authors build decomposable models in order  to select a small family of itemsets that model the data well.

The decision trees returned by our methods, and partic-  ularly the DAG that they form, have a passing resemblance  to Bayes networks [9]. However, as both the model con-  struction and complexity weighing differ strongly, so do the  outcomes. To be more precise, in our case the distribu-  tions p(x, par(x)) are modeled and weighted via decision trees whereas in the Bayes network setup any distribution is  weighted equally. Furthermore, we use the correspondence  between the itemsets and the decision trees to output local  patterns, as opposed to Bayes networks which are tradition-  ally used as global models.

7 Experiments  This section contains the results of the empirical evalua-  tion of our methods using toy and real datasets.

7.1 Datasets  For the experimental validation of the two packing strate-  gies we use a group of datasets with strongly differing statis-  tics. From the LUCS/KDD repository [8] we took a number  of often used databases to allow for comparison to other  methods. To test our methods on real data we used the  Mammals presence database and the Helsinki CS-courses  dataset. The latter contains the enrollment records of stu-  dents taking courses at the Department of Computer Sci-  ence of the University of Helsinki. The mammals dataset  consists of the absence/presence of European mammals [25]  in geographical areas of 50x50 kilometers.1 The details of  these datasets are provided in Table 1.

Table 1. Statistics of the datasets used in the experiments.

Dataset |D| K % of 1?s  anneal 898 71 20.1  breast 699 16 62.4  courses 3506 98 4.6  mammals 2183 40 46.9  mushroom 8124 119 19.3  nursery 12960 32 28.1  pageblocks 5473 44 25.0  tic?tac?toe 958 29 34.5  7.2 Experiments with Toy Datasets  To evaluate whether our method correctly identifies  (in)dependencies, we start our experimentation using two  artificial datasets of 2000 transactions and 10 items. For  both databases, the data is generated per transaction, and  the presence of the first item is based on a fair coin toss.

For the first database, the other items are similarly gener-  ated. However, for the second database, the presence of an  item is 90% dependent on the previous item. As such, both  datasets have item densities of about 50%.

If we apply GREEDYPACK, our greedy decision tree  building method, to these datasets we see that it is unable  to compress the independent database at all. Opposing, the  dependently generated dataset can be compressed into only  1The full version of the dataset is available for research purposes upon  request, http://www.european-mammals.org.

Table 2. Compression, number of trees and numbers of extracted itemsets for the greedy algorithm.

GREEDYPACK KRIMP  Dataset c(Tb) (bits) c(T ) (bits) c(T ) c(Tb)  (%) # trees # sets min?sup # sets # bits ratio (%)  anneal 23104 12342 53.4 71 1203 1 102 22154 34.6  breast 8099 2998 37.0 16 17 1 30 4613 16.9  courses 76326 61685 80.8 98 1230 2 148 71019 79.3  mammals 78044 50068 64.2 40 845 200 254 90192 42.3  mushroom 442062 115347 26.1 119 999 1 424 231877 20.9  nursery 337477 180803 53.6 32 3409 1 260 258898 45.5  pageblocks 15280 7611 49.8 44 219 1 53 10911 5.0  tic?tac?toe 25123 14137 56.3 29 619 1 162 28812 62.3  50% of the original number of bits. Inspection of the re-  sulting itemsets show that the resulting model correctly de-  scribes the dependencies in detail: The resulting 19 itemsets are {a1, . . . , a10, a1a2, . . . , a9a10}.

7.3 The Greedy Method  Recall that our goal is to find high quality descriptions  of the data. Following the MDL principle, the quality of  the found descriptions can objectively be measured by the  compression of the data. We present the compressed sizes  for GREEDYPACK in Table 2. The encoding costs c(T ) in- clude the size of the encoded data and the decision trees.

The initial costs, as denoted by c(Tb), are those of encoding the data using na??ve single-node TRIVIALTREEs. Each of  these experiments required 1?10 seconds runtime, with an  exception of 60s for mushroom.

From Table 2, we see that all models returned by  GREEDYPACK strongly reduce the number of bits required  to describe the data; this implicitly shows that good models  are returned. The quality can be gauged by taking the com-  pression ratios into account. In general, our greedy method  reduces the number of bits to only half of what the inde-  pendent model requires. As two specific examples of the  found dependencies, in the courses dataset the course Data  Mining was packed using Machine Learning, Software En-  gineering, Information Retrieval Methods and Data Ware-  houses. Likewise, AI and Machine Learning were used to  pack the Robotics course.

Like discussed above, our approach and the KRIMP [30]  algorithm have stark differences in what part of the data is  considered. However, as both methods use compression,  and result good itemsets, it is insightful to compare the al-  gorithms. For the latter we here allow it to compress as  well as possible, and thus, consider candidates up to as low  min-sup thresholds as feasible.

Let us compare between the outcomes of either method.

For KRIMP these are itemsets, for ours it is the combina-  tion of the decision trees and the related itemsets. We see  that KRIMP typically returns fewer itemsets than GREEDY-  PACK. However, our method returns itemsets that describe  interactions between both present and absent items.

Next, we observed that especially the initial KRIMP com-  pression requires many more bits than ours, and as such  KRIMP attains better compression ratios. However, if we  disregard the ratios and look at the raw number of bits the  two methods require, we see that KRIMP generally requires  twice as many bits to describe only the 1?s in the data than  GREEDYPACK does to represent all of the data.

7.4 Validation through Classification  To further assess the quality of our models we use a sim-  ple classification scheme [22]. First, we split the training  database into separate class-databases. We pack each of  these. Next, the class labels of the unseen transactions were  assigned according to the model that compressed it best.

We ran these experiments for three databases, viz. mush-  room, breast and anneal. A random 90% of the data was  used to train the models, leaving 10% to test the accuracy  on. The accuracy scores we noted, resp. 100%, 98.0% and  93.4%, are fully comparable to (and for the second, even  better than) the classifiers considered in [22].

7.5 Choosing Good Itemsets  In this subsection we evaluate SETPACK, our itemset se-  lection algorithm. Recall that this algorithm selects item-  sets such that they allow for building succinct encoding de-  cision trees. The difference with GREEDYPACK is that in  this setup the resulting itemsets should be a subset of a  given candidate family. Here, we consider frequent item-  sets as candidates. We set the support threshold such that  the experiments with SETPACK were finished within 12?2  hours, with an exception of 23 hours for considering the     Table 3. Compressed sizes and number of extracted itemsets for the itemset selection algorithms.

Candidate Itemsets SETPACK SETPACKGREEDY KRIMP  Dataset min-sup # sets c(T ) c(T ) c(Tb)  (%) # sets c(T ) c(T ) c(Tb)  (%) # sets # bits # sets  anneal 175 8837 20777 89.9 103 20781 89.9 69 31196 53  breast 1 9920 5175 63.7 42 5172 63.9 49 4613 30  courses 55 5030 64835 84.9 268 64937 85.1 262 73287 93  mammals 700 7169 65091 83.4 427 65622 84.1 382 124737 125  mushroom 1000 123277 313428 70.9 636 262942 59.5 1225 474240 140  nursery 50 25777 314081 93.0 276 314295 93.1 218 265064 225  pageblocks 1 63599 11961 78.3 92 11967 78.3 95 10911 53  tic?tac?toe 7 34019 23118 92.0 620 23616 94.0 277 28957 159  large candidate family for mushroom. For comparison we  use the same candidates for KRIMP. We also compare to  SETPACKGREEDY, which required 1?12 minutes, 7 min-  utes typically, with an exception of 2 12 hours for mushroom.

Comparing the results of this experiment (Table 3) with  the results of GREEDYPACK in the previous experiment, we  see that the selection process is more strict: now even fewer  itemsets are regarded as interesting enough. Large candi-  date collections are strongly reduced in number: up to three  orders of magnitude. On the other hand, the compression  ratios are still very good. The reason that GREEDYPACK  produces smaller compression ratios is because it is allowed  to consider any itemset.

Further, the fact alone that even with this very strict se-  lection the compression ratios are generally well below 90%  show that these few sets are indeed of high importance to  describing the major interactions in the data.

If we compare the number of selected sets to KRIMP,  we see that our method returns in the same order as many  itemsets. These descriptions require far less bits than those  found by KRIMP. As such, ours are a better approximation  of the Kolmogorov complexity of the data.

Between SETPACK and SETPACKGREEDY the out-  comes are very much alike; this goes for both the obtained  compression as well as the number of returned itemsets.

However, the greedy search of SETPACKGREEDY allows  for much shorter running times.

8 Discussion  The experimentation on our methods validates the qual-  ity of the returned models. The models correctly detect de-  pendencies in the data while ignoring independencies. Only  a small number of itemsets is returned, which are shown to  provide strong compression of the data. By the MDL prin-  ciple we then know these describes all important regulari-  ties in the data distribution in detail efficiently and without  redundancy. This claim is further supported by the high  classification accuracies our models achieve.

The GREEDYPACK algorithm generally uses more item-  sets and obtains better packing ratios than SETPACK. While  GREEDYPACK is allowed to use any itemset, SETPACK  may only use frequent itemsets. This suggests that we may  able to achieve better ratios if we use different candidates,  for example, low-entropy sets [16].

The running times of the experiments reported in this  work range from seconds to hours and depend mainly on the  number of attributes and rows of the datasets. The exhaus-  tive version SETPACK may be slow on very large candidate  sets, however, the greedy version SETPACKGREEDY can  even handle such families well. Considering that our current  implementation is rather na??ve and the fact that both meth-  ods are easily parallelized, both GREEDYPACK and SET-  PACKGREEDY are suited for the analysis of large databases.

The main outcomes of our models are the itemsets that  identify the encoding paths. However, the decision trees  from which these sets are extracted can also be regarded as  interesting as these provide an easily interpretable view on  the major interactions in the data. Further, just considering  the attributes used in such a tree as an itemset also allows  for simple inspection of the main associations.

In this work we employ the MDL criterion to identify  the optimal model. Alternatively, one could consider using  either BIC or AIC, both of which can easily be applied to  judge between our decision tree-based models.

9 Conclusions  In this paper we presented two methods that find com-  pact sets of high quality itemsets. Both methods employ  compression to select the group of patterns that describe all  interactions in the data best. That is, the data is considered  symmetric and thus both the 0s and 1s are taken into account  in these descriptions. Experimentation with our methods     showed that high quality models are returned. Their com-  pact size, typically tens to thousands of itemsets, allow for  easy further analysis of the found interactions.

