Frequent Itemsets Mining Algorithm Based on Node  Linked List FP-Tree

Abstract?Aiming at the problem of low efficiencies for frequent item sets mining based on FP-Tree, which need a great lot of recursion call. This paper proposes another mining algorithm which uses a improved data structure named node linked list FP- Tree(NLFP-Tree). NLFP-Tree compresses the FP-Tree greatly by record the node?s prefix path using node linked list. And mines frequent item sets by bottom-to-up and non-recursion method. Experimental results show that the mining algorithm performs better than Apriori, FP-Growth.

Keywords- data mining; association rules; frequent itemset; fp-tree; linked list  I.

[1]  Agrawal 1994 Apriori [2] Apriori  I/O [3] Han (FP-Tree) FP-Growth [4]  FP-Tree [5]  FP-Tree FP-Growth  FP-Tree FP-Growth    II.

A.

I={I1,I2, ,Im} m n  D={T1,T2, ,Tn} ,T ? I 1 X ? I X D  D X X.count

X.sup=X.count/n X D

X.sup minsup X D  B. FP-Tree FP-growth FP-Tree  null  FP-Tree   FP-Tree ,  FP-Tree    FP-Tree FP-Tree  FP-Tree [1, 4]

III. FP-TREE FP-Tree  FP- Tree(node linked list FP-Tree, NLFP-Tree)  FP-Growth   A. NLFP-Tree NLFP-Tree    1) 1 5 item-no  parent-link child-link sibling-link node-link item-no  parent-link child-link sibling-link  item-no node-link  The work was supported in part by the china's hunan department of education of key scientific research foundation 10A028 and china's  hunan science and technology plan foundation 2009 JT3031.

3 subItem-no count next-link subItem-no  item-no count subItem-no    2) 4 item-no( 0 ) item-name( )  count( ) node-link( item-no ) count    FP-Tree NLFP-Tree NLFP-Tree item-no  NLFP-Tree FP-Tree    1 NLFP-Tree  D  NLFP-Tree    1) D 1 F F  L L 0  2) NLFP-Tree TL L item-no L  node-link TL item-no   3) D T T L item-no  T.mapped=[p|P] p=T.mapped[0] T.mapped P L[p].node-link  NLFP-Tree R insert_tree([p|P] T.mapped[0] R)    a) R N N.item-name=p R node-link list N.list.subItem-no= p N.list.count 1  list subItem-no T.mapped[0] count 1 N node-link P  insert_tree(P T.mapped[0] N)  b) R item-name p N item-no=p  node-link  subItem=T.mapped[0] 1 N R P insert_tree(P T.mapped[0] N)  4) L item-no   B. NLFP-Tree NLFP-Tree 1  1 FP- Tree 1  NLFP-Tree   2 NLFP-Tree  NLFP-Tree Tree  Tree  s  1) Tree s P P 1  s Ls 1 s Tree?  2) s FIS-Tree 5 item-no parent-link child-  link sibling-link count R R.item-no=s.item-no  R.count=s.count R FIS-Tree Ls  FIS-Tree N insert_FISTree(N) Tree?  N P? P? 1 N  N? FIS-Tree insert_FISTree(N?)  3) FIS-Tree s count    C.

12 1     TID Items Ordered TID Items Ordered 1 a, b, c, d c, d, b, a 7 a, d d, a 2 b, d d, b 8 a, b, c c, b, a 3 a, c, d c, d, a 9 c, d c, d 4 c c 10 d d 5 b, c c, b 11 a a 6 b b 12 b, c, d c, d, b  2 1 ={c:7,d:7,b:6,a:5} 1  NLFP-Tree 1  ite m-  no  ite m-  na me  co un  t no  de -lin  k   1  NLFP-Tree  3 L  <0,1,2:1> <0,1:1> <1:1> <0,2:1> 1 {0:3, 1:3, 2:2} {0, 1, 2} 3  2(a)     0 c 1 d    0 3  0 2 1 1  Ls  3 5  2 2 1 3 2 b 2  2 0 1 2 0 1  0 3  0 2 0 2  (a) (b) 2  3  2 3 FIS-Tree 2(b) FIS-Treeb 3  {3:5} {3,2:2} {3,1:3} {3,0:3} {3,2,0:2} {3,1,0:2} item-no  item-name a  {{a:5} {a,b:2} {a,d:3} {a,c:3} {a,b,c:2} {a,d,c:2}} b, d, c    D.

NLFP-Tree  Retail Mushroom Pumsb_star [6] Retail 88162  13 Pumsb_star 49046 50 Mushroom  Retail Pumsb_star 8124  P4 1.5Ghz CPU 1G windows 2003 server Apriori  FP-Tree [1] java(jdk1.5)    3~ 5 NLFP-Tree FP-Tree Apriori java  c c++ 5 10     3  Retail   4  Mushroom   5  Pumsb_star  3~ 5 NLFP-Tree FP-Tree 2 Pumsb_star  NLFP-Tree Apriori  NLFP-Tree  NLFP-Tree FP-Tree Apriori   IV.

