

Novel Algorithm for Mining High Utility Itemsets  Shankar.S Senior Lecturer (IT) SKCET Coimbatore shanx_80@yahoo.co.in  Dr.Purusothaman.T Asst. Professor (CSE) GCT Coimbatore purushgct@yahoo.com  Jayanthi.S Lecturer (CSE) SVCE Chennai kausikjags@yahoo.co.in  Abstraet-one of the important issues in data mining is the interestingness problem. Typically, in a data mining process, the number of patterns discovered can easily exceed the capabilities of a human user to identify interesting results. To address this problem, utility measures have been used to reduce the patterns prior to presenting them to the user. The fundamental idea behind mining frequent itemsets is that only item sets with high frequency are of interest to users. However, the practical usefulness of frequent itemsets is limited by the significance of the discovered itemsets. A frequent itemset only reflects the statistical correlation between items, and it does not reflect the semantic significance of the items.

In this paper, we are using a utility based itemset mining approach to overcome this limitation. Utility based data mining is a new research area interested in all types of utility factors in data mining processes and targeted at incorporating utility considerations in data mining tasks. High utility itemset mining is a research area of utility based data mining , aimed at finding itemsets that contribute high utility. This paper presents a novel algorithm Fast Utility Mining (FUM) which finds all high utility itemsets within the given utility constraint threshold. It is faster and simpler than the original Umining algorithm. The experimental evaluation on artificial datasets show that our algorithm executes faster than Umining algorithm, when more itemsets are identified as high utility itemsets and when the number of distinct items in the database increases. The proposed FUM algorithm scales well as the size of the transaction database increases with regard to the number of distinct items available.



I. INTRODUCTION  In knowledge discovery, techniques are constantly being developed and improved for discovering various types of patterns in databases. While these techniques were shown to be useful in numerous applications, new problems have also emerged. One of the major problems is that, in practice, it is all too easy to discover a huge number of patterns in a database.

Most of these patterns are actually useless or uninteresting to the user. But due to the huge number of patterns, it is difficult for the user to comprehend and to identify those patterns that are interesting to him/her.

One such technique is, the traditional association rules mining [1] is to identify frequently occurring patterns of itemsets. ARM model treats all the items in the database equally by only considering if an item is present in a transaction or not. However, frequency of occurrence may not express the semantics of applications, because the user's  interest may be related to other factors, such as cost, profit, or aesthetic value. For example, a sales manager may not be interested in frequent itemsets that do not generate significant profit.

The frequent itemset mining approach may not satisfy a sales manager's goal. The support measure reflects the statistical correlation of items, but it does not reflect their semantic significance. In other words, statistical correlation may not measure how useful an itemset is in accordance with a user's preferences (Le., profit). The profit of an itemset depends not only on the support(total number of times an itemset occur in a transactional database out of the total number of transactions) of the itemset, but also on the prices of the items in that itemset.

The above limitations motivated the researchers [4] to develop a utility based itemset mining approach, which allows a user to conveniently express his or her perspectives concerning the usefulness of itemsets as utility values and then find itemsets with utility values higher than a threshold. Utility based data mining is a new research area interested in all types of utility factors in data mining processes and targeted at incorporating utility considerations in data mining tasks. High utility itemset mining is a research area of utility based data mining, aimed at finding utility itemsets, are considered as the different values of individual items as utilities, and utility mining aims at identifying the itemsets with high utilities.

This paper presents, a novel algorithm Fast Utility Mining FUM(Uminin~new) which finds all high utility itemsets within the given utility constraint threshold. It is faster and simpler than the original Umining algorithm [4] which is based on utility upper bound property. In fact, Umining algorithm is efficient only in case when utility threshold is high and result is an empty set. In such case the mining process stops at the very first iterations.



II. MINING HIGH UTILITY ITEMSETS  A frequent itemset is a set of items that appears at least in a pre-specified number of transactions. Formally, let I = {i}, h, ..

. , im} be a set of items and DB = {T}, T2, ??? , Tn} a set of transactions where every transaction is also a set of items (i.e.

itemset). Given a minimum support threshold minSup an itemset S is frequent iff:  978-1-4244-3595-1/08/$25.00 (Q2008 IEEE    (1)  Frequent itemset mInIng is the first and the most time consuming step of mining association rules. During the search for frequent itemsets the anti-monotone property is used to improve the efficiency of the search. One such frequent itemset mining is the well known Apriori algorithm [1].

xp x yp.

Definition 4: The utility of item ip in transaction T is the quantitative measure computed with utility function from  Definition 3 (i.e.) u (ip, T) = f(xp, yp), ipE T  For example: utility of item E in transaction T5 is 2 x 5 = 10.

Definition 5: The utility of itemset Sin transaction T is defined as  A. High Utility Itemsets  (2)  (3)

III. EXISTING UMINING ALGORITHM  - database DB - constraints minUtil  - all high utility itemsets  Algorithm UMining Input:  Output:  [1] 1= Scan(T); [2] C1 = I; [3] k = 1; [4] Ck= CalculateAndStore(Ck,T, t); [5] H = Discover(Ck, minUtil); [6] while ( ICk I > 0 and k <= K) [7] { [8] k =k + 1; [9] Ck= Generate(Ck_l , I); [10] Ck= Prune(Ck, Ck-I, minUtil); [11] Ck= CalculateAndStore(Ck,T, f); [12] H = H Y Discover(Ck, minUtil);  UMining [4] algorithm is used for mining all high utility itemsets. Fig. 1 briefly describes the Umining algorithm.

Further details of the Umining algorithm and detailed description of the function Scan, CalculateAndStore, Discover, Generate, and Prune can be found in [4].

On the basis of the above definitions we can formally define high utility itemset.

Definition 7: High utility itemset mining is the problem of finding set H defined as  H = {S IS ~ I,U(S) ~ min Utii} where 'I' is the set of items (attributes).

Definition 6: Itemset S is of high utility iff U(S) 2:: minUtil where minUtil is user defined utility threshold in percents of the total utility of the database.

TID A B C D E  1 0 0 18 0 1 2 0 6 0 1 1 3 2 0 1 0 1  4 1 0 0 1 1 5 0 0 4 0 2 6 1 1 0 0 0 7 0 10 0 1 1 8 3 0 25 3 1 9 1 1 0 0 0 10 0 6 2 0 2  TABLE II EXTERNAL UTILITIES OF ITEMS FROM DATABASE GIVEN IN TABLE I  TABLE I  DATABASE WITH 10 TRANSACTIONS AND 5 DISTINCT ITEMS  A high-utility itemset mining model was defined by Yao, Hamilton and Butz [6]. It is a generalization of the share- mining model [15, 16]. The goal of high utility itemset mining For example: utility of itemset {B,E} in transaction T2 is process is to find all itemsets that give utility greater or equal u({B,E}, T2) = u({B} , T2) + u({E} , T2) = 6 x 10 + 1 x 5 = 65.

to the user specified threshold.

The following is the set of definitions given in [6] which we shall illustrate on a small example.

Definition 1: The external utility of an item ip is a numerical value YP defined by the user. It is transaction independent and reflects importance (usually profit) of the item. External utilities are stored in a utility table. For example, external utility of item B in Table2 is 10.

Definition 2: The internal utility of an item ip is a numerical value xp which is transaction dependent. In most cases it is defined as the quantity of an item in transaction. For example, internal utility of item E in transaction T5 is 2 (see Table 1).

Definition 3: Utility function f is a function of two variables: f{x, y) : (R+,R+) ---.. R+. The most common form also used in this paper is the product of internal and external utility:    [13] } [14] return H;  getNext() method returns an array of integers, which tells the order in which to arrange the original array of letters.

Figure I. Pseudo code ofthe Umining [4] algorithm

IV. PROPOSED FUM ALGORITHM  For e.g, If an itemset E T is say, ABC the function generates {A, B, C, AB, AC, BC, and ABC}

V. EXPERIMENTAL RESULTS  Let us consider Table 1 and Table 2 as input to the proposed FUM algorithm. In step 1 of the algorithm (Pseudo code given in the Figure 2.); we compute the utility values of all single itemsets say A, B, C, D and E. (as explained in section II(A)).

In the second step, we begin a loop for processing each and every transaction present in the DB one by one. In the fourth step, the algorithm generates the itemsets in the current transaction. For e.g., In Table I, the first transaction is represented as CE according to our algorithm, since only those two items were purchased in that transaction. Our algorithm omits the remaining items A, Band D. This is in contrast to the existing Umining algorithm, where all the items are taken into account, regardless whether they are bought by the customer or not. Our algorithm introduces more semantics in this aspect by considering only the items and their combinations which are actually purchased by the customers. In a similar way, the remaining transactions are processed. In this way, the execution time required for the generation of high utility itemsets is considerably reduced, which is illustrated through various graphs in section V (A). The algorithm also checks (step 4), whether a transaction defined by an itemset purchased in it, repeats its occurrence in a later transaction. If a later transaction also contains same itemset purchased in any of the previous transactions, then that transaction is ignored from processing. In this way, the duplicate itemsets are removed. In Step number 6, the candidate itemsets are generated using the CombinationGenerator(T) function, which takes itemset, purchased in a particular transaction as input and generate the various possible combinations of the itemset. In the consecutive steps, the algorithm analyzes each candidate belonging to the candidate itemsets generated. In step number 9, the algorithm computes the utility value of each and every candidate, U(C,T) as described in section II (A). If the utility value of a candidate is found to be more than the minimum utility threshold, which is given as input by the user, (say a sales manager) then that particular candidate is added to the set of High Utility Itemsets {H} in step 10 of the proposed  algorithm. The condition C ~ H in step 9 simply ensures no duplicate high utility itemsets are generated.

Candidateset = CombinationGenerator(T) For each C E CandidateSet begin  if (C ~ H) /\ (U(C,T) ~ min Util) H.add (C);  end  Discovery of High Utility Itemsets  High Utility Itemsets H  Compute the utility value 't/ single itemset For each T E DB begin  ifT ~S {whereS~DBI S=[0 .. T-1]} begin  Database DB {Set of Transactions}  Transaction T E DB Minimum Utility value threshold minUtil  end end return (H);  Input:  Algorithm FUM  Task:  A. Discussion ofthe Proposed FUM Algorithm FUM algorithm generates high utility itemsets using  Combination Generator. It is simpler and executes faster than Umining algorithm, when more itemsets are identified as high utility itemsets.

Output:  [1]  [2] [3] [4] [5] [6] [7] [8]  [9]  [10] [11 ] [12] [13] [14]  The CombinationGenerator(T) is a method which is used to generate all the combinations of the items. It takes the Itemld and the level as the input which is generally denoted by the variable loop. It uses the 'Biglnteger', the vector and collections. The factorial computation method is defined in this, to generate the factorial of a given number.

CombinationGenerator(T) - Generate all possible combinations of itemset E T  Figure 2. Pseudo code ofthe FUM algorithm  The combination generation is based on the concept proposed by Kenneth H. Rosen, Discrete Mathematics and Its applications. First the items for which the combination is to be generated is put in the form of an array. Then the getNext() method is called until there are no more combinations left. The  Both the algorithms Umining [4] and the proposed FUM algorithm were implemented in the Java programming language with Microsoft SQLServer 2000 as the backend. All experiments were performed on a PC with Intel Pentium D series 2.80 GHz processor and 1GB ofmain memory. The tests were conducted on a synthetic dataset with 200 transactions    and 100 distinct items. The experiments were conducted by varying the minimum utility threshold from 0.25 % to 2% (see Table III). The number of High Utility Itemsets generated was recorded along with the execution time for both the existing Umining algorithm and the proposed FUM algorithm. The experiments were also conducted by varying the number of distinct items from 15 to 100 and execution time was recorded for both the algorithms FUM and Umining (see Table V).

Various other experiments were also conducted by varying the minimum utility threshold, by varying the number of transactions and keeping the minimum utility threshold as a constant value. Tests were also conducted by varying the number of distinct items available in the database. The test results are illustrated through different graphs and charts in section V (A).

TABLE IV  ACCURACY COMPARISION BETWEEN UMINING AND FUM ALGORITHM  Minimum #HUI #HUI UminingUtility  Threshold (Umining) (FUM) Miss rate  1% 163 163 0% 0.75% 188 190 1% 0.5% 274 275 0.3% 0.25% 409 409 0% 0.1% 479 479 0%  TABLE V  COMPARISION OF UMINING AND FUM BASED ON NUMBER OF ITEMS  Number of Execution Time(milli seconds) items FUM Umining  15 389.42 484.76 20 330.75 1326.59 30 362.84 4493.17 50 377.29 * 100 365.91 *  * Indicates that, we have to manually stop the system as it hanged while executing the Umining algorithm. Hence the execution time could not be measured for 50 and 100 items respectively.

A. Graphs and Charts  Minimum utility threshold Vs High Utility ItemSets  Figure 4. Minimum utility threshold Vs High Utility Itemsets(FUM)  .... \ .......

~ \,  <\ \~  ~\, ~ ~~  ~:~:~~ ".,.

:  "'"""'I  Figure 3. Screenshot demonstrating FUM algorithm  TABLE III  COMPARISION OF EXECUTION TIME, HIGH UTILITY ITEMSETS (Hill) IN UMINING  AND FUM ALGORITHM  Minimum Umining FUM  Utility Hill Execution HUI Execution  Threshold Time Time (milli (milli  seconds) seconds)  0.25% 409 3694.76 409 210.13  0.5% 274 2112.0 275 279.44  0.75% 188 1540.55 190 333.42  1% 163 1326.59 163 330.75  1.25% 147 661.37 147 350.27  1.5% 132 849.91 132 368.68  1.75% 117 927.09 117 427.22  2% 108 967.45 108 471.61     <n a; E 120 ~  ~100  :5 .c. 80 a3  :i:    2 6 8 10 12 14 16 18 20 Mininmum utility threshold(%)    Minimum Utility threshold vs High Utility Item Sets  .1\ 1_UMiningNewI -e-UMining  \ I \ / \ I "'-~  0} ~ '",- I  '-,,\ ~ .-.<I  ~ ~  II ~.~: .... ......, --6-:--  -..,  n,L----? . .

~  0.2 0.4 0,6 0.8 1 1.2 1.4 1.6 1.8 2 Mininmum utility threshold(%)  ~ Q)  ~ 2500 'E Q)  .~ 2000 l- e: o .~ 1500 ~  ill       Minimum utility threshold Vs Execution Time  :2 .' 3 Minimum Utility threshold(%)  o     ~300 en  ~250 >.

~200 => '?, J: 150   Figure 5. Minimum utility threshold Vs High Utility Itemsets(Umining vs.

FUM)  Figure 7. Number of Transactions Vs Execution Time (Umining vs. FUM), Minimum utility threshold = 1%  Number of Items  /1-UMiningNew I--e-UMining I II  / /  II II  /{  /' /  -----=:-----~/ u( 5 10 15 20 25 30  o  Figure 9. Number of Items Vs Execution Time (FUM vs. Umining)         Number of Items  Figure 8. Minimum utility threshold Vs Execution Time (FUM vs. Umining)  Number of Items Vs Execution Time    Number of Items vs Execution Time(milliseconds}   ~ g 3000  .~g 2500 E t= 2000 e: o  .~ 1500  w  (I)!3ooo ~ 2500 E  ~ 2000 .~  ~ 1500 ill    I_UMining I r'--:...---'P--e- UMiningNew II  ,/ /  / ..c~  /1 /'/ ~lL ~,~.-:~.~~ ~  n, .___-- . ? ? .

.....

10 20 30 .40 50 60 70 80 90 1  ,I--Q--UMining I ~----~--e-- UMiningNew ~ //'//~  -/,///  ---'~~r/ /  ,II' I ---~~  ~,~/- :"..----:----~~. :  ,...-- "'Q' : ...-:  10 20 3J 40 50 60 70 80 90 1      No. of Transactions(Mininmum utility threshold=1 %))  No.ofTransactions(Mininmum utility threshold=.5%))   Number of Transactions Vs Execution Time     (I)  u  ~ 500 g .? 400 l- e:o  .~ 300  w  Figure 6. Number ofTransactions Vs Execution Time (Umining vs. FUM), Minimum utility threshold = 0.5% Number of Transactions Vs Execution Time  Figure 10. Number ofItems Vs Execution Time (milliseconds) (FUM vs.

Umining), Number of distinct items = 15,20,30,50 and 100 respectively.



VI. CONCLUSION  Utility based itemset mining is to discover the itemsets that  are significant according to their utility values and utility  constraints are capable of expressing more complex semantics  than the support measure.

In this paper we have shown that the proposed FUM  algorithm executes faster than existing Umining algorithm,  (see Table III) when more itemsets are identified as high utility  itemsets. The experimental evaluation on artificial datasets  proved that Umining algorithm is pruning a few high utility  itemsets (see Table IV) where as FUM generates entire high  utility itemsets without missing any. The proposed FUM  algorithm scales well as the size of the transaction database  increases with regard to the number of distinct items available  (see Table V).



VII. FUTURE WORK  We offer a few suggestions for future research. The FUM  algorithm which we have proposed is based on a level wise  approach. Since depth-first search approaches, such as MAFIA  [11] and FP-growth [12], have several advantages over level- wise approaches, future research could consider a method for  incorporating an approach such as FP-growth into the pruning  strategies. We believe that High Utility Itemset mining has a  great potential for various applications. We have planned to  explore the possibility of applying the proposed FUM  algorithm to applications (other than Retail Marketing) such as  Medical Diagnosis. We have also planned to implement the  proposed FUM algorithm in a Grid Computing environment  and test if the performance and scalability could be enhanced.

