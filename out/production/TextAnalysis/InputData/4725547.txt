Research on a Graph-Based Algorithm

Abstract  Mining association rules is an important field in data mining .the article discussed a graph-based association mining algorithm, which directly generate frequent candidate itemsets through constructing directed graphs to form association rules. But this algorithm occupy a great deal of time for checking the candidate itemsets,so an improved algorithm proposed.

The improved algorithm utilize the method of judging the nodes? io-value to cut the redundant nodes of candidate itemsets. The experimental results shows that,with smaller minimum support value,the improved algorithm effectively improve the discovery efficiency of the frequent itemsets.

Keywords: data mining, association rules,  directed graph, frequent itemsets   1. Introduction  Data mining was also named as knowledge discovery from database. It can find potential, innovative and valuable information which can be understood by users. Mining association rules is for the discovery of meaningful correlation between sets or related links from large amounts of data, it focus on the data links between interesting itemsets.

Mining association rules is to discover the rules from the specified transaction database to meet the minimum support and the minimum credibility which proposed by the database users, it can be decomposed into two steps: (1)Generate itemsets(called frequent itemsets)whose support value is greater than the mininum support value(minsup).(2)With the itemsets generated from step(1), we can form association rules.

The step(1) will take us much more time and cost, and step(2) is relatively simple. So our research is mainly focus on the step(1).

The main cost of Apriori series of mining frequent itemsets algorithm lies in producing large quantities of the candidate itemsets and the needs of multi-level sets to repeat scanning database, while FP-frequent algorithm needs to generate a large number of model trees and adopt recursive method, so both are inefficient.

Yen and Chen proposed the DLG algorithm, it can construct directed graphs demonstrating the relationship between itemsets, traverse through the directed graphs to generate frequent itemsets, and adopt the matrix storage technology, do not produce candidate itemsets and only required to scan the database one time. The experiment has already proved DLG algorithm has better performance than many frequent itemsets discovery algorithm. But there will be a large number of redundant computing in DLG when there exists many short pattern itemsets. On this basis, this article presents IODLG algorithm. This algorithm is the improvement of DLG algorithm, it can greatly reduce the calculation time, improve the operating efficiency and save storage space.

2. DLG algorithm  DLG adopted vertical layout database, mapped the information from the database into bit vector matrix, and scanned the database only once. we can directly produce candidate frequent itemsets through the construction of directed graph., and check the candidate frequent itemsets whether or not frequent itemsets through intersection of bit vector. here are three steps to implement the DLG algorithm.

The first step: Scan the database to record the support value of  each item. Give an integer to each item, and establish bit vector for each item, the length of bit vector equals to the number of transactions in the transaction database. If the item appears in the ith transaction, the ith position of the bit vector which related to that item will be ?1?, if not, there will be ?0?,the bit vector  2008 International Symposium on Computational Intelligence and Design  DOI 10.1109/ISCID.2008.12   2008 International Symposium on Computational Intelligence and Design  DOI 10.1109/ISCID.2008.12     associated with the item expressed as ,iBV   the number of ?1? (Hereinafter called as support value)in  iBV  equals to the number of transaction which support the item.

Property: the support value of itemset },,{ 21 kiii ?  equals to the number of ?1? in  kBVBVBV ??? ?21 . And symbol "? " denotes logical "intersection" computing.

The second step: Construct directed graph to show the links  between the items. If the number of ?1? in ji BVBV ? (i<j) is not less than the minimum support  value, we will draw a directed line from the ith item to the jth item, and the itemset {i,j} becomes a frequent 2-itemset at the same time.

The last step: Construct the frequent k-itemsets(k>2), the last  item in each k-frequent itemsets used to extend into k+1-frequent itemsets. If },,{ 21 kiii ?  is a k-frequent  itemset, and there exists a directed line from item ki to item u, then the itemset },,,{ 21 uiii k?  will be a candidate frequent k+1-itemset. If the number of ?1? in  uk BVBVBVBV ??? ?21  is no less than minimum  support value, then the itemset },,,{ 21 uiii k? becomes the frequent k+1- itemset, with the steps mentioned above, if we can not continue to produce k-frequent itemsets, DLG algorithm will be suspended.

Seen from the steps of DLG, the algorithm scans the database only once, compared to the algorithm which scans database repeatedly, it obviously reduce the operation time of database access. It provides the generation of candidate frequent k-itemsets through constructing the directed graph. Compared to the Apriori algorithm, the generation of candidate itemsets is more simple, and more efficient.

3. An improved algorithm: IODLG  Definition 3.1 item-value: we give a value to each item in the transaction database according to its order appears, and call this value as the item-value.

Definition 3.2 directed graph G=G<V, E>,  kn vvvvV },,,{ 21 ?=  denotes frequent item  },,{, 21 mk eeeEi ?= ,m denotes the number of frequent 2-itemsets. If the number of ?1? in the  ijik BVBV ?  is no less than the minimum support value, there will be a directed line from node kv  to node jv .

Definition 3.3 the input-value and the output  -value of the node: if the item?s item-value is k, then we call inputik .  as the node?s input-value, outputik .

as the node?s output-value. If there exists a line between node pi  and node qi  (p>q), then  inputiq . +l and .1.. +outputip Theorem 1: if the frequent k-itemsets can be  extended to k+1-itemsets, it must first meet the condition ..1 koutputi >=  Proof: according to the property of itemsets, every two items in frequent k+1-itemsets were frequent, so )11}(,{ 1 +<=< kjii j  will be frequent if },,{ 21 kiii ?  is frequent. That is to say , the node 1i  is associated with all the other nodes in the frequent k+1-itemset, so the condition  ..1 koutputi >=  must be met.

Theorem 2.If the frequent k-itemset },,{ 21 kiii ? can be extended to k+1-itemset },,,{ 21 uiii k? , It must also meet the condition kinputu >=. .

Proof: according to the property of itemsets, every sub-itemset in frequent itemsets will be frequent, so the item u must be associated with all other k items, the theorem proved.

While constructing the frequent k+1-itemsets, we can utilize the theorem mentioned above. In this case, it can drastically reduce the time of accessing adjacent nodes, especially there exists too many short pattern itemsets.

3.1. Algorithm introduction  While constructing the directed graph, the frequent 2-itemset 2L  was produced. For each frequent itemset in k-itemsets, the last item in the itemset was used to extend to k+1-itemset. If  },,{ 21 kiii ?  is a frequent k-itemset, and there exists a directed line from ki  to u, and also meet the condition which the theorems mentioned, then the itemset },,,{ 21 uiii k? will become k+1-itemset. And if the number of ?1? in uk BVBVBVBV ??? ?21  is no less than minimum support value, then the itemset  },,,{ 21 uiii k?  will be frequent k+1-itemset. With the methods mentioned above, if we can not continue to produce k-frequent itemsets, IODLG algorithm will be suspended.

3.2. Algorithm description  Input: transaction database D, minimum support     value(minsup); Output: all the frequent k-itemset(k>=2) in D.

for all item i do set all bits of iBV  to 0; for (j=1;j<=N;j++) do begin //N:the number of transaction in database D.

for all item i in the jth transaction do  begin i.count++; set the jth bit of  iBV to 1; end end  ?=1L ; for all items i in database D do begin if(i.count>=minsup) then };{11 iLL ?= end //the construction of directed graph if ??1L then begin link ]0][0[|]|][|[| 11 =LL  ;2 ?=L //the production of frequent 2-itemset.

for every two frequent items i,j(i<j) do begin if(the number of  1?s in  jI BVBV ? ) >=minsup then link[i][j]=1; i.output++; j.input++; }};,{{22 jiLL ?= end k=2; while ??kL  do begin ;1 ?=+kL  for all item sets kk Liii ?? ),,( 21 do begin if( 1i .output>k-1) and (link[ ki ][u]=1) and  (u.input>k-1) if ? the number of  ?1? in  ( uikii BVBVBVBV ???? ?21 )>=minsup ?  }};,,,{{ 2111 uiiiLL kkk ?= ++ ? end k=k+1; end  4. Algorithm example  Table 4.1 shows the transaction database. The minsup is 2, and table 4.2 shows the item-value and the support value (sup-value) of item corresponding to the database.

Table 4.1  TID Itemset T100 ABC T200 AD T300 BCDE T400 ACDE T500 BCE   Table4.2  Item-value Item name sup-value 1 A 3 2 B 3 3 C 4 4 D 3 5 E 3   The bit vector for each item:  1BV :11010 2BV :10101 3BV :10111 4BV :01110  5BV :00111 (1) According to the DLG algorithm. we can  produce the frequent 2-itemset 2L ={{1,3},{1,4},{2,3},{2,4},{3,4},{3,5},{4,5}};  the directed graph accordingly as below:   According to the frequent 2-itemsets and the  directed graph, we must check the itemsets {{1,3,4}{1,3,5}{1,4,5}{2,3,4}{2,3,5}{3,4,5}}  whether or not frequent 3-itemset. At last we can get the frequent 3-itemsets{{2,3,5}{3,4,5}} through 12 times ?intersection? computing.

(2) If we adopts the IODLG algorithm, as {{1,2} {1,5}{2,4}}are not frequent 2-itemset, according to theorem 1 and theorem 2, we can directly cut  Candidate itemsets{{1,3,5}{1,4,5}{2,3,4}}, so the times of  ?intersection ? computing reduced to 6.

5. Algorithm analysis  Specific analysis as follows: Conditions: the number of frequent 1-itemset,  2-itemset...k-iteset are n, |||,||,| 32 kLLL ? . the nodes whose output-value were 0,1,?n-1 are called as  110 ,, ?? nAAA , whose input-value were 0,1,?n-1 are  called as 110 ,, ?? nBBB .

Results: when the frequent k-itemsets extended to k+1-itemsets, the DLG algorithm took  )1*(|||)*||(| 111 ?+?+ ??? kLBB knk  times ?interse ction?computing. While the IODLG took  )1(*|)||||||(|*|)||(| 2001111 ?????+ ????? kBBAALBB kkknk ? times computing.

To further testify the superiority of algorithm IODLG, we use the C# language to program for the two algorithms and utilize the database called T10I4D100K. The figure 5(a) shows the different performance when the minsup were 1%,2%,3%. The figure 5(b) shows the performance when the records number were 10000,20000,30000 and 400000, the minsup was fixed to 2%.

Figure 5 (a)   Figure 5 (b)  6. Conclusion  We generally use the IODLG algorithm in the databases that have many short patterns, and this can obviously reduce the time accessing the adjacent nodes and producing frequent itemsets. Especially when the length of frequent itemsets and the output-value of nodes were increased, the algorithm will be more effective and feasible.

