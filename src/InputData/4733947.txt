Association Action Rules

Abstract  Action rules describe possible transitions of objects from one state to another with respect to a distinguished at- tribute. Previous research on action rule discovery usually required the extraction of classification rules before con- structing any action rule. In [19], a new algorithm that discovers action rules directly from a decision system was presented. This paper gives a new approach for generating association-type action rules. The notion of frequent action sets and Apriori-like strategy generating them is proposed.

We introduce the notion of a representative action rules and give an algorithm to construct them directly from frequent action sets. Finally, we introduce the notion of a simple association action rule, the cost of association action rule, and give a strategy to construct simple association action rules of a lowest cost.

1. Introduction  An action rule is a rule extracted from a decision sys- tem that describes a possible transition of objects from one state to another with respect to a distinguished attribute called a decision attribute [21]. We assume that attributes used to describe objects in a decision system are partitioned into stable and flexible. Values of flexible attributes can be changed. This change can be influenced and controlled by users. Action rules mining initially was based on compar- ing profiles of two groups of targeted objects - those that are desirable and those that are undesirable [21]. An action rule was defined as a term [(?) ? (? ? ?)] ? (? ? ?),  where ? is a conjunction of fixed condition features shared by both groups, (? ? ?) represents proposed changes in values of flexible features, and (? ? ?) is a desired effect of the action. The discovered knowledge provides an insight of how values of some attributes need to be changed so the undesirable objects can be shifted to a desirable group. For example, one would like to find a way to improve his or her salary from a low-income to a high-income. Another exam- ple in business area is when an owner would like to improve his or her company?s profits by going from a high-cost, low- income business to a low-cost, high-income business.

Action rules introduced in [21] has been further inves- tigated in [18][19][20][22][26][27]. Paper [8] was proba- bly the first attempt towards formally introducing the prob- lem of mining action rules without pre-existing classifica- tion rules. Authors explicitly formulated it as a search prob- lem in a support-confidence-cost framework. The algorithm proposed by them has some similarity with Apriori [1]. The definition of an action rule in [8] allows changes on stable attributes. Changing the value of an attribute, either stable or flexible, is linked with a cost [27]. In order to rule out action rules with undesired changes on stable attributes, au- thors assigned very high cost to such changes. However, that way, the cost of action rules discovery is getting unnec- essarily increased. Also, they did not take into account the dependencies between attribute values which are naturally linked with the cost of rules used either to accept or reject a rule.

Algorithm ARED, presented in [11], is based on Pawlak?s model of an information system S [16]. Its goal was to identify certain relationships between granules de- fined by the indiscernibility relation on its objects. Some of   DOI 10.1109/ICDM.Workshops.2008.68    DOI 10.1109/ICDMW.2008.66     these relationships uniquely define action rules for S. Pa- pers [19], [11] present a new strategy for discovering action rules directly from the decision system. In [19], action rules are built from atomic expressions following a strategy sim- ilar to ERID [3].

This paper gives a new approach for generating association-type action rules. The notion of frequent action sets and Apriori-like strategy generating them is proposed.

Finally, we introduce the notion of a representative action rules and give an algorithm to construct them directly from frequent action sets.

2. Background and Objectives  In this section we introduce the notion of an information system and give its example.

By an information system [16] we mean a triple S = (X,A, V ), where:  1. X is a nonempty, finite set of objects  2. A is a nonempty, finite set of attributes, i.e.

a : X ?? Va is a function for any a ? A, where Va is called the domain of a  3. V = ?{Va : a ? A}.

For example, Table 1 shows an information system S with a set of objects X = {x1, x2, x3, x4, x5, x6, x7, x8}, set of attributes A = {a, b, c, d}, and a set of their values V = {a1, a2, b1, b2, c1, c2, d1, d2}.

a b c d x1 a1 b1 c1 d1 x2 a2 b1 c1 d1 x3 a2 b2 c1 d2 x4 a2 b2 c2 d2 x5 a2 b1 c1 d1 x6 a2 b2 c1 d2 x7 a2 b1 c2 d2 x8 a1 b2 c2 d1  Table 1 : Information System S  Additionally, we assume that A = ASt ? AFl, where attributes in ASt are called stable and attributes in AFl are called flexible. ?Date of birth? is an example of a stable attribute. ?Interest rate? for each customer account is an example of a flexible attribute.

In earlier works in [20][21][22][26], action rules are con- structed from classification rules. This means that we use pre-existing classification rules or generate them using a rule discovery algorithm, such as LERS [7] or ERID [3],  then, construct action rules either from certain pairs of these rules or from a single classification rule. For instance, algo- rithmARAS [22] generates sets of terms (built from values of attributes) around classification rules and constructs ac- tion rules directly from them. In this study, we propose a different approach to achieve the following objectives:  1. Extract action rules directly from a decision system without using pre-existing classification rules.

2. Extract action rules that have minimal attribute in- volvement.

To meet these two goals, we introduce the notion of ac- tion sets, frequent action sets, and show how to build action rules from them.

3. Action Rules  Let S = (X,A, V ) is an information system, where V =?{Va : a ? A}. First, we introduce the notion of an atomic action set.

By an atomic action set we mean an expression (a, a1 ? a2), where a is an attribute and a1, a2 ? Va. If a1 = a2, then a is called stable on a1. Instead of (a, a1 ? a1), we often write (a, a1) for any a1 ? Va.

By Action Sets we mean a smallest collection of sets such that:  1. If t is an atomic action set, then t is an action set.

2. If t1, t2 are action sets and ??? is a 2-argument functor called composition, then t1 ?t2 is a candidate action set.

3. If t is a candidate action set and for any two atomic action sets (a, a1 ? a2), (b, b1 ? b2) contained in t we have a ?= b, then t is an action set.

By the domain of an action set t, denoted by Dom(t), we mean the set of all attribute names listed in t.

By an action rule we mean any expression r = [t1 ? t2], where t1 and t2 are action sets. Additionally, we assume thatDom(t2)?Dom(t1) ? A andDom(t2)?Dom(t1) = ?. The domain of action rule r is defined as Dom(t1) ? Dom(t2).

Now, we give an example of action rules assuming that the information system S is represented by Table 1, a, c are stable and b, d are flexible attributes. Expressions (a, a2), (b, b1 ? b2), (c, c2), (d, d1 ? d2) are examples of atomic action sets. Expression (b, b1 ? b2) means that the value of attribute b is changed from b1 to b2. Expression (c, c2) means that the value c2 of attribute c remains unchanged.

Expression r = [[(a, a2) ? (b, b1 ? b2)] ? (d, d1 ? d2)] is     an example of an action rule. The rule says that if value a2 remains unchanged and value b will change from b 1 to b2, then it is expected that the value dwill change from d1 to d2.

The domain Dom(r) of action rule r is equal to {a, b, d}.

Standard interpretation NS of action sets in S = (X,A, V ) is defined as follow:  1. If (a, a1 ? a2) is an atomic action set, then NS((a, a1 ? a2)) = [{x ? X : a(x) = a1}, {x ? X : a(x) = a2}].

2. If t1 = (a, a1 ? a2) ? t and NS(t) = [Y1, Y2], then NS(t1) = [Y1 ? {x ? X : a(x) = a1}, Y2 ? {x ? X : a(x) = a2}].

Let us define [Y1, Y2] ? [Z1, Z2] as [Y1 ? Z1, Y2 ? Z2] and assume that NS(t1) = [Y1, Y2] andNS(t2) = [Z1, Z2].

Then, NS(t1 ? t2) = NS(t1) ?NS(t2).

If t is an action set and NS(t) = {Y1, Y2}, then the support of t in S is defined as sup(t) = min{card(Y1), card(Y2)}.

Now, let r = [t1 ? t2] is an action rule, where NS(t1) = [Y1, Y2], NS(t2) = [Z1, Z2]. Support and confi- dence of r are defined as follow:  1. sup(r) = min{card(Y1 ? Z1), card(Y2 ? Z2)}.

2. conf(r) = [ card(Y1?Z1)card(Y1) ] ? [ card(Y2?Z2)  card(Y2) ].

The definition of a confidence should be interpreted as an optimistic confidence. It requires that card(Y1) ?= 0 and card(Y2) ?= 0. Otherwise, the confidence of action rule is undefined.

Coming back to the example of S given in Table 1, we can find many action rules associated with S. Let us take r = [[(a, a2) ? (b, b1 ? b2)] ? (d, d1 ? d2)] as an example of action rule. Then,  NS((a, a2))= [{x2, x3, x4, x5, x6, x7}, {x2, x3, x4, x5, x6, x7}], NS((b, b1 ? b2)) = [{x1, x2, x5, x7}, {x3, x4, x6, x8}], NS((d, d1 ? d2))= [{x1, x2, x5, x8}, {x3, x4, x6, x7}], NS((a, a2) ? (b, b1 ? b2))= [{x2, x5, x7}, {x3, x4, x6}].

Clearly, sup(r) = 2 and conf(r) = 2/3 ? 1 = 2/3.

Now, let us assume that S = (X,A, V ) is an information  system and ?1, ?2 denote minimum support and minimum  confidence assigned to action rules, respectively. The al- gorithm for constructing frequent action sets is similar to Agrawal?s algorithm in [1].

Generating frequent action sets  Let ta is an atomic action set, where NS(ta) = [Y1, Y2] and a ? A. We say that ta is called frequent if card(Y1) ? ?1 and card(Y2) ? ?1.

The operation of generating (k + 1)- element candidate action sets from frequent k-element action sets is performed in two steps:  Merging Step: Merge pairs (t1, t2) of frequent k- element action sets into (k + 1)-element candidate action set if all elements in t1 and t2 are the same except the last elements.

Pruning Step: Delete each (k + 1)-element candidate action set t if either it is not an action set or some k-element subset of f is not a frequent k-element action set.

Now, if t is a (k + 1)-element candidate action set, NS(t) = [Y1, Y2], card(Y1) ? ?1, and card(Y2) ? ?1, then t is a frequent (k + 1)-element action set.

We say that t is a frequent action set in S if t is a frequent k-element action set in S, for some k. Assume now that the expression [t? t1] denotes the action set containing all atomic action sets listed in t but not listed in t1.

The set AARS(?1, ?2) of association action rules in S is constructed in the following way:  Let t be a frequent action set in S and t1 is its subset.

Any action rule r = [(t? t1)? t1] is an association action rule in AARS(?1, ?2) if conf(r) ? ?2.

4. Association Action Rules, an Example  Let us assume that an information system S is repre- sented by Table 1 with {a, c} as stable attributes. We take ?1 = 2 and ?2 = 4/9. The following frequent action sets can be constructed:  (a, a1) - support 2 (a, a2) - support 6 (b, b1) - support 4 (b, b2) - support 4 (b, b1 ? b2) - support 4 (b, b2 ? b1) - support 4 (c, c1) - support 5 (c, c2) - support 3 (d, d1) - support 4 (d, d2) - support 4 (d, d1 ? d2) - support 4 (d, d2 ? d1) - support 4     (a, a1) ? (b, b1) - support 1 (not frequent) (a, a1) ? (b, b2) - support 1 (not frequent) (a, a1) ? (b, b1 ? b2) - support 1 (not frequent) (a, a1) ? (b, b2 ? b1) - support 1 (not frequent) (a, a1) ? (c, c1) - support 1 (not frequent) (a, a1) ? (c, c2) - support 1 (not frequent) (a, a1) ? (d, d1) - support 2 (a, a1) ? (d, d2) - support 0 (not frequent) (a, a1) ? (d, d1 ? d2) - support 0 (not frequent) (a, a1) ? (d, d2 ? d1) - support 0 (not frequent)  (a, a2) ? (b, b1) - support 3 (a, a2) ? (b, b2) - support 3 (a, a2) ? (b, b1 ? b2) - support 3 (a, a2) ? (b, b2 ? b1) - support 3 (a, a2) ? (c, c1) - support 4 (a, a2) ? (c, c2) - support 2 (a, a2) ? (d, d1) - support 2 (a, a2) ? (d, d2) - support 4 (a, a2) ? (d, d2 ? d1) - support 2 (a, a2) ? (d, d1 ? d2) - support 2  (b, b1) ? (c, c1) - support 3 (b, b1) ? (c, c2) - support 1 (not frequent) (b, b1) ? (d, d1) - support 3 (b, b1) ? (d, d2) - support 1 (not frequent)  (b, b2) ? (c, c1) - support 2 (b, b2) ? (c, c2) - support 2 (b, b2) ? (d, d1) - support 1 (not frequent) (b, b2) ? (d, d2) - support 3  (b, b1 ? b2) ? (c, c1) - support 2 (b, b1 ? b2) ? (c, c2) - support 1 (not frequent) (b, b1 ? b2) ? (d, d1) - support 1 (not frequent) (b, b1 ? b2) ? (d, d2) - support 1 (not frequent) (b, b1 ? b2) ? (d, d2 ? d1) - support 1 (not frequent) (b, b1 ? b2) ? (d, d1 ? d2) - support 3  (b, b2 ? b1) ? (c, c1) - support 2 (b, b2 ? b1) ? (c, c2) - support 1 (not frequent) (b, b2 ? b1) ? (d, d1) - support 1 (not frequent) (b, b2 ? b1) ? (d, d1 ? d2) - support 1 (not frequent) (b, b2 ? b1) ? (d, d2 ? d1) - support 3  (c, c1) ? (d, d1) - support 3 (c, c1) ? (d, d2) - support 2 (c, c1) ? (d, d2 ? d1) - support 2 (c, c1) ? (d, d1 ? d2) - support 2 (c, c2) ? (d, d1) - support 1 (not frequent) (c, c2) ? (d, d2) - support 2 (c, c2) ? (d, d2 ? d1) - support 1 (not frequent)  (c, c2) ? (d, d1 ? d2) - support 1 (not frequent)  (a, a2) ? (b, b1) ? (c, c1) - support 2 (a, a2) ? (b, b1) ? (c, c2) - support 1 (not frequent) (a, a2) ? (b, b1) ? (d, d1) - support 2 (a, a2) ? (b, b1) ? (d, d2) - support 1 (not frequent) (a, a2) ? (b, b1) ? (d, d1 ? d2) - support 1 (not frequent) (a, a2) ? (b, b2) ? (c, c1) - support 2 (a, a2) ? (b, b2) ? (c, c2) - support 1 (not frequent) (a, a2) ? (b, b2) ? (d, d1) - support 0 (not frequent) (a, a2) ? (b, b2) ? (d, d2) - support 3 (a, a2) ? (b, b2) ? (d, d1 ? d2) - support 0 (not frequent) (a, a2) ? (b, b1 ? b2) ? (c, c1) - support 2 (a, a2) ? (b, b1 ? b2) ? (c, c2) - support 1 (not frequent) (a, a2) ? (b, b1 ? b2) ? (d, d1) - support 0 (not frequent) (a, a2) ? (b, b1 ? b2) ? (d, d2) - support 1 (not frequent) (a, a2) ? (b, b1 ? b2) ? (d, d1 ? d2) - support 2 (a, a2) ? (b, b2 ? b1) ? (c, c1) - support 2 (a, a2) ? (b, b2 ? b1) ? (c, c2) - support 1 (not frequent) (a, a2) ? (b, b2 ? b1) ? (d, d1) - support 0 (not frequent) (a, a2) ? (b, b2 ? b1) ? (d, d2) - support 1 (not frequent) (a, a2) ? (b, b2 ? b1) ? (d, d1 ? d2) - support 0 (not frequent) ...............................

...............................

...............................

(a, a2) ? (b, b1 ? b2) ? (c, c1) ? (d, d1 ? d2) - support 2  Association action rules can be constructed from fre- quent action sets. For instance, we can generate association action rule  [(a, a2) ? (b, b1 ? b2)]? [(c, c1) ? (d, d1 ? d2)] from the last frequent action set. Its confidence is 4/9.

5 Representative Association Action Rules  The concept of representative association rules was in- troduced by Kryszkiewicz [10]. They form a small subset of association rules from which the remaining association rules can be generated. Similar approach is proposed for association action rules in this paper.

By a cover C of association action rule r = [t1 ? t] we meanC(t1 ? t) = {t1 ?t2 ? t3 : t2, t3 are not overlapping subterms of t}.

For example, let us assume that r = [(e, e1 ? e2) ? (b, b1 ? b2) ? (c, c1 ? c2) ? (d, d1 ? d2)] is an association action rule. Then, [(e, e1 ? e2) ? (b, b1 ? b2) ? (c, c1 ? c2)] ? C(r).

Property 1. If r ? AARS(?1, ?2), then each rule r1 ? C(r) also belongs to AARS(?1, ?2).

Proof: From the definition of AARS(?1, ?2) we have, sup(r) ? ?1, and conf(r) ? ?2. Let r1 = [t1 ? t2 ? t4], r = [t1 ? t2 ? t3 ? t4], and NS(ti) = [Yi, Zi], for i = 1, 2, 3, 4. Now, since card[Y1?Y2?Y3?Y4]card[Y1] ? ?1, then card[Y1?Y2?Y4]  card[Y1?Y2] ? ?1 because card(Y1) ? card(Y1 ? Y2) and card(Y1 ? Y2 ? Y4) ? card(Y1 ? Y2 ? Y3 ? Y4).

In a similar way we show that card[Z1?Z2?Z4]card[Z1?Z2] ? ?1. The same, sup(r1) ? ?1.

Now, assume that conf(r) = card(Y1?Y2?Y3?Y4)card(Y1) ? card(Z1?Z2?Z3?Z4)  card(Z1) ? ?2. Clearly, card(Y1?Y2?Y4)card(Y1?Y2) ?  card(Z1?Z2?Z4) card(Z1?Z2) ? ?2. The same conf(r1) ? ?2.

By a set of representative association action rules, with  minimum support ?1 and minimum confidence ?2 we mean  RAARS(?1, ?2) = {r ? AARS(?1, ?2) :? (?r1) ? AARS(?1, ?2)[[r1 ?= r] ? [r ? C(r1)]}.

Property 2. Representative association action rules RAARS(?1, ?2) form a least set of association action rules that covers all association action rules AARS(?1, ?2).

Proof: Let us assume that r ? RAARS(?1, ?2) and there exists r1 = [t1 ? t] ? AARS(?1, ?2) such that r1 ?= r and r ? C(r1). Now, since r ? C(r1), then r is not in RAARS(?1, ?2).

Property 3. All association action rules AARS(?1, ?2) can be derived from representative association action rules RAARS(?1, ?2) by means of cover operator.

Proof: Assume that r = [t ? s] ? AARS(?1, ?2) and t = t1 ? t2? ... ?tk, where ti is an atomic action set for 1 ? i ? k. It means that conf(r) ? ?2 and sup(r) ? ?1.

Let ri(t) = [[t?ti]? s ?ti] for any atomic action set ti in t.

Clearly, sup(ri(t)) = sup(r) and conf(ri(t)) ? conf(r).

Now, we show how to construct representative associa- tion action rule from which r can be generated. First, we follow Procedure I:  (1) Find ti in t such that conf(ri(t)) ? ?2, (2) If succeeded, then t := [t? ti], s := s ? ti, go back to (1). Otherwise procedure stops.

Procedure II will extend the decision part of the rule gen- erated by Procedure I. Assume that [t ? s] is that rule and T = {t1, t2, ..., tm} is a set of all atomic action terms not listed in s. Procedure II:  (1) Find ti in T such that sup(t? s ? ti) ? ?1, (2) If succeeded, then s := s ? ti, T := T ? {ti}, go back to (1). Otherwise procedure stops.

Now, the resulting association action rule is a represen- tative rule from which the initial rule r can be generated.

6 Simple Association Action Rules  In this section we introduce the notion of a simple asso- ciation action rule, the cost of association action rule, and give a strategy to construct simple association action rules of lowest cost.

Let (a, a1 ? a2) is an atomic action set. We assume that the cost of changing attribute a from a1 to a2 is de- noted by costS((a, a1 ? a2)) [27]. For simplicity reason, the subscript S will be omitted if this does not lead to a confusion. Let t1 = (a, a1 ? a2), t2 = (b, b1 ? b2) be two atomic action sets. We say that t1, t2 are positively correlated if change t1 supports change t2. Saying another words, change t1 implies change t2.

Now, assume that action set t is constructed from atomic action sets T = {t1, t2, ..., tm}. We introduce a binary re- lation ? on T defined as: ti ? tj iff ti and tj are positively correlated.

Relation ? is an equivalence relation and it partitions T intom equivalence classes (T = T1?T2?...?Tm), for some m. Now, in each equivalence class Ti, an atomic action set a(Ti) of the lowest cost is identified. The cost of t is defined as: cost(t) =  ?{cost(a(Ti)) : 1 ? i ? m}.

Now, assume that r = [t1 ? t] is an association action  rule. We say that r is simple if cost(t1 ? t) = cost(t1). The cost of r is defined as cost(t1).

We assume that user gives three threshold values, ?1 - minimum support, ?2 - minimum confidence, ?3 - maxi- mum cost. Let t be a frequent action set in S and t1 is its subset. Any association action rule r ? AARS(?1, ?2) is called association action rule of acceptable cost if cost(r) ? ?3. Similarly, frequent action set t is called a frequent ac- tion set of acceptable cost if cost(t) ? ?3.

Now, in order to construct simple association action rules of a lowest cost, we built frequent action sets of accept- able cost following the strategy presented in Section 4 en- hanced by additional constraint which requires to verify the cost of frequent action sets being produced. Any fre- quent action set which cost is higher than ?3, is removed.

Now, if t is a frequent action set of acceptable cost and {a(Ti) : i ? m} is a collection of atomic action sets con- structed by following the strategy presented in this section, then ?{a(Ti) : i ? m} ? [t?{a(Ti) : i ? m}] is a simple association action rule of acceptable cost assuming that its confidence is not greater than ?2.

7. Application Domain - HEPAR Database  As the application domain for action rules mining, we have chosen the HEPAR system built in collaboration be-     tween the Institute of Biocybernetics and Biomedical Engi- neering of the Polish Academy of Sciences and physicians at the Medical Center of Postgraduate Education in Warsaw, Poland [2], [25], [15]. HEPAR was designed for gathering and processing clinical data about patients with liver disor- ders. It contains information on 758 patients described by 106 attributes (including 31 laboratory tests with values dis- cretized to: below normal, normal, above normal). It has 14 stable attributes. Two laboratory tests are invasive: HBsAg [in tissue] and HBcAg [in tissue]. The decision attribute has 7 values: I (acute hepatitis), IIa (subacute hepatitis [types B and C]), IIb (subacute hepatitis [alcohol-abuse]), IIIa (chronic hepatitis [curable]), IIIb (chronic hepatitis [non- curable]), IV (cirrhosis-hepatitis), V (liver-cancer).

The diagnosis of liver disease depends on a combination of patient?s history, physical examinations, laboratory tests, radiological tests, and frequently a liver biopsy. Blood tests play an important role in the diagnosis of liver diseases.

However, their results should be analyzed along with the patient?s history and physical examination. The most com- mon radiological examinations used in the assessment of liver diseases are ultrasound and sonography. Ultrasound is a good test for the detection of liver masses, assessment of bile ducts, and detection of gallstones presence. However, it does not detect the degree of inflammation or fibrosis of the liver. Ultrasound is a noninvasive procedure and there are no risks associated with it. Liver biopsy enables the doctor to examine how much inflammation and how much scarring has occurred. Liver biopsy is an example of invasive proce- dure that carries certain risks to the patient. Therefore, de- spite of the importance of its results to the diagnosis, clini- cians try to avoid biopsy as often as possible. However, liver biopsy is often the only way to establish correct diagnosis in patients with chronic liver disorders.

A medical treatment is naturally associated with re- classification of patients from one decision class into an- other one. In this research we were mainly interested in the re-classification of patients from the class IIb into class I and from the class IIIa into class I but without referring to any invasive tests results in action rules.

Database HEPAR has many missing values. Follow- ing the approach proposed in [22], we removed all its at- tributes with more than 90% of null values assuming that these attributes are not related to invasive tests. Also, sub- jective attributes (like history of alcohol abuse) have been removed. Next, we used one of the classical null value imputation techniques (provided in Rough Sets Exploration System (RSES)) to make the resulting database complete.

For the testing purpose, we have chosen the same d- reduct R = {m, n, q, u, y, aa, ah, ai, am, an, aw, bb, bg, bm, by, cj, cm} as in [22] because it does not contain any invasive tests. By d-reduct we mean a minimal subset of  attributes which by itself can fully characterize the knowl- edge about attribute d in the database. The description of attributes (tests) listed in R is given below:  ? m - Bleeding ? n - Subjaundice symptoms ? q - Eructation ? u - Obstruction ? y - Weight loss ? aa - Smoking ? ah - History of viral hepatitis (stable) ? ai - Surgeries in the past (stable) ? am - History of hospitalization (stable) ? an - Jaundice in pregnancy ? aw - Erythematous dermatitis ? bb - Cysts ? bg - Sharp liver edge (stable) ? bm - Blood cell plaque ? by - Alkaline phosphatase ? cj - Prothrombin index ? cm - Total cholesterol ? dd - Decision attribute  Many action rules have been discovered. Three of them had a very high confidence (close to 100) and they are given below:  [(am, 2) ? (ah, 2) ? (bg, 2)] ? (q, 2 ? 1) ? (cm, 2 ? 1) ? (dd, IIIA? I)  The first rule is applicable to patients with a history of hospitalization, history of viral hepatitis, and with a sharp liver edge which is not normal. It says that if we get rid of eructation and decrease the cholesterol level to normal, then we should be able to reclassify such patients from the category IIIA to I.

[(am, 2) ? (bg, 2) ? (ai, 1)] ? (u, 2 ? 1) ? (y, 2 ? 1) ? (dd, IIIA? I)  The second rule is applicable to patients with a history of hospitalization, with a sharp liver edge which is not normal, and with no surgeries in the past. It says that if we get rid of obstruction and change the weight loss level to normal,     then we should be able to reclassify such patients from the category IIIA to I.

[(am, 2) ? (bg, 2) ? (ai, 1)] ? (q, 2? 1) ? (u, 2? 1) ? (n, 2? 1)? (dd, IIIA? I)  The third rule is applicable to patients with a history of hospitalization, with a sharp liver edge which is not nor- mal, and with no surgeries in the past. It says that if we get rid of eructation, get rid of obstruction, and change the subjaundice symptoms to normal, then we should be able to reclassify such patients from the category IIIA to I.

8. Conclusion and Future Work  Action rules mining can be successfully applied in many other areas including Business and Music Information Re- trieval (MIR). In [23], authors present the system MIRAI for automatic indexing of music by instruments and emo- tions. When MIRAI receives a musical waveform, it di- vides that waveform into segments of equal size and then its classifiers identify the most dominating musical instru- ments and emotions associated with each segment and also with the musical waveform. In [12], [13] authors fol- low another approach and present a Basic Score Classifi- cation Database (BSCD) which describes associations be- tween different scales, regions, genres, and jumps. This database is used to automatically index a piece of music by emotions. In [19], it was shown how to use action rules ex- tracted from BSCD to modify the retrieved piece of music when we need to change the emotions it invokes in peo- ple. Action rules show how it can be achieved with a min- imal change in the associated music score. By a score, in MIR area, we mean a written form of a musical composi- tion. Representative association action rules form the small- est subset of association action rules which can be extracted from BSCD database from which the remaining associa- tion action rules can be generated by cover operator. The same, they can be interpreted as compact representations of classes of action rules.

9. Acknowledgment  This material is based in part upon work supported by the Ministry of Science and Higher Education in Poland under Grant N N519 404734, supported by the Bialystok Technical University under Grant Numbers W/WI/15/07, S/WI/1/08, and partially supported by the National Science Foundation under Grant Number IIS-0414815. Any opin- ions, findings, and conclusions or recommendations ex- pressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foun- dation.

