Mining Indirect Association Rules in Multi-database

Abstract?Nowadays the techniques of indirect assocation rules(IARs) mining focus on mono-database. With the rapid development of multi-database technology, multi-database mining is becoming more and more imporant. We propose an approach of synthesizing frequent itemsets before mining indirect rules in multi-database on base of previous work in multi-database mining. The experimental results demonstrate that algorithm is correct and effective.

Keywords- indirect association rules; data minining; multi- database

I.  INTRODUCTION The association rule is an important topic in the data  mining and knowledge discovery research field since the problem was pointed out by R.Agrawal in 1993[1]. We usually generate the strong association rules by mining frequent itemsets. With the further research on the mining of frequent itemsets, it has been recognized that some infrequent itemsets can provide very useful insight view into the data set, and a new kind of knowledge discovery problems called as indirect associations has been proposed[2]. Consider a pair of item x and y, which are rarely present together in the same transation. If both items are highly dependent on the presence of another itemsets M, then the pair of x and y is said to be indirectly associated by M called as mediator. There are many applications of indirect associations in  real world, for example, the indirect association rules can be used in classification of query results into categories, competitive product analysis and stock market analysis.

However, the existing techniques of indirect association rules mining only focus on mono-database, not on  multi- database. With the rapid development of multi-database technology, multi-database system has already been applied to real world widely. Decision makes need analysis multiple databases which are distributed in different branches, so as to make more reasonable and effective decision. Thus, it is very necessary to mine indirect association rules from multi- database for a large organization.

Traditonal multi-database mining puts all the data into a single dataset, which only reflects the overall  characteristics viewed the data as a whole, but neglects the distribution characteristics of local patterns. So some important rules cannot be extracted from multi-database. Furthmore, indirect association rules can be minied by frequent itemsets. In order to obtain indirect association rules in multi-database,  we propose an approach of synthesizing frequent itemsets before mining indirect association rules in multi-database.

The main contributions of this paper are as follows: 1. We propose an approach of synthesizing frequent  itemsets coming from different branches database in large organization.before mining indirect association rules.

2. An algorithm is proposed to discover indirect association rules in multi-database.

The rest of this paper is organized as follows. Section 2 is an introduction of the techniques of indirect association rules mining. A new method for discovering indirect association rules in multi-database and algorithm design is presented in Secion 3. Section 4 is experimental results and Section 5 is conclusions and future work.



II. RELATED WORK  Let I={ 1 2, ,..., mi i i } be a set of m literals called items.

Let the database D={ 1 2, ,..., nt t t } be a set of n transactions, where each transaction is a set of many literals. Let X be a set of items. A transaction T is said to contain X if and only if X T? . An itemset containing K items is called k- itemsets. The support of an itemset X denoted as sup(X) is defines as the fraction of all transactions containing X in D.

An itemset is frequent if its support is greater than or equal to user-specified threshold mini-sup.

In this paper, we use the denotation <A,B,M> to represent the indirect association pattern between item A and B via mediator M. A pair of item A and B is said to be indirectly associated via a mediator sequence M if the following conditions are satisfied:  (1) sup(A,B)<=ts (2) There exists a non-empty set M such that:  (a) sup(A,M)>=tf, sup(B,M)>=tf, (b) dep(A,M)>=td, dep(B,M)>=td  Here, dep(A,B)= ( ) ( ) ( )  P A B  P A P B  ? ?  , it is a measure of  the dependence between itemsets A and B. P represents the probability that the given itemsets appears in the transacion database. The thresholds ts, tf, and td are called itempair support threshold, mediator support threshold, and dependence threshold, respectively. We usually set tf>=ts in practice.

Existing researches on indirect association rules mining can be divided into categories, either focusing on       development efficient algorithms or extending the definition of indirect association for different applications.

The indirect association mining approach was first proposed by Tan et al.[2], called ?INDIRECT?. There are two phases in the algorithm:  1. Extract all frequent itemsets using standard frequent itemset mining algorithms such as Apriori ;  2. Discover valid indirect associations by checking all the candidate associations generated from the frequent itemsets.

But it is time-consuming for generating all frequent itemsets before mining indirect association.Wan and An[3] propose an approach called HI-mine for improving the efficiency of  the INDIRECT algorithm. Chen et al.[4] take into account the lifespan of items to explore a new model of temporal indirect association and  develop an algorithm MG-Growth for indirect association mining. Ouyang et al.[5] use infrequent itemsets to find both direct and indirect association patterns. Zheng Cheng[6] put forward an incremental upadating algorithm to deal with the maintenance of discovered indirect association rules resulted from the change of the minimum support. Ouyang et al.[7] put forward an indirect weighted association rule mining model to extend the indirect association rule mining model by taking account of their different roles in real world applications. Ouyang et al.[8] propose an algorithm for mining direct and indirect association patterns with multiple minimum supports which can solve the dilemma of minimum support threshold.



III. MINING INDIRECT ASSOCIATION RULES IN MULTI- DATABASE  Multi-database mining is an process of finding novel and useful pattern from many different branch databases in large orgnaziation. It can be divided be three steps as follows.

First, classify this database into defferent classification.

Second, mine this calssification for interesting patterns  called local pattern.

Third, synthesize knowledge which is mined from  similar database. Weighting is a common way to gather, analyze, and  synthesize information from different databases in scientific research and application. Such as Shichao Zhang etc in paer [9] propose a method of synthesizing knowledge by weights.

In this paper, we first calculate the weights of both frequent itemsets and databases after mining each database, then synthetize these knowledge. Finally we can obtain indirect association rules by indirect association rules mining algorithm.

A. Synthesizing frequent itemset by weighting  1) Weight of frequent itemsets Let L={ 1 2, ,..., mL L L }, and 1 2, ,..., nR R R  be all frequent itemsets in L. The weight of  Ri as follows:   ( ) ( )i i  R n  jj  Num R  Num R ?  ?  ? ?    Where i=1,2?n, and Num(R) is the number of databases that contain frequent itemset R, or the vote of  R in L.

2) Weight of databases Let 1 2, ,..., mD D D  be m different databases in the branches of a company, Li the set of frequent itemset from Di (i=1,2?m,) L={ 1 2, ,..., mL L L }, and 1 2, ,..., nR R R  be all frequent itemsets in L. The weight of  Di as follows:   ( )  ( ) ik i  i  hh i  k RR L  D m  h Rj R L  Num R  Num R  ? ?  ? ?  ? ?   ?    ? ? ?    After all databases are allocated to the corresponding weights, the subsidiary frequent itemsets can be synthesized.

Then we can get total frequent itemsets support and start to mine indirect association rules.

3) Synthesizing frequent itemsets by weighting Let 1 2, ,..., mD D D  be m different databases from one class of the branches of a large company, and Li be the set of frequent itemsets from Di (i=1,2?m,). For given frequent itemsets, suppose 1 2, ... m? ? ?  are the weights of D1,D2?Dm   respectively, synthesizing model as follows:  1 21 2 sup ( , ) sup ( , ) sup ( , )  ... sup ( , ) m  D D  D m  p A B p A B p A B  p A B  ? ? ?  ?  ?       Where sup ( )p R?  is the support of R after synthesizing, sup ( )ip R  is the support of R in Di.

B. Generating indirect association rules  Indirect association rules  mining is mainly divided into the following two-step in the literature:  (1) Extract all frequent itemsets using Apriori.

(2) Discover valid indirect associations by checking all  the candidate associations generated from the frequent itemsets.

A pair of item A and B is said to be indirectly associated via a mediator sequence M if the following conditions are satisfied:  (1) sup(A,B)<=ts (2) There exists a non-empty set M such that:  (a) sup(A,M)>=tf, sup(B,M)>=tf, (b) dep(A,M)>=td, dep(B,M)>=td  So indirect association rule mining is to find out to meet the conditions of association rules such as <A,B,M>.

C. Algorithm design  The algorithm of frequent itemset is discribed as follow: 1) Itemsets synthesis algorithm  Algorithm: Itemsets Synthesizing Input:L1, L2, ? Lm: frequent itemsets; min_supp:  threshold values; Output: L: synthesized frequent itemsets;  L {L1,L2,...Lm}; Call ItemSelection(L); for i=1 to n do      ( ) ( )i i  R n  jj  Num R  Num R ?  ?  ? ?  for i=1 to m do   ( )  ( ) ik i  i  hh i  k RR L  D m  h Rj R L  Num R  Num R  ? ?  ? ?  ? ?   ?    ? ? ?  for each frequent itempair (A,B)  1 21 2 sup ( , ) sup ( , ) sup ( , )  ... sup ( , ) m  D D  D m  p A B p A B p A B  p A B  ? ? ?  ?  ?        rank the supports of the frequent itempairs in frequent itemsets from high to low arrangement.

output the frequent itempair if its support is greater than or equal to user-specified threshold mini-sup.

In this algorithm, we calculate the weights of frequent itemsets and branch databases in step  and  , and then we calculate the global supports of the frequent itempairs in step . At last, we select the frequent itempairs by the support.

The algorithm of indirect assosiation rules mining is discribed as follows.

2) Indirect association rules mining algorithm Algorithm: Indirect Association Rules Mining Input: L1, L2?Ln: frequent item; ts: support threshold; td: dependency support threshold; Output:SIA: indirect association rules set;  L {L1,L2?Ln}; SIA=?; for k=2 to n do {Ck+1=join(Lk,Lk);  for each <A,B,M> Ck+1 do {if(supp(A,B)<ts and dep(A,M)>=td and (B,M)>=td);  SIA=SIA <A,B,M> ; }  }; output SIA;  All from mining candidate itemsets are frequent itempair, so we do not need to test the two conditions supp(A,M)>=tf and supp(B,M)>=tf.

In this algorithm, the key step is to join frequent itemsets and find itempair which meets the conditions of indirect association rules in step .

We  design an example to illustrate our algorithm. Let D1, D2 and D3 be three transaction databases.

D1={(A,B,D,E);(B,C,D);(B,D,E);(A,C,D);(A,D);(A,D,E) };  D2={(B,C,D,E),(B,D);(A,C,D,E);(A,B,C,D);(A,D);(B,D, E)};  D3={(A,D,E);(B,D);(B,C,D);(B,C,D,E);(A,B,C,D);(A,D) };  Mining each database by Aprior algorithm, taking min_support=0.3. We first use Aproior algorithm to find frequent itemsets and prune them to obtain the frequent itempairs, which are showed in Tab. I.

TABLE I. FREQUENT ITME PAIRS AFTER PRUNING  Database Frequent itemsets  D1 (A,0.67),(B,0.5),(C,0.33),D(1),E(0.5),(AD,0.67),  (AE,0.33),(BD,0.67),(BE,0.33),(CD,0.33),(DE,0.67)  D2 (A,0.5),(B,0.67),(C,0.5),D(1),E(0.5),(AC,0.33),(AD,0.5),  (BC,0.33),(BD,0.5),(BE,0.33),(CD,0.5),(CE,0.33),(DE,0.5)  D3 (A,0.5),(B,0.67),(C,0.5),D(1),E(0.33), (AB,0.33),  (AC,0.33),(BC,0.33),(BD,0.67),(CD,0.5),(AD,0.67)  We can find frequent itemset L={R1: AB; R2: AD; R3:  AE; R4:BD; R5: BE; R6: CD; R7: DE; R8: AC; R9: BC; R10: CE }. The weights of each frequent itempair and database can be computed by formula.

1 3 5 0.15R R R? ? ?? ? ? ;  2 9 10 0.05R R R? ? ?? ? ? ;  4 6 7 8 0.1R R R R? ? ? ?? ? ? ? ;  1 1 1 0.3103, 0.3793, 0.3103.D D D? ? ?? ? ?  The supports of each frequent itempair are obtained by knowledge synthesis algorithm.

? ? ? ? ? ? ? ?  1 2   1 1 1 2 1  3 1 0.3103 0 0.3793 0  0.3103 0.33 0.1024.

D D  D  supp R supp R supp R  supp R  ? ? ?  ?  ?    ?    ?    In the same way, ? ? ? ? ? ? ? ? ? ? ? ?  2 3  4 5  6 7  0.6054, 0.2277,  0.6054, 0.2277,  0.4473, 0.3977.

supp R supp R  supp R supp R  supp R supp R  ? ?  ? ?  ? ?  ? ?  ? ?  ? ?    Mine the synthesized frequent itempair by indirect association rules algorithm, for ts=0.25, td=0.5. At last, we obtain the in direct association rules <A,B,D>, <A,C,D>,<A,E,D>,<B,C,D>,<B,E,D> and <C,E,D>, which indicate that data items A,B, items A,C, items A,E, items B,C, items B,E and items C,E are indirect associated by mediate item D.



IV. EXPERIMENTAL RESULTS We have performed relevant experiment to prove the  efficiency of the algorithm. The experiment has been implemented on a 1.6GHz Pentium processor with 1G of memory, using Visual Studio 2008 software. The synthetic datasets  T40I10D100K [9] has been generated using synthetic dataset generator from the IBM Almaden Quest research group.

The above dataset is divided into 10 databases for the purpose of carrying out experiments. The databases obtained from T10I4D100K are named as Di, for i=1,2,?,10. Tab.V shows the parameter setting in the experiment. Tab. VI shows the number of frequent itempairs in each database and the minimal support of each database.

TABLE II. PARAMETERS SETTING IN EXPERIMENT  Number of datasets 10 Number of transactions 10,000  The avarage length of transactions 11     Number of datasets 10 The avarage number of items in a database 866  TABLE III. NUMBER OF PATTERNS AND THE MINIMAL SUPPORTS  Dataset Number  of patterns  Patterns minsupp  D1 7 368{0.005},354{0.0024},529{0.0042},  829{0.0024},(368,529){0.003}, (368,354){0.0024},(529,829){0.0036}  0.0023  D2 17  529{0.0024},329{0.0013},354{0.0014}, 722{0.0012},368{0.001},217{0.0021},  684{0.0016},833{0.0011}, 120{0.0013},494{0.0015},  (529, 329){0.001},(529,354){0.0013}, (722,368){0.0024},(217,684){0.002}, (722,883){0.0017},(120,494){0.0029},  0.001  D3 6 529{0.0033},722{0.0036},368{0.0042},  829{0.0038},(529,722){0.0042}, (368,829){0.005},  0.003  D4 9  529{0.002},354{0.0017},368{0.0024}, 217{0.0015},722{0.0018},829{0.0015},  (529,354){0.0015},(368,217){0.002}, (722,829){0.003}  0.0015  D5 3 368{0.0037},529{0.0042},  (368,529){0.0035} 0.0035  D6 6 368{0.0039},829{0.003}, 529{0.0027},322{0.0031},  (368,829){0.0032},(529,322){0.0034} 0.0027  D7 8  494{0.0036},217{0.0033},354{0.0047}, 722{0.0039},529{0.0033},  (494,217){0.0033},(354,722){0.0036}, (354,529){0.0038}  0.0033  D8 6 120{0.004},722{0.0045},829{0.0048},  217{0.0049},(120,722){0.004}, (829,217){0.0041}  0.004  D9 3 368{0.0048},722{0.0045},  (368,722){0.005} 0.0045  D10 9  529{0.0037},829{0.0024},120{0.0023}, 368{0.0026},883{0.0022},  (529,829){0.002},(120,368){0.0024}, (368,883){0.0021}  0.002  Let ts=0.0003,td=0.5. Then use the algorithm to find indirect associate rules and the results are <368,883,722>, <684,494,217> and <120,217,494>.

The experiment results show that this method can be used to find indirect association rules efficiently. However, if we mine the ten databases as a whole, when the minsupp=0.002, we can only find one indirect associate rules <368,883,722>; however, when the minsupp=0.004, there are no indirect associate rules at all. Therefore, our method is more practical in application.



V. CONCLUSIONS AND FUTURE WORK We compare the existing indirect association rules  mining algorithms and analyze the merits and demerits.

What?s more, considering the features of the multi-database mining, we put the classical indirect association mining algorithm for frequent itemsets into it, which has been proved practical by the relevant experiment. As it needs to go through all the databases repeatedly, which is inefficiency, the next work we need to solve is to improve its productivity.

