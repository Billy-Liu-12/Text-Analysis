Performance Analysis ofUtility Mining  algorithms

Abstract - Utility Mining is one of the recent emerging fields in Data mining. The main objective of utility mining is to discover high utility itemsets from a database. It differs from traditional frequent itemset mining. In frequent itemset mining, frequently occurred items in database are found. But in Utility mining, itemsets with high utility (utility here refers profit, number of items, cost of an item or any user favorite value) are retrieved.  Hence utility mining retrieves semantic correlation among items in a database. This helps in better decision making for target markets, cross selling etc. In recent years numerous algorithms like Two-Phase, UP-Growth+  , EFIM algorithm, FHM algorithm , HUI-Miner algorithm , IHUP, d2HUP are proposed to find high utility itemsets. These algorithms calculate only positive utility values. There are also algorithms like FHN, HUINIV to calculate high utility with negative values. In this paper performance of FHN and HUINIV are compared and experimental results are discussed.

Keywords  Data mining; Utility mining; High utility itemset mining; Utility mining algorithms;    1. I. INTRODUCTION Data mining is the process of extraction of  implicit information and knowledge which are previously unknown and potentially useful [1][2].

Data mining analyzes large volumes of data and automatically discovers interesting and previously unknown relationships among data. This helps in better understanding of the underlying processes.

Data mining is a combination of statistics, artificial intelligence and machine learning[2].  Utility mining is one of the fields in data mining. Utility mining is  defined as discovery of itemsets whose utility value go beyond user mentioned minimum utility threshold.

The concept of utility mining comes from frequent itemset mining [3]. Frequent itemset mining reveals frequent items in a database, which does not concentrates on significant importance of that purchased item[3]. Consider an electronic super store. Assume that the profit of a mobile phone is 5000 INR and the profit of a memory card is 15 INR.

In a transaction database, memory card occurs in 10 transactions and mobile phone occurs in 3 transactions. The total profit of memory card is 150 INR and the total profit of a mobile phone is 15000 INR. As per frequent itemset mining memory card has high frequency. But the total profit of a mobile phone is much greater than a memory card. Hence, traditional frequent itemset mining cannot discover the most important itemsets.  This is because frequent itemset mining does not consider the profit (i.e.

utility) of an item, which is also highly important in decision making. As per utility mining by considering profit mobile phone has high utility.

The inputs of utility mining algorithms are: a transaction database, utility values of items and minimum utility threshold. Utility mining algorithms work as follows [4][5]: First the itemsets are generated. Then Utility values of all itemsets are calculated.  Now this utility values is compared with user given minimum utility threshold. If the itemset utility is greater than minimum threshold, then such items are defined as high utility itemsets.

Fig 1. Utility mining process    2. II. PRELIMINARY DEFINITIONS The following are some of the preliminary  definitions for discovering high utility itemsets[4] [5][6].

Definition 1: The internal utility of an item ip is a transaction dependent numerical value. In general the quantity of an item in transaction is taken as internal utility.

Definition 2:  The external utility of an item ipis transaction independent numerical value, defined by the user. It reflects importance of the item. It is common practice to choose profit as external utility.

External utilities are stored in a separate utility table.

Definition 3:  Utility function f is a function of two utilities. In general the product of internal and external utilityis considered as utility function.

Definition 4: The utility of item ip in transaction T is the calculated using utility function.

Utility of an item in a particular transaction = product of its internal utility in that transaction and its external utility.

Definition 5: The utility of itemset S in  ip S,S T.

Definition 6: The utility of itemset S in database DB is defined as,  T DB, S T.

Definition 7: The utility of transaction T is defined as u(T) = Pip T u(ip, T).

Definition 8:  Itemset S is said to be high utility itemset if and only if  U(S) in_Util where Min_Util is user specified minimum utility threshold.



III. HIGH UTILITY MINING ALGORITHMS  A. FHM - Faster High-Utility Itemset Mining using Estimated Utility Co-occurrence Pruning  Philippe Fournier-Viger, Cheng-Wei Wu, SouleymaneZida, Vincent S.Tseng developed FHM algorithm[7]. It is based on HUI miner algorithm.

The algorithm first calculates TWU of items and arranges them in ascending order.  Then a novel structure Estimated Utility Co-Occurrence Structure i.e EUCS was build[7].  All utility measures are stored in this structure and high utility itemsets are retrieved. The following is pseudo code for FHM algorithm [7].

Pseudocode1. FHM algorithm.

B. EFIM - Efficient high-utility Itemset Mining :  SouleymaneZida, Philippe Fournier-Viger, Jerry Chun-Wei Lin,Cheng-Wei Wu, Vincent S.

Tseng proposed EFIM[8]. This algorithm uses two upper-bounds - sub-tree utility and local utility.It also proposed an array-based utility counting technique called Fast Utility Counting to calculate upper bounds[8].

Pseudocode2. EFIM algorithm.

C. HUI-Miner - High Utility Itemset Miner :  MengchiLiu  andJunfengQu developed this algorithm [9].This algorithm does not generates any candidate itemsets. . HUI-Miner uses a structure, known as utility-list, which stores utility details of an itemset.

Pseudocode3. HUI miner algorithm  D. UP-Growth - Utility Pattern Growth  Vincent S. Tseng, Cheng-Wei Wu, Bai-En Shie , and Philip S. Yu proposed UP Growth algorithm[11]. The information of high utility itemsets are stored in a data structure called UP-Tree  i.eUtility Pattern Tree. Here candidate itemsets are generated by two scans of the database.

E.D2HUP - Direct Discovery of High Utility Patterns  Junqiang Liu and Benjamin proposed D2HUP algorithm [10]. This algorithm is an integration of the depth-first search of the reverse set enumeration tree with some pruning techniques.

Pseudocode D2HUP algorithm

III. EXPERIMENTAL EVALUATION  To evaluate the performance of various algorithms, an experiment is conducted with a RETAIL DATASET. It is a benchmark dataset. It contains retail market basket data from an anonymous Belgian retail store. It contains 541909 instances with 8 attributes. All the algorithms was implemented in Java and executed in a machine with 3.20 GHz CPU. In this experiment the algorithm was executed with 1000, 2000, 3000, 4000 and 5000 transactions.  Candidates count, execution time and number of Itemsets retrieved for each algorithm are compared. Also the numbers of items with various minimum threshold values are compared.

The following figures shows the performance of various high utility mining algorithms.  Figure 2 shows Comparison of execution time (in milli seconds) and memory used (in Kilobytes) by various utility mining algorithms.  From this figure, D2HUP algorithm, has less execution time and HUI miner algorithm has occupied less memory space. Figure 3 shows the comparison of number of candidates items generated at various minimum utility threshold like 1000, 2000, 3000 and 4000.

Fig 2. Comparison of execution time and memory used by utility mining algorithms      Fig 3. Comparison of number of candidates items generated in utility mining algorithms  CONCLUSION  In Data Mining, Utility mining is gaining more research in recent years. It is originated from frequent itemset mining only. The basic difference is frequent itemset mining does not concentrates on profit, number of items purchaed or cost of an itemset. In real life applications there may be some items, which may not be frequent but may have high profit. Utility Mining mines such high utility itemsets in a  transaction database. It is very beneficial in several real-life applications. In this paper a brief overview of various algorithms for high utility itemset mining was presented and those algorithms are compared with various performance factors like Execution time, memory used and number of candidates generated.

