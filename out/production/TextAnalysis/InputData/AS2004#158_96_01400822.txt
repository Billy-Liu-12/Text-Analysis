<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">2004 IEEE

Abstract - In the past, researchers usually assumed databases were static and items lay on the same level to simplify the mining problem. Modijcation of records with item taronomy is, however, commonly seen in real-world applications. In this paper, we thus attempt to extend Han and Fu ?s approach and our previous concept of pre-large itemsets to maintain discovered multiple-level association rules for record modijication. The concept of pre-large itemsets is used to reduce the need for rescanning original databases and ta save maintenance costs. A pre-large itemset is not truly large, but promises ta be large in the firture. An algorithm is proposed based on the concept to achieve this purpose. The proposed algorithm doesn?t need to rescan the original database until a number of records have been modijied Keywords: Data mining, association rule, large itemset, pre-large itemset, record modification.

1 Introduction Due to the increasing use of very large databases and data warehouses, mining useful information and helpful knowledge from transactions is evolving into an important research area. In the past, researchers usually assumed databases were static to simplify data-mining problems.

Thus, most of the classic algorithms proposed focused on batch mining [1][3][5][9~[101[131[l71[181.

Cheung and his co-workers proposed an incremental mining algorithm, called FUP (Fast UF?date algorithm) [6][8], for incrementally maintaining mined association rules. In [l I], Hong et. al. proposed an incremental miniig algorithm for inserted transactions, which can further reduce the number of rescanning the databases. It uses a lower support threshold and an upper support threshold to reduce the need for rescanning original databases and to save maintenance costs. Pre-large itemsets are not truly large. They act like buffers in the incremental miniig process and are used to reduce the movements of itemsets directly from large to small and vice-versa.

Most algorithms for association rule miniig focused on finding association rules on the single-concept level.

Tzu-Juog Huang and Chao-Sheng Chang Department of Information Management I-Shou University Kaohsiung ,84008, Taiwan, R.O.C.

m9122006@s!mail.isu.edu.tw and ccs@isu.edu.tw However, mining multiple-concept-level rules may lead to discovery of more specific and important knowledge from database. Relevant item taxonomies are usually predefied in real-world applications and can be represented using hierarchy trees. In addition to record insertion and deletion, record modification is also commonly seen in real-world applications. Although maintenance of association rules for records modification can be performed by usage of the deletion and the insertion procedures, twice computation time of a single procedure is needed. Developing efficient maintenance algorithms for modification of records is thus necessary.

In this paper, we thus attempt to extend Han and Fu?s approach and the concept of pre-large itemsets to maintain discovered multiple-level association rules for record modification. A new algorithm is proposed to maintain discovered multiple-level association rules for modification of records. The proposed algorithm doesn?t    modification of records. The proposed algorithm doesn?t need to rescan the original database until a number of records have been modified. If the database is large, then the number of modified records allowed will be large too.

2 Multiple-Level Association Rules Most algorithms for association rule mining focused on finding association rules on the single-concept level.

However, mining multiple-concept-level rules may lead to discover more specific and important knowledge from data. For example, Wonder wheat bread is a wheat bread which is also a kind of bread. Relevant item taxonomies are usually predefined in real-world applications and can be represented using hierarchy trees. Terminal nodes on the trees represent actual items appearing in transactions; internal nodes represent classes or concepts formed by lower-level nodes. A simple example is given in Figure 1.

In Figure 1, the root node is on level 0, the internal nodes representing categories (such as ?milk?) are on level 1, the internal nodes representing flavors (such as ?chocolate?) are on level 2, and the terminal nodes representing brands (such as ?Foremost?) are on level 3.

Only terminal nodes appear in transactions.

* 0-7803-8566-7/04/$20.00 0 2004 JEEE.

31 40 Food Table 2: Two modified records Items In [Il l ,  Hang et. al. proposed a maintenance algorithm for record insertion. It can reduce the number of rescanning an original database by using the pre-large itemsets. A pre-large itemset is not truly large, but promises to be large in the future. A lower support threshold and an upper support threshold are used to realize this concept.

Although maintenance of rules for modification of records can be performed by wage of the deletion procedure and the insertion procedure, twice computation time of a single procedure is needed.Therefore, we attempt to use the pre-large concept to maintain mined association rules as records are modified. Processing record modification is, however, different from processing record insertion and deletion. Tbe former must consider the change of record contents. Let record difference be the changes between modified records and original records. For example, assume Table 1 is the original database and the minimum support is 50%. The originally large I-itemsets are {(A), (B), (C), (D), p)}, Let Tables 3 represent the two records before modification and after modification.

Table 3: Two modification records I I Figure 1 : An example of taxonomy Han and Fu proposed a method for fmding level- crossing association rules at multiple levels [IO]. Nodes in predefined taxonomies are fust encoded using sequences of numbers and the symbol "*" according to their positioris in the hierarchy tree. For example, the intemal node "Milk " in Figure 1 would he represented by 1**, the internal node "Chocolate" by 11*, and the terminal node "Dairyland' by 11 1. A top-down progressively deepening search approach is used and exploration of "level-crossing" association relationships is allowed. Candidate itemsets on cettain  levels may contain items on other levels. For exarr.ple, candidate 2-itemsets on level 2 are not limited to containing only pairs of large items on level 2. Instsad, large items on level 2 may he paired with large item!: on level 1 to form candidate 2-itemsets on level 2 (such as {11*, 2**)).

3 Rule Maintenance When records in a database are modified, the original association rules may become invalid, or new impl6:itly valid rules may appear in the resulting updated database.

For example, assume a database has ten records as shown    For example, assume a database has ten records as shown in Table 1 and assume the minimum support is 50%. The large 1-itemsets mined out from the database are {(A), (B), (C), (D), (E)}. If the two records TID=900 and T7D=lOOO in Table 1 are modified as shown in Table 2, the origit.ally large itemset (D) will become small.

before modification after modification Items IIems ABF 1000 DEF Let k-itemset difference be the count difference ofk- itemsets due to record modification. The difference of 1- itemset is shown in Table 4.

Table 4: The difference between 1-itemsets. 1 Items 1 Difference A I 0 -1 I B r This 1-itemset difference can be represented as (C: -1, D: -2, F +I). Similarly, the 2-itemset difference is (AC: -1, AD: -1, AF: +1, BC: -1, BD: -l,BF: +1, CD: -1, D E  -1, D F  -I), and the 3-itemset difference is (ABC: -1, ABD: -1, ACD: -1, BCD -1, ABF: +1, DEF -1). The itemset difference derived from the modified records is then used to maintain the association rules.

In the above example, the 1-itemsets {A), (B] and {E} have no count difference and are the same as before the modification. They are thus still large after record modification. Their supersets (AB], {AE], {BE} and {ABE), which are formed from these three I-itemsets, also have no count difference. The I-itemsets (C} and {D] have negative count difference, causing some original large itemsets with (C} or (D) to become small. On the contrary, the I-itemset {F] have positive count difference, causing some original small itemsets with {F} to become large.

Thus only the itemsets including items with count difference must be reconsidered.

Considering an original database and its itemset difference from some modified records, the following nine cases (illustrated in Figure 2) may arise when the concept of pre-large itemsets is used, where the negative itemsets represent those with count difference smaller than zero: Case 4 Case 5 Origind Pre-large or Lorge, Decidedfrom the existing information No chanze Figure 2: Nine cases arising from modifying records in existing databases Case 1 will keep the originally large itemsets still large since their final counts increase. Cases 2, 5 and 8 will keep the itemsets behave as they did before record modification since their fmal counts do not change. These three cases will not affect the final association rules. Cases 3 and 6 may remove existing large or pre-large itemsets, but cases 4 and 7 may add new large or pre-large itemsets. If we retain all large and pre-large itemsets with their counts, then cases 3, 4 and 6 can be handled easily since the original counts and the difference counts of the itemsets in these cases are known. Also, in the maintenance phase, the ratio of the numher of modified records to the number of all records is usually very small. This is more apparent when the database is larger. An itemset in case 7 cannot possibly be large for the entire updated database as long as the number of modified records is small when compared to the number of records in the original database. Finally, the itemsets in Cases 9 cannot become large since their counts decrease. A summary of the nine cases and their results is given in Table 5.

Table 5.

Table 5 :  Nine cases and their results Small or Pre-large or Large, Pre-large or Small, Case 6 Case 7 Case8 I No chanze Case9 1 Always Small Let S, and S. be respectively the lower and the upper support thresholds, d and t be respectively the numbers of the original and modified records, and r denote the ratio of the number t of modified records to the numher d of all records. In [I I], we have shown that if r 5 (Su- SI), then an itemset that is small (neither large nor pre-large) in the original database won?t become large for the entire updated database. In this paper, we will generalize the approach to maintain the association rules with item taxonomies 4 Notation The notation used in this paper is defined below.

D : the original database; T :  the set of modified records; U: the updated database; RD : record difference IDk : the k-itemset difference: d : the number of records in D; t : the number of record in T; SI : the lower support threshold forpre-large itemsets; S. : the upper support threshold for large itemsets. S. ?SI; L f  : the set of large k-itemsefsfiom D; L: : the set of large k-itemsetsfiom U; p; : the set ofpre-large k-itemsets fiom D; p i  : the set ofpre-large k-itemsets from U; I : an itemset; fm: the count of I in D; pD(I) : the count o f I  in ID; fer) : the count of I in U 5 The Proposed Algorithm The proposed maintenance algorithm for record modification integrates Hang et al?s pre-large concepts and Han and Fu?s multi-level miniig method. Assume d is the number of transactions in the original database. A variable, 31 42 c, is used to record the number of modified transactions since the last re-scanning of the original database. D,:tails of the proposed maintenance algorithm are given below.

The proposed multi-level maintenance algorithm for record modijkation: INPUT: A set of large and pre-large itemsets in the original database consisting of d records, a set of t modified records, a predefmed taxonomy, a lower  support threshold SI, an upper support threrihold Su, and a predefmed confidence value h .

OUTPUT A set of multiple-level association rules for the STEP 1 : Calculate the safety number f of modified records updated database.

as follows: STEP 2: Set 1 = 1, where 1 records the level of items in STEP 3: Set k =I, where k records the number of items in taxonomy.

itemsets.

STEP 4: Derive the k-itemset difference ID1 from the modified records.

STEP 5: Partition the itemsets in IDk into three parts according to whether they are large, pre-lar(:e or small in the original database.

STEP 6: For each itemset I existing in both the originally large k-itemsets L; and in the k-itemset difference IDh do the following substeps: Substep 6-1: If I exists in IDk from the modified records, then set the new c o u n t f f l otherwise, set pm = s"(I).

otherwise, set pm = s"(I).

I as a large itemset, set f ( r )  = d (I) and kcep I with P(I); otherwise, if f(l)/d 2S,, assign I as a pre-large itemset, set P(I) = ,f'(0 and keep I with f(l); otherwise, just remove I from the large itemsets.

STEP 7: For each itemset I existing in both the originally pre-large itemset p; and in the k-ite.nset difference IDb do the following substeps: Substep 7-1: If I exists in IDk fiom the modified records, then set the new count :f'@ otherwise, set s"(0 = F(I).

= F(I) + B(0; Substep 6-2: If f @ / d  2 S., assi = f(I) + P(0; Substep 7-2: If pf l /d  2 S., assi I as a large itemset, set f(I) = F fl and ktep I with P(0; otherwise, if s"m/d Z S ,  assign I as a pre-large itemset, set F(I) = Y f l and keep I with 90; otherwise, just remove I from the pre-large itemsets.

STEP 8: For each itemset I in IDk that is not in the originally large itemsets L? or pre-large itemsets pf  , do the following substeps: Substep 8-1: If I has positive counts in IDk, then put it in the rescan-set R, which is used when rescanning in Step 9 is necessary; otherwise, just neglect I.

STEP 9: If t+c 5 for  R is null, then do nothing; otherwise, rescan the original database to determine whether the itemsets in the rescan-set R are large or pre- large.

STEPlO:Setk=k+l.

STEP 11: Repeat STEPs 3 to 10 until no new large or pre- large itemsets are found.

STEP 12: Prune the kept large and pre-large itemsets on the next level which are not the descendents of those found after STEP 1 1.

STEP13:Set l=l+l .

STEP 14: Repeat STEPs 2 to 13 until all levels are proposed or there are no large and pre-large itemsets on level I.

STEP 15: Modify the association d e s  according to the STEP 16: Iff +c &gt;f; then set c=O; otherwise, set c=t+c.

After Step 16, the final multiple-level association rules for the updated database are found.

modified large itemsets.

6 AnExample An example is given to illustrate the proposed maintenance algorithm for record modification. Assume the original database includes 10 transactions as shown in Table 6.

Table 6. Encoded transaction data in the example ITEMS Assume SI = 30% and S. = 50%. The sets of large itemsets and pre-large itemsets on any level for the given original transaction database are shown in Tables 7 and 8, respectively. They a e  then kept for later maintenance.

Table 7: The large itemsets on all levels for the original database Table 8: The pre-large itemsets on all levels for the original database If the record with TZD = 900 in Table 6 is modified to be the one in Table 9, the proposed maintenance algorithm for record modification proceeds as follows. The variable c    is initially set at 0.

Table 9: The modified records Items 111,112,221 f =  (Su- SJd= (0.5-0.3)*10 = 2.

All candidate I-itemsets differenceand their counts on level 1 from the modification records are found. All candidate 1-itemsets are divided into three parts, according to they are large, pre-large or small in the original database.

The following substeps are then done for each of the originally large 1-itemsets {I**) and (2??).

Steps 3 to IO are then executed to fmd all updated large and pre-large itemsets on level 1, with results shown in Table 10.

Table 10: All the large and pre-large 2-itemsets on level 1 Large itemsets The large and pre-large itemsets on level 1 are used to prune the originally kept itemsets on level 2. If a itemset originally kept on level 2 is not a descendent of any one on level 1, it is pmed .  In this example, {31*} is pruned.

Steps 2 to 13 are then repeated to fmd all large and pre-large itemsets on level 2. Similarly, all large and pre- large itemsets on level 3 are found. The f m l  results are shown in Table 1 1.

Table 11. The laree itemsets on all levels for the uudated 7 Conclusions In this paper, we have proposed a maintenance algorithm to discover multiple-level association rules for modification of records. The proposed algorithm can efficiently and effectively maintain association rules with a taxonomy based on the pre-large concept. This process can further reduce the number of rescanning original databases and improve the mining performance when records are modified.

