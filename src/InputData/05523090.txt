The Design of Embedded Electromagnetic Data Acquisition System Base on Linux

Abstract?Recently, in the field of geological exploration, electromagnetic instruments have been tremendous growth, but they also have some typical shortcomings, such as big size, large power consumption, complex operation and so on.

Therefore, base on the current development of electronic technology, this paper has discussed hardware and software design of the electromagnetic data acquisition system, which makes use of 24-bit ?-? analog to digital converter AD7763, field programmable gate array, ARM9 processor S3C2440 and embedded Linux operating system. The system has high accuracy, small size and low power consumption, can be applied to a number of occasions.

Keywords-?-?; ARM; Embedded Linux Operating System; Electromagnetic; Data Acquisition

I.  INTRODUCTION Electromagnetic method is a kind of geophysical  method, which is based on the principle of electromagnetic induction to study the alternating electromagnetic field distribution of the natural or artificial (controlled) field source[1, 2], and 1  then study the electrical parameter underground and the geological characteristics. After the 20th century 80's, the theory and instruments of Controlled Source Audio-frequency Magnetotelluric has been developed greatly, and the application field have been extended to the general survey, exploration of oil natural gas? geothermal? metal mineral,  hydrology, engineering, environmental protection and other aspects[3, 4], Thus becoming the great importance to geophysical methods.

At present, some representative electromagnetic devices are: V8  multifunction electrical instrument of  Phoenix company, GDP-32 of  ZONGE, GMS-07 of Metronix, which have high performance and wide application range, but there are also some shortcomings, for example, the system have big size and large power consumption due to widespread using of industrial personal computer(IPC); man-machine interface is not friendly; operation is very complicated, so the further improvement of measurement accuracy is needed. For this reason, this paper provides a design program of embedded electromagnetic data acquisition system based on 24-bit ?-? analog-to-digital converter AD7763, FPGA, ARM9 processor S3C2440. The system has outstanding improvement in performance, power consumption, size, etc. It is in line with the current  ?Corresponding author: Haobin Dong, e-mail: donghb@cug.edu.cn  development trend of instrument, so it has a very important practical significance.

This paper is divided into four sections. In section 2, overall system hardware design is given, in addition, component selections of each part are introduced. The Main content of section 3 is detailed software design program.

Finally, this paper gives the summary and outlook of the data acquisition system.



II. OVERALL SYSTEM DESIGN Usually, electromagnetic data acquisition system is used  in the wild, so the technical requirements for equipment are: low power consumption, small size, large amount of data storage, high precision, multi-machine synchronization acquisition. The energy of signal accepted by electromagnetic sensor is very weak, and the amplitude is very small. Its magnitude is generally ?V ~ mV, so the signal is easily disturbed by noise. Based on the above factors, this paper proposes the following design, and the hardware includes the analog signal conditioning circuit and data acquisition circuit. The single acquisition block is shown in Figure.1.

Figure. 1 Single acquisition block   Since the signal that front-end sensor outputs is differential signal, the pre-amplifier function converts differential signal into single-ended signal, and provides the variable gain with high CMRR for entire system. The role of the main amplifier is giving variable gain so that the range of signal passes through the main amplifier is in the dynamic range of ADC. In order to achieve programmable gain control, the pre-amplifier and main amplifier are designed by means of the programmable gain instrumentation amplifier.

In the outdoor environment, the interference of 50Hz is inevitable, which is a serious impact on the accuracy of the system. When the power frequency interference signal exceeds a lot by contrast with measured signal, the interference signal will dominate the amplifier gain, so that   DOI 10.1109/ICICTA.2010.84     the amplifier can not effectively amplify measured signal.

In order to exclude the power frequency interference signal, the notch filters of the 50Hz, 150Hz and 250Hz are designed. The high-pass filter is needed too, which suppresses 1/f noise.

Using the analog switch achieves the option of the notch filter and the high pass filter access to circuit.

Based on 16-bit digital-to-analog converter, the DAC circuit is designed, which can achieve the self-test function of the system.

In the data acquisition circuit, 24-bit ?-? ADC AD7763, FPGA and ARM9 constitute a high-resolution A/D measurement system. The AD7763 combines wide input bandwidth and high speed with the benefits of ?-? conversion, as well as performance of 107 dB SNR at 625kSPS. An integrated buffer to drive the reference, a differential ampli-fier for signal buffering and level shifting, an overrange flag, internal gain and offset registers, and a low-pass, digital FIR filter make the AD7763 a compact, highly integrated data acquisition device requiring minimal peripheral component selection[5], which can effectively reduce the size of system. The AD7763 also provides synchronization function, four AD7763 devices can be used to perform synchronized measurement, and the synchronous clock is from the GPS.

Field-Programmable Gate Array is an interface converter between SPI interface of the AD7763 and parallel interface of the ARM9, the ARM9 sets user-programmable registers and read conversion results through FPGA.

Because the speeds of ARM9 and FPGA do not match, the data will be collected in the internal FIFO in temporary to ensure data is not lost, and the ARM9 read data from FIFO, store in the SD card. The ARM9 processor S3C2440 is used as the embedded Linux operating system transplantation platform, which has many excellences that are unmatchable for industrial personal computer (IPC) in power consumption and size, and greatly facilitates the application development and follow-up system upgrade.

The operating system controls the data acquisition and uploads conversion results via Ethernet interface.



III. SYSTEM SOFTWARE DESIGN Since this system is involved in the FPGA and  embedded Linux operating system, so the software includes FPGA software and data acquisition software under Linux operating system.

A. FPGA Software Design Based on the top-down design method and VHDL  language, FPGA software includes mainly the control program of the AD7763 and the LTC1650, and the followings are the detailed analysis of the control program of the AD7763.

1) Reading Data form the AD7763: In the first, CDIV pin of the AD7763 stays logic low and SCR pin stays logic high continuously. When the AD7763 complete a conversion process every time, the conversion result output on the SDO line is framed by the frame synchronization  output, FSO, which is sent logic low for 32 SCO cycles following the rising edge of the signal DRDY[5]. The FPGA can read each bit of the new conversion result on the falling SCO edge.

According to the reading timing diagram in the datasheet, the top-level reading operation procedure is designed, as shown in Figure 2. Firstly, the ARM9 must control rdreq pin to make FPGA generate a reading enable signal. Secondly, the ARM9 controls MUX32_16_SEL pin, and then reads 31-bit actual data. So completing an integrated reading process only needs rdreq pin and MUX32_16_SEL. The followings are the analysis of each functional module.

READ FIFO MUX32_16  RESET_GENRESET  DATAOUT_SIR  MUX32_16_SEL  SDO FSO  SCO  RESET_CON  16-bit data  DRDY  FIFO write and read enable  rdreq  Figure. 2 The reading operation top-level diagram  a) RESET_GEN: This module generates a signal of  resetting AD7763 under the control of RESET_CON pin, which must take RESET pin low for a minimum of 1 MCLK cycle.

b) READ : It is a 32-bit serial-parallel converter, in which SDO, SCO, FSO, DRDY, SDL line are respectively connected with corresponding pins of the AD7763. This module makes the input 32-bit serial data on SDO line converted into a 32-bit parallel data when FSO pin is in the state of logic low.

c) FIFO writing and reading enable: This module is make up of two D flip-flops, a NOT gate, a AND gate.

Writing enable module outputs a write enable pulse that is taken for a SCO cycle under the control of the signal DATAOUT_SIR from READ module, to make FIFO module store a new conversion data. Reading enable module outputs a SCO cycle width read allow pulse under the control of rdreq pin, thereby, and then the system can accomplish an operation of reading data from FIFO.

d) FIFO: The 32-bit, 2k depth FIFO is build by the pm-fifo module, which is used to store A/D conversion result in the temporary. The lpm-fifo module is inner in the Quartus software.

e) MUX32_16: Under the control of the signal MUX32_16_SEL, the MUX32_16 module delivers 32-bit data from the FIFO to the ARM9 in twice (16 bits each time).

The simulation result of reading operation timing is shown in Figure.3. It can be seen that the simulation timing is the same as timing in the datasheet, which meet the design requirement.

Figure. 3 Reading timing simulation   2) Writing to the AD7763: When the system writes a  command to the AD7763, a signal FSI is needed, which informs the AD7763 that a writing operation is coming, and then 32-bit command word is written to the registers in the AD7763 on the SCO falling edge. The first 16 bits select the device and register address for which the data written is intended. The second 16 bits contain the data for the selected register. Obviously, in the FPGA, the control software is easy to achieve.

According to the writing timing diagram in the datasheet, the writing operation top-level procedure is designed and shown in Figure.4. Firstly, the ARM9 must control MUX16_32_SEL pin and deliver 32 bits word to the FPGA   in twice (16 bits each time). Secondly, the ARM9 controls WRITE_CON pin to initiate a writing operation. The followings are the analysis of each functional module.

Figure. 4 The top-level writing operation diagram   a) WRITE: It is a 32-bit parallel-serial converter, which loads 32-bit data that MUX16_32 module outputs when signal LOAD is taken logic low, furthermore, writes 32-bit serial data to the AD7763 during taking LOAD signal logic high.

b) WRITE_CON: It is responsible for generating the signal two control signals under the control of pin WRITE_CON. One is signal FSI, which start writing user- programmable registers operation, another is signal LOAD, which control the loading and transmitting data of WRITE module.

c) MUX16_32: Under the control of the signal MUX16_32_SEL, the MUX16_32 module transforms two 16-bit words that the ARM9 outputs into 32-bit, and then deliver 32-bit word to the WRITE module.

The simulation result of writing operation timing is shown in Figure.5. It can be seen that the simulation timing is the same as timing in the datasheet, which meet the design requirement.

Figure. 5   Writing timing simulation    B. Embedded Software In order to achieve modular software design under  Linux operating system, the software is divided into three layers: GPIO driver, control function under Linux, QT interface program, and the relationship of program call is shown in Figure.6.

Figure. 6 The relationship of program call under Linux   GPIO driver is responsible for interface conversion  between FPGA and ARM9. Control functions under Linux control hardware devices by calling the functions in GPIO driver. Through making use of bottom C program, QT interface program achieve mainly human-machine interface operation. So the 3-layer software is called layer by layer [6].

1) GPIO Driver: Generally, in embedded Linux operating system, device driver is divided into three categories: character device, block device, network interface. Because output ports of the GPIO are directly connected with FPGA, the system adopts character device driver. The driver mainly achieves system calling of some functions, such as open (), close (), read (), write () and ioctl () and so on.

a) Open(): In the device driver, open () is used to initialize device, which is prepare for the equipment operation. Its main task is to confirm whether the hardware is in a state of readiness, verify the legitimacy of minor device number, control the number of equipment processes, return status code according to the function implementation(0 indicates success, a negative number indicates there is an error), etc.

b) Read (): In the device driver, read () is called to read data from the device. For include/asm-arm /arch-s3c2440/ regs-gpio.h already complete the hardware port mapping in Linux kernel, this function mainly call kernel function named __raw_readl () in order to sent data from GPIO port.

c)  Write(): In the device driver, write () is in charge of to write data to the hardware device. In the interface driver, write() call a kernel function named copy_from_user() so that the system transfer data from user space to kernel space     firstly, and then write data to GPIO port through kernel function __raw_writel ().

d) Ioctl(): In the device driver, ioctl () is responsible for reading data directly or set the state of GPIO port, yet in the interface driver, ioctl () mainly call s3c2410_gpio_setpin() and s3c2410_gpio_getpin() in the /arch/arm /mach-s3c2410/ gpio.c in order to set and read the status value of single GPIO port.

2) Control Function in Linux: In order to achieve modular programming, control program of each hardware device is needed, which is written by C language, and is compiled into an executable file [7]. The control program could set user-programmable registers of the AD7763 through   ioctl()? read()?write() of  the  interface driver, and read data from the AD7763 through ioctl()?read().

3) QT Interface Program: QT is a cross-platform C++ graphical user interface library, which is produced by the TrollTech in Norwegian, and provides all the tools that are necessary for the development of user interface application.

It primarily achieves this function in the form of the collecting of C++ classes [8, 9]. Because QT is based on C++, but Linux is based on C, mixed programming with C++ and C is needed.

Here, the interface program is divided into two parts: setting interface and data acquisition interface, so two C++ classes are needed. The operating system start and display interface by menu calling. In each interface, the system call control compiled program making use of the fork () and exec (), and then sent parameters to control program, so that the operating system completes setting the registers and reading data from the AD7763. The data acquisition interface is showed in Figure. 7.



IV. CONCLUSION This paper has discussed hardware and software design  of the electromagnetic data acquisition system, based on 24- bit, ?-?, analog to digital converter AD7763, field programmable gate array, ARM9 processor S3C2440 and embedded Linux operating system. The system has low power consumption, small size and anti-jamming ability, moreover, it is provided with friendly human-computer interaction interface, simple operation, distributed acquisition, which is in line with the current trend of technological development. It can be used in geological exploration, industrial data acquisition, etc.

