MOGA for Multi-Level Fuzzy Data Mining  Chun-Hao Chen, Chi-Hsuan Ho

Abstract-In this paper, we propose a Multi-Objective Multi? Level Genetic-Fuzzy Mining (MOMLGFM) algorithm for mining  a set of non-dominated membership functions for mining multi?  level fuzzy association rules. It first encodes the membership  functions of each item class (category) into a chromosome  according to the given taxonomy. The two objective functions of  each chromosome are then calculated. The first one is the  summation of large l-itemsets of each item in different concept  levels, and the second one is the suitability of membership  functions. The fitness value of each individual is then evaluated  by these two objective functions. After the GA process terminates,  various sets of membership functions could be used for deriving  multiple-level fuzzy association rules according to decision maker.

Experimental results on a simulation dataset also show the  effectiveness of the algorithm.

Keywords- data mining, multi-objective genetic algorithm, multi-concept levels, membership junction, juzzy association rule.



I. INTRODUCTION  Data mining is most commonly used in attempts to induce association rules from transaction data [1]. An association rule is an expression X ---+ Y, where X and Y are a set of items. It means in the set of transactions. if all the items in X exist in a transaction. then Y is also in the transaction with a high probability. A variety of mining approaches based on the Apriori algorithm [1] have also been proposed [3. 20]. Most of them focus on finding association rules on a single-concept level. and many approaches have also been proposed for mining multiple-concept -level association rules to discover more specific and important knowledge from data [7. 21].

Most of the approaches mentioned above focus on binary valued transaction data. but such in real-world applications usually consists of quantitative values. Fuzzy data mining algorithms have thus been proposed for handling quantitative transactions and mining fuzzy association rules [3. 10. 16,23].

As for multiple-concept levels fuzzy mining. according to the given fuzzy generalization hierarchies. Lee first proposed a generalized fuzzy quantitative association rules mining algorithm [15]. while Hong et ai. then proposed a multiple? level fuzzy association rule mining approach [I I]. Their method first transforms quantitative transactions into fuzzy values by using the predefined membership functions and taxonomy. and then a top-down progressively deepening approach is used to finding large itemsets and rules.

Additionally. in order to reduce the time complexity. only the linguistic term with the maximum cardinality of each item is   used in later mining processes. In [13]. Kaya et ai. proposed a weight fuzzy rule mining approach based on Hong et ai.'s approach. In 2008. Lee et al. proposed a fuzzy mining algorithm for discovering generalized fuzzy association rules with multiple supports of items to extract implicit knowledge from quantitative transaction data [17.18].

Those earlier approaches all assumed the membership functions to be known in advance. however. the given membership functions may have a critical influence on the final mining results. In recent years. various Genetic-Fuzzy Mining (GFM) approaches have then proposed to derive appropriate membership functions and mining fuzzy association rules [2. 4.

9. 12. 14]. Kaya et al. proposed a GA-based approach to derive a predefined number of membership functions to obtain the maximum profit within a user specified interval of minimum supports [12]. Hong et al. also proposed a genetic-fuzzy data? mining algorithm for extracting both association rules and membership functions from quantitative transactions [9].

A1cala-Fdez et al. then modified this approach to propose an enhanced approach based on the 2-tuples linguistic representation model [2]. In addition. multi-objective genetic? fuzzy mining approaches have also been proposed [4. 14].

However. these GFM algorithms focus on one single? concept level. Only few works focus on GFM algorithm for multiple-concept levels. In [5]. we proposed the multiple-level GFM algorithm for mining membership functions and fuzzy association rule on multiple-concept levels. Since decision makers may consider different criteria in a real application. the multi-objective optimization problems become more and more important. In this paper. we thus present a multi-objective multiple-level GFM algorithm for mining sets of membership functions and fuzzy association rule on multiple-concept levels.

According to the given taxonomy. it first encodes the membership functions of each item class (category) into a chromosome. Two objective functions are then used to evaluate the fitness value of each individual. The first one is the summation of the large 1-itemsets of each item in different concept levels. The second one is the suitability of membership functions in each chromosome. After the evolution process terminates. sets of membership functions can be used for mining multiple-level fuzzy association rules according to the different criteria of the decision makers.



II. THE COMPONENTS OF THE PROPOSED APPROUCH In this paper. we propose PA-AKD-based multi-objective  multi-level GFM algorithm for deriving a set of actionable    knowledge patterns. The details of the components in the proposed approach are described below.

A. Chromosome Representation It is important to encode membership functions as string  representation for GAs to be applied. Several possible encoding approaches have been described in [6, 22]. In order to effectively encode the associated membership functions, we use two parameters to represent each one, as in Parodi and Bonelli [19]. Thus, in multiple-level fuzzy rule mining, membership functions applied to an item class (category) are then assumed to be isosceles-triangle functions, as shown in Figure l.

Membership value   Quantity  Figure 1: Membership functions of item class ICi where R;k denotes the membership function of the k-th linguistic term of item class ICi, Cik indicates the center abscissa of fuzzy region Rik' and Wik represents half the spread of the fuzzy region R;k. As in Parodi and Bonelli, we then represent each membership function as a pair (c, w), and thus all such pairs for a certain item class are concatenated to represent its membership functions. The set of membership functions MF1 for the first item class IC1 is then represented as a substring of CllWll ... CIIICIIWIIlCII, where IICIi is the number of linguistic terms of ICI.

The entire set of membership functions is then encoded by concatenating substrings of MFI, MFb ... , MFi. Since C and W are both numeric values, a chromosome is thus encoded as a fixed-length real-number string rather than a bit string.

B. Initial Population A genetic algorithm requires a population of feasible  solutions to be initialized and updated during the evolution process. As mentioned above, each individual within the population is a set of isosceles-triangular membership functions.

Each membership function corresponds to a linguistic term in a certain item class. The initial set of chromosomes is randomly generated according to the given dataset with some constraints of forming feasible membership functions.

C. The Two Objective Functions Kaya et al. proposed an approach to derive membership  functions for mining problems [16]. It could get a maximum profit (maximum number of large itemsets) within an interval of user specified minimum support values. The derived membership functions were then used to mine fuzzy association rules. In our previous work, we have also proposed a genetic-fuzzy approach to learn an appropriate set of membership functions for mining problems [12]. In that paper, the fitness values were evaluated by the numbers of large 1-  itemsets over the suitability of membership functions. The two factors (numbers of large l-itemsets and suitability of membership functions) usually show a trade-off relationship. In this paper, we thus consider the mining of membership functions and fuzzy association rules as a multi-objective optimization problem, in which the above two factors are used as two objectives functions. A MOGA-based mining algorithm is thus proposed to find the Pareto optimal solutions. The first objective function (Obh) for a chromosome Cq is defined as follows:  where suitability( Cq) represents the shape suitability of the membership functions with Cq. Suitability(Cq) is defined as:  m  I [overlap _ factor( Cqj) + coverage _ factor( Cqj )], j?l  where m is the number of items. Overlap Jactor( Cq) represents the overlap factor of the membership functions for an item I; in the chromosome Cq and is defined as:  '" overlap( Rk ,R H ) overlap_factor(Cq)= L., [max(( . J Jl ),1)-1], kct; mm(wjk, wji)  where overlap(Rpo R;) is the overlap length of R;k and R;i. The coverage ratio of a set of membership functions for an item class ICi is defined as the coverage range of the functions divided by the average value of maximum quantity in each level of that item class in the transactions. The larger the coverage ratio is, the better the derived membership functions are. Thus, the coverage factor of the membership functions for an item class IC; in the chromosome Cq is defined as:  I coverageJactor(Cq;) = (R R ) ,  range ;1' ... , ;t avgMax(1C;)  where range(Rjl' Rj2, . . .  , Rjl) is the coverage range of the membership functions, I is the number of membership functions for IC;, and avgMax(IC;) is the average value of maximum quantity in each level of that item class in the transactions. The suitability factor is used to reduce the occurrence of the two bad kinds of membership functions, which are too redundant and too separate.

D. Fitness Assignment The fitness assignment is similar to that used in MOGA  [10]. Basically, it contains three steps including ranking chromosomes, assigning fitness, and averaging fitness values of the individuals with the same rank. For example, the previous ten chromosomes in Figure I are ranked according to their two objective values, with the results shown in Figure 2.

Objective function]  good  bad  1 C,  C 2 20 C; 0 3  C 3 50  C7 1 C8 1  C9 1 2 1  c6( 2 CiO  bad .,---------+. good Objective function2  Figure 2: The ranking results of the ten chromosomes  In Figure 2, a chromosome with a lower ranking value represents it has a better quality. Besides, the chromosomes with their ranking values at I are also called non-dominated solutions. The fitness value of a chromosome is then assigned according to its rank value. For a chromosome Cq with its ranking value at 1, its fitness value is assigned by the following formula:  f(Cq) = DomonatedBy(Cq) / (PSize + 1), where DominatedBy(C ) is the number of chromosomes dominated by the chromosome Cq and PSize is the population size. For a chromosome with its ranking value larger than 1, its fitness value is assigned by the following formula:  where fiCp ) is the fitness value of the chromosome Cp which dominates chromosome Cq- The constant value I is used here to ensure the fitness value of a dominated chromosome is larger than a non-dominated chromosome. Therefore, a chromosome with a smaller fitness value is considered better. For instance, the chromosome Cj in Figure 3 dominates three chromosomes.

Its fitness value is thus 3/ 11, which is 0.27. In the same way, the fitness values of the chromosomes C7, C8, C9 and CIO are 0.36, 0.36, 0.27 and 0.18, respectively. The chromosome C2 is dominated by Cj and C7. Its fitness value is thus calculated as 1 + 0.27 + 0.36, which is l.63. The results of other chromosomes are shown in Figure 3.

good Cj 0.27  c7O.36 1.63 c20 Cs 0.36 3.62  C3 0 Cy 0.27 C4 0 1.99  0.18 6.24 ( 1.81  Cm 0 C5 C6  bad  bad???----------?? good  Figure 3: The results of assign fitness of the ten chromosomes  There are five non-dominated chromosomes in Figure 3 and their fitness values may be different. Since they are all non? dominated, they are assumed to have equal importance to be reproduced in the selection procedure. Therefore, instead of the original fitness values, the average fitness value of the non? dominated chromosomes is calculated and assigned to each of them. In this example, the average fitness value of the non? dominated chromosomes is 0.288 (= (0.27 + 0.36 + 0.36 + 0.27 + 0.18) / 5). The fitness values for the chromosomes with the same ranks are also calculated in the same way.

E. Genetic Operators Genetic operators are very important to the success of  specific GA applications. Two genetic operators, the max-min? arithmetical (MMA) crossover proposed in [8] and the one? point mutation, are used in the proposed approach.

The one-point mutation operator will create a new fuzzy membership function by adding a random value E (between -Wjk to + Wjk ) to the center or to the spread of an existing linguistic term, say Rjk. Assume that c and W represent the center and the spread of Rjk? The center or the spread of the newly derived membership function will be changed to c + E or w + E by the mutation operation. Mutation at the center of a fuzzy membership function may however disrupt the order of the resulting fuzzy membership functions. These fuzzy membership functions then need rearrangement according to their center values. Besides, the selection strategy used in the proposed approach can be the elitist or the roulette-wheel strategy.



III. THE PROPOSED MINING ALGORITHM  According to the above description, the proposed multi? objective multiple-level genetic-fuzzy algorithm for mining both membership functions and fuzzy association rules is described below.

The proposed Multi-Objective Multi-Level GFM algorithm: INPUT: A body of n quantitative transaction data, a set of m  items, each with a number of linguistic terms, codes of item names, a predefined taxonomy, a population size PSize, a crossover rate Pc, a mutation rate Pm, a support threshold ex, and a confidence threshold A.

OUTPUT: A Set of non-dominated solutions. Each non? dominated solution is a set of membership functions with its set of multiple-level fuzzy association rules.

STEP I: Encode the predefined taxonomy using a sequence of numbers and the symbol "*", with the t-th number represents the branch numbers of a certain item on level t.

STEP 2: Translate the item names in the transaction data according to the encoding scheme.

STEP 3: Find level-k representation of the transaction data using following substeps:  SUBSTEP 3.1: Set k is used to store the level number being processed, and set k = 1.

SUBSTEP 3.2: Group the items with the same first k digits in each transaction datum Di, where I :::; i :::; n. Denote the j-th group on level k in . k transactIOn Di as v ij.

SUBSTEP 3.3: If level-k representation is not null, set k = k + 1 and go to SUBSTEP 3.2; otherwise, go to next step.

STEP 4: Randomly generate a population of PSize individuals according to the chromosome representation scheme.

Each individual is a set of membership function for items in level- l classes of the taxonomy.

STEP 5: Initialize the non-dominated set NDS as empty.

STEP 6: For each chromosome Cq, calculate its first objective  value, the suitability value, suitability(Cq) by using formula defined in previous section.

STEP 7: For each chromosome Cq. calculate its second objective value, the number of large l-itemsets (numLarLevel(Cq)), by the following substeps.

SUB STEP 7.1: Set k = 1, where k is used to store the level number being processed.

SUB STEP 7.2: Transform the quantitative value v\ of each transaction datum Di (i =1 to n) for each encoded group name 1/ into a fuzzy set J,/  d ({" kj k {" kj k represente as v iji RjI + J ij2 Rj2 + ... + J,jhkjRjI/), using the corresponding membership functions represented by the chromosome, where R/ is the l-th fuzzy region of item 1/, 1 sis h, J,/ is v\'s fuzzy membership value in region Rfl, and I is the number of linguistic terms for Ij ?  SUBSTEP 7.3: Calculate the scalar cardinality of each fuzzy region R/ in the transactions as follows:  n  count?1 = Ifij? .

i?l  SUB STEP 7.4: Check whether the count value of each fuzzy region Rjlk is larger than or equal to the predefined minimum support value rx. If the value of a fuzzy region Rjlk is equal to or greater than the minimum support value, put it in the large l-itemsets (LI k) at level k. That is:  L? ={R?llcount?12a,lSjSmk,lslsh}.

SUBSTEP 7.5: If level-k representation is not null, set k =  k + 1 and go to SUBSTEP 7.2; otherwise, go to next step.

SUBSTEP 7.6: Set the second objective value of the chromosome as the summation of the number of large l-itemsets in all levels as follows:  levels obj2(Cq) = LIL?I?  k?l STEP 8: Rank the chromosomes according to the two  objectives, suitability(Cq) and numLarLevel(Cq), by the following substeps:  SUB STEP 8.1: Set the variable r for representing the current rank, which is initially at o.

SUBSTEP 8.2: Find the non-dominated chromosomes among the un-ranked ones in the population, set r = r + 1, and set the ranking values of the non-dominated chromosomes as r.

SUBSTEP 8.3: If there still exist un-ranked chromosomes in the population, go to SUB STEP 8.2; otherwise, do the next step.

STEP 9: The fitness value of each chromosome is then calculated based on the ranking value by the following substeps.

SUBSTEP 9.1: Calculate the fitness values of the chromosomes with their ranking values equal to one as follows:  f(C) = DomonatedBy(C) / (PSize + I), where DominatedBy(Cq} is the number of chromosomes dominated by the chromosome Cq and PSize is the population size.

SUBSTEP 9.2: Calculate the fitness values of the chromosomes with their ranking values larger than one as mentioned in previous section.

STEP 10: Calculate the average fitness values of the chromosomes with the same ranking values such that each of them can be selected equally by the selection strategy.

STEP 11: Copy the chromosomes with their ranking values equal to one into the non-dominated set NDS and remove the chromosomes which are dominated by other chromosomes in NDS.

STEP 12: Execute the crossover operation on the population.

STEPI3: Execute the mutation operation on the population.

STEP 14: Calculate the fitness values of the new  chromosomes by STEPs 6 to 10.

STEP 15: Use the selection operation to choose appropriate  individuals from the set of NDS to form the next generation. Here, the selection strategy can be elitist or roulette wheel. If the size of NDS, called NDSSize, is less than population size, PSize, all the chromosomes in NDS are copied into next population and the number (PSize - NDSSize) of chromosomes are selected from the offspring chromosomes.

STEP 16: If the termination criterion is not satisfied, go to Step 6; otherwise, do the next step.

STEP 17: Execute the truncation operator on the non? dominated set NDS to find the best besCk solutions.

Since there may be more than one chromosome kept in NDS, the goal of this step is to keep the best_k representative solutions at the Pareto front.

Note that this step is optional.

STEP 18: Output the non-dominated set NDS with its set of multiple-level fuzzy association rules.



IV. EXPERIMENTAL RESULTS  In this section, the results of the experiments to show the performance of the proposed approach are described. The experiments were implemented in Java on a personal computer with Intel Core i7 @ 2.9GHz and 4.0GB RAM. 10,000 transactions were used in the experiments. The initial population size P was set at 50, the crossover rate Pc was set at 0.8, and the mutation rate Pm was set at 0.001. The parameter d of the crossover operator was set at 0.35 according to Herrera et al. [8], and the minimum support awas set at 0.04 (4%).

There were 64 purchased items (terminal nodes) on level 3, 16 generalized items on level 2, and four generalized items on level I. Each non-terminal node had four branches, and only the terminal nodes could appear in transactions. Data sets with different numbers of transactions were run by the    proposed algorithm. In the data set, the number of purchased items in transactions was first randomly generated, and the purchased items and their quantities in each transaction were then generated. An item could not be generated twice in a transaction.

The experiment was first made for demonstrating the evolution of the Pareto fronts with different generations by the proposed approach. After 1000 generations, the results are shown in Figure 4. The x and y axles represent the suitability and the summation of the number of large l-itemsets in all levels.

______________________ .. ___ I ?j?.--------------?.'. H? .

------------.?-A-.??????------------------------- -----,.r,' . -.r: ij  il .? . .: ?  ?  ?  Figure 4: The evolution of the Pareto fronts of different generation  From Figure 4, we can observe that the solutions were distributed on the Pareto fronts and the final solutions after 1000 generations were better than those in other generations.

Although the solutions on the Pareto fronts have some gaps, generally speaking, they are distributed on the front uniformly.

Besides, according to those solutions in Figure 4, it is also easily to know that the number of rules derived from the extreme solutions (with the highest number of large l-itemsets or with the best suitability value) is different. This is because the two objective functions focused on different goals. The solutions on a Pareto front are then trade-offs between the two objectives. It thus depends on the user preference to decide which solutions on the Pareto front are needed.



V. CONCLUSION AND FuTURE WORKS  In this paper, we first propose a MOGA fuzz data mining approach for deriving sets of membership functions suitable for multiple-level association rule mining According to the given taxonomy, the proposed algorithm first encodes the set of membership functions of item classes (categories) into a chromosome with real-number schema. In the evolution process, the two objective functions are used for evaluating individuals. Experiments on a simulation dataset were also made to show the effectiveness of the proposed approach. The main contribution of this paper is that the proposed algorithm is the first work for fuzzy data mining on multiple-concept levels with multiple objective evolution algorithms. In the future, we will continue to enhance the Multiple-level GFM framework for application to more complex problems.

