

Abstract?Traditional algorithms for mining sequential patterns are built on the binary attributes databases, which have three limitations. Firstly, it can not concern quantitative attributes; secondly, only direct sequential patterns are discovered; thirdly, it can not process these data items with similar frequencies which will result in the dilemma called the rare item problem. In this paper, we put forward a discovery algorithm for mining both direct and indirect fuzzy sequential patterns with multiple minimum supports by combining these three extensions.

Keywords-data mining; sequential patterns; multiple minimum supports

I. INTRODUCTION Sequential pattern[1] is an important research topic in data  mining and knowledge discovery, which is firstly proposed by R.Agrawal. While association rules[2,3] mining is to find the intra-transaction relations, sequential patterns mining is to find the inter-transactions relations. A sequential pattern is formed as (A, B), where A and B are disjoint item sets, and its support is no less than a user-specified minimum support. The sequential patter (A, B) means that if A is in a transaction, then B would be in another transaction with high probability.

The transaction databases not only have binary attributes, but also have quantitative attributes. T. P. Hong put forward a method of mining fuzzy sequential patterns from quantitative transaction database [4], which integrates the fuzzy set concepts and the AprioriAll algorithm. It first transforms quantitative values in transactions into linguistic terms, then filters them to find sequential patterns by modifying the AprioriAll mining algorithm.

During the discovery of sequential patterns, only the frequent itemsets are considered while all the infrequent itemsets are ignored. Recently, researchers have recognized that some infrequent patterns can provide very useful insight view into the data set, and a new kind of knowledge discovery problems called as indirect associations has been proposed [5].

Consider a pair of item x and y, which are rarely present together in the same transaction. If both items are highly dependent on the presence of another itemsets M, then the pair of x and y is said to be indirectly associated by M called as  mediator. Inspired by this idea, we put forward indirect sequential pattern and its discovery algorithm in this paper.

The predefined minimum support threshold is a key element of mining sequential patterns, which is used to prune the search space and to limit the number of rules generated.

Using only a single minimum support implicitly assumes that all items in the data have similar frequencies in the database.

This is often not true in real applications. In many real applications, some items appear frequently in the data, while others appear rarely. If the frequencies of items vary a great deal, we will encounter the dilemma called as the rare item problem. If minsup is set too high, we will not find those sequential patterns that involve rare items in the data. If minsup is set too low in order to find sequential patterns that involve both frequent and rare items, it will cause combinatorial explosion because those frequent items will be associated with one another in all possible ways and many of them are meaningless.

To resolve the rare item problem, a multiple minimum supports based model was proposed. In this model, we can specify a different minimum item support for each item, which is calculated for each item based on a monotonous decreasing  power function such as x  of its support. The difference  between the minimum item support for each item and its support will vary in an expected way. For the frequent items, the difference is small; for the rare items, the difference is large. Thus, the minimum item support for frequent item is slightly less than its support, and the minimum item support for rare item is much lower than its support. The number of frequent itemsets will not explode; the rare itemsets will not be missed.

In this paper, we propose an approach for mining both direct and indirect fuzzy sequential patterns by integrating fuzzy and indirect and multiple minimum supports extensions to sequential patterns.

The rest of this paper is organized as follows. The definitions for direct and indirect fuzzy sequential pattern are given in Section 2. In Section 3, we describe the discovery     algorithm for mining fuzzy direct and indirect sequential patterns with multiple minimum supports. Section 4 presents primary experimental results. The conclusions are made in the last section.



II. PROBLEM DEFINITION  A. Sequential Patterns Let I = {i1, i2, ? ,im} be a set of literals called items. Let the  database D = { t1, t2, ? ,tn } be a set of n transactions, where each transaction is a subset of I. A non-empty subset of I is called itemset. An itemset containing k items is called k- itemset. The support of an itemset X denoted as sup(X) is defines as the fraction of all transactions containing X in D. An itemset is frequent if its support is greater than a predefined threshold minisup.

A sequence is an ordered list of itemsets such as s = (s1, s2, ? ,su), where each itemset si is an element of the sequence. A sequence is said to be non-empty if it contains at least one element. An item can appear only once in an element, but can occur multiple times in different elements of a sequence. Items in an element are assumed to be sorted in lexicographic order.

A sequence with k items, where ?= j jsk || , is called a k- sequence?where | sj | denotes the number of items in itemset sj.

A sequence t = (t1, t2, ? ,tv) is called a subsequence of s if there exist integer 1?j1<j2<?<jv?u such that  11 j st ? , 22 jst ? , ? , vjv st ? . A sequence database SD is  a set of tuple <sid,t>, where sid is the sequence identifier and t is a sequence. A tuple <sid,t> is said to contain a sequence s if s is a subsequence of t. The support of a sequence s, sup(s), is defined as the fraction of all tuples in SD that contain s. A sequence is called sequential pattern if the support of the sequence is no less than the predefined minimum support threshold minisup.

The algorithm proposed by Agrawal and Srikant [1] to mine sequential patterns from large transaction databases is divided into five phases [1]: (1)Sort phase. The transaction database is sorted by customer ID as the major key and transaction time as the minor key. The phase converts the original transaction database into a database of customer sequences; (2) Large itemset phase. The set of all the large itemsets are found from the customer sequences database in a way similar to the one used in association rules mining. Note that the counting of itemset is for customer sequence not for transaction. When an itemset occurs more than one time in a customer sequence, it is counted just once for this customer sequence. (3) Transformation phase. In this phase, each large itemset is mapped to a contiguous integer and the original customer sequences are transformed into the mapped integer sequences.

(4) Sequence phase. The set of transformed integer sequences are used to find large sequences among them. (5) Maximum phase. The maximally large sequences are derived and output to users.

B. Fuzzy Sequential Patterns Traditional discovery algorithms for mining sequential  patterns focused on binary valued transaction data. Since transaction data in real applications usually contains quantitative values, traditional sequential patterns for binary valued transactions should be extended to fuzzy sequential patterns for quantitative valued transactions.

To transform into transaction data format, the domain of quantitative attributes should be partitioned into disjoint intervals, each of which is considered as a new attribute [3].

However, a sharp boundary problem results from the disjoint intervals. In order to solve this sharp boundary problem [6], fuzzy set theory has been introduced, which results in a new category of sequential patterns called fuzzy sequential patterns [4].

In the context of fuzzy sequential patterns, the support of an itemset can be counted as follows: for every sequence in the customer sequences database, take the fuzzy logic AND of the membership values of the items under consideration, and summate these numbers. Let the customer sequences database be SD and an itemset X = {x1, x2, x 3, ? , xk} ? I. The support of a sequence s?SD to the itemset X can be defined as  ?ki x ssX i1 )(),sup( == ?                                 (1) If we take the fuzzy logic AND as the min function, the  support of X from the customer sequences database SD is then defined as  )(min),sup()sup( 1 ssXX ix SDs SDs  k i ?? ?  ? ? ===       (2)  The fuzzy sequential patterns mining algorithm proposed first transforms each quantitative value into a fuzzy set with linguistic terms using membership functions [4]. It then calculates the scalar cardinality of each linguistic term on all the transaction data, use formula (2) to calculate the fuzzy support of itemset. Each item uses only the linguistic term with the maximum cardinality in later mining processes. The mining process based on fuzzy counts is then performed to find fuzzy sequential patterns from these large itemsets.

C. Direct and Indirect Sequential Patterns Inspired by the idea of indirect associations, we put forward  indirect sequential patterns, while traditional sequential pattern is called as direct sequential pattern.

Let sequence s1 be (a1,a2, ? , ak), and sequence s2 be (b1,b2, ? , bk). The indirect sequential pattern is defined as follows:  Definition 1: The pair of sequences s1 and s2 is said to joinable if one of the following conditions is hold:  (1) ai = bi for i = 1,2, ? ,k-1; (2) ai = bi for i = 2,3, ? ,k; (3) ai = bi-1 for i = 2, 3? ,k;     In the context of indirect sequential patterns, we set ak = x, bk = y, (a1,a2, ? , ak-1) = M if condition (1) is satisfied, or set s1 = Mx, s2 = My; set a1 = x, b1 = y, (a2,a3, ? , ak) = M if condition (2) is satisfied, or set s1 = xM, s2 = yM; set a1 = x, bk = y, (a1,a2, ? , ak-1) = M if condition (3) is satisfied, and s1 = xM, s2 = My.

Definition 2: A pair of itemsets x and y is said to be a indirect sequential pattern via a mediator sequence M, if s1 = Mx(or s1 = xM), s2 = My(or s2 = yM) and the following conditions are satisfied:  (1) sup({x,y})<ts; (2) There exists a non-empty set M such that:  (a) sup(s1)>=tf, sup(s2)>=tf, (b) dep({x},M)>=td, dep({y},M)>=td, where  dep(A,B) is a measure of the dependence between itemsets A and B.

The thresholds ts?tf and td are called sequencepair support threshold, mediator support threshold, and dependence threshold, respectively. We usually set tf >= ts in practice.

In this paper, we use the denotation <x, y, M> to represent the indirect sequential pattern between itemsets x and y via mediator M, and use the IS measure [7] as the dependence measure for condition 2(b). Given a pair of itemsets A and B, its IS measure can be computed as the following equation:  )()( ),(),(  BPAP BAPBAIS  ? =        (3)  where P represents the probability that the given itemsets appears in the transaction database.

D. Multiple minimum supports In multiple minimum supports model, every item ij of the  itemset I={i1,i2,....,im} has been assigned a minimum item support based on its support value sup(ij), denoted as mis(ij) ,and LS is denoted as least minimum support.

Definition 3: the minimum item support of an item ij is defined as   otherwise  LS )m(i if      )( )( j  ? ? ? >  = LS  im imis jj   (4)  )sup( 1)sup()(  j jj i  iim ?=                 (5)  Definition 4: the minimum support for an sequence X is the minimum of minimum support of the items contained in the sequence, denoted as mis(X).

Definition 5: An sequence X is said to be frequent if )()sup( XmisX ?

III. DISCOVERY ALGORITHM FOR MINING DIRECT AND INDIRECT FUZZY SEQUENTIAL PATTERNS WITH MULTIPLE  MINIMUM SUPPORTS Sequential pattern is an important research topic in data  mining and knowledge discovery. Traditional algorithms for mining sequential patterns are built on the binary attributes databases, which has three limitations. First, it can not concern quantitative attributes; second, only direct sequential patterns are discovered; thirdly, it can not process these data items with similar frequencies. In this paper, we put forward a discovery algorithm for mining both direct and indirect fuzzy sequential patterns with multiple minimum supports by combining these three approaches. Notations used in our algorithm are described as Table 1.

TABLE I.  NOTATIONS  Notation meaning n The total number of transactions in database m The total number of items c The total number of customers ni The number of transactions from the ith  customer, 1<= i <= c Di The purchase sequence of the ith customer,  1<= i<= c Did The dth transaction in Di, 1<= d<= ni Ig The gth item, 1<= g <= m Rgk The kth region of Ig, 1<= k<= | Ig |, where | Ig |  is the number of fuzzy regions for item Ig g idv  The quantitative value of item I  g in Did  g idf  The fuzzy set converted from  g idv  gk idf  The membership value of  g idv  in region Rgk  gk if  The membership value of region R  gk in the ith customer sequence Di  countgk The scalar cardinality of region Rgk maxcountg The maximum count value among countgk  values maxRg The fuzzy region of item Ig with maxcountg Ck the set of candidate itemsets with k items Lk the set of large itemsets with k items SCk the set of candidate sequences with k itemsets SLk the set of large sequences with k itemsets SNLk The set of non-large sequence with k itemsets LS The predefined least minimum support value ts The predefined sequencepair support  threshold tf The predefined mediator support threshold td The predefined dependence threshold Our mining algorithm firstly transforms each quantitative  value into a fuzzy set with linguistic terms using membership functions. It then calculates the scalar cardinality of each linguistic term on all the transaction data. Each item uses only the linguistic term with the maximum cardinality in later mining processes, thus making the number of fuzzy regions to be processed the same as the number of original items. The     algorithm therefore focuses on the most important linguistic terms, which reduces its time complexity. The mining process based on fuzzy counts is then performed to find fuzzy sequential patterns from these large itemsets. The detail of the proposed mining algorithm is described as follows.

Algorithm: MDIFSPMMS(Mining both direct and indirect fuzzy sequential patterns with multiple minimum supports)  Input: A body of n transaction data, each consists of customer ID, transaction time and the purchased items with their quantities, a set of membership functions and a predefine least minimum support threshold LS, sequencepair support ts, mediator support threshold  tf, and dependence threshold td;  Output: A set of direct fuzzy sequential patterns DFSP, a set of indirect fuzzy sequential patterns IFSP;  (1) The transaction database is sorted by customer ID as the major key and transaction time as the minor key.

(2) C1 = {candidate 1-sequence}; (3) For each sequence c in C1  do )sup(  1)sup()( c  ccm ?= ;  (4) If m(c)<LS mis(c) = LS Else mis(c) = m(c); (5) Form a customer purchase sequence Di for each  customer i by sequentially listing his/her ni itemsets, where ni is the number of transactions from customer i .

Denote the dth itemset in Di as Did.

(6) Transform the quantitative value gidv of each itemset Ig appearing in Did into a fuzzy set  g idf represented as  )( 2    gl  gl id  g  g id  g  g id  R f  R f  R f +++ using given membership  functions, where Rgk is the kth fuzzy region of itemIg, gk  idf is g idv ?s fuzzy membership value in region Rgk,  and l is the number of fuzzy regions for Ig.

(7) Find fuzzy membership value gkif of each region Rgk  in each customer sequence Di as gk  if = )( ||  gk  id D  d fMAX i= ,where |Di| is the number of itemsets in Di.

(8) Caculate the scalar cardinality of each attribute region  Dgk as ? == c  i gk  i gk fcount  .

(9) Find maxcountg= )(1 gkl  k countMAX = , where 1? g ?m and l is the number of regions for item Ig. Let maxRg be the region with maxcountg for item Ig. The maxRg will be used to represent the fuzzy characteristic of item Ig in later mining processes.

(10) Check if the value maxcountg for a region maxRg, for g=1 to m, is larger than or equal to the minimum support threshold mis(maxRg). If the value of maxcountg is equal to or greater than minsup, put maxRg in the large 1-itemsets L1. That is L1={ maxRg |  maxcountg ?mis(maxRg), 1<= g <= m }.

(11) If L1is null, then exit the algorithm; otherwise, do the  next step.

(12) Set k=1, where k is used to represent the number of  items kept in the current large itemsets.

(13) Generate the candidate set Ck+1 from Lk in a way  similar to that in the apriori algorithm [1].

(14) Do the following substeps for each newly formed  (k+1)-itemsets s with items (s1, s2, ? , sk+1) in Ck+1: (a) Caculate the fuzzy value sif for of s in each customer sequence Di as: )(|| 1  s id  D d  s i fMAXf i== , and  121 +??= kSid s  id s  id s  id ffff .

(b) Caculate the scalar cardinality of s  as ? == c  i s  i s fcount  .

(c) If counts >= mis(s), put s in Lk+1.

(15) If Lk+1is null, then do the next step; otherwise, set  k=k+1 and repeat Step 13 to Step 15.

(16) Map each larger itemset to a contiguous integer and put  it in the large 1-sequence set SL1.

(17) Transform each customer sequence using the integer  representation.

(18) Set w=1, where w is used to represent the maximum  length of sequences currently kept.

(19) Generate the candidate set SCw+1 from SLw by joining  two large w-sequence from SLw if the two sequences are joinable.

(20) Do the following substeps for each newly formed (w+1)-sequence u= (u1, u2, ? , uw+1) in SCw+1(each ui is actually an itemset for the original data): (a) Calculate the fuzzy value uif of u in each transformed customer sequence Di as  )(11 uk  i w k  u i fMINf  + == ,where itemset uk must appear  after itemset wk-1 in Di. If the sequence u occurs more than once, uif  is set by maximum fuzzy value of all the occurrences.

(b) Calculate the scalar cardinality of u  as ? == c  i u  i u fcount  .

(c) If countu >= mis(u), put u in SLw+1;otherwise put u in SNLw+1.

(d) If w>=2, for each <x, y, M> ? SNLw+1, if sup({(x, fx), (y, fy)})<ts, dep({(x, fx)}, (M, fM)>=td and dep({(y, fy)}, (M, fM))>=td are all hold, then put the <x, y, M> in IFSP.

(21) If SLw+1is null, then do next step; otherwise, set w=w+1, and repeat step 19 to 21.

(22) Transform the maximally large q-sequences, q>=2, into sequences of original items and put them to DFSP.



IV. EXPERIMENT To test the performance of our proposed algorithm, we have  done some experiments. The algorithm is implemented with C++. The synthetic data set is generated by Assocgen [2]     program of IBM Almaden research center. The meanings of used parameters are showed in Table 2.

TABLE II.  PARAMETERS  Symbol Meaning D Number of customers(=size of database) C Average number of transactions per Customer T Average number of items per Transaction S Average length of maximal potentially large  Sequences I Average size of Items in maximal potentially large  sequences NS Number of maximal potentially large Sequences NI Number of maximal potentially large Itemsets N Number of items  We set parameters C=10, T=5, S=4, I=2.5, NS =500, NI =2500, N =10000, total number of customers D=100000, and the generated dataset is named as C10T5S4I25. The membership functions used in our experiment is shown as figure 1.

Figure 1.  membership functions used in experiment  Figure 2 shows the algorithm executing time variance with least minimum support decreasing from 1% to 0.2%. It shows that the algorithm increases with the declining of LS.

C10T5S4I25       1 0.8 0.6 0.4 0.2  Mininum Support  R u n  t i m e ( s )  MDIFSPMMS   Figure 2.  Execution time  To examine the scalability of algorithm we increased the numbers of customer D from 50,000 to 150000, with LS=1%.

The results are shown in Figure 3. The executing time is increased almost linearly with the increasing of dataset size. It can be concluded that our algorithm has a good scalable performance.

C10T5S4I15          50 75 100 125 150  Number of Customers  Ru n t i m e( s )  MDIFSPMMS   Figure 3.  Scale-up: Number of customers

V. CONCLUSIONS In this paper, we addressed three limitations of traditional  sequential patterns mining: crisp itemsets, only direct sequential patterns and only a single minimum support. In this paper, we propose an approach for mining both direct and indirect fuzzy sequential patterns by integrating fuzzy and indirect and multiple minimum supports extensions to sequential patterns. The primary experiments demonstrated that the algorithm is efficient and scalable.

