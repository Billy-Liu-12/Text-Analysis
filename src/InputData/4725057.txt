Efficient Hiding of Collaborative Recommendation Association Rules with  Updates

Abstract   We propose here an efficient data mining algorithm to  hide collaborative recommendation association rules when the database is updated, i.e., when a new data set is added to the original database. For a given predicted item, a collaborative recommendation association rule set [10] is the smallest association rule set that makes the same recommendation as the entire association rule set by confidence priority. Several approaches to hide collaborative recommendation association rules from static databases have been proposed [10, 11]. However, frequent updates to the database may require repeated sanitizations of original database and added data sets.

The efforts of previous sanitization are not utilized in these approaches. In this work, we propose using pattern inversion tree to store the added data set in one database scan. It is then sanitized and merged to the original sanitized database. Numerical experiments show that the proposed approach out performs the direct sanitization approach on original and added data sets, with similar side effects.

1. Introduction   Privacy-preserving data mining, is a novel research  direction in data mining and statistical databases, where data mining algorithms are analyzed for the side effects they incur in data privacy. There have been two types of privacy concerning data mining. The first type of privacy, called output privacy, is that the data is minimally altered so that the mining result will not disclose certain privacy.

Many techniques have been proposed for the output privacy [7,9]. For example, perturbation, blocking, aggregation or merging, swapping, and sampling are some alternation methods that have recently been proposed. The second type of privacy, input privacy, is that the data is manipulated so that the mining result is not affected or minimally affected [2-4,6,8]. For example, the reconstruction-based technique and the cryptography-  based techniques are some recently proposed techniques for input privacy.

In output privacy, given specific rules or patterns to be hidden, many data altering techniques for hiding association rules have been proposed.   However, databases may be updated frequently. It is non-trivial to maintain the hidden association rules when the database is updated. New rules and/or already hidden rules may arise and need to be hidden again. In this work, we are interested in improving the efficiency of hiding collaborative recommendation association rules when the transaction database is updated, i.e., when a transaction data set is added to the original database. This problem is referred to as the maintenance of hiding collaborative recommendation association rules.  We propose here using pattern inversion tree to store the added data set in one database scan.  It is then sanitized and merged to the original sanitized database. Numerical experiments and running time analyses show that the proposed approach out performs the direct sanitization on original and added data sets, with similar side effects.

2. Problem Statement   Association rules mining was introduced in [1].  Let },,,{ 21 miiiI =  be a set of literals, called items.

Given a set of transactions D, where each transaction T in  D is a set of items such that IT ? , an association rule is an expression YX ?  where IX ? , IY ? , and  ?=?YX .  The problem of mining association rules is to find all rules that are greater than the user-specified minimum support and minimum confidence.

As an example, for a given database in Table 1, a minimum support of 33% and a minimum confidence of 70%, nine association rules can be found as follows: B=>A (66%, 100%) C=>A (66%, 100%), B=>C (50%, 75%), C=>B (50%, 75%), AB=>C (50%, 75%), AC=>B (50%, 75%), BC=>A(50%, 100%), C=>AB(50%, 75%),   DOI 10.1109/ICMLA.2008.33     B=>AC(50%, 75%), where the percentages inside the parentheses are supports and confidences respectively.

Table 1. Database D before and after sanitization TID D D?  T1 ABC AB  T2 ABC ABC  T3 ABC ABC  T4 AB AB  T5 A A  T6 AC AC  However, mining association rules usually generates a large number of rules, most of which are unnecessary for the purpose of collaborative recommendation. For example, to recommend a target item {C} to a customer, the collaborative recommendation association rule set that contains only two rules, B=>C (50%, 60%), AB=>C (50%, 60%), will generate the same recommendations as the entire nine association rules found from Table 1.

Therefore, a collaborative recommendation association rule set can be informally defined as the smallest association rule set that makes the same recommendation as the entire association rule set by confidence priority.

In this work, we are particularly interested in the following: given a transaction database D, a minimum support, a minimum confidence and a set of recommended items Y, a sanitized transaction  database D? , and a new data set +? , the objective is to minimally and efficiently modify the updated database (  D+ = D + +? ) such that no collaborative recommendation  association rules containing Y on the right hand side of the rule will be discovered.

As an example, for a given database D in Table 1, a minimum support of 33%, a minimum confidence of 70%, and a hidden item Y = {C}, applying the DCBS algorithm proposed in [11] on D, if transaction T1 is modified from ABC to AB, then the following rules that contain item C on the right hand side will be hidden: B=>C (33%, 50%), AB=>C (33%, 50%). However, four rules are lost, C=>B (33%, 60%), AC=>B (33%, 66%), C=>AB (33%, 66%), B=>AC (33%, 50%), and no new rule is generated are the side effects. The sanitized database is D? shown in Table 1.

When a new data set +? = {T7:BC, T8:B, T9: ABC} is  added to the database D, there are direct and indirect sanitization approaches. For the direct approach, applying the DCBS algorithm proposed in [11] on D+ = D  + +?  directly, the transaction T6 is sanitized from AC to  C and T7 is sanitized from BC to C. The sanitized  database '+D  is shown in Table 2 as '+D (DCBS). The  following rule containing item C on the right hand side will be hidden: A=>C (44%, 57%), B=>C (44%, 57%).

One new rule is generated C=>AB (44%, 100%) and hiding failure is generated AB=>C (44%, 80%) as side effects. There is no lost rule. However, this approach requires re-processing of the old data set D. For the  indirect approach, the new data set +?  is processed or  sanitized first. The old sanitized database will be sanitized only when hiding failure persists and/or side effects get worse. Using the proposed MSCR algorithm described in the next section, the old sanitized database D?  is not processed. Only the added data set is sanitized and the resulting sanitized database is shown in Table 2 as  '+D (MSCR). It is our objective here to minimally and efficiently modify the updated database (D+ = D +  +? ) such that no collaborative recommendation association rules containing predicted item Y on the right hand side of the rule will be discovered.

Table 2. Updated Databases before and after sanitization  TID D+ D+ ' (DCBS) D+ ' (MSCR) T1 ABC ABC AB  T2 ABC ABC ABC  T3 ABC ABC ABC  T4 AB AB AB  T5 A A A  T6 AC A AC  T7 BC B BC  T8 B B B  T9 ABC ABC AB   3. Proposed Algorithm   In order to hide an association rule, X=>Y, we can  either decrease its supports, ( NX  or NYX ?  ), to be smaller than pre-specified minimum support or  decrease its confidence ( XYX ?  ) to be smaller than pre-specified minimum confidence. To reduce the number of database scanning in generating large or frequent itemsets in association rule mining, a one-scan of database method was proposed in [5]. The basic idea is to construct a tree structure, called Pattern tree (P-tree) and a frequency list which contains the frequency counts of each item in one database scan. The pattern tree is then     restructured to a compact Frequent-Pattern tree (FP-tree) proposed by [4], which is an extended prefix-tree structure for storing compressed, crucial information about frequent patterns in less space.

In [11], we proposed a Pattern-Inversion tree (PI-tree) based on the pattern tree to sanitize collaborative recommendation association rules with one database scan.

A PI-tree is similar to a P-tree except the following. Each node in a PI-tree contains three fields: item name (or item number), number of transactions containing the items on the path from the root to current node, and list of transaction ID that contains all the items on the path from the root to current node.

To sanitize the collaborative recommendation association rules of updated database D+, there are two possible approaches as mentioned in section 2. One approach is that we can re-run any hiding algorithm on the updated database D+ directly. The second approach is  to process the newly added data set +?  incrementally and  combined it with the sanitized result of original database D?. For the second approach, a collaborative recommendation association rule in D does not have to be  a collaborative recommendation association rule in +?  or  D+, and vice versa. However, if all collaborative  recommendation association rules in D and in +?  are  sanitized, then all collaborative recommendation association rules are sanitized in the updated database D+.

We will adopt this strategy to sanitize the collaborative recommendation association rules in his work.

Based on the strategies described above, we propose a data-mining algorithm called MSCR for the maintenance of sanitizing collaborative recommendation association rules. The basic steps of the algorithm are described as follow.

Algorithm MSCR Input: (1) a sanitized database D? (or pattern inversion  tree 'PI , and frequency list 'L  ) (2) min_support (3) min_confidence (4) a set of hidden items Y  (5) added data set +?  Output: a sanitized database '+D  , D+ = D + +?  , where rules containing items of Y on RHS will be hidden  1. Build the Pattern Inversion Tree +? PI  for +?  according to 'L  and new items in +?  2. Sort frequency list +? L  for +?  in descending order  3. Sanitize all collaborative recommendation association  rules of the form: U: yx ?  in +?  according to +?  L , to obtain  ' +?  PI and  ' +?  L   4. Build frequency list '+L  for '+D , by adding '  +? L  to 'L  5. Merge PI-trees '  +? PI  and 'PI  to obtain '+PI 6. Restructure  '+PI  according to '+L 7. Output sanitized database '+D  4. Numerical Experiments   In order to better understand the characteristics of the proposed MSCR algorithm numerically, we perform a series of experiments to measure various effects and compare with the direct sanitization DCBS algorithm proposed in [11]. The following effects are considered: time effects, side effects, and database effects. For time effects, we measure the running time required to hide one and two predicting items, i.e., one and two collaborative recommendation association rule sets respectively. For side effects, we measure the hiding failure; new rules generated and lost rules. The hiding failure side effect measures the number of collaborative recommendation association rules that cannot be hidden. The new rule side effect measures the number of new rules appeared in the transformed database but is not in the original database.

The lost rule side effect measures the number of rules that are in the original database but not in the transformed database. The database effects measure the percentage of altered transactions in the database.

Figure 1 shows the processing times required to maintain the sanitized collaborative recommendation association rules under multiple updates. Multiple updates mean more than one data set is added to the original database in sequence. For example, in Figure 2, the original database has data size |D| = 10k, | ?+ | = 5k, and ?+ is added to the D three times in sequence. The processing time required to sanitize 10k is 31.82 seconds to hide one item and 63.82 seconds to hide two items.

Adding the first 5k data set, MSCR algorithm requires 45.42 and 84.54 seconds and DCBS algorithm requires 71.88 and 143.51 seconds for hiding one item and two items respectively. The 20k data size refers to adding second 5k data set to the previously sanitized 15k data set.

Figure 2 shows the percentage of transactions altered using MSCR and DCBS algorithms. Even for different database sizes, the percentages of altered transactions remain almost constant, about 4.5% for MSCR and 5.5% for DCBS with one predicting item. This indicates that the processing time should increase proportionally as the size of dataset increases. Figure 3 shows the various side effects of MSCR algorithm hiding two predicting item.

There are about the same percentage of rules to be hidden for both MSCR and DCBS algorithms. There is no lost using MSCR or DCBS algorithm. There are about 6% of     new rules generated for each 5k data set and about 1.13% of association rules are hiding failures for each 5k data set for MSCR algorithm.

Multiple Updates   10K 15K 20K 25K  Data Size  S ec  o n  d  1 -Item-MSCR  1-Item-DCBS  2-Item-MSCR  2-Item-DCBS   Figure 1. Processing Times for Multiple Updates  Database Effects  0% 2% 4% 6% 8%  10%  10k 15K 20K 25K  Data Size  P e rc  e n  ta g  e  DCBS  MSCR   Figure 2. Database Effects for MSCR and DCBS  Multiple Updates Side Effects  0%  2%  4%  6%  8%  10K 15K 20K 25K  Data Size  P e rc  e n  ta g  e  New Rules  Lost Rules  Hiding Failure   Figure 3. Side Effects for MSCR   5. Conclusion   In this work, we have studied the database privacy problems caused by data mining technology and proposed an efficient data-mining algorithm MSCR to maintain sanitized collaborative recommendation association rule sets. The proposed algorithm incrementally sanitized the added data set and merged with the previously sanitized database with one database scanning using pattern- inversion trees. Example illustrating the proposed algorithm is given. Numerical experiments are performed to show the time effects, database effects, and side effects of the algorithm and compared with direct database sanitization algorithm. In addition, running time analysis of the proposed algorithm is presented. It can be seen that the proposed MSCR algorithm out performs the direct sanitization algorithm DCBS in processing time with similar side effects. In the future, we will consider the  problem of efficient maintenance of privacy for other types of rules and patterns when databases are updated. In addition, the issue of how side effects affect the level of privacy will be studied.

6. References  [1] R. Agrawal, T. Imielinski, and A. Swami, ?Mining Association Rules between Sets of Items in Large Databases?, Management of Data, Washington DC, May 1993.

[2] C. Clifton, M. Kantarcioglu, X.D. Lin and M. Y. Zhu, ?Tools for Privacy Preserving Distributed Data Mining?, SIGKDD Explorations, 4(2), 1-7, Dec. 2002.

[3] A. Evfimievski, J. Gehrke and R. Srikant, ?Limiting Privacy Breaches in Privacy Preserving Data Mining?, PODS 2003, June 9-12, 2003, San Diego, CA.

[4] J. Han, J. Pei, and Y. Yin, ?Mining Frequent Patterns without Candidate Generation?, Proceedings of ACM 2002, 1-12.

[5] H. Huang, X. Wu, and R. Relue, ?Association Analysis with One Scan of Databases?, Proceedings of IEEE Japan, December, 2002, 629-632.

[6] M. Kantarcioglu and C. Clifton, ?Privacy-preserving distributed mining of association rules on horizontally partitioned data?, In ACM SIGMOD Workshop on Research Issues on Data Mining and Knowledge Discovery, June 2002.

[7] S. Oliveira, O. Zaiane, ?Privacy Preserving Frequent on Data Mining, November 2002, 43-54.

[8] J. Vaidya and C.W. Clifton. ?Privacy preserving association rule mining in vertically partitioned data?, In on Knowledge Discovery and Data Mining, Edmonton, Canada, July 2002.

[9] V. Verykios, A. Elmagarmid, E. Bertino, Y. Saygin, and Knowledge and Data Engineering, Vol. 16, No. 4, 434-447, April 2004.

[10] S.L. Wang, D. Patel, A. Jafari, and T.P. Hong, ?Hiding Collaborative Recommendation Association Rules?, Applied Intelligence, Volume 27 (1), August 2007, 67-77.

[11] S.L. Wang, and T.P. Hong, ?One-Scan Sanitization of Collaborative Recommendation Association Rules?, Proceedings of National Computer Symposium, November, 2007, Taichun, Taiwan, 170-176.

