Mining Approximative Descriptions of Sets Using Rough Sets

Abstract  Using concepts from rough set theory we investigate the existence of approximative descriptions of collections of objects that can be extracted from in data set, a problem of interest for biologists that need to find succinct descrip- tions of families of taxonomic units. Our algorithm is based on an anti-monotonicity of borders of object set and makes use of an approach that is, in a certain sense, a dual of the Apriori algorithm used in identifying frequent item sets.

1. Introduction Rough sets are approximative descriptions of sets that can be achieved using equivalences (or partitions). This fertile idea was introduced by the Polish mathematician Z.

Pawlak in [6]. Excellent surveys supplemented by large bibliographies are [3] and [1]. The reference [4] contains a rich collection of applications of rough sets.

The problem that we address here is mining a table (or, in the terminology of rough sets, an information system) for approximative descriptions of sets of objects. Finding such descriptions is relevant for biological applications, where such descriptions serve for specimen identification in the field work.

We begin by introducing some terminology and basic facts from rough set theory. Unless stated otherwise, all sets are finite. If U is a subset of a set S, we denote its complement S ? U by U c.

Let S be a set. An approximation space is a pair (S, ?), where ? is an equivalence relation defined on the set S.

DEFINITION 1.1. Let (S, ?) be an approximation space and let U be a subset of S. The ?-lower approximation of U is the union of all ?-equivalence classes included in the set U :  lap?(U) = ? {[x]? ? S/? | [x]? ? U}.

The ?-upper approximation of U is the union of ?- equivalence classes that have a nonempty intersection with the set U :  uap?(U) = ? {[x]? ? S/? | [x]? ? U 6= ?}.

The following statements hold in an approximation space (S, ?) (see, for example [7]):  lap?(?) = uap?(?) = ? (1.1) lap?(S) = uap?(S) = S, (1.2)  lap?(U ? V ) = lap?(U) ? lap?(V ), (1.3) uap?(U ? V ) = uap?(U) ? uap?(V ), (1.4) lap?(U ? V ) ? lap?(U) ? lap?(V ), (1.5)  uap?(U ? V ) ? uap?(U) ? uap?(V ), (1.6) lap?(U  c) = ( uap?(U)  )c (1.7)  uap?(U c) =  ( lap?(U)  )c , (1.8)  lap?(lap?(U)) = uap?(lap?(U)) = lap?(U) (1.9)  uap?(uap?(U)) = lap?(uap?(U)) = uap?(U), (1.10)  for every U, V ? P(S).

Note that, in general, lap?(U) ? uap?(U) for any set  U . Also, we have  uap?(U) = {t ? S | (t, s) ? ? for some s ? U}, lap?(U) = {t ? U | (t, s) ? ? implies s ? U}.

A subset U of S is ?-rough if ??(U) 6= ? and is ?-crisp otherwise.

In defining and retrieving approximative descriptions of sets the notion of border plays a fundamental role.

39th International Symposium on Multiple-Valued Logic  DOI 10.1109/ISMVL.2009.18     DEFINITION 1.2. The positive ?-border of U is the set  ?+? (U) = U ? lap?(U),  while the negative ?-border of the same set is  ??? (U) = U ? lap?(U),  The ?-border of U is:  ??(U) = ?+? (U) ? ??? (U) = uap?(U)? lap?(U).

Observe that  ??(U) = {t ? S | (t, s) ? ? and (t, z) ? ? for some s ? U and z 6? U}.

For every subset U of an approximation space (S, ?) we have the equalities:  ?+? (U c) = ??? (U), (1.11)  ??? (U c) = ?+? (U). (1.12)  Indeed, we can write  ?+? (U c) = U c ? lap?(U c)  = U c ? ( uap?(U)  )c (by Equality 1.7)  = U c ? uap?(U) = uap?(U)? U = ??? (U),  which is Equality 1.11. A similar argument works for Equality 1.12.

Let (S, ?) be an approximation space and let U and V be two subsets of S. If U ? V , then lap?(U) ? lap?(V ) and uap?(U) ? uap?(V ).

Let ?, ? be two equivalences on the set S. If ? ? ?, then each ?-equivalence class is a ?-saturated set. There- fore, if U ? S we have  lap?(U) ? lap?(U) ? U ? uap?(U) ? lap?(U).

(1.13)  These inclusions imply  ??(U) ? ??(U). (1.14)  Therefore, we have  ??1??2(U) ? ??1(U) ? ??2(U). (1.15)  for every subset U of S.

2. Exact descriptions of Sets of Objects Let H be a finite set, H = {A1, . . . , Am}. We refer to the elements of H as attributes and we assume that for each attribute Ai we have a set that contains at least two elements referred to as the domain of Ai and denoted by Dom(Ai).

A data set on the set of attributes H is a function T : {1, . . . , n} ? H ??  ?m j=1 Dom(Aj) such that  T (i, Aj) ? Dom(Aj) for 1 ? i ? n and 1 ? j ? m.

The sequence tk = (T (k, 1), . . . , T (k,m)) is the kth  object of T for 1 ? k ? n. The numbers 1, . . . , n are the object identifiers (abbreviated as oids). The set of objects of T is the set OT = {t1, . . . , tn}.

If L = {Ai1 , . . . , Aip} be a subset of H . The projection of the object tk = (T (k, 1), . . . , T (k,m)) on L is the p-tuple (T (k, i1), . . . , T (k, ip)), denoted by tk[L].

DEFINITION 2.1. Let T be a data set and let L be a set of attributes of T . The equivalence ?L on OT defined by  ?L = {(t, t?) ? O2T | t[L] = t?[L]}.

It is easy to see that if L and K are two attribute sets then ?KL = ?K ? ?L, where KL is an alternative notation for the union K ? L of the two attribute sets. Therefore, if L ? K, then ?K ? ?L, so by the inclusion (1.14) we have:  ??L(U) ? ??K (U). (2.16)  In other words, the border of a set of objects relative to an attribute set is anti-monotonic with respect to the attribute set. To simplify notations we denote the set ??K (U) by ?K(U).

DEFINITION 2.2. A set of objects D is described by a set of attributesK if ?K(D) = ? and we refer toK as an exact description of D.

The notion of template is defined as a formula ? = (Ai1 = ai1) ? (Ai2 = ai2) ? ? ? ? ? (Aip = aip), where h 6= k implies Aih 6= Aik for 1 ? h, k ? p (see, for example [5]). The length of the template is p and the support of the template ? in the data set T is  suppT (?) = |{t ? OT | t[Ai1 ? ? ?Aip ] = (ai1 , . . . , aip)}|.

Note that each template ? = (Ai1 = ai1) ? (Ai2 = ai2) ? ? ? ? ? (Aip = aip) that has a non-zero support corresponds to an equivalence class of ?K , where K = {Ai1 ? ? ?Aip}.

It is shown in [5], starting from the problem of the balanced complete bipartite subgraph [2], that for a bipar- tite graph G = (V1 ? V2, E) and two positive integers     Table 1. Data Set T and the set of objects D = {t5, t6, t7, t8, t9}  T t1 a1 b2 c1 d1 t2 a2 b2 c1 d2 t3 a3 b1 c2 d1 t4 a4 b1 c2 d3 t5 a1 b1 c1 d2 t6 a3 b1 c1 d2 t7 a5 b3 c3 d4 t8 a1 b3 c3 d2 t9 a2 b3 c2 d3 t10 a3 b3 c2 d3 t11 a4 b2 c2 d1 t12 a1 b3 c4 d4  k1 ? |V1| and k2 ? |V2|, it is an NP -complete problem to determine the existence of two subsets U1 and U2 of V1 and V2, respectively such that |U1| = k1, |U2| ? k2 and {u1, u2} ? E for any u1 ? U1 and u2 ? U2. This variant of the problem is known as the Complete Bipartite Sub- graph (CBS) problem. Then, given a table and two positive integers k and `, the existence of a template ? containing ` conjunctions and having support at least k is polynomi- ally equivalent to the CBS problem and therefore, is NP- complete.

We focus in this paper on approximate descriptions of sets of objects which can be stated as follows: given a data set T , a set of objects D ? OT , we seek to determine whether there exists an attribute set K containing no more than k attributes such that the size of border ?K(D) is less than p. Thus, a search for a template of minimum support is replaced by the search for a set of attributes of limited size that describes the set D with a certain precision.

EXAMPLE 2.3. Let T be a data set having the set of attributes H = ABCD. Our search space is the set of subsets of H . Suppose that we seek to iden- tify a description of the set D = {t5, t6, t7, t8, t9}, where T is shown in Table 1. Observe that the equivalence classes of the equivalence ?BC are {t1, t2}, {t3, t4}, {t5, t6}, {t7, t8}, {t9, t10}, {t11}, and {t12}. Two of these classes, {t5, t6}, {t7, t8} are included in D and therefore, they constitute the lower approximation of D. The class {t9, t10} intersects both D and its comple- ment and therefore, ?BC(D) = {t9, t10}. Also, it is clear that ?+BC(D) = {t9} and ?  ? BC(D) = {t10}.

3. An Algorithm for Mining for Approximate Descriptions  In practice, approximative descriptions are sufficient and we give an algorithm that identifies such descriptions. This algorithm is, in a certain sense, a dual of the well-known Apriori-algorithm for finding frequent item sets.

DEFINITION 3.1. Let ? be a number such that 0 ? ? ? 1.

A set of objects D is ?-described by a set of attributes K if  |?K(D)| |D|  ? ?.

The ?dual? of the Rymon tree used in the study of frequent item sets is introduced next.

DEFINITION 3.2. Let H = {A1, . . . , An} be a set of attributes. The dual Rymon tree ofH is a rooted tree having P(H) as its set of nodes, H as its root, and whose set of edges consist of pairs of the form (U, V ) ? P(H) such that V is obtained by dropping from U an attribute that follows the attributes of H ? U in the list (A1, . . . , An).

EXAMPLE 3.3. The dual Rymon tree of the set of at- tributes H = {A,B,C,D} is shown in Figure 1.

ABCD  ? ? ?  e e e  !!!!!!!!

BCD ACD ABD ABC  ? ? ?  e e e  e e e  CD BD BCAD AC AB         D D B A  ?  A B C D  B C D DC D  C D D D  D  Figure 1. Rymon tree of the set of attributes H = {A,B,C,D}  Our algorithm makes use of the dual Rymon tree of the sets of attributes of the data set and is based on the anti- monotonicity of the size of the border of a set given by the inclusion (2.16). The goal of the algorithm is to compute     the smallest sets of attributes that yield a description of a set of objects whose error is below a presecribed threshold.

For identifying approximative descriptions of D we search the Rymon tree of the set of attributes in a top-down manner. During the search we apply a pruning technique that reduces substantially the size of the search space.

Starting at the root node of the tree, computation of negative and positive borders take place in breadth first search fashion. In a database having no duplicates the error of the root node is zero. The error of the children of the root are computed next. If the error of a node K is greater than the error threshold there is no need for computing the negative and positive borders for its descendants because of the anti-monotonicity property of the size of the border contained by Inequality 2.16. Thus, we can prune all descendants of K.

We introduce first a technique for computing the bor- der set of a set of objects D = {ti1 , . . . , tip} of a data set T determined by a set of attributes K. Let D? = OT ?D = {tj1 , . . . , tjq} be the set of objects of T that do not belong to D.

The projection of each object tik in D on the set of attributes K is compared to the same projection of each object tjh in D? as shown in the Figure 2.

Pruning is implemented as shown in Figure 3 Failed set of attributes are stored according to their car-  dinality. As mentioned earlier, each failed set of attributes is represented by a bit vector. Before adding any set of at- tributes into the working queue for computing the negative and positive borders, we check the failed set of attributes.

A set of attributes L is not added to the queue if it has a superset that failed.

4. Experimental Results Our algorithm is applicable to data sets that have attributes with finite domains of arbitrary cardinality. However, we focus on data sets with binary domains in order to take advantage of the efficient use of memory that bit vectors allow and of the speed of bit operation. If a an attribute A has a non-binary domain, Dom(A) = {a1, . . . , ak}, we replaceA by k attributesA1, . . . , Ak and we replace theA- component of an object t by k components t[A1], . . . , t[Ak] defined by  t[Aj ] =  { 1 if t[A] = aj , 0 otherwise  for 1 ? j ? k. Thus, an object of a binary data set is a sequence t ? {0, 1}n.

If we define the characteristic n-tuple rK = (r1, . . . , rn) ? {0, 1}n of a set of attributes K as  ri =  { 1 if Ai ? K, 0 otherwise.

Thus, the condition t[K] = t?[K] can be expressed as (t ? rK) ? (t? ? rK) = 0, where 0 = (0, . . . , 0). If t[K] equals t?[K], then t is added to the positive border ?+K(D) and t  ? is added to the negative border ??K(D). After computing the positive and the negative borders, we obtain the border ?K(D) = ?+K(D) ? ?  ? K(D).

To evaluate the effectiveness of our algorithm we con- ducted a set of preliminary experiments on synthetically generated binary databases using a Pentium 3.0GHz com- puter having 4GB of main memory running on Linux. We implemented our algorithm in Java which offers support for bit vectors and bit vector operations and we use the advan- tage of the speed of bit operations.

Figures 5-8 shows the running time results on various size databases for a defining set of size 100. Experiments show that for even big size database run times for reason- able error rates are practical. This is due to our pruning technique and use of bit vectors.

On the same databases number of unique descriptors for each error level is shown in Figures 9-12.

