Controlled Virtual Resource Access to Mitigate Economic Denial of Sustainability (EDoS) Attacks

Abstract?Service providers of the cloud have witnessed a  rapidly growing demand to provide services to end-users in a timely manner. Security vulnerabilities against the cloud infrastructure cannot be overlooked. Through exploitation of such weaknesses, the adversary class may disrupt routine cloud operations, and have a debilitating effect on the reputation of the service provider. One attack type specifically affecting cloud services is the Economic Denial of Sustainability (EDoS) attack.

Through such a malicious attack, the ability of the service provider to dynamically stretch and accommodate increasing numbers of requests from end-users, is exploited, to make it economically unviable for the service provider to sustain further demand for service from legitimate end-users. In this paper, we propose a novel approach for selectively controlling user requests for service, implemented at the service provider?s end. Through this scheme, we reduce i.e mitigate the effects of an imminent EDoS attack against critical cloud resources. Incoming requests are classified into normal or suspicious. Subsequently, further analysis is conducted to ensure that priority to cloud service access is given to those end-users tagged as being legitimate, whereas, suspect users are given lesser priority to service access, until they are eventually removed from the suspect list. Simula- tions were conducted to study the performance of the scheme, with results showing promise.



I. INTRODUCTION  Cloud computing has provided a novel paradigm to ad- dress the critical need for affordable and convenient resource availability to meet large-scale computing demands of contem- porary applications. The cloud paradigm is based on the pay- per-use model, wherein, vendors and service providers do not have to procure and maintain hardware and software resources to sustain their respective computing activity. Rather, services (mostly scalable) are purchased on a need basis. Three different service models are defined for the cloud; Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS). IaaS refers to providing storage and compute capabilities as services, usually through allocation of Virtual Machines (VMs) by the service provider. AmazonEC2 [1] is an example suite that is built on the IaaS service model.

PaaS provides a layer of software (e.g., Operating System) as a service for leasing out to the service providers, to sustain design and deployment of application-layer services. Google App Engine [2] is an example of a PaaS service model.

Software as a Service (SaaS) refers to provisioning of software based on end-user demand, as a service over the Internet.

Salesforce.com [3] is an examples of SaaS service model. All cloud services requested by an end user are managed by a service provider, which in turn sends forth these requests to the service provider, based on service level agreements.

According to a survey conducted by International Data Cor- poration (IDC) [4], security ranked as the greatest challenge for cloud computing. Particular malicious attacks against the cloud, such as Economic Denial of Sustainability (EDoS), have remained largely unaddressed in the literature. The disruption of any service provisioned through the cloud can cause large scale damage to end-users comprising both novice private end-user applications and sophisticated business applications wishing to harness the computing power of the cloud?s elastic resource pool. Users of the cloud pay as they use, based on ap- plication needs. Elasticity of resource availability at the service provider is the key driving aspect for the growing popularity of the cloud paradigm. The ability of the service provider to differentiate between legitimate and malicious users/request types, is critical for smooth and affordable resource usage at the service providers? end. However, a comprehensive mechanism for identifying routine cloud usage activity and distinguishing it from malicious activity, is largely unaddressed in the literature.

Through an EDoS attack, the adversary class reserves a large pool of resources (within the service level agreement of the service provider), in order to make it financially unviable for the service provider to sustain further services for its users.

In [5], the EDoS is defined as an attack that targets the service provider?s economic resources by sending a huge number of requests that appear to be legitimate, exploiting the auto-scale feature of the cloud infrastructure, analogous to traditional DDoS attacks. We illustrate the EDoS attack in Fig 1. In this paper, we provide a mechanism to identify suspicious service requests at the service provider?s end, and mitigate the effects of the EDoS attack through controlled resource usage.

The proposed scheme operates within the service provider, is stateful, and factors the number of incoming requests arriving at the service provider?s end. It may be noted that in certain cases such as Google, the service provider as well as the cloud provider are one entity.

The rest of the paper is organized as follows: In Section 2, we provide an analysis of existing work done to identify and prevent distributed attacks against the cloud. We provide   DOI 10.1109/CLOUDCOM-ASIA.2013.51    DOI 10.1109/CLOUDCOM-ASIA.2013.51     ?? ?? ? ?? ? ? ? ?  ? ? ? ?? ?? ? ?? ?  ? ?? ? ? ? ? ? ?? ? ?? ? ? ? ? ? ? ? ?? ? ?? ?? ? ? ? ? ?  ? ? ? ? ? ? ? ? ? ? ? ?? ? ? ?? ?  Fig. 1. Effect of an EDoS Attack against the Cloud.

an elaborate explanation of our proposed scheme in Section 3.

Simulation results and their analysis is presented in Section 4.

Finally, we provide conclusions and future directions for work in Section 5.



II. RELATED WORK  In this section, we summarize research work found in the literature for addressing distributed malicious attacks against the cloud. In [6], an approach towards proving client commit- ment through solving crypto-puzzles is presented. The purpose of the scheme is to thwart the effects of an EDoS attack, by granting access to only those clients willing to pay for service. Clients request for server access at the cloud provider?s end by first defining the crypto-puzzle difficulty level, k, and subsequently requesting for access. If an initial connection request is not successfully made during a given frame of time, the client may request for a more difficult puzzle to solve.

Upon succeeding in solving a puzzle of a given complexity, the server establishes a secure communication channel for message exchange between the client and itself.

In [7], an EDoS mitigation technique for the cloud is proposed. The primary function of In-Cloud Scrubber Service is to generate a puzzle to check the legitimacy of the user for accessing the cloud service. The cloud service is switched between two modes: normal and suspected, based on the server and network bandwidth. In-Cloud Scrubber Service is used while the cloud service is operating in the suspected mode. The incoming requests during the normal mode will be immediately directed to the cloud service, whereas, the incoming requests during the suspected mode will be directed to the In-Cloud Scrubber Service for verification purpose.

Client puzzles are known to provide weak access guaran- tees to end-users [8], as malicious users with high computa- tional power may circumvent legitimate users from gaining access to cloud services. As a result, legitimate users may be facing a debilitating waiting time before they are actually guaranteed service.

Sqalli et al. [9] proposed a mitigation technique called EDoS-Shield to protect the cloud against EDoS attacks. The key factor proposed for differentiating between legitimate and EDoS requests is through verification of human presence to control an end-user machine. A Virtual Firewall (VF) and a Verifier Node operate in tandem to perform the EDoS mitigation tasks. The firewall filters incoming requests based on two lists, white list and black list. The verifier node verifies the incoming requests using a Turing test, during first client access. If a user passes the Turing test, its IP address will be held in the white list and subsequent requests from the same address will be forwarded to the cloud scheduler for providing necessary services. In contrast, if a user fails the Turing test, its IP address will be held in the black list and subsequent requests from this address will be dropped by the firewall. However, the proposed approach has a few shortcomings. One of them is its vulnerability to IP spoofing. This problem might cause an EDoS attack if an attacker spoofs an IP address belonging to the white list of the verifier node.

In [10], an enhanced version of the scheme proposed in [9] is presented, wherein, a Time To Live (TTL) field is appended alongside the IP address of cloud service requests. Through such an approach, the authors attempt to thwart the threat of spoofed IP addresses, as the distinctness in IP addresses when accompanied with a TTL field, will help differentiate mali- cious spoofing clients from legitimate ones. Another scheme proposed to classify network traffic into anomalous based on mean absolute variance of TTL values is provided in [11].

Distributed Denial of Service (DDoS) attacks exploit the asymmetry between the network line rate and server process- ing rate [12] to overwhelm server resources, and circumvent legitimate clients from timely access to service. In [13], the authors have provided a contrast between traditional DDoS attacks and EDoS attacks. The distinguishing point between the two is stated as follows: while the former tends to deplete available resources to the end users, the latter attempts to inflate the bill of the service provider through exploiting the property of elasticity of cloud resources. The proposed scheme     is an in-cloud EDoS mitigation web service comprising three modules, namely, packet filtering, proof-of-work technique, and egress filtering. The client?s of the cloud service must prove their commitment for gaining service access by solving crypto puzzles. Only clients succeeding in solving the crypto- puzzles are granted access to the cloud services.

The authors in [14] propose an approach for ensuring that HTTP and XML based DDoS attacks do not trigger the auto- scaling feature of the cloud, thus ensuring that an EDoS does not transpire through such an attack. The contribution mainly focuses on studying the ability of a DDoS attack through protocol vulnerability exploitation, to cause an EDoS attack against the cloud.

In [15], an adaptive swarm-based scheme is presented. Spe- cific network routes are bound with specific client connections, and dismantled once the cloud-based service is completely provided. Based on variations in the network terrain, the route selected for a given client is modified. Certain connections, such as SSL, are not supported, due to the stateless nature of the scheme. In [16], a traceback mechanism is proposed for identifying perpetrators of DDoS attacks against the cloud. A filtering technique is implemented to ensure that only legiti- mate packets are seen through by the cloud virtual resources.

It is also stated by the authors that when the server (or VM) capacity is not exceeded, even rogue packets are served by the proposed scheme.

Other work related to Denial of Service (DoS) attacks against the cloud is summarized as follows. In [17], the authors proposed a mechanism to detect and mitigate the effects of an HX-DoS attack, defined as a combination of HTTP and XML messages, attempting to disrupt cloud activity. The proposed scheme, namely, ENDER, is comprised of two previ- ously proposed schemes, CLASSIE [18], and Added Decision Making and Update (ADMU) [19] [20]. Messages arriving at the cloud provider?s end are assessed by the CLASSIE analyzer, which is located one hop away from the router or host. The ADMU component of the proposed scheme makes a decision on whether to give access to a cloud resource by computing a likelihood of a message, not previously classified, as constituting an attack.

In [21], a network-level access control mechanism is pro- posed to prevent DoS attacks against cloud resources. A cloud access manager (CAM) operates within the proposed archi- tecture. The CAM creates access zones. Zone 1 is implicit, implying that if one member of the zone has access to a certain cloud resource, others do as well. Moreover, cloud instances can be part of multiple zones simultaneously. Each zone has certain set of privileges. In addition, policies can be added to the zones, for allowing further security controls.

In [22] [23], a traffic analysis-based approach for identify- ing DoS attacks is proposed. Statistical properties are extracted from network traffic based on multivariate correlation analysis.

The scheme employs triangle areas to extract correlated fea- ture information from network traffic. In order to accurately identify DoS traffic, a normal network traffic profile is defined through density estimations, aforehand.



III. THE PROPOSED APPROACH  In this section we present the proposed EDoS attack detection and mitigation technique for the cloud infrastructure.

The scheme detects and mitigates the effects of an EDoS attack against the auto-scaling feature of the cloud, where auto-scaling is defined as the characterisitic of the cloud that allows the service provider to request for scaling up or down of cloud resources, automatically, to accommodate variable user demands. Two parameters, namely, threshold and duration, are considered while classifying incoming requests as normal or anomalous. Threshold is the maximum number of requests, beyond which the autoscaling feature is activated, whereas, duration is the length of time for which the autoscaling remains active. Fig. 2 shows the proposed architecture of the EDoS mitigation technique. A detailed inner working of the proposed scheme is provided in Fig. 3.

? ?? ?? ?? ? ?   ?? ? ? ??? ? ?? ?         ??? ? ?? ? ?? ? ? ? ? ??  ? ? ?  ? ?? ?? ???  ? ?? ?? ???  ? ?? ?? ???  ? ? ? ?? ? ? ? ! ??  Fig. 2. The proposed architecture of EDoS mitigation technique  The distinct components of the architecture (with the VM Investigator Access Computation considered as a sub- component) are elaborated upon as follows:  A. vFirewall:  Is a front-end filtering device responsible for analyzing the incoming requests to the service provider. White list user requests are directed to the VMs. Those requests found to be originating from black-listed users are directly sent forth to the VM Investigator (see Fig. 4). The vFirewall therefore does not drop any requests from IP addresses found in the black list. The VM Investigator follows the same procedure for both cases, namely, when black-listed requests are directly received, and when the VM Observer does its probing on inter-VM traffic, and forwards the requests to the VM Investigator (see Fig. 3).

B. Job Scheduler:  Does even distribution of jobs to individual VMs. These jobs are distributed based on several techniques for job scheduling proposed in the literature, such as those found in [24] [25] [26] [27]. However, the job distribution may still lead to overwhelming of resources at a VM. We therefore propose having a VM Observer process operational within each VM, for probing local resource usage.

C. VM Observer:  The VM Observer process resides within each VM. It is responsible for probing of resource usage within the VM.

During any frame of time, the thresholds of CPU, memory, or network usage (thru inter-VM communication), as stipulated at initialization time, must not be surpassed. The VM usage metrics observed by the VM Observer process is comprised of: a) network link utilization, b) CPU utilization, and c) virtual memory allocation. Upon observing exceeding resource usage at a VM, the VM Observer redirects subsequent requests to the VM Investigator, for further analysis.

D. VM Investigator:  The VM Investigator is triggered either by the vFirewall (for black-listed request origins), or by the VM Observer if the VM resource usage crosses pre-defined thresholds. It executes a series of steps to provide selective access to subsequent service requests from suspicious users. Through this procedure, a limited access permission and priority for cloud resource access is granted, based on a specified criteria, to prevent indiscriminate resource allocation to malicious users that are perpetrating an EDoS attack. Only legitimate users (not marked as black listers), will continue with their cloud resource access, uninterrupted. Through deployment of the VM Investigator, auto-scaling will not incur undue losses because of an EDoS attack against the service provider because of the presence of malicious users in the network.

The resource usage thresholds defined and utilized by the VM Observer, provide bounds on CPU, memory, and network usage, to help identify suspicious users of the service provider, thereby redirecting them to the VM Investigator, for initiating the selective access process. A User Trust Factor (UTF) parameter is initialized at the VM Investigator to help calculate the number of accesses the VM Investigator can provide to a given user in a given frame of time. It is originally set to 0.5 by default. Subsequently, if a user fails a Turing test, then the UTF is reduced by 0.05, and if it passes the Turing test, it is incremented by 0.05, where 0 ? UTF ? 1. If the UTF value for a given user reaches the maximum (i.e. one), then the user is removed from the black list, and this information is conveyed to the vFirewall. On the contrary, when the UTF value reaches zero, all subsequent requests from this IP address are dropped, and the system administrator is informed accordingly.

In Algorithm 1, all steps executed at the VM Investigator are outlined.

E. VM Investigator - Number of Accesses (wopt) to Give  The wopt value is calculated at the VM Investigator, for providing an upperbound on the number of service requests a given end-user may gain, with an expiration time. The purpose of this rate limit is to avoid overwhelming of VM Investigator resources by the end-users (either through EDoS attacks or through flash crowding). It is assumed that the aggregate rate of arrival of requests from the clients is less than or equal to the Application processing rate Li? at the VM Investigator, where Li is the length of the buffer to hold cloud resource access requests from an end user i, and ? is the worst case time window length to handle all requests within the server?s buffer (collective resource availability of all operational VMs).

Input: Input Request from the VM Observer, with user ID i.

Output: Response to VM Observer.

1. Accept Incoming Request from VM Observer.

2. Send Turing Test to i 3. If (Response Received Delay (i) < Acceptable Bound (UTFi))  Forward Request to VM Observer(i) Confirming a Pass (Client legitimacy)  Update UTFi else  Execute Equation 2 and Compute number of accesses (wopt) to grant to user i.

Update UTFi Update Black List 4. Update wopt of user i.

Algorithm 1: Steps of execution at the VM Investigator node when user requests are directed by the vFirewall to the VMs.

The modified client request forwarded to the VM Investi- gator by the Virtual Machines is given by:  Client Request = {Source IP address, Time Request Re- ceived ts, Overall Usage ObserverNode }.

Based on the UTFi value, the end-user is requested to respond to the Turing test. The VM Investigator generates an estimate on the number of accesses to grant to the user i during a given frame of time. The state information of an end-user i stored within the VM Investigator is:  state information = {start time ti, end time ti+1, Max Ac- cess Counter wopt, Source IP Address, Time Request Received ts}  where, 1 ? wopt ? L.vn , for n end-users attempting to access VM resources in parallel (assuming that based on the service level agreement, the maximum amount paid for by the service provider should not be exceeded). v is the number of operational VMs at the service provider.

ti = tw + ?, where ? is the network delay between the VM Observer and VM Investigator.

ti+1 = ti + wopt.(? + 2.? + ?i).

?i is an estimate on the minimum interarrival delay estimate between two consecutive requests from the same end-user i.

Upon successfully passing the Turing test, the VM Inves- tigator generates two values, namely, ti and ti+1, which are the beginning and end of the time frame for access control.

These two values are computed based on the availability of VM resources as well as on the number of end-users attempting to access the VM services in a given frame of time. A minimum delay of ? for network communication between the user and the service provider is incorporated to ensure that unfair denial of access does not occur for end-users due to communication factors. The end time ti+1 is derived based on the number of accesses granted to a user, wopt. For larger numbers of accesses granted, the time frame is longer, and vice versa. The length of time window wopt is optimized and computed based on Equation 2.

The worst case scenario is when the waiting time for a legitimate client to gain access to a cloud-based service     ? ?? ?? ?? ? ?   ? ?   ??  ??? ?? ? ?  ?? ?? ? ? ??? ? ?? ?  ?? ? ? ??? ? ??  !" #$" % &!' &" (" ) *+ *" ,-. ,' &" - %" ) / )$ % &0' 1 &2 )3 )' 4 &5 1 1" % %  ? 6" )7 * 1" )" #$" % &  ? ? 8 ? 9? : ;  <=> ?@ A=B CDE F DG HG <=I DG H AB J HD KL M D = J F H ?NG > J O A=B H M CDG M ? O K AGDP > D D K D KQ ? C J RS  ?? T! " #$" % &!' &" 4 2 4U (" ) *+ *" ,VW" X' Y" , 5 1 1" % % Z-. ,' &" - %" ) / )$ % &0' 1 & 2 )-. ,' &" [ X' 1 \] * % &  ^? 0 2 )_' ) , & 2(`a 4 7" % & *b' & 2 )  c? /$ ) * 4 b /" % &  de ?fg h? ij k? ? /l )" % l 2 X ,(" ) *+ * 1' & * 2 4  Fig. 3. The communication hierarchy when user requests are directed by the vFirewall to the VMs.

?? ?? ? ?? ? ? ? ? ? ?? ?? ? ? ? ?? ?? ?? ?? ?? ? ?? ? ? ??? ?  ? !? ? "# # ? ? ? $%& ? ? ?? % ?? ? ' ?? ? ?( ? # ?? ?%& ? ? ?? )  ? # *+ ? ? ?  , -. /0 12 3 3  45 0 /5   8 9:; <= ; <  67 >? , 0 5 @.A 2 @B /  CD E D FGH H  ?  I ?? ?? ? ? ? ?? ?? ?? ? ?? ?? ?%& ? ? ?? % ?? ? ' ?? ? ?( ? # ?? ?J ?? ? ? " # # ? ? ?  I  K? ?L ? # ? ?? ?? ? ? ?  C D M D NG O P  'Q ?? ? Q ?  ??? ? ?? ? # ? ? ? ? ?  R? S 	 ?T ?U 	 ? 	V ? ?  )  ? # *  ? ? ?WXYZ W[\Z WZ W]WXYZ W[Z WZ Y ] ]  Fig. 4. The communication hierarchy when the vFirewall deals with black listed users.

is higher than expected. The delay incurred will not be unbounded because the number of accesses granted to each end-user is pre-computed based on the optimal window length, wopt. Eventual access implies that if a large set of requests are anticipated from a given user, service providers should accordingly request for those many accesses from the service provider ahead of time, to prevent a denial-of-service situation for legitimate users subscribed to the service provider. The access count, wopt, to be given to a user by the VM Investigator node directly affects the end-user quality of experience. An exceedingly high number of accesses given to a single user would preempt service access by other legitimate users, and very few accesses will invariably overwhelm the VM Investiga- tor node with frequent requests for service access by the users.

The overhead for the former case is felt by other legitimate users of the cloud, with the imminent possibility of malicious users gaining server resource time, subsequently refraining  from actual service usage, causing an EDoS. On the other hand, with very few accesses granted, frequent users of the cloud services, as well as malicious nodes with the intention of gaining server access, will overwhelm the VM Investigator, thereby, causing service disruptions, through a DoS against the VM Investigator. We therefore optimize the number of accesses that must be given to the end-user based on the following:  Let c1 be the unit cost of communication between a cloud end-user and the VM Investigator, assuming the VM Investigator is present behind a vFirewall, as depicted in Fig.

2. Let c2 be the cost of resource under-utilization at the service providers? end due to non-utilization of allocated time by malicious users. If A is the estimate access counter for a given cloud service Cs, and i is the percentage of legitimate clients of the system, where 0 < i ? 1, then the total cost incurred by the system when the selective access scheme is operational     Input: Input Request from the firewall, with user ID i.

Output: Response to VM, Response to Firewall.

1. Accept Incoming Request from firewall.

2. Send Turing Test to i 3. If (Correct Response Received Delay (i) < Constant Tolerance Value)  Forward Request to VM (i) through vFirewall Confirming a Pass (Client legitimacy))  Update UTFi else  Execute Equation 2 and Compute number of accesses (wopt) to grant to user i.

Update UTFi Update Black List  4. Update wopt of user i.

Algorithm 2: Steps of execution at the VM Investigator node when the vFirewall deals with black listed users.

for a given service provider, is given by:  Ctotal = c1.A  wopt + c2.(1 ? i).wopt (1)  Minimizing the total cost of the scheme given above, provides an estimate on the optimal number of accesses to be given to a client, wopt, for a given cloud service, as follows:  wopt =  ? c1.A  c2.(1 ? i) (2)  Based on the formulation provided in Equation 2, the start and end times, ti, and ti+1, can be computed.



IV. SIMULATION AND ANALYSIS  In this section, we present simulation results to illustrate how our proposed scheme mitigates an EDoS attack against the VM resources of the cloud. In addition, we analyze the access count granted to individual users of the cloud based on varying system-level parameters, as specified in the previous section. We also study the simulation results portraying the average delay perceived by an end-user when the scheme is operating. The average buffer length for an end-user (i) at the VM Investigator is taken to be 100, the average interarrival time between two consecutive requests from the same user ?i is taken as 10 ms, and the estimate access count A is taken as 100. In addition, an the costs imposed by the mitigation scheme c1 and through an EDoS attack, c2, were evenly taken as 0.5 each.

In Fig. 5, we illustrate the ability of the proposed scheme to reduce the effects of the EDoS attack on the service provider?s resources, as well as on the economic damage incurred through the attack on the service provider. An EDoS attack is an attempt by the adversary to reserve virtual machines at the service provider, so as to incur unwanted and wasteful cost on the service provider, thus affecting its ability to afford provisioning of services to its legitimate client base. The resilience to the attack is measured as the ratio of wasteful  time slots assigned to malicious users, against those slots assigned to legitimate users of the cloud. With an increasing number of malicious users, r, the overall capability of the detection scheme diminishes, as is evident from the Figure.

Nearly 90% resilience is attained with r=10%, whereas, a meagre 12% resilience is witnessed with 90% of user base being malicious. An increasing number of operational virtual machines in the cloud, will improve the performance of the attack mitigation scheme. However, this improvement is offset with increasing numbers of malicious users. Therefore, increasing virtual machines does not significantly affect the ability of the scheme to mitigate EDoS attack effects. Apart from the case where r=70%, where larger number of VMs led to degradation in performance, other values of r yielded comparable performances for all three numbers of VMs tested, i.e., v=100, 500, and 1000.

?  ? ??? ??? ??? ??? ?? ??  ??? ??? ??  ?  ??? ??? ??? ??? ??	 ?? ??? ??? ?? ?  ? ?? ? ? ?? ??   ? ?? ? ???  ????????? ???? ?????  ??????????????????? ????????????????	?? ????????????????????  Fig. 5. The Resilience of the Scheme to EDoS Attack Effects  In Fig. 6, we illustrate the number of optimal accesses granted to individual users of the cloud for varying numbers of malicious users, r. It may be noted, that the value of r selected for deriving wopt, is assumed based on empirical service provider behavior, and can be selected by the system administrator at network initialization time. The number of VMs, v, has a direct effect on the number of accesses granted.

Fewer VMs would demand fewer numbers of incoming re- quests to the service provider during any given frame of time.

On the contrary, with increasing numbers of operational VMs, the service provider has more room to accommodate additional numbers of requests from end-users. If higher numbers of malicious users r is expected, these access counts can be reduced accordingly.

We ran further simulations to test the effect of increasing user base of the cloud (inclusive of both legitimate as well as malicious), on the numbers of accesses granted. In Fig. 7, we illustrate this trend. With r = 10%, and number of VMs = 1000, nearly 33 accesses are granted to each other during a given frame of time, when only 2000 users are availing cloud services. Increasing the user base reduces the number of accesses granted. Therefore, with N = 100K, and r=10%, only 4 accesses are granted per-user. Increasing the anticipated number of malicious users leads to fewer accesses granted. For N=50K, 6 accesses are granted for r=10%, and only 1 access is granted for r=90%, thus showing the adaptability of the scheme to various attack scenarios.

In Fig. 8, a similar trend to that shown in Fig. 7 is     ?  ?    ??  ?  ??  ?  ??  ?  ??? ??? ??? ??? ??	 ?? ??? ??? ?? ?  ? ? ?? ??? ? ? ? ? ?? ??? ??? ?  ? ?? ??? ?? ? ? ??  ?????????  ?!" #?$??  ??????????????????? ????????????????	?? ????????????????????  Fig. 6. Per-User Number of Accesses (Optimal) granted for Variation in Malicious User Base, with v = 100, 500, and 1000, and r=0.5  ?  ?    ??  ?  ??  ?  ??  ?  ? 	 ?? ?	 ?? ?	 ?? ?	 ?? ?	 	? 	? ? ?? ?	 ?? ?	 ? ? ? ?? ??? ? ? ? ? ?? ??? ??? ? ? ?? ??? ?  ? ? ? ??  ?????? ??  !"#$? %&??' ()??) *+ ,-./  ????????????????? ????????  ????????????????? ???????  ????????????????? ???????  Fig. 7. Per-User Number of Accesses (Optimal) granted for Varying User Base, with r = 0.1, 0.5, and 0.9, and v=1000.

illustrated, for fixed r=50%, and different values of v. A large number of VMs operating at the service provider?s end will allow the scheme to provide more numbers of accesses to the end-users and vice versa. For v = 1000, roughly 2 accesses were granted for N = 100K, whereas, for v = 100, only 1 access per-user was granted. Smaller values of N allow more numbers of accesses to be granted to each end-user, with nearly 14 accesses granted for v=1000, and N = 1000, and only 5 accesses granted for v=100, and N=1000.

?  ?  ?  ?     ?  ??  ??  ??  ?   ? 	 ?? ?	 ?? ?	 ?? ?	 ?? ?	 	? 	? ? ?? ?	 ?? ?	 ?? ? ?? ??? ? ? ? ? ?? ??? ??? ? ? ?? ??? ?  ? ? ? ??  ?????? ??  !"#$? %&??' ()??) *+ ,-./  ??????????????????? ????????????????	?? ????????????????????  Fig. 8. Per-User Number of Accesses (Optimal) granted for Varying User Base, with v=100, 500, and 1000, and r=0.5.

The end-user perceived delay is a very important measure  of the performance and usability of the scheme. We tested the delay incurred by the EDoS mitigation scheme, in the presence of variable numbers of cloud users, malicious users, as well as variable number of VM nodes. In Fig. 9, we illustrate the effect of increasing numbers of cloud users on the end-user perceived delay, for varying r, and fixed v=1000. The overall delay appertaining to the operations of the scheme are derived based on two factors: a) Computational delay associated with the calculation of the optimal number of accesses (wopt) to be given, and b) queueing delay in the service provider?s storage buffer. The delay associated with (b) is common to all service providers, whereas, the delay incurred by the scheme is reflected only through (a) above. For larger values of r, the delay incurred is higher, and for smaller r, the delay is less. This behavior is attributed to fewer numbers of accesses granted for larger r, and vice versa. A delay of nearly 0.4 ms is observed with 100K active users, and r = 90%, whereas, a mere 0.1 ms is observed for the same number of users, with r = 10%. In Fig. 10, we fix the value of r at 50%, and vary the value of v. It may be observed from this Figure that increasing numbers of users will lead to an increase in the end-user perceived delay, for all values of v. Fewer numbers of operational VMs lead to additional waiting times for the users before they are granted access, and therefore, longer delays. For N=100K, a 0.9 ms delay is observed with only 100 operational VMs, whereas, a delay of 0.23 ms is observed for the same number of users, and v = 1000.

?  ?  ???  ???  ???  ???  ???  ???  ???  ???  ???  ? 	 ?? ?	 ?? ?	 ?? ?	 ?? ?	 	? 	? ? ?? ?	 ?? ?	 ?  ? ? ?? ?? ? ???   ?? ? ? ?? ? ???  ?????? ?? ?????? ???? !"??" #$ %&'(  ????????????????? ???????? ????????????????? ??????? ????????????????? ???????  Fig. 9. Average User Perceived Delay with the Scheme in Action, versus Varying User Base, with r = 0.1, 0.5, and 0.9, and v=1000.

?  ? ??? ??? ??? ??? ?? ??  ??? ??? ??  ?  ? 	 ?? ?	 ?? ?	 ?? ?	 ?? ?	 	? 	? ? ?? ?	 ?? ?	 ?  ? ? ?? ?? ? ???   ?? ? ? ?? ? ?? ?  ?????? ?? ?????? ???? !"??" #$ %&'(  ??????????????????? ????????????????	?? ????????????????????  Fig. 10. Average User Perceived Delay with the Scheme in Action, versus Varying User Base, with v=100, 500, and 1000, and r=0.5.



V. CONCLUSION & FUTURE WORK  We have proposed a novel scheme to provide fair control for cloud resource access by end-users, in the event of an EDoS attack. Through this scheme, we have shown that controlled access guarantees can be provided to all cloud users, based on their past behavior. The scheme is comprised of several compo- nents, namely, VM Observer, vFirewall, and VM Investigator, operating hand in hand, to control access to the end-users, for mitigating the effects of an EDoS attack. Resource-usage thresholds are specified at each VM, and probed constantly by a VM Observer process. The VM Investigator is triggered in response to excessive resource usage, or if blacklisted requests arrive at the vFirewall. The VM Investigator provides controlled access to all users. Through this scheme, none of the requests that surpass the defined thresholds of resource usage, are dropped, but rather, the users are provided with a delayed access to the cloud services, based on system parameters, as well as past user behavior (based on the UTF value). By analyzing the results obtained from simulation of the proposed scheme, it is evident that the effect of the EDoS attack is mitigated when the access to the cloud resources is controlled over a stretch of time. Moreover, the user perceived delays imposed through the scheme were found to be minimal. As part of our future work, we intend to further analyze our proposed scheme, and its performance when service provider network-level parameters are varied. In addition, we intend to implement diverse application scenarios, and study the scheme?s performance for each.

