High-efficiency algorithm for mining Maximal Frequent Item sets based on matrix

Abstract: Association Rule Mining is an important data mining technique and Maximal frequent item sets mining is an essential step in the process of Association rule. Here presented is BM-MFI, a new algorithm based on matrix, for mining maximal frequent item sets. Its basic idea is trans- forming the event database into matrix database by operat- ing the rows and columns of matrix to compress the data- base. Using Itemset-Tidset pair can mine maximal frequent item sets in the compressed database with convenience and effectiveness, and therefore prevent conditional FP-tree and candidate patterns. Experimental result verifies the effi- ciency of the BM-MFI.

Keywords: data mining; frequent item sets; maximal frequent item set;BM-MFI; Itemset-Tidset pair;

I. INTRODUCTION Association rule is one of the important models of da-  ta mining, and has the most significant application value.

It was first introduced by Agrawal and reflects the rela- tionship among the large data sets [1]. Discovering fre- quent item sets or item sequences is an important phase in mining association rules [2]. For an L-dimensional fre- quent item sets F and each subset in F is frequent, so the total of its subsets is 2L-1. If L is large, a NP problem will rise [3]. The process of finding association rules has two separate phases. In the first phase, we find set of Frequent Items (FI) in database. In the second, we set FI to generate interesting patterns. In practice, the first phase is time consuming [4]. Suppose a frequent pattern of length 1, when the number is large, the frequent item set mining methods become CPU bound rather than I/O bound. In other word, it is practically unfeasible to mine the set of all frequent patterns for other than small 1.

Therefore, we mine only the maximal frequent item sets, which are typically  orders of magnitude fewer than all frequent patterns.

Presently, there are multi-kind algorithms about max- imal frequent item sets, such as SmartMiner, MAFIA, FP-Max, DMFIA and FPMFI. SmartMiner[5] uses a data structure called ?tail information? to obtain the relevant informat ion. MAFIA[6] proposed by Burdick et al is based on a data structure of item sets grid and subset tree and adopts a variety of pruning strategies, such as PEP,FHUT and HUTMFI to reduce the pruning cost. FP- Max [7] is an effective Depth-first mining algorithm based on frequent pattern tree to mine maximal frequent item sets, using FP-tree to compress the frequent item sets in transaction database. DMFIA [8] is also based on frequent  pattern tress like FP-Max, but only scans the database once. FPMFI [9] uses a mechanis m of detecting supersets to low the time of detecting superset, and compress the size of frequent pattern subtree through removing the redundant features to reduce expenses of traversing.

However, the algorithms above need to retest supersets.

The FP-tree algorithm scans database twice, but the most condition frequent pattern trees is set up by recursive algorithm.

Therefore, a new algorithm based on matrix for min- ing maximal frequent item sets (BM-MFI) is pro- posed.BM-MFI is to compress the rows and columns of matrix using minimum support, and mine maximal fre- quent item sets through Itemset-Tidset pair. Experimental result shows that this algorithm is advantageous to reduce the algorithmic time and space complexity without gene- rating frequent pattern trees and candidacy of frequent item sets.



II. THE BASIC CONCERNED CONCEPTS  Given a set of items, , a trans- action may be defined as a subset of I and a dataset as a set D of transactions. Each transaction has a unique trans- action identifier (Tid) and contains a set of items. |D| is the number of transactions in database. A set X of items is called an item set, whereeee , c(X) is defined as support counts with X in D. The support of X, sup(X), is the pro- portion of transactions containing X in the datasets. The relation of c(X) and sup(X) is described as follows: p( )  (1) Definition 1(Maximal frequent item set) In transac-  tion database D, the sign s denotes the min imum support threshold. If an item set  and ,  is called  maximal frequent item set.

Definition 2 (Boolean matrix database) For the giv-  en transaction database D, the Boolean matrix of D is represented by R:  Mappinggggggg , s.t.

(2)  Lemma 1 Let Lk be a k-frequent item sets, if and the support counts , then to solve the support of k+1, we can remove the transaction T from Boolean ma- trix.

By the nature of AND operation, if and only if the value of all the elements which part icipate in AND is ?1?,   DOI 10.1109/CICN.2012.123     the operation result is ?1?. When the number of frequent item sets in T which is less than k+1, T has at least one element is ?0?. So to solve the support of (k+1)-frequent item sets, the support of k-frequent item sets is no use and the row in matrix which equal to k is removed.

Definition 3(Itemset-Tidset-pair) In the transaction database T, each item is identified by a unique identifier ?tid?. The letter I is indicated by item sets. Let X be an item set, . So ?tidset? is defined as , which is a set of transactions containing item set X cor- responding to the identifier tid. The number of element in is . Itemset-Tidset pair is .



III. BM-MFI ALGORITHM AND IMPLEMENTATIONS  A. The algorithmic thought and implementations The main idea of the algorithm: first of all, the trans-  action database is transformed  into matrix, the row vec- tors are used to represent the number of items corres- ponding to every transaction, and column vectors represent the number of transactions corresponding to every item. We use ?1? to show their existence, other- wise by ?0?. Secondly, we can remove the columns of matrix through minimum support threshold and the rows through Lemma 1 above. Finally the Itemset-Tidset pair is used to find maximal frequent item sets.

The description of the algorithm: Input: D, min_sup Output: Lk Let min_sup be min imum support threshold and Lk  maximal frequent item sets. |D| and |I| denote respective- ly the number o f transaction datasets and item sets.

Step1: D is transformed into R,  represents the number of ith row vector that contains ?1? and  the number of j-column vector which contains ?1?.

Step2: Suppose k==== , define a init ial count ?c?, and c=k;  Step3: Define the minimum support count as s, s=  p ==== ;  Step4: for (j=1; j<=|I|; j++) { If { for (i=1;i<|T|; i++) if (rij==1)  | | ) ;  Del (rij);  //remove the element rij } } Step5: Take the lines which meets  to form a  new matrix which expressed by MFIM (Maximal Fre- quent Item sets Matrix), c=c -1, go to  step3; if , repeat to step4. Otherwise, go to next.

Step6: By the defin ition 3, compute  which the number of x is equal to c;  if , then ; oth- erwise, go to step4.

B. Example analysis Transaction database D= T1 T2 ? T10 ,  and item sets I= I1 I2 I3 I4 I5 I6 in the fol- lowing table.I. The given min_sup is 40%. We use BM - MFI algorithm to find the maximal frequent item sets.

TABLE I. TRANSACTION DATABASE  Tid Items T1 I1 I2 I3 I6  T2 I1 I2 I3  I5 I6 T3 I2 I3 I5 I6 T4 I2 I4 I5 T5 I1 I3 I5 I6 T6 I2 I5 I6  T7 I1 I2 I3  I5 I6 T8 I1 I2 I4 I6  T9 I2 I3 I4  I5 I6 T10 I2 I3 I5 I6  Transforming the database above into matrix database in table.II:  TABLE II. MATRIX DATABASE  Tid I1 I2 I3 I4 I5 I6 1 1 1 1 0 0 1 4 2 1 1 1 0 1 1 5 3 0 1 1 0 1 1 4 4 0 1 0 1 1 0 3 5 1 0 1 0 1 1 4 6 0 1 0 0 1 1 3 7 1 1 1 0 1 1 5 8 1 1 0 1 0 1 4 9 0 1 1 1 1 1 5  10 0 1 1 0 1 1 4 5 9 7 3 8 9  From table.2, we obtain k=5;c=5;min_sup=4.

By step4, the matrix database is compressed in ta-  ble.III: TABLE III. COMPRESSED MATRIX DATABASE BY STEP 4  Tid I1 I2 I3 I5 I6 1 1 1 1 0 1 4 2 1 1 1 1 1 5 3 0 1 1 1 1 4 4 0 1 0 1 0 2 5 1 0 1 1 1 4 6 0 1 0 1 1 3 7 1 1 1 1 1 5 8 1 1 0 0 1 3 9 0 1 1 1 1 4  10 0 1 1 1 1 4 5 9 7 8 9  Take the lines which  to form a new ma- trix in table.IV:  TABLE IV. MATRIX DATABASE AFTER PRUNING  Tid I1 I2 I3 I5 I6     1 1 1 1 0 1 4 2 1 1 1 1 1 5 3 0 1 1 1 1 4 5 1 0 1 1 1 4 7 1 1 1 1 1 5 9 0 1 1 1 1 4  10 0 1 1 1 1 4 4 6 7 6 7  We compute which the number of x is equal to 4 respectively:  ? ? ? ? ?? ? ? ?  ? ? ? ?  ? ?  ? ? ? ? ?  ? ? ? From the result, the maximal frequent item sets Lk=  {I2, I3, I5, I6}.



IV. EXPERIMENT We use classical data sets, Mushroom Database as  test data. This data set includes 8124 instances, 23 attributes and 127 kinds of values. The BM-MFI, which is proposed in this paper, is compared with the Mafia based on Apriori and FP-Max based on FP-t ree, and the criteria of comparisons are the running time with d iffer- ent degrees of support and different transaction records.

The experiment is performed on an Intel core duo 2.93 GHz and 4G memory PC. Fig.1.(a) shows that the time needed by the three algorithms under different support degrees. Fig.1.(b) shows that the performance of the al- gorithms under different records (suppose the support threshold is 25%).

26 28 30 32 34 36 38 40 42     R un  ni ng  ti m  e (s  )  Support threshold (%)  Mafia FP-Max BM-MFI  (a)  5000 6000 7000 8000     Ti m  e  Tid counts  Mafia Fp-Max BM-MFI   (b)  Fig.1.(a)The comparison result of the algorithms under different degrees of support; (b)The comparison result of  algorithms under different TID counts From fig.1.(a), with support threshold increasing, the  running time will decrease. The advantage of BM -MFI algorithm is more obvious without generating frequent pattern trees or candidacy of frequent item sets . In fig.1.(b), the results by BM-MFI are superior to those of the other two methods. BM -MFI consumes the least time and as the number of tid counts increasing, its advantage is more obvious. Therefore, compared with Mafia and FP-Max algorithm, the BM-MFI has better performance.



V. CONCLUSION In this paper, a h igh-efficiency algorithm for min ing  Maximal Frequent Item sets based on matrix is presented.

BM-MFI is based on matrix, compresses database by minimum support, and uses Itemset-Tidset to mine max- imal frequent item sets . The method can find maximal frequent item sets from data sets  without generating fre- quent pattern item sets or candidacy of frequent item sets .

Experimental results suggest that the BM-MFI can over- come the problems in  typical algorithms, and save a lot of mining time. Compared with the typical algorithms for maximal frequent item sets , our algorithm has fine per- formance and efficiency.

