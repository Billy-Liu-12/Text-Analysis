Mining Association Rules from a Collection of XML Documents using Cross Filtering Algorithm ?

Abstract  Since numerous data have been represented and ex- changed by XML, the ability to extract useful knowledge from XML data is needed. There are several attempts to mine Association Rules from XML data. However, they mostly rely on legacy relational database with an XML in- terface so that efficiency and simplicity are challenging is- sue. In this paper,HILoP(Hierarchical layered structure of PairSet) is introduced. The use of this data structure prevent from multiple XML data scans to mine Association Rules from a Collection of XML Documents. Also. Cross filter- ing algorithm is introduced to mine frequent patterns, the algorithm reduces the number of candidate set. The perfor- mance evaluation result shows that this mechanism is pow- erful enough to represent both simple and complex struc- tured association relationships inherent in XML data.

1 Introduction  Due to the wide availability of huge amounts of data and the imminent need for turning such data into useful informa- tion and knowledge, Data mining technology has been spot- lighted. More precisely the ability to extract useful knowl- edge from XML data is needed because numerous data have been represented and exchanged by XML. Thought there are some proposals to exploit XML within the knowledge discovery tasks, most of them rely on legacy relational data- base with an XML interface. In addition, mining knowledge in XML world is faced with more challenges than in the tra- ditional well-structured world because of the inherent flexi- bility of XML about structure and semantics.

?This research was supported in part by university IT research center project (ITRC) funded by the Korean Ministry of Information and Com- munication and by Korea Science & Engineer-ing Foundation (R01-2004- 000-10755-0).

As a result of data mining, the knowledge can be rep- resented in many different ways such as clusters, decision trees, decision rules, and so on. Among them, association rules[1] have been proved that it is effective in discovering interesting relations in massive amounts of data.

Extracting association rules from native XML docu- ments called ?XML association rules? was first introduced by Braga et al. [2]. In mining area, most studies adopt an Apriori-like candidate set generation-and test approach.

However, candidate set generation is still costly, especially when there exist a large number of patterns and/or long pat- terns[7]. In this paper, HILoP(HIerarchical Layered Struc- ture of PairSet) is introduced. It can significantly reduce the number of rounds for candidate-tree-item-pruning, besides; it can simplify each round by avoiding time-consuming tree item join operations. This paper also introduces Cross fil- tering algorithm which reduces the number of candidate set.

These two components play main roles of our concept.

The outline of this paper is as follows: We review some closely related works in Section 2. Section 3 defines as- sociation rules in the context of relational databases and discusses the notions of association rules for XML. In sec- tion 4, the details of HILoP including some basic concepts needed to implementation are presented. In section 5, we describe the Pseudo code of Cross Filtering. Section 6 shows a result of performance evaluation and explains about it. Finally, section 7 concludes and discuss the future work.

2 Related Works  Agrawal et al.[1] had first introduced the problem of mining association rules. Since them, numerous works have been done in various directions. Methods for mining as- sociation rules from relational data have been well devel- oped. In [3], they gave Apriori and AprioriTid Algorithms.

These Algorithms for discovering large itemsets make mul- tiple passes over the data. There are many Apriori-like al-  0-7695-2674-8/06 $20.00  ? 2006    gorithms and such works are too many to enumerate. In addition, several query languages have been proposed, to assist association rule mining such as [4].

Some works are focusing on developing a standard model to represent the knowledge extracted from the data using XML. Recently, tools for extracting association rules from XML documents have been proposed in [2,5]. These approaches are from the view point of a XML query lan- guage so that it causes the problem of language-dependent association rules mining. On the other hand, [6] has pro- posed as algorithm to construct a frequent tree by find- ing common subtrees embedded in the heterogeneous XML data.

Because candidate set generation is costly, How to re- duce the procedure is a key issue in this area. In [7], They proposed a method for mining frequent patterns without candidate generation. [8] proposed a method to avoid mul- tiple XML data scans to mine Association Rules.

3 Background Concepts  3.1 Association Rules for Relational Data  Association rules were first introduced by Agrawal et al.[1] to analyze customer habits in retail databases. Asso- ciation rule is an implication of the from X ? Y , where the rule body X and head Y are subsets of the set I of items (I = { I1, I2, ..., In }) within a set of transactions D and X ?Y = ?. A rule X ?Y states that the transac- tions T (T ? D) that contains the items in X(X ? T ) are likely to contain also the items in Y (Y ? T ). Asso- ciation rules are characterized by two measures : the sup- port, which measures the percentage of transactions in D that contains both items X and Y (X ? Y ); the confidence, which measures the percentage of transactions inD contain- ing the items X that also contain the items Y. More formally, given the function freq(X,D), which denotes the percentage of transactions in D containing X, we define:  support(X? Y) = freq(X ? Y,D)  confidence(X? Y) = freq(X ? Y,D) freq(X,D)  Suppose that there is an association rule ?bread, butter? Y milk? with confidence 0.9 and support 0.05. The rule states that customers who buy bread and butter, also buy milk in 90% of the cases and that this rule holds in 5% of the trans- actions. The problem of mining association rules from a set of transactions D consists of generating all the associ- ation rules that have support and confidence greater than two user-defined thresholds: minimum support(min sup) and minimum confidence(min conf ). To help the specifi- cation of complex association rule mining tasks, a number  of query languages have been proposed. In particular, [9] introduced the MINE RULE operator, an extension of SQL specifically designed for modelling the problem of mining association rules from relational data.

3.2 Association Rules for XML Data  In this subsection, we briefly review some notations of tree model and describe the basic concepts of association rules for XML data, shortly called ?XAR?.

Definition 1.(Labeled Graph).G = {V, E, ?, L} con- sists of a vertex set. V , an edge set E, an alphabet ? for vertex and edge labels, and a labeling funcion L : V ? E ? ? that assigns labels to vertices and edges.

A rooted tree is a directed acyclic graph where 1) there is a distinguished vertex called the root that has no entering edges, 2) every other vertex has exactly one entering edge, 3) there is a unique path from the root to any other vertex. Every XML document is represented by a rooted labeled tree. For brevity, we call a rooted labeled tree as simply a tree in the rest of this paper.

Definition 2.(Fragment).We say that a tree F=(NF , EF ) is a fregment of a tree T=(N,E), denoted by F?T, if and only if NF ? N and for all edges(u,v) ? EF , u is an ancestor of v in T.

Note that in the definition of fragment, we require that there be a path from node u to node v in tree T for any edge (u,v) occurring in a fragment F. Definition 2 preserves the ancestor relation but not necessarily the parent relation.

Definition 3.(Titem). The basic construct unit in XAR is referred to as titem (tree-structured item). Since any part of an XML document is fragment, any fragment can be a titem.

With the above definitions, we formally define XML association rules and related measurements. Let D = {T1, T2, ..., Tn} be a collection of XML docu- ments and let |D| be the number of documents in D. Let F= {Fi, i > 0|Fi ? Tj , forsomej ? [1, n]}.

Definition 4.(XML Association Rule). An XML asso- ciation rule is an implication of the form X ? Y , which satisfies the following two conditions:  i)X ? F , Y ? F ii) (X ? Y ) ? ( Y ? X )  The items in XAR have hierarchical tree structures as indicated by the first clause of the definition. It is worth  0-7695-2674-8/06 $20.00  ? 2006    pointing out that each of the fragments contains only one basic root node, The second clause of the definition requires that in an XAR, titems are independent each other.

Definition 5. {I1, I2, ..., Im} be as set of titems. Given a set of XML documents D, the support and confidence of an XML association rule X?Y are defined as:  support(X ? Y ) = freq(X ? Y,D) = |DX?Y ||D|  confidence(X ? Y ) = freq(X ? Y,D) freq(X,D) =  |DX?Y | |DX |  ,where DX?Y = {Ti|?IJ ? (X ? Y ), Ij ? Ti for some i ? [1, n], j ? [1, m] }, and DX = {Ti|?Ij ? X, Ij ? Ti, for some i ? [1, n], j ? [1, m]}.

4 HILoP  Same as the association rules for relational data, the problem of mining association rules for XML data consists of generating all XARs greater than min sup and min conf.

We devised HILoP as a tool to mine simple/complex associ- ation rules from XML documents. HILoP allows the spec- ification of complex mining task be compact and intuitive.

Towards this goal, there is an important component. That is a specially devised data structure called PairSet. In this sec- tion, we describe the technique used to mine data structure- guided XML association rules. Our mining process pro- ceeds in three phases: The first phase is to transform each tree-structured data into hierarchical structure PairSets. The second phase is to manipulate PairSets and to reflect the min sup. The third phase is to mine XML association rules from the PairSets by reflecting the two association mea- sures.

4.1 Transforming Tree-Structured XML Documents into PairSets  Definition 6. (Key). Let Kd be a collection of node labels assigned on the nodes at depth d in every tree in D. We assume that depth of root node is 0. We call each member in Kd by a key.

At this point, note that there may exist some nodes labeled with the same names in D. This is so obvious.

Thus, for each key we need to identify the list of trees, tid, in which thr key belongs. We employ hash technique to keep all the necessary information of each key?s parent node into a hash table to facilitate the mining of association rules in later. This will be used to find out weather a key  ? ?  ? ? ? ? ? ? ? ? ? ?  ? ? ? ? ? ? ?  ? ?  ?  ? ?  ?  ?  ? ?  ?  Figure 1. A set of XML documents in D  has a ancestor-descendant relationship with others.

Definition 7. (PairSet). A PairSet, [P ]d, is defined as a set of pairs (kd, tid list) where kd is a key in Kd, tid list is a list of tree indexes in which kd belongs.

The time complexity for generating PairSets is O(n), where n is the total number of nodes in trees. A collection of PairSets can be classified into two classes, which are frequent fragment set and candidate fragment set. To classified them, we refer to a minimum support.

Definition 8. (Frequent Key). Given some user-defined min sup and a pair (kd, tid list), the key kd is called frequent if |tid list| ? min sup? |D|.

Definition 9.(Frequent Fragment Set).Given a PairSet, [P ]d, a pair in [P ]d is called frequent fragment set if its key is frequent. Otherwise, it is called candidate fragment set.

We denote frequent fragment set and candidate fragment set by [F ]d and [C]d, respectively.

Example Fig.1 shows that an example of XML docu- ments. The left side of Fig. 2 shows a collection of PairSet transformed from D in Fig. 1(a). For example, we know that the key ?news? in [P ]1 belongs to all of three trees T1,T2, and T3. The right side of Fig. 2 illustrates the two classes, frequent fragment set and candidate fragment set, derived from PairSets in the left side. The given min sup is 0.66.

0-7695-2674-8/06 $20.00  ? 2006    ?  ?  ? ? ? ? ?  ? ? ? ? ?  ? ? ? ?  ? ? ? ?  (a) Initial Pair Set  ?  ?  ? ?  ? ?  ? ?  ? ?  ? ? ? ? ?  ?  ? ? ? ?  (b) Frequent and Candidate PairSet  Figure 2. PairSets Generation from a set of XML trees in D  4.2 Manipulating the Data Stored in PairSet Structure  The initial frequent fragment sets(depicted in the right side of Fig.2) are derived solely by considering a min sup over the absolute depth of node labels. These frequent frag- ment sets do not have competent fragments to min XML as- sociation rules because both tree characteristic and fragment property(Definition 2) are not reflected in those initial fre- quent fragment sets. The tree characteristic stems from the fact that same labels can be placed several times through- out a XML tree. To handle those features, we introduce an algorithm called cross-filtering.

Cross-Filtering : Let FS = {[F ]0, [F ]1, ..., [F ]d} be as set of initial frequent fragment sets and CS = {[C]0, [C]1, ..., [C]d} be a set of initial candidate fragment sets. The ith round for(i=1,2,...,d) of cross-filtering consists of the following two steps:  -Step 1(Pruning phase). Difference([C]i?1 vs.

[F ]i) and ([C]i vs. [F ]i?1 through [F ]0)  Given the current candidate fragment sets, this step is to eliminate the pairs which are already included in the previous frequent fragments sets.

As result of this step, we can reduce significantly the number of pairs in candidate fragments set  -Step 2(Merging phase). Union([C]i vs. [C]i?1)  Given the current candidate fragment sets, this step is to obtain a new frequent fragment set, Since our PairSet is hierarchical structure, it is not necessary to generate additional candidate frag- ments by using join operations. It is enough to search only the candidate fragment sets are com- puted to fine new pairs of frequent fragment sets without using join operation  4.3 Correlating Concrete Contents with Structures  For node labels obtained after the second phase in sub- section 4.2, we only uses the node label in final frequent sets to min XARs. There are three considerations during this correlating phase. First, we instantiate every symbol \ in the frequent fragment sets with a ?*?. Because the mean- ing of an empty frequent fragment set at depth d is that there is no any other node label satisfying the min sup at depth d, conversely speaking, whatever a node label is, it can be placed at depth d without any restriction.

Second, although all pairs in each frequent fragment set satisfy a min sup, not all of fragments being generated from the sets satisfy the min sup. This stems from the fact that association relationships between keys have to conform the min sup. The support has to be computed at the rela- tionships, called edges, between keys of different frequent fragment sets FS, let (ki, tki) be a pair in [F ]i and (kj , tkj ) pair in [F ]j . Assume that both |tki | and |tkj | are greater than |D| ?minsup. We denote this feasible edge by eij = (ki, kj) where ki is an ancestor of kj by Definition 2. The  0-7695-2674-8/06 $20.00  ? 2006    support of an edge is computed as :  support(eij) = support(ki, kj) = freq((ki, kj),D) (1) = |tki ? tkj | |D|  =  { associated if support(eij) ? min sup, not associated if support(eij) < min sup.

Finally, all of titems satisfying the min sup are generated by incrementally appending edges and hierarchically calcu- lating the supports (in other words, calculating the supports of edges).

Third, we need to compute the confidence of between titems. Then, this confidence is compared with a min conf to mine all the XML association rules that have support and confidence greater than or equal to two user-defined thresh- olds. LetD = {I1, ..., Im} be a set of titems. Assume that I1 = eij = (ki, kj) and I2 = epq = (kp, kq) be titems consisting of 1 edge. The confidence of I1 ? I2 is computed as:  confidence(I2 ? I2) = freq(I1 ? I2,D) freq(I1,D)  = |tki ? tkj ? tkp ? tkq |  |tki ? tkj | (2)  As a result of the Mining, we have Fig.3. All the XML association rules that have support and confidence greater than or equal to two thresholds, which are min sup and min conf , are mined from the both equation (1) and (2).

Following Theorem 1 is derived. We have already proved it in [8].

Theorem 1. Given a set of XML documents D and a collection of frequent fragments sets FS, all of XML association rules conforming to any min conf are mined from the FS  5 Algorithm  Based on Section 4, we have the following algorithm for Cross-filtering algorithm.

Algorithm 1(CF XAR).

Input : D(A Set of Trees), min sup.

Output : FS(Set of all frequent HILoP).

(1)FS ? F ? C ? (2) maxDepth? maxDepth(D) (3) for i? 0 to maxDepth (4) Given D, Make the PairSet[P ] layer by layer.

(5)FS ? CrossFilter([F ],[C],min sup )  (7) return FS  CF XAR is a preprocessing phase. It scans D and simultaneously makes the PairSet[P ] which is defined in Section 4. CFXAR has only one full scan in this phase to make the PairSet[P ] ,hence it takes O(N). Sometimes, it will be necessary changing min sup without changing whole D however this case, the user are not required executing CF XAR() again, instead of that the user may call CrossFilter() with new min sup.

Algorithm 2(CrossFilter).

Input : FrequentPairSet[F ], CandidatePairSet[C], min sup.

Output : FS(Set of all frequent HILoP).

(1) for d:= 0 to depth (2) Separate PairSet[P ]d into [F ]d and [C]d in accor- dance with min sup (3) FS := FS ? [F ]d (4) for d:=1 to depth (5) for each key in key | key ? [C]d?1 ? [F ]d (6) [F ]d.key.tlist := [C]d?1.key.tilst ? [F ]d.key.tlist (7) for l :=d-1 to 0 (8) for each key in key | key ? [C]d ? [F ]l (9) [F ]d.key.tilst := [C]d.key.tlist ? [F ]l.key.tlist (10) find additional (key,tlist) pairs satisfying min sup in ([C]d, [C]d?1) (11) remove the pairs from both [C]d and [C]d?1  (12) [C]d := [C]d?1 ? [C]d (13) return FS Step(1) (3) seperates PairSet into FrequentSet and Candi- dateSet as shown in Figure 2. Step (4) (11) is adjusting phase among keys that have same value but located in different levels. Once a key is determined not to be frequent, the key is pushed to the next level(Step 11). Since the deeper the depth is the more expensive its commotional cost, this algorithm is recommended to be used in appli- cations with limited depth of trees. The remaining job is to make ancestor-descendant or parent-child relationships between keys in Frequent Fragment Set. As mentioned in Section 4.1, we employ hash technique to complete this job. Once the frequent fragment sets FS satisfying min sup are derived from a set of XML documentsD, it is straightforward to generate both simple and complex XML association rules fromFS. There is no any other additional burdensome process to reflect the varying min conf .

6 Evaluation  All the experiments are performed on a 2.4GHz Pentium 4 PC machine with 1GB main memory, running on Mi-  0-7695-2674-8/06 $20.00  ? 2006    ?  ? ?  ? ?  ? ?? ? ? ?  ? ?  ?  ? ?  ?  (a) Final Frequent Fragment Sets  ?  ? ?? ?  (b) An XML Association Rule  Figure 3. Association Rule Mined from D  Figure 4. Running Time  crosoft Windows XP. All the programs are written in JAVA.

The figure 4 shows the running time where the number of trees grows from 100 to 12000, and the min sup are 0.05, 0.01, 0.07 and 0.3 each. The data sets were generated by using the method, tree generator, described in [3]. The para- meters used in the tree generation include number of labels N=100, the parameter of probability ? = 0.2, the maximum depth d=3 , the maximum number of perturbation ? = 25 , and the maximum fan-out of a node in a tree f=5 . Figure 4 and 5 show the results of the simulation. As the minsup in- creases, more time is taken during cross filtering, however, as the minsup exceeds a certain point,in here minsup=0.05, the running time is decreased. As the minsup decreases, the number of frequent trees in the final result is increased, as illustrated figure 5.

Figure 5. Number of frequent nodes  7 Conclusion  This paper focuses on rule detection from a collection of XML documents describing the same type of information.

Hence, each of XML documents corresponds to a database record, and possesses a tree structure. Accordingly, we ex- tend the notion of associated item to an XML tree, and build up associations among trees rather items. Compared to pre- vious works, the work reported in this study aims to provide 1) a data structure model for mining XML association rules, which can deal with associations among both contents and structures of XML data; 2) techniques for the data structure- guided mining of association rules from large XML data; and 3) query language-neutral association rule mining.

A data structure called ?HILoP? and Cross-filtering algo- rithm are introduced. The proposed mechanism can avoid multiple data scan so that the process of mining complex  0-7695-2674-8/06 $20.00  ? 2006    XML association rules is significantly simplified compar- ing to previous approaches. We have been trying to apply this method to practical cases such as Service Discovery in Ubiquitous Environment. Also, our current and future research in this area focuses on adapting Ontology-based mining techniques because XML is semi-structured so that it can describe one thing by different expressions, shortly, we may miss important information(frequent keys).

