Efficiently Mining Top-K High Utility Sequential Patterns

Abstract?High utility sequential pattern mining is an emerg- ing topic in the data mining community. Compared to the clas- sic frequent sequence mining, the utility framework provides more informative and actionable knowledge since the utility of a sequence indicates business value and impact. However, the introduction of ?utility? makes the problem fundamentally different from the frequency-based pattern mining framework and brings about dramatic challenges. Although the existing high utility sequential pattern mining algorithms can discover all the patterns satisfying a given minimum utility, it is often difficult for users to set a proper minimum utility. A too small value may produce thousands of patterns, whereas a too big one may lead to no findings. In this paper, we propose a novel framework called top-k high utility sequential pattern mining to tackle this critical problem. Accordingly, an efficient algorithm, Top-k high Utility Sequence (TUS for short) mining, is designed to identify top-k high utility sequential patterns without minimum utility. In addition, three effective features are introduced to handle the efficiency problem, including two strategies for raising the threshold and one pruning for filtering unpromising items. Our experiments are conducted on both synthetic and real datasets. The results show that TUS incorporating the efficiency-enhanced strategies demonstrates impressive performance without missing any high utility se- quential patterns.

Keywords-High utility sequential pattern mining; Top-K sequential pattern mining

I. INTRODUCTION  Frequent sequential pattern mining [1], as one of the fundamental research topics in data mining, discovers fre- quent subsequences in sequence databases. It is very useful for handling order-based business problems, and has been successfully adopted to various domains and applications such as complex behavior analysis [6] and gene sequence analysis [9], [14], [23]. In the frequency-based framework for typical sequence analysis, the downward closure property (also known as Apriori property) [1] plays a fundamental role in identifying frequent sequential patterns.

However, taking the frequency to measure pattern in- terestingness may be insufficient for selecting actionable sequences associated with expected quality and business impact, because the patterns identified under the frequency (support) framework do not disclose the business value and impact. To solve the above problems, the concept utility is introduced into sequential pattern mining to select sequences of high utility by considering the quality and  value (such as profit) of itemsets. This leads to an emerging area, high utility pattern mining [4], [11]?[13], [18] and high utility sequential pattern mining [2], [3], [17], [22], [24], [25], which selects interesting patterns / sequential patterns based on minimum utility rather than minimum support. The utility-based patterns are proven to be more informative and actionable for decision-making than the frequency-based ones [5]. For instance, in [17], [25], the authors discuss the extraction of profitable behaviors from the mobile commerce environments. [2] proposes methods to mine high utility sequences from web logs by assigning each page an impact/significance. In [22], a USpan algorithm is built for utility-based sequential pattern mining satisfying a predefined minimum utility.

Although algorithms such as USpan can obtain high utility sequences based on a given minimum utility, it is very difficult for users to specify an appropriate minimum utility threshold and to directly obtain the most valuable patterns.

This is because the complexity of utility-based sequence databases (which may be different from the classic itemsets), determining multiple factors including the distribution of the items and utilities, density of the database, lengths of the sequences, and so on. Consequently, it is not surprising that, with a same minimum utility threshold, some datasets may produce millions of patterns while others may contribute nothing. The challenge here is that it may not be doable to tune the threshold to capture the expected number of patterns. This is because the sensitivity of the threshold makes it hard to tune for a variety of databases. It may be very costly and time consuming to achieve the proper threshold for the desired patterns.

In fact, the classic frequency/support based pattern mining also faces the same challenge. Accordingly, the concept of extracting top-k patterns has been proposed in [7], [8], [19], [20] to select the patterns with the highest frequency. In the top-k frequent pattern mining, instead of letting a user specify a threshold, the top-k pattern selection algorithms allow a user to set the number of top-k high frequency patterns to be discovered. This makes it much easier and more intuitive and practical than determining a minimum support; also the determination of k by a user is more straightforward than considering data characteristics, which are often invisible to users, for choosing a proper threshold.

DOI 10.1109/ICDM.2013.148     The easiness for users to determine k does not indicate the simplicity of developing an efficient algorithm for se- lecting top-k high utility sequential patterns. In the utility framework, TKU [21] is the only method for mining top- k high utility itemsets, to the best of our knowledge. No work is reported on mining top-k high utility sequences.

There is significant difference between top-k utility itemset mining and top-k utility sequence mining in which the order between itemsets is considered. In fact, the problem of top- k high utility sequence mining is much more challenging than mining top-k high utility itemsets. First, as with high utility itemset mining, the downward closure property does not hold in the utility-based sequence mining. This means that the existing top-k frequent sequential pattern mining algorithms [19] cannot be directly applied. Second, com- pared to top-k high utility itemset mining [21], utility-based sequence analysis faces the critical combinational explo- sion and computational complexity caused by sequencing between itemsets. This means that the techniques in [21] cannot be directly transferred to top-k high utility sequential pattern mining either. Third, since the minimum utility is not given in advance, the algorithm essentially starts the searching from 0 minimum support. This not only incurs very high computational costs, but also the challenge of how to raise the minimum threshold without missing any top-k high utility sequences.

To address the above challenges, this paper proposes an efficient algorithm to identify Top-k Utility Sequences (TUS). The contributions of this work are as follows.

? We propose a novel framework for extracting the top- k high utility sequential patterns. A baseline algorithm TUSNaive is provided accordingly.

? Three strategies are proposed for effectively raising the thresholds at different stages of the mining process.

? Substantial experiments on both synthetic and real datasets show that the TUS algorithm can efficiently identify top-k high utility sequences from large scale data with large k.

The remainder of the paper is organized as follows.

Section 2 defines the problem of mining top-k high utility sequential patterns. Section 3 details the TUS algorithm.

Experimental results and evaluation are presented in Section 4. Section 5 concludes the work.



II. PROBLEM STATEMENT  Let ? = {?1, ?2, ..., ??} be a set of distinct items. A utility item, or u-item, is an ordered pair (?, ?), where ? ? ? represents an item and ? is a positive number representing the utility of ?, e.g. the profit of ?. A utility itemset, or u- itemset, consists of no less than one u-item, which is denoted and defined as ? = [(??1 , ?1)(??2 , ?2)...(???? , ???)], where (??? , ??) is a u-item for 1 ? ? ? ??, and ??1, ?2, where 1 ? ?1, ?2 ? ?? and ?1 ?= ?2, ???1 ?= ???2 . For brevity, the brackets are omitted if a u-itemset has only one u-item. Since  the items in an itemset can be listed in any order. Without loss of generality, we assume that u-items are listed in the alphabetical order. A utility sequence, or u-sequence, is an ordered list of u-itemsets, which is denoted and defined as ? = ??1?2 ... ???, where ??(1 ? ? ? ?) is a u-itemset.

A u-sequence database ? consists of sets of tuples ????, ??, where ??? is a unique identifier of the u-sequence ?. Readers can refer to [22] for more details.

Table I U-SEQUENCE DATABASE  SID TID Transactions TU SU 1 1 (a,6)(d,8)(e,1) 15  1 2 (b,10)(c,16)(f,2) 28 1 3 (a,12)(d,4) 16 1 4 (a,6)(b,5)(f,3) 14 1 5 (a,21)(d,12)(f,6) 39  2 1 (c,20)(d,4) 24   2 2 (a,3)(b,5)(c,16)(f,5) 29 2 3 (c,8)(d,10)(e,3) 21 2 4 (f,6) 6 2 5 (b,20)(e,1)(f,1) 22 2 6 (a,6)(d,8)(f,1) 15  3 1 (a,18)(c,16)(d,10) 44   3 2 (a,6)(b,5)(f,6) 17 3 3 (d,4) 4 3 4 (b,10)(c,4)(e,5) 19 3 5 (c,4)(d,6)(e,4) 14 3 6 (b,5)(d,2) 7  Definition 1: (Sequence maximum utility) Because a se- quence may have multiple utility values in the u-sequence context, we choose the maximum utility [22] as the se- quence?s utility. The maximum utility of a sequence ? is denoted and defined as ????(?):  ????(?) = ?  max{?(??)??? ? ? ? ?? ? ? ? ? ? ?} (1) For example, the utility of ?(??)?? is {{26, 20, 35, 22,  37}, {34}}. The maximum utility is ????(?(??)??) = 37+ 34 = 71. For brevity, we use sequence utility to represent the maximum utility of a sequence, i.e., ????, for the rest of the paper.

Definition 2: (Top-k high utility sequential patterns) A sequence ? is called a top-k high utility sequence if there are less than k sequences whose utilities are no less than ????(?). The optimal minimum utility is denoted and defined as ?? = ???{????(?)?? ? ? }, where ? means the set of top-k high utility sequences. Given a u-sequence database ? and a number ?, the problem of finding the complete set of top-k high utility sequential patterns in ? is to discover all the itemsets whose utilities are no less than ?? in ?.

Example 1: Suppose the desired k number of high utility sequences is set to 7, the top 7 high utility sequences in Table I are shown in Table II. The optimal minimum utility thresh- old ?? = ???{151, 152, 152, 156, 156, 159, 163} = 151. If k is set to 3, then only sequences ??(???)?(??)(???)? and ??(???)??(???)? are obtained, and ?? = 159. The reason of     excluding ??(??)?(??)(???)? and ??(???)?(??)(??)? is to control the number of the candidates no more than k = 3.

Table II TOP 7 HIGH UTILITY SEQUENCES IN TABLE I  ID Top-k high utility SU  1 ??(???)?(??)(???)? 163 2 ??(???)??(???)? 159 3 ??(??)?(??)(???)? 156 4 ??(???)?(??)(??)? 156 5 ??(??)??(???)? 152 6 ??(???)??(??)? 152 7 ?(???)?(??)(???)? 151

III. THE TUS ALGORITHM  In the previous section, we define the top-k high utility sequential pattern mining framework. In this section, we specify and present an efficient algorithm, TUS, for mining top-k high utility sequential patterns. Firstly, we present a baseline approach named TUSNaive. Then we present a tight utility boundary for sequences, which substantially reduces the search space. In the end, we provide a very efficient pre-insertion strategy, which effectively raises the minimum utility threshold.

A. TUSNaive: The Baseline Algorithm  Here we present a baseline algorithm called TUSNaive to extract the top-k sequences with the highest utilities.

Instead of using a user specified minimum utility, TUSNaive engages a structure named TUSList to maintain the top-k high utility sequences on-the-fly.

TUSList is a fixed-size sorted list which is used to main- tain the top-k high utility sequential patterns dynamically, and a minimum utility ? of it is set to prune the unpromising candidates in the mining process. The mechanism can be briefed as follows. Initially, the TUSList is empty and ? is set to 0. In this stage, whenever a candidate sequence comes, it will be inserted into TUSList, and ? stays on 0. Once the k candidates are found, ? is raised to the utility of the last candidate (i.e. the least utility canidate) in TUSList. After that, a candidate satisfying ? is inserted into TUSList, then the least utility candidate(s) will be eliminated. ? is thereafter raised to utility of the updated last candidate. The process continues until no candidate matches ?, and those remain in the TUSList are the target patterns. The pseudo code of TUSNaive is shown in Algorithm 1.

B. Pre-insertion  Although TUSNaive correctly extracts the top-k high utility sequences, it traverses too many invalid sequence candidates since the minimum threshold starts from 0. This directly degrades the performance of the mining task. To overcome this problem, we further propose three effective strategies, i.e., two for raising the minimum utility threshold  Algorithm 1: TUSNaive(?,?) 1 Scan ? for items to be concatenated to ?; 2 for Each of the items do 3 Let ? be the item, ?? = ?+ ? and ?? = ?(??); 4 if ?(??) > TUSList.? then 5 ?? ? TUSList; 6 TUSNaive(??,? ?); 7 return TUSList;  and one for reducing the search space, to improve the performance. We start from the pre-insertion strategy.

Strategy 1: (Pre-insertion) The pre-insertion strategy in- serts the utilities of both the 1-sequences and u-sequences to the TUSList before the mining process.

The pre-insertion is an effective strategy for rasing the minimum utility in TUSList. After the raw sequences are successfully stored in the memory, it needs to calculate the utility of each sequence. In this phase, we use a hash table to record the maximum utility of every distinct item in the sequences. For example, in Table I, the maximum utility of ? in ?1 is the utility of ?5, i.e. 21. The other maximum utilities are {? : 10, ? : 16, ? : 12, ? : 1, ? : 6}. After ?1 is finished, ?1 itself will be inserted into the TUSList, and labeled as a u-sequence. The purpose is to prevent the sequence from being double-inserted, otherwise it will miss truly top-k high utility sequences. Similarly, after ?2 and ?3 are scanned, the 1-sequences will be calculated and added to the hash table, and both ?2 and ?3 will be inserted into the TUSList.

After the sequences are scanned, the hash table is {a:45, b:40, c:52, d:32, e:9, f:18}. All of the items are actually 1-sequences, they are all inserted into the TUSList. With the three u-sequences and their utilities, the utilities in the TUSList is {117, 112, 105, 52, 45, 40, 32}, and the minimum utility ? = 32 after pre-insertion.

As seen from the example, the pre-insertion strategy ef- fectively raises the minimum threshold to a reasonable level before mining, and prevents from generating unpromising candidates.

C. Sorting concatenation order  The sorting concatenation order strategy is applied in the main mining process. It effectively identifies potential high utility sequences, and the utilities can be calculated and inserted into TUSList prior to those low utility sequences. As a result, the minimum utility ? quickly raises to ?? without traversing too many invalid candidates, and the efficiency is therefore substantially improved. Now we discuss the method in details.

The term concatenation means an item is appended to a k-sequence to obtain a (k+1)-sequence. There are two types of concatenations: I-Concatenation and S-Concatenation. S- Concatenation means an item is appended as a 1-itemset     <>  <a> <f><e><d><c><b>  <aa> <ba> <(bc)> <cb> <ea><(ce)> <db> <ff>  I-Concatenation S-Concatenation <dbaaa>  <(bcf)d><aa(df)> <d(bc)d> <d(bcf)> <dbaa> <e(adf)>  <aad> <(bcf)> <d(bc)> <dba> <eaa> <e(ad)>  Figure 1. The concatenations for the examples in Table I  to the sequence, while I-Concatenation means an item is added to the last itemset of the sequence. For example, ? S- Concatenates to ??? result in ????, and the I-Concatenation leads to ?(??)?. More examples are in Figure 1.

A sequential pattern mining algorithm usually follows a pattern-growth method to mine the expected sequences.

The proposed TUS and TUSNaive algorithm, as mentioned above, are in this class. For example, in Figure 1, one of the searching paths is ?? ? ??? ? ???? ? ????? ? ... Once this path is over, it will recursively search the other branches until no more candidates left.

Suppose we are standing on the root ??. We have 6 different ways, that is ? to ? , to choose to continue the mining process. Which one should we concatenate to the root first? Once the first candidate and its offsprings are finished checking, what order should be applied to the oth- ers? Does it make difference? In threshold-based high utility sequence mining, there is no such concerns. Because the minimum utility ? is a fixed number from the beginning to the end. It means that whatever order is used, the candidates they checked are always the same. However, in the top-k framework, the order of concatenating items does matter.

Since ? is dependent on the candidate inside the TUSList, we should put the high utility candidates to TUSList as soon as possible so that ? increases to ?? shortly. Now we present a few definitions to illustrate the concepts.

Definition 3: (Ending u-item and pivot) Suppose that all the (u-)items in the (u-)sequences are listed alphabetically.

Let ? = ??1?2...??? be a u-sequence, ? = ??1?2...??? be a sequence and ? ? ?. Assume that ?? = ???1 ??2 ...????, where ??? = [(??1 , ??1)(??2 , ??2)...(??? , ??? )], ?? ? ? and ?? ? ?.

(??? , ??? ) is called the ending u-item of ? in ?. Additionally, (??? , ??? ) is called pivot or projection point iff there is no ?? = ???1 ??2 ...???? where ?? ? ? and ?? ? ? such that ?? < ??.

For example, the ending u-items of ?(??)?? in ?1 are ?3, ?4 and ?5, where the pivot is ?3. For ??(??)? in ?1, the  ending u-items are ?2 and ?4.

Definition 4: (Ending u-item maximum utility) The end-  ing u-item maximum utility is denoted and defined as  ?(?, ?, ?) = ???{?(??)??? ? ? ? ?? ? ? ? ? ? ??} (2) where ? is a sequence, ? is a u-sequence, ? is an ending u-item of ? in ?. Specifically, we use ??(?, ?) to denote the pivot maximum utility, i.e.

??(?, ?) = ?(?, ??, ?) (3)  where ?? is the pivot.

For example, ?(?(??)??, ?3, ?1) = ???(26) =  26, ?(?(??)??, ?4, ?1) = ???(20, 22) = 22 and ?(?(??)??, ?5, ?1) = ???(35, 37) = 37. Obviously, the ending u-item utility of a sequence is a subset of the utility of itself. The pivot maximum utility of ?(??)?? is ??(?(??)??, ?1) = ?(?(??)??, ?3, ?1) = 26.

Definition 5: (Sequence-Projected Utilization) The Sequence-Projected Utilization (SPU) of a sequence ? in ? is denoted and defined as ???(?)  ???(?) = ?  ??????? (?????(?, ?) + ??(?, ?)), (4)  where ? is the pivot of ? in ?, and  ?????(?, ?) = ?  ????????? ?(??) (5)  ????? means the sum of the utilities of the u-items after the pivot (exclusive). For example, ?????(?5, ?1) = ?(?, 12) + ?(?, 6) = 12 + 6 = 18 and ?????(?5, ?1) = 0. The meaning of ??? is the pivot utility plus the rest u-sequence utility.

For example, ???(???, ?1) = ??(???, ?1)+?????(?1, ?1) = 6+106 = 112. Similarly, ???(???, ?2) = 3+90 = 93 and ???(???, ?3) = 18 + 87 = 105. Therefore, ???(???) = 112 + 93 + 105 = 310.

Definition 6: (Item concatenation order) Given a se- quence ? and two items ?, ?. Let ?? and ?? be the sequences of ? and ? concatenated to ? respectively, where ?? ?= ??. We say ? is prior to ?, denoted as ? ? ?, if either of following conditions is true:  ? ???(??) > ???(??), or ? ???(??) = ???(??) and  i) ?? is I-Concatenated from ?, and ?? is S-Concatena- ted from ?, or  ii) both ?? and ?? are I-Concatenated or S-Concatena- ted from ?, but ? is alphabetically smaller than ?.

Generally, ?? ? means that the utilities of ???s offspring candidates are likely higher than that of ??. Taking ???? in Figure ?? as an example, in u-sequence 1, items ?, ? and ? can be I-Concatenated to ????, and the ???s are 17, 22 and 15 respectively. Obviously, ? ? ? ? ? holds in u-sequence 1. It also reveals the fact that ?3 ? ?4 ? ?4.

The S-Concatenation is also in the situation. For example,     since ?4 ? ?4 ? ?4 ? ?5, we can easily tell ? ? ? ? ? ? ? without calculating. Basically, in a single u-sequence, ? ? ? means that ? has more remaining utility than ?, so ? should be concatenated earlier than ?. Back to the database, although ???(??) > ???(??) may not mean ? ? ? in all u-sequences, it reflects that ?? projected less utility than ?? in the database. When ???(??) = ???(??), we apply the normal sequential pattern growth rules. In our experience, there is nearly no chance for two concatenation items have the same ??? . In most of time, ???(??) is either higher or lower than ???(??). Based on Definition 6, we present the strategy below.

Strategy 2: (Sorting concatenation order) Given a se- quence ?, and the items can be concatenated to ? are ?1, ?2, ..., ??. Then ??1 , ??2 , ..., ??? is the order to be con- catenated to ?, where ??1 ? ??2 ? ...? ??? .

For example, assume ? = ???. Items ?, ?, ?, ?, ? are able to I-Concatenate to ???, and the ???s of ?(??)?, ?(??)?, ?(??)?, ?(??)? and ?(??)? are 192, 172, 186, 98 and 161 respectively. Similarly, ? to ? can be S-Concatenated to ???, and the corresponding ???s are 145, 189, 181, 157, 72 and 164. Therefore, the items concatenation order for ??? is ?? ? ?? ? ?? ? ?? ? ?? ? ?? ? ?? ? ?? ? ?? ? ??. 1  D. Sequence-Reduced Utility  In this part, we provide a tighter sequence boundary and a novel pruning strategy. The following example illustrates the problem.

Definition 7: (Sequence-Reduced Utilization) Let ? = {?1, ?2, ..., ??} be a set of distinct items, and ?,? ? ? , where ? is named as blacklist and ? is named as whitelist, and ? ? ? = ?, ? ? ? = ?. Given a sequence ?, a u- sequence ? = ??1?2...???. Suppose ? ? ?, let ?? be the pivot of ? in ? and ?? ? ??, where 1 ? ? ? ?. The SRU(Sequence- Reduced Utilization) of a sequence ? in ? is denoted and defined as ???(?, ?)  ???(?, ?) =??(?, ?) + ?  ??????????? ?(??)  +  ??  ?=?+1  ?  ?????????? ?(??)  Given an item ?, the ??? of ? in ??s projection database is denoted and defined as  ???(?, ?) = ?  {???(?, ?)??? ? ? ? ?? ? ?? ? ? ? ?} (6) Item ? ? ? if and only if ???(?, ?) ? ?.

Strategy 3: Keep refreshing the blacklist, until all the items in the whitelist satisfy ???(?, ?) ? ?.



IV. EXPERIMENTS  In this section, we evaluate the performance of TUS on a variety of datasets. Since there is no algorithm can solve  1?? and ?? means I-Concatenation and S-Concatenation respectively, similar to the others.

Table III CHARACTERISTICS OF THE SYNTHETIC DATASETS  Characteristics DS1 [1] DS2 [1]  Average itemset per sequence ? 10 8 Average items per itemset ? 2.5 2.5 Average itemsets in maximum sequences ? 10 6 Average items in maximum sequences ? 2.5 2.5 Number of sequences ? 100k 10k Number of different items ? 1k 10k  the top-k high utility sequence mining, and it is not easy to upgrade the existing method such as [21] either, we thus compare TUS with TUSNaive, which is a baseline approach without pre-insertion, sorting and SRU as described in Section III-B, III-C and III-D respectively. TUSNaive with different strategies are also compared.

We conduct experiments on 2 synthetic (DS1 and DS2, which are generated as [1] using the settings in Table III) and 2 real datasets (DS3 [26] and DS4 [27]) to compare the efficiency of TUS with TUSNaive, in terms of computational costs on different data sizes and data characteristics. To make the top-k and threshold based approaches comparable, we run top-k approaches first. After getting the utility of the k-th pattern, that is the optimal minimum utility in Definition 2, we use this value as the minimum threshold for running the threshold-based methods. The TUS algorithm is implemented in C++ of Microsoft Visual Studio 2010.

All experiments are conducted on a virtual machine in a server with Intel Xeon CPU of 3.10GHz, 8GB memory and Windows 8 system.

0 2000 4000 6000 8000 10000      Ti m e( Se c.

)  K  Tus TusNaive TusNaive+ TusNaive+I TusNaive+S  (a) DS1  0 1000 2000 3000 4000 5000     Ti m e( Se c.

)  K  Tus TusNaive TusNaive+ TusNaive+I TusNaive+S  (b) DS2  0 200 400 600 800 1000      Ti m e( Se c.

)  K  Tus TusNaive TusNaive+ TusNaive+I TusNaive+S  (c) DS3  0 2000 4000 6000 8000 10000      Ti m e( Se c.

)  K  Tus TusNaive TusNaive+ TusNaive+I TusNaive+S  (d) DS4  Figure 2. Execution Time of Different Stategies     We conduct experiments to evaluate the performance of TUS, in terms of computational costs, on datasets DS1 to DS4. Different strategies were compared to show their corresponding performance on the datasets as well. In Figure 2, TUSNaive+ refers to TUNaive with SRU; TUSNaive+I refers to TUNaive with SRU and pre-insertion; TUSNaive+S refers to TUNaive with SRU and sorting.

The results show that TUS is generally 10 - 1000+ times faster than TUSNaive. For DS4 TUSNaive cannot finish the mining with a very small k (with k = 20) in 24+ hours.

Besides, the gap between TUS and TUSNaive increases with the increase of k. The results also show that TUS, TUSNaive+I and TUSNaive+S are generally faster than TUSNaive+ from Figure 2. That indicates the proposed three optimization measures, including ??? , sorting and pre- insertion, are effective for top-k pattern mining.

Generally, TUSNaive+I is faster than TUSNaive+S when k is small. After k exceeds a certain number, TUSNaive+S outperforms TUSNaive+I. For example, k = 1000 in Figure 2(a), Figure 2(d), k = 2000 in Figure 2(b), k = 20 in Figure 2(c). This is because TUSNaive+S starts the mining from 0 while TUSNaive+I does not, pre-insertion directly prunes unpromising branches than the sorting strategy. The sorting strategy always traverses the higher estimated utility candidates first. This guarantees ? raising to ?? shortly, while TUSNaive+I does not. So when k is large, sorting is better than pre-insertion.



V. CONCLUSIONS  In this paper, we have proposed an efficient algorithm named TUS for mining top-k high utility sequential patterns from utility-based sequence databases. TUS guarantees there is no sequence missed during the mining process. We have developed a new sequence boundary and a corresponding pruning strategy for effectively filtering the unpromising candidates. Moreover, a pre-insertion and a sorting strategy has been introduced to raise the minimum utility threshold.

The mining performance is enhanced significantly since both the search space and the number of candidates are effectively reduced by the proposed strategies. Both synthetic and real datasets have been used to evaluate the performance of TUS, which is shown to substantially outperform the baseline algorithms, and the performance of TUS is close to the optimal case of the state-of-the-art utility sequential pattern mining algorithms.

