A Web-based Database Management System Supporting Parallel Data Mining Service on PC Clusters

Abstract  In this study, we develop a database management system which provides users with on-line web services to build and manage their databases and perform parallel data mining on Internet. We exploit two different programming toolkits, i.e., MPI and DSM to parallelize association rules on PC clusters in order to minimize response time. In addition, we have evaluated the performance of these two programming toolkits on parallelization of data association mining.

Our experimental results show that both of MPI and DSM are effective for parallel data association mining while MPI provides a 30~45% performance improvement than DSM.

Keywords: web services, association rule, MPI, DSM, PC clusters  1. Introduction  In past decades, databases have been used for business, scientific and engineering data management as well as many other applications. Due to rapid speed of data generation on Internet, the huge amount of accumulated data has made the discovery of valuable information much more difficult than ever. Therefore, a technique or tool that can automatically and intelligently extract useful knowledge and information from database is needed in emergency. Data mining technique was therefore developed in order to respond to this urgent need.

Data mining [1][2][3][4] is a process of extracting implicit and potentially useful information hidden in data based on the theory of probability and statistics.

The discovered information can be applied for decision making, machine learning, process control and many other applications. Consequently, data mining have received a lot of attention and investigation from researchers in different field.

However, the process of data mining usually requires an enormous amount of data computation. The amount of data computation is exponentially increased by the size of data items. Some of the data mining applications required on-line decision making process which has time constraints. This means the extracted information may lose its value or become useless if the execution time of data mining is too long. Therefore, minimization of computation cost is an important issue for data mining. One solution of attacking this problem is to parallelize the process these data.

The easiest mean of parallel processing is to use shared memory multiprocessor (SMP) machines. Many past researches [5][6][7] have successfully parallelized the algorithms of data mining on a SMP machine using the multithreaded programming toolkits. However, the processor scalability of SMP machines is not ideal.

Consequently, a SMP machine can not provide enough computational power for the need of data mining in huge databases. A huge-scale SMP machine is usually quite expensive and most people or companines cannot afford to buy such SMP machines. Fortunately, a new technique called cluster computing [8] is recently proposed for massive data computation. A computational cluster is to connect PCs, workstations, and SMP machines via computer networks to form a unified system for users to exploit network resources for resolving their problems. Such a distributed execution environment is more scalable and available than a huge-scale SMP machine. Most importantly, with the support of cluster computing, users can obtain as many computational resources as he/she needed through the network with a much lower cost.

As previously discussed, the aim of this study is to integrate the technique of data mining and cluster computing to build a WWW server system which provides on-line database management and parallel data mining services. To minimize the computation cost of data mining, we make use of two different programming interfaces, namely message passing  0-7695-2616-0/06 $20.00  ? 2006    interface (MPI) [9] and distributed shared memory (DSM) [10] to parallelize association rules on a PC clusters. We evaluate the performance and found that the proposed database management system can indeed provide a fast web service of on-line data mining. In addition, we found that the performance of MPI is 30~45% better than DSM for data mining algorithms.

The rest of this paper is organized as follows.

Section 2 is the related work. Section 3 provides the framework of the proposed database management system. Section 4 discusses the result of performance evaluation. Finally, Section 5 gives a short conclusion of this paper and our future work.

2. Related work  There are three different algorithms proposed for parallel association rule mining in the past [8]. They are count distribution, data distribution and candidate distribution algorithms. The count-distribution algorithm is to partition transaction data into N different nodes for parallel estimating the support values of candidate items, as shown in Figure 1.

Namely, the main node distributes the same amount of transaction data to the other nodes, and then accumulates the support values estimated by each node for each candidate item. According to the accumulated result, the main node gets rid of candidate items whose support values are not larger than a threshold set by users, and combines the other candidate items to create new candidate items. After the probing step, the support values of the new candidate items are estimated by the same process. This process will be stopped until the size of candidate items reaches to that required by users. Unlike the count distribution, the data-distribution algorithm did not partition candidate items but the transaction data into N nodes for parallel estimation of support values, as shown in Figure 2. In this algorithm, each node must reference all the transaction data when it evaluated the support value of each candidate item. Candidate-distribution algorithm is the combination of count distribution and data distribution which  partition not only transaction data but also candidate items.

In this study, we use the count distribution algorithm rather than data distribution or candidate distribution. The main reason is that it is easier to be implemented than the candidate distribution algorithm, and requires less memory resource and disk I/O cost than the data-distribution algorithm.

Figure 1. Count Distribution  Figure 2. Data Distribution  3. System framework  The framework of our web-based database management systems developed in this study is shown in Figure 3. There are three components in this system framework. The client, server and computational cluster. The client provides users with a friendly interface based on browsers to build and mange databases, and mine the information hidden in datasets of these databases. The server provides the services of managing databases and parallel data mining. In other words, the commands issued by users in the client interface are physically served by the server. In contrast, the computational cluster is responsible for supporting parallel data mining. When users issue requests of data mining services, the server will invoke the parallel data-mining programs developed in this study, and distribute these programs onto the execution nodes of the computational for parallel execution.

Users can watch the results of data mining or executing SQL commands through the client browser.

In the current implementation, we use the PHP programming toolkit and MySQL to build the database management system. In addition, we exploit two different programming toolkits, i.e., MPICH [11] and Teamster [12] for the implementation of the parallel association mining algorithm. MPICH provides the message passing interface while Teamster supports the  0-7695-2616-0/06 $20.00  ? 2006    shared memory interface. We intend to compare the effectiveness of MPI and DSM on the parallelization of association mining.

Figure 3. System Framework  4. Performance  We have evaluated the performance of the parallel association mining programs implemented by MPI and DSM, respectively. We used two different databases for performance evaluation. There are 60,000 transaction data in both of the two databases. However, the numbers of items of each transaction data in the two databases are 15 and 20. In order to create the most amount of computation, the items in all of the transaction data are set to be the same on purpose. In addition, we organized a computation cluster of 8 PCs for this performance evaluation. Each one of these PCs had a 3.0 GHz Pentium IV processor and 1GMB memory. These machines are connected by a 1 Gbps fast Ethernet.

Table 1 and 2 are the execution time of two different parallel association-mining programs which are implemented by MPI and DSM, respectively.

Figure 4 and Figure 5 shows that the speed up of the two different programs in the cases of 2, 4 and 8 nodes that are used for the execution of the programs. The experimental results show that the performance of the MPI program is better the than the DSM program. The main reason is that the communication cost of the MPI program is less than that of the DSM program. In other words, one node in a DSM system may propagate its updates on the shared data pages because of false sharing to another one which does not need the updates while this situation never happens in the MPI program.

Moreover, the performance gap between the MPI program and the DSM program becomes more obvious when the number of items in each transaction data is changed from 15 to 20.

Table 1. Execution Time of 15-itemset Items=15 N=1 N=2 N=4 N=8 MPI execution time 136.3689918 66.532673 34.739019 18.043704 DSM execution time 134.6879335 113.0272925 57.8080075 28.85682575 MPI speedup 1 1.9823764 3.75161062 7.630443437 DSM speedup 1 1.191640802 2.329918282 4.667454926  Table 2. Execution Time of 20-itemset Items=20 N=1 N=2 N=4 N=8 MPI execution time 5812.931568 2932.304667 1548.809516 761.8078315 DSM execution time 5742.746632 4636.147504 2296.183319 1128.990963 MPI speedup 1 1.9823764 3.753160162 7.630443437 DSM speedup 1 1.23868937 2.500996582 5.08661877  Number of PC Cluster  Sp ee  du p  Figure 4. Speedup of 15-itemset  Number of PC Cluster  Sp ee  du p  Figure 5. Speedup of 20-itemset  5. Conclusions  In the study, we have successfully developed a web-based management system for users to create and manage their databases, and to mine valuable information from the databases on Internet. In addition, we exploit both of DSM and MPI programming toolkits to implement the parallel association-rule algorithm on a PC cluster in order for minimizing the execution time of data-mining. Our experimental results show that performance of MPI is 35~40% better for association mining than DSM.

Recently, grid computing [13][14] has been a successful alternative in the field of  high-performance computing. A computational grid provides a unified form for users to access different types of geographically-distributed resources to resolve their  0-7695-2616-0/06 $20.00  ? 2006    programs. Compared to cluster computing, grid computing provides more transparency for users, and make resource providers keep their autonomy on resources. As a result, we will put our attention on the study of applying the technique of grid computing to data mining in the future.

