2377-3782 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

Abstract?The development of cloud computing pours great vitality into traditional wireless sensor networks (WSNs). The integration of WSNs and cloud computing has received a lot of attention from both academia and industry. However, collecting data from WSNs to cloud is not sustainable. Due to the weak communication ability of WSNs, uploading big sensed data to the cloud within the limited time becomes a bottleneck. Moreover, the limited power of sensor usually results in a short lifetime of WSNs. To solve these problems, we propose to use multiple mobile sinks (MSs) to help with data collection. We formulate a new problem which focuses on collecting data from WSNs to cloud within a limited time and this problem is proved to be NP-hard. To reduce the delivery latency caused by unreasonable task allocation, a time adaptive schedule algorithm (TASA) for data collection via multiple MSs is designed, with several provable properties. In TASA, a non-overlapping and adjustable trajectory is projected for each MS. In addition, a minimum cost spanning tree (MST) based routing method is designed to save the transmission cost. We conduct extensive simulations to evaluate the performance of the proposed algorithm. The results show that the TASA can collect the data from WSNs to Cloud within the limited latency and optimize the energy consumption, which makes the sensor-cloud sustainable.

Index Terms?sensor-cloud, mobile sinks, data delivery, energy consumption, sustainability.

F  1 INTRODUCTION  NOWADAYS, the WSNs have been applied in variousareas, such as civilian, industry and military (e.g., health monitoring [1], forest fire detection [2], target tracking [3], battlefield surveillance [4], etc.). Sensors in these appli- cations perform diverse functionalities, including data sens- ing, data acquisition, network security maintenance, and seamlessly monitoring the flow in the network. However, the WSNs are faced with two challenges. On the one hand, the sensors in WSNs are limited in battery and storage ability, which makes it difficult for sensors to be sustainable [5]. On the other hand, the sensors frequently produce intensive data which need to be collected and processed efficiently within a specific time. It is also a challenge for WSNs.

Fortunately, cloud computing technology can be devel- oped to work as a strong backbone for WSNs [6], [7], [8].

With the cloud computing paradigm adopted in WSNs, the performance of WSNs can be improved, such as energy consumption, computing latency, service quality, etc [9]. The birth of sensor-cloud integration is an inevitable trend [10], [11]. In the sensor-cloud integration, users do not need to own sensors. They can simply rent the sensing services.

This mechanism significantly reduces the cost of ownership and enables the usage of large scale sensor networks to become affordable. Beyond that, one physical sensor can be projected as multiple services, which improves the ef- ficiency of sensor usage. The nature of sensor-cloud enables  ? T. Wang is with the Department of Computer Science and Technology, Huaqiao University, Xiamen, Fujian, China; 361021.

? Y. Li is with Huaqiao University.

? G. J. Wang is with Guangzhou University (corresponding author). E-mail:  csgjwang@gmail.com ? J. N. Cao is with Hong Kong Polytechnic University.

? M. Z. A. Bhuiyan is with Fordham University.

? W. J. Jia is with Shanghai Jiaotong University.

resource sharing. Taking the remote health care application for instance [12], patient health data is collected at remote locations by using the health kits. The health records along with patients? basic information are transmitted to cloud in a timely manner, so that the doctor can give a diagnosis to patient remotely based on health records with the help of cloud. This kind of application improves quality of life for people who live in the poor living conditions.

However, due to the weak transmission ability of WSNs, collecting the sensed data from WSNs to cloud within a limited time becomes a bottleneck [13], [14]. Note that the data collection time is important for some delay-sensitive applications. In the location-based application, if the user?s position cannot be uploaded to cloud on time, the location- based service will become failure. For example, in forest fire monitoring application, a large number of dispersed sen- sors are deployed to continuously monitor the temperature, humidity and gases of forest. As shown in the Figure 1, when the sum of data collection time (CT) and feedback time (FT) is bigger than optimal rescue time, the best rescue time would be missed. The exceeding time (ET) need to be eliminated. Therefore, it is necessary to design a scheme for data collection to improve the throughput of WSNs in sensor-cloud integration.

On the other hand, various mobile elements, such as mobile sensor, mobile agent (MA), mobile sink (MS), have been deployed to collect data in WSNs in recent works [15], [16], [17]. Sensors transmit data to mobile elements directly or through less hops wireless transmission to save energy.

For example, in [17], the MA is used to help with forest fire detection. Compared with MA, mobile sink can move to collect data and upload data to cloud directly. Therefore, we use multiple mobile sinks to help with data collection in this paper. For one thing, the MSs have a stronger transmission ability to supplement the communication bot-    2377-3782 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TSUSC.2017.2690301, IEEE Transactions on Sustainable Computing   ORT CT ETFT  Fig. 1: The influence on forest fire detection brought by delivery delay. When the sum between data collection time (CT) and feedback time (FT) is bigger than optimal rescue time (ORT), the ORT would be missed.

tleneck of WSNs. For another thing, the MSs contribute to balance the forward load of each sensor, which improves the dependability and prolong the lifetime of WSNs. However, due to the limited velocity of mobile sinks, they usually cost lots of time to tour a large sensing field, which extends the data collection time [18].

In this paper, we propose to use MSs helping with data collection in sensor-cloud integration. A time adaptive schedule algorithm TASA is designed to reduce data collec- tion time and make system sustainable. In the TASA, the monitoring area is divided into several sectors equally and each MS is responsible for one sector. In each sector, part of sensors are selected as polling points which construct the trajectories of MSs and all the trajectories are non- overlapping with each other. Besides, the MST is adopted to design transmission route for sensors to save energy con- sumption. Beyond that, we design two progressive schedule schemes to adjust data collection time and save energy. One focuses on reducing MS?s moving time and the other aims at balancing load of each MS. The main contributions of this paper are summarized as follows:  1. Compared with traditional data collection problem in WSNs, the problem of data collection in sensor-cloud integration is more complex. We propose delay constrain problem caused by limited transmission ability of WSNs in sensor-cloud integration.

2. We use multiple MSs to improve the sustainability of sensor-cloud and design a time adaptive algorithm aiming at collecting data from WSNs to Cloud within a specific time, with several provable properties. Beyond that, the en- ergy consumption of sensors is optimized based on property of MST.

3. We conduct extensive simulation experiments to eval- uate the performance of the proposed algorithm and the ex- perimental results validate the effectiveness of our proposed algorithm.

The remainder of this paper is organized as follows: Section 2 reviews research related to the work presented herein. Section 3 discusses modeling of our study. The design details for our proposed time adaptive schedule al- gorithm (TASA) is described in section 4. Section 5 presents the analysis of our proposed algorithm. Section 6 shows simulation results, and the last section concludes our work.

2 RELATED WORK  The proliferation of the implementation for low-cost, low- latency, multiple functional sensors has made WSNs a prominent paradigm to monitor the physical world. When the wireless sensor network is deployed, it had been found that there are a mass of data need to be collected. In the traditional WSNs, sensors transmit data to the static sink through multiple hops wireless communication [19], [20].

However, due to vast data transmission work, the sensors that close to the static sink representatively deplete their energy. With the increase of disable nodes, the network connectivity and coverage rate will decrease. In [21], Wu et al. designed energy efficient protocols that sensors con- sume different energy in different radio states (transmitting, receiving, listening, sleeping, and being idle). They proved that the proposed method considerably reduces energy consumption. In [22], Wang et al. presented an adaptive data gathering scheme by compressive sensing times for wireless sensor networks. They introduced autoregressive (AR) model into the reconstruction of the sensed data. Their extensive test of real data sets and experimental results validate the efficiency and efficacy of the proposed scheme.

Although, both two methods reduced energy consumption to some extent, they did not change the model that the sensors which close to sink exhaust energy firstly and lead a short lifetime of WSNs.

With the development of WSNs, the usage of mobile elements are proposed in recent years [23], [24], [25]. Sensors transmit data to mobile elements directly or through less hops wireless transmission, thus sensors can save energy and WSNs achieve a longer lifetime. Two typical mobile elements, mobile agent (MA) and mobile sink, are applied continually. Mobile agent is the device moving to collect sensing data and returning to sink [26], [27], [28]. For example, in [17], the MA is used to help with forest fire detection. The paper introduces a framework equipped with MAs to accelerate detection rate of forest fire with the min- imum consumption of energy. Compared with MA, mobile sink can also move to collect sensed data but not need to return to station because it is equipped with the ability of uploading data to cloud, which reduces data collection time. In [29], Tunc C et al. proposed Ring Routing, a novel, distributed, energy efficient mobile sink routing protocol, suitable for time-sensitive applications, which make use of mobile sink to provide load-balanced data delivery and achieve uniform energy consumption across the network.

In [30], Arquam M et al. proposed a routing algorithm with sink mobility in hierarchical WSNs to improve net- work lifetime by eliminating energy holes. They considered upper and lower bound on delay while optimizing sojourn locations and sojourn time. In [31], Hou G et al. designed an efficient path algorithm VG-AFSA based on Virtual Grids to meet most applications? requirements for data latency.

They divided nodes into groups with virtual grids to scale down the space of searching optimal set of visited nodes.

Their results showed that the algorithm performing well energy effectiveness. However, these researches main focus on the energy efficient problem and ignore the delivery latency. Some researches even sacrifice the delivery time to save energy. On the other hand, these solutions are based    2377-3782 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TSUSC.2017.2690301, IEEE Transactions on Sustainable Computing   on single mobile sink neglecting the limited throughput of WSNs, which are not applicable for the networks with large number of sensors and stringent time constrain.

In order to address these problems, methods with multi- ple mobile sinks are designed, which focuses on the issue of multiple mobile sink scheduling to realize limited delay and longer lifetime of large WSNs [32], [33], [34]. For example, in [32], Yi Fan Hu et al. designed an efficient routing re- covery protocol with endocrine cooperative particle swarm optimization algorithm (ECPSOA) to establish and optimize the alternative path, which improved the routing protocol robustness and efficiently. Meanwhile, the method reduced the communication overhead and the energy consumption.

In [35], Di Francesco M et al. used multiple mobile sinks to assist in data collection. Their results showed that the method can increase the network connectivity and reliabil- ity, reduce cost, and decrease energy consumption of indi- vidual nodes. Both two papers mainly prolong the network lifetime regardless of the delay constrain. How to balance the network lifetime and transmission delay becomes a key problem. To get the maximum benefit with the minimum cost, it is essential to design a schedule scheme for multiple mobile sinks to collect data in an efficient manner. In [36], Wichmann et al. focused on using faster mobile sinks to reduce the physical collection delay. However, such mobile sinks are often motion-constrained and require smooth path which cannot fits all kinds of application. Moreover, current methods merely consider the data collection from sensors to sink and cannot be applied to the sensor-cloud environment [37]. To the best of our knowledge, we are the first one to consider both delivery delay and energy consumption in sensor-cloud integration [38]. However, our former paper did not deal with the problem that the number of sensor in each sector may be different. In this paper, the algorithm is improved with an additive schedule scheme. No matter the initial number of sensors in each sector, if one of MSs cannot meet the time requirement, some sensors in this sector will change their routes to reduce the load of MS. This method increases the throughput of sensor-cloud integration as well.

3 PROBLEM DEFINITIONS AND MODELS 3.1 Problem Definitions In this paper, we assume the WSN consists of N sen- sors, denoted by a set S = {S1, S2, ..., SN}. The set K = {MS1,MS2, ...,MSM} represents M mobile sinks (MSs). For any Si ? S, the sensing data rate is C bytes/s, the single hop latency is t s and the communication radius is R m.

Any MSi ? K can receive data from sensors and upload it to cloud. The throughput from sensors to MS is D byte/s, and the uploading rate from MS to cloud is Q byte/s. The veloc- ity of MS is denoted by v m/s. We focus on the problem of Data Collection from WSNs to Cloud (hereafter referred to as DCWC problem). The goal of this paper aims at reducing the delivery time to a limited time. When the delivery time satisfies the requirement, the energy consumption will be optimized.

A simple example is illustrated in Figure 2, where four mobile sinks are deployed to collect data from WSN to cloud. The circles and small cars stand for fixed sensors and mobile sinks, respectively. The routes of mobile sinks  are shown as dotted line. In Figure 2(a), four routes have the overlapping parts and the deeper sensor?s color is, the sensor is visited by more MSs. This phenomenon means that delivery time could be optimized. Then the route of each MS is adjusted in Figure 2(b). As we can see, each MS is responsible for fours sensors. What?s more, each sensor is visited only once and the route length of each MS is reduced.

Thus, it is essential to design a schedule algorithm to reduce data collection time in sensor-cloud integration.

Cloud  Mobile sink  Sensor  Upload  (a)  Cloud  Upload  (b)  Fig. 2: An example of data collection from WSNs to cloud with multiple mobile sinks. (a) Four mobile sinks are de- ployed to collect data from WSN to cloud. The route of MSs are random. the sensors? color represents the number of MS visiting this sensor. The deeper the color is, the more MSs visit this sensor.(b) The route of MSs are adjusted and all the sensors are visited by only one MS.

We have the following theorem regarding to the com- plexity of the DCWC problem: Theorem 1. For the DCWC problem, the problem of design-  ing the optimal algorithm is a NP-hard problem  Proof of Theorem 1: We prove this theorem by showing a special case of DCWC, in which M=1, the sensor transmis- sion radius is zero and uploading time is zero. In this case, the DCWC is equivalent to find a shortest path visiting all of the given sensors. Note that in order to minimize the path length, any optimal solution would not visit the same sensor twice, otherwise we can make it shorter by using triangular inequality. Therefore, finding an optimal solution of this special case of DCWC is equivalent to find an optimal solution of Hamiltonian path problem (i.e., finding a path to visit all sensors with the minimum length), which is a well- known NP-hard problem.

3.2 Network Model  We model the connectivity of sensors in WSN as an unoriented-weighted graph G = {Vse,Ese}, where Vse = S,E ? {Vse ? Vse} is a set of edges, where Ei,j ? Ese is the edge if the distance of di,j between Si and Sj is smaller than R. Then the graph G is transformed to a Minimum Cost Spanning Tree MST = {Tnode,Tedge}, where Tnode = Vse and Tedge ? Ese. Each mobile sink will visit some selected sensors called Polling Points (PPs), denoted by {PP ? S|P1,P2, ...,Pk}. Through visiting all the PPs, the sensory data in WSN would be collected and uploaded to cloud. With multiple mobile sinks synchronously working, the network delivery delay can be estimated as follow:    2377-3782 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TSUSC.2017.2690301, IEEE Transactions on Sustainable Computing   Tnet = Max {TMS1 ,TMS2 , ...,TMSM } (1)  where TMSi is the delivery time of MSi, and the network delivery time is the max time among all MSs. As for each individual TMSi , it consists of four parts formulated as follows.

Tt =  ?s j=1 C  D (2)  Td =  ?s j=1 C  Q (3)  Th = s?  j=1  hj ? t (4)  Tm = Ltsp  v (5)  Tt is the transmission time from sensor source to sink. Td is the uploading time from sink to cloud. Th is the multiple- hops delay and Tm is the traveling time of MS. In all arithmetic expression, s is the number of sensors assigned to MSi. The variable hj is the amount of hops from sensor Sj to MSi and Ltsp is the length that MSi traveled. We assume each MS can upload data to cloud at any time. Therefore, each TMSi can be calculated as formula 6.

TMSi =  ?s j=1 C  D +  s? j=1  hj ? t+ Max( ?s  j=1 C  Q ,  Ltsp v  ) (6)  Based on formula 6, we can conclude that hj , Ltsp and s are the main external factors affecting TMSi , which moti- vates us to design the algorithm in next section. Note that sensory data can be uploaded when MS is moving according to existed routing algorithm [39].

4 TASA: TIME ADAPTIVE SCHEDULE ALGORITHM 4.1 Overview of the Algorithm  The design of algorithm can be divided into three sub prob- lems: first, how to distribute task to each MS reasonably; sec- ond, how to design the delivery time adaptive mechanism; third, how to reduce the energy consumption when delivery time meets the requirement. In order to address these issues, the solution has corresponding three sub algorithms. In first sub algorithm, called partition and delivery design algorithm (PDDA), the monitoring area is partitioned off M sectors equally and each MS is responsible for one sector.

In each sector, a minimum cost spanning tree is constructed and the edges o f tree are the delivery routes of sensors.

As for second sub algorithm, called polling point selection algorithm (PPSA), some sensors are selected to serve as polling points (PPs) in each sector. The PPs in the same sector constitute the trajectory of MS. In third algorithm, called time schedule algorithm (TSA), the number of PP is adjusted based on delivery time and the number of sensor in each sector will be adjust to be balance.

Figure 3 shows the main process of TASA. The rectangle area represents the coverage area, and the dotted black circle is the circumscribed circle of rectangle in Figure 3(a). The  area is divided into three sectors equally, denoted byMS1, M2, and M3. Three MSTs are generated in each sector. The edges of MSTs are delivery paths of sensors. In Figure 3(b), parts of sensors are selected as PPs represented by the gray star nodes. The black dotted lines among stars are the trajectories of MSs. The dotted big arrows means that sensors deliver data to MSs when MSs rest at PPs. When delivery time cannot satisfy the requirement, the trajectory of MS will be adjusted by reducing the number of PP. In Figure 3(c), some sensors no longer serve as PPs and they deliver data to MS via multiple hops, where the dotted small arrows mean data transmission between sensors and sensors. As only one PP left in each sector, MS stays at this PP. All sensors send their data to MS via multiple hops transmission. Considering the different number of sensors in each sector, we design a balanced strategy to adjust the task allocated in each sector.

4.2 PDDA: Partition and Delivery Design Algorithm This sub algorithm is the first part of TASA, which focuses on network partition and delivery route design. In order to simplify partition, the monitoring area is partitioned based on degree. More specifically, we use a min rectangle to include all sensors. However, its difficult to partition the rectangle off M region with same perimeter. So we partition the coverage area based on its circumscribed circle. Cover- age area is equally divided into M sectors with central angle 2? M . Second, the connectivity among sensors in each sector  constitutes M weighted graphs {GMSi |i = 1, 2, ...,M}. Be- sides, the weight of edge can be calculated by formula 7.

Ei,j = 2 ? (Si.x ? Sj .x)2 + (Si.y ? Sj .y)2 (7)  Si.x, Si.y represent the abscissa and ordinate of sensor, re- spectively. If the value of edge Ei,j is larger than radius R, the weight of this edge would be set as infinity. Then based on Prim algorithm, M weighted graphs are trans- formed to M minimum cost spanning trees, denoted as {Msti|i = 1, 2, ...,M}. According to the properties of MST, when delivery time TMSi is smaller than the latency require- ment Tspe, the transmission consumption of sensors is the minimum.

4.3 PPSA: Polling Point Selection Algorithm The polling points make it possible for MS to visit parts of sensors collecting all sensory data. A basic election principle can be described as follow. When Sj is within the transmis- sion range of Si, MS can stay at Si to collect both Si and Sj .

Consequently, MS can visit part of sensors to complete all data collection.

A reasonable selection of PP can reduce the moving time of MS. In the PDDA, the sensors which construct a MST can be classified into three types: root node, potential PP node and leaf node. Root node is the start point of MS. Potential PP node is kind of sensor which is connected with more than one sensor directly. Leaf node is the sensor which is connected with only one sensor. In Figure 4(a), it is easy known that MS can visit S6, S2, S0 and S4 to gather all sensory data, then these four sensors are selected as PP like the gray nodes. The dotted line is the trajectory of MS. On    2377-3782 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TSUSC.2017.2690301, IEEE Transactions on Sustainable Computing   M1  M3  M2 M1  M3  M2  PP  sensor  (a) (b) (c)  M1  M3  M2  sensor to MS  sensor to sensor  Fig. 3: The basic idea of TASA algorithm.(a) It shows the partition in monitoring area, where the dotted circle is the circumcircle of rectangle and the dotted lines in the rectangle represent the boundary. The boundary is designed based on the degree in circumcircle. (b) Some sensors are selected as PP and all PPs construct the trajectory of MS like the dotted line among stars. (c) Some sensors are no longer PP and the trajectory of MS is redesigned.

Algorithm 1 PDDA: Partition and Delivery Design Algo- rithm Input: each sensors location (Si.x, Si.y), the number of  sensors is N. Two sets Tnode = ?,Tedge = ?, represent the nodes and the edge of MST, respectively. The Vsec is a set of sensors in same sector;  Output: M graphs G (VG,EG) and MSTs, denoted as T (VT ,ET );  1: while i, j are smaller than N do  2: Ei,j = ? (Si.x ? Sj .x)2 + (Si.y ? Sj .y)2;  3: if Ei,j > R then 4: Ei,j = ?; 5: end if 6: end while 7: while Tnode ?= Vsec /*Prim Algorithm*/ do 8: find MinEu,v, u ? Tnode, v ? S; 9: if v /? Tnode then  10: Tnode = Tnode ? v; 11: Tedge = Tedge ? Eu,v ; 12: end if 13: end while  one hand, the trajectory of MS can be optimized by greedy algorithm. On the other hand, when MS rests at PP, the leaf nodes deliver data to MS through single hop to realize the minimum energy consumption.

Figure 4(b) presents a physical storage structure of MST called children linked list. It shows a clear relationship among sensors in MST. S4 is the root node. S6, S0, S2 are the potential PP nodes. S1, S3, S5, S7, S8, S9 are the leaf nodes.

4.4 TSA: Time Schedule Algorithm  In before two stages, we have designed an initial trajectory for each MS. It is well-known that the employment of mobile sinks can balance the load of sensors and prolong network lifetime. However, due to limited speed of MS, it always wastes lots of time for moving. To solve this problem, two kinds of schedule schemes are designed to adjust the delivery time until delay requirement are satisfied.

S1  S2  S3  S4  S5  S6  S7  S8  S9  S0            3 5   0 1 2  7 8 9S6  S1  S3  S2  S5  S0  S7 S9  S4  S8  (a) (b)  Fig. 4: The strategy of PP selection. (a) In MST, the sensor which connects with more than one other sensor is selected as PP like the gray nodes. (b) This is a physical structure showing a clear relationship among sensors.

Schedule scheme 1. In the initial phase, all sensors de- liver data to MS via single hop like the white nodes in Figure 5(a). The gray nodes are PPs, and the dotted lines are trajectory of MS. Then we calculate collection time TMSi by formula 6. If TMSi is greater than Tspe, some PPs will be removed from the set of PP and added into the general sensors set. The PP which is connected with fewer sensors is chosen firstly, such as S4 in Figure 5(b). Its child node S2 sends data to MS via S4 with two hops. Moreover, the trajectory of MS will be redrawn after a round of selection.

Until the delivery time meets requirement, the trajectory of MS is fixed. When only one PP left in sector, the moving time of MS is zero, and the delivery time is sum of multiple hops delay and uploading time. As shown in Figure 5(c), the dotted arrows represent the order that PP becomes general sensor.

Schedule scheme 2: Different from schedule scheme 1, we consider the factor that the number of sensors is different in each sector. When the latency demand Ttsp is extreme small, parts of sectors may not satisfy the time requirement.

Moreover, the network delivery time is the time when the last sensor is collected as shown in formula 1. Consequently, this schedule algorithm aims to balance task of each MS, which can be described in following four steps.

1) The sectors are classified into two sets: A and B, where set A includes the sector which delivery time    2377-3782 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TSUSC.2017.2690301, IEEE Transactions on Sustainable Computing   S2  S1  S3  S4  S5  S0  S7 S9  S6  S8  S2  S1  S3  S4  S5  S0  S7 S9  S6  S8  (c)(a)   S2  S1  S3  S4  S5  S0  S7 S9  S6  S8  (b)  sensor to sensor  sensor to MS  trajectory of MS  Fig. 5: The schedule process of TSA. (a) It?s the initial status of schedule scheme 1. (b) The PP S2 is transformed to general sensor first. (c) It shows the order that which PP is transformed to be generals sensor.

Algorithm 2 PPSA: Polling Point Selection Algorithm  Input: The MST T = (Tnode,Tedge); root node:u; Vi repre- sents the set of sensor in sector i; Vis represents the set of sensor which is visited;  Output: the set of PP, denoted by ? = P1,P2, ...,Pk and the visiting order of PPs, denoted by ?.

1: Vis=u; 2: while Vis ?= Vi do 3: if Eu,v ? Tedge and v ?= Vis then 4: Vis = {Vis ? v}; 5: if sensor v connects with more than one sensor  then 6: ? = ? ? v; /*sensor v is selected as PP*/ 7: end if 8: end if 9: end while  10: while the set ? ?= ? do 11: next PP = Min (emphSu 7?? Sw);/*find the next  minimum path*/ 12: ? = {? ? Sw}; 13: updating the start node as Sw; 14: end while  is smaller than Tspe. On the contrary, the set B includes the sector which delivery time is larger than Tspe.

2) In set B, the sector with max TMSi is selected as Start Sector (SS). In set A, the sector with minimum TMSi is selected as End Sector (ES).

3) The sensor from SS which is closest to ES delivers its data to MS in ES. In addition, the delivery time of both SS and ES are updated. Then step 1 is repeated.

4) Iterate step 2 and step 3 until set A or set B is Null.

5 PERFORMANCE ANALYSES We have proved several properties of the proposed algo- rithm. The notations that will be used in this part are summarized in Table 1.

Theorem 2. In the worst case, the travel distance of each MS  satisfies this inequation: Ltsp ? ( 1 +  ?  M  ) ? ?  L2 + H2.

Algorithm 3 TSA: time schedule algorithm  Input: The time requirement Tspe; the delivery time of each sector, denoted by {TMS1 ,TMS2 , ...,TMSM }; the set of PP, ? = {PP1,PP2, ...,PPk};  Output: the delivery route of each sensor and the trajectory of each MS  1: while i ? M do 2: while TMSi > Tspe do 3: PPi = Min degree {PP1,PP2, ...,PPk}; 4: ? = ? ? PPi;/*the PPi; is no longer polling  point*/ 5: the trajectory of MS is reprojected; 6: end while 7: end while 8: the sectors are divided into two sets, named A and B; 9: if TMSi > Tspe then  10: put sector i into set A 11: else Put sector i into set B 12: end if 13: while A ?= ? and B ?= ? do 14: Selecting sector SS = MaxTMSx {A} and ES =  MinTMSy {B}; 15: sensor  { S? ? SS|S?  min???? ES }  changes its route and deliver data to the MS responsible for ES  16: sets A and B 17: end while  Proof of Theorem 2: Assuming that the sensor coverage area is a rectangle L?H and its circumscribed circle is shown in Figure 6. The radius of circle is R =  ? L2 + H2/2. The  circle is divided into M sectors equally based on degree, and the central angle of each sector is ? = 2 ? ?/M. The arc of each sector is ? = ? ? R. The perimeter of each sector is DistL = 2 ? R + ? . In the worst case, MS have to visit every sensor and the sensors are distributed at margin of sector. Consequently, the max travel distance of MS is the perimeter of sector, namely Ltsp ?  ( 1 +  ?  M  ) ?  ? L2 + H2.

This property gives the moving distance of MS an upper bound.

2377-3782 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TSUSC.2017.2690301, IEEE Transactions on Sustainable Computing   TABLE 1: List of notations  Notation Meaning M Number of MSs n Number of sensor in WSN R The transmission radius of sensor  Ltsp The max distance that MS traveled ? The central angle of each sector ? Arc of each sector  DistL Perimeter of each sector Tspe The time requirement Tnet The delivery time of network  {?1, ?2, ..., ?M} ?i represents the set of sensors in ?i {?1, ?2, ..., ?M} ?i represents the ith sector {?1, ?2, ..., ?M} ?irepresents the set of PP in sector ?i {?1, ?2, ..., ?M} ?i represents sensors in sector ?i  Tideal Theoretical optimum delivery time e? Energy consumption for unit length  edge<i,j> The weight between Si and Sj Tinit The delivery time in PPSA Einit The energy consumption in PPSA  Ei The energy consumption of ?i T? The actual delivery time E? The actual energy consumption  R=sqrt (L2+H2 ) / 2  =2?/M  R: radius : degree : arc length  Fig. 6: The coverage area is divided into M sectors  Theorem 3. In the worst case, the time complexity of TASA is O  ( n3 ) , where n is the number of sensors.

Proof of Theorem 3: In the first sub algorithm PDDA, the coverage area is divided into M sectors and its time complexity is O (1). Then based on Prim algorithm, MST is generated in M sectors, and its time complexity is M*O  ( n3 ) .

In general case, M is smaller than n. Now, we set M equal to n, so the time complexity is O  ( n3 ) . In the second sub  algorithm PPSA, the time complexity of electing PP is O (n), but time complexity of designing the trajectory of MS based on TSP is O  ( n3 )  in the worst case. The third sub algorithm TSA consists of two parts. In the first part, assuming that the sensor sets {?1, ?2, ..., ?M} all are PPs, then a PP becomes general sensor each round. And the work will be repeated for M times because of M sectors, so the complexity of this part can be calculated by  ?M 1 ?i which equals to n,  namely, O (n). For the second parts, assuming that one sensor changes its transmission route each time, and all the sensor will do this step, so the complexity is O (n).

Therefore, the time complexity of TASA is O  ( n3 )  in the worst case.

Theorem 4. In general value of Tspe, the TASA can realize the adaptive delivery time via schedule scheme 1, and if the time requirement Tideal almost equals to Tspe, the delivery time can be optimized by schedule scheme 2 that each MS is responsible for same number of sensors.

For the time requirement Tspe which is smaller than Tideal, the delivery time is nearly the minimum in each sector.

Proof of Theorem 4: Assuming that sensors in moni- toring area is denoted by S = {?1 ? ?2 ? ... ? ?M}, where ?i represents a set of sensors in sector ?i. ?i is a set of the polling points in sector ?i, and the ?i is a set of general sensors in sector ?i. The relationship among ?i, ?i, ?i is denoted by ?i = ?i + ?i. Based on these notations, the delay model in formula 6 can be simplified further. At the beginning of TSA, all sensors deliver data to MS via single hop, so hi(j = 1, 2, ..., N) equals to 1 and the sum of  ?s j=1 C  equals to ??C. Ltsp is the travel distance of visiting all PPs in ?i, and we assume that MS can upload data to cloud when MS is moving. Therefore, the delivery time of MS can be simplified as equation 8.

TMSi = ?i ? C D  + ?i ? t + Max( Ltsp  V , ?i ? C Q  ) (8)  As the delivery time cant meet application requirement, the TSA would adjust the path of MS to reduce moving time.

For the first case, the time constraints Tspe is smaller than Tideal. Until the TMSi is smaller than Tspe, parts of PPs are transformed to general sensors and both two sets ?i and ?i are not null. In this situation, TMSi is smaller than Tspe and hj equals to 1 always. Furthermore, when Tspe nearly equals to Tideal, the goal of problem can be regarded as minimizing the delivery time. Therefore, the PP would be fixed in each sector and most of sensors deliver data to MS via multiple hops such as Figure 5c, where ?i = 1, ?i = ?i+1. One thing to note is that Ttsp equal to zero, then delivery time can be showed like equation 9.

TMSi = ?i ? C D  + ?i ? C Q  +  ?i? j=1  hj ? t (9)  According to the analysis of formula 9, it is obvious that ?i is the key factor influencing delivery rime. Through the schedule scheme 2 in TSA, the final status is that all the MSs are responsible for same number of sensors, denoted as ?1 = ?2 = ... = ?M . Therefore, if Tspe nearly equals to Tideal or Tspe is much smaller than Tideal, the theorem 4 is validated, denoted as TMSi ? Tideal.

Theorem 5. If the solution for designing the trajectory of MS is the optimal in PPSA, the sensor energy consumption is the minimum.

2377-3782 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TSUSC.2017.2690301, IEEE Transactions on Sustainable Computing   Proof of Theorem 5: The initial delivery time and net- work energy consumption can be calculated by equation 10- 11.

Tinit =  ?s j=1 C  D +  s? j=1  hj ? t+ Max( ?s  j=1 C  Q ,  Ltsp v  ) (10)  Einit = e? ? M? i=1  ? Tedge (11)  Based on the property of MST, the sum length of edges is the minimum in each sector, namely  ? Tedge is mini-  mum. Therefore, at the initial stage, the energy consump- tion Einit is the minimum in each sector. Now giving a PP set ?k = {PP1, PP2, ..., PPi, ..., PPr}, the child nodes of PPi is denoted as {Sa, Sb, ..., Sk}. ?t is the reduced time and ?E is the increased energy consumption via TSA. The travel distance of MS will decrease, denoted by ?L = Ltsp ?  ?i+1 j=i?1 di,j (j ?= i), where di,j is the distance  between PPi and PPj . The hop will increase, denoted as ?h =  ? hw (w = Sa, Sb, ..., Sk). The transmission distance  of sensors will increase, denoted as L? = ??h  i=1 li, where the notation li is the length of each hop. Consequently, the decreased delivery time can be denoted as ?T = ?L v  ? ?h ? t. The increased energy consumption can be denoted as ?E = e??  ??h?t i=1 . The relationship between actual  energy consumption E? and actual delivery time T? satisfy the equations 12-13.

T? = Tinit? Ltsp ?  ?i+1 j=i?1 di,j v  + ?  hw?t,w = Sa, Sb, ..., Sk (12)  E? = Einit + e? ? ?h?t? i=1  ,w = Sa, Sb, ..., Sk (13)  Based on theorem 4, the delivery time T? can be op- timized. When solution for designing trajectory of MS in PPSA is optimal, the value of  ? hw is optimal. According  to the property of MST, the value ?  Li is the minimum and the value of ?E is the minimum in each sector. Therefore, the value of E? is optimal with the minimum value of Einit.

6 EVALUATION 6.1 Experimental Environments To validate the effectiveness of our proposed algorithm, we conducted extensive simulations using MATLAB 2015a.

We built a wireless sensor network consisting of 100 sen- sors deployed in a 100m?100m rectangle region. The data generating rate of each sensor is 5 byte per second. The transmission range of each sensor is 3 meters and its initial energy capacity is 30 J. The energy consuming rate for the transmitting is 6 ? 10?7(J/bit) and for receiving rate is 3 ? 10?7(J/bit). The speed of the mobile sink is 3(m/s).

The data uploading rate from the mobile sink to Cloud is 50 (byte/s). In the general case, there are 5 mobile sinks deployed in the WSNs.

As part of the evaluation, two existing algorithms are also considered for comparison. The first algorithm is  100 200 300 400 500 Number of Sensors       D el  ay (  s)  Tspe=200s Tspe=400s Tspe=600s Tspe=800s  100 200 300 400 500 Number of Sensors       E ne  rg y  C on  su m  pt io  n (j)  ?10-3  Tspe=200s Tspe=400s Tspe=600s Tspe=800s  Fig. 7: (a) Number of Sensor vs. Delay (b) Number of Sensor vs. Energy Consumption  EMMS [40]. In this algorithm, multiple sinks were controlled to visit all the sensors and the tour of each mobile sink is closed. The second is SG-MIP [41]. This algorithm iter- atively partitioned the monitoring area and selected near- optimal rout for mobile sinks. In the simulations, these three algorithms are compared based on four metrics, i.e., the delivery delay, the energy consumption, the distances that mobile sink traveled and the lifetime of WNSs. The delivery delay is the max delivery time among all mobile sinks. The energy consumption represents the max energy consumption among all sensors. The energy consumption of each sensor is calculated based on the energy model in [42].

6.2 Experimental Results  Figure 7 demonstrates the delivery delay and energy con- sumption under the scenarios with different number of sen- sors. As shown in Figure 7 (a), when the number of sensor increases from 100 to 500, the delivery delay shows a rising trend. Due to the stringent deadline, when Tspe is smaller than 400 s, the delay requirement cannot be guaranteed.

As the Tspe increases, our algorithm performs well with different number of sensors, which is consistent well with the theoretical analysis (Theorem 4). Figure 7 (b) shows the energy consumption for data collection. No matter the value of latency requirement is, as the number of sensors increases, the energy consumption decreases gradually since more sensors can deliver data to MS through the less hops.

Moreover, the lower value of latency requirement is, the higher energy consumption is. This is because the number of PPs will be cut down to shorten the travel time of MS, which means more sensors will deliver data via multiple hops.

Figure 8 shows the delivery delay and energy consump- tion under the scenarios with different number of mobile sinks. In the Figure 8 (a), when the number of mobile sinks increases, the delay with different demand all decrease. It is worth noting that the delay value have a nearly linear variation as the number of MSs is from 10 to 25 and Tspe is 800s. This phenomenon reflects the step in PPSA. When all the sensors send data to MS through single hop and the delivery time is smaller than Tspe , the collection time from sensors to mobile sinks is constant. And the difference is that more MSs uploading data to cloud. As shown in Figure 8 (b), the energy consumption decreases with the MSs increased.

This is because the more MSs are deployed to balance the load of each sensor. Besides, more sensors send data to MSs directly.

2377-3782 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TSUSC.2017.2690301, IEEE Transactions on Sustainable Computing   5 10 15 20 25 Number of MSs        D el  ay (  s) Tspe=200s Tspe=400s Tspe=600s Tspe=800s  5 10 15 20 25 Number of MSs   0.2  0.4  0.6  0.8   1.2  E ne  rg y  C on  su m  pt io  n (j)  ?10-4  Tspe=200s Tspe=400s Tspe=600s Tspe=800s  Fig. 8: (a) Number of MSs vs. Delay (b) Number of MSs vs.

Energy Consumption  100 150 200 250 Number of Sensors      D el  ay (  s)  TASA EMMS SG-MIP  1 2 3 4 5 Radius of Sensor (m)        D  el ay  ( s)  TASA EMMS SG-MIP  Fig. 9: (a) Number of sensor vs. Delay (b) Number of MSs vs. Delay  We now evaluate the algorithms on delay. As shown in Figure 9 (a), with the increase of the number of sen- sors, our proposed algorithm TASA achieves the best per- formance among these three algorithms. Specifically, the delay achieved by SG-MIP is about twice than that of out algorithm. When the number of sensors is 250, the delay generated by EMMS is extreme high. In Figure 9 (b), when the number of MSs increases, all algorithms perform better, but TASA performs the best.

After comparing the effect of TASA with another two al- gorithms, EMMS and SG-MIP, we find two reasons for why our algorithm performs better. First, the radius of sensor is a key element affecting the performance of algorithm. As shown in Figure 10 (a), it is evident that the delay decreases with a bigger radius of sensor for all algorithms. Obviously, the influence of radius on EMMS is the most apparent. And it testifies that the TASA performs a better compatibility. For further clarity, we present the distances MSs traveled in all algorithms in Figure 10 (b). It is seen that TASA has the shortest distance and smallest difference among these three algorithms. This is because TASA can adjust the trajectory to fit the latency requirement.

We now evaluate the effectiveness of algorithm on en-  5 10 15 20 25 Number of MSs        D el  ay (  s)  TASA EMMS SG-MIP  100 150 200 250 Number of Sensor        T ra  ve l D  is ta  nc e  (m )  ?104  TASA EMMS SG-MIP  Fig. 10: (a) Radius of sensor vs. Delay (b) Number of sensor vs. Travel Distance of MS  5 10 15 20 25 Number of MSs       E ne  rg y  C on  su m  pt io  n (j)  ?10-4  TASA EMMS SG-MIP  5 10 15 20 25 Number of MSs        N et  w or  k Li  fe tim  e (s  )  ?105  TASA EMMS SG-MIP  Fig. 11: (a) Number of MS vs. Energy Consumption (b) Number of MS vs. Network Lifetime  5 10 15 20 25      D el  ay (s  )  Number of MSs  TASA MMSA  5 10 15 20 25  1x105  2x105  3x105  4x105  N et  w or  k lif  et im  e (s  )  Number of MSs  TASA MMSA  Fig. 12: (a) Number of MSs vs. Delay (b) Number of Sensor vs. Network Lifetime  ergy consumption and network lifetime. In Figure 11 (a), the energy consumption achieved by EMMS stays steady due to single hop transmission of all the sensors. Beyond that, the energy consumption in TASA and SG-MIP decrease when the number of MS is added, and TASA realize the lower energy consumption. Figure 11 (b) shows the trend of network lifetime with the variance of number of MSs.

As more MSs are employed in WSNs, the lifetime becomes longer. This is because sensors have more opportunities to communicate with MS directly. In contrast, the lifetime achieved by SG-MIP is shorter than our algorithm.

In the Figure 12, we present the comparison result between TASA and MMSA which was proposed in [38].

Figure 12 (a) presents the comparison on delay with the increased number of mobile sink. Figure 12 (b) implies the tendency of network lifetime with the increased number of mobile sink. Both two results obviously show that the improved algorithm TASA performs better than MMSA.

7 CONCLUSION The development of cloud computing brings new technolo- gies to traditional wireless sensor network, such as high- speed computing power, big data storage and remote ser- vice, which makes some applications become possible in our life. It is an inexorable trend to integrate WSNs with cloud computing. With the cloud computing paradigm adopted in WSNs, the performance of WSNs can be improved, such as energy consumption, computing latency, service quality,etc.

However, due to the weak communication ability of WSNs, how to upload the mass sensed data to the cloud within the limited time becomes a bottleneck in sensor cloud in- tegration system. Most traditional methods of mobile data collection are delay tolerant, which is not appropriate for data collection in sensor-cloud integration. In this paper, we have studied the data collection problem from WSNs to cloud with multiple mobile sinks and formulated it    2377-3782 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TSUSC.2017.2690301, IEEE Transactions on Sustainable Computing   as a constrained optimization problem, which is proved to be NP-hard. We designed TASA algorithm which is a polynomial time algorithm and with provable performance.

The performance of the proposed method is also validated through simulations. Simulation results demonstrate that the proposed algorithm can adjust the delivery delay, reduce energy consumption significantly and improve the system sustainability, which contributes to the integration of WSNs and Cloud.

