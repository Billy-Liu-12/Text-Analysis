A power- and storage-efficient HLS media server for  multi-bitrate VOD services

Abstract? The growth of social media and mobile service, and the diversity of client devices have greatly increased media servers? storage costs and network traffic. This paper proposes an HTTP live streaming (HLS) media server for multi-bitrate video-on-demand (VOD) services that is efficient in terms of power consumption and storage space. The proposed server provides efficient storage space management by taking into account the user's video streaming patterns and by exploiting real-time transcoding. The experiment results show that the proposed server yields an enhanced storage efficiency compared to the previous HLS media server. The proposed HLS media server can decrease storage space by 25% when the distribution of video qualities requested by users is in the form of a normal distribution, and by 30% when it is a Pareto distribution.

Improved storage efficiency also leads to improved power efficiency. The proposed HLS media server reduces the required power consumption by 9.9%.

Keywords?media server; VOD service; real-time transcoding

I. INTRODUCTION The storage cost of a media server and the network traffic  for VOD services are increasing continuously. This is because the number of videos stored in a media server has dramatically increased along with the growth of social media and mobile service. In addition, video streams need to be provided at many different qualities (bitrates) as the types and capabilities of client devices become more diverse [1].

A number of studies have been conducted to enhance the storage efficiency of media servers. The solutions in cases [2- 4] store only video data of some rather than all possible qualities, and use real-time transcoding to create the video data of the unstored qualities based on that of the stored qualities.

The algorithm in [2] uses dynamic programming to choose some bitrate versions of a video, and stores only the chosen versions, thereby reducing the disk bandwidth and storage space of the server. The work in [3] states the version selection problem, a selection of the quality versions to be stored from multiple quality versions of a video in such a way that CPU utilization for transcoding is minimized, and proposes an algorithm that solves the problem in pseudo-polynomial time.

The study in [4] suggests a branch and bound based algorithm to resolve the problem raised in [3].

For seamless streaming service, studies in [5-9] adjust network traffic by selecting the quality of a video stream according to the network conditions. HTTP-based adaptive streaming (HAS) solutions that adapt the quality of the video stream based upon the consumer's changing bandwidth include MPEG's Dynamic Adaptive Streaming over HTTP (DASH), Apple's HLS, Adobe's HTTP Dynamic Streaming (HDS), and Microsoft's Smooth Streaming. In particular, HLS is widely supported in various media servers and players, such as Adobe Media Server (AMS), Akamai, Amazon CloudFront, and VLC media player. These technologies create and store multiple files of a video encoded at different resolutions, so the media server requires a large storage space.

As the amount of data to be processed in a media server increases, ways to reduce power consumption have been studied [10-13]. The algorithm proposed in [10] reduces power consumption by distributing transcoding jobs across the servers, with varying performance. The approach in [11] proposes a new protocol that can decrease power consumption during the transmission of bulk data. The mechanism in [12] lowers power consumption by efficiently distributing data stores, computations, and transmissions over the systems in a cloud environment. The algorithm suggested in [13] decreases the power consumption of a media server with partial cooling loads.

This paper proposes an HLS media server for multi-bitrate VOD services that enhances storage and power efficiency by taking into account the consumer's usage patterns and employing real-time transcoding. The proposed HLS media server works by breaking a video into small segments at different bitrates, where each bitrate represents a different quality level. The segments of certain bitrates that are not frequently requested by the user are provided via real-time transcoding upon the arrival of a request, instead of storing them in a storage unit. The experiment results show that the proposed HLS media server has a better storage efficiency than the previous HLS media server that does not utilize real-time transcoding. The storage efficiency increases by 25% when the video qualities requested by the clients follow a normal distribution, and by 30% when they follow a Pareto distribution.

Improved storage efficiency leads also to improved power efficiency. The proposed HLS media server lowers power     consumption by 9.9% in comparison with the previous HLS media server.

This paper is organized as follows. Section 2 describes related works. Section 3 presents the proposed HLS media server that improves storage and power efficiency using real- time transcoding. In Section 4, the storage and power decrease rates of the proposed HLS media server are examined through experiments.



II. RELATED WORK HLS is one of the widely known HAS solutions developed  by Apple [6]. HAS, an adaptive streaming technology based on HTTP, allows the client to choose an appropriate quality version for each video segment based on the available bandwidth between the server and client. The HLS server divides a video into segments encoded at a variety of data rates and stores them in a storage unit. The client downloads video segments from the server via HTTP. Compared to traditional streaming technologies, HLS has several advantages. HLS is capable of traversing any firewall or proxy server that lets through standard HTTP traffic. It allows video fragments to be cached by proxies, thus reducing the load on the source server and improving access speed for download. Upon receiving a video request from the mobile client, the web server checks the manifest files containing the metadata for each of the encoded streams and sends the segments of video data at an appropriate bitrate level to the client (see Fig. 1).

In HLS, the process of video playback to the client is as follows. The client requests certain quality versions of video segments that are suited to the client's network conditions by referring to the server manifest files, and then plays back the segment downloaded from the server. The client measures the transmission time of the requested segment during download, and discovers current network conditions based on the measured time and the volume of the segment downloaded.

The client decides which quality level to select for the next video segment by referring to the server manifest files. In this way, the client adapts to its network conditions and adjusts the quality of a video stream accordingly. Compared to existing streaming technologies, HLS reduces server loads while allowing seamless streaming services to the clients.

With the rapid advancement of network environments and device performance, the use of VOD is growing explosively. A number of studies on consumer's video usage patterns have been conducted to improve the efficiency of the media server that is responsible for providing streaming services. The study  in [14] analyzed the video playback patterns of Daum and YouTube sites and discovered that the top 10% of the published videos that are most popular account for 80% of the total number of video playbacks. In addition, the distribution of video playback times follows a log-normal distribution, and the users tend to watch only the first or last parts of a video rather than allowing the entire video to be played. The studies in [14- 16] analyzed YouTube video traffic and revealed that the top 16% of videos with high popularity occupy 90% of the total streaming traffic.



III. HLS MEDIA SERVER USING REAL-TIME TRANSCODING The basic idea of the HLS media server proposed in this  paper is to increase space and power efficiency by transcoding less popular video segments in real time, instead of storing them in a storage unit.

The proposed HLS media server consists of the storage unit, transcoding server, and web server. Unlike the previous HLS media server that stores video segments of all possible bitrates (resolutions), the proposed HLS media server selects highly popular videos and stores their segments of all the desired bitrates in its storage. With regard to the remaining videos, the proposed server stores only the segments with the highest bitrate. When a client requests lower-bitrate segments from the ?unpopular? videos that are not stored in the storage unit, they are created in the transcoding server and then delivered to the client via the web server. The rationale behind this strategy is the finding in existing studies that client requests highly center on the most popular videos. Since a large fraction of the stored video segments is rarely requested by the clients, storing all videos in all possible bitrates wastes storage space. Media server storage space can be used more efficiently by determining the priority of videos and storing the video segments based on their priorities.

Upon receiving a request of video segments of a certain bitrate from a client, the web server checks if those segments are stored in the storage unit. If yes, the web server retrieves them from the storage and sends them to the client. Otherwise, the web server sends a request to the transcoding server. The transcoding server retrieves the highest bitrate segments of the requested segments from the storage unit and transcodes them in real time, producing the segments of the requested bitrate.

The transcoded video segments are sent back to the web server, and the web server delivers them to the client.



IV. EXPERIMENTAL RESULTS AND ANALYSIS Experiments were performed to examine the storage and  power efficiency of the proposed HLS media server in comparison with the previous HLS media server that does not utilize real-time transcoding. For the sake of convenience, the HLS media server exploiting real-time transcoding is called RTHS, and the previous HLS media server is called HS. RTHS has five Network-Attached Storage (NAS) devices as storage units, one PC as a transcoding server and a web server. HS has five NAS devices as storage units and one PC as a web server.

Fig. 1. HLS manifest files and segments     TABLE I. VOLUME OF THE VIDEOS USED IN THE EXPERIMENTS (Q: QUALITY LEVELS)  Quality Q1 Q2 Q3 Q4 Q5  Video bitrate 5,000k 2,500k 1,000k 500k 200k  Audio bitrate 128k 128k 128k 128k 128k  Scale 720p 480p 360p 240p 144p  Total bitrate 5,128k 2,628k 1,128k 628k 328k  TABLE II. EXPERIMENTAL CONDITIONS AND SETTINGS  Conditions Probability distributions and parameter values  Request interval time Poisson distribution [3]  Popularity Zipf-like distribution [3, 15, 16]  Video playing time Lognormal distribution, sigma = 1.54, mean = 2.76728 [15] Quality access  probability (normal distribution)  P(Q1) = 0.1, P(Q2) = 0.25, P(Q3) = 0.3, P(Q4) = 0.25,  P(Q5) = 0.1 Quality access  probability (Pareto distribution)  P(Q1) = 0.45, P(Q2) = 0.23, P(Q3) = 0.15, P(Q4) = 0.12,  P(Q5) = 0.09 The PCs used in the experiments have Intel core i7 960  CPU and 8GB RAM. Their operating system is Ubuntu 12.04 LTS (64 bits). NAS is equipped with QNA NAS TS-469L. In each NAS unit, four HDD of 1TB are configured in RAID 5, procuring the capacity of 2.7TB. The web server operates with the Apache HTTP Web Server. The media server was implemented with mod_python, an Apache HTTP Server module that integrates the Python programming language with the server.

Table I presents volume information about the videos used in the experiments. The playback time of each of the videos is set to 15 minutes, and they are in five different quality levels (Q1-Q5). The videos used in the experiments have five different content types: music video, animation, documentary, sports, and action film. Q1 has the highest video resolution and Q5 has the lowest. The average volume of videos storing all quality levels is about 1,218MB, and its average volume is 627MB when only the highest quality level (Q1) is stored. The playback time of a single segment is 10 seconds.

Table II lists the experimental conditions and parameters of the streaming video requests used in the experiments. The experiments were carried out on the assumption that the video quality levels (Q1-Q5) requested by the clients form either a normal distribution or a Pareto distribution. In terms of video popularity, the distribution of client requests over videos follows a Zipf-like distribution, in which the top 16% of videos with the highest popularity account for 90% of the total client requests [15]. It was assumed that the popularity of the videos is irrelevant to the types of video. In addition, changes in video popularity were not taken into consideration.

In each NAS unit, 90% of the storage capacity was filled with video data. It was assumed that video requests occur over a period of 24 hours [17]. The number of video requests was set to 1 times, 0.5 times, and 0.25 times the number of videos stored in the storage unit of RTHS and HS. These three factors (1, 0.5, and 0.25) that are used in the experiments to create a number of video requests from the clients are called the "video request multiple."  A reduction rate of storage space denoted by RR is calculated using (1). The number of video quality levels is denoted by n. With k(1?k?n), the total volume of the most popular videos at the kth quality level is denoted by Pk, and the total volume of the remaining videos at the kth quality level is denoted by P?k. In our experiments, to make the storage reduction rate become 20%, 25%, and 30%, we adjusted appropriately the ratios of popular videos whose all quality levels should be stored.

(1)  To examine quality of service (QoS), the service refusal rates of RTHS were measured while varying storage reduction rates in RTHS. Note that the storage space is not decreased in HS, so the service refusal rate is 0% in HS. When a client makes a video request to the server, it requests the first three segments (30 seconds long) and demands that its buffer can hold three segments during playback. If the client fails to receive the segments and the buffer becomes empty, the video playback will freeze. This is recorded as "service refusal."  A. Experiment results in a normal distribution of requested video qualities  TABLE III. STORAGE EFFICIENCY OF HS IN A NORMAL DISTRIBUTION OF REQUESTED VIDEO QUALITIES  Storage reduction  rate  Number of  videos  Video request multiple  Power consumption of NAS (W)  Power consumption of web server (W)  Service refusal rate  Average interval between  requests (s)  0% 11,025  1 183.5 115 0.00% 7.837  0.5 164.0 114 0.00% 15.673  0.25 163.9 114 0.00% 31.346     Tables III and IV show the storage efficiency (i.e., service refusal rates with regard to storage reduction rates) of HS and RTHS when the video qualities requested by the clients are in the form of a normal distribution. In Table IV, when the video request multiple is 0.5, the intended QoS level is maintained (i.e., service refusal rate = 0%) until the storage is reduced by 25%. However, service refusals occur when the storage is reduced by 30%, thus deteriorating QoS. The conclusion here is that the HLS media server proposed in this paper can reduce storage resources by 25% without degenerating the user  experience on the target device when the video request multiple is 0.5.

Table V presents the power efficiency of RTHS over HS in a normal distribution of requested quality levels, which varies according to the video request multiple. In the experiments, the number of NAS units required by HS and RTHS in order to provide streaming services with the same number of videos was calculated, and the total power consumption of HS and RTHS was measured for comparison. For example, in the case where the storage space of RTHS is decreased by 20% compared to that of HS, RTHS requires five NAS units to  TABLE IV. STORAGE EFFICIENCY OF RTHS IN A NORMAL DISTRIBUTION OF REQUESTED VIDEO QUALITIES  Storage reduction  rate  Number of  videos  Video request multiple  Power consumption of NAS (W)  Power consumption  of web server &  transcoding server (W)  Service refusal rate  Average interval between  requests (s)  20% 13,750  1 178.3 134.9 0.13% 6.284  0.5 171.9 124.8 0.00% 12.567  0.25 172.4 120.5 0.00% 25.134  25% 14,700  1 176.7 144.2 0.07% 5.877  0.5 172.1 129.5 0.00% 11.755  0.25 168.1 124.5 0.00% 25.51  30% 15,750  1 178.0 157.1 5.13% 5.485  0.5 174.8 135.6 0.08% 10.971  0.25 172.1 136.1 0.00% 21.942  TABLE V. POWER CONSUMPTION OF RTHS AND HS IN A NORMAL DISTRIBUTION OF REQUESTED VIDEO QUALITIES  Power consumption of RTHS (W)  Power consumption of HS (W)  Storage reduction  rate  Video request multiple  Power consumption of NAS (W)  Power consumption of web server & transcoding  server (W)  Power consumption of NAS (W)  Power consumption of web server  (W)  Power Efficiency  (%)  20%  1 178.3 134.9 220.2 115 6.9  0.5 171.9 124.8 196.8 114 4.8  0.25 172.4 120.5 196.7 114 7.3  25%  1 176.7 144.2 229.4 115 7.9  0.5 172.1 129.5 205.0 114 7.3  0.25 168.1 124.5 204.9 114 9.9  30%  1 178.0 157.1 238.6 115 6.9  0.5 174.8 135.6 213.2 114 6.9  0.25 172.1 136.1 213.1 114 8.6     provide streaming services with 13,750 videos. On the other hand, HS requires six NAS units to provide this. That is, RTHS requires the power for five NAS units, whereas HS needs the power for six NAS units. As a result, the power efficiency of RTHS is improved by 4.8% - 9.9% in comparison with that of HS. In RTHS, power efficiency increases as the video request multiple decreases. This is because the required amount of real- time transcoding decreases when the video request multiple is small.

B. Experiment results in a Pareto distribution of requested video qualities Tables VI and VII present the storage efficiency of HS and  RTHS, respectively, when the video qualities requested by the clients form a Pareto distribution. In Table VII, when the video request multiple is 0.5, RTHS with a storage reduction rate of 30% is able to maintain the intended QoS level. That is, the storage efficiency of RTHS is increased by 30% compared to that of HS when the video request multiple is 0.5 and the probability of requesting the highest quality level of a video is high.

Table VIII shows the power efficiency of RTHS over HS when the video qualities requested by the clients follow a Pareto distribution. The power consumption of HS was  calculated in the same manner as that in Table V. The experiment results show that RTHS decreases the power consumption by 9.3% in comparison with HS. Similar to the results obtained in a normal distribution of requested video qualities (see Table V), RTHS's power efficiency increases as the video request multiple decreases.



V. CONCLUSION We have proposed an HLS media server for multi-bitrate  VOD services that enhances storage and power efficiency using real-time transcoding with consideration of the client request patterns. As our experimental results show, our proposed server can reduce the storage usage while maintaining the QoS level. In the aspect of power consumption, the results show that our proposed server is more applicable to cases when the power consumption of NAS server is more critical.

