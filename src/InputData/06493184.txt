

Abstract-Data mining is the process of analyzing large database to find useful patterns. The term pattern refers to the items which are frequently occurring in set of transaction. The frequent patterns are used to find association between sets of item. The efficiency of mining association rules and confidentiality of association rule is becoming one of important area of knowledge discovery in database. This paper is organized into two sections. In first part of paper an Improved Apriori algorithm is being presented that efficiently generates association rules. These reduces unnecessary database scan at time of forming frequent large itemsets.

In second part of this paper we have tried to give contribution to improved apriori algorithm by hiding sensitive association rules which are generated by applying improved Apriori algorithm on supermarket database. In this paper we have used novel approach that strategically modifies few transactions in transaction database to decrease support and confidence of sensitive rule without producing any side effects. Thus in the paper we have  efficiently generated frequent itemset sets by applying Improved Apriori algorithm and generated association rules by applying minimum support and minimum confidence and then we went one step further to identify sensitive rules and tried to hide them without any side effects to maintain integrity of data without generating spurious rules.

Index Terms?Association rules, confidence, Data mining methods and Algorithm, Minimum Support Threshold (MST), Minimum Confidence Threshold (MCT), Rule hiding.



I. INTRODUCTION Mining association rule is one of main data mining research area at present, and focuses particularly in finding the relation among different items in the database and tries to find frequent patterns that can be represented as knowledge. The process of finding knowledge from data that comes from desperate sources is also called as knowledge discovery process referred as KDD process.  How to generate frequent item sets is the key and core concept of data mining. It is an important aspect in improving mining algorithm that deals with how to decrease item sets candidate in  order to generate frequent item sets efficiently.

In classical Apriori algorithm, when candidate generations are generated, the algorithm needs to test their occurrence frequencies. The manipulation with redundancy result in high frequency in querying, so tremendous amounts of resources will be expended whether in time or in space.

In this paper improved algorithm is proposed for mining association rules in generating frequent k- itemsets. Instead of judging whether these candidates are frequent itemset after generating new candidates, this algorithm finds frequent itemset directly and removes the subset which is not frequent by selecting only those transaction for scanning which are subset of frequent itemsets. Once frequent itemset are find out, the association rules are generated based on minimum confidence. The association rules whose confidence is 100% are identified as sensitive rule and such rule should be hide without any side effect before releasing database.



II. ASSOCIATION RULE AND HIDING SENSITIVE RULE DESCRIPTION

II.A Association Rule Description Let T= {  and DB= {  where  is a subset of T, be set of all distinct transaction items and database respectively. Each transaction is identified unique identifier called TID and can be represented as bit victor  where =1 if ? .

Definition 2.1: Association rule mining. The count of itemset I denoted as  is the number of transactions containing I in DB and |DB| is the count transaction in DB. For two itemset X and Y, where X Y=?, X=>Y is called as strong rule if both following condition holds.

? ?MST and             1   ? ?MCT.           2  A Novel Approach for Efficient Mining and Hiding of Sensitive Association Rule  PG Scholar Mr. Suraj P. Patil, Assoc Prof T. M Patewar, R. C. Patel Institute of Technology, Shirpur ? 425405  Dist: Dhule, State Maharashtra, Country: India  Email-psuraj007@gmail.com

II.B ASSOCIATION RULE HIDING  Definition 2.2: Association Rule hiding. Let   be the database after applying a sequence of modification to D. A strong rule X=>Y in D will be hidden in   if one of the following conditions holds in :  ? SupXUY <  MST and                         3   ? Conf X=>Y < MCT.                           4

III. LITERATURE SURVEY Association rule mining has been investigated by many researchers and practitioners for many years [1, 2, 3].

In [3], the candidate item sets are generated on the fly during the pass over the database. For every transaction, candidate item sets are generated by extending the large item sets from previous pass with the items in the transaction such that, the new item sets are contained in that transaction. In [2] candidate item sets are generated in a separate step using only the large item sets from the previous pass. It is performed by joining the set of large item sets with itself. The resulting candidate set is further pruned to eliminate any item set whose subset is not contained in the previous large item sets. This technique produces a.

much smaller candidate set than the former technique.

Sensitive rule hiding is a subfield of privacy preserving data mining, which can be divided into two categories.

One is the preserving of data privacy, which considers all or parts of the data to be sensitive [4], [3], [6], [7].

Its goal is to blur the sensitive data but keep the summary information unchanged. The other is the preserving of information privacy, assuming that only the summary information is sensitive. Its goal is to hide the sensitive information but retain most of the original data. Sensitive rule hiding belongs to the second category. Oliveira and Za??ne[10] refer to sensitive rule hiding as data sanitization, which aims at hiding a set of sensitive itemsets, and prove that optimal sanitization is NP-Hard.  They introduce three measures for hiding failures (sensitive patterns that are not hidden), missing costs (nonsensitive patterns falsely hidden), and artifactual patterns (spurious patterns falsely generated). Since these approaches only consider the decrease of supports, they may fail to hide a rule if the rule can be hidden only by decreasing the confidence.

Saygin et al. [7], [8] argue that both the insertion and deletion of items will introduce false  information and make it hard to determine whether the rules derived from the modified database can be trusted.. From our view, the uncertainty due to the ranges on supports and confidences makes it hard to determine whether the derived rules can be trusted. Moreover, the side effects will be out of control since they do not consider the correlation among rules in their modification scheme.

The work proposed by Verykios et al. in [9] should be the most relevant to our work. In that work, the authors  propose five algorithms for rule hiding, which are also based on the decrease of supports and confidences.

Unlike us, they make a strong assumption?only the rules that are supported by disjoint frequent itemsets can be selected as sensitive. With this assumption, their algorithms can hide one rule at a time and decrease supports or confidences one unit at a time.

In the second part of paper, we have removed the assumption and allow the user to select sensitive rules from all strong rules. The problem of sensitive rule hiding is described as follows: Given a transaction database, MST, MCT, and a set of sensitive rules, how can we modify the database such that using the same MST and MCT, the set of strong rules in the modified database satisfies all the constraints: 1) no sensitive rule, 2) no lost rule, and 3) no false rule?



IV. PROBLEM DESCRIPTION The problem definition of our paper is to reduce unnecessary DB scan at the time finding frequent itemset by Apriori algorithm, generating strong association rule and hiding sensitive association rule without any false rule generation.

In Apriori algorithm to find frequent itemset it as two steps  ? Pruning itemset according to Lk-1 ? Pruning itemset according to minimum  support.

The question of Apriori algorithm is that every time a set of candidate Ck is generated from Lk-1. Every itemset in Ck is tested whether its all k-l subsets constitute a large k-1 itemset or not, if one of k-1 itemsets is not in Lk-1 itemsets, the super itemset of this k-l itemset can be deleted. That is, every time a k itemset is constituted, Apriori must scan all Lk-1 itemsets. Because of this we need to scan large database many times, the identifying processes are the bottleneck of the Apriori algorithm.

V Improved Apriori Algorithm

V. A.  PRINCIPLE OF IMPROVEMENT The improvement is mainly way of reducing query frequencies and storage resources. We design an improved Apriori algorithm that mines frequent item sets without new candidate generation. For example, in this algorithm we compute the frequency of frequent k- item sets when k-item sets are generated from (k-1)- item sets. If k is greater than the size of transaction T, there is no need to scan transaction T which is generated by (k-1)-item sets according to the nature of Apriori algorithm, and we can remove it.

To implement the improvement in classical Apriori algorithm, the improved algorithm is described as follow steps: ? The function apriori-gen (Lk-1) is called to generate candidate k-item sets by frequent (k-1)-item sets.

? Judging whether C is joined into candidate k-item sets. It is processed by calling function has_infrequent_subset(C, Lk-1). If the return value is true, it means the sets aren?t frequent item sets and should be remove in order to raise efficiency.

Otherwise, scan database D.

? The frequency of frequent k-item sets is computed when k-item sets are generated by (k-1)-item sets. If k greater than the size of transaction T, there is no need to scan transaction T which is generated by (k-1)- itemsets and we can use minimum support (MST) for pruning itemsets, and we can delete it.  If the size of transaction T is greater than or equal to k, then function subset (Ck,t) is called, which selects only those transaction which are subset of frequent item set.

Thus it reduces extra scanning of infrequent itemsets.

The detail working of improved Apriori Algorithm is given below in figure 1.

Fig. 1. Working Of Improved Apriori Algorithm [1]  We have tested classical Apriori and improved Apriori algorithm on different data set and come with the conclusion that amount of time taken by Improved Apriori algorithm to find frequent itemset is less than classical Apriori algorithm.

In second part of paper we have work on generating strong association rule and hiding sensitive one.

Following are the schemes that can be consider in rule hiding.



V.B. Modification Schemes for Association Rule  Hiding  In the following five modification schemes for rule hiding are introduced, respectively. For the ease of presentation, a transaction is sometimes viewed as a bit-vector as mentioned before.

Scheme 1: Modify entries from 1s to 0s. If an item in X ? Y is deleted from a transaction containing X ? Y, Supx?y and Confx?y will be decreased. X ? Y is hidden if we repeat this operation until one of the conditions.

Scheme 2: Modify entries from 0s to 1s. As Confx?y will be decreased if we insert an item{i}X into a transaction that contains X but fig and does not contain Y. X ? Y is hidden if we repeat this operation until condition 2 in Definition 2.3 holds.

Scheme 3: Modify entries from 1s to 0s or from 0s to 1s.

Scheme 1 can guarantee to satisfy the constraint F-T- H, but Scheme 2 cannot. Both schemes may violate the other two constraints. Scheme 3 alternately uses them to decrease the supports and confidences of sensitive rules. Similarly, this scheme guarantees to satisfy the constraint F-T-H but may violate the others.

We adopt Scheme 3 to modify the database, and use the constraints N-T-H (Not To be Hidden) and N- T-G (Not To be Generated) as the guides to avoid the side effects. To consider both the numbers of hidden sensitive rules and modified entries, we include the correlation among rules in our modification scheme.

The following lists the three considerations in hiding a sensitive rule, say a ? b:  ? Correlation with the other sensitive rule, say c?b: From the transactions that contain abc, deleting b is better than deleting a since the former can affect both rules.

? Correlation with a nonsensitive rule, say b?a: Inserting a into the transactions that do not contain b is better than deleting a or b from the transactions containing ab because the latter may also hide b ? a.

? Correlation with a spurious rule, say ab ? c: Inserting a into the transactions that do not contain b is better than deleting a or b from the transactions containing ab because the latter may also generate ab ? c.

We present the properties that will be used to identify the valid modifications. Since Scheme 3 is a combination of Schemes 1 and 2, the properties are divided into two groups. Using Scheme 1 to hide a rule, the following properties indicate the minimal number of transactions that should be modified.

Property 1.

Let ?XUY be the set of all transactions containing XUY. To hide X ? Y by removing items in XUY from the transactions in ?XUY , the minimal number of transactions that should be modified, called the minus support count, is computed as: MSC (X?Y) = C (XUY) - [|D| *MST] + 1     5 Property 2.

To hide X ? Y by removing items in Y from the transactions in ?XUY, the minimal number of transactions that should be modified, called the minus consequent confidence count, is computed as: MCCCX?Y = C (XUY) ? [Cx*MCT] +1     6 Property 3.

To hide X ? Y by removing items in X from the transactions in ?XuY , the minimal number of transactions that should be modified, called the minus precedent confidence count, is computed as: MPCCX?Y= [(C (XuY) ?Cx*MCT)/ (1-MCT)] +1 7

VI. SYSTEM DESIGN     To develop and implement sensitive rule hiding system with all considerations such that for given a transaction database, MST, MCT, a set of sensitive rules, and the user-specified constraint, no lost rule, no false rule, or both, we have to modify the database such that the user specified constraint is satisfied while the sensitive rules are hidden as many as possible. To solve this problem, we propose a approach that strategically modifies the database to decrease the supports or confidences of the sensitive rules. Following is the system architecture for sensitive rule hiding.

Fig. 2 Framework of Rule Hiding [5]  Initially, the original database is converted into the transaction table. Also database is mined to find the sensitive rule table and the nonsensitive rule table.

Then out of all sensitive rules, we hide one by one all sensitive rules. At a time only one rule is considered.

Then we hide the rule that is we select the items and transactions from original database for modification.

Here we apply the modification scheme to decrease the support and confidence of the rule. When we hide the rule, association rules must be updated and the original database is modified. That modified database should be released. For rule hiding process first the items and transactions are selected for modification that is we modify the original database. Then the modified database is released. If some sensitive rules are not hidden, the user can release as it is, release nothing, or relax the constraint to hide more sensitive rules.



VII. ALGORITHM FOR DECREASING SUPPORT AND CONFIDENCE  Following algorithm is being used to hide sensitive association rule. The algorithm is given below.

Input: A set  of rules to hide The Source Database DB Minimum Support Threshold Output: The database DB is transformed so that rules cannot mine.

Begin for each rule R in do { Repeat until (Confidence(R) <MCT)  { 1 T= {t in DB/t supports R} 2 select transaction t in T with number of items 3 select the item I in RHS(R) with minimum impact on the (| RHS(R)|-1) itemsets 4 delete I from t 5 decrease support of R by 1 6 Recalculate the confidence of R } 7 Remove R from  end Following table depicts the hiding process of association rule by applying above algorithm.

TABLE 1 Hiding Strategy by Decreasing Support and  Confidence     VI EXPERIMENT RESULT The paper mainly describes the work in two directions, one is effective mining of association rule and second is hiding sensitive association rule which are produced in first stage at time of mining with limited side effects. For mining association rule following dataset is being used, that is donated by Tom Brijis and contains anonymized retail market basket data from an anonymous Belgian retail store. The retail.dat.txt file contains 88163 transactions. Each line corresponds to set of transaction and each number corresponds to set of set items purchased by customer.

Fig. 3 Retail.dat.txt Dataset [11] Following results shows comparison of classical apriori and improved apriori algorithm.

Fig. 4 Comparison of Classical and Improved Apriori Algorithm  For hiding process of sensitive rule, we have taken supermarket database and mine the association rule with MST=30% and MCT=60 and we have got following rules as show below in which there are two sensitive rules Milk=>Beer and Baby Powder=>Diaper whose confidence is 100% and are marked as sensitive rule. It is shown in figure 5.

Fig. 5 Mining of Association and Marking Of Sensitive Rule  After applying above algorithm and scheme 1 that described earlier the sensitive rule Baby Powder=>Diaper is hidden and can be viewed even if we mine the database. So even if we released our database no one can make misuse of database by applying mining techniques. The hiding process of sensitive is shown in figure 6.

Fig. 6 Hiding of Sensitive Rule

VII. CONCLUSION The improved Apriori algorithm is proposed to update the classical Apriori algorithm. Apriori algorithm may need to generate a huge number of candidate generations. Each time when candidate generations are generated, the algorithm needs to judge whether these candidates are frequent item sets. The manipulation with redundancy results in high frequency in querying, so tremendous amounts of resources expended in time or space. Here we have improved Apriori algorithm through pruning candidate item sets by the infrequent item sets, the present algorithm can reduce the number of database scanning and the redundancy while generating subtests and verifying them in the database.

Experimental result shows that improved Apriori algorithm takes less time for generating frequent itemsets as compared to classical Apriori algorithm.

Also the strong rules which are generated by Improved Apriori algorithm based on MST and MCT are hidden by applying decreasing support confidence algorithm.

We have also taken care that while hiding sensitive rule no false rule should be generated so that integrity of database is maintained. In future much focus will be given to hide multiple rules at one time.

