Realistic Team Formation using Navigation  and Homophily

Abstract?? This paper proposes an algorithm for selecting a team of experts from a social network, which is represented by a weighted undirected graph. Each node in the graph represents an individual who has one or more skills. We introduce the concept of realistic team formation and its associated constraints and assumptions.

The main constraint is a local view of the network resulting in an absence of pre-computed network statistics.

Nodes in the network are assumed to connect to people with whom they share common skills. Thus, this paper proposes a navigation based team formation algorithm that makes use of homophily to recruit candidates for the team. The objective is to create an effective team that can carry out a specific task. Since none of the related work has had a local view of the network, we use BfsRecruiter, a BFS based navigation algorithm as our baseline comparison. We implemented the proposed algorithm and ran many simulation experiments to measure the communication cost and effectiveness of the proposed algorithm.

Keywords?social network analysis; team formation; graph navigation; graph processing  1. INTRODUCTION ?  Social networks such as Facebook, LinkedIn, MySpace, and others can be used as a medium to connect people. It provides a great platform for recruitment agencies looking for candidates to fulfill their job openings. Since possible candidates would be connected to other professionals from their alma mater, it provides an excellent platform for finding multiple candidates for multiple job openings or entire multi-skilled teams for a specific project. This paves the road for the topic of Team Formation in social networks.

Social networks can be visualized as a graph where the nodes represent a relationship between them, e.g., friends in Facebook. Normally relations and friendships are established when there are interest, communities or geographical locations in common. To build a successful team for a certain project many factors should be taken into consideration. In our work we consider a social network that consists of people (nodes) and relationships (edges). An edge between two nodes means that two nodes are friends. Every node has a set of skills and the network is assumed to be of experts in their fields.

This paper introduces a homophily based navigation algorithm for team formation in thrid party social networks. This work also defines the term realistic social network team formation. Using the formulation of a social network, the proposed formulation leads to an unweighted undirected  graph G(V,E). Since none of the previous work in the specific application has studied the effects of team formation where there is an impartial local view of the network, we will use Breadth first Search (BFS) as a baseline for the sake of comparison. The algorithm is able to find short paths even though they know very little about the target individual or the network.

We identify two network characteristics that can be used to guide navigation:  ? The first is homophily- the similarity between the two sets of skills of two nodes.

People tend to be acquainted with other people who have similar skills or the same occupation. In this paper, the homophily of two nodes is computed as the distance between the two skill vectors. This distance is calculated using the WordNet ontology.

? The second is the existence of high-degree nodes. Some people have a large number of acquaintances and act as hubs that connect different social circles.

Both of these characteristics are widely observed in real-world networks, and both lead directly to navigation algorithms. Consideration of homophily gives rise to a navigation algorithm that visits the neighbor that is the most similar to the target node (e.g., a java programmer who is friends with a target C++ programmer). The consideration of degree enables us to locate communities or clusters of a specific skill by starting from the node with the highest degree. This latter characteristic is outside     the scope of this paper and will be addressed in our future work (see Section 6).

The rest of the paper is organized as follows; Section 2 gives a brief description of the prior work, Section 3 will introduce the definitions and terminology that will be used throughout the rest of this paper. Section 4 will explain our proposed algorithm in detail, Sections 5 will relay the details of implementation and findings, and finally Section 6 sums up and gives a brief insight into the future work we will be exploring.

2. PRIOR WORK  Different types of groups in online social networks are discussed in [2]. The team formation problem has been studied in the operations research community [4, 6, 5, 8]. These studies have tried to solve this problem as an Integer Linear Program, using methods like branch-and-cut [6], genetic algorithms [8], and simulated annealing [4] to optimize the way of selecting the people in accordance with the required skills.  From a psychological/anthropological perspective, Askin and Fitzpatrick [3] focused on forming qualified teams with multi-functional skill requirements by computing the effectiveness using Kolbe Conative Index. Unlike our study, most of the above studies ignore the social connection among team members.

We consider the social network structure and choose the team members accordingly.

Gaston and des Jardins [9] studied dynamic team formation and propose several approaches for agent organized networks (AONs) and how they affect the performance of the organization. Lappas et al. [1] studied the team formation problem taking into account the graph structure.  Datta et al. [18] added a capacity constraint on the workload of each team member. Anagnostopoulos et al. [16] uses tasks that arrive in an online fashion to form a team with a balanced workload and small communication cost.

Kargar et al. [19] identified team leaders in order to search for a team and Juang et al. [17] proposed two efficient algorithms to accelerate the discovery.

However, all of these authors assumed that they had a commanding global view of the network as well as ignoring the dynamic behavior of social networks.

In our setting we do not have any statistics on the network prior to the search. In our previous work [12], we proposed a strategy to evaluate the individuals? knowledge to help selecting the team members. H. Wi et al. [10] has done complementary work to ours. L. Backstrom [7] provided useful information about different aspects of team formation in large social networks.

Unlike the majority of the related work, this paper will introduce a number of constraints and  assumptions associated with realistic team formation:  ? Impartial network view: Social networks are dynamic in nature. Vertices and Edges are being created and deleted as people join the network, or connect with other people or deactivate their accounts. Diameter or spanning tree based objectives are not robust to the changes (addition/deletion of edges) in the social network [1][12].

? Unclustered network: For the purpose of this paper, we will assume that network in question is not clustered on skills. Note however that an edge between two vertices exists only if they satisfy the similarity constraint (see Section 5.2).

? Absence of network statistics: The criteria explored in the literature so far for measuring the effectiveness of teams are based on the shortest path distances, density, and the cost of the minimum spanning tree of the sub- graph induced by the team. Assuming you?re not Facebook or LinkedIn or the owner of the social network, chances are you won?t have the over all network statistics that allow you to find optimal teams and compute optimal social paths [1].

3. PRELIMINARIES  Let us now define the necessary variables that are crucial to our problem. We assume a set of potential candidates consisting of n individuals called ! =  ? {!!, !!,? , !!}, ?  the universe of candidates,  i.e. our network. We also define ! = {!!, !!,? , !!} to be the universe of skills we can choose from.  We can map the relationship between these two sets by acknowledging that every individual is associated with a set of skills !! ?  ?!.

If !! ? ? !! we say that person !! has skill ?!!.

Now we can define a task ! as the subset of skills and their corresponding levels, that are required to complete the job, that is ! ? !. Since !! ? ? ! then skill x! is required by the task ?!. The support of a skill !( ?!!) ? is defined as the set of individuals or nodes in !  that possess  ?!! . We assume the individuals of ! communicate based on the edges of an undirected graph ?! ?(!,!). The set of edges ! exists if a pair of nodes is friends. We will call our newly formed team ?!(!?) which is a connected subgraph of the network ! ! .

4. SMARTRECRUITER ALGORITHM ?  This section will explain the team formation algorithm and the methodology behind it.

Figure 1: Sample social network consisting of nodes and their respective friendships and skills.

A. Uninformed Search vs. Informed Search The most basic and na?ve version of navigation  is one that is uninformed. Such an algorithm can only make use of the knowledge provided in the search problem. The choice of which fringe node to expand depends on the characteristics of its path such as depth and cost. In graph theory, there are two such algorithms that fit the description, namely, Breadth First Search (BFS) and Depth First Search (DFS). BFS starts from the root (selecting some node as the root in the graph) and expands its neighbors first before moving on to the next level.

DFS starts from the root (selecting some node as the root in the graph) and explores as far as possible along each branch before backtracking. BFS is better suited for the scope of social network analysis. Thus the baseline algorithm for team formation using navigation will use BFS to traverse the network and find the candidate node.

Our team formation is of the latter type of search algorithms, informed search. Informed search exploits additional knowledge about the problem that helps direct search explore more promising paths. They expand the fringe node with lowest cost according to an evaluation function called a heuristic, h(n). From this class of algorithms, we will use Greedy Best First Search in this paper, as it is the simplest form of informed search for the type of graph used by our network setup.

Inspired by BFS and Greedy Best First Search, the following team formation algorithms build on its foundation: SmartRecruiter, an informed heuristic search algorithm that navigates through the most promising paths. Best-first search works by estimating the promise of node !!  by a "heuristic evaluation function h(n) which, in this case, is based on homophily that compares the similarity or  dissimilarity of a node and the set of skills we seek, T = { !! , !! , .., !! }.  BfsRecruiter, a baseline algorithm that navigates and searches based on Breadth First Search (BFS) algorithm forming teams. BFS navigates the social network in search of a single candidate node to satisfy a subset of task T.

It is then successively repeated with the remaining skills, ! ? ? !, ? until all skills in the task T are satisfied.

B. SmartRecruiter: An informed search We will use the example network in Figure 1 to  explain the operation of SmartRecruiter. Let us start by taking an example. A manager at TransAtlantic Systems decides to form a team of experts in order to design a new router device. He decides that the skills needed for this task are: Algorithms, AI, Machine Learning, C++. The manager is looking for a small and efficient team to carry out this project. Of course, the size of the team directly affects the cost of the project. Smaller teams tend to cost less. A team where the friendships between its members are of a lower degree has lower communication cost  We will assume the set of possible candidates in the network. Given a task T = {Algorithms, AI, Machine Learning, C++} which is subset of the superset X of all skills, ! ? !. Throughout the rest of this paper, we will refer to a candidate with the more general term node. Let?s assume node E as our root. Node E is pushed into the priority queue ToVisit resulting in ToVisit = {E}. Node E is then removed from the front of the queue and processed.

Node E has skills{Networking, Computer Security, Cryptography}. Notice that node E has none of the skills that we are looking for. The processing of this node is complete and all its neighbors are inserted into ToVisit.

The order that these nodes are arranged in the priority queue is decided by ? !!  ?,! ? , a heuristic decision function based on homophilies. As mentioned earlier in this section, the most intuitive homophily for this specific network setup is one that is based on an individual?s skills. In a professional network, we would expect data mining specialists to be connected together, UI designers to be connected together with possible sparse links between the two communities. It follows that the Artificial Intelligence community would have good relations with the Robotics community. This relation can be found in an ontology. An ontology represents knowledge as a set of concepts within a domain, and the relationships between those concepts. We use the WordNet ontology to deduce that Robotics and Artificial Intelligence share a common ancestor.

This deduction is done using the Wu-Palmer semantic similarity function [7]. Wu-Palmer is based on path length. It counts the number of nodes  {C++, Machine Learning, Data Mining}  {Robotics, Fluid Mechanics, Rheology}  ?     or relation links between nodes in a taxonomy. The lower the distance between two concepts, the higher their similarity. Thus we introduce the following heuristic function to order the nodes in the priority queue:    ? !!  ?,! ? = ? !"# ?{?!!?!!  ?!"# !!?! ?, ?!! } ? !! ? !!!

! ?! ? ?	 ?	 ?	 ?	 ?	 ?	 ?	 ?	 ?	 ?(1)	 ?    where p!  is the node with ID i, ! ? contains the unfulfilled skills of task T, Wup is the Wu-Palmer semantic similarity function, !!  and !!  represent individual skills for each node p! and remainder of the task ! respectively, !!  and !!  are the number of nodes and number of skills in !,  respectively and i, j and k are indices. To calculate the homophily of node p! and the remaining subset of the original task !, we determine the distance vector of a node !!?s skills and !. We find the maximum skill similarity pair for each task skill, sum them and divide them by the number of skills giving us an average measure of similarity for each node in the priority queue.

Going back to Figure 1, the state of the priority queue is ToVisit = {D, A, C}. Node D and node A both have the same number of relevant skills; node A has {AI, Algorithms, Java} while node D has {AI, Machine Learning, Robotics}. AI, Algorithms and Machine Learning are given a semantic similarity score of 1.0 while Java is similar to C++ and gets a semantic similarity score of 0.8. It looks like the homophilies of node A and node D are equal.

However, node D has the additional skill of Robotics, which is an application of AI. Robotics will compare with AI and result in a decent semantic similarity score giving node D an edge over node A and thus a better rank. Node C has {Distributed Systems, Networking, Optimization}, skills that are semantically far from the remaining task !. Thus node D will be processed first. Node D is chosen for Machine Learning and AI, then removed from the queue and its neighbors added to ToVisit. The team !(!?) now contains {D}. ToVisit now contains {A, F, B, C} and ! ? contains {Algorithms, C++}. Even though Node F and A have the same homophily score, the priority queue data structure respects insertion-order thus node A, having been in the queue longer than node F will remain in the first position.  Since node A has the highest priority, it is removed from the queue to be processed. Node A is chosen for Algorithms and is added to the team !(!?) . Recall that our objective is to find a connected subgraph team in order to have a bounded communication cost. Since node E is the only path between the existing team !(!?) ={D} and node A, node E must be added to the team as well. This  additional node will be considered as a communication cost penalty. Since node E has no neighbors no new nodes are added to ToVisit. C++ remains to be fulfilled in our task !. Node F is processed next. Node F has the skills {C++, Machine Learning, Data Mining}. Since we?re still looking for C++, node F is chosen for C++ and added to the team and its neighbor node G added to the queue. Since task ! ?is now empty, it has been satisfied and the chosen team !(!?) ={D, A, F}.

5. EXPERIMENTS AND DISCUSSION ?  In this section, we discuss and compare the results that were obtained when the two team formation algorithms are run on realistically synthetic networks. We mainly test our results on synthetic networks constructed using Power Law.

This experiment tests the team finding algorithms on a multitude of networks with varying characteristics.

5.1 NETWORK GENERATION ? One of the main challenges of social network mining is finding a real world social network with the meta data that we need. The other alternative was to try and generate a synthetic network that would mimic a real-world social network. This way we wouldn?t have to go through unavoidable problem of wrestling with metadata modifications.

But how do we decide which nodes becomes friends? How many connections would each node have? On what basis are connections between two nodes formed?

Our synthetic networks were built with a number of parameters that would allow us to customize the network?s structure:  ? Network size: The number of nodes that make up the network.

? Minimum number of friends: The least number of connections that any node can have.

? Maximum number of friends: The largest number of connections that any node can have.

? Skill universe: The universe of skills that each node will have a subset of.

? Skills per node: The number of skills each node will be proficient in.

? Match type: Indicates whether the shared skills of two nodes !! and !! are the exact same skill or a similar skill (e.g. Java vs. Java or Java vs. C++).

? Similarity constraint: The minimum number of shared skills between two nodes required for a connection to exist between them.

Our social network generator uses a Power Law Zipfian distribution function to generate the edges between the nodes. The network is an unweighted undirected graph G (a social network) that consists of 1000 nodes. The Java Universal Network/ Graph (JUNG) is used for these experiments.

Now that we have a customizable social network generator, we are able to vary the network?s parameters introduced in Section 5.1 to test TeamFinder on a variety if networks. We experiment with three different networks with their respective parameters, as shown in Table 1.

Table 1: A comparison of the synthetic networks formed and their respective parameters.

?  Parameters Network  A B C Network Size (nodes) 1000 1000 1000  Min. friends (edges) 2 2 2  Max. friends (edges) 35 35 35  Skills universe (skills) 50 50 50  Skills per node (skills) 4 5 7  Min. num. of similar skills  2 2 2    5.2 PERFORMANCE: SMARTRECRUITER NAVIGATION VS.  BFSRECRUITER NAVIGATION      Figure 2: Performance gain of SmartRecruiter vs. BfsRecruiter	 ? ? Recall that the main goal is to create a team with the required skill levels and a team that can work  together effectively and efficiently. Therefore two measures which will be used to evaluate the possible fitness of the teams:   1. Social closeness of the team. These are people that actually know each other in the outside world, whether they are family, friends, colleagues or an acquaintance. Since the chosen team is will always be a connected subgraph, we use the diameter of the team subgraph as a measure of social closeness.

2. Team size refers to the number of team members that have been chosen. Smaller teams are easier to manage than larger teams.

Each team formation algorithm is run on the three networks. The algorithms are run offline and thus run time is not very crucial. Each algorithm is tested 200 times for each task size, starting from a different node every time. The team formation algorithm will take as input a subset of skills, Task T	 ? =	 ? {!!,	 ?!!,	 ? ..,	 ?!!}	 ? and crawl through the network searching for the subgraph team. Figure 3 shows the size of the resulting team as a function of Task Size (number of skills in task). As the plot shows, the size of the team increases sub-linearly with the number of required skills. In this paper, a constraint is put on the number of skills contributed by each candidate. A candidate may only contribute one skill towards fulfillment of the task.

5.3 EVALUATING THE QUALITY OF THE TEAMS FORMED  ? The quality of the chosen team is measured by studying the worst-case communication cost. The smaller the size the better and more efficient the team is in terms of communication between the team members. Figure 4 shows the average team formation cost as a function of the number of skills.

The x-axis represents the number of skills in a task and the y-axis represents the diameter of the resulting team.

5.4 EFFECT OF THE TASK SIZE ON THE NUMBER OF HOPS TRAVELLED  ? Here we will evaluate the performance of our SmartRecruiter algorithm. Since none of the previous work has studied the effects of team formation where there is an impartial local view of the network, we will use Breadth first Search (BFS) as a baseline for the sake of comparison. Thus this     experiment will compare between two team formation algorithms: ?  ? SmartRecruiter: an informed heuristic search algorithm that navigates through the most promising paths.	 ?  ? BfsRecruiter:	 ? baseline algorithm that forms teams based on breadth first search algorithm.

? This experiment will study the above algorithms and evaluate their performance by studying the number of hops traversed by each algorithm. This will measure the number of hops traversed by each algorithm in search of a suitable team. Every node visited in the social network is counted as a hop.

Figure 3: Comparison of team sizes formed by SmartRecruiter vs. BfsRecruiter.

Both algorithms were run on the three networks introduced in Section 5. Different task sizes from 3 to 18 were created as a permutation of the 50 skills  Figure 4: Number of hops travelled by SmartRecruiter vs.

BfsRecruiter.

universe. The two team formation algorithms in question were each given the same permutation of Task T for each task size in [3,18] and asked to find a team that satisfies the task. The experiment for each was repeated 200 times with a random starting node for each run. Figure 4 shows the results obtained from this experiment. It can be noticed from first glance that the number of hops traversed by SmartRecruiter is consistently less than those traversed by  BfsRecruiter. In fact, we can conclude from Figure 2 that the paths travelled by SmartRecruiter before locating the team are around 40% to 60% shorter than the paths taken by BfsRecruiter.

5.5 A COMPARISON BETWEEN NETWORKS OF DIFFERENT DENSITIES/NUMBER OF CONNECTIONS   The three synthetic networks used in this experiment differ in the number of skills each node has. The larger the number of skills a node has, the greater the possibility of first-degree connections a node can have. Thus, this parameter will indirectly affect the density of the network and the ease at which teams are found. In other words, the denser the network is, the smaller the number of hops travelled by the navigation algorithm. This phenomenon is displayed in Figure  5.

Figure  5: Comparing number of hops travelled by navigation algorithms on networks with A:4, B:5, C:7 skills per node.

Likewise, the density of the network affects the diameter of the newly formed team. Recall from Section 5.2 that the social closeness of the team is evaluated using the diameter of the subgraph i.e. the formed team.  In the network with four skills per node, the diameter of the formed team is longer on average than the networks with five and seven skills per node.  Networks made up of nodes with less number of skills will result in a smaller number of possible connections, thus a relatively sparser network. Sparser networks will have fewer connections thus leaving the team formation     algorithms with a smaller number of traversable paths. The path that joins the team !(!?)  = {a,c,d,g,h} will increase in length. Longer paths means that chosen nodes might be further apart thus increasing the diameter resulting in less ?social closeness? within the team. This phenomenon is shown in Figure 6.

Figure 6: Comparing diameters of teams formed on networks with A:4, B:5, C:7 skills per node.

6. CONCLUSION AND FUTURE WORK  We have introduced the scenario of realistic team formation and our proposed method based on informed navigation. Given the nature of the connections implying a certain level of similarity the proposed algorithm, SmartRecruiter uses homophily to prioritize the order in which nodes are visited.

The proposed algorithm is compared with the baseline BfsRecruiter and the results obtained show a 40% to 60% increase in performance on average.

In the future, we will limit the number of skills contributed to by each node, adding a maximum capacity. We will also study a numeber of other navigation algorithms and analyze their performance.

