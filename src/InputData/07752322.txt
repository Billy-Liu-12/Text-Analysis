EXTRACT:  New extraction algorithm of association

Abstract? Stored data in database can hide some knowledge,  which is interesting, useful to hidden knowledge discover. In this  context, an algorithms number a frequent itemsets and  association rules extraction were presented. Special feature of  these algorithms is to generation a large number of rules, making  their exploitation a difficult task. In this paper we will introduce  a new algorithm for association rules extraction. Proposed  solution is based on two points, namely: frequent itemset  extraction, and from these, it extracts association rules.

Keywords?Frequent itemsets; association rules; algorithm  EXTRACT; support; confidence.



I. INTRODUCTION  Heterogeneity and large volume of data makes a difficult  of knowledge extraction, as well slow and expensive task.

Data mining is a discipline that provided a solution for  extraction problems. Several studies [2], [3], [4], [5], [6], [7],  [8] proposed algorithms to improve quality of obtained result.

These algorithms are focused on reduction of extraction time  and cost minimization. One major disadvantage of these  algorithms is generating a very large number of association  rules. In this research we have introduced a new algorithm that  allows frequent itemset extraction and from frequent itemset  we can association rules extraction. In this regard, we use  lattice concept proposed by Will [9] for frequent itemset and  association rules extraction. It can help us an information  discovery and then knowledge detection.

In this context, some algorithms proposed solutions to  extraction problems such as Apriori algorithm [1]. In this  research, we introduced a new algorithm that frequent itemsets  and useful association rules extraction. Our EXTRACT  algorithm is based more on support and confidence concepts  than Apriori algorithm.

This paper is organized as follows: in Section 2, we  present a state of the art on extraction algorithms of frequent  itemsets and association rules. In Section 3, we propose our  algorithm of frequent itemsets and useful association rules  extraction. In section 4 presents experimental results and  analysis of them. We devote section 5 to conclusion.



II. STATE OF THE ART  We will discuss related works related a rules extraction  from database.

In [2], the approach aims to extract a condensed  representation of frequent itemset called disjunction-free sets, instead of extracting all frequent reason for collection. The  authors show that this condensed representation may be used  to regenerate all frequent itemset and their exact frequencies.

The authors proposed two algorithms to extract this  representation, based on a depth-first and a breadth-first  strategy.

In [3], the authors propose a new algorithm: Pascal. This  algorithm introduces a new optimization that is based on  pattern counting inference that relies on the concept of key  patterns. The support of frequent non-key patterns can be  inferred from frequent key patterns without accessing the  database.

In [4], the authors proposes an algorithm that is based on  closing of Galois connection, bases for association rules,  which are sets of generators for all association rules and their  support and their confidence, are defined. These bases are  made of non-redundant association rules with minimal  background and maximum consequences and are defined from  the frequent closed itemsets.

In [5], the authors present a QuantMiner, which is a tool,  the authors have developed to extract association rules  manager categorical and numerical variables. The tool is  based a genetic algorithm to dynamically discover the  numerical intervals of variables appearing in the rules.

In [6], the authors show how to adapt the level wise  algorithm to the mining of association rules in order to mine  frequent rules from a relational table. In this approach, the  consequents of extracted rules are either an interval or a set of  values, according to whether the domain of the predicted  attribute is continuous or discrete.

In [7], the authors present a scalar approach to discover  rules optimizing several criteria using a suitable genetic  algorithm traverses very important research areas and to easily  combine several criteria through the fitness function.

In [8], the authors propose a method to extract association  rules. These rules are constructed from the sequential itemset IEEE/ACM ASONAM 2016, August 18-21 2016, San Francisco, CA, USA      observed in a set of sequences. The influence on the risk that  the event "conclusion" to occur after the event or events "premise" is estimated using a semi-parametric proportional  hazards model.

Our work has same goal: it is association rules extraction.

Shortcomings of these algorithms include, response time of  association rules extraction is slow, no utility of association  rules extracted, and number of association rules extract is  difficult to manage.



III. CONTRIBUTIONS  We present a new EXTRACT algorithm, which extracts  frequent itemsets and association rules. Our method is based  on mathematical foundations of concept of Galois lattice. To  understand our algorithm operation, we present in following  basics concept. We define basic elements of formal concept  analysis.

A. Basic Concept We present some basic concepts definitions to help in  understanding and representing for our algorithm.

Frequent itemset: It?s a set of items in a number of  sufficiently big lines of a database.

? Definition 1: All subsets of a frequent itemset are  frequent.

? Definition 2: All supersets of infrequent itemset are  infrequent.

An association rule:  is defined as an implication of the  form X ? Y, such that X ? Y and X ? Y = ?.

Support: The support of a rule is calculated as follows:  Support  X ?  Y = number  of  transactions  contenenant  X and  Y  total  Number  of  transactions ??????  Whether a threshol minsup ? [0, 1], call the minimum support. Item is a frequent if sup (item) ? minsup.

Confidence: Allow to mesure the relevance of associative  rule by his confidence: The level of confidence of a rule X ?  Y is the number of transactions where X AND Y are present  to number of transactions where X is present in D:  Confidence (X ?  Y)  = support (X ? Y )  support (X) ? ????  B. EXTRACT Algorithm Our algorithm takes as input transaction table D, minimum  support and confidence given by user (Sup-Min and Conf-  Min) and variable x receives character 'x' and gives as output  all frequent itemsets and association rules. Our algorithm uses  four functions: Calcultes-Support, Combine, Eliminated-  redundancy and Extract-rule.

1) Calcultes-Support: This function has a role to  calculate support for each item.

Algorithm1: Calcultes-support  Intput: Data base D.

Output: Support of item.

1: Begin  2: x? ???  3: sup_item=0 4: For  i= 0, i? L, i++  do  5: For j=0, j? C, j++ do  6:  If (D [i, j]=x)  do 7:       Sup_item? sup_item+1  8:    End if  9:  End for 10: End for  11: Calculates-Support? Sup_item  12: End  2) Combine: It takes as input set of frequent itemsets. It  combines itemsets to finally find all combinations of possible  frequent itemsets. This function merges itemset each line for  table D, that is to say, combination is done line by line.

Combine function takes itemsets that are marked in row 1 of  table D and combines them to last line.

Algorithm2: Combine  Intput: Frequent itemset F.

Output: Combination of frequent itemset C.

1: Begin  2: x? ???  3: m= 0 4: ch= ? ?  5: k= 1  6: maxlength= 1 7: For  i from 1 to L do  8:  For  j from 1 to  c do  9:    If (D [i, j] = x)  then 10:    ch= ch+ D [0, k]  11:   K++  12:     End if 13:    T[m]= ch  14:   End for  15: End for 16: For i from 0 to m do  17:  ch? T[i]  18:  if (ch.length>maxlength) then 19:     maxlength?ch.length  20:  End if  21: End for 22: While (k? maxlength) do  23:    For   i from 0 to m do  24:     ch? [i] 25:     If (ch.length= k) alors  26:      write (ch) 27:     End if  28: End for  29: k++ 30: End while  31: End  3) Eliminates-redundancy: This function takes as input  all combinations of itemsets, it deletes all combinations that  are repeat.

Algorithm3: Eliminates-Redundancy  Intput: Combinations of itemset C.

Output: Non redundant combinations.

1: Begin  2: K= 0 3: For i from 0 to m do  4:   bool= false  5:    For  j from 0 to n do 6:      If (T[i]= T2[j]) then  7:       bool = vrais  8:     End if 9:  End for  10: If (bool= false) do  11:  T2[k]?T[i] 12: K++  13: End for  14: Eliminated-redundancy? test 15: Fin  4) Extract-rule: This function takes as input set of  frequent itemset generated by Combine function and  minimum confidence given by user, retrieving possible  association rules. It calculates confidence rules and eliminates  rules that have a lower confidence.

Algorithm4: Extract-Rule  Intput: Combination of all frequent itemset C.

Output: Association rule r.

1: Begin  2:   For i from 1 to m  do 3:     For j from 0 to n do  4:   If (i<>j) then  5:     write (T2[i] + ???+ T2[j]) 6:    End if  7:    End for  8:  End for 9: End  5) EXTRACT algorithm: Algorithm 5 is a main  algorithm, it uses previous functions for itemset frequent and  association rules extraction.

Algorithm5: EXTRACT algorithm:  Intput: Data base D.

Output: Frequent itemset and association rules.

1: Begin  2: For each transaction t ? D 3:  Sup_itemset ? Calcultes-support (D)  4:  T[i] ? Sup_itemset 5:   i++  6:   For j from 0 to i do  7:     If (Sup_itemset  ? Sup_Min) then 8:     Remove (item)  9:    If not Combine (F)  10:    End if 11:  End for  12:  End for  13: Eliminated-redundancy (C) 14: R?Extract-rule (F)  15; T1[k]? R  16: k++  17: For each rule R ? T1[k] do  18;   ????  ?: ? ? ? = ???????  ?  ? ?  support   i (3)  19;    If (conf_R ? Conf_Min) then  20:     Remove R  21:   If not 22:   T2 [m]? conf(R)  23:    m++  24:    End if 25:    End if  26: End for  27: Fin  Our algorithm consists of four steps:  ? Step 1: First step of our algorithm is to calculate  support for each itemset by Calcultes-support  function and remove itemsets that have a lower  support, given by user.

? Step 2: Second step of our algorithm is to combine  frequent itemsets using done by Combine function.

? Step 3: Eliminate redundancy by Eliminated-  redundancy function.

? Step 4: Fourth step is association rules extract. Our  algorithm uses Extract-rule function.

? Step 5: This step consists in calculating confidence of  each rule and eliminate rules that have a lower  confidence given by user.

6) Process operation: Operation of EXTRACT  algorithm can be illustrated by Figure 1, since it presents a  summary note for our algorithm.

Fig. 1. Process operation of  EXTRACT algorithm.



IV. IMPLEMENTATION  A. Hasse diagram  We used Galicia-v.2.0 [10] to see association rules. As a  transaction basis we will use table 1 with a Min_sup = 1 and  Min_conf = 1.

TABLE I. TRANSACTION BASE D.

C o  u g  h (  )  B r ea  th le  ss n  e ss  (  )  c r a c h  a ts  s a  n g  u in  s  (3 )  D if  fi c u  lt y    sw a  ll o  w in  g  (4  )  S w  a ll  o w  in g   lo ss  o f  a p  p e ti  te   (5 )  E m  a ci  a ti  o n  (  )  P a  in   (7 )  H ea  d a  c h  e (  )  N a  so p  h a  ry n  g it  is (  )  h ig  h f  e v e r (   )  r e d  u c e d  a c ti  v it  y   (1  )  a b  n o r m  a l  fa ti  g a  b il  it y  (  )  w r it  in g  d if  fi c u  lt ie  s   (1  )  tr e m  b li  n g  o f  a h  a n  d   (1  )  fl u  c tu  a ti  n g  s ti  ff n  e ss    (1  )  fa ti  g u  e a  n d    ja u  n d  ic e (   )  E x  h a  u st  io n  (   g a  n g  li o  n a  t th  e   c o ll  a r b  o n  e s  (1  )  C o  n ju  n c ti  v it  is (   )  li v  e r  sc a  rr in  g (   )  li v  e r  ci r r h  o si  s (2  )  Lung  cancer (A)  ? ? ? ? ? ? ? ?  Flu (B) ? ? ? ? ?  Parkinson's  disease (C)  ? ? ? ? ? ? ?  AIDS (D) ? ? ? ? ? ?  hepatitis C  (E)  ? ? ? ?  Table 1 below represents binary relationship of formal  context of all disease and all symptoms.

For example this binary relationship indicates that disease A  has a symptoms 1,2, 3, 4, 5, 6, 7 and 18, that is I (A) = {1, 2,  3, 4, 5, 6, 7, 18}.

Fig. 2. Hasse diagram of EXTRACT algorithm.

In figure 2, the concept <1> has as extension E1 = {A, B,  C, D} and intension as I1 = {7}.

B. Comparative study We effect a comparative study of EXTRACT with Apriori.

Figure 3 show that EXTRACT algorithm is fastest. It  generates Galois lattice for a time not exceeding a few  milliseconds from a context that contains more than 300  objects and 10 attributes.

Fig. 3. Execution time of  EXTRACT vs APriori for a fixed number of columns = 10 and variable number of lines.



V. CONCLUSION  Frequent itemset and association rules Extraction, is an  important research topic. Association rules Extraction based  on finding of frequent itemset, which is a costly step in time  and memory space.

In this research we presented a new EXTRACT algorithm,  for discovering all significant association rules between items  in a large database of transactions. Removing items and  redundant rules need a minimum support and confidence.

Good thing here is that user is involved in giving its choice by  adding a minimum support and confidence.

