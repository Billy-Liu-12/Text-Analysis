Traffic Identification in Semi-known Network Environment

Abstract?Network traffic classification has attracted more and more attentions from both academia and industry. It has been widely adopted in network management and security, such as QoS measurements. Due to rapid emergence of new applications in current network environment, it is impractical for a classification system to obtain full knowledge of a network environment. A big challenge to the identification of interested traffic comes from semi-known network environment, in which some emerging applications are not recognized by the classification system yet. In this paper, we proposed a new framework of Traffic Identification with Unknown Discovery (TIUD) by innovatively combining supervised and unsupervised machine learning techniques to meet the challenge. The proposed TIUD framework has the capability to accurately identify the interested traffic in semi- known network environment. The proposed framework is fully evaluated on a large real-world traffic dataset, with a comparison with three state-of-the-art traffic classification methods. The experimental results yield a outstanding performance of the proposed framework.



I. INTRODUCTION  Network traffic classification, with the ability to classify the network traffic according to their generating applica- tions/protocols, is considered as a fundamental tool for net- work management [1]. Specific usages of traffic classification include Quality of Service (QoS) control, protecting networks against security threats, etc. For example, to ensure QoS, the Internet service providers have to analyze the traffic transmit- ted in their networks, which can help allocate resource more efficiently. It is also essential for network administrators to gain a proper understanding of the traffic transmitted in the networks, to consolidate their control of the networks. In some circumstances, it is more interesting to get the knowledge of a particular application/protocol, rather than classify all applications in a network. For example, sometimes the network administrator wants to raise the priority of VoIP, and bring down the priority of a P2P file sharing application.

Traffic classification has absorbed much attention in the last decade [2] . There are three categories of traffic clas- sification techniques: port based techniques, payload based techniques, and statistical feature based techniques [3]. Port based techniques look up the transport layer port number in the IP packets, determining their generating protocols according to the pre-defined port numbers assigned by IANA. Port based methods can accurately identify the network traffic in early years; however, emerging P2P file sharing protocols employ dynamic port numbers or well-known port numbers (such as 80) to hide their presence, which influences the performance of  port based methods. Payload based techniques deeply inspect the content of IP packets, searching for particular character strings (i.e. signatures). Scanning payloads is time consum- ing, and keeping the signature database up-to-date requires additional human efforts. Moreover, it fails with encrypted payloads, and raises privacy issues.

Current state-of-the-art traffic classification techniques are based on analyzing externally observable statistical features of network traffic (such as packet size, inter-packet time, etc.), which relies neither on knowing the port numbers, nor on in- specting the contents of payloads. In the last few years, a large number of Machine Learning algorithms were proposed and examined on network traffic classification problem, including supervised approaches, unsupervised approaches, and hybrid approaches. Under the assumption that the knowledge of all applications in the target network is obtained (i.e. the samples of each application in the network are available for training), a number of promising results are reported in the literature.

However, this assumption is not always reliable since new applications are emerging day by day [4]. When in a semi- known network environment (i.e. some applications in the network are previously unknown to the classification system, while some are known), the performance of conventional traffic classification methods are influenced severely due to the lack of knowledge of the network environment. The problem of semi- known network environment is discussed in detail in section III.

In this paper, a novel unknown discovery framework is proposed to accurately identify the target application in the semi-known network environment. To extract the information of unknown applications from the semi-known environment, the proposed framework innovatively incorporates the idea of semi-supervised learning into a extended binary classification scheme. The major contributions of our work are summarized as follows.

? We propose a robust traffic classification frame- work, Traffic Identification with Unknown Discov- ery(TIUD), combining supervised and unsupervised learning to accurately identify interested network traf- fic in semi-known network environment.

? In the proposed framework, a new method of unknown applications discovery is presented to extract the sam- ples of previous unknown traffic from a set of unla- beled network traffic automatically and effectively.

? We evaluated the proposed framework on a large   DOI 10.1109/CSE.2013.91    DOI 10.1109/CSE.2013.91     traffic database which consist of four traffic traces.

The proposed framework is compared with three state- of-the-art traffic classification methods, in the semi- known environment.

The rest of this paper is organized as follows. Section II provides a critical review of the flow statistical feature based traffic classification methods, including methods for known environment, unknown environment, and semi-known environ- ment. Section III states the problem of traffic identification in semi-known network environment. In Section IV, the proposed Traffic Identification with Unknown Discovery framework is presented, followed by a report of experimental results in Section V. Finally, Section VI concludes this paper.



II. RELATED WORKS  Current research of network traffic classification is focused on applying Machine Learning techniques into statistical fea- ture based methods [3] [5]. Based on whether the identification system obtains full knowledge of the network environment, these works can be categorize into methods for known environ- ment, unknown environment, and semi-known environment.

A. Methods for Known Environment  Under the assumption of known environment, all applica- tions in the network are pre-recognized by the identification system, thus, the identification system obtains a set of labeled training samples for each application class in the network.

Traffic classification in known environment usually employ supervised ML methods, in which a classifier learns the knowledge of each class from a set of pre-labeled samples, and then classify a new incoming flow according to the knowledge it has learned.

Early works focus on employ different ML algorithms in traffic classification. In 2005, Moore and Zuev [6] applied the Naive Bayes technique to classify network traffic by applications based on flow level statistical features. This work was extended in 2007, the authors [7] applied the Bayesian neural networks to further improve the classification accuracy.

Roughan et al. [8] tested two common methods, Nearest Neighbour (NN) and Linear Discriminant Analysis (LDA) on a simple feature set consists of five flow-level features. Williams et al. [9] evaluated and compared five supervised machine learning algorithms including Naive Bayes with discretization, Naive Bayes Kernel Estimation (NBKE) C4.5 decision tree, Naive Bayes tree, and Bayesian network. Bonfiglio et al. [10] proposed a framework which based on two complementary techniques, Person?s Chi-Square and stochastic characterisa- tion, to detect Skype traffic.

Later works started to address practical problems when applying ML algorithms in real world data. Considering that in some situations, only partial information of the traffic flows are available, Erman et al. [11] proposed an algorithm which can estimate the missing statistics in uni-direction feature set.

Crotti et al. [12] proposed constructing protocol fingerprints by using three simple IP packet features: size, inter-arrival time, and arrival order. Bernaille et al. [13] counted the size of the first few packets of SSL connections to recognize SSL traffic. Since it only needs the information obtained from the first few packets, it is capable for real-time traffic  classification. However, Nguyen and Armitage [14] argued that sometimes the boundary of different flows are obscure.

They proposed training the classifier by using sub-flow features which collected from different stage of a full flow, and classify incoming flows based on recent few packets. Zhang et al.

[15] incorporate flow correlation into supervised classification algorithms to further boost the classification performance. Jin et al. [16] proposed combining a series of simple linear binary classifier, each of which can be trained in parallel to achieve scalability. The similar idea of classifier combination is also applied in Callado et al.?s work [17].

The supervised methods can only work on the dataset consisting of several known applications, while the real-world network environment should have a large amount of traffic that are not generated by known applications. Simply applying the supervised methods will inaccurately identify the novel traffic as from known applications.

B. Methods for Unknown Environment  In the unknown environment, traffic clustering can group a set of unlabeled traffic flows in such a way that flows in the same cluster are more similar to each other than to those in other clusters. A further process is needed to map traffic clusters to the applications. Then, an incoming traffic flow can be classified to the application of its nearest cluster. McGregor et al. [18] proposed grouping traffic flows into a number of natural clusters using the Expectation Maximization (EM) algorithm, and manually label the clusters as bulk transfer, single and multiple transactions, and interactive traffic. Zander et al. [19] applies AutoClass algorithm with a feature selection process to cluster traffic flows into applications. Erman et al. compared EM based clustering algorithm with supervised Naive Bayes algorithm in [20], and evaluated and compared three unsupervised algorithms, K-Means based clustering, DB- SCAN based clustering and AutoClass based clustering in [21]. Bernaille et al. [22] applied the K-Means algorithm to cluster traffic and labeled the clusters to applications by using a payload analysis tool. They mentioned that the cluster does not belong to any known applications would be assigned as unknown; however, they didn?t evaluate the performance of unknown identification in their experiment.

Some works based on predefined characteristics can also deal with unknown environment problem. Glatz et al. [23] proposed classifying Internet one-way traffic without training with any labeled samples, but based on some predefined rules.

Iliofotou et al. [24] systematically combine network-wide behavior and flow-level features of applications without using application-specific knowledge. They firstly group network flows based on flow-level features, and then classify each group based on network-wide behavior graph.

Drawbacks of these approaches are obvious. In unsuper- vised clustering methods, an additional step is needed to map clusters to candidate classes, which is usually relying on man- ual inspection and analysis on the clusters. Predefined rules usually involve expert?s effort. Moreover, classification rules are application specified, and different applications require redesign of classification rules.

C. Methods for Semi-known Environment  Strictly speaking, the problem of semi-known environment has not been carefully investigated in the field of network traffic classification. We argue that the assumption of semi- known environment for real-world networks is more realistic than the known or unknown environment. In the semi-known environment, some applications are previously recognized by the traffic identification system, while others are not.

Este et al. [25] applied one-class Support Vector Machine (SVM) technique with parameter optimization to classify network traffic. Their proposed approach potentially have the capability to detect unknown applications. However, the classification boundary is trained only with positive samples, which may be biased due to the lack of negative samples.

A similar idea is applied in [26], the authors proposed a Subflow scheme, which identifies each application in isolation, instead of distinguishing one from the others, by incorporating subspace clustering method. However, the binary classifier for each application relies on a predefined distance threshold, which may vary in different dataset.

Erman et al. [27] proposed a semi-supervised approach to deal with known and unknown applications. A number of labeled flows and unlabeled flows are gathered for cluster- ing, the obtained clusters are then identified based on the labeled flows in each cluster. This approach demonstrates the capability of handling semi-known environment; however, the performance of traffic classification in semi-known en- vironment is not evaluated. Moreover, the trade-off between generating high-purity clusters and producing false unknown clusters needs to be considered. Based on semi-supervised method, some extended work have been proposed. Casas et al.

[28] proposed incorporating sub-space clustering into semi- supervised method. Liu et al. [29] applied semi-supervised method to classify encrypted traffic by using the composite feature set which combined the first 40-Bytes payload with flow level statistical features. They all face the same problem as in [27].



III. PROBLEM STATEMENT  This section talks about the problem of semi-known net- work environment and its impact on traffic identification. Here, traffic identification focuses on accurately recognizing the traffic of an interested application/class.

In the semi-known network environment, we suppose that a traffic dataset, ?, consists of an interested class ?t, K other known classes and U unknown classes.

? = {?t, ?1, ..., ?K , ?1, ..., ?U}  The research problem is  ? given a set of labeled training data for the known classes, {?t, ?1, ..., ?K}, how we can identify the traffic of ?t.

The difficulty of addressing this problem is due to a lack of information about U unknown classes. The labeled training data will over-fit the interested class ?t and K other known classes. In other words, the traffic of U unknown classes will severely affect the accuracy of the traffic identification. The  2H 1H2f  1f  Fig. 1: Problem illustration  ??? ???? ???? ??? ??? ??? ??  ???  ???  ???  ??  ???  ???  ???  ???  ???  ???  ??? ? ??  ? ? ? ? ??  ???????????	?? ???  ?? ????????????	?? ???  Fig. 2: Impact of semi-known environment  following explains the impact of the semi-known environment to traffic identification through a problem illustration and some results on real data.

Fig. 1 gives a problem illustration about semi-known net- work environment. In the simple case, the rectangle indicates the interested class. The triangle class is the other known class. The unknown class is indicated by circle. Some labeled training data for the rectangle class and the triangle class are available. In particular, the information of the circle class is un- available. Suppose we aim to identify the interested rectangles by using a maximum margin classifier in this case study. Given the labeled training data, we obtain the hyperplane,H1, so that the distance from it to the nearest rectangles and triangles is maximized. Unfortunately, according to H1, a lot of circles will be inaccurately identified to the rectangle class. Even though a hyperplane H2 exists, which separates the rectangle class against other two classes, it cannot be found by using     Unknown Traffic Discovery  Robust Identification  Labelled Flows  Unlabelled Flows  Training Data TIUD  Traffic Identifier  Fig. 3: Framework of TIUD  the maximum margin algorithm. The fundamental reason is that the labeled training data does not contain the information of the circle class. Other traditional classification algorithms suffer from the same problem in the semi-known environment.

Fig. 2 shows the performance impact of semi-known envi- ronment in a real-world traffic dataset. We apply the traditional powerful classifier, random forest, to perform traffic identifica- tion. Here, F-measure is used to measure the performance of traffic identification. There are two sets of experimental results, one for known environment and the other for semi-known environment. For known environment, only the traffic gener- ated by the known applications are used in experiments. For semi-known environment, the experiments involve all traffic of known applications and unknown applications. One can see that the semi-known environment has a big impact on traffic identification, such as recognizing the traffic generated by FTP, HTTP, POP3, RAZOR, and IMAP. In these experiments, the F-measure of traffic identification decreases up to 35 percent.

It clearly shows that the problem of semi-known environ- ment is significant in the area of network traffic identification.

This paper is dedicated to address this significant problem.

A novel framework will be developed to achieve robust and accurate traffic identification in the semi-known environment.



IV. TIUD: TRAFFIC IDENTIFICATION WITH UNKNOWN DISCOVERY  In this section, we present a new framework of traffic identification, highlighting its Unknown Discovery component.

The unknown discovery component automatically extract new samples of unknown classes from traffic randomly collected from the semi-known environment. The extracted unknown class samples and the original labeled training samples are then merged to train a supervised classifier, which further identifies the interested class from the semi-known environment. Fig. 3 shows the framework of TIUD.

A. Unknown Discovery Framework  Unknown discovery is the key component in the proposed framework. We propose a two-step method to extract unknown traffic samples from the semi-known environment. The first step is k-means based identification of unknown applications traffic clusters. The second step is unknown sample extraction using binary classification. Algorithm 1 summarize the two- step unknown extraction method.

Given the pre-labeled training sets Ti and Tk, where Ti refers to the interested class, and Tk refers to other pre- recognized classes in the semi-known environment; and an  Algorithm 1 Unknown class samples extraction Require: interested class sample set Ti, other pre-labeled  sample sets Tk, semi-known environment sample set Tu Ensure: unknown class sample set U 1: Tl ? Ti ? Tk 2: T ? Tl ? Tu 3: Perform clustering on T to obtain clusters {C1, ..., Ck} 4: V ? ? 5: for i = 1 to k do 6: if Ci does not contain any ?negative? flows from Tl  then 7: V ? (V ? Ci) 8: end if 9: end for 10: Label V as positive, and Tl as negative 11: Combine Tl and V to train a binary classifier fc {V is for a generic unknown class}  12: U ? ? 13: while Classify all flows in Tu by fc do 14: if x is predicted as positive then 15: Put x into U 16: end if 17: end while  unlabeled set Tu which is randomly sampled from the semi- known environment. In the first step, we preliminary filter out some unknown samples out from Tu using a semi-supervised idea. The labeled and unlabeled samples are merged to feed k-means clustering algorithm. The k-means clustering aims to partition the traffic flows into k clusters (k ? |T |), C = {C1, . . . , Ck}, so as to minimize the within-cluster sum of squares:  argmin C  k?  i=1  ?  xj?Ci  ?xj ?mi? , (1)  where mi denotes the centroid of Ci and it is the mean of flows in Ci. The traditional k-means algorithm uses an iterative refinement technique. Given an initial set of randomly selected k centroids {m01, . . . ,m0k}, the algorithm proceeds by alternating between the assignment step and the update step [30]. In the assignment step, each flow is assigned to the cluster with the closest mean.

Cti = {xj : ??xj ?mti  ?? ? ??xj ?mtl  ?? for all l = 1, . . . , k} (2)  In the update step, the new means are calculated to be the centroid of the flows in the cluster.

mt+1i =  |Cti |  ?  xj?Cti  xj . (3)  By choosing a large k [31], we can obtain the high-purity traffic clusters, {C1, . . . , Ck}. Then, the pre-labeled training samples can be used to identify clusters of semi-known envi- ronment. The rule is,  ? if a cluster does not contain any pre-labeled samples, it is an cluster of unknown class.

While some unknown class samples can be accurately iden- tified in this simple way, its true positive rate is low, and identified unknown application samples are insufficient.

???? ???? ???? ???? ???? ???? ???? ???? ???? ????  ???  ???  ???  ???  ???  ???  ??  ??   ???  ???  ???  ? ? ??  ? ?? ? ?  ? ??  ? ??  ?????????? ?????????????  ??????	??  ?????????  ??????	??  ?????????  Fig. 4: Performance of unknown extraction  In the second step, we propose creating a supervised binary classifier in order to address this issue. The unknown class samples are regarded as ?positive? samples in the classification system. The unknown class sample set V obtained in the first step is temporally used as the training set for this ?positive? class. The labeled set which consists of samples from both the interested class and other pre-recognized classes, is regarded as ?negative? set in the classification system. Then, the ?positive? samples and the ?negative? samples are combined to train a supervised binary classifier, fc, by employing any supervised ML algorithm. Thus, we have a specific binary classifier which aims to distinguish ?positive? class from ?negative? class in Tu, so as to obtain a high-purity set of unknown class samples, U .

Fig. 4 reports the true positive rate (TPR) and the false positive rate (FPR) of unknown discovery. TPR is the rate of the sum of correctly detected unknown class traffic to the sum of all actual unknown class traffic. FPR is the rate of the sum of the traffic inaccurately detected as unknown to the sum of traffic of known class. As observed, the second step significantly improves the quality of unknown traffic samples obtained, by achieving a higher TPR and a lower FPR.

B. Accurate Identification of Interested Traffic  Given the training set of interested class Ti, the other pre-recognized classes Tk, and the unknown class U which is extracted by unknown discovery, we can build a binary classifier, fc, for the identification of interested class. Tk and U are merged together to form the negative training set, while Ti is the positive training set. Both positive and negative training sets are used to train fc, which is then able to identify the interested class in the semi-known environment. Algorithm 2 shows the identification process.



V. PERFORMANCE EVALUATION  This section reports the empirical study on the performance of the proposed framework. A large number of experiments are  Algorithm 2 Identification of interested traffic Require: interested class sample set Ti, other pre-labeled  sample sets Tk, unknown class sample set U , testing set ?t  Ensure: interested class set Lt from ?t 1: Tn ? Tk ? U 2: Label Ti as positive, and Tn as negative 3: Combine Ti and Tn to train a binary classifier fc 4: while Classify all flows in ?t by fc do 5: if x is predicted as positive then 6: Put x into Lt 7: end if 8: end while  TABLE I: Traffic traces  Trace Data Duration Link Type Volume keio 2006-08-06 30 mins edge 16.99 GB wide08 2008-03-18 5 hours backbone 197.2 GB wide09 2009-03-31 5 hours backbone 224.2 GB isp 2010-11 7 days edge 665.7 GB  carried out on a complex traffic dataset to compare the pro- posed framework with the state-of-the-art traffic classification methods.

A. Experiment Dataset  In this paper, four Internet traffic traces are used for our experimental study. They are captured from three Internet positions located around the world, so the sampling points are heterogeneous in terms of link type and capacity. The collection time ranges from 2006 to 2010, covering five recent years in which the Internet has grown and evolved rapidly.

Since either partial or full packet payload is preserved in these traffic traces, we build the ground truth (i.e. the actual classes of traffic flows) with high confidence. The KEIO and WIDE traces are provided by the public traffic data repository, maintained by the MAWI working group (http://mawi.wide.ad.

jp/mawi/). The KEIO trace is captured at a 1Gbps Ethernet link in Keio University?s Shonan-Fujisawa campus in Japan and was collected in August of 2006. The WIDE-08 and WIDE- 09 traces are taken from a US-Japan trans-Pacific backbone line (a 150Mbps Ethernet link) that carries commodity traffic for WIDE organizations. The original traces were collected as part of the ?A Day in the Life of the Internet? project, which lasted 72 hours from March 18th-20th, 2008, and 96 hours from March 30th to April 4th, 2009. Forty bytes of application layer payload are kept for each packet, while all IP addresses are anonymized in KEIO and WIDE traces. In addition, the ISP data set is a trace we captured using a passive probe at a 100Mbps Ethernet edge link from an Internet Service Provider located in Australia. Full packet payloads are preserved in the collection without any filtering or packet loss. The trace is 7 days long, starting on November 27th, 2010.

We focus exclusively on the TCP traffic that constitutes the vast majority of traffic (up to 95%) in the observed networks.

In consideration of practical uses, we adopt a 900-second idle timeout for flows terminated without a proper tear-down. To establish the ground truth in datasets, we develop a DPI tool matching regular expression patterns against payloads. Two     TABLE II: Unidirectional statistical features  Type of features Feature description Number Packets Number of packets transferred 2  in unidirection Bytes Volume of bytes transferred 2  in unidirection Packet Size Min., Max., Mean and Std Dev. of 8  packet size in unidirection Inter-Packet Min., Max., Mean and Std Dev. of 8 Time Inter Packet Time in unidirection  Total 20  Fig. 5: Class distribution of the experiment dataset  distinct sets of application signatures are developed based on previous experience and some well-known tools, such as the l7-filter (http://l7-filter.sourceforge.net) and Tstat (http: //tstat.tlc.polito.it). The first set is designed to match against the full flow payload (for the ISP trace). For the remaining traces, in which only 40 bytes of payload is available for each packet, we tune the second set of signatures to match against early message keywords. Some efforts of manual inspection were also made to investigate the encrypted and emerging applications.

To evaluate the proposed framework, we create a complex dataset by randomly sampling in the pool of these four traffic traces. Considering statistical significance, unrecognized traffic of the DPI tool is excluded from experiments. Finally, the complex dataset is constituted by over 638,000 traffic flows from 10 major traffic classes, and 16 small traffic classes.

Figure 5 shows the distribution of traffic classes in the dataset. 20 unidirectional flow statistical features, as listed in Table II, were extracted to represent traffic flows.

We applied feature selection to further remove irrelevant and redundant features from the feature set [32]. The process of feature selection yields 10 features for the complex dataset.

How can we simulate the unknown environment in ex- periments? The traffic unrecognized by DPI may not be generated by real unknown applications. In fact, we do not have real unknown applications in hand. To effectively evaluate the proposed framework, in this work, we manually set the class labels of a few major classes and all small classes as ?unknown?, simulating them as the generic unknown class.

Thus, in the dataset, one major class is regarded as the interested class, a few major classes are performing the pre- recognized applications, and the other major classes and all small classes are acting as the unknown class. In experiments, the dataset is divided into three disjoint parts: a pre-labeled set, an unlabeled set, and a testing set. The flows from unknown class are removed from the pre-labeled set. For the interested class and the other pre-recognized classes, a small percentage of flows are randomly selected to form a labeled training set.

It is important to note that no labeled samples of unknown class is available for training the classification system. Some flows are randomly selected from the unlabeled set and used in the proposed framework. The testing set is used to evaluate the proposed framework.

B. Performance of Traffic Identification  A large number of experiments were conducted to evaluate the proposed framework. Each experiment was run 50 times, and the average results were reported.

Three major classes in the dataset, BT, SMTP, and DNS, were set as ?unknown?, to simulate the unknown classes in the semi-known environment. To evaluate the performance of different classes, we set each known class as the interested class in turns. Since any supervised ML algorithm can be implemented in the proposed framework, in our experiments, we incorporated Random Forest algorithm into the proposed framework. The proposed framework with Random Forest was compared with the conventional Random Forest algorithm, as well as other two state-of-the-art classification methods, semi-supervised method [27] and one-class SVM [25], which are also capable for identifying traffic in the semi-known environment.

We randomly selected 1% flows from each pre-labeled class as the labeled training samples for all methods. Besides, the proposed framework and Erman?s semi-supervised method involve a number of unlabeled flows in the training stage, we randomly selected 1% flows from the unlabeled dataset as unlabeled training samples.

Fig. 6 reports the F-measure of the proposed framework and three competing methods. In class FTP and IMAP, the F-measure of TIUD was approximate 10% higher than the second best method, one class SVM. In class HTTP, the F- measure of TIUD was improved by 14%, compared to the second best, semi-supervised method. In class POP3, the F- measure of TIUD was 0.93. The F-measure of one class SVM and semi-supervised method were 0.87 and 0.84, respectively, both of which were much higher than Random Forest (0.58).

In class RAZOR, TIUD, semi-supervised and one class SVM achieved high F-measures (0.98, 0.93 and 0.97, respectively), while the performance of Random Forest was poor (0.75). The semi-known environment in this experiment has little effect on the class SSH and SSL, therefore, all of the four competing methods achieved high F-measures.

1) Impact of Supervised algorithm: In the proposed frame- work, the embedded supervised algorithm has been imple- mented twice, in both unknown discovery step 2 and interest traffic identification. Fig. 7 shows the F-measure of the pro- posed framework when embedding KNN, C4.5, and Random Forest. One can see that in each of the classes which were     ??? ???? ???? ??? ??? ??? ??  ???  ???  ???  ??  ???  ???  ???  ???  ???  ???  ???  ? ??  ? ? ? ? ??  ???????? ????????  ???????????????   ??	???????????  ??? ????????  Fig. 6: Overall performance  ??? ???? ???? ??? ??? ??? ??  ???  ???  ???  ??  ???  ???  ???  ???  ???  ???  ???  ?  ? ??  ? ? ? ? ??  ?????????  ????  (a)  ??? ???? ???? ??? ??? ??? ??  ???  ???  ???  ??  ???  ???  ???  ???  ???  ???  ???  ? ??  ? ? ? ? ??  ????????   ???   (b)  ??? ???? ???? ??? ??? ??? ??  ???  ???  ???  ??  ???  ???  ???  ???  ???  ???  ???  ?  ? ??  ? ? ? ? ??  ???????? ????????  ??? ????????  (c)  Fig. 7: Impact of supervised algorithms  affected by the semi-known environment, the improvement of adopting TIUD framework can achieve 14% to 25% for KNN, 17% to 31% for C4.5, and 17% to 35% for Random Forest.

This observation further proves that TIUD framework is robust and can be implemented on different supervised algorithms.

2) Performance of Unknown Discovery: From experiments we observed that the superior performance of the proposed framework owes to the efficient unknown discovery. We be- lieve that the proposed unknown discovery method extracts sufficient information for the traffic classification system to learn the unknown class. To evaluate the efficiency of unknown discovery component, we compared the proposed framework which employs the unknown discovery component, with a specially designed experiment. In the comparative experiment, we treated the unknown class as one of the pre-recognized classes, and randomly sampled a number of traffic flows from the unknown class, as well as other pre-recognized classes, to form the negative training set for the final binary classifier.

Note that the number of flows sampled from the unknown class  is same as the number of unknown flows extracted by unknown discovery in TIUD. Fig. 8 reports a comparison of F-measures of TIUD and random sampling, by setting different class as the interested class. The supervised algorithm employed in both experiments is Random Forest. The result shows that the performance of unknown discovery in TIUD is nearly as good as random sampling.



VI. CONCLUSION  This paper addressed a new problem of identifying the interested traffic in a semi-known environment, where not all applications are pre-recognized by the classification system.

Conventional traffic classification methods perform poorly, due to insufficient knowledge of the semi-known environment (i.e.

the generic negative class); a number of traffic flows from the unknown class may be classified as interested class, which reduces the classification precision of the interested class.

We proposed a novel robust traffic classification framework, TIUD, which can accurately identify the interested class in     ??? ???? ???? ??? ??? ??? ??  ???  ???  ???  ??  ???  ???  ???  ???  ???  ???  ???  ? ??  ? ? ? ? ??  ?????  ???? ???????  Fig. 8: Comparison of TIUD with random sampling  semi-known environment, by dramatically reducing the False Positive predictions. A large number of specially designed experiments were carried out on a large-scale dataset which is created based on four real-world traffic traces. The results showed that the proposed TIUD framework significantly out- performs other three state-of-the-art methods when identifying interested traffic in the semi-known environment.

