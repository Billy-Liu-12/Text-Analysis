EXTRACTING MEMBERSHIP FUNCTIONS IN FUZZY DATA MINING BY  ANT COLONY SYSTEMS

Abstract: Ant Colony Systems (ACS) have been successfully applied  to optimization problems in recent years. However, few works have been done on applying ACS to data mining. This paper proposes an ACS-based algorithm to extract membership functions in fuzzy data mining. The membership functions are first encoded into binary bits and then fed into the ACS to search for the optimal set of membership functions. An example is given to demonstrate the proposed algorithm.

Numerical experiments are also made to show the performance of the proposed approach.

Keywords: Ant colony system; Data mining; Fuzzy set; Membership  function; Association rule  1. Introduction  Recently, the fuzzy set theory has been used more and more frequently in intelligent systems because of its simplicity and similarity to human reasoning [8]. The role of fuzzy sets in data mining helps transform quantitative values into linguistic terms, thus reducing possible itemsets in the mining process. As to fuzzy data mining, Hong and Kuo proposed a mining approach that integrated fuzzy-set concepts with the Apriori mining algorithm [7]. In [6], a GA-based fuzzy data-mining method is proposed. Besides, Kaya et al. proposed several GA-based algorithms for fuzzy data mining [9-11]. In fuzzy data mining, the given memberships functions may have a critical influence on the final mining results.

The ant system was first introduced by Colorni et al. in 1991 [1], and then extended to the ant colony system [4].

Currently, Ant Colony Systems (ACS) have been successfully applied to several difficult NP-hard problems, such as Traveling Salesman Problem (TSP), Job Schedule  Problem(JSP), Vehicle Routing Problems (VRP) etc [2, 5, 14]. They are a heuristic approach inspired from the behavior of social insects. Ants deposit their chemical trails called ?pheromone? on the ground for communicating with others. According to the pheromone, ants can find the shortest path between the source and the destination.

The research about data mining based on the ant colony system is still rare. Previous works on ACS-based rule discovery were proposed by Parpinelli [13] and Cordon et al. [3], in which they proposed the mining of classification rules for fuzzy control systems. Very few other researches explore the association rules. Therefore, in this work, we propose an ACS-based algorithm to extract membership functions from quantitative data for fuzzy data mining. Numerical experiments on the proposed algorithm are also performed to show its effectiveness.

2. The ACS-based fuzzy mining framework  In this section, the proposed framework is shown in Figure 2 where each item has its own membership function set. These membership function sets are then fed into the ant colony system to search for the final appropriate sets.

When the termination condition is reached, the best membership function set (with the highest fitness value) can then be used to mine fuzzy association rules from a database.

The proposed framework modified the GA-based mining framework in [6]. The framework is divided into two phases. The first phase searches for an appropriate set of membership functions for the items by the ACS mining algorithm. After the searching for the solutions in the first phase is finished, the best set of membership functions is used for fuzzy data mining in the second phase.

The ACS algorithm plays an important role in extracting the membership functions in Phase 1. In the past, Parpinelli et al. proposed the AntMiner to discover association rules [13]. They coped with categorical attributes and discrete values. They showed that the ACS algorithm performed well on handling discrete values in a solution space. In this paper, we assume the parameters of a membership functions are discrete and thus try to use the ACS algorithm to find them. We transform the extraction of membership functions into a route-search problem. A route then represents a possible set of membership functions. The artificial ants can then be used to find a nearly optimal solution.

Figure 1. The ACS-based framework for fuzzy data mining  3. Using ACS on fuzzy data mining  3.1.  Representation of coding Instead of representing the membership functions of  all items as a long code, we will encode the membership function of each item into a binary code. Each item has a set of membership functions, which are assumed to be the shape of an isosceles triangle for simplicity. The membership functions stand for linguistic terms, such as low, middle, high. Each membership function thus has two parameters, center and half the spread (called span). First, we use n binary-bits to encode each center and each span of  a membership function of an item according to the quantity range of the item in the database. For example, if the quantity range of an item is among 0 to 15, we may use four bits to encode it. Note that the other shapes of membership functions can also be used here.

Below, an example is given to illustrate the coding scheme. Assume there are three linguistic terms (membership functions) for an item Ij. Let Cj1, Cj2, Cj3 denote the three centers of the linguistic terms and Sj1, Sj2, Sj3 represent their spans. Also assume the center and the span of a linguistic term is encoded by four bits. The binary string for the centers of the item will thus be represented by 12 bits, such as {(0, 0, 1, 1) (0, 1, 1, 1) (1, 1, 0, 1)}in Figure 2. Similarly, the span of each linguistic term will be encoded as {(0, 0, 1, 1) (0, 1, 1, 0) (0, 1, 1, 1)}.

For the above case, the corresponding representation of membership functions for Item Ij and the function shape are showed in Figure 3, where the three centers are {3, 7, 13} and the three spans are {3, 6, 7} from the coding scheme. However, there is a constraint on generating the span value. That is, if the span of a region spread over its neighboring regions, its value will be reduced to the boundary of the neighboring regions.

Figure 2. The representation of membership functions for an item   Figure 3. The real number of membership functions for an item   After the membership functions are encoded, the ACS  algorithm can then be applied to find the (nearly) optimal solution. As can be observed in Figure 4, each position of a string includes two bits, one for the center and the other for the span. Thus there are four cases, namely (0, 0), (0, 1), (1, 0), (1, 1). If we think the decision of each bit as a node,  Linguistic terms Minimum support  Phase 2: Mining Fuzzy Association Rules  Minimum confidence  Transaction Database  ??ACS Fuzzy MF Acquisition Fuzzy Mining for Large 1-itemsets  Fuzzy Association  Final Membership Function set (1~N)  Fuzzy Mining  Phase 1: Mining Membership Functions  Initial Graph constructed by Ants  Membership function1  Membership functionn  Membership function2 ?       then it is a multi-stage decision problem. Although it can be solved by the dynamical programming techniques, it is still NP-hard. The ACS algorithm is thus used here to solve it.

Just like TSP (traveling salesman problem), ants can choose one of the four alternatives at each node in every pass.

Therefore for the above example, there are twelve nodes and four selections of each node. The idea can be shown in Figure 4, where there are 12 stages and each stage has four nodes. An ant thus has four alternatives at each stage. An ant will thus pass through the nodes, each of which is composed of a pair of (Cj, Sj). For the example in Figure 2, the four nodes (0, 0), (0, 0), (1, 1), (1, 1) will be the path for the first membership function. When an ant finishes a route with twelve nodes, one possible set of membership functions of an item will be generated. Ants thus continue repeating this process until the termination condition is reached. The best set of membership functions (with the highest amounts of pheromone) obtained so far is thus output for fuzzy data mining.

Figure 4. The multi-stage graph formed for the proposed ant-mining algorithm  3.2.  Pheromone initialization  The initial amount of pheromone deposited at each path is 0.5. Every ant has its own pheromone. While an ant goes through the path, it will deposit pheromone on the path between two nodes.

3.3.  State transition rule  In this work, every ant selects the next node with a calculated probability. The state transition rule for an ant at node j to node n at the next stage is given as follows:  ??  ? ? ? ?  = ? otherwiseP  qqif i  jn  jnjn Nm  ,  ]},[{maxarg 0??      (1)  where q is a random variable between [0, 1], and q0 (0?q0 ?1) is a parameter predefined. When the value of q is  greater than the predefined parameter value, the formula shown below is used to decide the transition probability of each possible next node:  , *)(  )( )(  jm m  jm  jnjn jn t  t tP  ?? ??  ? ?  =           (2)  where ?jn(t) is the current pheromone left on the path between nodes j and n in time t, node m is at the same stage with node n, ?jn is the coefficient value depending on the problem domain. In this paper, we assume the coefficients (??s) are the same for all the transitions for simplicity.

3.4.  Pheromone updating rule  One of the differences between the ant colony system and the ant system is the pheromone updating rule. In our proposed method, there are two updating rules for artificial ants to search for optimal solutions and avoids the stagnating evolutionary process. One is the local updating rule and the other is the global updating rule. They are stated as follows.

3.4.1 Local updating rule  The local updating rule prevents ants from falling into local optima while they are searching on the paths. It can appropriately adjust the amount of pheromone while ants construct the path. The local updating rule is given below:  0)()1()( ????? ?+??= tt jnjn          (3)  where ? is an coefficient for the remainder pheromone on the path, (1-?) is the evaporation of the pheromone, and ? 0 is the initial pheromone value of the edge.

3.4.2 Global updating rule  The goal of the global updating rule is to allow the best paths can be further exploited. While all ants in an iteration have completed their trails, the pheromone of the best path is increased and that of the others is decreased.

The global updating rule is given below:  ,)1( jnjnjn ????? ??+??=           (4)  where ? is the pheromone decay parameter. The right side of formula (4) is calculated as follows:  ??  ? ?  ?  ?  ?+?? =?  pathbestthejnif  pathbestthejnif LIBest  jn jn  ,0  ,1)1( ?? ?      (5)       where LIBest is the best tour from the beginning to the destination after the defined iteration. It is called iteration- best.

4. The proposed ACS-based fuzzy data mining algorithm  In this section, we will propose a fuzzy mining algorithm to extract membership functions and fuzzy association rules based on the ACS approach. The proposed algorithm is described below.

4.1.  Initial population  As mentioned above, each item will have a set of isosceles-triangular membership functions. The membership function stands for the linguistic terms such as low, middle, high. Transforming these quantitative values into linguistic terms requires a feasible population of database. Therefore, we need to initialize and update a population during the evolution process.

Fitness functions  In this work, we use the fitness function proposed by Hong et al. [6] to obtain a good set of membership functions. The fitness value of a possible so is defined as:  lution  ysuitabilit Lf || 1= ,  where |L1| is the number of large 1-itemsets obtained by using the set of membership functions obtained. The suitability factor is designed to reduce the occurrence of the two bad kinds of membership functions shown in Figure 5, where the first one is too redundant, and the second one is too separate.

5 8 9  Low Middle High  Quantity0  (a)  5 20 25  Low Middle High  Quantity0  (b)  5 8 9  Low Middle High  Quantity0  (a)  5 20 25  Low Middle High  Quantity0  (b)   Figure 5. Two bad membership functions   The suitability of the membership functions includes  two items, the overlap factor designed for avoiding the first bad case and the coverage factor designed for avoiding the second bad case. The calculation for the suitability for Item Ij is thus designed as follows:  ).(_)(_ jj IfactorcoverageIfactoroverlap +  The overlap factor is defined as follows:  .]1)1), ),(  ),( (([_  1 1  1? ?  ?= k jkj  jkj  RRmin RRoverlap  maxfactoroverlap  The term overlap(Rjk and Rji) represents the overlap ratio of two membership functions Rjk and Rji, which is defined as the overlap length divided by the minimum span (half the spread) of the two functions. If the overlap length is larger than the span, then appropriate punishment must then be considered in this case. The coverage factor is defined as follows:  )( ),.....(_  j  jkj1  Imax RRrange  1factorcoverage =   The term range(Rj1, Rj2, ?, Rjk) is the coverage range  of the membership functions, and max (Ij) is the maximum quantity of Ij in the transactions. The coverage factor of a set of membership functions for an item Ij is thus defined as the coverage range of the membership functions divided by the maximum quantity of that item in the transactions. The more the coverage ratio is, the better the derived membership functions are.

4.1.2. The proposed mining algorithm  In addition to the parameters defined in the previous sections, the following parameters will be used: the number of artificial ants, the minimum pheromone ratio of an ant, the evaporation ratio of pheromone, the local updating ratio, and the global updating ratio. The proposed ACS-based algorithm for mining membership functions and fuzzy association rules is given as follow.

INPUT: (1) n quantitative transaction data, (2) a set of m items, which is with l predefined linguistic  terms, (3) a support threshold ?, (4) a confidence threshold ?, and (5) a maximum number of iterations G.

OUTPUT: An appropriate set of membership functions for  all items in fuzzy data mining.

STEP 1: Let p = 1, where p is used to keep the identity  number of the item to be processed.

STEP 2: Let the multi-stage graph for the fuzzy mining  problem be (N, E), where N is the set of nodes and E is the set of edges (Figure 6). Also denote the j-node in the i-th stage as Nij, and the edge       from Nij to N(i+1)k as Eijk. Initially set the pheromone of on every edge Eijk as 0.5.

STEP 3: Let the initial generation g = 1.

STEP 4: Sets up the complete route for each artificial ant  Antq by the following substeps.

STEP 4.1: Selects the edges from start to end according  to the state transaction rule.

STEP 4.2: Update the pheromone of the edges passed  through by Antq according to the local updating rule.

STEP 5: Evaluate the fitness value of the solution (membership functions) obtained by each artificial ant according to the following substeps.

STEP 5.1: For each transaction datum Di, i = 1 to n, transfer its quantitative value vp for item Ip into a fuzzy set fp according to the membership functions obtained from the ant.

That is, fp is represented as:  ,......

??  pl  pl  pk  pi  p  p  p  p  Region f  Region f  Region f  Region f  +++++  where Regionpk is the k-th fuzzy term of item Ip, fpk is vp?s fuzzy membership value in the region, and l is the number of fuzzy membership functions.

STEP 5.2: The scalar cardinality of each region in the transactions is calculated as follows:  ,  )(? =  = n  i  i pkpk fcount  where fpk(i) is the fuzzy membership value of region Rpk from the i-th datum.

STEP 5.3: Check for each Rpk whether its countpk /n is larger than or equal to the minimum support threshold ?. If Rpk satisfies the above condition, put it in the set of large 1-itemsets (L1).

STEP 5.4: Calculate the fitness value of the solution from the ant by dividing the number of large itemsets in L1 over the suitability. That is,  .|| 1 ysuitabilit  Lfitness =  STEP 6: Once all the artificial ants find their entire routes, the one holding the highest fitness value will be used to update the pheromone according to the global updating rule.

STEP 7: If the generation g is equal to G, output the current best set of membership functions of item Ip for fuzzy data mining; otherwise, g = g + 1 and go to STEP 4.

STEP 8: If p ? m, set p = p + 1 and go to STEP 2 for another item; otherwise, stop the algorithm.

The final set of membership functions output in STEP  7 and the 1-itemsets obtained are then used to mine fuzzy association rules from the given database.

Figure 6. The multi-stage graph for the fuzzy mining problem  5. Numerical Experiments  Experiments were made to show the performance of the proposed algorithm. The experiments were implemented in C/C++ on a personal computer with AMD Athlon(tm) 64 Processor 3200+ and 1 GB RAM. There were a total of 64 items and 10,000 transactions used in the experiments. The initial size of ants was set at 10, and the minimum support was set at 0.04. The parameters in the ACS algorithm were set as follows: the initial ratio of pheromone was 0.05, the minimum pheromone of ants was 0.2, the evaporation ration was 0.9, the local updating ratio was 0.1 and the global updating ratio was 0.9. The average fitness values of the artificial ants along with different numbers of generations are shown in Figure 8.

0.3  0.6  0.9  1.2  1.5  1.8  100 500 1000 1500 3000 4000 5000 6000  Generations  A v e ra  g e F  it n e ss  V a lu  e s    Figure 7. The average fitness values along with different numbers of generations        It can be observed from Figure 7 that the average  fitness values gradually increased and became quite stable after about one thousand generations.

100 500 1000 1500 3000 4000 5000 6000  Generations  N u m  b e r  o f  L a rg  e  -i te  m se  ts    Figure 8. The numbers of large 1-itemsets along with different numbers of generations  6. Conclusion and future work  In this work, we have looked into the issues of applying the ACS algorithm to extract membership functions for fuzzy data mining and have proposed an algorithm to achieve the purpose. An example is given to demonstrate the proposed algorithm and numerical experiments are made to show the performance of the proposed algorithm. Experimental results show that it gets better results than the uniform partition. It also requires less computation time. However, more work needs to be done in the future. For example, the design of heuristic functions in the state transition rule and the definition of different fitness values may be further discussed. We plan to investigate these issues as well as enhancement of our ACS-based model.

