Association Rule Mining Algorithm Study and Improvement

Abstract- through the in-depth study for the existing Apriori  algorithm and its improved algorithms, this paper proposes an  optimization program for the Apriori algorithm, and tests it.

Experimental results show that this improved Apriori  optimization association rule mining algorithm can reduce the  time complexity of the original algorithm, especially for large  databases, this improved algorithm has more evident effect for  the association data mining optimization.

Keywords- data mining; association rule; Apriori algorithm

I. INTRODUCTION  With the rapid development of information technology,  data that people have dramatically increased. How to extract  some valuable information from a large number of random  data has become an important research topic, thus driving  the emergence and rapid development of data mining  technology. Data mining is a technology can intelligently  and automatically transform the data into useful information  and knowledge, which can not only help people extract the  interested knowledge, law, or a higher level information  from the database, particularly the relevant data of the data  warehouses, but also help people analyze them from  different angles, thus to more efficiently use data  ]1[  . It not  only can be used to describe the development of the past  data, but also can further predict the future trends, so data  mining is becoming a new hot research area which is  increasingly concerned.

Association rule mining is a very important research  topic in data mining field, is important content of knowledge  discovery technology research. With the data accumulation,  many of the industry are more and more interested for  mining association rules from their databases. Association  rule mining algorithm is the main content of association rule  mining research. A typical association rule mining algorithm  is Apriori algorithm, the rest are mostly based on Apriori  algorithm, or its variants, or its expansion. Apriori algorithm    needs to scan the original database for many times in the  mining process, and generate a large number of candidate  item sets, so there are low mining efficiency, too large  occupied memory space and other deficiencies, needs further  study.



II. ASSOCIATION RULE MINING ALGORITHM  Apriori algorithm is the most widely used algorithm in  association rules. Association rules mining is proposed when  analyzing the retail transaction databases, the current  development has greatly exceeded the original scope of  application, the depth and breadth have been greatly  enhanced. The basic model of association rule mining is  shown in figure 1.

Figure 1. Basic model of association rule mining  A. Apriori Algorithm idea  In order to reduce the number of candidate data item sets,  Apriori algorithm uses layer search method, and through  scanning all the transaction data items of the database D to  find the frequent item sets. From the features of frequent item  sets it can be known that only the superset composed by  those candidate sets which have been confirmed as frequent  items may be frequent item set ]6[ . Therefore, only to use  frequent item sets to generate the candidate set for next scan,  that is, using Li-1 to generate Ci, in which, L is the set of  frequent item sets, C is the set of candidate items, and i is the  times of current database scanning, each database scan only  considers the set with the same number of data items. Apriori  algorithm can generate a relatively small candidate data item  sets, the candidate data item set does not have to be  repeatedly generated according to the records in the database,  but generated by the k-1 frequent data item set which is  generated by the last circulation in the process of seeking for  k frequent data item sets, Apriori algorithm implementation  process as shown in figure 2.

V2-362C978-1-4244-8666-3/10/$26.00      2010 IEEE    Figure 2. Apriori algorithm implementation process  B. Apriori algorithm performance analysis  Apriori algorithm based on frequent item set uses layer  search iterative method, the algorithm is simple ]4[ , no    complicated theoretical derivation, easy to implement. But it  also has some shortcomings difficult to overcome:  (1) The number of database scan is too much. In Apriori  algorithm scanning, each generating a candidate item set, it  must carry out a comprehensive database search. If you want  to generate a frequent item set with maximum length k, then  the database should be scanned for K times. When the  database storing a large number of transaction data, in the  limited memory capacity, the system I/O load is very large,  each scan will be a very long time ]5[ , so the efficiency will  be very low. Secondly, Apriori algorithm also may generate  a lot of candidate item sets.

(2) When the frequent item set length is larger, the  computing time will be significantly increased, and the  affairs supported this frequent item set will be reduced. In  theory, the time required to calculate its support will not be  significantly increased, but the Apriori Algorithm is still in  the original transaction database to calculate the support of  the frequent item set, because the items of each frequent  item set changed to be more, so the spending to determine  whether each frequent item set is supported by the  transaction is also increased, but the services have not  decreased, so when the length of frequent item set increases,  the computing time is increased significantly.

(3) Using a unique support, without considering the  difference of the various attribute importance levels. In real  life, some services are very frequent occurred, while some  services are very sparse, thus for mining there is a problem: if  the minimum support threshold is set too high, though  accelerated ]3[ , but such a large number of rules without  practical significance will fill in the whole data mining  process, which will greatly reduce the efficiency of mining  and the availability of the rules. This will mislead decision  making.



III. APRIORI MINING ALGORITHM IMPROVEMENT  Despite the Apriori algorithm can prune for the large  number of candidate sets, but in large transaction databases,  there still may be a large number of candidate sets need to be  processed, and this operation takes a long time. On the other  hand, Apriori algorithm needs to repeatedly scan the database  to calculate the support of the candidate set, then generate a  new candidate set with the length of 1 increased, Aprinri    algorithms is tedious, especially when there is a long  pattern ]2[ . Based on the above analysis, this paper proposes  an optimization strategy to further reduce the number of  candidate items in the candidate item set Ck. In the Apriori  algorithm, Ck-1 is compared with the support after its  generation, the item sets less than the support will be cut, to  generate Lk-1 which will be connected with the Ck-1 to  generate Ck. The improved algorithm is to further cut for Lk-1  before the generation of candidate item set Ck, and account  for the times all the items in Lk-1 occurred, and delete the item  sets which contains the items with occurrence times less than  k-1 in the Lk-1, to reduce the number of k-1 item sets  participated in the connection, thus to reduce the number of  candidate items in Ck. The improved Apriori algorithm  implementation process is shown in figure 3.

Figure 3. Improved Apriori algorithm implementation process   V2-363

IV. EXPERIMENTAL RESULTS AND ANALYSIS  A. Experimental results  In order to compare performance difference of the two  algorithms in large amounts of data, the experimental test  data is the data set randomly generated, the random number  of items to 256, test data is randomly generated record  number, which is 50000, 90000 and 150000. And then using  the same minimum support threshold 0.03, 0.05 to test, and  record the time required to generate the frequent item sets, to  compare with the implementation efficiency of the  traditional algorithm and the optimization algorithm, the  results as shown in table 1.

TABLE I. EXPERIMENTAL RESULTS  Minimum  support  Record  number  Implementation time(S)  Apriori  algorithm  Improved Apriori  algorithm        0.03  50000 6975.32 6324.78  90000 1329.37 1217.63  150000 19873.12 1754.65  0.05  50000 4017.61 3743.19  90000 7325.43 6865.32  150000 9845.27 8786.81    B. Experimental results analysis  From the above results it can be seen, when the  experimental data is not too much, the implementation  efficiency of the improved algorithm is close to the  traditional Apriori algorithm, but with the increasing amount  of experimental data, the implementation efficiency of the  improved algorithm is significantly better than the ordinary  Apriori algorithm. This is because that the optimization  algorithm has made further cutting for Lk-1 before  considering the combination of candidate item set Ck, that is,  made a count processing for the frequent item set Lk-1 to be  involved in the connection ]7[ , and then according to the  count results to delete the item set which contains the items  with a number of occurrences less than k-1 in Lk-1, thus to  reduce the number of k-1 item sets to participate in the  connection, to exclude some element do not meet the  combination conditions, to reduce the possibility of  combination and the number of candidate items in Ck, that is,  to reduce the number of cycle and judgment. For a large  database, this reduction of time cost is obvious in data  mining efficiency.



V. CONCLUSION  Data mining technology is mainly used to deal with  massive data information, to find hidden, potential,  meaningful knowledge. Association rule mining algorithms  requires to frequently access to the database, which makes  the algorithm time complexity high, efficiency low, has  become a bottleneck of association rule mining algorithm  development. In this paper, through in-depth study of the  existing Apriori algorithm and its improved algorithm, an  Apriori algorithm optimization program is proposed, and the  experimental results show that this optimization program is    effective.

