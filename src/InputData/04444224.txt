A Single Pass Algorithm of Finding Frequent Vibrated Items over Online  Data Streams

Abstract   Data streams are data items generated  unbounded and continuously. To detect the vibration  of data item?s quantity, a single pass algorithm is  proposed for mining vibrated items over online data  streams in this paper. The change of data item can  be reported at once by measuring its vibrated slope.

Not only the change of data item will be detected,  the period in which the data item is frequent  vibrated is also reported. Moreover, a set of  simulations is performed to show the benefit of our  approach.

1. INTRODUCTION   In recent years, researches on mining data  stream have attracted much interest. There are  numerous research problems in this topic, such as  mining frequent patterns over data steam, streaming  data modeling and fining interesting events on data  streams. In order to adapt to the strict environment,  some category of frequency estimating approaches  in mining frequent item develop gradually: sample  based and hash based. In the sample base approach,  several amounts of counters are used for tracking the  number of item occurs in the stream [5], [6], [1]. In  the hash base approach, a list of counters of item is  stored in hash table, and some items may share with  the same counter [2], [3].

The goal of our research is to monitor and  detect variation of items between two data streams.

In real application, the managers of super market  may concert the situation of stocking and selling  goods. And they may ask ?which good is insufficient  now and needed to be stocked?? or ?which good is  overage and needed to stop stocking?? to control the  goods for getting the great benefit. Managers can  solve these questions by observing the difference of  good?s number between the streams of storage and  sales volume.

To our best knowledge, [4] is the only  research related to our approach. In the approach,  MFC-append is proposed for online mining frequent  frequency change item in two continuous  append-only data streams. However, in this  approach, the change of entry?s frequency can not be  detected and reported instantly. Moreover, some  vibrated frequency change items may not be  reported by the algorithm. The detail discussions  will be presented in the following section.

In this paper, we propose a new approach to  discover vibrated item effectively and efficiently  over two data streams. In order to overcome the        problems described above, slope of item?s change  support count between two window fragments is  introduced for measuring the vibration degree of the  items and to avoid the situation of ignoring the  meaningful vibrated items. Moreover, the vibration  of item?s count can be found and output immediately.

In our approach, not only the vibrated items at  current time point but also the longest or newest  time period where the item is frequent vibrated can  be shown to the users.

The rest of this paper is organized as follows.

In Section 2, the framework of our approach is  introduced. The solution method is proposed in  Section 3. The result of performance is present in  Section 4. And we conclude our work in Section 5.

2. PRELIMINARIES    A data stream is a sequence with consecutive  and boundless data items entrance. In order to  separate the old data from the recently one in the  data streams, window base model is used in this  study. A data is regarded as an old one after a  window time passing since the data item arrival at  stream. The size of the window is n time units,  where n is specified by users. The change support  count of an item is the difference of its frequency  between two data streams.

[4] presents the approach of identifying vibrated  frequency change items. A data item is a vibrated  frequency change item if its change rate are more  than a user-specified thresholds minimum change  rate over a time period. The change rate of an item  is the number of frequency vibration divided by total  time points observed in a time period, where  frequency vibration is defined as the sign of change  support count changes from positive to negative or  contrariwise, as Figure 1 (a) indicates.

Figure 1. An example of vibrated frequency change  pattern  According to the definition and algorithm  proposed in [4], the variation of item?s change  support count may not be detected and reported  instantly. It is because in the algorithm, the  frequency of the item is accumulated continuously.

Moreover, some important vibrated frequency  change items may be ignored in the approach. If the  difference of one pattern?s change support count  between two consecutive windows is very large but  both of them are positive, negative, or less than the  thresholds in positive and negative side but close to  them, it will not be found. For example, the pattern  shown in Figure 1 (b) (c) will not be found.

Obviously, these data are very important since the    Ch an  ge su  pp or  t c ou  nt   Time  Approximation error    Time    Ch an  ge su  pp or  t c ou  nt     C ha  ng e  su pp  or t c  ou nt    Time     (a)  (b)  (c)       change amount of the change support count for the  data is large.

In our approach, the problems of finding  vibrated item and frequent vibrated item are  addressed. For averting from the problems explained  above, we change the approach of calculating the  frequency of data item. By using decay, the  influence of old data in the change support count is  reduced as time goes by and it will become overdue  and be pruned if it exceeds a time-span. The length  of the time-span is set according to the type of the  data item. For example, milk has shorter sell-by date  than bread, therefore, the time-span of milk will be  set shorter than bread. In this paper, we set the  length of time-span of all data item is one window  time. Furthermore, a new parameter, vibrated slope,  is introduced for measuring the vibration degree of  the item. The vibrated slope of one data item is the  absolute value of difference of change support  counts between this window fragment and the  preceding one divided by window size n. And a data  item is considered as a vibrated item at the moment,  if its vibrated slope is no smaller than minimum  vibrated slope.

In our approach, not only the sudden variation  of each item?s quantity will be detected in real time  but also the long term situation of vibrated items  will be monitored. A data item is identified as a  frequent vibrated item during a time period, if its  vibrated support is no less than minimum vibrated  support, where the vibrated support of an item is the  ratio of the number of times the item identified as a  vibrated item to the number of windows observed in  the time period, and the corresponding time period  is identified as a frequent vibrated period. Here, we  refer the time period as a sequence of continuous  windows and the length of the time period is the  number of windows in this period. Minimum  vibrated support is specified by user, denoted as ?.

3. PROPOSED METHOD   3.1 Mining vibrated item(MVI)   In order to accurately and effectively represent  the most recent vibrated items over data streams, we  break the streams into fixed size with no  overlapping windows w1, w2, ?, wi, where wi is the  latest window in the stream. For each incoming  window wi, we update the change support count of  data item occur in the streams within current  window wi. When window wi terminates, the  vibrated slope between wi and wi-1 for each item is  computed. To detect the variation of item?s change  support count, the vibrated slope of all data items  appear in the streams will be computed and  compared with minimum vibrated slope. The data  items whose vibrated slopes exceed the threshold  will be output as vibrated items. After comparison,  the change support count of preceding window is set  to the change support count of current window. And  the change support count of current window is reset.

By repeating the steps described above, the vibrated  items of each window are reported.

3.2 Mining frequent vibrated item   MVI is used to report the vibrated items of each  window. However, users may concert during which  period an item is frequently vibrated, i.e. the  frequent vibrated period of the item. Therefore, the  mining frequent vibrated item (MFVI) algorithm is  proposed.

In MFVI, we establish a track list, denoted as  Track_list, to record the vibrated items. We also  retain two information, start point and count, for the       items in the list. The start point is set to the first time  the item recognized as a vibrated item. In the  following, how to identify the frequent vibrated  period of each item is discussed.

For each vibrated item output by MVI in current  window, we will seek whether the item is in the  Track_list. If the look up failed, we insert the item  into Track_list, set its start point as the current  window time and set count as (1??), where ? is the  minimum vibrated support. Otherwise, the count of  the item is increased by (1??). Moreover, the count  of the item which is in the Track_list and not  identified as a vibrated item in current window is  decreased by ?. After the computation, if the count  of the item is no smaller than zero, the item is  reported as a frequent vibrated item and its  corresponding frequent vibrated period is the  periods from the start point to the current window  time.

Theorem 1. The item and its corresponding period,  cp, reported by MFVI is a frequent vibrated item in  cp.

Proof: Assume g is an item in Track_list. According  to MFVI algorithm, if g is identified as a vibrated  item in a window, the count of g is increased by 1??,  otherwise, decreased by ?. Assume g is output as a  frequent vibrated item and the length of the  corresponding period is m. Without loss of  generality, we assume that g is identified as a  vibrated item x times during the period, we get:  x* (1??) ? (m?x)* ? ? 0  ?  x ? x? ? m? + x? ? 0  ?  x ? m? ? 0  ? m x  ? ?      Algorithm MFVI  Input: All data item in stream A and B  Output: Frequent vibrated items with frequent  vibrated time period  for each window wi in data stream A and B do  for all items do  if item g is a vibrated item then  if g is not in Track_list then  add to Track_list;  g.time set as window number now;    g.count += 1??;  if g.count > 0 then  Output item g from g.time to  now is frequent vibrated item;  else  if g is in Track_list then  g.count ?=?;  if g.count < 0 then  Prune g form Track_list;    Figure 2. MFVI algorithm    4. EXPERIMERNTAL RESULTS  The synthetic data is generated by sine  function. Each data item has different frequencies in a time unit mixed with sine waves and noise.

Maximum frequency of an item in one second is 1000. A window size is 12 seconds. Table 1 shows the value of parameters used in our experiments.

Table 1. Parameter setting in simulation  Parameter Range value Default value  Number of item 1000 ~ 30000 10000  Minimum  vibrated slope  400 ~ 1600 1200  Minimum  vibrated support  0.2 ~ 0.8 0.6  Figure 3 shows the relation between minimum vibrated slope and the number of vibrated items. As       shown in the result, the larger the minimum vibrated slope is, the fewer number of vibrated items are found. The relation between the minimum vibrated support, ?, and the length of frequent vibrated periods is shown in Figure 4. As shown in the result, the smaller the value of ? is, the more the long frequent vibrated periods can be mined. The comparison of our work, MVI, and the method proposed in [4] is shown in Figure 5 and Figure 6. In order to compare these two approaches, we set the range of the approximation error support between positive and negative sign is the same as the range of vibrated slope multiplied by window size.

Therefore, the approximation error support and minimum changed rate in the simulation of [4] is set as 0.3 and 0.6. Figure 5 shows the execution time of the two approaches. According to the result, MVI performs better than the method proposed in [4].

Moreover, the number of vibrated items reported by our algorithm and [4] are compared in figure 6. As show in the result, our approach detects more vibrated items than the approach in [4].

100 200 300 400 500 600 700 800  Window time  N um  be r  of v  ib ra  te d  it em  slope=1600  slope=1200  slope=800  slope=400   Figure 3. Number of vibrated items w.r.t. minimum  vibrated slope         1 31 61 91 121 151 181 211 241 271 301  Length of frequent vibrated period (windows)  N um  be r  of f  re qu  en t  vi br  at ed  p er  io d  ?=0.8  ?=0.6  ?=0.4  ?=0.2    Figure 4. Number of frequent vibrated periods w.r.t.

minimum vibrated support            1000 5000 10000 15000 30000  Number of items  E xe  cu ti on  t im  e( se  c)  MVI  LL04   Figure 5. Execution time         100 200 300 400 500 600 700 800  Window time  N um  be r  of v  ib ra  te d  it em  MVI  LL04   Figure 6. Number of vibrated items    5. CONCLUSIONS  In this paper, two novel algorithms MVI and  MFVI are proposed for mining vibrated and frequent vibrated items over two data streams.

Differ to previous works on mining vibrated item, we use vibration slope to estimate the vibration degree of the item. Therefore, through our approach, the vibration of items? change support count can be detected accurately and reported immediately. In MFVI, we keep tracing the change of vibrated items and output their corresponding periods in which they are frequent vibrated. The periods found by our approach have the guarantee that the ratio of the number of times the item identified as a vibrated item to the length in the period is no smaller than the minimum vibrated support. And our algorithm of mining frequent vibrated period also provides a factor ?  for choosing long term or recently vibrated period.

