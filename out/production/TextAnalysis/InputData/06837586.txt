Integration of Smart Meters into Management Systems in Automation

Abstract  On the way to a totally integrated automation system not only functional process data are of importance. Nowa- days, where increasing the efficiency regarding resource consumption of buildings and production plants is a big topic, centralised access to data provided by Smart Me- ters plays a significant role. This work presents first steps towards the integration of M-Bus-based metering devices into management applications in automation systems by means of OPC Unified Architecture.

1. Introduction  In the last view years, huge effort has been put into dis- covering ways to seamlessly integrate different automa- tion technologies in use. The goal was and still is to cre- ate a holistic view on these heterogeneous systems. Since in the meanwhile modern buildings and production facil- ities are not imaginable without Smart Meters any more [14], [11], it is obvious to include resource consumption information delivered by these devices into management applications in the same manner than this is done for func- tional process data. The benefits arising thereof are im- proved monitoring and trending of these properties a tech- nical process has. This facilitates the identification of op- timisation potential, the detection of faulty conditions and is assumed to increase consumers? awareness on resource consumption [15].

In the next Section 2, a brief introduction into the M- Bus protocol [3] with a focus on its application layer and the most common frame format containing metering in- formation is given. Section 3 follows with a summary of the key facts and features of OPC Unified Architec- ture (OPC UA) [4]. Now being alligned with the state- of-the-art, the contribution part of this work is presented in Section 4. This work-in-progress paper closes with an outlook on how to address open issues and the intended way of evaluation.

2. Meter Bus  The Meter Bus (M-Bus) [3] is a widespread communi- cation protocol, especially in European countries, which enables the remote readout of smart meters in consumer and industry applications. It has been laid down as a part of the international standard EN 13757. Smart meters are used to measure the consumption of electricity, gas, heat and water, to mention a few examples [10]. The M-Bus Usergroup,1 which publishes and maintains the standard, mentions further applications like alarm systems, lighting and heating controlling. The protocol can be seen as a fieldbus with a typical bandwidth of 300 to 14400 bps.

For communication media either a two-wired twisted pair line (also providing link power) or radio communication can be used. The master-slave communication paradigm applied in M-Bus ensures central media allocation. Meter- ing devices act as M-Bus slaves, wheras an M-Bus master collects information from the meters and supports supe- rior applications with it. The network topology is very flexible - star, ring and bus arrangements are supported.

Besides the physical layer of the OSI model, M-Bus de- fines the data link, the network and the application layer.

The modelling approach presented in this work is inde- pendent from the lower layers of the protocol stack but only relies on the data representation determined by the application layer. Therefore, an introduction into the rele- vant parts of this layer is given in the following.

Besides the data send command, there exists a number of ways a master can control and configure a slave (i.e., application reset, set baudrate, synchronize action). The way how meter data is represented in M-Bus is reflected by the slaves? responds to a data send command. There are two types of reply frames wherewith a slave can answer a master?s request, either by a Fixed Data Structure or by a Variable Data Structure frame. Since data transported by a Fixed Data Structure frame can be seen as a simplified form of the Variable Data Structure, only the latter is described here.

Besides that, the Fixed Data Structure frame type is not     recommended for implementation anymore.

Fixed Data Variable Data MDH Msg. specific Header Blocks (Records) data 12 Byte variable number 1 Byte variable number  Table 1. Variable Data Structure in reply di- rection  The Variable Data Structure APDU is shown in Ta- ble 1. It consists of a Fixed Data Header, Variable Data Blocks (Records), and optional manufacturer specific data preceded by a Manufacturer Data Header (MDH). The Fixed Data Header, shown in Table 2, contains static in- formation about the metering device like an identification number, a manufacturer code, version information as well as status information informing about the device applica- tion. The Configuration field is intended for security ex- tensions like the declaration of different modes of encryp- tion and message signing.

Ident. Nr. Manufr. Version Medium Access No. Status Configuration 4 Byte 2 Byte 1 Byte 1 Byte 1 Byte 1 Byte 2 Byte  Table 2. Fixed Data Header  The payload containing actual meter readings, their en- coding, type and length is encapsulated in data records.

Besides the current value, a data record can contain up to nine historical values which must be all of the same function. Possible functions are Instantaneous value, Maximum value, Minimum value, Value during error state. An arbitrary number of records forms the second field of the APDU shown in Ta- ble 1. The structure of an M-Bus data record is illustrated in Table 3. It consists of a Data Record Header (DRH) fol- lowed by the Data field. The header in turn is split up into a Data Information Block (DIB) and a Value Information Block (VIB). The DIB describes the function of the whole record, the length and encoding of the data field and gives information about the tariff assigned to each (historical) value. The engineering unit for each reading combined with a multiplier is encapsulated in the VIB.

DIF DIFE VIF VIFE Data 1 Byte 0-10 Byte 1 Byte 0-10 Byte 0-N Byte Data Inf.Block (DIB) Value Inf.Block (VIB)  Data Record Header DRH Table 3. Structure of a Data Record  3. OPC Unified Architecture  OPC Unified architecture is powerful standard for au- tomation systems integration. It is also published as an IEC standard [5]. The goal of it is to establish interop- erability among the plethora of different standards and technologies applied in the field of automation, concern- ing information representation and transport. The way how this is achieved is by information modelling, i.e.,  finding a semantic description of automation technolo- gies? data representation. For this purpose, OPC UA defines an object-oriented meta model providing differ- ent NodeClasses for representing datatypes, variables, ob- jects, methods and views on process data. Data exchange in OPC UA follows the client-server principle. Two kinds of TCP/IP-based transport mechanisms are defined, a bi- nary protocol for efficient communication and a firewall and Internet-friendly Web Service based protocol using XML and HTTP. Also strong, inherent security is in- cluded featuring encryption, authentication and authori- sation mechanisms. A set of services is defined enabling an OPC UA client to perform network discoveries, browse a server?s address space and to access or apply subscrip- tions on distinct Node attributes. Handling historical time series of data and also events is defined in the OPC UA Historical Access specification (part 11 of the OPC UA specification) [6]. A very thourough description of this standard is given in [12].

In the meanwhile, there exists a number of so called OPC UA Companion Standards like OPC UA for Devices (DI) [9], the OPC UA Information Model for IEC 61131-3 [2] or others [1], [8] which supplement the core specifica- tion. The information model introduced in this work is based on the DI specification.

4. An OPC UA information model for M-Bus  In order to enable a management application in au- tomation systems (e.g. a Building Management (BM) or a Supervisory Control and Data Acquisition (SCADA) Sys- tem) to access a distinct target technology via OPC UA, an OPC UA information model reflecting the data model and the semantics of the target technology must be defined.

This self-descriptive representation is instantiated on an OPC UA server. The server is also equipped with a com- munication interface and a driver for application-level in- teraction with the target technology. It processes a client?s access to its address space and propagates the requests to the target technology. Alternatively, the server can buffer a process image of the system to integrate. This is espe- cially recommendable if the target technology has limited resources, like a low bandwidth or battery-powered com- ponents to reduce the number of requests to it.

Figure 1 shows the type hierarchy for the defini- tion of an OPC UA information model for M-Bus.

As already mentioned, it is based on elements de- fined in the DI standard. The information model de- fined in this companion specification facilitates find- ing OPC UA representations of automation technologies with a device-centric view. It defines a DeviceType ObjectType (a subtype of the BaseObjectType and the TopologyElementType) with a prede- fined set of properties (including a SerialNumber, a Manufacturer property and revision information) each device model instance must encompass. These property instance declarations all have the so-called    M-BusMeteringDeviceType  M-BusDataRecord: <Physical Quantity>  [OptionalPlaceholder]  BaseObjectType  DeviceType  TopologyElementType  PropertyType:Medium [Mandatory]  M-BusDataRecordType  PropertyType:Tariff [Optional]  PropertyType:Function [Mandatory]  PropertyType:RevisionCounter [Mandatory]  PropertyType:SerialNumber [Mandatory]  PropertyType:Model [Mandatory]  PropertyType:Manufacturer [Mandatory]  PropertyType:DeviceRevision [Mandatory]  PropertyType:DeviceManual [Mandatory]  PropertyType:HardwareRevision [Mandatory]  PropertyType:SoftwareRevision [Mandatory]  PropertyType:EngineeringUnits [Optional]  AnalogItemType:Reading [Mandatory]  MultiStateDiscreteType:Status [Mandatory]  PropertyType:EnumStrings [Mandatory]  PropertyType:EURange [Mandatory]  Figure 1. Type definition  ModelingRule Mandatory. This means, properties with this ModelingRule are mandatory for each in- stance of this ObjectType. As a subtype of the DeviceType, a new OPC UA ObjectType is defined, the M-BusMeteringDeviceType. It inherits all the properties of its supertype (which are only shown in Fig- ure 1 for the DeviceType) and also defines additional Medium and Status properties. This set of proper- ties is dedicated to reflect static information about an M-Bus metering device. The mapping of information from the Fixed Data Header of the M-Bus APDU to the M-BusMeteringDeviceType is defined in Table 4.

However, some of the properties of the OPC UA model do not have an M-Bus equivalent. So they can be set to Null. This is in compliance with the OPC UA DI speci- fication.

The actual meter readings of the M-Bus device which are the content of Variable Data Blocks (the records) are mapped to another OPC UA ObjectType, the M-BusDataRecordType as illustrated in Fig- ure 1. The M-BusDataRecordType has a property Function and a variable Reading. The Function  M-Bus APDU field OPC UA Property Identification Number SerialNumber  Manufacturer Manufacturer Version DeviceRevision Medium Medium Status Status  Table 4. Mapping of Fixed Data Header  property reflects the Function Field of the DIB in a Vari- able Data Block.

The Reading variable InstanceDeclaration is of the AnalogItemType which is taken from the Data Access [7] part of the OPC UA specification. Its EngineeringUnit property which is part of the defi- nition of this VariableType represents the Unit field of the M-Bus VIB. EURange is another mandatory property of the AnalogItemType. It defines the value range of this variable under normal operation. In this model, EURange reflects the length and encoding given by the M-Bus DIB.

In order to enrich this model with tariff information, the Reading variable is extended by an additional Tariff property. The Tariff field of the M-Bus DIB is mapped to this property. Since an M-Bus compliant meter can pro- vide access to up to nine historical values encapsulated in one record, concepts from the OPC UA Historical Access specification shall be included in this information model.

However, there are still open discussions how to solve this issue in the most efficient way. Therefore, this aspect is tentatively omitted in this work-in-progress paper.

Returning to the M-BusMeteringDeviceType definition in Figure 1, it can be seen that an instance of this type can have arbitrary many instances of the M-BusDataRecord type. This is achieved by using the OptionalPlaceholder ModellingRule. Hereby, the fact is reflected that an M-Bus device can provide multiple readings like the daily and the cumulated consumption of the media under measurement or different pysical quanti- ties.

Figure 2 shows an exemplary instance of the M-BusMeteringDeviceType. It represents a real- world Siemens WFM21 M-Bus heat meter including the data it provides. Corresponding to the type definition in Figure 1, an M-Bus metering devices has a number of static attributes (i.e., properties) and naturally delivers measurement values including status information. Con- trary to the type definition, the instance in Figure 2 is pro- vided with concrete values. The WFM21 delivers, besides others, the measurement values of the cumulated energy and the cumulated volume of heating water. Therefore, the HeatMeter object references two objects represent- ing M-Bus data records, the CumulatedEnergy object and the CumulatedVolume object. The Function properties of both records are set to CurrentValue.

The heat meter in this example is also capable of de- livering minimum, maximum and average values which is disregarded here, however. The value attribute of the Reading variables is set to the actual readings calculated    PropertyType:RevisionCounter Value=Null  PropertyType:SerialNumber Value=356413  PropertyType:Model Value=?WFM21?  PropertyType:Manufacturer Value=Siemens  PropertyType:DeviceRevision Value=1.2  PropertyType:DeviceManual Value=Null  PropertyType:HardwareRevision Value=Null  PropertyType:SoftwareRevision Value=Null  M-BusMeteringDeviceType: HeatMeter  PropertyType:Medium Value=?Heat meter?  MultiStateDiscreteType:Status Value=?No Error?  PropertyType:EnumStrings Value= ?No Error?, ?Busy?,...

M-BusDataRecordType: CumulatedEnergy  PropertyType:Tariff Value=Tariff1  PropertyType:Function Value=CurrentValue  PropertyType:EngineeringUnits Value=kWh  AnalogItemType:Reading Value=234098.234  M-BusDataRecordType: CumulatedVolume  PropertyType:Function Value=CurrentValue  PropertyType:EngineeringUnits Value=m3  AnalogItemType:Reading Value=98329.673  PropertyType:EURange Value={0, 99999.999}  PropertyType:EURange Value={0, 99999.999}  PropertyType:EURange Value={0, 99999.999}  Figure 2. Instantiation  from the M-Bus Data and the Multiplier field of the VIB.

Accordingly, the EngineeringUnits and EURange property values are set, too. The CumulatedEnergy record of the WFM21 also delivers tariff information.

This is regarded in this model instance by the optionally instantiable Tariff property, whose value attribute is set to Tariff1.

5. Outlook  In this work, a first attempt to integrate M-Bus based metering data into management level applications in au- tomation systems has been presented. However, there are still open issues that need to be elaborated in the course of future work. One is the service mapping between M-Bus and OPC UA. Also the inclusion of historical measure- ment values provided by M-Bus into the OPC UA infor- mation model needs to be discussed. The OPC UA Histor- ical Access specification is considered to have appropri- ate mechanisms to address this problem. Another feature of M-Bus enabling master devices to apply configuration changes on meters has been unattended, yet. Regarding this manner, it needs to be discussed if this is a reason- able use case for management applications or if collecting metering data is sufficient.

In order to evaluate the feasibility of the concepts in- troduced by this modelling approach, a prototype needs to be implemented. In a first step, this will be an OPC  UA server dedicated to interface M-Bus only. Since our working group has already developed (together with HB- Softsolution2) a prototype OPC UA server which inte- grates a number of automation technologies [13] it is planned to enhance this implementation by a native inter- face to M-Bus. Hereby, the seamless integration of meter- ing data into a management system for both building and industrial automation domains can be shown.

Acknowledgement  This work was funded by FFG (Austrian Research Pro- motion Agency) under the EraSME/COIN project ?Infor- mation Modelling in Automation (iModelA)? P199844.

