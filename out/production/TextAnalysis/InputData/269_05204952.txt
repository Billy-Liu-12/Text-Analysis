?

Abstract?In this paper, query expansion will be achieved by mining query information in a query log. An association will be constructed by data mining association technique. Then every incoming new query will be compared with the newly built association rule, and a new expanded query can be constructed with the original query and the newly added item. In addition, other information in the query log will also be processed to achieve query expansion. Then a performance evaluation comparison will be done among the original query, query expanded by association, and query expanded by query information. The experiment shows that the newly expanded query can produce better performance for web query searching.

HE number of Internet Web Sites grows exponentially as time passes. Huge volume of information is stored on the  Internet. In fact, nowadays most information needed is abundantly available on the Internet. One can find information about virtually anything that he or she can ever think of. However, since information is available in such quantity, the probability of finding useful information is not of an easy task. This is because the Internet is not owned by any organization; this makes available information hardly organized. Every moment, new information is posted on the Internet. This makes information on the Internet increase at an exponential rate. This further makes the tasks of managing, organizing, and even classifying information hardly possible.

As a result, this strongly leads to the need of developing effective search methods that can help users to retrieve useful information from the Internet.

At present, what the search engines actually respond to user search queries are far from satisfactory. Many of these searches either return thousands of irrelevant results or only a few or even no search result at all. Additionally, even when results are provided, the relevancy of such information provided in most of these search results is quite low. There are two reasons for such situation, e.g., 1) the inputted query is too short; 2) the query meaning may not be expressed well enough for users? needs.

Usually, the mining method for a query log is by using query clustering technique. Traditional query clustering uses two  This work was supported in part by the University Research Committee under Grant No. RG066/07-08S/09R/GZG/FST and by the Science and Technology Development Fund of Macau Government under Grant No.

044/2006/A.

Patrick Ngok is with the Faculty of Science and Technology, University of Macau, Macao, China.

Zhiguo Gong is with the Faculty of Science and Technology, University of Macau, Macao, China. (phone:853-83974465; fax:853-28838314; e-mail: fstzgg@umac.mo)  methods to cluster queries in any given query logs. The first one [2, 4, 9] tries to find out those queries that share some common keywords and then group them together. The second one uses the data mining agglomerative clustering algorithm technique, (e.g., clustering algorithm k-means, HAC) on a query log in order to build clusters among similar queries [2, 3, 4, 5, 6, 7].

In reality, however, most queries consist of one or two keywords. Under such situations, identifying common keywords is useless or at most of only little help for the purpose of performing meaningful query expansion.

Moreover, two queries which share some common keywords may be lexically similar only, semantically they might be quite different. Since a word may carry different meanings, in order to find out semantically similar queries, usually the retrieved document will be analysed, which makes it possible to determine the query meanings, as well as its category. In this way, the semantically similar queries can be clustered.

In this paper, in order to overcome ?the query is too short? problem, query expansion will be used for the inputted query.

As a result, the quantity of returned results can be reduced so that users can review such results more effectively. For the second problem as stated in section 1.1 and the problem of ?identifying queries that are related but may not be lexically similar?, a query log will be mined to achieve query expansion. This will be done mainly in 2 directions as described below.

Query Association A log file that has recorded the queries history in a search engine, is processed and grouped using association technique. These are done so that the relationships (association rules) between the query terms can be effectively established, which are subsequently used in the query expansion. As a result, every new query can be reformulated, and expanded by the established association rules.

Query Log Information Semantically related, or just related queries can be found by other information (e.g., similar queries comparable to the new input query in the log file, different but related queries point to the same URL) in the query log, which is used as query expansion.



II. QUERY EXPANSION  A. Query Log Format Users? query activities are often logged by the search  engine. In general, the log record includes users? Ip, query terms, timestamp of the query, and URL of users? clicking  Log Mining to Support Web Query Expansions Patrick Ngok and Zhiguo Gong  T   Proceedings of the 2009 IEEE  June 22 -25, 2009, Zhuhai/Macau, China    web page. Table 1 shows an example of the log format.

TABLE I AN EXAMPLE OF QUERY LOG RECORD  Ip Query Term  TimeStamp URL  192.168.1.1 Java WordNet  API  2006/3/12 23:00:01  http://www.wordnet.com  B. Query Preprocessing  Stop Words Queries may contain some useless words. The occurrence  frequency of such words is normally too high to make the query distinctive. As a result, in information retrieval, such useless words will be eliminated automatically. STOP WORDS usually contain articles, prepositions, conjunctions, etc.

Stem Words An English word may bear different forms. The Porter  Stemming Algorithm [8] is used to remove such differences, and standardize them.

Same Case Letter  Conversion is also performed with respect to the letters in a query to ensure that letters are standardized to the same case, for example, lower case letters are used.

C. Query Feature Vector Since a query can be treated as a special case of document, that is, a very short document with only several words. So, each query, after the query preprocessing step, will be represented as a feature vector, like the document feature vector.

The following are 2 sample queries for illustrative purposes: Query 1: Artificial Intelligence.

Query 2: Data Mining.

TABLE II FEATURE VECTOR REPRESENTATION FOR THE 2 SAMPLE QUERIES  Term Query 1 Query 2 artificial 1 0  data 0 1 intelligence 1 0  mining 0 1  D. Query Association Mining A query sequence is defined as a sequence of input queries within a user session: q1, q2, q3,?, qn.

In this paper, an assumption is made that for each query session, queries that most users key in sequentially are relevant to the same category, or subject. As a result, we can classify the different queries together in a way when their occurrences have exceeded a pre-defined minimal occurrence frequency.

In data mining, association rules mining finds interesting association or correlation relationships within a large set of  data items[1]. Let J={i1, i2, ?, im} be a set of items. Let D, the task relevant data, be a set of database transactions where each transaction T is a set of items such that T ? J. Each transaction is associated with an identifier, called TID. Let A be a set of items. A transaction T is said to contain A if and only if A ? T. An association rule is an implication of the form A ? B, where A ? J, B ? J, and A ? B = ?. The rule A ? B holds in the transaction set D with support s, where s is the percentage of transactions in D that contain A ? B (i.e., Both A and B). This is taken to be the probability, P(A ? B).

The rule A ? B has confidence c in the transaction set D if c is the percentage of transactions in D containing A that also contain B. This is taken to be the conditional probability, P(B|A). That is,  Support(A ? B) = P(A? B) Confidence(A ? B) = P(B|A)  Rules that satisfy both a minimum support threshold and a minimum confidence threshold are considered strong.

FP-Growth (frequent pattern growth) is an algorithm for finding the frequent itemsets, which adopts a divide-and-conquer strategy. It compresses the database by gathering frequent items into a frequent-pattern tree, or FP-tree, without sacrificing the itemset?s association information.

E. Query Association Mining All distinct queries will be treated as all element of items, i.e.

J={i1, i2,,, in} as demonstrated in the above-mentioned concept of association. Any duplicated queries within a session will be treated as occurring only once.

Definition of User Sessions The user session is defined as the transaction T, and all such transactions are considered as elements of D. As the IP address is used to identify the computer in the world of Internet communication, and each time a computer may use a different IP address to access the Internet, the same IP address and a predefined usage period, e.g., 10 minutes, will be used to identify a range of user access as the user session.

Suppose there are only 9 user sessions in a query log, and each session has its own query IDs (The query IDs will be used to represent the distinct queries, see table 3).

TABLE III TRANSACTIONAL DATA FOR QUERY LOG.

User Session  IDs  List of query IDs  T00001 q1, q2, q5 T00002 q2, q4, q6 T00003 q2, q3 T00004 q1, q2, q4 T00005 q1, q3, q8 T00006 q2, q3 T00007 q1, q3, q7 T00008 q1, q2, q3, q5, q9, q10 T00009 q1, q2, q3     Generating Strong Association Rules from Frequent Itemsets Given the minimum support count is 2, mining the FP-tree, frequent itemsets are obtained. From the frequent itemsets, strong association rules are generated. Given that the minimum confidence threshold is 60%, then only the rules shown in Bold Italic fonts are considered strong (see table 4).

TABLE IV STRONG ASSOCIATION RULES GENERATION  Frequent itemsets  All non empty subsets  Associ ation Rule  Confidence  {q2, q5} {q5} q5?q2 2/2=100% {q1, q5} {q5} q5?q1 2/2=100%  {q2, q1, q5}  {q1, q5} ????? ?q2  2/2=100%  {q2, q5} ????? ?q1  2/2=100%  {q5} q5?q1 ???  2/2=100%  {q2, q4} {q4} q4?q2 2/2=100% {q2, q3} {q3} q3?q2 4/6=66.66%  {q1, q3} {q1} q1?q3 4/6=66.66% {q3} q3?q1 4/6=66.66%  {q2, q1, q3}  {q1} q1?q2 4/6=66.66%  Most Related Items The queries which has the maximum scores (confidence), will be considered to be most related. Moreover, if two or more queries carry the same maximum total scores, then the latest one in the query log will be retrieved.

F. Term Association Since the quantity of exact query matches in the query log may not be large enough to generate many query associations, here, term associations will be adopted as a query association alternative. As a result, the transaction data for the query log will be modified as shown in the following (see table 5). It is worth mentioning that the remaining of the associations are identical to what have been done with query association, where tx is the xth term (rather than the xth query).

TABLE V TRANSACTIONAL DATA FOR QUERY LOG.

User Session IDs  List of term Ids  T00001 t1, t2, t5 T00002 t2, t4, t6 T00003 t2, t3 T00004 t1, t2, t4 T00005 t1, t3, t8 T00006 t2, t3 T00007 t1, t3, t7 T00008 t1, t2, t3, t5, t9, t10 T00009 t1, t2, t3  G. Query Expansion by Query Information in the Query Log Except using association to find the related queries in the query log, other information in the query log will also be adopted as for the query expansion.

Query Expansion by Similar Queries Similar queries in a query log are retrieved to enhance the quality of query expansion. That means if some terms in the original query match some parts of other queries in the query log, then such old queries will be retrieved from the query log to expand the newly inputted query. For example, in the query log, the queries: ?computer? and ?okc computer? are considered as similar queries.

This algorithm will first find out the queries in the query log which contain all the keywords of the input query. If no such query in the query log is found, the algorithm will find out the queries (in query log) which contain most keywords of the input query.

If the query length is short (e.g., only one or two terms), many similar and unrelated queries will be returned. Under such situations, the query with the highest occurrence frequency will be selected as the candidate. If again, two or more queries with the same maximum frequency, the latest one in the query log will be selected.

Query Expansion by Same URL Queries In the query log, if the same URL is retrieved by 2 or more queries, then such queries are considered as semantically equivalent, similar, or related. Then such queries are treated as alternative query hints used to expand the queries. For example, in the query log, the queries: ?usps.com? and ?united states postal service? carry the same meaning. ?postal service?, ?united states postal service? are considered as related queries. ?barnes and nobels?, ?barnes and nobels bookstores? are also considered related queries.

According to the above approach, if more than one query is returned, the one with maximum occurrence frequency will be returned. In case that two queries with the same maximum occurrence frequency are found, then the latest one will be returned.

Query Expansion by Stemming, Stopword Removal Backward Algorithm After some queries have been processed by the stemming, stopword removal algorithm, they become a bunch of identical queries. Then, these identical queries in their original forms will be considered as the expanded query alternatives for one another. For example, ?stochastic?, ?stochastics? are queries of this type.

If more than one query matches with ?stemming, stop word removal backward algorithm? , the latest one will be selected.

Query Expansion by Final Query in a Query Session As mention above, query sessions are established in the query log. Within a query session, a user is assumed to search for one and only one category, or subject. So defined, the last query in a session may represent the actual query (or at least the most relevant and meaningful query) which a user wants to formulate. In this way, the last query in any one query     session will be considered as a viable query expansion alternative. Stated otherwise, if any new query matches with the queries within a query session, the final (last) query in that query session will be returned.

For example, ?postal service postage stamps? is the final query in a session for query ?postal service?.

Under such situations that the input query happens to find matches in several query sessions, the final query in the latest query session will be retrieved.

A Mixture of Query Information Each of the foregoing methods for query expansion, namely ?Similar Queries?, ?Same URL Queries?, ?Stemming and Stopword Backward Algorithm?, and ?Final Query in a Query Session?, are tested on the query log by feeding into a random sample of 10 to 20 input queries (results are reported in table 6). Since none of the four methods returns satisfactory performance, a refinement procedure blending all of them is therefore proposed.

TABLE VI PERFORMANCE OF DIFFERENT METHODS FOR QUERY EXPANSION.

Query Expansion Methods  Performance Based on a Random Sample Test  Same URL Queries Less than 43% of the query can be expanded. This method will return both related and unrelated queries.

Similar Queries If the query length is short (e.g., one or two terms only), many similar and unrelated queries are returned.

Final Query in a Query Session  Less than 21% of the query can be expanded.

Stemming and Stopword Backward Algorithm  Less than 6% of the query can be expanded.

Based on the test results, a refinement procedure is proposed as follows: the four methods are ranked according to their test performance (summarized in the above table). If a preceding (better performing) method (for example, ?Same URL Queries?) returns an identical query (no new term has been added to the query), the next query expansion method will be used and the process goes on until all four methods are exhausted.



III. EXPERIMENTS A query log from AllTheWeb is adopted to perform the testing.

It consists of all query records entered at a certain time lot of a particular day.

Query Length Distribution Most queries in this sample query log have length only of 2 terms (41.41%), coming after are queries of 3 terms (26.55%), 1 term (17.84%), and 4 terms (10.486%). For queries of all other varying length, the percentage is less than 3%.

The sample query log used in this study contains 61,649 query entries. After the preprocessing of the queries, the total number of distinct queries is reduced to 19,807.

A. Performance Evaluation For every query refinement mechanism, the performance should be evaluated, so the effectiveness of the underlying method can be reviewed.

Since the number of web pages is enormous, it is not practical to retrieve all pages to do the evaluation. Here, the first 20 return results are evaluated to measure the rate of relevant documents.

R  k kN kAR  1 (1)  where R is the number of all relevant results, Nk is the number of results up to the k-th relevant results.

In this study, since only the query expansion mechanism is built, and no web retrieval system is involved, then the query term reweighting schema is not applicable. As a result, an Internet search engine (i.e., Google) is used to evaluate the average rate.

B. Rate of Relevant Documents for Queries Expanded by Association Rules from the Sample Query Log Given a minimum support count of 2 (see section 3.3.4, ii), with an associated confidence of 10%, 40% and 70%, the association rules are generated.

TABLE VII . RATE OF RELEVANT DOCUMENTS FOR THE ORIGINAL QUERY AND QUERIES  EXPANDED BY QUERY ASSOCIATION RULES.

Query Length  Original Query  Confidence  10% 40% 70%  1 39.69% 39.69%46.34% 39.69%  2 62.97% 62.88% 62.88% 62.97%  3 75.46% 75.46% 75.46% 75.46%  4 65.48% 65.48% 65.48% 65.48%  Average 60.90% 60.87%62.54% 60.90% Nearly no improvement (or a little bit improvement) is found when these association rules have been applied (see table 7 for a comparison).

The reason may be that the quantity of exactly matched for all terms in the left hand side of any association rule with the original query is few. Thus, nearly no expansion can be done on the original query. This may also be the reason why the performance is nearly the same as the original query.

C. Rate of Relevant Documents for Queries Expanded by Query Information from the Query Log As shown in table 8, the application of query information from the query log for query expansion in general has improved the rate of relevant documents of query expansion.



IV. CONCLUSIONS In general, a mild improvement has been achieved for using various methods of query information. Hardly any     improvement (or only a little bit) in terms of average rate for relevant documents for association is found.

Generally speaking, the query expansion for 1 to 2 term queries is more effective than that for 3 to 4 term queries. One possible reason to explain this phenomenon may be that information contained in 3 to 4 terms is enough for users to express their actual needs. Under these circumstances, the expanded query may make the expression even worse than it was before, leading to the downgrade of the precision.

