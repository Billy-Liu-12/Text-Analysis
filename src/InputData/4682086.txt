A Combination Approach to Frequent Itemsets Mining

Abstract   In this paper, we propose a new mining of frequent itemsets algorithm, called SFI-mine algorithm. The SFI-mine constructs pattern-base by using a new method which is different from the conditional pattern- base in FP-growth, mines frequent itemsets with a new combination method without recursive construction of conditional FP-trees. It obtains complete and correct frequent itemsets. We have conducted the examples of all definitions and correctness proving.

1. Introduction   Frequent itemsets mining is useful for discovering the interesting associations hidden in large database.

The uncovered associations can be represented in the form of association rule or sets of frequent items. The association rule was first introduced in [1]. The classic application is market basket analysis which is the analysis how the items purchased by customers are associated. The association rule is wildly applied in many research fields such as decision support, financial forecasts, bioinformatics, web mining, etc.

Moreover, it helps in data classification, clustering and others data mining task as well. The association rule mining algorithms is to decompose into two major subtasks: (1) To generate all the frequent itemsets that satisfy the minsup threshold.

(2) To extract all the high confidence rules from frequent itemsets found in previous step.

In recent years, many researches have been focusing on the mining of frequent itemsets. The most popular and classic algorithm is the Apriori algorithm which was first introduced in [2]. There are many approaches based on this algorithm such as [3] [4] [5]. However, Apriori based algorithm has problem of scanning database many times to generate candidate sets especially when dealing with the database with a lot of long itemsets. To overcome this problem, many  algorithms have been proposed. The FP-growth algorithm is one of these improved algorithms and is among the most popular which is introduced by [6].

The FP-growth algorithm mines frequent itemsets without generating candidate sets and scans database only twice. Many approaches have been proposed to mine frequent itemsets based on this algorithm. In [7], they proposed depth first algorithm for mining of frequent itemsets. This method compresses database into FP-tree by using Children table to avoid generating many sub trees. In [8], they proposed TreeITL-Mine for combines the features both horizontal and vertical data layout for frequent pattern mining. In [9], CP-mine algorithm was introduced for mining the set of frequent items from MFP-tree. The drawback of this method is the updating of the marked value which increases space and runtime if many marked nodes contain in pruning tree.

We propose a new frequent itemsets mining algorithm, named SFI-mine algorithm. This algorithm mines frequent itemsets from FP-tree, constructs pattern-base by using a new method which is different from conditional pattern-base in FP-growth but still maintains the correctness. The SFI-mine mines frequent itemsets with a new combination method without recursive construction of conditional FP-trees.

As the result, the SFI-mine obtains complete and correct frequent itemsets. This paper is organized as follows. In section 2, background is presented. The proposed SFI-mine algorithm is illustrated in section 3.

An illustrate example is given in section 4. The correctness proving is shown in section 5. Finally, the conclusion is addressed in section 6.

2. Background  2.1. The Basic Concept  The basic concept for mining of frequent pattern [10], [11], [12] presents as follow:   DOI 10.1109/ICCIT.2008.383    DOI 10.1109/ICCIT.2008.383     Definition 1 (Transaction database). Let },...,,{ 21 mxxxI = be a set of items, and a transaction database  },...,,{ 21 nTTTDB = , where ]),...,1[( niTi ? is a transaction which contains a set of I .                                            ? Example 1. Let the first two columns of Table 1 is a DB. It consists of ten transactions, labeled as TID in the table, and eleven items. For example, The first of T (or TID = 1) is {a,b,c,d,f,g,k}.

Definition 2 (Support). The support (or occurrence frequency) of a pattern A is the number of transactions containing A in DB, where A is a set of items.             ? Example 2. According to Table 2, there are eleven items with their support.

Table 1. A transaction database TID Items Sorted Frequent Items  1 a,b,c,d,f,g,k f,c,a,b,k 2 b,c,e,f,j,k f,c,b,j,k 3 a,f,h,j f,a,j 4 a,b,c,d,j c,a,b,j 5 f,i f 6 a,b,c,h,k c,a,b,k 7 c,e,f,i f,c 8 a,b,c,d,f,k f,c,a,b,k 9 a,f,j f,a,j  10 c,f,h,i f,c   Table 2. The support all of items Items a b c d e f g h i j k Support 6 5 7 3 2 8 1 3 3 4 4   Table 3.  The head table with minsup = 4  Items f c a b j k Support 8 7 6 5 4 4   Definition 3 (Minimum support). The minimum support or minsup is the threshold that user defines for selection of frequent items.                                       ? Example 3. The DB in Table 1, user defines minsup = 4. Therefore, all items that have support not less than minsup are presented in Table 3, so those items are frequent items.

Definition 4 (Frequent itemsets and infrequent itemsets). For any Item x, support(x) is defined to be a number of transaction T for which Tx ? . For a given parameter minsup, an item x is called frequent item if support(x) ? minsup, others called infrequent item. The set of frequent item, called frequent itemsets, is denoted by FS , others called infrequent itemsets, denoted by FS .                                                            ? Example 4. All itemsets and its supports illustrated in Table 2. There are FS and FS . In Table 3, it is the header table that contains only FS , excludes FS .

Because of all items in Table 3 have support not less than minsup.

Definition 5 (Frequent pattern tree). A frequent pattern tree or FP-tree is a tree structure with the following properties: (1) It consists of a root, a set of items-prefix subtrees which are the children of root and a header table.

(2) Each node in the item-prefix subtrees consist of three fields: item-names, support and node-link, where item-name is the name of node represents, support is the number of transactions represented by the portion of the part reaching this node, and node-link links to the next node in FP-tree carrying the same item-name or null.

(3) The header table consists of two fields: item-name and head of node-link that point to the first node in FP- tree.                                                                              ? Based on definition 5, the construction of FP-tree algorithm presents as below:   Algorithm 1: FP-tree Construction Input : A transaction Database DB Output : FP-tree 1  Procedure FP-treeConstruction 2  scan the DB once to collect the frequent itemsets and their 3    support then sort in support descending and create in header 4     table 5  FP-tree = null 6  for each transaction ti in DB 7     select and sort the frequent items in ti by order in header 8         table 9     call InsertTree(FP-tree, ti ) 10   end for  11   Procedure Insert_tree(root, DB) 12   for each item xi in DB 13        if root has a child N then N.item-name = xi 14         increment N++ 15         root = N 16     else 17         create the new node xi is the child of root 18         link header table to node 19     end if 20  end for  Figure 1. The frequent pattern-tree algorithm   Example 5. The DB is scanned for second times to create the FP-tree. We first create the root of the tree.

The first transaction is leaded to the construction of the first branch of FP-tree: (<f:1>,<c:1>,<a:1>,<b:1>,<k:1 >). The items in the transaction will be inserted into the tree ordering by descending support value. The second transaction (<f>,<c>,<b>,<j>,<k>) shares the same prefix (<f>,<c>) with the existing part (<f>,<c>,<a> ,<b>,<k>). Thus, the support of each node along the prefix is increasing by 1 and the remaining item list (<b>,<j>,<k>) in the second transaction will be created as the new node. The new node <b:1> is linked to the child of <c:2>; node <j:1> as a child of <b:1>; node     <k:1> as a child of <j:1>. For the third transaction (<f>,<a>,<j>), it shares only the node <f>. Thus, f?s support is increased by 1 and remained item list (<a>,<j>) in the third transaction will be created as the new node. The new node <a:1> is linked to the child of <f:3>; node <j:1> as a child of <a:1>. The remaining transaction in DB can be done by the same way. After all transactions are scanned, the FP-tree is presented in Figure 2.

Figure 2. The Frequent Pattern Tree   Table 4. All conditional pattern-base  Items Conditional pattern base k {(fcab:2),(fcbj:1),(cab:1)} j {(fcb:1),(fa:2),(cab:1)} b {(fca:2),(fc:1),(ca:2)} a {(fc:2),(f:2),(c:2)} c {(f:5)} f {}   Definition 6 (Conditional pattern-base). The conditional pattern-base is a sub database which consists of a set of prefix paths in the FP-tree which co-occurrence with a suffix pattern. ? Example 6. Let us examine the mining process for construction of pattern-base by starting from the bottom of the node-link of the header table, according to Figure 2.

For node k, there are three paths in the FP-tree: (<f:8>,<c:5>,<a:2>,<b:2>,<k:2>), (<f:8>,<c:5>,<b:1>, <j:1>,<k:1>) and (<c:2>,<a:2>,<b:2>,<k:1>). All nodes in the first path appear twice together with k, so we get only k?s prefix path (<f:2>,<c:2>,<a:2>,<b:2>).

Similarly, all nodes in the second path appear once together with k, so k?s prefix path is (<f:1>,<c:1>, <b:1>,<j:1>). All nodes in the last path appears together with k once, k?s prefix path is  (<c:1>,<a:1>, <b:1>). These three prefix paths of k are (<fcab:2>, <fcbj:1>,<cab:1>), called k ?s conditional pattern-base.

Similarly, the remaining nodes in the header table such as j, b, a, c, f in sequence are constructed in the same  way. We summarize all conditional pattern-base in Table 4.

Definition 7 (Conditional FP-tree). The conditional FP-tree is the sub tree which is constructed from a conditional pattern-base as mining pattern.                ? Example 7. From previous example, construction of k ?s conditional FP-tree by doing the following steps.

The k?s header table is constructed from conditional pattern-base by examining the support of each item that  is not less than minsup. There are two items, <c:4> and <b:4>. The conditional FP-tree is constructed by examining the first path in conditional pattern-base, <fcab:2> which exclusion of infrequent items (or node which not appear in k?s header table) follow by insertion of frequent item <cb:2> to k?s conditional FP-tree. Similarly, to insert the frequent items of the second path to FP-tree, <cb:1>. Lastly, insertion of the frequent items of the third path to FP- tree, <cb:1>, as seen in Figure 3.

Figure 3. A conditional FP-tree for item k   2.2. Frequent Pattern Growth Algorithm  A FP-growth algorithm is introduced by Han J. et al [6], [10]. The algorithm does not subscribe to the generation of  candidate itemsets paradigm of Apriori.

It encodes the data set using a compact data structure called FP-tree and extracts frequent pattern directly from this prefix tree. This method consists of three main steps. Firstly, to scan the DB once to find 1- frequent itemsets. Secondly, to construct the header table from 1-frequent itemsets by descending support sorted. The support value of each item is shown in Table 2, so it consists of frequent itemsets and infrequent itemsets. The frequent itemsets are sorted by descending support and presented in Table 3, infrequent itemsets are discarded. Next, to scan DB for the second times to construct the FP-tree, according to definition 5 and example 5. Lastly, to explore frequent pattern from FP-tree by using FP-growth algorithm which present as Figure 5 and summarize in Table 4.

Example 8. In this example, we present the mining of frequent patterns. The mining process illustrate in Figure 4 is based on construction FP-tree shown in Figure 2. Starting mine at node k.

For node k, the conditional pattern is {(fcab:2), (fcbj:1),cab:1}. Constructing conditional FP-tree on branch (c:4,b:4), as shown in Figure 2. Then we mine by calling ?mine(<f:4,b:4>|k)?. The items that involve     mining are b and c in sequence. The first derives a frequent pattern (bk:3), a conditional pattern-base {(f:4)} and then call ?mine(<f:4>|bk)?; the second derives a frequent pattern <fk:4>; and the third derives a frequent pattern <fbk:4>. Therefore, a set of frequent patterns involving k is {<k:4>,<bk:4>,<fk:4>,<fbk:4>}.

Similarly, node j?s conditional pattern is {(fcb:1), (fa:2),(cab:1)}. All items? support less than minsup, so the mining for j terminates. Node b derives conditional pattern-base {(fca:2),(fc:1),(ca:2)} and conditional FP- tree mine(<c:5,a:4>|b), a set of frequent patterns involving b is {<b>,<ab:4>,<cb:4>,<cab:4>}. Node a, the conditional pattern is {(fc:2),(f:2)(c:2)} and conditional FP-tree mine(<f:4,c:4>|a) , a set of frequent patterns involving a is {<a:4>,<ca:4>,<fa:4>,<fca:4>}.

Node c?s conditional pattern-base is {(f:5)} and conditional FP-tree mine(<f:5>|c) , a set of frequent patterns involving c is {<fc:5>}. For the last, node f derives only <f:8> but no conditional pattern-base, so terminates.

The conditional FP-trees and the sets of frequent pattern are summarized in Table 5.

Table 5 All frequent patterns Items Conditional FP-tree Frequent pattern  k (<f:4>,<b:4>|k) {k, bk, fk, fbk} j {} {} b (<c:5,a:4|b) {b, ab, cb, cab} a (<f:4,c:4>|a) {a, ca, fa} c (<f:5>|c) {c, fc} f {} {}   Algorithm 2: FP-growth Input : FP-tree and minsup Output : The set of all frequent patterns Method: call FP-growth(FP-tree, null).

1  Procedure FP-growth( Tree, ? ) 2  if tree contains a single prefix path    // Mining singlepath 3     let P be the single prefix-path part of tree; 4     let Q be the multiple path with the top branching node 5              replaced by a null root; 6    for each combination (denote as ? ) of node in P 7     generate itemset ?? ? with support=minsup of node in ? ; 8    let freq_pattern_set(P) be the set of patterns so generated; 9  else let Q be Tree; 10    for each ia in Q                              // Mining multiplepath  11    generate pattern ?? ?= ia with support= ia .suppot; 12    construct ? ?s conditional pattern-base and 13                  ? ?s conditional FP-tree ? ; 14     if ?? ?Tree   then  call FP-growth( ?? ,Tree )  15     let freq_pattern_set(Q) be the set of patterns so generated; 16 return(freq_pattern_set(P) ? freq_pattern_set(Q) ? 17     (freq_pattern_set(P) ?  freq_pattern_set(Q))  Figure 4. The frequent pattern-growth algorithm    3. The Approach   In this section, we propose a new algorithm to mine frequent itemsets, called SFI-mine. The SFI-mine algorithm uses a new method to construct pattern-base from FP-tree which is different from conditional pattern-base in FP-growth and mines frequent itemsets with a new combination method without the need to recursive construction of conditional FP-tree during frequent itemsets mining. As a result, the SFI-mine produces complete and correct frequent itemsets. The approach has essential definitions as follow.

Definition 8: (Postfix item) Let IA ? . The postfix item PI of A, PI(A), is the last item of A.                      ? Example 9. According to the header table in Figure 2, the first PI that we examine is c and next are a, b, j and k in sequence.

Definition 9: (Pattern-base) The pattern-base PB of item x, xPB , is the pattern that contains the whole items corresponding to the path start from all the topmost item to item x. We denote })(|{ xAPIAPBx == .            ? Example 10. According to Figure 2, let PI = b, following the node-link for b. We get three paths in tree: (<f:2>,<c:2>,<a:2>,<b:2>), (<f:1>,<c:1>,<b:1>) and (<c:2>,<a:2>,<b:2>). To build the pattern-base for b, we exclude PI (or node b) in these three paths, (<f:2>,<c:2>,<a:2>), (<f:1>,<c:1>) and (<c:2>,<a:2>).

Therefore, PBb = {(fca:2),(fc:1),(ca:2)} Definition 10: (Pre-frequent item) Let PFx be the set of summarized item of PB in postfix item x with support ? minsup, so PFx = {w|w?  PBx;?  =  n  i 1  support )( iw ? minsup}  ; where n is the number of w in PB.                             ? Definition 11: (Infrequent itemsets) Let IFx be the set of summarized item of PBx in postfix item x with support less than minsup, so  IF = {z|z?  PBx;? =  n  i 1  support )( iz < minsup}  ; where n is the number of z in PB.                               ? Example 11. Let we consider PB of node b in the above example. After we summarized the support of all items in b?s paths, we get {<c:5>,< a:4>,<f:3>} Thus, PFb = {<c:5>,< a:4>} and IF = <f:3>}.

Definition 12: (Frequent base) The frequent base FB is a set of itemsets in PB that excludes IF.

FB={(A-IF)|A?  PBx; ? =  m  i 1  support(A-IF) ? minsup}  ; where m is the number of A-IF in PB.                        ? Example 12. To consider PB in example 9 and IF in example 11, so FB = {(ca:4)}.

Definition 13: (Combination frequent itemsets) The combination frequent pattern Fx is separated into two cases. Case 1, to derive the Fx for second level by combining the postfix item x with item in PFx. Case 2, to derive the Fx derive for the higher second level by combining the postfix item x with items in FBx. The item in Fx is  frequent pattern.                                      ? Example 13. From example 11, there are two items in PFb. Case 1, we combine item b with item in PFb for the second level, so Fb for second level are <cb:5> and <ab:4>. Case 2, according to example 12, we combine b with itemsets in FB. Then, Fb for third level of node b is <cab:4>.

The SFI-mine algorithm consists of the following steps as shown in Figure 5, in brief, there are six major steps.

Algorithm 3: SFI-mine Input: FP-tree, minsup(xi) of each item xi in the HeaderTable Output: The complete and correct sets of all frequent itemsets: FS Method call SFI-mine(Tree,root) 1 Procedure SFI-mine(Tree,x) 2 i=2      // defining the first item 3 repeat 4    for each xi in the header table from the topmost to the 5         Bottommost 6          // construction of PB 7       Calculate support of all items corresponding to the path 8              start from all the topmost item to xi and store all 9              corresponding path to  ixPB  10       Check support of each item in ? ixPB  minsup then  11              store item to ixPF  12        // combination of the second level 13        Construct  ii xix PFxF .=  14        If 1> ixPF then Call High_combine  15  end for 16 until _tree = ? 17 Result FS =  ixF?                    // union all ixF to FS  18 Procedure High_combine (  ixPF , ixPB )  19  Construct ixFB  20  //combination of the level higher than the second level 21  Construct  ii xix FBxF .=  22  Return ixF  Figure 5. The SFI-mine algorithm  In line 13 and line 21, we obtain frequent itemsets by using combination of PI with a set of PF and FB.

The data structure table of PF and FB consists of item- name and support.

Step 1. Defining the first item, PI, at the second node  in the header table.

Step 2. Construction of PB(PI) and calculation support of each item in PB, if item.support is not less than minsup, then these items are stored in PF.

Step 3. Construction of F for the second level by combination of PI with PF.

Step 4. Checking member item of PF, if the amount of PF is greater than 1 then FB is constructed from PB with exclusion of IF. To construct F in the level higher than the second level, PI is combined with FB, as the result, F is returned.

Step 5. Checking items in the header table, if there are any items in the header table, then define PI at the next item in the header table and step 2 to step 4 are repeated until there is no item left, then proceed  to step 6.

Step 6. Union all F and store the output in FS.

4. An Illustrative Example  In this section, we illustrate an example based on definitions and an algorithm in section 3. The details of all steps are presented as follow: Example 14.

According to Figure 2 and Algorithm in Figure 5, we start examining the first item at c (PI = c), following the node link of item c. To consider each corresponding path starts from the topmost of item c to item c, we get one path in tree: (<f:8>,<c:5>). To build the PB for c, we exclude item c in path, <f:5>. Notice that counter of item in path is set to 5 because f appears five times together with c, so PFc ={<f:5>}. After that, to combine item in PFc with c. We get Fc = {<fc>} because PFc has only one item, so we terminate considering item c.

Next, we examine item a (PI = a), starting at corresponding path of item a from the topmost of item a to item a. We get three paths in the tree: (<f:2>,<c:2>,<a:2>), (<f:2>,<a:2>) and (<c:2>,<a:2>).

We exclude item a for construct PBa: (<f:2>,<c:2>), (<f:2>) and (<c:2>) or PBa = {(fc:2),(f:2),(c:2)}. After adding support of these three paths: (<f:4>,<c:4>), we get PFa = {(f:4),(c:4)}. We then combine item in PFa with a, we get two combination frequent itemsets at the second level Fa = {<fa>,<ca>}. For PFa, it has two items, so we construct the third level of combination itemsets by constructing FBa. In this case, IF={}, so we construct FBa from PBa. There is no itemset in the third level because no itemset?s support greater than minsup, so we terminate considering item a.

The remaining items (b, j and k) in the header table can be done in the same way. After all the items are done, we present all PBx in Table 5 , all Fx in Table 6.

Last, we present FS that separates by level of combination of all Fx, present in Table 7.

Table 5. The Pattern-base Items Pattern-base  c {(f:5)} a {(fc:2), (f:2), (c:2)} b {(fca:2),(fc:1),(ca:2)} j {(fcb:1),(fa:2),(cab:1)} k {(fcab:2),(fcbj:1),(cab:1)}   Table 6. All combination frequent itemsets  Items Combination frequent itemsets c <fc> a <fa>,<ca> b <cb>,<ab>,<cab> j {} k <ck>,<bk>,<cbk>   Table 7. All frequent itemsets  Level Frequent Itemsets 1 {f, c, a, b, j, k} 2 {fc, fa, ca, cb, ab, ck, bk} 3 {cab, cbk}   5. Correctness  In the following theorem, we show that our algorithm can mine all frequent itemsets completely and correctly.

Theorem 1. The all frequent itemsets that obtained by the SFI-mine algorithm are both complete and correct.

Proof. We separate our proof into two cases.

Case 1. Let the combined itemsets i = x.ai ; ai?PF; x=PI. We know that support(ai) ? minsup, according to Definition 10. When we combine x with ai , so support(i) ? minsup. Thus, i is frequent itemsets for the second level, according to Definition 13.

Case 2. Let the combined itemsets j = x.bi ; bi?FB; x=PI. We know that support(bi) ? minsup, according to Definition 12. When we combine x with bi , then support(i) ? minsup. Thus, j is frequent itemsets for the higher second level, according to Definition 13.

Therefore, itemsets mined from case 1 and case 2 are frequent itemsets.

6. Conclusion  We have presented a new algorithm to mine frequent itemsets, named SFI-mine algorithm. We illustrate the detail of new definitions, examples and algorithm of the approach. The SFI-mine is developed by mining of frequent itemsets from FP-tree; construction of a new pattern-base which is different from a conditional pattern-base in FP-growth and mining frequent  itemsets with a new combination method without recursive construction of conditional FP-trees. The results of this method are still obtaining complete and correct frequent itemset. We conclude by giving examples and proving correctness.

