A Microkernel-based Resource Loading Manager  on Geographic Information Technology Platform

Abstract ? This paper presents a lightweight, efficient and  scalable microkernel plug-in geospatial information application system of the program and its implementation method. It is used to solve the technology problem, such as flexible, low efficiency, big redundancy of existing geographic information system application function configuration. We have designed a software model called Resource loading manager(RLM). Through the RLM we can achieve efficient allocation of geographic information resources and security management. And through the concrete application in forestry and water conservancy of GIS, we further analyzed the core idea of RLM and its usage.

Finally, we design an experiment to verify the effect of the RLM, and analyze the experimental data.

Keywords?RLM; microkernel; GIS; resource loading manager.



I. INTRODUCTION The concept of Microkernel (micro kernel) was first put  forward by Richard Rashid. It was originally made for building microkernel operating system based on message passing mechanism, not for software architecture services[1]. In recent years, as the development of software systems, with the "component" and "hierarchical" software system development, micro-kernel technology and build ideas gradually be introduced into software design framework for the "decoupling possible relationships between components." More and more modern software systems adopt the idea of microkernel, by using plug-ins to realize software architecture. But in the field of GIS, microkernel-based technology standardized plug-in system is not yet established. The way of application services provided by traditional GIS platform have several options:  a) Based on GIS platform, directly order the development of new application systems to meet user needs;  b) Modify the existing similar software systems.

Scheme a), b) are more commonly used method, but the efficiency is low. Even if there is a little small change, or users have new functional requirements, the engineers often need to develop system or modify the code[2]. These will resulted in low software reuse rate, and poor scalability.

For the government, enterprises, individuals and other different types of users to provide a lightweight, efficient and scalable geospatial information operation support environment, the research subject of ?geographic space information of microkernel architecture technology? was determined. We have established a geospatial information support platform based on microkernel architecture technology, including  remote sensing data processing and open geographic information processing and mutual integration process, and provides a lightweight runtime environment. In this case, not only a lot of software purchase costs can be saved, but also a variety of personalized geospatial information processing demand can be met. This article presents a lightweight, efficient and scalable microkernel architecture geospatial information technology and method[3].



II. RESOURCE LOADING MANAGER This paper presents a lightweight, efficient and scalable  microkernel plug-in geospatial information application system of the program and its implementation method, which is used to solve some technical problems of the existing geographic information system, such as flexible function configuration, low efficiency, and big redundancy[2].

In order to ensure the reasonable resource management, this paper designs a geospatial information application system based on micro kernel technology, geospatial information resource loading manager (RLM), used to load the application of the plug-in function module of program, in order to realize the business logic of the application program. The structure of the RLM is shown in figure 1[4].

Fig. 1. The structure of the RLM.

From figure 1, FSRL (functional service requirements list) is used to count the resources required by the client software.

The information includes at least: client software security level, the features of required resources, and the method of administration.

According to FSRL, FR (function resolver) puts the functional requirements of client software in accordance with  Supported by the National Science & Technology Pillar Program during the 12th Five-year Plan Period of China(2011BAH06B04; 2012BAB11B0501)     the rules of the system function modules to subdivide, and builds functional modules list of requirements.

FMRL (functional modules requirements list) used to describe the function modules refined from the functional service requirements of client software.

LC (list counters) is used to allocate function modules according to FMRL.

RCF (resource configuration file) is used to identify all functional modules.

AM (access manager) is used to check the LC calls to functional modules permissions.

FC (function combiner) is used to package the function modules called by LC for plug-in, using for client software.

The Timer is used in one or more functional blocks occupied by other programs, and cannot be immediately called.

The timer periodically detects the required permissions whether the function modules were released, and dynamically loaded them into the function plug-in when they were released.



III. IMPLEMENTATION The basic idea of the method described above is: The  process logic of programming system is implemented through a plug of expression of microkernel architecture. FR is used to decompose the functional requirements of client software into functional modules requirements. LC re-organize and dispatches modules, and through FC to provide plug-ins for client software. Furthermore, in order to ensure the timeliness, accuracy of function calls, we use RCF and AM to manage the resources. Meanwhile, the timer periodically detects the function module which unable to be used temporarily. When the function permits to release it, the FC immediately loads into the plug-in functionality for client software to use. The process of the RLM is shown in figure 2:  Service request FSRL  Functional decomposition  FMRL  RCFWhether the modules can Be used  Function combine Module identifier  Response to the client software  TIMER    Fig. 2. A workfolw of the RLM.

The concrete implementation steps are as follows:  a) Client software confirms the service requests to generate FSRL, and submit to the RLM;  b) RLM confirms the FSRL submitted by client software.

Then FR decomposes the required service into small granularity of function module, and generates the LC;  c) LC views the RCF according to FMRL, confirming whether the required function modules can be called immediately. If possible, LC will call the corresponding function modules, and update the status identification of function modules in the RCF;  d) FC unified packages function service modules as function of plug-ins. These plug-ins response to demands of client software. Meanwhile, FC generates function module identification, and returns to the client software to use.

e) Client software calls function plug-ins, and returns plug- ins access to the RLM after completing corresponding operation requirement. Then RLM updates RCF.

According to the above scheme, step b) should also include the following steps: After RLM received FSRL submitted by client software, RLM decomposes the required service into small granularity of function module by FR. Meanwhile, RLM divides call requests of each functional module into read-only requests and marks them in generated function modules.

As the same, step c) should also include the following steps: After LC received FMRL, AM is read at first, in corroding to confirm whether the client software has the right to use the required level of the selected function modules. Then the results are identified in FMRL. For insufficient permissions to demand the use of functional modules, RLM will suspend the next steps. Finally, RLM checks RCF, confirms whether the required function modules can be used immediately. If the module cannot be called immediately, then the request will return temporarily, and the status will be identified in RCF[5].

Step d) should also include the following steps: The plug- ins provided to client software adopt the loose packaging mode.

For exclusive use resources such as write operation, when the user completes the functional corresponding function modules of the write operation in the plug-in use demand, the instant loading manager will return access to RLM, and updates RCF; Due to the function modules are occupied by the other programs without encapsulation plug-in function modules of the summary, the function will be used by the client software to set a time interval repeat step c), until the function modules dynamic load at the function in the plug-in.

Step e) should also include the following steps: Client software will receive FMRL after functional plug-ins package, suggests that the reason why some function modules cannot call.



IV. DEPLOYMENT After RLM was designed, we can deploy it in a GIS  platform. We take a GIS service platform used in Forestry and Water conservancy for example. The platform architecture including RLM is shown in Figure 3.

Fig. 3. The platform architecture including RLM.

As can be seen from the figure 3, the specific needs of water conservancy and forestry industry aggregate to a lot of new function modules. In this way, by adding RLM, we achieve a more efficient application of resources.



V. EXPERIMENT As to verify the resource loading manager, we design a test.

We run some typical tasks in the platform described in figure 3.

Each task runs in two modes: First, we run the task in the platform without RLM, and then run the same task with RLM.

In that way, we can compare the efficiency of two modes.

A. Experimental approach In order to more fully verify the effect of the RLM, We  choose four tasks with different difficulty levels. And we design a timer to timing the elapsed time of the task programs.

The platform deploys on the server, providing services for the client computers. The four task programs are beginning at the same time from different client computers. The chosen tasks are: a) data storage, b) height measurement, c) visual display and d) map rendering. We have repeatedly measured for many times. One group of test data is as follows:          TABLE I.  RUNNING TIMES IN TWO MODES  Number Running times (ms) a b c d Total  1 No RLM 5324 2675 3215 6061 18486 RLM 4983 2104 1982 4357 14303  2 No RLM 4727 2143 2549 5328 15825 RLM 4452 2243 1832 6021 15451  3 No RLM 6378 2467 3340 8734 21884 RLM 4514 2008 1679 4940 13926  4 No RLM 7033 2533 2976 5627 18978 RLM 5061 2021 1882 7034 16919  5 No RLM 5540 1920 3112 6241 18329 RLM 5210 2035 2275 5516 15577    B. Data analysis From the experimental data in Table 1, we can see that in  the platform without RLM, the client programs? running time is longer. At the same time, in the platform with RLM, the client programs? running time is shorter, and have smaller changes in the measured values, as shown in Figure 4.

Fig. 4. Data analysis.

The total run time is shown in Figure 5. In the platform without RLM, the five measured average total time is 18700.4, and the time is 15468.25 in the platform with RLM. In the experiment, when the platform is added RLM, the client programs decreased by 17.28% of the running time.

Fig. 5. Total run time.



VI. CONCLUSION This paper proposes a friendly geospatial information  application system based on micro kernel technology, as a plug-in for logical unit to realize the function of geographic information dynamic loading. At the same time, based on micro kernel technology, we build the atom granularity function module of management and automatic loading, has realized the function of resource efficient scheduling and ordering management, for application of geographic information system to construct and run efficient laid a foundation.

