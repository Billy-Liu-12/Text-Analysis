A Mediator Exploiting Approach for Mining Indirect Associations from Web Data  Streams

Abstract?Recently, the concept of indirect associations, a new type of infrequent patterns that indirectly connect two rarely co-occurred items via a frequent itemset called ?mediator?, has been shown its power in capturing interesting information over web usage data. Most contemporary indirect association mining algorithms are developed for static dataset. Our previous work has proposed an algorithm, MIA-LM, tailored to streaming data. In this paper, we propose a new efficient algorithm, namely EMIA-LM, for mining indirect associations over web data streams. EMIA-LM employs a mediator- exploiting search strategy, which reduce the search space as well as computation cost for generating indirect associations.

Besides, EMIA-LM adopts a compact data structure, alleviating unnecessary data transforming processes and consuming far less memory storage. Preliminary experiments conducted on real Web streaming datasets show that EMIA- LM is superior to the leading HI-mine* algorithm for static data and MIA-LM both in computation speed and memory consumption.

Keywords-data stream; indirect association; infrequent pattern; landmark model; mediator

I.  INTRODUCTION In the past decade, Web usage mining has emerged as an  important research field [11], which aims at discovering useful patterns from online Web traffic data collected at the Web servers. For example, one can perform association analysis on the web click log to discover typical user?s navigational pages for accessing the websites, which information would be useful for web restructuring, target marketing, and banner placement, etc. Such association patterns, however, favor only frequently accessing data and so will filter out some rare but informative patterns. For example, as pointed out in [13], patterns involving anti- correlated set of pages may represent the distinct navigational behavior of different groups of users. In this regard, Tan et al. [12] proposed the concept of indirect association rules as an alternative technique for capturing rarely occurred informative patterns and later in [13] demonstrated its power in discovering interesting patterns from web usage data.

The concept of indirect association is to indirectly connect two rarely co-occurred items via a frequent itemset called ?mediator?, and if appropriately utilized it can help to  identify real interesting ?infrequent itempairs?. Let I denote the set of all items. A formal definition of indirect associations is described below.

Definition 1 An indirect association ?x, y | M? means that an itempair {x, y} is indirectly associated via a mediator M (M ? I) if it satisfies the following three conditions:  1. Itempair support condition: sup({x, y}) < ?s; 2. Mediator support condition: sup({x} ? M) ? ?f and  sup({y} ? M) ? ?f; 3. Mediator dependence condition: dep({x}, M) ? ?d  and dep({y}, M) ? ?d, where ?s, ?f and ?d are itempair support threshold, mediator support threshold and mediator dependence threshold, respectively. dep(R, S) is a measure of the dependence between itemsets R and S. The well-known dependence function IS measure IS(R, S) (= P(R, S) / sqrt(P(R) ? P(S))) is used in this paper.

For example, we know that Coca-cola and Pepsi are competitive products. It is very likely that there is an indirect association that consumers who buy a kind of cookie tend to buy either Coca-cola or Pepsi but not both. Thus we have an indirect association ?Coca-cola, Pepsi | cookie?.

Since then, the technique of indirect association has been applied successively to different applications, including online recommendation, text mining, bioinformatics, etc. [5, 7]. And more efficient approaches than the original indirect association mining algorithm proposed by Tan et al. [12], called INDIRECT, have been proposed in the literature, including HI-mine [14], HI-mine* [15], and MG-Growth [3].

These methods, all developed to cope with static dataset, are inept to be used for analyzing dynamic stream of data, continuous rapid flow of vast data in a timely and endless fashion. Indeed, lots of applications and information systems used in our daily life generate streaming data. Examples include traffic network events, Web usage log, telecommunication record, financial and retail chain transactions, etc.

Unlike traditional static data sources, streaming data is fast changing and unbounded in amount. That is, data usually accumulates faster than it can be analyzed, and it is nearly impossible to store a stream entirely in a persistent storage.

General requirements for effective mining algorithms [4], including single-pass of scanning over data set, real-time execution, and low memory consumption.

DOI 10.1109/IBICA.2011.50    DOI 10.1109/IBICA.2011.50     In [2], we proposed an indirect association mining algorithm MIA-LM (Mining Indirect Association over a Landmark Model) tailored for streaming data with landmark window model. That is, part of the input data stream that starts from a specified timestamp (landmark point) to the current timestamp is under concern [8]. MIA-LM follows the basic tactics of INDIRECT, first discovering the set of frequent itemsets and then generating from which the set of all indirect associations. Although MIA-LM meets the single-pass scanning criterion for being an effective stream mining algorithm, exhibits high accuracy of the discovered patterns and significantly outperforms INDIRECT, the item suffix tree like structure it uses consumes more memory space.

In this paper, we propose a new efficient algorithm, namely EMIA-LM (more Efficient MIA-LM), for mining indirect associations over web data streams. Instead of adhering to the paradigm used by INDIRECT and MIA-LM, EMIA-LM adopts a mediator-exploiting search strategy, discovering all mediators for each frequent item in the first stage, i.e., those satisfy conditions 2 and 3 in Definition 1, and then generate from which the set of qualified indirect associations. The advantages of this approach over the frequent-itemset-based strategy are: (1) It reduces the search space from the larger domain of frequent itemsets to a smaller one comprised of mediators; (2) It avoids the more time-consuming process for generating indirect associations from frequent itemsets. Besides, our EMIA-LM adopts a similar but more efficient data structure than that used by HI- mine*, alleviating unnecessary data transforming processes and consuming far less memory storage than MIA-LM.

Preliminary experiments conducted on real Web streaming datasets show that EMIA-LM is superior to HI-mine* and MIA-LM both in computation speed and memory consumption, with an order of magnitude of speedup for relatively small mediator support thresholds.

The remainder of this paper is organized in the following way. In Section 2, we describe some research work related to this study. Then we present the design of our mediator- oriented indirect association mining algorithm EMIA-LM in Section 3. Empirical evaluations of our EMIA-LM algorithm over real world datasets are demonstrated in Section 4.

Finally, we conclude with a summary of our results and directions for future research.



II. RELATED WORK Existing researches on indirect association mining can be  divided into two categories, either focusing on proposing more efficient mining algorithms [3, 14, 15] or extending the definition of indirect association for different applications [3, 5, 7].

Wan and An [14] proposed an approach, called HI-mine, for improving the efficiency of the INDIRECT algorithm.

Rather than generating all frequent itemsets, HI-mine focuses on finding all itempairs first, and then pursues the mediator of each itempair. The HI-mine algorithm adopts a compact data structure based on the concept of dynamic transaction projection of frequent item, eliminating the need for doing any join operation for candidate generation. Later, Wan and  An [15] proposed an enhancement of the HI-mine algorithm, HI-mine*, which adopts a more compact data structure call Super Compact Transaction Database (STDB), on which some optimization strategies are introduced, including only one database scanning, direct frequent item projecting, and dynamic infrequent item pruning.

Chen et al. [3] also proposed an indirect association mining approach that was similar to HI-mine, namely MG- Growth. The differences between them are that the directed graph and bitmap are used in MG-Growth for constructing the indirect itempair set (IIS). The corresponding mediator graphs are then generated for deriving indirect associations.

As to extending the definition of indirect association, Kazienko et al. applied indirect association on web pages recommendation system [5, 7]. Chen et al. [3] proposed an approach for mining indirect association of items by adding time feature of goods. Since each item has its lifespan, the relationships of new coming items can thus easily be discovered.



III. THE PROPOSED ALGORITHM  A. Stream Window Model Since data stream is a continuous and unlimited incoming  data along with time, different window models are used for collecting data for further analyzing. Suppose that we have a data stream DS = (t1, t2, ? ti, ?), where ti denotes the data arrived at time i. A window W represents the sequence of data arrived from time i to j, denoted as W [i, j] = (ti, ti+1, ?, tj). In the literature, there are three different window models for data stream mining, i.e., landmark window, time-fading window, and sliding window models [1, 16]. Each model has its limitation and applicability; the users have to decide which type is most matching her needs for choice. In this paper, we consider the landmark window model, which stores all incoming data from a specific time point to the present time.

B. Data Structures Our proposed approach, EMIA-LM, adopts the data  compression concept used in HI-mine* but using more efficient way to achieve the same purpose. The data structures used in the EMIA-LM algorithm include (shown in Figure 1).

? CTT: The CTT (Compact Transactions Table) is used for merging identical transactions and combining analogical transactions. It has four parts: firstly, the left part that contains the same set of items, secondly, the right part that contains the list of all different items with their count values, thirdly, the counting sum of all item?s count value which contains in right part, and last, the index as an unique value for identification.

? HT (Hash Table): It is used to store the hashed value of the left part of the transaction and links as pointers to the related row in the CTT.

? Item-list: It is used for keeping all items, the block ids each item appears, its frequency and link to the corresponding row in CTT.

? MSS-list: It is used for storing candidate mediators.

? IIS-list: It is used for indirect itempair sets.

HT  CTT   Item-list  Key Link  Index Count Left Right  Bid Item Count Links  IIS-list  MSS-list  <Itempair>  Mediator item {Itemset}  Figure 1. The data structures used in the EMIA algorithm.

C. Algorithm Description The algorithm requires four user-specified parameters,  including ?s, ?f, ?d, and ?. As with MIA-LM, EMIA-LM divides data stream into blocks and performs data pruning after processing each block. It first divides DS into blocks that are denoted as {B1, B2, ..., Bn}. Each block Bi consists of a set of transactions represented as Bi = {t1, t2, ..., tk}, where k is set to ?1/?? as suggested by [9]. Moreover, the total number of transactions N seen so far in the transaction data stream DS is defined as N = |B1| + |B2| + ... + |Bl|, l ? n. Below, we define two terms, the mediator support set MSS and indirect itempair set IIS.

Definition 2 The mediator support set (MSS) of an item x is defined as:  MSS(x) = {M | M ? I ? sup(M) ? ?f ? sup(M ? {x}) ? ?f ? dep(M, {x}) ? ?d.

Definition 3 The indirect itempair set (IIS) of a given data stream DS is defined as:  IIS(DS) = {(x, y) | x, y ? I ? sup(x) ? ?f ? sup(y) ? ?f ? sup({x, y}) ? ?s.

Our EMIA-LM has three phases, compact transactions table construction, MSSs and IIS construction and indirect association generation.

1) Compact transactions table construction phase: The compact transactions table construction phase consists of two stages, compact table construction and pruning. It repeats these two stages until user query request is received.

The CompactTableConstruction procedure is responsible to convert the input block of transactions into a compact data stored in the CCT table. Each transaction is split to two parts, left and right, the right corresponds to the last element of the transaction and left stores the other elements, i.e., a transaction t = {x1, x2, ..., xm} is divided into left = {x1, x2, ..., xm-1} and right = {xm}. Next, we search in CTT to see if there is any transaction with the same left part as t. To speed up the searching process, we adopt the hash technique and store the index pointing to the corresponding row in CTT in the HT table, with key storing the left part of t and link storing the index. In this way, we insert the left part and right part of t into CCT, if the searching result is negative; otherwise, we update the corresponding count field in CCT, which denotes the number of transactions having the same left part, and the count of the item stored in the right field. In the same time, each item in transaction t along with the index in CCT is also inserted into the Item-list if it is a new observed item or its count is updated, otherwise.

The PruningItems procedure is for pruning items whose counts are less than a specific condition itemi.count < (currentblockid - itemi.blockid + 1). If the count of an itemi is less than this threshold, implying itemi will have low probability to appear in subsequent blocks, and should be considered as infrequent itemi. In this case, itemi is pruned to save the memory space.

2) Compact transactions table construction phase: The core phase, MSSs and IIS construction is responsible for generating candidate MSSs and IIS by using a divide-and- conquer strategy. Specifically, our approach is a mediator- centric searching process, which follows the prefix set- enumeration framework [10]. For example, assume the Item-list contains {A, B, C, D} frequent items. We first generate A as a candidate mediator, forming subsets of CTT containing any left or right fields that A appears. Then inspect all other items in Item-list to see if each of them, can be combined with A. For example, for item B, we check if sup(A, B) ? ?f and dep(A, B) ? ?d . If so, we add A into the mediator set of B, i.e., MSS(B). The above process continues in the order of AB, AC, AD, then ABC, ABD, and back to B, BC, BC, etc.

3) Indirect association generation phase: In this phase, we first use each candidate IIS in IIS-list to find mediators.

For each IIS {a1, a2} in the IIS-list, we only have to check if they have the same mediators in MMS(a1) and MSS(a2).

Then for each common mediator M in MMS(a1) ? MSS(a2), we obtain an indirect association ?a1, a2 | M?.



IV. EXPERIMENTAL RESULTS In this section, experiments on two web datasets, BMS-  POS and BMS-Web View-2 [6], were made to show the effectiveness and efficiency of the proposed EMIA-LM algorithm. The BMS-POS dataset contains several years of point-of-sale data from a large electronics retailer. And each item represents a category, rather than an individual product.

The BMS-WebView-2 dataset contain several months of click stream data from an e-commerce web site. Each transaction in these datasets is a web session consisting of all the product detail pages viewed in that session. In the following, all experiments were implemented in C# and conducted on HP ProLiant DL380 G6 with Intel Xeon E5530 2.40GHz and 6GB RAM.

We compare EMIA-LM with other two algorithms, our previously proposed MIA-LM algorithm and the leading algorithm HI-mine* developed for mining static dataset.

The execution time comparison is shown in Figure 2.

EMIA-LM is far more superior to HI-mine* and MIA-LM.

Indeed, EMIA-LM outperforms the other two algorithms with an order of magnitude of speedup. MIA-LM is inferior to HI-mine*. The reason is that MIA-LM spends a lot of computations to build the initial IS-tree especially on the real datasets that are composed of thousands of items.

The results of memory usage comparison are depicted in Figure 3. Since the two datasets are composed of thousands of items, the data structure ISFI-forest used by the MIA-LM algorithm requires very large amount of memory to store all item-suffix of each transaction, especially for dataset BMS-     POS. EMIA-LM and HI-mine* consume approximately the same amount of memory.



V. CONCLUSIONS In this paper, we have proposed a new algorithm EMIA-  LM for mining indirect associations from web data streams.

Our EMIA-LM algorithm adopts a mediator-oriented discovery strategy and a simpler but more efficient compact data structure for indirect association generation.

Experimental results on real world datasets have shown that EMIA-LM is significantly faster than the frequent-itemset oriented approach MIA-LM and the leading algorithm HI- mine* with comparable or less memory usage. In the future, we will continue to improve the efficiency of the proposed algorithm, seeking more effective way for reducing the memory usage. We will also extend the proposed algorithm to accommodate other types of stream window models [1, 16].

