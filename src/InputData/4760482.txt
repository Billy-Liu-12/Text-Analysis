Efficient Mining of Top-K Strongly Correlated Item Pairs using One Pass Technique

Abstract?This paper presents an efficient one pass technique, k-SCOPE (Top k Strongly Correlated item Pair Extraction), which finds top-k strongly correlated item pairs from transaction database, without generating any candidate sets. The proposed technique uses a correlogram matrix based approach to compute support count of all the 1- and 2-itemset in a single scan over the database. From the correlogram matrix the correlation values of all the item pairs are computed and top-k correlated pairs are extracted very easily. The simplified logic structure makes the implementation of the proposed technique more attractive. We experimented with real and synthetic datasets and compared the performance of the proposed technique with its other counterparts and found satisfactory.



I. INTRODUCTION  Traditional association rule mining technique [1] is based on support-confidence framework. However, support- confidence framework can be misleading; it can identify a rule (A ? B) as interesting (strong) when, in fact the occurrence of A might not imply the occurrence of B. Thus, the support and confidence measures are insufficient at filtering out the uninteresting association rules [1]. It has been well observed that item pairs with high support value may not imply statis- tically highly correlated. Similarly a highly correlated items pair may exhibits low support value. To tackle this weakness, a correlation analysis can be used to provide an alternative framework for finding statistically interesting relationships. It also helps to improve the understanding of meaning of some association rules. Recently,the notion of strongly correlated item pairs has been introduced in [2], which retrieves all pairs of items from transaction database with high correlation based on Pearson Correlation coefficients. The problem can be de- fined as follows. Given a user-specified minimum correlation threshold ? and a market basket database with N items and T transactions, an all-strong-pairs correlation query finds all item pairs with correlations above the threshold ?. A number of techniques have already been proposed [2], [3], [4], [5] to handle this problem. However, in practice, it is sometimes difficult to determine the appropriate threshold value i.e.?.

In order to address the problem, Z He et.al. proposed an alternative approach Tkcp algorithm [6] to mine top-k  strongly correlated item pairs, instead of mining all strongly correlated item pairs based on ?. Tkcp is based on FP-Tree [7] technique and generates all the top-k strongly correlated item pairs using two scan of the database and without gen- erating any candidates. However, in case of high dimensional large databases it takes much time to generate top-k strongly correlated item pairs. Moreover, it also requires much memory space to store the entire FP-Tree in the memory; particularly when the number of items is very large. So, the performance of the algorithm degrades with the increase of the distinct itemset patterns. It would be more effective if one can develop an algorithm, which extracts top-k strongly correlated item pairs using single pass over the database and without generating such a large tree or candidate itemsets.

This paper presents a technique which extracts top-k strongly correlated item pairs in only one pass over the database and it does not generate candidate sets. The technique uses a data structure, i.e a corellogram matrix for capturing the frequency count of all the 1- and 2-itemsets using single pass over the database. Next, it computes the Pearson corre- lation coefficient of all the item pairs based on the support count from corellogram matrix, and creates a list of k top most strongly correlated item pairs. The performance of the proposed technique has been found satisfactory in comparison to both Tkcp [6] and adopted version of TAPER [2], in light of several real and synthetic datasets.

The rest of the paper is organized as follows: section 2 reports the basic background of the work and also discusses some of the related works; in section 3, the proposed technique is described. Section 4 shows the performance evaluation of the proposed technique and finally in section 5, the concluding remarks are given.



II. BACKGROUND AND RELATED WORKS  Here, we provide a brief background of the support based correlation coefficient computation and reviews and analyses two most relevant existing works for finding top-k strongly correlated item pairs.

In statistics, relationships among nominal variables can be analyzed with nominal measures of association such as     Pearson?s correlation coefficient and measures based on Chi Square [8]. The correlation coefficient [8] is the compu- tational form of Pearson?s correlation coefficient for binary variables. An equivalent support measure based ? correlation coefficient computation technique has been introduced in [2] to find correlation of item pairs in a transaction database based on their support count. For any two items X and Y in a transaction database, the support based correlation coefficient can be calculated as:  ? = Sup(X, Y )? Sup(X) ? Sup(Y )?  Sup(X) ? Sup(Y ) ? (1? Sup(X)) ? (1? Sup(Y )) (1)  Where Sup(X),Sup(Y) and Sup(X, Y) are the support of item X , Y and joint support count of (X,Y) respectively.

Next we discuss and analyze two algorithms, TAPER and Tkcp.

A. TAPER [2]  TAPER is a candidate generation based technique for finding all strongly correlated item pairs. It consists of two steps: filtering and refinement. In filtering step, it applies two pruning techniques. The first technique uses an upper bound of the ? correlation coefficient as a coarse filter, or, in other words, if the upper bound of the ? correlation coefficient for an item pair is less than the user-specified correlation threshold ?, right way the item pair is pruned. In order to minimize the effort for computation of upper bound of all possible item pairs, TAPER applies second pruning technique based on the conditional monotone property of the upper bound of the ? correlation coefficient. For an item pair {X,Y}, if upper bound is less than ?, then all the item pairs involving item X and the rest target items having support less than Y will also give upper bound less than ?. Based on that monotone property, straightway one can avoid such computation of upper bound for other items. In the refinement step, TAPER computes the exact correlation for each surviving pair and retrieves the pairs with correlations above ?.

1) Discussion: TAPER is candidate generation based, all strongly correlated item pair finding technique. It is well understood that TAPER in its original form cannot able to find top-k item pairs. Moreover, TAPER suffers from drawbacks of candidate generation step. It is well known that, in comparison to single element item sets, usually the two element candidate sets are huge. The upper bound based pruning technique is very effective in eliminating such large number of item pairs during candidate generation phase. However, when database contains large number of items and transactions, even testing those remaining candidate pairs is still can be found expensive.

B. Tkcp [6]  Tkcp, an FP-tree [7] based technique, for finding top-k strongly correlated item pair. The top-k strongly correlated item pairs are generated without any candidate generation.

Tkcp includes two sub processes: (i) construction of the FP-Tree, and (ii) computation of correlation coefficient of each item pairs using the support count from FP-tree and  extraction of all the top-k strongly correlated item pairs based on correlation coefficient value ?. The efficiency of the FP- Tree based algorithm can be justified as follows: (i) FP-Tree is a compressed representation of the original database, (ii) the algorithm scans the database twice only and (iii) the support value of all the item pairs is available in the FP-Tree.

1) Discussion: Although the algorithm is based on efficient FP-tree data structure, yet it also suffers from the following two significant disadvantages.

1) Tkcp constructs the entire FP-tree with initial support threshold zero. The time taken to construct such FP-tree is quite large, specially when size of dimensionality is large.

2) Moreover, it also requires large space to store the entire FP-Tree in the memory; particularly when the number of items is very large.

The next section discusses a technique that addresses the shortcomings of both the algorithms reported above.



III. k-SCOPE: THE ONE PASS APPROACH In this section, we discuss an efficient one pass approach,  for finding top-k strongly correlated item pairs from transac- tion database using single scan over the entire database and without generating any candidates. The problem of finding support based top-k strongly correlated item pairs basically is a problem of computing the support count of 1- and 2- element itemset and use the count to get top-k strongly correlated item pairs. Proposed approach uses correlogram matrix to store support count of all 1- and 2- element itemset.

Later, correlogram matrix is used to calculate ?(correlation coefficient) of all the item pairs and extracts the k mostly correlated pairs. The proposed technique can be found to be significant in view of the following points:  ? it requires only one database scan; once the correlogram matrix is constructed, no more consultation of the original database is required for the successive processing.

? by sparsifying the correlogram matrix its storage require- ment can be reduced significantly.

? it is scalable both in terms of dimensions and number of instances.

Next we provide the background of the technique.

A. Correlogram Matrix based Technique  Correlogram matrix is basically a co-occurrence frequency matrix. It is a matrix of size: n ? (n + 1)/2, where, n is the number of dimensions present in the database. Each cell of the matrix contains the frequency of co-occurrence of item pairs.

Item pairs are specified by row index and column index of the cell. For example, to specify the frequency of co-occurrence of item pair {4,5}, corresponding to sample market basket dataset depicted in Figure.1, the content of the cell (4,5) in the matrix (see Figure.2) with an index of row 4 and column 5 will indicate the co-occurrence frequency of the item pairs {4,5}.

On the other hand, the diagonal cells having same indices i.e.

row and column indices are same, specifies the occurrence frequency of the single element set. Thus, as can be found in     Fig. 1. Sample market basket dataset.

Fig. 2. Correlogram matrix.

Figure.2, the cell (3,3) indicates the occurrence frequency of the single itemset {3}.

1) Construction of Correlogram Matrix: The correlogram matrix is constructed by scanning the database once only. In order to construct the correlogram matrix, we try to model the situation as graph. All the items participated in a particular transaction are considered as nodes. As the items are appeared in the transaction in a lexicographical order, so we can say that they form a directed graph involving all those items as nodes of the graph. All the items are linked by a single link or edge. Thus, there is only one directional path exists between any two nodes. To illustrate it, let us consider the same sample market basket dataset given in Figure.1. In case of Transaction 4, item 1, 2, 4 and 5 participated in the transaction. Thus, they form a directed graph as shown in the Figure.3. To count the co-occurrence frequency of all the items participated in a particular transaction, we count the links among all the pairs of nodes and correspondingly increment the content of a cell having index (say, node1 and node2). Thus, if we consider the above example depicted in Figure.3, we increment the content of cell (1, 2), (1, 4), (1, 5), (2, 4), (2, 5) and so on. We also increment the count of first node of a pair i.e. during increment of the count for pair {1, 2}, we also increment the content of the cell (1, 1). The intension behind such increment is to keep track of the frequency of occurrence of 1-itemset. The scenario after incrementing the content of correlogram matrix becomes similar to that shown in Figure.4. Thus by following this procedure, one can construct the correlogram matrix, scanning the database once only. The technique works fine even when items in a transaction are not in a lexicographical order. Since the relationship between any two item pair in a transaction  Fig. 3. Item nodes forming directed graph.

Fig. 4. Correlogram matrix: post increment scenario.

maintain reflexive closure property, thus without loosing its originality the co-occurrence frequency of any item pair can be incremented just by considering their lexicographical order.

To increment the frequency count of item pair say 7, 3, we will increment the count of cell (3, 7) to maintain uniformity of the Correlogram matrix and this can be done without spending extra cost.

2) Extracting top-k strongly correlated item pairs: From the correlogram matrix it is very simple to extract the support count of 1 and 2-itemsets. Using these support counts, next we compute the correlation coefficient of all the item pairs using (1) and create a sorted list of top-k item pairs based on their correlation coefficient. The advantages of this technique can be stated as:  ? no requirement for candidate generation; ? unlike TAPER and Tkcp it requires only one scan over  the database; ? since it is memory based, it can be found very fast, and ? easy to implement due to its simplified logic structure.



IV. k-SCOPE: THE ALGORITHM  Here we present the algorithm for the proposed approach (see Figure 5). The algorithm accepts the market-basket database i.e. D and k as input and it generates list of top-k strongly correlated item pairs, L, as output. Step 1 is dedicated to the first phase of the approach, i.e. construction of the correlogram matrix using single scan of the original database.

In step 2a, the correlation coefficient of each item pair is computed and in step 2b, topmost k correlated item pairs are extracted and added to the top-k list. Top-k list L is a sorted list (descending order) of item pairs based on the correlation coefficient. For any pair whose correlation coefficient lower than the k-th pair?s correlation coefficient are straightway pruned. Otherwise, it updates the list by eliminating the k- th pair and inserting the new pair in its appropriate position in the list. Finally, the algorithm returns top-k list L.

Fig. 5. k-SCOPE Algorithm.

A. Analysis of k-SCOPE algorithm  Here, we analyse k-SCOPE in terms of completeness, correctness and the computation savings.

1) Completeness and Correctness: Lemma 1: k-SCOPE is complete i.e. k-SCOPE finds top-k  strongly correlated pairs.

Proof: Since k-SCOPE is based on exhaustive search and  computes correlation coefficient of all pairs without pruning any item pairs, so, k-SCOPE extracts k top most strongly correlated item pairs based on the value ?. This fact ensures that k-SCOPE is complete in all respects.

Lemma 2: k-SCOPE is correct i.e. correlation coefficients of the extracted pairs are the k top most correlation coeffi- cients.

Proof: The correctness of k-SCOPE can be guaranteed by the fact that, k-SCOPE calculates exact correlation of each pair present in the database and creates a sorted list (descending order) of item pairs based on the correlation coefficient and prune all those pairs whose correlation coefficient lower than the kth pair?s correlation coefficient.

2) Space Complexity: TAPER needs memory space for keeping support count of all items and also to store a huge number of candidate item pairs, depending on the ? upper bound value. Tkcp creates an entire FP-tree in the memory which is normally very huge when the number of transactions as well as the dimensionality is large and also depends on the number of unique patterns of items in the database. Sometimes it is difficult to construct such tree in the memory. However, k- SCOPE always requires a fix memory of size, n?(n+1)/2, for n dimensional market basket database to construct correlogram matrix and array of size k to store top-k strongly correlated item pairs.

3) Time Complexity: The computational time complexity of k-SCOPE can be analyzed as follows:  a)Construction of correlogram matrix. Let us consider that the database contains T number of transactions and maximum E number of items in each transaction. So, to scan the database once it requires (T ? E) times. For storing and updating support count in correlogram matrix with  respect to each transaction it requires to find out the all pair combination of the items present in that transaction. Thus, the time requirement for updating the count is E2. The total time complexity for construction of correlogram matrix is: O(T ? E2).

b)Extraction of top-k strongly correlated item pairs.

Since for calculating the correlation of each pair k-SCOPE has to traverse the correlogram matrix once, thus the time requirement for extracting correlation coefficient of all item pairs is O(n ? (n + 1)/2) ? O(n2/2), for n dimensional databsase. In order to create the top-k list, for each item pair it compares the correlation coefficient (?) of the new pair with k-th pair in the list. If ? of new pair is greater than the k-th pair, then the k-th pair is eliminated from the list and new pair is inserted and placed in the list according to the descending order of the ?. Thus, for placing a new pair it requires at most k times comparison and swapping.

Since, the problem is to find k top most item pairs out of n(n ? 1) item pairs, thus considering worst case scenario, the time requirement for creating list of top k item pair is O(k ? (n ? (n? 1))/2).



V. PERFORMANCE EVALUATION  To evaluate the performance of k-SCOPE in comparison to its other counterparts, we considered two existing techniques i.e. TAPER and Tkcp and tested them in light of several synthetic as well as real-life datasets. Since, TAPER in its original form can not generate top-k list, we modified TAPER, so that it can generate such top-k strongly correlated item pair list.

A. Environment used  We implemented and tested k-SCOPE and its counterparts in a P-IV 2.80 GHz machine with 512 MB memory. We used Java for implementation of k-SCOPE and TAPER. Since performance of Tkcp highly dependent on FP-tree implementa- tion, we used third party FP-tree implementation by Christian Borgelt [9] to avoid implementation bias.

B. Dataset used  To compare the performance of these three techniques we generated several synthetic datasets using ARMiner [10] according to the specifications given in Table 1. We also used a real life dataset from UCI ML repository [11] i.e. the Mushroom dataset and its detail are also reported in Table 1.

Next we present the experimental results in light of the different real and synthetic datasets.

C. Experimental Results  Performances of all the three algorithms were compared in terms of execution time for different values of k. Since TAPER, is dependent on the correlation threshold ?, in order to generate same result by TAPER we set the ? with the correlation coefficient of the k-th pair from the top-k list generated     TABLE I DETAIL SPECIFICATION OF DATASETS  Data Set No.of No. of Avg. size of No. of Transactions Items Transaction Pattens  Mushroom 8124 128 - - (Market Basket) T10I400D100K 100,00 400 10 20 T10I600D100K 100,00 600 10 20 T10I800D100K 100,00 800 10 20 T10I1000D100K 100,00 1000 10 20 T10P1000D100K 100,00 1000 10 1000  by k-SCOPE. In case of Tkcp, it consumes maximum time compared to other two techniques, since Tkcp generates entire FP-Tree with initial minimum support value zero. As a result it has been found too time consuming to construct and parse such tree in the memory, especially when the dimensionality is large. For example, in case of T10P1000D100K dataset, Tkcp failed to mine. However, in all cases, k-SCOPE exhibits comparatively better performance than TAPER and Tkcp. With the decrease in ?,the running time requirements of TAPER also increases, since low ? value generates large number of candi- date sets. But, k-SCOPE and Tkcp keeps stable running time in different datasets, since both the techniques are independent of ?.



VI. CONCLUSION  An efficient one pass top-k strongly correlated item pairs finding technique has been presented in this paper. k-SCOPE basically works on a correlogram matrix based technique to capture support count of all the 1- and 2-element itemset, and later those support counts have been used to compute correlation coefficient of all pairs and extract k numbers of top strongly correlated item pairs. The technique is capable to generate top-k strongly correlated item pairs in one scan over the database. Another advantage of k-SCOPE is that it also supports interactive mining. Experiments have shown that k-SCOPE is faster than both Tkcp and TAPER.

