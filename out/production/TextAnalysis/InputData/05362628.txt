Investigation on Multi-Grain Parallelism in Chip  Multiprocessor for Multimedia Application

Abstract?with the advent of chip multiprocessor (CMP) architecture, programmer must tune the program to the architecture in order to fully utilize the hardware resource. How to parallel program multimedia application in the CMP is a big obstacle. In this paper, we introduce the potential parallelism in the multimedia application and the multi-grain parallelism architecture in the CMP; also we make a systematic analysis on how to exploit multi-grain parallelism to accelerate the multimedia application computing. A method based on the multi- grain parallelism in the CMP is proposed to instruct the programmer to effectively layout the multimedia-related program. The method exploits the parallelisms from data-level, instruction-level, thread-level, and memory-transfer level. The Experimental results indicate that the method is practical and effective.

Keywords- Multi-Grain parallelism; Chip Mult-iprocessor; multimedia application

I. INTRODUCTION With the fast development of the information technology,  multimedia applications are becoming increasing extensive.

Contemporary multimedia application are more and more complicated and high real-time, such as video conference, virtual-reality, three-dimensional graphics and image processing. A distinctive feather of these multimedia applications is that they have significant parallelism, including data-, instruction-and thread level parallelism [1]. There is an urgent demand to accelerate the multimedia-related computing.

In the superscalar processor, introducing the multimedia instruction sets and integrating a short-vector SIMD unit into the processor is a common method [2], Such as the MMX, SSE of Intel, the VIS of Sun, the 3DNow of AMD and the AltiVec of IAM [3]. The method can exploit the data- and instruction- level parallelism. In the CMP, it provides another new approach and we can also exploit the thread parallelism in the multimedia application. Many parallel threads can run simultaneously on the CMP. There are some emerging difficulties that how to split the multimedia application into multi-grain parallelism and how to efficiently schedule them in the CMP.

In this paper, we discuss the potential parallelism in the multimedia application and the CMP; we have an in-depth analysis on how to exploit the multi-grain parallelism in the CMP architecture. A method which can exploit the multi-grain  parallelism in the CMP is proposed to instruct the programmer to effectively parallel program. We provide one example to verify the method.

The rest of the paper is organized as follows. Section 2 analyzes the potential parallelism in the Multimedia application.

Section 3 investigates the Multi-Grain Parallelism Computing in the CMP. Section 4 proposes parallel programming method based on the multi-grain parallelism in the CMP and test the method. Section 5 concludes the paper.



II. THE ANALYSIS  OF THE MULTIMEDIA APPLICATION Multimedia applications have increasing dominated the  mainstream applications in the commercial computer and customers have come to expect high quality multimedia computing. Multimedia application, which differs from traditional control-intensive applications, is arithmetic- intensive. A large number data must be processed in the limited time with the same operation. There are several distinguishing characteristics in the multimedia applications. The first is that there are a lot of loop operations, and each loop operation just computes different multimedia data elements by the same operation, in other words, there is abundant data-parallelism.

The second is that the length of multimedia data is eight or sixteen bits and the computing precision is low. The third is that the data has poor spatial locality and is rarely used again.

As a result, the Cache organization in the superscalar processor is not suitable for the multimedia program. The fourth is that the computational complexity is relative regular but huge.  It means that the processor must be quality of high throughput to perform the task in the limited time. The fifth is that the multimedia program is relative easy to split into different parallel sub-tasks as a result of the arithmetic-intensive.

Based on the above analysis, we can find three potential forms of parallelisms in the multimedia application. They are data-level, instruction-level and thread-level parallelism. The CMP can exploit fully the parallelisms to accelerate the multimedia computing.

ALPBench[4] is a publicly released benchmark suit that pulls together five complex multimedia applications, including speech recognition, face recognition, ray tracing etc.

Supported by China National Science Foundation with the No. 60736012, No.

60573107, No. 60773223 .the Sci-Tech innovation foundation of NWPU- 2008KJ02027and the China 863 program  with the N0.2009AA01Z110.



III. INVESTIGATING THE MULTI-GRAIN PARALLELISM COMPUTING IN THE CMP  To efficiently perform multimedia computing, the hardware can speed up from multi-grain parallelism. For data- level, it can use SIMD technology [5] .For instruction-level, it can use superscalar technology [6]. For thread-level, it can use multi-core technology [7]. To alleviate the memory latency, it can use memory-orient optimization technology, like stride- based prefetch[8], software-assisted prefetch[9], DMA ,and local- storage.

A. The data level parallelsim Multimedia application is arithmetic-intensive and the  operations are regular, so data-level parallelism is the basic parallel form. To exploit data-level parallelism, multiple data elements (scalar elements) can be packed into one register to form a vector, and then the processor can perform operation on the vectors at the same time in the ALU. The processor can also provide multiple ALUs to further exploit parallelism. This parallel form is also called short-vector parallelism. Changing form scalar to vector, data-level parallelism can efficiently improve the amount of computations.

In Cell processor [10], the short-vector ALU contains 128- bit data path and it can be divided sixteen bytes, eight half- words and four words according to the operation kind.

B. The instruction level parallelism In case that there is no data-dependence or control-  dependence in sequential instructions, multiple instructions can be executed parallel; the processor can dynamically exploit the instruction parallel using superscalar technology. But when dependence occurs, the cost to maintain the program sequence is very high so the width of the parallel issued instructions is almost two instructions, no more than four instructions. In addition to speeding executing timing, instruction-level parallelism also can alleviate average memory latency by allowing multiple pending memory requests.

C. The thread  level parallelism Multimedia application is arithmetic-intensive and the OS  and other system task are almost control-intensive, so the heterogeneous CMP for multimedia application is more preferable and it is composed of multiple control-cores and multiple arithmetic-cores. The two kinds of cores have different architecture and organization optimized to multimedia application.  In the heterogeneous CMP, the arithmetic-cores are responsible for performing parallel multimedia arithmetic- intensive threads and the control-cores are responsible for performing the OS, spawning the parallel thread, managing and coordinating multiple threads. The arithmetic-core is SIMD- like architecture and has independent instruction-fetch unit, dynamic instruction scheduling unit and memory. Multiple cores can be connected to communicate through MESH network or bus topology.

Cell processor[11], a typical thread-level parallelism heterogeneous CMP aimed for multimedia application, consists of a PPE(Primary Processing Entity) and eight helper units called SPE(Synergistic Processing Elements),PPE is a PowerPC-like superscalar processor to run OS and the SPE is  SIMD-like processor to run multimedia application, composed SPU(Synergistic Processing Unit),MFC(Memory Flow Controller). A SPE can operate on sixteen 8-bit integers, eight 16-bit integers, four 32-bit integers, or four single-precision floating-point numbers in a single clock cycle.the Cell is showed in Fig.1.

Fig. 1. Cell Block Diagram  D. The memory-transfer  level parallelism Memory wall has become a bottleneck in superscalar  processor and the situation becomes more serious in multimedia application as it is often high bandwidth [12]. In the multimedia application, because of the memory wall, arithmetic-core must wait the operands to be ready. To prepare for the data before computing, one method is hardware?based perfetch. The other method is software-based prefetch. In the multimedia application, the latter is more effective.

Programmer should explicitly arrange the memory location of the multimedia data and transfer the data in advance to feed the arithmetic-core. Before computing, multiple memory-transfer requests can be issued parallel. In the Cell, DMA is used to move data between local storage and main memory.



IV. PARALLEL PROGRAMMING METHOD BASED ON THE MULTI-GRAIN PARALLELISM IN THE CMP  Compared to the superscalar, CMP computing platform to multimedia applications is not free lunch. Not only hardware fully exploits the parallelism, but also programmer should be explicit parallel programming from data-level, instruction- level, thread-level, and memory-transfer level. For parallel optimization, programmer should take the core architecture, the number of cores, the connection relationship, and the communication protocol into consideration. We propose a parallel programming method based on the multi-grain parallelism in the CMP. The method can be divided into four steps. In the first step, based on the hardware feature of the CMP, programmer performs parallel algorithm analysis, explicitly divides the whole task into subtasks, draw task- graph, and exploit thread-level parallelism. In the second stage, according to the subtask dependence relationship, map each subtask to the unique core, design the scheduling strategy, and manage the data locations and data movement. In the third    stage, in each subtask, exploit the instruction-level parallelism.

In the fourth stage, exploit the data-level parallelism. The method is a kind of ?divide and conquer strategy. It can instruct the programmer to perform parallel programming and exploit the parallelism in different levels.Fig.2 is the method flow chart.

Fig. 2. the proposed method flow chart  A. A  practical parallel program using the method  We use the method to design a multi-channel FIR filter.

The task is that four parallel FIR filters process four sets independent input sequences and the final result is the average of the five FIR filter?s output. The CellSim [13-14] is used to simulate the parallel program. CellSim is a modular simulator for heterogeneous multiprocessor architectures based on the STI Cell processor.

Under the guidance of the method, we divide the task into six sub-tasks, which are main thread, four independent FIR filter thread, and one average calculating thread. The main thread, responsible for applying for hard resource, managing other threads, and releasing resource when the task finished, is control-intensive operation running on the PPE. The other five threads are arithmetic-intensive operation running on the SPE.

The four FIR filter thread can parallel run and the average calculating thread must be keeping synchronous with them. In each thread, instruction-level and data-level are also being exploited. DMA transfer data between local storage and main memory.

Based on the CellSim simulator, we build the whole simulation environment and parallel program the task. We have made three configurations to simulate the program. The result is show in table 1 and Fig. 3. (C is short for configuration).

Table 1 the five simulator configurations C.1 C.2 C.3 C.4 C.5  1PPE 1PPE+1SPE 1PPE+2SPE 1PPE+4SPE 1PPE+6SPE  Fig. 3. the consuming timing/C.1 under different conifgurations  From Fig.3, it is found that the change form C.1 to C.2 is significant, because C.1 has no arithmetic-core and all work is finished by the control-core. At the same time, there is no thread-level parallel or data-level parallelism in C1. From C.2 to C.5, the number of the arithmetic core is increased gradually and multi-grain parallelisms are fully exploited, so the consuming time is decreased accordingly. The result and our real experience show that the method is practical and effective.



V. CONCLUSION In this paper, we analyze the potential parallelism in the  multimedia application. Programmer can optimize the multimedia program from data-level, instruction-level, and thread-level. Also it is found that the heterogeneous CMP is suitable to multimedia application. In the heterogeneous CMP, processor hardware provides short-vector SIMD ALUs to accelerate the data-level parallelism and adopts superscalar technology to accelerate instruction-level parallelism. Control- core and arithmetic-core are assigned to parallel accomplish control-intensive thread and arithmetic-intensive thread independently. A programming method based multi-grain parallelism in the CMP is proposed and the method can help the programmer to effectively layout the multimedia-related program. Experimental results show that the method is practical and effective.

