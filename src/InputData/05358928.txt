Sequential Patterns Mining with Fuzzy Time-Intervals

Abstract   The task of sequential pattern mining is useful for various applications, including market analysis, decision support, and business management.  One important issue is to discover frequent sequential patterns in a sequence database. And most of the previous works have focus on the order of times. However, the time interval between successive items in patterns is seldom discussed before.

With the order of items, sequential pattern is not as good as which is extended with time interval to make the decision.  In this paper, we propose an algorithm called sequential pattern mining with fuzzy time intervals (SPFTI). The main idea of SPFTI algorithm is to use the Apriori-like method to mine the frequent sequential patterns of sequence database and use fuzzy theory to mine the time interval between frequent sequences.  At first, find the candidate sequential patterns.  Then, the frequent sequential patterns are found with the minimum support. In the step of finding frequent sequential patterns, use the fuzzy number to find each time cluster by computing its fuzzy support. And the results are the frequent fuzzy time sequential patterns. Finally, the experimental result verifies that result of our proposed SPFTI algorithm outperforms with the fuzzy sequential patterns mining with fixed time interval.

1. Introduction   Sequential pattern mining is to mine the frequently occurred patterns related to the order of items in a sequence database. The discovered frequent information is useful for broad application, such as retail business, disease treatments, market analysis, etc. Up to now, many sequential pattern mining algorithms have been proposed [1, 3, 4, 5, 6, 7, 8]. Although the order of the frequent items is known, the time between the items is not.

Recently, one new issue is to find sequential patterns extended with time intervals. So, the example of a sequential pattern with time intervals may be ?A customer  who, bought a digital camera six weeks ago, is likely to buy a new memory stick in two weeks?.

The first mining sequential pattern algorithm - AprioriAll algorithm discovers patterns that occur frequently in a sequence database. The large sequence property of the algorithm is ?All subsequences of a frequent sequence are also frequent?.

The typical sequential pattern reveals the order of itemsets but does not consider the time interval associated with successive items. A time interval sequential pattern provides more valuable information than a conventional sequential pattern does.

Let ( ) ( ) ( ){ }kkba ntntntT ,,...,,,, 2211, = , called time  cluster, where ni is count of itemsets with the time interval  ti, where .1,...,2,1,1 ?=< + kitt ii An example of time  cluster ( ) ( ){ }1,9,2,6, =baT is mean that there are three  (Sa ,Sb) sequences, two with 6 time units, and one with 9 time units. So, the time interval between Sa and Sb is   6 ? t ? 9.

Although sequential patterns with time intervals [5, 8] can offer more information than those without, the boundary of time interval is a sharp problem. For  example, ( ) ( ) ( ) ( ){ }2,300,1,295,1,9,2,6, =baT , the  time interval 6 ? t ? 300 is not good. The difficulty can be adequately tackled by using fuzzy techniques [2, 8], for fuzzy set theory allows the time interval to be 50% in (6 ? t ? 9) and 50% in (295 ? t ? 300). Fuzzy set theory provides a smooth transition between member and nonmember of a set, so the fuzzy time intervals are better than the single time interval.

The main idea of our proposed SPFTI is to utilize the Apriori-like method to find the candidate sequential patterns, firstly.  And the large sequential patterns are found by checking support of each candidate sequential pattern. When the length of sequential patterns is larger than or equal to two, define the fuzzy number to each time   DOI 10.1109/FSKD.2009.733    DOI 10.1109/FSKD.2009.733     cluster to compute the fuzzy support, and then mining the sequential patterns with fuzzy time intervals.

The rest of the paper is organized as follows: In section 2, some popular sequential patterns mining algorithms are mentioned again.  In section 3, our proposed sequential patterns mining with fuzzy time intervals algorithm, SPFTI, is introduced.  In section 4, an experiment is displayed.  And some discussions with FTI-Apriori algorithm are discussed in section 5. Section 6 is the conclusion.

2. Problem definition and algorithm   2.1 problem definition   The data sequence is represented as an order of itemsets, each is attached to a transaction. Then definitions of sequential pattern with fuzzy time intervals are defined as followed.

Definition1. A sequence s is represented as ( ) ( ) ( ){ } { }n1jmm2211 s,..,sI wheret,I,..,t,I,t,I ? , si  is an itemset and tj standards for the time at which Ij occurs.

Definition2. A transaction is represented by ),ItItI kmk1iki (),..,,(),,(sid, t+ , where sid is the identifier of this transaction and  { }nmii ss ,..,,..,, 11 ?+ III  is a sequence.

Definition3. |S}s)(sid,|s){(sid,|sup(s) ?=  The itemset s is frequent in S, sequence database, if the percentage of transactions in S containing s is greater than or equal to the user-specified minimum support (called min_sup).

Definition4. The time cluster between itemsets a and b is  ( ) ( ) ( ){ }kkba ntntntT ,,...,,,, 2211, = , where ti is time interval between a and b, ni is count of sequence (a,b), 1).-(k1,..,i,1ii =< +tt  If the maximum difference is between time intervals it and 1i+t , then baT , will be divided into two sets,  ( ) ( ) ( ){ }ii11i1, ,...,,,, ntntttT ba =  and ( ) ( ) ( ){ }kkba ntntttT ,...,,,, 1i1ik1i, +++ = .

Definition5. Let ( ) ( ) ( ){ }mm2211 t,I,..,t,I,t,I=s  be a sequence and rr1,-r1-r1,21 fs,,fs,..,,fs ??=fs  be a fuzzy time-interval sequence, where n ?  r ?  1 and  rfsfs ,..,1 are itemsets happened in the same time.

Definition6. The fuzzy support of time interval (ti, tj) between itemsets a and b is  [ ]( ) N  nttt ttfsup p  pp? =  ? ==  j  i jiba,  jiba,ba,  ,.., ),(  ? ? ,  Where N is total number of transactions.

If min_supttfsup ?),( i1ba, , then time cluster  ( )i1, , ttT ba is preserved.

2.2 SPFTI algorithm   After the problem definitions are built, the procedure of SPFTI algorithm is shown in figure.1.

Figure.1 SPFTI algorithm   4. Experiments   In this paper, the example of sequence database is shown as Table.1. Id is the number of a record. A sequence is represented as  1) Find all frequent 1-sequences, L1.

2) Determine frequent 2-sequences, L2.

3) Find frequent fuzzy time 2-sequences, L?2.

3.1) Record all time-intervals in increasing order with their frequencies.

3.2) divide each time interval of 2-sequence into clusters with similar time-intervals.

if the differences of all successive time- intervals are equal, then the 2-sequence is a non-dividable cluster else divide the 2-sequence into 2 time- clusters  3.3) define the trapezoid fuzzy number to each obtained cluster.

3.4) compute the fuzzy support for each obtained cluster.

4) Determine the clusters to be preserved.

4.1) if both are less than the minimum support,  then the partition is ignored, combining back into the original time cluster.

4.2) if the fuzzy support is greater than or equal to the user-specified minimum support,  then ( )i1, , ttT ba is preserved.

else the cluster is deleted.

5) Determine L?2, the set of frequent fuzzy time 2- sequences.

6) For k ? 2, find L?k+1.

6.1) Generate C?k+1 by joining L?k and L?k.

6.2) Compute fsup of each sequence in C?k+1.

6.3) Frequent fuzzy time (k+1)-sequences is  called L?k+1.

( ) ( ) ( ){ } { }n1jmm2211 s,..,sI wheret,I,..,t,I,t,I ? , si is a itemset and tj standards for the time at which Ij occurs.

The minimum support threshold(min_sup) is 0.3.

Calculate the support of all itemsets, if the support is equal to or greater than min_sup, then it?s a frequent itemset or a frequent 1-sequence. All itemsets and their supports are shown in table.2. The set of frequent 1- sequence is L1. In this database, L1={ }765321 s,s,s,s,s,s .

*Sup(s4)=0.2 < 0.3 (=min_sup), so s4 isn?t a frequent itemset.

Generate candidate C2 by joining L1 and L1, and find the support for each candidate 2-sequence, shown in the table.3.

Table.3 the set of candidate 2-sequences, C2, and their  supports C2 support C2 support  <s1,s2> 0.4 <s5,s1> 0.2 <s1,s3> 0.5 <s5,s2> 0.3 <s1,s5> 0.2 <s5,s3> 0.2 <s1,s6> 0.7 <s5,s6> 0.5 <s1,s7> 0.4 <s5,s7> 0.1 <s2,s1> 0.2 <s6,s1> 0.1 <s2,s3> 0.2 <s6,s2> 0.1 <s2,s5> 0 <s6,s3> 0.1 <s2,s6> 0.6 <s6,s5> 0.1 <s2,s7> 0.3 <s6,s7> 0.5 <s3,s1> 0 <s7,s1> 0.1 <s3,s2> 0.1 <s7,s2> 0.2 <s3,s5> 0 <s7,s3> 0 <s3,s6> 0.4 <s7,s5> 0.2 <s3,s7> 0.3 <s7,s6> 0.1 All the candidate 2-sequences with support equal to or  greater than minimum support, min_sup = 0.3, are  members of the set of frequent 2-sequences, L2, shown in table.4.

In table.5, for each frequent 2-sequence, the time clusters of frequent 2-sequences and their frequencies are shown in increasing order of itemsets ID.

Table.5: Time clusters of frequent 2-sequences and  their frequencies L2 Time clusters  <s1,s2> T1,2={(6,2),(9,1),(12,1)} <s1,s3> T1,3={(3,1),(4,2),(5,2)} <s1,s6> T1,6={(8,2),(10,1),(12,1),(16,2),(17,1)} <s1,s7> T1,7={(12,1),(13,1),(15,2)} <s2,s6> T2,6={(2,1),(3,1),(7,1),(11,1),(13,1),(15,1)} <s2,s7> T2,7={(7,1),(16,2),(20,1)} <s3,s6> T3,6={(4,1),(5,1),(9,1),(11,1)} <s3,s7> T3,7={(8,1),(10,1),(12,1)} <s5,s2> T5,2={(3,1),(5,1),(7,1)} <s5,s6> T5,6={(10,1),(12,3),(14,1)} <s6,s7> T6,7={(3,1),(4,1),(5,2),(6,1)}  Next, find the maximum difference between all the  time intervals of each time cluster, and divide the cluster into two candidate time clusters by using divisive hierarchical clustering. Then, calculate fsup for each candidate time cluster and find its fuzzy number. For example, T1,6={(8,2),(10,1),(12,1), (16,2),(17,1)}. The fuzzy supports are calculated and shown in figure.2.

T11,6={(8,2),(10,1),(12,1)} ?11,6=(8,8,12,17)  T21,6={(16,2),(17,1)} ?21,6=(8,16,17,17)   Figure.2 Fuzzy membership functions for time-interval   0.44  1020.2111121(8,12)fsup 1,6 =  ?+?+?+?+?=  0.375  112110.510.2520(16,17)fsup 1,6 = ?+?+?+?+?=  The set of time clusters of frequent 2-sequences and their fuzzy supports is shown in table.6.

Table.1: Sequence database ID Sequence 01 (s5,8),(s4,15),(s6,20) 02 (s1,2),(s3,7),(s2,11),(s6,18) 03 (s2,3),(s1,4),(s3,7),(s6,16),(s7,19) 04 (s1,2),(s2,8),(s6,10),(s7,15) 05 (s5,4),(s6,16),(s1,20),(s3,24) 06 (s7,7),(s1,13),(s5,18),(s2,25),(s6,28) 07 (s5,4),(s1,8),(s3,12),(s6,16),(s7,20) 08 (s1,3),(s5,6),(s2,9),(s4,18),(s6,20) 09 (s2,5),(s1,10),(s3,15),(s6,20),(s7,25) 10 (s6,2),(s7,8),(s5,12),(s2,17)  Table.2 Itemsets and supports  (min_sup = 0.3) Itemset support Itemset support  s1 0.8 s5 0.6 s2 0.7 s6 1 s3 0.5 s7 0.6 s4* 0.2  Table.4 the set of frequent 2-sequences, L2 <s1,s2> <s2,s6> <s5,s2> <s1,s3> <s2,s7> <s5,s6> <s1,s6> <s3,s6> <s6,s7> <s1,s7> <s3,s7>     Table.6: Time clusters of frequent 2-sequences and their fuzzy supports  Time clusters fuzzy number fsup T1,2={(6,2),(9,1),(12,1)} ?1,2=(6,6,12,12) 0.4 T1,3={(3,1),(4,2),(5,2)} ?1,3=(3,3,5,5) 0.5 T11,6={(8,2),(10,1),(12,1)} T21,6={(16,2),(17,1)}  ?11,6=(8,8,12,17) ?21,6=(8,16,17,17)  0.44 0.375  T11,7={(12,1),(13,1)} T21,7={(15,2)}  ?11,7=(12,12,13,15) ?21,7=(12,15,15,15)  0.2 0.233  T12,6={(2,1),(3,1),(7,1)} T22,6={(11,1),(13,1),(15,1)}  ?12,6=(2,2,7,15) ?22,6=(2,11,15,15)  0.375 0.367  T12,7={(7,1) } T22,7={ (16,2), (20,1)}  ?12,7=(7,7,7,20) ?22,7=(7,16,20,20)  0.161 0.3  T13,6={(4,1),(5,1)} T23,6={(9,1),(11,1)}  ?11,6=(4,4,5,11) ?11,6=(4,9,11,11)  0.233 0.22  T3,7={(8,1),(10,1),(12,1)} ?3,7=(8,8,12,12) 0.3 T5,2={(3,1),(5,1),(7,1)} ?5,2=(3,3,7,7) 0.3 T5,6={(10,1),(12,3),(14,1)} ?5,6=(10,10,14,14) 0.5 T6,7={(3,1),(4,1),(5,2),(6,1)} ?6,7=(3,3,6,6) 0.5   If the fsup of a candidate time cluster is equal to or  greater than min_sup, then the candidate time cluster is accepted and reserved. The set of frequent 2-sequences, whose time cluster are accepted, and their fuzzy numbers are shown in table.7.

Table.7: Accepted frequent 2-sequences and their fuzzy  numbers L2 fuzzy number  <s1,s2> ?1,2=(6,6,12,12) <s1,s3> ?1,3=(3,3,5,5) <s1,s6> ?11,6=(8,8,12,17)      ?21,6=(8,16,17,17) <s1,s7> ?1,7=(12,12,15,15) <s2,s6> ?12,6=(2,2,7,15)        ?22,6=(2,11,15,15) <s2,s7> ?22,7=(7,16,20,20) <s3,s6> ?1,6=(4,4,11,11) <s3,s7> ?3,7=(8,8,12,12) <s5,s2> ?5,2=(3,3,7,7) <s5,s6> ?5,6=(10,10,14,14) <s6,s7> ?6,7=(3,3,6,6)   For each accepted frequent 2-sequence in L2, joining  with the fuzzy time, it become a fuzzy time frequent 2- sequence. The set of all fuzzy time frequent 2-sequences is called L?2, shown in table.8.

For k ? 2, find L?k+1 by joining L?k with L?k, so join L?2 with L?2 to generate C?3. And calculate all their fsup, shown in table.9. Then find candidate fuzzy-time frequent 3-sequences, shown in table.10.

Table.8: The set of fuzzy time frequent 2-sequences, L?2.

<s1, ?1,2, s2> <s2, ?12,6, s6> <s5, ?5,2, s2>  <s1, ?1,3, s3> <s2, ?22,6, s6> <s5, ?5,6, s6> <s1, ?11,6, s6> <s2, ?22,7, s7> <s6, ?6,7, s7> <s1, ?21,6, s6> <s3, ?3,6, s6> <s1, ?1,7, s7> <s3, ?3,7, s7>   Table.10: fuzzy-time frequent 3-sequences, L?3.

<s1, ?1,3, s3, ?3,6, s6> <s1, ?11,6, s6, ?6,7, s7> <s1, ?1,3, s3, ?3,7, s7> <s3, ?3,6, s6, ?6,7, s67>   Then, join L?3 and L?3 to generate C?4. C?4={<s1, ?1,3,  s3, ?3,6, s6,?6,7, s7>}, fsup=(<s1, ?1,3, s3, ?3,6, s6,?6,7, s7>) =0.3. So, L?4 = C?4. And C?5 will be an empty set, so stop here. The longest fuzzy-time frequent sequence is <s1,?1,3,s3,?3,6,s6,?6,7,s7>.

5. Discussion   The whole fuzzy-time frequent sequences are shown in table.11. Not only are the sequences in the table, but also all subsequences of them fuzzy-time frequent. For example, <s1, ?1,3, s3, ?3,6, s6,?6,7, s7>is fuzzy-time frequent, all its subsequences{<s1, ?1,3, s3, ?3,6, s6 >, < s3, ?3,6, s6,?6,7, s7>, <s1, ?1,3, s3, >, < s3, ?3,6, s6 >, < s6, ?6,7, s7>} are also fuzzy-time frequent.

Table.11: Fuzzy-time frequent sequences <s1, ?1,2, s2> <s2, ?22,7, s7> <s1, ?21,6, s6> <s5, ?5,2, s2> <s1, ?1,7, s7> <s5, ?5,6, s6> <s2, ?12,6, s6> <s1, ?1,3, s3, ?3,7, s7> <s2, ?22,6, s6> <s1, ?11,6, s6, ?6,7, s7>  <s1, ?1,3, s3, ?3,6, s6,?6,7, s7>   The sequence database in table.1 is also used FTI- Apriori algorithm to find the frequent sequences,?=0.3, the fuzzy membership functions for time-interval is shown in figure.3; the set of frequent sequences is shown  Table.9: Candidate C?3, and their fsups C?3 fsup  <s1, ?1,2, s2, ?12,6, s6> 0.275 <s1, ?1,2, s2, ?22,6, s6> 0.256 <s1, ?1,2, s2, ?22,7, s7> 0 <s1, ?1,3, s3, ?3,6, s6> 0.4 <s1, ?1,3, s3, ?3,7, s7> 0.3 <s1, ?11,6, s6, ?6,7, s7> 0.4 <s1, ?21,6, s6, ?6,7, s7> 0.125 <s2, ?12,6, s6, ?6,7, s7> 0.2 <s2, ?22,6, s6, ?6,7, s7> 0.2 <s3, ?3,6, s6, ?6,7, s67> 0.3 <s5, ?5,2, s2, ?2,7, s7> 0 <s5, ?5,6, s6, ?6,7, s7> 0.1     in table.12, subset of our proposed fuzzy frequent sequences. Compare to table.11, the set of fuzzy time frequent sequences by using SPFTI contains more useful sequences and actual time intervals than the set of FTI- Apriori frequent sequences [8].

Figure.3 fuzzy membership function in FTI-Apriori   Table.12: the set of fuzzy time frequent sequences by using FTI-Apriori algorithm  <s1, S, s3> <s1, M, s7> <s2, M, s6> < s6, S, s7> <s1, M, s6> <s2, S, s6> <s5, M, s6>  According to Table.7, L?2, a sequence <s5, ?5,2, s2>,  whose fuzzy number of time interval between s5 and s2 is ? 5,2 = (3,3,7,7). It is means that, for the fuzzy-time frequent sequence <s5, ? 5,2, s2>, the time interval is about 3 to 7 days.

In L?3, for a sequence <s1, ?1,3, s3, ?3,6, s6>, whose time interval between s1 and s3, ?1,3=(3,3,5,5), is about 3~5days. The time between s3 and s6, ?3,6=(4,4,11,11), is about 4 to 11 days. So, the time interval among <s1, , s3, , s6> is?1,3+?3,6 = (3+4,3+4,5+11,5+11) = (7,7,16,16), about 7~16 days.

And for sequence <s1, ?1,2, s2, ?12,6, s6>, whose time interval between s1 and s2, ? 1,2=(6,6,12,12), is about 6~12days. The time between s2 and s6, ?12,6=(2,2,7,15), is about 2 to 15 days. So, the time interval among <s1, , s2, , s6> is ? 1,2+ ? 12,6 = (6+2,6+2,12+7,12+15) = (8,8,19,27), about 8~19 days.

In sequence database, the actual time intervals among <s1, s2, s6> are 16, 8, 25 and 17 days. 25 days is in?1,2+ ?22,6 = (6+2,6+7,12+15,12+15) = (8,13,27,27) and is not frequent. So, it proves that our approach certainly is a good way to find all the order of itemsets, and the time intervals between successive itemsets.

6. Conclusions   Conventional sequential pattern mining could reveal the order of itemsets. Using the information, after the previous purchase was made we can know the next purchase will happen in the future. But the time interval between successive items in the pattern is not determined.

And some new fuzzy time-interval sequential patterns can only represent the particular time intervals with the fixed linguistic terms, such as Long, Middle, and Short.

In this paper, we propose the new algorithm, sequential pattern mining with fuzzy time intervals (SPFTI), which makes important contribution to support the fuzzy ranges of time interval of sequential patterns.  We use both hierarchical clustering technique and represent the time- interval between itemsets as several trapezoid fuzzy numbers. We also discuss its details to compare with FTI- Apriori algorithm. From the present results obtained, the approach shows us not only the order of successive itemsets, but also the fuzzy ranges of time intervals, which is a more flexible way than the FTI-Apriori algorithms.

7.Reference  [1] R.Agrawal, R. Srikant, Mining sequential patterns, in:  Proc. 1995 Internat. Conf. Data Engineering, pp.3-14.

[2] Klir, G. J., Yuan, B., Fuzzy sets and Fuzzy Logic,  Theory and Application, Prentice Hall PTR, 1995.

[3] M. N. Garofalakis, R. Rastogi, and K. Shim,  ?SPIRIT: Sequential Pattern Mining with Regular Expression Constraints?, Proc. Int. Conf. on Very Large Data Bases (VLDB), pp. 223-234, 1999.

[4] P. C. Wong, W. Cowley, H. Foote, E. Jurrus, and J.

Thomas, ?Visualizing sequential patterns for text mining?, Pacific Northwest National Laboratory. In Proc. of IEEE Information Visualization, 2000.

[5] Yen-Liang Chen, Mei-Ching Chiang, Ming-Taf Ko, ?Discovering time-interval sequential patterns in sequence databases?, Expert Systems with Applications, 25, pp.343-354, 2003.

[6] Jian Pei, Jiawei Han, B. Mortazavi-Asl, H. Zhu, ?Mining Sequential Patterns by Pattern-Growth: Rhe Knowledge and Data Engineering, vol.16, pp.1424- 1440, 2004.

[7] Chung-Ching Yu, Yen-Liang Chen, ?Mining Sequential Patterns from Multidimensional Sequence Engineering, vol.17, pp.136-140, 2005.

