A Data Mining Approach for Finding Optimal Discount of Retail Assortments

Abstract   Due to the recent competition in the retailing  industry, retailers are striving to improve their operations in order to run their stores more efficiently.

One of the most important factors that encourages customers to buy products is discount. The effects of discount on sales have rarely been dealt with academically. Moreover, in few previous researches in this case, the temporal characteristics of product discount have not been noticed. The problem addressed in this paper is the consideration of products' discounts in discovering association rules in different time intervals that a specific discount appears on a specific product and finding optimal discount for each product with the aim of maximizing total profits.

Additionally, experiments on real world data demonstrate the effectiveness of the proposed approach.

1. Introduction   Recently, the capabilities of generating and collecting data have been increasing rapidly.

Widespread use of bar codes for most commercial products, the computerization of many business, and the advance in data collection tools have provided us with huge amount of retail data. This explosive growth in data and databases has generated an urgent need for data mining techniques and tools [7, 11] that can extract implicit, previously unknown and potentially useful information from data in data storages. One of the most popular data mining approaches is "association rules", which is commonly applied to analyze market baskets to help managers to determine which items are frequently purchased together by customers [5, 15]. It is, originally, presented by Agrawal et al. [1]. It studies the frequency of items occurring together in transactional database. Generally,  there are two phases for mining association rules. In the first phase, we find large itemsets, whose supports are larger than or equal to the user-defined minimum support. In the second phase, we use large itemsets generated in the first phase to generate effective association rules. An association rule is effective, if its confidence is larger than or equal to the user-defined minimum confidence. The problem of discovering association rules progressively followed by refinements, generalizations, improvements and extensions, including generalized association rules and multi-level patterns [10, 14, 19, 24]; finding association rules with categorical  and numeric attributes [4, 12, 13, 21, 22, 23]; qualified association rules [16]; temporal association rules [3, 9,20]; spatial association rules [18, 25].

Standard association rules algorithms [2, 17] applied in market basket analysis mainly determines what products customers purchase together in a static fashion. In fact, dynamic changes in discounts rates on products and its effect on sales have been disregarded.

In previous work [8], patterns with discount information are discovered. They, however, assume that each product may have different discounts over different time periods, but the periods are fixed for all products. That is, if our pre-specified period is 2 weeks, the discount rate on items A and B will not be changed in corresponding period. But, in practical situations, the period in which item A has a fixed discount rate could differ from item B. For example, in first week, item A could be sold with 10% discount and in the next week, with 20% discount. On the other hand, item B could be sold with 30% discount in the entire 2 weeks. Moreover, in previous studies[6, 8], optimal discount for assorted products has not been extracted.

In this paper, the best discount for each product is selected based on the total profitability that it generates, including profits from cross-selling.

Proceedings of International Workshop on Data Mining and Artificial Intelligence (DMAI? 08) 24 December, 2008, Khulna, Bangladesh     To deal with this problem a more sophisticated algorithm is developed. Thus, our approach needs a differently formatted data warehouse that must have discount information and temporal content. Such information is available, since transactions not only record purchased items, but also their discounts and the time of purchase. This approach could help reveal reasons behind purchasing certain items together frequently. It may be due to the discount rate on each item or other customer behavior.

The proposed procedure of finding optimal discount for each product begins with an algorithm that discovers temporal association rules with discount information. Next, the procedure proceeds to product discount selection in which the profits of frequent itemsets are considered.

The rest of the paper is organized as follows. In section 2, we define the problem. In section 3, a new algorithm for mining association rules with consideration of product discount is proposed. In section 4, the product discounts selection optimization model is developed. In section 5, the results of the empirical study are presented. Finally, in section 6 we draw conclusions.

2. The problem and definitions   Let  , , ? ,  denote the set of items.

Consider a transaction database , which consists of a set of transactions , , , where  is a transaction identifier associated with each transaction,  is a set of items appearing in a transaction ( I), and  is a time epoch expressing the time that occurs (see Table 1).

In our approach, we partition the discounts rates into intervals and denote each discount rate included in th interval by . For example, assume that we have  five discount intervals as follows: [0%, 10%], (10%, 20%], (20%, 30%], (30%, 40%], (40%, 50%] and (50%, 100%]. Therefore, we have a set of discounts rates denoted by , , ? , . Also, if then  .

Table 1: Transaction table D  Tid Item Time 1 ABCD 2 2 ABE 7 3 AC 15 4 BED 20 5 ABCD 21 6 C 23 7 AC 26    The discount list of products is recorded in table , which consists of , , , , and expresses the period   in which item  has  discount (see Table 2).

Definition2.1: Let  be an itemset which is a subset of . A set of transactions in  containing X indicated by , |  . If | | , we call it  -itemset.

Definition2.2: Let , , ? ,  be  transaction database  incorporated with discount information of discount table . In fact, each indicates that each item in  has appeared with how much discount when it was purchased.

Let -itemset  be an itemset carrying discount information and denoted by a set of pairs , ; we can define two separate sets: | , and  | , . If | | , we call it k-d-itemset. The set of transactions in  containing d-itemset  indicated by , |  .

Table 2: Discount list P Item Discount rate Time  A  [0,8] A  [9,20] A  [21,30] B  [0,10] B  [11,30] C  [0,15] C  [16,22] C  [23,30] D  [0,8] D  [9,22] D  [23,30] E  [0,9] E  [10,20] E  [21,30]   Definition2.3: As we mentioned in definition 2.1,  the time interval in which item  has  discount, denoted by , . It is simply an interval , , where  . Therefore, we can express the lifespan of k-d- itemset , with 1, by  and define it as follows; suppose  is an interval indicated by , , where  max{ | ,  is the time period of an item  in } and min{ | ,  is the time period of an item  in }. It shows the period that  may occur. If , means items in do not have time intersection and this itemset is not     feasible. We also should define { | the time of  is in time interval } as a set of transaction in  where  may occur.

For example, by considering Table 2, we have , 0,8 21,30 , , 0,10 , and ,0,15 . Suppose , , ,  , so we have 0,8  and 1, 2 .

Definition2.4: The global support of itemset  in database , denoted by , , is the fraction of transactions in  that contains . Hence, we have , =| , |/|D|. Given a global support threshold 0,1 ,  is a frequent itemset if ,  .

Definition2.5: The local support of extended itemset in database , denoted by , , is the  fraction of extended transactions in  that contains . Thus, we have , =| , |/| |.

Given a local support threshold 0,1 ,  is frequent d-itemset if ,   .

Definition2.6: The real support of extended itemset ,denoted by , , is the fraction of extended  transactions in   that contains . Hence, we have , =| , |/| |. In order to  determine the effect of discounts on sales we use  _ , / , . If this fraction results in a value which is greater than the threshold , it means this discount combination encourages sales. On the other hand, if  is smaller than the threshold , it implies that this discount combination decrease sales.

Note that  and  specified by users or experts.

Definition2.7: In this paper we need to remove - itemsets   with very short . Since a set of items may appear with a specific discount combination in a very short period of time, it is not reasonable to consider such itemset. For instance, assume that , , , so we have  21,22 .

Therefore with the help of definition 2.6, its real support is 100%. Without consideration of very short period that items A and C appeared with discounts rates  and , respectively,  we may mislead about its positive effect on sales. Therefore, we need a temporal support, denoted by , and represented by =| |. Given a temporal support threshold  ,  is big enough to judge about the real support of if ts( ) .

Definition2.8: If  is a large- -itemset and  , , The confidence of a rule , where  and  are set of pairs , , is  computed as follows: , ,  , , ,  Where , ,   and , , computed in time intervals  which is an intersection of periods of every pairs in  that they could possibly occur. We call a rule an interesting one, if  .

3. The Apriori-Td algorithm   The algorithm proposed in this paper differs from Apriori [2] and Apriori-like [8] algorithms for mining frequent itemsets. However, It takes advantage of approach represented in Chen et al.[8] and makes changes in algorithm in such a way that temporal concept is taken into account. We introduce two filtering operators,  and . The former filters d- itemsets occurred in a very short period of time, since there is no sufficient data to judge on its support and consequently its effects. The later removes d-itemsets which is not frequent enough. Otherwise, we will face problem that a mining process produces a very large number of rules, thus proving to be of little value to the user.

Function Apriori-Td  1) GL =get-global-large-1-itemsets (D); 2) For(k=1; LL null;k++){ 3) If (k==1){ 4)  LC = get-local-candidate-1-d-itemset  (GL ,P); 5)  LL get-large-local-k-d-itemset(LC ); } 6) Else{ 7)  LC =get-local-candidate-k-d-  itemset(LL ); 8) LL =get-large-local-k-d-itemset(LC ); }} 9) LL ;   Figure 1: Apriori-Td algorithm   This approach needs more input data than Apriori-  like algorithm.  They would be discount list  and thresholds  and .

We present the framework of the algorithm in Figure1. In the first step, we find large 1-itemsets, that exceed the global support threshold , labeled . In contrast with Apriori-like algorithm, we only find large 1-itemset in very first step and there is no need to extract k-itemsets, , in future phases. Since the main reason for extracting k-itemsets in Apriori-like algorithm is finding frequent k-d-itemsets, using Apriori-Td algorithm proposed in this paper we can acquire frequent k-d-itemsets directly from (k-1)-d- itemsets and we do not have to scan database once again.

Then in line 4 we join discount information to frequent items by the use of discount list . The     description of the function illustrated in Figure 2. The function of making local candidate 1-itemsets, , differs from achieving , which is described later. In contrary, finding  and  are done by the same function. Hence, interesting discount patterns, , are discovered  by applying Function get-large-local-k-d- itemset. As illustrated in Figure 3, in order to find a period in which k-d-itemset could possibly occur, we compute T (see definition 2.3). All itemsets which do not satisfy temporal condition T ?  and local threshold X , PD  ?  are eliminated. Then, the number of transactions in corresponding period is determined and the computation of real support X  and  is done to find out the effect of such pattern on sales (see Figure 3).

Function get-local-candidate-set-1-d- itemset(GL , P)  1) For each item i   in X GL 2) From table P Determine every different  discount levels for  i  ; 3) Determine the time interval in which item i   appears with each discount level;   Figure 2: Function of get local 1-d-itemsets  candidates   In line 7, we generate candidate of k-d-itemset from large 1 -d-itemset. The method is similar to Apriori algorithm, but it has some extra conditions.

Inasmuch as our itemsets carrying extra information about their discount combination, when two (k-1)-d- itemset is joined, we have to consider whether this combination has actually happened.  If , it means   and  cannot occur simultaneously. This condition automatically satisfies the fact that one item could not occur with different discounts rates in a specific period. Moreover, the set of first components of pairs ,  in  and  should not be equal (see Figure 4).

Function get-large-local-k-d-itemset(LC )  1) For each pairs in LC   Find T 2) If( T ? ) 3) If X , PD  ? { 4) Insert  X  to LL  ; 5) Compute the number of transaction in T ; 5) Compute the real support T , ; 6) Compute X , D ; 7) Compute the EF  X , PD / X ,D ; 8) If(EF  this discount combination  increases sales; 9) If(EF  this discount combination  decreases sales;} Figure 3: Function of get large k-d-itemset  After finding large k-d-itemsets, the set of association rules can be derived from .  Results obtained from this approach are more complete than previous work because time information has been included. In this algorithm, generating association rules has a kind of time constrain and the rules is derived by the use of definition 2.8.

Function get-local-candidate-set-k-d- itemset(LL )  Each two (k-1)-d-itemset X ? , X ?? LL  join to construct a k-d-itemset , providing that (1) X ?? X ? , (2) X ??  and X ?  share k 2  pairs items i , dr , (3) TX?? TX? , (4) all k 1 -d- subsets of  X  should be in LL .

Figure 4: Function of get local k-d-itemsets candidates   Example 3.1: In order to demonstrate the proposed  Apriori-Td algorithm, a simple example is presented.

Assume the transaction database  and discount list are as shown in Tables 1 and 2, respectively. Also suppose that the predefined parameters are as follows:  =0.4, =0.2, =3, =0.5, =1.3, and =0.7.

The large 1-itemsets satisfying ? =0.4 is derived in  the first step. As a result, we have , , ,and  as frequent global items with global supports 0.71, 0.57, 0.71, and 0.42, respectively. After each frequent item incorporated to their discount level, the computation of TX  and  are done to find large 1-d-itemsets for the next step (see Table 3).

Table 3:  Generate  from Time    ,  [0,8] [21,30] 19 0.57 ,  [9,20] 12 0.14 ,  [0,10] 11 0.28 ,  [11,30] 20 0.28 ,  [0,15] 16 0.28 ,  [16,22] 7 0.14 ,  [23,30] 8 0.28 ,  [0,8] 9 0.14 ,  [9,22] 14 0.28 ,  [23,30] 8 0.0   We must calculate the real support of items with  that specific discount level in the corresponding time interval so that we are able to determine their effects.

As shown in Table 4, when item B appears with discount may further encourage customers to purchase it rather than other discount levels. On the other hand,     its  discount may lead to the sales reduction. Item with  discount does not have significant  influence on sales and this combination is neutral.

Table 4:  generate  from Time     Effect  ,  [0,8]  [21,30] 0.8 0.71 1.13  ,  [0,10] 1 0.57 1.75 + ,  [11,30] 0.4 0.57 0.7 - ,  [0,15] 0.67 0.71 0.94  ,  [23,30] 1 0.71 1.4 + ,  [9,22] 0.67 0.42 1.59 +   Table 5:  Generation of large 2-d-itemsets  Time     , ;,  [0,8] 9 0.28 0.42 , ;,  [21,30] 10 0.14 0.42 , ;,  [0,8] 9 0.14 0.57 , ;,  [23,30] 8 0.14 0.57 , ;,  [21,22] 2   , ;,  [0,10] 11 0.14 0.28 , ;,  [9,10] 2   , ;,  [11,15] 5 0.0 0.28 , ;,  [23,30] 8 0.0 0.28 , ;,  [11,22] 12 0.28 0.42 , ;,  [9,15] 7 0.0 0.28   Time     Effect  , ;,  [0,8] 1 0.42 2.38 + , ;,  [11,22] 0.67 0.42 1.59 +  From , we get 2-d-itemsets candidates. As  earlier mentioned, owing to the fact that there exist situations where specific discount combinations of itemsets do not simultaneously fall within the same database time interval (lack of intersection), hence, they do not satisfy the temporal conditions to join together. For example, there might not be a situation where  is sold with discount level  and  with  . So , ; ,  is considered obsolete. It is illustrated in Table 5, , ; ,  and , ; ,  may occur in very short period of time, so for these two 2-d-itemsets, the program does not continue computing their local support.

Finally, large 2-d-itemsets, which their local supports exceed local threshold, are extracted from  and the result reveals that when item  is sold with  discount and item  with , customers purchase these two more frequently. Also, , ; ,  has a positive influence on sales.

It is the time for finding interesting rules, which their confidence is greater than . For example, consider the case when , , , the confidence is 1. Note that local support for , ; ,  and  ,  are computed in time intervals [0, 8], which this combination could possibly occur.

After the execution of this algorithm, we have frequent -itemsets and also their effects on sales. In the next step, the zero-one programming is presented to find the optimal product discount with the aim of maximizing the profits of frequent -itemsets.

4. The product discount selection procedure   In this study, by the use of Apriori-Td algorithm, we can specify which products with how much discount are frequently bought by customers at the same market baskets. In this section, a microeconomic zero-one integer programming model is introduced for product discount selection. That is, the proposed model provides us the products that should be on sale and of course, the discount rates of these selected products.

The results of the optimization problem may express that some products should not be sold with discount.

In the first step of the procedure, the gross margins of frequent itemsets with consideration of the product discount are estimated. The profit estimation follows the idea of Brijs et al.[6]. In their approach, besides considering individual profit generated by a specific product, the cross-selling effects with other products in the assortment are taken into account. In fact, Brijs et al. addressed the product assortment problem.

However, in this paper, we assume that the products are assorted. So, we deal with the problem of finding best combination of discounts for assorted products.

The constructed model is able to select an optimal discount for each product which yields the maximum overall profit. By using frequent -itemsets, the model takes into account cross-selling effects.

Before specifying the microeconomic optimization model, we describe the method of estimating profit of frequent itemsets [6].

4.1. Estimating the gross margin   The parameters of the method are as follows:   Items and their discount level included in the th transaction  The collection of all frequent -itemsets of The selling price of product The purchase price of product  The discount rate of product Quantity of product  that was purchased in  The maximal frequent -itemset in the th transaction  The second maximal frequent -itemset in the th transaction T X  The probability of selecting  in  to  allocate gross margin, T X ?  /      Items and their discount level included in th transaction after eliminating frequent itemset   The profit of products in frequent -  itemsets , ?  The summation of   The method of estimating the profit of frequent itemset is illustrated in Figure 5.

Estimation of gross margin  1) For each transaction  in transaction database{  2) If { 3)  ? ; 4)  ;} 5) If { 6)   Do{ 7) Draw  from all maximal frequent  subsets using probability distribution T X ; 8) ; 9) \ ; 10) }while(  does not contain frequent sets); 10)   }   } 11) Return  for all frequent itemsets;  Figure 5: Function of estimation of gross  margin  4.2. The discount selection model   In this section, we propose an optimization problem for discovering the best discount combination for products.

The goal of the optimization problem maximizes the overall profitability of the frequent -itemsets. The key point in this paper is that not only are the frequency and quantity of a purchased product with a specific discount level taken into account, but also the effect of such a discount level on selling other products is considered.

The parameters of the model are given in below:   The estimated gross margin of th frequent -itemsets  The set of items incorporated with their discount level in the th frequent -itemset   Decision variables:  1,  if any item in frequent d-itemset  is  selected; =  0,   otherwise.

1,  if item  with discount level  is  selected;  = 0,   otherwise.

The mathematical model of product discount  selection is as follows:   Maximize   ? Subject to: (1)                  , (2)  ? 1 (3) 0,1  ,  0,1   Constraint (1) ensures that once a frequent d-itemset  is selected, the product with their discount level in this frequent itemset have to be selected. Constraint (2) forces the model to select just one discount level for each assorted product. Constrain (3) limits the decision variables to be binary.

If no specific discount is selected for an item, it means that it does not exist in any frequent itemsets.

One probable reason for this fact is that it is sold rarely with any discount rate. So, it does not appear in frequent itemsets. The second likely reason is that its sell is not low in whole, but it is not sensitive about its discount and it is sold uniformly in almost low rate. So, any discount rate could not have great influence on its     sale. So, it would be better not to put this item on sale and sell it with its original price.

5. The experiment   In this section, we use a real dataset to assess the  performance of proposed model for finding optimal product discount. The Apriori-Td algorithm was implemented in VB 2000. The real data set is derived from the retail data of chain supermarket in Iran over a period of 4 months in Microsoft SQL Server 2000.

Each transaction records purchase data, purchase time, purchased items, prices, discounts, and quantities.

These transactions consist of 1241 different products and totally there are 7305 sales transactions.

In the first phase of the procedure, in order to discover frequent -itemsets, we partition the discounts rates into 6 intervals, as shown in Table 6. These frequent itemsets work as input for optimization model for finding best product discount in the second phase.

The minimum global support, local support, and confidence are set to 0.3, 0.2, 0.1. The minimum temporal support is set to 3 days. These thresholds are set very low in order to discover enough association rules for further analysis. By the use of Apriori-Td algorithm, 1871 -frequent itemsets were obtained.

This approach uses only -frequent itemsets. The discovery of association rules, however, will be helpful for interpreting the output of the optimization model.

Table 6:  Discount level  Level dr1 dr2 dr3 dr4 dr5 dr6 Dis.

rate(%) 0 1-19 20-39 40-59 60-79 >80   The optimization model can exploit cross-sales  potential between items with different discount rates.

The effect of a product with a selected discount rate on total profitability can be assessed by means of sensitivity analysis. That is, a specific discount rate, which is assigned to a product by the use of proposed optimization model, is replaced by the best discount rate outside the result of the optimization model and its impact on profitability can be observed through its contribution to increasing the objective function. The best discount rate for a product outside the optimization model is the discount rate that has the greatest impact on cross-selling.

Figure 6 illustrates the profit impact of the replacement of each selected discount rate. It indicates that the discount rates for some of the products such as i2, i4, i10, i13, i25, and i31 have great influence on profitability and should not be replaced by other discount rates.

Figure 6: Impact of replacement on  profitability   In this approach, although some of the selected discount rates have low total profit margin individually, they have considerable cross-selling opportunities with some of the other selected discount combinations. For instance, the empirical results indicate that 30% discount rate on chips does not provide high profit with regard to the total margin and its 1.53 (if  1.4, its  does not show strong positive effect on its sale). It is, however, selected as the optimal discount combination for chips.

The reason is that 30% discount for chips encourages costumers to purchase other items (yogurt,10%; ketchup, 0% ) with lower discounts rates more frequently and in high quantity. So, it makes the total profit increase significantly. It, also, can easily be obtained from evaluation of the association rules.

(Chips, 30%) (Yogurt, 10%; ketchup, 0%) Minimum local support=0.39 Minimum confidence=0.95 (Yogurt, 10%; ketchup, 0%) (Chips, 30%) Minimum local support=0.39 Minimum confidence=0.83   The rules illustrate that when a customer buys chips with 30% discount he will often also buy Yogurt with 10% discount and ketchup with no discount. Other direction of the rule demonstrate that when a customer purchases Yogurt with 10% discount and ketchup with no discount in most of the time (0.85) he also purchases chips with 30%.

6. Conclusions and future work   In the first phase of this paper, we presented an  algorithm for discovery association rules in market baskets with consideration of discount information and their temporal characteristics. In previous studies, this problem is not viewed as a temporal association rules mining. In real world, the discount rates on a product         i1 i4 i7 i10 i13 i16 i19 i22 i25 i28 i31 i34 i37 i40  im pa  ct o  n pr  of it  ab ili  ty     could, however, change with different periods and these periods differ from product to product. In the second phase of the paper, we integrated the notion of frequent itemsets with some important microeconomic parameters and the best discount rate selected by means of zero-one integer programming. Finally, we used a real dataset from a retail data of chain supermarket to empirically validate our approach. The results indicate the effectiveness and usefulness of the approach.

In the future, we plan to improve the pruning conditions of the Apriori-Td algorithm. Also, we are going to extend our approach to shelf allocation problem.

7. References  [1] R. Agrawal, T. Imielinski, and A. Swami, ?Mining association rules between sets of items in large databases?, in Management of Data, Washington DC, USA, 1993, pp. 207- 216.

[2] R. Agrawal and R. Srikant, ?Fast algorithm for mining very large data bases, Santiago, China, 1994, 487-499.

[3] J.M. Ale and G.H. Rossi, ?An approach to discovering temporal association rules?, in Proc. ACM Symposium on Applied Computing, Como, Italy, 2000, pp. 294-300.

[4] R.J. Bayardo and R. Agrawal, ?Mining the most interesting rules?, in  Proc. 15th ACM  SIGKDD International Conference on Knowledge Discovery and Data Mining, 1999, pp.145-154.

[5] M. Berry, G. Linoff, ?Data mining techniques: for marketing, sales, and customer support?, New York: Wiley, 1997, pp. 464.

[6] T. Brijs, B. Goethals, G. Swinnen, K. Vanhoof, and G.

Wets, ?A data mining framework for optimal product selection in retail supermarket data: the generalized PROFSET model?, In KDD-2000, Boston, MA, USA, 2000, pp. 300-304.

[7] M.-S. Chen, J. Han, and P.S. Yu, ?Data mining: an Knowledge and Data Engineering, 1996, pp. 866-883.

[8] Y.-L. Chen, T.C.-K. Huang, and S.-K. Chang, ?A novel approach for discovering retail knowledge with price information from transaction databases?, Journal of Expert Systems with applications, 2008, pp.2350-2359.

[9] X. Chen, I. Petrounias, ?Mining temporal features in association rules?, in Proc. 3th European conference on Principles and Practice on Knowledge Discovery in Databases, 1999, pp. 295-300.

[10] S. Fortin  and L. Liu, ?An object-oriented approach to multi-level association rule mining?, in Proc. 15th Management, Rockville, USA,1996, pp. 65-72.

[11] W.J. Frawley, G. Piatetsky-Shapiro, and C.J. Matheus, ?Knowledge discovery in databases: an overview?, AAAI/MIT Press, 1991.

[12] T. Fukuda, Y. Morimoto, S. Morishita, and T.

Tokuyama, ?Mining optimized association rules for numeric attributes?, in Proc. 15th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, Canada, 1996, pp. 182-191.

[13] T. Fukuda, Y. Morimoto, S. Morishita, and T.

Tokuyama, ?Data mining with optimized two dimensional association rules?, in Proc. ACM Transaction on Database Systems,2001, pp. 179-213.

[14] J. Han and Y. Fu, ?Discovery of multiple-level association rules from large databases?, in Proc. 21st bases(VLDB'95), Zurich, Switzerland, 1995, pp. 420-431.

[15] J.W. Han, M. Kamber, ?Data mining: concepts and techniques?, San Francisco: Morgan Kaufmann, 2006, pp.770.

[16] N. Jukic and S. Nestorov, ?Comprehensive data warehouse exploration with qualified association-rule mining?, Journal of Decision Support Systems, 2006, pp.

859-878.

[17] M. Klemettinen, H. Mannila, P. Ronkainen, H.

Toivonen, and A.I. Verkamo, ?Finding interesting rules from large sets of discovered association rules?, in Pro. Third Management, 1994, pp. 401-407.

[18] K. Koperski, J. Han, ?Discovery of spatial association rules in geographic information databases?, in Proc. 4th International Symposium on Advance in spatial Databases,1995,  pp. 47-66.

[19] Y.-C. Lee, T.-P. Hong, and T.-C. Wang, ?Multi-level fuzzy mining with multiple minimum supports?, Journal of Expert Systems with Applications, 2008, pp. 459-468.

[20] Y. Li, P. Ning, X.S. Wang, and S. Jajodia, ?Discovering calendar-based temporal association rules?, Data & Knowledge Engineering , 2003, pp. 193-214.

[21] J.S. Park, M.-S. Chen, and P.S. Yu, ?An effective hash- based algorithm for mining association rules?, in Proc. ACM San Jose, CA, 1995.

[22] R. Rastogi, and K. Shim, ?Mining optimized association rules with categorical and numeric attributes?, in Proc. IEEE Transactions on Knowledge and Data Engineering, 1998, pp.

503-512.

[23] R. Srikant and R. Agrawal, ?Mining quantitative association rules in large relational tables?, in Proc. ACM Montreal, Canada, 1996, pp. 1-12, ACM Press.

[24] S. Tsur, J. Ullman, S. Abiteboul, C. Clifton, R.

Motwani, S. Nestorov, and A. Rosenthal, ?Query flocks: a generalization of association-rule mining?, in Proc. ACM SIGMOD Conference, Seattle, Washington, USA, 1998, pp.

1-12.

[25] L. Wang, K. Xie, T. Chen, and X. Ma, ?Efficient discovery of multilevel spatial association rules using partitions?, Journal of Information and Software Technology, 2005, pp. 829-840.

