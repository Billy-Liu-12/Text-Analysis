Towards Optimized TCP/IP Covert Channels

Abstract? Covert channels exist in most communications systems  and allow individuals to communicate truly undetectable and  exchange hidden information. That?s why their detection seems  to be a big deal for security systems. However, till now, security  systems do not include dedicated processes for covert channel  detection. In this paper, we first propose mechanisms to detect  common covert channels. Then, within a whole security system,  we propose an optimized order regarding the execution of the  three major security processes: Firewall, Intrusion Detection  System (IDS) and Covert Channel Detection System (CCDS). It  will be demonstrated that the proposed order would allow  security systems to offer better processing performances.

Keywords- Covert channel system, TCP/IP protocols, Firewall,  Intrusion Detection.



I. INTRODUCTION  A covert channel is defined as: any communication channel that can be exploited by a process to transfer information in a manner that violates the system security policy [4]. Some features of the TCP/IP protocols suite can be used to send covert messages as discussed in [1,4,6,7,9].

Covert channels are an immense cause of security concern because they can be used to pass malicious messages.

Therefore, detecting these covert channels is an important issue that needs to be addressed.

This paper discusses mechanisms for detecting the most common covert channels that use the TCP/IP headers. The mechanisms have been implemented in a security system, called Covert Channel Detection System (CCDS).

A whole security system should integrate at least three security processes, namely a Firewall, IDS, and CCDS.

Therefore, a whole security system, that includes Firewall, IDS, and CCDS, should select the order of the execution of these processes for each given class of packet. Otherwise, a single order may affect the performance of the whole security system, since it may be suitable for a particular class of packets but not for another.

This paper presents an optimized order regarding the execution of the three security processes based on the classification of the packets. It will be demonstrated that the proposed order would allow security systems to offer better processing performances.



II. MECHANISMS FOR DETECTING COVERT  CHANNELS  It is generally admitted that covert channels can not be completely eliminated [3, 4]. Although it could be appreciably reduced by design and careful analyzes.

In this paper, we propose mechanisms for detecting the hidden channels that might used the following fields:  Type of Service, IP Identification, IP options( Strict source routing, Loose source routing, IP Timestamp and Record route are options chosen to embed hidden information. ), TCP initial sequence number (ISN), Urgent pointer.. The proposed mechanisms exploit mainly the characteristics of these channels and their weak points in order to be able to detect them.

A. IP covert channels detection  1)  Covert channels using the ?Type of Service? field This field is rarely used, thus the use of this field would be  suspicious when it is set to a non null value. We should also mention that the bits 6 and 7 in this field are specified to be set to 0 [5]. So to detect a non legitimate use of this field, we should check the value of these fields.

2)  Covert channel using the ?IP identification? field The values of this field are generated randomly, by the  TCP/IP stack. But for packets belonging to the same connection and the same flow, the ?IP identification? field is incremented by 1. Thus, the detection of this particular hidden channel could be made by saving packets of various connections, calculating the difference between the IP IDs values of consecutive packets of each connection and test if it is equal to 1.

3)  Covert channels using the following IP options: ?Strict  source routing?, ?Loose source routing?, ?Strict source  routing? and ?Record route? First of all, these IP options require contents of IP  addresses. So to detect covert channels using the IP options, we need to check the validity of the inserted IP addresses in the IP options.

In addition, the use of the ?Record route? option as covert channel could also be detected using another technique. That is, for consecutive packets, normally their network path will not change. So we should find the same list of IP addresses in the ?Record route? option for consecutive packets.

978-2-9532443-0-4 ? 2008 ESRGroups France 1    4) Covert channel using the ?Timestamp IP option? The values of the timestamps should increase from a jump  to another. To detect a hidden channel exploiting the "Timestamp" option, we should check if the timestamps values are increasing or not.

B. TCP covert channels detection  1)  Covert channel using the ?ISN? field This channel exploits the ISN field. In this case of hidden  channels, the 3 rd  packet of the TCP three-way-handshake packets is ignored. Thus, a method to detect this type of covert channel consists into detecting any non accomplished TCP connection.

2)  Covert channel using the ?Urgent Pointer? field The ?Urgent Pointer? field is interpreted only if the URG  bit is set. Thus, if this bit is not set, the "Urgent Pointer" field would have null content. On the other hand, if the URG bit is not set and this urgent pointer field contains a non null value, we could mention the detection of a covert channel.

C. A Covert Channel Detection System (CCDS)  A system, using the described detection mechanisms in the two previous sub-sections A and B, has been implemented. The system is called Covert Channel Detection System (CCDS).



III. INTEGRATION OF FIREWALL, IDS AND CCDS  SYSTEMS  Let?s assume we have an advanced integrated security  system (ISS) that includes a Firewall (FW), an Intrusion  Detection System (IDS) and a Covert Channels Detection  System (CCDS). The ISS system should be able to perform  three main functionalities, namely:  ? Filter packets based on filtering rules defined in the Firewall.

? Detect and stop attacks based on attack signature defined in the IDS.

? Detect coverts channels using detection mechanisms defined in the CCDS.

In this paper, we propose an optimization mechanism that uses a classification process. The classification process allows the ISS system to decide about how the packet will be treated.

In fact, once a packet reaches the ISS system, first it will be classified, then depending on its class, the order of the execution of the three processes will be selected for the packet.

A. The classification process  In this work, we are limited to deal with TCP/IP packets.

First of all, all incoming packets will be classified. We propose four classes:  1) Class C1: Fragmented packets class Fragmented packets have the bit MF set to 1, or set to 0 and  the "offset" field has a non null value.

2) Class C2: Flood attacks packets class  Flood packets are packets that intend to generate DoS  attacks, such as SYN, ICMP and UDP flooding attacks.

Since there are three types of packets, we may define three  sub classes, namely:  ? Class C2_TCP: is the class of TCP flooding attacks.

? Class C2_UDP: is the class of UDP flooding attacks.

? Class C2_ICMP: is the class of ICMP flooding  attacks.

3) Class C3: Application layer attack packets class A number of modern attacks use the application layer  headers and data in the packets. Advanced security devices require deep inspection capabilities, known as Deep Inspection (DI), to detect application layer attacks.

4) Class C4: Class of packets integrating IP options The IP options appear seldom in the IP headers.

Consequently, packets with IP options are usually consider very suspicious.

B. Treatments of packets  For each class of packet, a particular treatment is applied.

In fact, a treatment indicates the order of execution of the Firewall, IDS, and CCDS. Table 1 shows the order of the execution of the three processes for each class of packets.

TABLE I. THE PROPOSED ORDER OF EXECUTION OF THE THREE PROCESSES FOR EACH CLASS OF PACKETS  class(P) The Proposed  treatment  Fragmented packets Treatment #1  class(P)= {C2_ TCP};  class(P)= {C2_ UDP};  class(P)= {C2_ ICMP}  Treatment #2  class(P)= {C2_ TCP, C4};  class(P)= {C2_ UDP, C4};  class(P)= {C2_ ICMP, C4};  class(P)= {C3};  class(P)= {C3, C4}  Treatment #3  a)  Treatment #1 : Fragmented packets  Figure 1. Treatment of fragmented packets     Each received fragmented packet will first pass through the CCDS to check if it carries hidden information. If it is the case, the fragmented packet will be rejected and an automatic update will take place. That is, a rule, which will block all the fragmented packets that have the same IP ID as the rejected fragmented packet, will be added. If all the fragmented packets that belong to one original packet P do not encapsulate hidden data, the original packet P will be reassembled. Then, it will be sent to the Firewall. Thereafter, if it is not rejected by the Firewall, it will pass through the IDS (Figure 1).

b) Treatment #2 : Flood attacks packets  It?s an adaptative and stateful treatment. When a received packet then the Firewall is activated to filter it. The IDS and the CCDS will be activated next. Depending on the nature of the incoming attack packets, which is usually random, we will switch between the FW IDS CCDS order and the FW CCDS IDS order. Let?s define the following:  ? nCCDS: is the number of rejected packets by the CCDS.

? nIDS: is the number of rejected packets by the  IDS.

If nCCDS > nIDS, then the CCDS will be activated before the IDS and vice-versa. Thus with this treatment our system will be a stateful  learning integrated FW, IDS, CCDS.

a) Treatment #3: Packets belonging to {C2, C4}, {C3,  C4}, and {C3} classes  Packets that belong to the {C2, C4} class, present at the same time two risks: a risk to cause a flooding attack (C2) and a risk to carry hidden information (C4). Since the CCDS needs only one or two packets to detect a hidden channel, but the IDS needs usually more than one packet to detect attacks, mainly DoS attacks. That?s why we have chosen the FW CCDS IDS order to treat such type of packets. In the case of packets that belong to the {C3, C4} or {C3} classes, they have specificity since they include applicative headers, which must be treated in deep by the IDS. In such a case, the IDS needs several packets to decide whether the packets carry attacks or not. That?s why the CCDS will be executed just after the Firewall, for this type of packets.



IV. PERFORMANCE EVALUATION  In this section, we intend to evaluate the performance of an ISS system with and without our classification mechanism. The processing time of different types of malicious packets by the ISS system will be evaluated.

In order to evaluate the processing time, we define the following: For a packet Pi:  ? ti: The average packet processing time by the ISS with the classification process.

? t?i: The average packet processing time by the ISS without the classification process.

? xi: The average packet processing time by the CCDS.

? yi: The average packet processing time  by the FW.

? zi: The average packet processing time  by the  IDS.

A. Treatment #1  If the initial packet is fragmented in n fragments, we may define the following: For a fragment j of an initial packet i:  ? xij: The average fragment processing time by the CCDS.

? j: The average waiting time that separates the the fragment j reception from  the fragment j+1 reception.

? x?i: The average processing time needed by the CDS for all the fragments.

1)  Proccessing time evaluation with the classification  process When the ISS system uses our classification mechanism,  the processing time for a given fragmented initial packet can be stated as follow:  Packet processing time by the ISS (ti) = processing time of all the fragments of the initial packet by the CCDS+ processing time of the reassembled packet (initial packet) by the FW + processing time of the reassembled packet by the IDS.

Thus:      (1)  However, x?i = f (n, xij, j).

To compute x?i, we distinguish two cases:  ? 1 st  case: xij j => j - xij 0  The CCDS finishes processing fragment j before the arrival of fragment j+1 (Figure 2):  Figure 2. The CCDS treatment of two successive fragments when xij j  ? 2nd case: xij > j => j - xij <0  Fragment j+1 arrives before the CCDS finishes processing fragment j (Figure 3).

Thus, we can deduce the following formula:  (2)  So we have:    (3)  iiii zyxt ++= '  Fragment  j+1 Arrival Fragment  j  CCDS waiting time for  the j+1 fragment = j - xij  CCDS processing time for the  fragment j: xij  Processing  end  j  in  n  j  ijjjii xxxx +?+=  ?  =    )]0,max([' ?  [ ] ii n  j  inijjjii  iiii  zyxxxt  zyxt  +++?+=  ++= ?  =    )0,max(  '  ?     Figure 3. The CCDS Treatment of two successive fragments with xij > j  2) Proccessing time evaluation without the  classification process We agree that without the classification process, the ISS  will have to wait until the initial packet is reassembled, before carrying out its treatment. Therefore, the average packet processing time (t?i) by the ISS can be as follows:  t?i= reassembling time+xi+yi+zi  However, the reassembling time= ?  =    n  j  j?  So, we will have:                                                      (4)  3) Case studies  a) 1st case study: A fragmented packet carrying a  hidden channel  We consider the case of a fragmented packet carrying a hidden channel in the IP header or TCP header.

? With the classification process: If the fragment l (l<n) transports hidden information, all  the packet will be rejected. Thus we will have:  (5)  ?  Without the classification process: If we consider the reassembling FW CCDS IDS order,  the packet will be rejected as soon as it is treated by the CCDS.

Thus, we will have:  (6)  If we consider the reassembling FW IDS CCDS order, the packet will be rejected as soon as treated by the third process, the CCDS. Thus, we will have:  (7)  ? Performance comparison:  With the classification process, if the fragments encapsulate a hidden channel, the CCDS will detect it, since in general l is equal to 1. So, ti=xi1.

However, the time that the CCDS needs to treat a fragment (xij) is almost equal to the time needed to treat the original packet (xi). This is due to the fact that the mechanisms implemented on the CCDS treat only the IP header and TCP header. Thus, treating a fragment or the original packet will  take almost the same time: ii xx ?1  So:  (8)  Thus, we will have:  Processing time with the classification process is less than the Processing time without the classification process.

b) 2nd case study: An inoffensive fragmented packet  We consider the case of an inoffensive fragmented packet.

? With the classification process: The processing time for this type of packet is:  (9)  ? Without the classification process: The processing time for this type of packet is:  (10)  ? Performance comparison:  st  case :If j xij, then max( j- xij,0)= j- xij In this case, we will have the following formula, when the  ISS includes the classification process:  (11)  However, when the ISS does not include the classification process, we will have:  (12)  In addition, since xin xi, we find that ti t?i. Thus, the classification process allows the ISS to offer almost the same performances as when no classification process is used.

nd  case: If j<xij then max( j- xij,0)= 0  With the classification process we have:  (13)  CCDS processing  time for the  fragment j: xij  Fragment j  Arrival  CCDS processing time for  the fragment j : xij  j  CCDS waiting time for the j+1 fragment  = j - xij  Fragment j+1  Arrival  iii  n  j  ji zyxt +++= ?  =    ' ?  [ ]  1)0,max(     ==  >+?+= ?  =  lifxt  lifxxxt  ii  l  j  ilijjjii ?  ii  n  j  ji xyt ++= ?  =    1)'( ?  iii  n  j  ji xzyt +++= ?  =    2)'( ?  [ ] ii n  j  inijjjii zyxxxt +++?+=  ?  =    )0,max(?  iii  n  j  ji zyxt +++= ?  =    ' ?  [ ]  [ ]  ii  n  j  inji  ii  n  j  inijjji  ii  n  j  inijjjii  zyxt  zyxxx  zyxxxt  +++=  +++?+=  +++?+=  ?  =  ?  =  ?  =        )(  )0,max(  ?  ?  ?  iii  n  j  ji zyxt +++= ?  =    ' ?  [ ] ii n  j  inijjjii zyxxxt +++?+=  ?  =    )0,max(?  iii  n  j  jiii  ii  n  j  jiii  xzytxt  xytxt  +++==  ++==  ?  =  ?  =        )'(  )'(  ?  ?     Since max( j- xij,0)= 0 then we will have:   (14)  Without the classification process we will have:  (15)  Thus, t?i<ti. Consequently, the classification process degrades the performances in this specific case.

B. Treatment #2  We assume that the flooding attack detection threshold in the IDS is d packets. The average packet processing time is:  Since treatment#2 is adaptative, we distinguish 2 cases:  ? The selected order is FW IDS CCDS: For the d+1 packet, which will be rejected, we will have:  (16)  ? The selected order is FW CCDS  IDS: For the d+1 packet, which will be rejected, we will have:  (17)  Thus, if our treatment privileges the IDS on the CCDS, then we will have better performance while treating flooding attack packets, with an ISS system that includes our classification process.

C. Treatment  #3  Treatment #3 uses the FW CCDS  IDS order to treat the received packets. On one hand, it is specific to packets encapsulating IP options, which are likely carrying hidden channels. On the other hand, this treatment is specific to packets integrating an applicative layer which is deeply inspected by the IDS.

1) Case study  a) 1st case study: ICMP packets carrying hidden  information in the IP ?Timestamp? option  This type of packet belongs to the {C2, C4} class. The ISS uses the classification process:  In this case, the packet will be rejected by the second security process (CCDS).

Thus, we will have:  ?  The ISS does not use the classification process: If the order used is FW IDS CCDS, then the packet will  be rejected after the 3 rd  process (CCDS).

(18)    Thus, we find that ti<t'i. In this case, the classification process improves the performances and gives a less processing time.

b) 2 nd  case study: {C3, C4} class packets  To treat a packet including an application layer, the IDS  need much more time than CCDS needs, since the CCDS  treats only the headers. Thus, we will have zi>xi.

?  If the packet carries covert channel: Our treatment uses the FW CCDS IDS order. The  packet will be rejected after the second process (CCDS).

(19)  However, if we use FW IDS CCDS order, we will have:  (20)  Thus, in this case, the processing time when our classification process is used is much lower than the processing time when the classification process is not used: ti<t'i.



V. CONCLUSION  In this paper, first we proposed mechanisms for detecting covert channels that use TCP/IP headers to hide information.

The mechanisms have been implemented in a security system, called Covert Channel Detection System (CCDS).

The processing of the packets by the three processes (Firewall, IDS, and CCDS) should be optimized. That?s why we have proposed treatment mechanisms based on the classification of the received packets. The performance evaluation gave satisfactory results.

This work could be extended by proposing other mechanisms for detecting more types of covert channels [5].

We could also extend this work by implementing a prototype system.

