Mining with Prelarge Trees for Record Modification

Abstract   In this paper, the structure of the prelarge tree is  proposed to maintain association rules for record  modification based on the concept of pre-large  itemsets. Due to the properties of the pre-large concept,  the proposed algorithm can achieve a good execution  time for tree maintenance especially when each time a  small number of records are modified. Experimental  results show that the proposed prelarge-tree  maintenance algorithm has a good performance for  handling updated records.

1. Introduction   Depending on the classes of knowledge derived, the  mining approaches may be classified as finding  association rules, classification rules, clustering rules  and sequential patterns, among others. Among them,  finding association rules in transaction databases is  most commonly seen in data mining [1][2][3].

Han et al. proposed the Frequent-Pattern-tree (FP-  tree) structure for efficiently mining association rules  without generation of candidate itemsets [4]. The FP-  tree was used to compress a database into a tree  structure which stored only large items. It showed the  approach could have a better performance than the  Apriori approach[1].

Hong et al. proposed an algorithm based on pre-  large itemsets to handle the modified records, which  can further reduce the number of rescanning databases  [5]. The algorithm did not need to rescan the original  database until a number of records are modified. Since  rescanning the database spent much computation time,  the maintenance cost could thus be reduced in the  algorithm.

Hong et al. also proposed an efficient mining  algorithm based on the prelarge tree for handling the  insertion of records [8]. In that approach, an  expeditious prelarge-tree structure was used to simplify  the tree update process. It was similar to the FUFP-tree  [6] structure except that the prelarge-tree structure kept  not only frequent items but also pre-large items. When  records were inserted into the database, the proposed  algorithm would process them to maintain the prelarge  tree, the Header_Table and the Pre_Header_Table.

In this paper, we propose a maintenance algorithm  to further handle the prelarge-tree structure for  modified records. Experimental results also show that  the proposed prelarge-tree maintenance algorithm  based on the pre-large concept can achieve a good  performance when records are modified.

2. Review of related works   The FUFP-tree structure [6] is the same as the FP-  tree structure [4] except that the links between parent  nodes and their child nodes are bi-directional and the  items are not necessarily placed in the order of  frequencies. It must be built in advance from the  original database before new transactions come. The  entire FUFP tree can then be re-constructed in a batch  way when a sufficiently large number of transactions  have been inserted.

Hong et al. proposed an algorithm based on pre-  large itemsets to handle the modified records, which  can further reduce the number of rescanning databases  [5]. When records are modified from the database, the  count difference is first formed by comparing the  The 3rd Intetnational Conference on Innovative Computing Information and Control (ICICIC'08)    counts of each updated item before and after record  modification. Considering an original database and  some records to be modified [5], itemsets may fall into  one of the following nine cases illustrated in Figure 1.

Large itemsets  Pre-large itemsets  Original  database  New  transactions  Small itemsets  Case 1      Case 2      Case 3  Case 4      Case 5      Case 6  Case 7      Case 8      Case 9  Large itemsets  Positive difference  Pre-large itemsets  Original  database  Item difference  Small itemsets  Case 1      Case 2      Case 3  Case 4      Case 5      Case 6  Case 7      Case 8      Case 9  Zero difference  Negative difference    Figure 1: Nine cases arising from and the  original database and the modified records    Cases 1, 2, 5, 6, 8 and 9 above will not affect the  final large itemsets. Case 3 may remove some existing  large itemsets, and Cases 4 and 7 may add some new  large itemsets as well. If we retain all large and pre-  large itemsets with their counts after each pass, then  cases 3 and 4 can be easily handled. Also, in the  maintenance process, the ratio of modified records to  old transactions is usually very small. This is more  apparent when the database is growing larger. It has  been formally shown that an itemset in Case 7 cannot  possibly be large for the entire updated database as  long as the number of transactions is smaller than the  number f shown below [5]:  ? ?dSSf lu )( ?=  where f is the safety number of modified records, Su is  the upper threshold, Sl is the lower threshold, and d is  the number of original transactions.

3. The Proposed Maintenance Algorithm  for Handling Modified Records   The prelarge tree has to be built in advance from the  initial original database. The algorithm is described  below.

INPUT: An old database consisting of d records, its  prelarge tree, corresponding Header_Table,  and Pre_Header_Table, a lower support  threshold Sl, an upper support threshold Su,  and a set of t modified records.

OUTPUT: A new prelarge tree after record  modification.

STEP 1: Calculate the safety number f of modified  records according to the formula [5].

STEP 2:  Find all the items in the t records before and  after modification. Denote them as a set of  modified items, M.

STEP 3: Find the count difference (including zero) of  each item in M for the modified records.

STEP 4: Divide the items in M into three parts  according to whether they are large, pre-large  or small in the original database.

STEP 5: For each item I in M which is large in the  original database (appearing in the  Header_Table), do the following substeps (for  Cases 1, 2 and 3):  Substep 5-1: Set the new count S U (I) of I in the  entire updated database as:  S U (I) = S  D (I) + S  M (I),  where S D (I) is the count of I in the  Header_Table (from the original database) and  SM(I) is the count difference of I from record  modification.

Substep 5-2: If S U (I)/d ?  Su, update the count  of I in the Header_Table as S U (I), and put I in  the set of Increased_Items and  Decreased_Items, which will be further  processed to update the prelarge tree in STEP  9;  Otherwise, if Su > S U (I)/d ?  Sl, remove I from  the Header_Table, put I at the front of the  Pre_Header_Table with its updated frequency  S U (I), and keep I in the set of Increased_Items  and Decreased_Items;  Otherwise, item I is small after the database is  updated; remove I from the Header_Table and  connect each parent node of I directly to its  corresponding child node in the prelarge tree.

STEP 6: For each item I in M which is pre-large in the  original database (appearing in the  Pre_Header_Table), do the following substeps  (for Cases 4, 5 and 6):  Substep 6-1: Set the new count S U (I) of I in the  entire updated database as:  S U (I) = S  D (I) + S  M (I).

Substep 6-2: If S U (I)/d ?  Su, item I will  become large after the database is updated;  remove I from the Pre_Header_Table, put I  with its new frequency S U (I) at the end of the  Header_Table, and put I in both the sets of  Increased_Items and Decreased_Items;  Otherwise, if Su > S U (I)/d ?  Sl, item I is still  pre-large after the database is updated; update  I with its new frequency S U (I) in the  Pre_Header_Table and put I in both the sets of  Increased_Items and Decreased_Items;  The 3rd Intetnational Conference on Innovative Computing Information and Control (ICICIC'08)    Otherwise, item I is small after the database is  updated; remove I from the Pre_Header_Table  and connect each parent node of I directly to  its corresponding child node in the prelarge  tree.

STEP 7: For each item I which is neither large nor pre-  large in the original database but has positive  item difference in M (for Case 7), put I in the  set of Rescanned_Items, which is used when  rescanning the database in STEP 8 is  necessary.

STEP 8: If t + c ?  f or the set of Rescanned_Items is null, do nothing;  Otherwise, do the following substeps for each  item I in the set of Rescanned_Items:  Substep 8-1: Rescan the original database to  decide the original count S D (I) of I.

Substep 8-2: Set the new count S U (I) of I in the  entire updated database as:  S U (I) = S  D (I) + S  M (I).

Substep 8-3: If S U (I)/d ?  Su, item I will  become large after the database is updated; put  I in both the sets of Increased_Items and  Branch_Items;  Otherwise, if Su > S U (I)/d ?  Sl, item I will  become pre-large after the database is updated;  put I in both the sets of Increased_Items and  Branch_Items;  Otherwise, neglect I.

STEP 9: For each updated record before modification  (T?) and with an item J existing in the  Decreased_Items, find the corresponding  branch of J in the prelarge tree for the record,  and substract 1 from the count of the J node in  the branch; if the count of the J node becomes  zero after subtraction, remove node J from its  corresponding branch and connect the parent  node of J directly to the child node of J.

STEP 10: If the set of Branch_Items is null, nothing is  done in this step. Otherwise, do the following  substeps for each item I in the set of  Branch_Items:  Substep 10-1: Insert the items in the  Branch_Items to the end of the  Header_Table or the Pre_Header_Table  according to the descending order of their  updated counts.

Substep 10-2: For each record in the  unmodified records (D - ) and with an item J  existing in Branch_Items, if J has not been at  the corresponding branch of the prelarge tree,  insert J at the end of the branch and set its  count as 1; Otherwise, add 1 to the count of  the node J.

STEP 11: For the updated records after modification (T)  with an item J existing in Increased_Items, if J  has not been at the corresponding branch of  the prelarge tree, insert J at the end of the  branch and set its count as 1; Otherwise, add 1  to the count of the J node.

STEP 12: If t + c > f, then set c = 0; otherwise, set c = t  + c.

4. An Example   Table 1 shows a database to be used in the example.

It contains 10 transactions and 9 items, denoted a to i.

Table 1: The original database in the example  Old database  TID Items  1 a, b, c, d, e, f  2 b, c, d, f  3 b, c, d, e, h  4 b, c, d, e, f  5 b, c, d, f, g, i  6 b, c, d, e, h  7 b, f, g  8 c, d, e, h  9 e, f, g, h, i  10 a, b, c, e, g    Assume the lower support threshold Sl is set at 40%  and the upper one Su at 70%. Here, not only the  frequent items are kept in the prelarge tree but also the  pre-large items. The prelarge tree is then formed from  the database, the Header_Table and the  Pre_Header_Table, with the results shown in Figure 2.

Header_Table Item Frequency Head  b        8  c        8  d        7  e       7  Pre_Header_Table Item Frequency Head  f        6  g       4  h       4  {   }  b: 8  null  c: 7  d: 6  e: 4  f: 2 h: 2  f: 2  g: 1  f: 1  g: 1  c: 1  d: 1  e: 1  h: 1  e: 1  g: 1  e: 1  f: 1  g: 1  h: 1  null  null  nullnullnull  null   Figure 2: The prelarge tree, the Header_Table  and the Pre_Header_Table constructed  The 3rd Intetnational Conference on Innovative Computing Information and Control (ICICIC'08)    Assume the last two records (with TIDs 9 to 10) in  the original database are modified as shown in Table 2.

Table 2: The two records after modification  Transaction No. Items  9 a, b, f, h  10 b, f, i    The final results by the proposed algorithm are  shown in Figure 3.

Header_Table Item Frequency Head  b        9  c        7  d        7  f         7  Pre_Header_Table Item Frequency Head  e       5  h       4  {   }  b: 9  null  c: 6  d: 6  e: 4  f: 2 h: 2  f: 2  f: 3  c: 1  d: 1  e: 1  h: 1null  nullnull  null  h: 1   Figure 3: The final prelarge tree    5. Experimental results   Experiments were made to compare the  performance of the batch FP-tree construction  algorithm [4], the FUFP-tree modification algorithm [7]  and the prelarge-tree modification algorithm for  handling modified records. A real dataset called BMS-  POS [9] was used in the experiments. Figure 4 shows  the execution times of the three algorithms for different  threshold values. It can be observed from Figure 4 that  the proposed prelarge modification algorithm ran faster  than the other two.

12% 13% 14% 15% 16%  threshold value  ex ec  ut io  n tim  e (s  ec .)  FP tree FUFP tree Prelarge tree   Figure 4: The comparison of the execution  times for the three modification algorithms  6. Conclusions   In this paper, we have proposed the prelarge-tree  maintenance algorithm based on the pre-large concept  to handle modified records. Experimental results also  show that the proposed algorithm runs faster than the  other two. The proposed approach can thus achieve a  good trade-off between execution time and tree  complexity.

7. Acknowledgement   This research was supported by the National  Science Council of the Republic of China under  contract NSC 96-2221-E-390-003.

8. References  [1] R. Agrawal, T. Imielinksi and A. Swami, ?Mining  association rules between sets of items in large database,?  The ACM SIGMOD Conference, pp. 207-216, 1993.

[2] R. Agrawal and R. Srikant, ?Fast algorithm for mining   Large Data Bases, pp. 487-499, 1994.

[3] R. Agrawal, R. Srikant and Q. Vu, ?Mining association  rules with item constraints,? The Third International  Conference on Knowledge Discovery in Databases and Data  Mining, pp. 67-73, 1997.

[4] J. Han, J. Pei and Y. Yin, ?Mining frequent patterns  without candidate generation,? The 2000 ACM SIGMOD   2000.

[5] T. P. Hong and C. Y. Wang, "Maintenance of association  rules in data mining," The 2000 International Computer  Symposium, pp. 51-56, 2000.

[6] T. P. Hong, C. W. Lin, and Y. L. Wu, ?Incrementally  Fast Updated Frequent Pattern Trees,? Expert Systems with  Applications, 2008.

[7] T. P. Hong, J. W. Lin, and Y. L. Wu, ?Maintenance of  fast updated frequent pattern trees for record modification,?   Computing, Information and Control, vol , pp. 570-573,  2006.

[8] C. W. Lin, T. P. Hong and W. H. Lu, ?Incremental  Mining with Prelarge Trees?, The 21th International  Conference on Industrial, Engineering & Other Applications  of Applied Intelligent Systems, 2008.

[9] Z. Zheng, R. Kohavi and L. Mason, ?Real world  performance of association rule algorithms,? The   Mining, pp. 401-406, 2001.

