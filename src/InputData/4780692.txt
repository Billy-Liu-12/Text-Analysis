Enterprise Interaction Ontology for Change Impact Analysis of Complex  Systems

Abstract   Reasoning about the impact of change is critical throughout the Information Technology (IT) architecture lifecycle management processes and this is especially challenging because installed architectures are complex, evolve constantly, and most changes have some global impact.  We present an enterprise-interaction ontology for integrated query, analysis, and monitoring that supports features to allow architects and engineers pin- point the impact of change to the installed architecture before implementation.  The ontology represents select associations between the enterprise?s business processes, services and infrastructure so that significant consequences of a change are propagated to affected areas based on underlying rules.  Thus, interdependencies and relationships that are not obvious are identified and the impact is quantified.  This allows the architect to know the complete scope of modifications required in order to accomplish a change in a manner consistent with best practices (like ITIL version 3).   We illustrate - 1) the rules and taxonomy relationships that give us the ability to propagate changes and determine the impact, and 2) how actual questions and decision- making during the architecture management processes can be better supported using a more precise and factual understanding.  Not only does the interaction methodology help analyze the potential impact of adding a new component, a change due to an incident, or the deletion of an existing component from the architecture, it also supports business-IT alignment processes like chargeback, capacity management and disaster recovery.

1. Introduction    1.1 Business Problem   The business problem is to support the Architecture Life-Cycle Management Processes.  The related processes are typically kicked off in response to a new initiative, a new project, or a request for change.  One objective during these processes is to ensure that the plans and implementations do not degrade the performance of on- going operations and the non-functional attributes of the existing systems.  Through our investigations we  concluded that the state of practice is such that important insights from the installed enterprise architecture are not available to inform its evolution.  The feedback from deployment is difficult to obtain and validate against the initial design to see how well both are aligned.  To achieve this continuous improvement, the paper proposes both an ontology and ontology-based methodology to analyze the impact of introducing a change in the existing enterprise architecture.  The methodology involves creating a logical enterprise model (taxonomical representation) of the entities ? business goals, processes, services, and infrastructure components ? within the enterprise and the associations between them.  In addition, there are intrinsic and extrinsic non-functional attributes associated with the entities, describing their service and operating levels.

Using this representation, we can analyze the impact along associations and derive specific values for decision making.  The impact is in terms of changed request throughput and availability.

1.2 Business Scenarios   By examining Architecture Lifecycle Management practices within industry we have identified important use cases that pose a challenge.  Typically they were related to shared services and thus the ones selected for discussion here include: Scenario 1: Retirement of a software service and determining the increased availability of shared infrastructure capacity.

Scenario 2: Consolidation of a service and the decreased availability of shared infrastructure capacity.

Scenario 3: A surge in requests and consequent increase in demand for services due to an unforeseen event (like Hurricane Katrina).

Scenario 4: Support of new business goals through a new process transaction and associations to existing shared resources within the existing enterprise taxonomy.

We found that while many questions are asked during the architecture review process, the macro-level cases of the type identified above proved to the most challenging because they required insights not only of the installed architecture, but also collaboration across the IT organizations.  Further, due to space limitations, we are not selecting the micro-level use cases, such as response time, as a performance measure here since typically they can be addressed by increasing capacity or by using the re-architecting methods at the macro-level.

2008 IEEE Asia-Pacific Services Computing Conference  DOI 10.1109/APSCC.2008.200   2008 IEEE Asia-Pacific Services Computing Conference  DOI 10.1109/APSCC.2008.200     2.  Background in Existing Research and Best Practices   The enterprise ontology is the basis of the enterprise  taxonomy or model that represents select interaction relationships between entities such as business goals, processes, software component services, and infrastructure components (such as hardware and networks); thus providing a logical view of the architecture.  This is envisioned as a layer on the enterprise?s configuration management data base of items (Figure 1).  Our approach demonstrates that non-functional attributes like space, processing speed, and availability can be propagated and calculated for component infrastructures and attributes such as throughput can be calculated for functional services based on the interactions.  Propagation rules for reasoning about capacity and availability of infrastructures and services in terms of these functional and non functional attributes facilitates intelligent decision-making during the Architecture Life-Cycle Management process.

Before proceeding, we briefly review existing research and best practice literature.

Figure 1:  Architecture Life Cycle Management  using a Logical Enterprise Taxonomy.

2.1 ITIL version 3   ITIL?s [1] Configuration Management Data Base (CMDB) focuses on the configuration items (CIs) in the installed IT architecture and associations between them.

In addition to this, most practitioners agree that a CMDB should have four key capabilities ? visualization, federation, reconciliation and active monitoring.  First, you need to be able to visualize individual infrastructure components such as an application running on a server, networking or storage devices.  A second capability is federation, which is the ability to integrate data from tools outside of a single vendor's software suite.  Most IT  managers are leaning toward suite-based approaches, where they might buy their problem incident, application management and CMDB from the same vendor.  But the suite must be able to accept data from other tools.  A third CMDB feature is the ability to reconcile data.  Different applications might monitor, store and report assets in different ways.  We need to consolidate this information from different application data sources and correlate it with existing knowledge present in the CMDB.  Next, it needs to provide active monitoring capabilities.  As the state of CIs or assets change in our infrastructure, CMDB should be able to reflect that state instantaneously.  Also the relationships between the affected CI/assets with other items in the infrastructure should be revalidated and updated. This is critical as an outdated representation of IT infrastructure is no better than an incorrect representation.

Our focus here is to build upon the CMDB and support decision-making at a macro level.  In general the data managed in the CMDB is at a very detailed level [3, 4].

We introduce a way to extend the capabilities of the CMDB effectively using an enterprise-specific taxonomy.

An underlying ontology represents complex logical relationships are not maintained in the traditional CMDB.

This allows the application of rules that determine the impact of change between CIs/assets, services, business processes and business goals.

2.2 Goal-to-Architecture Modeling   Several goal modeling and specification techniques such as KAOS [9], Goal-Based Requirements Analysis Method [10], i* [11], and the NFR Framework [12], have been proposed in support of requirements engineering and related activities such as elaboration, consistency and completeness checking, evaluation of alternatives, and evolution.  The NFR Framework initially focused on system requirements, but has been extended [13] to connect enterprise architecture goals to system architecture goals, and can potentially be extended to connect enterprise strategy goals.  The ATAM method [2] is an accepted best-practice for analyzing architectures to validate how specific quality goals are met by the architectural elements of the system.

Of special relevance are [15] which proposes an integrated top-down and bottom-up approach to identifying misaligned goals and planning organizational change, [14] which describes a method for associating goals with justifications, and [16] which uses goal-models to guide the adaptation of pervasive systems to changes in the environment.

This considerable body of work, however, needs to be extended for use in the dynamic, sense-and-respond environment in which service-oriented organizations exist.

This implies the linking of goals to and from the dynamic behavior of the organization, including the linking of on- going business processes, their execution by resources, and the performance of the business transactions.  This is the gap that we address here.

2.3 Architecture Change Management   There also has been previous work in the area of  architecture change impact analysis. Feng and Maletic [5]     propose a component interaction trace-based approach to support dynamic change impact analysis at software architecture level.  Given an architectural change, their approach determines the architecture elements causing the change and impacted by the change.  But, they do not look at the impact on services, business processes and business goals; neither do they analyze the impact of a change introduced at these levels.  Also, [8] addresses change impact analysis of enterprise architectures from a semantic perspective by using semantic classification of relationships present in the modeling language ArchiMate, and applying different kinds of atomic changes that could affect concepts in an enterprise.  They also look into the     Figure 2:  Enterprise interaction ontology identifying relationships between entities.

Problem of change impact analysis in order to identify  potential impacts of a change before it actually takes place by defining certain impact rules for analysis on the level of the conceptual structure of an enterprise.

Our approach to change impact analysis spans across multiple levels, from business goals and services to software services and infrastructure components.

Moreover, our methodology defines propagation rules using certain attributes at a fine-grained level.

2.4 Contributions towards an Interaction-based Enterprise Modeling Environment   In this paper we propose a logical, active monitoring  layer to manage the changes to the enterprise architecture and better align Business and IT (Figure 1).  IT operations management practitioners have been proponents of  relating business predictions of needed business capacity to underlying service and infrastructure capacity.

However, implementation techniques to achieve this are not developed [3, 4].  We address the issues by introducing a logical layer on the CMDB to reason about dynamically changing relationships between business goals and demands, services demand and infrastructure use.  We uniquely propose a modeling environment that allows us to reason about each entity in the enterprise throughout its life-cycle from inception-to-change-to- retirement.

The solution proposed has the following components - 1) A logical taxonomy layer on a CMDB, 2) An Enterprise Interaction Ontology with propagation rules and analysis methods, and 3) Integration of monitored performance for impact analysis and continuous improvement of overall performance of the complex system by considering the impact of the individual entities and their life cycles.

3.  Enterprise Modeling   Figure 2 illustrates the four types of entities that we  assume in any enterprise system ? business goals, process transactions, service components, and infrastructure components.  Progressing from the bottom up, their roles in the enterprise are as follows:  1. Infrastructure components are primarily the physical machines, routers, etc. These components also include essential operating software that ?runs on? the hardware.

2. Service components ?run on? the infrastructure.

Their space and processing speed needs are thus provisioned by the infrastructure. Service components also ?provide? services to other service components.

3. Process transactions are abstractions that represent the end-to-end business processes and sub- processes ?executed? by service components or sub-transactions to fulfill business-requests.  The process transactions and sub-transactions reflect the external request-driven use of the service components.

4. Business goals reflect the interests of stakeholders.

There can be many goals and stakeholders.

Process transactions execute and in turn ?deliver? on business goals.

3.1 Entities, Attributes and Service Levels   Each entity identified above also has specific attributes as discussed next.

1. Infrastructure component (or just infrastructure)  attributes include: a. Let S-S be defined as the collection of space and  processing speed attributes.  This collection includes derived attributes such as current available capacity, availability, cost, monitored actual, projected future etc.  We shall often refer to these as the S-S non-functional attributes.  An infrastructure component?s processing speed     determines the request throughput of service components that run on it.

2. Service component (or just service) attributes include: a. For a service component, these S-S attributes  are also of two types - intrinsic and extrinsic S-S attributes.  The intrinsic S-S attributes are determined by the characteristics of the software component.  For example, like those determined by running a database service component in a test infrastructure machine environment, on benchmarks and in isolation.

Extrinsic attributes are those S-S attributes that are affected by business requests from other entities along associations that we will explore later.  We will henceforth use the notation  S-Sx, to reflect the intrinsic and extrinsic S-S values of a component -X.

b. RR or Input Request Rate:  Number of input requests queued per time period.

c. SR or  Serviced Request Rate:  Number of requests serviced per time period.

What do S-S attributes convey differently for infrastructure components and service components?

To answer this let us first think of service component X that runs on an infrastructure component or machine.  In its essence the hardware has a certain available space and is able to process at a certain speed.  However, the machine can accommodate a component such as a database only if the machine?s available S-S is greater than the database?s own needs or (S-S) database.  The needed database S-S also increases with the number of requests serviced from different process transactions.  To accommodate this increase the hardware must in turn have the extra needed S-S available.  That is, more generally the software has a certain fluctuating (S-S) footprint due to extrinsic circumstances that it needs from the hardware.    The process transaction entity and its attributes introduced next allow us to compute the needed extrinsic S-S values due to external requests.

3. Process transaction attributes include:  a. The number of users (#Users).

b. RR and SR.  Here RRs are business requests  distinguished from the request throughput SR by the fact that the former is initiated and queued by the customer while the latter is the actual number processed (and could include many internally generated requests serviced by the lower level entities).

4. Business goal attributes are RR and SR costs.

Note:  In addition to the essential attributes identified above there are additional attributes that reflect target as well as actual values for costs, resource costs of S-S for processing a request, and so on.

We can now also introduce specific Service Levels (SL) and Operating Levels (OL).  The SL of a process transaction is reflected by its request throughput - SR.  As we shall see, this is provisioned by the service components and their S-S attributes at certain Operating Levels (OLs) to achieve process transaction and business SR targets.

3.2 Associations and Types of Rules   Next we elaborate on the general types of rules related to the associations of the ontology in Figure 2.  These allow us to propagate information along the enterprise model and relate business, functional and non-functional attributes of entities.  Thus these help answer questions and address scenarios that arise during architecture life cycle management.  Each of these types of rules is introduced next (more specific rules with the business scenarios are presented later):  Rules for the ?runs on? association:  Each service component X reduces the available S-S of the infrastructure component that it runs on.

Rules for ?provides? association:  These adjust the S-S footprint of a service component due to provisioning other service components and handling requests for execution from process transactions.  The S-S values of each service component X are determined by F ((S-S) x, RRs from all other Y components provisioned by X), where F is a function that adjusts the intrinsic values based on the extrinsic values to get the total footprint.  In our illustrative examples we will assume F to be a function simply dependent on the incoming requests.

Rules for ?executing? process transactions with component services:  Usually many service requests are executed by each process transaction upon the arrival of a customer request.  The process transaction (which in most cases may itself be implemented as business processes within component services) is an abstraction that keeps track of customer-generated RRs separate from the responding internally-generated service RRs and SRs.

The services are provided by the services components that run on infrastructures and their S-S attributes are adjusted as in the above rule type.

Rules for synthesizing process transaction?s ?execution' costs:  Each process transaction has an associated number of users and RRs that use the services and infrastructures of the underlying components.  The costs of these components are synthesized for each process transaction instance.

Rules for process transactions and delivery of business goals:  The ?delivers? association between the process transaction and the business goal reflects the requests executed.  The synthesized cost of the services for each process transaction can be distributed over the number of business requests allowing us to compute the cost for servicing a request.  This cost can be compared to the value delivered towards meeting the business goal.

3.3 Enterprise Taxonomy and Propagation   The ontology introduced in Figure 2 is used to represent  an enterprise-specific taxonomy based on the shared Proteomics facility for cancer research.  The facility provides various ways to analyze actual experimental patient data.  As illustrated, the business goal of establishing patient benefits through experimentation is addressed by layers of process transactions, service components, and infrastructure components respectively.

We next identify the how ontology guides the enterprise specific representation.

First, identify business goals and stakeholders and the process transactions that meet the goals.  Next for the process transactions (data analysis 2) reflect any sub- transactions (e.g. validation).  Define the attributes such as numbers of users and RR.  And next represent service (e.g. Protein Analysis Tool 1.2) and infrastructure (e.g.

File system) components with their attributes, such as S-S.

A given service might in turn provide services to multiple other services, identify these.  For example, note that the File system is shared in the implementation of Oracle and this is captured by the ?provides? association.  Only shared infrastructure components are represented in order to keep the models from getting complex with details that are not relevant.  Thus all the associations between entities are identified based on the ontology introduced above.

Finally, note that if we model our relationships carefully - we shift from a functional to non-functional realm as we move from the top layers to the lower ones.  That is, the RRs for a process transaction are related to the provisioning components? non-functional attributes.

For each entity in the resulting enterprise model we can now make the following observations: 1. The propagation rules introduced previously  determine each entity?s inherited and synthesized values from the associated entities and their attributes.

(The algorithms for propagation are available in literature [17].)  2. Attributes are recomputed based on instrumentation and monitoring of actual performance of the underlying components, as captured in the CMDB.

From a continuous improvement perspective, it is expected the S-S attributes are computed and updated frequently.  This can be done with a variety of monitoring software typical in any enterprise.  This monitoring is particularly important as execution-time information allows us to better identify the extrinsic S-S values and interference between components.

We next illustrate the result of applying propagation rules to specific scenarios and related decision-making.

4.  Enterprise Modeling for Decision Making   4.1 Scenario 1 - Removing of a service  component   Removal of a component from the architecture changes the S-S availability attribute values of all services and infrastructures that are associated by ?provides? and ?runs on?.   Consider the case where ?Protein Analysis Tool? is  removed from the infrastructure.

1. A decreased RR from the Data Analysis process  transaction to the Protein Analysis, and consequently a decreased RR passed through to underlying infrastructure (machine 6 and router).

2. Increased availability of infrastructure - machine 6.

This is determined by (S-S)machine 6 = (S-S)machine 6 - F((S-S)mxml + (S-S)oracle, SRs) due to data analysis 1 and storage).

3. The increased S-S availability attribute values are synthesized and propagated to the process transactions and the business goals where it is possible to reason about these attributes in terms of ?number of users? and the number of ?incoming requests over a period of time?.  This in turn enables us to determine the accurate cost of removing a component from the architecture and verify if it meets the desired business goal.

4.2  Scenario 2 - Consolidation of services   Change in process transactions may require service consolidation that involves combining multiple services into a consolidated operational capability.

Consider the case when we want to delegate the functionalities provided by LDAP to Oracle 12g. This causes the RR of Oracle 12g to increase that would in turn increase the RR of Machine 6. Thus, the new value of required capacity S-S could exceed the total capacity. This estimation would enable us to take an informed decision about whether to merge software services.  To calculate the target availability of the infrastructure component ?Machine 6?, taking into consideration the increase in the number of requests we use the formula: (S-S)machine 6 = F((S-S)mxml + (S-S)mxml+ (S-S)Oracle12g + SRs)  During this analysis, we may discover that the desired target availability exceeds the current availability in terms of S-S attributes of Machine 6 thus making it difficult to maintain the desired SL of the new Data Analysis process transaction and OL levels of Machine 6.  This scenario also illustrates another potential benefit of visualizing a- priori, the points of failure as a result of the consolidation.

For example, a failure in certain critical components (Machine 6 in this case) will now have wider impact on process transaction service levels.

4.3  Scenario 3 - A surge of requests    In this scenario, we consider the case when there is an unexpected surge in the number of RRs and we want to see what potential target SR values can be achieved.

Specifically, consider when the Medical Service starts getting very high number of input requests due to a new regulation or lawsuit which requires certain data to be processed in a limited amount of time.  So based on its new RR we can calculate RR values for Data Analysis 1, Data Analysis 2, Storage and then for Mxml Analysis Tool, Protein Analysis Tool and Oracle.  This can be done in many dynamic ways ? for example by relating the RR at the parent with RR traffic generated at the child applications.

For, the infrastructure components e.g. Machine 6, we can also calculate available S-S by using the needed footprint - F(S-S) value - of its parent components (Oracle and Protein Analysis Tool).  The new target SR value for Oracle can be easily calculated based on 1) its own pristine|intrinsic S-S value, 2) the new target values calculated for its child entities, and 3) the increment of S- S needed due to the extrinsic effect of SRs.  Now, target  SR values can be propagated up, to calculate the new estimated SR targets for the Medical Service.

D. Scenario 4:  Adding a new process transaction and its sub network:  The final scenario is how an enterprise model changes with the addition of new process transactions.  Referring to the figure 3, before adding new ?Automated Medical Service?, that provides workflow support for more effective data management and pipelining, we can calculate its effect on the overall capacity of the existing infrastructure by using the previously mentioned attributes and propagation rules.  As we would typically migrate some of the users from old medical service to the new automated service would have new decreased SR for old service and a newly estimated SR for new service.  Based on these values and the new associations (dashed lines) as shown in Figure 3, we can recalculate the SR values of the services and infrastructure components being used by these two impacted services.

As described in Scenario 1, these values can now be calculated till the lowest level entity and the propagated up back to calculate the new throughput SR.  We can thus reason about whether the new automated services would improve the overall throughput of the system and more importantly if the existing infrastructure can support the new system components.  Also, we can put in new increased/decreased S-S attribute values for components to judge its effect on the overall performance and can, in this way find and eliminate bottlenecks.

Before adding new Automated Medical Service, that provided more effective data management and pipelining support, we can calculate its effect on the overall capacity of the existing infrastructure by using the above mentioned attributes and propagation rules.  As we might choose to migrate some users from the old medical service to the new automated service, we would obtain decreased RR value for old service and a newly estimated RR for new service. Based on these values and the new associations as shown in Figure 3, we can recalculate the RR values of the services and components being used by these two impacted services.  As described in Scenario 1, these values can now be calculated till the lowest level entity and propagated up to calculate the new throughput (RT) for the services.  We can thus reason if the new automated services would improve the overall throughput of the system and more importantly if the existing infrastructure can support the new system components.

Also, we can put in new increased/decreased (S-S) attribute values for components to estimate its effect on the overall performance and can in this way find and eliminate bottlenecks.

5. Conclusions   We have shown how a logical view of the enterprise  entities and associations provides a basis for propagation rules that allow us to determine and more precisely quantify the impact of a change.  In particular, because the impact is across entities, the typical organization silos make this difficult to determine.  The enterprise interaction ontology and methodology provides a precise communication scheme for more effective collaboration during architecture evolution.  The propagation rules were applied to four scenarios typical during the     architecture life-cycle management process.  The precise enterprise interaction ontology and methodology presented in this paper allows us to: a. Establish a precise vocabulary that associates the  business, functional and non-functional entities and attributes of an enterprise with rules of propagation and communications.

b. Facilitates a precise framework for implementation of a logical architecture management layer on a CMDB to manage the life-cycle of individual components by more precisely determining the impact of change.

c. Leverages monitoring of individual components and propagation rules to support more proactive strategies at the macro-level.

The S-S attributes of this framework also have other wide-ranging applications like determining the chargeback for services and even the use of power.  The important element addressed here is to ensure that the cost of resources delivering on a customer initiated request is evaluated accurately.  Our ongoing next steps in the project are to define and implement the feedback policies for better visualization and decision making.

6.  Acknowledgements   This research has been conducted within the National Science Foundation funded Center for Experimental Research in Computer Science at Georgia Tech and The Ohio State University.  We would like to thank industry sponsors and affiliates especially those at Nationwide and The OSU Medical Center.  Some of the early work was funded by IBM Faculty Grant.

7. References   [1] ITIL version 3, http://www.itil- officialsite.com/home/home.asp  [2] Rick Kazman, Mark Klein, Paul Clements, ATAM:SM Method for Architecture Evaluation, www.sei.cmu.edu/pub/documents/00.reports/pdf/00tr004.p df  [3] Microsoft Operations Framework: Capacity Management Service Management Function, Microsoft Corp, January 2005.

[4] Ron J. Colville, Gartner RAS Core Research Note G00137125, Gartner on CMDB, March 13, 2006.

[5] Tie Feng, Jonathan I. Maletic.,  ?Applying Dynamic Change Impact Analysis in Component-based Architecture Design?, Proceedings of the Seventh ACIS International Conference on Software Engineering, Artificial Intelligence, Networking, and Parallel/Distributed Computing (SNPD?06), 2006  [6] Shy Cohen, ?Ontology and Taxonomy of Services in a Service Oriented Architecture.?, Microsoft Architect Journal.

[7] BCS, British Computer Society Configuration Management Specialist Group ,  www.bcs-cmsg.org.uk.

[8] de Boer, F.S.   Bonsangue, M.M.   Groenewegen, L.P.J.

Stam, A.W.   Stevens, S.   van der Torre, L. , ?Change impact analysis of enterprise architectures? ,  CWI, Information Reuse and Integration, IEEE International Conference, Amsterdam, Netherlands, Conf, 2005.

[9] Dardenne, A., van Lamsweerde, A., Fickas, S., "Goal- directed requirements acquisition,", Science of Computer Programming, 1993.

[10] Anton, A.I., "Goal-based requirements analysis, Requirements Engineering (ICRE ?96), 1996.

[11] Yu, E.S.K, Mylopoulos, J. ?An actor dependency model of organizational work: with application to business process reengineering?, Proceedings of the Conference on Organizational Computing systems, December 1993.

[12] Chung, L., Nixon, B. A., Yu, E. and Mylopoulos, J. ?Non- Functional Requirements in Software Engineering,? Kluwer Academic Publishers, Boston, 2000.

