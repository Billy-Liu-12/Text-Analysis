MPIS: Maximal-Profit Item Selection with Cross-Selling Considerations

Abstract In the literature of data mining, many different algorithms  for association rule mining have been proposed. However, there is relatively little study on how association rules can aid in more specific targets. In this paper, one of the applications for association rules - maximal-profit item selection with cross -selling effect (MPIS) problem - is investigated. The problem is about selecting a subset of items which can give the max- imal profit with the consideration of cross-selling. We prove that a simple version of this problem is NP-hard. We propose a new approach to the problem with the consideration of the loss rule - a kind of association rule to model the cross-selling effect. We show that the problem can be transformed to a quadratic programming problem. In case quadratic program- ming is not applicable, we also propose a heuristic approach.

Experiments are conducted to show that both of the proposed methods are highly effective and efficient.

1 Introduction Recent studies in the retailing market have shown a win-  ning edge for customer-oriented business, which is based on decision making from better knowledge about the customer behaviour. Furthermore, the behaviour in terms of sales trans- actions is considered significant [6]. This is also called market basket analysis. We consider the scenario of a supermarket or a large store, typically there are a lot of different items offered, and the amount of transactions can be very large. For exam- ple [11] quoted the example of American supermarket chain Wal-Mart, which keeps about 20 million sales transactions per day. This growth of data requires sophisticated method in the analysis.

At about the same time, association rule mining [3] has been proposed by computer scientists, which aims at understanding the relationships among items in transactions or market bas- kets. However, it is generally true that the association rules in themselves do not serve the end purpose of the business peo- ple. We believe that association rules can aid in more specific targets. Here we investigate the application of association rule mining on the problem of market basket analysis. As pointed out in [6], a major task of talented merchants is to pick the profit generating items and discard the losing items. It may be simple enough to sort items by their profit and do the se- lection. However, by doing that we would have ignored a very important aspect in market analysis, and that is the cross- selling effect. The cross-selling effect arises because there can  be items that do not generate much profit by themselves but they are the catalysts for the sales of other profitable items.

Recently, some researchers [17] suggest that association rules can be used in the item selection problem with the consider- ation of relationships among items. Here we follow this line of work in what we consider as investigations of the appli- cation of data mining in the decision-making process of an enterprise.

In this paper, the problem of Maximal-Profit Item Selection with Cross-Selling Considerations (MPIS) is studied. With the consideration of the cross-selling effect, MPIS is the prob- lem of finding a set of ? items such that the total profit from the item selection is maximized, where ? is an input parame- ter. This problem arises naturally since a store or a company typically changes the products they carry once in a while. The products that can generate the best profits should be retained and poor-profit items can be removed, then new items can be introduced into the stock. In this way the business can fol- low the market needs and generate the best possible results for both the business and the customers. In order to determine the profit value of an item, one can rely on expert knowledge.

However, since this can be a highly complex issue especially for a large store with thousands of products for sale, we can try to apply data mining techniques, based on a history of cus- tomer purchase records.

Hence the problem is how to determine a subset of a given set of items based on a history of transaction records, so that the subset should give the best profits, with considerations of the cross-selling effects. We show that a simple version of this problem is NP-hard. We model the cross-selling factor with a special kind of association rule called loss rule. The rule is of the form ?? ? ??, where ?? is an item and ? is a set of items, and ?? means any items in ?. This loss rule helps to estimates the loss in profit for item ?? if the items in ? are missing after the selection. The rule corresponds to the cross-selling effect between ?? and ?.

To handle this problem, we propose a quadratic program- ming method (QP) and a heuristics method called MPIS Alg.

In QP, we express the total profit of the item selection in quadratic form and solve a quadratic optimization problem.

Algorithm MPIS Alg is a greedy approach which uses an es- timate of the benefits of the items to prune items iteratively for maximal-profit. From our experiment, the profitabilities of our two proposed algorithms are greater than that of naive approach for all data sets. On average, the profitability of     both QP and MPIS Alg is 1.33 times higher than the naive ap- proach for the synthetic data set. In a real drugstore data set, the best previous method HAP [26] gives a profitability that is about 2.9 times smaller than MPIS Alg. When the number of items is large (as in the drugstore data set), the execution time of HAP is 6.5 times slower than MPIS Alg. These shows that the MPIS Alg is highly effective and efficient.

2 Problem Definition Maximal-profit item selection (MPIS) is a problem of se-  lecting a subset from a given set of items so that the estimated profit of the resulting selection is maximal among all choices.

Our definition of the problem is close to [26]. Given a data set with ? transactions, ??? ??? ???? ??, and ? items, ??? ??? ???? ??.

Let ? ? ???? ??? ???? ???. The profit of item ?? in transaction ?? is given by ???	???? ???. 1 Let ? ? be a set of ? selected items. In each transaction ??, we define two symbols, ??? and ??, for the calculation of the total profit.

??? ? ?? ? ?? ?? ? ?? ? ? ?  ?  ??? set of items selected in ? in transaction ?? ?? set of items not selected in ? in transaction ?? Suppose we select a subset of items, it means that  some items in ??? ???? ?? will be eliminated. The transactions ??? ???? ?? might not occur in exactly the same way if some items have been removed beforehand, since customers may not make some purchase if they know they cannot get some of the items. Therefore, the profit ???	???? ??? can be af- fected if some items are removed from the stock. This is caused by the cross-selling factor. The cross-selling factor is modeled by ?	??????? ???, where ? is a set of items, and ? ? ?	??????? ??? ? ?. ?	??????? ???, is the fraction of the profit of ?? that will be lost in a transaction if the items in ? are not available. Note that the cross-selling factor can be determined in different ways. One way is by the domain experts. We may also have a way to derive this factor from the given history of transactions.

Definition 1 Total Profit of Item Selection: The total profit of an item selection is given by ? ? ?  ?  ???  ? ????  ?  ?  ?????	?? ?????? ??? ??????? 	???  We are interested in selecting a set of ? items so that the total profit is the maximal among all such sets.

MPIS: Given a set of transactions with profits assigned to each item in each transaction, and the cross-selling factors, ?	??????, pick a set of ? items from all given items which gives a maximum profit.

This problem is at least as difficult as the following decision problem, which we call the decision problem for MPIS:  MPIS Decision Problem: Given a set of items and a set of transactions with profits assigned to each item in each transaction, a minimum benefit ?, and cross-selling factors,  1This definition generalizes the case where profit of an item is fixed for all transactions. We note that the same item in different transactions can differ because the amount of the item purchased are different, or the item can be on discount for some transactions and the profit will be reduced. If the profit of an item is uniform over all transactions, we can set ???????? ??? to be a constant over all ?.

?	??????, can we pick a set of ? items such that ? ? ??

In our proof in the following, we consider the very simple  version where ?	???????? ??? ? ? for any non-empty set of ??. That is, any missing item in the transaction will eliminate the profit of the other items. This may be a much simplified version of the problem, but it is still very difficult.

2.1 NP-hardness Theorem 1 The maximal-profit item selection (MPIS) deci- sion problem where ?	???????? ??? ? ? for ?? ?? ? and ?	???????? ??? ? ? for ?? ? ? is NP-hard.

Proof sketch: We shall transform the problem of CLIQUE to the MPIS problem. CLIQUE [9] is an NP-complete problem defined as followd:  CLIQUE: Given a graph ? ? ????? and a positive integer ? ? ?? ?, is there a subset ? ? ? ? such that ?? ?? ? ? and every two vertices in ? ? are joined by an edge in E ?

The transformation from CLIQUE to MPIS problem is de- scribed as follows: Set ? ? ?, ? ? ??? ? ??. For each vertex ? 	 ? , construct an item. For each edge ? 	 ?, where ? ? ???? ???, create a transaction with 2 items ???? ???.

Set ???	??? ? ??? ? ?, where ?? is a transaction created in the above, ? ? ?? ?? ???? ???, and ?? is an item in ??.

It is easy to see that this transformation can be constructed in polynomial time. It is also easy to verify that when the problem is solved in the transformed MPIS, the original clique problem is also solved. Since CLIQUE is an NP-complete problem, the MPIS problem is NP-hard.

3 Related Work In recent years the problem of association rule mining has  received much attention. We are given a set ? of items, and a set of transactions. Each transaction is a subset of ? . An association rule has the form? ?? , where? ? ? and ?? ? ; the ??????? of such a rule is the fraction of transactions containing all items in ? and item ?? ; the confidence for the rule is the fraction of the transactions containing all items in set ? that also contain item ?? . The problem is to find all rules with sufficient support and confidence. Some of the earlier work include [22, 4, 21].

3.1 Item Selection Related Work  There are some recent works on the maximal-profit item se- lection problem. PROFSET [8, 7] models the cross-selling effects by frequent itemsets, which are sets of items co- occurring frequently. A maximal frequent itemset is a frequent itemset which does not have a frequent item superset. The profit margins of maximal itemsets are counted in the total profit. The problem is formulated as 0-1 linear programming that aims to maximize the total profit.

However, PROFSET has several drawbacks as pointed out in [26]. More details can be found in [26].

HAP [26] is a solution of a similar problem. It applies the ?hub-authority? profit ranking approach [23] to solve the max- imal profit item-selection problem. Items are considered as vertices in a graph. A link from ?? to ?? represents the cross- selling effect from ?? to ?? . A node ?? is a good authority if there are many links of the form ?? ?? with a strong     strength of the link. The HITS algorithm [18] is applied and the items with the highest resulting authorities will be the cho- sen items. It is shown that the result converges to the principal eigenvectors of a matrix defined in terms of the links, confi- dence values, and profit values.

However, HAP also has some weaknesses. (1) Problems of dead ends or spider traps as illustrated in [25] can arise. For example, if there is an isolated subgraph with a cycle while other items are not connected, then the authority weight and hub weight of all items in the cycle are accumulated and is in- creased to an extremely high value, giving an over-estimating ranking for these items. (2) In HAP, the authority weight of an item ?? depends on the profit of any other item ?? with the association rule ?? ? ?? . It is possible that some items with low/zero profit gain very high authority weights, and are se- lected by HAP. In fact the real data set we shall use in the experiments exhibits this phenomenon, and HAP cannot give a competitive solution.

4 Cross selling effect by Association Rules In Section 2, we did not specify how to determine the cross-  selling effect ???????? of some items for other items. In pre- vious work [26], the concept of association rules is applied to this task. Here we also apply the ideas of association rules for the determination of ????????.

Let us estimate the possible profit from a given set of trans- action. If all items are selected, the profit is the same as the given profit. Suppose we have made a selection ? of 	 items from the set of items. Now some transactions may lose profits if some items are missing. Consider a transaction ?? in our transaction history, suppose some items, says ??, are selected in ? but some items are not selected (i.e.

?). Then if we have a rule that purchasing ?? always ?implies? at least one element in ? then it would be impossible for transaction ?? to exist after the selection of ?, since ?? contains ?? and no ele- ment in ? after the selection. The profit generated by ?? from ?? should be removed from our estimated profit.

We can model the above rule by an association rule. In fact, we can model the cross-selling factor in the total profit of item selection ????????? ?? ??? by ??????? ? ? ??, where ? ? is given by the following:  Definition 2 Let ? ? ??? ?? ?? ???? ?? where ? refers to a single item for ? ? ?? ?? ??? ?, then ? ? ? ?????? ????? ? .

The rule ?? ? ? ? is called a loss rule. The rule ?? ? ? ? in- dicates that a customer who buys the item ?? must also buy at least one of the items in ?. If none of the items in ? are avail- able then the customer also will not purchase ??. Therefore, the higher the confidence of ??? ? ? ??, the more likely the profit of ?? in ?? should not be counted. This is the reasoning behind the above definition.

The total profit is to estimate the amount of profit we would get from the set of transaction ??? ?????, if the set of items is reduced to the selected set ?. From Definition 1, we have  Definition 3 Total Profit of Item Selection (association  rule based): The association rule based total profit of item selection ? is given by ? ? ?  ?  ???  ? ????  ?  ?  ???????? ?????? ??	???? ? ? ???  For the special cases, if all items in transaction ?? are selected in the set ?, then ? is empty, ?? will not be affected and so the profit of transaction ?? would remain unchanged. If no item in transaction ?? is selected, then the customer could not have executed the transaction ??, then ??? is an empty set, and the profit of transaction ?? becomes zero after we have made the selection.

The loss rule ?? ? ? ? is treated as an association rule. The confidence of this rule is defined in a similar manner as for the association rule:  Definition 4 ??????? ? ? ?? is computed as no. of transactions containing ?? and any element in ?  no. of transactions containing ??  5 Quadratic Programming Linear programming or non-linear programming has been  applied for optimization problems in many companies or busi- nesses and has saved millions of dollars in their running [12].

The problem involves a number of decision variables, an ob- jective function in terms of these variables to be maximized or minimized, and a set of constraints stated as inequalities in terms of the variables. In linear programming, the objec- tive function is a linear function of the variables. In quadratic programming, the objective function must be quadratic. That means the terms in the objective function involve the square of a variable or the product of two variables. If ? is the vector of all variables, a general form of such a function is ? ? ?? ? ? ?  ? ???? where ? is a vector and ? is a symmet-  ric matrix. If the variables take binary values of 0 and 1, the problem is called zero-one quadratic programming.

In this section, we propose to tackle the problem of MPIS by means of zero-one quadratic programming. We shall show that the problem can be approximated by a quadratic program- ming problem. Let ? ? ???????????? be a binary vector repre- senting which items are selected in the set ?. ?? ? ? if item ?? is selected in the output. Otherwise, ?? ? ?. The total profit of item selection ? can be approximated by the quadratic form ?? ?? ?  ? ???? where ? is a vector of length ? and ? is an ? by  ? matrix in which the entries are derived from the given trans- actions. The objective is to maximize ?? ?? ?  ? ????, subject  to ??  ??? ?? ? 	 . The term ??  ??? ?? ? 	 means that there are items to be selected.

With a little overloading of the term ??, we say that ?? ? ??????????????  ? is a binary vector representing which items are in the transaction ??. ??? ? ? if item ?? is in the transaction ??.

Otherwise, ??? ? ?. Similarly, ??? is a binary vector represent- ing which items are selected in S in the transaction ??.

? is a binary vector representing which items are not selected in S in the transaction ??.

Then, we have the following. For ? ? ?? ?? ????? and ? ? ?? ?? ???? ?, ???? ? ??? ? ?? and ?? ? ??? ? ?  ?  ?? ?     ?? number of transactions containing item ?? ??? number of transactions containing ?? and ??  ????? ?????? ? number of transactions containing ????? ???? ????  Observation 1 The confidence ??????? ? ???? can be ap- proximated by ?  ??  ?? ??? ?????? .

The above observation is based on the principle of inclusion- exclusion in set theory. To see this, let us consider the numer- ator in Definition 4 and let it equal to ????? ???.

Definition 5 Let ? ? ? , ? ? ?	?? 	??   ? 	?? and ?? ?? ?, where 	? refers to a single item for ? ? ?? ??  ? ?.

????? ?? ? ?  ????? ?????? ?  ? ???????  ??????? ?  ? ?  ????????? ?????????? ? ??? ? ????  ??????????????? ?  where ???	?	?   ? is the number of transactions containing the items ??, 	?, 	? , ....

We have ???	??? ? ? ???  ???? ??  no. of transactions containing item ??  ????  ? ? ?????  ????? ?? ??  no. of transactions containing item ?? ? ?  ?  ???? ?  ? ??  ?? ???   ?????? ? ?  The reason why the above approximation is acceptable is that the number of transactions containing a set of items ? is typ- ically smaller than the number of transactions containing a subset of ? . Hence ???????? is typically much smaller than ??????, etc. From this approximation we can deduce the fol- lowing theorem.

Theorem 2 The total profit of item selection can be approxi- mated by the quadratic form  ? ? ? ? ? ?  ? ???? where ? is  a vector of size ? and ? is an ? by ? matrix.

Proof sketch:  ?? ??  ???  ?? ???  ? ? ????	??? ? ???  ? ? ? ?  ??  ?? ???   ?????  ? ? ??  ???  ?? ???  ???????	??? ? ???  ? ??  ? ?  ??? ??????  ?  ?? ????  ??  ? ?	 ?? ?  ? ?  ??  where  ? ?	? ?	? ? ??  ??? ?????	??? ? ??????  ? ??  ?? ???  ???????  for ? ? ?? ?? ???? ??  ?? ???????? ? ???? ??  ?? ???  ?????	??? ? ??????  for ?? ? ? ?? ?? ???? ??  Corollary 1 P can be approximated by  ? ? ?? ?? ? ? ????  where ? is a symmetric ? by ? matrix.

The corollary follows because ? ? 	 ?? ?  ? ??? ? 	 ?? ?  ? ???  where ? ? ????? and ??? ? ?? ???? ? ???? for all ?? ? ? ?? ?? ???? ?  Since the value of ?? is either 0 or 1, from the above corol- lary, we have approximated the problem of MPIS by that of 0-1 quadratic programming with the maximization of  ? and an equality constraint of  ? ? ?? ? ? :  Maximize ? ? ? 	 ?? ? ? ???  such that ??  ??? ?? ? ? , and  ?? ? 	 or ?? ? ? for ? ? ?? ?? ??? ?  Any 0-1 quadratic programming problem is polynomially reducible to an unconstrained binary quadratic programming problem [16]. An unconstrained binary quadratic program- ming problem can be transformed to a binary linear program- ming problem (zero-one linear programming) [5]. More re- lated properties can be found in [20] and [14]. Zero-one lin- ear programming and quadratic programming are known to be NP-complete [24]. However, there exist programming tools which can typically return good results within a reasonable time for moderate problem sizes. We shall apply such a tool in our experiments which will be presented in Section 7.

6 Algorithm MPIS Alg Since quadratic programming is a difficult problem, and ex-  isting algorithms may not scale up to large data sizes, we pro- pose also a heuristical algorithm called Maximal-Profit Item Selection (MPIS Alg). This is an iterative algorithm. In each iteration, we estimate a selected item set with respect to each item based on its ?neighborhood? in terms of cross-selling effects, and hence try to estimate a profit for each item that would include the cross-selling effect. With the estimated profit we can give a ranking for the items so that some prun- ing can be achieved in each iteration. The possible items for selections will become more and more refined with the itera- tions and when the possible set reaches the selection size, we return it as the result.

There are some factors that make this algorithm desirable: (1) We utilize the exact formula of the profitability in the it- erations. This will steer the result better toward the goal of maximal profits compared to other approaches [26] that do not directly use the formula. (2) With the ?neighborhood? consid- eration, the item pruning at each iteration usually affect only a minor portion of the set of items and hence introduce only a small amount of computation for an iteration. Compared to the HAP approach where the entire cross-selling matrix is involved in each iteration, our approach can be much more efficient when the number of items is large.

Before describing the algorithm, we define a few terms that we use. If a transaction contains ?? only, the transaction is an individual transaction for ??. The individual count ??, of an item ?? is the total number of individual transactions for ??. The individual count reflects the frequency of an item appearing without association with other items.

Let?? be the set of transactions that contain ??, the average profit is given by ?? ? ?  ? ?? ?  ??????? ? ?????????.

Definition 6 We define ? ??? to be the estimated profit as- suming that the items in set ? are selected:?? ??? ???  ???  ? ????  ?  ?  ??	???? ?????? ???	??? ? ? ???     The formula ?? ??? is equal to that used in Definition 3. If ? ? ?, where ? is the output selection set, ?? ??? is equal to the final output estimated profit.

?? individual count of item ?? ?? average profits of item ?? ?? Benefit of item ?? ?? estimation set for item ?? ???? Estimated value of item ?? from item ??;  ???? ? ?? ? ?? ? ??? ? ???? ????? ???? ???  6.1 Overall Framework In the algorithm MPIS Alg, there are two phases - (1)  Preparation Phase and (2) Main Phase. In the Preparation Phase, the frequency and the individual count of each item and the size 2 itemsets are returned. In the Main Phase, the ben- efit of each item is evaluated. Initially the result set contains all items, a number of iterative steps of removing items with minimum estimated benefit proceeds until ? items remains.

Preparation Phase 1. count the number of occurrences of each item,  ??? ??? ???? ??.

obtain the individual count for each item, ??? ??? ???? ??  2. generate all size 2 itemsets, with their counts.

Main Phase 1. Estimation Set Creation -  In this step, the estimation sets for all items, ??? ??? ???? ?? are computed.

For each item ??, calculate the estimated value of item ?? from item ??: 	??? ? ? ? ?? ? ? ? ? ?? ? ??  ?????? ???? where ??  ?????? ??? is the support of the itemset ???? ???. Among these ?? items, choose ??? items with the highest estimated values. Put these items into the estimation set ?? for ??.

2. Item Benefit Calculation - determine the estimated benefit ?? of each item ??, ?? ? ?? ??? ? ?????  3. Item Selection and Item Benefit Update  Let ? ? be the set of items that has not been pruned.

(a) prune an item ?? with a smallest benefit ?? value  among the items in ? ?  (b) for each remaining item ?? in ? ?, If ?? is in ??,  i. remove ?? in the set ??. Choose the item ?? which has not been selected yet in ?? with the greatest value of 	???. Insert ?? into the set ??.

ii. Calculate ?? ? ?? ??? ? ?????  4. Iteration - Repeat Step 3 until ? items remain.

6.2 Enhancement Step We can add a pruning step in between Step 1 and Step 2  in the above to enhance the performance. We call this the Item Pruning step and it prunes items with apparently small benefit. The basic idea is to compute both a lowest value and an upper value for the profit of each item. These values are generated by varying the estimated selection set for an item.

1. For each item ??, calculate ?? and ??, where  ? ? ?? ?????? and ?? ? ?? ??? ? ????? ? ?? ????  2. Find the ?-th largest value (?? ) among all ??  3. For each ??, remove item ?? if ?? ? ??  ?? is an estimate of the lowest possible profit contributed by ??; we assume that the selected set contains only ??. In this case, the cross-selling effect may greatly reduce the profit generated from ??. ?? is the opposite of ??; we assume that as many as possible of the items related to ?? are selected in ??. ?? is equal to the profit gain from adding item ?? to set ??. Hence the cross-selling effect will diminish the profit to a much lesser extent.

For ??, the initial profit is zero in ?? ????, since it is not in ??.

After ?? is included in ??, the profit from ?? should be greater than or equal to the profit that ?? generates when it is the only item selected, because of less cross-selling profit loss factors.

Hence ?? and ?? satisfy the following property:  Lemma 1 ?? ? ??.

Item ?? is pruned if ?? is smaller than the values of ?? of the first ? items which have the highest values of ?? . The rationale is that ?? has little chance of contributing more profit than other items.

When this pruning step is inserted, Step 2 in the Main Phase above will not need to compute the estimated benefit for all items, only the items that remain (are not pruned) will be con- sidered when computing the estimated benefits. However, the set ?? would be updated if it initially contains items that are pruned.

Our experiments show that this step is very effective. In the IBM synthetic data set, there are 1000 items. If the number of items to be selected, ? , is 500, there are only 881 remain- ing items after the pruning step. Note that if ? is large, this enhancement step can be skipped.

6.3 Implementation Details  Here we describe how some of the steps are implemented.

Some sophisticated mechanisms such as the FP-tree tech- niques are employed to make the computation efficient even with a vast amount of items and transactions.

6.3.1 Reading transactions from an FP-tree  In a number of cases, the transactions in the database are ex- amined for computation; for example, in the preparation step, when we generate all size 2 itemsets; in the item benefit cal- culation, to determine the profit of a selection. If we actually scan the given database, which typically contains one record for each transaction, the computation will be very costly. Here we make use of the FP-tree structure [10]. We construct an FP-tree ??? once for all transactions, setting the support threshold to zero, and recording the occurrence count of item- sets at each tree node. With the zero threshold, ??? retains all information in the given set of transactions. Then we can traverse ??? instead of scanning the original database. The advantage of ??? is that it forms a single path for transac- tions with repeated patterns. In many applications, there exist many transactions with the same pattern, especially when the     Root  I :5  I :4  I :2  I :1 4 I :15 I :13 I :15  I :1  Item Head  of Node-link  I  I  I  I  I  I  I :1  R u  R s  I-A  A  Figure 1. An example of an FP-MPIS-tree  number of transactions is large. These repeated patterns are processed only once with ??? . From our experiments this mechanism can greatly reduce the overall running time.

6.3.2 Calculating Profit with the FP-MPIS-tree  In the definition of the profit of an item selection ?? ??? (see Definition 6), we need to compute the number of transactions containing some selected items ?? and any item in set ?? (the value of ????? ???), where ?? ? ? and ?? ? ? ? ?. This is computed for many selections for each iteration, hence the efficiency is important. For this task, we use the FP-MPIS- tree data structure.

In the FP-MPIS-tree, we divide the items into two sets, ? ? ? and ?. Set ? corresponds to items selected while ? ? ? contains those not selected. The items in set ??? are inserted into FP-MPIS-tree near to the root. Similar to the FP-tree, the ordering of items in each set in the FP-MPIS-tree is based on the frequencies of items. An example is shown in Figure 1. In the figure, the set of selected items is ? ? ???? ??? ??? and the set of unselected items is ? ?? ? ???? ??? ???.

To compute ????? ??, we first look up the horizontal linked list (dotted links in Figure 1) of item ?? in the FP-MPIS- tree. For each node ? in the linked list, we call the function parseFPTree(?? ?). The function returns a count, we add up all the counts returned from the nodes ? and it is the value of ????? ??.

Function parseFPTree(?? ?) computes the number of trans- actions containing item ?? and at least one item in ? in the path from root of FP-tree to ? . Starting from the node ? , we traverse the tree upwards towards the root of the FP-tree until we find a node ? containing one element in set ? or we hit the root node. If ? exists, the count stored in node ? is returned. The call of function parseFPTree(?? ?) is quite effi- cient as we do not need to traverse downwards from node ? .

This is because all nodes below node? are selected items, no item in ? will be found below ? .

A further refinement for the FP-MPIS-tree is to insert only transactions that contain both selected and non-selected items.

For transactions with only selected items, the profit for each selected item is simply given. For transactions with only non- selected item, the profit contribution will be zero. This refine- ment can greatly reduce the size of the FP-MPIS-tree. Note also that the FP-MPIS-tree is built from the FP-tree??? and not from the original database.

6.3.3 Item Benefit Update In each iteration, after we remove item ??, we need to check  the selection 	? for each item ?? in ? ?. If 	? contains item ??, it should be updated because item ?? has been removed, also a new item ?? will be selected to be included into 	?. As 	? is changed, the benefits ? also have to be updated.

Let 	? ? ???? be the selection before we remove item ??  while 	? ? ???? be the selection after we have removed item ??  and added item ?? in the selection 	?. We can do the item ben- efit update by scanning only those transactions ? containing at least one of item ?? and item ?? . Let ?? ???? ? ? be the profit of the item selection ? generated by transactions in ? . The item benefit is updated: ?  ?? ?? ??	??	????? ? ?? ??  ??	? ?   ????? ? ?. The computation of ?? ???? ? ? can be done in a sim- ilar manner as ?? ??? but ?? ???? ? ? considers only transactions ? , instead of all transactions. As there are fewer transactions in ? compared to the whole database, the update can be done very efficiently.

7 Empirical Study We use the Pentium IV 1.5 GHz PC to conduct our experi-  ment. Frontline System Solver is used to solve the QP prob- lem. All algorithms other than QP are implemented in C/C++.

The profitability is in terms of the percentage of the total profit in the data set. We compare our methods with HAP and the naive approach. The naive approach simply calculates the profits generated by each item for all transactions and select the ? items with the greatest profits. Several synthetic data sets and a real data set are to be tested in our experiments.

We have tried a number of quadratic programming tools, including LINDO, TOMLAB, GAMS, BARON, OPTRIS, WSAT, Frontline System Solver, MOSEK and OPBDP. We choose Frontline System Solver (Premium Solver - Premium Solver Platform) [1] because it performs the best out of these solvers.

7.1 Synthetic Data Set  In our experiment, we use the IBM synthetic data generator in [2] to generate the data set with the following parameters (same as the parameters of [26]): 1,000 items, 10,000 trans- actions, 10 items per transaction on average, and 4 items per frequent itemset on average. The price distribution can be ap- proximated by a lognormal distribution, as pointed out in [15].

We use the same settings as [26]. That is, 10% of items have the low profit range between $0.1 and $1, 80% of items have the medium profit range between $1 and $5, and 10% of items have the high profit range between $5 and $10.

7.2 Real Data Set  The real data set is obtained from a large drug store in Canada over a period of 3 month. In this data set, there are 26,128 items and 193,995 transactions. On average, each transaction contains 2.86 items. About 40% of the transac- tions contain a single item, 22% contain 2 items, 13% con- tain 3 items, the percentages for increasing sizes decrease smoothly, and there are about 3% of the transactions with more than 10 items. The greatest transaction size is 88 items.

In this data set, the profit distribution of items is shown in the     following table.

Profit Range Proportion Profit Range Proportion  $0-$0.1 2.03% $5-$10 10.43% $0.1-$1 25.05% $10-$100 7.75% $1-$5 54.59% $100-$400 0.15%  7.3 Results for Synthetic Data In the first experiment, we have the same setup as in [26]  but the profit follows lognormal distribution. The result is shown in Figure 2. In the figure, it is noted that the profitabil- ity lines for MPIS Alg, QP and HAP are overlapping and the execution-time line for HAP is slightly greater than that for naive.

For profitability, we observe that, for the data set, the naive approach gives the lowest profitability among all algorithms.

This is because the naive approach does not consider any cross-selling effect. Naturally the profitabilities of all algo- rithms increase when the number of items selected increases.

From the graph of the execution time against the selection size, the execution time of MPIS Alg increases from 0% se- lection, reaching a maximum when about half the items are selected, and then decreases afterwards. Here the execution time depends on two factors. The first factor is related to the complexity of each iteration. If there are more items to be selected, the benefit calculation is more complex and updates to the benefit are more likely. The initial increase is related to the first factor. The second factor is related to the number of iterations in the algorithm. When ? , the number of items selected, increases, the number of items to be removed in the iteration step decreases. Thus, the number of iterations de- creases if ? is large compared with ?. The first factor is dom- inant when the selection is below 50% but the second factor becomes dominant when the selection is larger than 50%.

The quadratic programming approach (QP) used in the cho- sen Solver uses a variant of the Simplex method to determine a feasible region and then uses the methods described in [13] to find the solution. As the approach uses an iterative step based on the current state to determine the next step, the exe- cution time is quite fluctuating as the execution time is mainly dependent on the problem (or which state the algorithm is in).

HAP is an iterative approach to find the authority weight of each item. The formula for the update of the authority weight is in the form ? ? ??, where ? is a vector of dimension ? representing the authority weight of ? items and? is an ??? matrix used in HAP to update the authority weight. In our experiment, we observed that the authority weights converge rapidly.

QP takes the longest execution time compared with other al- gorithms. Naive gives the shortest execution time as there are only simple operations. HAP gives the second shortest exe- cution time for this small synthetic data set. We note that the number of iterations involved are quite small. MPIS Alg has the second greatest execution time, but it scales much better with increasing number of items, where it can outform HAP many folds (see the next subsection).

7.4 Results for Real Data Set With the drug store data set, we have conducted similar ex-  periments as with the synthetic data. However, the Quadratic Programming (QP) Solver [1] does not handle more than 2000 variables. In the real data set, there are 26,128 variables (i.e.

items), hence it is not possible to experiment with our QP tool.

The results of the experiments are shown in Figure 3. In the results, HAP gives the lowest profitability. The reason is as follows. In the dataset, there are some items with zero-profit and high authority weight (described in Section 3), yielding a low estimated total profit of the item selection. Suppose item ?? has zero profit, it is likely a good buy and hence can lead to high support. If there are sufficient number of purchases of other item, says item ?? , with item ?? and if item ?? usually occur in the transactions containing item ?? , the confidence of the rule ?? ? ?? is quite high. This creates a high authority weight for item ??. Items like ?? would lead to smaller prof- itability for HAP.

MPIS Alg gives a greater profitability than naive approach in the real data set. For instance, if ? ? ??? ???, the difference in profitabilities between these two approaches is 2%. In the real data set, the total profit is equal to $1,006,970. The dif- ference in 2% profitability corresponds to $20,139.4, which is a significant value. If J=8709, the difference in profitabilities between the two approaches is about 8%, which corresponds to $80,557.6.

On average, the execution time of HAP is 6.5 times slower than MPIS Alg when the problem size is large. HAP requires 6 days to find the item selection while MPIS Alg requires about 1 day to find the solution. Since item selection is typi- cally performed once in a while, only when a store should up- date the types of products it carries, the execution time is ac- ceptable. Though the naive method is much faster, the profit gain consideration from MPIS Alg would make it the better choice for an application.

The execution time of HAP increases significantly when the number of items increases compared with MPIS Alg. In HAP, a cross-selling matrix ? is updated iteratively. The matrix is of the order ? ? ?. For the real data set ? ? ??? ???, and ?? will be very large. Let ? be the ? ? ? vector representing the authority weight of each item. In HAP, there is a process to update ?? iteratively, where ? ? ???. This matrix multiplication of matrix ? with vector ? is highly costly. Let us consider the memory required for matrix? . If double data type (8 bytes) is used for storage of each entry, then the matrix requires a memory size of about 5.08GB. If float data type (4 bytes) is required, then about 2.5GB memory is required. This large matrix cannot fit into the physical memory, causing a lot of disk accesses for virtual memory. Since the matrix ? is sparse, a hash data structure can be used, so that only non-zero entries are stored. We have adopted the hash structure for the real data set, and fouud that less than 5MB memory is needed.

Our results in Figure 3 are based on this enhanced hashing approach. However, the computation with this reduced size is still very massive.

We have also tried other sets of experiments where not all     the items are considered but only those above a minimum sup- port threshold of 0.05% or 0.1% are considered. However, the resulting profitabilities are much lower than those shown in Figure 3. For instance, if J = 500 and min-support = 0.05%, the profitability of naive and MPIS Alg is about 1.3%. But, if all items are considered, the profitability of those approaches is about 25%. This is explained by the existence of items that generate high profits but which are not purchased frequently enough to be counted given the support thresholds.

Na vei  Na vei  Figure 2. The Synthetic Data Set  Na vei  Na vei  Figure 3. The drug store data set  8 Conclusion One of the applications of association rule - the maximal-  profit item selection problem with cross-selling effect (MPIS) is discussed in this paper. We propose a modeling by the loss rule, which is used in the formulation of the total profit of the item selection. We propose both a quadratic programming ap- proach and a heuristical approach to solve the MPIS problem.

We show by experiments that these methods are efficient and highly effective. We believe that much future work can be done. The heuristical method can be enhanced with known methodologies such as hill climbing. Expert knowledge can be included in the methods, and the definition of the problem can be changed in different ways to reflect different user envi- ronments.

Acknowledgements We would like to thank M.Y. Su for his generous help in providing the source codes for the HAP solution and his other advices. We also thank Ping Quin of DBMiner Technology for providing the real dataset. This re- search is supported by the Hong Kong RGC Earmarked Grant UGC REF.CUHK 4179/01E.

