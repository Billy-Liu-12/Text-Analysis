Alerts Analysis and Visualization in Network-based

Abstract The alerts produced by network-based intrusion  detection systems, e.g. Snort, can be difficult for network  administrators to efficiently review and respond to due to the  enormous number of alerts generated in a short time frame. This  work describes how the visualization of raw IDS alert data assists  network administrators in understanding the current state of a  network and quickens the process of reviewing and responding to  intrusion attempts.  The project presented in this work consists of  three primary components. The first component provides a visual  mapping of the network topology that allows the end-user to  easily browse clustered alerts. The second component is based on  the flocking behavior of birds such that birds tend to follow other  birds with similar behaviors.  This component allows the end-  user to see the clustering process and provides an efficient means  for reviewing alert data.   The third component discovers and  visualizes patterns of multistage attacks by profiling the  attackers behaviors.

Keywords  intrusion detection, visulization, flocking,  clustering

I.  INTRODUCTION  Intrusion detection systems are used to monitor network  traffic and information system for possible security breach such  as scanning, and denial of service.  IDSs trigger alerts to report  them upon detection of intrusions.  These alerts are reported to  network administrator who will make decision and respond to    alerts.  The alerts generated by network-based IDS such as  Snort can make it difficult for network administrators to  efficiently review and respond to due to the enormous number  of alerts generated on high-traffic networks. By processing  alerts using clustering techniques and then visually presenting  them to the network administrator, intrusion detection systems  can be improved such that useful, easily understandable output  is produced resulting in quicker response decisions.  Moreover,  using the alerts generated by current IDSs, it is not possible to  detect multistage attacks [6], by which many websites are  being affected. To detect or stop potential attacks there is a  necessity to detect anomalous behavior from existing patterns,  so that we can predict the future actions by the attackers. To  find the sequential patterns we need to analyze IDS alerts using  data mining techniques.

In this paper, we describe how the visualization of IDS alert  data assists network administrators in understanding the current  topology of a network and quickens the process of   reviewing  and responding to intrusion attempts.  The project presented in  this paper consists of three primary components. The first  component provides a visual mapping of the network topology  that allows the end-user to easily browse clustered alerts. The  second component is based on the flocking behavior of to  cluster alerts based on similarity. In the third component, we  visualize and predict multistage intrusions. We have considered  anomaly detection, due to its ability to detect novel attacks  [10]. Our system aims to discover temporal pattern of  attackers behaviors, which is profiled using a rule generation  algorithm. Our system uses a simple interface to display and  predict the behaviors of attackers.



II. BACKGROUD AND RELATED WORK  RAAS [2] which was designed for data abstraction uses  hashing techniques is an automated way of archiving huge  amounts of data generated by snort in which it maintains  several tables. They have grouped alerts on temporal basis, as  it is totally focused on archiving snort alerts; further analysis  has to be done to detect multi-stage attacks.  Even it was an  automated way of archiving data it has possible overhead of  moving data between different tables.  In Snort View [1],  Koike and Ohno have done exceptionally well to visualize the  alerts.  The Snort view is based on 2-D time diagram and  alerts are shown as icons in different colors which were    designed to reduce false detections.  Though they have  considered only essential data to visualize there is a need to  analyze them further to make it more useful for network  administrators in finding future attacks.  The works in [3], [4]  and [5] have done well to visualize essential events from large  set of alerts considering different information from each alert  using different technique such as trees and graphs.  They do  not concentrate on temporality, the flow of the alerts and  source and destination at a time.  IDS Rain storm [7] presents  a visualization tool in which more IP addresses for alerts can  be seen at a time by filtering them out based on severity level  of attacks.  Intrusion Detection toolkit (IDtk) [16], a 3D, is   Security, Risk and Trust  978-0-7695-4211-9/10 $26.00  2010 IEEE  DOI 10.1109/SocialCom.2010.120   glyph-based visualization tool that gives the user maximum  flexibility in setting up how the visualization display  represents intrusion detection data. The Time-based Network  traffic Visualizer (TNV) [19] emphasizes importance of  context and time in the process of intrusion detection analysis.

The TNV contains a matrix showing network activity of hosts  over time. VisAlert [20] is an extensible visualization that can  accept multiple data sources, including intrusion detection  (ID) alerts and system log files. In [8], [9] they have showed,  by applying data mining techniques on these alerts, how can  we generate patterns effectively with credibility for future use.

Anup K. Ghosh et al. attempts to learn program profiles using  a feed-forward backpropagation neural network and then the  technique evolves to an Elman network for recognizing  recurrent features in program execution traces [10].  In [15],  Klaus Juslich showed how to use alarm clustering to identify  root causes.  Terran Lane et al. [17] investigate temporal  sequences of discrete, unordered observations and transforms  them into a metric space via a similarity measure that encodes  intra-attribute dependencies.  Mathew et al. [6] have  developed a tool which was aimed for detection of multistage  attacks in which attack paths was concentrated. If the  sequence of attacks between the source and destination is  more than it might not be possible to detect the attack as it  would not be possible to visualize all this sequence of events    at a time.  We were motivated by [8, 9, 14] to use data mining  techniques to find the rules and patterns by considering  essential features from each alert.



III. ARCHITECTURE  Our intrusion visualization and multistage intrusion  detection system, which is based on alerts generated by Snort,  one of the widely used open source IDS, has a simple  architecture shown in figure 1  with four steps as generation of  Snort alerts, clustering and association rule generation,  profiling attackers behavior and finally the prediction and  visualization of multistage attacks. The administrator can  quickly get an overview of the traffic flow on the network and  is able to see how many alerts each of these nodes has  produced, when they were produced, and a detailed listing of  each alert. Our work uses network traffic captured over a five  day period involving over 300 different network nodes.

Figure 1.  Architecture of Multi-stage Intrusion Detection and Visulization  System  Since Snort IDS generates thousands of alerts in small time  period [12], it is hard to find which alerts lead to a serious  attack in the future. The process of analyzing those generated  alerts by applying flocking model to cluster alerts and data  mining techniques to find multistage attacks is the key of our  system. Our Intrusion Detection System is based on the alerts  generated by snort and association rules created by the Apriori  algorithm [11, 13]. The outcome from the third step is the basis  for our systems interface where we visualize potential  multistage attack to make administrators decision making  more efficiently.



IV. VISULIZATION AND CLUSTERING  The network traffic visualization component processes  raw Snort alert data into a visual format that displays each  node on the network and its associated alerts and connections.

Details of alerts are able to be presented to the network  administrator, including full network addresses, service, port  numbers, durations, etc. Our model as shown in Figure 2 is  able to visualize a network topology and its alert traffic based  raw Snort alerts. A network topology map is generated which  allows the end user to efficiently access the details of network  nodes and their associated alerts.

A. Snort Alert Processing    Snort generates thousands of alerts in just a small amount  of time, with each alert having less significant information.  It  is very important to analyze them and convert them into a  generalized form by considering only essential attributes such  as source and destination IP address, source and destination  port numbers, destination port number, time stamp of the alert  and the type of the alert. Below is a sample alert from Snort.

[**] [1:2000537:6] ET SCAN NMAP -sS [**]  [Classification: Attempted Information Leak] [Priority: 2]  07/17-09:30:09.298097 192.168.101.66:33966 -> 192.168.101.53:175  TCP TTL:49 TOS:0x0 ID:27814 IpLen:20 DgmLen:44  S* Seq: 0x3C25204F  Ack: 0x0  Win: 0x800  TcpLen: 24  TCP Options (1) => MSS: 1460    The dataset we produced have generated to build our basic  model consists of around 3GB of network traffic, out of those  millions of packets we could generate 150K snort alerts of size  63MB . As we need to extract common details in each alert,  less significant information details such as protocol information  should be ignored.  After extracting common and essential  attributes, 50K alerts were reduced to 3K in number and  360KB in size. A sample alert is in the format (Attack type,  timestamp, Source IP, Source port, Destination IP, Destination  port) mentioned above.  The following is an example of our  Snort alert:    (portscan)TCPPortscan , 07/17-10:03:27.114495, 192.168.101.66,3387,  192.168.101.54,4497.

We chose to group similar alerts together on temporal  basis. We assume that alerts can be grouped into one if they  share the same Source IP address, alert type, and occur in a  specific and short time span. This approach is different from  the one in [8], where they group all the alerts with same source.

Our approach is effective in eliminating false detections and   also to find sequential pattern of attacks on temporal basis,  which plays significant role in finding potential multistage  attacks.  After the grouping has been done, we have added two  more columns to alerts one as count, the number of alerts  grouped together, and the other one is the behavior code to help    while visualizing the alerts. The behavior code indicates  similarity of current alerts with other alerts, which help to  cluster similar alerts. A sample alert after grouping looks like  the one below with the last attribute 50 as the number of  grouped alerts.

192.168.101.56, 192.168.72.1, 07/17- 10:59:06, ETSCANNMAP, 70, 50      Figure 2.  Topology Visualization  As we have taken one second as the time span to group  alerts, we could keep essential alerts intact and reduce the  number of alerts at the same time.

B. Alert Clustering Using Flocking Model  The alerts that are grouped in the previous step are  clustered and visualized in the flocking model as shown in  Figure 3.  Each flocking node represents a single alert, and is  color-coded by alert type. The alerts move based on their  attraction to one another, which is determined using a  similarity comparison model. Alerts with maximum similarity  tend to group together as they move. This is a useful tool which  presents network administrators with a visual clustering of IDS  alerts. Incorrectly classified alerts (false alarms) can be quickly  distinguished due to their lack of similarity with correctly  classified alerts.

The flocking model is an artificial intelligence model  inspired by biology phenomena where similar birds and fish  tend to flock or swim together. The behavior of each bird or  node within the flocking model follows three simple rules:  1. Separation avoids crowding neighbors (short range  repulsion).

2. Alignment steers towards average heading of neighbors.

3. Cohesion steers towards average position of neighbors  (long range attraction).

With each node following these three simple rules, the  group demonstrates flocking and clustering behaviors.  The  similar alerts will be grouped together.

The similarity between two alerts is expressed as a number  within the range 0 to 1, with 0 for no similarity to 1 for  identical.  We use Q-grams algorithm [18] to determine  similarity which approximate string matching by sliding a    window of length q over the characters of a string to create a  number of 'q' length grams for matching a match is then rated  as number of q-gram matches within the second string over  possible q-grams.  The intuition behind the use of q-grams as a  foundation for approximate string processing is that when two  strings s1 and s2 are within a small edit distance of each other,  they share a large number of q-grams in common.

Consider the following example. The positional q-grams  of length q=3 for string "sam chapman" are f(1,##s), (2,#sa),  (3,sam), (4,am ), (5,m c), (6, ch), (7,cha), (8,hap), (9,apm),  (10,pma), (11,man), (12,an%), (13,n%%), where '#' and '%'  indicate the beginning and end of the string. So getting the q-  grams for two query strings allows the count of identical q-  grams over the total q-grams available. This method is  frequently employed as a 'fuzzy' search in databases to allow  non exact matching of queries. A rating is also often given by  the ratio of the q-grams distance metric.

Figure 3.  Alert Clustering using Flocking Model

V. ASSOCIATION RULE GENERATION  We mine association rules from Snort [12] alerts, to  discover behavior patterns of attackers which are useful to  detect multi-stage intrusions. The main aim to analyze Snort  alerts further by extracting essential features is to find the  patterns of attacks and eventually to record the behavior of  each attacker.  Alerts generated by Snort helps to profile  behavior patterns based on the sequences of alerts.  The  knowledge base built from patterns of attacker behaviors help  to detect and predict intrusions in real-time.  We will use  temporal association rules to learn sequences of a user  behavior.  This effort attempts to capture attackers who use one   attack to prepare for another one. This would help us to predict  future attacks. For simplicity and clarity, Alert analysis is  divided into four steps.

Now that we have reduced the alert list by eliminating non  essential information, our task is to find the sequential patterns.

We still might have some false detection, which can mislead us  to take some action, we need to eliminate them and find the  sequential patterns. To find patterns Association algorithm is  the most efficient and easy approach. The Apriori algorithm,    we applied to generate association rules for each host, does  some calculation based on the sequential events and gives us  best of all rules.  The Apriori algorithm contains join and prune  steps [11].  The join step let a set of k-candidate itemsets to be  joined if k-1 items are identical.  The prune step removes k-1  itemset that is not frequent from frequent k-itemset.   Below are  some sample patterns we discovered from our alert dataset.

1) PORTSCAN ->  SNMPattack  2) PORTSCAN ->  SNMPattack -> ETSCANNMAP  3) PORTSCAN ->  ETSCANNMAP  To describe how association rules would help us in finding  the potential future attacks, as we have three probabilities to  predict from, once we encounter a PORTSCAN attack, in the  next step the attacker may go for either SNMPattack or  ETSCANNMAP. Based on available rules we can predict the  future step of an attacker and stop it from being effective.

During real-time discovery, we utilize the learned rules in  our knowledge base so that we can still discover and predict  behaviors of attackers. We used support and confidence as our  metrics to find how reliable and frequent a rule is. Support and  confidence are two parameters for measuring the rule  interestingness.   The confidence value is a measure of or belief  in the association rule which represents the certainty,  reliability, or accuracy of the rule as seen in (1). Han [13]  defines the support of an association pattern as the percentage  of task-relevant data tuples for which the pattern is true as seen  in (2). Support and Confidence can be calculated as follows.

support(X -> Y) = p(X?Y)    (1)  confidence(X -> Y) = p(Y)/(X)   (2)  The support and confidence values are compared against  thresholds.  A rule will be of interest if both are support and  confidence values fall above minimum support and minimum  confidence thresholds.  Network administrators set their own  values for support and confidence to eliminate non essential  rules, which would give them a set of rules to record attackers  behavior. For example, we calculated support and confidence  for the rules we listed above.

1) PORTSCAN ->  SNMPattack  sup(0.29)  conf(0.40)  2) PORTSCAN ->  SNMPattack -> WEBATTACK  sup(0.14)  conf(1.0)  3) PORTSCAN ->WEBATTACK sup (0.14) conf (0.20)  Each rule has different support and confidence value. If we    set minimum support as 0.20 and confidence as 0.30 as  thresholds, we can eliminate third rule and the remaining rules  would be used as the behavior of the attacker.



VI. IMPLEMENTATION  The data available to us contains various network attacks  including multistage ones.  The alerts that provided inputs to  the system are Snort intrusion detection system. We have used  Java technology to implement flocking and data mining  algorithms, where as to visualize multistage attacks we have  used Adobe flex along with Java script.

Figure 4.  Alert and Its Prediction at the Node 192.168.101.66  With selected time range as shown in Figure 4, there is a  current ICMPPINGNAMP alert at the node 192.168.101.66.

The model retrieve prediction rules from our learned  knowledge based and precide that attacker may launch  ETSCANNAMP or SNMPattack with 0.14 as support value  and 0.5 as confidence value.  When the time range is increased  or with time going by, a new alert PORTSCAN is detected as  shown in Figure 5, and new applicable rules are retrieved.

The new rules indicate that attacker may adopt  WEBATTACK or SNMPattak in the next step.  By  predicating behaviors of attakders, network administration can  prepare possible response such as firewall reconfiguration, or  the fixing of discovered vulnerabilities.

Figure 5.  Development of Alerts and Prediction at the Node 192.168.101.66

VII. CONCLUSION AND FUTURE WORK  Our system is efficient in predicting and visualizing potential  multistage attacks. The experimentation results are quite  outstanding in predicting the potential multistage attacks. Our  stem is basic but effective; there is a room to improve the  performance of the system by modifying the algorithms we  applied. Now that we have developed a system that can predict  multistage attacks, our aim is to improve the performance of  the system, to add more features to find novel attacks.

