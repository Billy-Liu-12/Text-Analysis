A Streaming Resource-based Connection Algorithm  in CloudDMSS for Streaming Task Distribution

Abstract? In previous studies, we proposed and developed a CloudDMSS (Cloud-based distributed multimedia streaming service) system. To provide reliable streaming service in the CloudDMSS, a distribution streaming system was established using streaming task distribution algorithms, RR (Round Robin), and LC (Least Connection). However, as the RR and LC methods did not consider the utilization or streaming transmission rate of the streaming servers, it negatively affected the load on the servers. Therefore, to improve the capability of our CloudDMSS, this study proposes a streaming task distribution method using an SRC(Streaming Resource-based Connection) algorithm that considers the utilization of the streaming server.

Keywords? Cloud Computing, Load Distribution, Social Media Streaming

I.  INTRODUCTION Because of the recent advent of high-performance  heterogeneous smart devices, such as smart phones, smart pads, and smart TVs, and the spread of SNS (Social Network Service), such as Facebook and Twitter, social media in various forms is being produced and shared in wired, wireless, and various other environments [1,2]. Because of the different resolutions, supported video extensions, codecs, and streaming protocols of smart devices, it is necessary to transcode in the appropriate media format to provide media streaming to the smart devices. However, multi-media transcoding requires extensive resources (CPU, RAM, and storage). To address this problem, a transcoding method for distributed environments is being researched [3]. However, because most resolution methods for distributed environments require additional cluster machines,  emphasis is placed on securing the necessary computing resources. In addition, existing transcoding methods present a problem of reducing the corresponding speed owing to the absence of an automated recovery policy, which may result in loss of information, or system halts. For this reason, previous studies recommended the MapReduce Framework using the HDVTS (Hadoop-based Distributed Transcoding System) as a way to transcode the large number of bulk media files produced in heterogeneous smart devices using SNS [3,4,5]. In the HDVTS, as suggested in this study, a large number of bulk media files are transcoded by rapidly executing a parallel distributed process [3,4,5]. To provide an effective and reliable streaming service, the HDVTS establishes the media streaming environment using a distributed environment.

Presently, many researchers are determining how to distribute the streaming server task at the time the streaming demand task occurs in a distributed system environment [6,7,8,9,10]. The most representative method of task distribution, RR (Round Robin), is a basic algorithm that distributes the tasks in fixed order in a composed system. In an internet environment, the LC (Least Connection) algorithm distributes tasks to the server with the lowest number of users [10]. To increase the efficiency of task distribution through existing algorithms, different algorithms (Round Robin, Least Connection, Weighted Round Robin, and Dynamic Weighted Round Robin) are being studied [6]. Our existing system uses RR and LC as a method to distribute tasks according to the streaming requests of the users. Because RR and LC, employed in the implementation of the HDVTS, are not task distribution algorithms for dispersion streaming, they do not consider system usage or streaming transmission rates. Because they do not consider the load on the servers, it is difficult to achieve effective streaming. Therefore, this study suggests a distribution streaming method that uses an SRC (Streaming Resource-based Connection) algorithm to distribute tasks to the streaming server. For performance evaluation, this study suggests and implements a prototype of the SRC algorithm based distribution streaming system in a Cloud environment.

Performance evaluation is achieved by comparing the streaming transmission rate of the existing RR and LC methods with that of the task distribution module of the prototype.

Components of this study are as follows. In Section 2, related studies on task distribution methods used in a dispersion environment are discussed and the implementation of the prototype suggested in this study is evaluated. In Section 3, background knowledge on the HDVTS, previously introduced in this paper, is reviewed. The proposed SRC algorithm is described in Section 4. In Section 5, the implementation of a prototype of the distribution streaming system using the SRC algorithm is  presented . In Section 6, the streaming transmission rate of the existing RR and LC methods and that of the prototype?s task distribution module, which uses the proposed SRC algorithm based task distribution method are verified and the throughput of the prototype?s task distribution module is determined. Finally, in Section 7, conclusions and future research plans are presented.



II. RELATED WORK With the recent advent of heterogeneous smart devices and  the spread of SNS (Social Network Service), technologies that provide effective and reliable streaming services are becoming very important. The demands for sharing social media, regardless of time and place, are increasing. This section discusses related studies on streaming task distribution methods that applied the SRC (Streaming Resource-based Connection) algorithm suggested in this study. The implementation of the prototype is also presented.

A. Load distribution Methods Distribution methods are used in many domains such as  web servers, file servers, and video streaming servers. Because load distribution is important when building a distribution server, significant research has been undertaken on the study of load distribution methods. The representative methods of server load distribution include RR (Round Robin) and LC (Least Connection) [10]. The RR method distributes tasks in a fixed order according to the task requests of the users. The LC method distributes the tasks to the server with the least number of users according to the task request. In addition, many researchers have studied other distribution algorithms, such as WRR (Weighted Round Robin) and DWRR (Dynamic Weighted Round Robin) [6]. However, because most methods of task distribution target web servers and are generic, they are not very effective when applied to a distribution streaming server. This study suggests a task distribution method using an SRC (Streaming Resource-based Connection) algorithm.

Because the SRC algorithm considers the server system and streaming transmission rate to distribute the streaming task, it can overcome the limitations of existing task distribution methods.

B. Redirection mechanism for HTTP requests Owing to the rapid traffic increase on internet servers,  Antoine Mourad and Huiqun Liu suggested a redirection-based hierarchical web server architecture, for load dispersion, that applied a redirection mechanism to HTTP requests [11]. Fig. 1 shows the redirection-based hierarchical web server architecture. The proposed system is based on a two-level architecture of multiple distribution servers using redirection servers. The redirection servers distribute tasks to each distribution server depending on the type of user content using the HTTP protocol. Fig. 2 shows the redirection mechanism for an HTTP request applied to the redirection server. The redirection mechanism is part of the HTTP protocol and is supported by browsers and web servers. The mechanism procedure is as follows. Users access the base URL through a browser. Here, the base URL is mapped with IP through DNS and the browser is connected to the relevant server. The first server that the browser connects to is the redirection server.

The redirection server has a distributing mechanism that generates a redirection message to a relevant server depending on the content type of the base user URL. This study applies the SRC (Streaming Resource-based Connection) algorithm and redirection mechanism to the request to distribute the media streaming task. The architecture suggested by Antoine Mourad and Huiqun Liu had a structure that stored the request in the distribution server according to the content type. The  proposed structure, however, required additional servers to store copies of the files being used to serve as a backup in the event of data loss or system interruptions. Further, the corresponding speed was reduced because of the absence of an automated recovery policy, and it did not ensure server reliability. Therefore, as a means to resolve this issue the proposed study implements content storage based on HDFS (Hadoop Distributed File System).

Figure 1.  Hierarchical redirection-based web server architecture.

Figure 2.  Redirection mechanism for HTTP requests.

C. HDFS (Hadoop Distributed File System) HDFS is used to implement a prototype of a distribution  streaming system using the SRC algorithm proposed in this study. HDFS is a distribution file system inside the Hadoop Eco System. It controls data in block units (at least 64 MB) [12,13]. HDFS is composed of two principal functions.

NameNode controls the meta information blocks and DataNode stores the actual distributed information. Blocks in HDFS are distributed and stored in each machine according to a reproduction policy for reliable operation of a system.

Specially, in the event of a server stoppage or loss of data, system security is maintained because the data is reproduced through existing copies. A block of HDFS basically creates three 64 MB blocks. The three blocks are managed by NameNode that controls the meta-information. It is not     necessary for users to manage copies because they are mapped into one file. Because HDFS prevents the loss of blocks through NameNode and secures reliability of the system by creating copies in different systems, at the time of a system stoppage, it overcomes the limitations found in a typical redirection-based hierarchical web server architecture.



III. BACKGROUND With the dissemination of heterogeneous smart devices and  the spread of SNS technologies, enormous volumes of social media are being produced and shared. Because smart devices have different resolutions, extensions, video codecs, and streaming protocols, it is necessary to transcode  media appropriately to provide effective streaming to smart devices with different specifications. Multimedia transcoding, however, demands significant system resources. To address these issues, research into transcoding methods for distributed environments is being conducted. Most of these studies propose securing the necessary computing resources for transcoding by increasing the number of cluster machines [3]. In addition, the transcoding methods in existing distribution environments have not successfully addressed securing system reliability. There is an absence of an automated recovery policy for details such as loss of data or system availability interruption. Therefore, we suggested the use of the HDVTS (Hadoop-based Distributed Transcoding System) that implemented the MapReduce Framework [3,4,5].



IV. SRC (STREAMING RESOURCE-BASED CONNECTION)  TABLE I.  THE SRC ALGORITHM.

Algorithm 1  Data: ssn : streaming server1, server2 .... servern Data: sun : the system usage rate of ssn Data: scu : the CPU usage rate of ssn Data: sru : the RAM usage rate of ssn Data: str : streaming transmission rate of ssn Data: request_ID : Id requesting media  streaming service   1: while system available 2: if  request for media streaming then 3:     for ss1 to ssn then 4:         calculate_system usage(){ 5:             su=(scu+sru)/2 6:         } 8:        calcuate_streaming transmission rate(){ 9:             str = current strn ? past strn  10:         } 11:    end for  12:     distribute streaming task(request_ID) 13:      if the number of the smallest su ==1 then  14:        distribute task(request_ID,smallest su); 15:     else 16:        distribute task(request_Id,smallest str) 17:        start_streaming_servcie(request_ID); 18:     end if 19: end if    To provide the transcoded media service in the HDVTS, a distribution streaming environment is established. When building the distribution streaming environment, research issues that allocate tasks to the streaming server according to the streaming task request of users arise [6,7,8,9,10]. The most representative methods of task distribution are the  RR (Round Robin) and LC (Least Connection) algorithms [6]. The system uses RR and LC as a method to distribute the tasks according to the user streaming requests. However, because the task distribution algorithm that was implemented in the distribution streaming system of the HDVTS is not an exclusive algorithm for distribution streaming, it does not consider the system usage or streaming transmission rates. It does not conduct effective streaming because it does not reduce the load on the streaming server. To overcome this limitation, this study proposes the SRC algorithm. As an exclusive algorithm for distribution streaming, SRC concentrates on overcoming the limitation of the existing algorithms because it distributes tasks considering both the usage of a system and the streaming transmission rate.

Table 1 shows the SRC algorithm. The SRC algorithm distributes tasks by verifying the system usage and streaming transmission rate to overcome the limitations of existing task distribution algorithms. The sequence of the SRC algorithm is as follows. First, usage and streaming rates of each streaming server are calculated. Equation (1) calculates the usage rate of a streaming server.

?  SruScu Su  ? ? ? ????  The usage rate of a streaming server n is defined as Su. Scu represents the current CPU usage rate and Sru represents the current RAM usage rate. The system utility rate, Su, is calculated by dividing the current total utility rate of the CPU and RAM by 2. The equation to calculate the streaming transmission rate is defined by equation (2).

? ? )2(PastStrCurrentStrStr ?? ? ????  The streaming transmission rate is Str. The current streaming transmission rate is defined as CurrentStr. The streaming transmission rate of one second before is defined as PastStr. The streaming transmission rate per unit time is calculated by subtracting PastStr from CurrentStr. The streaming task is distributed to the server with the lowest system usage rate. If several of the servers have a similar low usage rate, the task will be distributed to the server with the lowest transmission rate.



V. PROTOYPE OF A DISTRIBUTION STREAMING SYSTEM USING THE SRC ALGORITM IN THE CLOUD ENVIRONMENT Fig. 3 shows the distribution streaming system architecture  using the SRC algorithm in the Cloud Environment. This system consists of the Streaming Task Management Module, Streaming Server Module, and HDFS based Content Storage Module. The implementation environment and each module is explained in this section.

A. Implementation Environment This system consists of one Streaming Task Management  Module, three Streaming Server Modules, and an HDFS-based Content Storage Module using 10 servers. Table 2 shows the specifications of the cluster. The Streaming Task Management Module is composed of JSP in a Tomcat7 environment, the Streaming Server Module is Nginx 1.2.7 using the H.264 streaming module 2.27, implemented with JAVA for the system performance monitoring tool, using the mpstat command to query the CPU usage rate and free command to determine the RAM usage rate. /proc/net/dev is used to measure the streaming transmission rate. Finally, Hadoop 1.0.4 is used to establish the HDFS-based Content Storage Module, and fuse_dfs_0.1.0 is used to conduct the LINUX file system and Mount.

TABLE II.  CLUSTER SPECIFICATIONS.

Classification Content CPU Intel Xeon 4 Core 2.13 GHZ  Memory 16GB HDD 1TB STATA-2  Network Card 100 Mbps Ethernet adapter OS Ubuntu 10.04 LTS      Figure 3.  Distirubtion straming system architecutre using SRC Algorithm in the cloud environment  B. Streaming Task Management Module The Streaming Task Management Module is the most  important module of the prototype. It distributes the streaming server load and ensures efficiency by distributing tasks to the streaming server using the SRC algorithm. When users log on to a PC or mobile, the web dashboard-based list of contents is provided. When users select content, the streaming Task Management Module determines the usage and streaming transmission rates of each streaming server and selects the optimal device. The streaming task is distributed and it  provides the streaming service to the user using the redirection mechanism for the HTTP request method.

C. Streaming Server Module The Streaming Server Module is a streaming server with  exclusively installed NginX that applies the H.264 Streaming Module. NginX using an H.264 Streaming Module in a general web server is used instead of a specific protocol (RTP, RTSP, or RTMP) because it supports the HTTP-based streaming service. This allows the streaming service to function in all devices because the HTTP-based streaming protocol is currently universally supported even though the streaming protocols differ depending on the type of smart device.

D. HDFS based Content Storage Module In the redirection-based hierarchical web server architecture  proposed by Antoine Mourad and Huiqun Liu, the contents were stored on a specific distribution server depending upon the type of content. This architecture, however, has a shortcoming in that, for reliability, it must increase the number of servers as the requirement for additional data space increases.

In addition, because it does not have an automated recovery policy for a system service interruption, it is similarly less reliable. To implement the Content Server, our proposed system constructed an HDFS-based Content Storage Module (Hadoop Distributed File System). Because HDFS manages files by copying in block units, it ensures the reliability of the system as it automatically recovers in the event of a system service interruption.



VI. PERFORMANCE EVALUATION Performance evaluation was conducted on the  implementation environment, including the 10 HDFS-based Content Storage Modules, 3 NginX-based Streaming Server Modules, and 1 Tomcat-based Streaming Task Management Module. The transmission rate of the Streaming Server Module and the task distribution processing ratio of the Streaming Server Module were evaluated.

A. Performance Evaluation of the Streaming Transmission Rate  TABLE III.  TRANSMISSION RATE OF A SYSTEM WITH RR, LC, AND SRC.

RR LC SRC Server A 61.18 MB /s 62.85 MB /s 65.08 MB /s Server B 61.75 MB /s 61.53 MB /s 63.75 MB /s Server C 62.70 MB /s 61.74 MB /s 64.75 MB /s Average 61.87 MB /s 62.04 MB /s 64.52 MB /s    Table 3 shows the streaming transmission rate of the distribution streaming server in a Cloud environment for the RR, LC, and SRC distribution algorithms. For the performance evaluation, we used 3 MB expanded MP4 media files converted in the HDVTS. The HTTP Progressive Download method was used for a streaming protocol. For the performance evaluation scenario, 600 imaginary users logged into the system using the RR, LC, and SRC algorithms to calculate the transmission rate generated when streaming the media. The average transmission rate during a 1 s interval was measured.

The results of the performance evaluation for the RR method showed an average of 61.87 MB/s streaming transmission rate.

The LC method showed 62.04 MB/s streaming transmission rate. With 64.52 MB/s streaming transmission rate, the SRC algorithm showed a better transmission rate than both the RR and LC methods. This is because the SRC method distributes tasks based on the system usage and streaming transmission rates, unlike the other methods.

B. Task Distribution Processing Ratio of the Streaming Task Management Module  TABLE IV.  TASK DISTRIBUTION PROCESSING RATIO WITH RR, LC, AND SRC..

RR LC SRC Throughput 94.5 / s 93.8 / s 92.4 /s   Table 4 is the task processing rate per second of the Streaming Task Management Module applying the RR, LC, and SRC distribution algorithms. For performance evaluation, 300 imaginary users were assumed using the Apache Jmeter 2.9 web load tool. The task streaming processing rate was monitored by requesting a streaming task distribution from the Streaming Task Management Module using the Listener HTTP Request function. The performance evaluation result for RR showed a 94.5 processing rate per second. The rate for LC was 93.8 processing rate per second. The SRC task distribution module showed a processing rate of every second. When performance was evaluated, it was verified that the task distribution model using the SRC algorithm showed safer task distribution efficiency by confirming functions of the same class compared to the task distribution module using RR and LC.



VII. CONCLUSION AND FUTURE RESEARCH MODEL This study identified that existing task distribution  algorithms, RR and LC, are inappropriate for streaming media distribution, and that the proposed SRC task distribution method was superior. The performance evaluation identified that, unlike the task distribution method that used the RR and LC algorithms, the task distribution method that used the SRC algorithm, distributing tasks by considering the system usage and streaming transmission rates, was more appropriate for streaming media distribution.

In addition, by verifying the streaming task processing rate per second of our proposed algorithm, it was identified that it was very safe and showed equal performance compared to the RR and LC algorithm that are used in many existing applications. Based on these results, improvements of the streaming media distribution process in a Cloud environment, using the SRC algorithm, will be studied in more detail.

Additional evaluation factors of the entire system, such as DISK I/O, OS, and network inside the cluster, will be considered.

