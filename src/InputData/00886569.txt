Efficient Mining of Categorized Association Rules  in Large Databases

Abstract  A number of studies have been made on discovering association rules in a large database due to the wide applications. The common goal of the studies focused on finding the associated occurrence patterns between all items in a database. In practice, mining the association rules with the granularity as fine as an item could result in a huge number of rules that are too large to utilize efficiently. In practical applications, the users may be more interested in the associations between the categories the items belong to. In this paper, we propose a new method for mining categorized association rules efficiently by using compressed feature vectors.

With the proposed method, at most one scan of the database is needed to produce the categorized association rules in each user query even under different mining parameters. Furthermore, the calculation time during the mining process is also reduced greatly by using only the simple logic operations on feature vectors. Hence, the overall performance in mining categorized association rules could be improved substantially.

1. Introduction  Data mining is the process of extracting previously unknown and useful information from a large database. It has been extensively applied to a wide variety of applications like sales analysis, healthcare, manufacturing, etc. A number of studies have been made on efficient data mining methods and the relevant applications.

Among the data mining problems, association rules discovery might be the most studied ones. This problem was introduced in [l]. Given a set of transactions, where each transaction is a set of items, an association rule is an expression X s Y, where X and Y are sets of item. An example of an association rule is: ?25% of transactions that contain beer also contain diapers; 5% of all transactions contain both items?. Here, 25% is  called the confidence (of the rule, and 5% the support of the rule [ 1,211. Most existing work on this problem focused on finding the association rules among all items in 21 large database that satisfy user-specified minimum (confidence and support [ 1 - 4, 6-71. A number of studies were made to propose efficient methods for mining association rules by reducing either the CPU computation time or the disk access overhead [3-4, 71. Some studies considered the usage of? sampling techniques for reducing the processing (overhead [ 1 1, 121. Srikant and Agrawal [9] incorporated into considerations the quantities of the items purchased in discovering association rules. Some approaches were proposed for mining generalized association rules [8, 101.

Sarawagi et al. [lo] considered the integration of association rules mining with SQL in standard databases.

Srikant and Agrzwal [8] introduced the problem of mining gener-alized association rules as follows: Given a set of transactions, where each transaction consists of a set of items, and a taxonomy on the items, we find associations between items at any level of the taxonomy. For example, given a taxonomy that says that jackets is- a outerwear is-a clothes, we may infer a rule that ?50% of people who buy outerwear tend to buy shoes. 5% of all transactions contain both these items?. This reflects the fact that the taxonomies over the items exist in marly real-life applications.

In this paper, we are aimed at another problem related to mining generalized association rules. We call the problem as ?mining categorized association rules? and the scenario in this problem is as follows:  0-7803-65~3-6/001$10.00 0 2000 IEEE 3606  1. Although the taxonomy may be used to model the hierarchical relationships of items in an application very well, people are often interested in association rules under a simpler taxonomy, i.e., the one-level category an item belongs to.

2. Users are often interested in finding association rules involving only some specified categories rather than all categories in a query. Hence, constraints on categories will be specified.

3. Users may make continuous queries, in which new requirements for parameters like support are set based on the previous query results. This is because the number of discovered rules may not be suitable. Therefore, quick response to users? queries is needed.

With the scenario as described above, the existing mining algorithms may not perform well in terms of responding the user?s query quickly. The main reason is that the existing mining algorithms are mostly designed in forms of several passes so that the whole database needs to be read from disks several times for each user?s query under the constraint that the whole database is too large to fit in memory. This is very inefficient in considering the big overhead of reading the large database even though only partial items are interested in fact. The worse part is the existing mining algorithms will repeat reading the whole database several passes for a subsequent query even it involves the same specified items as the previous query but changes only the minimum confidence and support.

A new method is proposed in this paper for mining categorized association rules efficiently. The main features of the method are as follows: For each category, a compressed feature vector and a feature record are built to represent the occurrence patterns of the items belonged to this category. The feature vector and feature record are built only once while reading the database first time. Then, the associations between the categories are constructed by using the feature record information and performing simple logical operations on the feature vectors without reading the large database again.

Hence, all the disk access overhead, calculation time for mapping the items to belonged categories, and the calculation time for finding the associations  between the categ9ries can be reduced substantially.

The rest of the paper is organized as follows.

We state the problem formally in Section 2. In Section 3, the proposed method is described in details. A conclusion and the future work is given in Section 5 .

2. Problem Statement  Ih the following, we give a formal statement of the problem. Let I = {il, ir,. . ., i,,,}be a set of items. Let D be a set of transactions, where each transaction Tis a set of items such that T c I. Each transaction is associated with a unique identifier, called its TID.

An association rule is an implication of the form X 3 Y, whereXc I, Yc I, a n d X n  Y =  0. The ruleX 3 Y has support s ifs% of transactions in D contain X u  Y, and it has confidence c if c% of transactions in D that contain X also contain Y. This is the original definition of an association rule given in [2].

For the categorized association rules mining, the following information is complemented. Let C = { Cl, C, ,..., C,,, } be a set of categories and M =  {(ik, ck) l  i k E  I and c k  E C}be a set of mapping which specifies which category an item belongs to. Here, we assume that an item belongs to only one category. Besides, let IC c C be the set of categories the users are interested in the query the user wants to submit. The set of IC, s and c constitutes the mining constraints. Given the mining constraints, the problem is to find all categorized association rules involving items contained in IC with support and confidence larger than s and c, respectively.

Category sets with satisfied support are called large category sets. We call s and c as minsup and minconf, respectively. The user?s behavior is modeled as shown in Figure 1.

- Interested Category  Association Rules  - Interested CatEgory - s m  cn Figure 1. The system architecture  In the system model, initially a user submits a submitting subsequent query since the number of query with some mining constraints. After the discovered rules may not be suitable. That is, the association rules are detected, the user might change user may make continuous queries based on some of the mining constraints like IC for previous mining results.

The problem of discovering the association rules for all items can be decomposed into two subproblems [ 1,2]:  1.

2.

Find all sets of items (or itemsets) that have transaction support above minimum support.

Use the large itemsets to generate the desired rules.

It is pointed out that subproblem 2 is quite  trivial compared to subproblem 1. Hence, most work focus on solving subproblem 1, i.e., to find the large itemsets. In our problem, the focus shifts from itemsets to categories. Similarly, we will aim to find large category sets, which can be used to generate the association rules between categories easily.

3. Proposed Method  In this section, we describe the proposed method in details. The main idea of the proposed method is to  extract the occurring patterns of the interested categories and store them in compressed vectors.

Once the compressed vectors of the interested categories are built, all computations for the concurrent occurrences of the interested categories are made by Boolean AND operation by using the feature vectors without accessing the database again.

Hence, the high disk overhead incurred in other mining algorithms due to multiple parses of the database can be reduced substantially. The algorithm of the proposed method is as shown in Figure 2.

Central to our method are two databases, namely Category Support DB (CSDB) and Category Feature DB (CFDB). CFDB records the feature vectors for the interested category, while CSDB records the calculated support for each data item.

When a user submits a query for mining a database with the constrained support s, confidence c and interested category IC, the proposed method firstly examines if the CSDB exists and builds it if it is absent.

1) IF ( CSDB is empty) Scan the database to build CSDB and determine LI,  and  build CFDB for interested category; ELSE  Retrieve CSDB and determine L1 and build CFDB for non-existent category;  2) k=2 3) Generate candidate large category set c k  from &I; 4) IF c k  is not empty  Obtain the count for each category in ck by bitwise AND operations on the category?s feature vectors and get Lk;  k=k+l; go to step 3;  5) Answer = union of all Lk ;  Figure 2. Algorithm for finding large category set.

The process for building the feature vector V , for a category C, is as follows. Basically, V ,  is compressed form of a bit vector in which* bit is set as 1 if C, appears injth transaction of the whole database; otherwise, it is set as 0. Note that a category is inherently a collection of data items.

Hence, in determining the bit vector, jth bit of feature vector V ,  is set as 1 if any data item belonging to C, appears in jth transaction of the whole database; otherwise, it is set as 0. In this way, the recording of information shifts from the level of data items to that of category. To store the feature vector, it is physically recorded in disk in segments of 8 bit, i.e., one byte.

However, in considering the possibility of sparse occurrences of a data item in a large database, the consecutive 0?s in the feature vector is counted and stored as a count index if the count is larger than 8 (since we use 1 byte as a segment). By storing the appearing pattern of each category as a compressed vector separately, the size of the database to be accessed can also be reduced greatly. This will reduce the memory requirement problem substantially. Hence, the disk overhead of scanning the whole database as existed in other mining algorithms can be reduced.

In producing the large category sets, we use an approach similar to Apriori [2]. Basically, the proposed method executes in multiple passes and in each pass a candidate large category set c k  was generated and pruned by using Lk-1,. However, our method adopts completely different way from Apriori in counting the number of occurrences for each candidate category set c k ,  In each pass, our method does not scan the whole database as Apriori does; instead, only the vectors for the categories contained in c k  are accessed for doing bitwise AND operations, and the count is obtained easily by counting the number of 1?s in the AND operated result.

The candidates generating and counting process goes on until no candidate can be generated any more. Finally, the large category sets are the union of all L k  and the association rules can be obtained easily by using the specified minimal confidence c as described in Section 2.

In the following, we give brief comparisons of the proposed method with Apriori-based methods.

For our problem, the merits of the proposed method are; 1. Less disk access overhead. For Apriori, the  database has to be read k times if we found large category sets as many as Lk.. For our method, at  most one database scan is needed for each user query-  2. No repeated database access and computation occurs in our method. For two continuous queries from some user with different mining constraints, Apriori treats both queries equally and redo the mining tasks for each query.

Consequently, all database access will be done repeatedly even though some of the information has been obtained in previous query. By taking this into consideration, the proposed method stores both the occurring patterns of the interested category and the mining result, such that no repeated database accesses are made.

This will save considerable execution time.

3. Less computation for mapping interested items into interested categories. With Apriori-based methods, the mapping of interested items into corresponding category was calculated in each pass, incurring a big computation overhead. For our method, this computation was done only in the first pass since all further computations are done on the built feature vectors.

Therefore, the method we propose can reduce both the disk access time and computation time greatly compared to Apriori-based methods. In particular, the improvement will be especially obvious under the following conditions: i) the interested category (IC) involves only some portion of all categories, 2) only the value of support and confidence are changed, and the IC is kept still, 3) several queries have been made with different IC. In this case, most feature vectors of the categories the users may query would be built already; hence, almost no database access is needed for all subsequent queries.

4. Conclusions and Future Work  An efficient mining method is proposed for discovering categorized association rules in a large database by using compressed feature vectors. With the proposed method, at most one scan of the database is needed for producing the categorized association rules in each user query even with different mining parameters. Furthermore, the calculation time during the mining process is reduced greatly by using only the simple logic operations on feature vectors. Hence, the performance of the proposed method outperforms other methods greatly in terms of the response time to user?s queries. The proposed method can be applied to various applications like sales analysis     and health care for decision support.

A number of interesting problems are left for  further investigation. First, we would apply the proposed method to mining generalized association rules with complete taxonomy. Second, the quantities of the data items appearing in a category should be taken into consideration since it indicates another meaninghl measure of the association rules.

Third, the performance of the proposed method will be compared with other methods via detailed simulations covering various mining parameters.

