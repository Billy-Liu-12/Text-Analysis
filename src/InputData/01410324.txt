Mining Generalized Substructures from a Set of Labeled Graphs

Abstract  The problem of mining frequent itemsets in transac- tional data has been studied frequently and has yielded sev- eral algorithms that can find the itemsets within a limited amount of time. Some of them can derive ?generalized? frequent itemsets consisting of items at any level of a tax- onomy [7]. Recently, several approaches have been pro- posed to mine frequent substructures (patterns) from a set of labeled graphs. The graph mining approaches are easily extended to mine generalized patterns where some vertices and/or edges have labels at any level of a taxonomy of the labels by extending the definition of ?subgraph?. However, the extended method outputs a massive set of the patterns most of which are over-generalized, which causes computa- tion explosion. In this paper, an efficient and novel method is proposed to discover all frequent patterns which are not over-generalized from labeled graphs, when taxonomies on vertex and edge labels are available.

1 Introduction  Data mining has been thoroughly studied and led to sev- eral algorithms that can find characteristic patterns and use- ful knowledge. They are applied to various kinds of data, such as transactional data, sequences, vectors, time-series, geographical data, multi-relational data, graphs, trees, semi- structured data, and unstructured data (text). Mining graphs is one of problems attracting a lot of attention recently.

Modeling objects using such complex structures allows us to represent arbitrary relationships among entities [6]. In this paper, a novel method is proposed to discover useful patterns from a set of labeled graphs and a taxonomy on their vertex labels and edge labels.

The existing methods for mining frequent subgraphs dis- cover patterns (substructures) contained as subgraphs in the graphs in a dataset [3]. Given graphs  ? and  ? ? ,  ? ? is a  subgraph of ?  if a function ? ? ? ? ? ? ? ? ? ? holds 1. ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? , and  ! # % % # ( * , - . 0 2 , 4 0 , 2 5# 6 7 ( 0 : ; : . 0 > % : ( 5 .

?

?

@ A B C @ A DD A @ ? @ A F @ A G C I J F  @ A DC @ A F @ A G C I J F I J F  @ A ? @ A F @ A F C @ A D @ A D  K L ! N O # 2 Q  7 2 R  7 2 S T U  T R  K ! ! O  Figure 1. Common Substructure of Antihis- tamines  2. ? ? W ? ? X ? ? Z ? ? ? ? ? ? ? W ? ? X ? ? ? ? ? ? W ? ? ? ? X ? ? ,  where ? ? ? and Z ? ? are sets of vertices and edges in the graph  ? , respectively, and  ? ? is a function to assign a label  to a vertex or an edge. The methods for frequent subgraph mining may miss important patterns, because they cannot use vertex and edge labels at various levels in a taxonomy on the labels. For example, the four chemical compounds in Figure 1 are antihistamines and the right-hand pattern in the figure is known to be their common substructure, where _ is either ` (carbon), a (nitrogen), or b (oxy- gen). Assume that the existing methods are applied to the compounds where each atom, chemical bond, atom type, and bond type in a compound correspond to a vertex, edge, vertex label, and edge label in its graph, respectively. The methods for frequent subgraph mining cannot discover the patterns that contain vertex labels at any level of the tax- onomy, because the methods use exact matching to check whether a candidate pattern is contained in a labeled graph in the dataset. Therefore, a method to mine the generalized subgraph patterns in Figure 1 is needed.

The second reason is that many of the discovered sub- graph patterns are not meaningful. For example, we con- sider two labeled graphs, a taxonomy on vertex labels, and a minimum support are given as input as shown in Fig- ure 2. Each of the graphs in the input consists of six vertices (atoms) and each vertex connects to two other vertices with aromatic bonds. The taxonomy shows that c is a general- ization of ` and a . When the straightforward approach is applied to them, the number of frequent subgraph patterns  0-7695-2142-8/04 $ 20.00 IEEE    ? ?  ?  ? ?  ? ? ? ? ?  ? ? ?  ?? ?  ? ? ? ?  ?? ? ?  ?? ? ?  ?? ? ? ?  ?  ? ? ? ? ?  ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ??? ?  ? ? ? ?  ??  ? ? ? ?  ? ? ? ?  ?  ? ? ?  ?  ?  ? ? ?  ?  ? ?  ? ? ? ?  ? ?  ?  ? ? ?  ? ? ?  ?? ? ? ?  ?  Figure 2. Over-generalized Patterns  consisting of six vertices is 12 as shown in Figure 2. We would like to discover only the upper-left one, because the others are over-generalized.

2 Problem Statement  A labeled graph ?  is represented as ? ?  ? ? ? ? ? ? ? ? ? ? ? ? ? , where ? ?  ? ! ? # # # ? ? % & is a set of vertices, ? ?  ? ? ? ? ? ? ( ? ? ? ? ? ? ? & is a set of edges,? ? ?  ? ? ? ? ? ( ? ? ? ? ? & is a set of vertex labels,? ? ?  ? ? ? ? ? ? ? ? ( ? ? ? ? ? ? ? ? ? & is a set of edge labels, and? ?  is a function defined as ? ? ? ? ? ? ? ? - ? ? ? ? ? .

The sets of vertices, edges, vertex labels, and edge labels of the graph  ? are represented as ? ? ? , ? ? ? , ? ? ? ? ,  and ? ? ? ? , respectively. The topology of the graph ? is  defined as a graph ? 1 ? ? ? ? ? ? ? that does not contains  any labels.

Let 2 be a directed acyclic graph (DAG) whose nodes  have labels in ? ? - ? ?  . An edge in 2 represents an is- a relationship and 2 represents a set of taxonomies on the vertex labels and edge labels. If there is an edge from 6 to7  in the transitive-closure of 2 , 6 is called an ancestor of7 and  is called a descendant of 6 . ( 6 is a generalization  of .) A node in 2 is not an ancestor of itself, since 2 is  acyclic. The taxonomy is modeled as a DAG rather than a forest to allow for multiple taxonomies. Given a label 8 ,9 ? 8 is defined as a set of labels which consists of 8 and its ancestors. For example, Figure 3 shows a taxonomy on vertex labels. The value of 9 ? ? is equal to  ? ? ? & .

Given graphs ?  and ? ?  , if a function  ? ? ? ? ? ? ? ? ? satisfies  1. ? ? ? ? ? ? ? ? ? ? ? ? ? 9 ? ? ? ?  ? ?   , and 2. ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 9 ? ? ? ?  ? ? ? ?  ? ? ?   ,  ? ? is a subgraph of  ? , which is represented as  ? ? < ? .

The function  is injective and is not surjection. For the graphs  ? and  ? ? , total occurrence of  ? ? in  ? with respect  to the function  is represented as = ? = 6 ? ? , where = ? = 6 ? ?  does not contain any duplications of occurrences. For ex- ample, given a taxonomy on vertex labels and two labeled  graphs ? ? and @ ! in Figure 3, although vertices ? B ? D of  @ ! correspond to vertices ? F ? B , ? F ? D , ? F ? H , and ? H ? F of? ? , respectively, = ? = 6 ? ? is equal to  ? F ? B ? ? F ? D ? ? F ? H & , because ? F ? H and ? H ? F are duplicates.

Given a set of labeled graph ? K ?  ? ! ? ? L ? M M M ? ? N & ,  the support O P R ? @ of a graph pattern @ is defined as O P R ? @ ? S T U V S U V Z U \ ] ^ _ U V b SS U \ S . We call a substructure whose support is greater than 0% a pattern. We call a graph pattern whose support is greater than or equal to a given minimum support level a frequent subgraph. The extracted patterns are the graph patterns contained as sub- graph in the graphs in the database. Let the total occur- rences of a pattern @ in the graph data ? ? be = ? = 6 ? ?  ? . The weighted support of the pattern @ is defined as O P R e ? @ ?f U V Z U \ ( = ? = 6 ? ?  ? ( .

If the topologies of @ ! and @ L are isomorphic and @ ! g @ L , @ ! is called a generalized pattern of @ L . ( @ L is called a specialized pattern of @ ! .) In addition, if @ ! is a gener- alized pattern of @ L and O P R ? @ !

? O P R ? @ L , @ ! is called an over-generalized pattern. As examples, given @ ! and @ L in Figure 3, @ ! is a generalized pattern of @ L , and this rela- tionship is denoted as @ ! g @ L .

The expansion of a pattern @ is to add some vertices or some edges in order to generate a larger pattern @ i . @ is a subgraph of @ i . For example, AGM [?], FSG [6], gSpan [8], FREQT [1], and TreeMiner [9] generate patterns of size j from frequent patterns of size j k B if and only if certain conditions are fulfilled.

When a dataset which consists of a set of labeled graphs, a minimum support, and a taxonomy on vertex labels and edge labels are given as inputs, the problem is to discover all frequent subgraph patterns which are contained as sub- graphs from the dataset, where the over-generalized patterns are not output.

3 Properties of weighted Supports  For the sake of simplicity, it is assumed that vertices in graphs have labels and edges do not have labels in this sec- tion. Therefore, we consider only a taxonomy on vertex labels. In addition, we consider the vertex expansion.

A straightforward approach to derive a complete set of frequent subgraphs that does not contain over-generalized patterns is to first enumerate all frequent subgraphs with the conventional methods that are integrated with the ex-  l  m n  Taxonomy Pattern P o  l n  Graph Gi  n m m  n  p q r  s  p  q  Pattern Pt  m np  q  Pattern P u  l lp  q  Figure 3. Generalized Patterns  0-7695-2142-8/04 $ 20.00 IEEE    tended definition of a subgraph, and then to remove the over-generalized patterns in post-processing. However, the set of frequent subgraphs obtained in the first step becomes too large. If we can remove the over-generalized patterns during the computation, it would be efficient. Let ? ? be a generalized pattern of ? ? which satisfies ? ? ? ? ? ? ? ?  ? ? ? ? ? ? ? . Let ? ? and ? ? be patterns into which ? ? and ? ? are expanded, respectively. For the patterns ? ? and ? ? , ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? does not always hold, so ? ? can not be removed just because ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? . In this section, it is shown that over-generalized patterns ? ? that fulfill cer- tain conditions can be removed.

Property 1. If ? ? is a generalized pattern of ? ? and  ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? holds, then ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? also holds.

? Let ? ? be a generalized pattern of ? ? , and the pattern ? ?  be a pattern into which ? ? is expanded by adding a vertex with the label   and some edges. When ? ? is expanded into  ? ? to make its topology isomorphic to the topology of ? ?  by adding a vertex with the label   and some edges, this ex- pansion is called an isomorphic expansion of ? ? and ? ? as shown in Figure 4. ? ? is a generalized pattern of ? ? .

Property 2. If a pattern ? ? is a generalized pattern of ? ? and ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? holds, then the support values of the patterns ? ? and ? ? generated by the isomorphic ex- pansion of ? ? and ? ? are equal. ? Property 3. If ? ? is an generalized pattern of ? ? and  ? ? ? ? ? ? ? ? is equal to ? ? ? ? ? ? ? ? , the supports of patterns generated by applying isomorphic expansions to ? ? and ? ? one or more times are always equal.

? If ? ? is a generalized pattern of ? ? and their weighted  support values are equal, we can remove ? ? , which does not affect the set of discovered patterns. In other words, patterns which should be output are never pruned from the search space.

4 Experiments  The proposed method to prune over-generalized patterns was integrated into AcGM (Apriori-based connected Graph  ? ? ?  ?  ? ? ?  ? ?  ? ?  ?  ? ? ?  ?  P? ?P?  ? ? ?  ?  ? ? ?  ?  G   ? ? ?? ?  ? ? ? ?? ?  ?? ? ?  ?  ? ? ?  ? P?P  G ?  ? ? ? ? ? ? ? ? ? ? ? ?  ? ? ? ? ? ? ? ? ? ? "  Figure 4. Isomorphic Expansion of ? ? and ? ?  Mining) algorithm which is an optimized version of AGM to mine only frequent connected subgraphs [4]. The inte- grated method was implemented using C++, and an IBM IntelliStation (R) with Windows (R) XP was used for the evaluation experiments, with a Xeon-2.4 GHz CPU and 2 GB of main memory installed. For testing, a real world chemistry dataset was used. In this experiment, each atom, chemical bond, atom type, or bond type in a compound cor- responds to a vertex, edge, vertex label, or edge label in a graph, respectively. The molecular structure data of car- cinogenic compounds was analyzed. This data was pro- vided by Predictive Toxicology Evaluation1, and contains information on 340 compounds. Each data entry is cate- gorized into either active or inactive. A total of 182 com- pounds are categorized into active and 155 compounds are categorized as inactive. There were 24 types of atoms in the compounds. The atomic bonds, which correspond to edges in a graph, have 4 types. The average size of the graph data is approximately 27 atoms, and the maximum size is 214.

Three methods are compared. One of them, called# % ? & ? ? ? , is a conventional AcGM algorithm that does not use taxonomy. The second methods, called  # % ? & ? ? ? , is an AcGM algorithm that uses a taxonomy and prunes over- generalized patterns during the computations. The other, called  # % ? & ? ? ( , is an AcGM algorithm that uses the same taxonomy and does not prune the over-generalized patterns.# % ? & ? ? ? counts both support values and weighted support values for each pattern, although  # % ? & ? ? ? and # % ? & ? ? ( count only the support values. A taxonomy on vertex la- bels as shown in Figure 2 was used in this experiment.

Figure 5 shows the results for computation times and the numbers of discovered frequent subgraphs for various min- imum support values for 340 compounds. The bar chart and the line chart in the figure show the number of discovered frequent subgraphs, and the computation time, respectively.

When  # % ? & ? ? ? is compared with # % ? & ? ? ? and # % ? & ? ? ( , the results show that  # % ? & ? ? ? and # % ? & ? ? ( need more computation time, because they use the taxonomy and the number of potential patterns becomes too large. When# % ? & ? ? ? is compared with # % ? & ? ? ( , # % ? & ? ? ? can find all of the frequent subgraphs that have supports greater than 2%, although  # % ? & ? ? ( could find the subgraphs with sup- ports greater than 6% within 2 hours. The more complex the taxonomy on labels becomes, the greater the difference between the computation times of  # % ? & ? ? ? and # % ? & ? ? ( .

This experiment shows that the pruning method proposed in this paper is very effective to mine generalized patterns.

The usefulness of discovered generalized patterns is examined for 337 compounds whose classes are known.

Atoms with aromatic bonds were distinguished from atoms without them in this experiment. The taxonomy on ver- tex labels as shown in Figure 6 was used.

# % ? & ? ? ? 1http://oldwww.comlab.ox.ac.uk/oucl/groups/machlearn/PTE  0-7695-2142-8/04 $ 20.00 IEEE    ? ? ? ? ? ? ?  ? ? ? ? ? ?  ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?  ? ?  ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?  !

"# $ % &'  ( $) *++ )$, &$ %" - &  ( .) /0# -  ? ?  ? ? ? ? ?  1*'0 &"  /"2 * %"2 '$3 - $1  5 6 7 8 9 ; = > ? 9 @ A 6 @ 7 C 9 @ D E F5 6 7 8 9 ; G > I D K 9 @ 9 L M O Q R S @ C @ T F5 6 7 8 9 ; U > I D K 9 @ 9 L M F5 6 7 8 9 ; = > ? 9 @ A 6 @ 7 C 9 @ D E F5 6 7 8 9 ; G > I D K 9 @ 9 L M O Q R S @ C @ T F5 6 7 8 9 ; U > I D K 9 @ 9 L M F  V W Y Y Y V W Y Y Y  Figure 5. Comp. Time and the Number of Fre- quent Subgraph v.s. Minimum Supports  and ? ? ? ? ? ? ? were applied to discover the rules as ? [  ? ? ? ] ? ] ? ? ? ^ ? _ 	 ? ] ? ? ? , where ? is a pattern. Each rule was evaluated by using a chi-square measure according to [2].

Figure 7 shows the results of the distributions of the chi- square values for the discovered rules, when the 100 most significant rules with respect to the measure were mined by both methods. The maximum chi-square value among the discovered rules by the proposed method was 28.8, while the maximum value for the conventional method was 15.8.

Figure 8 shows the discovered patterns, each of which have its maximum chi-square values. Figure 8 that the left pattern is contained in 7 chemical compounds with carcinogenic activity and 26 compounds without such activity. Figures 7 and 8 show that the proposed method can discover rules that are more significant than the existing mining algorithms.

5 Conclusion  In this paper, an efficient method was proposed to prune over-generalized patterns and discover generalized frequent subgraphs, when a set of labeled graphs and a taxonomy on vertex and edge labels are available. It abandons over- generalized patterns whose weighted supports are equal to those of their specialized patterns earlier in the computa- tions, and thereby accelerates the overall performance. The performance has been evaluated using a real world dataset and the efficiency and effectiveness of the approach have been confirmed with respect to the computation time and usefulness of the discovered patterns.

