Cross measurement process with a ZigBee sensor network

Abstract? Location systems based on Wireless Sensor Net- works (WSN) and Receiver Signal Strength (RSS) mainly depend on how the measurements are obtained. Usually, there are some mobile nodes to be located that periodically send beacon frames, which are captured by an anchor sensor network. After combining this information, the system estimates node positions.

However, it is well-known that these systems suffer from big inaccuracy problems due to environmental changes (obstacles, people, loose of line-of-sight, etc.), that produce fluctuations on RSS level. We introduce a cross measurement process to obtain more RSS data, getting information among the anchors and making possible to detect these changes, to perform appropriate fixes and calibrations.



I. INTRODUCCIO?N  WSN are an effective mechanism to build location systems [1][2]. According to the used technology to implement the WSN, it is necessary to capture different physical parameters.

These parameters are needed to estimate distances and, there- fore, to predict a device position. In this paper we used the ZigBee technology to implement a WSN, due to the ultra- low power consumption mode it offers. Therefore, location is based on Received Signal Strength (RSS) information.

The performance of location systems based on WSN and RSS information crucially depends on the quality of the ob- tained measurements and how these levels adapt to a particular propagation model [3]. It is well known that these power levels randomly vary according to environmental conditions (obstacles, moving people, loss of the line-of-sight, etc.).

However, this variations can be statistically modelled using small and large scale propagation models [3].

Even if we use a propagation model that fits well enough the environmental propagation conditions, there are factors such as loss of line-of-sight among nodes, which produce significant changes in the propagation conditions [4]. These factors make the multipath components acquired great importance and, therefore, used models may be no longer valid.

These systems are typically based on periodic transmissions of pilot packets from mobile nodes, which are captured by an anchor node network1. Typically, signal levels among the mobile node and the anchors are the only used, because they are enough to estimate the mobile node position by means of a more or less advanced location technique (multi-lateration [1], particle filtering [5][6], etc.). All of these techniques always  1An anchor nodes is a node whose position is fixed and known.

suffer some problems when the measurements do not adapt to the raised propagation model.

As a possible improvement to the problems faced by these systems due to environmental changes, we propose an incre- ment of available RSS measurements, to better detect these changes. If some changes among several anchor nodes were detected, we could make all kind of decisions: measurement correction with respect to any node, recalibrate the location algorithm, give more or less weight to some of the network nodes, etc.

In this paper we introduced an easy and economical way to build a ZigBee network, for obtaining cross measurements among all network nodes, not only among mobile and anchor nodes. The proposed system has the following features:  An efficiency and simplicity. Small and efficient code, with low computational cost.

A cheap and small-sized hardware by using XBee mo- dules from Digi manufacturer [7] and Arduino boards [8].

A high immunity to collisions by sending packets ape- riodically.

The ability to increase the number of anchor nodes on the fly and thus improve the system accuracy. Without reprogramming mobile or anchor nodes, or relaunching the location application.

A high autonomy for mobile nodes powered by batteries taking advantage of ZigBee sleep modes.

It is a completely wireless packet relaying system by using the WSN.

This article is divided into the following sections: In Section II we describe the hardware structure and the role played by each node of the WSN. In Section III we explain in depth the packet relay process among the different nodes of the system.

In Section IV we show how the packet relay algorithm is implemented in the anchors. In Section V we explain how the host processes the received frames via UART and how creates the RSS table with the cross measurements among all the WSN nodes. Finally, we expound some conclusions in Section VI.



II. HARDWARE  The raised system consists of three types of nodes: Mobile node: It sends beacon frames aperiodically in order to avoid collisions with other mobile nodes. It falls     in sleep mode after sending each packet to ensure a high autonomy of its batteries. The sleep period is set randomly between a minimum and a maximum values.

Anchor node: It has a fixed and a known position. It listens for packets sent by mobile and anchor nodes, which must be relayed by means of the logic explained later in this article in Sections III and IV. It is mandatory to main power it because this kind of node never sleeps and it should always be ready for relaying packets.

Gateway: It is and special anchor node, which only listens for packets sent by the other nodes. It never relays packets and it is connected to a host where a location algorithm will be running.

DOUT  DIN  RXD TXD  INT0  ON/SLEEP  AT M E G A  FTDI FT232R  Fig. 1. Mobile node hardware  DOUT  DIN  RXD TXD  AT M E G A  FTDI FT232R  Fig. 2. Anchor node hardware  DOUT  DIN  RX D  TX D  FTDI FT232R  Fig. 3. Gateway hardware  To implement the WSN we have chosen the combination of Arduino [8] boards (which contain an Atmel microcontroller) and XBee series 1 modules [7], mainly due to their low cost.

Actually, the XBee series 1 module version does not imple- ment the ZigBee layers, only the layers of the IEEE 802.15.4  Fig. 4. Arduino board on the left, and XBee-Shield on the right.

standard. Their PHY and MAC layers are enough for the location proposes. All network nodes use the same hardware, which simplifies the deployment. It only changes the program that runs in the Atmel microcontroller of each node, except for the Gateway node that does not need the microcontroller.

The Gateway redirects all incoming data (wirelessly received) to a Host via USB, by using its FTDI FT232R [9] transceiver.

A photo of these two parts is shown in Figure 4.

Figures 1, 2 and 3 show the scheme of interconnection among the different parts (Atmel microcontroller, XBee mo- dule and FT232R transceiver), of the three types of nodes.

The anchor nodes must be main powered so their parts (Atmel microcontroller and XBee) never enter into a low power mode (sleep).

The mobile nodes, however, configures its XBee module to enter in a cyclic sleep process by means of a sleep period marked by the Atmel microcontroller. Instead, the microcontroller also enters in sleep mode when it finishes to send the configuration data to the XBee module via UART.

Therefore, it must be added a line between the XBee module (ON/SLEEP pin) and the microcontroller (INT0 pin), so that the XBee can wake up the microcontroller when his cyclic sleep period expires. This will provide a high autonomy to the batteries of mobile nodes, although it is not an optimal autonomy due to the wrong design of the Arduino power supply.

Finally, the gateway node can do without the microcontro- ller as shown in Figure 3. It wirelessly receives data and passes they to the Host via USB in real time. In Section V we will explain in detail the format of the received frames and how we unpack them in the Host to obtain the desired RSS data.



III. PACKET RELAY PROCESS  The raised cross measuring process is divided into three easy steps and their operation is independent of the number of anchor nodes present in the WSN. Figure 5 illustrates these 3 steps when a WSN composed of 4 anchors is used. For simplicity, the raised process is presented in a situation where all nodes have direct access among them. However, it is not difficult to extrapolate this behavior to a larger network, where RSS data of closest nodes is collected.

0 1  F   F(?)RSSF-0 F(?)RSSF-1  F(?)RSSF-2 F(?)RSSF-3  RSSF-0  RSS Table   F   3 2  1(F(?)RSSF-1)RSS1-0  1( F(  ?)R SS  F- 1)R  SS 1-   2(F(?)RSS F-2 )RSS  2-0  3(F(?)RSS F-3 )RSS  3-0  1( F(  ?)R SS  F- 1)R  SS 1-   3(F(?)RSSF-3)RSS3-1  3(F(?)RSSF-3)RSS3-2  2(F(?)RSSF-2)RSS2-3  2(F(?)RSS F-2 )RSS  2-1  RSSF-0 RSSF-1 RSSF-2 RSSF-3  RSS1-0 RSS2-0 RSS3-0  RSS Table  0 1   F  RSSF-0 RSSF-1 RSSF-2 RSSF-3  RSS1-0 RSS2-0 RSS3-0  RSS Table  1(3(F(?)RSSF-3)RSS3-1)RSS??1-0 1(2(F(?)RSSF-2)RSS2-1)RSS?1-0  2(3(F(?)RSS F-3 )RSS  3-2 )RSS??2-0  2(1(F(?)RSS F-1 )RSS  1-2 )RSS?2-0  3(2(F(?)RSS F-2 )RSS  2-3 )RSS??3-0 3(1(F(?)RSS  F-1 )RSS 1-3 )RSS?3-0  RSS1-2  RSS2-1  RSS1-3  RSS3-1  RSS2-3  RSS3-2  RSS?1-0 RSS?2-0 RSS?3-0  RSS??1-0 RSS??2-0 RSS??3-0  Fig. 5. Steps 1, 2 and 3 respectively.

III-A. Step 1  A mobile node that is in a sleep state automatically wakes up when his XBee cyclic sleep period expires. First, the XBee wakes up the Atmel microcontroller (also in sleep state) by posting an interruption (using the INT0 input). This is automatically done by the ON/SLEEP XBee pin after a wake up. The Atmel microcontroller resumes its execution at the same point where it left before to sleep. Then, the microcontroller sends a small broadcast packet (destination 0xFFFF) to the network, with 1 byte in the Payload. This packet will be received by all nodes in the network (if there are no collisions). Afterwards, it calculates the new pseudo-random sleep period for the XBee module, between a predetermined minimum and maximum values fixed in the code. It passes it to the XBee module by sending a ATSP (Sleep Period) command [11], with possible values between 10 ms and 268 sec. And finally the Atmel himself switches off all the hardware parts unneeded (ADCs, I2C and SPI ports), and enters into Power-down mode [12]. This is the most deepest way of saving energy, getting a power consumption of less than 5 ?W for the microcontroller.

Start Delimiter              Length                      Frame Data                       Checksum  0x7E MSB LSB API-Specific Structure 1 Byte  0x81  API Identifier Identifier-specific Data  cmdData  MSB LSB  Source Addr.

(bytes 5-6)  RSSI (byte 7)  Received Signal Strength Indicator Hex. equivalent of (-dBm) value.

i.e. ?0x28? (40 decimal) => -40 dBm  Options (byte 8)  bit 0, 3-7 [reserved] bit 1: Address broadcast bit 2: PAN broadcast  Payload (byte(s) 9-n)  Up to 100 Bytes/packet  Fig. 6. RX (Receive) packet: 16-bit Address  When this step is completed, each anchor node close to the mobile node should have detected detected the same receive packet (RX) but with different RSS level. Note that, if the Gateway (address 0) and the mobile nodes are in range, we will get the RSS information about the link F?0, denoted by  RSSF?0 (between the transmitter F and the receiver 0).

Figure 6 shows the structure of each RX (Receive, API  Id.=0x81) frame, where the byte 7 contains the RSS level (in dBm) and the bytes 5 and 6 contain the Source Address, which identifies the broadcast transmitter node. The Length field includes the total length of Frame Data so that we can easily calculate the length of the Payload by computing Length? 5 (minus 1 byte of API Id., 2 bytes of Source Addr., 1 byte of RSSI and 1 byte of Options).

III-B. Step 2  The closest anchor nodes to the mobile node that received the packet from the previous step, detect that the received packet has the right length to be relayed. This is explained in depth in Section IV. They create a new packet by putting into a new Payload the following information:  Source Addr. + ?(? + Payload + ?)? + RSSI  Note that the length of new Payload is always equal to the size of the previous Payload+5, because we add 2 bytes of Source Addr.), other 2 characters ?(? and ?)?, and 1 byte of the RSSI to be relayed. For simplicity, we will use the Payload RX notation to refer to the Payload of the received packet and Payload TX for the new expanded Payload.

They wait a pseudo-random period of time (between a mi- nimum and maximum default values) and simply re-broadcast the new composed packet. This pseudo-random time value is also set to avoid collisions with other anchors.

All nodes in the network will receive Na ? 1 packets after this step, with Na the number of anchor nodes (not including the Gateway node).

After this second step, the Gateway has RSS information of the links among the mobile node (F) and all the anchor nodes in range. In addition, it also has cross information of the anchors that are 1-hop from him, but it still has no information of the links among the other anchors (links RSS1?3, RSS1?2 and RSS2?3).

III-C. Step 3  The anchor nodes detect that the received packets in the previous step has the right length to be relayed. They create a new packet identically than in the previous step, by putting the Source Addr. in front of the previous Payload and the detected RSSI behind. They wait another pseudo-random period of time and simply transmit the new packet. This time, instead of broadcasting it, they sent it directly to the address 0, which it is always the Gateway node.

Since we are considering direct connection among nodes, upon completion of this step, the Gateway has information passed among all the nodes. It has this information duplicated for all the links at more than 1-hop from it (RSSx?y and RSSy?x links) and Na times replicated for the direct links at 1-hop from it (RSSx?0). Note that each intermediate relay brings a new RSS level, and there are 1 relay in Step 2 and Na ? 1 relays in Step 3.

When the mobile node is re-awakening all this process will start again, as shown in Figure 9.

void l oop ( ) { i f ( S e r i a l . a v a i l a b l e ( ) ) {  / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / P a c ke t d e t e c t i o n / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /  Read one b y t e i f ( t h e f i r s t b y t e != S t a r t D e l i m i t e r 0x7E ) {  / / Wrong s t a r t d e l i m i t e r => Empty s e r i a l b u f f e r } e l s e {  Read Frame?Data Length ( b y t e s 2?3) Read API I d e n t i f i e r ( b y t e 4 ) i f ( API I d e n t i f i e r != RX Packet 0 x81 ) {  / / Wrong API Id . => Empty s e r i a l b u f f e r } e l s e {  Read Source Addr ( b y t e s 5?6) Read RSSI ( b y t e 7 ) Read O p t i o n s ( b y t e 8 )  f o r ( i =0 ; i<Length?5; i ++) { Read Payload RX [ i ]  } Read Checksum (1 b y t e )  / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / P a c k e t r e l a y / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / P a c k e t r e l a y code  } } } }  Fig. 7. Packet detection code

IV. ANCHORS PACKET RELAY ALGORITHM The pseudocode in Figure 7 represents the overall structure  of the code stored in the anchor nodes, which act as packet relayers. The code is contained within a infinite loop (loop()), which is divided into 2 simple parts that are processed each time some bytes appear in the UART [12] (pin RXD) of Atmel microcontroller, sent from the XBee radio module (pin DOUT):  1. Packet detection: We read the header data of RX (Receive, API ID = 0x81) received packets. If something wrong is detected then it empties the input buffer and waits for more bytes (new packets).

/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / P a c k e t r e l a y / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / The p o s s i b l e p a c k e t l e n g h t s are : / / 6 = 5 + [1 b y t e i n Payload ] <?? i n S t e p 2 / / 11 = 5 + [3+(1)+2 b y t e i n Payload ] <?? i n S t e p 3 / / / / We compose t h e new Payload as : / / Source Addr + ? ( ? + Payload RX + ? ) ? + RSSI / / 2 1 Length?5 1 1 / / / / New pay load l e n g t h : 2+1+( Length?5)+1+1 = ( Leng th ) / / New p a c k e t l e n g t h : ( Leng th )+5 Length TX = Length +5;  / / We compose t h e new Payload TX as : / / Source Addr + ? ( ? + Payload RX + ? ) ? + RSSI Payload TX [ 0 ] = ( b y t e ) ( Source Addr >>8); Payload TX [ 1 ] = ( b y t e ) Source Addr ; Payload TX [ 2 ] = ? ( ? ;  f o r ( i =0 ; i<Length?5; i ++) { Payload TX [3+ i ] = Payload RX [ i ] ;  }  Payload TX [3+ i ] = ? ) ? ; Payload TX [4+ i ] = RSSI ;  / / We c a l c u l a t e t h e new Checksum : ?Not i n c l u d i n g frame / / d e l i m i t e r s and l e n g t h , add a l l b y t e s k e e p i n g o n l y t h e / / l o w e s t b y t e o f t h e r e s u l t , and s u b s t r a c t from 0xFF ? .

/ / / / The new TX p a c k e t have t h i s s t r u c t u r e : / / API ID =1 , Frame ID =0 , D e s t i n a t i o n A d d r , / / O p t i o n s =0 and Payload / / / / Checksum = FF ? (1+0+ D e s t i n a t i o n A d d r +0+Payload ) & FF  / / I f Leng th==6 t h e n / / We are i n ? S t e p 2? ?> Send B r o a d c a s t r e l a y i f ( Length ==6) {  D e s t i n a t i o n A d d r = 0xFFFF ; accu = 0xFF ; / / b y t e accu = 0 x01 + 0xFF + 0xFF  } e l s e { / / E l s e / / We are i n ? S t e p 3? ?> Send r e l a y t o Gateway D e s t i n a t i o n A d d r = 0 x0000 ; accu = 0x01 ; / / b y t e accu = 0 x01 + 0 x00 + 0 x00  }  f o r ( i =0 ; i<Length ; i ++) { accu += Payload TX [ i ] ;  } Checksum TX = 0xFF ? accu ;  / / Sma l l random d e l a y t o a v o i d c o l l i s i o n s d e l a y ( random ( 3 0 , 5 0 ) ) ;  / / We r e l a y t h e new p a c k e t send packet TX ( ) ;  Fig. 8. Packet relay code  2. Packet relay: We detect if the received packet must be relayed. According to the Length of the packet, we know if we are in the Step 2 or 3 and, therefore, if we have to broadcast or unicast (to the node Gateway) the new packet. The Payload TX is composed (with the format explained in the Step 2) and the new Checksum. Then we send the new TX (Transmit, API ID = 0x01) [11] packet.

This is achieved simply by writing the new frame bytes out to the Atmel UART with an extra Carriage Return (0x13) byte to mark the end of the packet. These bytes will go from the TXD Atmel pin to the DIN XBee pin.



V. FRAME PROCESSING IN THE HOST  The Gateway node is directly connected to the Host by USB, but the Host actually communicates with a UART (standard RS-232 serial port). This is transparently done through the FTDI FT232R transceiver [9] integrated in the Arduino board.

The XBee module of the Gateway must be simply confi- gured in API mode [11] with an UART bitrate high enough to process many frames that can come from multiple mobile nodes. We used an 115200 bps port speed.

All received packets by the Gateway XBee module will go out via DOUT pin directly to the Host and through the FT232R transceiver, which makes the timely UART?USB conversion.

The Host must perform the following tasks in order to get the final RSS table with the cross measurements among all network nodes. The goal is to print this table to the standard output (stdout), according to the following format:  Timestamp TransmitterID ReceiverID RSSTxID?RxID  From the Host, we open a connection at 115200 bps with the according serial port and we enter in an infinite loop where we perform the following steps:  1. We decode RX (API Id.=0x81) frames as explained in the pseudocode in the previous section, extracting the Frame-Data Length (byte 2-3), Source Addr (bytes 5- 6), RSSI (byte 7) and Payload (Length-5 bytes).

2. We get the current system time in UNIX timestamp format [10] (in miliseconds).

3. We write to stdout: ?Timestamp Source Addr 0 RSSI?, where the Source Addr at this level corresponds to the transmitter and the Gateway (0) to the receiver.

4. We switch according to the Length the reveived packet.

The length can be 6, 11 or 16, as explained in the previous section, to detect if we are in Step 1, 2 or 3.

a) Length=6: We do not have to decode anything since the Payload is 1 byte length and the packet was directly sent from a mobile node.

b) Length=11: 1) We extract the first 2 bytes of the Payload RX  that corresponds to TransmitterID of the pre- vious hop.

2) We extract the last byte of the Payload RX that corresponds to the observed RSSI of the previous hop.

3) We write to stdout: ?Timestamp TransmitterID Source Addr RSSI? where, in this case, the Source Addr corresponds to the ReceiverID of the previous hop.

4) We do not have to decode anything more be- cause the remaining Payload is 1 byte length.

c) Length=16: We follow the same process as in point b) until the remaining Payload length is 1. We unpack the Payload of each packet by removing the first 3 and last 2 bytes of the previous Payload and assign at each step Source Addr?TransmitterID of the previous step.

F      0 500 1000 1500 2000 2500 3000 3500 4000  t(ms)  St ep  W  ak eU  p Br  oa dc  as t  Sl ee  p  Node  Node  Node  Node  Node  Sleep Period = 1000  W ak  eU p  Br oa  dc as  t Sl  ee p  Sleep Period = 925 (700,1300) (700,1300)  W ak  eU p  Br oa  dc as  t Sl  ee p  Sleep Period = 1250 (700,1300)  W ak  eU p  Br oa  dc as  t Sl  ee p  St ep   St ep   St ep  St  ep  St ep   St ep  St  ep  St ep   Fig. 9. Runtime chart

VI. CONCLUSIONS This paper introduces a new method to obtain cross RSS  data among all the nodes of a ZigBee sensor network.

Although the main RSS information is given by the links among mobile and anchor nodes, our method gives us a richer information taking into account the links among the anchors.

This extra information can be used by a location algorithm to recalibrate its parameters or adapt to propagation changes in the environment. This paper explains how this method can be implemented in only three steps, indicating the basis of the ZigBee packets used to implement it.



VII. ACKNOWLEDGEMENTS This work has been supported by: 07TIC019105PR (Xunta  de Galicia, Spain) and TSI-020301-2008-2 (Ministerio de Industria, Turismo y Comercio, Spain).

