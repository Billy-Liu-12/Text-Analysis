Using Genetic Algorithm to Improve an Online  Response System for Anomaly Traffic by Incremental

Abstract?This paper presents an online real-time network response system, which can determine whether a LAN is suffering from a flooding attack within a very short time unit.

The detection engine of the system is based on the incremental mining of fuzzy association rules from network packets, in which membership functions of fuzzy variables are optimized by a genetic algorithm. The proposed online system belongs to anomaly detection, not misuse detection. Moreover, a mechanism for dynamic firewall updating is embedded in the proposed system for the function of eliminating suspicious connections when necessary.

Keywords: Fuzzy association rules, online incremental mining, membership functions, genetic algorithm, anomaly detection

I.  INTRODUCTION Many approaches have been proposed in previous literature  concerning the design of anomaly NIDSs (Network Intrusion Detection Systems), such as fuzzy association rules [1, 2, 3, 4, 5, 6]. However, all of the above anomaly NIDSs emphasize effectiveness, but neglect efficiency. Usually, effectiveness is measured by detection rate, false alarm rate, etc., and efficiency is measured by response time when an attack has occurred.

Much research into anomaly NIDS has evaluated the proposed approach by KDD CUP99 TCPDUMP datasets [7], which meant that the research was designed for offline use and, thus, could not meet the real-time characteristic of a NIDS. This was because the 41 features presented in KDD CUP99 are complicated and varied [8, 9]: the first 9 are intrinsic features which describe the basic features of individual TCP connections and can be obtained from raw TCPDUMP files; features 10 to 22 are content-based features obtained by examining the data portion of a connection and suggested by domain knowledge; features 23 to 31 are traffic-based features computed using a two-second time window (?time-based?); while features 32 to 41 are also traffic-based features, but computed using a window of 100 connections (?host-based?).

In this paper, the proposed online system is an anomaly NIDS which can detect and respond to flooding attacks in real- time. It is based on a genetically optimized incremental mining algorithm for fuzzy association rules. That is, we focus on how to create an anomaly NIDS, based on genetic optimized mining of fuzzy association rules, which can detect and react to a flooding attack in real-time. In contrast to traditional static mining for NIDS designs [1, 2, 3, 4, 5, 6], which can only be applied to offline NIDS, this system was designed based on an incremental mining approach, which enables the system to make a decision per time unit. In addition, a genetic algorithm was applied to help select the best membership functions for the fuzzy variables of mining. Consequently the performance of the proposed response system can be improved.

The remainder of this paper is organized as follows: Section 2 presents background knowledge, including fuzzy association rules and membership functions; Section 3 introduces the genetically optimized incremental mining algorithm for fuzzy association rules; Section 4 describes the online response system proposed by this research; Section 5 provides experimental results; and Section 6 presents our conclusions.



II. RELATED WORKS Fuzzy association rules have been receiving a great deal of  attention recently, and have had many applications in different fields [1, 10, 11]. In fuzzy association rules mining, membership function designs are important, and usually have profound affects on the mined rules. This section will briefly introduce the mining of fuzzy association rules, and the characteristics of membership functions.

Agrawal and Srikant proposed the well-known Apriori algorithm [12] in 1994 in which, given two thresholds of mini_sup and mini_conf, the algorithm will find all such rules as ?X ? Y? with support ? mini_sup and confidence ? mini_conf, where X and Y are subsets of the set of items, and X ? Y = ?. The rule X ? Y in the database D has support s if the  International Symposium on Parallel and Distributed Processing with Applications  DOI 10.1109/ISPA.2010.75     percentage of records in D that contain X ? Y is s, and has confidence c if the ratio of the number of records in D that contain X ? Y to the number of records in D that contain X is c.

Since the Apriori algorithm was designed for mining in databases with binary items, fuzzy association rules mining [13, 14, 15] has been one of the variations which has dealt with quantitative items.

While applying fuzzy association rules to an IDS (intrusion detection system) design, the term item, is replaced by the term feature, and thus, the term itemset is equivalent to the term feature-set, which is a set of features. Let D = {r1, r2, ?, rn} be the database and I = {x1, x2, ?, xm} represent all features appearing in D. The record ri represents the ith m-tuple in D.

Each quantitative feature xk, 1 ? k ? m, is associated with some fuzzy variables, say v1, v2, ?, vt. Every fuzzy variable is represented by a membership function. For easy representation in the following, MFxi.vj, 1 ? i ? m and 1 ? j ? t, is used to uniquely denote the jth membership function of feature xi. In the mining of fuzzy association rules [10, 15], a fuzzy itemset consists of two parts: items and fuzzy variables, say <X, U>, where X = (x1, x2, ?, xk) ? I is a collection of items (or features) and U = (v1, v2, ?, vk) is the collection of corresponding fuzzy variables to X in order. Suppose there are totally n records in the database. Then the support of <X, U> is computed as:  Sup (<X, U>) = ,  ])[(  1 1 n  xrMF n  i  k  j jivx jj??  = = ?    where ri[xj] denotes the value of feature xj of the ith record. For example, suppose four features, #packet, #SYN, #ACK, and #connection, are of concern in a NIDS, and each feature has three fuzzy variables, say low, medium and high, then 4 ? 3 = 12 membership functions are involved, i.e., MF#packet.low denotes the low function of feature #packet, MF#ACK.high denotes the high function of feature #ACK, etc. Suppose there are three records in the database, as shown in Table 1. Then the support of the fuzzy itemset <(#packet, #SYN, #connection), (low, medium, low)> is computed as (MF#packet.low(3260) ? MF#SYN.medium(135) ? MF#connection.low(27) + MF#packet.low(2170) ? MF#SYN.medium(75) ? MF#connection.low(65) + MF#packet.low(6123) ? MF#SYN.medium(213) ? MF#connection.low(89)) / 3.

TABLE 1 Records in Database, for an Example  #packet #SYN #ACK #connection  3260 135 75 27  2170 75 43 65  6123 213 27 89    A fuzzy association rule has the form of ?<X, U> ? <Y, V>?, where <X, U> and <Y, V> are two fuzzy itemsets and X ? Y = ?. Let Z = X ? Y and W = U ? V, where ? is the  concatenation operation. The support of the fuzzy association rule ?<X, U> ? <Y, V>? is computed as Sup (<Z, W>), and the confidence of the rule is computed as Sup (<Z, W>) / Sup (<X, U>). For example, let us consider the following fuzzy association rule.

<(#SYN, #ACK), (high, low)> ? <(#connection), (medium)>.

//if #SYN is high and #ACK is low, then #connection is medium   Its support is computed as Sup(<(#SYN, #ACK,  #connection), (high, low, medium)>), and its confidence is computed as Sup(<(#SYN, #ACK, #connection), (high, low, medium)>) / Sup(<(#SYN, #ACK), (high, low)>).

According to the proposed algorithm [16], packet information was collected to form one record every short time unit, and to mine out the newest rule set as the latest record was being gathered. Each current support value of a fuzzy itemset was kept in the memory for a time unit. As the next record was being gathered, the algorithm used the current support value to compute the next one, and then replaced it with the new one, as shown in the example below. Suppose the quantitative values of the four features, #packet, #SYN, #ACK and #connection, are measured for each time unit, and in sequence they are t1 = (97, 310, 66, 311), t2 = (215, 208, 75, 210), t3 = (62, 710, 41, 88), ?, ti = (230, 86, 31, 720), ?. For the fuzzy itemset <X, U> = <(#packet, #SYN, #connection), (low, medium, low)>, its support value s at t1, t2, t3, ?, ti, ?, is computed individually as:  st1 = (MF#packet.low(97) ? MF#SYN.medium(310) ? MF#connection.low(311)) /1 ? tmp;  st2 = (tmp ? 1 + (MF#packet.low(215) ? MF#SYN.medium(208) ? MF#connection.low(210))) / 2 ? tmp;  st3 = (tmp ? 2 + (MF#packet.low(62) ? MF#SYN.medium(710) ? MF#connection.low(88))) / 3 ? tmp;  ? sti = (tmp ? (i-1) + (MF#packet.low(230) ? MF#SYN.medium(86) ?  MF#connection.low(720))) / i ? tmp.

?

III. GENETIC OPTIMIZATION OF MEMBERSHIP FUNCTIONS As discussed in Section 2, two important keys need to be  addressed for a successful NIDS, which are based on fuzzy association rules. One is applying incremental mining, instead of static mining, to meet real-time demands. The other is a deliberate design for membership functions. Based on the incremental mining algorithm [16], the paper further extends the algorithm to design an online response system with genetic optimization in membership functions.

Membership functions design is important, and they usually have profound affects on the mined rules. This research adopts     a genetic algorithm to select the best membership functions for the features applied in the proposed NIDS system. The membership functions applied in this paper are listed below, in which abs( ) is the absolute function, ^ is the power operation, and a, b, c, d, e, f, g, and h are the constants. The output value of a membership function falls in the interval of [0, 1]. Each feature has its own membership functions, i.e., with different constants from feature to feature. The goal of a genetic algorithm is to derive the most appropriate membership functions for every feature. As shown in Figure 1, for a feature, its membership functions before and after genetic evolution, are depicted by solid lines and dashed lines, respectively.

Membership functions:  Low: f ( x ) = 1 / ( 1 + abs(( x - a) / b) ^ c ) Medium: f ( x ) = 1 / ( 1 + abs(( x - d) / e) ^ f ) High: f ( x ) = 1 / ( 1 + exp( -g( x - h) ) )     Figure 1 Membership functions before and after genetic  optimization       Figure 2 Gene and chromosome structures of evolution    Suppose n features are considered in the NIDS design, then one chromosome in the genetic algorithm contains the n features? membership functions, as defined in Figure 2. The first chromosome in the experiment was constructed heuristically. An initial population, containing 30 chromosomes, was derived from the first chromosome by  repeated application of the mutation process. In each generation, the fitness of each new chromosome was evaluated according to the performance of the proposed NIDS, using the fuzzy membership functions represented by the chromosome, i.e., the fitness function of the genetic algorithm was to maximize the overall accuracy in a given labeled dataset. A specified percentage of the chromosomes with high fitness were retained for the next generation. Then, parent chromosomes were repeatedly selected from the current generation, and new chromosomes were generated from these parents by crossover and mutation. One generation ended when the number of chromosomes for the next generation had reached the original population, i.e., 30 chromosomes. The evolution process was repeated for 250 generations.



IV. THE PROPOSED SYSTEM In the training stage, attack-free network traffic information  was collected at the rate of one record every two seconds, and the genetic optimized membership functions were derived in advance from a labeled dataset. The online response system consists of four modules. Module_A collected run-time network traffic information online, at the rate of one record every two seconds, and consistently sent the records to module_B. Module_B applied the genetically optimized incremental mining algorithm to generate the newest fuzzy rule set every two seconds. At the same time, module_C also performed the algorithm every 2 seconds on the attack-free data records, i.e., adding one new attack-free record every 2 seconds to the set of mined data records. The two newest rule sets from module_C and module_B were then sent to module_D for comparison, again, once every two seconds. If their similarity was below the threshold, an anomaly of network traffic could be found. Once an attack had been detected, three actions resulted: an alarm was inserted into the database, module_A was required to gather more detailed information about the attack and, finally, the filtering rule in the firewall could be changed dynamically. In the implementation, a round-robin strategy was applied on the attack-free records in module_C.

In this paper, the similarity between the two rule sets was defined as follows. Let S1 and S2 be two rule sets. The similarity between them was computed as:    sim(S1, S2) =  S  SCORE S  SCORE ?  ,                       (1)  where |S1|, |S2| represent the number of rules in the sets,  ? ??  =  ),(1 2 Sr  SrscoreSCORE , and ???  =  ),(2 1 Sr  SrscoreSCORE .

For a single rule r with support s and confidence c and a rule  set S, score(r, S) was defined as:     If there is a rule r? = r in S with support s? and confidence  c?, then score(r, S) = )),max( ,  ),max( max(1  ss ss  cc cc  ?  ?? ?  ?? ? , else  score(r, S) = -max(c, s).                                                         (2)    Two rules, r and r?, are regarded as r = r?, if they have the same antecedents and consequents. Finally, let SCORE1 or SCORE2 be 0 if it was a negative value. In our system, for any fuzzy itemset, its support was computed by:  Current support = support due to the latest record * k + support due to all historical records * (1 ? k), where k is a constant between 0 and 1.                                                        (3)  For a NIDS design, the importance of the latest data record should be greater than that of any single historical data record.

Three cases of k, k = 0.2, k = 0.5, and k = 0.8, were studied in the experiments.



V. SIMULATION RESULTS AND ANALYSES Although four attack categories, i.e., DoS, Probe, U2R, and  R2L, have been identified in KDD CUP99 datasets [7], all of the related works in the literature based on fuzzy association rules 11, 2, 3, 4, 5, 6] have applied only one or two flooding attacks for evaluation: El?Semary et al. [1] used one attack named ipsweep to evaluate their system; Bridges and Vaughn [2] applied another attack named mscan to demonstrate their method?s effectiveness; Florez et al. [3] applied mailbomb to show their performance; Dickerson et al. [4] applied two kinds of attacks, TCP port scans and ICMP (ping) scans in their experiments; Hossain et al. [5] used portscan to show their effectiveness; while Shanmugam and Idris [6], as [2], applied mscan.

The reason for applying only one or two flooding attacks to the evaluations in [1, 2, 3, 4, 5, 6] may have been due to the following two considerations. First, in order to detect the other two kinds of attacks, U2R and R2L, in KDD CUP99 datasets, a NIDS has to check the packet payload because the malicious actions are due to content-based features, suggested by domain knowledge, in the data portion of a connection. As mentioned in the Introduction, the 41 features presented in KDD CUP99 are complicated and diverse. The above anomaly NIDSs [1, 2, 3, 4, 5, 6] that were based on fuzzy association rules checked only headers without packet payloads. However, U2R and R2L do not cause any malformation of packets or packet violation to network protocols. Secondly, the amount of packets generated by U2R and R2L in KDD CUP99 may be negligible in huge background traffic. Thus, there may have been no significant difference between rules mined from attacked online network traffic and rules mined from attack-free network traffic.

Attacking tools were downloaded from the VX Heavens website (http://vx.netlux.org/) which is maintained by the well- known Antivirus Lab, Kaspersky. A total of 47 attacking tools of flooding were studied for this research. In the experiments of  this section, a commercial application named IP Traffic [17] was applied to produce background traffic which can generate any amount of TCP/UDP/ICMP packets by hardware limit.

Two hosts running IP Traffic played sender and receiver, respectively, and the receiver in the LAN and the sender transmitting packets was deployed through the Internet. During the experiments of this study, the amount of network traffic remained from 0 to 80 Mbps through random connection and random flow size. One laptop launched flooding attacks against the victim located in the LAN through the Internet. Our system, deployed in the LAN, was coded by Microsoft Visual C++ - MFC and run on a laptop with Windows XP. A total of 1000 attack-free traffic records were derived from IP Traffic in advance and stored in the database, one at a time for every two seconds. As these records in the database were exhausted, they were cyclically reused.

All of the 20 features applied in this research are listed in Table 2, which were all derived from IP, TCP, UDP, ICMP, ARP, and IGMP headers. They were adopted to collect packet information and generate one record every two seconds. Every feature in Table 2 had three degrees: low, medium, and high.

TABLE 2 Feature List  TCP: S.IP+SYN count TCP: S.IP+URG_Flag+URG_data count TCP: S.IP+ACK_Flag+ACK count ARP: S.IP+ARP count  IP: D.IP slots hit IP: Header length!=20 count  IP: MF_Flag count IP: (Total length>1400 || <40) &&TTL == 64 count IP: checksum_error count TCP: ACK_Flag+ACK count  TCP: checksum_error count TCP: SYN count UDP: Same_length_interval count UDP: length distribution count  ICMP: Type error count ICMP: checksum_error count ICMP: S.IP+ICMP packets count ICMP: ICMP packets count IGMP: checksum_error count IGMP: Length>1000 count     Three cases of k in Eq. (3), k = 0.2, k = 0.5, and k = 0.8, were considered separately in the experiments. Detail of the similarity in degradation from the win32.fakeping attack is illustrated in Figure 3. A win32.fakeping attack was remotely launched at the fifth time unit lasting for 10 time units of flooding; the attack was stopped at the fifteenth time unit. This system deployed in the LAN showed that the similarity began to degrade at the sixth time unit, even more so during the next ten units, and then started to upgrade at the sixteenth time unit.

If the threshold of similarity is set to 0.5, the system, for the case of k = 0.2, would generate the first alarm at the seventh time unit (similarity value = 0.483554) and the last alarm at the twentieth time unit (similarity value = 0.478354). Ideally, the NIDS system in the LAN should show an alarm at the sixth time unit because an attack has occurred and to end the alarm at the sixteenth time unit because the attack has disappeared.

Since historical data records are taken into consideration in the incremental design, it may be difficult for the similarity to     immediately go down below the threshold as an attack occurs, and immediately go up above the threshold as the attack disappears. The smallest similarity value was 0.124654 for the case of k = 0.2 in Figure 3, occurred at the fifteenth time unit. It also can be concluded from Figure 3 that during the incremental mining the larger ratio of the latest record, i.e. k value, causes the system to become more susceptible.

Win32.fakeping ceaselessly pings the victim machine with an abnormal size of payload.

Figure 3 Similarity degradations while being Win32.Fakeping attacked       Figure 4 Smallest similarity values for different flooding  attacks    All 47 flooding attacks were tested and their smallest similarity values, as shown in Figure 4, were all below 0.5, except for Win32.winskiller. If the threshold was set to 0.5, only Win32.winskiller caused a false negative.

Win32.winskiller attacked the NetBIOS name service protocol located in the upper UDP. The IP and UDP headers of Win32.winskiller packets were normal. In our system, all mal-  formatted NetBIOS headers belonged to the data payload of UDP and, thus, could be ignored, which was why the smallest similarity could go no further down.



VI. CONCLUSION This study focuses on online real-time response to anomaly  traffic caused by DoS or Worm flooding attacks. In the design, this proposed system has adopted incremental mining of fuzzy association rules, with genetic optimization on the membership functions. Experiments were conducted which demonstrated the effectiveness and efficiency of this intrusion response system in preventing flooding attacks.

