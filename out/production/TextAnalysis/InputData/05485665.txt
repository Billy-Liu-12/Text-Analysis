Mining Fuzzy Association Rules in Data Streams

AbstractMany algorithms have been proposed for mining  fuzzy association rules in static datasets with quantitative  attributes. However, there is few study on mining fuzzy  association rules in data streams. This paper presents an  algorithm FFI_Stream for fuzzy association rules mining in  data streams. Efficient techniques are presented to find fuzzy  association rules in data streams using time based sliding  window model. The clustering technique is used to find the  fuzzy sets. Membership Function Bias measure  (MFB_measure) is introduced to evaluate the membership  function in each sliding window. Selectively Updating  Mechanism (SUM) and Projected Summaries (PS) are  proposed to update the fuzzy sets dynamically. Then,  experiments are carried out on both synthetic and real life  datasets. The results show that the algorithm is effective and  efficient.

Keywords- Fuzzy association rules mining; data stream;  change detection; membership function;  sliding window

I. INTRODUCTION  Association Rules Mining (ARM) is one of the most  important research topics in data mining. Each association  rule is an expression denoted by X Y? , where X  and Y  are sets of items. Usually, support and confidence are used to  measure the significance and certainty of a rule. The  procedure of ARM can simply be divided into two steps. In  the first step, it finds the frequent itemsets whose supports  are larger than the user defined minimum support (min_sup).

In the second step, it generates association rules whose  confidences are larger than the user defined minimum  confidence (min_confidence). Because the second step is  trivial, studies always focus on the first step. However, the  traditional ARM can only mine on datasets with binary  attributes, which means that it cannot deal with the datasets  with categorical or quantitative attributes directly. It is easy  to transform categorical attributes into binary attributes, but  it is much more complicated to tackle the quantitative    attributes. Mining quantitative association rules has been first  proposed in [1], which used an algorithm to partition the  attribute domain and combine adjacent partitions, thus  transforms the problem into binary one. However, there is  still a problem that the algorithm either ignored or over-  emphasized the elements near the boundary of the intervals  [2]. To deal with this problem, fuzzy ARM was proposed in  [3]. The algorithm in [3] used the membership degree to  measure how much a data object belong to each fuzzy set,  but the algorithm assumed the fuzzy sets and membership  functions to be given. [2, 5] further developed fuzzy ARM  that used clustering techniques to get the fuzzy sets. This  method is particularly suitable in the case that users with  little domain knowledge on the datasets and applications.

Due to the emerging number of streaming applications,  such as network monitoring, clickstream analysis, intrusion  detection etc, data stream mining has received increasing  attentions in recent years. Data streams are different from  static databases. Data in streams always come with high  speed, continuous and unbounded. It brings three challenges  for data stream mining. First, each item in a stream could be  examined only once. Second, although the data are  generated continuously, the memory resources are limited.

Third, the mining results should be generated as fast as  possible over limited CPU resources [11].

In the real applications, the streaming datasets always  consist of both binary and quantitative attributes. Many  algorithms have been proposed for mining frequent itemsets  and association rules in data streams. But they couldnt deal  with the quantitative attributes. To tackle this problem, a  novel fuzzy ARM algorithm FFI_Stream is proposed. There  are mainly two technical challenges in mining fuzzy  association rules over data streams. First, the algorithm  should get a well trade-off between efficiency and accuracy,  i.e. it should acquire most of the interesting association rules  with the least cost. Second, due to the concept drift  characteristic of data stream, the fuzzy sets and membership  may become invalid and expired while time elapses. Thus  the algorithm is necessary to detect the large concept drift in  data stream effectively and adapt the fuzzy sets and  membership functions timely.

The remainder of this paper is organized as follows. In    section 2, a formal statement of the problem of fuzzy ARM  in data streams and some terminologies are given. In section  3, FFI_Stream algorithm is proposed. In section 4, the  experimental results are presented and analyzed. Finally, in  section 5, the conclusions are drawn.



II. QUESTION DESCRIPTION  In this paper, the time based sliding window model is  applied. In the time based sliding window model, only the  fixed time slots of transactions generated recently are  considered in mining operations and the number of  transactions in each time slot can be varied. Once adding a  new time slot of transactions, the data in the oldest time slot  are expired simultaneously.

Let D  be a data stream composed of continuous and  unbounded multidimensional transactions 1 2, , .X X " Each  transaction can consist of both binary attributes and  V4-153978-1-4244-6349-7/10/$26.00 c2010 IEEE  quantitative attributes. There is a time identifier tacked to  each transaction. The transactions in the same time slot have  the same time identifier. Let the time identifier of the first  time slot in a sliding window be the time of the sliding  window. The sliding window in time k  is denoted as kW .

Let ( ) 1 2 1 2{ , , , , , , , },m nm n itemset I b b b q q q+ ? = " "  where (1 )ib i m? ?  are the binary items and (1 )iq i n? ?

are the fuzzy sets characterizing the quantitative attributes.

Besides, let 1 2{ , , , },b mI b b b= " 1 2{ , , , }q nI q q q= " . Let the  number of transactions in sliding window kW  be kW . If a  transaction iX  is in kW , it is denoted  as i kX W? . If each  binary item in bI is contained by a transaction iX , it is  denoted as b iI X? . Let ( )iX jq?  denote the membership  degree of fuzzy set jq in the transaction iX . Then the  support of itemset I  in sliding window kW  is defined as  follows,  ( ) ( )ii k b i j q X jX W I X q I  k  q  support I =  W  ?

? ? ? ?? ?

Given 1I  and 2I  are two non-empty itemsets with  1 2I I? , the confidence of the rule 2 1 1I I I? ?  in sliding    window kW  is defined as follows,   2 1 1  2 1  support I  confidence I I I  support I I  ? ?



III. FFI_STREAM ALOGORITHM  In this section, an algorithm for mining fuzzy association  rules in data streams is proposed. First, several efficient  techniques used in the algorithm are introduced. Then the  FFI_Stream algorithm is presented.

A. Finding and Selectively Updating  Fuzzy Sets  In [2] and [5], clustering algorithms CLARANS and  CURE are used to find the fuzzy sets. But these clustering  algorithms are not suitable for data streams, which require  algorithms to be able to compute clusters incrementally.

At present, there are many clustering algorithms in data  streams. An interesting adaptation of the k-means algorithm  has been presented in [7], but it is to get clusters in entire  data stream. In [8], Clustream is proposed, which used the  technique called micro-clustering. Unlike the algorithms  mentioned above, SWEM proposed in [4] employs EM  (Expectation Maximization) algorithm. The algorithm is a  soft clustering method and has properties such as robustness  to noise and the ability to handle missing data. These  properties are especially desirable for stream environments.

SWEM is composed of initial phase, incremental phase and  expiring phase. In each phase, SWEM uses two-stage  schema. In online stage, it processes raw data stream to  partition the data into several micro clusters based on EM  algorithm (micro-clustering) and gets summaries for each  micro cluster. The summary for micro cluster i  is a triple, { }, , j ij i Ti i i i jX SX j i jST N S X XX?

??= = = ? =??

where iS  is the set of data that are assigned to micro cluster  i . Then in the offline stage, it uses these summaries to get  macro clusters (global clusters), which is also based on EM  algorithm (macro-clustering).

Some techniques proposed in SWEM are applied to find  fuzzy sets. The micro-clustering technique is used to achieve  the triples for micro clusters in each time slot independently    until the number of triples reaches the user defined minimum  number of triples (min_num_triples). Thus it ensures enough  information about the distribution of data collected. Then the  macro-clustering technique is used to get macro clusters and  corresponding fuzzy sets.

Furthermore, due to the behavior of data streams, it is  necessary to use clustering technique to update the fuzzy sets  from time to time. Selectively Updating Mechanism (SUM)  is proposed to update fuzzy sets. The clustering algorithm is  used only on the projected dataset comprised of the attributes  whose membership functions become worse. There is a  problem that attributes may be added to cluster at different  times, thus they have different time horizons to collect  triples. To deal with this problem, a structure called PS  (Projected Summaries) is proposed to maintain the attributes  found to cluster at the same time and their corresponding  triples. Let iS  denote the group of attributes found to have  bad fuzzy sets at time it . And let ( )ipTriple S  be the triples  corresponding to iS . To be efficient, it is assumed that each  attribute is independent of one another. In each new time slot,  first, the micro-clustering technique is applied on all the  attributes in PS together, rather than on the individual group  respectively. Then the triples are decomposed into projected  triples for each group according to the projection relations.

E.g., assume there are two attributions in PS, A  and B ,  which are added at different times. If in the new time slot, a  new triple  5 25 0  3, ,  10 0 30  ? ?? ? ? ?? ?? ?? ? ? ?? ?? ? ? ?? ?

is acquired in which the  first dimension denotes A, then the projected triples are {3, 5,  25} on attribute A and {3, 10, 30} on attribute B respectively.

B. Generating the Membership Functions  In this section, the membership functions are generated  for the fuzzy sets. Because the techniques which is based on  EM algorithm are applied to get the fuzzy sets, more  accurate information about the underlying distribution of the  clusters can be acquired than [2, 5]. The standard deviations  of clusters are added to construct the membership function  according to the following observation. Most of data (99.7%)    distribute within 3? ?  if the data is following Gaussian  distribution in which ?  is the mean and ?  is the standard  deviation of the distribution.

Let there be n quantitative attributes in the data stream.

Let imin i n? ? and imax i n? ? denote the  thi attributes minimum and maximum. Assume that the  dataset is clustered into k clusters. Let { }1 2, , , km m m" be  the k centroids of clusters and { }1 2, , ,i i inm m m"  be the  thi centroid. Let { }1 2, , , k? ? ?"  be the k  standard   deviations of clusters and { }1 2, , ,i i i in? ? ? ?= "  be the  thi standard deviation. Let { }1 2, , ,i i kif f f" denote the k  fuzzy sets characterizing attribute i?  assuming that their  corresponding centroids have been sorted by value from  small to large. 1?  and 2?  ( 1 2 0? ?> ? ) are used to control  the shape of the membership functions. When 1 2? ?= , it is a  discrete method using 1?  or 2?  to determine the intervals.

The membership function defined in this paper is as  follows,  If 1i = , the membership function for fuzzy set ijf is  ( )    2 1  1 2   1,  ( )  ,( )  0,  j ij ij  ij ij  ij ij ij ij ij  ij  ij ij  if min x m  m x  x if m x m  if x m  ? ?

? ?

? ? ? ? ?? ? ?

? ?

? ? < + ??

+ ? ??

= + ? ? < + ??

? ??? ? + ??

If 2 1i k? ? ? , the membership function for fuzzy set  ijf is given by     11 2   21 2    0 ,  ( )  ,( )  ( ) ( )  ,( )  1,  ij ij  ij ij  ij ijij ij  ij ijij  ij  ij ijij ij  ij ijij  ij ij  ij ij  if x m  or x m  if x mx m  and x m  x  if x mm x  and x m  if x m  and x m  ? ?

? ?

? ?? ?

? ?? ? ?

? ? ?? ?

? ?? ? ?

? ?

? ?

< ? ??? ? + ??? < ? ?? ? ??

? ? ?

? ???

= ?

< + ?+ ? ??? ? + ?

? ??? < + ?? ? ? ???

If i k= , the membership function for fuzzy set ijf is  ( )    1 2  1 2   0,  ( )  ,( )  1,  ij ij  ij ij  ij ij ij ij ij  ij  ij ij j  if x m  x m  x if m x m  if m x max  ? ?

? ?

? ? ? ? ?? ? ?

? ?

? < ? ??

? ? ??

= ? ? ? < ? ??

? ???

? ? ? <?

The membership function is more proper than the  membership function defined in [2, 5]. When the distance    between two consecutive fuzzy sets centroids is large, there  is a long overlap length of their membership functions in [2,  5], which is considered as a bad case.

C. Finding Frequent Itemsets with Fuzzy Sets  To acquire the frequent itemsets with fuzzy sets, the  algorithm proposed in [9] named UF_streaming is used and  optimized. UF_streaming is originally proposed for mining  frequent itemsets in uncertain data stream. However it is  appropriate to mine frequent itemsets with fuzzy sets in data  streams. The expressions of support are similar in two  contexts. The only difference between them is that the  existential probability in the uncertain data stream context is  altered into the membership degree in this paper.

In each time slot (batch), UF_streaming first uses  UF_growth algorithm to mine frequent itemsets whose  supports are larger than predefined threshold preMinsup  (preMinsup<min_sup). Then it maintains the results into a  structure called UF_stream and deletes the information of the  expired time slot.

UF_streaming needs to traverse the nodes in the  UF_stream to push results (the support of the itemset) in the  new time slot. Once sliding the window, even when there are  few of frequent itemsets in the new time slot, the algorithm  needs to traverse all the nodes in the UF_stream. But there  are always many nodes in the UF_stream especially when  the preMinsup is low.

UF_stream structure and its maintaining mechanism are  optimized. The support combined with time identifier of the  time slot is pushed to the UF_stream for each frequent  itemset in the new time slot. Thus the traversals can be  limited to the nodes representing the frequent itemset in  the new time slot only. At the same time, it allows to delay  the deletion operations on the expired information until the  user requires the results. It can increase memory cost slightly  but greatly decrease the CPU cost in many cases.

Furthermore, the UF-growth algorithm is altered into  UH_mine algorithm. According to [10], the hyper-structure  and the candidate generate-and-test algorithms perform much  better than tree-based algorithms in uncertain data. Thus  UH_mine has a better performance than UF_growth.

D. Evaluation of Membership Function: MFB_measure  Due to the concept drift characteristic of data stream, the    membership functions should not be fixed during mining of  data stream and it is necessary to use certain techniques to  detect the shift of membership function.  MFB_measure  (Membership Function Bias measure) is proposed to  effectively detect the significant changes that seriously  deteriorate the membership function.

The MFB_measure is designed noting the following  observations. First, it is necessary there should be enough  frequent fuzzy sets if the membership functions are suitable.

Second, the membership functions are always well fitted to  the sliding window just after the clustering operations are  executed. To facilitate the illustration, let reference sliding  window denote the first sliding window after the attributes  fuzzy sets are updated. Because attributes may have different  time horizons to update fuzzy sets, the reference sliding  window for each attribute may be different. The  MFB_mearsure is described as follows.

Given two time identifiers t  and 't , where t  is the time  of the reference sliding window, 't is the time of the current  sliding window. Let W denote the size of the sliding  window. Let F denote the number of fuzzy sets for attribute  i? . Furthermore, let ( ')tF t?  and  ( ')tF t+  denote the  number of frequent fuzzy sets that become infrequent from  frequent and inverse respectively. Then,  ( ') ( ') '  _ ( ') t tt  F t F t T t tMFB measure t  F W F  ? +  ?

?

= + ?

( ') ( ')t tF t F t+ ??  is the relative number of frequent fuzzy  sets in the current sliding window compared to the   Algorithm: FFI_Stream  Input:   the size of sliding window: W ,                     the minimum support: min_sup, preMinsup,  the minimum confidence: min_confidence,  the maximum MFB_measure: max_MFB,     the minimum number of triples: min_num_triples.

Output: the frequent itemsets and interesting rules in the current sliding window if the user has  required online.

Procedure FFI_Stream    0;ct =  Initialize( );                        // Initialize PS with all quantitative attributes in it;  // Initialize membership functions of all quantitative attributes randomly;  While the data stream is active do  Read( );                            // Read a new time slot data  ct  T ;  Micro_clustering( );         //  Compute the triples in  ct  T  on all the attributes in PS;  Project( );                         //  Project the triples on each group of  attributes in PS i.e. iS and add  them into ( )ipTriples S ;  For each iS do  If ( ) ( ).ipTriples S size min_num_triples> do  Macro_clustering( );      // If the number of triples with  iS is larger than the user defined threshold,  the triples are used to get macro clusters;  Update( );                        // Update the fuzzy sets and membership functions of each attribute in iS  ;  // Delete iS and ( )ipTriples S in PS;  // Update the UF_stream (Delete all the nodes with some fuzzy sets  charactering iS in their paths);  End if  End for ( )  ct  Transform T ;               // Transform the quantitative attributes in  ct  T  into fuzzy sets and membership degree;  UF_streaming ( );             // Mine the frequent itemsets in  ct  T and find the frequent fuzzy sets in current sliding window;  Detect( );                           // Detect if certain quantitative attributes that are not in PS need to  update.  If it is true, add these attributes into PS;  If required==1 do  ResultOutput( );                 // If the user has required the result, find frequent itemsets and  association rules in current sliding window;  End if  1;c ct t= +  End while  End procedure  Figure 1. Steps and Pseudo Code of FFI_Stream.

reference sliding window. Thus the value of the first part  of MFB_measure indicates the changed rate of membership    function at 't  with respect to t , and it is ranging from 1?  to  1 . In general, the higher the first part of MFB_measure  values, the more necessarily the attributes fuzzy sets should  be updated. The time factor is also added to MFB_measure.

The time factor increases monotonically. It is inverse  proportional to the number of fuzzy sets for the attribute,  considering that the semantics are more meaningful with  more fuzzy sets in the condition not exceeding the user  defined maximum in many cases. The time factor helps to  avoid the case that fitting bad membership function well for  a long time. The parameter T  can control the weight of the  time factor. Let max_MFB be as a threshold to judge  whether an attributes fuzzy sets need to update. To be more  robust and stable, the frequency that the MFB_measure  exceeds the max_MFB in certain time horizon can be  applied.

E. Algorithm: FFI_Stream  Based on the strategies and techniques presented above,  an algorithm named FFI_Stream is proposed. The steps and  pseudo code of FFI_Stream could be described in Fig. 1.



IV. EXPERIMENTS  In this section, some experiments that test the  performance of the proposed algorithm are presented. All  experiments are performed on an Intel Xeon E5335 2.0 GHZ  PC with 4 GB RAM (OS Windows Server 2003). The  proposed algorithm is compared with discrete method on  both synthetic and real life datasets. The algorithms are  implemented in Microsoft Visual Studio 2008. To make the  comparison fair, both methods use the clustering technique  to find the centroids of the fuzzy sets or intervals.

A. Expreriment One: Synthetic Dataset  In this experiment, a set of simple data streams with two  dimensions is generated by MATLAB. Each data stream is  composed of 100 time slots with 50 transactions in each time  slot. To test the performance of the algorithm to detect the  different changes in the dataset, the distributions generating  the data in the first part of 50 time slots and the second part  of 50 time slots are different in each data stream. The data in  each part are generated by three Gaussian distributions, in  which the middle cluster is given the largest weight nearly  0.8. Thus it can be assumed that there are no more than three  fuzzy sets for each attribute and the fuzzy set representing    the middle cluster is more possible to be frequent and to be  in the interesting rules. And the coordinates of the second  parts centroids are varied while the first parts centroids are  fixed at (0, 0), (50, 50) and (100, 100). In Fig. 2, a data  stream is presented. The horizontal axis represents  quantitative attribute X and the vertical axis represents  attribute Y . Fig. 2 (a) presents the data in the first part and  Fig. 2 (b) presents the data in the second part.

-50 0 50 100 150  -40  -20          inner box  outer box  X  (a)  Y  0 50 100 150 200           inner box  outer box  X  (b)  Y  Figure 2. Data of Experiment One: (a) First Part.  (b) Second Part.

In this experiment, 5, 0.3, 0.01,W min_sup T= = =    0.03, 0.5, 0.4,preMinsup min_confidence max_MFB= = =  _ _ 30.min num triples = In the fuzzy method, the  membership functions are set with 1 3.0? = and 2 0? = . In  the discrete method, two different partitions are used, and  MFB_measure is also used to detect the changes of intervals.

Each attribute is partitioned into three intervals, and  boundaries for the intervals are also determined by clustering  algorithm. In Discrete1, the boundaries are set at  2 21.5 , 1,2j jm j? =  i.e. the second intervals are around the  middle cluster just like the inner box in Fig. 2, while at  2 22.2 , 1,2j jm j? =  in Discrete2 just like the outer box.

The experimental results are showed in TABLE. ?. In  TABLE. ?, MEAN denotes the coordinates of the middle  clusters centroids in the second part for each data stream,  and NUM_C is the average times calling the clustering  operations per attribute. NUM_FI, NUM_RULE are the total  number of frequent fuzzy sets and interesting rules found in  all sliding windows. TIME is the execution time. D1 denotes  the approach Discrete1, D2 denotes the approach Discrete2  and F denotes the approach using fuzzy sets i.e. FFI_Stream  algorithm. According to NUM_C, they only call one time of  clustering algorithm per attribute when MEAN is near (50,  50), which is executed to initialize the fuzzy sets or intervals.

It indicates that these methods dont detect the small  changes. And they call more than one time per attribute  when the change is significant. It validates the usefulness of  the MFB_measure. The method using fuzzy sets is more  sensitive to drastic changes in datasets. It detects changes  when the ( )MEAN 70 70=  while Discrete1 at (110, 110)  and Discrete2 at (100, 100) respectively. Furthermore, the  method using fuzzy sets always finds the most frequent  itemsets and interesting rules even when the corresponding  NUM_C are the same. Discrete2 finds nearly as many  interesting rules as the method using fuzzy sets sometimes,  but the region for the second interval is so large that the  semantics of the rules become trival.  Thus comparing to the  discrete method, the method using fuzzy sets gives better  results.

B. Experiment  Two: Real Dataset  In this experiment, the experimental results on the real  life dataset are given. KDD_CUP99 dataset [6] which  evolves significantly over time is choosed. KDD_CUP99    dataset contains a stream of TCP connection records from  two weeks of LAN traffic over MIT Lincoln Labs. It consists  of 42 attributes that usually characterize network traffic  behavior, both categorical attributes and quantitative  attributes such as duration of the connections, protocol type  etc. Attribute src_byte denoting the number of data bytes  from source to destination and attribute dst_bytes inverse are  selected in this experiment.  They are both quantitative  attributes.

The user specified parameters are set as follows,  5, 0.3, 0.03, 0.01,W min_sup preMinsup T= = = =  0.5, 0.4, 30.min_confidence max_MFB min_num_triples= = =  And the number of transactions in each time slot is 250.

It is assumed that there are no more than three fuzzy sets or  intervals in the datasets i.e. 3F ? .

Four different approaches to mine association rules are  compared using the following notations: Fuzzy+MFB: the  approach that use both fuzzy method and MFB_measure  with 1 3.0? = and   0 .5 ;? =  2 0.5? = , Fuzzy+P: the approach using  fuzzy method with 1 3.0? = and 2 0.5? = also but repressing  the first part of the MFB_measure that ignores the changed  rate of the membership function, Discrete1: the approach  using discrete method with 1 2 1.5? ?= =  and Discrete2 : the  approach using discrete method with 1 2 2.5? ?= = .

TABLE I. RESULT OF EXPERIMENT ONE  NUM_C NUM_FI NUM_RULE TIME(s) ID MEAN D1 D2 F D1 D2 F D1 D2 F D1 D2 F  1 (50,50) 2/2 2/2 2/2 288 291 445 192 194 247 1.500 1.454 1.469  2 (60,60)) 2/2 2/2 2/2 288 288 291 192 192 194 1.453 1.469 1.328  3 (70,70) 2/2 2/2 3/2 326 288 364 191 192 215 1.500 1.469 1.547  4 (80,80) 2/2 2/2 3/2 325 292 397 98 192 204 1.454 1.469 1.547  5 (90,90) 2/2 2/2 4/2 307 314 419 96 102 174 1.422 1.359 1.735  6 (100,100) 2/2 3/2 4/2 248 296 606 104 146 182 1.437 1.422 1.969  7 (110,110) 3/2 4/2 4/2 292 257 477 141 164 187 1.406 1.500 1.922  8 (120,120) 4/2 4/2 4/2 274 271 332 181 180 185 1.500 1.484 1.641  9 (130,130) 4/2 4/2 4/2 270 275 514 179 183 260 1.547 1.453 1.828  10 (140,140) 4/2 4/2 4/2 276 275 478 184 183 223 1.453 1.360 1.859   0 0.5 1 1.5 2  x 104            Size of Databases(250)  Ex  ec  u  tio  n  Ti  m  e(s  ec  )  Fuzzy+MFB  Discrete1  Discrete2  Fuzzy+P  Figure 3. Comparison of Execution Time.

Fig. 3 shows the execution time of the four approaches.

The runtimes of them grow linearly as the data stream grows,  which confirms that they are scalable with respect to the size  of data stream, and it is mainly because of the usage of  sliding window model. Fuzzy+P uses the least time,  Fuzzy+MFB has similar execution time to Discrete2, and  Discrete1 has the most execution time. The difference of  runtimes between them is mainly influenced by the  clustering operations they use. The more clustering  operations were executed, the more runtime it was.

Fig. 4 and Fig. 5 show the number of frequent itemsets  and interesting rules found with the data stream increased.

Fuzzy+P and Fuzzy+MFB used less clustering operations  than Discrete1 and Discrete2. Fuzzy+MFB nearly finds the  most number of frequent fuzzy sets and interesting rules with  the second least of clustering operations. Sometimes,  Discrete2 returns nearly the same number of fuzzy sets and  interesting rules but with more clustering operations and the    semantics of Discrete2 are meaningless as discussed in  experiment one. Furthermore, the number of interesting rules  found by Discrete1 is even less than Fuzzy+P that used the  clustering operations least which illustrates the superiority of  the method using fuzzy sets.



V. CONCLUSIONS  In this paper, a novel fuzzy ARM algorithm called  FFI_Stream is presented to tackle quantitative attributes in  data streams and some techniques are proposed in the  algorithm. Both synthetic and real datasets are used to  evaluate the performance of the proposed algorithm. The  experimental results show both the effectiveness and  efficiency of the proposed algorithm.  In comparison with the  discrete method, the proposed algorithm using fuzzy sets and  MFB_measure gets a trade-off between the number of  interesting rules and efficiency.

