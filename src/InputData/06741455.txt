A Load Balancing Scheme using a Chord Algorithm for DDSB Service

Abstract? DDSB (DDS Bridge) allows embedded devices with limited resources to participate in DDS communication using a non-DDS protocol. The current DDSB mechanism may cause heavy overhead to DDS networks and DDSB nodes when there are multiple DDSB nodes around a non-DDS node. This paper proposes the use of a Chord algorithm to assign a non-DDS node to only one DDSB. The Chord algorithm manages the address space of nodes and regulates the network traffic by distributing data on the nodes. Since the connection between a DDSB and a non-DDS node is limited to one due to this algorithm, the performance of the DDSB mechanism improves considerably.

Keywords?Cyber Physical System, Data Distribution Service, Data Distribution Service Bridge, Chord

I. INTRODUCTION CPS (Cyber-Physical System) is a system of collaborating  computational elements controlling physical entities.

Computational elements collect data from physical entities by a communication protocol, and then process the data to control the physical entities [1]. Traditional examples of CPS include factory automation and networked combat systems.

Automated agriculture, ITS (Intelligent Transportation System), and many IT convergent industries have recently attained major advances by adopting the CPS concept.

A CPS requires communication middleware to support frequent, real-time transmission of data/control information between physical entities and cyber entities. OMG (Object Management Group)?s DDS (Data Distribution Service) middleware is suitable for this requirement [2].

DDS is the API (Application Programming Interface) of communication middleware that creates network domains dynamically and serves a 1:1, 1:N or N:N real-time data distribution. DDS provides publish/subscribe communication capability with various QoS (Quality of Service) levels. DDS nodes may freely join(leave) into(from) the network domain.

Thus, if DDS is used for the CPS, physical devices in a CPS system form a network domain to exchange collected data and control command even if they change their location dynamically. DDS is composed of two layers of protocols, namely DCPS (Data Centric Publish Subscribe) and RTPS (Real-Time Publish Subscribe). DCPS provides a communication interface to DDS applications and performs QoS control [3]. RTPS dynamically discovers the information of DomainParticipants, DomainEntities, and Topics, and performs reliable or best effort communication [4].

Although DDS has many advantages, it consumes a large amount of memory and processor load because of DCPS and RTPS protocols and all the information for constructing a domain network and for supporting diverse levels of QoS. As such it is difficult to port the DDS on a small device that has limited resources. Physical entities of CPS are composed of desktop level computing devices as well as small sensor nodes.

Not all of the devices have enough computing resources to run DDS. Therefore, in order to connect physical devices with no DDS with DDS devices, a gateway system between them acting as a DDS proxy is required.

DDSB (DDS Bridge) [5] is a gateway mechanism for connecting small devices with limited resources to the DDS domain. In [5], the authors suggested a protocol and management technique for connecting small devices to a DDSB node. However, the management of possible, replicated connections was not defined. Consequently, if there are multiple DDSB nodes around a non-DDS device, all the DDSB may try to connect with the same non-DDS device, resulting in replicated DDS proxy nodes. These wastes the computing resources of DDSB nodes, and replicated connections also cause an excessive amount of network traffic in the domain. This problem should be resolved.

Figure 1. DDS communication concept     Chord[6] defines how to maintain/manage address space by allocating data into a specific node by using the node name and the data name in the network. Chord evenly allocates/distributes data to nodes. This study has applied the Chord algorithm to allocate a non-DDS device to a single DDSB node. The connections between non-DDSB devices and DDSBs are efficiently managed, and replicated network traffic is avoided. A similar approach has not been reported, to the knowledge of the authors.



II. RELATED WORK  A. DDSB DDSB connects non-DDS nodes with DDS nodes and  creates DDS communication entities. In order to perform these functions, DDSB is composed of an Abstract Layer, Entity Manager, and Protocol Manager. The Abstract Layer communicates with nodes that do not use DDS, and consists of the Sender and Receiver. The Sender is used to transmit data to non-DDS nodes, and the Receiver receives data on a non- DDS protocol such as the TCP/IP. The Protocol Manager relays the received data between DDS and non-DDS nodes.

The manager creates DDS entities that will be connected with non-DDS nodes, and maintains connection information between DDS entities and non-DDS nodes.

B. Chord Chord was proposed for peer-to-peer applications in a  decentralized and unstructured network. It specifies how new nodes join the system and how to recover from a failure of existing nodes. It also defines how to associate the key, i.e., data with a node responsible for them. Chord assigns each node and key an m-bit identifier obtained using the consistent hashing [7] function. It structures a circle address space. The key k is assigned to the first node whose identifier is equal to or follows (the identifier of) k in the identifier space. This node is called the successor node of key k. Each node maintains additional routing information in a finger table. This additional routing information is about the minimum locations to look up correct successors, not about all nodes. Each node maintains a routing table with (at most) m entries at the m-bits address space.

Table 1. Attributes in the finger table at Chord  Notation Definition  finger[k] ( n + 2k-1 ) mod 2m, 1? k ?m  successor finger[1] node  predecessor the previous node on the identifier circle  The finger[k] in the finger table is the information used to look up the key k. Each node maintains successor information and predecessor information for structuring the address space.

The successor and predecessor are modified when the node joins (leaves from) the address space.

Figure 3 shows an address space composed of 6-bits. The address space has 10 nodes and stores 5 keys of data. The successor of identifier 10 is node 14, and hence key 10 would be located at node 14. Similarly, keys 24 and 30 would be located at node 32, key 38 at node 38, and key 54 at node 56.

Figure 2. DDSB communication concept  Figure 3. An address space  Figure 4. The finger table entries for node 1     Figure 4 shows the finger table entries for node 1. The first finger of node 1 points to node 8, as node 8 is the first node that succeeds (1 + 20) mod 26 = 2. Similarly, the last finger of node 1 points to node 38, as node 38 is the first node that succeeds (1 + 25) mod 26 = 38. These fingers are used to find the location of data. As an example, consider the address space in Figure 3, and suppose node 1 wants to find the successor of key 54. Since the largest finger of node 1 that precedes 54 is node 38, node 1 will ask node 38 to resolve the query. In turn, node 38 will determine the largest finger in its finger table that precedes 54, i.e., node 56. Finally, node 56 will find that its own successor, node 56, succeeds key 54, and thus will return node 56 to node 1.



III. C-DDSB (DDSB Assignment using Chord Algorithm)  A. Data Assignment Chord creates a key using the hash from the data name and  node name. Chord assigns data to the successor node that has the smallest key in the node key values greater than or equal to the data key value.

We propose using a method of mapping the node of Chord to a DDSB node, the data of Chord to a non-DDS node, and the node/data name of Chord to a GUID (Global Unique Identifier) of DDS. The GUID can be applied to the data/node name of Chord because is used for identifying objects that participating in a domain in DDS. Following the approach of assigning an address space at Chord, C-DDSB distributes locations of DDSB nodes and non-DDS nodes, and it creates agency objects in the DDSB nodes. The previous DDSB creates agency objects of non-DDS nodes to all DDSB nodes.

However, C-DDSB distributes and assigns DDSB nodes and non-DDS nodes. This approach can reduce resources and distribute the load because it creates 1:1 connections.

Figure 5 shows the connection between DDSB nodes and non-DDS nodes of C-DDSB. In the network, there are DDSB  nodes(N) for which the key is 1, 8, 21, 38, and 51, and non- DDS nodes(D) for which the key is 3, 16, 28, and 32.

Following the assignment of data at Chord, the successor of identifier 3 is N8, and thus non-DDS node D3 is connected with N8 and creates a DDS agency object, and D3 is not related with N1, N21, N38, and N51. Similarly, non-DDS nodes D28 and D32 would be located at DDSB node N38, D16 at N28, and D59 at N1.

B. Stabilization Chord manages the key of data/node using a successor and a predecessor in the finger table, and this can be described as stabilization. The successor and the predecessor are used similarly with the front/rear pointer at a doubly linked list.

When a new node joins an address space, the data which has the new node as the successor is transferred to the new node.

The successor of the predecessor at the new node and the predecessor of the existed successor node are ten changed to the new node. This is similar to the insertion process of a doubly linked list. The leaving process is meanwhile similar to the deletion of a doubly linked list. The joining of new nodes and the leaving of existing nodes is announced to existing nodes in the address space. Disconnection due to failures of existing nodes is recovered by periodic execution of the stabilization process.

Figure 6 shows the process of changing an address space due to joining a new node. In process ? , following the method of address space definition at Chord, the non-DDS nodes D15 and D30 are connected with DDSB node N38. The predecessor of N38 is set up as N3 and the successor of N3 is set up as N38.

Process ? shows the changing of non-DDS nodes when the DDSB node N22 joins the address space. Because the successor of D15 is N22, the connection of D15 is changed from N38 to N22, which newly joined. Process ? shows the changing of the predecessor and the successor in the finger table when DDSB node N22 joins the address space. The predecessor of N22 is set up as N3, which is the successor of N38, and the predecessor of N38 is changed to N22 from N3.

The successor of N3 is then changed to N22.

Figure 6. Joining a node  Figure 5. The connections of a successor     C. Finger Table Chord maintains a finger to find nodes that contain data when accessing data corresponding to a particular key, and it retains the predecessor and successor to maintain the address space.

However, DDS does not have to perform additional data position detection processing of data access because it maintains separate location information and the topic of nodes.

The proposed strategy uses DDS to access data after defining an address space. Because of this, it is possible to reduce the required resources to save the finger by maintaining successor and predecessor information for stabilization and definition of the address space.

Table 2. Attributes in the finger table at C-DDSB  Notation Definition  successor finger[1] node  predecessor the previous node on the identifier circle

IV. TEST RESULTS To measure the performance of C-DDSB, we compared the  DDSB applications with the C-DDSB applications with respect to memory usage and amount of messages for connection setup.

Figure 7 shows the memory usage and the amount of message traffic due to the change of non-DDS nodes when the network has one DDSB node. Through (a), we checked that the memory usage of the C-DDSB application rises similarly with the DDSB application when the amount of non-DDS nodes is increased. Through (b), we confirmed that the amount of change of traffic of the C-DDSB application rises similarly with the DDSB application when the amount of non-DDS nodes is increased. Through the results of Figure 7, we verified that the performance of the C-DDSB application is similar with that of the DDSB application when the network has one DDSB node.

Figure 8 shows the memory usage and the amount of change in traffic due to the change of DDSB nodes when the network has 500 non-DDS nodes. Through (a), we found that the memory usage of the C-DDSB application is less than that for the DDSB application, when the amount of DDSB nodes is increased. Through (b), we confirmed that the amount of change in traffic of the C-DDSB application is smaller than that for the DDSB application, when the amount of DDSB nodes is increased. Through the results of Figure 8, we determined that the memory usage and the amount of change in traffic of the C-DDSB application are superior to the case of DDSB application when the network has numerous non-DDS Figure 7. Memory usage & traffic with 1 DDSB node  Figure 8. Memory usage & traffic with 500 non-DDS nodes     nodes, and this gap becomes greater when the amount of DDSB nodes increase.

At the previous DDSB, non-DDS nodes announce participation to DDSB nodes in the network. All DDSB nodes that receive these participating messages create DDS translation objects and connect them. When the network has m DDSB nodes and n non-DDS nodes, each DDSB node makes connections to all n non-DDS nodes, and each non-DDS node is connected to all m DDSB nodes. In this case, the network has m *n connections. At the C-DDSB, DDSB nodes choose a responsible node through the addressing algorithm at Chord after DDSB nodes recognize non-DDS nodes, and only the responsible DDSB node makes a connection to the non-DDS node. As a result, the network has connections as the same number of non-DDS nodes even if the network has numerous DDSB nodes and non-DDS nodes. This leads to the results seen in Figure 8.



V. CONCLUSION In this paper, we applied a strategy of generating an address  space at Chord to DDSB. We resolved the problems of connecting a small embedded device in a CPS System simultaneously to more than one DDSB. As a result, network traffic is reduced and load balancing of DDSB is possible. C- DDSB achieved load balancing via the distribution of embedded devices and DDSB nodes, and it performs error recovery and dynamically join/leave through a stabilization strategy. With application of Chord we reduced the amount of information for maintaining an address space through reduction of a finger table.

The size of GUID is fixed to 96 bits because the address space of DDS is not flexible. With consideration of the characteristics of GUID, it is necessary to research prevention/avoidance strategies for collisions generated by the hash at Chord. Hand-off problems occur when the DDS entities are moved due to join/leave of connected embedded devices. We plan to study ways of reducing the hand-off problem.

