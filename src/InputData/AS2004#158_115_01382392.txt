<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">Proceedmgs of  the llurd Internahond Conference on Macbme Learnmg and Cybernehcs, Shangha, 26-29 August 2004

Abstract: How to use the patterns mined hy KDD algorithms is very important to real-time and effectivenesr of IDS. This paper put forward an algorithm of pattern encoding, which can e x p m  patterns in digits, thus the intrusion pattern can he detected efficiently. At the m e  time, it also has proved that the patterns detection methods based on pattern encoding are eqnal to the methods with similarity theory, as a result, any intrusion pattern detection algorithms based on similarity theory can he realized by pattern encoding.

Keywords: pattern encoding; intrusion detection.

1. Introduction Association NI= encoding; fquent  episodes encoding; Data Mining can pick up the pattern, which is connotative, unknown beforehand and useful for decision-making, from the data in large-scale database or data warehouse. This technique has already been availably applied to IDSs. Both association rules algorithm and sequential patterns algorithm can mine the pattern of association rules , frequent episode[?. Because NIDSs have to deal with a large quantity of communication data, the pattern set we mined is very huge. Usually people use expert system and decision treef2? to compare mined patterns and detect intrusion, but all these techniques are based on pattern matching. Actually, they dont?t work tine because the huge quantity of pattern to be matched, which cause the efficiency of IDS very low and decrease the characteristic of real-time and This paper puts forward a digital detection method for intrusion pattern: fmt, we encode the association rules and frequent episodes, conver each association rule or frequent episode to a number; Then using simple mathematization to compare pattern, we can detect intrusion effectively. In this paper we also proved that encoding scheme is equivalent to the detection method based on comparability theory. Thus we can use encoding scheme to realize every algorithm that is realized by comparability theory.

2. Association rules encoding 2.1. Concepts Definition] : ? Complete and ordered ? association: Assuming associations have n attributes, we call an association(A1 = VI; A2 = v2; ::;Ak = vk) ?complete and ordered? if k = n and a*hutes AI: A2: ...... ;Ak are in some user-defined decreasing ?order of importance?? Definition 2: the way of converting an association rule to its ?complete and ordered? form: in case of k&lt;n, if Ai is missing, then we insert Ai=null in the association rule and sort the attributes in the order of importance.

Definition 3: attribute-value table of the association rules: It is a table, defined by users, the field name of which stands for the order of importance of the corresponding attribute decreasing from left to right. Records in the table are the possible values of the corresponding attribute, stored fmm left to right in order of importance.

2.2. Encoding ideas Many attributes in association rules of intrusion detection are Categorical Amibutes, however, Categorical Attributes are discrete and not ordered. Some attributes are  numeric, but the range of their values is too large for encoding, therefore we developed a attribute-value table of &amp;sociation rules, sorting the attributes in order. of importance in the way of descending and y-direction, while sorting values of attributes in order of importance in the way of descending and x-direction. In $is way, association    way of descending and x-direction. In $is way, association attributes and their values can be effectively converted to digits according to their order in the table, and then we can encode any association rule according to the table.

What deserve taking a look is that sorting the attributes of association rules and their values in order of importance should be based on huge amounts of statistical results running on network and reasonable analyses. This kind of sorting will finally have a great influence on the effect of intrusion detection using model comparison.

0-7803-8403-2/04/$20.00 WOO4 IEEE 26-29 August 2004 23. Asooeiation encoding algorithm named from right to left as 1,2,3,4 ,..., m. The association rules attribute-value table is as follows: Before encoding association rules, we should conshuct the attribute-value table of association rules. The fmt column in the table is taken by each attribute's max count of iti value, while in other columns the values of attributes are stored in order of importance and each field name is Figure 1. frame of association rules attribute-value table .

As for any given association rule, we can compute its encoding as follows: Step 1: convert association rules to their "complete and ordered" form.

Step 2 according to the attribute-value table, convert each association rule (Aj=vj, A2=vz, ..., A.=!+) to corresponding sequence of digits evlea ... em. If vi is null, then the Corresponding e6 is 0, and then do the encoding.

To unify the encoding representation i d f o r  the convenience of encoding process, we use a digits to present all the attributes values (regardless of their max values), a can be got through the first column in association rules attribute-value table: (the max count of each attributes values is stored here). The formula is as follows: max=maximum(maxcount[i] I i=1,2, ..., n): a=Integer-up(log,dml)): I * Integer-up is up integer function * I Rules-Encoding algorithm is as follows: Universal variants: attribute-values[n][m]; I* the nxm association rules attribute-value table:, attribute-values[i]fil stands for the j-th value of attribute Ai*/ codes; association rule X *I tempccdes[n]; attribute value vi of attribute Ai */ /* codes are the fmal codes of I* tempcodes[n] store code of order-number ( ) importance order of the value of attribute Ai from table of attribute-value*/ Begin (1) ordered" form; (2) for each (Ai= v,) in X /*a function which can get the convert the association rule X to "complete and if vj is null /* no such attribute value */ tempcodes[i] = 0;  else tempcodes[i] =order-number(Ai=vj); /* get the corresponding sequence number of the attribute from the attribute-value table*/ I* encode and compute *I (3) codes=0 for i=l to n codes=codes ftempcodes[i]x( 10")"~' I* add all attribute in the form of digital*/ End Figure 1 Rules-Encoding algorithm    Figure 1 Rules-Encoding algorithm 26-29 August 2004 As for each attribute of a association rule, the most comparisons needed is m when getting the importance order of the amibute value from table of attribute-value.we have to make m camparisons at most. The attributes of an association rule is n at the most, and therefore the time complexity of association rule encoding algorithm is O(nxm).

3. Frequent episode rules-eneodiog A frequent episode ?le can be expressed as: x ,  Y + Z[C,S, w X ,  Y ,  2 ,are all association rules, we can encode it in the same way as association rulesencoding (regardless of confidence ,support and window). Given : EncodingX = xIxz ... x..

EncodingY = yIy2 ...yn, EncodingZ = z1z2 ...%, For the convenience of computing, we convert the three independent encoding to a simple encoding form. The expression of new encoding fofm is as follows: Encoding (X, Y, Z )  =XIZIYIXZZZ~Z ...wan The expression keep the importance order of attributes in association rule, and also consider much about the structural features of frequent episode rule, and map the similar d e s  of bead of the rule X and.body of the rule Z to close digits.

4. Pattern encoding and pattern similarity Given a patterns set P={Pi I i=1,2 ...., w],and a attributes set of pattern A=[Ai I k1.2, ..., m),suppose importance order of attributes is listed in descending way, that is to say, if icj, then Ai is more important than Aj.

Suppose the domain of attribute Ai is Dk, i.e. VkE Dk I k1.2 ...., n.

detail as: There are three pattems PI ,  Pz, P3e P, described in PI=vIvzv~...vivi+l...v~ PZ=UIUZU~ ... uiui+l ... U.

P3=qlq293...qiqi+l...q, Similarity of pattern Pi and Pj is represented by function Sim (Pi, Pj) , the importance order of attributes is represented by function VIP(v), the more important the attribute value is, the bigger its VIP@).

Definition 1: { vi? D*, I i=1;2 ,... ,n ] [ uiE Dh I i=1,2 ..... n 1 { qiE Dh I i=1,2 ,..., n I if j=I,Z,.. .,i, vj=uj and v j q , If j=i+ 1, ( vj=uj and vj#q, ) or ( vj#uj and vj&amp; and I vIp(vjj-vIp(uj) I &lt; I VIP(V~)--VIP((IS I ThendefineSi (PI, Pz) &gt;Sim (PI, P3) i.e. similarity between pattern PI and pattern Pz is bigger than similarity between pattern PI and P3. That is to say,  pattem Pz is more similar to PI than P3.

Definition 2: if k1.2 ,..., n, and I vIP(vj)-vIp(uj) I = I w(vj)--vIp(qj) I is always true, then we defme Sim (PI, Pz) =Sim (PI. P3) , i.e. similarity between pattern PI and pattern Pz is equal to similarity between pattern Pl and P3.

Definition 3: ifj=1,2 ,.... n, vj=uj is always hue, then we call pattern PI is equal to pattern Pz, and define Sim(PI, Pz) = m.

According to the definition of pattern similarity, using the encoding algorithm mentioned in last section, we can    the encoding algorithm mentioned in last section, we can prove that the relationship between the similarity of patterns and patterns encoding are. very close .

Suppose pattern PI, P2, P3 satisfy "complete and ordered", codes of PI is ECpl.=e,le~... em. codes of PZ is ECpz=eUle.z ... e,, codes of P3 is ECn=erlee.. e, we get the following five theorems.

Theorem I: as for any pattern PI ,  P2. P3 in a pattem set, similarity between pattern PI and PZ is bigger than similarity between PI and P3, if and only if difference between code of gattem PI ECpl and code of pattern Pz ECR is smaller than difference between code of pattern PI ECpl and code of pattem P3 EC,.

Proof: (1) necessity.

ifsim (PI, P,) &gt;sim (PI, P3), then I ECpl-ECn I &lt; I E&amp;-ECn I .: sim (PI, P,) &gt;sill? (PI, P31, According to defdtion 1: i.e. I e*-ed I = I e,-e, I =O Ifj=1,2 ,..., i, ( v p j )  and ( v j q )  ,theneVFeuj=e,.

ifj=i+l, we have I vJP(vj)-vIp(uj) I &lt; I vP(vj)-vIP(qj) I i.e. I ed-ed I &lt; I e,-ed I 1. I ECPI-ECR I &lt; I ECpi-ECn I I ECpi-ECn I C I ECpi-ECn I , (2) Sufficiency.

If thenSim (PI ,  Pz) &gt;Sim (PI, P,) *.* I ECpl-ECp2 I &lt; I ECpl-ECn I so weencodetheformerj(j=I,Z ..... i)digits ofpattem, 26-29 August'2004 and get .i.e. I e,-e.j I = I e VI - -e  e . I - 0 ifj=i+l, then I ev,-euj I &lt; I e,--e, I i.e., I ~P(vj)-VIP(uj) I &lt; I VIP(v,)-VrP(q,) I :. according to definition 1: Sim (PI ,  Pz) &gt;Sim (P I ,  Pp) Proved.

eVj= euj= ed Theorem 2: as for any pattern PI ,  PZ! Pp in pattern set, similarity between pattern PI and Pz is smaller than similarity between PI and PJ, if and only if difference between code of pattern PI ECpl and code of pattem PZ ECn is bigger than difference between code of pattem PI ECpl and code of pattern Pp ECpp Proof: we can get the conclusion in the same way as theorem 1.

Theorem 3: as for any pattern PI I P2, P3 in pattern set, similarity between pattern PI and Pz is equal to similarity between PI and Pp, if and only if difference between code of  pattern PI ECpl and code of pattern P2 ECn is equal to difference between code of pattern PI ECpl and code of pattern P, ECP3 Proof: (1)necessity.

IfSim (PI ,  P2) =Sim (P I ,  P3), then I ECpl-ECp2 I = 1 ECPI-ECD I *: Sim ( P I P  PI) =Sim (P I ,  PI), according to defmition I : ' if when j=1,2,..,,n, we have (vj=uj) and (vj=qj), then we get e .- e .- e VI- UJ- w i.e. I es-euj I = I e,-ed I =O .*. I ECpI-ECp2 I = I ECpi-ECn I I ECpl-ECn I = I ECpt-ECp) I , ... I ECpi-ECn I = I ECpl-ECp, I (2) sufficiency.

If thenSim (PI ,  Pz) =Sim (PI, Pp) so as for n digits of pattem, we have that is I ed-eUj I = I evj-ed I =O, {j=1,2 ,..., n) [j=l,2,.. .,n]    [j=l,2,.. .,n] , evlev2 ... em=euleu2 ... e,=eqleq* ... eqn :. I VIP(Vj) - VIP(Uj) I = I VIP(Vj) - VIP(%) I , ' according to definition 2 Sim (P I ,  P2) =Sim (P I ,  P3) So far the theorem bas been proved.

Theorem 4: If PI is equal to P2, then difference between code of pattern PI ECpl and code of pattem PZ ECp2 is 0.

That is to say, if Sim(P1, P2) = 00 then Proof: ..' Sim(PI, Pz) = I ECpi-ECn I =O According to definition 3, ifj=l,2, ..., n, then vI=uI :. VIP(v,)=VIP(u,) (j=1,2 ,..., n J :. eyI=eyI {j=1,2,. ..,n J :. e,le,z... e,=eUle uz... em :. I ECpl-ECn I =O So far the theorem bas been proved.

Theorem 5: given a pattern set P of patterns and a specific pattern Psp, if using similarities between P, and each pattem in the set, we can sort the set to queue Q1 increasingly, in the meanwhile, using the absolute differences between code of pattern P, and code of each pattern in the set, sort the patterns in set to queue Q2, then the relative order of any two patterns of set P in Q1 is the same as 42.

Proof: suppose pattern PI and P2 are in patterns set P ~~ ~ ifSim (PI ,  P,) &lt;Sim tP2, Psp) thenPIisinfront of P2 in queue Q1.

According to theorem 2: we get That is to say, PI is in front of P2 in queue Q2.

Therefore the relative orders of pattern PI and P2 in Q1 and Q2 is consistent.

if Sim (PI ,  Pw) &gt;Sim (P2, Psp) then PI is after P2 in queue Q1.

According to theorem 1: we get That is to say, PI is afkr Pz in queue Q2.

Therefore the relative orders of pattern PI and PZ in Q1 and 4 2  is consistent.

ifSim (PI, Psp) =Sim (P2, Psp) , according to theorem 3: we get I ECpi'ECsp I &gt; I ECn-ECsp I lECpl-ECsp I &lt; I ECn-EC, I . '  I ECpl-ECsp I = I ECn-EC, I at the same time, as the similarity of pattern PI is equal to that of Pz, which leads to that the relative position of the two patterns in queue Q1 and 4 2  has something to do with the order generated from patterns set during sorting the patterns.

When sorting the patterns using these two methods, the patterns got from both two pattern sets are in the same orderar, then we can say that the relative order of pattern PI and Pz in queue Q1 or Q2 is same.

However, if we get patterns from patterns set randomly using the two sorting methods, then we define: those patterns which have the same similarity get the same sorting number in queue Q1. In the same way, we define those patterns which have the same difference of code get the same sorting number in Q2.

Thus, as long as the sorting numbers are the same we consider the relative order consistent.

26-29 August 2004 5. Intrusion patterns detection algorithm According to the relationship between pattem code and pattem similarity indicated in the 5 theorems in the last section, we can recognize the similarity degree of the two patterns by the difference between the pattems codes. Using E which is the value deviating from user-defined pattern, we can make sure whether the similarity between a pattern    we can make sure whether the similarity between a pattern and the standard pattern is in reasonable range, thus we can detect intrusions.

As for standard pattems set P, we can use the encoding algorithm to compute each pattem code at one time, let the codes set to be Ep. As for any pattern PI, we can develop the following algorithm to check whether it is intrusion pattem.

Begin (1) encoding pattem PI as %I (2) min=m: (3) For any e E Ep do / each code e in standard pattern set is compared with %,,code of pattern pl,and select the minimum*/ begin diffp = I 5, -e I if diff, &lt; min I * the absolute difference between %I and e / then min = diff, end (4) if min&lt; E End 6. Conclusions then alarm(rep0rt pattem PI is intrusion pattern) association rules and frequent episode, and converts pattems of data mining to digits using the encoding method.

It proves the 5 theorems of the relationship between pattern encoding and pattem similarity, and according to the patterns similarity principle implicated in the theorems and through computing and comparing similarities of two pattems inhusion patterns can be detected. The method that converts intrusion detection pattems in data miniig to digits provides a simple and feasible way for intrusion detection system to automaticalIy , intuitively , efficiently detect network of great trafh.

Acknowledgements This subject is supported by National Natural Science Foundation of China (No. 60273075).

