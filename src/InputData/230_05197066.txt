Study on Association Rules Mining   Based on Searching Frequent Free Item Sets using Partition

Abstract?Mining of association rules is an important problem in data mining, given a large set of data, extracting frequent item sets in this set is a challenging job in data mining. Item sets matching is the chief problem in extracting frequent item sets. And item set matching is the bottleneck of the mining process. It also has been proved that extracting frequent free item sets is a useful method. Many efficient algorithms have been proposed in the literature. The idea presented in this paper is to divide the database into multiple partitions and then find frequent free item sets in each partition, then merge the several partitions to generate other frequent free item sets and count the support. The algorithm costs little memory to save additional support numbers of item sets in each partition but greatly reduces the time of item set matching which is the bottleneck of the mining process. The experiments on real datasets have showed its good performance.

Keywords-component: association rules mining; extracting frequent free item sets; partition

I. Introduction Data Mining is to search useful information from plenty  of data. Association rules mining is an important task in Data Mining. In view of association rules mining, many fast algorithms have been provided, and have achieved some effect. But the existent association rules mining algorithms cannot satisfy the ever-increasing demand.

This paper proposes a fast algorithm--frequent free item sets using partition (FFIP) for association rules Data Mining. The FFIP algorithm can generate full frequent item sets by mining the free item sets in database, and then give association rules. The FFIP algorithm combines the advantages of MinEx[1] algorithm and partition[5] technology. It can reduce the times of item set matching 1and greatly lessen the running time by means of dividing the database into multiple partitions and searching the free item sets in each partition. It compares the FFIP algorithm  1 The research is supported by Tianjin Construction management committee soft science research plan project 2007-soft46  with other classic algorithm in theory, and offers the experiment estimation.



II. Related Work At the earliest, association rules mining were raised by  Agrawal[2]. Agrawal  also offered the Apriori algorithm using for mining association rules[3].The basic thought of Apriori algorithm is to generate special scale candidate item sets, then scan database and count to confirm whether or not these candidate item sets are large. Apriori algorithm is the classic algorithm in association rules mining.

The Partition[5] algorithm, that is fundamentally different from all the previous algorithms in that it reads the database at most two times to generate all significant association rules. Contrasting this with the previous algorithms, where the database is not only scanned multiple times but the number of scans cannot even be determined in advance. Surprisingly, the saving in I/O is achieved independent of the cost of increased CPU overhead.

In? the? next? section? we? introduce? problem? description?used?in?this?paper.?In?Section?3,?we?present? the?notion?of?association?rules?mining?and?the?frequent? free?item?sets.?In?section?4,?we?present?the?MinEx?and? show?the?example?of? the?MinEx.?At? the? following, We introduce a fast algorithm--frequent free item sets using partition (FFIP) and show the example. We initially bring forth that FFIP is superior to MinEx. In Section 5, we give experiment and the algorithm evaluation. Finally, we conclude with a summary and directions for future work.



III. Problem Description  A. Association rules mining Let I= {i1, i2, ,in }be a set of items ,ij (1 ? j ? n) is an  item of the dataset. Given dataset DB= {tl,t2, ,tn }, DB denotes the set of transactions. Each transaction ti= {tid, A} has a unique identifier tid and a set of items, A ?  I.

Suppose that X,Y ? I and X Y= ?  then X Y is an association rule. The support of this rule is denoted as  2009 Asia-Pacific Conference on Information Processing  DOI 10.1109/APCIP.2009.93   2009 Asia-Pacific Conference on Information Processing  DOI 10.1109/APCIP.2009.93     S(X Y) and the confidence of the rule is denoted as C(X Y).

S(X Y) =| {t|t includes X and Y }| / |DB| C(X Y)= |{t|t includes X and Y}| / |{t| t includes X}| Definition? (frequent? sets).?FreqSup(r,? )? is?the?  set? of? all? pairs? containing? a? frequent? itemset? and? its? support,? i.e.,? FreqSup(r,? )=??X, S(r, X)??X ? R and? S(r??X)/jr? ? ? ?.?  Association rules mining means finding all association rules which support the rules and whose confidences are greater than minimum support smin  and minimum confidence cmin ,  respectively  The association rules mining that Agrawal had proposed can be divided two steps. The first step is to search the item sets whose supports are large than the threshold value and account the confidence. The second step is to produce the rules taking advantage of the information from the first step.

The first step is the main step of association rule mining, that is to find all the frequent item sets.

B. Frequent Free Item Sets Mining Firstly, we can see an example here. S(X) denotes the  support of item set X in database D. If S(AB)=S(A),that is to say the times item set AB appears are same to item set B, item A and B appear together. we can deduce that S(ABC)=S(AC) , S(ABD)=S(AD) and S(ABCD)=S(ACD).

In order to attain the support of any superset of item set AB, we need not count all the item set AB by scan the database, but we can simply account to get it directly taking advantage of the characteristic of free item set. This is the theory of producing the complete frequent item set by making use of mining frequent free item sets.

Definition 1( ? -free-set). Let r be a binary database over R, X ?  R is a ? -free-set w.r.t. r if and only if there is no ? -strong rule based on X in r. The set of all ? -free- sets w.r.t. r is noted Free(r, ? )[1].

Since ?  is supposed to be rather small, informally, a free-set is a set of items such that its subsets (seen as conjunction of properties) are not related by any very strong positive correlation.

One of the most interesting properties of freeness is its anti-monotonicity w.r.t.itemset inclusion.

Definition 2 (anti-monotonicity). A property ?  is anti-monotone if and only if for all itemsets X and Y , ?  (X) and Y ?  X imply ?  (Y ).

The anti-monotonicity has been identified as a key property for efficient pattern mining [6,7,8], since it is the formal basis of a safe pruning criterion. Indeed,efficient frequent set mining algorithms like Apriori [2] make use of the (anti-monotone) property ?to be frequent" for pruning.

The anti-monotonicity of freeness follows directly from the definition of free-set and is stated by the following theorem.

Theorem 1. Let X be an itemset. For all Y ?  X if X ? Free(r, ? ) then Y?Free(r, ? ).

J.Boulicait has proved that frequent free-sets can be efficiently extracted using pruning strategies developed for frequent item-set discovery, and that they can be used to approximate the support of any frequent itemset

IV. Algorithms Description  A. MinEx In this section, there is the algorithm, called MinEx[3]? ,  generating all frequent free-sets.

MinEx can be seen as an instance of the levelwise  search algorithm presented in 4]. It explores the itemset lattice (w.r.t. set inclusion) levelwise, starting from singletons and stopping at the level of the largest frequent free-sets. More precisely, the collection of candidates is initialized to the collection of all sets of size 1 and then the algorithm iterates on candidate evaluation and larger candidate generation. At the ith iteration of this loop, it scans the database to find out which candidates are frequent free-sets. Then, it generates candidates for the i+1th iteration, taking every set of size i+1 such that all proper subsets are frequent free-sets. The algorithm finishes when there is no more candidates.

Algorithm 1 Input: r a binary database over a set of items R,?  and  ?  two thresholds.

Output: FreqFree(r,? ,?  ) 1. C1 :={{A}|A?R}; 2. i := 1; 3. While Ci ??  ; do 4. FreqFreei :={X|X ?  Ci and X is a ? -frequent ? -  free-set}; 5. Ci+1 :={X|X ?  R and ?  Y ?  X, ?Uj ? iFreqFreej}  |Uj ? iCj 6. i := i + 1; 7.od; 8. output Uj<iFreqFreej ; Using the correctness result of the levelwise search  algorithm given in [4] the following theorem is straightforward.

Theorem 4 (Correctness). Algorithm MinEx computes the sets of all ? frequent  ? -free-sets.

There is an example of MinEx algorithm.?  TABLE I.   AN EXAMPLE DATABASE  Transaction id Containing items 001 a ,b, c, e 002 b, c, d 003 b, c, d 004 a, b, d 005 b, c, d 006 a, c, d, e  Using the MinEx algorithm, we evaluate the 1th level frequent item sets and their support during the 1th  time scanning database. We discover that S(e)=2, then generate the 2th level candidate item sets and attain the 2th level frequent item sets and their support during the 2th  time scanning database. We find S(ae)=2. At this     time,S(ae)=S(e), so that item set ?ae? is not a frequent free item set. So the supper sets of  ?ae? are also not frequent free item. In order to generate the 3th level candidate item sets , we only need connect the 2th level frequent item sets until  cann?t generate new candidate item sets. The item set ?bc? is a frequent free item set ,S(bc)=4, and S(bcd)=3 ,bcd is also a frequent free item set. To count the support of ?bcd?, we spend three times database scanning.?  B. fast algorithm-frequent free item sets using partiton We introduce a fast algorithm--frequent free item sets  using partiton(FFIP) in this section.

Definition[5] : A partition p ? D of the database refers  to any subset of the transactions contained in the Database D. Any two different partitions are non-overlapping, i.e., pi pj = ? ,i ?  j. We define local support for an itemset as the fraction of transactions containing that itemset in a partition.

The idea presented in this section is to divide the database into multiple partitions and find free item sets in each partition.

Algorithm 2  the main idea of the FFIP is three steps, the first step is to divide the data sets into multiple partitions, the second step is to find the  frequent free item sets  and count the supports  of the free item sets, the third step is to merge the partitions and supports . The detail is shown as follows.

Input: r a binary database over a set of items R,?  and ?  two thresholds.

Output: FreqFreePart(r,? ,?  ) 1.  c1={Large 1-itemsets}; 2.  P= partition_database(D); 3.  n=Number of  partition; 4.  i=1; 5.  while(Ci ?? ) 6.  {for(i=1;i<=n;i++) 7.  {read_in_partition(pi?P); 8.  Li=gen_free_itemsets(pi); 9.  count all support in Li} 10. for(i=2;Lij ??   ,  j=1,2,?,n ; i++) 11. CiG= j=1,2,?,n Lij; 12. for(i=1;i<=n;i++) 13. {read_in_partition(pi?P); 14. for all free itemsets c?  CiG gen_count(c,pi); 15.put the free itemsets into the set of FreqFreeParti; 16.Ci+1=Apriori_Gen(FreqFreeParti); 17.i=i+1;} 18.Output Uk<iFreqFreeParti;  C. Example Putting the algorithm into application, data as above  Table I, we divide the database into two sections. The first section is {001,002,003}, the second section is {004,005,006}.

In TableI, S(bc)=S(b)=3, according the characteristic of free item set, item ?bc? isn?t a frequent free item set.  In the Table II, S(bd)=S(b)=2, in the same way, the item set ?bd? also isn?t a frequent free item set.

TABLE II.  THE FIRST SECTION  Transaction?id? Containing?items? 001 a?,b,?c,?e? 002 b,?c,?d? 003 b,?c,?d?  TABLE III.  SECOND SECTION  Transaction?id? Containing?items? 004? a,?b,?d? 005? b,?c,?d? 006? a,?c,?d,?e?  We know that: though item set ?bcd? is a free item set in the whole database, it isn?t free item set in the two sections, at this point we can get the two supports by counting in two sections. Obviously, the support of item set ?bcd? in the whole database is equal to the addition of the two supports.

Suppose that, S1(bcd) , S2(bcd) denote the support of ?bcd? in TableI, TableII, respectively, S(bcd)= S1(bcd) + S2(bcd).

TABLE IV.  THE 1TH  SCANNING IN THE FIRST SECTION  Item set support a 1 b 3 c 3 d 2 e 1  TABLE V.  THE 2TH  SCANNING IN THE FIRST SECTION  Item set support ab 1 ac 1 ad 0 ae 1 bc 3 bd 2 be 0 cd 2 ce 1 de 0  From the two times scanning in the first section,We know  S(bc)=S(b)=3,S(bd)=S(d)=2,S(cd)=S(d)=2, so item sets ?bc?,?bd?,?cd? are all not free item sets. And then item set ?bcd? is not free item set. We can directly know S S1(bcd)=S(bd)=2,but not need the 3th scanning the database.

TABLE VI.  THE 1TH  SCANNING IN THE SECOND SECTION  Item set support a 2 b 2 c 2 d 3 e 1  TABLE VII.  THE 2TH  SCANNING IN THE SECOND SECTION  Item set support ab 1 ac 1 ad 2 ae 1     bc 1 bd 2 be 0 cd 2 ce 1 de 1  From the two times scanning in the second section, We know  S(bd)=S(b)=2, so item set ?d? is not a free item set.

And then item set ?bcd? is also not a free item set. We can directly know S2(bcd)=S(bc)=1,but need not the 3th scanning the database.

From above we can directly see that S(bcd)= S1(bcd) +S2(bcd)=2+1=3, unnecessarily scan the database more time. If the database is enough large scale, it will greatly reduced the time of item set matching which is the bottleneck of the mining process.



V. Experiment and the Algorithm Evaluation Our experimental environment is shown as follows,  Computer configuration: Intel(R) Pentium(R) Dual E2180 2.00GHz, and the memory volume is 1.99GB. The Operating System is Windows XP. The item sets used is a real data set , which has 130 items and 67557 transactions.

The average length of the transactions is 43.

We test the run time of the MinEx and the FFIP algorith at different support, using 10, 20, 30 partitions respectively.

As seen in Figure 1, the FFIP algorithm is more quicker than MinEx, the more the partition, the more obvious with the effect.

The theory that FFIP is quicker than MinEx is demonstrated in section 4.



VI. Summary The FFIP algorithm is an efficient algorithm which  mines frequent free item sets to generate association rules using partition technology. The realization of FFIP algorithm is simple and the need of resource is very flexible, and the running speed is fast. Interesting? future? work? includes? applications? of? the? FFIP? algorithm? to? the? discovery? of? association? rules? with? approximated?  confidence? and? support,? and? to? the? approximation? of? boolean?formula?support.

Figure I. run time comparison of the two algorithms  REFERENCES [1] Boulicaut J.F , Bykoswski A and Rigotti C . ?Approximation of frequency queries by means of free-sets,? Proc. PKDD?00, Int.

Conf. Principle of Data Mining and Knowledge Discovery, 2000, pp. 75-80.

[2] R. Agrawal, H. Mannila, R. Srikant, H. Toivonen, and A. I.

Verkamo. ?Fast discovery of association rules,? AAAI, Advances in Knowledge Discovery and Data Mining, 1996,pp.307-328.

[3] Agrawal R , Srikant R. ?Fast algorithms for mining association rules in large databases,? Proc.  the 20th Int?l Conf. on Very Large Data Bases(VLDB),June 1994,pp.478-499.

[4] H. Mannila and H. Toivonen. ?Levelwise search and borders of theories in knowledge discovery,? Data Mining and Knowledge Discovery, 1997,1(3):pp.241-258.

[5] Savasere A,Omiecinski E.and Navathe S. ?An efficient algorithm for mining association rules in large databases,?Proc.VLDB ,l995,pp.432-443.

[6] J.F. Boulicaut and B. Jeudy. ?Using constraints during itemset mining: a generic approach,? Technical Report 2000-01, INSA Lyon, LISI, F-69621 Villeurbanne, Mar.2000.

[7] H. Mannila and H. Toivonen. ?Levelwise search and borders of theories in knowledge discovery,? Data Mining and Knowledge Discovery, 1997,1(3): pp.241-258.

[8]? R.? Ng,? L.? V.? Lakshmanan,? J.? Han,? and? A.? Pang.

