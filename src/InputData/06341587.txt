Mining Association Rules to Facilitate Structural  Recovery

Abstract? In order to facilitate software maintenance, data mining techniques such as clustering and association rule mining can be used for extracting meaningful information from source code. Although in the past the techniques have been employed in independent or combinatorial ways for various maintenance activities, none of them combines dynamic information and visualization method to assist structural analysis. In this paper, we present a solution for enhancing the recovery process. First, execution traces are obtained using dynamic analysis and result matrices mapping between traces and method calls involved in the traces are generated. Based on the obtained matrices, clustering algorithm is applied to product an initial system structure, and association rule mining technique is also applied to build the associations among the clusters. Second, the obtained dynamic dependences based the analysis are demonstrated using visualization, in which software entities and associations are represented as nodes and edges, respectively. Thus the relations among clusters can be depicted, which are helpful for evaluating clustering quality and conducting potential refactoring. Through applying the approach on an actual application system, initial analysis is presented and the execution results can be used to guide further research work.

Keywords- Dynamic Analysis; Scenario; Association Rule Mining; Clustering Algorithm; Use case

I.  INTRODUCTION Program comprehension is an essential activity in software  maintenance. Without prior knowledge, reverse engineers are difficult for understanding a legacy system implementation and system?s functional intents. For most systems, the available documents usually are out of date or even non-exist, the only reliable resource for reverse engineers to know domain content is the source code [1]. In this case, data mining techniques, such as software clustering and association rule mining often became very valuable for producing high level overview and interrelations through system entities, and thus facilitate legacy systems understanding.

For an object-oriented system, clustering is an approach to group similar objects into the same group in terms of the standard of similarity. Objects within the same cluster would have higher similarity than in different clusters [2]. Some clustering techniques such as performing architectural decomposition rely not only on static analysis of source code but also on dynamic analysis to provide meaningful insight on the structure of software systems. By dynamic analysis, the roles of software entities playing on the system and the style of  their interactions might be determined, which is helpful to understand how the system functionalities are implemented.

Association rule mining as another data mining technique can find previously unknown nontrivial patterns and relations from frequent item sets, which is also employed to mine rules from the generated trace matrices. According to these rules, the item elements involved in the traces are located to the relevant clusters, the edges connecting different system entities are established with the weight values of association rules, which represent the directed dependencies among sets. By doing so, the relations can be erected and visually displayed.



II. RELATED WORK Utilizing the dynamic technique to deal with and evaluate  the obtained data has been employed in software maintenance.

Thomas Eisenbarth et al. [7] propose a scenario-based dynamic approach combining with concept lattice analysis to correlate program elements and requirement features. Silvia Breu et al.

[4] analyze generated traces for recurring patterns of method calls involved in the traces. Mining association rules to assist software understanding has also been applied in reverse engineering field. Kamran Sartipi et al. [8] analyze the legacy system by mining code rules to try recovery software architectural design model. Christos Tjortjis et al. [3] utilize data mining technique to deal with the item sets which consists of variables and data types etc., for finding the frequent rules in respective modules. Some researches [5, 6, 11] apply association rule mining based the dynamic collected data for identifying the potential crosscut concerns in software system.

Meanwhile, the mined object is not restricted to analyze code unit, its scope extends software requirement documents and software library. In [9], a mining approach based software documents is presented for finding frequent patterns.

Our approach is inspired by above approaches. In contrast, we propose a combination approach and compare various similarity metric [13] for getting best experiment result, and we extract association relations from execution traces for system structural recovery and software refactoring, the visualization built using our tool is utilized as an effective help to judge the association degree among program units, thus it is easy for producing a rough and quick grasp of the legacy system.



III. BACKGROUND Figure 1 illuminates our approach combining hierarchical  clustering and association mining algorithm to produce clusters   DOI    DOI 10.1109/COMPSACW.2012.57        and rules from dynamic traces. The strong rule [10] satisfies both a minimum support threshold and a minimum confidence threshold, as the main analysis object in our experiment.

Input: trace-entities matrix M; min_support threshold Tsh Output: required clusterings C; frequent item sets L; association graph G  trace event  M Calculate similarity of trace entities; Merge the nearest clusters, say Clusteri and Clusterj.

Repeat until there is only one cluster left.

Cut the tree at set level to produce C.

//mining association rules Consider trace collection as transaction set Scan M to find frequent 1-itemset L1 ;  For  n=2; Ln- 1 ; n ++ { Apriori_gen (Ln- 1,Tsh) ;  for each transaction t in M Ct subset ( Cn t );  for each  c Ct   c.num ++ ; } Ln { c Cn | c.num  Tsh  Return  L L1  L2  ?.  Ln // visualization For each obtained rule L  Draw a node to represent each entity.

If (  Pair(ci,ci+k)  L)  Draw a directed edge to represent the rule.

Correlate the detail of L to C Accumulate the associations to product macro lines connecting each C.

Figure 1.  The combination algorithm  Table I shows an example to extract rules from a transaction set. The assumption is that a system, in its final version, has nine classes which from c1 to c9. Its each snapshot contains the classes of its different version. Frequent 3-itemsets are calculated during the process of association rule mining. For the item set of {c2, c4, c5}, the support is 37.5%, If the minimum support is set to 30% and the minimum confidence to 100%, we can generate two rules: c2^c4 c5 and c2^c5 c4, which indicate a common change relation among these three classes. The measurement of the common change among classes is to analyze generated strong rules, i.e. a strong  probability with 100% confidence indicates a common change on the two sides of the rule.

TABLE I.  EXAMPLE OF ASSOCIATION RULE MINING  Trans Set of classes as item set Id 1 c1, c4, c5 Id 2 c2, c4, c5 Id 3 c2, c3, c4, c5 Id 4 c1, c2, c4, c5 Id 5 c1, c2, c3, c6 Id 6 c3, c5, c6, c9 Id 7 c1, c2, c8, c9 Id 8 c1, c3, c4, c7, c8   In order to extract association relations between the items,  the visualization technique is utilized for presenting the in- formation to quickly display and compare the dependences of the items. For instance, the association relations for rules c2^c4  c5 and c2^c5 c4 are shown in Figure 2. Where an arrow indicates a dependence direction and the thickness of the edge stands for the weight of the association.

Figure 2.  An example of association graph

IV. OUR APPROACH We assume that the relation extraction using rules from  dynamic traces is feasible. The associations obtained by mining rules reflect some dynamic behavior information, which are difficult to generate using static structural analysis alone, offer the maintainers a grasp of structure relations and further help them evaluate clustering quality and restructure the system.

Figure 3.  Overview of our approach  We outline the proposed process in Figure 3: the first step scenario creation collects the runtime behavior events about the legacy system, and the following phases are to cluster the program entities involved in dynamic traces and take the set of traces as input to form a item set using apriori association rule algorithm to find associations among execution events. The last steps are the dependence analysis and the result clusters are visual displayed. And an inference step for deciding on whether it is necessary to modify the system structure will be decided in terms of the generated clusters and the obtained strong association rules.

A. Scenario selection We combine a specific experiment to illustrate the  implementation process. For a certain feature of ?draw? in the drawing tool JHotdraw project, there are a feature-specific scenario set is designed according to the knowledge about the application domain, available documents, and user?s guide of the subject system. In this experiment, we consider the following selection: Scenario 1: start, draw a rectangle, stop; Scenario 2: start, draw a polygon, stop; Scenario 3: start, draw a line, stop; Scenario 4:  start, draw an ellipse, stop.

B. Trace-classes matrix Generation We assume that each scenario correlates to one trace, and  each trace is generated by triggering relevant features. Thus a trace for every selected feature is generated by executing the instrumented system. The execution traces are generated in the form of entry/exit listings of object invocations. We collect the classes involved in the traces as follows.

TABLE II.  THE SCENARIOS AND RELEVANT CLASSES IN THE TRACES  scenario Classes in each trace Trace1 AbstractCommand, UndoableTool, CompositeFigure, ToolButton,  RedoCommand, ZoomDrawingView, ZoomDrawingView Abstract_ Command, ZoomDrawingView , CollectionsFactoryJDK12 ?  Trace2 ZoomDrawingView, FigureAttributeConstant, StandardDrawingView CollectionsFactory PolygonFigure FigureChangeEvent AWTCursor Bounds, ZoomDrawingView, CollectionsFactoryJDK12...

Trace3 StandardDrawingView, StandardDrawingView, CompositeFigure AnimationDecorator, FigureChangeEventMulticaster, PolyLineFigure AbstractTool, AlignCommand, HandleEnumerator, CreationTool, StandardDrawingView, ZoomDrawingView?  Trace4 FigureAttributeConstant, AbstractTool AttributeFigure AbstractFigure SelectionTool, UndoableTool, AttributeFigure, AnimationDecorator FigureAttributeConstant, ZoomDrawingView ,AbstractCommand ?  C. Concept lattice representation We use concept lattice tool to identify feature-specific  classes and common classes with concept lattice construction and visualization. Feature-specific classes are more important in understanding functional intents. The generated concept lattice in terms of the data of execution traces is shown in Figure 4 where the feature-specific concepts are gathered at the lower part of the lattice and common classes are clustered at the upper region, respectively.

We investigate whether these common concepts as a cluster for acting as mere utilities. These concepts are also referred to as omnipresent objects. In the experiment we do not distinguish between utilities and common parts of the feature that occur in traces and group them as a cluster. These common components exist in almost parts of a system and influence the clustering quality if clustering them with other components. Therefore, a feasible way is to deal with these concepts of the system by grouping them into a separate cluster, and then use clustering approach to group the rest concepts.

Figure 4.  Concept lattice representation of the traces and classes  D. Applying the Clustering Algorithm A problem is that each trace will produce a great deal events  even in such a small experiment, e.g., 330 classes are generated  in Trace1 and one scenario may call the same class several times. This times degree can be distributed by clustering analysis but be regarded the same by concept lattice. Possibly, the times of the same class called in the traces can impact on the structure, so we use clustering technique as next analysis approach. Eventually, a trace-class matrix is built with the rows represent the 65 non-repetitive classes and the columns are the four traces which a part of data is shown in Table II.

Our clustering groups show great difference in number of classes, e.g., if we cluster these classes into seven groups, in which the number of classes in one group will up to 43.

Considering the designed use uses to realize the draw feature, there are similar functionalities on the process, so a few clusters likely contain most of code entities. A part of generation clusters are shown in Table III.

TABLE III.  A PART OF GENERATION CLUSTERS  Clusters  Classes Cluster1 Singlefigureenumerator  Polygontool Polygonfigure?  Cluster2 AttributeFigure ColorMap FigureAttribute FigureAttributeConstart?  Cluster3 Selectiontool Polylinefigure Linefigure Myselectiontool Selectareatracker?  Cluster4 AbstractFigure StandardDrawingView FigureChangeEvent?  ? ?  E. Applying association rule mining We use the Apriori algorithm with min_support value of  30% and confidence value of 100%, and then result in 30 association rules (partially showed on Table IV).

TABLE IV.  A PARTIAL OBTAINED ASSOCIATION RULES  Rules Supp. Conf.

DragTracker AbstractTool 0.3 1.0 RedoCommand ^ AbstractCommand ToolButton  0.4 1.0 RelativeLocator BoxHandleKit 0.3 1.0 AbstractCommand RedoCommand 0.4 1.0 RedoCommand ToolButton  0.5 1.0 ToolButton RedoCommand 0.5 1.0  We consider these obtained strong association rules are  meaningful for clustering analysis and program understanding, because the rules reflect the relations among classes. In particular, we will introduce how we utilize these rules to improve the clustering quality in the section of Case Study.



V. CASE STUDY  A. Target system We use a small-scale industrial system (OnlineBank) from  one industry partner as our case study. We hope to recover system?s structural relationships by clustering and mining association rules. Obviously, the selection of the use cases is        important for creating a wide range of functionality in a legacy system. The coverage achieved by the scenarios takes great influence on the dynamic approach result. Therefore, to derive a balanced set of use case covering various aspects of the system is necessary for whole structural recovery. Each selected use case corresponds to a set of with execution scenarios and each scenario is an object of clustering and its execution traces are the objects? attributes, thus a dynamic matrix is generated.

The transaction set can be constructed according to the transactions as execution traces and the items as the invoked methods in the traces. We consider build a connection line between two objects if there are a strong association rule exists, and build two or more lines if two or more rules exist between.

So the thickness of edges shows the accumulating relations.

That is, the thicker of the edge shows, the more links between two cluster and versa vice. Finally, we get all these relations among these clusters in terms of generated association rules and our tool displays these data with visualization method.

Figure 5 shows these clusters associating with arrows to indicate a dependency exists, and the thickness of the edges stands for the association weight. Each cluster contains relevant methods which display the associations within differ groups or same groups. We implement a prototype tool based on XRay [12], an open source tool, to investigate the detail in a certain cluster by clicking the cluster icon. (shown in Figure 6)   Figure 5.   Dynamic association graph  We compare the great deal number of obtained rules by setting a different min_support value. Our experiment shows that the adjustment setting produces different influence to the result. As the minimum support value increases, there is a clear downward trend on the number of rules (shown in TABLE V).

TABLE V.  THE NUMBER OF OBTAINED RULES IN TERMS OF DIFFERENT MINIMUM SUPPORT DEGREE  Min_sup 40% 50% 60% 70% # Rules 321 234 140 87  Furthermore, we can analyze different cluster association  relations for understanding system?s structural information.  In this paper, we first group together the similar functionalities to produce clusters. Within a same cluster, association rule mining helps discover associations between items that reside within the same cluster, which discover rules focused on the method calls of each cluster separately. While in different clusters, association rule mining is useful for finding the associations.

Since we perform the association rule mining for all the  clusters, the result is to generate rules and to discover frequent item sets concerning all the clusters in total.

The primary case study proves the effectiveness of clustering and association rule mining. In the case study, each edge is expressed through the weight and indicates potentially association dependencies, and the weight value is inferred by each erected association rules. However, the approach might be improved by setting various weight levels. For instance, considering the following two rules: ?i1 i2? and ?i1^ i3 i2?, the weights should be set with different value. This weights difference has not been distinguished in the article, we consider this as our future work.

Figure 6.  Concrete methods of a certain cluster  In Figure 6 we can see the connection lines among the concrete system components, where each line stands for a generated strong association rule. The arrow represents the dependency direction from an entity to another. And the nodes are the system?s entities and the edges represent the associations (summed up in terms of the collected rules) among the entities. That is, generated graph is based on the exploration of the association relations. The more strong rules between two entities exist, the more thickness of the edges display. By summing these edges, accumulated connections will be formed with thicker lines as shown in Figure 5  B. Clustering Evaluation As discussed above, we assume a premise on the issue that  two different clusters merging depend on the thickness of the edges, which indicates the association degree. That is the reason of why results of association rule mining can help clustering. The rationale for doing so is based on the idea that strong rules between objects can indicate the dependency relations. Regarding the above case study, there is reliable evidence showing these rules can reveal the details of the system. As the proposed work is to obtain dynamic events and related rules from these events, it is suitable for structured or object-oriented system, or even for both design methods.

Our approach first groups trace events according to their similarity. Such groupings can be evaluated by comparison to the original developers? perceptions. This system expert of OnlineBank manually put these methods to the relevant groups, and depicted the dependency relations among the methods in these packages. By doing so, a set of relationships for all the methods were indicated and basically the expert made a clear mapping for the system. Therefore, our approach can be evaluated with the manual standard established by the expert as the ?ground truth?.

We use the precision and recall metrics to evaluate the effectiveness of our clustering approach. Precision is the percentage of the correctly group (cluster cluster_standard) / cluster and recall is the percentage of group (cluster cluster_standard)/cluster_standard. Since the number of clusters in terms of our clustering approach is seven but the number of the ?ground truth? is five, so we compared five relevant packages with each other, including the number of method calls and the dependency relations among them. Finally we obtained an experiment compared data in Figure 7.

Figure 7.  Precision/recall without association rules complement  From the Figure 7 we can see the clustering results shown with low precision value, especially, the recall is lower. The results using our clustering approach alone are seven categories formed, while the standard results are five Categories in terms of ground truth. We observe the data in Figure 5, and find that Cluster3 and Cluster4 have strong associations between them, Cluster2 and Cluster5 have also similar strong rules, and Cluster5 is more independent with other clusters than with Cluster2. Therefore, we decide to restructure these clusters with the aid of association rules, that is, removing and merging relevant methods according to obtained association rules.

Through erected association rules standard, it is possible to infer the weight value of each edge. Based on this idea, the two clusters are merged into one cluster, and the similar approach is also applied to Cluster3 and Cluster4. We compare the conclusion with the "ground truth" and then investigate whether the conclusion is right.

Figure 8.  Precision/recall with association rules complement  Figure 8 shows the experiment data of the adjusted methods which have been merged from two different clusters into one according to the calculated dependency relations.  Compared with the results of Figure 7, we can see the precision /recall have a great improvement.

As discussed above, we assume a premise on the issue that whether two different clusters merging or not depend on the thickness of the edges between two nodes, which indicates the association degree differently. That is the reason why the results of association rule mining can be employed to help the clustering analysis. The rationale is based on the idea that strong association rules between objects can indicate the  connection degree for dependency relations. Regarding the case study, there is reliable evidence showing these rules can reveal the details of the system implementation. In addition, the obtained dependency relations can be displayed using a graph by visualization technique and can be compared among item sets. As the proposed work is to obtain dynamic events and mine related rules from these events, so it is suitable for structured or object-oriented, or even for both design methods.

To evaluate the quality of our association rule mining techniques we need to define a benchmark. As introduced above, by interacting with the system expert of OnlineBank, we obtain a ?ground truth? answer for knowing the actual relations among system units. Therefore, we compared the generated associations with the benchmark. We consider two influence factors on the evaluation: First, the dynamic approach to collect rules does not achieve 100% coverage of the system.

Obviously the choice of scenarios is one of the primary factors that affect the results, so this should be further elaborated.

Second, the number of obtained strong association rules in terms of different minimum support degree will also influence the experiment results.

Figure 9.  Precision/recall of strong association rules with OnlineBank  Figure 9 summarizes the experiment results. The horizontal axis represents the minimum support values adopted for rules mining, and the vertical axis presents the precision and recall in comparing the dependency relations among methods with the benchmark. We can see that the approach improve the precision with a decrease in recall at the higher minimum support threshold. How to get a better performance of the approach will be our next-phase work.



VI. DISCUSSION Our preliminary evaluation also reveals research challenges  in advancing our approach.

First, we believe that the only structural analysis is not sufficient for program comprehension, especially for an object- oriented system. One solution to this problem is to utilize dynamic analysis to obtain the dependency information. In particular, we investigate whether association rules can be complemented on the erected dynamic relations and we consider the following research questions:  RQ1: Can association rule mining be employed to find the dependence relations among program elements involved in the trace events which reflect the actual running behavior?

RQ2: Following RQ1, can we find effective measure to evaluate the degree of associations to related clusters?

RQ3: Can different clusters be observed in distinct settings, and can help us for system refactoring?

We conduct an exploratory study to investigate the above questions by means of a case study. The analysis techniques that we have explored in this work prove to be useful for addressing these research questions. Obviously, mining association rules is able to help reveal hidden dependences among program elements in source code. The answer to RQ2 is that the measures of associations are to summarize the relations by summing up the numbers of strong association rules. This solution might be too simple and should be solved with a better measure. We consider it as one future work to improve. The answer to RQ3 is that we use the visualization technique comparing the associations among related clusters and program elements, it is possible for suggesting system refactoring by investigating the thickness of lines between two nodes.

Second, the large volume of information and complexity of dynamic information makes it hard to understand the system runtime behaviors and infer higher level of information. In our experiment, the choice of use cases is one of the primary factors that affect the experiment results. So it is better to derive a balanced set of use cases just like the experiment results shown in Section IV. But this may require a great deal of manual decision to choose distinct use cases for yielding better results. Obviously, complete coverage is not necessary.

However, this is necessary for understanding complete structural intents. Adopting ?just enough? use cases will help us improve the experiment result effectively.

Third, utilizing strong association rules to build the dependencies to depict the relations among inter-clusters and intra-clusters and deal with system entities and associations as nodes and edges is an exploratory study. However, the work needs to be improved by setting various weight standards and to build appropriate metric parameters. A proper weight should reflect the invoked times of program elements and the association values among elements with the goal to identify the important types of dependences.



VII. CONCLUSIONS AND FUTURE WORK The main goal of this research is to provide maintainers an  overview of the software and the relations in order to facilitate structure analysis. Therefore clustering and association mining technique are employed. By doing so, reengineers are able to get a rough and quick view of a legacy system at first, and then further utilize rules to identify hidden relationships among different program units such as method calls and classes etc.

Besides, the approach uses clustering technique to study dynamic dependencies under maintenance to determine the roles of software entities play in a system. So it is possible for maintainers to understand the system at a higher level. For association rules mining, use case scenarios are mapped to trace transactions and rules are extracted from the events through a number of scenarios. Strong association rules can identify dependences by setting a threshold which greater than a minimum support threshold value and a minimum confidence  threshold value. Thus these relations can help find issues in system construction which likely need a potential refactoring.

Overall, the contributions of this paper are: (i) proposing an approach for program comprehension through association rule mining analysis (ii) demonstrating the visualization technique comparing the dependences within clusters and system entities.

Our future work mainly includes: (1) combining dynamic analysis with system?s structural model, e.g. program-element dependencies for enriching the semantic information (2) erecting the metric evaluation for different association rules, and setting right weights for each edge correlation, and (3) conducting systematic empirical studies on the choice of the appropriate parameters for the proposed approach.

