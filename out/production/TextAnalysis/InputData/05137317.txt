

Preventing SYN Flood DoS Attacks (Abstract) An Improvement to SYN Cookies    Sahand KhakAbi Dept. of Industrial Engineering  Iran University of Science and Technology Tehran, Iran  sahand_khakabi@yahoo.com  In 2006, 100,000 servers were broken down just within 10 minutes [1]. Those were the victims of some Denial-of-Service attacks. This news and knowing that some of those victims were so well-known companies like Hotmail and Amazon, indicate the significance of this kind of threats and attacks. ?In a DoS attack, a malicious client (called the attacker) performs operations designed to partially or completely prevent legitimate clients from gaining service form a server (called the victim)? [2]. DoS attacks can be categorized in two main classes: logic attacks and flooding attacks. In flooding attacks, which are discussed in this paper, the resources of the victim server are consumed by sending a big number of requests to it in order to make it unable to provide appropriate services to legitimate clients.

One of the techniques that are used in flooding DoS attacks vastly is called Spoofing in which the attacker tries to imitate the other hosts? addresses in its request packets and deceive the victim server. Application of this technique makes the detection of the real attack source difficult. It also enables a single attacker to act as many systems. That is, by spoofing, the attacker is able to simulate a Distributed DoS attack.

While there are a lot of obstacles (e.g. no packet source IP address inspection in Internet, propagation of automated tools for establishing DoS attacks, etc) for preventing DoS attacks, there have been a lot of attempts carried out to counteract it.

From one point of view, these countermeasures can be classified into prevention, detection, mitigation, and traceback categories [3]. Some of methods take a hybrid approach.

Looking through implementation level glasses, a DoS countermeasure belongs to one or many (e.g. approach of reference [4]) of these five levels [5, 7]: network device, operating system, application, replication and load balancing, and protocol standard.

One of the most successful methods to defend against SYN flood attacks (i.e. a kind of flooding DoS attacks) is SYN Cookies which is proposed by Dan Bernstein and Eric Schenk.

This method is activated when a DoS attack is detected by server. In stateful connections, when the SYN queue is full, this method helps the server behave as the queue is enlarged [6].

SYN Cookies method belongs to the prevention category and is implemented in application and protocol standard level without breaking any specifications of TCP/IP protocol [6]. But as any method does, SYN Cookies also suffers some drawbacks such as suboptimal connections. In order to resolve some of these  problems, this paper has proposes and enhanced version of SYN Cookies that is described below.

The proposed method, which is so alike SYN Cookies, can be summarized in the following steps: 1. Client sends the SYN request 2. Server registers the requested connection's specs in a request table and sends back a SYN+ACK packet, but does not add any SYN queue entry 3. Client answers with ACK packet 4. Server checks ACK packet's contents and if validated, the connection is established. Else the request table entry and the packet are discarded.

In the second step, first a SYN Cookie is calculated by concatenating the following parts: t mod 256 and s (the result of a cryptographic secret function computed over the server and client addresses and the value t. This is a 24-bit number.) where t is a counter. The resulting 32-bit value is used as the initial sequence number. Then a hash function is calculated over this cookie to achieve a n-bit number (n <= 32) which indicates the index of the request table entry in which the request specs, such as TCP options, windows size, and MSS, is stored. The amount of n should be selected by the server.

The shortfalls of SYN Cookies method exist, because no state is saved when a SYN request is received by server.

Supposed method resolves this problem in step 2, by storing any information needed for constructing a SYN queue entry in a hash table. This is the main difference between the new method and the previous one.

It is worthy to note that, because the optimal connections are supported in the proposed method, unlike SYN Cookies, this method can be applied in all times and not only during an attack. This fact makes it able to act without any separate detection system.

