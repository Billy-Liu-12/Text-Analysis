SecureHouse: A Home Security System Based on Smartphone Sensors

Abstract?Several new smartphones are released every year.

Many people upgrade to new phones, and their old phones are not put to any further use. In this paper, we explore the feasibility of using such retired smartphones and their on-board sensors to build a home security system. We observe that door-related events such as opening and closing have unique vibration signatures when compared to many types of environmental vibrational noise, which can be captured by the accelerometer of a smartphone when the phone is mounted on a wall near the door. The rotation of a door can also be captured by the magnetometer of a smartphone when the phone is mounted on a door. We design machine learning and threshold-based methods to detect door opening events based on accelerometer and magnetometer data, and build a prototype home security system that can detect door openings and notify the homeowner via email, SMS and phone calls upon break-in detection. Experiments in a residential home show that the accelerometer-based detection can detect door open events with an accuracy higher than 98%, and magnetometer- based detection has 100% accuracy.

Index Terms?Smartphone, Accelerometer, Magnetometer, Machine Learning, Home Security

I. INTRODUCTION  Mobile hardware is evolving at an extremely fast pace. Most big smartphone vendors produce a new smartphone every year, causing many users to upgrade to a new device every year or two. iPhone sales have nearly tripled in the last five years [1]. Most of these retired devices still work as expected, but are ignored until either recycled, sold at a fraction of the initial cost, or thrown away. This leads to the all-too-common ?smartphone graveyard?. These retired smartphones are almost always equipped with highly sensitive motion capture chips.

Though less frequently used, these devices are also equipped with triple-axis magnetometers which are used for analyzing the device?s orientation with respect to Earth?s Magnetic North Pole.

Personal, small-scale home security systems are becoming increasingly popular. Most professional systems, however, cannot be installed by the end-user and come with a large upfront cost as well as recurring costs such as annual fees.

ADT, a professional home security company, charges upwards of $600 annually for their most popular home security package in addition to installation fees which can run as high as $1,600 [2]. Though a smartphone-based home security system would not be a smart investment to purchase all at once, retired phones can be used for a home security system without purchasing a new device. Since most users are already familiar with the hardware and software of smartphone, it would be  easy for them to use a smartphone-based home security system in their homes.

While several smartphone-based home security solutions exist, most of them are based on using the device?s camera to monitor events within the camera?s field of view. These solutions have considerable drawbacks such as poor low- light performance, using large amounts (several gigabytes) of storage, and the inability to detect break-in related events out of its field of view.

Different from existing work, we study the feasibility of building a home security system based on smartphone ac- celerometers and magnetometers. Specifically, we will detect door opening events using the device?s accelerometer and magnetometer. When a door is opened or closed, some of the kinetic energy transfers into the walls surrounding the door.

The iPhone 4?s accelerometer, with a maximum sensitivity of 1 mg/digit [3], has been proved to be capable of detecting keystrokes on a keyboard with an accuracy as high as 80% [5].

With this level of sensitivity, the 6-year-old iPhone 4 is more than sensitive enough to detect vibrations in a wall caused by door activity. Newer phone models usually have as good or better sensitivity.

Figure 1 shows our observation of vibrations caused by a door opening captured by accelerometer. This initial data was obtained by simply opening a door while an iPhone 6 mounted to the wall nine inches from the door monitored vibrations. It can be seen that door events emit distinguishable vibrational patterns. Most noticeably, when the device is mounted near a door in portrait orientation, door-related vibrations captured by the on-board accelerometer are especially large along the z-axis. Figure 2 shows a graphical representation of how the three motion axes are related to the orientation of the device.

In addition to the accelerometer, the magnetometer can also be used to monitor the rotation of a door and detect door openings. By mounting a smartphone on a door (e.g., near the hinge) and monitoring the change in magnetic fields passing through the device, door events can be easily detected. We ref- erence Earth?s Magnetic North to determine how far the door has rotated - essentially using the smartphone as a compass.

This method is less likely to produce false detection of door openings under environmental noise, although it cannot detect other events such as window openings when mounted on the door.

In this paper, we explore several methods to use a smart- phone?s embedded accelerometer and magnetometer to reli-      Fig. 1: Raw Vibration Data For Door Open Event  Fig. 2: Device Motion Axes  ably detect door openings and propose a home security system (named SecureHouse) for break-in detection. Upon event detection, the detecting smartphone can send a customizable notification to the homeowner via short message, email, and/or telephone calls.

The contribution of this paper is summarized as follows: ? We propose SecureHouse, a home security system based  on smartphone sensors. To the best of our knowledge, this is the first study that detects door openings for home security using the on-board accelerometer and magnetometer of a smartphone.

? We propose two machine learning methods to detect door openings using accelerometer data and one threshold- based method to detect door openings using magnetome- ter data.

? We implement a prototype home security system. The system contains a mobile app which runs on a wall- mounted phone that can efficiently interpret sensor data and asynchronously dispatch notifications using its Wi- Fi connection, a 3D printed modular smartphone case specifically designed to capture vibrations in a wall, and a threat response server that sends out alerts to the homeowner in the form of SMS, email, and phone call.

? We evaluate the system?s effectiveness to detect door events using extensive experiments.

The remainder of this paper is organized as follows. Section II presents related work. Section III presents the design of our  system including system architecture and detection methods.

Section IV describes our prototype implementation. Section V describes our experimental methodology and evaluation results. Section VI concludes the paper.



II. RELATED WORK  Wu et al. [6] propose a scheme to detect door events using the built-in barometer found in modern smartphones. The key principle behind their work is that modern heating, ventila- tion and air condition (HVAC) systems maintain a pressure difference between inside and outside. Thus, when a door is opened, a sudden and recognizable change in barometric pressure occurs. We conducted experiments of our own using their methods and saw very similar results in a three-bedroom house. Specifically, we measured the fluctuation in pressure inside a home when a door is opened and closed. Figure 3 shows a clear change in pressure caused by door movement compared to background noise shown in Figure 4. However, the system can be rendered ineffective if the home has an open window since the air pressure inside and outside a home will be the same in that case. Figure 5 shows barometer readings from a door event when two windows are open. We no longer see the distinguishable curve similar to Figure 3, and the barometer readings become close to background noise shown in Figure 4. This is especially relevant where a homeowner might leave a window open while she is away (e.g., a window has metal bars on it and thus the homeowner considers it secure to leave the window open).

Behringer et al. [7] have designed and implemented an automobile alert system using the accelerometer and GPS of smartphones. The system is capable of interpreting multiple types of car-related events such as engine ignition, door closing, and car motion. However, the system is designed for automobiles, not for home security.

As to commercial products whose aim is to transform old smartphones into a security system, there are several published apps such as Presence [9], Manything [10], and Alfred [11].

These apps are among the most popular applications that use smartphones as a video-based home security system. These systems use simplistic video analyzation to detect motion within the camera?s field of view under adequate lighting conditions. While they are affective for detecting general motion inside the home, a fundamental limitation is that a camera cannot detect motions out of its field of view and it requires good lighting conditions probably not available at night. Also, these systems can generate a large amount of data (more than 200GB [4] encoded as H.264 [13] at 1080p) each day which needs to be stored somewhere. Storing this data on the device itself is not practical because most mobile devices have between 16GB and 256GB of local storage. Naturally, these systems propose a solution by storing video on the cloud.

In particular, Manything charges a Cloud Recording fee of $5.99 per month to be able to view past recorded events. This additional expense combined with the limited field of view and lighting requirements of a camera show that new technologies are needed.



III. SYSTEM DESIGN  This section describes the architecture of SecureHouse as well as the methods to detect door events using the accelerom- eter and the magnetometer.

A. System Overview  As shown in Figure 6, our system has three components, a wall-mounted smartphone, a response server, and the home- owner?s smartphone. The wall-mounted smartphone detects door opening events and dispatches a notification request to the response server, the response server sends out notifications to the homeowner via email, short message, and/or phone calls, and the homeowner?s smartphone receives the notifications and alerts the homeowner.

There are a total of six major software modules in our detection system; four in the wall-mounted device (included in one app) and two in the cloud-based threat response server.

The homeowner?s smartphone does not need to run any extra app since the notifications arrive in short text messages, phone calls, or emails which are already supported in most smartphones.

For door opening detection, vibrational or magnetic field data is captured by the raw motion manager. This module is responsible for reading and interpreting raw acceleration and magnetic field data. Thirty times per second, the manager pre-processes the sensor data and sends it to the threat detection module. This module implements a sliding window or acts as a data passer depending on the detection algorithm.

For accelerometer-based detection via neural network and k- nearest neighbors (see Section III-B), the threat detection module asks the A.I. module for an interpretation based on the last 30 samples (1s) of data. For magnetometer-based detection (see Section III-C), the detection module simply performs the basic calculations and checks against a threshold to detect a door opening. Upon detection, the detection module notifies the threat response module, which decides the appropriate action to take based on certain conditions of the device such as whether the alarm function is turned on, internet connectivity, and user preference. When the alarm function is turned on and under normal circumstances, the threat response module  will send an HTTP request to the Threat Response Server. The HTTP request will indicate the homeowner?s preferred ways of notifications, email, SMS, phone call, or a combination of them. In the case of Wi-Fi connectivity issues, the threat response module will play a loud alarm sound in an attempt to deter intruders. The homeowner can disable the alarm when she is at home awake. She can turn on the alarm function before she goes to sleep or when she leaves home.

Fig. 6: System Architecture  Our Threat Response Server is designed to run on any computer capable of running Node.js programs. There are many such services available including free services. Our prototype system (see Section IV) is hosted by Heroku [15], a free third-party cloud application hosting platform. Several other free Node.js hosting solutions are available, such as IBM Bluemix [16] and OpenShift [17]. Incoming network requests are handled by the server?s network request module. This module is simply responsible for handling incoming HTTP requests. After a network request has been processed, this module sends a message to the server?s notification module, which will send out the alert according to the HTTP request.

Though it is technically possible to use a computer at home as the server, using an external server has an advantage. A user may want to change their notification preferences while away from home. This can be easily done with an external server.

However, for this to happen with an internal server at home,  Fig. 3: Air Pressure Fluctuations for Door Event with Windows Closed  Fig. 4: Air Pressure Fluctuations with- out Any Door Events (Background Noise)  Fig. 5: Air Pressure Fluctuations for Door Events with Windows Open      the homeowner would need to set up port forwarding on their router at home. This process is usually a little too technical for the average homeowner, and would be a detriment to the ease of installation of our system.

B. Accelerometer-Based Detection  Accelerometers embedded in today?s smartphones capture vibrations on three axes simultaneously. Figure 1 shows this raw vibration over time for a door open event when the phone is mounted nine inches from the door latch. The door open event is clearly distinguishable from the surrounding vibrational noise, and it can be seen that most of the vibrations occurred along the z-axis. On average, the change in acceler- ation caused by a door event is no more than 0.2m/s2. Other motion vibration such as foot traffic and window openings fall within a much lighter range - near 0.02m/s2. Additionally, we found it necessary to self-calibrate the device?s accelerometer upon mount installation due to the likelihood that the mount may not be perfectly level in all three dimensions. The first time the user runs the detection app, the device goes through a calibration phase during which it senses gravitational acceler- ation for five seconds and calculates the average acceleration for each axis. These three calculated values xa, ya, za are then subtracted from the raw acceleration reading to get a readout that is near zero across all axes in times of zero vibrational noise.

1) A Naive Detection Algorithm: Before going to our pro- posed learning-based algorithms, we describe a naive detection algorithm. Being very simplistic in nature, the algorithm raises the alarm if and only if the vibration intensity (Vi) of each vibrational axis falls between a specific range ? and ?: ?x < V i(x) < ?x ?y < V i(y) < ?y ?z < V i(z) < ?z This method does not use any sort of data queue or sliding  window. It just checks every incoming value independently at 30Hz. The lower threshold ? helps ensure that only sig- nificantly strong vibrations are considered - thus filtering out ambient and static noise. The upper threshold ? helps filter types of environmental noise such as the homeowner?s footfall.

In particular, since footfall and other vibrational noise affects all axes nearly equally while door openings affect primarily the z-axis, the upper thresholds ?x and ?y are substantially smaller in magnitude than ?z to filter such noise. This approach has several drawbacks. Since the thresholds are door-dependent and obtaining them takes several minutes of fine-tuning, it is nontrivial and annoying for the homeowner to find an effective set of lower and upper thresholds for each door upon installation. Moreover, it performs worse than more advanced algorithms as to be shown later.

2) K-Nearest Neighbors + Dynamic Time Warping: K- nearest neighbors is a simple machine learning algorithm that classifies an unknown data point based on the classification of a certain number of ?nearby? data points. For example, in 2- dimensional space, the distance between an unclassified point p and all other classified points is calculated. Then, we look at  k points that are nearest to p and perform a majority vote. For our purposes, however, we are using a series of 90 points (thus, 90-dimensional space). These 90 data points represent any one-second window of vibrational data along 3 axes captured at 30Hz. To help keep our datasets consistent and to allow our models to be trained more effectively (especially for the neural network in III-B.3), our raw accelerometer data points are converted to a positive value (V i) and then normalized from -1 to 1 (through dividing the value by the maximum recorded value, multiply it by 2, and then subtract 1). Lastly, we decouple the different axes? from time such that the new curve takes the form of: V s =< x1...x30, y1...y30, z1...z30 > We call this new curve a vibrational signature. Figure 8 is  an example of a common vibrational signature for a door open event. We can see from this figure that the z-axis (the last 30 samples) is most heavily affected by door open events, with almost no vibration detected in the y-axis (middle 30 samples).

Since Euclidean and Manhattan distance do not work well for such high-dimensional datasets, we use dynamic time warping to measure how similar two time-series curves are.

Dynamic time warping is a common algorithm which excels in comparing the similarity between two time-series datasets.

Specifically, it excels in determining similarities which span over different lengths of time. For us, this is especially useful for detecting different speeds of door openings.

We set k equal to the square root of number of training samples. This choice has been shown by the literature to be effective and offers a more simplistic implementation than bootstrapping or cross validation. Since the training data needs to be generated by a human, the number of training curves is limited to 15-30 door events and 15 noise events (e.g., footfall inside the home and cars driving by). Due to the high- dimensionality of the input, the number of training curves used, and the limited processing power of the phone, it is not possible to poll this algorithm at 30Hz. This problem is solved by waiting for significant vibrational disturbances using an activation threshold. In our experiments, we found that it is effective to set the threshold at 0.005 m/s2. Disturbances greater than this threshold value trigger the analysis of a 1- second sliding window. The sliding window is essentially a queue that contains only the most recent 90 samples (one second at 30Hz for three axes) of acceleration data.

3) Feedforward Neural Network: In machine learning, ar- tificial neural networks (ANNs) are known for the similarities they draw from biological brains. Instead of using neurons, an ANN uses sets of interconnected nodes. These nodes are separated into three main categories: input, hidden, and output. ANNs are generally known for their ability to gen- erate nonlinear models based on high-dimensionality input and training data. Specifically, we use a feedforward neural network (FFNN). This means that data passes through the sets of nodes going in one direction only and there are no cycles allowed in the node graph. Figure 7 shows a graphical representation of what a feedforward neural network looks like at a high level. We choose FFNN since its training phase      happens all at once in the beginning of the program execution, and generating output from the model is very time-efficient.

This benefit allows us to poll the FFNN at 30Hz on a resource- limited smartphone.

Fig. 7: Representation of FFNN Nodes  For each door, a neural network is trained using 90- dimensional input data - exactly one second of 3-dimensional vibration data being captured at 30Hz. Due to the input requirements when training and evaluating the neural network, we use a vibration signature as defined above for our inputs instead of raw vibration data.

We find that when using 90-dimensional data, using 60 hidden nodes (90 ? 2/3) as suggested by Hundley [14] works best. We use one output node which simply returns a float value between 0 and 1. Values closer to 0 correspond to a lower chance of the interpreted data being a door event, while values closer to 1 correspond to a higher chance of a door event. Throughout this paper, we refer to this interpretation of the output value as the assurance of a door opening event.

For example, if the assurance of the FFNN is set to 60%, we accept any output greater than or equal to 0.6 to be a door open event. Due to the prediction efficiency of this algorithm, we were able to use the same sliding window approach mentioned above to analyze a new vibrational signature at 30Hz.

C. Magnetometer-Based Detection  Figure 9 shows raw magnetometer data for a door open and close event. We see large, easily recognizable curves  Fig. 8: Vibration Signature for Door Open Event  during the time the door is opening and closing. Very little jitter is seen in the magnetometer?s readout, and practically no amount of vibrational interference would cause the readout to be significantly distorted. Though it may be possible for an attacker to use a strong magnet to interfere with the magnetometer, this would still alert the user because we do not use an upper threshold for event detection.

Next, we look at a realistic threshold to trigger the detection.

Since the data for a door event is easy to recognize, we simply use a threshold value to detect door events. We found that a difference of 2?T between the current value and the value when the door is closed worked well as a threshold to detect door events. Because Earth?s magnetic field may differ from location to location, this approach will need to be calibrated/zeroed when installed in different locations.

Different from the naive vibration-threshold method mentioned above, the homeowner does not need to fine-tune this system.

He can simply hit an on-screen button while the door is closed to ?zero? the magnetometer.

Fig. 9: Magnetic Field Measurements of Door Event

IV. IMPLEMENTATION  To demonstrate the effectiveness of our solution, we imple- mented a prototype system.

A. Wall-Mounted Phone  Our detection system was written in Swift 2.3, compiled and tested using Xcode 7, and finally deployed on an iPhone 6. We implemented our KNN+DTW algorithm from scratch, while our neural network was based on Collin Hundley?s Swift AI library [14]. In order to capture acceleration and magnetic field data programmatically, we used a low-level framework called Core Motion [20]. This library allows us to read the phone?s acceleration and magnetic field data at a rate up to 100Hz. In order to conserve battery life and processing power, we chose to set 30Hz as the reading frequency.

B. Smartphone Case  Additive manufacturing enables us to fabricate a smartphone mount specifically to suit our needs. Figure 10 shows a computer-generated model of the phone mount in its design phase and an image of the actual mount in use near a door.

The case features a large back plate and screw holes so that it can be mounted on a wall near a door. The case?s large flat back plate serves two purposes. The first being an easy way to attach the plate to the wall via the four screw holes.

Second, and more importantly, because of its hardness and multiple contact points over a large surface area, it is able to mitigate vibrational dampening caused by insufficient energy transferring to the phone.

Though the mount is designed to be a permanent installa- tion, the phone itself can be slid in and out of the mount with relative ease in the event of replacement, physical service, or reprogramming. We do not consider the ability to remove the phone from its mount a deficiency in its security system duties, as an attacker would need to already be inside the home to remove the phone from its mount.

Fig. 10: Smartphone Wall Mount  C. Notifying the Home Owner  For simplicity and to allow a rapid development of this prototype system, our implementation of texting and calling used Twilio [18], a third-party service that allows us to send texts and make phone calls by simply making an HTTP re- quest. We also used an open source library called ?nodemailer? that allows the server to easily send emails. Figure 11 shows examples of alerts received by a homeowner in the form of an SMS, an email, and a phone call.

Home automation is a growing market; many homeowners have automated lights, cameras, door locks, etc. Because of the steadily growing nature of the industry, we provide a way to interface with many third-party systems that a user may have by providing user-configurable web-hooks. Web-hooks allow the user to specify a URL that an HTTP request should  Fig. 11: Example Notifications  be made to upon door event detection. This could include anything from turning on the homeowners lights to playing loud music to deter intruders. If the service has an HTTP API, SecureHouse can interact with it.



V. EVALUATIONS  A. Experimental Methodology  The accelerometer-based experiments were conducted by mounting a smartphone on lightly textured drywall approx- imately 9 inches away from the latching mechanism of an exterior door. During the magnetometer experiment, the phone was mounted on the door itself near the hinge so that the phone would rotate when the door was opened or closed. The experiments were conducted in a 3-bedroom residential home approximately 20 feet away from the nearest road. Three types of vibrational noise scenarios were accounted for: ambient noise, walking noise, and automobile noise. Ambient noise was considered dead silence i.e. no external movement of any sort was present during the test. Automobile noise was generated by an automobile driving up and down the road closest to the house. Walking noise included normal to heavy footfall of people in the house during the trials. Additionally, different speeds of door openings were accounted for. We considered three different types of door open speeds: slow, normal, and fast. We used a video camera and stopwatch to record and measure how long it took for a door to clear the door jamb at different opening speeds. Slow door events were classified as any door event in which the door took more than 0.6 seconds to clear door jamb. Normal events took between 0.3 and 0.6 seconds. Fast door open events consisted of any door events in which the door took less than 0.3 seconds to clear.

B. Detection Accuracy  Figures 12, 13, 14, 15, and 16 show the detection rates for several series of door openings under various conditions.

Detection rate is defined as the number of detected door openings divided by the total number of door openings. Here each result is the average of 50 independent tests. For the FFNN method, we ran tests with two different assurance values, one at 60% and one at 75%. Figure 17 shows the overall detection rate for all tests.

Among the tested algorithms, the naive threshold-based de- tection using accelerometer data performs the worst, especially when the door is opened slowly. Its overall detection rate is 61%. The high failure rate of this system is due to our derived threshold values. Though a wider threshold would produce a higher detection rate, the increase in sensitivity would severely hinder its ability to filter false positives. The magnetometer- based detection performs the best with a detection rate of 100%, which is consistent with intuition since rotation of the door is significant when a person enters the house. The FFNN method (when assurance is set as 60%) and the KNN+DTW method also have a very high detection rate of 98%. The two machine learning methods perform similarly when the door is opened fast and when the door is opened at normal speed. The      performance is a little lower when the door is slowly opened.

For them, the different types of noise do not have much impact on detection rate when the door is normally or quickly opened, but have a little effect when the door is slowly opened.

Table I shows the results of false detections caused by knocking on the door. For this test, we considered two inten- sities of a knock - light and heavy, and the number of knocks which occurred - 1 or 2+. It can be seen that the magnetometer has complete immunity to noise, while KNN+DTW is only moderately affected by heavy door knocks. A single heavy door knock is the more likely to produce a false positive than other knocks.

C. Field Tests  In addition to the 2,250 door openings performed above, we also let the system operate in a residential 3-bedroom home for short-term period 24 hours and a long-term period of 7 days.

We conducted the 24-hour long test first to quickly determine which methods are most effective in a real-life scenario. We then used the top performing vibration-based detection method in our week-long experiment. We define false positives (FP) in these tests as any event that the device interprets as a door opening which was not a door opening. Table II shows the number of false positives during the 24-hour long test. Table III shows the results for the 7-day long test. We took note of whether a false positive was generated while no one was home versus while the home was occupied by the homeowner with the help of a video camera. Though we saw many false positives using vibrational-based detection under our machine learning-based detection methods, all of them occurred while the homeowner was awake at home. We found that our 3- bedroom house generated a large amount of highly varied environmental noise such as playing aggressively with dogs, loudly stomping about, and large groups of excited people during televised sporting events. Since the alarm function can be disabled during these times, those false positives will not cause false warnings to be dispatched to the homeowner.

D. Modeling Vibration Dissipation  In order to determine the generality of vibration-based detection, we want to estimate a maximum distance away from a door that a smartphone could be mounted and still be effective. Specifically, we are interested in finding a distance such that V idoor open(x, y, z) ? V inoise(x, y, z). After this distance, the vibration caused by door open is too small to be differentiated from background noise.

To answer this question, we need to figure out how fast vibration dissipates in the wall. It is generally known in physics that the rate of energy dissipation from a single point in space can be modeled by: f(k) = ?e??x [21]. Our goal is to determine a suitable value for ? and ? such that we may generalize how fast vibrations dissipate through the walls in a home. To do this, we purchased several high-sensitivity accelerometers [19] and mounted them at 1 foot intervals on a wall next to an exterior door. Figure 18 is a picture of the experimental setup. To generate a consistent source of  vibration, we attached a rubber ball to a string of fixed length, and used it as a pendulum to strike the wall.

Figure 18 shows the average result of 10 tests and a best-fit line from which we get the ? and ?. Using this dampening rate (determined by ?) and our measurement of vibration strength near the door for door open, we can generate a theoretical vibration curve for several distances away from the door.

We found that after distances become greater than 6ft, the magnitude of door-related vibration was less than or equal to that of ambient noise. We acknowledge that the dissipation rate might be different for different walls, but the result here can still shed some light on the effective distance of vibration- based detection.

E. Door Proximity & Interference  In modern living spaces such as apartments and duplexes, exterior doors might be placed in close proximity to each other. We set out to determine if doors in close proximity would have any noticeable affect on our detection methods. We started out by visiting a local apartment building and taking some measurements. We measured 24? 9? as the horizontal distance between doors, and 7? 6? as the vertical distance between doors. With the smartphone mounted on the wall near a door, we opened and closed next-door neighbors? doors several times and recorded the vibration intensity. We did this experiment for neighbor doors on the same floor, and the floors above and below. We observed that neighbors? doors had virtually no impact on the vibration readings. This was expected, though, as our dampening model had predicted distances greater than six feet would be enough to reduce the magnitude of vibrations to that of environmental noise.

F. Detecting Other Motion Events  Although the detection rate of vibration-based detection is a little lower than the magnetometer-based detection, it also has an advantage: it can detect other motion events in addition to door open. To demonstrate this, we conducted tests for window openings. The window is 42 inches away from the wall-mounted smartphone. For these tests, we trained an FFNN using 15 samples of window openings and 15 samples of noise (8 samples of ambient noise, and 7 samples of heavy footfall). The assurance parameter was set to 60% and the same 1-second sliding window described above was used. This implementation was nearly identical to how we detected door open events using the FFNN. We tested 25 window openings.

The detection results are shown in Table IV. 92% of the window openings can be detected.

G. Cost Evaluation  1) Running Time of Event Detection: For feedforward neural network, the algorithm is able to analyze a curve in 0.0011 seconds. Since we are polling this algorithm at 30Hz (0.033 seconds), our program spends only 3% of its runtime analyzing curves, and the remaining 97% is spent idle. The KNN+DTW approach needs a much higher processing time.

Each analyzation takes 0.76 seconds. This is because the DTW      Fig. 12: Vibration-Based, Naive Method  Fig. 13: Vibration-Based, FFNN, 60% Assurance  Fig. 14: Vibration-Based, FFNN, 75% Assurance  Fig. 15: Vibration-Based, KNN + DTW  Fig. 16: Magnetometer-Based, 2?T Threshold Fig. 17: Overall Detection Rate  TABLE I: False Positives Caused by Knocking on Door  FFNN Light Knock  FFNN Heavy Knock  KNN+DTW Light Knock  KNN+DTW Heavy Knock  Magnetometer Light Knock  Magnetometer Heavy Knock  1 Knock 1/20 8/20 0/20 4/20 0/20 0/20 2+ Knocks 0/20 5/20 0/20 1/20 0/20 0/20  Fig. 18: Modeling of vibration dissipation in wall  algorithm has high time-complexity (O(n2)), the method does not have a training phase, and it uses 30 curves.

2) Memory and Disk Usage: The total size of our packaged detection app is around 20MB. This is on par with or lower than many apps in the App Store. Our app does not write any data to disk during operation, so we can expect this  Fig. 19: Experimental setup for modeling of vibration dissi- pation  value to remain constant during the life of the operation.

For memory consumption, our analysis shows that the FFNN detection algorithm uses 5.8MB of memory on average, while the KNN+DTW detection algorithm uses 5.5MB on average.

Our sliding window contains 90 doubles, which iOS allocates 8 bytes [22] each to. Our sliding window releases unused      TABLE II: Field Tests over 24 Hours  Detection Algorithm  FP- Homeowner  is Away  FP- Homeowner  is Home  False Alerts- Home-  owner is Away  False Alerts- Home-  owner is Home  Vibrations- Threshold  2 22 2 0  Vibrations- FFNN 75%  Assurance  0 9 0 0  Vibrations- FFNN 60%  Assurance  0 21 0 0  Vibrations- KNN+DTW  0 19 0 0  Magnetometer 2?T  0 0 0 0  TABLE III: Field Tests over 7 Days  Detection Algorithm  FP- Homeowner  is Away  FP- Homeowner  is Home  Unnecessary Warnings  Vibrations- FFNN 75% Assurance  0 53 0  values, so we say the extra cost of the sliding window is less than 1KB.

3) Network Usage: The SecureHouse detection app only uses the network when a door event is detected. Upon door event detection, a POST request is made to the threat response server which contains only an 256-bit access token. The total size of this request is less than 350 bytes. This results in around 15KB of data being sent per day when the home is in use, and near 0KB of data being sent when the homeowner is away.

4) Power Consumption: iOS does not support gathering of energy consumption in units of mW, so we used Xcode?s Instrument Panel to monitor energy consumption. This tool allows us to see an ?energy usage level? on a scale of 0-20. For the FFNN, KNN+DTW, and Magnetometer detection methods, our app achieves a rating of 0 (best) for energy consumption.

Furthermore, the energy-consumption tool shows that the detection methods use between 6% and 15% of the CPU cycles. We found that this is much lower than other types of apps. In particular, Crossy Road, a popular mobile game scores a 3/20 and uses between 39% and 58% of the CPU cycles.

TABLE IV: Window Opening Detection  Window Opening Detection Rate 23/25  While Chrome, a web browser for iOS, scores a little better with a rating of 0/20 but uses an average of 21% of the CPU cycles. In order to get a better feel for the power consumption of our detection app, we ran experiments and found that it takes more than 80 minutes to deplete an iPhone 6?s battery by 10% while running any of the detection algorithms. This means that, though the phone would need a permanent power source, the system could remain operational for more than 13 hours in the event of a power loss.



VI. CONCLUSION AND FUTURE WORK  This paper studied the feasibility of using the accelerometer and magnetometer of a smartphone to detect door openings and build a home security system. We developed two machine learning based detection methods using the accelerometer data, one detection method using magnetometer data, and developed a prototype system. Experiments showed that door openings can be accurately detected using accelerometer and magnetometer data, with a detection rate of 98% and higher.

Accelerometer-based detection can also detect window open- ings with high accuracy. Smartphones containing built-in Wi- Fi connectivity are easily capable of dispatching alerts to the homeowner or even law enforcement. Thus, our smartphone- based home security system built with retired smartphones could be a viable and economical option for residential homes.

Since vibrations caused by door opening dissipate quickly and become indistinguishable from environmental noise after 6 feet, most likely a smartphone mounted near one exterior door can only detect the openings of this door. Thus, when there is only one retired phone available, SecureHouse works best for residential homes with only one exterior door. There are many apartments and small duplexes that only have one exterior door. For a large house with multiple exterior doors, using one smartphone for each door, although not totally infeasible (e.g., when there are multiple residents with multiple retired phones), seems too costly. In our future work, we will investigate a cost-effective solution for this problem.

