Mining Software Change History in an Industrial Environment

Abstract?Version control systems are among the type of repositories that are frequently explored as sources of software change history. They can be mined to identify associations between software module modifications. This information is useful to support software modification activities, indicating to software engineers which modules are usually modified together during software maintenance or evolution. Previous works published on the subject focused on mining associations from open source software projects. This article presents the use of association mining in an industrial environment. The study was set up as a formal experiment and studied 18 systems developed in a large Brazilian beverage company. The results show that the precision of the rules obtained in this environment are even higher than its counterpart obtained in open source projects. This suggests that this approach is very useful in this type of environment.

Keywords-closed-source projects; mining software repositories; experimentation; software data warehouse

I.  INTRODUCTION Project historic data are the basis to identify useful  patterns of software module defect occurrences, associations, modification, evolution and decay. For this reason software engineering research has been exploring software repositories to understand, predict and plan software projects [1]. With these repositories, it is possible, for example, to extract API usage patterns [2], predict software defects [3] and estimate software development effort [4].

Version control systems are among the type of repositories that are frequently explored by software data analysts. They store all modifications done in software modules of given software projects. Due to coupling and dependency, these software modules are usually modified in groups. It is, therefore very useful to identify module associations during software modification and evolution.

This information allows programmers to analyze the impact of software modifications and to identify which modules will be possibly affected by a given modification.

This work is then focused on the use of historical version control records to estimate the association between software module modifications. These estimations can then be used on demand by programmers who are executing program modification or maintenance.

Studies on this subject explore version control systems of open-source software (OSS) projects. There is little evidence on the external validity of the results obtained in these studies to other types of software systems. In this context,  there is the need for experimentation of this association discovery approach in other contexts. In particular, it is desirable that the research community explores the usage of association discovery over version control systems containing industrial closed-code projects that use more formal and plan-driven software development processes.

This article presents a study that follows an approach similar to what is proposed by Zimmermann et al. and their ROSE Tool [5]. It mines software changes history to characterize software module modification associations for: (1) suggesting further changes to be made in files and finer- grained entities; and (2) warnings about missing changes.

Unlike previous work, this paper focuses on closed code developed in an industrial environment with a well defined software process. It analyzes the association between software files, executing a coarse granularity analysis. The work is conducted as a formal experiment. The precision and recall of the mined association rules are compared with similar studies done in the OSS domain. The results indicate that the association rules obtained in the closed-software industrial environment are better than those obtained in the OSS domain.

This article is organized as follows. Section 2 discusses related work. Section 3 presents the experiment planning and definition. Section 4 describes the experiment execution and the environment used to explore and sanity check the mined association rules. Section 5 describes, analyzes and discusses the validity of the obtained results. And finally, Section 6 contains conclusions and final remarks.



II. RELATED WORKS As our work focuses on mining software changes, this  section discusses studies dealing with mining data from version control repositories. Those studies may diverge on the mining technique employed, amount of analyzed data and algorithms which have been used.

Ying presents an approach that mines association rules over CVS version archives [7]. The usefulness of associations is rated by the level of ?surprise? associated to it. Associations are considered surprising if they cannot be determined by manual program analysis. The work suggests file change associations, but there is no support for mining- on-the-fly. Meaning that there is no support for identifying rules related to a set of files between maintained or evolved on a given time.

Researchers have also used CVS history to detect more fine-grained logical coupling between classes, files and  2009 XXIII Brazilian Symposium on Software Engineering  DOI 10.1109/SBES.2009.8     functions. Zimmerman et al. and Gall et al. mined logical coupling of finer grained software modules, but obtained limited predictive power [8,9].

Dondero also investigated source code and change history mining to identify and predict change coupling [10].

