A Case Study for Distributed Business Transaction  Coordination across Heterogeneous Platforms

Abstract?Recently, more and more enterprises with large EIS systems have increasing business demands on enhancing the system's scalabilities and serviceabilities. They may want to reuse the existing business logic code deployed in the legacy systems, e.g.

core banking systems, in the newly developing systems to meet the new business requirements. Therefore, a big challenge lies on that how to integrate these distributed business transactions running on modern and legacy systems and moreover, how to synchronize these distributed transitions to guarantee the transaction?s ACID properties across heterogeneous platforms.

In this paper, we adopts Web Service Atomic Transaction (WS- AT) mechanism to propose a conceptual solution to address the problems of transactions? integration and coordination. A detailed analysis of the characterization of the proposed solution is carried out to obtain a flexible and extendable framework for the fast distributed transactions? coordination.  A research WS- AT based distributed communication system, which has been developed on IBM Mainframe Customer Information Control System (CICS) and Microsoft Windows WebSphere Application Server (WAS), and experimental results indicate that a full WS- AT based communication architecture can remarkably increase the EIS?s reliability, flexibility and interoperability.

Keywords-System integration; Distributed transactions? coordination ; Web Services;  Data consistency

I.  INTRODUCTION In most EISs there exist many business distributed  transactions which are executed simultaneously to accomplish a whole business processing logic. These distributed transactions always have the following characteristics:  (1) They run on heterogeneous platforms separately  (2) Each of them has its own independent data source  (3) They have various technical implementing methods, e.g. different programming languages  So the most difficult thing is how to integrate these distributed transactions within a single business processing flow. Currently, there are some transactional connectors which can be used for integrating the distributed transactions.

However, they are manufacturer-oriented which means that they are tightly coupled with some particular transaction  processing software. For example, IBM CICS Transaction Gateway (CTG) can only be used to coordinate the transactions running on the IBM platforms such as CICS or WebSphere.

This constrains the system?s extendibility. If we want to integrate e.g. the transactions running on the MS .Net platform and IBM CICS, we have to develop a new connector fit for these both platforms. We hope to find a loosely coupled method to integrate the distributed transactions without being restrained by the platforms.

Web Service Atomic Transaction (WS-AT) is a compound technology which uses the transaction processing technology via the web service to cross the platforms, integrate and synchronize the distributed transactions. Because of its open standard capability WS-AT allows distributed transactions to be integrated seamlessly across platforms.

In this paper, we present an approach for WS-AT based distributed system and choose CICS Transaction Server as the legacy system on which the application is implemented in Enterprise COBOL and WebSphere Application Server as the modern system on which the application is implemented in Java (J2EE). It is valuable for several reasons:  (1) It presents a conceptual architecture for integrating the distributed transactions in legacy and modern systems based on WS-AT.

(2) It is based on Mainframe and PC platforms which typically indicate the heterogeneous characteristics of the distributed platforms.

(3) It leverages traditional distributed processing technology to a web service based transaction processing technology that is not limited by the network transport protocol and application?s implementation technology and can be easily deployed in Service Oriented Architecture (SOA) environment [3].

The main focus of this paper is on the application level architecture for WS-AT based distributed transaction systems.

In Section II, we introduce how a traditional distributed transaction processing method is mapped to a WS-AT based method. In Section III, we present a demo WS-AT based distributed system and its conceptual architecture design and implementation. Meanwhile we test the whole system with different scenarios and analyze its workload in Section IV.

DOI 10.1109/iCECE.2010.1107    DOI 10.1109/iCECE.2010.1107     Finally, we summarize the findings of this research study in Section V.



II. TRADITIONAL DISTRIBUTED TRANSACTIONS V.S WS- ATOMIC TRANSACTIONS  A. Traditional distributed transactions The ACID properties (atomicity, consistency, isolation, and  durability) of transaction guarantee that all the actions or operations in a single transaction are always in a known and consistent state. Now consider a situation where there are several transactions which need to cooperate in a single activity e.g. the transfer service of a bank involving two transactions illustrated in Figure 1.

Figure 1. Single activity contains various recoverable transactions  B. Web Service Atomic Transactions WS-AT is essentially driven by several protocols or  specifications with the following functionalities:  (1) Providing the ability for Web service applications to participate in global transactions, which means you can build a global transaction to control the distributed transactions.

(2) Guaranteeing the data integrity and ACID properties (atomicity, consistency, isolation, and durability) of transactions.

(3) Providing flexibility and interoperability for distributed activities processing.

Compared with the traditional distributed transaction process, WS-AT defines the standard protocols or specifications for the applications exchanging their messages.

That means in the traditional distributed transactions there are mostly non-universal communicating mechanisms that sometimes only worked between certain combinations of entities (applications, resource managers, and coordinators or transaction monitors) while in WS-AT transactions, with the combination of some open standard specifications such as Web services, WS-Coordination[2] ,WS-Addressing[4] and WS- Atomic Transaction[5], distributed transactions can communicate with each other seamlessly.

Figure2 illustrates how the traditional distributed transaction processing flow with two transactions is mapped to a WS-AT based flow. At any execution time, the transactional application which invokes Transaction1 and Transaction2 via Web service regards Transaction1 and Transaction2 as one single transaction and it can use any transaction control mechanism e.g. Java Transaction API (JTA) to synchronize  them. The two sycnpoints can guarantee the ACID properties of these two distributed transactions during the execution flow.

Figure 2.  WS-AT based distributed transactions processing flow  During the execution life cycle, every atomic transaction has a minimal set of states as follows:  { , , , , , }statet active registered completed aborted failed cancelled? .Af ter initialized, the state of a transaction?s instance can be either activated or aborted. Once it is active, the instance can normally continue its execution or it can be cancelled during its execution. In the first case, it can achieve its objective and successfully completes or it can fail. The abortion condition can guarantee the atomic transactions to roll back the previous updates on their data sources before the global transaction is completed. More formally the activation and abortion conditions for every atomic transaction ( ,1  ii i nt ? ? ) can be illustrated as follows:  1 , ( ) .j  i  i j  i n A c t i v e C o n d t t r e g i s t e r e d =  ? < ? = ?   Here we exclude 1( )ActiveCond t which is the condition  when the coordinator creates the coordination context for its sub-atomic transactions.

1 , ( ) { . . | 1 , }.i j j ji n j n j iAbortCond t t tt aborted f cancelledailed? ? ? ? ? ? ?= ? .



III. A CONCEPTUAL WS-AT BASED DISTRIBUTED INFORMATION SYSTEM  A. System Architecture In this demo system, which is a commodity and stock  management system with the functions of placing orders, inquiring catalogs and dispatching orders, the transactions run on two kinds of platforms: one is CICS Transaction Server on IBM Mainframe z/OS which contains the core business logic and the other is WebSphere Application Server (WAS) on  A single activity     Take money from account-1 database     Put account-1?s money into account-2 database  Transaction1  Transaction2 All or nothing  outcome  Commit Trans Begin Trans  Sycnpoint1 Sycnpoint2  WS-AT 2PC Protocol WS-AT  Completion Protocol  WS-C Registration  Protocol  Sate=In Commit Or In Rollback  Prepare phase  Commit phase  WS-C Activation Protocol  Transaction1  Transaction2  Coordinator  Transactional  APP  Create Coordination  Context     Microsoft Windows which allows a user to use the above functions via web interfaces. Figure3 illustrates the whole system?s architecture.

Figure 3.  Architecture of the conceptual system  Correspondingly there are four deployed applications each of which has an independent data source: VSAM file in CICS1 application containing the commodity catalog data including the item number, item name and stock amount, one Mainframe DB2 table in CICS2 application containing the ordered commodity data including item number and amount of the ordered commodities, and two Windows DB2 tables in WAS1 & WAS2 applications recording the ordering and dispatching information.

The system architecture can be abstracted into two basic types of models:  (1). Chain model: In this model, there's a primary (or root) coordinator (WAS1 application) that invokes a Web Service, and the invoked Web Service then invokes a second Web Service. The entire atomic transaction is controlled by the primary coordinator. The middle system (CICS1 application) takes on the role of a coordinator and the role of a participant at different times in its life cycle. When the primary coordinator instructs the middle system during transaction termination, the system acts as a participant. However, before it responds to the primary coordinator, it takes on the role of coordinator of its own participants (WAS2 application).

(2). Hub model: In this model, the primary coordinator invokes one Web Service (CICS2 application) and then another. It then coordinates them together.

Simply, we can adopt the hub model in which a single coordinator controls all the distributed transactions. However, this will increase the coordinator?s capacity, so in the chain model the applications in the middle nodes will take over the coordinating responsibility when there are too many bundles of transactions at a time.

In our model, the execution time of the global business transaction depends on the pre-defined expiration time for each atomic transaction, atomic transactions? waiting time and the sum of each sub-atomic transaction?s execution time. It can be computed as follows:    , 1 n  g l o b a l a t o m i c e x e c u te w a i t i  i T T T n?  = = + >?  (1)  exp  , 1, ..., , 1max{ , }irei n  atomic wait i  i wait i n T nT T ?  = = >= ?  (2)  For the atomic transaction?s waiting time , 1, . . . . . ,a to m i c w a i tiT i n? = , it depends on the additional holds [10] of the available resources for each WS-AT request, which is computed as follows:  ( ) max{0, ( ) ( )}, 1, ...,additional i i iH t h t a r t i n= ? ? =      (3)  At the 2PC prepare phase, the coordinator will grant some holds for the participants on one unit of available resource, and it is denoted by a positive number ia ( 1, 1, ...,ia i n? = ) and once the participant(atomic transaction) gets a hold on one resource, the resource will be locked. ( )ih t is the number of  active holds at time t and ( )ir t  is the number of requests at time t. The number of the holds left for new requests at time  2t depends on the number of requests and the number of holds granted for resources at time  1t ( 1 2t t< ).If there are more additional holds for atomic requests, the possibility of waiting decreases, that is, the , 1, . . . . . ,a to m i c w a i tiT i n? = decreases.

For example, in our system assuming that there are 7 active holds at time 1t ( 1( )ih t =7), ia =2 and there are three WS-AT requests (  1( )ir t =3). When a new request is proved to have a hold at prepare phase at time  2t ( 2 1t t> ), 2( )add itio na lH t is max {0, (7-1)-2*(3-1)} = 2 (Equ.(3)).On the other hand, if we assumed  1( )ih t =4, 2( ) additionalH t would be max {0, (4-1)-  2*(3-1)} = 0, that is, the new request would be pending. The global transaction?s waiting time can characterize the performance of the whole system whose corresponding data are shown in the part B of section IV.

B. Setup WS-AT infrastructure Due to lack of space we just list some key points of our  system?s implementation whose detail steps are illustrated in our former tutorial article [1].The application running on CICS was developed by COBOL programming language. To integrate the CICS application with the WebSphere application we need to map the COBOL language structure to the XML based data structure meanwhile we need to publish the business interfaces of the CICS application as Web Services. TABLE I and TABLE II illustrate how a COBOL copybook is mapped to a XML based data structure.

TABLE 1.  EXAMPLE OF A COBOL COPYBOOK            TABLE II. EXAMPLE OF A XML DATA ACCORDING TO A SEGMENT OF THE COBOL COPYBOOK  * Catalogue COMMAREA structure 03 CA-REQUEST-ID                    PIC X(6).

03 CA-RETURN-CODE                PIC 9(2) DISPLAY.

03 CA-RESPONSE-MESSAGE        PIC X(79).

At run time we use data mapping files which are defined in CICS as one of the PIPELINE resources for the data conversion work and use WSDL and URIMAP to locate the services.

In the WebSphere application we use Java Transaction API (JTA) to demarcate a global transaction. In the global transaction we invoke the CICS transactions via Web services and synchronize them by WS-AT mechanism as shown in TABLE III.

TABLE III. GLOBAL TRANSACTION INSTANCE WITH JTA                    In fact, to enable WS-AT does not require the system developers? extra coding effort. Many middlewares have implemented the WS-AT specification and the only thing for the developers is the configuration work [1, 6], in which we figure out how the distributed applications communicate with each other by specifying the WS-Addressing endpoints and what kind of roles they should play in the whole system architecture, that is, how to coordinate them in an atomic transactional flow. But the most important thing is to make the system web service driven and integrate the distributed transactions with a rational architecture.



IV. EXPERIMENTAL RESULTS  A. Test scenarios We test the system in normal and abnormal scenarios  respectively. Our test environment is shown in TABLE IV.

.

TABLE IV. TEST ENVIRONMENT  Mainframe PC  z/OS v1.7 Windows XP Pro.

CICS Transaction Server V3.1 with two CICS regions WebSphere Application Server 6.0.2.17  z/OS DB2 V7  DB2 V8.2.1 with XA data sources  One LPAR with 3 CPUs and 20 GB memory IE 6.0  Intel Pentinue4 2.4GHz CPU; 1GB Memory  In the normal scenario, the coordinator initializes the global WS-AT transaction which synchronizes the other three atomic transactions and all the updates in data sources (VSAM file and DB2 tables) are made correctly and permanently.

In the abnormal scenario we add some exception code during the flow execution. We let the application throw a Java RemoteException error in syncpoint2 (see Figure2). So this time the global transaction rolls back and all the updates are backed out from:  ? DB2 table -?order? on windows ? DB2 table -?dispatch? on windows ? CICS VSAM file ? DB2 table -?onorder? on z/OS  Figure4 illustrates the business process of placing orders with the WS-AT message exchange flow in the normal scenario.

Figure 4.  Message exchange diagram  For tracking the coordination messages we use the WebSphere TCP/IP monitor to catch the SOAP messages sent and received by WebSphere and print the trace messages of the SOAP header processing programs of CICS. Here we list the ?placeOder? and ?dispatchOder? WS-AT request and response SOAP messages.

TABLE V. PLACEORDER WEBSPHERE REQUEST SOAP MESSAGE       <xsd:sequence> <xsd:element name="ca_request_id" nillable="false"> <xsd:simpleType>  <xsd:restriction base="xsd:string"> <xsd:maxLength value="6"/> <xsd:whiteSpace value="preserve"/>  </xsd:restriction> </xsd:simpleType>  </xsd:element> <xsd:element name="ca_return_code" nillable="false">  <xsd:simpleType> <xsd:restriction base="xsd:unsignedShort"> <xsd:maxInclusive value="99"/> <xsd:minInclusive value="0"/> </xsd:restriction>  </xsd:simpleType> </xsd:element>  </xsd:sequence>  UserTransaction userTransaction = null; try { InitialContext context = new InitialContext(); userTransaction=(UserTransaction) context.lookup("java:comp/UserTransaction"); userTransaction.begin(); //     invoke atomic transactions  ? //      commit  userTransaction.commit(); } catch (java.rmi.RemoteException re) { try { userTransaction.rollback(); }  ? }  6. Register Response  WebSphere2  14. 2PC commit  7. Return message: Order in dispatch  5. Register  4. Invoke dispatchOrder Web Service  with CoordinationContext  CICS2  CICS1  15. 2PC commit  12. Return message: Order successfully updated  11. Register Response  10. Register  9. Invoke onOrder Web Service  with CoordinationContext  13. 2PC commit  8. Return message: Order successfully placed  3. Register Response  2. Register  1. Invoke placeOrder Web Service  with CoordinationContext WebSphere1                                            TABLE VI. PLACEORDER CICS RESPONSE SOAP MESSAGE                              B. Workload analysis Using WS-AT can remarkably increase the system?s  extendibility and scalability but whilst the whole system?s workload is accordingly augmented. The main factors in the workload costs are related to the XML parsing and distributed transactions coordinating.

For the XML parsing costs, because the maximum COBOL data name length is 30 bytes we collected the following benchmark results [15] as shown in TABLE VII:    TABLE VII. XML PARSING COST IN TWO EXTREME CONDITIONS  1 byte XML tag name  30 byte XML tag  name  Every 100 elements Inbound 0.27ms CPU 0.56ms CPU Every 100 elements Outbound  0.18ms CPU  0.39ms CPU    In our demo system there are 29 inbound elements and 17 outbound elements with average tag sizes of 15 bytes so the calculation of the extra costs would be computed as follows:  max min min  max min  { , } ( )  in out  tag  N N T T Cost S T  S S  ? = ? +  ? (4)  Inbound elements processing costs (Equ.(4)): ((0.56 - 0.27)*15/ (30-1) + 0.27)*29/100 = 0.12 ms CPU  Outbound elements processing costs (Equ.(4)): ((0.39 - 0.18)*15/ (30-1) + 0.18)*17/100 = 0.05 ms CPU  So approximately an extra 0.17 ms of CPU time is added per transaction.

For the costs of distributed transactions coordinating, we use Enterprise Workload Manager (EWLM) Tool to collect the CPU usage data as shown in Figure5. Due to the multiple CPUs available during the transaction processing period, CPU usage rate recorded was greater than 100%.

Figure 5.  CPU usage of WS-AT access  The increasing trend of CPU usage is tremendous when the number of transactions increase. According to the analysis of our system model in the part A of Section III (see the Equ. (2) and Equ.( 3)), the reason for this tremendous increase is that during the transaction processing the coordinator adds an exclusive lock for each of the atomic transactions and when multiple transactions request a common resource simultaneously they have to wait for others releasing the lock, which affects the system?s performance especially when there exist long and short processing transactions at the same time in a single processing flow.

<soapenv:Envelope xmlns:soapenc="..." xmlns:wscoor="http://schemas.xmlsoap.org/ws/2004/10/wscoor" > <soapenv:Header> <wscoor:CoordinationContext soapenv:mustUnderstand="1"> <wscoor:Expires>Never</wscoor:Expires> <wscoor:Identifier>com.ibm.ws.wstx:00000110be001306....

</wscoor:Identifier> <wscoor:CoordinationType> http://schemas.xmlsoap.org/ws/2004/10/wsat </wscoor:CoordinationType> <wscoor:RegistrationService       xmlns:wscoor="?"> <wsa:Address xmlns:wsa=""> http://9.181.93.144:9080/_IBMSYSAPP/wscoor/services/RegistrationCoordinatorPort  </wsa:Address> <wsa:ReferenceProperties xmlns:wsa="..."> <websphere-wsat:txID xmlns:websphere-wsat="..."> com.ibm.ws.wstx:00000110be00130....

</websphere-wsat:txID> <websphere-wsat:instanceID xmlns:websphere-wsat="..."> com.ibm.ws.wstx:00000110be00130...

</websphere-wsat:instanceID> </wsa:ReferenceProperties> </wscoor:RegistrationService> </wscoor:CoordinationContext> </soapenv:Header> <soapenv:Body> <p635:DFH0XCMNOperation xmlns:p635="..">  ?.

</p635:DFH0XCMNOperation> </soapenv:Body> </soapenv:Envelope>  <SOAP-ENV:Envelope ?? xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:wscoor="http://schemas.xmlsoap.org/ws/2004/10/wscoor" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <SOAP-ENV:Body> <DFH0XCMNOperationResponse xmlns="http://www.DFH0XCMN.DFH0XCP5.Response.com"> <ca_request_id>01ORDR</ca_request_id> <ca_return_code>0</ca_return_code> <ca_response_message>ORDER SUCESSFULLY PLACED </ca_response_message> <ca_order_request> <ca_userid>req1</ca_userid> <ca_charge_dept>oracle  </ca_charge_dept> <ca_item_ref_number>10</ca_item_ref_number> <ca_quantity_req>1</ca_quantity_req> </ca_order_request> </DFH0XCMNOperationResponse> </SOAP-ENV:Body> </SOAP-ENV:Envelope>

V. CONCLUSION In this paper, we present a conceptual solution for the  architecture of distributed systems and propose some evaluation functions for its performance and workload. It is based on WS-AT to provide flexible and loosely coupled services for integrating and synchronizing distributed transactions. As a proof of concept for the Quality of Service (QoS) implementation in mainframe, the system was demonstrated on the IBM First China CICS User Group Meeting 2008.

However, WS-AT is not suitable for processing the transactions with long time spans and will in some cases increase the system?s workload. But with WS-AT support we can completely ignore the differences of the heterogeneous platforms to reuse the legacy IT assets in modern systems and make our existing EIS?s architecture more extendable, flexible, reliable and interoperable to enhance our system?s quality of service in an open SOA environment.

