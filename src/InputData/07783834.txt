Frequent pattern mining algorithm for uncertain data streams based on sliding window

Abstract?Frequent itemset mining play a important role in the mining of various patterns and is in demanded in many real- life. Most of studies find frequent itemsets from traditional transcaction databases, in which the contents of each transcation are definitely known and prise. However, there are many situations in which ones are uncertain, This calls for mining uncertain data. Moreover, floods of uncertain data can be produced in many other situations. This leads to stream mining of uncertain data. In this paper, we proposed DSUF- mine algorithm to deal with stream mining of uncertain data  Keywords-uncertain data; data streaming; DSUF-mine algorithm

I. PROBLEM DESCRPTION AND RELATED DEFINITION Leung et al.[1] first proposed two uncertain data stream  frequent pattern mining which called UF-streaming and SUF-growth. But, there are disadvatanges in the algorithm .

So UF-tree can not get good compression effect and put pressure on memory space. Although UF-growth algorithm can make up part of the defect UF-streaming algorithms, there are some deficiencies.The process of mining frequent item is similar to UF-growth algorithm, but UF-growth algorithm has been proven not to be situable for the uncertainty of data mining frequent item sets[2].

Consider the insufficient of above two algorithms, Liu Yin Lei[3], who proposed a SRUF-mine algorithm. The algorithm gives an effective data structure SRUF-tree structure which is used to store the data item set contained in the transaction stream. SRUF-mine algorithm makes full use of the features of the uncertainty of the data stream and sliding window, but the algorithm does not consider that the importance of items may change over time, with the arrival of the next batch of affairs, the level of interest of users will decrease over time[4]. In this paper, we proposed a sliding window-based support attenuation frequent pattern mining algorithm DSUF-mine based on SRUF-mine algorithm, giving a attenuation weight, we can make the results more accurate.

In additon, there are based on data number[5] and based on time [6] in the window width type, in this paper, we use the number transaction-based. With the arrival of new data, each enter one or more new windows, the oldest one or more is deleted, the window should be updated along with the data.

We give an example of the uncertainties in the data stream  based on sliding window as shown in Table 1 (assuming L = 3).

TABLE I. A DATA STREAM BASED ON SLIDING WINDOW  Window Tid Item  SW1 T1 (A,0.9);(D,0.8);(E  ,0.7);(F,0.2) T2 (A,0.9);(C,0.7);(E,  0.7);(E,0.6) T3 (B,1.0);(C,0.9)  SW2 T4 (B,1.0);(C,09);(D,  0.3) T5 (A,0.9);(D,0.8) T6 (B,1.0);(D,0.7);(E,  0.1)  SW3 T7 (A,0.9);(D,0.8) T8 (B,1.0);(C,09);(D,  0.3) T9 (A,0.9);(D,0.8);(E  ,0.7)  In the actual data streaming applications, the knowledge contained in recently transcation is more valuable than the konwledge of history[7]. So, in this paper, we proposed a TDM(time decay model) to decay the weight of hostorical transaction mode support to record the case of aging of transacton, namely, we assign a weight for each transcation with the window, thus to distinguish between old and new affairs[8]. In this paper, we look each sliding window as a damping unit, while agnoring the probability attenuation of different transactions between the same sliding window.

? Definition1? The current transcation in the sliding window is SWi(i=1,2,3,...,n,...)? the order for the sliding window is SW1,SW2,SW3,...SWn,....the function of attenuation of item in sliding window can be describes as follow:  f(SWj)=? i-j (1) Where attenuation factor 10 ?? ? and j ? i, the value  of attenuation funnction is 1.

?Definition2?If get itemset X whose expectes support  in the sliding window SWj is supj(X), then the decay support of X in SWj is decribed as follow:  esupj(X)=supj(X)?f(SWj)=supj(X)?? i-j (2) Where i is number of sliding window.

DOI 10.1109/IHMSC.2016.293    DOI 10.1109/IHMSC.2016.293    DOI 10.1109/IHMSC.2016.293     For the uncertainty data stream based on expected support mode frequent mining process, the support of item X is the sum of all sliding window, if the number of sliding window is M, each of window contains L affairs, then the support of X in the sliding window can be expressed as:  Exp(X)=? ?  M  j 1  esupj(X) (3)

II. DSUTDSUF-MINE ALGORITHMYPE  A. Summary Data Structure Design The summary data structure design of DSUF-mine  algorithm contains three parts, a global tree SRtree, a tempary table Table and window queue Queue.

When the first sliding window into the queue window, firstly, we scan the window to find all frequent intem sets in sliding window. Then we sort the frequent item set according to the order of the dictionary and establish the branches in the global tree SRtree, the end nodes of each branch store the expected support of item sets. In the global tree SRtree can share node as long as its tem name is same, but its can not share the expected support.

After creating SRtree, then we establish a temporary table and store the information of each item through arry and SRtree.

Finnally we press Table into window queue Queue. the length of window queue is the total of effective sliding window.

B. Algorithm description Establish SRtree as follow: Input: The transcation L of the first window, prepare  threshold Output: SRtree (1)Scan L and get item set F1 of esup N?? ? , we sort  item set according to dictionary order; (2)Create SRtree root node and mark it with Null; (3)Create a branch for each item set, link to the root, the  same prefix itemset share prefix node, the parth rercorded the each node to root node denote expected support of item;  (4)Output SRtree; Detailed description of the algorithm is as follows: Input: SRtree, the current slide window SWi, the  minimum expected support, the slide window queue Q, the number L of transcation contain in each window;  Output: All frequent item sets; (1)DSUF-mine(SWi,? ,Q,L) { (2)get the number i of window, support supswj, and the  number of frequnt item in window; (3)create Table according to count , supswj, i; (4)if (!Q.full()){ (5) Q.EnQueue (Table )? (6) compute decay support of each window  queue and update Table; (7) for(j=0; j<count; j++){  (8) look for the item set in SRtree; (9) if it excists, get the expected support based on  decay of window according to the equation 3; (10) else eatablish a new branch in SRtree, the  value of node is the expected support; (11) Table[j].Link point to SRtree denote the  node of the item;}} (12)else{ (13) get the table of earliest window in window queue,  sign Table1; (14) for each item set in Table1, find the node in SRtree,  the value of node subtract the value in table; (15) Q.DeQueue (Table1); (16) Q.EnQueue (Table);} (17) if user send to a mining request{ (18) traversal SRtree; (19) if node is not less than LQ ??? , output the path  of item set from root node to that node;} (20) else DSUF-mine(SWi+1, ? , Q, L); }  C. The Example of Algorithm Consider the example uncertain tanscation steam given in  table1. Assum L=3, 4.0?? , 3.0?? .

Firstly, we find the item set whose expected support is  not less than 9.0?? L? using UH-mine algorithm when the first window arriving and sort it accroding to dictionary order and get {A}:1.8, {A, D}:1.35, {A, E}:1.17, {B}:1.0, {B, C}:0.9, {C}:1.6, {D}:1.5, {D, E}:0.98, {E}:1.3. We create a root of global tree and mark it with Null. Then we create a temporary table, the number of the window is 1. We press the table into temporary queue and insert the item in table into SRtree, insertion process is as follows: insert item set {A}:1.8 in the child node of root node, beause of item set {A, D} and {A} share the same prefix path {root, A}, so, insert node D in the child of node A and record the expected support 1.35 of item set {A, D} in ndoe D; We insert all item set in SRtree according to the above method. The global structure of first window is formed in Figure 1.

Figure 1. the global sturcture of the first window.

The second window is similar to the first window, at first we find the item set whose expected support is not less than  9.0?? L? and sort it according to the dictionary order, so we get the item set {A}:0.9, {B}:2.0, {B, C}:0.9, {B, D}:1.0, {C}:0.9, {D}:1.8. Next, we create temporary table and determine weather the window queue is full, if the window queue is not full, we press the table of the second window into the queue. We update the previous table and get the number of current window, decay parameter is ? =1/2, we decay the item set for the previous table according to the equation (2) and compute the expected support and update the Table and SRtree; For each item set in the second window table, we check weather it excists in SRtree, if it excist, we update the expected support of item into that node, else, we create a branch and store the expected support into the end node; We remove the value 0 of node in SRtree. The global structure of second window is formed in Figure 2  Figure 2. the global sturcture of the second window.

We get the frequent item set according to the dictionary orders {A}:1.8, {A, D}:1.44, {B}:1.0, {B, C}:0.9, {C}:0.9, {D}:1.9. when the third window arriving. Next, it is similar to the second window. The global structure of third window is formed in Figure 3  Figure 3. the global structure of the third window.

If the user send the requestion of mining frequent item, then travesal SRtree, we find the node whose expected support is not less than N?? =0.4 ? 6=2.4, the path form root node to that node is the frequent item set. So, we find all frequent item set. if we don not receive the requestion, then slide into the next window and update continuously.



III. TEST AND ANALYSIS OF ALGORITHMOF In this section, we evalute the performance of our  algorithm. For the evaluation,various experimental were conducted on a T6600 2GHz Process with 2GB main memory. In addition, the experimentals were run on the Windows7 operating system. All algorithm used in the experimental were written in VC++ language. Synthetic dataset T10I4D100K and real dataset Kosarak were used for the performance evaluation. We also added existential probablities generated by Beta function of MatlabR900b to make it an unsertain dataset. We compare time and space efficiency of our proposed DSUF-mine algorithm with UF- streaming algorithm and SUF-mine algorithm.

(1)T10I4D100K dataset Figure 4 present the runtime per iteration under different  minimum support thresholds on T10I4D100K. In the experimental the window size is 4, batch size is 10K, minimum support thresholds is varied from 0.5% to 3%.

Figure 4. The relationship between runtime and support on dataset T10I4D100K.

At this time, the relationship between consuming memory and support of the three algorithm is shown in Figure 5 on dataset T10I4D100K.

Figure 5. the relationship between consuming memory and support on dataset T10I4D100K.

Figure 4 showed that when the support increased, the runtime for SUF-mine algorithm, DSUF-mine algorithm and UF-streaming algorithm increased. however, DSUF-mine     improved time efficiency by using UH-struct to mine frequent item instead of creating FP-tree. Figure 5 showed that memory consumin of three algorithm is stable under the same case. In this case, the memory consumption of DSUF- mine algorithm is much lower than UF-streaming algorithms.

(2)Kosarak Because of Kosarak dataset contains over 990,000 affairs,  it is a huge data set, we just choose 30000 affairs as a experimental. Figure 6 present the runtime per iteration under minimum support on Kosarak dataset. In the experimental the window size is 4, batch size is 10K, minimum support thresholds is varied from 0.5% to 3%.

Figure 6. the relationship between consuming memory and minimum support on Kosarak.

At this time, the relationship between memory usage and minimum on Kosarak is showed as figure 7. In the experimental the window size is 4, the minimum support is 1%, the transcation of each window is varied from 5K to25K.

Figure 7. the relationship between consuming memory and minimum support on Kosarak.

From the above three comparative experiments, SUF- mine algorithm, UF-streaming algorithms and SUF-mine  algorithm test results on Kosarak dataset is consistent with the test results on the T10I4D100K.

We can observe that the runtime of DSUF-mine is less than DSUF-mine algorithm. The experimental results showed the behaviors of our proposed algorithm and illustrated the effectiveness of them.



IV. CONCLUSIONS In this paper, we proposed a new DSUF-mine algorithm  for mining frequent of uncertainty stream. This algorithm is a frequent pattern mining approach based on expected support, based on SUF-mine, we introduce a concept of sliding window decay, we join a attenuation factor into expected support of each sliding window and create a temprorary table and a global tree to store the information. The expected support is decaying gradually in the process of window sliding, at last, we mine the uncertainty frequent pattern by traversaling global tree. Experimental results showed the effectiveness of our algorithm.

