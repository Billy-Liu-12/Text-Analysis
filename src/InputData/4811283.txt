An Integrated OWL Data Mining and Query System

Abstract?In this paper, we propose an integrated OWL data mining and query system architecture for expressing the mined knowledge in the OWL format and for effectively answering users? queries. The proposed system consists of five sub-systems: query parser, rule inference system, ontology management system, knowledge generation system, and knowledge management system. We expect the architecture can provide users to query mined knowledge through the internet and with a more machine-understandable format.

Keywords?association rules, data mining, ontology, OWL language, semantic web

I. INTRODUCTION Data mining involves the application of specific algorithms  for extracting patterns or rules from data sets in a particular representation [7][8][16]. According to the classes of knowledge derived, the mining approaches may be classified as finding association rules, classification rules, clustering rules, and sequential patterns, among others. Among them, finding association rules in transaction databases is most commonly seen in data mining [1][3][18]. It is used to discover the relationships or information among the transaction items.

Besides, the concept of semantic web [23] has attracted much interest in recent years. It is proposed by Lee in 1998 and a method to effectively express materials on WWW. It provides a common framework that allows data to be shared and reused across applications and enterprises. There are many languages designed to implement semantic web. The Web Ontology Language (OWL) is the most popular among them. It can easily express the ontology needed in a particular domain.

In this paper, we try to use the OWL to represent the association rules. When association rules are mined out from a certain data source, they may need to be widely utilized through the internet environments. Appropriate semantic interpretation may expand the usage of the association rules.

An integrated semantic-web rule system architecture based on the OWL language is thus proposed for expressing the mined knowledge. The system consists of five sub-systems. They are query parser, rule inference system, ontology management system, knowledge generation system, and knowledge management system. We expect the architecture can provide users to query mined knowledge effectively and flexibly through the internet and with a more machine-understandable format. Besides, the system can be examined from the  viewpoints of two different types of actors: the end user and the system administrator. From the viewpoint of end users, the system functions on dealing with user?s query and generating answers. From the viewpoint of system administrators, the system acts as a back end to support the query processing.

These will be illustrated in the paper.

The remaining parts of this paper are organized as follows.

Related work is first reviewed in Section 2. The integrated system framework is proposed in Section 3. Each component in the framework is described in details in Section 4. Conclusions are stated in Section 5.



II. REVIEW OF RELATED WORK Agrawal and his co-workers proposed several mining  algorithms based on the concept of large itemsets to find association rules in transaction data [1][2][3][4][18]. They divided the mining process into two phases. In the first phase, frequent itemsets were generated by scanning the transaction data. In the second phase, association rules were induced from the large itemsets found in the first phase. There are many other approaches proposed for finding association rules as well.

As to semantic web, many approaches and applications have also been proposed. For example, Fang et al proposed a search engine that can properly interpret the meaning of a user?s query and the inherent relation among terms [9]. In their framework, a query request may be a keyword list as in traditional search methods or may be one in a complex form with various restrictions. Besides, the Web Ontology Language (OWL) [24][25] is the most popular for implementing semantic web applications. It is a makeup language for sharing and publishing data using ontology on the World Wide Web (WWW). OWL is developed based on DAML (DARPA Agent Markup Language) and OIL (Ontology Inference Layer) [19], and is now a W3C [24] recommendation. The OWL includes class, property, object, some logics, and among others.

In this paper, we take the OWL Query Language (OWL- QL) as the query language [10]. OWL-QL is a formal language and protocol for querying answers represented in OWL. It is an updated version of the DAML Query Language (DQL). A query request is parsed into three parts that are subject, property and object. These components are then filled in the OWL-QL query patterns that are a set of triples with the form (<property> <subject> <object>), where any item in the triple      can be a variable. The patterns formed are then used to retrieve appropriate results.



III. THE FRAMEWORK OF THE INTEGRATED OWL DATA MINING AND QUERY SYSTEM  In this section, we describe the framework of the proposed integrated OWL data mining and query system. It consists of five sub-systems, including query parser, rule inference system, ontology management system, knowledge generation system and knowledge management system. The framework of the proposed system architecture is shown in Fig. 1.

Fig. 1 will be examined from the viewpoints of two different types of actors: the end user and the system administrator. From the viewpoint of end users, the system functions on dealing with user?s query and generating answers.

From the viewpoint of system administrators, the system acts as a back end to support the query processing.



IV. MODULE DESIGN IN THE INTEGRATED SYSTEM In this section, the functions of every sub-system and its  components are described as follows.

A. Query Parser Keywords usually have to be extracted to reflect the real request of a sentence or a query. The Query Parser is thus designed to achieve this purpose. For matching the OWL patterns, it recognizes subjects, properties and objects in a sentence or a query as keywords. There are two kinds of queries usually appearing. The first one is the data query, which is a simple one and is the most commonly used in past applications. For example, assume we give the query ?Who owns the car??. It is first parsed to get the unknown subject (who), the exact property (owns) and the known object (car) according to the format of the OWL-QL Patterns [5][10]. The second one belongs to rule queries, which has still seldom been seen in the current applications. For example, assume the query related to the association rule ?If beverage is an antecedent and  snack is a consequent, what confidence is the rule?? is to be parsed. In the example, the words beverage, snack and rule are set as subjects; antecedent, consequent and confidence are set as objects; and ?is? is set as a property (type). These items extracted are thus stored as the OWL query pattern and used for inference.

B. The Rule Inference System The work of this sub-system is to infer appropriate answers  according to user queries. It is based on the OWL Query Language. It consists of the two components: the OWL query patterns and the inference engine. The functions of each component are described as follows.

1) The OWL query patterns: The component is implemented by the OWL Query Language (OWL-QL) [11], which is a formal language and protocol for querying answers and represented in OWL. An OWL-QL query pattern is a set of triples of the form:  (<property> <subject> <object>).

Items in the triple may be constants or variables (with their names beginning with the character ???). For the above example, the OWL query pattern receives the three keywords owns (property), who (subject) and car (object) from the query parser. It then judges that the word ?who? represents an unknown subject and replaces it with the variable ???. The following triple is then formed:  (<owns> <?p> <car>).

2) The inference engine: The main function of the inference engine is to infer appropriate answers through the integrated knowledge base according to the OWL query pattern. Continuing the above example, assume the fact about ?Tom owns a car? stored in the integrated knowledge base is expressed in the OWL form as follows:  user  Query Parser  OWL Query Pattern  Inference Engine  query response  Rule Inference System  Rule Conversion  Engine  Rule Editor  Rule Mining Engine  Integrated Knowledge  Base  Domain Ontology  Ontology Management System  Object-Oriented Transaction  Database  Data Manager  Insert / delete  System Administrator  Knowledge Management System  Association Rules  Ontology Editor  OWL Rule Base  Knowledge Generation System  form  userSystem Administrator  Knowledge Integration  System Administrator  user  Query Parser  OWL Query Pattern  Inference Engine  query response  Rule Inference System  Rule Conversion  Engine  Rule Editor  Rule Mining Engine  Integrated Knowledge  Base  Domain Ontology  Ontology Management System  Object-Oriented Transaction  Database  Data Manager  Insert / delete  System Administrator  Knowledge Management System  Association Rules  Ontology Editor  OWL Rule Base  Knowledge Generation System  form  userSystem Administrator  Knowledge Integration  System Administrator  Figure 1. The proposed system framework.

<owl-ql:premise> <rdf:RDF>  <rdf:Description rdf:about="#Tom"> <owns rdf:resource="#car"/>  </rdf:Description> </rdf:RDF>  </owl-ql:premise>  The inference engine will derive the answer as Tom in the following process:  Query: (?Who owns the car??) Query Pattern: (owns ?p car) Must-Bind Variable List: (?p) Answer: Tom  There have been several products in the market which can be used to achieve the inference function. In our system, we use the OWL-QL Server to implement the functions.

C. The Ontology Management System The Ontology Management System is responsible for the  building and management of the domain ontology that is related to the transaction data stored in the object-oriented transaction database. It includes two modules, the ontology editor and the domain ontology. They are described as follows.

1) The domain ontology: The term Ontology [6][11][12][13][15][17] was proposed in the field of philosophy at the earliest. It is now commonly used for the research of semantic web. Ontology mainly presents the entries or things in the world, and relationships between the entries. An example of ontology regarding food is shown in Fig. 2, which describes the concept hierarchy of food and its relationships among the concepts (classes).

In this paper, the domain ontology is represented in the OWL format. The domain ontology in Fig. 2 is thus transformed into the representation depicted in Fig. 3 through the ontology editor.

In Fig. 3, each node is a concept and each link is a property.

Some original attributes of an item are also represented as  concepts in the OWL representation. For example, the class wine has an attribute age, which is also thought of as a class in the OWL representation. In the context of the OWL syntax, a class is defined by owl:Class. The semantic relationships among classes are represented by the properties and are specified through the OWL syntax of owl:OjectProperty.

Besides, classes may have their subclasses. For the above example, beverage, snack and fruit are the subclasses of the class food, and the property hasCost connects the two classes of beverage and cost. In the representation of the RDF format, beverage is the subject, cost is the object, and hasCost is the property. Each subject should have its domains and each object have ranges. The link of has hasCost thus connects the domain of beverage and the range of cost. That is, it relates instances of the class beverage to instances of the class cost.

2) The Ontology editor: The ontology editor allows the system administrator to edit the domain ontology in the OWL format. The module can utilize an existing ontology editing tool, such as prot?g?, to achieve this purpose. If the system administrator has known that some classes or relationships about the data items need to be added, deleted or updated, he/she can directly edit the domain ontology through the ontology editor. In this paper, the ontology editor, Prot?g? [21] is used. It can allow users to build ontology for semantic web functions, in particular in the W3C's Web Ontology Language (OWL).

D. The Knowledge Generation System The function of this sub-system is to generate association  rules from an object-oriented transaction database. It includes the four modules: data manager, object-oriented transaction database, rule mining engine and association rules. They are introduced below.

1) The data manager: The data manager stores the data in a particular domain into the object-oriented transaction database. It can use operations such as insertion, deletion and update to handle the data. Any object-oriented database management system (DBMS) can play the role.

food  beverage snack  fruit  wine  tea  milk cookie  chocolate  bread watermelon  apple  banana  cost  expiration  alcohol  age  category  color  fat flavor  cost  calorie  cookie category  shape  sugar color vegetarian  bread category  country of origin  ripe  weight  size apple  category apple grade  color  banana category  IS-A  Property food  beverage snack  fruit  wine  tea  milk cookie  chocolate  bread watermelon  apple  banana  cost  expiration  alcohol  age  category  color  fat flavor  cost  calorie  cookie category  shape  sugar color vegetarian  bread category  country of origin  ripe  weight  size apple  category apple grade  color  banana category  IS-A  Property  Figure 2. An example of ontology regarding food.

food  beverage  snack  wine  tea  milk cookie  chocolate  bread  cost  expiration  alcohol  age  category fat  flavor  calorie  cookie category  shape sugar  color  vegetarian breadcategory  hasCost  hasExpiration hasCost  hasCaloriehasAge  hasAlcohol  hasCategory hasFat  hasFlavor hasSugar  hasCookie_Category  hasShape  hasColor  hasBread_Category hasVegetarian  objectProperty  subClassOf hasColor  food  beverage  snack  wine  tea  milk cookie  chocolate  bread  cost  expiration  alcohol  age  category fat  flavor  calorie  cookie category  shape sugar  color  vegetarian breadcategory  hasCost  hasExpiration hasCost  hasCaloriehasAge  hasAlcohol  hasCategory hasFat  hasFlavor hasSugar  hasCookie_Category  hasShape  hasColor  hasBread_Category hasVegetarian  objectProperty  subClassOf hasColor  Figure 3. The OWL representation of the ontology in Fig. 2.

2) The object-oriented transaction database: An object- oriented transaction includes one or more purchased items, each of which is represented as an object or an instance. Each instance inherits its characteristics from a superior object, called class, which defines the basic structure of objects with common properties, including attributes, default values, and methods. In this system, each item itself (or item name) is thought of as a class and each item instance appearing in a transaction is thought of as an object. Objects with the same class (item name) may have different attribute values since they may appear in different transactions. These data are stored in the object-oriented transaction database. The administrator can manage the database through the data manager.

3) The rule mining engine: This component aims at finding relationships among data items. It extracts the data stored in the object-oriented transaction database to generate inter- and intra-class association rules. Our previously proposed approach for mining rules from object-oriented transactions [14] is used here. There are three kinds of knowledge to be discovered: inter-class association rules, intra-class association rules and inter-intra class association rules. Objects and attributes are assumed to be binary, with the number 1 representing that the objects and the desired attributes appear. If they are not binary, they can be preprocessed by transforming an attribute with n values into n new binary attributes.

4) The association rules: The module of association rules store the knowledge mined from the data by the rule mining engine. As mention before, there are three kinds of knowledge to be discovered: inter-class association rules, intra-class association rules and inter-intra class association rules. Some examples of the three kinds are shown below.

The inter-class association rules:  ? If the subclass = watermelon, then the subclass = apple with a confidence factor of 0.8;  ? If the subclass = watermelon, then the subclass = apple with a support factor of 0.6;  The intra-class association rules:  ? If the cookie (cost = 1), then cookie (category = 1) with a confidence factor of 1;  ? If the cookie (cost = 1), then cookie (category = 1) with a support factor of 0.7;  The inter-intra association rules:  ? If the watermelon (ripe = 1), then apple (grade = 2) with a confidence factor of 0.9;  ? If the watermelon (ripe = 1), then apple (grade = 2) with a support factor of 0.5;  E. The Knowledge Management System The subsystem mainly manages the association rules and  transforms them into the OWL format. It includes rule conversion engine, rule editor, OWL rule base, knowledge integration and integrated knowledge base. They are described as follows.

1) The rule conversion engine: The function of the rule conversion engine is to automatically transform the association rules mined from the rule mining engine into the OWL format.

In the system, Jena [20] is used to implement the engine. Jena is an open software developed by the HP Semantic Web Labs.

It is a Java API for manipulating RDF, RDFS, OWL, SPARQL and is thus suitable as a tool to implement the engine. Besides, it includes a rule-based inference engine. This part is still under implementation.

2) The rule editor: In addition to automatic conversion from mined rules to OWL rules by the conversion engine, the rule editor allows the system administrator to manually transform the mined rules into the OWL format. The module     can utilize an existing ontology editing tool, such as prot?g?, to achieve this purpose because the OWL rules are also expressed in the OWL syntax. If the system administrator has known that some rules about the data items need to be added, deleted or updated, He/She can directly edit the rules through the rule editor into the OWL rule base.

In this paper, the ontology editor, Prot?g? [21] is used as the rule editor. The administrator can easily edit classes and relationships about classes through it. The class edition includes class descriptions, properties and their instances.

3) The OWL rule base: The OWL rule base stores the OWL rules both from the conversion engine and from the rule editor. All the rules stored in it are represented in the OWL format.

4) The knowledge integration module: The knowledge integration module integrates together the OWL rules stored in the OWL rule base and the relevant part of the domain ontology stored in the ontology management system. The integrated knowledge base can then support the inference engine in the rule inference systems to answer users? queries in a semantic and flexible way. Users can thus easily find the super-classes of purchased items, their attributes, and other interesting information.



V. CONCLUSIONS In this paper, we have used the OWL language to represent  the association rules for wide and flexible usage through the internet environments. We have also proposed an integrated OWL data mining and query system architecture for expressing the mined knowledge in the OWL format and for effectively answering users? queries. We expect the architecture can provide users to query mined knowledge through the internet and with a more machine-understandable format.

