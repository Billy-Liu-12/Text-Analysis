Fast Mining and Updating Frequent Itemsets  Chaohui Liu1,2, Jiancheng An2

Abstract   In order to overcome the drawbacks of Apriori algorithm for mining frequent itemsets, TIMV (Three-dimensional Itemsets Matrix and Vectors) algorithm was proposed, which used three -dimensional itemsets matrix and vectors, and broke through the bottom-up framework of Apriori. Only needed one pass to scan the database and did not create candidate itemsets, we could gain all the frequent itemsets.

Furthermore, this paper introduced FUFIA (Fast Updating Frequent Itemsets Algorithm). which could get the new frequent itemsets through searching three-dimensional itemsets matrix when the database and the minimum support were changed. Both theoretical analysis and experimental results showed the feasibility and effectiveness of the two algorithms.

1. Introduction  Knowledge discovery and data mining(KDD) is an emerging field, whose goal is to make sense out large amounts of collected data by discovering hitherto unknown patterns. One of the central KDD tasks is to discover association rules[1]. The prototypical application is used for analyzing supermarket sales or basket data.

Finding out frequent itemsets is one of the most investigated fields of data mining. The problem was first presented in paper[1]. The subsequent paper[2] is considered as one of the most important contributions to the subject. Its main algorithm, Apriori, not only influenced the association rule mining community, but also it affected other data mining fields. After that, much faster algorithms have been presented. Most of them are based on Apriori algorithms or Apriori modifications. Those who adapted Apriori as a basic search strategy tended to adapt the whole set of procedures and data structures as well[3-7].These important algorithms were not only used in basic association rules mining, but also in other data mining fields.

A central data structure of the algorithm is Matrix[4-7].

In this paper we will show a version of Matrix that gives the best result in frequent itemset mining and updating.

In addition to present description of theoretical and experimental analysis, we also provide implementation detail as well.

The rest of the paper is organized as follow: Section 2 provides some concepts, while section 3 describes the  details of the TIMV algorithm. Our experimental study is presented in section 4, and our conclusions are in section 5.

2.Problem Statement  2.1 Basic concepts of association rules  Let Item={I1,I2,?,In} be a set of n distinct items?A transaction T is defined as any subset of items in Item.

A database D is a set of transactions. A set of items is called an itemset. The number of items in an itemset is called the length of an itemset. Itemset of the same length k are referred to as k-itemsets. A transaction T is said to support an itemset X ? I if it contains all items of X, i.e., X ? T. The fraction of the transactions in D that support X is called the support of X, denoted as support(X). An itemset is frequent if its support is above some user-defined minimum support threshold.

Otherwise, it is infrequent.

An association rule has the form R: X? Y, where X and Y are two non-empty and non-interesting itemsets.

The support for rule R is defined as support(X?Y). A confidence  factor defined as support(X ? Y)/support(X) is used to evaluate the strength of such association rules. The semantics of the confidence of a rule indicate how often it can be expected to apply, while its support indicates how trustworthy this rule is.

The problem of association rule mining is to discover all rules that have support and confidence greater than some user-defined minimum support and minimum confidence thresholds, respectively. Association rules that satisfy these requirements are interesting. The normally followed scheme for mining association rules consists of two stages:  ? the discovery of frequent itemsets, ? the generation of association rules.

The first step is pivotal, so we pay most attention  to it.

2.2 Related definitions  We present the definitions of the concepts that are used to describe the new algorithm.

Definition 1?Three-dimensional Itemset Matrix, TDIM  A matrix is TDIM, which have three features as follow:  ?This matrix is three dimensional with N*N*N, where N is the number of merchandise in database D;  2008 ISECS International Colloquium on Computing, Communication, Control, and Management  DOI 10.1109/CCCM.2008.198   2008 ISECS International Colloquium on Computing, Communication, Control, and Management  DOI 10.1109/CCCM.2008.198     ?All the three dimensions are in the set of merchandise:{I1,I2?,In}. namely, for every M[Ii,Ij,Ik] , Ii,Ij,Ik?{I1,I2,?,In}?1?i,j,k?N?  ?The values of M[Ii,Ij,Ik] are determined by the following rules?The concurrence number of (IiIj) is stored in M[Ii,Ij,I1], and (IiIjIk) in M[Ii,Ij,Ik] ( i<j<k,2?k ?N).except that the value of M[Ii,Ij,Ik] is zero.

Definition 2?Bit Vector BV[6] Let BVi=(bvi1,bvi2, ?, bviL) be Bit Vector ,where L  is the number of transactions in database D. The value of bvij  is 1 if the j-th  itemset  is in i-th transaction, otherwise the value is 0. So we can know the number of 1 in BVi is the total of transaction, which contains itemset-i. Take the database showed in Table 1 for example, there are BV1=(011011011) and BV2=(110100111).

Table. 1 Transaction Database TID ID listing T1 I2, I3, I4 T2 I1, I2 T3 I1 , I3,  I5 T4 I2 , I3,  I4,  I5 T5 I1 , I3 , I4 T6 I1, I4 T7 I2 , I3 T8 I1,  I2, I3, I4 T9 I1, I2, I3 , I5  Definition 3?Minimum number :Min_num Min_num is defined as the product of Minimum  support (denoted by Min_sup) and the number of transaction (by L), namely, Min_num=Min_sup*L.

3. Algorithm based on TIMV  3.1 Algorithm for getting Itemsets matrix and Vector  ?Scan the database and read the r-th (1?r?N) transaction one-by-one.

?We deal with the r-th transaction: Tr?{Tid, Itemsets}(where Tid is transaction ID and Itemsets is transaction itemsets) as follow:  Let Itemsets be { Ii,Ij, Ik,Im, ?,Is}, firstly every value of M[Ii,Ij, I1], M[Ii,Ij, Ik], M[Ii,Ij, Im] ?M[Ii?Ij, Is] should be increased 1; secondly, the value of r-th bit in BVi, BVj? and BVs should be 1; lastly we remove the Ii from the Itemsets and repeat the above steps on the new Itemsets, until the new Itemsets contains only one.

For example, to the Itemsets={I2,I3,I4,I5}, whose transaction id is T4, in database showed in Table 1,the value of M[I2,I3,I1], M[I2,I3,I4], M[I2,I3,I5], M[I3 ,I4,I1], M[I3 ,I4,I5] ,M[I4 ,I5,I1] should be increased 1. Moreover, let the fourth bit of BV2, BV3, BV4 and BV5 be 1,namely, bv24?bv34?bv44?bv54?1.Figure 1 represents the Itemsets Matrix from Table 1,where we map the three dimension into two dimension, in order to expediently describe. Take ?40022? for example, which means  M[I1,I3,I1]=4, M[I1,I3,I2]= M[I1,I3, I3]=0, M[I1,I3, I4]= M[I1,I3, I5]=2?  Figure 1 Itemsets matrix from Table 1  Algorithm1:Getting Itemsets Matrix and bit Vector(GIMV) Input?Transaction D Output?Itemsets Matrix: M?Bit Vector:BV Begin  For each transaction Ti ?D do { S={Ii,Ij,Ik,Im,?,Is}  //{Ii,Ij,Ik?,Is} is the itemset of the  transaction Ti For each Ic of S    //c=i,j,k?s  BV[Ic][i]=1 L=length(S)   //L denotes the length of string S For(x=1;x?L;x++) { P=substr(S,x)    //the x-th element in S  For(y=x+1;y?L;y++) {  Q=substr(S,y) ; M[P,Q,1]++  For(z=y+1;z?L;z++) { R=substr(S,z); M[P,Q,R]++;  } }  }  } End  3.2 Finding frequent itemsets  In the algorithm given in this paper the process of finding frequent itemsets includes two steps:  Determine temporary frequent itemsets by visiting three-dimensional itemsets matrix.

Determine frequent itemsets by calculating and validating the bit vector and dividing the temporary frequent itemsets.

The algorithm is particularly described as follow: Step 1?TIMV algorithm starts with M[1,1,1], firstly,  we compare M[i,j,1] ( i<j?N) with Min_num, If M[i,j,1] ?Min_num, then let Ii,Ij be a whole string and store in string array L[x]?where x is the number of non-null element in L[] ? ,secondly, compare M[i,j,1] with Min_num for j<k and k?N, If  M[i,j,k] ?Min_num, then Ik should be put in L[x], namely, the old string IiIj?Im is turned into IiIj?Im Ik, until k equals to N.

After that, we start with  M[i,j+1,k] ( j+1<k?N) ,and repeat the same operation, If M[i,j+1,k] <Min_num and  string Ij+1,Ik  are contained in some string begin with Ii (denoted by  Ii?IhIj+1IkIm?In), then this string is divided into two parts  Ii?IhIj+1Im?In and Ii?IhIkIm?In.

The same operation should be repeated ,until M[i,j+1,k] turns to M[i,N,N].

In Figure 1, if the Min_num is two, we can determine  I1  I2 I3 I4 I5 I1  30211 40022 30000 20000 I2   50032 30001 20000 I3    40001 30000 I4     10000 I5     temporal itemset I1I2I3 from 30211 and I1I3I4I5 from 40022, but M[1,3,4] is zero and less than Min_num in 30000, thus we should divide I1I3I4I5 into I1I3I4 and I1I3I5.

Step2: For every temporal item IiIaIbIcId?IhIkIm ?In in L[], the Boolean operation  result of them should be accounted beginning with the first character. If the number of 1 in the result is not lesser than Min_num, then the same operation is repeated with the next character. Otherwise this string is divided as follows: let the string be IiIaIbIcId?IhIkIm?In, the number of 1 in BVIi?BVIa???BVIh  (where ? means ?and? operation ,1? 1=1, 1?0=0, 0?0=0) is not less than Min_num, but the number in  BVIi?BVIa??? BVIh?BVIk less than Min_num , divide this string into IiIaIbId?IhIkIm?In, IiIaIbIc?IhIkIm?In,?, IiIaIbIcId?IkIm?In and IiIaIbIcId?IkIm?In. Besides that, store the first one in the former location and add others to arrays L[].

Begin next operation from this character.

Algorithm2 : Algorithm based on TIMV Input?Itemset Matrix: M, Bit Vector: BV and Minimum  number :Min_num Output?Frequent itemSet(FS) Step 1?Derive temporal frequent itemset FS={},L[]  // let L[]store the temporal strings For(v1=1;v1<N;v1++)  For(v2= v1+1;v2?N&& M[v1,v2,1] ?Min_num;v2++) { L[lenth]=v1 v2 // let lenth be the length of L[]  For(v3=v2+1;v3?N; v3++) {if M[v1, v2, v3]?Min_num  L[lenth] = L[lenth]+v3   //add v3 to L[lenth] Else If v2v3 is in some one of L[i] Divide L[i] into two parts, v2 and v3 are in separate one  } lenth++ }  Endfor Step 2?Validate and divide the result of step1 For(i=1;i?lenth&&L[i].length>3;i++) // if L[i].length?3, put L[i] into FS  TemBV1 =BVI0?BVI1?BVI2 //I0 I1 I2 index the first three chars of L[i]. BVI0 BVI1 BVI2  are the bit vector corresponding to the three chars For (j=4;j?long;j++) { TemBV2 = TemBV1; TemBV1?TemBV1?BVIj  If the number of 1 in TemVB1 is less than Min_num { TemBV1= TemBV2  For(k=4;k<j;k++) { TemStr= L[i]-Ik   // delete Ij from L[i]  If TemStr is not in L[] { L[lenth]=TemStr; lenth++ }  } L[i]= L[i]-Ij ;  i-- ; long--  }//endif }//endfor  FS=FS?L[i] Endfor  According to algorithm 2, when the Min_num is two, one can gain the following frequent itemsets: {T1, T2 ,T3} {T1, T3 ,T4}{T1, T3 ,T5}{T2, T3 ,T4}.

3. 3 Fast Updating Frequent Itemsets Algorithm  Now we consider how to gain the frequent itemsets when the database or support threshold is changed, which is the updating strategy of TIMV.

From 3.1, we know the process of gaining the itemset matrix is dynamic, so we should only modify the primary itemsets matrix when the database is changed: If added some new transaction data, we should consider those a part of primary data. So the primary itemsets matrix should be modified according to Algorithm 1. Beside that, the length of bit vector should be increased and the corresponding bits should be set value. On the other hand, when part of the data is expurgated, we should make the value of M[Ii, Ij ,Ik] decrease rather than  increase, and lessen the length of bit vector.

Algorithm 3: FUFIA Input: Former itemsets matrix and bit vector, minimum  support, variational database(db) Output: Frequent itemSet (FS) Begin If  insert db into the old database(DB) Let the length of BVi be L+K instead of L // L and k denote the transaction number of DB and db respectively  For every BVi ? BV  BV[i][L+1]=BV[i][L+2]=?=BV[i][L+K]=0  GITM(db)  TIMV(M, BV, Min_num)  If  delete db from DB  For every BVi ? BV  Delete the bit corresponding to db from BVi GITM(-db)  //-db means replacing t M[P,Q,R]++ to M[P,Q,R]--  TIMV(M,BV,Min_num)  End For example, if a new record {T10,{I2, I3 I4}} is  added in database, then the value of M[I2,I3,I1], M[I2, I3 ,I4] and M[I3, I4,I1] should be increased 1, the length of bit vector is turned to ten . Beside that, the tenth bit of BV2, BV3 and BV4 should be 1, while the other bit should be zero.

If we delete the record {T5,{I1,I3,I4}} from the database ,we should make the value of M[I1, I3 , I1], M[I1, I3 ,I4] and M[I3, I4,I1] decrease 1, and delete the fifth bit. Of course the length is decreased 1.

We can gain the new frequent itemsets by scanning the itemsets matrix only once when the support threshold is changed.

3?4 Notes about TIMV algorithm  ?We can derive 2-itemsets and 3-itemsets from itemset matrix, thus TIMV algorithm improves the performance and breaks through bottleneck of Apriori.

That result is proved by the process of creating itemset matrix.

?Because the temporal k-item may be not frequent, so we must use BVi and judge if the temporal item is frequent . The reason is that: all the subsequences (non-empty) of an itemset are frequent, which is necessary but non-sufficient for it is frequent.

?Figure1 shows that : half of the space N*N*N does not store nothing, so we can practically reduce half of space, in order to reduce memory cost.

4?Experimental results  Here we present the experimental results of three algorithms: TIMV, AVM, FUFIA and Apriori. The experiment is conducted on a PC with an Intel Pentium IV 1.8G CPU and 256M main memory, running Microsoft Windows XP. All programs are coded in Java.

Data used in this paper is the database of mushroom, which is downloaded from http://www.ics.uci.edu/ ~mlearn/databases. This database has 8124 records with 23 kinds of properties before pretreatment. Figure 2 shows the running time for the three algorithms: TIMV,AVM and Apriori. From Figure 2 we know that TIMV is more effective than Apriori and AVR. This is because TIMV breaks through the bottom-up framework of Apriori.

Figure 2 . Comparing execution times using of TIMV,  AVM and Apriori  Figure 3. Comparing execution times using of TIMV,  AVM and FUFIA  Furthermore, to study the effect of the FUFIA algorithm, we performed an experiment in which we used 8000 records as old database and 1000 as new database. Experiment results are shown in Figure 3. Due to without scanning the old database and the itemsets matrix, and bit vector had been preparatorly initialized , FUFIA is effective.

5?Conclusion  In this paper we proposed new algorithms for Frequent Itemsets mining and updating. The TIMV incorporates Two-dimensional Matrix, Bit Vector and graph. The proposed algorithm scans the preprocessed database exactly once, and does not create candidate itemsets. Hence it can greatly reduce I/O cost. The theoretical analysis and experiment testify that TIMV is effective. When the database and the minimum support are updated, FUFIA only needs scanning the Itemsets Matrix once. It also is high performance .

