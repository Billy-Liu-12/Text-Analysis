

Abstract. I n  this pciper, two concepts from different research arem are brought together, ricimely functional dependencies which are a clms of integrity constraints that have gained fundamental importcince for releitiorin1 database design and association rules which are a class of patterns which has been studied rigorously in data mining. It will be shown that functional dependencies may be used to logically infer new association rules from given ones. This observation will then be employed to propose a new variant of the besr known algorithm for association rule mining, the so-called A Priori algorithm.

Keywords. data mining, association rules, A Priori algorithm, relational databases, functional dependencies.

1. Introduction  Data mining is the analysis of typically very large sets of data in order to discover yet unknown relationships among the data and aggregate them in ways which are novel, useful, and understandable to the users of the data. Data mining is a still young and due to its different ancestors, namely statistics, databases and artificial intelligence, heterogeneous discipline.

Among its subdisciplines, association rule mining is probably the one which is most independent from these ancestors.

Association rule mining is usually explained in the context of the market-basket problem which is the task of identifying sets of items which frequently occur together in supermarket transaction data. Technically spoken, the rules to be mined in this scenario are single-ditnensioiial association rules, i.e. both sides of these rules are sets of values which come from the same domain, in this case the items that may be purchased in the supermarket. Single-  dimensional association rules may be generalized quite naturally to multidimensional association rules which are better tailored to data according to the relational model of data.

Association rule mining is done today by means of numerous variants of an algorithm which is known as A Priori and which extracts all association rules that are regarded as significant according to some simple statistical criteria during a number of sequential scans of the data.

In this paper, we will propose an improvement of the A Priori algorithm that uses knowledge about the functional dependencies that are contained in the data to be mined.

Functional dependencies are patterns in data according to the relational model of data that may be observed due to corresponding regularities among the real world objects which are to be modeled by the data; they are commonly employed in the database design process. In combination with multidimensional association rules, functional dependencies allow us to logically infer the validity of other association rules and thereby to simplify the A Priori algorithm.

The remainder of this paper is organized as follows. Section 2 serves to introduce the concepts and the notation used within this paper; this comprises concepts both from relational database theory and from data mining. In section 3, an adaptation of the A Priori algorithm to multidimensional association rules is presented.

The similarities, the differences and the interactions between functional dependencies on the one hand and association rules on the other will be investigated in section 4. This lays the foundation of the enhanced A Priori algorithm which will be proposed in section 5. In section 6, we shall discuss in how far the prerequisite of the proposed algorithm, namely that there are functional depe6dencies in the data to be mined,  25th Int. Conf. Information Technology Interfaces IT1 2003, June 16-1 9, 2003, Cavtat, Croatia  http://urzihw-inuenchen.de    is justified. The final section is then used to substantiate the advantages of the proposed algorithm over the classical A Priori algorithm.

2. Basic concepts and notation  2.1 Relations and functional dependencies  We assume that the reader is familiar with the basic concepts of the relational model of data (e.g. on the basis of [ 5 ] )  and restrict ourselves to informally introducing the concepts we are using in the rest of this paper. When talking about a relation we distinguish between the relation schema (denoted by R) which describes the structure of the relation and the relation instance (denoted by r) which conforms to that structure and in which data are stored.

A relation schema R comprises the set of attributes (denoted by atts(R)) on which R is defined and a set of integrity constraints which have to be satisfied by the conforming relation instances. We will use letters X and Y for sets of attributes and letters A and B for individual attributes.

A relation instance may be thought of as a set of tuples each of which consists of a set of values such that for each of the attributes in atts(R) there is exactly one corresponding value; individual such values will be referred to as attribute values and denoted by A:a where a stands for the value corresponding to A. Sets of attribute values that consist of one attribute value per attribute from some X c atts(R) are called X- values and will be designated by X:x. We shall not distinguish between an attribute value and an X-value which contains only this attribute value.

The notation C J ~  x(r) stands for the relation instance which is obtained by selecting those tuples from r that contain the X-value X:x.

Finally, card(r) is used to designate the number of tuples contained in the relation instance r.

As far as the integrity constraints of a relation schema are concerned, we restrict our considerations to functional dependencies within this paper. A functional dependency is an expression of the form X A. We say X + A is satisfied by a relation instance r if and only if every two tuples from r which agree with respect to their X-values, also agree with respect to their A-values; moreover, we say that X + A holds in a relation schema R if and only if X -+ A is satisfied by every relation instance conforming to  R. The set of all functional dependencies that hold in relation schema R will be denoted by r".

A key of a relation schema R is a minimal set X c atts(R) such that the functional dependency X+ A holds in R for each A E atts(R).

The closure of a set of attributes X with respect to r" is the set of all attributes A such that X -+ A is contained in r'; the closure of X with respect to r" will be denoted by Xr'. A linear time algorithm for computing the closure of a set of attributes may be found in [ 3 ] .

2.2 Association rules  Suppose, R is a relation schema, A E atts(R), and X c atts(R), then an expression of the form  (X:x 3 A:a, s, c) where s and c are real numbers from the interval between 0 and 1 is called a multidimensional association rule.

If r is a relation instance conforming to R, we say that a multidiniensional association rule (X:x 5 A:a, s, c) is satisfied by r if  card(oA = a ( o ~  = Jr))) / card(r) 2 s and  Both s and c are measures for the interestingness of a multidimensional association rule; s is called the support threshold and it prescribes a lower bound for the fraction of the tuples of r that have to contain both X:x and A:a for the rule to be satisfied by r. The confidence level c prescribes what fraction (at least) of the tuples of r that contain X : x  have to contain A:a as well for the rule to be satisfied by r.

Multidimensional association rules are particularly appropriate for mining data according to the relational model of data. For reasons of brevity, multidimensional association rules will be referred to as association rules throughout this paper.

card(o, = doX = x(r))) card(ox = Ar)) 3 c  3. The classical A Priori algorithm  The best known algorithm for mining association rules is the so-called A Priori algorithm which was originally introduced in [ I ] .

As a matter of fact, the A Priori algorithm does not actually compute association rules, but rather generates the set of all frequent X-values, i.e.

X-values which appear in at least a fraction s of the tuples of the given relation instance.

Obviously, for each frequent X-value, an association rule containing all the attribute values     ' Input: r relation instance s support threshold  Output: L set of all frequent X-values  of the frequent X-value inay be chosen (e.g., based on the confidence levels of the resulting rules) subsequently.

The A Priori algorithm is based on the observation that if an X-value appears in a fraction s of the tuples, then any subset of the X- value appears in at least fraction s of the tuples, or - to put it the other way round - an X-value inay appear in a fraction s of the tuples only if each of its subsets does so. This property is sometiiiies referred to as A Priori trick.

In the relevant literature, the A Priori algorithm is usually explained in the context of the market-basket problem which implies a restriction to single-dimensional association rules. However, as observed in [6], the algorithm inay easily be adapted to multi-dimensional association rules. In the following, the classical A Priori algorithm is restated in such a way that it applies to multi-dimensional association rules; thus we make it directly comparable to the algorithm which will be proposed in section 5 of this paper and which is applicable to multi- dimensional association rules only.

I Algorithm: Classical A Priori I  The algorithm proceeds levelwise and requires one pass per level through the given relation instance. On level k, the set Lk of all frequent X-values of size k is computed; this is done in two steps: During the first step, a set Ck of candidate X-values is constructed from Lk-1 by  applying the A Priori trick. In the second step, the occurrences of the candidate X-values in the relation instance are counted and thus the actually frequent ones are identified.

For further details and a discussion of how to compute the candidate sets Ck efficiently, the reader is referred to [6].

4. Interactions between association rules and functional dependencies  At first sight, association rules and functional dependencies seem to show a good deal of similarities: As a matter of fact, both of them are meant to characterize situations in which the values with respect to one or more attributes of a relation determine the values with regard to some other attribute of that relation. However, there are three aspects in which association rules and functional dependencies differ from each other considerably.

Firstly, functional dependencies have a coarser granularity than association rules. This means, while a functional dependency X 4 A is a statement which refers to all the X-values and all the A-values in a relation instance, an association rule (X:x 3 A:a, s, c) is a statement which relates to the combination of only one particular X-value and one particular A-value.

Secondly, functional dependencies are more stringent than association rules; that is, while a functional dependency enforces that all of the tuples which contain a certain X-value have to agree with respect to their A-value, an .

association rule requires only that a certain percentage (expressed by means of the confidence level c) of the tuples which contain the X-value have the same A-value.

Finally, functional dependencies relate to the relation schema whereas association rules relate to a specific relation instance. This implies that a functional dependency will be satisfied by every relation instance which belongs to the respective relation schema; thus the validity of a functional dependency cannot be affected by changes to the relation instance. An association rule, by way of contrast, is a statement about one particular relation instance only and therefore such a statement may become invalid due to a chlinge to the respective instance.

It is an immediate consequence of the latter of these differences between association rules and functional dependencies that the existence of one or more association rules will by no means have     any effect on the set of functional dependencies which hold in the respective relation schema.

On the other hand, a functional dependency X -+ A which holds in a relation schema implies the validity of all association rules (X:x 3 A:a, s, c) for those X-values and A-values which occur in combination in the respective relation instance; this implication is independent of the respective relation instance and the confidence level of each of the implied association rules is equal to 1.

Of course, this kind of relationship is owed to the different granularity of functional dependencies and association rules and i t  is of a rather trivial nature. The following lemma will show, however, that there is another, more useful kind of interaction between functional dependencies and association rules.

Lemma. Let R be a relation schema, r a conforming relation instance, A, B E atts(R), and X c atts(R); if  i) (X:x 3 A:a, s, c) is satisfied by r and ii) Y -+ B holds in R with Y c X U { A }  then (X:x U A : a a  B:b, s, 1 )  is also satisfied by r with B:b being the (uniquely determined) attribute value which is contained in all tuples of r which contain both X: x and A:a.

Proof obvious 0  5. An enhanced A Priori algorithm  The above lemma has some interesting ? implications for generating frequent X-values  according to the A Priori algorithm: Suppose, at some time during the execution of the algorithm we know that X:x is contained in the set Lk.1 and we also know that there is a functional dependency Y -+ B with Y c X that holds in R; according to the above lemma, we may then conclude that X:x U B:b is an element of Lk where B:b is the uniquely determined attribute value which is contained in all tuples of r which contain X:x.

The important point about that is the fact that we can make this conclusion without verifying that all subsets of size k-1 of the set X:x U B:b are elements of Lk-1 and without counting the occurrences of X:x U B:b in r either. Instead, we may immediately assign such an X-value to Lk without making it a member of the candidate set  However, there is still another way in which we can make use of this situation: Once we have  ck.

concluded that X:x U B:b is contained in Lk due to the existence of some functional dependency as described above, it is apparent that any X- value X:x u B:b? with b? # b cannot be an element of Lk even if all subsets of size k - 1 of X:x U B:b? were elements of Lk.1; and again we may make this inference without counting the occurrence of X:x U B:b? in r. This implies a further reduction of the size of the candidate sets ck. In order to illustrate these effects the following example is provided.

Example. Suppose, at the beginning of the A Priori algorithm we have established the set  L1 := { (A:al} ,  (A:ar},(B:bl},(B:b2},{B:b3}} If we may assume that the functional dependency A -+ B holds in R and that according to this functional dependency the value a, uniquely determines the value b, for 1 5 i 5 2, then we may conclude that  ( A x l ,  B:bl}, {A:a2, B:b2} E LZ and consequently that  (A:al, B:br), {A:al, B:b3], (A:az, B:b,}, {A:a2, B:b3} E Lt  Note that the classical A Priori algorithm would instead include all six possible pairs of attribute values in the candidate set Cl and count their occurrences in r in order to finally end up with the same result. 0  Given a frequent X-value X:x from Lk-1 and a functional dependency Y -+ B with Y c X there seems to remain the problem of finding the attribute value B:b which corresponds to X:x according to the functional dependency. Of course, this attribute value may be found in any tuple which contains X:x, but we certainly would not like to make an additional scan of the relation instance in order to find such a tuple. It turns out, however, that this is not really a problem: Since B:b is functionally dependent on some of the attribute values in X:x, it is guaranteed that there is only one such value.

Hence, whenever during subsequent traversals of the loop of the A Priori algorithm we have to count the occurrences of an X-value which contains one or more such unknown attribute values, we may increment the respective count without checking the value of these particular attributes. Obviously, such missing values may be added either during the next counting of the occurrences of candidate X- values or at the end of the algorithm after all frequent X-values have been found.

In the enhanced A Priori algorithm given below, these unknown values are taken into     account by using the symbol ?*? which may be understood as some kind of wildcard for an unknown, yet uniquely determined value.

Algorithm: Enhanced A Priori  Input: r relation instance s support threshold  Output: L set of all frequent X-values  begin CI := { { A:a] I r contains dn occurrence of A:a 1; Ll := ( (A:a}  I ( A x }  E Cl A card(oA,(r))Z s ); L := 0; k : =  1; while Lk # 0 do  begin  k : = k +  I ; L := L U Lk;  ck := { c I c = {Al:al, .... Ak:ak] r \A ,#A, fo r  1 < i < j < k  A A, E ( ( A I ,  ..., A!.J\(A,J)r? A C\(A,:a,} E Lk.1 for 1 5 i 5 k  for 1 l i s k } ; Lk := ( x:X I x:X E Ck A card(ox x(r)) 2 S ]  U ( C I31 E ( 1 ,  ..., k} C = (Al :a l ,  ..., AI:*, ..., Ak:ak)  AA,#A, fo r  1 l i < j < k A C\(AI:al) E Lk.1 A AI E ({AI, .?, ALl\~All)r+ I  end end.

It should be mentioned that the coinputation of the closures of sets of attributes - contrary to what the above algorithm may suggest at first sight - need not be done anew for each possible element of Ck or Lk, respectively. As closures are defined in t e r m  of attributes rather than in t e r m  of attribute values, it is sufficient to compute all the closures which are needed during a traversal of the while-loop only once when the loop is entered. Moreover, one can easily see from the above algorithm that the closure of an attribute set X is required for the coinputation of Ck and Lk only i f  Lk.1 contains some element x:x.

6. Applicability of the enhanced A Priori algorithm  The enhanced A Priori algorithm makes use of certain regularities in the data that have the  form of functional dependencies, a concept which is commonly used in the design of relational databases. Therefore, i t  is legitimate to ask whether we may reasonably expect that functional dependencies will be present at all in sets of data to be mined for association rules. It may at first glance seem as if the answer to this question is completely dependant on the respective data set, however, a closer look reveals that there is an easy way to decide whether the enhanced A Priori algorithm inay benefit from the presence of functional dependencies or not.

Functional dependencies are used in relational database design to define certain I normal forms of relation schemes that are considered desirable because they avoid redundancy in the conforming relation instances.

The best normal form which may be achieved - as long as only functional dependencies are regarded - is the so-called BoyceKodd normal form (BCNF); according to the definition of BCNF, if X + A is a non-trivial functional dependency that holds in a relation schema which is in BCNF then X has to contain a key of that relation schema.

It is easy to see that any such functional dependency X + A will be of hardly any help for the enhanced A Priori algorithm; this is because any X-value which coinprises all of the attributes from X will occur at most once in a conforming relation instance and therefore will hardly ever be considered frequent. As a consequence, the enhanced A Priori algorithm is not appropriate for mining associations between multiple attribute values which are contained in the same relation, particularly if the relation schema is in BCNF.

The situation is different, however, as soon as associations between attribute values from multiple relations are considered. In this case, the relations which contain the attribute values have to be joined as a prerequisite to counting the co- occurrences of the attribute values. For reasons of brevity we restrict ourselves to the case where only two relation schemes R I  and R2 have to be joined.

The attribute(s) on which the join of R I  and RI is performed must be a key in at least one of the relation schemes RI  and R2 because otherwise the join would be ?lossy?, i.e. the relation resulting from the join would not comprise the same information as RI  and R2. On the other hand, if the join attribute(s) constitute a key in R I  it IS  very unlikely that they are a key of     Rz as well because in that case there would have been no need to separate the information contained in  the two relations during database design. As a consequence, the left-hand-side of any functional dependency which holds in RI will not contain a key of the joined relation even if it contains a key of RI and therefore, an X- value with X c atts(Rl) may be contained in the joined relation an arbitrary number of times and, in  particular, may be frequent. So all the functional dependencies that hold in R ,  may be useful for the enhanced A Priori algorithm even i f  their left-hand-sides contain a key of RI.

It is obvious that the number of functional dependencies in  the data to be mined increases with the number of joins that are required to build the relation in which the occurrences of the X-values may be counted. Apart from that, we would like to point out that the data to be mined may also contain functional dependencies for other reasons; we only mention dimension tables in data warehouses which are deliberately denormalized (cf. [7]).

7. Conclusions  When comparing the enhanced and the classical A Priori algorithm with regard to runtime there is not much difference. The enhanced A Priori algorithm will occasionally require one scan less of the relation instance r, but the gains during counting due to smaller candidate sets will be moderate at best.

Actually, the main advantage of the enhanced A Priori algorithm is the fact that it avoids to include candidates into the sets Ck unnecessarily. This is very important because, according to [IO], ?the number of candidates must be sufficiently small that a count for each can fit  in main memory?. For that reason, enhanced A Priori will be able to cope with larger sets of data than classical A Priori.

As a matter of fact, there have been numerous other proposals on how to improve the classical A Priori algorithm with respect to this vulnerable spot. We only mention hash-based techniques (such as [SI), transaction reduction techniques (as described in [2]), the partitioning technique (cf. [9]) and the dynamic itemset counting approach (described in [4]). It seems worth mentioning that almost all of such attempts to improve the efficiency of the classical A Priori algorithm may be applied in combination with the enhancement proposed in this paper.

8. References  [ 11 Agrawal R., Imielinski T., Swami T. Mining Association Rules between Sets of Items in Large Databases. Proc. ACM SIGMOD Int.

Conf. on Management of Data, 1993. p. 207 - 216  [2] Agrawal R., Srikant R. Fast Algorithms for Mining Association Rules. Proc. Int. Conf.

Very Large Data Bases, 1994. p. 487 - 499  [3] Beeri C., Bernstein P.A: Computational Problems Related to the Design of Normal Form Relation Schemas. ACM Trans. on Database Systems 1979; 4( 1 ): 30 - 59  [4] Brin S., Motwani R., Ullman J.D., Tsur S.

Dynamic Itemset Counting and Implication Rules for Market Basket Analysis. Proc.

ACM SIGMOD Int. Conf. on Management of Data, 1997. p. 255 - 264  [SI Garcia-Molina H., Ullman J.D., Widom J.

Database Systems: The Complete Book.

Upper Saddle River, NJ. Prentice Hall, 2002  [6] Han J., Kamber M. Data Mining: Concepts and Techniques. San Francisco. Morgan Kaufinann Publishers, 2001  [7] Kimball R. The Data Warehouse Toolkit - Practical Techniques for Building Dimensional Data Warehouses. New York.

Wiley, 1996  [8] Park J.S., Chen M.S., Yu P.S. An Effective Hash-Based Algorithm for Mining Association Rules. PI-oc. ACM SIGMOD Int. Conf. on Management of Data, 1995. p.

175 - 186  [9] Savasere A., Omiecinski E., Navathe S. An Efficient Algorithm for Mining Association Rules in Large Databases. Proc. Int. Conf.

Very Large Data Bases, 1995. p. 432 - 443  [ IO]  Ullman J.D. Data Mining Lecture Notes.

