WSCN: Web Service Composition based on Complex  Networks

Abstract ? Currently the research of service science mainly focuses on the composition of distributed and heterogeneous Web services. Most of the approaches proposed to tackle this problem are based on cross-platform workflow and AI planning. However, until very recently, little attention is paid to the approaches based on complex networks. In the era of Big Data, Web services are created and updated in a fast way and their relationships are becoming more complicated. Therefore, studying the basic characteristics of services networks based on complex network theory will be meaningful. In this paper, we propose a framework to model the services network as a directed complex network, in which nodes represent the atomic Web services and the data communicated between them while edges represent the dependent relationship between data and service nodes. Based on the modeled network, we further apply graph search algorithms to solve the problem of Web services composition. Experimental results are given to validate the flexibility and efficiency of our framework.

Keywords ? web service; service composition; complex networks;

I.  INTRODUCTION In recent years the research of service science has drawn  so much attention of researchers and organizations since the Service Oriented Architecture was firstly proposed. Web services are considered as self-contained, self-describing, modular applications that can be published, located, and invoked across the Web [1]. Many companies take Web services as one of the most import tools through which they communicate with their partners, provide services to their customers and enable their products or systems to interact with each other. Examples include online bill payment, air ticket booking, customized online newspapers and stock trading services.

The current research of Web service mainly focus on the composition of distributed and heterogeneous applications, which can be realized by flexible Web services composition.

Most of the approaches proposed to tackle the problem of service composition are based on cross-platform workflow [2, 3] and AI planning [4, 5, 6, 7, 8]. However, until very recently, little attention is paid to the approaches based on complex networks [15]. In the era of Big Data [9], Web services are created and updated in an unprecedented fast  way and their relationships are becoming more complicated.

The large-scale Web services and their complicated relationships naturally form a complex services network. By studying the basic characteristics of the network, we can better understand their creation, update and evolution mechanism systematically. For example, by clustering the Web services and studying the community structure of the services network, we could easily find similar web services and identify the ?backbone? ones from enormous services, which help us to avoid the malicious network attack and provide robust service.

Figure 1.  Atomic Web Service  In this paper, we propose a framework to model the services network as a complex network. The network nodes consist of atomic Web services and the data communicated between them. This means there are two types of nodes in the network, service nodes and data nodes namely. The dependent relationship between data nodes and service nodes consist the network edges, which are directed. Figure 1 shows an example of an atomic Web service and its transformation to the nodes and edges in a network. In Figure 1 (1), Web service W1 takes data D1 as its input data and D2 as its output data. In Figure 1(2), D1 and D2 are converted to data nodes. Furthermore, two directed edges (D1, W1) and (W1, D2) are created respectively. Based on the modeled services network, the Web services composition problem is converted to a graph search problem. The main contribution of our work is as follows:  1) We model the Web services network as a complex network.This could help us to better understand some basic laws of service science, especiall in the era of Big Data.

DOI 10.1109/ICSS.2013.29     2) In the modeled network, the nodes are not only consisted of atomic Web services, but also the data communicated between services.This helps up to simplify the problem of graph based Web services composition.

3) We propose a new method for Web services composition based on the complex network. To the best of our knowledge, this is the first attempt to combine Web services composition with complex network.

In our experiments, we generate three synthetic complex networks of 100, 1000, and 10,000 atomic Web services respectively. Then we study the ?small-world? and ?scale- free? characteristics of the network. After that, we applied graph search algorithms on the network to solve the problem of Web services composition. The experimental results are given to show the flexibility and efficiency of our framework.

The rest of this paper is organized as follows: Section 2 introduces the related work in Web services composition and some preliminary attempt to combine service science with complex networks. Section 3 presents our framework to model the Web services complex network. Section 4 describes the graph search algorithm to solve the problem of Web services composition. Section 5 gives the experimental results to validate the flexibility and efficiency of our algorithm. Section 6 concludes the paper and gives some discussion about the future work.



II. RELATED WORKD As the key issue of service science since the Service  Oriented Architecture (SOA) was firstly proposed, Web services composition has been studied by many researchers [1, 10, 11, 12]. Generally, traditional automated Web services composition algorithms can be divided into two categories: workflow based and AI planning based.

eFlow [2] is a workflow based platform for specifying, enacting, and monitoring composite Web services. It enables the specification of process that automatically configures themselves at run-time according to the nature and type of services available on the Internet and to the requests and needs of each individual customer. It also provide a dynamic change features, allowing a great flexibility in modifying service process instances and service process definitions, enabling changes to every aspect of a process. Consistency and authorization rules are also included in eFlow for avoiding run-time errors and enhancing the security level. In [13] the author proposed a way to automatically compose web service workflow that uses component web services.

They developed transactional workflow ontology to describe the Web services workflows and implemented a workflow engine to run the workflow instances.

Many research efforts have been reported to address the Web services composition problem via AI planning.

McIlraith et al [5] solve the problem of automated Web services composition by applying and extending the Golog [15], which is a logic programming language built on top of the situation calculus. In [7] Medjahed et al propose an ontology-based framework for the automatic composition of Web services. They present a technique to generate composite services from high-level declarative descriptions.

In this paper formal safeguards are defined for meaningful composition through the use of composability rules. These rules compare the syntactic and semantic features of Web services to determine whether two services are composable.

Recently some research papers are published to study service science based on complex networks. Carroll et al [16] present a survey for understanding the mechanisms and theorizing the business models and business process management adopted across many organizations today.

Based on the survey, they propose the need to develop a framework to enhance a manager?s ability to monitor key performance indicators (KPIs) while improving business process restructuring practices through social network analysis (SNA [20]). E Hai-hong et al [17] study the basic characteristics of services and service networks, and proposed a new method to explore the service network?s ?small world?, ?scale-free? characteristics and service network topology, based on the theory of complex network and existing networked software research works. ZHU et al [18] proposed a method for building complex network of Web services, which treats the Web services as nodes of the complex network and the functional similarity of Web services as the edges. They implement a prototype system to use the matches of service information for building network model. Then they validate the ?small world? and ?scale-free? properties of the network. In [19] ZHU et al propose another approach to build complex network of Web services. The Web services are used as nodes of the complex network in this method, and invocation relationship between Web services are regarded as the edges of the complex network.

With this method, the key Web services are found in the numerous Web services, and at the same time the robustness and reliability of composite services are enhanced.



III. COMPLEX NETWORKS OF WEB SERVCICES According to the definition provided by W3C [21], a  Web service (typically an atomic Web service) is a software system designed to support interoperable machine-to- machine interaction over a network. Other systems or Web services can interact with the Web service in a manner prescribed by its description using SOAP (Simple Object Access Protocol) message. The self-contained, self- describing and loose-coupling characteristics of Web service bring about the chance for compositing atomic Web services to composited services, which fulfill personalized customer requests. With the arrival of the era of big data, tens of thousands of Web services are created and updated every day.

Studying the basic laws behind tremendous Web services and their complicated relationship in the traditional way will be a big challenge. Fortunately, the development of complex networks theory and its successful application in large scale networks provide us with another choice. To study the service science based on complex networks, we should firstly model the network graph based on the existing Web services. The key issue we are addressing in this paper is the automated Web services composition based on complex networks. This will determine the network graph we are modeling.

Data Node  (PW2, TW2)  (PW1, TW1)  (PW3, TW3)  (PW4, TW4)  (PW5, TW5)  (PW6, TW6)  (PW7, TW7)  (PW8, TW8)  (PW9, TW9)  D1  W1  W2  W3  D2  D3  W4  W5  D4  W6  W7  W8  W9  D5  Service Node   Figure 2.  Web services complex network  The Web services network we are constructing should satisfy the following properties:  1) It is a complex network. This means the network should include some non-trivial topological features (e.g.

?small world?, ?scale-free?) that do not occur in simple networks such as regular or random networks.

2) It supports automated Web services composition. The network topology should reflect the invocational relationship between Web services. So that we can apply graph search algorithms on the network to solve the problem of automated Web services composition.

3) It provides personalized Web services composition.

Some customers may concern about the cost of the composited Web service while others may care more about the executing time. The Web services composition method should satisfy different requests according to the customer?s personal preference.

Based on the previous considerations, we present the framework to model the services network. This includes two steps. Firstly, we transform each atomic Web service to network nodes and edges. Figure 1(1) shows a typical atomic Web service W1, which takes D1 as its input data and D2 as its output data. W1 is converted to a service node while D1 and D2 are converted data nodes. The data dependant relationship between W1 and D1, D2 are converted to directed edges, as shown in Figure 1(2). One edge is heading from D1 to W1 while the other is heading from W1 to D2. By converting the input and output data of a Web service to data nodes, the network can easily support Web services composition. In order to provide personalized Web services composition, we apply the five-dimensional QoS model proposed by Zeng et al [22] to the service nodes.  In this paper we simplify the model by assigning each service node with two QoS properties: price and time. The former represents the resource or bandwidth cost for executing the Web service while the latter represents the time for executing the Web service. Finally, a service node W can be represented as W (PW, TW).

The second step in modeling the services network is to merging the pairs of data nodes which are equal. To illustrate this more clearly, we give the following definition.

DEFINITION 1: For two Web services W1 and W2, whose input data are D1 and D2 respectively. If D1 can be used as the input date of W2 as well as that D2 can be used as the input data of W1, we say that data nodes D1 and D2 are equal, denoted as D1 = D2.

The definition can easily be extended to output data nodes. Then we can construct the Web services network by simply merging each pair of data nodes which are equal. The algorithm is described in Algorithm 1.

Algorithm 1. Web services network construction  The Web services network construction algorithm firstly convert each atomic Web service to nodes and edges. Then it merges all the pairs of data nodes which are equal. Figure 2 shows an example of the output network graph generated by the algorithm. Service nodes are denoted with green circles and data nodes are denoted with yellow squares. For each service node, its QoS properties are also displayed in this figure.



IV. WEB SERVICE COMPOSITION In this section we will illustrate how to let the Web  services complex network support automated and personalized Web services composition. Firstly, we give some basic properties of the constructed network.

PROPERTY 1: The network graph G(V, E) is a bipartite graph. This means the neighbors of each service node are data nodes and the neighbors of each data node are service nodes.

PROPERTY 2: There are two neighbor nodes for each service node. One of them is an input data node while the other is an output data node.

Input: Set of atomic Web services  W={wi, i=1,2,...,n} Output: Web services network graph G(V, E)  for i:= 1 to n  end for  1. Convert wi to service node and add it to set V.

2. Convert input and output data of wi to data  nodes and add them to set V and D.

3. Create directed edges by connecting data nodes  and service node, add them to set E  for each pair (di, dj) D?D if (di = dj)  end if  1. Merge di and dj to a single node d.

2. Remove di and dj from D and V.

3. Add d to D and V.

end for  Initialize: V = ?, E = ?, D = ?      (1) Graph100                                                                  (2) Graph1K                                                                 (3) Graph10K  Figure 3.  The degree distribution of the three networks.

PROPERTY 3: The number of edges of the network graph G(V, E) satisfies: | | 2 | |SE V? , where VS is the set of service nodes.

PROPERTY 4: The number of nodes of the network graph G(V, E) satisfies: | | 1 | | 3 | |S SV V V? ? ? . When all the data nodes are merged into a single node, | | | | 1SV V? ? .

When no pair of data nodes are merged, | | 3 | |SV V? .

Based on the properties of the constructed network, the problem of web services composition is transformed to the problem of graph search. The user initiates a Web services composition request by assigning the input and output data.

The Web services composition engine firstly map the input and output data to the data nodes of the network. Then it applies a graph search algorithm to find the shortest path between the source data node (corresponding to the input data) and the destination data node (corresponding to the output data). Finally it translates the shortest path to the Web services composition solution and returns it to the user. In this paper we apply both the BFS (Breadth-first search [23]) and DFS (Depth-first search [24]) algorithm on the network to solve the Web services composition problem.

As we mentioned in section three, some customers may concern about the cost of the composited Web service while others may care more about the executing time. In order to provide personalized Web services composition, we further proposed two graph search algorithms: PBFS (Price based BFS) and TBFS (Time based BFS), both of which are based on the BFS algorithm. The PBFS algorithm searches the path with the minimal price of the composited Web service while the TBFS algorithm searches the path with the minimal time of the composited Web service. The price and time of a composited Web service is defined as follows:  i  n  W W i  P P ?  ?? ,  i  n  W W i  T T ?  ? ?                    (1) where Web service W  is composited by service series  Wi (i = 1, 2, ?, n).

Take Figure 2 for example, the user initiates the request with input and output data pair (D1, D3). Assume that the (price, time) pairs for W1, W2, W3 and W4 are (5, 1), (0, 3), (4, 4), and (2, 1). Table 1 shows the Web services composition solutions return by the four algorithms.

TABLE I.  SOLUTIONS RETURN BY THE FOUR ALGORITHM  Algorithm Solution BFS 1 3 3D W D? ? DFS 1 1 2 4 3D W D W D? ? ? ? PBFS 1 2 2 4 3D W D W D? ? ? ? TBFS 1 1 2 4 3D W D W D? ? ? ?      Figure 4.  The Web services complex network with 100 service nodes and  120 data nodes.



V. EXPERIMENTAL RESULTS To validate the efficiency and flexibility of our proposed  framework, we firstly generate three synthetic Web services networks and then perform the four graph search algorithms on them. The three synthetic networks are generated from 100, 1000 and 10,000 atomic Web services respectively. In the following part we will call them Graph100, Graph1K, and Graph10K. Each service node contains price and time properties, which are generated from normal distribution N(10, 5) and N(5, 5), where N(mu, sigma) represents the normal distribution with expectation value mu and standard deviation value sigma. In order to merge the pair of data nodes that are equal, we must determine the pairs of equal data nodes first. Generally, the data nodes can be viewed as the data that Web services request from or provide to the user. Hence this work can be done based on the following assumptions:  1) There are some ?popular? data nodes which is provided or requesteb by many services.

2) The majority of the data nodes are requested or provided by very few services.

Base on the above assumptions, each time we select a pair of data nodes (Di, Dj) and assign them as equal data nodes. Then we merge Di and Dj as a single node. The probability whether a data node is selected or not is proportional to its degree. We repeat the selection and merging operation until the number of data nodes is lower than a given threshold. This idea comes from the method proposed by Barabasi and Albert [25].  Figure 4 shows a generated network graph of Graph100.

A. The Scale-free Sharacteristics Generally, we say a network is a scale-free network if the  degree distribution of its nodes follows the ?power law? distribution. The degree distribution of the three synthetic networks is shown in Figure 3. From the experimental results we see that the distribution basically follows the ?power law? distribution, except that there is a peak where degree is 2. This phenomenon can be explained by PROPERTY 2. Since there are two neighbor nodes for each service node, the number of nodes whose degree is 2 (has two neighbors) will be very large. The ?power law? distribution of the degree of nodes proves that the constructed Web services networks are complex networks.

B. The Algorithm Performance We perform the four graph search algorithms (BFS, DFS,  PBFS and TBFS) on the three synthetic networks. The performance of each algorithm is evaluated by the average search steps for any given length of path. The experimental results are given in Figure 5. We see that the BFS algorithm outperforms the other algorithms on all the three networks while the DFS algorithm has the worst performance. The difference is obvious especially when the scale of the network is large and the length of the path is not long. The length of the path directly reflects the number of services composited, which is not large by experience. This provides us with valuable information in Web services composition.

(1) Graph100   (2) Graph1K   (3) Graph10K  Figure 5.  The average search steps of the four algorithms on the three synthetic Web serivces network

VI. CONCLUSION In the era of Big Data, tens of thousands of Web services  are created and updated every day. The tremendous Web services and their relationship form a complicated system.

Studying the service science based on traditional methods will be a big challenge. In this paper, we propose a framework to model the Web services and their relationship as a complex network. Then we solve the problem of automated Web services composition by applying graph search algorithms on the constructed networks. Finally, we generate three synthetic networks and give experimental results to validate the flexibility and efficiency of our proposed framework.

In this paper, the atomic Web service is simply represented by a service node and two data nodes. However, real world Web services are usually more complicated. For example, the status of a Web service after its execution may change. In the future, we will consider these kinds of information and make our model more realistic. Furthermore, our framework models the Web services network as a static network, whose edges and nodes should not change. But real world Web services may change from time to time. So we will also consider how to support dynamic and evolutional Web services networks in our future work.

ACKNOWLEDGES This work is sponsored by the CNGI (China Next  Generation Internet) sub project: IPv6 Upgrade of University Equipment and High-quality Resources Sharing System, No.

957-219899004 and the project: The Sharing System of University Equipment and High-quality Resources, No. 957- 219800003.

