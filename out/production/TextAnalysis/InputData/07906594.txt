2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

Abstract?Research and development on participatory sensing that accumulates a large amount of data acquired from users on the cloud and handles them as big data has proceeded due to the spread of sensor devices with miniaturized and advanced functions typified by smartphones. However, in service configuration models based on the current participatory sensing for which the cloud is a core component, there is a problem in that it is not possible to flexibly distribute information according to the data provisioning policy. In this paper, we propose a new sensor- based application platform based on a service configuration model that does not use a server or a cloud. In addition, we design and implement a Contract-oriented Information Flow Protocol, which realizes flexible reflection of the provisioning policy on that platform. Furthermore, we discuss feasibility and scope of the proposed protocol through simulation experiments.

Index Terms?contract protocol, network service platform, participatory sensing, contents flow, mobile ad-hoc network, multi agent system, ubiquitous computing.



I. INTRODUCTION  DUE to the widespread use of miniaturized and highlyfunctional sensor devices, development of sensor-based applications that uses data acquired from these devices is underway. Examples include agricultural support systems [1], that monitor environmental information such as temperature, humidity, luminance, and rainfall to improve the efficiency of agricultural work; Home Energy Management System (HEMS) [2], that monitors and manages the power consump- tion of each appliance in a home network; and healthcare systems [3], that detect abnormal activities from physiological information such as heart rate and blood pressure. Therefore, the scope of these kinds of applications, recently called IoT applications, is diverse.

In this paper, we focus on service configuration model for sensor-based applications. In conventional applications [1]? [5], service configuration models are vertically integrated so that data acquisition is exclusively made by installing a sensor for each service as shown in Fig. 1(a). For this reason, there is an inefficient use of sensor and network resources. In addition, sensor data is acquired from the predetermined devices within a fixed frequency, spatial resolution, and accuracy, and then provided to users. Therefore, the realization of a user-oriented service that changes the service configuration according to the user?s request is limited.

T. Oide is a Research Fellow of Japan Society for the Promotion of Science, and with Graduate School of Information Sciences, Tohoku University, Japan, e-mail: oide@ci.cc.tohoku.ac.jp.

T. Abe and T. Suganuma are with Cyberscience Center, Tohoku University, Japan, e-mail: {beto, suganuma}@tohoku.ac.jp.

Consequently, in recent years, to effectively use the re- sources of sensor equipped devices, such as smartphones, research on mobile crowdsensing [6] has been conducted. Mo- bile crowdsensing, which utilizes a people-centric networking paradigm [7]?[9], is a form of sharing sensor data acquired from sensor devices owned by users, and can be broadly classified into two categories: Participatory Sensing [10] in which users themselves consciously provide sensor data, and Opportunistic Sensing [11], [12] in which users share sensor data based on different properties such as geographical or social relationship.

In the service configuration model of applications based on Participatory Sensing [13]?[17], users act as both provider and consumer of the sensor data as shown in Fig. 1(b). Sensor data acquired from users is stored on the clouds, and provided to users based on their requests. Therefore, service providers do not need to install a sensor device for each service, and it is possible to efficiently use sensor and network resources.

However, it is difficult to grasp the amount of data that satisfies user?s requirements, and moreover how much of that data is disseminated, which makes data distribution management more difficult. In addition, it is necessary to manually identify which tasks can be provided, which is a great obstacle to motivate data provisioning.

On the other hand, in the service configuration model of applications based on Opportunistic Sensing, the information is shared in an ad-hoc manner through a very unstable Device- to-Device (D2D) network, composed by sensor devices owned by users as shown in Fig. 1(c). Therefore, users can share information without requiring special infrastructure or com- plicated operations. However, as in the previous case, the data distribution management is also difficult. Therefore, we need a new service configuration model such that reduces the disadvantages while using the best asset of both models, and a software platform to promote system development based on the new model.

In this research, we propose the Contract-Oriented Sensor- based Application Platform (COSAP) to share sensor data among users without requiring special infrastructure and op- eration. With COSAP, users are connected to each other by the Peer-to-Peer (P2P) network, and data is distributed by establishing a temporary relationship based on the ?con- tract?. The consumer?s request and data provisioning policy of providers are modeled and registered on COSAP. Based on the policy, the data distribution route is dynamically determined by automatic negotiation among agent components by using the Contract-oriented Information Flow Protocol (CIFP). There- fore, COSAP allows highly efficient distribution of sensor    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   consumer consumer consumerdeveloper/provider  aggregation/ analysis  sensor network  provide  (a) Conventional Model  provider/consumer provider/consumer  provider/consumer  developer  aggregation/ analysis  (b) Participatory Sensing Model  provider/consumer  provider/consumer  provider/consumer provider/consumer  provider/consumer  (c) Opportunistic Sensing Model  Fig. 1. Service configuration model of applications based on (a) the conventional model, (b) participatory sensing model, and (c) opportunistic sensing model.

data to all users while reflecting the user policy. Furthermore, COSAP needs no central server nor cloud infrastructure, the only requirement is the installation of COSAP on each user?s device; therefore, it is easy to deploy highly on-demand applications for sharing data among other users in comparison with the traditional models.

We have proposed the basic concept of COSAP and CIFP in a previous publication [18]. The present paper first outlines COSAP. Next, we will design the CIFP to realize the sensor data distribution based on the policy of the provider. We will also discuss the feasibility and scope of CIFP through simulation experiments.

This paper is organized as follows: In Section I, the back- ground and general outline of this research was shown. In Section II, research on conventional sensor-based applications and the sharing platforms of sensor data will be cited and their characteristics and problems will be described. In Section III, we describe a Contract-Oriented Sensor-based Application Platform for solving the evoked issues and the assumed environments. In Section IV, the design of the Contract- oriented Information Flow Protocol used in the proposed platform will be described in detail. In Section V, the results of simulation experiments conducted to confirm the effectiveness of the proposed protocol and its evaluation are described. In Section VI we will discuss the conclusion of this research and future challenges.



II. RELATED RESEARCH AND CHALLENGES  A. Sensor-based Application  Research on sensor-based applications that utilize the enor- mous amount of sensor data acquired from sensor devices is being conducted in various fields [1]?[5]. In research on home networks [4], information obtained from sensors installed in homes is aggregated and analyzed by a server, and autonomous home appliance control is performed based on the results.

In the research targeting weather data [5], applications that aggregate and share observation data for each region have been proposed. In the service configuration model of these studies, the system collects sensor data from known sensor devices installed in advance, and the acquired sensor data is exclusively used by the system. Meanwhile, efforts to disclose data held by government agencies and municipalities as open data have also progressed in recent years [19]?[21]. In these efforts, there are spatiotemporal restrictions on services  constructed using these data to provide sensor data acquired by the provider with fixed frequency and accuracy.

In recent years, research and development of sensor-based applications based on the participatory sensing model [10] has been conducted to solve these problems. B. Predic? et al.

proposes a life log system [22] that links up with an existing participatory sensing network [23] that acquires positional information and acceleration information from a user?s smart- phone, performs behavior estimation, and shares atmospheric information such as CO2 concentration. In addition to this, the use of sensor data-like provision of air pollution maps [15] created by collecting environmental information and noise maps [13], [14] created by collecting noise information, which are obtained from small-sized highly functionalized sensor devices such as smartphones, is being promoted.

However, in these systems, when acquiring data from users, they are fixedly collected without considering the provider?s data provisioning policy. Moreover, to respond to various user demands, acquisition of data is performed with high frequency and high accuracy. Therefore, in addition to the possibility of providing unnecessary sensor data, there is a problem that the power consumption of the smartphone owned by the user increases. Also, with these systems, it is difficult for the provider to know the use of the data provided by the provider themselves. Therefore, there is a limit to the realization of an application that uses personal data with a higher level of privacy, such as continuous movement history, purchase history, usage history of public transportation, as well as positional information, and noise information.

B. Data Sharing Platform  To solve the problem raised in the previous section, research is being conducted on a data sharing platform that builds sensor-based applications on demand upon request from users and distributes only the necessary and sufficient data [16], [17], [24]. In the platform based on the participatory sensing model [16], [17], the data information that the user wishes to collect is registered as a task on the platform freely on its own. Other users who viewed this task information exchange sensor data via the platform; however, with these platforms, it is necessary to view the task information of others when data is provided, and the time and effort has increased compared with the use of a conventional sensor-based application that provides fixed data. It is important to motivate and encourage    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   users to provide data in participatory sensing. However, it is conceivable that the fact that discovery of the tasks that it can provide itself is manual, and the fact that changes in the data distribution setting due to the change in the environment or its own provisioning policy being manual is a great obstacle to providing motivation.

C. Challenges in Related Research  Conventional sensor data usage models include fixed and exclusive applications that acquire data [4], [5] and data stores [19]?[21], but service providers led them to collect and provide sensor data. For this reason, there is a risk of data distribution in which the policy of the owner of the sensor device is not sufficiently reflected, which may lead to unnecessary consumption of resources and disclosure of undesirable personal data. On the other hand, in a data sharing platform that shares data on-demand by request from other users [16], [17], [24], the user who is the data provider leads and shares sensor data, and distribution of sensor data that reflects the policy of the owner is thus made possible.

However, it is troublesome to find a task that matches the policy and to follow changes in policies and environments; consequently, there is a risk that the data provision itself from the user will not be performed. From the above, it can be said that the configuration model of the conventional sensor-based application has limitations on dynamic sensor data utilization which considers the provider?s policy.

In this research, we model the requests from consumers and policies of the providers, register them on the platform, and realize the distribution of data by automatic negotiation us- ing the Contract-oriented Information Flow Protocol between agents of users that hold these as knowledge. We summarize the problems in the existing research targeted by the proposed Contract-oriented Information Flow Protocol are organized as follows.

(P1) Distribution setting of sensor data according to the provider?s policy is difficult: Since data generated from sensor devices owned by users includes privacy-sensitive data such as personal data and because power consumption costs, etc., are incurred when acquiring the data itself, the distribution of data that considers the policy of the provider and privacy, etc., is necessary; however, with the data-sharing approach in existing research, it was necessary for the data provider to determine the quality of the data themselves, and to discover the requirements satisfying the policy. These increase the burden on the providers. For this reason, it is difficult to distribute sensor data based on the provider?s policy, which provides sensor data by limiting the scope of disclosure and usage to the provider without imposing a burden on the provider.

(P2) It is difficult to dynamically control the service according to changes in the provider?s policy: In the service realized by distributing the sensor data based on the policy of the provider, it is necessary to control the distribution of sensor data in a flexible manner according to changes in the policy of the provider; however, since the quality of service to be provided changes by changing the distribution of data,  Transport Layer Transport LayerSensor Network  Overlay Layer Overlay Layer  Application Layer  Overlay Network  Agent Network  User  MGR  register sensor provide  service  GPS  TemperatureSensor App  Application Layer  Contract  construct app.

change policy  User  Provider  Consumer  Contract-oriented Service  Configuration Model  Contract-oriented  Information Flow Protocol  Fig. 2. Outline of the Contract-Oriented Sensor-based Application Platform (COSAP).

it is necessary to control it while taking into consideration the balance with the user?s request. However, with the approach for service construction in the existing research, since we use fixed and exclusively acquired sensor data, either the data provider is not considered for the control of the service, or it is necessary for the provider to manually reflect the policy themselves. For this reason, it is difficult for the existing technology to dynamically control the service according to changes in the provider?s policy.



III. CONTRACT-ORIENTED SENSOR-BASED APPLICATION PLATFORM  A. Outline of the Proposed Platform  Figure 2 shows an outline of the Contract-Oriented Sensor- based Application Platform (COSAP). COSAP adopts a server-less architecture and operates on a user?s sensor device that is connected by an arbitrary sensor network. Users can directly communicate each other using the functions of the transport layer, and the overlay layer can reach the target device through geographical range search, etc., by using the functions of the structured P2P network proposed in our previous publications [25], [26]. On the agent network infras- tructure in the application layer, contractual relationships are established among users based on the contract-oriented service configuration model, thereby realizing the distribution of data and dynamically constructing sensor-based applications. As the provider of sensor data, the users register the sensor devices that they own and change the policy for providing sensor data generated from the devices. Furthermore, as a consumer of the application, they dynamically construct an application that collects sensor data from registered devices.

The following are the four types of configuration compo- nents on the COSAP;  User: Converts the request from the user into a format that other components can understand.

MGR: Manages the Sensor and App components dynam- ically generated according to requests from users, and manages the contracts they conclude.

Sensor: Functions as a sensor device registered by the user.

Based on the policy for provision that has been set, contract(s)    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   with other user?s components are bound, and sensor data is provided based on the condition of the contract.

App: Functions as an application built by the user. Based on the set consumer?s request, this concludes the contract with other user?s components and acquires, processes, and presents sensor data distributed based on the condition of the contract.

B. Contract-oriented Service Configuration Model  In this platform, it needs a flexible and highly coordinated model among components such as sensor devices, sensor networks, and applications. Therefore, we define a contract- oriented service configuration model that realizes applications by capturing and organizing the interaction between compo- nents as a relationship based on the contractual concept and controls the distribution of sensor data. The application in this model consists of three components: Sender, which is the provider of the data; Receiver, which is the consumer of the data; and Manager, which monitors both. There is only one Receiver per application, but there can be multiple Senders and Managers. Distribution of data is performed from the Sender to the Receiver, and the frequency and usage are determined based on the agreement concluded beforehand among the constituent components.

We propose the following protocol as the Contract-oriented Information Flow Protocol (CIFP) for contract management among constituent elements.

Contract Signing Protocol: A basic protocol for conclud- ing a contract between components that control the distribution of data based on the policy of providing sensor data and the relationship with users. At the time of contract negotiation, it is decided whether or not the protocol is established based on both the Sender and Receiver?s policies, as well as the relationship between the two. Application of this protocol realizes flexible sensor data distribution according to the provision policy and solves the problem (P1).

Contract Management Protocol: Protocol for making changes to contract conditions according to provision policy, consumer?s request, changes in network environment, etc. The type of changes to the contract conditions include modifi- cations to amend the conditions of contracts with the same partner, re-agreement to renew a contract with a different partner, and cancellation that stops the discarding of data distribution by discarding the contract. Application of this protocol realizes dynamic control of the function and quality of service according to changes in the provision policy and consumer?s request, and solves the problem (P2).

C. Assumed Environment  In this research, the following user environment is assumed.

? As a provider of sensor data, the user registers arbitrary  ones owned by the user in good faith ? From the viewpoint of the provider?s privacy policy and  the allowable power consumption, the registered sensor will have the disclosure range, disclosure limit, transfer permission, and frequency of provision set as the provi- sion policy.

TABLE I DEFINITION OF USER?S POLICY  Policy : Policy  Scope : Permission of the form of data distribution route.

PUBLIC, PROTECTED, and PRIVATE can be se- lected.

Frequency : Frequency of transmitting data. HIGH, MIDDLE, and LOW can be selected.

Area : Geographical area where data can flow. The area is circular expressed by Center and Range.

? As a user of the application, the user dynamically builds a sensor-based application that collects sensor data in real time in an arbitrary space and frequency  ? In the application, sensor data is distributed as raw data, and distribution of processed data is not performed  As an example of a specific sensor-based application con- figured in the above environment, the following applications are assumed.

Weather monitoring system: Dynamically discovers envi- ronmental sensors such as temperature, illuminance, humidity, and rainfall around the target area, then collects sensor data and displays it in real time. Compared to conventional weather monitoring systems, it is expected that detailed weather data can be obtained for the point that fits the user?s requirements.

Health management system: Changes frequency and pa- rameters of sensor data collected from biometric sensors such as heartbeat / blood pressure sensors and others according to the health condition of the observed person and displays them in real time. Compared to the conventional health management system, since it is possible to control the distribution of unnec- essary sensor data, it is expected that the power consumption of the biosensor can be suppressed.

Multimedia streaming system: Shares multimedia data among devices, limited to specific areas such as sports venues and live venues, and displays in real time. Compared to conventional multimedia streaming systems, it is not necessary to install infrastructure, and transmission by D2D communi- cation makes it possible to expect improvement of Quality of Experience (QoE).

Tourist information sharing system: Shares information about places, limited to specific areas such as sightseeing spots, and shares it with on-site users. Compared to informa- tion sharing systems that use conventional Social Networking Services (SNS), etc., improvement in convenience can be expected because selection of related information is triggered by the user being in the position itself.



IV. CONTRACT-ORIENTED INFORMATION FLOW PROTOCOL  A. Modeling Component Elements  For the user environment mentioned in Section III-C, we model each component to express the requirements of both providers and consumers.

1) Policy: Attributes of the policy (Policy) in this service composition model is defined in TABLE I. However, each    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   TABLE II DEFINITION OF SENDER AND RECEIVER  Sender/Receiver : Provider/Consumer  ID : Identifier of users.

DataType : (Sender) Data type that the Sender can provide.

(Receiver) Data type that the Receiver wants to obtain.

Location : The user?s location.

Policy : (Sender) Provider?s policy. (Receiver) Con-  sumer?s request.

WhiteList : (Sender only) Receivers the Sender allows to  provide its data.

TABLE III DEFINITION OF SENDER?S POLICY AND RECEIVER?S POLICY  Sender.Policy : Provider?s policy  Scope.PUBLIC : allows free provision.

Scope.PROTECTED : allows free provision after authorisation.

Scope.PRIVATE : denies any provision.

Frequency : Maximum frequency of data provision.

Area : Authorized area where the Sender?s data can  be received.

(a) Sender?s Policy  Receiver.Policy : Consumer?s request  Scope.PUBLIC : utilizes and transfers received data freely.

Scope.PROTECTED : utilizes received data freely and transfers  them in succession to the sender?s policy.

Scope.PRIVATE : utilizes received data freely but does not  transfer.

Frequency : Minimum frequency of data receiving.

Area : Geographical are where objective data gener-  ated.

(b) Receiver?s Policy  TABLE IV DEFINITION OF CONTRACT  Contract : Contract  ID : Identifier of contracts.

DataType : Data type that shared during the contract.

Receiver : Consumer id.

Sender : Provider id.

SourceSender : Owner id of the shared data.

Condition : Condition of the contract.

element of Scope and Frequency shall have the following relation.

Scope.PUBLIC ? Scope.PROTECTED ? Scope.PRIVATE Frequency.HIGH ? Frequency.MIDDLE ? Frequency.LOW  2) User: The attributes of the data provider (Sender) and consumer (Receiver) in this service composition model are defined in TABLE II, and the meaning of each element in both policies is defined in TABLE III.

3) Contract: The form of the contract (Contract) in this service composition model is defined below.

Direct contract: a contract that a provider (Sender) and a consumer (Receiver) directly negotiated and are connected  TABLE V DEFINITION OF POLICY CONDITION  Contract.Condition : Condition of the contract  Scope.PUBLIC : allows multi-stage contract.

Scope.PROTECTED : allows multi-stage contract after authorisation.

Scope.PRIVATE : allows just direct contract.

Frequency : Frequency of transmitting data.

Area : Geographical area where receivers are.

TABLE VI DEFINITION OF SENSOR DATA  Value : Sensor Data  DataType : Type of the data.

Location : Place where the data generated.

Timestamp : Generated time.

SourceSender : Owner id of the data.

data : Value of the data.

TABLE VII DEFINITION OF MESSAGE  Message : Message  Tag : Type of the message.

Src : Sender id of the message.

Location : Location of the sender.

Payload : payload of the message.

by.

Multi-stage contract: a contract that a Receiver, who has  a direct contract, negotiates with another Receiver as a relay of data acquired in the contract. Let Sender, which is the source of sensor data, be the SourceSender of its multi- stage contract, and the contract that is closer to SourceSender shall be the superior contract. In addition, when one Contract is used as a standard, a contract higher than that shall be declared as a RelayContract.

The attributes of Contract are defined in TABLE IV, and the elements in the conditions of the contract are defined in TABLE V. In case of a direct contract, Contract.SourceSender = Contract.Sender shall be es- tablished. In addition, contracts that satisfy the following conditions are defined as duplicate contracts. The existence of duplicate contracts means that the same sensor data is distributed through multiple routes.

contractA.Receiver = contractB.Receiver  contractA.SourceSender = contractB.SourceSender  4) Sensor Data: Attributes of sensor data (Value) in this service configuration model are defined in TABLE VI.

5) Message: The attributes of the message (Message) exchanged between the component elements in this service composition model are defined in TABLE VII.

B. Design  Design the Contract-oriented Information Flow Protocol exchanged between the component elements to manage the contract designed in Section IV-A. In this paper, we assume all users are polite and we do not consider mechanisms for    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   Receiver Sender(s)  TASK_ANNOUNCE bid considerationBID  winner selection AWARD ACK  SEND_DATA sending data  receiving data  for each interval  REQUEST_SEND contract registration  contract registration  negotiation opening  Fig. 3. Sequence chart of the contract signing protocol.

detecting malicious users in order to simplify the sequence of our protocols.

1) Contract Signing Protocol: The Contract signing proto- col defines the flow of concluding contracts between Sender and Receiver. Figure. 3 shows a sequence chart of the contract signing protocol.

Contract signing protocol presents Receiver.Policy to surrounding Sender(s) and asks whether to conclude a contract (TASK_ANNOUNCE). The Sender(s) to be presented are only the Sender in question if known, otherwise all Senders in Receiver.Policy.Area are presented. At this time, the geographic range search is realized by the function of the overlay layer. Sender(s) makes the following comparisons between the Receiver.Policy included in the received message and its own Sender.Policy and judges whether or not it is possible to conclude a contract.

Determine whether the Receiver meets the requirements of the Sender:  Receiver.Policy.Scope ? Sender.Policy.Scope Receiver.Policy.Frequency ? Sender.Policy.Frequency Receiver.Location ? Sender.Policy.Area Sender.WhiteList 6= ? ? Receiver ? Sender.WhiteList  When concluding direct contract, determine whether Sender meets the requirements of the Receiver:  Sender.DataType = Receiver.DataType  Sender.Location ? Receiver.Policy.Area When concluding a multi-stage contract, determine if multi- stage contract is possible:  RelayContract.Condition.Scope 6= Scope.PRIVATE Sender.Policy.Area ? RelayContract.Condition.Area  When concluding a multi-stage contract, execute the above judgment for the RelayContract as well:  Receiver.Policy.Scope  ? RelayContract.Condition.Scope Receiver.Policy.Frequency  ? RelayContract.Condition.Frequency Receiver.Location ? RelayContract.Condition.Area RelayContract.DataType = Receiver.DataType  RelayContract.SourceSender.Location  ? Receiver.Policy.Area  When all of the above conditions are satisfied, the Sender judges that it is possible to conclude a contract and creates a contract to bid to the Receiver according to the following:  Contract.ID? generateId() Contract.DataType? Sender.DataType Contract.Receiver? Receiver Contract.Sender? Sender Contract.Condition.Scope? Sender.Policy.Scope Contract.Condition.Frequency  ? Receiver.Policy.Frequency Contract.Condition.Area? Sender.Policy.Area  if the bid is a direct contract: Contract.SourceSender? Sender  if the bid is a multi-stage contract: Contract.SourceSender? RelayContract.SourceSender  As a result, the following relation holds for arbitrary contracts, as well as for superior contractA and inferior contractB in arbitrary multi-stage contracts.

contract.SourceSender.Policy ? contract.Sender.Policy ? contract.Receiver.Policy  contractA.Condition ? contractB.Condition  With respect to the contract for bidding, in situations where Contract.Condition.Scope = Scope.PROTECTED, notify SourceSender and receive authentication. SourceSender authenticates the user based on SourceSender.Policy and SourceSender.WhiteList and reports the result as shared group information. At this time, a Contract which cannot receive authentication from SourceSender is excluded from the bid candidates.

Also, if there are multiple bid candidates when authentica- tion from the SourceSender is received, duplicate contracts are detected and contracts other than those with the best distribution conditions are removed from the bid candidates.

Thereafter, the remaining bid candidate is notified to the Receiver as a BID.

The Receiver that received the BID aggregates the BIDs collected from multiple Senders and likewise excludes the contracts other than the contract having the best distribution condition from the contract candidates when duplicate con- tracts are detected. A contract relationship is concluded with respect to the contract candidate that remains until the end, and the Sender is notified accordingly (AWARD). After that, registration of contract conditions is done for the Manager, and a request for data transmission is reported (REQUEST_SEND).

Upon receiving the request, the Sender starts providing sensor data to the Receiver at a cycle based on the registered contract conditions (SEND_DATA).

2) Contract Management Protocol: The Contract Manage- ment Protocol defines the flow of detecting the necessity for amending the condition of contracts that have been concluded, and making the actual changes. Figure. 4 shows a sequence chart at the time of monitoring in Contract Management Protocol.

2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   Manager Sender/Receiver  REQ_POLICY  execution of the Contract Management Protocol <modify> & <re-contract>  for each invalid contract  REP_POLICY  detection of duplicated contracts  for each invalid contract  execution of the Contract Management Protocol <cancel>  for each interval  response of current policy  (a) Sequence chart of Manager?s monitoring  Manager Receiver  execution of the Contract Management Protocol <modify> & <re-contract> & <cancel>  for each invalid contract  TARP  for each receiving monitoring of quality of received data  (b) Sequence chart of Receiver?s monitoring  Fig. 4. Sequence chart of monitoring before the contract management protocol.

In the monitoring of contract performance by the Man- ager as shown in Fig. 4(a), the Manager monitors the performance condition of the contract at regular intervals.

First, the Manager inquires the Sender (or Receiver) that has concluded the Contract registered to itself about the current policy (REQ_POLICY). The Manager compares the policy based on the response (REP_POILICY) and the regis- tered Contract.Condition in the following manner, and judges the necessity for amending the contract condition.

If Receiver to be monitored, detect violation of contractual terms:  Receiver.Policy.Scope ? Contract.Condition.Scope ? modify ? TRUE  Receiver.Policy.Frequency  6= Contract.Condition.Frequency ? modify ? TRUE  Receiver.Location /? Contract.Condition.Area ? modify ? TRUE  If Sender to be monitored, detect violation of contractual terms:  Sender.Policy.Scope 6= Contract.Condition.Scope ? modify ? TRUE  Sender.Policy.Frequency  ? Contract.Condition.Frequency  ? modify ? TRUE Sender.Policy.Area 6= Contract.Condition.Area  ? modify ? TRUE Sender.WhiteList 6= ?  ?Contract.Receiver /? Sender.WhiteList ? cancel ? TRUE  When Sender is monitored and a multi-stage contract is being concluded, detect violation associated with RelayContract:  Contract.SourceSender 6= Contract.Sender ?RelayContract = NULL  ? cancel ? TRUE RelayContract.Condition.Scope = Scope.PRIVATE  ? cancel ? TRUE Sender.Policy.Area ? RelayContract.Condition.Area  ? cancel ? TRUE  On the other hand, with respect to the monitoring of the contract performance by the Receiver as shown in Fig. 4(b), each time sensor data based on the contract is received, the following comparison is made to judge the necessity for amending the conditions of the contract.

Value.DataType 6= Contract.DataType? modify ? TRUE Value.Location /? Receiver.Policy.Area  ? modify ? TRUE Value.TimestamplastValue.Timestamp  > Contract.Condition.Frequency ? 2 ? modify ? TRUE  Value.SourceSender 6= Contract.SourceSender ? modify ? TRUE  recvTime? lastRecvTime > Contract.Condition.Frequency ? 2  ? modify ? TRUE Message.src 6= Contract.Sender  ? modify ? TRUE Message.Location /? Receiver.Policy.Area  ? modify ? TRUE  Note that recvTime is the time when the message was received, lastRecvTime is the message time immediately before is received, and lastValue is the sensor data ac- quired immediately before.

After determining the necessity of changing the contract conditions, the Manager decides the procedure to amend the contract conditions according to Fig. 5. Figure. 6 shows a sequence chart of modification, re-contract, and cancellation.

When a multi-stage contract is canceled as in Figure. 6(c), the Receiver requests a direct contract with SourceSender through the Contract signing protocol. By doing this, even if all multi- stage contracts are canceled due to policy change, etc., of data relayers, it becomes possible to take over the contract with SourceSender again.

After completing the amendments to the condition of a contract, the Manager detects duplicate contracts against the updated contract and eliminates other contracts, leaving only the contract with the best condition    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   false  start  cancel?

end  modify?

execution of  <modify> procedure false  true  true  true  true  false  false  if target is Sendersucceeded?

succeeded?

execution of <re-contract> procedure  execution of <cancel> procedure  Fig. 5. Flow chart of decision making.



V. EXPERIMENTS  A. Experiment 1: Experiment to confirm operation  1) Overview: In Experiment 1, to confirm the effective- ness of COSAP and CIFP, data is distributed among users with various policies, and we confirm to see whether they are correctly controlled by fluctuations in the environment (addition / deletion of users, policy change). Figure. 7 shows the assumed environment. In the assumed environment, there are nine users (Peer 1 to Peer 9), and they reside in each of the three areas, Area A, Area B, and Area C. Each Peer has sensors that collect two kinds of sensor data in its own device (Sensor 101, Sensor 102, ? ? ? , Sensor 901, Sensor 902), and each user sets their own policy. At this time, some users (Peer 1 to Peer 3) limit the provision range to the area where they are in to suppress the power consumption of their own sensors. Peer 7 also limits the provision of sensor data to users who are acquaintances (Peer 1, Peer 2, Peer 3, Peer 6) for privacy protection.

The scenario employed was as follows.

1) Peer 1 to Peer 7 register two sensors each, for 14 sensors in total (Sensor 101 to Sensor 702)  2) Peer 1 to Peer 7 construct the applications (App 101 to App 701)  3) Each application is used for 30 seconds (Environment 1) 4) The following changes are executed for the environment  ? Scope of Sensor 301 is changed to PRIVATE ? Scope of Sensor 401 is changed to PUBLIC ? Frequency of provision of Sensor 501 is reduced to MIDDLE  ? Frequency of provision of Sensor 601 is reduced to MIDDLE  ? Peer 7 releases the registration of two sensors (Sen- sor 701, Sensor 702)  ? Peer 8 newly registers two sensors to Area A (Sensor 801, Sensor 802)  ? Peer 9 newly registers two sensors to Area B (Sensor 901, 9ensor 902)  5) Each application is used for 30 seconds (Environment 2)  Manager Sender/Receiver  REQUEST_ MODIFICATION  check modification request  Sender/Receiver  REQ_MODIFY  consider to modify update contract information  REP_MODIFY  update contract information  contract  (a) ?modify?  Manager Receiver  REQUEST_ RE_CONTRACT  check re-contract request  Sender  execute Contract Management  Protocol <cancel>  contract  execute Contract Signing Protocol  (b) ?re-contract?  Manager Sender/Receiver  REQUEST_CANCEL  Sender/Receiver  CANCELATION_OFFER  check cancel request delete contract information  check cancel request delete contract information  if Receiver & RelayContract execute Contract Signing Protocol  if Receiver & RelayContract execute Contract Signing Protocol  (c) ?cancel?  Fig. 6. Sequence chart of the contract management protocol.

The parameters set for the experiment were as follows.

Frequency.HIGH = 1000(ms) Frequency.MIDDLE = 2000(ms) Frequency.LOW = 4000(ms) ? = 0.5  Here, the parameter ? is a ratio for selecting a multi-stage contract where direct contracts and multistage contracts with    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   Sensor101/102 PUBLIC HIGH  Area A  Sensor Scope Frequency Area  App101/102 PRTOECTD  HIGH Area B  App Scope Frequency Area  Peer1 Sensor201/702  PUBLIC HIGH Area B  App201/202 PUBLIC HIGH  Area C  Peer2 Sensor301/302  PUBLIC HIGH  Area C  App301/302 PROTECTED  LOW Area A  Peer3  Sensor401/402 PRIVATE  HIGH Area A, B, C  App401/402 PRIVATE  LOW Area B  Peer4 Sensor501/502  PUBLIC HIGH  Area A, B, C  App501/502 PUBLIC MIDDLE  Area A, B, C  Peer5 Sensor601/602  PUBLIC HIGH  Area A, B, C  App601/602 PROTECTED  MIDDLE Area A  Peer6  Sensor701/702 PROTECTED  HIGH (No area)  App701/702 PRIVATE MIDDLE Area A  Peer7 Sensor801/802  PUBLIC HIGH  Area A, B, C  Peer8 Sensor901/902  PUBLIC HIGH  Area A, B, C  Peer9  Area A Area B  Area C  Peer1 Peer2  Peer9Peer8  Peer4  Peer7  Peer3  Peer6 Peer5  Fig. 7. Assumed environment of experiment 1.

TABLE VIII RESULT OF EXPERIMENT 1 (ENVIRONMENT 1)  Contract chain Contract chain  Sensor101-App601 Sensor102-App602 Sensor101-App701 Sensor102-App702 Sensor201-App401 Sensor202-App402 Sensor201-App501 Sensor202-App502 Sensor301-App501 Sensor302-App502 Sensor401-App401 Sensor402-App402 Sensor401-App701 Sensor402-App702 Sensor501-App201-App101 Sensor502-App202-App102 Sensor501-App201-App401 Sensor502-App202-App402 Sensor501-App501 Sensor502-App502 Sensor601-App201 Sensor602-App202-App502 Sensor601-App301 Sensor602-App302 Sensor601-App501 Sensor602-App602 Sensor601-App601 Sensor602-App702 Sensor601-App701 Sensor702-App102-App302 Sensor701-App101-App301 Sensor702-App102-App602 Sensor701-App101-App601  the same distribution conditions exist at the time of selecting a contract with the best distribution condition from the collected BID in the basic contract protocol. In other words, if ? = 0.0, all the contracts are direct contracts, and if ? = 1.0, a multi- stage contract is bound where possible.

In this experiment, evaluation is carried out based on contracts concluded in each environment. Experiments 2 and 3 respectively analyze the distribution of messages and elapsed time at the time of concluding a contract and at the time of amending the contract conditions. Also, for the names of Sensor and App, the first digit of the numerical value of each component shall represent DataType.

TABLE IX RESULT OF EXPERIMENT 1 (ENVIRONMENT 2)  Contract chain Contract chain  Sensor101-App601 Sensor102-App602 Sensor101-App701 Sensor102-App702 Sensor201-App401 Sensor202-App402 Sensor201-App501 Sensor202-App502 Sensor401-App101 Sensor302-App502 Sensor401-App301 Sensor402-App402 Sensor401-App401 Sensor402-App702 Sensor401-App501 Sensor502-App202-App102 Sensor401-App601 Sensor502-App202-App402 Sensor401-App701 Sensor502-App502 Sensor501-App401 Sensor602-App202-App502 Sensor501-App501 Sensor602-App302 Sensor601-App301 Sensor602-App602 Sensor601-App501 Sensor602-App702 Sensor601-App601 Sensor802-App302 Sensor601-App701 Sensor802-App502 Sensor801-App301 Sensor802-App602 Sensor801-App501 Sensor802-App702 Sensor801-App601 Sensor902-App102 Sensor801-App701 Sensor902-App402 Sensor901-App101 Sensor902-App502 Sensor901-App401 Sensor901-App501  2) Experimental Results: TABLE VIII and TABLE IX show the contracts concluded in each environment. In the table, components with contract relationships are connected with a hyphen; the left side is Sender, and the right side is Receiver.

From the tables, 38 contracts were concluded in Environ- ment 1 and 46 contracts in Environment 2. Also, each contract was concluded between the components with the same last digit (DataType are equal).

3) Discussion: Based on the result in Environment 1, Sensor 101 exists in Area A (Sensor101.Policy.Area = Area A), and a contract was correctly concluded be- tween App 601 and App 701 (App601.Policy.Area = Area A, App701.Policy.Area = Area A), which need the data from Area A. Furthermore, in the multi-stage agree- ment, in the contract between the Sensor 601 and the App 201, data is distributed every 1 second, which is the required frequency of App 201 (App201.Policy.Frequency = HIGH), and for the inferior contracts App 201 and App 501, data was distributed every 2 seconds, which is the required frequency of App 501 (App501.Policy.Frequency = MIDDLE). Similarly in all other contracts, we confirmed that matching was performed according to both policies, and contractual relationship was concluded, and distribution of data based on policy was started. Based on the above, it was possible to realize the distribution of sensor data according to the policy of the provider while satisfying the consumer?s request, by applying the contract signing protocol, which led to resolution of ?(P1) Setting of sensor data distribution in accordance with provider?s policy is difficult?.

Next, from the result in Environment 2, Sensor 301, whose Scope was changed to PRIVATE, confirmed that the contract with the App 501, whose Scope is PUBLIC, was canceled.

Also, Sensor 501 and Sensor 602, for which the Frequency    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   was reduced to MIDDLE, confirmed that the contract between App 101 and App 201 that had requested HIGH Frequency was canceled. Regarding other contracts, contract details were changed correctly according to policy changes. From the above, it was possible to flexibly control the distribution of the sensor data according to changes in the policy and environment of the provider, which led to resolution of ?(P2) Dynamic control of the service according to changes in the provider?s policy is difficult?.

B. Experiment 2: Experiment to evaluate the Contract signing protocol  1) Overview: Experiment 2 evaluates the load of each component and the quality of the distribution data due to the difference in the form of the contract. There are six users (Peer 1 to Peer 6), Peer 1 acts as a provider of sensor data, and Peer 2 to Peer 6 act as consumers of sensor data. Peer 1 provides one sensor (Sensor 101) and has provision policies {PUBLIC, HIGH, all areas}. Peer 2 to Peer 6 each build 20 applications and have common user requests {PUBLIC, HIGH, all areas} in all.

The scenarios used for evaluation are as follows.

1) Peer 1 registers one sensor (Sensor 101) 2) Peer 1 to Peer 6 construct 20 applications each (App 201  to App 220, ? ? ? , App 601 to App 620) 3) Each application is used for 30 seconds  As targets of comparison, distribution of data when ? = 0.0, 0.2, 0.4, 0.6, 0.8, 1.0 was analyzed, and contract signing protocol was evaluated using the following evaluation parameters.

Fairness Index (FI) [27] of the number of transmissions: This is a normalized index showing the degree of dispersion of load and is defined by the following equation. In addition, n represents the number of components, and xi represents the number of data transmissions of component i.

FI := ( ? xi)   n ? x2i  Reception Interval of Receive Data (RIRD): The interval between the times receiving contract data (SEND_DATA).

recvTime? lastRecvTime  Generation Interval of Received Data (GIRD): The interval between the times received data being generated.

Value.Timestamp? lastValue.Timestamp  Freshness of Received Data (FRD): The interval between the time the data was received and the time the data was generated. The larger this value, the more old data that has been distributed, signifying a decrease in freshness.

recvTime? Value.Timestamp  TABLE X RESULT OF EXPERIMENT 2  ? FI RIRD GIRD FRD(avg) (std) (avg) (std) (avg) (std)  1.0 0.321 1000.012 4.968 1000.223 29.695 1637.236 23.688 0.8 0.160 999.982 4.776 1000.680 43.470 1386.210 27.277 0.6 0.080 1000.013 4.561 1001.572 42.219 687.266 27.431 0.4 0.031 999.938 5.405 999.947 5.189 247.690 2.359 0.2 0.016 999.975 5.222 1000.012 4.973 0.062 0.267 0.0 0.010 1000.039 4.559 1000.051 4.432 0.040 0.161      4106 4079   1 2 3 4 5 6 7 8 9 10  averaged FRD (ms)  stage  Fig. 8. Average of FRD for each contract stage (? = 1.0).

In this experiment, Contract Management Protocol was set to OFF, and the following parameters were set.

Frequency.HIGH = 1000(ms) Frequency.MIDDLE = 2000(ms) Frequency.LOW = 4000(ms) ? = 0.5  2) Experimental Results: The experimental results are shown in TABLE X. From the table, FI increased as the multi-stage contract was given priority, that is, as ? increased.

Meanwhile, at the same time, decrease in freshness (average), generation interval (standard deviation), and increase in fresh- ness (standard deviation) were confirmed.

3) Discussion: Because FI increased with the prioritization of a multi-stage contract, the cost of communication necessary for data distribution could be distributed among the compo- nents by introducing a multi-stage contract. For this reason, we confirmed that the concept of a multi-stage contract is effective not only for sensor data but also for extending usage of public data, such as distributing image data, which is heavy, between components.

On the other hand, freshness decreased as the multi-stage contract was given priority. This is due to the fact that old data is being transferred as the number of multi-stage contracts increases. Figure. 8 shows the average of freshness for each contract stage at ? = 1.0. From the figure, the freshness of the data obtained by the first-stage Receiver who receives data directly from the Sender is 0, but the freshness value also increases as the number of stages increases. As a cause of this, one can raise the fact that since the component, which is a relay node of data, is not synchronized with the timing of receiving data with the preceding contract and the timing of sending data with the contract of the subsequent stage, accu-    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   TABLE XI NUMBER OF ERRONEOUS TRANSMISSIONS FOR EACH CONTRACT STAGE  Stage 1 2 3 4 5 6 7 8 9 10  Error 0 3 16 3 0 0 0 0 0 -  mulating a delay equivalent to the same amount of deviation between the two steps. Since the accumulated delay depends on the timing of concluding a contract, there are differences depending on the components. However, the maximum value of delay accumulated per stage is approximately 1,000 ms, which is the data transmission frequency.

In addition, the standard deviation of the generation interval and the standard deviation of the frequency increased as the multi-stage contract was prioritized. This is due to the fact that the data relayer mistakenly transmits the same data as the data previously transmitted when transferring the data.

TABLE XI shows the number of erroneous transmissions of the same data for each contract stage at ? = 1.0. From the table, it can be seen that erroneous data transmission was performed regardless of the number of contracted stages. As a cause of this, as described above, since the timing of the transmission and reception of the data relaying component is not synchronized, in the case where the timing is very close, before new data is received in the preceding contract, new data may be transmitted by the subsequent contract.

Based on the above results, a multi-stage agreement based on the Contract Signing Protocol is useful from the viewpoint of load balancing, but depending on the timing of data transmission, the transfer data may be become out-of-date, or the erroneous transmission of the same data may become more likely. As a solution to these problems, since the cause of both issues is the transmission timing of the multi-stage agreement, when data transmission is started by concluding a multi- stage agreement (at reception of SEND_DATA in Fig. 3), it is conceivable that it is effective to start the distribution of sensor data according to the reception timing in the RelayContract, which is the superior contract.

C. Experiment 3: Evaluation study of Contract Management Protocol  1) Overview: Here, we evaluate the time it takes to com- plete the amendment of contract conditions and the number of contracts to be concluded due to the difference in the means of amending the contract conditions. There are six users (Peer 1 to Peer 6), whereby Peer 1 acts as a provider of sensor data, and Peer 2 to Peer 6 act as consumers of sensor data. There are two sensors provided by Peer 1 (Sensor 101, Sensor 102); Sensor 101 has a provision policy {PUBLIC, MIDDLE, all areas}, and the Sensor 102 has a provision policy {PUBLIC, LOW, all areas}. Peer 2 to Peer 6 each build 10 applications and have common user requests {PUBLIC, MIDDLE, all areas} in all.

The following scenarios were used for evaluation.

1) Peer 1 registers 2 sensors (Sensor 101, Sensor 102) 2) Peer 2 to Peer 6 each constructs 10 applications  (App 201 to App 210, ? ? ? , App 601 to App 610)  TABLE XII RESULT OF EXPERIMENT 3 (CASE A)  NCC TDPC (ms) TECA (ms) NPV  50?50 1079.788 52.970 9 50?50 1246.719 164.344 14 50?50 1084.324 91.559 9 50?50 1053.000 84.606 11 50?50 1201.433 109.833 11  3) Each application is used for 30 seconds (Environment 1) 4) The following are implemented  ? Policy frequency of Sensor 102 is changed from LOW to HIGH  ? Policy frequency of App 201 to App 310 is changed from MIDDLE to LOW  ? Policy frequency of App 401 to App 610 is changed from MIDDLE to HIGH  5) Each application is used for 30 seconds (Environment 2) The following case is assumed as a target for comparison.

Case A: Execute ?modify?, ?re-contract?, and ?cancel? as a  means of amending contract conditions.

Case B: Execute ?modify? and ?cancel? as a means of  amending contract conditions.

Case C: Execute ?cancel? as a means of amending contract  conditions.

After executing the scenario for each of the above cases,  the Contract Management Protocol was evaluated according to the following parameters.

Number of Contracts Concluded (NCC): Number of contracts concluded after amending contract conditions.

Time taken to Detect Policy Change (TDPC): The time from amendment of policy to the start of amendment to contract conditions. Measure the time from when the com- ponent receives the SET_POLICY message until time when REQUEST_MODIFICATION, REQUEST_RE_CONTRACT, or REQUEST_CANCEL message is received for the first time.

Time taken to Execute Contract Amendment (TECA): the time from the start of amendment of contract conditions to the end the amendment process. Measure the time from when a component first receives a REQUEST_MODIFICATION, REQUEST_RE_CONTRACT, or REQUEST_CANCEL message until the completion of those sequences.

Number of Policy Violations (NPV): Number of data distributed based on old policy information.

Parameters set for the experiment are as follows.

Frequency.HIGH = 1000(ms) Frequency.MIDDLE = 2000(ms) Frequency.LOW = 4000(ms) ? = 0.5  interval of MGR?s observation := 2000(ms)  2) Experimental Results: TABLE XII, TABLE XIII, and TABLE XIV show the experimental results when each case was attempted five times.

Regarding Case A, the number of contracts concluded re- mained unchanged before and after the environmental change    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   TABLE XIII RESULT OF EXPERIMENT 3 (CASE B)  NCC TDPC (ms) TECA (ms) NPV  50?29 1952.658 11.395 18 50?23 867.750 9.063 11 50?27 870.563 14.906 3 50?26 390.923 20.731 5 50?27 953.281 13.313 8  TABLE XIV RESULT OF EXPERIMENT 3 (CASE C)  NCC TDPC (ms) TECA (ms) NPV  50?05 856.886 7.429 5 50?02 762.595 16.297 4 50?04 1081.118 9.853 5 50?08 713.375 13.719 7 50?06 1272.108 14.568 8  TABLE XV RESULT OF EXPERIMENT 3  Case NCC TDPC (ms) TECA (ms) NPV  Case A 50?50 1130.784 100.043 10.8 Case B 50?26 1065.600 13.531 9.0 Case C 50?05 942.063 12.434 5.8  at 50 contracts, and the policy change detection time was approximately 1,000 ms. In addition, the time taken to execute contract amendment was 100 ms, about 1/10 of the policy change detection time, and the number of policy violations with the distributed data was about 10. Regarding Case B, the number of contracts concluded was about half after the change of environment, and the policy change detection time was about 1,000 ms on average, although it was somewhat varying.

The time taken to execute contract amendment was around 15 ms, and the number of policy violations with the distributed data was about 10. With regard to Case C, the number of contracts concluded decreased sharply after the change of environment to around 5, and the policy change detection time was about 1,000 ms on average, unchanged from the other cases. The time taken to execute contract amendment was around 15 ms, and the number of policy violations with distributed data was around 5.

3) Discussion: TABLE XV shows the average of each parameter for each case. Case A, which executes ?modify?, ?re-contract?, and ?cancel? as a means of amending contract conditions had the highest number of contracts concluded, and associated with this, it showed a tendency to increase the time taken to execute contract amendment. The policy change detection time is about 1,000 ms for each case, because it comes from the monitoring cycle (every 2,000 ms) of contract performance by MGR. In addition, it was found that the number of policy violations with distributed data was influenced by the length of policy change detection time, and was not greatly affected by the time taken to execute contract amendment (Fig. 9). Therefore, in an environment with a scale of 50 units like in this experiment, we can expect that   0 500 1000 1500 2000 2500  NP V  TDPC (ms) (a) Correlation between the time taken to detect policy change (TDPC) and the number of policy violation (NPV).

0 50 100 150 200  NP V  TECA (ms) (b) Correlation between the time taken to execute contract amendment (TECA) and the number of policy violation (NPV).

Fig. 9. Correlation with the number of policy violations.

BID 41%  SEND_DATA 37%  REP_POLICY 15%  OTHERS 7%  Fig. 10. Ratio of the transmission message volume of App 201 in Case A  policy violations will almost completely not happen during the amendment of contract conditions by making the value of Frequency.HIGH sufficiently larger than the time taken to execute contract amendment, at 0.1 seconds.

To eliminate the number of policy violations, it is effective to shorten the monitoring cycle by the MGR and reduce the policy change detection time, but the increase in traffic volume accompanying it is not a negligible amount. Figure. 10 shows the ratio of the transmission message volume of App 201 in Case A. As can be seen from the figure, even in this setting where the monitoring cycle of MGR was about the same as Frequency.MIDDLE, the amount of monitoring response message to MGR occupied 15% of the total. Therefore, it can be said that further increase in maintenance packets not directly related to data distribution is not preferable.

From the above results, the Contract Management Proto- col, which executes ?modify?, ?re-contract?, and ?cancel?, is    2169-3536 (c) 2016 IEEE. Translations and content mining are permitted for academic research only. Personal use is also permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2017.2696027, IEEE Access   effective for contract management, and it turned out that its execution time does not greatly affect the number of policy violations with distribution data. As a solution to reduce the number of policy violations, it would be effective to judge the transmission of the TRAP message to the MGR, which was conventionally judged every time the Receiver received the data, whenever each component amends its own policy, and minimize the time until MGR detects the policy change.



VI. CONCLUSION  In this paper, we aimed at realizing a software platform that dynamically builds applications that share sensor data based on the policy of providers, targeting sensor-based applications based on participatory sensing paradigm. To realize this objec- tive, we have worked on the realization of dynamic sensor data utilization, taking into account the provider?s policy, which was difficult with the conventional sensor-based application configuration model. Specifically, we proposed a Contract- Oriented Sensor-based Application Platform based on a service configuration model that does not install servers or clouds.

We also designed and implemented the Contract-oriented Information Flow Protocol used for negotiations among users, and demonstrated that it is possible to realize the distribution of sensor data according to the policy of the provider through simulation experiments.

In this research, we automate the data distribution path reflecting the policy and reduce the burden on the data provider to prevent the phenomenon of motivation for data provision.

On the other hand, there are many studies that directly give incentives to data providers by applying auction theory and mechanism design theory. Therefore, in the future, it will be necessary to advance the system design such that the provider receives some benefit by negotiating and actively providing their own data.

