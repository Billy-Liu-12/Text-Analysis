Correlation and Contrast Link Formation Patterns in a Time Evolving Graph

Abstract?A time evolving graph is becoming increasingly abundant in a wide variety of application domains. While several classes of advanced frequent patterns in time evolving graphs are proposed, in this paper, correlation and contrast patterns on link formations are developed, which can be regarded as nontrivial upgrades of corresponding patterns in itemset mining into the graph domain. More concretely, hyperclique patterns and conditional contrast patterns are adopted to develop new correlation and contrast link formation patterns, respectively. In addition, another novel correlation pattern is derived by the analogy of conditional contrast patterns. Discovery of sets of link formation patterns having opposite characteristics, i.e. correlation and contrast, can ex- pect to obtain deep understanding of target dataset which in turn brings new findings. To discover correlation and contrast patterns efficiently, a series of algorithms is developed by using conventional methods in closed subgraph discovery, itemset mining and pseudo clique enumeration. Experiments using real world datasets confirm the effectiveness of the proposed framework.

Keywords-subgraph mining; time evolving graph; contrast patterns; correlation patterns

I. INTRODUCTION  Time evolving graphs [1], also known as dynamic graphs [2], have received much attention recently. They can capture evolution processes of relationships among entities in a graph naturally and precisely from the dynamic and temporal aspects. Social networks and daily communication networks are typical and suitable examples which can be represented in time evolving graphs. An illustrative example of time evolving graph G1 is shown in Figure 1. In the figure, the numbers associated with vertices denote vertex IDs while the numbers of edges indicate the timestamps when the edges are observed.

In this paper, among various data mining problems in time evolving graphs, we discuss frequent pattern discovery on link formation as well as correlation and contrast of link formations. While formal definition will be given later, a pair of condition and result with the consideration of timestamps is employed as a link formation pattern where the condition is a subgraph and the result is an extra edge. The patterns are interpreted as that, after a subgraph is observed, an extra edge is added to the subgraph with high probability.

In Figure 2, we show examples of link formation patterns found in G1. In the figure, b1 is a subgraph representing a  G1 C D  A BA  C D  A C  B D  A C     11 12  4 5 6 7  13 1514  1 0   3 4 5   5 22 3 4 6  1 2 4 6     B  C D     0 1   1G1 C D  A BA  C D  A C  B D  A C     11 12  4 5 6 7  13 1514  1 0   3 4 5   5 22 3 4 6  1 2 4 6     B  C D     0 1   1C D  A BA  C D  A C  B D  A C     11 12  4 5 6 7  13 1514  1 0   3 4 5   5 22 3 4 6  1 2 4 6     B  C D     0 1    Figure 1. A time evolving graph G1  B D  A C  B D  A CA  B D  A C C  B D  A C  B D  A C  ?.

E1 E2 E3b1 E4  , , ,  B D  A C  B D  A C  B D  A CA  B D  A CA  B D  A C C  B D  A C C  B D  A C  B D  A C  B D  A C  B D  A C  ?.

E1 E2 E3b1 E4  , , ,  Figure 2. Examples of link formation patterns in G1  condition and each Ei is a resulting subgraph having an extra edge (and a new vertex) denoted in thick lines. In Figure 3, the edges of each appearance of b1 and E1, denoted by pairs of vertex IDs, are aligned according to their timestamps where s and e denote first and last timestamps of edges in b1, respectively. From the figure, we can confirm that three of the five appearances of b1, i.e. #2, #3 and #5, are extended to E1 after the observation of b1.

Besides individual patterns on link formation, we can observe interesting relationships among link formations in G1. For example, every appearances of b1 extendable to E1 are also extendable to E2. Thus, we can consider E1 and E2 are correlated from the viewpoint of link formation.

On the other hand, E3 and E4 are regarded as contrast since a set of appearances extendable to E3 (#1 and #2) and that of extendable to E4 (#3 and #4) are mutually different.

Correlation and contrast sets of link formation patterns must give great help in interpreting individual patterns and those relationships, since each pattern will give different view to other patterns in the same set. In addition, comparisons among sets of link formation patterns having the same condition but opposite characteristics, i.e. correlation and contrast, can expect to obtain deep understanding of target dataset as well as to bring new findings and precise insights.

Motivated by the above considerations, in this paper, correlation and contrast patterns on link formations in a time evolving graph are proposed. While we bring the concept   DOI 10.1109/ICDMW.2011.55     b1 E1 # s s+ 0 s+ 1 s+ 2 e e+ 1 e+ 2  #1 0 (0,1) (0,8) (1,9) (8,9) 2  #2 0 (2,10) (2,3)  (10,11) (3,11) 2 (2,11)  #3 2 (3,11) (11,12)  (3,4) (4,12) 3 (4,11)  #4 2 (5,13)  (5,6) (6,14)  (13,14) 4  #5 4 (6,14) (6,7) (7,15)  (14,15) 6 (6,15)  ? ?BP ? ? ?LP ?  Figure 3. Edge timestamps of the appearances of b1 and E1 in G1  of hyperclique patterns [3], [4] into the graph domain to obtain correlation patterns, conditional contrast patterns [5] derives new contrast link formation patterns. In addition, as a counterpart of conditional contrast patterns, conditional correlation patterns on link formation are proposed as novel correlation patterns in a time evolving graph.

The rest of this paper is organized as follows. In section II, after the introduction of formal definitions and notations, we propose data mining problems on the correlation and contrast patterns in a time evolving graph. Algorithms for the proposed problems are developed in section III. Ex- perimental results are reported in section IV. Finally, after describing related work in section V, we conclude the paper and mention future work in section VI.



II. PRELIMINARIES  In this section, we formalize our data mining problems by introducing notations and definitions.

A. Time Evolving Graphs and Link Formation Patterns  A time evolving graph G = (VG, EG, lG, tG) on a set of labels L and a set of timestamps T is an undirected labeled graph having edges with timestamps. It consists of a set of vertices VG, a set of edges Eg ? VG ? VG, a labeling function lG : VG ? EG ? L that assigns an alphabet in L to vertices and edges, and a timestamp function tG : EG ? T representing the time when edges are observed. For the simplicity, we assume that node and edges are only added and never deleted. Furthermore, we also assume that the labels of vertices and edges never change.

We introduce a series of graph patterns in a time evolving graph below. At that time, we assume a labeling function lp : Vp ? Ep ? L for a graph p where Vp and Ep are a set of vertices and edges in p, while we do not mention it explicitly for the simplicity of presentation.

A link formation pattern L = ?b, e? is a pair of a base pattern b and an extra edge e. As a base pattern, a connected  labeled simple subgraph b = (Vb, Eb) is employed where Vb is a set of vertices and Eb is a set of edges. An extra edge e = (x, y) ?? Eb corresponds to a new link connected to b, i.e. (x ? Vb ? y ? Vb). A link formation pattern represents that a new edge e is built after b is observed.

In other words, b is a condition to form a new edge e. We abbreviate link formation patterns and base patterns as LPs and BPs, respectively.

An embedding of LPs and BPs is defined with considera- tion of the timestamps. A BP b = (Vb, Eb) is said to occur in a time evolving graph G, if there exists an injective function ? : Vb ? Eb ? VG ? EG satisfying the conditions:  1) ?a ? Vb ? Eb [lb(a) = lG(?(a))], 2) ?(x, y) ? Eb [?((x, y)) = (?(x), ?(y))], and 3) max(T (?, b,G))?min(T (?, b,G)) ? ?BP  where ?BP (? 0) is a parameter for maximal time difference in b and T (?, b,G) = {tG(?(a)) | a ? Eb} is a set of timestamps of edges corresponding to Eb. We define ?BP (b) by a set of all functions satisfying the above conditions.

As similar, a LP L = ?b = (Vb, Eb), e = (x, y)? is said to occur in G, if there exists an injective function ? : Vq ?Eq ? VG?EG satisfying the following conditions for a graph pattern q = (Vq, Eq) = (Vb ? {x, y}, Eb ? {e}):  1) ?a ? Vq ? Eq [lq(a) = lG(?(a))], 2) ?(x, y) ? Eq [?((x, y)) = (?(x), ?(y))], 3) max(T (?, b,G))?min(T (?, b,G)) ? ?BP , and 4) 0 < tG(?(e))?max(T (?, b,G)) ? ?LP  where ?LP (> 0) is a parameter for the maximum time difference between b and e. A set of all functions satisfying the above conditions is denoted as ?LP (L). In simple words, we regard that a BP b occurs in G if b can be embedded into G within small time difference. In addition, a LP L = ?b, e? is regarded to occur if e is observed within small time difference after the occurrence of b (see Figure 3).

We adopt a support measure of patterns in a single graph setting [6]. The support of a BP b = (Vb, Eb) and a LP L = ?b, (x, y)? in G are defined as ?BP (b) = minv?Vb ( | {?(v) |? ? ?BP (b)} | ) / |VG | and ?LP (L) = minv?Vb?{x,y} ( | {?(v) |? ? ?LP (L)} | ) / |VG | ,  respectively. In other words, the support is the minimum ratio of number of unique vertices in VG to which functions in ?BP (b) and ?LP (L) map a vertex in the pattern. We also consider a confidence measure  ?LP (L) = ?LP (L) / ?BP (b)  to represent a rough probability that an extra edge (x, y) is created under the condition of b.

Given a minimum support threshold ? (0 < ? ? 1), a tolerance parameter ? (0 ? ? ? 1) and a minimum confidence threshold ? (0 ? ? ? 1), a LP L = ?b, e? is said to be a ?-tolerance closed link formation pattern, if L satisfies the conditions ?LP (L) ? ?, ?LP (L) ? ? and     A B  D C  A B  D C  A B  D C  B  A B  D C C  A B  D C  A B  D C  A B  D C  B  A B  D C C  A B  D C  B  CA B  D C  A B  D C  A B  D C  B  A B  D C C  UG(S)  A B  D C  B  CA B  D C  A B  D C  A B  D C  B  A B  D C C  UG(S)  A B  D C  A B  D C  A B  D C  B  A B  D C C  A B  D C  A B  D C  A B  D C  B  A B  D C C  S HP CP?& CP? Figure 4. Correlation and contrast patterns among LPs  ?q ? b [?BP (q) < max(?, (1 ? ?)?BP (b))] where q ? b denotes that q is a supergraph of b. We require that the base pattern is ?-tolerance closed subgraph [7] to avoid the enumeration of similar patterns.

B. Hyperclique Patterns and Conditional Contrast Patterns  A correlation pattern in a time evolving graph is proposed based on the hyperclique patterns [3], [4] in itemset mining.

We represent a set of n(? 2) ?-tolerance closed LPs Li = ?b, ei? having the same BP b = (Vb, Eb) and different extra edges ei = (xi, yi) in the form of S = ?b, {e1, ? ? ? , en}?, and we treat it as a pattern (see Figure 4). A graph pattern having all extra edges in S = ?b, {e1, ? ? ? , en}? is denoted as UG(S) = (Vb?{x1, y1, ? ? ? , xn, yn}, Eb?{e1, ? ? ? , en}).

By considering UG(S) = (Vr, Er), S is said to occur in a time evolving graph G if there exists an injective function ? : Vr ? Er ? VG ? EG satisfying the conditions:  1) ?a ? Vr ? Er [lr(a) = lG(?(a))], 2) ?(x, y) ? Er [?((x, y)) = (?(x), ?(y))], 3) max(T (?, b,G))?min(T (?, b,G)) ? ?BP , and 4) ?ei [0 < tG(?(ei))?max(T (?, b,G)) ? ?LP ].

While the first condition requires that the function must cover all extra edges ei, the last condition shows that every edge must appear after the appearance of base patterns.

A set ?HP (S) of all functions satisfying the above conditions defines the joint support  ?HP (S) = minv?Vr ( | {?(v) |? ? ?HP (S)} | ) / |VG |  and the h-confidence  ?HP (S) = ?HP (S) / max1?i?n(?LP (Li))  of S where ?HP (S) captures the strong affinity relationship among extra edges ei under the condition of a BP b (see Figure 4).

Given two thresholds ?J (0 < ?J ? 1) for the minimum join support and ?J (0 ? ?J ? 1) for the minimum h- confidence, a pattern S = ?b, {e1, ? ? ? , en}? is said to be a hyperclique pattern of link formations (HP in short), if S satisfies the conditions ?HP (S) ? ?J and ?HP (S) ? ?J .

As a contrast pattern in a time evolving graph, we consider the adoption of conditional contrast patterns [5].

In conditional contrast patterns, mutual difference of appearances between two patterns plays a central role to measure the degree of contrast. In the single graph setting, an  A B A B YA BX  A BX A B Y  L2L1  0 1 2 3 4 5  b  G  A BA B A BA B YA BA BX  A BA BX A BA B Y  L2L1  0 1 2 3 4 5  b  G  ?1 : {A? A(1), B ? B(2)},?2 : {A? A(3), B ? B(4)} ? ?BP (b), ?1? : {A? A(1), B ? B(2), X ? X(0)} ? ?LP (L1) ?2? : {A? A(3), B ? B(4), Y ? Y(5)} ? ?LP (L2)  Figure 5. Extendability of embedding function  appearance of pattern corresponds to an embedding function.

We consider the extendability of an embedding function to define the mutual difference. Given a LP L = ?b, e?, a function ? ? ?BP (b) is said to be extendable to L, if there exists a function ?? ? ?LP (L) such that ?a ? Vb ? Eb [?(a) = ??(a)]. An indicator function I for the extendability of ? to L is introduced where I(?,L) = 1 if ? is extendable to L, otherwise I(?,L) = 0.

The disjoint support for two LPs Lx = ?b, ex? and Ly = ?b, ey? is defined as ??(Lx, Ly) = min  v?Vb ( | {?(v) |? ? ??(Lx, Ly)} | ) / |VG |  where ??(Lx, Ly) = {? ? ?BP (b) | I(?,Lx) ?= I(?,Ly)} is a set of functions extendable only to Lx or Ly . Example of extendable functions are shown in Figure 5. Mappings between edges are omitted for the simplicity. Because of I(?1, L1) = I(?2, L2) = 1 and I(?1, L2) = I(?2, L1) = 0, we obtain ?1, ?2 ? ??(L1, L2).

Based on the disjoint support, we develop a measure named relative impact [5] for capturing the degree of con- trast in S = ?b, {e1, ? ? ? , en}? as follows:  ?(S) =  ? 1?x<y?n ??(Lx, Ly)  n(n? 1)/2 ?  ?BP (b) .

While the first term in ?(S) is the average value of disjoint support over all the combinations of LPs, the second term is used for the normalization of BP?s effect.

Given a minimum relative impact threshold ?(0 ? ? ? 1), a pattern S = ?b, {e1, ? ? ? , en}? satisfying the condition ?(S) ? ? is said to be a conditional contrast pattern of link formations (CP? in short).

A hyperclique pattern requires that every link formation pattern must correlate with all other patterns tightly. To alleviate this strong requirement of clique relationship, we consider an analogy of CP? and propose another correlation patterns based on the average of pairwise relationships (see Figure 4).

Given two LPs Lx = ?b, ex? and Ly = ?b, ey?, by using a set ??(Lx, Ly) = {? ? ?BP (b) | I(?,Lx) = I(?,Ly) = 1} of functions extendable to both Lx and Ly , the cohesive support is defined as  ??(Lx, Ly) = min v?Vb  ( | {?(v) |? ? ??(Lx, Ly)} | ) / |VG |.

By using the support, we define a measure for correlation, named relative cohesiveness, of S = ?b, {e1, ? ? ? , en}? as follows:  ?(S) =  ? 1?x<y?n ??(Lx, Ly)  n(n? 1)/2 ?  ?BP (b) .

Given a threshold ?(0 ? ? ? 1) for minimum relative cohesiveness, a pattern S = ?b, {e1, ? ? ? , en}? satisfying the condition ?(S) ? ? is said to be a conditional correlation pattern of link formations (CP? in short).

By using the above preparations in this section, our data mining problems in this paper are formalized. Given a time evolving graph G and parameters ?BP , ?LP , ?, ?, ?, ?J , ?J , ? and ?, then the data mining problem in this paper is to find HPs, CP?s and CP?s whose base patterns are ?-tolerance closed subgraphs.



III. DISCOVERY ALGORITHMS  In this section, to solve the data mining problems, depth- first discovery algorithms are developed based on the reverse search [8]. In the algorithms, ?-tolerance closed subgraphs are enumerated as BPs. Whenever a BP b is found, we gather all the LPs Li = ?b, ei? such that ?LP (Li) ? ? and ?LP (Li) ? ?, and then find HPs, CP?s and CP?s by considering the combinations of Li. Note that, since ?LP (?b, e?) ? ?BP (b) holds by definition, we do not miss any LP satisfying the minimum support condition.

A. Enumeration of Base Patterns  Enumeration of ?-tolerance closed subgraph patterns is achieved by adopting a widely used strategy named DFS code tree enumeration [9]. This strategy can enumerate all subgraph patterns without duplication by employing code word representation, canonical pruning and rightmost expansion. The code word is a unique string corresponding to a series of edges in a pattern associated with connection information. A canonical pattern is a subgraph having the minimum code word in the order of code word [9] among a set of isomorphic patterns. By excluding non-canonical patterns, we can avoid the generation of isomorphic patterns.

In addition, the rightmost expansion guarantees the complete enumeration of canonical patterns without any duplications.

Please refer to the literatures [7], [9] for details.

Pruning based on the occurrence matching [7], [10] contributes to reduce the execution time for closed pattern discovery in general. A restricted occurrence matching is developed for ?-tolerance closed patterns in a time evolving graph. A BP b = (Vb, Eb) is said to be occurrence matched with an extra connected edge e = (x, y) ?? Eb (x ? Vb?y ? Vb) in a time evolving graph G, denoted as OM(b, e), if every function ? ? ?BP (b) has at least one corresponding function ?? ? ?BP (b?) satisfying the following conditions for b and a graph pattern b? = (Vb ? {x, y}, Eb ? {e}):  Algorithm BP-Miner (G, ?, ?, ?BP , ?LP )  1: B := a set of all possible 1-edge pattern in G 2: for each b ? B 3: BP-mine(b, G, ?, ?, ?BP , ?LP )  procedure BP-mine (b, G, ?, ?, ?BP , ?LP ) 1: if ?isCan(b) ? ?BP (b) < ? then return 2: if ?e s.t. OM(b, e) then return 3: if ?q ? b [?BP (q) < max(?, (1? ?)?BP (b))] 4: then output b 5: for each (b? = b+ e) ? RME(b) 6: BP-mine (b?, G, ?, ?, ?BP , ?LP )  Figure 6. Pseudo code for the discovery of ?-tolerance closed subgraphs  1) ?a ? Vb ? Eb [?(a) = ??(a)], 2) min(T (?, b,G)) ? tG(??(e)) ? max(T (?, b,G)) and 3) ??(e) is never used by patterns obtained via b.

A base pattern which is occurrence matched with an extra edge can be pruned without compromising the completeness.

While we do not explain in detail, the second condition is a special requirement not to break the complete enumeration by this pruning. This issue relates deeply with the pruning by occurrence matching with constraints [11]. The third condition roughly corresponds to a feasible edge [7] and it can be judged by code words of b and b?.

An algorithm for enumerating ?-tolerance closed sub- graphs is shown in Figure 6. In the algorithm, non-canonical and infrequent patterns are pruned in line 1 of BP-mine.

Note that, pruning by the support value does not violate the completeness since the support measure on BP satisfies the anti-monotone condition ?q ? b [?BP (b) ? ?BP (q)] for b and its any supergraphs q [6]. After the pruning by restricted occurrence matching (line 2) and the check of ?-closedness (line 3), a pattern b is reported as a ?-tolerance closed pattern in line 4. A complete enumeration is realized by recursive invocations of BP-mine for new patterns b? = b+e obtained by adding an edge e to b in the rightmost expansion RME(b) (line 5 and 6).

B. Discovery of Hyperclique Patterns  Given a ?-tolerance closed BP b, a set of all LPs satisfying the minimum support ? and minimum confidence ? is ob- tained as LP (b) = {L = ?b, e? |?LP (L) ? ?, ?LP (L) ? ?}.

With the consideration of isomorphic patterns explained later, a direct application of a conventional algorithm in itemset mining to the set LP (b) can derive hyperclique patterns of link formations.

Before describing a discovery algorithm, we discuss the relationship on the evaluation measure between two pat- terns S1 = ?b, {e11, ? ? ? , e1n1}? and S2 = ?b, {e21, ? ? ? , e2n2}? where I1 ? I2 ? LP (b) and ?eij [?b, eij? ? Ii] (i ? {1, 2}). First, for graph patterns having all extra edges UG(S1) = (V 1r , E  r ) and UG(S  2) = (V 2r , E r ), an inequal-  ity ?HP (S1) ? ?HP (S2) holds because of the relations 1) V 1r ? V 2r and     A  A A   1 2 B  A  A A   1 2 B  A  A A   1 2 B  A  A A   1 2 B  A  A A   B  B  A  A A   B  B A  A A   1 2 B  B A  A A   1 2 B  B  LPA LPB LPC LPD  Figure 7. Examples of isomorphic correlation and contrast patterns  Algorithm HP-Miner (b, G, ?, ?, ?J , ?J )  1: LP (b):= {Li = ?b, ei? |?LP (Li) ? ? ? ?LP (Li) ? ?} 2: for each i ? {1, ? ? ? , |LP (b)|} 3: HP-mine ({elm(i, LP (b))}, i, LP (b), G, ?J , ?J )  procedure HP-mine (S, idx, LP (b), G, ?J , ?J )  1: if ?isCan(S, LP (b)) then return 2: if ?HP (S) < ?J ? ?HP (S) < ?J then return 3: if |S| ? 2 then output S 4: for each i ? {idx+ 1, ? ? ? , |LP (b)|} 5: HP-mine(S ? {elm(i, LP (b))}, i, LP (b), G, ?J , ?J )  Figure 8. Pseudo code for the discovery of hyperclique patterns  2) ?v ? (V 1r ? V 2r ) ??2 ? ?HP (S2) ??1 ? ?HP (S1) [?2(v) = ?1(v)].

As similar, a relation ?HP (S1) ? ?HP (S2) holds by two inequalities maxL1?I1(?LP (L1)) ? maxL2?I2(?LP (L2)) and ?HP (S1) ? ?HP (S2). In other words, as the same in the case of hyperclique patterns in itemset mining, the joint support and h-confidence satisfy the anti-monotone condition.

Different from hyperclique patterns in itemset mining, a set of LPs needs a special care of the isomorphism.

For example in Figure 7, two LPs LPA and LPB having the same BP are isomorphic with each other. As similar, LPC and LPD are also mutually isomorphic. In order to avoid the enumeration of isomorphic patterns, we introduce a canonical form of a set of LPs. Given a set P of link formation patterns having the same base pattern, a pattern S = ?b, {e1, ? ? ? , en}? such that ?ei[?b, ei? ? P ] is said to be a canonical pattern with respect to P , denoted as isCan(S, P ), if and only if S satisfies the condition  S = argmin S?=?b,E?,?e?E[?b,e??P ],UG(S?)?UG(S)  [ code(UG(S?) ) ]  where code(?) is the code word representation of a graph pattern [9], and UG(S?) ? UG(S) denotes that two graph patterns having all extra edges UG(S?) and UG(S) are mutually isomorphic. In simple words, a pattern S is judged as a canonical pattern if S has the minimum code word among the set of isomorphic patterns obtained from LP (b).

We show a top-down discovery algorithm for hyperclique patterns having a base pattern b in Figure 8. In the figure, elm(i, LP (b)) denotes the ith element in LP (b) in the order of code word. The pruning of non-canonical patterns avoids repeated enumeration of isomorphic patterns (line 1 of HP-mine). This pruning does not violate the complete enumeration because no canonical pattern can be obtained via non-canonical patterns in the enumeration ordering in  HP-Miner. A pattern S which passes the pruning by joint support and h-confidence is reported as a hyperclique pattern in line 3. These prunings also do not break the completeness because of the anti-monotone property of the joint support and h-confidence. All HPs can be enumerated by invoking HP-Miner for each ?-tolerance closed base pattern found in BP-Miner.

C. Discovery of Conditional Contrast and Correlation Pat- terns  An edge weighted graph W = (Vw, Ew, w) consists of a set of vertices Vw, a set of edges Ew and an edge weighting function w : Ew ? [0, 1]. Given a parameter ?(0 ? ? ? 1), a set of vertices V ? Vw is said to be a pseudo clique in W [12], if the following condition holds:  ? x,y?Vw,x =y w( (x, y) ) / (|V | ? (|V | ? 1)/2) ? ?.

Given a ?-tolerance closed BP b, we build an edge weighted graph W (b) having a set of vertices LP (b), a set of complete edges LP (b)?LP (b) and a weighting function  w?((Lx, Ly)) = ??(Lx, Ly) / ?BP (b).

Then, a pattern S = ?b, {e1, ? ? ? , en}? representing a set of LPs Sv = {?b, e? | e ? {e1, ? ? ? , en}} ? LP (b) becomes a CP?, if and only if Sv is a pseudo clique in W (b). As similar, a pseudo clique in W (b) under the weighting func- tion w?((Lx, Ly)) = ??(Lx, Ly) / ?BP (b) corresponds to a CP?. Thus, the discovery of CP?s and CP?s can be reduced to the problem of pseudo clique enumeration.

In this research, we employ a pseudo clique enumeration algorithm based on the reverse search [12]. Please refer to the original paper [12] for details. Given a non empty set of vertices K ? VW (b), G[K] = (K, {(x, y) |x, y ? K}, w?) denotes an induced subgraph of W (b). We de- fine v?(K) by the minimum degree vertex in K, i.e.

v?(K) = argminx?K  ? (x,y)?G[K] w((x, y)). If there exist  plural vertices having the same minimum degree, we select one having the maximum code word as v?(K). Then, by defining the parent of K as K \ {v?(K)}, we obtain a relation ?(K\{v?(K)}) ? ?(K). In other words, the value of relative impact of a parent is no less than that of children.

The enumeration algorithm is built on the inverse operation of obtaining a parent, and the completeness is guaranteed by the anti-monotonicity of relative impact.

We show a discovery algorithm for CP? based on the pseudo clique enumeration in Figure 9. From the viewpoint of the pairwise consideration of contrast in CP?, compar- isons between two isomorphic link formation patterns, such as LPA and LPB in Figure 7, are meaningless. Thus, non- canonical patterns are deleted before the search process (line 2 in CP?-Miner). Beginning with S = {}, a complete discovery is realized by recursive invocations of CP?-mine for each child S ? {Li} of S which satisfies the minimum     Algorithm CP?-Miner (b, G, ?, ?, ?)  1: LP (b):= {Li = ?b, ei? |?LP (Li) ? ? ? ?LP (Li) ? ?} 2: LP c(b):= {Li ? LP (b) | isCan({Li}, LP (b))} 3: CP?-mine ({}, LP c(b), b, G, ?)  procedure CP?-mine (S, LP c(b), b, G, ? )  1: if |S| ? 2 then output S 2: for each Li ? LP c(b) s.t. Li ?? S 3: if ?(S ? {Li}) ? ? ? Li = v?(S ? {Li}) then 4: CP?-mine (S ? {Li}, LP c(b), b, G, ?) Figure 9. Pseudo code for the discovery of conditional contrast patterns  Algorithm CP?-Miner (b, G, ?, ?, ?)  1: LP (b):= {Li = ?b, ei? |?LP (Li) ? ? ? ?LP (Li) ? ?} 2: CP?-mine ({}, LP (b), b, G, ?)  procedure CP?-mine (S, LP (b), b, G, ? )  1: if |S| ? 2 then output S 2: for each Li ? LP (b) s.t. Li ?? S 3: if ?(S ? {Li}) ? ? ? Li = v?(S ? {Li}) 4: ? isCan(S ? {Li}, LP (b)) then 5: CP?-mine (S ? {Li}, LP (b), b, G, ?) Figure 10. Pseudo code for the discovery of conditional correlation patterns  relative impact. A pattern S?{Li} having sufficient relative impact is reported as a CP? in the next round of CP?-mine.

The same algorithm can be basically used for mining CP?s by replacing ? with ?. Different from the contrast patterns, non-canonical LPs are not deleted because we have to consider canonical correlation patterns having isomorphic link formations such as LPD in Figure 7. The discovery algorithm for CP? is shown in Figure 10. In the algorithm, a canonical pruning is performed to exclude non-canonical patterns.

As similar to HP-Miner, complete discovery of all condi- tional contrast and correlation patterns can be achieved by invoking CP?-Miner and CP?-Miner for each ?-tolerance closed base pattern.



IV. EXPERIMENTS  To assess the effectiveness of the proposed framework, we implements all algorithms in Java and conduct experiments on a Windows PC (CPU: Intel(R) Xeon 3.20GHz) with 24GB of main memory. Two time evolving graphs were prepared for the experiments:  ENRON: By using a part of ENRON email data [13], we built a time evolving graph having 95 vertices with 9 labels and 1,239 edges with 3 labels, in which vertices correspond to persons and edges represent the first email communications of each type (To, Cc, Bcc) between persons.

One week is taken as time unit. While positions in the occu- pation are used as vertex labels, the types of communications are employed as edge labels.

MIT: A time evolving graph was generated from a part of data in Reality Mining project [14]. In the graph, each vertex corresponds to a mobile device and each edge represents a communication by voice calls. We employ one  Table I NUMBERS OF OBTAINED CORRELATION AND CONTRAST PATTERNS  ENRON ? ? ?BP ? ?J = ? = ? = 0.3 ?J = ? = ? = 0.1  HP CP? CP? HP CP? CP? 0.1 0.3 3 0.5 0 0 0 1 1 0  [|BP | = 21] 0.3 0 0 1 1 2 1 0.1 0.3 6 0.3 1 1 0 1 1 0  [|BP | = 43] 0.3 7 4 9 7 16 24 0.1 0 3 0.5 0 0 0 1 1 0  [|BP | = 27] 0.3 0 0 1 1 2 1 0.1 0 6 0.5 16 23 7 16 38 12  [|BP | = 61] 0.3 22 26 16 22 53 36 0.05 0.3 3 0.5 1 2 0 2 4 0  [|BP | = 175] 0.3 9 5 18 11 23 47 0.05 0.3 6 0.5 8 24 9 8 30 9  [|BP | = 706] 0.3 125 50 182 129 212 1,183 0.05 0 3 0.5 4 18 29 5 59 133  [|BP | = 242] 0.3 25 29 70 27 129 240 0.05 0 6 0.5 562 651 669 573 2,374 2,996  [|BP | = 1, 117] 0.3 1,003 842 1,327 1,071 11,965 8,788  MIT ? ? ?BP ? ?J = ? = ? = 0.3 ?J = ? = ? = 0.1  HP CP? CP? HP CP? CP? 0.01 0.3 2 0.5 0 0 0 0 0 0  [|BP | = 48] 0.3 0 0 0 0 0 0 0.01 0.3 4 0.5 5 5 6 5 12 19  [|BP | = 74] 0.3 5 5 6 5 12 19 0.01 0 2 0.5 16 2 30 16 36 125  [|BP | = 64] 0.3 19 2 57 19 67 522 0.01 0 4 0.5 185 112 194 188 553 2,725  [|BP | = 124] 0.3 192 113 211 195 589 3,209 0.005 0.3 2 0.5 10 7 8 10 13 14  [|BP | = 181] 0.3 186 16 242 192 293 1,248 0.005 0.3 4 0.5 58 27 41 64 67 134  [|BP | = 283] 0.3 308 44 239 383 482 1,636 0.005 0 2 0.5 70 27 64 82 102 194  [|BP | = 274] 0.3 458 48 615 575 711 4,434 0.005 0 4 0.5 1,526 767 1,081 1,929 2,734 6,990  [|BP | = 682] 0.3 3,649 1,002 2,732 4,840 7,459 27,319  day as time unit. Each vertex has the discretized number of total communications as a vertex label. The obtained graph consists of 3,168 vertices with 9 labels and 3,610 edges.

In the experiments, we measure the number of correlation and contrast patterns obtained by various combinations of ?, ?, ?BP , ? and parameters on correlation and contrast.

Through the experiments, we employ ?LP = 3 for ENRON dataset while ?LP was set to 2 for MIT dataset. We set the threshold on joint support ?J to 0.5?? for the discovery of HPs. The experimental results are shown in Table I. In the table, |BP | denotes the number of base patterns. Correlation and contrast patterns are obtained within several seconds in almost all cases. It requires several minutes at the longest.

These results show that the proposed algorithms succeeded in obtaining the results within practical computation time.

The number of obtained patterns increases with the de- crease of ? and ? and the increase of ? and ?BP . These are expected results since these changes of thresholds derives     Table II NUMBERS OF PATTERNS BY PATTERN SIZE  ? = 0.5 ? = 0.3 |S| 2 3 4 5 2 3 4 5 ENRON (? = ? = 0.3, ? = 0.05, ? = 0,?BP = 6)  HP 494 66 2 833 160 10 CP? 571 59 19 2 679 59 54 50 CP? 669 1,327  MIT (? = ? = 0.3, ? = 0.005, ? = 0,?BP = 4)  HP 1,049 450 27 2,437 1,130 82 CP? 732 28 7 969 30 3 CP? 1,069 12 2,710 22  larger numbers of base patterns and link formation patterns.

As similar, the decreases of thresholds on correlation and contrast (?J ,? and ?) increase the number of obtained results. While a clique relationship is required in HPs, pseudo cliques are enough for CP?s and CP?s. Due to the different requirements of relationships among link formation patterns, a larger number of CP?s and CP?s are obtained compared with HPs in the loosest settings.

Besides the total number of patterns, we assess the size of correlation and contrast patterns, i.e. the number of link formation patterns in a set, obtained in the above experiments. The maximal sizes of HPs, CP?s and CP?s found in ENRON dataset are 4, 12 and 4, respectively. The maximal HP, CP? and CP? in MIT dataset consist of 5, 11 and 4 link formation patterns, respectively. In Table II, we summarize the numbers of conditional patterns obtained under certain conditions according to the pattern size. In the table, |S| denotes the size of patterns. From the results, we can confirm that correlation patterns of larger size are found compared with contrast patterns. While these tendencies do not always hold in general from the theoretical aspect, the results show that the condition of relative cohesiveness (?(S)) for a pattern set S is easier to satisfy than that of relative impact (?(S)) in these datasets.

A set of correlation and contrast patterns having the same base patterns will give great help in the analysis of obtained patterns which in turn derive deep understanding of target dataset. We assess the ratio of BPs to which conditional correlation and contrast patterns are associated. The results are shown in Table III. In the table, columns CP?, CP? and CP?? denote the percentages of BPs having CP?, CP? and both of them, respectively. We can observe that there are many BPs having no conditional correlation and contrast pattern. On the other hand, since the value of CP?? is nearly equal with the smaller value of CP? and CP? in almost all cases, we can conclude that BPs having conditional contrast patterns have a tendency to be associated with conditional correlation patterns  An example of conditional correlation and contrast pat- terns having the same base pattern found in MIT dataset with  Table III PERCENTAGES OF BASE PATTERNS HAVING CORRELATION AND  CONTRAST PATTERNS  ? ?BP ? CP? CP? CP?? CP? CP? CP??  ENRON (? = 0.05) ? = ? = 0.3 ? = ? = 0.1 0.3 3 0.5 1.1 0.0 0.0 2.3 0.0 0.0 0.3 3 0.3 2.9 4.0 1.1 5.1 4.0 2.9 0.3 6 0.5 3.1 1.3 1.3 3.5 1.3 1.3 0.3 6 0.3 4.2 2.8 2.7 5.0 2.8 2.8 0 3 0.5 3.3 2.1 1.7 6.2 2.1 2.1 0 3 0.3 5.8 6.6 4.1 9.5 6.6 5.8 0 6 0.5 12.9 10.8 10.0 15.0 10.8 10.8 0 6 0.3 14.2 12.3 11.6 16.0 12.3 12.3  MIT (? = 0.005) ? = ? = 0.3 ? = ? = 0.1 0.3 2 0.5 2.2 2.2 2.2 2.2 2.2 2.2 0.3 2 0.3 4.4 12.7 4.4 12.7 12.7 12.7 0.3 4 0.5 3.9 4.9 3.5 5.3 4.9 4.9 0.3 4 0.3 6.0 6.7 6.0 6.7 6.7 6.7 0 2 0.5 6.2 8.0 6.2 8.0 8.0 8.0 0 2 0.3 9.1 19.0 9.1 19.0 19.0 19.0 0 4 0.5 24.6 25.8 23.9 26.5 25.8 25.8 0 4 0.3 26.8 27.6 26.2 28.2 27.6 27.6  CP?            9 9           =                  9 9           =  CP?       9 9     9 9     4 9      =        9 9       9 9     9 9     4 9      =  Figure 11. Examples of obtained patterns from MIT dataset  ? = 0.005, ? = 0,?BP = 4, ? = 0.3 and ? = ? = 0.3 is shown in Figure 11. In the figure, vertex labels denote the discretized number of total communications. Larger number indicates more communications. The conditional correlation and contrast patterns in the figure have one extra edge representing a link formation pattern in common. Although the precise assessments are not made, the patterns might capture a process of communication diffusions, and the common edge might play a key role for the diffusion.



V. RELATED WORK  In this paper, we employ a link formation pattern as an element of correlation and contrast patterns. A concept of link formation in a time evolving graph is proposed in [15] and an algorithm LFR-Miner is developed to mine link formation rules. However, LFR-miner restricts base patterns to have only edges directly connected to the extra edge. An algorithm GERM [1] derives a graph evolution rule (GER), which might be regarded as a set of link formation patterns.

Different from the patterns in this paper, a GER requires the extra edges have the same (relative) timestamps in common.

Furthermore, neither correlation nor contrast is considered.

Correlation patterns HP and contrast patterns CP? can be viewed as an upgrade of hyperclique patterns [3], [4], and conditional contrast patterns [5] into the graph domain,     respectively. We define the correlation and contrast measures by adjusting those measures in itemset mining to a single graph setting with time information. On the other hand, the definition of a correlation pattern CP? by pseudo clique is original in this paper.

While a wide variety of graph patterns in time evolving graphs and graph sequences is proposed recently [1], [2], [15]?[20], most of them, with few exceptions, do not con- sider correlation and contrast at all. An algorithm CorSSS [19] enumerates a correlated patterns in a graph sequence.

However, CorSSS takes a sequence of subgraphs as a pattern, and the target is very different. In [20], a correlated spatio-temporal pattern representing changes in an evolving graph is proposed. While [20] focuses on the correlation of changes, the time of link formation has been paid attention in our proposal. To the best of the authors? knowledge, there is no proposal on contrast pattern mining in a time evolving graph.



VI. CONCLUSION  In this paper, we discuss the problem of mining correlation and contrast patterns of link formations in a time evolving graph. To solve the problems, we develop a top-down enumeration framework in which base patterns are mined by a graph miner and combinations of link formations are discovered by an itemset and a pseudo clique enumeration algorithms. The experiments by real world datasets show the feasibility of the proposed framework.

As future work, further experiments with large-scale datasets and careful evaluation of the quality of obtained patterns are necessary. Furthermore, developing correlation and contrast patterns based on other criteria, e.g. k-plex, is one of important future work.

