

Abstract   Spectral clustering is a new graph and similarity based clustering algorithm. When the image is too big, it will take a long time to compute affinity matrix and its eigenvalues and eigenvectors. In order to improve the convergent speed of spectral clustering, a two- stage texture segmentation algorithm is proposed in this paper. First, an improved watershed algorithm is used to perform pre-segmentation and then multiway spectral clustering with eigenvalue-scaled eigenvectors performs the final segmentation. This can reduce the runtime greatly and it is valuable to application with high time request. To verify the proposed algorithm, it is applied to texture image segmentation and the segmentation results are satisfying.

1. Introduction   In the recent years, Spectral methods have been developed rapidly and give competitive performance to the existing methods. Spectral methods are attractive because they don?t restrict to normally distributed clusters and are easy to implement. They have strong theoretical background and are based on well-known cut criteria. They are efficient approaches to calculate near-optimal bi-partitions and k-way partitions. While the data is too huge, it will take a long time to compute affinity matrix and its eigenvalues and eigenvectors.

Considering that and referenced [1], a new texture image segmentation algorithm is proposed in this paper, which combines watershed and multiway spectral clustering to produce better segmentation results. The two methods used here are simple and basic but their combination gives more satisfying results. From this, it can be drawn the conclusion that the new method is effective.

The new method is aimed at improving the convergent speed of spectral clustering and leveraging the best qualities of both segmentation approaches. The drawback of watershed for over segmentation becomes  its strength, providing small prototype patches.

Simultaneously, the seeding problem encountered by many pure feature-based clustering algorithms is avoided. Rather than clustering single feature points, we will cluster distributions, confident that the underlying primitive segmentations are reliable.

2. Improved watershed and multiway spectral clustering algorithm   To improve the convergent speed of spectral  clustering, a new texture image segmentation algorithm is proposed. The new algorithm first uses watershed to perform pre-segmentation and then uses spectral clustering to perform the final segmentation.

Watershed used in this paper not only is simple but also can keep the image boundaries. In addition, the spectral clustering used here is multiway spectral clustering with eigenvalue-scaled eigenvectors.

2.1. Watershed segmentation strategy   Watershed algorithm [2] is a kind of region extraction algorithms, which is simple and effective and has become a widely used image segmentation tool.

Watershed has the advantages of region growing algorithms (the regions are spatially consistent, with boundaries forming a closed, connected set) while still making use of edge information, as captured by the gradient surface. However, noise, which tends to be amplified by the derivative operator, manifests itself as over segmentation. In addition, vital information characterizing texture can be lost in the smoothing operation. So watershed algorithm is often not effective for texture images.

In order to improve the generalization of watershed techniques, a two-stage approach for texture image segmentation is proposed. Watershed algorithm is first used to provide over segmentation. And then, these primitive regions are used to construct a graph representation of the image. Last, the final     segmentation is performed by a new multiway spectral clustering with eigenvalue-scaled eigenvectors. The new algorithm can make full use of texture features or information. Experiments show that it is more effective to texture image segmentation.

The applied watershed segmentation strategy includes three steps: Step 1. Compute morphological gradient image.

Morphological gradient image reflects the gray change in the image. At the edge of acute gray change, gradient value is also big while at the region of uniform gray change, gradient value is also small. The morphological gradient image is defined as dilating transformation subtracting eroding transformation:  )()()( bfbffgrad ???=                     (1) where, ?  represents dilating transformation and ? represents eroding transformation. b  is structuring element. It cannot be too big for it can filter out small region with acute gray change.

Step 2. Compute floating point activity image.

The ?floating point? refers to that the data type of the image is floating point. The floating point activity image has higher brightness value at image boundaries.

Therefore, floating point activity image coarsely reflects image boundaries. The floating point activity image is defined as:  0.255/)(*)()( fgradfgradffimg =          (2) Step 3. Input floating point activity image into the watershed algorithm and get the initial segmentation result.

After the first stage, the over segmentation result is kept as the input of the next stage. In the second stage, spectral clustering is used to perform the final segmentation. The reason that does not apply k-means directly to the data is that the natural clusters in 2R do not correspond to convex regions and k-means run directly finds the unsatisfactory clustering. But once we map the points to kR , they form tight clusters and better clustering result can be got.

2.2. Multiway spectral clustering with eigenvalue-scaled eigenvectors   Spectral algorithms use information contained in the eigenvectors of a data affinity matrix to detect structure.

It has recently grown in popularity and has been used in a variety of situations, often successfully. Spectral methods are attractive because they have strong theoretical background and are easy to implement.

Also they do not intrinsically suffer from the problem of local optima.

Currently, spectral clustering algorithm can approximately be divided into three types. Recursive spectral algorithms try to split the data into two  partitions based on a single eigenvector and then recursively generate more partitions, such as SM algorithm [3]. Multiway spectral algorithms use more information in multiple eigenvectors to do a direct multiway partition of data, such as NJW [4] algorithm.

Non-spectral algorithms are usually simple grouping algorithm that clusters the data quickly. In [5], it is shown that the multiway spectral clustering algorithms are slightly better performing especially when there is structure to be easily found in the data. Therefore, a multiway spectral clustering is applied whose eigenvectors are also scaled by its eigenvalues.

Suppose that },,,{ 21 nxxxX =  is the set of block features and X  is divided into K  subsets.

Gauss kernel is used in this paper and ?  is kernel parameter. The algorithm is described in detail as follows.

Step 1. Compute affinity matrix nnRS ?? . Affinity matrix considers both the similarity information and position information. )2/exp( 22 ?jiij xxS ??=  if  ji ?  otherwise 0=iiS .

Step 2. Compute the diagonal matrix D . Its diagonal element ),( ii is the sum of each row in S , i.e. ?=  j ijSiiD ),( . Construct  2/12/1 ??= SDDL  which not  only normalizes S  but make S  be a symmetric matrix.

Step 3. Compute the eigenvalues and eigenvectors of L . Suppose that the first biggest K  eigenvalues are  Kii ,,1, =?  and the corresponding eigenvectors are Kiei ,,1, = .

Step 4. Use the first biggest K  eigenvalues to scale the corresponding eigenvectors Kiei ,,1, = , i.e.

KK eee ??? ,,, 2211  and get the matrix KnRV ?? .

Step 5. Normalize each row of V  to have unit length.

It has been proven that the normalized spectral clustering has better performance than the unnormalized one [6].

Step 6. Make each row of V  as a point in KR  and then use k-means (KM) to cluster them into K clusters.

Step 7. When the i -th row of V is assigned to the j - th cluster, the original data point ix is then assigned to the j -th cluster.

It has been shown when the data points are clustered into K  clusters, the first biggest K  eigenvectors are pairwise constant [5]. Therefore, the first biggest K eigenvectors are selected in step 3. The advantages of using multiple eigenvectors are: (1) approximate the optimal k-way normalized cut, (2) transform data to a     new embedded space, consisting of k  orthogonal basis vectors, (3) prevent instability due to information loss.

Here, from the viewpoint of polarization theorem [7], we explain the advantages of eigenvalue-scaled eigenvectors. When the dimension of eigenvectors is reduced, the angles decrease between points with high similarity and increase between points with low similarity, highlighting the clustering structure. Thus any heuristic post-processing algorithm is more likely to succeed.

In order to overcome KM initialization-dependent, we run KM many times and keep the segmentation with minimal error as the final segmentation result.

3. Feature extraction and experiments  3.1. Feature extraction   Gray Level Co-occurrence Matrix (GLCM) is an effective tool for texture feature extraction. It is controlled by partial parameters and can extract texture feature from many directions. While wavelet is a global transform. It has the better characteristic of time-frequent analysis and can analyze and represent the texture structure from different scales. The two features can compensate for each other. Obviously, combining different texture features is helpful to improve the segmentation accuracy.

Gray Level Co-occurrence Matrix (GLCM) as a second-order texture measure describes the frequency of one gray tone. In practical application, feature vectors used for texture recognition are some statistical vectors computed from GLCM. Haralick [8] proposed 14 statistical vectors computed from GLCM. For simplicity, angle second-order moment, correlation, entropy and inverse difference moment are computed from GLCM as image features in this paper.

To extract the multi-scale information of images and make full use of the characteristic of wavelet, time-frequent local feature, multi-scale and directional feature, wavelet texture feature are extracted. There are many measure standards for texture such as 3l  norm, mean energy and entropy and so on. For simplicity, 1l norm and mean variance are used to texture measure.

Their formulae are respectively defined as:  ?? = =  = M  i  N  j  jiw MN  e 1 1  1 ),( 1                       (3)  ?? = =  ?= M  i  N  j  wjiw MN  e 1 1  2 ),( 1                   (4)   where, NM ?  is the size of wavelet decomposition sub-band image. i  and j  respectively represent row  and column of the image. w  is wavelet decomposition coefficients and w  is the mean value of wavelet decomposition coefficients. This shows that for wavelet decomposition of level L , the dimension of feature vector is )13( +?= LD . In this paper, Daubechies3 are used to decompose images into 3 layers.

For the over segmentation result produced by watershed is irregular, it is impossible to directly extract the texture feature from irregular block using GLCM and wavelet. Therefore, first we extract the texture feature from each pixel in the irregular block, and then use the mean value of the pixels in the irregular region as its feature. It should be pointed out that to make all features have the same importance; every feature has been normalized by its maximum.

3.2. Experiments and discussions   In this section, three texture images of size 256256 ?  are selected to verify the proposed algorithm  and shown in Fig.1(a), Fig.2(a) and Fig.3(a) respectively. In spectral clustering, the kernel parameter is set by experience and 3.0=? . GLCM and wavelet are used to feature extraction. The segmentation results are given in Fig.1, Fig.2 and Fig.3.

And the corresponding block number and error rate are also given in Table 1, Table 2 and Table 3.

From this experiment, it can be concluded that the proposed method is superior to KM. During the experiment, we observe that the KM is initialization- dependent and its two different results appear at the same probability.

It should be pointed out that, in the two clustering algorithms, the clustering number k  is given in advance.

In this experiment, the two methods have almost the same results though there are some differences between them. The result of the proposed algorithm has better linear boundary while worse curve boundary than that of KM. Because the kernel parameter in spectral clustering is set by experience, it affects the segmentation result to a certain extent.

(a) Original image                   (b) Watershed        (c) KM                      (d) Proposed algorithm  Fig. 1.  Textural image segmentation results  Table 1. Comparison among different methods  Methods Watershed KM Proposed method Block  number 793 13 7  Error rate (%) --- 3.13 2.24     (a) original image        (b) watershed    (c) KM                  (d) proposed algorithm  Fig. 2.  Textural image segmentation results  Table 2. Comparison among different methods Methods Watershed KM Proposed method  Block number 812 6 10  Error rate (%) --- 2.66 3.43     (a) original image               (b) watershed     (c) KM                    (d) proposed algorithm  Fig. 3.  Textural image segmentation results  Table 3. Comparison among different methods  Methods Watershed KM Proposed method Block  number 940 121 72  Error rate (%) --- 53.58 10.11   From these experiments, it can be drawn the  conclusion that the proposed algorithm is superior to KM no matter on visual effect or on statistical result.

Especially in the last experiment, KM cannot segment the original image into five parts, that is, it can not separate the same texture with different coarse and fine scales. But the new algorithm not only can segment it into five parts completely but the four-part segmentation result is also better than KM. Therefore, the new algorithm is effective.

For the paper is concentrated on the improved algorithm and its application to image segmentation, all images are segmented without post-processing.

Therefore, post-processing is one of our further work.

4. Conclusions   In order to improve the convergent speed of spectral clustering, a two-stage texture segmetation algorithm is proposed in this paper. Watershed is used to perform pre-segmentation and spectral clustering to perform the final segmentation. This can reduce the runtime and it is valuable to application with high time request.

Experiments on texture images show that the new     algorithm is effective and the segmentation results are satisfying. But the kernel parameter in spectral clustering is determined by experience, how to determine kernel parameter effectively demands our further research.

5. Acknowledgments   This work is supported by the National ?863? Program (2007AA01Z319), Innovation Foundation of Shanghai University and Research Foundation for The Excellent Youth Scholars of Higher Education of Shanghai, the Leading Academic Discipline Project of Shanghai Municipal Education Commission (J50104), and the Shanghai International Collaborative Project (No.075107035).

6. References  [1] Robert J. O?Callaghan, David R. Bull, ?Combined  Morphological-Spectral Unsupervised Image Processing, Vol.14, 2005, pp.49-62.

[2] Huang Bo, Yang Yong, Wang Qiao, Wu Lenan,  ?Video Segmentation Based on Spatio-Temporal  Information?, ACTA ELECTRONICA SINICA, Vol.29, 2001, pp. 9-12.

[3] Jianbo Shi, Jitendra Malik, ?Normalized Cuts and  Analysis and Machine Intelligence (PAMI), Vol.22, 2000, pp.888-905   [4] Andrew Y. Ng, Michael I. Jordan, Yair Weiss, ?On  Spectral Clusterings: Analysis and an Algorithm?, In: Proceedings of Advances in Neural Information Processing System (NIPS 14), 2001   [5] Marina Meila, Jianbo Shi, ?A Random Walks View of  Spectral Segmentation?, In Proceedings of   [6] Ulrike von Luxburg, Olivier Bousquet, ?Limits of  Spectral Clustering?, Neural Information Processing System (NIPS), 2004   [7] Matthew Brand, Kun Huang, ?A unifying theorem for  spectral embedding and clustering?, TR-2002-42.

November, 2002   [8] Haralick, R. M., Shanmugam, K., Dinstein I., ?Texture  Features for Image Classification?. IEEE Trans.

