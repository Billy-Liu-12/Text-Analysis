Mining Web Access Log for the Personalization Recommendation

Abstract?This paper presents a personalization recommend- dation model to recommend potentially interesting resources to users based on the web access log of users. This model builds on the apriori algorithm and the tf?idf technology, which consists of three parts: resource description, user?s preference extraction and the personalization recommendation.

Firstly ,our model generates resource text space vector by analyzing the resource information achieved by mining user?s web access log, then it attains interest set to make use of the apriori algorithm based on the vector, finally, it recommends filtered and sorted resources to users content based recommendation model.

Personalization Recommendation Model; Web Access Log Mining; Vector Space Model; Apriori algorithm; DF-RTF algorithm; Content-based filtering.



I.  INTRODUCTION In today?s society there is an increasing need for  automated systems providing personalized recommendations to a user faced with a large number of choices. An example where personalized recommendations are extremely useful is an information overload situation with an amount of data available through Internet largely exceeding the ability of a person even getting a glance of it. Here, automated methods are needed to provide a large number of users with the ability to efficiently locate and retrieve information according to their preferences.

In this paper we propose a personalization recommendation model which gets users? preference predictions through analyzing their web access log, and then recommends resources to the active users by content- based filtering approach.



II. BASIC CONCEPTS AND ASSUMPTIONS  A. Basic Concepts Item is a field of transaction database, which has a certain  range. To the supermarket, the item generally is one of articles in one transaction. In this paper, item is a word or phrase.

In general, a set of items is called an itemset. The number of items in an itemset is called the length of an itemset.

Itemsets of some length k are referred to as k-itemsets.

Let I=i1, i2,?, im be a set of m distinct attributes, T be transaction that contains a set of items such that T ? I, D be a database with different transaction records Ts.

Support(s) is an important basic measure for association rules. Since the database is large and users concern about only those frequently purchased items, usually threshold of support is predefined by users to drop those rules that are not so interesting or useful. The threshold is called minimal support. Support(s) of an association rule is defined as the percentage/fraction of records that contain X? Y to the total number of records in the database. Suppose the support of an item is 0.1%, it means only 0.1 percent of the transaction contain purchasing of this item [1].

Itemsets that do not have the minimum support are discarded and the remaining itemsets are called large k- itemsets.

A frequent itemset is called maximal if it is not a subset of any other frequent itemset. The set of all maximal frequent itemsets is denoted as MFI [2]. Maximal frequent itemsets are necessary for generating association rules [3].

Lk: Set of large k-itemsets (those with minimum support).

Each member of this set has two fields: i) itemset and ii) support count.

Ck: Set of candidate k-itemsets (potentially large itemsets). Each member of this set has two fields: i) itemset and ii) support count [6].

B. Basic Assumptions Only to handle the registered users' web access log, the  non-registered users' shall not be dealt with.

The resources browsed by users to be classified, each is  corresponding to a resource category.



III. RESOURCE MODEL  A. Resources Collection Web Access Logs are got from the database in one of our  laboratory research project, and the format of the logs may be different from that of the normal logs.

The logs come from the web server side, including user login information, the resource id, resources type and the visiting time. The tab.I describes the log information.

TABLE I.  INFORMATION INCLUDED IN WEB ACCESS LOG  # visitTime userId rscId rscType 1 2008-09-18 10:33:48 admin 47884 25 2 2008-09-18 10:34:40 admin 73427 25 ? ? ... ? ?   DOI 10.1109/MMIT.2008.166     B. Resources Description Vector space model (or term vector model) is an  algebraic model for representing text documents as vectors of identifiers, for example, index terms. It is used in information filtering, information retrieval, indexing and relevancy rankings. Its first use was in the SMART Information Retrieval System [4].

If a term occurs in the document, its value in the vector is non-zero. Several different ways of computing these values, also known as (term) weights, have been developed. One of the best known schemes is tf-idf weighting.

The tf?idf weight (term frequency?inverse document frequency) is a weight often used in information retrieval and text mining. This weight is a statistical measure used to evaluate how important a word is to a document in a collection or corpus. The importance increases proportionally to the number of times a word appears in the document but is offset by the frequency of the word in the corpus.

The term frequency (TF) in the given document is simply the number of times a given term appears in that document.

This count is usually normalized to prevent a bias towards longer documents to give a measure of the importance of the term ti within the particular document dj [5].

? =  k kjn ijn  ijtf (1)  Where nij is the number of occurrences of the considered term in document dj, and the denominator is the number of occurrences of all terms in document dj.

The inverse document frequency (IDF) is a measure of the general importance of the term [5].

in Nlogidfi =                                      (2)  Where N is the total number of documents in the corpus.

ni is the number of documents where the term ti appears. The so-called weight wij of term ti in document dj is then  ? =  ?  ? = N  k kkj  iij ij  idftf  idftf w   )(  (3)  Each document d is represented as a vector ),,,,,,( 2211 ><><><= jnjnjjjjj wtwtwtd , where n is the  number of occurrences of all terms in document dj.

In this paper, the web page users browsed is analyzed  into a document, which can be described as a vector.



IV. INTEREST REPRESENTATION Users? interests of the recommendation model are  represented as maximal frequent itemsets generated by the apriori algorithm.

A. Apriori algorithm Fig.1 gives the Apriori algorithm. The first pass of the  algorithm simply counts item occurrences to determine the large 1-itemsets. A subsequent pass, say pass k, consists of two phases. First, the large itemsets Lk-1 found in the (k-1)th pass are used to generate the candidate itemsets Ck, using the apriori-gen function described in Figure 2. Next, the database is scanned and the support of candidates in Ck is counted. For fast counting, we need to efficiently determine the candidates in Ck that are contained in a given transaction t.

B. Apriori Candidate Algorithm The apriori-gen function takes as argument Lk-1, the set of  all large (k-1)-itemsets. It returns a superset of the set of all large k-itemsets. The function works as follows. First, in the join step, we join Lk-1 with Lk-1; Next, in the prune step, we delete all itemsets c?Ck such that some (k-1)-subset of c is not in Lk-1. Fig.2 gives the Apriori Candidate algorithm.

C. MFI Algorithm Fig.3 shows the MFI algorithm.

1)  L1 = {large 1-itemsets}; 2)  for ( k = 2; Lk-1??; k++ ) do begin 3)    Ck = apriori-gen(Lk-1 ); // New candidates 4)    forall transactions t?D do begin 5)     Ct = subset(Ck , t); // Candidates contained in t 6)     forall candidates c?Ct do 7)       c.count++; 8)     end 9)     Lk = {c?Ck | c.count ? minsupg} 10) end 11) Answer = Uk Lk;  Figure 1.  Algorithm Apriori  1)  Begin 2)  For each p?Lk-1 Do 3)     For each q?Lk-1 Do 4)     If p.item1=q.item1, ?, p.itemk-2= q.itemk-2,  p.itemk-  1<q.itemk-1; 5)    Then c=p.item1, p.item2, ? , p.itemk-1,  q.itemk-1; 6)      End If 7)      If ? (k-1)-subset s?Lk-1 of c; 8)    Then delete c; 9)      Else insert c into Ck; 10)      End If 11)   End For 12) End For 13) Return Ck 14) End  Figure 2.  Algorithm Apriori Candidate  1) Begin 2) L1={large 1-itemsets}; 3) for ( k = 2; Lk-1??; k++ ) do begin 4)   If ? (k-1)-subset sk-1 ?  k-subset sk 5)     Then delete sk-1 from Lk-1; 6)   End If 7) End For 8) MLk =Lk;     9) End Figure 3.  Algorithm FMI

V. USER MODELING  A. Model Representation User model consists of four parts: user identity mark  (UserId), the types of resources (RscType), the MFIs and the time. Tab.II shows the information of user model.

UserId corresponds to a user who is different from other users. Different users have different results of the recommendation.

RscType is the types of resources which the user is interested in. According to the access time, the resources are sorted.

The MFIs is a MFI set which is the result of the Algorithm FMI, and the input variable Lk is from the same RscType.

The updateTime is the moment of the MFI being created.

The User model is represented as follows in the database.

B. Model Update At a fixed time interval, the monitor scans the web access  logs. If it discovers the time of the users access the resources is greater than the updateTime, the model will be updated.

If the model were updated, the initial variable Lk in the Apriori algorithm consists of MFIs and the vector collection of the resources users to access. And then through the Apriori Candidate Algorithm and the MFI Algorithm, the new MFIs and updateTime are generated.



VI. RECOMMENDATION OF RESOURCES Before recommending resources to users, we need to  translate vector representation of resources into a set which only includes the terms of the vector, the set is called rscSet.

Step1: to obtain the types of resources from the user model, these types are put in a set which is called for rscTypes.

Step2: to retrieve the potentially interested resources according to the type of step 1, these resources are put in a map which the key is corresponding rscID and value corresponding rscSet.The map is called for  rscMaps.

Step3: to remove the resources the user has visited from the rscMaps, the rscMaps after dealing with are called for cleanRscMaps and the accessedRscList represents the accessed resources, which only includes the resource id.

Step4: to filter the cleanRscMaps according to MFIs, the filtered results are kept in the table, called the table as filteringRscTable, which is made up of two parts: resource id and rank. The rank is the number of the terms of the MFI contained in rscSet, and the initial value of the rank is zero.

TABLE II.  INFORMATION INCLUDED IN WEB ACCESS LOG  Step5: to put the type and the filteringRscTable which is corresponding to the type in the map that is called prefRscMaps.

Step6: to sort the resources according to the rank descending of the filteringRscTable.

Step7: to recommend the sorted resources to users.

The recommendation algorithm is described in fig.4.



VII. EXPERIMENT AND RESULTS  A. Experiment Data Set Experiment data set comes from the project of Internet  information resources Crawl and services, which includes 30 sorts of resource information, and each resource information sort includes 1000 resource records. The size of the data set is 2.45MB. There are 49 volunteers were mostly graduate and undergraduate students who give their feedbacks to this experiment.

In this experiment, user?s preference will be automatic- ally updated by tracking user?s web access log, and then correlative resource information will be recommended to user in item of resource classes and sorted results.

B. The Standard of Evaluation The number of the elements in one document vector is 20.

The length of the MFI is not less than 3.

We research the relationship between the minimum  support and the number of the transactions, and try to find the appropriate minimum support and Ts number.

Precision of recommending resource information to user will tested by comparing the personalization recommendation model based on mining Web access log (MWALRM) brought forward in this paper with the basic user?s preference characteristics vector space model(BVSM).

1) Begin 2) For each type?rscTypes Do 3)  rscMaps={Map<rscID,rscSet>|rscType=type} 4)  For each id ?accessedRscList Do 5)   rscMaps.remove(id); 6)  End For 7)  cleanRscMaps= rscMaps; 8)  For each resource?cleanRscMaps Do 9)   For each Lk?MFIs Do // the relation of MFIs and type can  refer to Table2.

10)    For ( i =k; Li ? ?; i-- ) do begin 11)     If ? (i)-subset si ? resource.value ; 12)    Then { 13)       If rank<i; 14)       Then rank=i; 15)       End If 16)       filteringRscTable.put(rscId,rank);} 17)     End If 18)    End For 19)   End For 20)  End For 21)  prefRscMaps.put(type, filteringRscTable); 22) End For 23) Return prefRscMaps; 24) End  Figure 4.  Algorithm Recommendation  userId rscType MFIs updateTime 406 25 {item1,item2,item3};{it  em4,item5};{item7,ite m8, item9, item10}  2008-09-18 13:30:28     We calculate the recommendation precision when the recall rate individually is 0.2, 0.4, 0.6, 0.8 and 1. The average precision is the average of the precision on the 5 points.

C. Results of Experiment Fig.5 shows the relationship between the minimum  support and the number of the transactions. The trend line in the figure implies the decrease of the Ts number with the increase of the support.

Fig.6 displays the impacts of the MWALRM and BVSM to the recommendation precision; the average precision of the MWALRM is much larger than that of the BVSM. The main cause is the number of the user?s preference characteristics vectors. The BVSM contains only one preference characteristics vector, and the recommending resources is generally rare after content-based filtering, so the recommendation precision decline rapidly. While the MWALRM includes many user?s preference characteristics vectors, the recommendation precision increase naturally.

Figure 5.  The relationship between the minimum support and the number  of the transactions   Figure 6.  Comparison between two models

VIII. CONCLUSIONS Personalized service is a trend, and the universal  personalized recommendation model can not meet the user?s needs of different backgrounds and purposes.

This paper try to solve the issues of the personalization recommendation model based on Web access log mining by analyzing the impact of the model through the experiment.

The experiment shows that the recommendation precision has been greatly improved.

The problem of accurately describing the user?s preference needs further work. We will continue to follow the technologies of the area, and accurately express user's behavior and interest to further enhance the recommendation average precision.

