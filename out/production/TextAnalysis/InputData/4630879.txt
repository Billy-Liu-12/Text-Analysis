

Abstract?An efficient algorithm for mining important association rule from multi-relational database using distributed mining ideas. Most existing data mining approaches look for rules in a single data table. However, most databases are multi-relational. In this paper, we present a novel distributed data-mining method to mine important rules in multiple tables (relations) and combine the method with genetic algorithm to enhance the mining efficiency. Genetic algorithm is in charge of finding antecedent rules and aggregate of transaction set that produces the corresponding rule from the chief attributes. Apriori and statistic method is in charge of mining consequent rules from the rest relational attributes of other tables according to the corresponding transaction set producing the antecedent rule in a distributed way. Our method has several advantages over most exiting data mining approaches. First, it can process multi-relational database efficiently. Second, rules produced have finer pattern. Finally, we adopt a new concept of extended association rules that contain more import and underlying information.



I. INTRODUCTION  Data mining algorithms look for patterns in data. Most existing data mining approaches are propositional and look for patterns in a single data table [5]. For example, a priori algorithm is the most popular model for mining association rules from databases. Association rule in the form of 'If X then Y (X => Y)' is interpreted as "database tuples satisfying that X are likely to satisfy Y". The support-confidence framework is proposed by Agrawal et al. [10]. But, in today?s world, most commercial data are stored in relational databases using multiple tables that are contacted by ID. Relational databases not only have the complex structure, but also store more information. So, the association rules that can response more concrete commercial information are needed.

Standard association-rule mining (ARM) [1] [2], cannot discover these association rules directly. Instead, the data need to be preprocessed or transformed. Several solutions and drawbacks are proposed by Svetlozar Nestorov [7]. Regular ARM based these approaches for finding answers to questions involving multiple dimensions can overwhelm the system with requests for resources.

So, in recent years, the most common types of patterns and  Wenxiang Dou Jinglu Hu Kotaro Hirasawa are with the Graduate School of Information, Product and Systems, Waseda University, 2-7 Hibikino, Wakamatsu, Kitakyushu-shi, Fukuoka, 808-0135, Japan  william@ruri.waseda.jp, jinglu@waseda.jp and hirasawa@waseda.jp Gengfeng Wu is with the Graduate School of Computer Engineering and  Science, Shanghai University, Shanghai200072, P. R. China.

gfwu@shu.edu.cn  approaches considered in data mining have been extended to multi-relational cases. Multi-relational data mining (MRDM) is a multi-disciplinary field dealing with knowledge discovery from relational databases consisting of multiple tables [8]. Now, MRDM encompasses multi-relational (MR) association rule discovery, MR decision trees and MR distance-based methods, among others [5]. Many of MRDM are based on inductive logic programming (ILP [12]).

Typically, ILP techniques perform a search through some large hypothesis space, during which many hypotheses are generated and evaluated [6]. So, if the number of hypotheses evaluated is very large, it will influence the efficiency.

In this paper, we combine a genetic algorithm (GA) with the traditional apriori algorithm and statistic method to mine data in relational business database. Then, we adopt a new extended concept to describe the association rules that contain more concrete commercial information.

The proposed method has two steps. Firstly, we use the GA to mine antecedent rules and aggregate of transaction set that produces the corresponding rule from the chief attributes.

Secondly, mines the consequent rules from the rest relational attributes of other tables by using the apriori algorithm and statistic method in terms of the corresponding transaction set producing the antecedent rule in a distributed way. The difference with a standard ARM is that our consequent rules consist of some rules mined from other relational tables and contain more information. Finally, produces the extended association rules through incorporating the antecedent and consequent rules. A standard ARM will produce a large number of rough rules and you have to waste time to process and select important rules. But, in our method, you don?t have to do this, because every rule has the finer pattern and contains important and underlying commercial information.

The organization of the rest of paper is as follows. In Section II, we describe the basic ideas of the distribution through an instance of multi-relational data. Section III introduces the GA and illustrates its application in multi-relational data mining together with the apriori algorithm. Section IV gives the experimental results. Section V is the conclusions and the future work.



II.  THE IDEAS OF THE DISTRIBUTED MINING  A. Multi-Relational Data Mining in Relational Database  Dimensional modeling, which is the most prevalent technique for commercial data storing, organizes tables into fact tables containing basic quantitative measurements of a  Distributed Multi-Relational Data Mining Based on Genetic Algorithm  Wenxiang Dou, Jinglu Hu, Kotaro Hirasawa and Gengfeng Wu      business subject and dimension tables that provide descriptions of the facts being stored. The data model that is produced by this method is known as a star-schema [13].

Figure 1 shows a simple star-schema model of a commercial database.

The order table contains the sale figures for each order transaction and the foreign keys that connect it to the three dimensions: Order Details, Customer and Employee.

A standard ARM discovers correlations among items within transactions. The correlations are expressed in the following form:  Transactions that contain X are likely to contain Y as well.

Letters X and Y represent sets of items. There are two important quantities measured for every association rules: support and confidence. The support is the fraction of transactions that contain both X and Y. The confidence is the fraction of transactions containing X, which also contain Y [2].

Consider the relational database depicted by Figure 1. A standard association-rule mining question is often defined as the following:  What products are frequently ordered together?

This question examines the order table as it relates to the product dimension only. But, this database has multiple dimensions, which are completely ignored by the above single-dimension question. A CEO or manager could ask more information to analyze, the question could be extended like this following:  What products are frequently ordered together and how much quantities and what?s the possible order date and how are the customers about these products.

This question examines multiple dimensions of the order table. So, standard ARM algorithms cannot find the answer to  this question directly. In fact, a standard ARM may not discovery any association rules in situations when there are several meaningful associations that involve multiple dimensions [7].

From the above question, we can see that every extended question asked by a manager is relative to the products that are frequently ordered and the additional attributes involved by these questions distribute in other relational tables respectively. Therefore, when we mine the frequent product sets, if we could get the information of their corresponding transaction sets (In this instance, the information is foreign key), then we can mine the extended rules from other relational tables in a distributed way through the foreign key.

Figure 2 shows our basic ideas of the distributed mining.

In the following we will define a new extended association rule to answer the extended question and give a solution about distributed mining.

B. Extended Association Rules  According to the extended questions and the ideas of distributed mining, we can aim at these products ordered by customers frequently and describe the additional information like this:  (Product1,Product2)=>(Quantity1=20,Quantity2=30,Or derDate=1996(80%),Customer=(Sales Administrator, Germany)(%70))  Formally, we define extended association rules as follows:  Definition: Let T be a relational database where X set of values of the chief attributes. Let Yi (i=1,2,?,n) be a set of values of the rest attributes from other relational table of T.

Then X => (Y1,Y2,?Yn) is an extended association rule with the following interpretation: Transactions that contain X are likely to contain (Y1,Y2,?Yn).

Though the extended association rules are natural extensions of the standard association rules, they contain  Fig. 1. Example Star-Schema.

Fig. 2.  Distributed Mining Idea.

2008 IEEE Congress on Evolutionary Computation (CEC 2008) 745    1 2 3 4 5  1 0 1 1 0 0  2 0 1 1 1 0  3 0 0 1 0 1  4 1 1 1 1 0  5 0 1 1 1 1  P d P d P d P d P d  T r a n s  T r a n s  T r a n s  T r a n s  T r a n s  Fig. 3.  Example Matrix Structure about transaction record  more concrete and diverse information. There are several distinct advantages. First, some underlying information can be found. For example, a manager wants to know what products are frequently ordered together and their quantities.

A standard ARM can find these products, but it can?t add up the quantity that every customer ordered. Or, he wants to know the order situation of the rule (Product1,Product2) in some year. If the rule just satisfies the minimum support and 80 percent of transactions containing the rule are ordered in 1996. Then, a standard ARM also cannot find the information, because the support of the rule (Product1,Product2,1996) is less than the minimum support. Second, containing more information makes it much easy to devise a marketing strategy. For example, according to the order date and quantities, general scale of production will be predicted and according to the information of customers, ships that can carry these products to the countries of customers will be prepared. Third, for the same support threshold, the number of discovered extended association rules is much less than the number of standard rules. The reason is that the extended association rules involve more attributes and these attributes will be mined by using distributed method. Thus transactions that support them fit a more detailed pattern than standard rules. Intuitively, standard rules show associations of a coarser granularity while the extended rules show finer associations.

C. Solution: Matrix Grouping Method  Now, let us return the question how to mine the multi-relational data. In the above depiction, we have proposed a method of distributed mining. Based on the ideas, we have to find a solution that can not only mine the frequent items, but also retain the information of the transaction set that contains these items. But, let us consider it on other way round. If we can find this transaction set of which some products are ordered in every transaction, then, we can get the rule from the transaction set. For finding these transaction sets, a matrix grouping method occurred to us. Let us see an example. Figure 3 shows a matrix structure about some transaction record.

Pdi (i=1?5) denotes some product and Transj (j=1...5) denotes some transaction. If Pdi is ordered by Transj, then we write 1 in the ith column of the jth row. Otherwise, we write 0.

In this example, we suppose that the minimum support is 60 percent. That means the rule must appear at least in three transactions. So, at first, we make each three transactions as a group. If there some products are ordered in every transaction of some group, then extracting these products as a rule.

For example, (Trans2,Trans4,Trans5)=>(Pd2,Pd3,Pd4), (Trans1,Trans2,Trans4)=>(Pd2,Pd3),(Trans1,Trans4,Trans 5) => (Pd2,Pd3) and so on. In this example, it can produce C5  3 groups and retain the groups that can get the rules. Second, we incorporate the groups that have the same rules and calculate the support for every rule according to size of groups. For example, incorporating (Trans1,Trans2,Trans4) => (Pd2,Pd3) and (Trans1,Trans4,Trans5) => (Pd2,Pd3), we can get (Trans1,Trans2,Trans4,Trans5) => (Pd2,Pd3) and its support will be 80 percent.

As we can see that the proposed matrix grouping method can not only find all the rules, but also retain the information of groups extracting these rules (the information is the foreign key be relative to other tables). Thus, this method can solve our distributed mining problem. However, if the database is large, for example, it contains one thousand, ten thousand or hundred thousand transactions. You can image how many groups will be produced by using the matrix grouping method.

In addition, most groups are useless because they cannot extract rules.

So, the matrix grouping method is just suitable for the small database. For enhancing the mining efficiency in large database, in the next section, we will introduce the GA, which adopts heuristic genetic operators to find those groups that can extract rules and avoid wasting more calculating time in the unmeaning groups, and its application for distributed mining together with apriori algorithm and statistic method.



III. GA BASED DISTRIBUTED DATA MINING  A. Genetic Algorithm with Modifications  As mentioned in the previous section, when databases are large, it needs an effective method for discovering the groups containing rules. GA, which is one of the evolutionary computation techniques, has powerful ability of global search and optimization [16] [17]. Thus, we combine GA and the grouping concept to find rules. It doesn?t like a matrix grouping method that produces all the groups for discovering rules. Our GA based method, which finds the groups containing rules as more as possible and avoid producing much more unmeaning groups through using heuristic genetic operators, will consume much less time than the matrix grouping method in large database.

The basic flow of this method is: First, let each transaction be a chromosome. The individual will consist of these transactions. Second, Initial individuals are the partition of transactions according to the minimum support. Third, executes heuristic genetic operators including selection, crossover and mutation on these individual to find rules.

Finally, incorporates all the groups to extract the antecedent  746 2008 IEEE Congress on Evolutionary Computation (CEC 2008)    Fig. 4.  Example Individual of GA  rules. Figure 4 shows an example of the individual.

Suppose the minimum support is set 3. So every individual  has three transactions. If an itemset appears in all transactions of the individual, we call the individual can produce a rule satisfying the minimum support. In this case, the individual can produce (Pd2, Pd3).

The population of our GA will become larger and larger along with the increase of the generation, because every discovered individual that can extract a rule will be retained for attending the latter genetic operation. Users can set the number of the generation or the number of rules as the end condition. So, it is also an advantage that GA can stop in any time and star form the stop position.

In the following, we will introduce the detailed implementation about the production of initial individuals, some parameters defined and genetic operators of the GA.

B. Initial Individuals Selection  For most genetic algorithms, a random policy is adopted to initialize individuals. But, for our problem of rule-mining, the group that cannot extract a rule is useless and a random police maybe produce many useless groups. So, we will use a special method to initialize individuals for avoiding producing this kind of group.

In an apriori algorithm, the frequent one-item set is the foundation for producing the latter frequent n-items sets. So, we initialize individuals from these transaction sets that can extract a rule containing at least one item.

Let us see Fig. 3 again. The frequent one-item set satisfying the minimum support 60 percent is (Pd2,Pd3,Pd4), and the transaction sets containing these items are respective (Trans1,Trans2,Trans4,Trans5),(Trans1,Trans2,Trans3,Tra ns4,Trans5) and (Trans2,Trans4,Trans5). So, the individuals will be initialized among these transaction sets. In this examples, the individuals will be (Trans1,Trans2,Trans4) (Trans5,Trans1,Trans2)(Trans1,Trans2,Trans3)(Trans4,Tra ns5,Trans1)(Trans2,Trans4,Trans5).This method not only can produce better groups for the latter genetic operation, but find all the rules at least containing one attribute.

C. Parameter Definition  Before introducing the genetic operators, some parameters should be explained  because they will be used in the latter operation. Let us use (Trans1,Trans2,Trans3) as an individual to illustrate these parameters (See Fig. 3).

Individual Identity (IVI), consists of the symbols of chromosomes in the individual. Every chromosome has a unique symbol that is the serial number of the corresponding transaction. This can distinguish these individuals. For example, the IVI of the individual (Trans1,Trans2,Trans3) is (1-2-3).

Chromosome Fitness (CF), reflects the probability that this chromosome is combined with other chromosomes to extract a rule. Formal definition is as in (1):  1 1  n i  i i  p CF  N a (1)  The n is the number of gene in the chromosome; N is the  number of total chromosomes; ip is the value of the ith gene  (0 or 1) and ia is the number of the ith gene that has the value 1 in total chromosomes. For example, about the individual (Trans1,Trans2,Trans3), CF(Trans1) is 3/2, CF(Trans2) is 11/6 and CF(Trans3) is 5/4.

Individual Fitness (IVF), is the number of items contained by the rule of the individual. It means that if the individual cannot extract a rule, then IVF is 0, otherwise, IVF is the number of items the rule contains. For example, because the individual (Trans1,Trans2,Trans3) can extract rule(Pd3), so the IVF is 1.

Upgrade Index (UI), shows a distance for getting or expanding the rule of the individual, and is denoted by a negative number. The larger the value of UI is, the more possible the rule is got or expanded through using genetic operators.

For example, the individual (Trans1,Trans2,Trans3) can extract rule(Pd3). But if Pd2 also is ordered in the Trans3, the individual can expand the rule as (Pd2,Pd3). So, the UI of the individual is -1. About the individual (Trans2,Trans4,Trans5), can extract rule(Pd2,Pd3,Pd4). If Pd1 can be is ordered in the Trans2 and Trans5, the individual can expand the rule as (Pd1,Pd2,Pd3,Pd4), So, the UI of the individual is -2.

Upgrade Genes (UG), is set of genes (items) needed by the individual for enhancing the UI. In most situations, we want to know not only whether the individual can produce rule, but also which genes contained by these chromosomes influence the rule to be produced or expanded. So, the UG can help us to answer the question. Let us see the above example. For the individual (Trans2,Trans4,Trans5), if we can find some transaction containing {Pd1,Pd2,Pd3,Pd4} to replace the Trans2 or Trans5, or transaction containing {Pd2, Pd3, Pd4, Pd5} to replace the Trans2 or Trans4, the UI of this individual will become -1. So, the UG of the individual is the set of {Pd1, Pd5}. When the value of UI reaches 0, it means the individual gets or expands the rule and the UI will be reset.

In the next phase, we introduce how to execute the genetic operation by using these parameters.

2008 IEEE Congress on Evolutionary Computation (CEC 2008) 747    D. Genetic Operators  Our genetic operators are like a standard GA including selection, crossover and mutation, but the implementation is different. Our objective is to find the individuals containing rules as more as possible according to the common feature of chromosomes. Therefore, we adopt heuristic genetic operators to search better individuals by using the above defined parameters. In addition, initial individuals will be as the reserved group and not attend the selection and mutation, because they contain all the information of transactions. Let us see the following genetic operators.

Selection: For retaining rules, we select all the individuals whose value of IVF is larger than 0. During the selection, for making each individual be unique, we exclude the individuals that have been selected according to the value of IVI.

Crossover: For not losing rules, our crossover operation will retain the parents. There are two crossover strategies: One is that selects chromosomes having different symbol to produce a new individual from both parents in terms of the value of CF. The larger the CF is, the more possible the chromosome is selected. Another is that checks whether there are some appropriate chromosomes that can make the UI of another parent enhance through replacing operation in a parent (See the definition of UG). If this kind of chromosomes exists, we produce a new individual by replacing other chromosomes of another parent .We pair the individuals randomly and adopt the two strategies for every pair.

Mutation: The objective of the mutation is to make the individual easy to get or expand the rule. The process of the mutation is to find some chromosome containing any union of the subset of the UG and items set contained by the rule of the individual to replace any chromosome of this individual, which can enhance the value of UI.

For example, the individual (Trans2,Trans4,Trans5) (See Fig. 2), can extract rule(Pd2,Pd3,Pd4) and its UG is{Pd1, Pd5}(See the definition of UG). So, the mutation of this individual is to find some chromosome containing {Pd1, Pd2, Pd3,Pd4}or{Pd2,Pd3,Pd4,Pd5}or{Pd1,Pd2,Pd3,Pd4,Pd5} to replace any chromosome of this individual, which can make the UI be -1.

When some individuals get or expand a rule through mutation operation, the UI and UG of the individuals will be reset. Otherwise, just UG will be reset and let UI equals to UI plus 1.

The mutation operation will scan total transaction set to find the appropriate chromosome. The best situation is to find it in the initial position and the worst doesn?t find. So, the mutation probability will be according to the value of UI. The larger the value of UI is, the more possible the individual takes place the mutation.

After satisfying the end condition, we incorporate all the individuals extracting same rules and calculate their support.

E. Flow of Distributed mining  Now, we can combine our GA with the apriori algorithm and statistic method to mine multi-relational data. The basic architecture of our distributed mining system is shown in Fig.5.

In relational databases, some attributes are unmeaning for commercial decision, for example, the fax or the phone of customers. So we just mine rules among the valuable attributes. The flow of the distributed mining will be shown as follows:  First, we extract valuable relational data from multiple tables through the foreign key and store them in the corresponding arrays according to the respective table belonged to by using uniform key to connect them. In here, we use the sequence number of array as the uniform relational key, because, in the latter, we can find the data of relational attributes quickly through the sequence number of array.

Second, we mine the antecedent rules among the chief attributes data (Generally, are the information of products) and produce corresponding relational key set of every rule by using our GA.

Third, mines the extended consequent rules from other arrays by using the apriori algorithm and statistic method in terms of the relational key set in a distributed way. The statistic method is in charge of mining the attribute needed to be added up. For example, the Quantity attribute in Order Details table (See Fig. 1).

Fig. 5.  System Architecture of Distributed Mining for the Multi-Relational Data Mining  748 2008 IEEE Congress on Evolutionary Computation (CEC 2008)    Finally, shows the extended association rules.



IV. EXPERIMENTS  For our experiments we used SQL Server2000 relational DBMS running on a 1.50GHz Pentium M with 504MB RAB.

The data we used is from the Northwind database of the SQL Server2000 and the relational structure is shown in Fig. 1.

The sizes of the tables are as follows:  The Order Details table has 2155 tuples.

The Order table has 830 tuples.

The Customers table has 91 tuples.

We select 77 kinds of products as the chief attributes to mine the antecedent rules and select Quantity from Order Details table, OrderDate from Order table and ContactTitle and Country from Customers table as the relational attributes to mine the extended consequent rules.

The minimum support is set 0.5% and the extended minimum confidence is set 40%.

We will find these antecedent rules containing at least two products.

Thus, the antecedent rules mined by using our GA will answer the following question:  What products are frequently ordered together?

The extended consequent rules mined by using apriori algorithm and statistic method can answer these additional questions as follows:  How much quantities, what the possible order date is and how the customers are about these products frequently ordered together.

Figure 6 shows the generations and the number of rules during the GA mining process.

Table I shows the experimental results after incorporating and extracting the rules containing at least two products.

Table II shows fourteen extended association rules.

In the proposed method, the GA found most antecedent rules. The matrix grouping method will extract antecedent  TABLE I THE EXPERIMENTAL RESULT OF RULES MINED BY THE GA  Quantity Accuracy of the  support Proportion of  total rules  Antecedent rules  14 92.86% 77.78%  TABLE II THE EXTENDED ASSOCIATION RULES  Antecedent rules Extended consequent rules  Product21, Product51 (0.60%)  Quantity21=81,Quantity51=66, Orderdate=(1997(60%)), Customers=((Sales Representative)(80%))  Product16, Product31 (0.84%)  Quantity16=243,Quantity31=182, Orderdate=(1997(42.86%),1998(42.86%)), Customers=((Sales Representative)(42.86%))  Product16, Product60 (0.72%)  Quantity16=196,Quantity60=280, Orderdate=(1997(50%))  Product31, Product51 (0.60%)  Quantity31=186,Quantity51=225, Orderdate=(1997(80%)),  Customers=((Sales Associate, Ireland)(40%), (Sales Manager)(40%))  Product21, Product61 (0.96%)  Quantity21=176,Quantity61=156, Orderdate=(1997(62.5%)), Customers=((Sales Representative)(50%))  Product16, Product62 (0.72%)  Quantity16=120,Quantity62=89, Orderdate=(1997(66.67%)), Customers=((Germany)(50%))  Product56, Product65 (0.60%)  Quantity56=197,Quantity65=101, Orderdate=(1997(60%),1998(40%)), Customers=((Sales Manager)(40%),(USA)(60%))  Product31, Product72 (0.72%)  Quantity31=194,Quantity72=199, Orderdate=(1996(50%))  Product60, Product71 (0.72%)  Quantity60=235,Quantity71=197, Orderdate=(1997(50%),1998(50%))  Product10, Product77 (0.60%)  Quantity10=130,Quantity77=132, Orderdate=(1998(80%)), Customers=((Accounting Manager)(40%))  Product30, Product54 (0.72%)  Quantity30=67,Quantity54=120, Orderdate=(1997(66.67%))  Product17, Product33 (0.60%)  Quantity17=158,Quantity33=86, Orderdate=(1998(60%)), Customers=((Sales Representative)(40%), (Owner)(40%), (USA)(40%))  Product55, Product62 (0.60%)  Quantity55=135,Quantity62=61, Orderdate=(1997(40%),1998(40%)), Customers=((Owner)(40%))  Product59, Product76 (0.60%)  Quantity59=131,Quantity76=80, Orderdate=(1997(80%)), Customers=((Marketing Manager)(40%), ( Germany)(40%)) Fig. 6. The number of rules and generations  2008 IEEE Congress on Evolutionary Computation (CEC 2008) 749    rules through producing C830 5 groups, while our GA just uses  23968 groups to produce rules. Finally, the extracted extended association rules satisfy the condition of importance and have the qualification for commercial decision. Therefore, we need not store, retrieve, prune and sort a large number of rules for classification as traditional method.



V. CONCLUSIONS  In this paper, we introduce a new data mining method to mine rules from multi-relational databases. Our approach has two novel points: One is the ideas of distributed mining by using GA and traditional apriori mining algorithm. Another is the definition of the new extended association rule for supporting the commercial decision better. In our experiment, the GA based method is more efficient on the antecedent rules mining than the matrix method and the distributed mining method is also different with other multi-relational data mining methods that need query-processing using SQL language. The extended association rule has finer pattern and contains more commercial information. Meanwhile, the number of rules is much less than the standard data mining method producing large candidate rules.

In the future research, we will apply our method to the real world databases with large data, and intend to combine the fuzzy logic and our method to predict data.

