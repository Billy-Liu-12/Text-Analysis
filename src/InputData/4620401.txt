

Abstract: In order to solve these problems how to easily generate  candidate frequent item sets and fast compute support of candidate item sets, an algorithm of association rules mining based on binary has been introduced. However, one presented binary mining algorithm is only suitable for mining some relative short frequent item sets since the way of generating candidate item sets is also similar to Apriori, another is only suitable for mining long frequent item sets, which generates candidate item sets by up-down search strategy. And so aiming to mining general frequent item sets, this paper proposes an algorithm of association rules double search mining based on binary, which is different from tradition association rules mining algorithm based on double search strategy. The algorithm doesn?t use combination of set theory to generate candidate item sets but binary logic operation that is also used to compute support of candidate item sets, which can use character digital to reduce the number of scanned transaction. The algorithm gets rid of shortage about some presented algorithms based on binary. The experiment based on above three algorithms indicates that the efficiency about double search strategy is fast and efficient when mining general frequent item sets which aren?t confined.

Keywords: Data mining; association rules; binary; double search;  digital transaction  1. Introduction  As we all know, traditional association rules mining algorithm Apriori [1] mainly wants to solve two problems: one is how to reduce the number of candidate frequent item sets and the times of browsing database, the other is how to easily generate candidate frequent item sets and fleetly compute the support of candidate frequent item sets. In order to solve the first problem, some algorithms were presented, such as Max-Miner [2], Pincer-Search [3], DMFI[6]     and DMFIA [7]. And then, in order to solve the second problem, some algorithms based on binary were presented, such as B-Apriori [8]. The kind of algorithm computes support by binary logic operation to indeed improve efficiency. However, the algorithm is merely suitable for mining relative short frequent item sets, if frequent item sets are too long, the efficiency of B_Apriori will be badly influenced. Another algorithm based on up-down [6] search strategy, denoted by B_DMFIA, is only suitable for mining long frequent item sets, too. And so this paper proposes an algorithm of association rules double search mining based on binary, denoted by B_ARDSM, which is suitable for mining general database where frequent item sets aren?t confined. The experiment indicates the efficiency of this algorithm is fast and efficient when length of frequent item sets isn?t known at all.

2. Basic notions and properties  Let I= {i1, i2?im} be a set of items, if ik (ik? I), let T= {i1 ? i2 ? ? ? im} (Tk ?I) be a subset of items, called a Transactions. For example, let Tk= {i1, i2, i3} be a subset of items, called a transaction. And then let D= {T1, T2?Tn}, let Tk ? I, (k=1?n) be a set of transactions, called Transaction Database (TD).

Definition 1 Binary Transaction (BT), a transaction is expressed as binary, binary transaction of transaction T is expressed as BT=(b1 b2?bm), bk? [0,1], k=1?m, if ik? Ti, and then bk=1, otherwise bk=0 ,the order of binary digits is as same as items which have been fixed.

Example, let I={1,2,3,4,5} be a set of items, if a transaction is expressed as Ti={2,3,5}, and then BTi=(01101).

Definition 2 Digital Transaction (DT), which is an integer, the value of which would be obtained by turning binary transaction into algorism.

Example, if BT=01101, and then DT=13.

Definition 3 Digital Transaction Length (DTL), which is an integer, the value of which is equal to the number of digital ?1? that is contained by digital transaction.

Example, if DT=13, and then DTL=3.

Definition 4 Binary Item (BI), which is a binary  transaction that only expresses an item in item sets of traditional transaction database. The sum of BI is equal to the number of items in transaction database.

Example, let I={1,2,3,4,5} be a set of items, there are five binary items which are expressed as follows:  BI1=(10000), BI2=(01000), BI3=(00100), BI4=(00010), BI5=(00001).

Definition 5 Relation of digital transaction accord with relation of transaction set.

Example, suppose digital transaction of a transaction T1 is denoted by DT1, digital transaction of a transaction T2 is denoted by DT2. If T1 ?T2, and then DT1 ?DT2, DT1 is regarded as subset of DT2, DT2 is regarded as superset of DT1.

Definition 6 Frequent Digital Transaction (FDT), which is a digital transaction, the support of which excess minimal support given by users.

Definition 7 Candidate Frequent Digital Transaction (CFDT), which is a digital transaction that will become frequent digital transaction when the support excess minimal support given by users.

Property 1 The given binary transaction uniquely corresponds to a digital transaction, vice versa.

Property 2 Let p and q be binary transactions with m bits, let Tp be transaction about p, let Tq be transaction about q, then Tp ?Tq ?p ? q=p.

Proof Suppose digit 1 locates each bit of binary p from ij1 to ijk (jk?m), digit 0 locates other ones. If p and q=p, then digit 1 locates each bit of binary q from ij1 to ijk (jk?m) (otherwise these bits must occur digit 0 with logic ?and? operation), other ones will be either 0 or 1, so Tp ?Tq according to definition 1.

And then via the hypothesis about p as before, since Tp ?Tq , then digit 1 must locate each bits of binary q from ij1 to ijk (jk?m) (otherwise, ? ik, so ik? Tp , ik ? Tq, the conclusion is contrary to premises as Tp ?Tq), other ones will be either 0 or 1, so p ? q=p.

Via theorems as before, two conclusions are deduced.

Conclusion 1 Let p and q be binary transactions, let  DTp be digital transaction about p, let DTq be digital transaction about q. If p ? q=p, and then DTp ?DTq.

Conclusion 2 Let p and q be binary transactions, let Tp be transaction about p, let DTp be digital transaction about p, let Tq be transaction about q, let DTq be digital transaction about q. If DTp?DTq, then Tq ? Tp.

Property 3 Let p and q be binary transactions with m  bits, let Tp be transaction about p, let Tq be transaction about q, and p ? q=p, let F be frequent item sets.

If?  Tq ?F, then Tp ?F.

If?  Tp ?F, then Tq ?F.

Proof Since p ? q=p, via property 2, then Tp ?Tq, and  Tq ?F, based on set theory, then Tp ?F. If Tp ?F, then Tq ?F as the same theory.

3. Double search mining algorithm based on binary  3.1. The process of double search mining  Let I={i1,i2?im} be a set of items, if candidate frequent digital transaction is denoted by CFDTk, where k is equal to the number of items in CFDT, and is also equal to digital transaction length (DTL), digital transaction of BIk are denoted by DTk.

Step1: Creating mining database, according to definition 1 and 2, original data are changed into mining database on descending of digital transaction. Each transaction includes ?value? and ?count?.

Step2: Computing all support of DTk, if support? minimal-support and then writing DTk to FDTa and Ca which is a set of candidate, otherwise DTk is written to non-frequent digital transaction which is denoted by NFDT.

Step3: Generating the first Ck= {i1,i2?im}(k=m) which is denoted by CFDTbk, if CFDTbk is superset of DTk in NFDT, CFDTbk will be written to Cb which is a set of candidate, otherwise, and then calculating support of CFDTbk. If support?minimal support, then CFDTk is written to FDTb, otherwise, CFDTbk will be written to Cb.

Step4: Using CFDTat-1 in Ca to generate CFDTat that isn?t subset of every FDT in FDTb, and then computing support of CFDTat, if support?minimal support and then writing CFDTat to FDTa and Ca after pruning subset of CFDTat in FDTa, otherwise CFDTat is written to NFDT.

Step5: Using CFDTbk in Cb to generate CFDTbk-1 that is neither superset of every DT in NFDT nor subset of every FDT in FDTb, if CFDTbk-1 is superset of DT in NFDT, CFDTbk-1 will be written to Cb, otherwise, and then computing support of CFDTbk-1, if support?minimal support and then writing CFDTbk-1 to FDTb, otherwise, CFDTbk-1 will be written to Cb.

Step6: Repeating executing from step 4 to 5 until DTL of CFDTbk is equal to [m/2], or the number of CFDTbk or CFDTak is equal to 0.

Step7: Generating frequent digital transaction which is obtained by combining FDTa and FDTb on descending of digital transaction.

Step8: Generating digital association rules according to frequent digital transaction.

Step9: Changing digital association rules into normal association rules according to definition 1 and 2.

3.2. The key technologies of mining algorithm  As we all know, it is the most key technology for association rules mining algorithm to search frequent item sets which includes generating candidate frequent item sets, pruning redundancy candidate frequent items and computing support of item sets. Aiming to the basic notion of B_Apriori and up-down searching strategy of traditional association rules, the algorithm applies three key technologies which are expressed as follows:  1. The way of generating candidate frequent digital transaction  The algorithm of generating candidate digital transaction from CFDTat-1 to CFDTat is similar to B-Gen[8] (Lk-1) in B-Apriori, which is expressed as follows:  The algorithm of Up_Candidate (int [] Array) will return CFDTat after inputting CFDTat-1.

(1)  Array [0]=num; (2)  For (i=1; i?Array [0]; i++) { (3)   For (j=i+1; j?Array [0];j++) { (4)     C= Array [i] or Array [j]; (5)     If (C?S) (6)       Write C to S on descending; (7)   } (8)  } (9)  Return S; The algorithm of generating candidate digital  transaction from CFDTbk to CFDTbk-1 is expressed as follows:  The algorithm of Down_Candidate (int [] Array) will return CFDTbk-1 after inputting CFDTbk.

(1)  Array [0] = CFDTbk; (2)  c=0; (3)  For (i=1; i?m; i++) { (4)    If (DTi ? Array [0]) (5)   Array [++c] =Array [0]& (~ DTi); (6)  } (7)  Array [0]=c; (8)  Return Array; 2. The strategy of pruning redundancy candidate  frequent items Firstly, the algorithm uses property 3-?, that subset of  frequent item sets is frequent items, to prune redundancy candidate items when up generating candidate frequent items. Secondly, the algorithm uses property 3, that superset of non-frequent item sets isn?t frequent items and subset of frequent item sets is frequent items, to prune redundancy candidate items when down generating candidate frequent  items.

3. The way of computing support of items The algorithm uses binary logic ?and? operation to  compute support of items, especially, the key point is different from the other algorithms, that the algorithm uses digital character to reduce the number of scanned transaction in order to improve efficiency. Digital character is expressed as conclusion 2 in property 2, means the algorithm only scans these digital transaction which aren?t less than candidate frequent digital transaction.

Example, if there are 10 digital transactions in database D={63,61,60,57,56,55,48,45,31,29}, CFDT=48, the number of scanned transaction is equal to 7, i.e. transaction in {45,31,29} isn?t scanned to reduce the time.

3.3. The algorithm of double search mining  Firstly, we define following signs: DT0: expressing digital transaction of {i1, i2?im}.

DB: expressing database with N digital transactions in  a descending order.

DTi: expressing digital transaction in DB, which  includes two domains, value and count.

Fa: saving FDT of up generating.

Fb: saving FDT of down generating.

F: saving FDT of searching of algorithm.

NF: saving non-frequent digital transaction.

Ca: saving CFDT of up generating.

Cb: saving CFDT of down generating.

The algorithm is expressed as follows:  (1)  For (all DTk? BI) { (2)    If (Support (DTk) ?support) (3)     Write DTk to Fa and Cat; (4)    Else (5)     Write DTk to NF; (6)  }//beginning to up generate candidate items (7)  Write DT0 to Cbk; (8)  While (Log=true) { (9)    For (all CFDTbk? Cbk){ (10)    If (each NF ? CFDTbk) { (11)      If (Support (CFDTbk) ?support) (12)         Write CFDTbk to Fb; (13)      Else (14)         Write CFDTbk to Cbk-1; (15)     }//searching frequent item sets in Cbk; (16)    Else (17)      Write CFDTbk to Cbk-1; (18)    } (19)   For (all CFDTbk? Cbk-1) { (20)    Down_Candidate (CFDTbk); (21)    If (each CFDTbk-1 ? Fb)      (22)     Write CFDTbk-1 to Cbk-1 without repeating; (23)    }//down generating candidate items (24)   If (k! = [m/2]) { (25)    Up_Candidate (Cat); (26)    For (all CFDTat+1 ?  Fb) { (27)     If (Support (CFDTat+1) ?support) (28)      Write CFDTat+1 to Fa and Cat+1; (29)     Else (30)      Write CFDTat+1 to NF; (31)     }// searching frequent item sets in Cat; (32)   } (33)   Else (34)    Log=False; (35)   If (Cat+1 or Cbk-1 = ? ) Log=False; (36)    t++; (37)    k--; (38)  } (39)  Write Fb and Fa to F after pruning subset of Fb.

Support (int DT)  (1)   While (i?N&&DT?DBi.value) { (2)     If (DT ?DBi.value) (3)       support+=DBi.count; (4)     i++; (5)    } (6)   Return support;  4. Comparing capability of algorithms  Aiming to the algorithm of B_Apriori represented by reference[8] and the up-down search strategy of traditional association rules, this paper proposes an algorithm of association rules double search mining based on binary. We compare capability of these algorithms which are expressed as follows:  B_Apriori: The algorithm generates candidate frequent item sets which contain the number of items from fewness to many. However, if the number of item contained by frequent item sets is too many, the algorithm will generate a lot of candidate frequent item sets, repeatedly scan database and compute support, and because of these the efficiency of B_Apriori is too bad at the time of mining long frequent item sets. Hence, the algorithm is suitable for mining relative short frequent item sets and the number of which is every many.

B_DMFIA: The algorithm generates candidate frequent item sets which contain the number of items from many to fewness. However, if the number of item contained by frequent item sets is too few and the number of frequent item sets is too many, the algorithm will generate a lot of candidate frequent item sets, repeatedly scan database and compute support, and so because of these the efficiency of  B_DMFIA is also too bad at the time of mining short frequent item sets. Hence, the algorithm is suitable for mining long frequent item sets.

B_ARDSM: Generating candidate frequent digital transaction DTL of which is from maximum and minimum to middle. Hence, the algorithm is suitable for mining general database where frequent item sets aren?t confined.

Now we use result of experiment to testify above analyses. We use three mining algorithms to generate frequent item sets from these digital transactions, which are expresses as digital from 3 to 4095, these digital transaction don?t include any binary items, and so m=12, N=4083. Our experimental circumstances are expressed as follow: Intel(R) Celeron(R) M CPU 420 ? 1.60 GHz, 512MB, language of the procedure is Visual C# 2005.NET, OS is Windows XP Professional.

The result of three algorithms generating frequent item sets is expressed as figure 1 (a) and (b), here is absolute support. As the support of frequent item sets changes, the executed time of algorithms is expressed as figure 2 (a), as the length of frequent item sets changes, the executed time of algorithms is expressed as figure 2 (b). As the length of long frequent item sets changes, the executed time of two algorithms is expressed as figure 3 (a), and as the length of short frequent item sets changes, the executed time of two algorithms is expressed as figure 3 (b).

According to the result of experiment, we can draw a conclusion expressed as follows:  The efficiency of B_ARDSM is more efficient than B_Apriori when mining long frequent item sets, and is more efficient than B_DMFIA when mining relative short frequent item sets. In fact, we don?t know the length of frequent item sets before mining association rules, and so it is efficient and fast for B_ARDSM to mine general frequent item sets.

Figure 1 (a), Support=12%, length=3       Figure 1 (b), Support=1.2%, length=6      24% 12% 5% 2.40% 1.20% 0.50% 0.24% 0.12% 0.07%  Minimal Support  Ru nt  im e(  mi l li  se co  nd )  B_Apriori  B_ARDSM  B_DMFIA   Figure 2(a). The executed time of three algorithms as changing of support   2 3 4 5 6 7 8 9 10  Length  R u nt  i m e ( M il  l i s e co  n d )  B_Apriori  B_ARDSM  B_DMFIA   Figure 2(b). T The executed time of three algorithms as changing of length    6 7 8 9 10  Length  Ru nt  i me  (M i ll  is e co  nd ) B_Apriori B_ARDSM   Figure 3(a). The executed time as length is long         2 3  Length  R u n t i m e ( M i l l i s e c on  d ) B_ARDSM  B_DMFIA   Figure 3(b). The executed time as length is short  5. Conclusions  The algorithm of association rules double search mining based on binary in this paper is suitable for mining general database where frequent item sets aren?t confined.

The experiment indicates the efficiency of this algorithm is fast and efficient. The algorithm uses binary logic operation to generate candidate frequent item sets and compute support of item sets, and uses digital character to reduce the number of scanned transaction. The algorithm includes the two basic strategies of traditional association rules in generating frequent item sets, which is different from tradition association rules mining algorithm based on double search strategy. It is the most suitable for mining general candidate frequent item sets when length can?t be known at all.

Acknowledgements  This work was fully supported by a grant from the S&T Foundation of Chengdu Sci.&Tech. Bureau. (Project No. 06GGYB801GX-032).

