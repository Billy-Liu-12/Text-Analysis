Reverse Engineering Using Association Rules

Abstract  sC)ftMJat"t systems need fo evolve as business requirements, technology and environment change.

Very qfien, these changes to fhe sofiware are not docrimen fed, hence it becomes diyficult to undersfand arid inenage such systems. To gain systein ziiiderstanding when docirmenfation is non-e.uisten[ or incomplete, we use reverse engigineering. In this paper, we e.rplore the m e  of &a mining fou sofmare reverse engineering i.e. given the sowcc ,files of a software system, we use association nrle mining algorithm and tools to gain insight about the sofiware. Our purpose is to determine whether association rule miriing con be used ,for Jinding interestitig palfenis and associations within fhe sofhcire, ihcit can lead to progr-am understanding and, if required, re-s~rticiiirirg. We apply association nile milling IO a test system und present our results.

Find$ we analyze our resirlt.7 and suggest mod$cations to irnprove the strucfuve qf the sofhvare .

Inda  Tcrms - Rewrse Engineering, Program Uiidwsta!iding, Daia Mining, Associaf ion Rides  1. Introduction  Legacy systems are old software systems that are crucial to the operation o f  a business, These systems arc expected to have undergone changes in their lifetime due to changes in requirements, business conditions and technology. It is quite likely that such changes were made without proper regard to software engineering principles. The result is often a deteriorated structure, which is unstable but cannot be discarded because i t  is costly to do so. Moreover, another reason for retaining these legacy systems i s  that they embed business knowledge which is not documented elsewhere.

Since it is often not feasible to discard a system and develop a new one, techniques must be employed to improve the structure of the existing system. An effective strategy for change must be devised; reengineering is one such strategy. Re-engineering is a process that transforms or re-implements legacy systems to make them more maintainable. The re- engineering option shodd be chosen when system quality has been degraded by regular change, but change is still required i.e. the system under consideration has low quality but a high business valuc, and the reengineering effort is less risky and less costly than system replacement.

The re-engineering effort starts with gaining an understanding of the software system, a process known as reverse engineering. Gaining system understanding is difficult because documentation for the system is often not available and source code files are the only means of information regarding the system. In this paper, we explore the use of association rule mining for software reverse engineering i.e. given the source files of a software system, we use association rule mining algorithms and tools to gain understanding and insight about the software. The understanding gained allows suggestions for making subsequent changes and optimizations to the source code for bettcr maintainability.

In recent years, there has been growing interest in the application of data mining techniques to gain better understanding of software systems.

Researchers have applied data mining techniques in different contexts e.g. to recover the architecture of software legacy systems [ I ]  - [3], to discover pattems for re-using software library components [4], [ 5 ] ,  and to support software system maintenance [6], [7 ] .  In  0-7803-8680-9/04/$20.00 02004 IEEE. INMIC 2004    this paper, our focus is on the use of association rule mining for discovering patterns within the source code that are helpful in system understanding and improvemcnt. The organization of our paper is as follows. In section 2 we present an overview of association rule mining. Section 3 details our approach. Section 4 gives the results of applying association rule mining to a test system. Finally, we present thc conclusions.

2. An overview of association rule mining  Association rule mining is a data mining technique that finds interesting association or correlation relationships among a large set of data items [XI.

Traditionally, association rule mining has been employed as a useful tool to support: business decision making by discovering interesting relationships among business transaction records.

To illustrate the concept of association rule mining, consider a set of data items I = {i,, i2,  in).

Let D be a set of transactions, with each transaction T being a subset of I i.e. T C  I .  An association rule is an implication of the form A -  B where A C I , B c  I and A n s = d .  As an example, consider a set of computer accessories (CDs, memory sticks and microphone, speakers) that are available at a certain store. These accessories form the set of items I of interest to us. Every sale made represents a transaction T. Suppose the sales made are represented in the form of the following set of transactions D:  Transaction ID 1 Items Sold T1 I CD, memory stick T2 I CD T3 I Microphone, speaker I :; I CD, ,? speaker, 1  Micro hone Memory stick, micro hone, s eaker  Association rules in the above case represent the iteins that tend to be sold together e.g. the association rule CDaSpgaker shows that those who buy CDs also tend to buy speakers.

A number of such association rules may exist in a given set of transaction and not all of them may be of interest. To find interesting rules, support and confidence thresholds are used. Support represents the percentage of transactions in D which contain both A and B. Confidence is the percentage of  transactions in D containing A that also contain B.

Mathematically:  Confidence ( A  -B)= P(B I A ) An association rule is said to be strong if it  satisfies both a minimum support threshold and a minimum confidence threshold.

Another measure of interest is coverage. The coverage of an association rule is the proportion of transactions in D that have the items specified on the left hand side of the rule. Mathematically: Coverage ( A  3 B )  = p( A )  support ( A  3 B )  = P ( A  LIB).

For the association rule CD Speuker, support is 115, confidence i s  113 and coverage is 315. An interesting association rule in this case is MicrophoneSpeaker,  for which Support 1s 3/5, confidence is 1 and coverage is 315.

3. Our rule mining approach  3.1, Item selection  The first step in our approach is to identify items to be used in mining. For generating results from source code files, these items should be ?facts? about the software that exist in the form of ?transactions?.

Most of the legacy software systems that exist have been developed using the structured approach, with functions or routines forming basic components.

Moreover, in legacy software, the use of global variables is often widespread leading to difficulty in understanding the code. ?In view of these facts, we decided to use both functions and global variables as items. Moreover, we also decided to use user defined types. The reason is that user defined types become potential objects when code is to be re-structured as object-oriented code.

Thus the guiding principle for item selection is to select iteins and identify association rules which facilitate understanding of the code and allow suggestions for re-structuring the code for greater maintainability. Three sets of transactions based on these items are used. These are: - The set of functions along with global variables  accessed by them The set of functions along with user defined types accessed by them The set of functions along with function calls to other fimctions  The fourth set is a consolidated set consisting of functions with global variables, user defined types  -  -     accessed or function calls made. Place the global variable in a ?register?, but do this carefully, keeping all constraints in view. Some languages may not allow such placement at all.

3,2. Identification of interesting association rules  In this step, we identify the interesting associations between global variables, types and functions, As pointed out previously, those association rules will be of interest to us that help in understanding the code and in improving its structure and maintainability. In the table below, we list these association rules, detail their implication and offer suggestions for improvement, We use both minimum and maximum thresholds of the three measures, coverage, support and confidence. We consider the range 0.7 to1.O as high for any measure and 0.0 to 0.3 as low. It is relevant to note that if we employ user defined types, functions and global variables as items, and use coverage, support and confidence criteria with values zero, low, high and one, the number of possible association rules exceeds 1500.

The 13 association rules listed below represent a small subset of the total possible association rules.

They have been selected because they represent meaningful patiews that provide insight into the software system under study. Patterns were first adopted by the software community as a way of documenting recurring solutions to design problems 191. The patterns presented below help in identifying problems in legacy software and also offer suggestions for improvement.

Pattern 1: Reduce level of coupling  LHS R HS Coverage  Implication: Only a small number of functions use the global variabIe on the LHS.

Suggestion: Rather than using the variable as a global variable, pass it as a parameter within the relevant functions.

Global (Single) Function LOW  Pattern 2: Increase efficiency  LHS RHS CO veruge Global Function High (SinglcMultiplc  Global variable(s) on LHS is used by most of the functions.

LHS RHS Confidence Function Function High (Single) Implicalion: Functions are caIled together.

Suggestion: Place the hnctions in the same file.

Pattern 3: Locaiize structures  LHS RHS Confidence Global Function One (Multiple) Implication: The global variables are used by one function only.

Suggestion: Place global variables in one local structure.

Pattern 4: Identify utilities  LHS RHS Coverage Function Function High (Single) Impiicairon: Function on LHS is called by most of the functions.

Suggesfion Treat the function as a utility hnction.

Pattern 5: Increase modularity  LHS RHS Co@dence Global Global High (SingleMultiple  Implication: GlobaIs ate used together.

Suggestion.

LHS RHS Confidence Type Type High (SingleMultiple  Implication: Types are used together.

Suggestion: Combine the tvues into a structure.

1 Suggestion:     Pattern 6: Reduce memory requirements  LHS RHS Canjidence Global (Single) Global Zero Implication: Globals are never used together.

Suggesrioii: Combine the globals into a union structure.

LHS RHS Confidence Type Type Zero (SingleiMuItiple  Implicution: Types are never used together.

suggestion:  Pattern 7: Beware o f  side effects  LHS RIfS Confidence Function Global High (SingleiMultiple  Implication: The functions have high coupling, Suggestion: If any one of the functions is changed, take care how  Pattern 8: Strengthen encapsulation  LHS RHS Con$dence Function Type High (SingleiMultiple  Implication: The knctions access the same type in most cases Suggestion: If  we are considering converting a ?structured? system to an ?object-oriented? system, the type is a candidate class and the functions are its member functions.

LHS Confidence Global (SingleiMultiple  )  Implication: The global and type occur together in all cases.

Suggmtion : If we are considering converting a ?structured? system to an ?object-oriented? system, the type is a candidate class and the global variable is a static data member.

LHS RHS ConJidence Type Global One (Multiple) Implication: The types and global variable occur together always.

Suggestion: If we are considering converting a ?structured? system to an ?object-oriented? system, the types are candidate classes inherited from a base class that has the global variable as a static data member.

4. Experiments and results  4.1 The test system  The software we have chosen tbr applying association nile mining is Xfig version 3.2.3, which is an open source drawing utility that runs under the X Window System. It has been written in C, and consists of around 75,000 lines of code. The design documentation of Xfig is not available, although the user manual and other usefd information is available at the Xfig site [lo].

The Xfig system consists of five major subsystems, whose source code files can be identified by their names. Some relevant statistics of these sub- systems are provided in the table below:  In this paper we present the results for the d-files subsystem only. The results and analysis can be extended to the other 4 subsystems as well.

The source files, for the Xfig system have been parsed using the Rigi tool and relevant ?facts?, which represent the transaction set related to the system, have been stored in an exchange format called the ?&gi Standard Format (RSF)? [ l  11. Facts of interest to us include:  - - -  Global variables accessed by a function User defined types accessed by a function Functions called by a function     4.2 Analysis of results  Type TY pe High  In the Xfig software, some types satisfy this condition, for example F-line and F j o i n t .  This shows that these types always occur together and can be turned into a structure or class for a meaningful interpretation and restricted access if  required,  (SinglclMultiple)  In this section, w e  present the results of  applying association rule mining to the d*-files subsystem of Xfig and analyze the results using the patterns identified in section 3.2. The d-files subsystem consists of 94 functions. Moreover, thc Xfig system makes use of 1746 global variables and 828 user defincd types.

Application of Pattern 1  LHS RHS Coverage Globat (Single) Function Low In the Xfig software, there are a number of global variables satisfymg this condition. This shows that many global variables are being used by very few functions and can be passed as parametcrs. The fact that they have been defined as global shows poor design or a design that has deteriorated.

Application of Pattern 2  L HS R f f S  Cuvernge Global Function High (SingleiMultipIe) In the Xfjg software, there are no  global variables satisfying this condition. This shows that no global variable is  used by most of the functions. This indicates a better design than one where many functions access a global variable, thus increasing coupling. So the system exhibits some degree of common coupling, but this coupling is not between all functions.

LHS RHS ConJdence Function Function High (Single) In the Xfig software, some functions satisfy this condition. For example, make-sfactors and spline-drawing-selected are always called together. I t  would be helpful to place the hnctions in the same file to decrease overhead of accessing the functions froin two different files.

Application of Pattern 3  global variables that are used by only one function.

For example, the global variable cur-arctype** and function d-lj.ne occur together in all cases. In  Application of Pattern 4  LHS RHS Coverage Function Function High (SingIe) In the Xfig software, there are 110 fiinctioiis satisfying this condition, which implies that no fmctian is called frequcntIy by many functions. This shows that there are no functions which can bc termed as utility functions.

Application of Pattern 6  L IiS RHS Cmfideiice Global (Single) Global Zero In the Xfig software, there are no global variables satisfjiing this condition. This shows that no two global variables are such that if one is accessed, the other is not accessed. In other words, no two global variables are mutually exclusive.

L f-Is R HS CunJdence Type Type Zcro (SingleiMultiple) In the Xfig software, there are no types satisfying this condition. This shows that no two types are such that if one is acccssed, the other is not accessed. In other words, no two types arc mutualIy exclusive.

Application of Pattern 7     L HS RHS Cocfidence Function Global High (SingleiMultipk) In the Xfig software, some functions and global variables satisfy this condition. For example, new-text fhct ion and the global variable new-t** have high coupling. This does not indicate a good design, since a change in the global variable cannot be traced to a particular function.

Application of Pattern 8  LHS RHS Confidence Function Type High (SingleiMultiple) In the Xfig software, some functions and types satisfy this condition. For example, ada-subspl i n e r i o i n t  function accesses type F-sfactor in most cases. In case xfig is to be re- structured as an object-oriented system, F-s f a c t o r is a candidate class and add-spline-point is a candidate member function of this class,  L HS R HS ConJidence Global Type One (SingldMultiple) In thc Xfig software, some global variables and types satisfy this condition. For example, the global variable cur_boxradius^*and type F-line occur together in all cases. In case Xfig is to be re- structured as an object-oriented system, F-line is a candidate class and cur-boxradius** is a candidate static member for this class.

LHS RHS Con$dence Type Global On e (Multiple) In the Xfig software, some types and global variables satisfy this condition, for example, the type F-arc and global variable c e n t e r j o i n t ^ *  occur together in all cases. In case Xfig is to be re-structured as an object-oriented system, F-arc is a candidate class and c e n t e r g o i n t  * *  is a candidate static member for this class.

5. Conclusions  In this paper we explored the application of association rule mining to the problem of understanding a software system given only the source code. We applied association rule mining to analyze thc structure of Xfig, which is a reasonably large software system consisting of 75,000 lines of code. Extracting interesting and meaningful association rules was helpful in gaining insight about  the software?s overall structure. A manual inspection would have taken a much longer time.

Our results show that association rule mining can be applied to find interesting association between functions, types and global variables within the source files. These associations can be used to gain deeper understanding of the code, and may be used to restructure the code for maintainability. In some cases, the associations found can be helpful in re- modularizing the code, e.g. in converting a structured design to an object-oriented design.

It will be interesting to pursue the mining of associations between items other than the ones cxplored here. We have considercd global variables, user defined types and functions in this paper.

Association between other items such as input?output parameters of functions, setigct of variablcs etc. may also provide insight into the software. Moreover, it may be useful to identify other interesting association d e s  that throw light on other aspects of the software system, leading to a more complete picture.

