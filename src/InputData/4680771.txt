Mining Preferred Browsing Paths Based on

Abstract?Mining preferred browsing paths from web logs can  help improve the structure of web sites and increase the click-  stream. In this paper, an algorithm of mining preferred browsing  paths based on adjacency list model is proposed. The web pages  are denoted by vertexes of a directed graph and the topology  structure of web sites is represented by adjacency list models  based on the support-preference concept. Moreover, preferred  browsing paths are discovered by using depth first search  method. Experimental results show that the algorithm can  maintain accuracy but have better efficiency than the NPPMA  algorithm does.

Keywords-web logs; user identification; adjacency lists;  support- preference

I. INTRODUCTION  Web logs contain a lot of user browsing information. By mining the information effectively and analyzing the click- stream of users, we can get the general knowledge about user access manners and behaviors. It is useful to discover paths users are interested in and provide personal services by usage analysis [1-4].

An important topic of web log mining focuses on the discovery of user preferred browsing paths. This work consists of two major steps: obtain user-browsing sequences and mine preferred browsing paths from the sequences. In searching for user browsing sequences, the maximal forward sequence algorithm involves sequential pattern generation according to path traversal patterns with user characteristics [5]. Reference length approach involves sequential pattern generation according to the time that users spend on each web page [6].

NPPMA algorithm treats users as a whole from the perspective of web sites, introducing the concept of support- reference. Preferred browsing paths are extracted from web logs according to the set support-preference threshold [7].

Generally, association rules are used to mine frequency- browsing paths from click-stream sequences. Based on association rules, Apriori algorithm adopts an approach to scanning browsing sequences repeatedly and generating a large number of candidate sets to finally obtain frequent item sets [4]. Han et al. proposed FP-Growth, which doesn?t need to generate candidate sets to discover frequent patterns but develop a FP-tree storage structure for mining the complete set  of frequent patterns [8]. Based on the algorithms, other maximal frequent item set mining algorithms are discussed.

As to preferred browsing paths mining, the maximal forward sequence algorithm (MFSA) is one of the most commonly used ones. MFSA algorithm obtains user-browsing sequences on the basis of the accuracy of user session identification, and it requires effective web logs preprocessing, which is still a difficult task so that MFSA algorithm is restricted. Moreover, NPPMA algorithm only needs data cleansing and simple user session identification, deals with the various factors affecting web page browsing frequency. The concept of support-preference degree is also proposed in the algorithm, which accurately reflects the ratio of the intensity under the constraint of the specific web structure to average values. In contrast, it is not very accurate for MFSA algorithm to denote user interests with user browsing frequency directly.

Although NPPMA algorithm is more scalable and efficient than MFSA when applied to the specific site structure, efficiency of mining preference paths with NPPMA is still lower, since there are usually many hundreds of URLs in a web site with the development of e-business. Time complexity  of merging preference paths in NPPMA is O N3  where N is the number of URLs in a web site [7]. NPPMA adopts step- by-step combination of sub-paths to obtain preference- browsing paths, but it seems to be better to describe the time complexity with preference sub-paths obtained while FPSA algorithm is used to improve the complexity [8].

Therefore, an efficient preferred browsing path algorithm is needed to handle complex e-business web sites as well as to maintain the accuracy of NPPMA algorithm. Actual links to each page are far less than the total number of URLs in a web site. User access matrix is a typical sparse matrix, which describes a web site as a directed graph. In the directed graph that is stored in an adjacency list, each URL is denoted as a vertex and each access to a certain page as an edge. In this paper, ALMPPMA algorithm, adjacency list model preferred path mining algorithm is proposed. Users are firstly treated as a whole, the support-preference concept and a choice-support adjacency list are given. Based on the adjacency list, support- preference threshold is set and preferred browsing sequence adjacency lists are filtered with the path length limited to 2.

Then, depth-first search method is used to acquire all preferred browsing paths and hash tables are used for the storage of  *corresponding author     browsing sequences in order to avoid iterative search.

Theoretical analysis and experimental results both show that ALMPPMA algorithm is more effective than NPPMA algorithm.



II. BASIC CONCEPTS  This section introduces several basic concepts, methods and models for ALMPPA algorithm, including user identification from web logs, the support-preference concept and the adjacency list model.

A. User identification  The preferred browsing path mining begins with user identification from web logs. This process becomes very complicated because of local cache, companies? firewall and proxy servers etc. User cooperation is necessary. But restricted to the privacy protect, the method is often difficult to function.

The often used method is heuristic rules, which are not very accurate on user identification. Nevertheless, cookie technology combined with web logs for identifying user usually achieves higher accuracy provided that the majority of users are willing to use cookie. The key of the method lies in how to set the cookie. To uniquely identify a user, each user?s cookie should be unique. So cookies include IP addresses in web logs, user browsers and operating systems, along with a 10-bit random number. Such information may result in reasonable cookie values as followings:  ? When users? IP addresses are different, cookie is different.

? When users? IP addresses are the same, we can distinguish users by browsers and operating systems used.

? When users? IP addresses, browsers and operating systems are all the same, we assume that users use proxy servers. Then an IP address corresponds to several computers in a LAN (local area network) and a10-bit random number can distinguish between computers. For example, if there are 10 computers within a LAN, the probability to have two computers with the same cookie is less than one ten billionth. To make the probability even lower, we can increase the random number.

Accurate user identification has an important influence on preferred browsing path mining algorithm. Suppose that most of users allow for cookie, this paper combines cookie technology with web logs to identify users.

B. Support-preference concept  If a user has n different choices after he leaves the Page Q, then pages with higher access frequency is user preferences.

Several basic definitions are used in ALMPPA algorithm as followings [7].

Definition 1 choice-support. After users are identified, (URL-R, URL) sequences are obtained from web logs, where URL and URL-R denote an accessed page and a referred page separately. Each (URL-R, URL) corresponds to an identified  user who switches from URL-R to URL. In this way, how to reach URL from URL-R is called a choice, and choice-support S of this choice is equal to the number of different users switching from the page URL-R to page URL.

Definition 2  choice-preference. Suppose that users have n different choices after leaving page A and then the average choice degree of each choice is:  ( ) /  n S S ni  i =  = (1)  where Si represents the choice-support of the ith choice. And the preference of the kth choice (k = 1,2, ?, n) can be defined as:  /P S S k  =          (2)  Definition 3 support-preference. Suppose that the choice- support and choice-preference of a choice are S and P separately. Then its support-preference is defined as:  P S Ps = ?          (3)  C. Adjacency list model  Adjacency lists store the edge information of a graph. To sparse graphs, which has many vertexes but fewer edges, this model is space saving and can traverse paths more efficiently.

The actual structure of a web site is a typical sparse graph, so we use the adjacency list to store the web site structure. After user identification, we can obtain (URL-R, URL) sequences from web logs and a choice-preference adjacency list. First, we add a page NULL, representing the original page user stays because users can access a page by inputting URL directly, bookmarks or links from other web sites. In this way, there are no pages accessed, so we can take page NULL as the initial one. Then, for each (URL-R, URL) if there is not the URL record in the URL-R adjacency list, add it. Otherwise, increase the choice-support degree in the URL-R adjacency list by one.

For example, there are three users surfing on the Internet with browsing sequences: (NULL, A), (A, B), (B, A), (A, C); (NULL, B), (B, C), (C, A); (NULL, A), (A, C), (A, B). Then the corresponding choice-support adjacency list is: NULL: [A, 2], [B, 1]; A: [B, 2], [C, 2]; B: [A, 1], [C, 1]; C: [A, 1].



III. ADJACENCY LIST MINING PREFERENCE PATH  ALGORITHM  Adjacency list mining preference path algorithm based on the adjacency list model consists of the following steps. First, we reduce the amount of data to be processed by means of data preprocessing. The method unifies the cookie technology and the expansion to web log attributes on user identification and results will be accessed by a single user matrix. Second, the support-preference threshold is set to single out browsing sequences with length 2 from the matrix, and store these preferred browsing sequences in an adjacency list. Finally, the depth first search is used to gain all preferred browsing paths.

A. Data preprocessing  ? Simple data cleansing is done to web logs and data, which has nothing to do with the mining algorithm, is deleted in the step. In this paper, we are only interested in HTML documents, therefore records, which have suffixes like gif, jpeg, jpg, map, swf and cgi and so on can be deleted.

? Then the method in section 2 is utilized for user identification. The cookie attribute is added, which is composed of IP address and a 10-bit random number, to web logs and identify users by their different cookies.

? Abbreviations and acronyms are defined the first time they are used in the text, even after they have been defined in the abstract. Abbreviations such as IEEE, SI, MKS, CGS, sc, dc, and rms do not have to be defined. Do not use abbreviations in the title or heads unless they are unavoidable.

B. Design support-preference adjacency list  After a support-preference threshold is settled down, we can eliminate browsing sequences with length 2 from the matrix as the following function getAdjFromMatrix shows. The inputs include user access matrix obtained in section 3.1 and the support-preference threshold. The ultimate preferred browsing sequences is stored in an adjacency list.

getAdjFromMatrix ( S[n+1][n+1], Ps-threshold ) { ArrayList Adj_list = new ArrayList (); //build adjacency list Adj_list to store the preferred sequences.

for each URL:   ( ) / n  i  i  S S n =  = ;  //Calculate the choice-preference of URL  if _   /(( / )) m  s thresholdkj ki kj i  nS S S P =  ? ?  //If the support-preference is bigger than the threshold Adj_list.add (j);  }  C. Depth-first researching on the adjacency list  In the end, depth-first search method is chosen for preference paths from the page NULL in the adjacency list of preferred browsing sequences. Meanwhile, the following function depth_first_search is recursively called, thus traversing each edge in the adjacency list from the node adjacency to the start one. If paths resulted from depth-first search is unable to be extended, then preference paths satisfy the longest matching rules in association analysis.

depth_first_search (start_url) { Boolean flag = true; for every Edge in Adj_list start from start_url:  if (Edge has not been visited):  Edge.setflag (1); //Set the edge as visited  path.add (start_url); depth_first_search (next_url);  //Recursive call path.remove (); Edge.setflag(0);  //Set the edge as unvisited.

flag = false;  if (flag): printPath();  //Output the preferred browsing paths.

}  The time complexity of NPPMA algorithm as O(2*( +1)2) in searching for preferred browsing paths [7], O((N-  2)*(N+1)2) in merging preference paths, O(( +1)3) totally.

Here, N is the number of URLs in a web site. The key step of NPPMA algorithm is to merge preferred browsing paths; its time complexity is O ((N-2)*(N+1) 2). The algorithm increases the path length by 1 each time until no sub-paths are merged at all, searching for all the combination of sub-paths. By comparison, the time complexity of ALMPPA algorithm is O ((N+1) 2) in building up the adjacency list of preferred browsing sequences, O (e) in searching for preference paths, O ((N+1) 2) totally, more efficient than NPPMA algorithm. Here, N is the number of URLs in a web site, and e is the number of edges in the adjacency list.



IV. EXPERIMENTAL RESULTS  Experimental data are gathered from web logs on a certain web site between May 1, 2006 and May 30, 2006. The data include 508 URLs, 271305 records and 71320 preprocessed (URL-R, URL) records. We compare NPPMA with ALMPPA in both accuracy and efficiency as followings:  ? Set a common preference threshold and mine preferred browsing paths of the same number.

? Then, in comparison with interested paths known in the web site, we can give some results. As shown in Fig. 1, we can see clearly that ALMPPA performs as well as NPPMA algorithm in accuracy. In addition, we use three different web sites, which contain about 300, 500 and 1000 web pages separately. The experimental data are shown in Table 1.

By comparison of execution time, we get Fig.2. It is obvious that ALMPPA excels NPPMA algorithm in efficiency with the increase of the URL number and the number of URLs has a greater effect on the two algorithms than the record number.

TABLE I. EXPERIMENTAL DATA     accuracy  Figure 1. Accuracy comprision  0 500 1000 1500 2000  t ime( s)     URL  3000URL NPPMA  2000URL NPPMA  1000URL NPPMA  3000URL ALMPPA  2000URL ALMPPA  1000URL ALMPPA  Figure 2  efficiency comprision  Additional experiments are performed with more web logs  form other web sites. The results correspond with ones  discussed above.



V. CONCLUSIONS  Web logs and cookie technology are combined to identify  users, and a web site adjacency list model is given based on  the support-preference concept. The model uses depth-first  search in graph theory to discover preferred browsing paths in  this paper. Experimental results show that the algorithm can  behave as well as NPPMA algorithm in accuracy but excels in  efficiency. So the algorithm can be applied to large-scale e-  business web sites for mining preferred browsing paths  efficiently to improve the design of web sites. How to extract  preferred paths using more parameters such as path length,  specific users and browsing time etc. rather than the only support-preference threshold deserves further research.

