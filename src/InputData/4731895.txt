An Application-Level Signatures Extracting Algorithm Based On Offset  Constraint

Abstract   It?s an efficient approach to identify the application traffic through application-level signatures, but the performance of an application-level identification approach heavily depends on accuracy and abundance of signatures. Unfortunately, deriving the signatures manually is very time consuming and difficult. Machine learning has been widely used in network data analysis.

But existing studies mostly considered statistical network flow attributes such as packet size distributions, for that there aren?t so far efficient solutions to extract signatures based on application-level content. The association rules algorithm may be the key to solve the problem, but it?s unavailable while itemset is a permutation of items or transaction is a set of itemsets. Aiming at this problem, the paper provides a signatures extracting algorithm based on offset constraint, which present the notion of Sequence Itemset and Offset Attribute Set, remedying the defect of association rules algorithm. The results indicate that signatures extracted by this approach is highly accurate for apply to online application identification.

1. Introduction   With the development of future wireless network towards the core network with IP and the market evolution of traditional Internet, the ability to accurately identify the network traffic associated with different applications is important to a broad range of network operations including application-specific traffic management, capacity planning and service differentiation, etc. Up to now, more accurate technique is to use specific application-level features[1][2] in the protocol exchange to guide the identification. We use the term signature to refer to a set of conditions defined over a set of features in the application traffic. Unfortunately deriving the signatures manually are very time consuming and difficult. The validity of signatures absolutely depends on professional level of protocol analyst. With the network service type increases day by day and more and more applications use unpublicized protocol specification, signatures extracting  is getting difficult, which is liable to be a bore for all telecommunication equipment manufactures.

Machine learning has been widely used in network data analysis, it has been demonstrated to be an efficient technique for classifying texts, including filtering spam messages and classifying documents based on a list of feature words inside them. Although machine learning has been used for network traffic classification, existing studies mostly considered statistical network flow attributes such as packet size distributions, for that there aren?t efficient solutions to extract signatures based on application-level content. Hong Han[3] presents a data mining based approach to supporting signature discovery in network-based Intrusion Detection System(IDS), but it may generate a lot of invalid signatures because of the deficiency of constraint mechanism. A recent work[4] explores automatically extracting application signatures from IP traffic payload content, which apply three statistical machine learning algorithms to automatically identify features for a range of applications, including Naive Bayes, AdaBoost and Regularized Maximum Entropy, but this approach can only return which can be used to determine a probability that a feature vector for which the class assignments is not known belongs to a particular class, which can?t obtain the signatures of applications.

The association rules algorithm may be most appropriate method, but it can?t directly be used for signatures extracting, the followings are the reasons:  (1) For association rules algorithm, the transaction is an element. But our research object is a set of some IP flows, where an IP flow is defined by a (protocol, srcIP, destIP, srcPort, destPort) tuple.

(2) For association rules algorithm, itemset is a composite of items, but application-level payload is a permutation of some characters.

(3) The transaction of association rules algorithm is a composite of items, for that it?s impossible to obtain the relative payload offset of application signatures.

Aiming at the problem, we provides a new signatures extracting algorithm based on offset constraint, which present the notion of Sequence Itemset and Offset Attribute Set, remedying the defect of association rules  International Symposium on Intelligent Information Technology Application Workshops  DOI 10.1109/IITA.Workshops.2008.152     algorithm. The algorithm is realized in off line. The results indicate that signatures extracted by this approach is highly accurate for apply to online application identification.

3. Definitions  Let 1 2{ , , , }WI i i i= ? ? ? be a multi-set consisting of  W elements. Let 1 2  { , , , } M  D T T T=  be a set of M transactions, where each transaction  1 2 { , , }  m m m mN T t t t=  ( 1 m M? ? ) is a set consisting of N sequence itemsets.

Sequence itemset is defined by the following:  (1) Sequence itemset ?  is an r-multiple permutation on multi-set I ( 1 r R? ? ), denoted by  1 2 r ? ? ? ?= ,  where i  ? ? 1 i r? ? ? is a element of I. The length of sequence itemset is the inclusive item number, denote by ? . The set of sequence itemset with a length of r is defined as r- sequence itemset.

(2) Let sequence itemset 1 2 1r  ? ? ? ?= , 1 2 2r  ? ? ? ?= where 1 2r r? . If there exists a natural number i such that  1 1 2 2 1 1 , , ,  i i r r i ? ? ? ? ? ?  + + + = = = , then ?  is the subsequence  of  ? , in other words, ? includes ? , denoted by ( , )sub i? ?= , i is called the offset of ?  relative to ? . If  there exists a sequence itemset ? in transaction m  T such that ?  is the subsequence of ? , then ?  is contained by transaction  m T , denote by  m T? ? .

(3) The Support is defined to be the fraction of transactions containing sequence itemset ?  in D, namely ( ) { | , } /  m m m Support T T T D M? ?= ? ? . The  sequence itemset whose support is not less than MIN_SUP is called frequency sequence itemset. The frequency sequence itemset that can?t be included by other frequency sequence itemset is called maximum frequency sequence itemset.

(4) ( , ) m  attr T? ( 1 m M? ? ) is defined as union of the offset of ?  relative to each sequence itemset in  m T ,  namely 1( , ) { | ( , ), }Nnm mn mn mattr T i sub t i t T? ?== = ?? . Offset attributor set ( , )attr D?  of ?  relative to D is defined as intersection of all ( , )  m attr T? , where  m T D?  and must  contains ? , namely 1( , ) ( , )Mm mattr D attr T? ?== ? .

4. Signatures extracting algorithm   Now, assume that there are M IP flows, which contain N ordinal packets with application-level payload in different directions, where application-level payload are sequences of characters from a finite character set ?.

If regard character on ? and IP flow as the item of I and transaction of D, then the r-multiple ( 1 r R? ? )  permutation on character set ? can be viewed as a sequence itemset, where R is the maximum length of application-level payload 1460. In particular the application-level payload can also be regarded as a sequence itemset. We decomposed signatures into fixed pattern matches at fixed offsets and variable pattern matches with variable offset within a application-level payload, so ( , )attr D? = ?  show that ? has a fixed pattern match at fixed offset; Otherwise, ?  has a variable pattern matches. For example, ( , ) {3}attr D? =  show that the offset of ? relative to the beginning of the application-level payload is 3 bytes.

The signatures extracting algorithm mainly includes the following steps:  (1) Generate all permutations of items that have fractional transaction support above a certain threshold, called MIN_SUP, namely frequency sequence itemset.

The set of all those frequency sequence itemset is denoted by L.

(2) Remove all frequency sequence itemset that doesn?t satisfies the condition of offset constraint and the rest compose the set of constrained frequency sequence itemset E. The basis about offset constraint is offset attributor set.

(3) According to selection principle, we can find the optimal constrained frequency sequence itemset as signatures for identifying application traffic.

4.1. Generate the set L   The set of frequency sequence itemset can be partitioned into some mutually disjoint subsets, namely 14601r rL L== ? , where rL  is the set of frequency sequence itemset with a length of r. We initially generate all frequent 1- Sequence Itemset  { | support( ) _ , 1}L MIN SUP? ? ?= ? = , and then generate  iteratively frequent (r+1)-Sequence Itemset 1r  L +  from frequent r-Sequence Itemset  r L ?1 1460r? < ? until set  r L  is empty or r is equal to R. In the whole process, offset attributor set of every frequent sequence itemset must be calculated.

In order to utilize information of r  L , our approach generates candidate sequence itemsets of length r+1  1r C  + from itemsets of length r rL . Then it prunes the  candidates which have an infrequent sub itemset. The candidate set  1r C  + contains all frequent (r+1)-length  itemsets. After that, it scans all the transactions to determine frequent sequence itemsets  1r L  + among the  candidates 1r  C +  . Candidate sequence itemset generation procedure is defined by the following: For all  1 2 r r L? ? ? ?= ?     For all 1 2 r r  L? ? ? ?= ? If 1r =  Then  1 1 ? ? ?= ;  Else If 2 1 1  , , r r  ? ? ? ? ?  = =  Then 1 2 r r  ? ? ? ? ?= ; Else Continue; Add ?  to  1r C  + ;  End End  The idea for this procedure is: 1 2 r  ? ? ? ?= ,  2 2 1r ? ? ? ?  + =  are both substrings of ? , simultaneously  they must be elements of rL . This is the necessary  condition of 1 2 1 1r r  L? ? ? ? + +  = ? . So this procedure is to  merge any two elements of rL , where the formal r-1 bytes and the latter r-1 bytes are same. Then, it can generate an element of length r+1 to join in the candidate sets.

4.2. Generate the set of constrained frequent sequence itemset E   After the disposition in section 4.1, the set of frequent sequence itemset L is generated. However, not all of the frequent sequence itemset in L are valuable. In technically description, we use offset attributor set to select the following three kinds of frequency sequence itemsets from L to generate E.

(1)The maximum frequency sequence itemset, which has no fixed offset match? ( , )attr D? = ? ? , and its length is no less than S.

(2)The maximum frequency sequence itemset, which has fixed offset match? ( , )attr D? ? ? ?.

(3)There is fixed offset match, and not maximum frequency sequence itemset; However, after procedure of offset constraint, ( , )attr D? ? ? . The procedure of offset constraint is in the following.

For all  1r L?  + ?  Do Begin  If support( ) support( )? ?<  Continue; If ( , 0)sub? ?=  then  ( , ) ( , ) ( , ) ( , )attr D attr D attr D attr D? ? ? ?= ? ? Else If ( ,1)sub? ?=  1( , ) ( , ) ( , ) ( , )attr D attr D attr D attr D? ? ? ?+= ? ? End  1 ( , )attr D?+  represents all the elements in  ( , )attr D? plus one. The procedure of offset constraint is used to determine whether frequent sequence itemset ?  has its particular offset position. For example, the offset attributor set of itemset ?abcdef?  (" ", )attr abcdef D  is {10} ? However, the ones of itemsets ?abcde? and ?bcdef? are {10} and {4,11}. Therefore we believe that the formal one has not satisfied the constraint condition,  but the latter one does, because its offset position 4 is not cause by itemset ?abcdef?.

4.3. Selection principle   These steps select the final signatures from the elements of E. The principle is the following:  (1) If we have got fixed offset itemsets from E, then we select the one with the maximal length, which has fixed offset match.

(2) If we have not got fixed offset itemset from E? then we select the one with the maximal length in the whole itemsets.

5. Experimental Results   To evaluate the performance of our approach, we have collected many packets on an access network to a major backbone. The results indicate that, as long as the parameters are chosen correctly,   signatures extracted by this approach is highly accurate for apply to online application identification. For convenience, we focus on building application-level signatures for HTTP, PPLIVE, MAZE, XUNLEI (BT) and BANACAST.

5.1. Choosing the parameters   According to requirement of application identification, character on ? can be any one integer within interval [0,255], while MIN_SUP is not less than 95%. If IP flows are mutually independent, the accuracy rate of application-level signatures can be raised as the M value increased, while the extracting time increased. In practice, M must be not less than 100.

1 2 3 4 5 6 7 8 9 10           HTTP  PPLIVE  MAZE XUNLEI(BT)  BANACAST   Figure 1 100M = , the amount of elements in E were not  increased with the increase of N As shown in Figure 1, when maintaining 100M = and  increasing N, the amount of elements in E were not increased with the increase of N. It is shown that with N increases, E  tends to be stable. This shows that signatures of application-level payload are present to the first few packets, so N should not be too large to avoid meaningless process. N is usually 8.

S is used to remove those short frequency sequence itemsets which have not a match at fixed offset within application-level payload. S is usually 6.

5.2. Efficiency evaluation   The time efficiency of signatures extracting is influenced by many uncertain factors such as the length of data packets, the character distributing of the payload and so on. Therefore the algorithm is obvious different in processing various applications. We cannot calculate the time complexity simply. The time of signatures extracting of different applications under different conditions are shown in Table 1. The conditions of experiment are Windows XP SP2 computer, P4 32-bit CPU, 3.0GHz, 512M memory and C programmed algorithms.

Table 1 The time of signatures extracting M=50 M=100 M=150 M=200  HTTP 108.038 139.993 158.273 165.052 PPLIVE 0.653 1.203 1.573 1.826 MAZE 0.344 0.289 0.251 0.348 XUNLEI(BT) 3.426 4.599 5.527 6.203 BANACAST 50.832 89.524 137.998 140.958   5.3. Accuracy evaluation   SIG is a high speed traffic monitor which can perform a variety of traffic measurement tasks at speeds up 2Gbps.

To evaluate signatures extracted by our approach, we included the signatures into the SIG framework and wrote a set of SIG rule files based on our signatures. The resulting executable is used to perform the network monitoring in real time lasting through a week. Table 2 presents the signatures, FP (False Positives) ratio and precision for different applications. For each application, column 4 depicts how much of non-application flow is identified as an application flow according to the extracting signatures, and column 5 depicts how much of that traffic the signature-based classification missed.

Table 2 Accuracy evaluation Applicatio  n Signatures Offset FP (%) Precision  HTTP 48 54 54 50 2F 31 2E 0 0.012 0.9648  PPLIVE E9 03 0 0.007 0.9982 01 98 AB 01 02 3 MAZE 10 00 00 00 0 0.016 0.9952  XUNLEI( BT)  13 42 69 74 54 6F 72 72 65 6E 74 20 70 72 6F 74 6F 63 6F 6C 65 78 00 00 00 00 00 01  0 0.002 0.9723  BANACA ST  48 00 00 00 1A 02 CA BA 0 0.005 0.9993  Our measurements show that our approach achieves less than 4% false negative ratio and 0.02% false positive in most cases.

6. Conclusions   As there are great differences among protocols (e.g., the definition of fields, interactive process and character distributing of the payload, etc.), it results in the big complexity of signatures extracting. In this paper we first provide a recursive method to get signatures with different length in turn. And then, we utilize offset attributor set to restrict and remove ineffective itemsets, which will effectively control the scale of signatures. Meanwhile, a great many experiments reveal that different parameters result in different performances. The result shows that signatures extracting by our algorithm are reasonable and effective.

Acknowledgement   It is a project supported by the Major State Basic Research Development Program of China (2007CB310704).

