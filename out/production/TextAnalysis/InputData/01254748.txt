

Proceedinas of the 2003 IEEE lntemation?il Symposium on Intelligent Control Houston, Texas * October 5-8.2003  GRG:An Efficient Method For Association Rules Mining on Frequent Closed Itemsets  Li Li Donghai Zhai Fan Jin School of Computer and Communication Engineering,  Southwest Jiaotong University MO6 Chengdu, 610031, P.R.CHINA  Absmcr-In this paper, we propose a graph based algorithm GRG (Graph based method for association Rules Generation) for association rules mining using the hquent closed itemsets groundwork. Association rules mining often base on kequent itemsets which often generates a large number of redundant itemsets that reduce the efficiency. Frequent closed itemsets are subset of hquent itemsets, but they contain all information of tiquent itemsets. The most existing methods of tiquent closed itemsets mining are apriori-based. The efficiency of those methods is limited to the repeated database xan and the candidate set generation. The new algorithm constn~cts an association graph to represent the frequent relationship between items, and recursively generates kequent closed itemsets based on that graph. It also constructs a lanice graph of w e n t  closed itemsets and generates approximate association rules base on lattice graph. It scans the database for only two times, and avoids candidate set generation GRG shows good performance both in speed and scale up properties.



I. Introduction The discovery of association t u l a  was introduced in [1,2,3]. This task consists in determining relationships between sets of items in large databases. Let I={&, il...im) be the set of items, D-={Tl, Tz ...T.) be the transaction database, T, ( k [ l  ... n]) be a record of transaction, it consisted of items from I. Let S be an itemset, S={i I i ?0.

The support of S, recorded as supp (S), is the rate of the transactions that contain itemset S. If the support of S is not less than the minimum support threshold, S is called kquent itemset. An association tule r. x+y is an implication between two itemsets x and y where x, y E I .  the support of the tule, denoted as sup(x+y), is defined as s u p ( x ~ y ) .  The confidence of the tule, denoted as conf(x+y), is defined as sup (w) I sup (x).

Association tules mining ofien based on the frequent itemsets mining. Frequent itemsets mining also plays an essential roles in other data mining It is well known that frequent itemset mining often generates large number of redundent frequent itemsets, which reduces the efficiency of association tules mining or other tasks.

Instead of mining the complete set of frequent itemsets, we can mine the ,frequent closed itemsetsI6?. The frequent closed itemsets contain all information of frequent itemsets and have the same power as frequent itemsets. It will largely reduce the number of redundant itemsets and increase the efficiency of mining task.

0-7803-7891-1/03/$17.00 0 2003 IEEE 854  For example, suppose a database contains only the same two transaction, Tl={il i2 ... ilw) and T2={il i2 ...  SO). The minimum support threshold is 1, 2Io0-1 frequent itemsets will be generated. They are ?{i~], { i l l ,  ..., {ilw), {il b) , {i9 iloo), ..., til il ... ilw)?. This itemsets generate tremendous number of association rules. But the only two frequent closed itemsets will be generated. They are ?{il h ... i100)? and ?{i1 il ... ilm)?. Only one association rule generated from the fre uent closed itemsets. It is ?{il i2 ...

i50)?+?{i51 in ... ilW) ,171 .

Definition 1: SI and S, are two itemsets, S1d2, SI is covered by S2, if and only if any transaction that contains SI also contains S2. It is recorded as S I S .

Lemmal: Let SI, Sl, SI be itemsets, if SIGland S2Gl, then SIS .

Rational: Let transaction f contains SI. For  SI^.%, f also contains S2, for S2Gl, so f also contains S,. From definition I ,  SIGl hold.

Definition 2: S is a itemset, if there does not exist itemset 9, SLY, i.e., S not covered by any itemset, then S is a closed itemset, if the support of S is not less than the minimum support threshold, then S is a frequent closed itemset.

Lemma 2: S is a frequent itemset, but not closed. Then there exists a frequent closed itemset S, Sa.

Rational: S is not closed, from definition 2, there exists an itemset SI, S 5 SI. If SI is a closed itemset, then from supp (SI)=supp (9, SI is a frequent closed itemset. If SI is not closed, for the same reason, there exists an itemset SI, SISSzs,. Since the length of itemsets is limited, we can find itemset S, Sk.,SSk. from lemma 1, S S S, .

Lemma 3: S is a frequent itemset, and then S is a frequent closed itemset if and only if S is not covered by any other frequent closed itemset.

Rational: (1)s is a frequent closed itemset, and then S is not covered by any itemsets. So it is not covered by any frequent closed itemsets.

(2)s is a frequent itemset. If S is not closed, from lemma 2, there must exists a frequent closed itemset that cover it.

That conflict to the condition.

When the concept of frequent closed itemset is introduced, the mining task is substantially reduced. The frequent closed itemset mining is very important to association rules mining or some other tasks.

This paper studies the efficient mining of association rules on frequent closed itemsets in large databases, and proposes a new algorithm, called GRG. Nicolas Pasquier proposes an Apriori-based mining algorithm, called A-  J.Pei proposes a FP-tree based algorithm called CL0SEen. Algorithm A-close and CLOSET is taken as comparison in this paper. From the performance study, the new algorithm shows good performance both in speed and scale up properly.

TID  When the bit-vectors have been initiated, it is not necessary to scan the database anymore. In the gmph construction phase, GRG algorithm constructs an association graph to indicate the rdationships between frequent items. For the association graph, if the number of Is in BV,ABV, ( i > j according to an order L of frequent items) is not less than the minimum support threshold, a directed edge from item i to item j is constructed, which is recorded as i 3 j. The edge between i, j means the itemset { i , j )  is a frequent 2-itemset. Let the order be L={1,2,3,4,5), the association graph for the above example is shown in figure 1, and the frequent 2-items are [1,3), {1,5), {2,4), {2,5), {4,5).

BV, (0101 1 )  Itemset 2 4 5 1 3 2 4 5 1 3 5 1 4 5  BVJ=(?OI 01 0) Figure 1 : The Association Grapb of Frequent Items  B. The generation of frequent closed itemsets.

When the graph has been constructed, the frequent closed itemsets can be mined recursively based on the bit-vectors and the association graph. The following lemmas are proposed.

Lemma 4: Let { i, i2 . . . $) be a frequent itemset. If there is no association edge starting from item ik to item U, then { i , iz .. . it U) can?t be frequent itemset.

pr0of:Becaw.e there is no association edge starling from item ik to item U, {ib U) is not frequent itemset. From the properly of apriori, any itemset that contains infrequent itemset can?t be frequent itemset. So [i t  i2 .__  ik U) can?t be frequent itemset.

According to lemma 4, if we want to extend the frequent k-itemset {it, i2 ... i h }  to frequent (&l)-itemset, we only need to check those items that at the end of edge starting h m  item 4 .  Let U be one of such item and the number of Is in BV,,A BV, A. ..A BV, A BV. is not less than minimum support threshold, then {it i2 ... it U )  is also a frequent itemset. Take the database in table 1 as example.

(2 4) is a frequent itemset, and there is directed edge starting from item 4 to item 5. We check the number of Is in BV12 4 ~ , = B V ~ A B V ~ B V S .  The number of Is in BV{, I 5 ) is 2, not less than the minimum support threshold, so [2 4 5 )  is a frequent itemset.

Definition 3: L is an order of frequent items. All the items in frequent itemsets are sorted according to the order L. f =[;I iz ... ik) is a frequent itemset. Then the set of frequent itemset     S,={sIs{il, il, ... .ik)uUl.j2 ,..., jJ,im>jn, l < m %  1 < n < l )  (1)  is called the cluster of itemsets that have the same prefixf: S,?={s I s={il, il ,..., ik}ufi}, im>j,l%sk) (2)  is called the extended itemset cluster off: Obviously S,?@J hold.

Lemma 5: I ={il,il, ..., it] is a set of frequent items. All the frequent itemsets, S, can be represented as  S-,,US,~U.. .us, (3) where the S, is the cluster of itemsets that have the same prefix ik.

Proof: Since the items in each frequent itemset are. sorted according to order L, then all frequent itemsets can be classified according to the fust item. Each class can be represented as Si, i s  I.

Lemma 6: f= { il il ... ik) is a frequent itemset. $can be represented as  Proof: Same as the proof of lemma 5, S, can be classified according to the item U that follows thefimmediately, uti., I S n i k .

S,==Sv,.),u<i., linSk (4)  According to lemma 5 and lemma 6, we can fmd out all of the frequent itemsets recursively.

Lemma 7: SI={il i2 ... ik) is a frequent itemset. support of SI is 6 S2={il i 2  . . . it U) is a frequent itemset. support of S, is 62. If 61=&, then SI={il iz ... ik) can?t be frequent closed itemset.

Proof: Let P=@l,p2, ...,psi} be the set oftransactions that contains SI, Q ={ql, qz ,..., qs2) be the set of transactions that contains S2. Since the transactions that contain Sz must contain SI, Q=P, 62561 hold. For ?1~=61, we have P=Q. That is to say any transaction that contains SI must contains Sl.

From the defmition of frequent closed itemset, {il iz ,._ ik} can?t be frequent closed itemset.

Let the order of the frequent closed itemsets he found out be L. I={il il ... ik) is the frequent itemset current find, Sw- is the set of itemset before I in L, S h  is the set of itemsets after I in L.

Lemma 8: Let Si be the extended itemset cluster of I, then there does not exist ftequent itemset P that covers I, Pc Si, if and only if, there does not exist T? that coven I, PIE S,& Proof: (1)From the way that GRG finds frequent itemsets, we have the relationship S;Q,s.,.

(2)lf there exists a frequent closed itemset l?c&&, I? covers I, then YES,, SI is the cluster of itemsets that have the same prefvc I. Let l?={il h... it jl ... j,}, then +{in i2 ... i k j l  )coversItoo,PES;.Thatconflicttothefact  that there does not exist frequent itemset P that covers I, P E Si.

C. The generation of association rules on frequent  Definition 4: Association rules on frequent closed itemset rule x+y is an association rule on frequent closed itemsets if (1) both x and x U y are frequent closed itemsets, (2)there does not exist frequent closed itemset z such that x c  z c x u y .  aid (3) the confidence of the rule passes the given confident threshold.

According to the reference [6], all frequent closed itemset can be constructed into a concept lattice. We can use a directed graph to represent that lattice.

Definition S16?: Let FC be the set of frequent closed itemsets in transaction database, C&V, E) is defined as the directed graph associated with FC where the set of vertices V and the set of edges E are define as:  closed itemset.

V={ I I I E FC) (5 ) E={(Ii, It )  EVXV~ IIC 1 2 ,  !%, I ~ E V ,  I ~ c  I~c  I2 ) (6)  Same as the construction of association graph of frequent items, every frequent closed itemset has a corresponding bit-vector. The bit-vector of closed itemset I is denoted as BVC,. Let F be the set of frequent items. The number of bits in each hit-vector equals to the number of frequent items in F. the kth bit of that bit-vector is set to 1 if that itemset includes the kth item in F, otherwise the corresponding bit is set to 0. Considering the example in table 1, all bit-vector of frequent closed itemset and the lattice graph is shown as figure 2.

Figure 2: The Lattice Graph of Frequent Closed ltemsets  Theorem 1[6]: Let the lattice graph of frequent closed itemset be CFc=(V, E), the set of association rules R on frequent dosed itemset can be represented as follows: R ~ { ~ : I ~ ~ I ~ - I I ~ I ~ , I z ~ V , I ~ ~ I ~ , I ~ ~ ~ , ( I ~ , I ~ )  S E )  (7)     As the closed itemset is represented by bit-vector, we can construct the lattice relationships between frequent closed itemsets based on the property 2.

Property 2: Let i,, i2 be two different itemsets, I ,  c 12, if BVC,=BVCn vBVC,,, where the notation "v" is the logical OR operation.

from the above discussions, the GRG algorithm is described in the following programs.

AlgOrithn): QRQ 1nput:database D, support threshold minsup output: the frequent closed itemset lattice graph Grc the association rule R QRG( D, minsup, Gm, RI ( GK.= $; F - $; R-$; F =CeeateFreqUentItemS ID , F, minaupl : BVC~.,-CreateItemsetBitV=~t~r (F, FI ; Gn t BVC.., ; CreateFrequentItemBitve=tor (D, FI : CzeateFrequentItemGrapho for all items i E F MineSamePrefixFreq ((i), BIV, , i.count, GK I ; CreateRulesFromGFCI R , BVC.,) I  CreateFrequentItems (D , F , mineupl 1 //N is number of transactions P - 0 ; for( j-I; jR1 ; jtt) ( for all items i in jth transaction i i.count tt; ) F-(i I i is an item and i.COunt Zminsupl;  CreateFreqUentItemBitVector(D, FI ( foe all items i in F  for( j=l: jR1 ; j++l I allocate BTV, and set all bit in BIV, to 0;  for all items i in jth transaction ( set the jth bit of  BIVi to 1 ) I  I  //Create Bitevector for Frequent Closed Itemset 1 CreateItemsetBitVector(1, FJ (allocate BVCl and set all bit in BVG to 0; for all items i in 1 (  if i be the kth item in F set the m h  bit of BVC, to 1 I 1  I  CreateFrequentItemGraph(F1 I let L be an order of the items in F: for all frequent item5 i E F for all frequent items j E F  i > j if (number of 1 in BIV, hBIV, lzminsup then i.link.add(j1; //create edge i-j I  //BIV, is the bit vector of I  //n.upp is the support of I MineSamePrefixFreqI I ,  BIV,. n.u.p, CG1 ( BOOL covered-FALSE;  for all j, jei.link ( r- I v(j1 ; BIv,'-BIV, A Blv, ; let n....., be the number of 1s in BIV,.;  let i be the last item in itemset I ;  if 2 minsupl ( if I - auPp I 1 covered -TRUE ; I MinesamePrefixFreq(r, BIV,', nnewsuyp, CG) ; I  I if (covered-FALSE 1 i  BVCl-CreateItemsetBitvectar(l.F) InsertItemsetToGFC(BVC, ,BVCrwl  I I //if return FALSE,BVC, not a frequent closed itemset BOOL InSertItemSetTOGFC (BVCr.BVCw1  if (BVC, IBVC.!-BVC.l  if lBVC,3support - BVC.3support I BOOL insert-false; forall child BVCc of BVC.

(  delete BVC, and return TRUE;  delete BVCr and return FALSE;  BVC,=BVCrl BVC.

if (BVC.I-BVC, I I if (BVC..+support-BVC.+suppore) I  ( remove all links that point to BVC,; delete BVCr and BVG. return FALSE;  if I InSertItemSetTOGfC(BVC,,BVCd-FALSE I return FALSE;  insert-TRUE; continue;  if I BVC.,-BVC, 1 (  remove child BVG from BVC. ; imert child BVCI to BVC" insert child BVC, to BVCl insert-TRUE; continue;  I iflinsert-FALSE) 'insert link BVC, to BVC.andreturn TRUE;  CreateRulesFromGFCl R , BVCu) I  forall child BVC, of BVC.

if (BVCN#BVC,and BVCC+BVG.J create rule C+N/C to R; if (BVC.3used-FALSEl  CreateRulesFromGFC IR, BVGI ;  BVCr+USed=TRUE;     The purpose of using the parameter BV, and nawp in function MineSamePrefixFreq is to acquire the bit-vector and the support of itemset I?s extension conveniently. Using the two parameters, we can avoid generating bit-vector and support of new itemset from the beginning.

Theorem 2: Algorithm GRG can finds out all frequent closed itemsets and all association rules on frequent closed itemsets.

ProoEFrom the lemma 3, itemset I is a frequent closed  itemset if and only if I not covered by any other frequent closed itemset. That means I is neither covered by any frequent closed itemset in S,,, nor covered by any frequent closed itemset in Sah Fmm lemma 8, if I is not covered by any itemset of extended itemset cluster of I, we can say I is not covered by any frequent closed itemset in S.k. In function MineSamePrefixFreq?s 3th step, we set the variable ?covered? to FALSE. in 10th step, if I is covered by any itemset of the extended itemset cluster of I, then set the variable ?covered? to TRUE. I can?t be frequent closed itemset. S,, equals to the current set of frequent closed itemsets FC that have been found out. If we can confirm that I not covered by any itemset of FC, I is frequent closed itemset. The function InsmltsmSefToGFc will retum FALSE if the itemset l i s  found to be covered by other frequent closed itemsets during the insert process. From the discussion above, GRG can fmds out all the frequent closed itemset.

Since all frequent closed itemset are found out, according to theorem 1, we can fmd out all association rules on lattice graph.

111. Experiment evaluation and performance study  In this section, we present a performance comparison between the GRG algorithm and the Apriori-based algorithm A-closeL6? and FP-tree based algorithm CLOSETI??. All of the experiments are performed on 1.7GHz PC machine with 256 megabytes main memoly, running on Microsoft Windows Me. All the program are written in Microsow Visual Ctc6.0. The data set used for performance study include one real data set and two synthetic data sets. The real data set is the Traditional Chinese Medicine (TCM) database, which has 1378 prescription records, each prescription has several drugs.

The synthetic data sets are generated using the procedure described in [l]. The parameters of the synthetic data sets are described in table 1. We first test the speed property of the two algorithms on the real and synthetic data set by changing the minimum support threshold. The results of the experiments are shown in figure 2, 3 and 4. Then we test the scale up property of the two algorithms by fixing the minimum support threshold to specified value, I%, and changing the size of the data set The results of the experiments are shown in figure 5.  All the response time only include the period of mining frequent closed itemset.

From the above mentioned performance study, we can see that GRG algorithm has good performance both in speed and scale-up property.

The good performance of GRG comes from the following reasons. Firstly, GRG adopts the technique of bit- vector, which substantially compresses the information of the transaction database. Secondly, the construction of association graph makes the algorithm avoid candidate set generation. The generation of new frequent closed itemset can be guided by the association graph efficiently.

Furthermore, by the conshuction of graph, the times of database scan are substantially reduced. Only twice database scans are needed. Finally, the concept of extended itemset cluster also reduces the search space when judge weather one frequent itemset is closed.

Parameter  Total item 1000 1000 I OK

IV. Conclusion  For the task of mining association rules on frequent closed itemsets, this paper proposes a graph-based algorithm named GRG. The new algorithm adopts the technique of bit-vector, and constructs an association graph to represent the frequent relationships between frequent items. The GRG generates frequent closed itemsets based on that association graph of fiequent items. GRG also introduces lattices graph of frequent closed itemsets for the association rules mining. The experiment evaluation and performance study on real data set and synthetic data set show that the new algorithm has good performance both in speed and scale up property.

Fig.7 Performancc test using TCM Dataset     - - - -___-  4  * \ -  - _ - _ _ _ _  . -  I . . . , , " " I . " .

U*".-  Fig.10. Scale up performance test  Reference  R.Apwl  and R . S r i h ~  Faat Algorithm for Mining Aaswiarian Ruler. In Pmc 1994 Int Cant Very Large Data Base, In VLDB94, page 487499, Santiago, Chile, September 1994.

S. Bin, R. Motwani, and C. Silverstein. Beyond &et basket: Genrmfizing association d e s  to E O m l B f i O N .  In SIOMOD'97, pagc 265276,1997 H. Mannila, H. Toivontn. and A. 1. Vcrkamo. Efficient algorithms for discovering association wlcs. In Pmc.

AAAl'94 Worbhop Knowledge Discovery in Database (KDD'94). pages 181-192, seaale, WA July 1994.

[4] I.Han, G.Dong, and Y.Yin: Efficient mining of p d a l periodic pattcms in time series &&bass In Roe. 1999 int.Cont Data Engineering (lCDE'99), pages 106-1 15.

Sydney, Ausbalia, April 1599.

H.Mannila, H Toivancn, and A. 1. Verkamo. Discovery of frequent episodes in event scqucn-. Data Mining and Knowledge Discovery, page 259-289. 1991.

Nicolaa Papquicr, Yvca Bastide, Rafik Taouil. and he M a l .  Disconring frequent elored itCMeb for association rules. In Roecedings of the 7th Intcmational Conference on DatabawThmry,pagc398416, 1999 J.Pei, J.Han, and R.Mao. Closet: An clficient algorithm far mining frequent closcd i tamem. In SlGMOD lntemational Worbhop an Data Mining and Knowledge Discovery, May 2000.

