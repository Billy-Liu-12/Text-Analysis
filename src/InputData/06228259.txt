An Effective Mining Algorithm for Profit Mining

Abstract?Association rule mining can be used to discover interesting rules from large databases easily for better decision making in most real world applications except the financial market.  This is because the investors are interested in high profit and low risk trading results more than in those of high confidence and high support.  Based on a working model of profit mining, we propose an effective algorithm for investors to find trading rules that include information on profit, risk, and win rate. This mining approach works well not only in the stock market, but also in the futures and other markets.

Keywords: financial data mining, association rule, inter- transaction mining, profit mining, risk, win rate, interday trading

I.  INTRODUCTION Association rule (AR) mining [1] has been used  intensively in knowledge discovery. Especially, inter- transaction mining (ITM) [4][7] of association rules are very popular for investors to find rules like ?when the price of stock ABC goes up, then the price of stock XYZ will go up the next day with 70% of confidence.? This rule indicates that one may win 7 out of 10 times. Assume that an investor gets 1 for each win and lose 3 dollars otherwise. We can calculate the total loss of 2 dollars from 10 trades, which is 7 * 1 ? 3 * 3 = -2 dollars. This result illustrates the fact that high confidence does not mean high profit.

Recently, the utility mining (UM) [2][8] uses a sales perspective to reveal the profit that is important to the miner.

UM shows that traditional statistical correlations may not measure how useful an itemset is in accordance with a user?s preference. Although utility mining solves the problem from the sales perspective, the problem of investors in the financial market still exists.

Profit Mining (PM) [6] provides an alternative solution to meet the requirements of the investors in the financial market.

PM considers the investor?s expected mining results which include profit, risk and win rate. The resultant profit rules has the form ?Buy stock XYZ when event (signal) B occurs and sell stock XYZ when event (signal) S occurs, then you have profit = P, risk = R and win rate W%.? To find the profit rules more effectively, we propose a straightforward profit mining algorithm from an interday model in this paper.



II. RELATED WORK Ref. [1] proposed the association rule mining for finding  the rule of itemsets with high frequency and confidence from a transactional database. Lu, Han and Feng [7] presented the inter-transaction association rules for mining the timing of stock prices going up or down. Zhang and Zhaou [9]  revealed ?the fact that data mining in finance is involved with applications, data, and domain models leads to a conceptual framework.?  We used the ITM to mine stock data and study upstream and downstream causal relationship in stock market [5]. To improve the usage of data mining in the financial market, [6] proposed Profit Mining where a simple interday model is described in the next section.



III. PROBLEM DEFINITION  A. Trading Model ? InterDay Model Let MP = {None, Long, Short} be a set of market  positions and TC = {Buy, Sell} be a set of trading commands.

Let TO = {tc, qty, price} be a form of trading order where tc?TC, qty?N+, price?R+.  Without loss of generality, we limit the values of qty to 1. We say that TO is a buy-order (BO) where tc = ?Buy?, or sell-order (SO) where tc = ?Sell?.

Let POS = {mp, hqty, hprice} be a form of position where mp ? MP, hqty ? {0,1}, hprice ? R+.  We say that POS is in a close position, where mp = ?None?, hqty = 0 and hprice = 0.

Similarly, POS is in a long position when mp = ?Long? and POS is in a short position when mp = ?Short?.

Figure 1.  The state machine of interday model.

Let a hold position (HPOS) represent a position of investor being hold before or after trading. Here HPOS is a kind of POS. The HPOS0 at time t = 0 is a close position {None, 0, 0}.

At each time t, when the BP or SP occurs, the BO or SO is generated to change from HPOSt-1 to HPOSt. The action ?change? is called offset. We define an operator ?-? to indicate the operation of offset. The equations are as follows:   HPOSt = TOt - HPOSt-1                                               (1)   2012 International Symposium on Computer, Consumer and Control  DOI 10.1109/IS3C.2012.36   2012 International Symposium on Computer, Consumer and Control  DOI 10.1109/IS3C.2012.36     The equation of operator ?-? works on elements of HPOS and TO which are defined as below:   HPOSt.mp=?Long?, if TOt.mp = ?Buy? and t>0 HPOSt.mp=?Short?, if TOt.mp = ?Sell? and t>0 HPOSt.hqty = TOt.qty, if t>0 HPOSt.hprice = TOt.price, if t>0                                  (2)  At time t, the trading order TOt-1 is called a complete  trading order (CTO) if there is a TOt to change HPOSt-1 to HPOSt.

B. Transactional Database Let E = {e1, e2,?, em} be a set of items (events or signals).

Let TDB be a transactional database which contains a set of transactions {tr1, tr2, ?, trn}. Let trj = (tidj, itemsj, pricej) be a transaction where tidj is a consecutive number and tidj > 0, itemsj ? E, and pricej ? R  +.

TABLE I.  TRANSACTIONAL DATABASE (TDB)     TABLE I shows an example of transactional database (TDB) with three attributes TID, ItemSet and Price. TID is a transaction ID possessing the time feature, in which the item set (or event set) and trading price being recorded at that time are ItemSet and Price respectively.

Let pattern (itemset) be a form of {e1(0),?,en(0),?,e1(1- i),?,en(1-i),?,e1(1-w),?,en(1-w)} where w is a user specified variable called maxspan and 1? i <w.

The definition of a pattern in PM is similar to ITM [4].

The value of maxspan w indicates the maximal number of transactions in the TDB containing the pattern. A sliding window consists of w transactions, which are called mega- transactions. For example, assuming maxspan = 2 in TABLE I, there are 7 mega-transactions M1, M2,?, and M7. The mega-transaction M1 contains transactions TID = 1 and TID = 2, the M2 contains transactions TID = 2 and TID = 3, etc.

The mega-transaction M2 has 5 patterns a(0), b(0), a(0)c(-1), b(0)c(-1) and a(0)b(0)c(-1).  The pattern a(0)c(-1) implies a(0) and c(-1) are in the same mega-transaction. The number in the parenthesis of c(-1) is the interval which describes the distance from the base transaction TID 3 to the item c in the extended transaction TID 2. Thus it has a distance value of -1.

When the pattern a(0)c(-1) occurs at TID 3, the trading price 500 of pattern a(0)c(-1) is set at TID 3 (base transaction), not at TID 2. The pattern a(0)c(-1) occurs at TID set = {3, 7} in the TDB of TABLE I.

C. Trading Rule According to our trading model in Figure 1, we have two  patterns BP and SP for determining the trading action. When BP and SP occur at the same time, there is a semantic ambiguity. Because the investor does not know which trading action to take, Buy or Sell? A new attribute trading? priority (TP) is required to solve the problem. Then, we have the format of the trading rule: {TP, BP, SP} where TP ? {BF, SF}. ?BF? stands for Buy-First and ?SF? stands for Sell-First.

D. Trading Results - Profit Let DBBegin and DBEnd be two TIDs which represent the  TIDs of the first and last transactions in TDB, respectively.

Let P be a function for getting the price at a specific TID, denoted as P(TID). Figure 2 is used to explain the calculation of net-profit (NetProfit or NP). The equations of NetProfit (NP) and Profit of trading rule are as follows:   P(Tj) ? P(Ti) ? 2*fee, if mpi = ?Long?          (3) P(Ti) ? P(Tj) ? 2*fee, if mpi = ?Short?   Profit = NPi, j                                                          (4)     Figure 2.  Computing the profit of trading rule using stock price vs.

trading time curve  E. Trading Results - Risk To define the risk of trading rule, three variables are  required: Consecutive-Loss (CLoss), Draw-Down (DD) and Run-Up (RU). Their initial and maximal values are all 0. The CLoss records the consecutive loss of net-profit by using the following equation:   CLoss at time t: CLosst = CLoss(t-1) + NPt                      (5) where CLoss0 = 0 and CLosst = 0 if (CLoss(t-1) + NPt ) > 0  Let Ti and Tj be two TIDs, where Ti < Tj. We denote that i  and j are two trading orders and Ti and Tj are the locations of trading orders i and j, respectively. Let minP(Ti, Tj) and maxP(Ti, Tj) be two functions for getting the minimal and maximal prices from Ti to Tj, where Ti < Tj and Ti , Tj ? TID.

DDt-1 = CLosst-2 + minP(Tt-1, Tt) - P(Tt-1)                   (6) if MPt-1 = ?Long? and t > 1 and Tt ? Null   DDt = CLosst-1 + minP(Tt, DBEnd) ? P(Tt)                  (7) if MP(t-1) = ?Long? and t > 0 and Tt ? DBEnd    NPi,j=     RUt-1 = CLosst-2+ P(Tt-1) - maxP(Tt-1, Tt)                   (8) if MPt-1  = ?Short? and t > 1 and Tt ? Null   RUt = CLosst-1+ P(Tt) - maxP(Tt, DBEnd)                    (9) if MPt-1 = ?Short? and t > 0 and Tt ? DBEnd   Risk at time t: Riskt = max[ |CLosst|, |DDt|, |RUt|, Risk(t-1) ]  if t > 0 and Risk0 = 0 if t = 0                                           (10)  F. Trading Results - WinRate The variable WinRate is the ratio between the number of  complete trading orders (CTO) with net-profit > 0 and the total number of complete trading orders. The equation of WinRate is defined as below:  (Total # of CTOs with NP>0) / (Total # of CTOs) 100%                                                                             (11)   G. Mining Results - Profit Rules Let minProfit, maxRisk and minWinRate be user  specified threshold values. We define a profit rule to be a trading rule R with trading results {ProfitR, RiskR, WinRateR} if ProfitR ? minProfit, RiskR < maxRisk and WinRateR ? minWinRate where minProfit ? R, maxRisk ? R, and 1 ? minWinRate ? 0.



IV. MINING ALGORITHM - PRMINER Before describing our proposed profit mining algorithm,  called PRMiner (PRofit Miner), we provide the following definitions and examples. A pattern X is defined as x1(i1)x2(i2)?xj(ij), where j > 0, 0 ? ij < maxspan. Let shift(X, k) be a function to shift the pattern X into X?, X? = x1(i1- k)x2(i2-k)?xj(ij-k), where k ? 0. For a pattern a(0) in TABLE I, there is a TIDSet(a(0)) = {3, 7}. After shift(a(0), 1), we have a new pattern a(-1) and its TIDSet(a(-1))={4, 8}.

The number of items in a pattern is called the length of the pattern. A pattern of length k is called k-pattern. For example, pattern a(0)c(0)b(-1) is a 3-pattern. Let X and Y be two patterns. Let join(X, Y) be a function for joining the two patterns into a new pattern Z = join(X, Y), where Z = X ? Y and t(Z) = t(X) ? t(Y). For example: A pattern a(0) has TIDSet(a(0)) = {3, 7} and a pattern b(0) has TIDSet(b(0)) = {3, 5, 7, 9}. If the pattern a(0) joins with pattern b(0), we have a new pattern a(0)b(0) and its TIDSet is {3, 7}.

Let X = x1(i1)x2(i2)?xm(im) and Y = y1(j1)y2(j2)?yn(jn) be two patterns. We say that X = Y, if xi(ii) = yi(jj) for 1? i ? m = n, where i1 = j1 = 0. We say that X < Y, if (1) x1(0) < y1(0); or (2) there exists k ? 1 such that xi(ii) = yi(ji) for 1 ? i ? k, and x(k+1)(ik+1) < y(k+1)(j(k+1)). For example, a(0)b(0) < a(0)b(-1).

We say that an ITSet consists of a pattern (ItemSet) and a TIDSet. The form of ITSet is x1(i1)x2(i2)?xm(im){T1, T2,?,Tn} where Tn ? TID.

Definition 1: Let ft(X) be a function for getting the first TID of a pattern X. There exists an ambiguity if ft(X) = ft(Y) ? ?, where Y is a pattern.

Definition 2: The function RuleGenerator(X, Y) is used for generating the set of trading rules using patterns X and Y.

The generated rules are shown in TABLE II.

TABLE II.  THE COMBINATIONS OF TRADING RULES USING PATTERNS X AND Y BY RULEGENERATOR  ft(X) ? ft(Y) Rule 1: {Both, X, Y} Rule 2: {Both, Y, X}  X = Y Rule 3: {BF, X, Y} Rule 4: {SF, X, Y}  X ? Y and ft(X) = ft(Y) Rule 5: {BF, X, Y} Rule 6: {SF, X, Y} Rule 7: {BF, Y, X} Rule 8: {SF, Y, X}   Let X be a pattern in TDB, we say that mtr(X) is a set of  mega-transactions containing pattern X. Let sup(X) be defined as |mtr(X)|. We say that X is a frequent pattern, if sup(X) ? minsup, where minsup is a user specified threshold value.

PRMiner Algorithm: 1. We first specify the thresholds minProfit, maxRisk and  minWinRate. In our interday model we set minsup = 1 if minWinRate > 0, otherwise the minsup = 0.

2. The algorithm scans TDB once, stores all of 1-patterns into the oneItemList and the price is stored in the PList. The price in a specific TID ti is gotten by using the function P(ti) from PList.

3. We use genPattern (Figure 3) to generate BP and SP which use the DFS strategy by joining and shifting the 1-pattern from oneItemList to get k-patterns.

4. After the BP and SP are constructed, the trading rules are generated by RuleGenerator. Then these trading rules are used to do trading simulation without rescanning TDB, thus the trading result is acquired.

5. Comparing the trading result with the mining threshold, the profit rules are collected.

Figure 3.  The pseudo code of genPattern

V. EXPERIMENTAL RESULTS The correctness of profit mining and the validation of the  mining results are verified in the following experiments along with the measurement results of performance.

A. First Experiment  TABLE III.  MINING RESULTS FROM TABLE I    In the first experiment, TABLE I is used as our  transactional DB. The mining parameters are set as follows: fee = 1, maxspan = 2, minProfit = 20, maxRisk = 50 and minWinRate = 30%. After mining, the profit rule set is shown in TABLE III. The rule No. 1 shows the rule in which BP is equal to SP, the first TC is Buy because the TP = ?BF.? It will lose money if the first TC is Sell. Although the BPs in rules No. 2 and No. 7 are identical as well as their SPs, their TPs are not the same such that the trading results are not identical.

B. Second Experiment In the second experiment, we use real data to mine profit  rules. The real data set comes from the Taiwan Economic Journal (TEJ) [12] where data of the futures market in Taiwan is chosen. Our approach is applicable for both stock market and futures market. The date of source data ranges from 2005/1/3 to 2010/6/30 with a total of 1,362 days and the dataset contains 35,602,531 transactions. The data pre- process transforms the source data into DB with the form of TABLE I.  In this experiment, the source data is changed to K-minute time period data (K-Min.) where K>0. The stock prices are transformed by indicator function SMA(b) from TA-LIB [11]. The items in DB are acquired by two functions cross-over and cross-under. We use four constants 3, 5, 8 and 11 as SMA?s parameters, then 12 items are generated.

Two of important benchmarks are used for evaluating our rules: one is buy and hold strategy (BHS), the other one is sell and hold strategy (SHS). The return of investment (ROI) is used as the profitability measurement.

TABLE IV.  COMPARING THE ROI AMONG BHS, SHS AND PROFIT MINING IN REAL TRANSACTIONAL DB    To acquire the result with higher ROIs, the mining  thresholds are set to minProfit = 982, maxRisk = 2290, minWinRate = 30%, fee = 4 and maxspan = 2. After mining, we have the minimal ROI = 23.44 and maximal ROI = 28.20  as shown in TABLE IV. The mined profit rules have good trading results that investors are interested in. The 30 Min.

DB is chosen as the TDB for showing the performance of running PRMiner in Figures 4, 5, and 6.

Figure 4.  The performance of PRMiner on minProfit     Figure 5.  The performance of PRMiner on maxRisk     Figure 6.  The performance of PRMiner on minWinRate

VI. CONCLUSION In this paper, we extended the research of Profit Mining  model and proposed an effective algorithm for mining profit rules. Experiments were performed to show the effectiveness of our PRMiner algorithm. In data mining research, one expects to mine the knowledge of any kind that users might     be interested in. These useful results of knowledge can be discovered and presented in the forms of rules or patterns to meet users? expectation. Similarly in Profit Mining, we think more types of profit rules can be defined and discovered in many financial sectors. Since investors have their own measurement criteria for mining the preferred trading rules, there will be more useful models of financial data mining to be investigated in the future study.

