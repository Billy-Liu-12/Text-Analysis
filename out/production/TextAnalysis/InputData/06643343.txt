Application Research of Improved FUP Algorithm in Network Security Linkage System

Abstract?Association rules are an important branch of data mining. Aiming at the update maintenance problem of association rules when increase the database data while keep the minimum support unchanged, on the basis of FUP algorithm, this paper proposes a matrix-based incremental association rules mining algorithm, namely MBFUP algorithm. The algorithm just scans the database once, and doesn?t produce candidate item sets, greatly reduces the space complexity and time complexity of the algorithm.

Keywords- FUP algorithm; frequent item-setl; association rules

I. INTRODUCTION With the increasingly complex network structure and  increasing large scale network, the threat of intrusion events to computer system security and network becomes larger and larger. In order to insure the confidentiality and integrity of information on the internet and prevent attack behavior form internal and external network, an increasing number of network security products are widely used. During the process of using these products, they will produce vast amounts of security events. These events are not isolated, there are complex relations between them. Applying association rules mining method on network security events, identifying potential network threats, play an important role in vulnerability improvement, stability, and ultimately situation assessment of network security equipment linkage system.

As an important research direction in data mining, association rules? main goal is to find interrelation that is hidden in a large amount of data, users maybe interested in and have an important value to decision makers, then through strength and confidence degree to find the strength level of these rules. The most classical association rules algorithm is Apriori algorithm, most of other algorithms are obtained on the basis of this algorithm. On the basis of Apriori, literature [2] adopts the way of storing transaction horizontally to calculate the support of candidate item sets, improves the operation efficiency of the algorithm by introducing address index in the pruning process. Literature [3] proposes a transaction compression matrix algorithm, using the method of ?and operation? to produce frequent item sets, reducing the number of candidate item sets greatly. Cheung puts forward an incremental updating association rules algorithm to maintain the existed association rules when database changes.

According to the specific characteristics of data in network security linkage system, this text proposes an improved FUP  algorithm and applies it to the system to analyze network security events.



II. FUP ALGORITHM  A. The Basic Idea of FUP Algorithm Among numerous incremental updating algorithms, FUP  algorithm, raised by D W Cheung, is of the most typical, effective and practical algorithm in improved Apriori algorithms. It can effectively deal with how to get frequent item sets in case of data increment. The basic idea of FUP algorithm is :  First, we assume that the frequent item sets  n  i i  L L =  = ? (n is  the number of elements in the maximum frequent item sets of L) found in DB have been preserved, it needs to scan DB and db many times.

In the fist scan, for any item set X: ? 1) If 1  DB X db X L? ? ? , calculate X?s support count  . sup DB db  X port ? ( . sup  DB db X port  ? is the support count of X in the new  transaction database), if . sup min_ sup (| | | |)  DB db X port port DB db  ? ? ? + ,then X is frequent  item set, and 1 1L L X= ? , else 1 1 DB DB L L X= ? .Clearing Redundant  Attributes ? 2) If 1  DB X db X L? ? ? , calculate X?s support count in db  . sup db  X port ,if . sup min_ sup | | db  X port port db? ? , add this item set  to C , otherwise, this item is certainly not frequent item set,  delete it form db. At the same time scanning the database DB, . sup  DB db X port  ? calculate . sup  DB db X port  ? , if it not less than The  Difference Property min_ sup (| | | |)port DB db? + , then X is  frequent item set, 1 1L L X= ? .

In the second scan, for item set in 1  1DB L L? , as X is not  frequent item set, according to the property of frequent item sets, X doesn?t appear in 2  DB L , so we can delete X from 2  DB L  without scanning transaction database. Use function _appriori gen to generate candidate item sets  C , and remove  item sets in 2 DB L , then  C = _appriori gen (  L )- 2  DB L   DOI 10.1109/ICCIS.2013.425    DOI 10.1109/ICCIS.2013.425    DOI 10.1109/ICCIS.2013.425    DOI 10.1109/ICCIS.2013.425    DOI 10.1109/ICCIS.2013.425    DOI 10.1109/ICCIS.2013.425    DOI 10.1109/ICCIS.2013.425    DOI 10.1109/ICCIS.2013.425     ? 1) For the rest of item sets in 2 DB L , scan database db and  calculate . sup DB db  X port ?  , if it not less than  min_ sup (| | | |)port DB db? + ,then 2 2L L X= ? .

? 2) Calculate the support count of item sets in 2C  namely . sup db  X port , if . sup db  X port ? min_ sup | |port db? ,delete X from 2C .Otherwise, calculate .sup DB dbX port ? , if it greater than or equal to min_ sup (| | | |)port DB db? + ,then X is frequent item set, 2 2L L X= ? .

Keep on looking for frequent item sets with a similar process above, end the algorithm until new frequent item sets can not be found..

B. The Advantages and Disadvantage of FUP Algorithm Data Cleaning For new data, the superior of using FUP algorithm than  Apriori is: 1) With each run of Apriori algorithm, we need to scan  entire database; While FUP makes full use of mining results for original database DB, it scans database DB only when determine whether item set that is not frequent in DB while frequent in db is frequent item set or not.

2) FUP algorithm takes advantage of the property of  frequent item sets, by analyzing whether k-item set in DB and db is frequent or not, filter a lot of candidate item sets in the process of determining frequent item sets.

FUP algorithm, however, has its shortcomings. 1) When processing the new database, it requires the times rescanning the entire database and the length of the longest frequent item sets being the same, and the efficiency is low. 2) The algorithm needs to calculate the candidate item sets form the original data and the new data respectively, the number of candidate item sets is large, and it will consume a lot of time.

3) As kdbC is generated by kL , it is very large and many of them are not frequent, even some wouldn?t appear in db which will impact the efficiency of the algorithm.

In this paper, according to the characteristics of the linkage system data, a new algorithm of data cleaning is proposed.

This data cleaning algorithm for different granularity size data, mainly divided into three level of granularity, can be set to record level, attribute level and element level. In view of the different granularity levels of data use different cleaning methods.



III. IMPROVED FUP ALGORITHM?MBFUP ALGORITHM  A. Relevant Principle of The MBFUP Algorithm Definition 1: Boolean Matrix: is a matrix with element ?0?  or ?1?.

Definition2: Let 1 2{ , ,... }nI i i i= be a set of items,  1 2{ , ,... }mD t t t= is a database of transaction. Each element of matrix TM is defined as follows:  1, { }  0, j i  ij  j i  if t A  if t  ? =  ?  ? ? ? ? ? ?  , where =1,2,...,m, j=1,2,...ni  Definition 3: In Boolean matrix, the vector of each item jI is defined as 1 2=(A ,A ,...,A )j j j mjTM , the support count of jI is  i=1 sup (I )=  m  j ijp A? .

Definition 4: In Boolean matrix, the vector inner product is expressed as <TM ,TMi j > , <TM ,TMi j > = 1 1 2 2sup (I ,I )=A A +A A +...+A Ai j i j i j mi mjp ? ? ? .

Property 1: Any nonempty subset of frequent item sets is also frequent item set, the superset of non-frequent item sets is non-frequent.

Property 2: If k-item sets X is frequent item in DB db? , then X is frequent at least in one of DB and db.

Corollary: Frequent item sets of DB db? are produced in item sets of DB or db.

Property3: If a transaction does not include any item set of CK-1, then deleting this transaction has no effect on the calculation of jl ( j k? ).

Property 4: If there is a transaction T whose length is smaller than K, then when we generate frequent k-item sets form frequent k-1 item sets, it is no need to scan T.

Property 5: t D? ? , for i I i t? ? ? , and Kl L i l? ? ? , you should delete i(where I presents item set, i presents item), that is to say that you should delete non frequent form transaction.

Property 6: Item-set e belongs to Lk-1, there is an item p in e, Lk-1(p) presents the number of item p in all frequent k-1 item-sets of the frequent set Lk-1, if |Lk-1(p)| is smaller than k-1, then when we generate frequent k-item sets form frequent k-1 item sets, we can delete this item form database.

Property 7: If the number of item in frequent k-item-sets is not bigger than k, then this set is the collection of the maximum frequent item-sets.

B. The Basic Idea of MBFUP Algorithm In MBFUP Algorithm, we use a matrix-based Apriori  algorithm to generate the frequent item-sets of the original database. The basic idea is that we should make full use of the mining results of the original database to reduce the number of scanning the original database, at the same time we should establish a prefect pruning function which will prune item-sets that is unlikely to be frequent item-sets to reduce the number of candidate item-sets, thereby we can reduce the complexity of the algorithm.

Through property 1 we know : If X is frequent item-sets in both DB and db, then X must be frequent item-set, so this algorithm only need to consider the frequent item-sets in the original database and the new database regardless of the non- frequent item-sets. After we add new data set db, the frequent item-sets X of database can be divided into three categories: (1) X is frequent in both DB and db; (2) X is frequent in DB while non-frequent in db; (3) X is non-frequent in DB while frequent in db. In the following we will discuss these three situations respectively.

Situation (1): It is obviously that X is the frequent item-sets of DB db? .

Situation (2): you should scan the transaction matrix dbTM to obtain X?s support count in db-- . dbX count , after that let us check . + .db DBX count X count , if it is not smaller than min_ sup (| | | |)port DB db? + , then X is frequent.

Situation (3): you should scan transaction matrix DBTM to obtain X?s support count in DB-- . DBX count , after that let us check . + .db DBX count X count , if it is not smaller than min_ sup (| | | |)port DB db? + , then X is frequent.

Now we get the frequent 1-item sets. We can use frequent k-item sets generation algorithm to generate frequent k-item sets (k>=2) as well as the frequent k-item sets of db. Then let us use compression transaction matrix algorithm to compress the transaction matrix of db.

C. Algorithm Description 1) Related Sub-algorithm  a) Transaction Matrix Generation Algorithm  Suppose that transaction 1 2{ , ,... }mD t t t= , item-sets  1 2{ , , ... }nI i i i= , according to definition 2, let us build a transaction matrix TM(m+1) (n+1) which has m+1 rows and n+1 columns. The core algorithm is as follows  -1  = 0  n-1  j= 0  (i=0;i<m;i++) (j=0;j<n;j++) (i t ) [i][j]=1  [i][j]=0 (j=0;j<n;j++)  [ ][j]= [i][j]  (i=0;i<m;i++)  [ ][n]= [i][j]  j i  m  i  for for if A else A  for  A m A  for  A i A  ?  ?  ? b) Compression Transaction matrix Algorithm  Suppose we have known the minimum support count min_support and the transaction matrix TM(m+1) (n+1), where m represents the number of transaction, n represents the total number of items. The core algorithm is as following:  ( )k 1  c_ ' for i=0;i<m;i++ if(|T |<k) T if L i k 1 recalculate the c_count'th column for(i=0;i<m;i++) if(A[i][n]<k)  then  i i  count th row of the matrix  then delete the row that is in then delete the column that i is in? < ?  delete the row that A[i][n] recaculate the  s _ count'th row for(i=0;i<n;i++) if(A[m][i]<min_support)  delete the column that A[m][i] is in  is in  c) Frequent K-item Sets Generation Algorithm  Suppose the compressed transaction matrix is s rTM ? , when k>1, the Boolean ?AND operation? is carried out to an arbitrary k vector of the Boolean matrix. If the sum of ?1? of the operation results is not smaller than min_support, then we  say the item-sets that the k column rector corresponds to is frequent k-item sets. The core algorithm is as follows:  1( 0; ; ) { // [1] // dim  ( '1' [1] ... [ ] min_ sup ) // [1] dim  k  r  j  j j  j  for j j C j  DM represents the conlumn that the first item of the jth k ensional combination corresponds to if the num of in DM DM k port i represents the first item of the jth k e  ? = ? + +  ? ? ?  1 1  // { [1], ... [ ]}  } k k j j  nsional combination L L i i k  + + = ?  2) Generate the Frequent Item-sets of DB db? Input: The original database DB, the new database db, the  frequent item-sets of DB--LDB, minimum support min_sup Output: All the frequent item-sets of DB db? Algorithm: Call the transaction matrix generation algorithm and  construct MTdb 1 1  db 1 1  db 1 1 1 1 1 1  db db 1 1  db  1 1 1 1  1 1  db  for all (X X )  L L ; ; = - ; (X X )  . + .

if( . + . min_ sup (| | | |))  L L ; ; (X X  DB  DB  DB DB  DB  db DB  db DB  DB DB  DB  X L L if L L  X L L X L L X if L L calculate X count X count X count X count DB db  X L L X if L L  ? ? ? ? ? = ? = ? ? ? ?  ? ? + = ? = ?  ? ? ?  1 1 1 1  ) if( . + . min_ sup (| | | |))  L L ; ; thus we get the 1  db DB  db db  X count X count DB db X L L X frequent item sets of DB db  ? ? + = ? = ?  ? ?  -1  db  { Apply frequent k-itemsets generation algorithm to  Apply compression transaction matrix algorithm to ;  //pruning for  -  ( -1)-  ( 2; ;k++)  , ;k k db db  k  DB  k db  L L  k itemset X L for k itemset Y  for k L  get  and compressit  ? ? ? ?  = ? ?  1 -1  -1 -1  -1 -1  (Y X) = -Y  for  X (X ) = ; = - ; = -  . + .

( . + . min_ sup (| | | | )  = ; = -  k k  DB  k k  DB DB k  DB k k k k k k k  db DB DB db db  db DB  db DB k k k k  DB DB  L L if L L  L if L L L X L L X L L X else count X count X count if X count X count DB db L L X L L X  ? ? ?  ? ? ? ?  ? ? + ?  -1 -1  1 2  X . + .

( . + . min_ sup (| | | | ) = ; = -  } return L L ... L  k  db  db DB  db DB k k k k  db db  k  for L count X count X count if X count X count DB db  L L X L L X  ? ?  ? ? + ?  ? ?     D. The Specific Application of MBFUP Algorithm in Network Security Linkage System The steps of data processing are as follows: a) Data Collection Collecting the log information generated by security  products (such as firewall, IPS, vulnerability scanning system, anti-virus software) in the network security linkage system through the proxy.

b) Data preprocessing Cleaning and filtering the collected log information.

Processing the duplicate data, incomplete data and error data by using the method of redundant merge, duplicate merge, concurrent merge, then format the processed data by using Syslog protocol.

c) Data transformation Data transformation is to transform data into forms suitable  for mining. Due to the MBFUP algorithm can only process the Boolean data and data in linkage system contains many attributes, in order to better use the algorithm, it needs to discretize the data and convert them to Boolean attributes. The method is as follows: for category attribute, when the value of this attribute is limited, you only need to map each attribute to a Boolean attribute; when the range of the value is wide, you can use a clustering method to divide it into several sections based on the distribution of data in database, then convert each section into a Boolean attribute.

d) Mining with Association Rules Mining the constantly updating database with improved  FUP algorithm to identify the possible relationship among them.

e) Output Results  If the association rules found is TCP SYN scanning event ? SYN flooding attack, it means that when a TCP SYN scanning event happens, it is likely to happen SYN flooding attack. In order to reduce the loss of the system, we should take some preventive measures, such as executing anti-scan configuration for firewall, blocking session connection an so on to reduce the incidence of threatening events.



IV. CONCLUSIONS Aiming at the question of ?Given the minimum support,  when a new database is added to the original database, how to generate frequent item-sets?, after analyzing the basic idea and execution process of FUP algorithm, this paper proposes a matrix-based improved FUP algorithm?MBFUP algorithm.

The algorithm only needs to scan database once, it makes full use of the property of matrix and improves space utilization and the efficiency of mining. Applying the algorithm to network security linkage system can timely analyze the massive security events, reveal their potential relationship as soon as possible and provide support for network maintenance work.

