On Mining Association Rules with Semantic Constraints in XML

Abstract?An improved association rule mining technique with semantic constraints is proposed in XML. The semantic constraints are expressed through the use of close properties of items in an XML document that conforms to a schema definition.

The proposed association rule mining with semantic constraints can be used for mining both contents and structures in XML.



I. INTRODUCTION  As XML [1] is widely used in data representation, exchange and storage format over the world wide web [2], [3], [4], data mining and knowledge discovery activities in XML [5], [6], [7], [8] are receiving significant attention. One of the important data mining activities is association rule mining in XML [9], [10], [11], [12], [13], [14], [15], [16], [17], [18].

In XML, same data can be represented in different struc- tures. Moreover, XML data can be associated with schema languages(e.g., DTD [1], Relax NG [19], XML Schema [20]).

The flexibility of representing same data in different structures and in different schemas has made the task of data mining, specifically XML association rule mining, more complex.

Although there are many proposals in XML association rule mining techniques in literature, to the best of our knowledge, there is a little work in mining association rule with semantic constraints for XML document conforming to a schema definition. By the semantic constraints, we mean to use the ordered property in XML document that conforms to a schema. Using the ordered property, we capture the correct items in a transaction for mining association rules. We use the following example to indicate the research problem.

Consider the DTD in Fig.1. The DTD describes the publi- cations from different research groups.

<!ELEMENT research(group)+ > <!ELEMENT group(name, publication?, (flagship, location?))+ > <!ELEMENT publication(title, type, keyword?, publisher?, author+)? > <!ELEMENT name(#PCDATA) > <!ELEMENT flagship(#PCDATA) > <!ELEMENT title(#PCDATA) > <!ELEMENT type(#PCDATA) > <!ELEMENT keyword(#PCDATA) > <!ELEMENT publisher(#PCDATA) > <!ELEMENT author(#PCDATA) >  Fig. 1. An XML DTD  The XML document in Fig.2 conforms to the DTD in Fig.1. The tree representation of the XML document in Fig.2 is shown in Fig.3. In an XML tree, to represent a node, we use an identifier v, a label e and the associated value txt (for leaf nodes only). For example, Tv2 is represented as (v2 : name : TasMAN) and Tv1 is represented as (v1 : group (Tv2Tv3Tv4)).

<research> <group> <name>TasMAN</name> <publication> <title>Sensor Data Mining</title> <type>Book</type> <keyword>Pattern</keyword> <keyword>Clustering</keyword> <publisher>Kluwer</publisher> <author>John Li</author> <author>Mark Dev</author> <title>Mining Provenance from Hydrological Process</title> <type>Journal</type> <keyword>Workflow</keyword> <keyword>Clustering</keyword> <publisher>IEEE</publisher> <author>John Li</author> <author>Riccu Von</author>  </publication> <flagship>WFO</flagship> </group>  </research>  Fig. 2. An XML document  Fig. 3. An XML document in Fig.2 represented in XML tree  Now consider the rule that if the author is ?Mark Dev?, then the research topic (keyword) of the author probably is     ?Clustering?. To calculate the support and confidence for the rule Mark Dev ? Clustering, we need to consider the transactions that include ?author? and ?keyword? elements in the XML document. If we observe the XML tree in Fig.3, we see that the elements ?keyword? and ?author? are repeated under the element ?publication?. In order to calculate transactions containing the elements keyword and author, we first consider the minimal hedges Tv5Tv6Tv7Tv8Tv9Tv10Tv11 and Tv12Tv13Tv14Tv15Tv16Tv17Tv18 and then we consider the minimal transactions Tv7Tv8Tv10Tv11 and Tv14Tv15Tv17Tv18 using the ordering property in XML document. Note that Tv10Tv11Tv14Tv15 is not a minimal transaction because the the authors and keywords are from different hedges violating the ordered properties in XML document.

So the support for the rule Mark Dev ? Clustering is 0.5 and the confidence is 0.5. However, the support for the rule John Li ? Clustering is 1.0 and the confidence is 1.0.

We aim to contribute on the followings: ? We exploit both schema (DTD) and document in mining  XML association rules.

? The proposed XML association rule mining considers se-  mantic constraints expressed through the ordered property in XML documents.

? Both structure and content can be considered in mining association rule with semantic constraints.

The paper is organized as follows: In Section II, we give basic definitions and notation. In Section III, we define the language and algorithm of proposed association rule mining with semantics for XML. We further define support and confidence for the proposed XML association rule mining in Section III-C. Finally, we conclude with future work in Section IV.



II. BASIC DEFINITIONS AND NOTATION In this section, we present basic definitions needed through-  out the paper.

We define the notation of DTD.

Definition 2.1 (DTD): An XML DTD is defined as D =  (EN,G, ?, ?) where: (a) EN is a set of element names.

(b) G is the set of type constructs and g ? G is defined as one of the following: (i) g = Str where Str means #PCDATA; (ii) g = e where e ? EN ; (iii) g = ? means EMPTY type; (iv) g = g1?g1 or g1|g1 is called conjunctive or disjunc-  tive sequence respectively where g1 = g is recursively defined, g1 ?= Str?g1 ?= ?; g = gc2?(g2 = e?e ? EN or g2 = [g? ? ? ? ?g] or g2 = [g| ? ? ? |g]), called a component where c ? {?, 1,+, ?} is the multiplicity of g2, ?[ ]? is the component constructor;  (c) ?(e) = [g]c is the function defining the type of an element e where e ? EN and g ? G. We term ?(e) as element definition.

(d) ? is the root of the DTD and that can only be used as ?(?). ?  We now give an example to explain the notation of DTD.

Example 2.1: Consider the DTD in Fig.1. The DTD is  defined as D = {EN,G, ?, ?} where EN = {research, group, name, publication, flagship, location, title, type, keyword, publisher, author}, G = {[group]+, [name?publication??[flagship?location?]]+, [title?type?keyword??publisher??author+]}, ?(research) = [group]+, ?(group) = [name?publication??[flagship?location?]]+, ?(publication) = [title?type?keyword??publisher?? author+], ?(name) = Str, ?(flagship) = Str, ?(location) = Str, ?(title) = Str, ?(type) = Str, ?(keyword) = Str, ?(publisher) = Str, ?(author) = Str and ? = research.

We now define paths on the DTD.

Definition 2.2 (Path): Given a D = (EN, G, ?, ?), a simple  path ? on D is a sequence e1/ ? ? ? /em, where ?i(ei ? EN) and ? ew ? [e2, ? ? ?, em] (ew is an element in ?(ew?1)). A simple path ? is a complete path if e1 = ?. A path ? is empty if m = 0, denoted by ? = ?. When we say path, we mean simple path. We use function last(?) to return em, beg(?) = e1 and par(ew) = ew?1, the parent of ew. We use len(?) to return m.

Paths satisfying this definition are said to be valid on D. ? We give an example to explain paths on DTD.

Example 2.2: Consider the DTD in Fig.1. In Figure,  group/name is simple path. research/group/name is a complete path because research is the root of the DTD.

last(group/name) is name and beg(group/name) is group.

len(research/group/name) is 3.

We define the notation of an XML tree.

Definition 2.3 (XML Tree): The XML tree T representing  an XML document is defined to be one of the followings: (i) T = ?(empty).

(ii) A labeled node T = (v : e : txt).

(iii) If T1, ? ? ?, Tf are trees, then T = (v : e (T1T2 ? ? ?Tf ))  is also a tree. T1? ? ?Tf are called subtrees. ? The symbol v is the node identifier which can be omitted  when the context is clear.

Now we give an example to show an XML tree.

Example 2.3: Consider the document in Fig.2.

The document is represented as Tvr = (vr : research(Tv1)). Then, Tv1 = (v1 : group(Tv2Tv3Tv4)), Tv2 = (v2 : name : TasMAN), Tv3 = (v3 : publication(Tv5Tv6Tv7Tv8Tv9Tv10Tv11Tv12Tv13Tv14Tv15Tv16 Tv17Tv18)), Tv4 = (v4 : flagship : WFO), Tv5 = (v5 : title : Sensor Data Mining), Tv6 = (v6 : type : Book), Tv7 = (v7 : keyword : Pattern), Tv8 = (v8 : keyword : Clustering), Tv9 = (v9 : publisher : Kluwer), Tv10 = (v10 : author : John Li), Tv11 = (v11 : author : Mark Dev), Tv12 = (v12 : title : Mining Provenance from Hydrological Process), Tv13 = (v13 : type : Journal), Tv14 = (v14 : keyword : Workflow), Tv15 = (v15 : keyword : Clustering), Tv16 = (v16 : publisher : IEEE), Tv17 = (v17 : author : John Li), Tv18 = (v18 : author :     Riccu V on). The XML tree is shown in Fig.3.

We define the hedge and the conformation of hedge.

Definition 2.4 (Hedge and Conformation): Let  (v : e(T1 ? ? ?Tn)) be a tree where T1 ? ? ?Tn are subtrees of a node v with label e. A hedge H is a maximal sequence of consecutive subtrees from T1 ? ? ?Tn that conforms to a component g under the context node v, denoted by H?g or Hg . ?  When there are multiple hedges for g, we use Hgj to denote one of them and Hg? to denote all of them.

We now give an example on hedge.

Example 2.4: Consider the DTD in Fig.1 and  the tree in Fig.3. Let the component be g1 = [name?publication??[flagship?location?]] be a component.

Then Hg11 = Tv2Tv3Tv4 is the hedge conforming to g1. Let g2 = [title?type?keyword  ??publisher??author+]+  be the component. Then Hg21 = Tv5Tv6Tv7Tv8Tv9Tv10Tv11Tv12Tv13Tv14Tv15Tv16Tv17Tv18 is the hedge conforming to g2.

Now consider the structure g3 = [title?type?keyword??publisher??author+]. Then Hg31 = Tv5Tv6Tv7Tv8Tv9Tv10Tv11 and H  g3 2 =  Tv12Tv13Tv14Tv15Tv16Tv17Tv18 are the hedges conforming to g3.

We define the tree conformation using the hedge.

Definition 2.5 (Tree Conformation): Given a DTD D =  (EN,G, ?, ?) and XML Tree T , T conforms to D denoted by T ? D if T=(? H?(?)). ?  We now give an example to illustrate the tree conformation.

Example 2.5: Consider the DTD in Fig.1 and the tree  representation of the XML document in Fig.3. The root ? = research and the the element definition ?(research) = [group]+. The hedge H [group]  +  = Tv1 conforms to the com- ponent [group]+. We then get Tr = (researchH [group]  +  ).

Thus the tree in Fig.3 conforms to the DTD in Fig.1.

We define minimal structure of a DTD.

Definition 2.6 (Minimal Structure): Given an element defi-  nition ?(e) and two elements e1 and e2 in ?(e) of a DTD, the minimal structure g of e1 and e2 in ?(e) is the innermost component belonging to the component ?(e) that contains both e1 and e2. ?  We present an example to show the minimal structure.

Example 2.6: Let group be an element and  [name?publication??[flagship?location?]]+ be the element definition of group in the DTD in Fig.1.

Now consider two elements flagship and location.

Then the minimal structure of the elements flagship and location is [flagship?location?]. But the minimal structure of publication and flagship is [name?publication??[flagship?location?]].

We now define the minimal hedge.

Definition 2.7 (Minimal Hedge): A hedge that conforms to  a minimal structure g is a minimal hedge. ? We now define prefixed trees. The reason for defining  prefixed trees is to get the trees for a path.

Definition 2.8 (Prefixed Trees): We use T e to denote a tree rooted at a node labeled by the element name e. Given path e1/? ? ?/em, we use (v1 : e1).? ? ?.(vm?1 : em?1).T em to mean the tree T em with its ancestor nodes in sequence, called the prefixed tree or the prefixed format of T em .

Given path ? = e1/? ? ?/em, T? denotes (v1 : e1).? ? ?.(vm?1 : em?1).T em and is called a tree of the path ?. When the context is clear, we use T em to mean T?.

Given path ? = e1/? ? ?/ek/? ? ?/em, prec(T?) = (v1 : e1).? ? ?.(vk : ek).? ? ?.(vm : em) means the precision of the tree T? for path ?.

?T?? is the set of all T?. ?T?? = {T?1 , ? ? ? , T?f }. |?T??|  returns the number of T? in ?T??. ? Example 2.7: Consider an element title. Then T title  means one of the trees Tv5 and Tv12 in Fig.3. Let ? = research/group/publication/title. The prefixed trees of T title are (vr : research).T groupv1 .T  publication v3 .T  title v5  and (vr : research).T groupv1 .T publication v3 .T  title v12 .

The precisions of the tree T? are prec(T?) = ((vr : research).T  group v1 .T  publication v3 ). Then?T??=?T title?={Tv5 , Tv12} and |?T title?|=2.

We now define the minimal transaction from minimal hedge.

Definition 2.9 (Minimal Transaction): Consider a minimal  structure gm = [e1? ? ? ? ?ei?ej? ? ? ? ?en] for the elements ei and ej and a minimal hedge for gm is Hgm . Then the minimal transaction ? contains only the trees with the elements ei and ej . ?  We present an example on minimal transaction.

Example 2.8: Let g3 =  [title?type?keyword??publisher??author+] be a minimal structure for the elements author and keyword. Then Hg31 = Tv5Tv6Tv7Tv8Tv9Tv10Tv11 and Hg32 = Tv12Tv13Tv14Tv15Tv16Tv17Tv18 are the minimal hedges conforming to g3.

From the hedge Hg31 , we get the minimal transaction ?1 = Tv7Tv8Tv10Tv11 . In similar way, we get the minimal transaction ?2 = Tv14Tv15Tv17Tv18 from the minimal hedge Hg32 .



III. ASSOCIATION RULE MINING IN XML  A. Language for association rule mining  We now define the language for association rule mining in XML.

Definition 3.1: An XML association rule is defined as (?, ? ? ?) where ? is a complete path called context, ? is a set of simple paths called rule body, ? is a set of simple paths called rule head and ?/?, ?/? are complete paths. ?  Example 3.1: Consider the XML association mining rule as (research/group, publication/author ? publication/keyword). In the rule, research/group is a complete path and publication/author and publication/keyword are simple paths.

Also, research/group/publication/author and research/group/publication/keyword are complete paths.

Example 3.2: Consider another XML association min- ing rule as (research/group/publication, author ? keyword). In this example, we see that the context research/group/publication is different from the context research/group in the example 3.1.

B. Capturing semantics in ordered XML document  To capture semantics for association rule mining in ordered XML document, we use the concept of minimal transaction.

The minimal transaction extracted from the minimal hedge preserves the semantics using close properties of items in mining association rules. The semantics through the close properties is considered for the ordered XML documents. We now give an example to show the close properties in minimal transaction.

Example 3.3: Consider the association rule in the example 3.1. First, we calculate the minimal structure for the elements author and keyword as g3 = [title?type?keyword  ??publisher??author+]. This is because publication is a common path for the paths publication/author and publication/keyword. Now the minimal hedges are Hg31 = Tv5Tv6Tv7Tv8Tv9Tv10Tv11 and Hg32 = Tv12Tv13Tv14Tv15Tv16Tv17Tv18 conforming to g3.

Note that we do not consider Hg3x = Tv5Tv6Tv7Tv8Tv9Tv17Tv18 a minimal hedge because the trees Tv17Tv18 violate the order of document to form a minimal hedge.

From the hedge Hg31 , we get the minimal transaction ?1 = Tv7Tv8Tv10Tv11 . In similar way, we get the minimal transaction ?2 = Tv14Tv15Tv17Tv18 from the minimal hedge Hg32 .

C. Support and confidence for XML association rule mining with semantic constraints  We define the support(? ? ?) of an association rule (?,? ? ?) as ?(? ? ?, |?|) where |?| is the total number of minimal transactions. ? means the percentage of transactions that contain both ? and ?.

The confidence(? ? ?) of an association rule (?,? ? ?) is defined as ?(? ? ?, |?|)/?(?, |?|).

Example 3.4: In this example, we calculate support and confidence for the association rule given the example 3.1. We have already calculate the minimal transactions ?1 = Tv7Tv8Tv10Tv11 and ?2 = Tv14Tv15Tv17Tv18 in the example3.3. For simplicity, we denote the minimal transac- tions as ?1 = (Pattern)(Clustring)(JohnLi)(MarkDev) and ?2 = (Workflow)(Clustering)(JohnLi)(RiccuV on) omitting the node identifier v and the label e.

In case of MarkDev ? Clustering, we get support 0.5 and confidence 0.5. For JohnLi ? Clustering, the support is 1.0 and the confidence is 1.0.

D. Algorithm for association rule mining  We now present the algorithm for association rule mining in XML. In algorithm 1, we take an XML document T that conforms to a DTD D, context ?, body ?, head ? as inputs.

We also take optional minimum support MinSup and minimal confidence MinConf as inputs.

Input: An XML DTD D, an XML document T conforms to D, context, body, head, [MinSup,MinConf ];  Output: XML association rules with Support, Confidence; Calculate minimal structure and minimal hedges from context,1 body, head and condition; Extract minimal transactions from minimal hedges;2 Calculate support and confidence using minimal transactions;3  Algorithm 1: Mining XML association rule with semantic constraints  According to the algorithm 1, we first create the minimal structure in the DTD according to the paths of body and head under the path of context. The minimal structure is then used in creating minimal hedges in the document. In the minimal hedges, we extract the minimal transactions that only contain the values of the last elements of body and head.

Minimal transactions are further used in calculating support and confidence of the association rules.

If minimum support MinSup and minimum confidence MinConf are given as inputs, the algorithm returns the rules above the minimum support and confidence.

E. Association rule mining with structure  As the structure (e.g., labels or tags) is important for conveying the semantics of data, mining structure of the XML document is also important. The proposed association rule mining technique can be used both for mining contents and structures.

In case of association rule mining with structure, we do not consider the values of the last elements of paths in the minimal transactions. We rather consider the element names (labels) in the minimal transactions.

We give a motivating example on mining structures.

Fig. 4. Association rule mining with structure in XML  Example 3.5: Consider an XML association mining rule as (research/group, name ? flagship). This rule means that under the node group, if there is a node name, then probably, there is a node flagship. We show the sketch of mining XML structure in Fig.4. In this example, the minimal transaction is (v2 : name)(v4 : flagship) from the XML document in Fig.3.

Example 3.6: Consider another XML association mining rule as (research/group/publication, title ? type, publisher). This rule means that under the node     Fig. 5. Association rule mining with structure in XML  publication, if there is a node title, then probably, there are nodes type and publisher. We show the sketch of mining XML structure in Fig.5.

In this example, the minimal transactions are (v5 : title)(v6 : type)(v9 : publisher) and (v12 : title)(v13 : type)(v16 : publisher) from the XML document in Fig.3.



IV. CONCLUSIONS  We propose an improved theoretical framework on XML association mining rule with semantic constraints. The seman- tic constraints is captured using minimal hedge and minimal transaction considering the ordered property of XML data.

The proposed association mining rule can not only be used in content mining, but also be used in mining structure in XML. In future, we aim to investigate performance analysis of the proposed algorithms for XML association rule mining with semantic constraints for synthetic and real world data.



V. ACKNOWLEDGEMENT  The Tasmanian ICT Centre is jointly funded by the Aus- tralian Government through the Intelligent Island Program and CSIRO. The Intelligent Island Program is administered by the Tasmanian Department of Economic Development, Tourism and the Arts. This research is supported as part of the CSIRO Wealth from Oceans National Research Flagship and Information and Communication Technologies (ICT) Centre Capability Development Project.

