Towards an Intelligent Keyword Search over XML and Relational Databases

Abstract?Keyword search has been the major form of re- trieval method in information retrieval system, and has become an important way for novice to explore data-centric XML and relational databases (RDB). Recent years have witnessed many approaches proposed for keyword search over XML and RDB. However, those approaches cannot intelligently exploit hidden semantics in XML or RDB, and thus encounter serious problems in processing keyword queries. In this paper, we point out mismatches between query answers returned by existing approaches and the common expectations in keyword search over XML and RDB. We analyze these mismatches and discover that the main reasons are due to the unawareness of semantics of object, relationship and attribute in databases. To capture these semantics, we construct Object Relationship (OR) data graph for XML and Object Relationship Mixed (ORM) data graph for RDB, and propose an intelligent keyword search based on OR and ORM data graph model to retrieve more informative answers.

Finally, to further facilitate the usability of keyword search, we also show our ongoing work to enhance the expressive power of keyword queries. Particularly, we 1) enable users to explicitly indicate their search intentions by relation, attribute and tag names in keyword queries; 2) handle recursive relationships and identifier-dependency relationships (IDD) in databases; and 3) incorporate aggregate function into keyword queries so that users can explore databases with aggregate queries.



I. INTRODUCTION  The success of Web search engines has made keyword search the major form of retrieval method in information retrieval system. Given the rapid growth of XML and rela- tional data repositories, the ability to support keyword search over such repositories has become important. In contrast to traditional structured query, keyword search enables users to query the databases easily by issuing some keywords without full knowledge of the database schemas or query languages.

Recent years have witnessed many approaches to keyword search over XML and RDB. For XML keyword search, exist- ing approaches [8], [11], [13], [15] are structure-based because they mainly rely on the exploration of the structure of XML data. Those approaches can be classified as tree-based and graph-based search. The tree-based search is used when an XML document is modeled as a tree, i.e. without ID references (IDREFs), while the graph-based search is used for XML documents with IDREFs. Almost all tree-based approaches are based on some variations of LCA (Least Common Ancestor) semantics such as SLCA and ELCA. Due to the unawareness of real semantics in XML data, these LCA-based approaches suffer from several serious problems such as meaningless answers, duplicated answers, missing answers, and etc.

For RDB keyword search, existing approaches [4], [5], [6], [9] are also structured-based because they rely on the  foreign key-key references of RDB. Those approaches can be classified as data graph based and schema graph based. Data graph based keyword search on relational databases takes a relational database as a data graph. Each node in the data graph represents a tuple in some relation in the database and each edge between two nodes in the data graph represents a foreign key-key reference between the two tuples represented by these two nodes. An answer to a keyword query is defined as a minimal connected subgraph which contains nodes that match keywords in the keyword query. On the other hand, schema graph based keyword search takes a relational database schema as a schema graph. Each node in the schema graph represents a relation in the database and each edge between two nodes in the schema graph represents a foreign key-key reference between the two relations represented by these two nodes. To answer a keyword query, a set of SQL statements are generated w.r.t. possible interpretations of the keyword query.

The results of the SQLs are considered as the answers. Without considering semantics in the database, these RDB keyword search techniques suffer from the problems of retrieving in- complete, duplicated, and meaningless answers. Moreover, the retrieved answers are highly dependent on the schema of RDB and difficult to understand their intuitive meanings.

In this paper, we point out mismatches between answers returned and the common expectations in keyword search in XML and relational databases. We analyze these mismatches and discover that the main reasons are due to the unaware- ness of the semantics of object, relationship, and attribute of object/relationship in the databases. We refer to them as ORA-semantics. To capture the ORA-semantics, we propose Object Relationship (OR) data graph for XML and Object Relationship Mixed (ORM) data graph for RDB. Based on OR and ORM data graph model, we can achieve an intelligent keyword search over XML and RDB in order to avoid the problems mentioned above.

To further facilitate the usability of keyword search, we are also working on enhancing the expressive power of keyword queries. Particularly, we enable to users explicitly indicate their search intentions by relation, attribute and tag names in keyword queries. Thereby we can reduce the ambiguity of keyword queries and retrieve more precise answers. We also handle recursive relationships and identifier-dependency relationships (IDD) in databases in order to answer the com- mon queries on recursive relationships such as ?finding the manager name of an employee? in keyword search. Besides, we incorporate aggregate functions into keyword queries so that users can explore databases with aggregate queries such as ?finding the cheapest price for iPhone 5S?.

Lecturer (20)  Title (14)  Department (16)  Student (1)  Major (9)  Course (11)  Student (27)  DB (15)  Computing (10)  Grade (18)  A (19)  University (0)  SID (28)  S2 (29)  StaffID (21)  Computing (17)  Name (4)  First (5)  Last (7)  Bill (6)  Kennedy (8)  Qualification (25)  ?.

(26)  Course (35)  ??  SID (2)  S1 (3)  Code (12)  CS5201 (13)  Name (23)  JaneKate (24)  Code (36)  CS5201 (37)  Grade (40)  A (41)  Name (30)  First (31)  Last (33)  John (32)  Clinton (34)  Title (38)  DB (39)  Course (42)  ?? Code(43)  CS301 (44)  Title (45)  IR (46)  L1 (22)  Fig. 1: university.xml

II. PROBLEMS OF CURRENT APPROACHES  A. Problems of XML keyword search  We give a brief discussion on problems of XML keyword search. More details can be found in [7].

Problem of tree-based approaches. Data-centric XML doc- ument with no IDREF is usually modeled as a tree. Since almost all tree-based approaches are based on LCA semantics such as SLCA [13], VLCA [8], ELCA [15], we use the LCA- based approach as a representative of the tree-based search onward.

While the semantics of LCA and its variants work well for several types of XML documents, unfortunately, in some set- tings, they still suffer from the following drawbacks: they may return (1) meaningless answers, (2) miss meaningful answers (or return incomplete set of answers), (3) return duplicated answers, and (4) return answers which have problems related to relationships.

Meaningless answers are returned when the LCA node (or its variants) just simply matches query keywords and does not provide any other additional information.

More importantly, LCA-based approaches return incom- plete sets of answers because they only search up from the matching nodes for common ancestors, and never search down to find common information appearing as descendants.

Duplicated answers overwhelm users with extraneous in- formation. If an object o appears 100 times in an XML docu- ment, when o is queried, there may be 100 duplicated answers.

Although this is very annoying to users, little attention has been paid for eliminating this problem.

Last but not least, the LCA-based approaches cannot dis- tinguish between an object attribute and a relationship attribute under an object node. Therefore, when a user issues a query related to relationship attributes, users may get unexpected answers. Moreover, the LCA-based approaches also face prob- lems when queries involve ternary (and above) relationships.

Problems of graph-based XML keyword search. The graph- based search can be applied for both XML tree (without IDREF) and XML graph (with IDREFs). In the absence of IDREF, the graph-based search suffers from the same problems as the LCA-based search does. With IDREFs, object and object ID are observed and utilized. An object can be referenced by an IDREF, which has the same value with its object ID to avoid  duplication. This helps the graph-based search handle some but not all problems of the LCA-based search. Particularity, the problems related to ternary relationships and relationship attributes and meaningless answers cannot be solved no mater IDREF is used or not. The other problems including missing answer and duplicated answer can be solved if the ID Ref- erence mechanism applies to all objects. Otherwise (existing some objects without IDREF), they cannot be solved totally.

B. Problems of RDB keyword search  We choose the data graph approach [6], [2] as a repre- sentative to illustrate the limitations of RDB keyword search.

The schema graph approach [12], [1] suffers from the similar limitations. Recall that in data graph approach, an answer to a keyword query is defined as a minimal Steiner tree which contains nodes that match keywords in the query.

Incomplete answer. Since the information of objects and/or relationships in RDBs may be stored in more than one relation, an answer is incomplete if the Steiner tree contains nodes that represent part of information of objects/relationships. Consider the university database in Fig. 2. The data graph of the database is shown in Fig. 3. An answer to the keyword query {Janet Kate} is the Steiner tree consisting of a single node L1, which represents the first tuple in the Lecturer relation. This is incomplete as information of the qualifications (i.e., degrees, majors and universities) of the lecturer, which are stored in the Qualification relation, is not retrieved.

Besides, an answer is also incomplete if the Steiner tree contains nodes that represent information of relationships with- out their participating objects. This is based on the intuition that when a user refers to some relationship, he is also interested in the information of objects of the relationship. For example, an answer to the keyword query {Bill A} is the Steiner tree S1?E1. This answer is incomplete as information of the course is not retrieved.

Meaningless answers. Given a keyword query, a minimal Steiner tree which contains nodes that match keywords in the query could be meaningless. Suppose a user issues a keyword query {Bill Mary}. Two answers are shown in Fig. 4. The first answer (Fig. 4(a)) indicates that both stu- dents ?Bill Kennedy? and ?Mary Smith? are enrolled in some courses taught by the same lecturer. The second answer (Fig. 4(b)) means that there exists a student ?John Clinton? who is enrolled in some course as student ?Bill Kennedy?, and also enrolled in another course as student     Student SID Name  S1 Bill Kennedy  S2 John Clinton  S3 Mary Smith  Course Code Title StaffID  CS301 IR L2  CS5201 DB L1  CS203 Java L1  Enrol TupleID SID Code Grade  E1 S1 CS5201 A  E2 S2 CS301 B  E3 S2 CS5201 A  E4 S3 CS203 A  E5 S3 CS301 B  Qualification TupleID StaffID Degree Major University  Q1 L1 PhD CS NUS  Q2 L2 PhD CS SMU  Q3 L2 Master EE NTU  Lecturer StaffID Name  L1 Janet Kate  L2 Steven Lee  Fig. 2: university database  S3  S2 S1CS5201  E4E5  E2  E3 E1  CS203  CS301  L2  Q2  Q3 L1 Q1  Fig. 3: The data graph of the university database in Fig. 2  ?Mary Smith?. Obviously, the second result is probably not useful to the user and has lower ranking than the first one.

Depend on normal form of RDB. The relations in RDBs are usually demoralized for performance purposes.

If relations are not in 2NF, then existing works may failed to retrieve answers. For example, suppose relation Enrol1(SID,Name,Code,Title,Grade) stores infor- mation of students, courses and the many-to-many relationship between students and courses in the database in Fig. 2. The data graph of this relation has no edges because of no foreign key references. As a result, existing works retrieve no answer for the keyword query {Bill Mary}.

If relations are not in 3NF, then existing works may retrieve duplicated answers. Consider another database in Fig. 5, where relation Lecturer is not in 3NF because of the functional dependency DeptID ? FacID. Given the keyword query {ECE Fname}, existing works retrieve two Steiner trees, D1 ? L1 ? F1 and D1 ? L2 ? F1. The information of the faculty name is duplicated since L1 and L2 are in the same department and faculty.

If relations are not in 4NF, then existing works may  S3  S1CS5201  E4  E1  CS203  L1  Mary  Bill  S3  S2 S1CS5201  E5  E2  E3 E1  CS301  Mary  Bill  (a) (b) Fig. 4: Sample answers for the keyword query {Bill Mary} over the database in Fig. 2  Lecturer StaffID Name DeptID FacID  L1 Janet Kate D1 F1  L2 Steven Lee D1 F1 Department DeptID Dname  D1 ECE  Faculty FacID Fname  F1 Engineering  Lecturer_Hobby_Qualification TupleID StaffID Hobby Degree Major  Q1 L1 Swimming PhD CS  Q2 L2 Swimming PhD CS  Q3 L2 Tennis Master EE  Q4 L2 Swimming Master EE  Q5 L2 Tennis PhD CS  Fig. 5: Another example database  Fig. 6: An example OR data graph for the XML data in Fig. 1  retrieve redundant and duplicated answers. The relation Lecturer_Hobby_Degree in Fig. 5 is not in 4NF because of the multivalued dependencies StaffID ? Hobby and StaffID ? Degree. Given the keyword query {Steven hobby}, existing works retrieve four answers: L2 ? Q2, L2?Q3, L2?Q4 and L2?Q5. These answers are duplicated (redundant) w.r.t. the hobbies (degrees) of the lecturer.

Summary. There are two main reasons of the above problems.

First, the answers retrieved by the existing works are highly dependent on the database schema, i.e., the hierarchical struc- ture of XML and the foreign key reference of RDB. Second, they are unaware of the semantics of object, relationship and attribute in both XML and RDB.



III. OUR APPROACH  We pointed out limitations of keyword search over XML and RDB are due to unawareness of identification of object, relationship and attribute. We refer such identification as ORA- semantics. The term semantics has different interpretations. In this paper, we define the concept of ORA-semantics to include the identification related to object, relationship and attribute.

At data level, an object represents a real world entity. Several objects may be connected through some relationship. Objects and relationships may have a set of attribute values to describe their properties. Object, relationship and attribute value is an instance of object class, relationship type and attribute respectively at the schema level. Besides such major semantics, there may be connecting nodes such as composite attributes or aggregation nodes. More details about ORA-semantics as well as how to discover ORA-semantics are given in [10].

A. Model for XML keyword search  To solve these problems of XML keyword search, a more semantics-enriched model is needed, in which not only objects, but relationships and their attributes must be fully captured as well. We illustrate this model by proposing Object Relationship (OR) data graph to represent an XML document. Both objects and relationships are represented as nodes in an OR data graph while attributes and values are associated with the corresponding objects and relationships. As such, an OR data graph can capture all objects, relationships and attributes of an XML data.

An OR data graph G = (V O  , V R  , E) is an unweighed, undirected bipartite graph with two types of nodes, where V  O  is the set of object nodes, VR is the set of relationship nodes, V  O ? V  R = ?, and E is the set of edges. An edge is between  an object node in V O  and a relationship node in V R  . For every relationship r ? V  R , there is an edge between each of its  participating objects and r.

The information stored for each object node is a quadruple ?nodeID, object class, OID, associated keywords?. The infor- mation stored for each relationship node is a similar quadru- ple ?nodeID, relationship type, {participating oi}, associated keywords?. Each object/relationship has a uniquely generated nodeID as label in the OR data graph. Associated keywords of an object/relationship include its attributes and values as well.

An example OR data graph is shown in Fig.6, where square and diamond stand for object node and relationship node respectively. More details about OR graph and the translation from an XML document to an OR graph are given in [7].

This work aims to show the impact of ORA-semantics on effectiveness of XML keyword search. The ORA-semantics is exploited in generating the OR data graph. After the generation process, searching over OR data graph to find minimum Steiner trees can be implemented by existing algorithms. Readers may find them in [2], [3]. We also design our own algorithm and propose index and an optimized techniques to improve the efficiency in [7]. We work at object level by assigning nodes describing an object instance the same label. Thereby, we reduce the search space and greatly improve the efficiency of the graph-based search.

B. Model for RDB keyword search  Our approach to RDB keyword search first utilizes foreign key-key constraints to classify the relations in a relational schema into object, relationship,mixed or component re- lations. An object (relationship) relation contains all single valued attributes of an entity (relationship) type. A relation is a mixed relation if it encompasses both an entity type and a relationship type. A component relation represents a component part or the multi-valued attribute of an entity or relationship type.

Based on the type of each relation in the database, we construct an undirected Object-Relationship-Mixed data graph (ORM data graph) G(V,E). Each node v ? V represents a tuple of an object/relationship/mixed rela- tion, including tuples of its component relations. v.type ? {object, relationship,mixed} depending on whether the rep- resented tuples are from an object relation, a relationship  Object Node  Relationship Node  Mixed Node  L2  CS301  E5  E2  S2  E4  S3  E3  CS203  L1  CS5201 E1 S1  Fig. 7: An example ORM data graph for the database in Fig. 2  relation, or a mixed relation. An edge e(u, v) ? E indicates a foreign key-key reference between tuples in u and v.

Fig. 7 shows the ORM data graph for university database in Fig. 2. Node L1 is an object node that includes the tuple L1 in the object relation Lecturer, as well as the tuples Q1 and Q2 in the component relation Qualification. There is an edge between nodes L1 and CS203 because of the foreign key-key reference between the tuples L1 and CS203.

The ORM data graph captures the ORA-semantics in the database. To process a keyword query, we search over the ORM data graph to find a set of Steiner trees [2] which contain nodes that match query keywords. For each Steiner tree, we will check whether there exists a node r such that every path from r to a keyword match node comprises nodes from distinct relations. If so, then the Steiner tree is an answer and r is the root. Otherwise, this Steiner tree is not considered as an answer. Besides, we will also check every keyword match node v in the tree such that v matches keyword k. If v is a relationship node or v is a mixed node and k matches the relationship part of v, then we add the object and mixed type nodes that are directly connected to v in the ORM data graph into this Steiner tree. We refer readers to [14] for details.



IV. CURRENT WORKS TO FACILITATE KEYWORD SEARCH USABILITY  Keyword queries are simple and user-friendly but not as powerful as structured queries. For example, with structured queries, users can explicitly indicate their search intentions, express queries involving recursive relationships and/or aggre- gate functions. In contrast, existing keyword search engines do not (or even cannot) handle such cases. To further facilitate the usability of keyword search, we propose to enhance the expressive power of keyword queries.

A. Indicating search intention by relation/attribute/tag name  To indicate search intention, users may explicitly add tag name in XML or table name and attribute name in RDB (referred to as non-value keyword) into keyword queries. For example, queries {Computing student} and {Computing course}, where Computing matches object Student_(1) and Course_(11) in XML data tree in Fig. 1, aim to search for students whose major is Computing and the courses offered by Computing respectively. Gen- erally, a non-value keyword indicate an output requested by users. When a user issues a query, he has some intention in mind about what he wants to search for and he expresses his intention by non-value keywords. Particularly, he would like to search for object indicated by the non-value keywords and related to value keywords.

The above ideas can be illustrated by the following exam- ple. Although we consider XML, it is similar if the data is RDB in Fig. 2.

Title (4)  Course (1)  Major (23)  Student (15)  DB (5)  Computing (24)  Grade (25)  A (26)  University (0)  Student (27)  Student_No (28)  S2 (29)  StaffID (9)  Name (18)  First (19)  Last (21)  Bill (20)  Kennedy (22)  Qualification (13)  ?..

??..

Course (37)  ??  Lecturer (8)  SID (16)  S1 (17)  Code (2)  CS5201 (3)  Name (11)  JaneKate (12)  Grade (35)  A (36)  Name (30)  First (31)  Last (33)  John (32)  Clinton (34)  Title (40)  IR (41)  Code (38)  CS301 (39)  ?? Student(42)  ? SID (43)  S2 (44)  L1 (12)  Department (6)  Computing (7)  Fig. 8: Another design for the XML data in Fig. 1  Example 1: Consider query {Computing student} to XML data tree in Fig. 1. student is a non-value keyword, matching all student objects. So the output should be some student objects. Which object students are returned depending on value keywords. For the above query, the value keyword Computing is ambiguous and matches two objects, namely Student_(1) and Course_(11).

When value keyword Computing matches object Student_(1), the query is aimed to search for all students whose major is computing. Thus, the returned answer is Student_(1).

When Computing matches object Course_(11), we can imply that users aim to search for all students taking courses computing and thus return Student_(1) as an answer.

B. Handling recursive relationships  Recursive relationships such as paper-citation, ancestor- descendant etc. are common in both XML and RDB. There- fore, it is desirable to handle queries involving recursive relationships in keyword search. Unfortunately, such queries are difficult to express and process for existing works.

Consider the university database in Fig. 2 again. Suppose there is another relation Course_Preq(Code,PreqCode) which stores the prerequisites for courses. Each course can have more than one prerequisite course and be prerequisite for more than one course. So it is a many-to-many recursive relationship. Besides, we refer to the number of recursions between two courses as the level of the recursive relationships between them. How can a user issue a keyword query to find one level prerequisite courses? titles of course ?CS5201??

or find all levels prerequisite courses? titles of ?CS5201??

According to our best knowledge, none of existing works can even express such queries. The problem is similar for XML keyword search.

To solve this problem, we propose to incorporate key- word queries with information about recursive relationships.

Particularly, we let users explicitly indicate the existence of the recursive relationship and the number of levels they would like to search in the query. For example, if the user would like to find one level prerequisite courses? titles of course ?CS5201?, he can issues the keyword query {CS5201 PreqCode.title}. The query consists of two  parts. The first part is the keyword CS5201 referring to a particular course object. The second part is the phrase PreqCode.title indicating that this query involves one level recursive relationship via the constraint PreqCode isa Code in Course in the schema.

For the query which finds all levels prerequisite courses? titles of ?CS5201?, the corresponding keyword query will be {CS5201 PreqCode[*].title}. Compared to the previ- ous keyword query {CS5201 PreqCode.title}, Asterisk indicates that the user is interested in all levels of the recursive relationship in the database. If the user only wants to know the first three levels of the recursive relationship, then the keyword query is {CS5201 PreqCode[1-3].title}.

Besides, some users may want to issue a reversed query involving recursive relationships, e.g., finding the titles of courses which have the course ?CS5201? as a prerequisite.

Our approach can also handle this case. For example, the previous query can be expressed by the enhanced keyword query {Course.title PreqCode=CS5201}.

After the keyword search engines are aware of the recursive relationships in the query, they can handle them separately and intelligently.

C. Handling IDD relationships  An identifier-dependency relationship (IDD) occurs when an object cannot be identified by the value of its own attributes, but has to be identified by its relationship with some other object. E.g., a child of a lecturer does not have a unique identifier but can be identified by the identifer of the lecturer (i.e. StaffID) and the name of the child. Intuitively, when people search for some object which needs to be identified by an IDD relationship with other object, it is helpful for a search engine to retrieve the intended object, as well as the IDD relationship with the object to identify it. However, since the existing works in both XML and RDB keyword search are unaware of the semantics of object and relationship, they retrieve incomplete information for queries involving IDD relationships.

Suppose there is another relation Child(StaffID, Cname, DoB) that stores the information about the children of lecturers in the university database in Fig. 2. As a child cannot be identified by itself but has to be identified by its parent, there exists an IDD relationship between the child and     its parent lecturer. This is reflected by the foreign key-key reference between the relations Child and Lecturer on the attribute StaffID. Given a keyword query that consists of a child name, the existing works in RDB keyword search will only retrieve the information about the children whose names match the keyword query. However, this is not complete because the parent information of the children are not retrieved.

XML keyword search suffers from this problem similarly.

We propose to identify IDD relationships in XML and RDB to overcome this problem. For RDB, we utilize the foreign key-key constraints in the database schema. For XML, we first identify IDD, which is usually a child of the intended object.

We then include the parent of the IDD (the intended object) into the answers. Once we found the IDD relationships, we can retrieve complete information for keyword queries involving IDD relationships.

D. Supporting aggregation functions  Similar to structure search (SQL, XQuery), users often want to perform some accumulated computation or summa- rization. However, no work handles aggregation functions (e.g., max, min, count, etc) for XML keyword search. Aggregation functions can be classified into the following groups:  ? Basic functions: Max, Min, Sum, Avg, Count, Median.

? Top-N functions: MaxN, MinN.

? Range functions: [a,b].

? Comparison functions: >, ?, <, ?, ?=.

For example, query {CS5201, max(Grade)} issued against XML data in Fig. 1 can be interpreted as finding the max grade of students taking course CS5201. For another example, query {S1,max(Grade)} (also to Fig. 1) is to find the max grade of student S1.

One basic idea to handle queries with aggregation function is that we first handle the portion without aggregation function first, then using aggregation functions to filter the returned results. For example, for query {S1,max(Grade)}, we first process query S1, grade to get all grades of S1, among which, we then find the maximum grade.

E. Returning the same or similar answers for XML and RDB  Keyword search is a user-friendly way so that users can issue keyword queries without or with little knowledge about the schema of the underlying data. However, they often know what the data is about. Therefore, when they issue a query, they often have some intuitions expected about the answers in mind. Since they may not know which schema is used, their expectations are independent from schema designs. If they already got some answers for this schema, it could be surprised if different answers are returned when they try another schema of the same data source. Thus, different schemas of the same data source should provide them the same or similar answers.

However, this is not the case for the existing XML and RDB approaches as shown in the following example.

Users may know a university database about courses and students, but they do not know how the data looks like. It can be an XML data tree as in Fig. 1, or another XML data tree as in Fig. 8, or even a RDB as in Fig. 2. Consider Q  = {Bill DB}. With the XML data in Fig. 1, the LCA- based approach returns Student_(1). With the XML data in Fig. 8, Course_(1) is returned. With RDB in Fig. 2, the answer is S1?E1?CS5201 . As shown, answers for different designs are different though these designs refer to exactly the same information and we are dealing with the same query.

One basic idea to handle this problem is as follows. First, we transform the XML schema and RDB schema to their normal form. Second, we translate the normal form schema into some conceptual model schema such as ER diagram.

Finally, we transform the database into database represented by the conceptual schema. Thereby, we can get the same query answers for different designs of the same data source by querying the database represented by the conceptual schema.



V. CONCLUSION  We thoroughly pointed out mismatches between answers returned and the expectations of common users in keyword search in XML and relational databases. We also discovered the main reasons for the mismatches are due to the un- awareness of the semantics of object, relationship, attribute of object/relationship in the databases. We finally discussed how the semantics can be used to overcome most of the problems in existing keyword search approaches in both XML and RDB.

We are also working on enhancing the expressive power of keyword queries to facilitate the usability of keyword search.

This is achieved by indicating search intention with relation, attribute and tag names, handing recursive relationships and identifier-dependency relationships (IDD); and supporting ag- gregate function in keyword queries.

