Mobile Access into Information Systems

Abstract. At present a big concern is devoted to the problems of effective use of mobile technologies in the area of m-business, m- commerce and other areas. It is important to study carefully the relation and synergy between management area and mobile technologies so that business processes (mainly) could be supported efficiently. In the paper we  there discuss basic approaches to Service Oriented Architectures (SOA)  ? web services and their use in mobile devices.

Keywords. mobile device, java, Java ME, SOA, web service, WSA, kSOAP, BlackBerry, .NET Compact Framework  1. Introduction  At present mobile devices undergo rapid development which results in longer performance without charging, better performance larger set of functions implemented for the use by customers and consequently the area of their potential use spreads constantly.

Similar progress can be seen and recognized in the area of mobile communication networks mainly in the area of mobile data services. Smart phones start to take control of the market of pocket computers and communicators and the classical PDAs withdraw and disappear. The majority of mobile telephones have been recently supporting mobile Java (Java ME), many communicators possess their own operating system (Symbian, Palm OS or Windows Mobile). All these platforms enable relatively easy opportunity to make mobile applications including data communication access. In line with the current trend (in the area of management and software development) ? of transition to service-oriented architecture - it becomes possible to use mobile devices as clients of these services. Using mobile clients brings  new views  and alternative approaches to many business processes. Permanent access to up-to-date data of business information systems from any place is useful in many areas such as selling products (B2B, B2C), creating better relationships  with the customer (CRM) etc.

In the further text  will be described selected attitudes and subsequently technologies which are applicable for the implementation of the client of information system (resp. of web service) on the mobile device. First will be mentioned solutions based on mobile Java technology (J2ME) and then the solution offered for BlackBerry platform developed by the firm Research In Motion (RIM).

2. Mobile attitude to information systems  Mobile devices that are equipped with the mobile edition of java virtual machine (Java ME) are able to set up communication in the mobile data network making use of the HTTP protocol and selected models can use general socket connection. This capability is enabled for version MIDP 1.0 and later versions. The latest versions of mobile java can offer a row of application program interfaces (API) that significantly spread the capability of mobile applications.

These APIs include also an interface for the access to the web services (WSA). In the following text  will be briefly described variants of the  information systems access which are enabled by these technologies.

2.1. Proprietary solution of mobile communication  Classical solution of the problem of the access to the selected parts of information systems from mobile device can be realized either by classical socket connection and economical proprietary protocol or through the common HTTP(S)  Proceedings of the ITI 2008 30th Int. Conf. on Information Technology Interfaces, June 23-26, 2008, Cavtat, Croatia    protocol. In both cases there is necessary to implement connector on the side of information system (or use a web server). The connector enables the mobile device to access the selected functions and data of an information system.

This solution is more suitable for very specific problems and less suitable for more common problems. Client is often in this case burdened by quantity of application logic that it has to perform. This fact naturally reduces performance of the device. The further disadvantage is the necessity to create one purpose connector which is dedicated for connecting the mobile device only. On the other hand this solution has the advantage of economical data communication which at the same time makes the data transmission between client and information system quicker and cheaper. The model of this solution is depicted on figure 1.

Figure 1. Proprietary solution  2.2. Making use of Web Services  Calling of remote objects through the web services (WS) brings a lot of new possibilities and opportunities into the area of the distributed applications development. Some of them address the problem of applications creation for mobile devices. Let us mention these facts:  ? Computationally requiring tasks can be performed completely on the side of IS (application server).

? The web services are accessible from various platforms and consequently there is not necessary to implemented solution dedicated for the access from the mobile device only.

? The solution is easier to maintain and modify as the changes mainly concern business logic of application server only and so there is not necessary to distribute the changes to all mobile clients.

On the other hand it is commonly known that the SOAP protocol used for the communication with the web service, which belongs to the family of XML protocols, is not very economical way for the data transmission. Two main disadvantages of the solution come out from this fact:  ? A large amount of data is transmitted which makes the transmission process slower and may cause growth of its expenses.

? The parsing of an XML document in the mobile device is computationally more requiring and may cause slowdown of the application.

2.3. The combination of WS and the economical transmission  The combination  previous two attitudes may lead to the further model. The access to the selected functions of the IS will be enabled via the web services as it is described in part 2.2.

Mobile client but will not connect to these web services directly through the SOAP protocol but it will use specially for this purpose designed gateway and it will communicate with this gate via an economical compact protocol in a similar way to the one mentioned in 2.1. The gateway then organizes all the communication with the web services. The principle is depicted in the next figure 2.

Figure 2. The gateway for connecting mobile device to web service  3. Exploitable technologies  Now  will be described possible technologies for realization of above mentioned variants for the communications of the mobile device with IS. Due to less commonness of the first mentioned model (2.1) this variant will not be discussed in details.

3.1. kSOAP  kSOAP [1][3] is a library which enables to create application in the mobile Java that communicates directly with the web service and uses the SOAP protocol. One of the basic advantages of kSOAP is the fact that it can be used also with older devices which uses the older MIDP1 profile and also with devices that do not offer the WSA support (see 3.2) . It is installed in the form of an additional library for the mobile application in the mobile device. The library implements basic     classes for the cooperation with XML and SOAP protocol, it does not use static typing and therefore it is necessary to use either a HashMap or implement KVMSerializable interface to access structured user types. At present there is available the second revised version of the library. However, the documentation accompanying the library seems very incomplete. Sample code shows one simple example of using this library.

try { //SOAP object specifying the namespace and the method SoapObject so = new SoapObject("http://ws.crm/", "getCustomer"); //parameter setting  so.addProperty("index",Integer.valueOf( tfCustNo.getString())); SoapSerializationEnvelope env = new SoapSerializationEnvelope( SoapEnvelope.VER11); env.setOutputSoapObject(so); HttpTransport transport = new HttpTransport( "http://my:8084/CRM_WS/CRMService" ); //method call transport.call("",env); //retrieving the result value SoapObject res=(SoapObject) env.getResponse(); striName.setText( res.getProperty("name").toString()); striSurname.setText( res.getProperty("surname") .toString()); } catch (Exception ex) { ex.printstackTrace(); }  3.2 J2ME Web services APIs (WSA)  Specification JSR-172 [1][2] often referred to as WSA (Web services API) is another possibility of connecting the mobile client with the web service. The purpose of the specification is to enable SOAP/XML calls to the web services in mobile Java and it enables some basic parsing of XML documents too. The implementation of this API by the mobile device is the necessary condition that enables the access to the web services on this mobile client. There is possible to use a stub generator that generates a set of classes needed for the access to a web service. It enables to call methods of the remote service on the client side as it is a local object. The generator is the part of all newer versions of Java ME toolkits. It also creates all the necessary user types of the service from given WSDL document. The classes generated in such a way  can be simply included into mobile application and used. The example of code showing communication with web service using stub is in the sample code. Using of the stub results in the fact that there is not visible any trace of communication with remote web service.

//Creating stub instance CRMService srv = new CRMService_Stub(); Customer z; try { //Service call using stub instance z = srv.getCustomer( Integer.parseInt( tfCustNo.getString())); striName.setText(z.getName()); striSurname.setText(z.getSurname()); } catch (Exception ex) { ex.printStackTrace(); }  3.3 RIM BlackBerry Solution  Canadian company Research in Motion (RIM) offers an interesting possibility of access to the web services by means of BlackBerry services.

The customer of the service, offered by some mobile operators, can create or partially develop the mobile client in a free of charge development environment BlackBerry MDS Studio [4].

Mobile client developed in such a way possesses the ability to communicate remotely with the web services and/or with selected database servers. In addition to it the mobile device works virtually as a terminal of inner company network due to features of BlackBerry service. In such a way  high level of security of communication between the mobile device and the web service is ensured and at the same time  administration of all the mobile devices (which include installation, application maintenance, security policy administration etc) is fully centralized.

Running of the client application requires the previous installation of so called MSD Runtime which communicates via firm Blackberry enterprise Server (BES) with intended web services. The communication between Blackberry device and BES is realized by a simple and compact protocol. The situation is depicted in the following figure 3.

Figure 3. Architecture of BlackBerry MDS Studio [4]  The development process starts again with the WSDL document of the web service which enables to create either objects of messages and accompanying data types only or even GUI forms for the applications. Event driven application logic on the client side is implemented in JavaScript. MDS applications can also respond to so called push messages sent by the server thanks to implementation of WS- Eventing standard. The resulting finished application is distributed into devices via central MDS and BES Servers.

3.4. Microsoft solution  Microsoft latest tool for creation mobile application is visual studio 2008. Visual studio fully supports very efficient implementations of LINQ (Language INtegrated Query) which cover the need for work with data of various kinds for example by implementation of  ? LINQ to Objects ?for collection of objects in  memory  ? LINQ to SQL ? devoted for databases Microsoft SQL Server 2000 and later  ? LINQ to XML ? intended for elaborating XML documents  and other libraries. Especially LiNQ to XML is a user friendly library which is also the alternative to DOM and stream elaboration of XML documents. The above mentioned useful, friendly and efficient technologies can be used in a mobile device which possesses Windows Mobile operating system, which includes specialized version of .NET framework called .NET Compact framework. Its integral parts are also various emulators and debugging tools running both on mobile device and on emulators.

4. Case study  In this part of the contribution there will be introduced the project of B2B mobile client BBShop which served for testing various capabilities and the stability of solutions based on BlackBerry services. The aim of this study was the creation of a mobile application for travelling salesmen who directly enters the orders at the customer?s site (BBShop). The application offers following functionality: ? Access to the subset of company?s CRM  system ? i.e. contact browsing, overview of contracts, remarks; the integration with the BlackBerry communication services (allows to make a immediate phone call, e-mail processing),  ? Catalogue access ? including simple and advanced filtering, displaying the customer as well as the dealer prices, list of price reductions for the selected customer,  ? Order processing ? preparation of orders of the items selected from the catalogue, or entered using the Bluetooth barcode reader, dispatching the order and its immediate confirmation (incl. the directly available amount of items, the reservation etc.).

All these functions are available via the BlackBerry device connected to the company?s intranet using BlackBerry Enterprise Server (BES). The solution is based on the extensive use of the BlackBerry Mobile Data Services (MDS) module mentioned earlier. All the operations accessible through the Blackberry terminal/client are implemented in the middleware and they are exposed to the device using the web services endpoint. Although all these web services are generally re-usable and accessible from different sources, their implementation is stigmatized by the fact that all the data will be retrieved and/or processed by the mobile device. The limitations of mobile platform in this case were as follows: ? The recommended and default size limit for  the data transfer message between BB device and BES is 32 kilobytes.

? The amount of the available internal memory of the device is limited.

? The browsing and searching of the large datasets on the device is slow and inefficient.

? The size of the catalogue and of other data components of the application is so large that the online synchronization or transfer is     still almost unusable in current mobile networks.

All these aspects led to the conclusion to implement some specific concepts of the work with large datasets. It involves for instance: ? the implementation of the catalogue and  customer list output pagination with only current page held in the device?s memory,  ? simple and advanced data filtering including the filters based on the categorization of items, full text filters, barcode filters etc.

? the possibility to define and use a smaller and the user?s own sub-catalogue of ?favorite? items.

BlackBerry terminal  Internet  IS (M  S D  yn am  ic s  N AV  )  Ap pS  er ve  r  BES MDS  order connector  batch sync.

real time  WS  Temp. DB  Intranet  Figure 4. Architecture BBShop  The overall architecture model is shown in Figure 6. It is significantly influenced by the used Blackberry solutions. The client and communication infrastructure is implemented in the BlackBerry MDS Studio mentioned earlier.

The client code is minimalistic and is mainly generated by wizards of the tool. The main task of the client is to collect the user?s demands, to check entered data and pass them to the remote service using its generated stub. The BlackBerry Enterprise Sever together with Mobile Data Services (BES/MDS) translates the client?s request to the XML/RPC call against the Web Service Endpoint (WS Endpoint). Web service delegates the responsibility to the middleware application server (AppServer). In case of the order request the data are pre-processed and sent through the online connector (Order connector) to the Enterprise Information System (IS ? here Microsoft?s Dynamics NAV). The response of the information system is then sent the same way back to the client, which includes the necessary reverse protocol translation. In another case  (non-order requests) the request is processed entirely by the application server and the data is sent back to client without any on-line cooperation with information system. The data for the basic tables of keys are cached in a temporary database of the application server and they are synchronized once a day during the night hours. This solution significantly reduces the need for the direct communication with the information system.

Middleware application server was designed as a modular system allowing further extensions of the functionality in the future. Therefore it was selected Spring Framework for its implementation. The concept of loosely coupled software components of Spring exactly follows the strong modularity requirement. The caching database is accessed in the object way through Hibernate framework, which allows using different relational database systems as back end storage engines. This solution has paid off after it was decided to change the database server technology from MySQL to Microsoft SQL Server. The need of the code refactoring was minimal and the system was switched to the new database system in several minutes.

Communication with the enterprise information system is based on an XML family protocol and the transmission of the data is implemented using the socket connection. The entity beans of the application server are directly mapped on the XML entities with the help of JiBX framework integrated into Spring context. Web services are exposed using Axis and by sub-classing of the Spring?s class ServletEndpointSupport. All the communication between BlackBerry Enterprise Server and the application server goes through the local network, so the web tier running on Apache Tomcat does not need to use very strict security policies. Further communication towards and from the BlackBerry client runs through the secured channel of provided by the BlackBerry services of selected telecommunication operator.

BlackBerry client helped to solve the former problem of growing load of the information system in late afternoon and early evening hours.

In this period of time all the salesmen used to dispatch the orders from customers which had been collected during the particular day. BBshop project enabled to distribute the application load of the information system more proportionally during the day and at the same time achieved very quick distribution of the orders to the customers. On the other side BlackBerry based     solution is substantially more expensive than solutions based on other in this contribution mentioned technologies and is suitable mainly for larger companies that use or intend to use BlackBerry as their basic communicator. One problem we met at the beginning of the projects and that we still feel as relatively serious is the missing support of connectivity detection on the device's side. BlackBerry device stores all the outgoing messages into the message queue without any regards to the connectivity state. If the device is under coverage, the messages are directly sent to BES/MDS server. Otherwise, they are blocked until the connection is restored.

This is convenient in many applications, but sometimes user wants to get either immediate confirmation of the transaction or at least to know that the confirmation will be delayed.

Current versions of the BlackBerry MDS Studio do not allow implementing this functionality.

5. Conclusion  At present mobile devices already have sufficient computational performance to maintain communication via the SOAP protocol. There exist reliable technologies that enable implementation of mobile client of the web services. Concerning the rate of the data transmission, so far prevails the variant of solution described in part 2.3 of the contribution with compact and economical protocol that is implemented for example by BlackBerry services. The authors intend to realize more exact measurement and testing in further stages of the research.

One of the essential and here not mentioned aspect accompanying the communication of mobile clients with web service is the problem of security and safety of both the transmission channel and the web service itself. None of here mentioned solutions have built-in support of the protocol WS-Security. WSA and kSOAP could be supplemented with the encrypted protocol HTTPS and with authentication of users. Easier situation is in case of BlackBerry application as here secure and authentication possessing access is the organic part of the service itself and mobile device is assumed as computer of inner network.

Nonetheless, even in this case it is possible to make use of HTTPS and authentication as additional way for security of communication between BES Server and web service in inner  network. The results of the project BBShop mentioned in our case study indicate that use of web services raise and widen possibility of exploitation of the mobile telephone (or communicator) to the much higher level. Factors that limit or restrict this technology are so far relatively slow commonly offered data services for the mobile phones and of course capabilities of the mobile devices. It is reasonable to implement mobile client for devices having reasonably large display and suitable way of governing input (pen, QWERTY keyboard).

The problem of mobile technologies, dynamism of their spread and massive use is the purpose of the research funded by Czech Science Foundation GACR Models of Firms with Mobile-Oriented Architecture.

Research is focused on making basic models of interaction between mobile devices and information systems which enable the support processes and mobility.  In the future study  basic architectures and essential models of information systems based on massive and at the same time also sensible and reasonable use of mobile technology will be described. Various ways of transformation of information systems so that they could possess mobile features will be examined. Effective ways of making processes mobile will be explored.

