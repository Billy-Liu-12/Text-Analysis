Extracting Point of Interest and Classifying Environment for Low Sampling Crowd Sensing

Abstract?The advancement of smartphones with various type of sensors enabled us to harness diverse information with crowd sensing mobile application. However, traditional approaches have suffered drawbacks such as high battery consumption as a trade off to obtain high accuracy data using high sampling rate. To mitigate the battery consumption, we proposed low sampling point of interest (POI) extraction framework, which is built upon validation based stay points detection (VSPD) and sensor fusion based environment classification (SFEC). We studied various of clustering algorithm and showed that density based spatial clustering of application with noise (DBSCAN) algorithms produce most accurate result among existing methods.

The SFEC model is utilized for classifying the indoor or outdoor environment of the POI clustered earlier by VSPD. Real world data are collected, benchmarked using existing clustering method to denote effectiveness of low sampling rate model in high noise spatial temporal data.



I. INTRODUCTION Data collected using mobile devices such as smart phone  and wearable devices have been explicitly studied by various researchers in [1], [2] as they are able to generate various insights about a particular user life pattern. Among all the information captured, point of interest (POI), user mobility, user life pattern, and transportation mode gained a lot of attention; but major existing crowd sensing applications suffer from the drawbacks of high battery consumption. The reason behind high battery consumption is due to high sampling rate as well as limited battery capacity of mobile devices, which render most of the methods only suitable for short term data collection.

To solve the aforementioned challenges, we proposed ultra low sampling architecture for extracting POI utilizing various sensor information available on a smart-phone. One of the main challenges of ultra low sampling architecture is trade off for accuracy in order to obtain data at a very long interval compared to traditional method. Another problem that may arise is highly correlated with the data quality, which may produce inaccurate output after computation.

The main objective of the paper is to study POI based on the various sensor information generated by smart phone using low sampling rate. Such technique will find application in better understanding user life pattern, which in return can improve user life style. However, in a crowd sourcing / sensing  environment, there are a wide variety of devices by different users, and it is not possible to retrieve ground truth from the users. In this paper, our main focus is to verify the effectiveness of clustering algorithm based on data collected from volunteer users. Our model require minimal attention and is suitable for helping elderly to understand their life pattern after retirements. These insights can be used for the authorities to improve certain location facilities, which will be reported in the continued works.

Various information has been collected through the applica- tion we have previously developed in [3]. Data collected from smart-phone are uploaded to the server and off-line analysis are performed to gain insights about POI and trajectory. We first extract data from database, and later perform several preprocessing techniques namely denoise and timeSync. The former mentioned technique allows us to remove any po- tential noise, outliers, and duplicate data; whereas the latter mentioned technique is used for synchronizing the data with different timestamps. Subsequently, we apply VSPD algorithm to extract the POI, while the DBSCAN is used for clustering similar POI. Trajectory can be obtained through labeling each POI with the time stamp based on duration of each stay point.

As our main concern is to determine POI, we further study the characteristic of the POI and classify it into indoor vs outdoor, or private vs public using SFEC technique. The SFEC is implemented using multi sensor data obtained from mobile devices.

Our contributions in this paper are listed as follows:  ? We present VSPD algorithm, which is capable to distin- guish valid stay points due to poor the data quality of low sampling rate. Stay points are validated using the proposed module and later clustered into POI based on temporal data.

? SFEC method is presented to distinguish POI by its indoor and outdoor characteristic. In addition, we also categorize the POI by its property, whether it is private or public premises.

The rest of the paper is structured as follows: In Section II, we propose ultra low sampling architecture and discuss about the data processing techniques. In Section III, VSPD algorithm  The Fourth International Workshop on Crowd Assisted Sensing, Pervasive Systems and Communications 2017     is introduced and benchmarked against existing clustering and stay point detection algorithms. After clustering similar POI, we performed environment classification using SFEC method and show the efficiency of our methods in Section IV. Finally, we conclude our work in Section V.



II. SYSTEM ARCHITECTURE AND FRAMEWORK  In this section, we present the ultra low sampling rate architecture for data collection and processing.

A. User Trajectory and Point of Interest Detection  User mobility has been studied in [4], [5] and several features extraction show the necessity of extracting stay points before obtaining insights from user trajectory. Stay points are known as POI in our study scenario, where it can be a particular user home, work place, leisure spot, and etc.

To study the POI, trajectory data and user mobility are often used to visualize the path a user takes from one POI to another. Extracting trajectory features yields a lot of important information such as travel distance, duration, POI location, transportation mode, and etc. On the other hand, transportation mode (TM) is identified through the feature extraction using methods such as probability estimation [6]. Other related works such as [1], [7] use mobile phone as platform for data collection and try to capture trajectory data using various interpolation methods (linear, cubic, and nearest). Finer detail of TM, such as motion patterns have been studied in [8], which uses Hidden Markov Model (HMM) and k-means clustering for obtaining motion patterns; then it is also serve as anomaly detection.

However, most of the methods only deal with high sampling rate of data and are not suitable for day long data collection due to limited battery capacity. We incorporated validation function for the stay point detection in order to validate low sampling rate of data.

B. System Architecture and Data Processing  The system framework for collecting POI information can be divided into two phases, which are data collection and data processing. Data collection phase involves installation of mobile application at volunteers? smart phone. Data collected from mobile devices, which are (1) Location information, (2) Social Information, and (3) Activity Information. The location information consists of user geographical positioning data, while the social information is composed of sound information collected from the mobile devices microphone. The activity information consists of data such as TM and type of activity that users are engaged in.

We have previously developed the application using An- droid frameworks in [3] and is used for data collection in this paper. It has been further fine-tuned to adapt the sampling rate of 5 minutes and optimized for off-line data collection, when there is no real-time Internet connection. The overview of the system architecture is shown in Fig. 1.

The preprocessing of data is performed in order to generate usable data to extract useful features. First, the raw data will  Fig. 1. Overview of the system architecture  be passed through denoise process to remove any duplicate records. The denoise module checks the data time-stamp and eliminates data with same time-stamp. The reason for duplicated data is mostly due to the redundant data kept by mobile phone, which fails to receive acknowledgment from server upon upload. The timeSync module act as the function for linking different data to a similar time stamp in order to perform data fusion computation, which will be presented in later part. Data alignment starts by aligning the data from different database based on the synchronized time for each dataset into single matrices. The overall data processing is shown in the Algorithm 1.

Algorithm 1 Overall System Algorithm Data: {L,Q} where it = 1, 2, ..., N begin  preprocess({L,Q}) stayPoints = ValidationStayPointAlgorithm(P ) clusteredData = DBSCAN(stayPoints) Tx = Trajectory(stayPoints, P , clusteredData) timeSync({L,Q}) SFEC({L,Q})  We first define set of location data collected from the mobile devices as L = {P1, P2, ..., PN}, where P can be denoted as Pi = {?i, ?i, ai, ti}. The latitude and longitude data are represented by ? and ? respectively, which is part of GPS Information Pi. The t represents the time-stamp of data obtained and a denotes the accuracy of GPS module.

We denote Q = {S1, S2, ..., SN} as segment of stay points and define each sensor value for each Q as following Si = {vi, ai,Ni, ?i, ?i}. Each data are partitioned into segments based on the stay points. The vi represents the velocity of the user and this is captured using the mobile device?s API, and ai is the accuracy of location data. Ni is the normalized noise intensity, and ?i represents the maximum occurred activity within a time segment.

We noticed different mobile devices possess different noise levels due to different hardware component and manufacturer.

In order to generate a fair comparison of noise level across  The Fourth International Workshop on Crowd Assisted Sensing, Pervasive Systems and Communications 2017    other devices, we will normalized the noise data using the Equation (1) below:  N = 10 (  s? smin smax ? smin  ) (1)  where s represents the noise amplitude level. The smin and smax represent minimum and maximum noise level captured respectively based on user data at a particular time frame (i.e.

one month data).



III. POINT OF INTEREST DETECTION  In this section, we discuss the POI extraction module such as stay points detection and data clustering, that group similar POI into cluster.

A. Point of Interest Clustering  K-means clustering [9] is one of the common clustering techniques in handling numerical data since it offers fast and easy usage compared to others. However, finding an optimal k is one of the challenges as it is an NP hard problem. In [10], they have studied the use of k-means clustering on spatial and temporal data for POI clustering. However, k-means is not capable of identifying arbitrary shape of cluster, which makes it not ideal for our proposed architecture. Alternate common clustering method is density based clustering such as DBSCAN [11] and OPTICS [12]. In [13], they have used customized DBSCAN algorithm for geo-tagging photo which uses density threshold and adaptive density. However, their proposed method only concentrates on spatial information and ignores the temporal data.

Low ultra sampling data collection has a high impact on the quality of data, which may results inaccurate data clustering and wrong POI generated. Therefore, we studied different kind of clustering technique as well as stay point detection to ensure best features extraction technique is chosen.

B. Validation based Stay Points Detection (VSPD) Algorithm  VSPD algorithms utilize the stay point detection algorithm first proposed in [4] and we added validation function to remove incompetent POI. The validation function in VSPD algorithm has been deployed in order to adapt ultra low sampling architecture, which is presented in Algorithm 2.

Algorithm 2 Validation based Stay Point (VSPD) algorithm Data: Pi where i = 1, 2, ..., N Result: SPx for k ? 1 to N do  while j ? (k + 1) to N do Check(a{i,i+1,...,j}, threshold(a)) using Equation (7)  Calculate d using Equation (4) if d > a then  Caclulate ?t using Equation (5) if ?t > threshold(t) then  if Validity(d,?t) then addStayPoint(Pi, Pj)  else break  Before going into detail of the algorithm, we first define the following key information, which are stay points and trajectory. Stay points are defined as SP , where it represents potential POI a particular user is at. Each stay point can be arranged to trajectory by adding time-stamp, resulting Tx = {SP1, SP2, ..., SPx}.

Reachability of distance between two points is a crucial piece of information required for DBSCAN in order to cor- rectly cluster similar POI. Throughout this paper, the distance between two points {?1, ?1}, and {?2, ?2} are calculated using the Harvesine formula as shown in Equation (2):  hav( d  r ) = hav(?2 ??1) + cos(?1) cos(?2)hav(?2 ? ?1) (2)  where harvesine function hav() can be found in [14] and d is the distance between two points and r is the radius of earth.

The hav() used in Equation (3) is defined as follows:  hav(?) = sin2( ?  ) =  1? cos(?)  (3)  To obtain the distance between two points, we apply the inverse Harvesine function for Equation (4) by using arcsine function as follows:  d = r ? hav?1(h) = 2r arcsin (?  h )  (4)  After obtaining the distance between two points, we can formulate duration difference between two stay points ?t as follows:  ?t = ti+1 ? ti (5)  where ti is the time-stamp for current sample and ti+1 is the time-stamp for the previous sample.

Validation function is as a core function in detecting valid stay points. Ultra low sampling may generate high noise data from environment such as indoor buildings, tunnel, and underground. To eliminate potential noise accounted into stay points, we formulate the validation function as follows:  validaty(d,?t) = ?t < ?t and d < ?d (6)  where ?t is the threshold for time and ?d is the threshold for distance.

Subsequently, the eps and minPts need to be determined before applying DBSCAN algorithm. The eps are derived using the accuracy of GPS location as follows:  eps =  { ai + ai?1 if ai + ai?1 < ?l where minPts = 1  ?l if ai + ai?1 ? ?l where minPts = 1 (7)  where accuracy of GPS data are calculated is considered for checking the validity of the stay points. For example, if an user entered a tunnel and GPS points remain fixed until he/she exit the tunnel after t time. Our validation model in Equation 6 will deem the period of entering tunnel as part of traveling because the time taken and distance traveled is considered not valid.

In Equation (7), a threshold of ?l = 200 was included to prevent GPS accuracy become too large and form a potential cluster. The minPts is set to 1 since we do not treat any POI as outliers at the moment.

The Fourth International Workshop on Crowd Assisted Sensing, Pervasive Systems and Communications 2017    C. Evaluation of Stay Point Detection and Clustering  To evaluate the proposed VSPD algorithm, we have few volunteers installed the application on their smart phone and proceed with their daily life. After data collection performed, we will request ground truth from every participant in order to correctly identify the POI they have been to.

Effect of Different Clustering Algorithms  Fig. 2. Comparison of Different Stay Points Extraction and Clustering Techniques  First, we study the POI detection algorithm, which consists of (1) VSPD algorithm, (2) stay point algorithm [4] and (3) online clustering [3]. Next, We evaluate the clustering method for each stay point detection algorithm using (1) DBSCAN, (2) K-Means, (3) Hierarchical. It should be noted, that the k-means clustering?s k is determined using Davies Bouldin index. The comparison of different stay point extraction algo- rithm is presented in Figure 2.

Based on the results, VSPD algorithm and DBSCAN man- aged to extract POI correctly compared to others. Original stay point algorithm clustering wrong results are shown in red solid lined box. It is unable to detect the POI correctly as it is unable to distinguish the stay points due to poor indoor GPS accuracy. We manually inspect the GPS points located in the cluster 10 and found out that indoor low accuracy led to incorrect stay points extraction. It is observed that cluster 6 provide incorrect POI compared to ground truth and we highlighted using dotted Grey box. By comparing the different clustering methods, stay point extraction is more crucial in term of extracting the correct POI from the raw database. The clustering technique used after stay point extraction algorithm yields significant changes afterwards. However, by comparing the consistency of the algorithm, we prefer DBSCAN over other clustering techniques due to its capabilities of forming arbitrary shape cluster, as the data collected is never in a consistent shape to begin with.

Effect of Different Clustering Parameters The next data extraction depends on the duration of stay  time at a particular POI. We adjust the delta t accordingly to examine the granulated detail of possible stay point. The highlighted area of solid black box and grey dash lined box in Figure 3 generates correct POI according to the ground truth.

However, there is a slight error as framed in black dotted box which is due to transition of GPS accuracy from high to low. This causes a gap between two point and the algorithm  treat it as two different location and hence error occurred. After verifying with the volunteers, the reason for such occurrence is die to traffic congestion. This led the algorithm to think the users is at a fixed position as it the time does not exceed the ?t. They appear to be invalid in the validation function in VSPD algorithm and does not form a cluster.

Fig. 3. Comparison of different time threshold for stay point extraction algorithm  Effect of Different Mobile Devices Data collection using different smart phone such as Sam-  sung Tab 7, Galaxy Alpha A8 and, LG G-Pro 2 are tested. Do note that this is the first phase of our works, we have deployed the application and collected the data more than 100 users in our next works. In figure 4 same POI are labeled and colored as same number, where other locations are denoted differently.

Slight drift of POI is observed through all devices tested in the same POI as highlighted in Grey solid box and black dash lined box. Despite slight difference in check-in and check-out time, VSPD algorithm and DBSCAN managed to extract the POI correctly regardless of device vendor.

Fig. 4. Data collected using different Mobile Devices  The VSPD algorithm has the computational complexity of O(N2) where validation function is O(1) step with no extra computational cost and is able to eliminate wrong stay points.



IV. SENSOR FUSION BASED ENVIRONMENT CLASSIFICATION  A. Indoor and Outdoor Classification  IO classification have been studied by applying several different approaches. It is can be divided into two approaches, which uses image processing and sensor fusion.

In [15], IODetector has been proposed to classify IO envi- ronment using three sensors (cellular module, light sensor, and magnetic sensor). They have combined sensors and wireless approximation methods to determine whether the environment belongs to indoor, outdoor out corridor. They have utilized  The Fourth International Workshop on Crowd Assisted Sensing, Pervasive Systems and Communications 2017    HMM in conjunction with Viterbi algorithm to estimate the IO condition. However, Radu et al. [16] claimed that their supervised methods are far superior by introducing more features into IO classification. They have applied co-training methods and managed to achieve 92% of accuracy compared to GPS and IODetector. Other related work can be found in [17], [18].

In [19], they have proposed IO classification using image processing. Waleed T. et al [20] has presented classification technique that uses GIST descriptor in conjunction with neural network classifiers to decide whether image is taken indoor or outdoor. Based on their proposed method, they managed to achieve 90.8% of accuracy by extracting GIST features and using feed-forward neural network to feed training samples.

Since image processing requires training and a camera to be turned on during data collection, it will end up with high battery consumption. Hence, it is not suitable for ultra low sampling rate. Considering the case, mobile device is in pocket, it might end up in inaccurate representation of the IO.

To overcome such scenario, we applied the notion of sensor fusion for data collection, in order to achieve better battery management and more accurate environment classification.

B. Sensor Fusion based Environment Classification (SFEC)  The stay points are classified as indoor vs. outdoor and private vs. public, using sensor fusion based environment classification. An indoor environment is where the average GPS accuracy for the POI is above a certain threshold, while an outdoor environment is where the average GPS accuracy for the POI is below that threshold (here, the GPS accuracy is returned by Android API, in which, when a higher value for accuracy is returned, it means the GPS accuracy is lower).

A private environment is where the noise level for the POI is below a certain threshold and, while a public environment is where the noise level for the POI is above that threshold.

Since we cannot obtain a 100% estimation to determine the type of environment where the POI is, we assign percentage confidence levels for determination.

The classifier requires multi-sensor data (i.e. GPS accuracy, Noise, Battery Level, Light etc.), from start and end time of the POI. The duration of POI is divided into 5 minute slots, and each of those slots are given a confidence percentage for type of above mentioned environments. Each type of environment is labeled into one of the 4 different categories, such as indoor, outdoor, private, and public, which are encoded into {1, 2, 3, 4} respectively.

Total percentage confidence level for a particular type of environment, for each type of slot, is calculated using the Equation (8), where, n is number of 5 minute slots in POI, Pc is confidence percentage, Sck is percentage of k  th slot being type c, and c is type of environment where c = {1, 2, 3, 4}, and (1 ? k ? n). If there is no data in a slot for the classification, we use P0 to indicate the environment type ?Unclassified?.

Pc =  n ?  n? k=1  Sck ; if n > 0 (8)  The confidence level calculation for the environment type (1) Indoor and (2) Outdoor, are presented in the Equation (9) and Equation (10) respectively.

For P1, percentage contributions from sensors are, 90% by GPS accuracy(G), 5% by battery level (?), where ? = 1 if battery is charging, and ? = 0 otherwise, and 5% by Activity = ?Still? (denoted by ?s, where ?s = {0, 1}) which is returned by location API. In Equation(9) and Equation(10), ThG is threshold GPS accuracy, and x is average GPS accuracy in the slot.

P1 =  [(x? ThG ThG  ?0.9 )  + (  (?+?s)?0.05 )]  ; if x > ThG  (9) For P2, percentage contributions from sensors are, 90% by  G, and 10% by light level (l), where l = 1 if light level is above threshold level Thl or l = 0 otherwise. ThG = 30, ThN = 5, and Thl = 1000 based on empirical studies.

P2 =  [(ThG ? x ThG  ?0.9 )  + ( Thl?0.1  )] ; if x < ThG (10)  The confidence level calculation for the environment type (2) Private and (3) Public, are presented in Equation (11) and (12) respectively where, ThN is threshold noise level, and y is average normalized noise level in the slot.

For P3, percentage contributions from sensors are, 90% by noise level, and 10% by Activity = ?Still?(?s).

P3 =  [(ThN ? y ThN  ? 0.9 )  + ( ?s? 0.1  )] ; if y < ThN (11)  For P4, percentage contributions from sensors are, 90% by noise level, and 10% by Activity = ?Walking?(denoted by w, where ?w = 0, 1).

P4 =  [(y ? ThN ThN  ?0.9 )  + ( ?w?0.1  )] ; if y > ThN (12)  C. Evaluation of SFEC  SFEC is evaluated in real-world scenario by collecting multi-sensor information from mobile device of a volunteer user. Table I shows calculated percentage confidence levels of 4 POI along with their ground truth. When there is no  TABLE I CONFIDENCE PERCENTAGES FOR SFEC  Classification POI 1 POI 2 POI 3 POI 4  P1 (Indoor) - 83.94 59.78 35.28 P2 (Outdoor) 60 2.42 16.24 23.94 P3 (Private) - 22.35 0.61 - P4 (Public) 73.12 - 29.66 -  Estimation OutdoorPublic Indoor Private  Indoor Public  Indoor Unknown  Ground Truth  Outdoor Public  Indoor Private  Indoor Public  Outdoor Public  The Fourth International Workshop on Crowd Assisted Sensing, Pervasive Systems and Communications 2017    data for a particular environment type, it is labeled as ?- ?. For POI 1, P2 and P4 have substantial difference when compared to P1 and P3 respectively. Similarly, for POI 2, P1 and P3 have substantial difference in comparison with P2 and P4 respectively. For POI 3, P1 and P4 have substantial difference in contrast with P2 and P3 respectively. For POI 4, no noise data found possibly due to power management profile of device which causes absence of data and indoor outdoor classification turned out to be incorrect. Moreover, P1 and P2 have no substantial difference to distinguish the environment type. The environment of all POI (except POI 4) were able to estimate correctly, using SFEC method. However, by comparing the P1 and P2 values of POI4, they are closed to each another, this may give us hint that the estimation could be in error.



V. CONCLUSION  In a nutshell, this paper focuses on low sampling and sensor fusion techniques for POI extraction and environment classifi- cation for smart-phone location data. We introduced validation function for the POI extraction and clustered identical POI to generate user trajectory. Furthermore, we implemented SFEC method to identify the type of environment using various sensor input. In future, we will expand the analysis model to study regional mobility and travel pattern with a large scale crow sourcing / sensing activity, where ground truth is hard to obtain.

