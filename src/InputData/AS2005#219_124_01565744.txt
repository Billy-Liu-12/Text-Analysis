CloseMiner: Discovering Frequent Closed Itemsets using Frequent Closed Tidsets

Abstract  Complete set of itemsets can be grouped into non- overlapping clusters identified by closed tidsets. Each clus- ter has only one closed itemset and is the superset of all itemsets with the same support. Number of closed itemsets is identical to the number of clusters. Therefore, the prob- lem of discovering closed itemsets can be considered as the problem of clustering the complete set of itemsets by closed tidsets. In this paper, we present CloseMiner, a new algo- rithm for discovering all frequent closed itemsets by group- ing the complete set of itemsets into non-overlapping clus- ters identified by closed tidsets. An extensive experimen- tal evaluation on a number of real and synthetic databases shows that CloseMiner outperforms Apriori and CHARM.

1 Introduction  Pasquier et al. [5] found that complete set of frequent itemsets includes many redundant frequent itemsets and proposed an interesting alternative: complete set of frequent closed itemsets represents the set of all frequent itemsets without information loss and number of frequent closed itemsets is much smaller compared to the number of fre- quent itemsets. As a result, the problem of mining frequent itemsets can be reduced to the problem of mining frequent closed itemsets. This is the main motivation of this paper.

In this paper, we focus only on discovering complete set of frequent closed itemsets, rather than generating association rules [2].

We present CloseMiner, a new algorithm for discover- ing frequent closed itemsets over a large database. Unlike previous algorithms [4, 11, 5, 6, 8], CloseMiner groups the complete set of itemsets into non-overlapping clusters and each cluster is uniquely identified by a closed tidset (we de- fined closed tidset in Section 2). All itemsets in a cluster  are subsets of a unique maximal itemset, closed itemset of the cluster. The number of closed itemsets and the number of clusters are identical (see Lemma 1 in subsection 3.1).

Thus, the problem of mining frequent closed itemsets can be defined as the problem of mining closed tidsets.This is the main contribution of our paper. Like CHARM [11], we use the concept of IT-tree to explore both itemsets and tidsets si- multaneously, but search space of CloseMiner is bound by that of CHARM.

The rest of this paper is organized as follows: In Section 2, we define frequent closed itemsets. Section 3 describes our algorithm and Section 4 describes experimental evalua- tions. Section 5 concludes our paper.

2 Problem Statement  Let (T, I, ?)be the data mining context, where ? ? T ? I is a binary relation between transactions in T = {t1, t2, ...tn} and items in I = {i1, i2, ...im} representing the input database. A set X ? I is called itemset and a set Y ? T is called tidset. If a transaction ti ? T contains an item x ? I , it is denoted as (ti, x) ? ? or alternatively as ti?x. The support of an itemset X ,?(X) is the percentage of transactions containing X in T and is said to be frequent if ?(X) ? min sup < 0, where min sup is the user defined minimum support threshold.

We can define two functions over the given data mining context, (T, I, ?).

t : 2I ? 2T , t(X) = {y ? T |?x ? X, y?x}  i : 2T ? 2I , i(Y ) = {x ? I|?y ? Y, y?x} where X ? I and Y ? T . These two functions define a Galois connection [3] between power set of transactions set, 2T and items, 2I and Calois closure operators [3] cit(X) = i(t(X)) in 2I and cti(Y ) = t(i(Y )) in 2T (see [5, 4]).

Figure 1. Example Transaction Database  Definition 1 An itemset X (a tidset Y ) is said to be closed if and only if X = cit(X) (Y = cit(Y )).

3 Algorithm Design and Implementation  Having discussed frequent closed itemsets, we describe CloseMiner for discovering frequent closed itemsets in this section. We find that set of all itemsets is a complete lattice, in which join and meet are given by union and intersection respectively (see [3] for lattice theory).

3.1 Clusters: exploring closed tidset  Complete set of itemsets in 2I can be grouped into dis- joint clusters. A cluster C is defined as set of itemsets X and Y such that t(X) = t(Y ), for all X and Y in 2I . Item- sets X and Y are in two different clusters, if and only if t(X) ?= t(Y ). It induces that every itemset,X ? C has the same t(X). We define t(X) as the identifier of the cluster and it is different for different clusters. Again, we also find that each cluster is a join-semilattice i.e. union of two item- sets is guaranteed to be present in the cluster.Every cluster C has an itemset Z defined as Z = ?X?CX . It is the su- perset of all itemsets in C and therefore maximal itemset of C i.e., join of the sublattice. We observe the following properties:  Property 1 Let Y be an identifier tidset of a cluster C.

Then Y is closed.

Property 2 Let X be the maximal itemset of the cluster C.

Then X is closed.

Lemma 1 Number of closed itemsets and number of clus- ters are identical.

Lemma 2 Let X and Y are two closed tidsets. Then X ? Y is also closed tidset.

Lemma 3 Let X ? Y and ?(X) = ?(Y ). Then ?(X ? Z) = ?(Y ? Z), ?Z ? I .

Figure 2. (a) IT-Tree and (b) CloseMiner?s search space  Frequent closed itemsets search space is exponential to |I| i.e., 2I , which requires huges space for long pattern datasets. Using prefix based equivalent relation, complete set of otemset can be partitioned into [X ] equivalent classes, where X is the prefix [1, 9]. Each partitioned can be pro- cessed independently, which requires smaller amount of memory.

3.2 CloseMiner: Algorithm design  Our algorithm design consists of two major steps.

Firstly, determine initial clusters and secondly, apply CloseMiner algorithm (pseudo code in Figure 4) over set of initial clusters. The performance of our algorithm de- pends on the nature of this closure set, which in turn de- pends on the nature of the input database (T, I, ?). Clo- sure itemset of X i.e. cit(X), represents all itemsets Z with X ? Z ? cit(X). Then t(X) is closed tidset with closed itemset cit(X). CloseMiner considers set of all such cit(X)?t(X)for all [X ], X ? I as initial set of clusters and starts with this set. Remaining clusters i.e., closed tidsets can be generated from this initial set by performing inter- section operations subsequently. It avoids generating many nodes with unclosed itemsets and thus reduces search space and number of camparisons. Figure 2 shows the search space for CloseMiner over the database shown in Figure 1.

The size of search space for the case of CloseMiner is always bound by that of CHARM depending on the nature of input database, (T, I, ?). Unlike CHARM, CloseMiner combines a node X ? t(X) with another node Y ? t(Y ) with X < Y in the sequence, if and only if Y ?? X .

We can determine itemset Y with single masking opera- tion on X . It minimizes the number of comparisons. We arrange the itemsets and tidsets pairs in such a way that X ?? Y , for all X < Y . CloseMiner performs the best in such an arrangement. Whenever a new combination is      Figure 3. CloseMiner verses CHARM  performed i.e., (X ? Y ) ? (t(X) ? t(Y )), it checks for two kinds of subsumptions i.e., subsumed to itemset (refer CHARM [11]) and subsumed to tidset. If it is not subsumed to both, then CloseMiner generates a new node with the level (X?Y )?(t(X)?t(Y )) defining a new cluster. But, if it is subsumed to tidset t(Z) (i.e. t(Z) = t(X)?t(Y )), then Z ? t(Z) is replaced by (X ?Y ?Z)? t(Z) in both ? and Pi (Line 10 and 11 in pseudo code). Subsumed to itemset satisfies subsumed to tidset, but not necessarily the reverse.

The main computation is performed in the Miner Extend function, which returnsthe set of all frequent closed item- sets ?. Figure 3 shows comparisons between CloseMiner and CHARM over the example database shown in Figure 1.

Despite many advantages of vertical database format [9, 7], it suffers with larger time consumption in intersection operations and larger memory consumption for storing tid- sets. We consider diffsets as one of the best option (re- fer [11, 10] for details) and use a diffset database format that we call as closure diffset as input. We construct it as diffsets of all tidsets in the clusure vertical database with respect to Universal set of tids.

We need a fast subsumption checking mechanism to avoid comparing new itemset with all elements in ?. We have used hash table with the same hash function i.e.

h(X) = ?T?t(X)T as described in CHARM [11] and for the same reason.

Algorithm Correctness CloseMiner enumerates all fre- quent closed itemsets, since its search is based on complete lattice over all items in I . In the first step, we only prune itemsets, which are subset to a closure itemset with same support. CloseMiner only prunes those branches, which do not have sufficient support and which are subsumed either to an itemset or a cluster identifier tidset. After exploring com- plete search space and performing all possible subsumption operations, each cluster has only its maximal itemset, which is always closed. By Lemma 2, number of closed itemsets and number of clusters are identical. Hence, proof.

Figure 4. CloseMiner pseudo code  Figure 5. Datasets characteristics  4. Experimental Evaluation  All experimental evaluations were performed on a 2.4GHz Intel Xeon processor PC with 1GB of RAM running RedHat Linux 8.0. For the performance comparisons, we downloaded CHARM (diffsetbased) from http:www.cs.rpi.eduz?aki and Apriori (Borgelt) from FIMI03, http:fimi.cs.helsinki.fi. All testing datasets both real and synthetic were collected from FIMI03, which is publicly available for performance testing. As for CloseM- iner source code, it is coded in C++. Basic concept in our source code is borrowed from CHARM because of its sim- ilarity in basic frame works. Figure 5 shows the charac- teristics of the both real and synthetic datasets used in our experimental evaluation.

Figure 6 and 7 show the performance comparisons among CloseMiner, Apriori and CHARM over some datasets given in Figure 5. We find that for the datasets with less number of items and shorter patterns, CloseM-      Figure 6. Comparisons over mushroom and chess  iner outperforms both Apriori and CHARM by several or- ders of magnitude. For example, CloseMiner outperforms Apriori and CHARM by several orders of magnitude for the datasets chess, connect and mushroom. But for the datasets with larger number of items and longer patterns, this gap be- comes narrower and almost overlaps for very smaller sup- port values. It is because of the fact that CloseMiner may perform more number of subsumption operations compared to CHARM. In the case of synthetic datasets T10I4D100K and T40I10D100K, which has a large number of items and is sparse, performance of CloseMiner and CHARM are al- most same because of the above reasons.

5. Conclusions  In this paper we present CloseMiner, a new algorithm for mining frequent itemsets. Unlike previous algorithms, it groups itemsets in 2I? into disjoint clusters identified by a closed tidset. At the same time, it explores itemsets space simultaneously to generate closed itemsets. Each cluster has only one closed itemsets and number of closed itemsets is identical with the number of clusters. From experimental evaluations, we find that CloseMiner outperforms Apriori and CHARM. It also scales linearly in the number of trans- actions.

