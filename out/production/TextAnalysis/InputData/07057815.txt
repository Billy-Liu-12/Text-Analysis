Performance Oriented Mining of Utility Frequent  Itemsets

Abstract?The Aim of Association Rule Mining(ARM) is to find Frequent itemsets. Apriori Algorithm is one of the most efficient Frequent itemset mining Algorithm. However Frequent itemset mining does not includes interestingness or utility. Utility mining is a new area in data mining which considers all external utility factors. A specialized form of Association Rule Mining is utility-frequent itemset mining, here both utility factors and itemset frequencies are considered. Fast utility frequent itemset mining (FUFM) is one of the efficient algorithm to find utility- frequent itemsets. The performance of an Algorithm depends on several factors like space(memory), computing time, cyclomatic complexity, external data dependency and so on. The proposed system aims in reducing the computing time of existing FUFM by implementing a Parallel computing strategy, the proposed Algorithm is Parallel implementation of Fast Utility Frequent itemset Mining algorithm(P-FUFM). Utility-frequent itemset mining algorithm consists of two phases, candidates generation and utilities generation. Utility generation is just a product function whereas candidate generation is a iterative selection process, hence the proposed algorithm is to implement parallel generation of candidate keys and standalone strategy for utilities generation. The proposed implementation and results shows that P-FUFM computes utility-frequent itemsets in very less computing time and is more suitable for Business Development.

Keywords?FUFM; P-FUFM; Utility; ARM; Performance

I.  INTRODUCTION Association rule mining (ARM) is one of the popular data mining technique, that finds the statistical relation or correlation between the data items present in the database based on some statistical measures. The major aim of ARM is to find the set of all subsets of items or attributes that frequently occur in many transactions and to extract rules on how a subset of items influences the presence of another subset. The task of mining association rules over market basket data was first introduced by Agrawal et al [1]. Association rules are usually required to satisfy a user-specified minimum support and a user-specified minimum confidence at the same time. Association rule generation is usually split up into two separate steps [2]: First, minimum support is applied to find all frequent itemsets in a database. Second, these frequent itemsets and the minimum confidence constraint are used to form rules.

Finding all frequent itemsets in a database is difficult since it involves searching all possible itemsets. The set of possible  itemsets is the power set over I and has size 2n ? 1 (excluding the empty set which is not a valid itemset). Although the size of the power set grows exponentially in the number of items n in I, efficient search is possible using the downward-closure property of support (also called anti-monotonicity) which guarantees that for a frequent itemset, all its subsets are also frequent and thus for an infrequent itemset, all its supersets must also be infrequent.. Once frequent itemsets are obtained, the association rules can be generated with confidence larger than or equal to a user specified minimum confidence. Apriori is a seminal algorithm for finding frequent itemsets using candidate generation. It is characterized as a level-wise complete search algorithm using anti-monotonicity of itemsets i.e., ?if an itemset is not frequent, any of its superset is never frequent?. It uses a "bottom up" approach [10]. The frequent itemset mining plays an essential role in mining itemsets that occur frequently. The frequent itemsets are the items that satisfy specified minimum support. One of the drawbacks of frequent itemset mining is that it generates the patterns which the users are not interested in i.e., it doesnot includes interestingness or utility. The utility based data mining, which is an extension of frequent itemset mining, overcomes this limitation. The most infuriating task of data mining is mining itemsets with high utility. In utility based itemset mining, the item sets with utility above user specified minimum utility threshold are extracted. The utility here refers to the enumerative form of user?s preference. An item set x is said to be a high utility item set if and only if u(x) ? minUtil, where minUtil is a user defined minimum utility threshold [5]. It is also called cost sensitive learning or Active learning, in contrast to passive learning that normal Association Rule Mining (ARM) will do. Example for interestingness are symptoms, treatment priority for medical data base analysis and profit, cost for retail shop data base analysis. Several researches about utility mining were exist. The proposed system incorporates parallel computing concepts for finding utility frequent itemsets in a time-efficient manner, and there by making it more suitable for business development.



II. LITERATURE REVIEW AND EXISTING SYSTEM  A. Umining The first published utility mining algorithm is Umining[8]  which is given below. Umining generates candidates and      prunes the candidates which does not satisfies minimum utility threshold, which is given by business end user. Umining uses Apriori-based technique for generation and pruning of candidates. Umining finds only High utility itemsets and not Highly frequent itemsets. Umining creates a revolution and path towards interestingness based knowledge mining techniques.

B. Utility-Frequent Itemset Mining Association rule mining(ARM) considers only statistical  relationship between various itemsets. whereas Utility mining considers external utility factors irrespective of itemset frequencies. For business improvement it is necessary to consider both subjectively defined utilities and statistical based measures. The solution for this problem is utility-frequent itemset mining which makes ARM as updated version for business improvement. An itemset ?x? is said to be utility- frequent if for a given utility threshold ?$? and support threshold ?s? such that extended support ( x, $ ) is greater than or equal to s [6]. Utility-frequent itemset mining involves two phases : 1.finding frequent itemsets. 2.selecting utility-frequent itemsets from frequent itemsets. Finding frequent itemsets is a matter of ARM. Apriori or FP-growth Algorithm is suitable for this. If Apriori is used , it involves generation of candidates and pruning of candidates based upon minimum support. Selecting utility-frequent itemsets from frequent itemsets can be done by utility-frequent itemset mining algorithms like Two Phase Utility-Frequent itemset mining (2P-UF), Fast Utility Frequent itemset Mining (FUFM), improved Fast Utility Mining algorithm (iFUM)[4] and so on. All utility-frequent itemset mining algorithms combines ARM and a utility mining algorithm. 2P-UF is based on a quasi support, a special measure that solves the problem of nonexistence of anti- monotone property of joined support-utility measure. 2P-UF is proven to find all utility-frequent itemsets but it has some properties that render it impossible to use in practice on larger databases. .later few other algorithms including FUFM, iFUM emerged to overcome drawbacks that existed in 2P-UF.

C. Two Phase Utility-Frequent Itemset Mining Algorithm Two Phase Utility-Frequent itemset mining algorithm (2P- UF)[3] is proven to find all utility-frequent itemsets in two phases, during first phase it generates candidates and in subsequent phase it prunes the utility-infrequent itemsets.

However, due to the monotone property of quasi support measure it has a few disadvantages which render it unusable for mining of large datasets. The following disadvantages of 2P-UF Algorithm are Reversed way of candidate generation, Space complexity and higher computing time.

D. Fast Utility Mining Shankar et.al[5]., proposed an improvement over two phase utility frequent itemset mining algorithm. FUM(fast utility mining) finds high utility itemsets using combination generation function and utility calculation function. It is simpler and executes faster than Umining algorithm, when large number of itemsets are identified as high utility itemsets and as the number of distinct items increases in the input database. The CombinationGenerator()  is a method which is  used to generate all possible  combinations of the unique data items given as input to the database. It takes the item name and the level as the input which is generally denoted by the variable loop. The factorial computation method is defined in this, to generate the factorial of a given number. The combination generation is based on the concept proposed by Kenneth H. Rosen, Discrete Mathematics and its applications [4]. Compared to Umining and 2P-UF, the proposed FUM exhibits low computing time, making it more suitable for business development. The drawbacks of this algorithm is candidate generation overhead. Though combination generation function is employed, the combination generation function itself increases the computing time of the algorithm.

E. Improved Fast Utility Mining An improvement over FUM scheme leads to iFUM [4] scheme. iFUM is an enhancement over FUM in such a way that, mathematical optimizations are made. The heart of FUM algorithm is CombinationGenerator(T) which takes significant time to compute. In FUM combination generation is performed for itemsets and its subset without checking one important condition. In iFUM an additional optimization using subset property is done. The proposed is given below as follows, A set X is a subset of a set Y if every element of X is also an element of Y. Such a relation between sets is denoted by X ? Y The CombinationGenerator output for itemset DE are {D, E, DE}and itemset DEF are {D, E, F, DE, EF, DF, DEF}. If we have already computed the utility value for any of the subsets of DEF and if any of the subset repeats itself as a later transaction, then it is not necessary to generate the subsets again. Previous works on utility mining such as  FUM, fails to check this condition so it generates the combinations for the already generated subset of the itemsets too, if it repeats in a later transaction of the input database. The proposed algorithm avoids these extra computations and enhances FUM efficiency.

F. Fast Utility Frequent Itemset mining FUFM [6,17] is based on the fact that utility-frequent itemsets are a special form of frequent itemsets. Moreover, the support measure is always greater or equal to the extended support measure. Proof is trivial because when computing extended support we count only those transaction containing given itemset S that gives minimum utility on S, but when computing ?ordinary? support we count all transactions containing S. The practical consequence of this statement is that frequent itemset mining algorithms can be used to mine utility-frequent itemsets. For this reason, FUFM is very simple and fast because the main part is the ?external? frequent itemset mining algorithm. FUFM is one of the efficient algorithm compared to existing Umining, 2P-UF and other popular algorithms on the literature, still generation of candidates overhead remains exist in FUFM Algorithm. The aim of the proposed system is to reduce the time taken for generation of candidates. which in turn degrades the performance of the Algorithm.

Algorithm FUFM Input:   MSRIT, BANGALORE, India, 21-22 NOVEMBER 2014 318    -database DB -constraints minUtil and minSup Output: -all utility-frequent itemsets 1. L=1 2. Find the set of candidates with support>= minSup 3. Compute extended support for all candidates and output utility-frequent itemsets.

4. L += 1 5. Use the frequent itemset mining algorithm to obtain new set of candidates of Length L from the old set of frequent candidates.

6. Stop if the new set is empty otherwise go to step 3.

FUFM finds all utility frequent itemsets for given transactions in an efficient manner. FUFM employs Apriori for candidate generation phase which involves iterative scanning and selection of transactional database. The performance of any knowledge mining algorithm is directly proportional to the computing time of the algorithm which in turn indirectly determines the decision making time in the competitive business environment. FUFM suffers a serious drawback that computing time of FUFM linearly increases with increase in any of the knowledge mining parameters like transactions ,number of itemsets, external utilities, support values and so on. Thus computing time degrades the performance of the existing FUFM algorithm, which creates a path to develop a performance oriented utility-frequent itemset mining algorithm. Some of the drawbacks of FUFM are memory dependency and computation overhead when the size of database increases.



III. PROPOSED SYSTEM A parallel implementation of Fast Utility Frequent itemset Mining (FUFM) is employed which performs parallel computation of candidate keys, which in turn reduces computation overhead and increases overall performance of existing FUFM. Utility generation is just a product function whereas candidate generation is an iterative scanning and selection task. P-FUFM employs parallel generation of candidate keys and standalone for utilities generation by implementing a parallel computing strategy. The proposed work is to reduce the computing time of existing FUFM by implementing a parallel computing strategy and The proposed Algorithm is Parallel implementation of Fast Utility Frequent itemset Mining algorithm(P-FUFM). Utility-frequent itemset mining algorithm consists of two phases, candidates generation and utilities generation. Utility generation is just a product function whereas candidate generation is a iterative selection process, so The proposed algorithm is to implement parallel generation of candidate keys and standalone for utilities generation. The proposed system suggests the use of a single Master node and N-slave nodes. Slave nodes computes candidate keys in a parallel manner whereas master node computes utilities for all itemsets and also it will sum up the candidates calculated by all the slaves and finally master generates utility-frequent itemsets. P-FUFM shows a non- linear increase of computing time with respect to various  knowledge mining parameters (transactions, external utilities, number of itemsets and so on).

Algorithm description: Algorithm P-FUFM Input: -transaction file, profit file -number of slaves -constraints minUtil and minSup Output: -all utility-frequent itemsets 1. A master node and n-slave nodes.

2. At master node: 2.1: Scan the entire transaction file 2.2: Divide the entire transactions into n-partitions Where, n is the number of slaves.

2.3: Send the n-partitions to n-slaves.

2.4: Use Umining algorithm to calculate utilities for entire transactions.

3. At slave nodes: 3.1: Use Apriori algorithm to calculate candidate keys for their respective local transactions.

3.2: Send the calculated candidates to the master node.

4. At master node: 4.1: Sum up the candidates of n-slaves.

4.2: Prune infrequent itemsets based on minSup.

4.3: Obtain utility-frequent itemsets from frequent itemsets based on minUtil.



IV. IMPLEMENATION AND RESULTS We implemented the proposed algorithm using java. And the proposed algorithm works in three phases which are listed below: PHASE 1: CANDIDATES GENERATION  This phase is a functionality of slaves only. Initially master node splits the entire transactions into n-partitions, where n is the number of slave nodes. This phase is a pure Apriori algorithm, i.e., first phase of apriori algorithm(candidate generation phase). The slave nodes calculate all possible candidates of their local transactions parallely and finally send it to master nodes.

Fig 1. Candidates Generation   MSRIT, BANGALORE, India, 21-22 NOVEMBER 2014 319    PHASE 2: UTILITIES GENERATION This phase is a functionality of master node only. Utilities  generation is the second phase in utility-mining. The master node scans the external utilites from external utility table/file.

The table consists of itemsets and their respective utilities( profits in case of retail shop data?s). This phase calculates all possible combinations using a combination generation function and then it computes the utilty values for all possible itemset combinations. utility is a product function which involves product operation (*) over (c,p) where c=itemset combination and p=profit of itemsets. During the parallel generation of candidate keys by the slave nodes, master node computes utilities which in turn reduces the computing time overhead.

Fig 2. Utilities Generation   PHASE 3:UTILITY FREQUENT ITEMSET GENERATION This is the final phase and is the functionality of master node The master node sums up the candidates of all the slave nodes and finally it will have candidates with their support values and utility values. now it is the duty of the master node to prune infrequent itemsets (itemsets which doesnot support minSup) initially, which creates a set of frequent itemsets.and at the next round it will prune the itemsets which doesnot satisfy minUtil.

Fig 3. Utility Frequent Itemset Generation   The below graph shows the experimental results with varying transactions and distinct itemsets. The experiment is conducted with two slave nodes and the execution time is calculated in terms of seconds. The chart shows the efficiency of the proposed algorithm, when the number of transactions gets increases, the proposed algorithm produces a non-linear curve compared to existing algorithm.

Fig 4. Comparison graph: FUFM/P-FUFM.



V. CONCLUSION AND FUTURE ENHANCEMENTS Utility based Association mining considers external utility factors which suits for large business Enterprises. All the existing algorithms like FUFM, 2P-UF are efficient in finding utility-frequent itemsets, however computing time of all the existing algorithms gets degraded when number of transactions or itemsets increases, this in turn degrades the performance of all existing algorithms. computing time is an important factor which indirectly affects the decision making time needed for business improvement. The proposed system is to implement parallel version of FUFM which is performance oriented and is effective and efficient in finding utility-frequent itemsets. The proposed algorithm(P-FUFM) is least time dependent and it shows a non-linear curve with respect to computing time and any parameters like transactions, itemsets and so on. For databases with size greater than one lakh records, it is suggested to use five to six slaves which reduces the candidate generation time. The proposed system computes high utility itemsets in very less computing time and making it more suitable for business development. The ultimate aim of any data mining algorithm is quick decision making or quick solution to business improvement problems. From the previous statement we understand that computing time is a important factor in data mining algorithms. Future Enhancements of the system can be done in the following ways: 1.Implementing parallel computing for utilities generation,  in addition to parallel candidates generation.

