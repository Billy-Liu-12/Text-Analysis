

Formalizing Data Mining with Association Rules  Jan Rauch University of Economics, Prague mim. W. Churchilla 4, 130 67 Prague, Czech Republic Email: rauch@vse.cz  Ahstract-A formal framework for data mining with associa? tion rules is introduced. The goal is to help to better understand to data mining process and to introduce a platform for automation of this process. Association rules are understood as general relations of two general Boolean attributes and logical calculus of association rules is used. Important items of domain knowledge are formalized and used in the data mining process.



I. INTRODUCTION  A sketch of a formal framework called FOFRADAR (FOr? mal FRAmework for Data mining with Association Rules) covering important steps in a data mining process with as? sociation rules is given in [12]. The goal of FOFRADAR is to describe important steps of data mining process such that formalized domain knowledge can be used both in formulation of reasonable analytical questions and in interpretation of results of mining procedure.

The FOFRADAR framework is based on former results on logical calculi of association rules and on experience with the 4ft-Miner procedure. The 4ft-Miner mines for association rules rp ;::::; 'ijJ where rp and 'ijJ are Boolean attributes derived from columns of analyzed data matrices and ;::::; stands for various conditions concerning a contingency table of rp and 'ijJ [9]. The 4ft-Miner is an implementation of the ASSOC procedure [2].

Boolean attributes are derived from basic Boolean attributes i.e expressions A (ex ) . Here A is an attribute corresponding to a column of an analyzed data matrix with possible values (i.e.

categories) aI, . . .  , ak and ex is a subset of the set of possible values, ex c {aI, . . .  , ak}. Basic Boolean attribute A( ex ) is true in a row 0 of a given data matrix M if A( 0) E ex where A( 0) is a value of attribute A in row o. This means that we do not deal only with Boolean attributes - conjunctions of attribute value pairs A( a) where a E {al, . . .  , ak} but with general Boolean attributes derived from columns of an analyzed data matrix.

The goal of this paper is to introduce the FOFRADAR framework in more details. The goal is not to argue for possi? bilities to implement crucial procedures used in FOFRADAR.

These possibilities are assumed to be verified, see e.g. [9], [ 14], [ 15]. The ultimate goal is to describe the whole data mining process formally and use the formal description to automatize the data mining process, see the EverMiner project [ 13].

FOFRADAR is based on logic of association rules intro? duced in [5]. Logic of association rules consists of logical calculus LeT of association rules of type T = (tl"'" tK) formulas which are association rules rp ;::::; ? and of related result. Association rules are evaluated in data matrices M = (M, h, . . .  , IK) of type T, see section II. Logic of association rules is enhanced by additional languages and procedures.

Languages and procedures of FOFRADAR are introduced below and described in next sections in more details. Relations of particular elements of FOFRADAR to the CRISP-DM methodology are outlined in Fig. 1, see also [ 12].

Fig. 1. FOFRADAR and CRISP-OM  Language LDK of domain knowledge - formulas of this language correspond to items of domain knowledge. These items are in a form understandable to domain experts, par? ticular association rules are not used. Formulas of LDK can be considered as results of business understanding, see Fig. 1.

Language LDK is introduced in section III.

Language LDK includes MI-formulas expressing mutual influence of attributes. Formula Weight tt Diastolic meaning that if weight of patients increases then diastolic blood pres? sure increases too is an example. Procedure Cons introduced in section IV plays an important role. This procedure maps each MI-expression n to a set Cons(n) of association rules which can be considered as consequences of n. A similar approach can be used when dealing with exceptions from mutual influence of attributes, see also section IV.

Language LDt - formulas of this language correspond to relevant information on analyzed data. An example is information that given data concerns only male patients. This language is not described here, for some details see [7].

Language LAQ - formulas of this language correspond to analytical questions. Analytical questions are formulated using items of domain knowledge i.e. formulas of language LDK.

The formulation can be seen as an application of the procedure DK_AQ, see section V. Let us note that analytical questions can also be formulated using formulas of L Dt.

The core of the data mInIng process is the procedure ASSOC. Its input consists of a definition of a set of association rules to be verified to solve a given analytical question and of an analyzed data matrix M. The set of association rules to be verified is given by a formula <T> of a language ? RAR, a corresponding set of association rules is denoted as S(<T?.

Output of the ASSOC procedure is a set True(S(<T?, M) of all rules rp ;::::; 'ijJ which belong to S ( <T? and which are true in data matrix M. For details see section VI. There are various conclusion we can derive from the set True(S( <T?, M).

Particular conclusion can be seen as formulas of language ?Concl, see section VII .

No similar approach to formalize the process of mining association rules is known to the author.



II. LAR - LOGIC OF ASSOCIATION RULES  We understand association rules as formulas of a special logical calculus. A given association rule can be true or false in a given data matrix. We are interested in deduction rules of the form 'P?:*' where both rp ;::::; 'ijJ and rpl ;::::; 'ijJ1 are association rules. We use such correct deduction rules in dealing with items of domain knowledge. There are criteria of correctness of deduction rules of this form. These criteria are related to classes of association rules. This is in details presented in [5]. Here we only outline the necessary theory which is used in the next sections. Logical calculus of association rules is introduced in section II-A. Classes of association rules are outlined in section II-B and deduction rules in section II-C.

A. Logical Calculus of Association Rules  The association rules talk about data matrices. To keep things simple, we consider data matrices with values - natural numbers only. There is only a finite number of possible values for each column. Let us assume that the number of possible values of a column is t and the possible values in this column are integers 1, . . .  , t. Then all the possible values in the data matrix are described by the number of its columns and by the numbers of possible values for each column. These numbers determine a type of a data matrix and also a type of a logical calculus of association rules. We define: A type of a logical calculus of association rules is a K-tuple T = (tl"'" tK) where K ;::: 2 is a natural number and ti ;::: 2 are natural numbers for i = 1, . . .  , K.

A data matrix of the type T is a K + I-tuple M = (M,h, . . .  ,fK)' where M is a non-empty finite set and fi is an unary function from M to {I, . . .  , t;} for i = 1, . . .  , K. Elements of M correspond to rows of M and functions h, . . .  , f K correspond to columns of M.

Language ?T of association rules of type T is given by ba? sic attributes AI," . ,  AK and by 4ft-quantifiers ;::::;1, ... , ;::::;Q.

We say that Ai is of type ti for i = 1, . . .  , K. If A is a basic attribute of ?T and ex C {I, . . .  , t} then A( ex) is a basic Boolean attribute of ?T- Each basic Boolean attribute of ?T is Boolean attribute of ?T. If rp and 'ijJ are Boolean attributes of ?T then -'rp, rp 1\ 'ijJ, and rp V 'ijJ are Boolean attributes of  ?T. If rp and 'ijJ are Boolean attributes and;::::; is a 4ft-quantifier of ?T then rp ;::::; 'ijJ is an association rule of ?T.

Let M = (M, h, . . .  ,fK) be a data matrix of type T. Then a value of attribute Ai for object o E M  is fi (OJ ) . A value of a basic Boolean attribute Ai ( ex) for object o E M  is defined as fAi(CX) (O) where fAi(CX) (O) = 1 if fi(O) E ex and fiA( ex)(o) = 0 otherwise. Values of de- rived Boolean attributes -'rp, rp 1\ 'ijJ, and rp V 'ijJ for object o E M  are defined as values of func? tions f?'P(o), f'PA"l/J(O), and f'Pv"l/J(o) respectively where f ?'P( 0) = 1 - f ?'P (0) , f 'PA"l/J( 0) = min{J '1' ( 0) , f"l/J ( a)}, and frpv"l/J(o) = max{Jrp(o), f"l/J(o)}. For examples see Fig. 2 where type T = (10,20, ... , 30).

Function f w is called an interpretation of Boolean attribute win M. If o E M  and fw(o) = 1 then we say that a satisfies w in M or that w is true for a in M.

obj.

0 2  On  Al h   A 2   ...

. ..

...

...

...

AK Al(I, 2, 3) A 2( I7, 18, 19) fK fA1(1,2,3) f A2(17,18,19) 30 1 1 4 1 0  15 0 1  Fig. 2. Data matrix M and interpretations of attributes  Logical calculus ?eT of association rules of type T is given by language ?T of association rules of type T, the set MT of all data matrices M = (M, h, . . .  , f K) of type T and by associated functions F""l" '" F""Q of 4ft-quantifiers ;::::;1 , ... ,;::::;Q of ?T respectively. Association function F"" of 4ft? quantifier ;::::; maps a set of all quadruples (a, b, c, d) of non? negative integer numbers satisfying a + b + c + d > 0 into the set {O, I}.

Let M = (M, h, . . .  , fK) be a data matrix of the type T. Let w be a Boolean attribute of ?T and let fw be the interpretation of w in M. Then the frequency of a Boolean attribute w in M is the number Fr(w, M) defined such that Fr(w, M) = LOEM fw(o). Please note that Fr(w, M) is the number of objects oEM satisfying w.

Let rp and 'ijJ be Boolean attributes. Then the 4ft-table 4ft( rp,'ijJ, M) of rp and 'ijJ in M is a quadruple 4ft( rp, 'ijJ, M) = (a, b, c, d) where a = Fr( rp 1\ 'ijJ, M), b = Fr( rp 1\ -,'ijJ, M), c = Fr( -,rp 1\ 'ijJ, M), and d = Fr( -,rp 1\ -,'ijJ, M). 4ft-table 4ft( rp,'ijJ, M) of rp and 'ijJ in M can be written as introduced in Table I. Here a is the number of rows of M satisfying both rp and 'ijJ, b is the number of rows of satisfying rp and not satisfying 'ijJ etc.

TABLE I 4FT TABLE 4ft( <.p, 'Ij;, M) OF <.p AND 'Ij; IN M  ?I a b c d    A value Vale cp ? 'IjJ, M) of an association rule cp ? 'IjJ of LT in a data matrix M E MT is defined such that  Val(cp ? 'IjJ, M) = F",,(a, b, c, d)  where (a, b, c, d) = 4ft( cp, 'IjJ, M) is the 4ft-table of cp and 'IjJ in data matrix M and F"" is an associated function of 4ft? quantifier ?. The association rule cp ? 'IjJ is true in data matrix M if Val (cp ? 'IjJ, M) = 1, otherwise the association rule cp ? 'IjJ is false in data matrix M .  Three important 4ft-quantifiers are introduced below, about 20 additional 4ft? quantifiers are introduced in [2], [3], [5], [6]  4ft-quantifier =?p,B of founded implication is defined such that F=*p,B(a, b, c, d) = 1 if and only if a?b ?: p /\ a ?: B for 0 < p ::; 1 and B > 0 [2]. Here F=*p,B is the associated function of =?p,B. Rule cp =?p,B 'IjJ means that at least lOOp per cent of objects satisfying cp satisfy also 'IjJ and that there are at least B objects of M satisfying both cp and 'IjJ .

4ft-quantifier Bp,B of founded double implication is defined such that F ?'}p, B (a, b, c, d) = 1 if and only if a+?+c ?: p /\ a ?: B for 0 < p ::; 1 and B > 0 [3].

Rule cp Bp,B 'IjJ means that at least lOOp per cent of objects satisfying cp or 'IjJ satisfy both cp and 'IjJ and that there are at least B objects of M satisfying both cp and 'IjJ .

The "classical" association rule with confidence C and support S [ 1] can be expressed by the 4ft-quantifier -+c,s which is defined such that F -'fe.s (a, b, c, d) = 1 if and only if a?b ?: C /\ a+b?c+d ?: S.

.

B. Classes of Association Rules  Classes of association rules are defined by classes of 4ft? quantifiers. An example is a class of implicational rules . A rule cp ? 'IjJ belongs to the class of implicational rules if 4ft? quantifier ? belongs to a class of implicational quantifiers . If 4ft-quantifier ? belongs to the class of implicational quanti? fiers then ? is an implicational 4ft quantifier etc.

Important classes of 4ft quantifiers are defined by TPC - Truth Preservation Conditions . Each TPC concerns two 4ft? tables Tl = (a, b, c, d), T2 = (a', b', c', d'). 4ft-quantifier ? belongs to a class S1 if  ? (a,b,c,d) = 1 1\ TPCo(T1,T2) implies ? (a',b',c',d') = 1  for all the 4ft tables (a, b, c, d) and (a', b', c', d'). Here T PCn is a true preservation condition for the class S1 [5], [7]. Two examples of important classes of association rules follow.

? Class of implicational quantifiers is defined in [2] by T PC=*: a' ?: a /\ b' ::; b. 4ft-quantifier =?p,B is an example of implicational quantifiers.

? Class of '2:.-double implicational quantifiers [5] is defined by T PC2:.,?'}: a' ?: a /\ b' +c' ::; b+c. 4ft-quantifier Bp,B is an example of '2:.-double implicational quantifiers.

Additional classes of association rules are introduced in [5].

C. Deduction Rules  We are interested in correct deduction rules :??, where both cp ? 'IjJ and cpt ? 'IjJ' are association rules. Deduction rule 'P,:?, is correct if it holds for each data matrix M:  'P ?o/  If cp ? 'IjJ is true in M then also cpt ? 'IjJ' is true in M .

A(1)=*p BB(l) I f The rule A(1)=*p,?B(I,2 ) is a very simple examp e 0 a correct  deduction rule.

There is a class of interesting implicational quantifiers  which is a subclass of implicational quantifiers. The 4ft? quantifier =?p,B belongs to the class of interesting implica? tional quantifiers. There is a relatively simple criterion which makes possible to decide if a given deduction rule 'P???, is correct or not. The core of this criterion is a decision if a formula r ( cp, 'IjJ, cp', 'IjJ') of propositional calculus is a tautology or not, for details see [5]. There are similar results for additional classes of association rules [5].



III. DOMAIN KNOWLEDGE  Our goal is to enhance logical calculus of association rules by tools for dealing with domain knowledge in data mining process. We are going to define a language LDK of domain knowledge of type T = (h, . . .  , tK) associated with a logical calculus LeT of association rules of type T There are three types of domain knowledge - types of attributes, groups of attributes and mutual influence of attributes.

Types of attributes of language LDK of type T is a K-tuple NO = (Tl,' . .  , TK) where Ti E {N, O}. If Ti = N then the attribute Ai is nominal, if Ti = 0 then the attribute Ai is ordinal .

Groups of attributes and mutual influence of attributes are introduced in sections III-A and III-B respectively.

A. Groups of Attributes  Language LT of association rules of type T includes basic attributes AI, . . .  , AK, see section II-A. Domain experts usu? ally perceive groups of attributes as reasonable and important piece of domain knowledge. A group of attributes describing results of biochemical examination and a group of attributes describing physical activity of observed patients are examples of such groups. The groups of attributes can be used to formulate reasonable analytical questions.

We distinguish two types of groups of attributes - basic and additional. There are L basic groups of attributes Gl, . . .  G L - subsets of the set {AI, . . .  ,AK} satisfying L ::; K, Ur=lGi = {AI"" ,AK} and Gi nGj = 0 for i,j = 1, . . .  L.

The additional groups of attributes are defined for various ad hoc analyses. The additional group of attributes G is each non empty subset G c {AI"'" AK} .

B. Mutual Influence of Attributes  Mutual influence of attributes is expressed by MI? expressions. There are four types of MI-expressions. Let A, B be ordinal attributes and let cp be a Boolean attribute:  ? A tt B is an Ml-expression of type i-i . Its meaning is: if A increases then B increases too .

? A t.!- B is an MI-expression of type i-d. Its meaning is: if A increases then B decreases .

? A t+ cp is an Ml-expression of type i-fi . Its meaning is: if A increases then relative frequency of cp increases .

? A t- cp is an MI-expression of type i-fd.  Its meaning is: if A increases then relative frequency of cp decreases .



IV. MUTUAL INFLUENCE OF ATTRIBUTES - CONSEQUENCES AND EXCEPTIONS  A. Consequences  Our first goal is to assign a set of all assocIatIOn rules rp ;::::; 'ijJ which can be considered as consequences of a given MI-expression n where;::::; is a given 4ft-quantifier. We define a procedure Cons which uses both domain expert knowledge and logical deduction. Principles introduced in [8] as well as experience from experiments described in [ 12], [ 14] are used.

An application of the Cons procedure to an MI-expression n and a 4ft-quantifier;::::; results to a set Cons(n, ;::::;) of all rules rp ;::::; 'ijJ which can be considered as consequences of n.

We show how a value Cons(A tt B, =?p,B) is defined, the approach for additional MI-expressions and 4ft-quantifiers is similar. The definition is done in four steps:  1) A set AC(A tt B, =?p,B) of atomic consequences of A tt B for =?p,B is defined. This is a set of rules A(a) =?p,B B(f3) which can be, according to a domain expert, considered as direct consequences of A tt B .

2) A set LgCn(A tt B ,  =?p.B) of logical consequences of A tt B for =?p,B is defined. This is a set of rules rp =?p,B 'ijJ for which there is A(a) =?p,B B(f3) E AC(A tt B, =?p,B) such that A(CX):P,B!

?(3) is a correct deduction rule. Please note <P p,B that AC(A tt B, =?p,B) C LgCn(A tt B, =?p,B) because A(cx)=?p BB?(3) . d d '  I A(CX)=?p:BB?(3) IS a correct e uctIOn ru e.

3) A set AgCn(A tt B, =?p,B) of agreed consequences of A tt B for =?p,B is defined. A rule rp =?p,B 'ijJ belongs to AgCn(A tt B, =?p,B) if rp =?p,B 'ijJ tf. LgCn(A tt B, =?p,B) and there is a rule W =?p,B 7 E LgCn(A tt B, =?p,B) such that rp =?p,B 'ijJ does not logically follow from W =?p,B 7 (i.e.

W:P'B? is not a correct deduction rule), however, it is possible <P p,B to agree that rp =?p,B 'ijJ does not say anything new in addition to W =?p,B 7.

4) We define Cons(A tt B, =?p,B) = LgCn(A tt B, =?p,B) U AgCn(A tt B, =?p,B).

Examples of real atomic consequences and agreed conse? quences concerning medical domain are introduced in [ 11], [ 12]. Here we give only simple formal examples. Let A, B be attributes with categories 1, ... ,9. Let us define sets of categories low = 1,2,3, medium = 4,5,6, high = 7,8,9.

The set AC(A tt B, =?p,B) can be then defined as a union low x low U medium x medium U high x high. Here low x low is a set of all rules A(a) =?p,B B(f3) where both a <:;;; 1,2,3 and f3 <:;;; 1,2,3, similarly for medium x medium and high x high.

Let us assume that A means Weight and B means Blood pressure (of patients). Then if the rule Weight( a) =?p,B Blood pressure(f3) is an atomic consequence of Weight tt Blood pressure then the rule Sex(male) 1\ Weight(a) =?p,B Blood pressure(f3) does not logically follow from Weight(a) =?p,B Blood pressure(f3) but it does not say anything new in addition to Weight(a) =?p,B Blood pressure(f3) . Thus we can consider the rule Sex(male) 1\ Weight(a) =?p,B Blood pressure(f3)  as an agreed consequence Weight tt Blood pressure .

B. Exceptions  of MI-expression  Our second goal is to assign a set of all association rules rp ;::::; 'ijJ which can be considered as exceptions to a given MI? expression n where;::::; is a given 4ft-quantifier. The procedure Exc can be defined in a way similar to the way the procedure Cons is defined. We outline how a value Exc(A tt B, =?p,B) is defined. This is again done in four steps:  1) A set AE(A tt B, =?p,B) of atomic exceptions to A tt B for =?p,B is defined. This is a set of rules I), 1\ A(a) =?p,B B(f3) which can be according to a domain expert considered as exceptions to A tt B .  Let A, B, low and high be as above. The set AE(A tt B, =?p,B) can be then defined as a union low x high U high x low. Here low x high is a set of all rules I), 1\ A(a) =?p,B B(f3) where both a <:;;; 1,2,3 and f3 <:;;; 7,8,9, similarly for high x low.

Here I), is a Boolean attribute.

2) A set LgEx(A tt B, =?p,B) of logical consequences of exceptions to A tt B for =?p,B is defined. This is a set of association rules rp =?p,B 'ijJ for which there is a rule I), 1\ A(a) =?y,B B(f3) E AE(A tt B, =?p,B) such that I<!\A(CX)=?p,B  B \(3) is a correct deduction rule. <P=?p,B,p  3) A set AgEx(A tt B, =?p,B) of agreed consequences of A tt B for =?p,B is defined. A rule rp =?p,B 'ijJ belongs to AgEx(A tt B, =?p,B) if rp =?p,B 'ijJ tf. LgEx(A tt B, =?p,B) and there is a rule W =?p,B 7 E LgEx(A tt B, =?p,B) such that rp =?p,B 'ijJ does not logically follow from W =?p,B 7, however, it is possible to agree that rp =?p,B 'ijJ does not say anything new in addition to W =?p,B 7.

4) We define Exc(A tt B, =?p,B) = LgEx(A tt B, =?p,B) U AgEx(A tt B, =?p,B).

Let us note that conditional association rules [9] can also be used to express atomic exceptions. A set AE(A tt B, --+c,s ) of atomic exceptions to A tt B for a "classical" association rule with confidence C and support S expressed by the 4ft-quantifier --+c,s (see section II-A) can be defined as a set of conditional association rules A( a) =?p,B B(f3) II),. A conditional association rule rp ;::::; 'ijJ I I), is true in a data matrix M if the rule rp ;::::; 'ijJ is true in a data matrix MIl), which consists of all rows of M satisfying 1),. However, more detailed description of this possibility is out of the scope of this paper.

Please note that this approach to exceptions differs from that introduced in [ 16].



V. FROM DOMAIN KNOWLEDGE TO ANALYTICAL QUESTIONS  The goal is to use items of domain knowledge to formulate reasonable analytical questions and to describe processes of formulation in a formal way. We have three types of items of domain knowledge: types of attributes NO = (71"'" 7K)' groups of attributes (e.g. G 1, . . .  Gd and mutual influence of attributes expressed by MI-expressions (e.g. A tt B with ordinal attributes A, B), see section III. These can be used to formulate the following types of analytical questions:    GG - question - a general form of GG question is [M : G?, . . .  , Gf.; ?? G?, . . .  G'{] where M is a data matrix and G?, . . .  , Gf.; and G?, . . .  G'{ are groups of attributes.

Examples are: [M : G1 ?? G3] meaning In the data matrix M, are there any interesting relations between combinations of values of attributes of group G1 and combinations of values of attributes of group G3?

[M : G1, G2'?? G3, G4] meaning In the data matrix M, are there any interesting relations between combinations of values of attributes of groups G1 and G2 on one side and combinations of values of attributes of groups G3 and G4 on the other side?

Negative GG_MI - question - a general form of this question is [M : G?, . . .  , Gf.; ?? G?, . . .  G'{; -=/? [21,"" [2K] where M, G?, . . .  , Gf.; and G?, . . .  G'{ are as above and [21, . . .  , [2K are MI-expressions, see section III-B. An exam? ples is: [M : G1 ?? G3; -=/? [21, [22] meaning In the data matrix M, are there any interesting relations between combinations of values of attributes of group G1 and combinations of values of attributes of group G3 which are consequences neither of [21 nor of [22?

Positive GG_Ml - question - a general form of this question is [M : G?, . . .  , Gf.; ?? G?, . . .  G'{; =} [21,"" [2K] where M, G?, . . .  , Gf.;, G?, . . .  G'{ and [21,"" [2K as above.

An examples is: [M : G1 ?? G3; =} [21, [22] meaning In the data matrix M, are there relations between combinations of values of attributes of group G1 and combinations of values of attributes of group G3 which can be considered as consequences of [21 or [22?

Exception GG_MI - question - a general form of this question is [M : G?, . . .  , Gf.; ?? G?, . . .  G'{; f-O [21,"" [2K] where M, G?, . . .  , Gf.;, G?, . . .  G'{ and [21,"" [2K as above.

An examples is: [M : G1 ?? G3; f-O [21, [22] meaning In the data matrix M, are there relations between combinations of values of attributes of group G1 and combinations of values of attributes of group G3 which can be considered as exceptions from [21 or [22?

All the above introduced analytical questions are considered as formulas of language LAQ. Formulation of such analytical questions i. e. creation of formulas of LAQ can be formalized by the procedure D K _AQ. Input of this procedure are formu? las of language LDK, output are formulas of language LAQ.

Detailed description of this procedure is out of range of this paper, for some preliminary considerations see [10].

We deal with association rules when solving the question [M : G1 ?? G3]. This means that relations between combina? tions of values of attributes of group Gland combinations of values of attributes of group G3 will be considered as association rules 'P ? 1/J where 'P is a Boolean attribute derived from attributes of the group G1 and similarly for 1/J and G3.

In addition, ? is a suitable 4ft-quantifier. The same is true for additional analytical questions. 8( G) means below a set  of Boolean attributes derived from a group G of attributes.

It is crucial that we can deal with Boolean attributes derived  from basic Boolean attributes of the form A (0;), see section II-A. This opens a possibility to tune the set 8( G) in a very fine way [9].



VI. ApPLYING THE ASSOC PROCEDURE  Analytical questions are solved by the procedure ASSOC.

The set of association rules to be verified by the ASSOC procedure is described by a formula of a language 12 RAR, see section VI-A. The ASSOC procedure is introduced in section VI-B. A formula .p of the language LRAR defining a set of association rules to be verified to solve a given analytical question can be seen as a result of the procedure AQ_RAR, see section VI-C.

A. Language LRAR  A set of relevant association rules 'P ? 1/J to be verified to solve a given analytical question is given by  ? groups of attributes G?, . . .  , Gf.; from which Boolean attributes 'P are generated  ? groups of attributes G?, . . .  , G'{ from which Boolean attributes 1/J are generated  ? 4ft-quantifier ? ? several parameters specifying details.

We assume that 'P = 'PI 1\ ... 1\ 'Pu where 'Pi is generated from the group G?, i = 1, . . .  ,U, some of 'Pi can be omitted. 1/J is determined in a similar way by G?, . . .  , G'{. The parameters determine a minimal and a maximal number of 'Pi in 'P and a way in which 'Pi is generated from the group G?, similarly for 1/J.

Let us  assume that the group G? consists of  attributes A?, . . .  , A?. Then 'Pi = K:l 1\ ... 1\ K:h or 'Pi = K:l V ... V K:h, where K:j is a basic Boolean attributes derived from Aj,  j = 1, . . .  , h. Some of K:j can be omitted. The parameters determine if conjunctions or disjunctions will be created, a minimal and a maximal number of K:j in 'Pi and a way in which the particular K:j are created from Aj. The way of creation of 1/Ji from the group G?/ is similar.

Formal description of all details describing the set of rele? vant association rules in the above outline way is understood as a formula of a language LRAR.

B. The ASSOC procedure  There are at least two implementations of the ASSOC procedure which generate and verify sets of association rules defined by formulas of LRAR. The first one is the 4ft-Miner procedure mentioned already above. It is s a part of the LISp? Miner system [15] which implements also additional features of FOFRADAR - namely dealing with domain knowledge and analytical questions [10], [11] and filtering consequences of items of domain knowledge [14]. The second implementation is a part of the FERDA data-miner system [4].

Each of these implementations has its own dialect of the 12 RAR language. Both dialects have more possibilities than outlined above. Anyway, input of ASSOC consists of analyzed    data matrix M and of a formula 1> of a language ? RAR which defines a set of relevant rules. This set is denoted as S( 1?.

Output of the ASSOC procedure is a set True(S(1?, M) of all rules i.p ? 'IjJ which belong to S( 1? and are true in data matrix M.

C. The AQ_RAR procedure  There are many possibilities how to construct a formula 1> and its parts. Examples of useful hints (i), (ii) follow. Let A be an ordinal attribute with categories 1, . . .  , t.

(i): If you are interested in general values then use intervals of categories of length 1 - t/3. Interval of categories is a set of consecutive categories. Examples of such basic Boolean attributes are A(l, 2, 3), A(6, 7, 8, 9).

(ii): If A is an nominal attribute with categories 1, . . .  , t then use subsets of length 1 - 1 i.e. basic Boolean attributes A(l), . . .  , A(t).

It is assumed to use a set of similar hints to construct a procedure AQ_RAR. Input of the procedure AQ_RAR will be an analytical question Q i.e. a formula of language ?AQ, see section V. Output of the procedure AQ_RAR will be a formula 1> = AQ_RAR(Q) of language ?RAR defining a set S( 1? of relevant association rules to be verified by the ASSOC procedure to solve the question Q. An additional task of the procedure AQ_RAR will be a modification of the formula 1> according to results of interpretation of an output True(S(1?, M) of the ASSOC procedure.

Some preliminary considerations concerning the procedure AQ_RAR are in [11], [13].



VII. INTERPRETING TRUE RULES  The analytical questions introduced in section V, results of the ASSOC procedure and consequences and exceptions from mutual influence of attributes introduced in section IV can be used to formulate reasonable conclusions. Assume that Q is an analytical question, 1> = AQ_RAR( Q) is a formula of ?RAR defining a set S(1)) and True(S(1?, M) is a set of all rules i.p ? 'IjJ belonging to S( 1? which true in data matrix M.

Let Q be a GG-question [M : G1 ?? G3] meaning In the data matrix M, are there any interesting relations between combinations of values of attributes of group G1 and combinations of values of attributes of group G3? (see section V). Then we can use the consequences Cons(0,, ?) of particular MI-expressions 0, introduced in section IV-A to make reasonable conclusions. An example is: In True( S( 1?, M), there are lot of association rules which can be considered as consequences of A tt B .  We recommend to organize a deeper analysis.

An additional example is: In True(S(1?, M), there are no association rules which can be considered as consequences of A tt B .

The outlined process of interpretation can be again de? scribed formally in details and implemented as a suitable procedure. Several preliminary examples are in [14].



VIII. CONCLUSIONS AND FURTHER WORK  We have introduced several mutually related formal lan? guages based on logical calculus of association rules and several procedures transforming formulas of one language to formulas of another language. We have shown that the whole system of languages and procedures can be understood as a formal frame for data mining with association rules.

We have also pointed out to software tools supporting this formal frame. However, there are still lot of details to be developed. The ultimate (and still far) goal is to develop a formal frame for automation of the whole data mining process, see also [13].

ACKNOWLEDG MENT  The work described here has been supported by Grant No.

201108/0802 of the Czech Science Foundation.

