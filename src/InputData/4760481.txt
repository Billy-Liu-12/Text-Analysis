Efficient Mining of Maximal Patterns using Order  Preserving Generators

Abstract- In this paper, we address the problem of maximal  frequent pattern mining from transactional datasets. Many of the existing algorithms for mining maximal patterns are based on frequent patterns which consume large amount of time & space.

We propose OP-MAX (Order Preserving ? MAXimal pattern mining) algorithm, which mines all the maximal patterns from transactional datasets with less space and time.  Our methodology computes frequent closed maximal patterns and outputs maximal patterns among them. We also incorporate several optimization techniques to improve the mining efficiency. Experiments involving publicly available datasets show that our algorithm outperforms in time complexity when compared to the recently proposed FP-max, Eclat and MAFIA algorithms.

Index Terms: Data Mining ? Closed Patterns ? Maximal Patterns - Algorithms

I. INTRODUCTION  Frequent Pattern mining is fundamental to several data mining tasks including Association Rule Mining [17][18], life science data analysis[1] and social network analysis[7]. The problem is stated as follows. Given a collection of transactions with each transaction consisting of set of items, a frequent pattern is a subset of set of items that occurs in at least user specified percentage (support) of the transactions.  Frequent pattern mining is computationally demanding task and requires more memory, I/O traffic, high computational power and building efficient algorithms for frequent pattern mining has been an active area of research in the field of data mining.

Several algorithms have been proposed to mine frequent patterns including Apriori[17], F-Apriori[20], FP-growth[16], FP-growth*[4] and Transaction Mapping Algorithm[3]. But frequent pattern mining suffers from several drawbacks. The main drawback is too many frequent patterns. For example, if the pattern length is x, then 2x frequent patterns would be generated.  In many applications with long frequent patterns, enumerating all possible subsets is computationally not possible. Most of the dense datasets usually contains long frequent patterns and frequent pattern mining is computationally infeasible. To overcome the ?too many patterns? disadvantage, closed pattern concept was proposed [10].  The set of closed patterns of the given transactional  database is the condensed representation of the set of all frequent patterns without any loss of information i.e. from the given set of closed patterns it is possible for us to generate all the frequent patterns.  A frequent pattern is said to be closed if it has no superset with the same frequency (support).  Several algorithms have been proposed in the literature including A- Close, FP-Close[4], AFOPT-Close [24], B-Miner & C-Miner [1], and DCI-Close [2].  However, when there are very long patterns present in the dataset, the generation of all the frequent closed patterns is not trivial and it suffers from the same problem as frequent patterns.  To further condense the set of frequent closed patterns, Maximal Pattern concept was proposed.  The set of Maximal Patterns is the smallest possible representation of all the frequent patterns that can still be used to generate the entire frequent patterns. A frequent pattern is said to be maximal if none of its supersets is frequent.

However, unlike in frequent closed pattern, the support information is lost in maximal patterns but can be easily recomputed from the given dataset.  Several research works have been done in maximal pattern mining and several algorithms have been proposed including AFOPT-Max[24], FP-Max[4], MAFIA[5] and Eclat-Max[21]. For the dataset given in Table 1, there are 15 frequent patterns including (A3), (B4), (C4), (E4), (AB2), (AC3), (AE2), (BC3), (BE4), (CE3), (ABC2), (BCE3), (ABE2), (ACE2), and (ABCE2).  The superscripts indicate the support count value.  For the same dataset, there are 5 frequent closed patterns including (C4), (AC3), (BE4), (BCE3), (ABCE2) and there is only one maximal pattern (ABCE).  It has been found that maximal patterns are adequate for most of the real time applications including association rules and biological applications [22]. However, mining all the maximal patterns from the given dataset is computationally more expensive than frequent closed pattern and frequent pattern mining.  It is because there is no relationship between any two maximal patterns and all the maximal patterns are unique to each other, whereas all the frequent closed patterns can be related by subset or superset relationship with respect to each other.   Moreover, it has been proven that the complexity class of maximal pattern mining is     R. V. Nataraj 1 and S. Selvan 2 1Department of Information Technology, PSG College of Technology, Coimbatore, Tamil Nadu, India  rvn@ieee.org 2Department of Computer Science, St. Peter?s Engineering College, Chennai, Tamil Nadu, India  drselvan@ieee.org     NP-hard [6].  Several algorithms for mining maximal patterns are based on the enumeration of frequent patterns and it outputs maximal patterns among them. Unlike frequent patterns, this requires the patterns to be stored in the main memory for maximality checking and consumes much main memory.

This paper proposes OP-MAX (Order Preserving-MAXimal Pattern Mining) algorithm which makes use of order preserving closed pattern generation concept [2] and memory efficient maximality checking using bit-vector representation of frequent closed maximal patterns.  The rest of the paper is organized as follows. Section II gives the preliminaries, section III presents the proposed algorithm, section IV gives the experimental results and section V concludes the paper.



II. PRELIMINARIES  In the context of association rule mining, a database D is a triple D={ T,I,R}, where T and I are finite set of transactions and items respectively. R ? T x I  is a binary relation between transactions and items.  Each pair (t,i) ? R denotes the fact that the transaction t ? T is related to the item i ? I. A pattern P ?  I is frequent if support count of P exceeds user defined minimum support.  A pattern P ? I is a maximal pattern if there exist no other pattern P? such that P? is frequent and P ? P?.  For example, with support count as 2, the pattern BCE is frequent but not maximal because there exist another frequent pattern ABCE which is the super set of BCE.

Similarly, the pattern ACD is a maximal pattern but not maximal frequent pattern.

Table 1. An example transactional Database   TID ITEMS 1 A C D 2 B C E 3 A B C E 4 B E 5 A B C E

III. MAXIMAL PATTERN MINING  Our algorithm computes the set of maximal frequent patterns from the set of frequent closed maximal patterns.  We use order preserving closed pattern generation algorithm to compute the set of frequent closed maximal patterns.

Wherever necessary, we use bit vectors to save the main memory and also to speed up the computation process.

A. Order Preserving Closed Pattern Mining Order preserving generation algorithm [2] is based on the  following principle: ?every closed pattern is a superset of another closed pattern?.  The algorithm visits the search space (item space) in the depth first manner and it outputs the closed patterns. The procedure attempts to build valid generators,  which are subsets of another closed pattern and all the valid generators lead to a closed pattern. The order preserving algorithm takes three parameters as input: closed_set, which is initially empty, pre_set, which is initially empty and post_set, which contains all the items.  post_set contains the set of items to be processed whereas pre_set contains the processed items from post_set that lead to valid generators. pre_set is updated when the recursive call returns and it does not change when the recursive call deepens. The algorithm builds all the possible generators by adding items from the post_set to closed_set.  If the supporting transactions of the generator is subset to any one of the supporting transactions of the element i ? pre_set, then the generator is invalid i.e. the closed pattern of the current generator has already been generated while processing item i.

The algorithm finds all the valid generators and then computes the closed patterns.  In our work, we have adopted the same concept, but we only generate maximal closed patterns.

B. OP-MAX Algorithm Let D denote the given dataset, X denote the set of frequent  closed maximal patterns of D and Y denote the set of maximal patterns of D. Then, Y ?  X. Our algorithm is based on the above concept.  OP-Max algorithm computes the set of frequent closed maximal patterns and then outputs the maximal patterns among them.  While computing the maximal patterns, OP-Max algorithm also prunes away the set of closed maximal patterns which are subsets of another closed maximal pattern.

While traversing the search space, we adopt a particular strategy which greatly improves the running time of the algorithm by reducing the depth of the depth first exploration of search space tree and is explained in the next section.

C. Itemset Ordering The order in which the itemsets are processed plays a vital  role in the depth first exploration of search space.  By proper ordering, we can reduce the depth of the search space in depth first exploration as illustrated in this section. In general, the normal lexicographic ordering  is, ? i? pre_set, i?  j holds where j?post_set and elements in the pre_set and post_set are also lexicographically ordered and processed in the same order.

In our method, we sort all the frequent 1 items with respect to their support count and remapped to continuous integer space in the same order starting with 0.  While processing item i, all the elements, j, which succeed i in lexicographic order are placed in pre_set and all elements, k, which precede i are placed in post_set i.e ? i? pre_set, i?  j holds where j?post_set. An example of this ordering is given in Fig. 2 whereas Fig. 1 shows the normal lexicographic ordering.

Order Preserving algorithm [2] builds the generator by adding various items from post_set to closed_set and validity of the generator is tested using elements in the pre_set i.e. if the generator is subset of any one of the elements in the  pre_set then the generator is not valid.

{ pre_set }   { post_set } {1}    {2 3 4 5 6 7} {1 2}    {3 4 5 6 7} {1 2 3}    {4 5 6 7} {1 2 3 4}   {5 6 7} {1 2 3 4 5}   {6 7} {1 2 3 4 5 6}  {7}   Figure 1: Lexicographic Itemset Ordering     { pre_set}   {post_set} {2 3 4 5 6 7}   {1} {3 4 5 6 7}   {2 1} {4 5 6 7}   {3 2 1} {5 6 7}    {4 3 2 1} {6 7}    {5 4 3 2 1} {7}   {6 5 4 3 2 1}   Figure 2: Itemset Ordering used in OP-MAX algorithm   If the generator satisfies minimum support and not a subset of anyone of the elements in the pre_set then the generator will lead to a closed itemset.  By ordering the post_set elements in the support descending order, we reduce the post_set items to the maximum extent in every closure computation and this limits the depth of the recursive tree.

D. Pruning Non-Maximal Patterns Let X be the closed pattern and Y be another closed pattern  which is a superset of X  i.e. Y is the extension of X. Then, Y ?X and X is a non-maximal pattern. Hence, whenever a closed pattern Y, which is an extension of X, is generated, we discard X as non-maximal pattern.  If Y is the maximal closed pattern (all the leaf nodes of closed pattern search space tree are maximal closed patterns) then Y is retained and is stored in bit- vector format to reduce memory consumption.  Let M denote the set of maximal closed patterns. When a closed pattern, Z, is found to be maximal closed pattern, Z is compared with the set, M, of already found maximal patterns. If Z is found to be unique, it is retained in the set of maximal closed patterns.

Formally, if ? P?M and P ?Z, then P is removed from the set M.  If ? P?M and P ?Z, then Z is discarded as non-maximal pattern.

E. OP-MAX Pseudocode This section presents Order-Preserving Maximal Pattern  Mining algorithm pseudocode. The algorithm takes two parameters as input: transactional dataset, and the minimum support value.  The algorithm outputs all the maximal patterns that satisfy min-support constraints.

INPUT: transactional dataset, min-support OUTPUT: all maximal patterns satisfying support constraints 1. ? i?F1(frequent-1-items) 2.       pre_set={ i? ?F1 | i? ?  i } 3.       closed_set={ null } 4.       post_set={  i? ?F1 | i? ?  i } 5.       tid_set = { t ?T | i ?  t } 6.      OP-MAX(pre_set, closed_set, post_set, tid_set)  7. OP-MAX(pre_set, closed_set, post_set, tid_set) 8. { 9.       while (post_set!=null) 10.           write closed_set to tempstack 11.           write tid_set to tempstack 12. z:       i = min(post_set) 13.           post_set = post_set \ i 14.           closed_set=closed_set ? i 15.           tid_set ?  = tid_set?? g(i) 16.           if ((support(closed_set) > min-support)  && ( ? j?pre_set, tid_set? ? g(j))) 17.               write post_set to tempstack 18.               write pre_set ? i to tempstack 19.               push tempstack to stack 20.              ? j ? post_set 21.                     if tid_set ? ?  g(j) 22.                         closed_set=closed_set ? j 23.                        post_set=post_set \ j 24.                    endif 25.                tid_set = tid_set? 26.                if closed_set is maximal closed set 27.                       update the set MP with closed_set 28.                endif 29.          else 30.             if (post_set !=null) 31.                 goto z: 32.             endif 33.         endif 34.          if  (post_set==null && stack not empty) 35.                pop from stack 36.               if (closed_set==null) 37.                    return 38.               endif 39.          endif 40.     endwhile 41. }  F. Pseudocode Description The algorithm uses three sets (pre_set, post_set and  closed_set) as used in [2]. Besides, it uses three sets F1,tid_set and MP.  F1 is used to store the set of frequent-1 items.  tid_set is used to store the set of supporting transactions of the current closed pattern and MP set store the set of Maximal Closed Patterns.  While the algorithm finishes its execution, the set MP will contain the set of all maximal patterns.  The g(i) function, where i?F1 returns the set of transactions that contain item i.  The algorithm uses a stack to store the     necessary information for backtracking and the stack structure contains four sets (pre_set, post_set, closed_set and tid_set).

The algorithm also uses a temporary stack variable, tempstack, to keep track of the previous closed pattern that is generated.

Whenever, an extension of closed pattern is found to be closed, the previous pattern is pushed to the stack along with its pre_set, post_set and tid_set(line no: 19).  For example, let X and Y be a closed pattern and Y ? X.  Whenever Y is generated, X will be pushed to stack. When X is popped, all other patterns Y? will be generated where Y? ? Y and Y? ? X.

After popping from the stack, if the closed_set is null, the procedure returns. The condition indicates that all closed patterns that start with the item i are generated. It is to be noted that, the first entry that goes to stack will have closed_set value set to null.



IV. EXPERIMENTAL RESULTS AND DISCUSSIONS  We have implemented our algorithm using C language and the code was compiled using 32-bit Microsoft Visual C++ compiler. All the experiments are conducted on Pentium 4 machine with 1 GB of main memory loaded with windows XP operating system.  The executables of MAFIA, FP-Max and Eclat were obtained from the respective authors.  The description of datasets used in our experiments are given in Table 2. Among the three datasets gazelle (also known as BMS Webview) is a real dataset, T40I10D100k dataset is a synthetic dataset generated from IBM synthetic dataset generator. The dataset generator is downloaded from illimine project website.

For TxIyDz, x indicates the average transaction length, y indicates the average pattern length and z indicates the total number of transaction instances.  The mushroom dataset is the mathematically structured dataset.  In frequent pattern and frequent closed pattern mining, the runtime will increase as the user specified support count gets decreased and vice versa. But in maximal pattern mining there is no perfect relationship between runtime and the support percentage.  The runtime will vary according to the distribution of maximal frequent pattern The graphs shown in Fig. 3 and Fig. 4 indicate the advantage of itemset ordering in terms of total number of block matching operations. The block matching operations are done for closure computation and duplication checking.  In closure computation, we compute the closure of the current closed_set i.e. we add the set of items i?post_set and i? closed_set that are supported by g(closed_set). This is done by subset checking (line no 21-25) i.e we check whether g(closed_set) is subset of g(i), where i?post_set. If g(closed_set) is found to be subset then the item i  is added to closed_set. In our implementation, both the g(closed_set) and the dataset are represented as bit vectors and we have used integers to hold the bit values. Each integer of 32 bits is referred to as a block and the subset checking is done by bitwise AND operations on blocks. The plots shown in Fig 5, Fig. 6 and Fig. 7 clearly indicate that our implementation outperforms the other algorithms in most cases.  For dense  datasets FP-max has lesser runtime and it is due to the prefix sharing concept of FP-max.

Table 2. Datasets Used   Sl.No Dataset Name Total Items  Total Transactions  1 gazelle 497 59601 2 T40I10D100K 1000 100000 3 Mushroom 42 8196      Closure Computation            0.

% 0.

%  0.

% 0.

%  0.

% 0.

%  Support (%)  To ta  l N u  m b  er o  f B lo  ck M  at ch  in g   O  p er  at io  n s  With Itemset Ordering  Without itemset Ordering    Figure 3.  Total Number of Block Matching operation Vs support percentage for closure operation for gazelle dataset.

Duplicate Checking           0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  Support (%)  T o ta  l N u m  b er  o f B  lo ck  M at  ch in  g   O p er  at io  n s  With Itemset Ordering  Without itemset Ordering   Figure 4.  Total Number of Block Matching operation Vs  support percentage for duplicate checking for gazelle dataset      GAZELLE          0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  Support (%)  R un  tim e  in S  ec on  ds  ECLAT  FPMAX  MAFIA  OP-MAX   Figure 5: Runtime Vs support percentage for gazelle dataset.

Mushroom           0.

% 0.

%  0.

% 0.

%  0.

% 0.

% 0.

% 0.

% 0.

% 0.

%  Support (%)  R un  tim e  in S  ec on  ds  MAFIA  OP-MAX  FPMAX  ECLAT   Figure 6: Runtime Vs Support Percentage for mushroom  dataset.

T40I10D100K          0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  0.

%  Support (%)  R u n ti m  e in  S ec  o n d s  MAFIA  ECLAT  FPMAX  OP-MAX   Figure 7: Runtime Vs support percentage for T40I10D100k  dataset

V. CONCLUSION  We have investigated the problem of mining maximal patterns from transactional datasets. We introduced OP-MAX algorithm, a depth-first search space exploration algorithm, which reduces the running time and it outperforms its competitors in most cases.  Currently, we are investigating the optimizations that can be done to further reduce the running time especially for biological datasets and dense datasets.

