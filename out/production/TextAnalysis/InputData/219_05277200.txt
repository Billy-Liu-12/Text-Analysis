

Abstract?In this paper, we design the compressed fuzzy FP-tree structure to mine fuzzy frequent itemsets from the transactions with quantitative values. It consists of two phases.

In the first phase, a compressed fuzzy frequent pattern tree (CFFP tree) is constructed from the given quantitative transactions. In the second phase, a fuzzy mining approach is then proposed to mine the fuzzy frequent itemsets from the CFFP tree constructed. Experiments are also made to show the performance of the proposed approach.



I. INTRODUCTION EPENDING on the classes of the knowledge derived, the mining approaches may be classified as finding  association rules, classification rules, clustering rules and sequential patterns [3], among others. Especially, finding association rules in transaction databases is most commonly seen in data mining [1][2].

In the past, many algorithms for mining association rules from transactions were proposed. Most of the approaches were based on the Apriori algorithm [1], which generated and tested candidate itemsets level by level. Han et al. thus proposed the Frequent-Pattern-tree (FP-tree) structure for efficiently mining association rules without generation of candidate itemsets [7]. A recursive mining procedure called FP-growth was executed to derive frequent patterns from the FP-tree.

Several fuzzy learning algorithms for inducing rules from given sets of data have been designed and used to good effect with specific domains. For example, Hong et al. proposed a fuzzy mining algorithm for managing quantitative data [8].

Papadimitriou et al. proposed an approach based on FP-trees to find fuzzy association rules [13]. In their approach, only the local frequent fuzzy 1-itemsets kept in each transaction were used for mining. The fuzzy regions which were close to but below the threshold would provide no contribution at all to the mining.

In this paper, we design the compressed fuzzy FP-tree structure (CFFP tree) to mine fuzzy frequent itemsets from the transactions with quantitative values. The fuzzyMiner algorithm is thus proposed to construct the compressed fuzzy   C. W. Lin is with the Department of Computer Science and Information Engineering, National Cheng Kung University, Tainan, 701, Taiwan, R.O.C.

(e-mail: p7895122@mail.ncku.edu.tw).

Tzung-Pei Hong is with the Department of Computer Science and Information Engineering, National University of Kaohsiung, Kaohsiung, 811, Taiwan. He is also with the Department of Computer Science and Engineering, National Sun Yat-sen University, Kaohsiung, 80424, Taiwan, R.O.C. (corresponding author; phone: +886+7+5919191; fax: +886+7+5919374; e-mail: tphong@nuk.edu.tw).

W. H. Lu is with the Department of Computer Science and Information Engineering, National Cheng Kung University, Tainan, 701, Taiwan, R.O.C.

(e-mail: whlu@mail.ncku.edu.tw).

frequent pattern tree and derived the fuzzy association rules.

It consists of two phases. In the first phase, a compressed fuzzy frequent pattern tree (CFFP tree) is constructed from the given quantitative transactions. In the second phase, a fuzzy mining approach is then proposed to mine the fuzzy frequent itemsets from the CFFP tree constructed.

The CFFP tree first transforms quantitative values in transactions into linguistic terms [8]. Each term uses only the linguistic term with the maximum cardinality in later processes, thus making the number of fuzzy regions processed equal to the number of the original items. The CFFP tree is sorted and constructed on the frequency of fuzzy 1-itemset, which makes the tree structure more tight and compressed. In the second part, the fuzAry-growth approach is designed to derive the fuzzy frequent itemsets from the CFFP tree.

Experimental results also show the performance of the proposed algorithm for the execution time and the number of nodes in the tree structure.



II. REVIEW OF RELATED WORKS  A. Mining Algorithms for Fuzzy Association Rules It is useful to extract knowledge via data from the real  world and to represent it in practical usage form. Linguistic representation is easily implemented by fuzzy sets, which may help draw semantic knowledge more understandable to human beings. The fuzzy set theory is concerned with quantifying and reasoning using natural language. It is very suitable to handle quantitative values by fuzzy sets.

Chan et al. proposed an F-APACS algorithm to mine fuzzy association rules [4]. Kuok et al. proposed a fuzzy mining approach to handle numerical data in databases and to derive fuzzy association rules [9]. At nearly the same time, Hong et al. proposed a fuzzy mining algorithm to mine fuzzy rules from quantitative transaction data [8]. Besides, many mining methods for finding fuzzy association rules have also been proposed [14][15], and some related researches are still in progress [5][12].

B. The FP-tree algorithm Han et al. proposed the Frequent-Pattern-tree structure  (FP-tree) for efficiently mining association rules without generation of candidate itemsets [7]. The FP-tree mining algorithm consists of two phases. The first phase focuses on constructing the FP-tree from a database, and the second phase focuses on deriving frequent patterns from the FP-tree.

The construction process is executed tuple by tuple, from the first transaction to the last one. After all transactions are  Fuzzy Data Mining Based on the Compressed Fuzzy FP-trees Chun-Wei Lin, Tzung-Pei Hong, and Wen-Hsiang Lu  D         processed, the FP tree is completely constructed.

After the FP tree is constructed from a database, a mining  procedure called FP-Growth [7] is executed to find all frequent itemsets. It is a recursive process, handling the frequent items one by one and bottom-up according to the Header_Table. Several other algorithms based on the FP-tree structure have been proposed [6][10].



III.  THE PROPOSED FUZZYMINER ALGORITHM A special notation is often used to represent fuzzy sets.

Assume that x1 to xn are the elements in fuzzy set A, and u1 to un are, respectively, their membership grades in A. A is usually represented as follows:  1 2  1 2  ... .                    (1)n n  A x x x  ?? ?= + + +   The CFFP-tree construction algorithm and the fuzAry-growth algorithm are stated below.

A. The Proposed CFFP-tree Construction Algorithm The proposed fuzzyMiner algorithm integrates the  fuzzy-set concepts and the FP-tree-like approach to find the fuzzy frequent itemsets from the quantitative transaction data.

The CFFP-tree construction algorithm is first designed to build the tree structure for fuzzy frequent 1-itemsets. Each node in the tree structure represents the fuzzy region max-Rj which consists not only its membership value of max-Rj in the transaction but also an array of minValAry, which sorted the combinations for the minimum membership values by intersection operator for the current processed fuzzy region with each of its prefix path (regions) in the transaction. The CFFP-tree construction algorithm is stated below.

The CFFP-tree construction algorithm: INPUT: A quantitative database consisting of n transactions,  a set of membership functions, and a predefined minimum support threshold s.

OUTPUT: A CFFP tree.

STEP 1: Transform the quantitative value vij of each item Ij  in the i-th transaction into a fuzzy set fij represented as (fij1/Rj1 + fij2/Rj2 + ?+ fijn/Rjh) using the given membership functions, where h is the number of fuzzy regions for Ij, Rjl is the l-th fuzzy region of Ij,  , and fijl is vij?s fuzzy membership value in region Rjl.

STEP 2: Calculate the scalar cardinality of each fuzzy region Rjl in the transaction data as:   .

?  =  = n  i ijljl fcount   (2)  STEP 3: Find max-countj = )(1 jl h l countMAX = for j = 1 to m,  where h is the number of fuzzy regions for item Ij and m is the number of items. Let max-Rj be the region with max-countj for item Ij. It will then be used to represent the fuzzy characteristic of item Ij  in later mining processes.

STEP 4: Check whether the value max-countj of a fuzzy  region max-Rj, j = 1 to m, is larger than or equal to the predefined minimum count n*s. If the count of a fuzzy region max-Rj is equal to or greater than the minimum count, put the fuzzy region in the large 1-itemsets (L1). That is:  L1 = {max-Rj | max-countj ? n*s, 1 ? j ? m}.

STEP 5: Build the Header_Table by keeping the 1-itemsets  (fuzzy regions) in L1 in the descending order of their counts.

STEP 6: Remove the fuzzy regions of the items not in L1 from the transactions of the transformed database.

STEP 7: Sort the remaining frequent fuzzy regions in each transaction according to he order of the items in the Header_Table.

STEP 8: Initially set the root node of the CFFP tree as {root}.

STEP 9: Insert the transactions in the transformed database into the CFFP tree tuple by tuple. The following two cases may exist.

Substep 9-1: If a fuzzy region max-Rj in a  transaction has been at the corresponding branch of the CFFP tree for the transaction, add the membership value of max-Rj in the transaction to the node of max-Rj in the branch. The combinations for the membership values of the current processed node max-Rj with each of its prefix path (regions) were extracted from minValAry to accumulate with the combinations for the minimum membership values by the intersection operator of the current processed node max-Rj with its prefix regions in the transaction.

Substep 9-2: Otherwise, add a node of max-Rj at the end of the corresponding branch, set the count of the node as the membership value of max-Rj, and insert a link from the node of max-Rj in the last branch to the current node.

The combinations of the membership values for the current processed node max-Rj with each of its prefix path (regions) were extracted from minValAry to accumulate with the combinations for the minimum membership values by the intersection operator of the current processed node max-Rj with its prefix regions in the transaction. If there is not such a branch with the node of max-Rj, insert a link from the entry of max-Rj in the Header-Table to the         added node.

In STEP 9, a corresponding branch is the branch generated  from a transformed transaction according to the descending order of the membership values of the fuzzy regions in it.

After STEP 9, the final CFFP tree is constructed and can be used to find the fuzzy frequent itemsets.

B. The Proposed FuzAry-Growth Approach After the CFFP tree is constructed, the desired frequent  fuzzy itemsets which are represented by linguistic terms can then be found by the proposed fuzAry-growth algorithm. The process is stated as follows.

The fuzAry-growth algorithm: INPUT: The CFFP tree with its Header_Table.

OUTPUT: The fuzzy frequent itemsets.

STEP 1: Process the fuzzy frequent regions in the  Header_Table one by one with the bottom-up process.

STEP 2: Find the corresponding nodes of the current processed fuzzy region in the CFFP tree. Each of the node max-Rj consists of the combinations for the minimum membership values by the intersection operator with each of its prefix path (regions) in an array of minValAry.

STEP 3: Generate and combine with the fuzzy itemsets from the minValAry of the current processed corresponding node max-Rj. Each column represents a combination for the minimum membership value of the current processed node max-Rj with its prefix path (regions), sequentially.

STEP 4: Repeat STEPS 1 to 3 for the other fuzzy frequent 1-itemsets in the Header_Table. After STEP 4, all the fuzzy itemsets are thus derived from the CFFP tree.

STEP 5: Determine the derived fuzzy itemsets in all transactions which are larger than or equal to the predefined minimum count n*s. The fuzzy itemset is thought of as fuzzy frequent itemset. After that, the final fuzzy frequent itemsets are thus derived from the proposed CFFP tree.



IV. AN EXAMPLE In this session, an example is given to illustrate how to  construct a CFFP tree and generate fuzzy frequent itemsets based on the tree from the quantitative transaction data.

Assume the quantitative transaction database shown in Table I is used as the example. It consists of 6 transactions and 5 items, denoted A to E. The number behind an item represents the amount of the item purchased.

TABLE I  THE QUANTITATIVE TRANSACTIONS IN THE EXAMPLE Transaction No. Items  1 (A:5) (C:10) (D:2) (E:9) 2 (A:8) (B:2) (C:3) 3 (B:3) (C:9)  4 (A:7) (C:9) (D:3) 5 (A:5) (B:2) (C:5) 6 (A:3) (C:10) (D:2) (E:2)   Assume the fuzzy membership functions are the same for  all the items and are shown in Figure I. In this example, amounts are represented by three fuzzy regions: Low, Middle and High. Thus, three fuzzy membership values are produced for each item according to the predefined membership functions. Note that the proposed approach also works when the membership functions of the items are not the same and the function numbers are arbitrarily given. The proposed approach first constructs the CFFP tree from the data as follows.

0      1   6                   11 Amount  Low Middle High  0      1   6                   11  Membership Value    Fig. I.  The membership functions used in this example.

The construction phase:  The quantitative values of the items in the transactions are represented as fuzzy sets. Take the first item in transaction 1 as an example. The amount ?5? of A is converted into the fuzzy set (0.2/A.Low + 0.8/A.Middle) using the given membership functions in Figure I. This step is repeated for the other items, and the results are shown in Table ?, where the notation item.term is called a fuzzy region.

TABLE ?  THE FUZZY SETS TRANSFORMED FROM THE DATA IN TABLE I TID Items  1 ) .

6.0 .

4.0)( .

2.0 .

8.0)( .

8.0 .

2.0)( .

8.0 .

2.0( HighEMiddleEMiddleDLowDHighCMiddleCMiddleALowA  ++++  2 ) .

4.0 .

6.0)( .

2.0 .

8.0)( .

4.0 .

6.0( MiddleCLowCMiddleBLowBHighAMiddleA  +++  3 ) .

6.0 .

4.0)( .

4.0 .

6.0( HighCMiddleCMiddleBLowB  ++  4 ) .

4.0 .

6.0)( .

6.0 .

4.0)( .

2.0 .

8.0( MiddleDLowDHighCMiddleCHighAMiddleA  +++  5 ) .

8.0 .

2.0)( .

2.0 .

8.0)( .

8.0 .

2.0( MiddleCLowCMiddleBLowBMiddleALowA  +++  6 ) .

2.0 .

8.0)( .

2.0 .

8.0)( .

8.0 .

2.0)( .

4.0 .

6.0( MiddleELowEMiddleDLowDHighCMiddleCMiddleALowA  ++++   The scalar cardinality of each fuzzy region in the  transaction is calculated as the count value. The fuzzy region with the maximum count among the three possible regions for each item is found. The four fuzzy items A.Middle, B.Low, C.High and D.Low are large are put in the set of L1, which will be used to construct the CFFP tree. The remaining fuzzy regions in each transaction are then sorted according to the order. After this step, the sorted transactions are shown in Table?.

TABLE ?  THE TRANSACTIONS WITH ONLY THE SORTED FUZZY FREQUENT REGIONS TID Items  1 ) .

8.0)( .

8.0)( .

8.0( LowDHighCMiddleA    2 ) .

8.0)( .

6.0( LowBMiddleA    3 ) .

6.0)( .

6.0( LowBHighC    4 ) .

6.0)( .

6.0)( .

8.0( LowDHighCMiddleA    5 ) .

8.0)( .

8.0( LowBMiddleA    6 ) .

8.0)( .

8.0)( .

4.0( LowDHighCMiddleA     The transactions in the transformed database are inserted  into the CFFP tree tuple by tuple. The results after the first transaction is processed are shown in Figure ?.

0.8  0.8C.High  Header_Table  Items Frequency A.Middle 3.4 C.High 2.8 B.Low 2.2 D.Low 2.2  A.Middle  D.Low  {Root}  0.8  0.8  0.8 0.80.8 Fig. ?.  The CFFP tree after the first transaction is processed.

The same process is then executed for the other  transactions. After all the six transactions are processed, the resulting Header_Table and CFFP tree are shown in Figure ?.

C.High  Header_Table  Items Frequency A.Middle 3.4 C.High 2.8 B.Low 2.2 D.Low 2.2  A.Middle  D.Low  {Root}  3.4  1.8 2.2  2.2 2.21.8  B.Low 1.4 1.6  C.Highv  B.Low  0.6  0.6 0.6  1.8 Fig. ?.  The final CFFP tree in the example.

After the CFFP tree is constructed, the fuzzy frequent  itemsets with more than one fuzzy region can then be found by using the fuzAry-growth algorithm. The fuzzy frequent 1-itemsets (fuzzy regions) in the Header_Table are then processed bottom-up and one by one. For example, in Figure ?, item (D.Low) is first processed. The corresponding node of the fuzzy frequent item (D.Low) is found with only one node in the tree. Its corresponding node and the fuzzy regions with the minimum membership value in an array of the minValAry are shown in Figure ? . The others can be similarly handled.

C.High  Header_Table  Items Frequency A.Middle 3.4 C.High 2.8 B.Low 2.2 D.Low 2.2  A.Middle  D.Low  {Root}  3.4  1.8 2.2  2.2 2.21.8 1.8 Fig. ?.  The processed node of fuzzy frequent item (D.Low).

The  minimum membership values for the combinations  are then found according to the algorithm. If the fuzzy itemsets are larger than or equal to predefined minimum count 6*30% (=1.8), they are thought as fuzzy frequent itemsets.



V. EXPERIMENTAL RESULTS The experiments were performed in Java on an AMD  Athlon PC with a 3.0G Hz processor and 1G main memory, running the Microsoft Windows XP operating system. A real dataset called FOODMART from an anonymous chain store was used in the experiments [11]. The FOODMART dataset contained quantitative transactions about the products sold in the chain store. There were 21,556 transactions with 1,600 items in the dataset.

In the experiment, each item was set at three fuzzy regions.

The minimum support threshold was set at from 0.1% to 0.2%, with increment 0.01% each time. The results are shown in Figure ?.

Fig. ?.  The relationship between the number of nodes for the fuzzy FP-tree  and CFFP-tree in 3-regions   It could be seen from Figures ? that when the minimum support threshold was set higher, the numbers of nodes decreased in three regions. That is because when the item was divided more regions, it is barely hard to find the rules when the minimum support threshold was set higher.

The execution time of constructing the CFFP-tree was executed in two different regions as well. The results are         shown in Figure ?.

Fig. ?.  The execution time of constructing the fuzzy FP-tree and the  CFFP-tree in 3-regions   It is obvious seen from Figure ? that the execution time decreased along with the increase of the minimum support values.



VI. CONCLUSIONS In this paper, we have proposed the fuzzyMiner algorithm  which consists of two phases. The compressed fuzzy frequent pattern tree (CFFP-tree) construction algorithm is first used for processing transaction data with quantitative values to build the tree structure. The fuzAry-growth is then used to efficiently and effectively derive the fuzzy frequent itemsets from the CFFP tree. Experimental results show the performance of the proposed fuzzyMiner algorithm.

In this paper, we assume the database is static. In real-world applications, data may be dynamically inserted into a database. In the future, we will attempt to handle the maintenance problem of fuzzy data mining. How to further improve the fuzzyMiner algorithm is another interesting topic.

