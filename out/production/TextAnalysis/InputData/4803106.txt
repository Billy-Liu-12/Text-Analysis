Abhi Dattashanna Intennedia Softech Pvt. Ltd.

Abstract  Predicting stock market movements is always difficult.

Investors try to guess a stock's behavior, but it often back- fires. Thumb rules and intuition seems to be the major tools.

One approach suggested that instead of trying to predict one particular stock's movement with respect to the whole market, it may be easier to predict a stock A's movement based on another stock B's movement, because A may get affected by B after B's movement. This may provide the investor invaluable time advantage. It would be very use- ful ifa general framework can be introduced that can pre- dict such dependence between stocks based on any user de- fined criterion. This article attempts to lay down one such framework, where the stock time series is encoded as a binary string. This binary representation depends on the user defined criterion. The string distances between two such encoded time series has been used as a measure of dependence. Further, this technique has been used in the 'Pairs Trading strategy'; in fact, it is more powerful as varied user defined criterion can be handled while detecting similarity. The presented technique has been demonstrated with one typical user defined criterion.

1. Introduction  Algorithmic trading [1] tries to identify possible "win- dows ofopportunities" automatically, using algorithms, for performing stock trading, from the historical data. Stock data is a time series data [7], describes how the stock values behave over time. The most frequently used values for visu-   alizing and predicting stock movement over a time window (Week/Day/Time) are, price at trading opening time, max- imum value on that window, lowest value on that window, price at closing time and total volume of transaction within that window.

One interesting related problem is to find out how one stock affects another. It is quite important from the view- point of investors; as it gives the investor an idea about how the markets are moving and also provides some unforeseen insights. As a simple example, if stock B has been found to closely follow stock A within three days period, steady in- crease in A, may provide the investor some idea about B's growth. This A - B relation might provide some useful information along with B's individual pattern.

In the well known Pairs Trading strategy [4], [21], two similar stocks are chosen so that, if the behavior of one stock outperforms the average performance it is sold short,where as, if the behavior of one stock falls below av- erage, it is bought in the hope that it will reach average behavior sometime. The key concept behind pairs trad- ing strategy is that a well chosen pair tend to cancel each other's deviations and thus, a loss in one will be gained in the other. Evidently, it would be very useful if a general framework can be introduced that can predict such depen- dence between stocks, that could be used for pairs trading strategy. For pairs trading, the most commonly used in- dex is a correlation coefficient [19], and investors often also check other metrics like relative strength index [22, 3] and Bollinger band [5, 3].

There have been some attempts to evaluate the stocks' similarity e.g., indicators, price ratio and price compari- son [3]. However, these have been largely for the purpose of finding strong stocks rather than dependences between     them. Researchers have used clustering techniques [12], as- sociation rule mining [20, 18, 16], and geometric proper- ties [9, 6] to find stock similarity. The metric distances and methods based on topological properties and random matrix theory [8, 13] have also been used for the purpose. How- ever, these methods are complicated and could not provide simple yet practical indicators useful for investors which are applicable both for short term and long term dependen- cies. Also, all these metrics invariably try to find similar- ity between stocks in terms on one fixed distance measure.

In [10], this problem has been addressed and three sim- ple metrics are introduced which effectively predicts two stocks' dependence on each other. However, those metrics were applicable only for a certain class of dependence (for example, if the opening price pattern of one stock follows the opening price pattern of another). In practice, an in- vestor may need completely different criteria for measur- ing distances between two stocks depending on the require- ment, time and market conditions. Naturally, it would be more useful if some generic framework could be devised that would enable an investor check for dependence be- tween stocks with respect to a criterion defined by the in- vestor.

In this article, a simple framework based on the concepts ofevents and episodes, first introduced in [1 7] is developed.

It is shown that, given a user defined criterion, it is possible to encode any stock's time series data using a finite alpha- bet, and then the distance between these two encoded series efficiently measures dependence. Some practical results for one particular user defined criterion is also provided. It has been shown that the proposed technique can be used effec- tively for pairs trading; in fact, this technique is more pow- erful as it can model different user requirements while find- ing similarity. The data set has been taken from Standard and Poor 500 [2]. This data shows daily price and volume fluctuations (opening price, closing price, maximum price, minimum price and volume) over an year for some well- known stocks. Most of the stocks have a series of252 num- bers; thus we have a time series of length 252. This paper is organized as follows. In Section 2, we define events and episodes. Section 3 describes the framework. Section 4 gives results, and Section 5 concludes the paper.

2 Events and Episodes  As defined in [17], an event is an occurrence ofa particu- lar type which has a time stamp attached to it. Given a set E ofevent types, an event 0' is a pair (A, t) E E x N, N set of natural numbers, where A E E is an event type and t is an integer, the occurrence time of the event. Mathematically, a time series can be seen as an ordered sequence of events {ai} = {(e'i, ti)} where ei is an occurrence of a particular type and t i is the time stamp. For example, for a stock time  series, the set of event types can be (daily opening price, daily closing price, daily trading volume, daily maximum price and daily minimum price) and the time series can be described by any of these four event types by giving the value associated with the day. An episode is a sequence of events. An episode is a triple (V,<,g) where V is a set of nodes, < is a partial order on V, and 9 : V ---+ E is a map- ping associating each node with an event type. In the above article, authors gave algorithms for identifying frequently occurring episodes in a sequence of events.

Therefore, each stock data time series can be viewed as a series of events, where each event is a value (the opening price, or closing price, or volume traded and so on) asso- ciated with a time. Now, a user can define an episode as a predefined sequence of events. For example, the user can define "three successive days of trading volume increase" as an episode (Ti < Ti +1 < Ti +2 , Ti = Trading Volume value on i th day).

Note that the definition implicitly assumes that an episode is defined completely only by the event type and their partial ordering. However, it may not be enough for defining somewhat complicated episodes where condition- als or temporal behavior comes into play, e.g., the episode "closing price lower than opening price, occurring at least twice a week". The problem here lies in the fact that the episode does not only need a sequence of events, but also a quantifier on the time.

To evaluate the similarities between stock prices based on their time series data, the episodes in that data should be found in a time sequential order. In this article an episode is defined as a sequence of events together with a restriction on the values as well as the time stamps of the events.

Thus, an episode is  where !(ei) and g(ti) are functions of ei and ti re- spectively, and events are always found from left to right. Suppose Oi is the opening price on ith day for the stock data. An example of ! and 9 can be seen from the episode "Opening price of stock is more than 10 USD for two days in succession", which is equivalent to Oi > 10, OJ > 10, j = i + 1. Here the event type is opening price, ! defines the relationship between opening price and the value 10, and 9 defines the relationship between i and j. Note that, as we are defining an episode in terms of a set of events detected from left to right, each event's position in time gets fixed and the ordering is automatic. We will call a sequence of events which satisfy the complementary conditions as a complementary episode.

It is possible that a wrong choice of ! () and g() may generate very poor results. However, as we are relying on     (3)  '1 '  string. Suppose the user defined episode is E, viz., the set of events and their time stamps, subject to f(.) and g(.) as defined by the user. Now, consider every episode E present in the time series, which is a set {(ei, ti) }. To encode the stock time series in binary, for every event member of an episode, the corresponding value of the time series gets en- coded to '1', where as complementary event member gets '0'. Mathematically, suppose S(t), t = 1, ... ,N is the stock time series, and E' is the set of all episodes in S(t), each episode E defined as {(ei,ti) : !(ei),g(ti)} found from S(t).

Define h : {I, ... ,N} ~ {O, I} such that, V event e = (ei' ti ) E E, VE E E' h(ti) = 1, h(t) = 0 otherwise.

Note that this encoding removes all dependence on ampli- tude and therefore, no normalization is needed.

Further after binary encoding, string size is shortened by replacing any contiguous block of Is in a single episode with a single 1, and any contiguous block of 0 in a single complementary episode with a single o. This is meaningful in the following way. Consider the episode "the stock open- ing price increases by X and does not decrease by Y or more anywhere in the same period". Thus, intuitively, the entire period of movement over which the price increased is one single episode instance, and the whole set should be seen as '1 '. The function h as defined above replaces each time stamp of that period by aI, and so replacing the entire block by a single 1 gives us the intuitive picture. Also note that, in case of two successive instances of episodes, we get two successive 1s.

ALGORITHM FIND_ENCODING_OF _STOCK_TIME_SERIES  Read episode description E == {(ei' ti) : !(ei), g(td}, B == ? for each i == 1, ... , N, (N=length of time series) do if ti belongs to a member of episode  description B = B. '1'  else B = B. '0' enddo  (2) for each episode do replace contiguous block of '1' by a single  (1) {(Ci, ti), (Oi, ti), (Cj , tj), (OJ, tj) such that, Ci < Oi,Cj < OJ, Ii - jl :::; 7, i,j not part ofa member already}.

{(Ok, tk), k = i, i + 1, ... ,j such that, OJ - Oi 2:: X, Om - Ol < X,Vm =1= j,Vl =1= i,m > 1 Om - Ol < Y, Vim, l} E (i, i + 1, ... ,j), m < l, no k E {i, i + 1, ... ,j - I} a part of a member already} .

With this definition, the episode "closing price is lower than opening price, occurring at least twice in the same week" will be:  Where Ci and Oi are the closing and opening prices, respec- tively on i th day. Similarly, an episode "the stock opening price increases by X and does not decrease by Y or more anywhere in the same period" will be described as  experienced investor inputs, we expect f() and g() to be good. In fact, generating well behaved f() and g() may be a good future research direction.

Given a definition of an episode, we can find all occur- rences of the episode from a time series. Below, we give an outline of the algorithm that finds all episodes, and its complements from a time series.

ALGORITHM FIND_EpISODES_FROM_STOCK_TIME_SERIES  Read time series S(t), t == 1, ... , N Read episode def. E=={(ei,ti):!(ei),g(ti)} episode_index = 1 complementary_episode_index = 1 for i == 1, ... ,N do Check if (S(ti),ti) satisfies the conditions  or complementary conditions If neither, push (S(ti), ti) to candidate_list If satisfies conditions push candidate_list and (S(td, ti) to episode [episode_index] set episode_index += 1  endif If satisfies complementary conditions push candidate_list and (S(td, ti) to  complementary_episode [episode_index] set complementary_episode_index += 1  endif enddo  Note the definition ofk; j can be a part of two members and exactly two members which share the boundary.

3 Framework  enddo for each complementary episode do replace contiguous block of '0' by a single '0 '  enddo  Given such an episode definition E, it is possible to en- code a stock time series S(t), t = 1, ... , N as a binary  Figure 1 shows a snapshot of Apple's stock opening value data over 16 days. Let us try to encode this with re-     eo  eo !IO      r " I ~ I I I I , , i 'I ,  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  Figure 1. Stock time series snapshot for Ap- ple  spect to the episode "the stock opening price increases by 1 USD and does not decrease by 1 USD or more anywhere in the same period". Note that the first two points show a significant rise, so h will return 11. Then, points 2 and 3 show a marked decrease, so it will return 00. Points 3 to 7 show another marked dip, returning 00000. Points 7 to 11 shows yet another large dip, giving 00000. Points 11 to 14 show a rise, giving 1111. Points 14 to 16 show a large rise, giving 111. Overall, h returns the following bi- nary string: 110000000000001111111. Finally, we collapse each member, which gives 100011. Intuitively, this means that Apple's stock opening value showed a marked rise, fol- lowed by three successive significant drops, followed by two marked rises.

Now, after binary encoding of the stock time series, the similarity between two stocks 81 and 82 with respect to the episode definition can simply be seen as d(81, 82), where d(.,.) is a string distance measure, like Hamming distance. We use Levenshtein distance [15] and Jaro string distance [14] metric for measuring the distance between two strings.

4 Results  Quite clearly, the results are the most important part for evaluating a framework like the one defined above. We try to do that in this section. We have computed results for all pairs of companies across Standard and Poor 500 data set using the full range of 252 days' data. However, lack of space prohibits a complete discussion across all pairs, so we give a few typical examples.

We define an episode similar to that used for the above example. We look at the opening prices of each stock, and define an episode as "the stock opening price increases by at least 1 USD and does not decrease by 1 USD or more any- where in the same period". This is a typical investor cue: is the stock price increasing, and is it increasing sufficiently?

If it is, then it may be a good idea to follow it up and invest.

The process of finding the results is as follows. We took  -Agilent  -Alcoa  Apple  - ArnerisourceBergen  -Applera Corp  -Ambac Financials  1 26 51 76 101 126 151 176201 226251  Figure 2. Stock time series for 6 stocks  Standard and Poor 500 data set and selected all the compa- nies which had 252 data points. Then we run our algorithm for every pair of companies with the given episode. The data spans over one year. As not all companies in the orig- inal data set had full 252 days' data, the effective number of companies used in the test is 420. Also, observe that the same technique can be successfully used for finding simi- larities for a group of companies instead ofjust a pair.

On the basis of the above episode the stock series are first encoded in binary. The similarity between these en- coded series is then estimated using Levenshtein and Jaro distances. In this article the threshold for similarity has been taken as 20 and 0.20 for Levenshtein and Jaro distances, re- spectively. Since the time series that has been used has 252 values for each stock data, when encoded, a binary string of the length of the same order is expected. Therefore, a distance of 20 or less will imply that the two strings are less than 10% different. Jaro metric is somewhat stronger as it considers transpositions, so the condition has been relaxed and a threshold of 0.2 is taken.

All the experiments have been conducted on Standard and Poor 500 data set. However, because of lack of space, we give only a selected set of results here. First, we take six companies which have the first six ticker symbols in S&P 500 data. Second, we take Starbucks, and show the results for some companies whose stock time series follow Starbucks closely. Third, we take Microsoft, and show the results for a set of companies whose stock time series fol- low Microsoft closely. The aim in this article is to show that hidden similarities often exist in completely unrelated areas, which an investor may not be aware about. In order to highlight the significance of the concept formulated in this article, the results of the proposed approach together with the correlation coefficients are provided.

Figure 2 shows the stock time series for 6 companies viz., Series I: Agilent Technologies (IT), Series 2: Al- coa Inc. (Materials), Series 3: Apple (IT), Series 4: AmerisourceBergen Corp (Healthcare), Series 5: Applera Corp-Applied Biosystems Group (Healthcare), and Series 6: Ambac Financial Group (Financial).

Table 1. Values of Levenshtein, Jaro distance and correlation coefficient in an XjYjZ form Agilent Alcoa Apple Amerisource Applera Ambac  Agilent 0/0/1 12/0.10/0.67 81/0.28/0.86 18/0.14/0.46 13/0.16/ - 0.15 33/0.25/0.59 Alcoa 0/0/1 78/0.30/0.79 14/0.11/0.63 17/0.18/ - 0.60 32/0.22/0.62 Apple 0/0/1 72/0.27/0.65 90/0.36/ - 0.29 51/0.22/0.65  Amerisource 0/0/1 20/0.22/ - 0.41 26/0.18/0.65 Applera 0/0/1 42/0.29/ - 0.24 Ambac 0/0/1         --:-- .1 Ag;-I .,.- -Apple--..-  1 20 39 58 77 98 115 134 153 172 191 210 229 248  .....

10-.. -==~ .'"  1 24 47 70 93 116139 182 185 208231  Figure 3. Stock time series for Agilent and Apple stocks  From Figure 2, we see that series 1, 2 and 5 are very close, series 4 is slightly off, and series 3 and 6 are quite far away. Interestingly, Agilent Technologies closely follows Alcoa, which are in completely different areas and there- fore an investor might not have any cue of this fact unless specifically pointed out. Similarly, Apple seem to be very far from Agilent even though both are in IT sector. The string distances for these set of series are given in Table 1.

As we can see, the pairs (1,2), (1,5), (1,4), (2,4), (2,5) are close. (4, 5) is just slightly off (expected, given that 4 is deviating from 5. This is an exact match with the graph- ically observed result. Note that there are some significant differences if we consider the correlation coefficient, e.g., according to the proposed method, investor should not look at Agilent-Apple pair, while the correlation coefficient sug- gests that they are close. From Figure 3 it is evident that Agilent is more or less stable in its movement, i.e., it moves up and down without too much fluctuations, as compared to Apple. Recall that the episode definition says that the stocks should increase by 1 USD without any substantialfall in the same period. Thus, the investor is looking for only stable, not fluctuating stocks that rise or fall steadily. In that re- spect, even though Apple and Agilent tends to show a high degree of correlation, they are not good candidates for a pair trading, and that is exactly what is reflected in the mea- sure proposed. Thus, the string metric helped a cautious in-  Figure 4. Stock time series for Starbucks stock vs few others  vestor to detect candidates for a pairs trading with respected to the investor's requirement and not necessarily by a stan- dard, fixed criterion. The other differences are explained similarly.

Figure 4 shows the time series for Starbucks and some similar companies. As is evident, AMD, Circuit City Group, Washington Mutual and Starbucks are very alike in graphs and so are their values in Table 2. However, the cor- relation coefficients show some disagreement. Consider the plots of AMD and Starbucks as in Figure 5. Recall that the investor is looking for stable movements without too much fluctuations. Note that in the initial period, the two stocks follow each other closely, and around 80th time step, AMD falls but Starbucks gains, making these a perfect pairs trad- ing candidate. Later, the stocks move steadily without much fluctuations and they follow each other closely. Thus, the investor's criterion is well captured even though the corre- lation metric is ambivalent.

Figure 6 depicts the closeness of Bank of NY to Cen- tury Telephones, and that ofMicrosoft, Symantec and Time Warner to each other. The computed values also reflect these similarities faithfully in Table 3. Note that Time Warner and Microsoft work in different areas, and thus such a strong similarity, though exists and can be very helpful, is not easy to find for an investor. Interestingly, in this case also, the correlation coefficients differ from the string dis- tance measure at times. Consider Figure 7. Here, for both     Table 2. Values of Levenshtein, Jaro distance and correlation coefficient in an X / y / Z form for Figure 4  AMD Circuit City Group Starbucks Washington Mutual AMD 0/0/1 12/0.098/0.82 10/0.12/0.50 11/0.14/0.31  Circuit City Group 0/0/1 12/0.085/0.59 10/0.11/0.29 Starbucks 0/0/1 14/0.135/0.29  Washington Mutual 0/0/1  Table 3. Values of Levenshtein, Jaro distance and correlation coefficient in an X/Y/Z form, for Figure 6  Bank of NY Mellon Century Telephone Microsoft Symantec Time Warner Bank of NY Mellon 0/0/1 08/0.16/0.89 07/0.16/0.76 06/0.12/0.04 10/0.21/0.84 Century Telephone 0/0/1 11/0.20/0.79 09/0.20/0.16 14/0.27/0.79  Microsoft 0/0/1 03/0.08/0.51 04/0.12/0.92 Symantec 0/0/1 06/0.15/0.33  10 .. ., 8)  i !l  ~ 4)  ~]) ==-SladluckS 1)  1)  o .. . _. _._.'. .."_ _ _ _"_"_"" .__ _ 1 15 ~ .g 57 71 85 m 11311114115515918319121122):m~  50- ~?  4l  35- 3)-  25'-  20-  15 -   5 - 0-   ......:..~  ; I-sank of Ny Menon'l -Symantec  _ Awrage  24 47 70 93 116 139 162 185200 231 254  Figure 5. Stock time series for AMD and Star- bucks stocks  Figure 7. Stock time series for Bank of NY and Symantec   0-  1 23 45 67 89 111 133 1551n 199 221 243  .................~-  Ii  -----------       ...

~ - Bank of NV MtIon  - QtnkJry Telephone  Mcrosoft  - Syrrantec  -TimeWamer  35~        o 1 25 49 73 97 121 145 169 193 217241  I -Mcr06oft I -linWarner  Figure 6.. Stock time series for Microsoft stock vs few other stocks   Figure 8. Stock time series for Microsoft and Time Warner stocks, Distance/Correlation Computed 4/0.12/0.93    - Dominion Resources  - Ford Motors     40 2   "..

.., .....--------.1......

IJ am, ..---4 ?.._--~  1 28 55 82 109 136 163 190 217244  :1..,1,,1:1::.?????1  :1>_:" I-Ncahc. I 3) - - fbBcIe V\tst <4DI ~"  10-.... _", O~  1 26 51 78 101 126151 178 201 226 251  Figure 11. Stock time series for Dominion Resources and Ford Motors stocks, Dis- tance/Correlation Computed 54/0.38/0.18  the stocks the steady fluctuations parts match; and when they diverge they do so by about the same amount from the average, making them an ideal pair for a pairs trade, which is exactly what the string metric suggested, while the correlation coefficient stayed conservative. For a better vi- sualization, two one-one relationships plots are provided.

Microsoft vs Time Warner group's similarity is shown in Figure 8, where as that of Nicor Inc. vs Pinnacle West's stocks in Figure 9. Microsoft vs Time Warner, seems to follow each other's pattern quite faithfully, and with a high correlation coefficient of0.93 they are strong contenders for a pairs trading unit. Nicor vs Pinnacle West has a correla- tion coefficient of0.729, and is therefore a sufficiently good pair for pairs trading. Observe the movement of Nicor and Pinnacle West; as Nicor falls Pinnacle grows and they tend to balance each other, making a pairs trading justified from an investor's perspective. In both these cases the similar- ities are pronounced even though the companies are from different areas.

To illustrate that the algorithm identifies difference be- tween stocks too, the graphs in Figure 10 and 11 show two pairs of very different time series, namely, for Microsoft vs Starbucks, and Dominion Resources vs Ford Motors, respectively. The calculations also show a large separa- tion. Microsoft vs Starbucks show a negative (though close to zero) correlation coefficient, while Dominion and Ford shows a low correlation, making them unsatisfactory pair for a pairs trading.

Finally, we take one example from an expert opinion [11]. The stocks under consideration are Wells Fargo bank and Washington Mutual. In [11], it was shown that these two were good candidates for a pairs trading though it may not be obvious. Our method gave the distance between these two as 16/0.28, whereas the correlation coefficient is 0.47. Thus, the correlation coefficient is not very pos- itive, whereas in our case the indication given by Leven- shtein measure is strong, helping the investor to get a better idea about the possible pair.

.... .....----~I : I-Microsoft I : - Starbucks..

"...

~ .....__:i   10 -  o ,IlL.

1 26 51 76 101 126 151 176201 228 251  50 .....', ..?,  40 -  30 -  70_  60 - .

Figure 10. Stock time series for Microsoft and Starbucks stocks, Distance/Correlation Com- puted 26/0.30/ - 0.075  Figure 9. Stock time series for Nicor Inc.

and Pinnacle West Capital stocks, Dis- tance/Correlation Computed 12/0.11/0.729     5 Conclusions  The similarity computation between the stocks could be very useful as the dependence between two stocks can re- veal some unforeseen insights. This may be more useful if such similarities are computed on the basis of some user defined criterion. It has been shown in this article that such criterion may be defined mathematically. On the basis of such a definition the stock time series is encoded into bi- nary followed by the binary distance computation between them. This computation gives the measure of similarity be- tween the stocks. One such criterion has been used in this article for the illustration using the Standard and Poor 500 data. The results have been found quite significant. This strategy has been explored for the pair trading with some very significant results. Here, it is to be noted that we find the relationship between two stocks without determining if there is a cause and effect relationship. We plan to look at that in future. It is possible to include some other events not dependent on stock time series explicitly, but have sig- nificant impact on its growth, e.g., company policy. Such a case is under consideration.

6 Acknowledgments  The authors wish to thank anonymous reviewers for their useful comments.

