Online Web Mining Transactions Association Rules using Frame  Metadata Model?

Abstract In this paper, we introduce a frame metadata model to facilitate the continuous association rules of web transactions. A new set of association rules can be derived with the update of the web log f i le by the web transactions in the frame metadata model. The frame metadata model consists of two types of classes: static classes and active classes. The static classes describe the web transactions of the association rule table. The active classes are event driven, obtaining web transactions when invoked by a certain event. Whenever an update occurs in the existing web transactions in the web log file, a corresponding update will be invoked by an event attribute in the method class which will compute the association rules continuously. The result is an active web mining capable of deriving association rules of a web transactions continuously or incrementally using frame metadata model.

1 Introduction  The process of keeping the support and confidence up- to-date in response to the changes in the web transaction data is to generate new set of association rules on-line[ 13.

Deriving association rules can be achieved by full re- computation of the support and confidence level of association rule continuously or incrementally by computing new record counts in the source database  created since last computing date. In web mining, we analyze users? activities on a website using web log file.

To  extract transaction activities for association rules, we can combine Web Server Log File with Record from  users? use of Cookies, and map all the information into a main table for further processing of web transactions extraction. The main table can be stored in common commercial database. We then select interested records into transaction table, such as transactions made by users.

We have a range of URL addresses related to transactions as shown in Figure 1.

The frame metadata model consists of four classes: the header class identifies each fact table, the attribute class defines its attributes? properties, the method class stores its data operations and condition, and the constraint class describes each event occurrence. They can be used to implement an event driven active web mining. When an event occurs, it triggers a process in the constraint class, which calls for the operations in the method class for action. Web transactions can be actively updated to generate the association rules for decision support systems. The result is an active web mining. For example, an association rule below indicates that the transactions of A I ,  A2, ... An will most likely associate with the web transactions of B.

A l ,  A2, ...... An => B The Support and Confidence level of this association  is:  -* 100% Record -Count(Al n A 2 n  ... n An n B ) Re cord - Count of source data  Support =  * 100% Record -Count(Al n A 2 n  ... n An n B ) Record - C o u n t ( A l n A 2 n . . . n A n )  Confidence =  This paper is funded by Strategic Research Grant 7000895 of City University of Hong Kong  0-7695-0577-5/00 $10.00 0 2000 IEEE  mailto:ulst.ac.uk   1 User Request Form A 2 User send back finished Form A 3 Send page B confirming successful  >initial load data R  incremental data dR  Web Transaction  Sewer  Object ssociation rule ssociation rules Frame  Agent Association  L rules report Model )RDBMS ---  Each record is composed of  Time Method Http URL Status Bytes protocol code transferred -  Server Log  Cookie  Figure 1 Web log file processing The approach is to compute Support and Confidence frame metadata model for checking the occurrence of  level of web transactions by the method class of the the event as shown in Figure 2.

frame metadam model, and by the constraint class of the     Object Frame model Agent is an executor which invokes the constraint class and the method class in the frame metadata model to generate the required SQL transactions for computing association rules statistical figures Support and Confidence level.

2 Related work  In [lo], the authors have proposed a spectrum of architectural alternative for coupling mining with database system. The work presented in [ 111 discusses data mining based on association rules for two numeric attributes and one Boolean attribute. The algorithms presented in [12] provide an efficient and scalable parallel computation for mining association rules. The problem of lack of complete and stepwise case study on the KDD process using the suggested stages by [ 131 is addressed. [I71 discussed the process of mapping web log file into multi-dimensional cube for data mining, [I81 discussed web log file format and related processing techniques. In [2,3,4], the authors presented structures of web mining process, from preparing web log data to the implementation of traditional data mining algorithms on them. The approaches adopted by data miners on web mining include association rules, sequential patterns, clustering, classification etc. Besides association rules, in [5], the authors discussed discovery of users? navigation patterns from web log file using sequence. Web mining relied mainly on log file information to develop an association[6]. [7] presented a Association Rule Hypergraph Partitioning and Principal Component Partitioning to automatically discover document associations.

3 Frame metadata model  A frame metadata model [ 161 consists of header, attributes, methods,  and constraints as follows: Header Class (  Class-name Parents // a list of superclass names Operation // program call for operations  // an unique name in all system  Class-type // active or static class]  Attributes-name // an attribute in this class Class-name // reference to header class Method-name // a method in this class Attributes-type // attribute data type Association attribute // pointer to another class Default-value // predefined value Cardinality // single or multi-valued Description // description of the attributes]  Method-name //a method component in this class Class-name // reference to header class Parameters // Number of arguments for the method Method-type // return type of method Condition // the rule conditions Action // the rule actions)  Attribute Class (  Method Class {  Constraint Class { Constraint-name //a constraint component of this class Class-name // reference the header class Method-name // constrict method name Parameters //Number of argument for the method Ownership // the class name of method owner Event // triggered event: create update or delete Sequence // method action time: before or after  Timing// the method action timer}  4 Continuous Web mining association rules  In web mining, users activities on website are recorded into log file online. We  can identify each user identity through cookies, name of the directory set up dynamically for this user?s transaction record, IP address, or credit card number etc. The Web Transaction Table is continuously updated even though a set of association rules have been derived from the Web Transaction Table before. In order to maintain the current status of the association rules, we need to update the statistical analysis of association rules continuously whenever the Web Transaction Table being updated.

This can be accomplished in Figure 3.

Figure 3 Data flow of frame object agent model API In 0, Web Server Log File has many kinds of formats according to different web server or settings of taking records. The items in one record are divided with specific separator. In 0, merge record of using cookies into Main Table. Cookie ID will differentiate each user from others. The disadvantage is that some user will disable cookie. In 0, consult with web site designer about generic form of transaction being done in this web site. How many steps will consist each transaction. How to assign Transaction ID, according to directory name set up when transactions were instantiated or other unified number space agreed by web site designers, Then we use this metadata for select out those records related to transactions into Transaction Table. In @, after confirming the occurrence of each transaction (not an invalid one), we further divide the URL into details of the transaction, such as type of goods, quantities, brands etc. We also divide big transactions with many items into smaller ones to fit into the table for data mining stage.

In 0, change the concise transaction table according  ...

Algorithm for discovering association rules continuously Begin  Open Web log file; Extract web log record into a main table according to  Extract web transaction table according to each URL; Extract concise web transaction table according to  Select target attributes for statistical analysis; Select associated parameter attributes for statistical  Input minimum confidence and support level for  While a new web transaction occurs do begin  users identification in Cookie;  each transaction;  analysis;  association rules by the users;  Compute record count of concise web transaction  For each parameter attribute do table;  Begin compute web transactions count of parameter attribute; Compute web transactions count of target attribute  Compute support = ((target and associated parameter with its associated parameter attribute;  attribute web transactions count) / (total web transactions count )) * 100%;  Compute confidence = ((target and associated parameter attribute web transactions count) / (parameter attribute web transaction count )) * 100%;  If (computed support 2 minimum requested support) and (computed confidence 2 minimum  requested confidence) Then associate rule: parameter attribute(s) => target  End attribute;  End End  W e  can implement the algorithm by frame metadata model  such that the record count  will be computed by the attribute Action in its method class. The  operation can be triggered by its constraint c lass  whenever there is an update to the source relation. For  example,  given web transaction table and its target attribute A and parameter attributes B,  C ,  D ,  E from transaction recorded in a web log file. W e  can extract transactions from web log file and record their occurrences as follows:  Source Transaction Table:  ... ... ...

Source Concise Transaction Table  ...

...

...

...

... ... ... A ... ... ... ...

... ... ... B ... ... ... ...

1.. ... ... C ... ... ... ...

... ... ... D ... ... ... ...

Source Association rule relation Rs  ~ 1  an I bn  Class AR in Frame Metadata model for association table:  cn I dn en  Header Class Operation Call Update-B&A Call Update-C&A Call Update-D&A Call Update-E&A Call Update-BC&A Call Update-BD&A Call Update-BE&A Call Update-CD&A Call Update-CE&A Call Update-DE&A Call Update-BCD&A Call Update-BCE&A Call Update-BDE&A Call Update-CDE&A Call Update-BCDE&A  Class Type Active  Attribute class     CO n s tr  ai i i  t c I ass  AR  I Update-CDE&A I AR I 6R I self I Update-BCDE&A I AR I 6 R  I self  R,, 6R, Tuple @A, @C,  Method class  AR  Method-  R,, 6R, Tuple @A, @D,  name Update-  AR  B&A  R,, 6R, Tuple @A,@E,  Update- C&A  AR  AR  AR  AR  Update- D&A  Rule R,, 6R, Tuple @ A,@B,@ E, Rule R,, 6R, Tuple @A,@C,@ D Rule R,, 6R, Tuple @A,@C,@ E Rule R,, 6R, Tuple  Update- E&A  Update- BC&A  Update- BD&A  Update- BE&A  Update- CD&A  Update- CE&A  Update-  Class- I Parameter I Method name I - type AR I R,, 6R, I Tuple  I @A, @B, I I I rule I I rule  I I rule  I I @A,@B,@  Rule R,, 6R, Tuple  I F , @ B 1 @  I  Condition  If (Select * from R, where SR.A=@A and SR.B=@B) #null  If (Select * from R, where GR.A=@A and GR.C=@C) m u l l  If (Select * from R, where GR.A=@A and GR.D=@D) #null  If (Select * from R, where GR.A=@A and SR.E=@E) #null  If (Select * from R, where GR.A=@A and GR.B=@B and GR.C=@C)#null  I f  (Select * from R, where GR.A=@A and GR.B=@B and SR.D=@D)#null  If(Selecr* from R, where GR.A=@A and GR.B=@B and GR.E=@E)#null  If (Select * from R, where SR.A=@A and GR.C=@C and 6R.D= @D)tnull  I f  (Select * from R, where GR.A=@A and SR.C=@C and GR.E=@E)+null  If (Select * from R, where  Insert I After I reDeat I  I Insert I After I reDeat I Insert I After I reoeat I Insert I After I repeat Insert I After I repeat  Action  Update AR set count(B) =count(B)+l Set count(B,A)=count(B,A)+l where rule=l Update AR set count(C) =count(C)+l Set count(C,A)=count(C,A)+l where rule=2 Update AR set count(D) =count(D)+l Set count(D,A)=count(D,A)+l where rule=3 Update AR set count(E) =count(E)+l Set count(E,A)=count(E,A)+l where rule=4 Update AR set count(B,C) =count(B,C)+l Set count(B,C,A) = count(B,C,A)+l where rule=5 Update AR set count(B,D) =count(B,D)+l Set count(B,D,A) - count(B,D,A)+l where rule=6 Update AR set count(B,E) =count(B,E)+l Set count(B,E,A) - count(B,E,A)+l where rule=7 Update AR set count(C,D) =count(C,D)+l  count(C.D.A)+l where rule=8  -  -  - Set count(C,D,A) -  Update AR set count(C,E) =count(C,E)+l  count(C,E,A)+l where rule=9 Update AR  - Set count( C,E, A) -     DE&A  Update- BCD&A  Update- BCE&A  Update- BDE&A  @A,@D,@ E:  AR  AR  AR  Update- CDE&A  Rule R,, 6R, @A, @ B, @ C,@D Rule R,, 6R, @A,@B,@ C,@E Rule R,, 6R, @A, @ B, @ D,@E Rule  @A,@C,@ AR R,, 6R.

I O  1 1     Update- BCDE& A  Support, = (Count(C,D,A)/n)* Confidence8 = (Count(C,D, A) / If Support8 > S, C,D => A 100% Count(C,D)) * 100% And Confidence, > C, Support, = (Count(C,E,A)/n)* Confidence, = (Count(C,E, A) / I f  Support, > S, C,E => A 100% Count(C,E)) * 100% And Confidence, 2 C, Support,,, = (Count(D,E,A)/n)* Confidence,,, = (Count(D,E, A) / If Support,,, t S, D,E => A 100% Count(D,E)) * 100% And Confidence,& C,, Support,, = Confidence,,= (Count(B,C,D,A) / I f  Support,,> S,, B,C,D => (Count(B,C,D,A)/n)* 100% Count(B,C,D)) * 100% And Confidence,,> C, A Support,,  = Confidencel2= (Count(B,C,E, A) / If Supportl2> S, B,C,E => (Count(B,C,E,A)/n)* 100% Count(B,C,E)) * 100% And Confidencel2> C, A Support,, = Confidence13= (Count(B,C,D, A) 1 If Support,,> S, B,D,E => (Count(B,C,D,A)/n)* 100% Count(B,C,D)) * 100% And Confidence,?> C, A Support,,, = Confidence,?= (Count(C,D,E, A) / I f  Supportl4> S, C,D,E => (Count(C,D,E,A)/n)" 100% Count(C,D,E)) * 100% And Confidencel4> C, A  @A, @ B, @ C,@D,@E  I I  Tuple  Tuple  Tuple  Tuple  Tuple  GR.A=@A and GR.D=@D and SR.E=@E)+null  If (Select * from R, where GR.A=@A and GR.B=@B and GR.C=@C and FR.D=@D)#null If (Select * from R, where GR.A=@A and GR.B=@B and SR.C=@C and GR.E=@E)+null If (Select * from R, where GR.A=@A and GR.B=@B and SR.D=@D and GR.E=@E)+null I f  (Select * from R, where GR.A=@A and GR.C=@C and GR.D=@D and GR.E=@E)+null If (Select * from R, where GR.A=@A and GR.B=@B and GR.C=@C and FR.D=@D and GR.E=@E)+null  set count(D,E) =count(D,E)+l Set count(D,E,A) - count(D,E,A)+l where rule=lO Update AR set count(B,C,D) =count(B,C,D)+l Set count(B,C,D,A)+l where rule=l 1 Update AR set count(B,C,E) =count(B,C,E)+l Set count(B,C,E,A) - count(B,C,E,A)+l where rule=l2 Update AR set count(B,D,E) =count(B,D,E)+l Set count(B,D,E,A)+l where rule=l3 Update AR set count(C,D,E) =count(C,D,E)+l Set count (C,D,E, A) count(C,D,E,A)+l where rule=14  -  count( B ,C ,D, A) - -  -  count (B ,D ,E, A) - -  - -  Update AR set count( B ,C,D ,E) =count(B,C,D,E)+l Set count(B,C,D,E,A) count(B,C,D,E,A)+l where rule=l5  - -     = Confidencel5= (Count(B,C,D,E, I f  Supportl5> S ,  B,C,D,E  - A B C a1 bl Cl  an bn cn a l ?  bl?  Cl?  ... ... ...

We can create an association rule table AR to hold its  I Parameter count  Association Rule table AR with timestamp at Date2.

transaction occurrence count as follows:  I Rulecount I Potential association rule  D E d l  el  dn en d l ?  e l ?  ... ...

W e  can use the same calculation as described in defined in Constraint class, error message will be  The situation is that an online shopping centre has a computing association rule continuously,  except returned to the user (refer to Figure 3).

the total transaction record count  of source relation  Date2  is n + m.

5 Prototype  ... ... ... ...

collection of commodities from television to fruits. In Figure 4, we process web log file into Main Table. Merge Cookie information.

Datez I bm cm I dm  A prototype has been implemented for frame object agent model, which is an Application program Interface developed to invoke the data operation in the frame model for data semantics management. The API process handles the method defined by Constraint class during data modification. The process defined and executed by RDBMS is to provide triggering event fired on the class.

When RDBMS, process is invoked, it will check from the Constraint class for any associated method. If method is defined in the Constraint class, the method definition will be queries. The process will invoke the stored procedure defined by the queried method definition. If executed result returned by stored procedure violated the rule  Figure 4: Process M In figure 5, we transform Main Table into Transaction  Table, corresponding to procedure 0 in figure 3. In figure 6, we process Transaction Table into Concise Transaction Table, corresponding to procedure @ and 0 in figure 3.

em  leb Loe File     ~~~~~~  Figure 5: Process Main Table into Transaction Table D  Figure 6 Process Transaction Table into Concise  Figure 7 I  f bl  411 significant association rules for the target attribute television (confidence=20%, support=0.2%) In Figure 7, we select television as our target and get the rules based on confidence level 20% and support 0.2%.

6 Conclusion This  paper presents a solution to  the problem by using a frame metadata model to  invoke record count  program in a metadata whenever relevant new record is created in  the target database.

As a result, web mining association rules can be accomplished online or incrementally without the need to re-compute the historical web transaction counts. The metadata thus contributes saving of computing t ime and also the automation of data mining association rules non-stop. The  future research of this paper is web mining web pages association rules via Internet.

