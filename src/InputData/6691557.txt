Efficient Gear-shifting for a Power-proportional Distributed Data-placement Method

Abstract?Energy-aware commodity-based distributed file sys- tems for efficient Big Data processing are increasingly mov- ing towards power-proportional designs. However, current data placement methods for such systems have not given careful consideration to the effect of gear-shifting during operations. If the system wants to shift to a higher gear, it must reallocate the updated datasets that were modified in a lower gear when a subset of the nodes was powered off, but without disrupting the servicing of requests from clients. Inefficient gear-shifting that requires a large amount of data reallocation greatly degrades the system performance. This paper proposes a data placement method known as Accordion, which uses data replication to arrange the data layout comprehensively and provide efficient gear- shifting. Compared with current approaches, Accordion reduces the amount of data transferred, which significantly shortens the period required to reallocate the updated data during gear- shifting. The effect of this reduction is larger with higher gears so Accordion is suitable for smooth gear-shifting in multigear systems. Moreover, the times when the active nodes serve the requests are well distributed so Accordion is capable of higher scalability than existing methods based on the I/O throughput performance. Accordion does not require any strict constraint on the number of nodes in the system therefore our proposed method is expected to work well in practical environments.

Extensive empirical experiments using actual machines with an Accordion prototype based on the Hadoop Distributed File System demonstrated that our proposed method significantly reduced the period required to transfer updated data, i.e., by 66% compared with an existing method.

Keywords?energy-aware; power-proportionality; data- placement; HDFS

I. INTRODUCTION  Energy-aware distributed file systems for efficient Big Data processing are increasingly moving towards power- proportional designs [1]. In such systems, the power propor- tionality can be achieved using data placement methods to control the total number of active nodes used to store data in the system. Based on this concept, several data placement policies have been proposed that position data on organized nodes, which aim to provide power proportionality [2]?[4].

These methods share an approach where data are replaced with replicas on organized nodes. First, the system divides all of the nodes into a set of small separated groups. These groups are then configured to operate in multiple gears where each gear contains a different number of groups. A high gear  ?Hieu Hanh LE is currently working for Hitachi Ltd.

has a large number of groups of active nodes. Thus, the system consumes more power in a high gear, although it can deliver higher performance with suitable processing. Using this mechanism, the system can manage its power consumption and performance so it can deliver power proportionality.

However, the power-proportional data placement methods used by current approaches do not consider the effects of gear- shifting on the performance of the system. Initially, the system may have to update the datasets modified in a low gear when a subset of the nodes was powered off. When the system moves to a higher gear, it needs to guarantee power proportionality to serve the requests of clients. Therefore, the system has to replicate the updated data internally on the reactivated nodes in the background to share the load equally among all of the active nodes. Inefficient gear-shifting degrades the performance of power-proportional distributed file systems greatly.

In this paper, we propose a flexible power-proportional data placement method known as Accordion, which aims to improve the efficiency of gear-shifting by reducing the amount of re-transferred data. Accordion shares the node organization of other methods because it supports a multigear operational mode where each gear is combined from different numbers of different groups of nodes. However, the locations of the primary data in the dataset are different with Accordion. At first, the primary data in the dataset are located equally among all of the nodes in the system. Next, the data are replicated so each of its replicas is located on nodes that belong to different groups. Thus, when the modified dataset is updated (or appended) in low gear, part of the primary data in the updated dataset is already stored on the active nodes so, only the remainder of the updated dataset, which can be assumed to be written to the deactivated nodes, needs to be written temporally. Therefore, only this temporal part of the updated dataset needs to be re-transferred when the system shifts to a higher gear. In other existing methods, the overall updated dataset needs to be reallocated during gear-shifting. As a result, Accordion is expected to reduce the cost of updating during gear-shifting because it reduces the period of data movement.

Moreover, the efficiency of this reduction is increased when gear-shifting is performed in a high gear. The amount of data reallocated is reduced with a lower number of deactivated nodes, which reduces the gear-shifting period further. Thus, the degradation of the system performance is prevented when Accordion-based systems shift to a higher gear. Consequently, Accordion is capable of providing smooth gear-shifting for      multigear power-proportional distributed file systems.

Furthermore, Accordion also benefits from a load balancer that aims to share the workload among all of the active nodes.

One of the main goals of the load balancer is to allow all of the active nodes to serve the same amount of data when responding to requests. However, another important factor that affects the performance of the file system greatly is the timing distribution when active nodes serve requests. It should be well balanced in order to provide a higher I/O throughput performance. For example, if two nodes serve 100MB of data, generally it would be more efficient if two nodes served 50 MB simultaneously rather than sequentially. The different locations of the primary data mean that Accordion can balance the amount of data requested and the service timing on the active nodes.

Additionally, the flexibility to determine the configuration is important in practical applications, such as the number of active nodes in each gear in power-proportional file systems.

Rabbit, the first method to achieve power proportionality in a Hadoop Distributed File System (HDFS) [5], has a strict constraint where the number of nodes in each group is defined by an exponential function, which provides ideal power pro- portionality based on an equal work policy [4]. In Accordion, this constraint is more flexible because the total number of nodes in the system should be an even number. Therefore, it is easier to apply Accordion in a practical environment.

The main contributions of this paper are as follows.

? We propose a distributed data placement method known as Accordion, which utilizes data replication to deliver efficient gear-shifting in power-proportional distributed file systems. The different approach of locating the primary data in Accordion reduces the amount of data updated during gear-shifting, hence shortens the time required to reallocate data.

? Accordion is applicable to smooth gear-shifting in multigear systems because it increases the perfor- mance efficiency when gear-shifting is performed in a higher gear.

? Accordion increases the I/O throughput performance because it improve the parallelism effectively dis- tributes both the timing of serving requests and the amount of data requested.

? Accordion is expected to work well in practical envi- ronments because it does not require a strict constraint on the number of nodes in file systems.

? We performed extensive empirical experiments using a maximum of 24 nodes with an Accordion prototype on HDFS to evaluate the efficiency of gear-shifting and the performance scalability of power proportion- ality. The empirical experimental results showed that Accordion significantly improved the performance by 66% compared with red Rabbit.

The remainder of this paper is organized as follows.

Related studies are discussed in Sect. II and the design of Accordion is described in Sect. III. Section IV presents a per- formance evaluation of our proposed method. Our conclusions and future work are discussed in Sect. V.



II. RELATED WORK  Rabbit [4] was the first method to provide power propor- tionality to an HDFS by focusing on the read performance.

Rabbit uses an equal work?data-layout policy based on data replication. The primary replicas are stored evenly among the primary nodes. The remaining replicas are stored on additional and increasingly large subsets of nodes. Each node in the subsets has a fixed order and it stores a number of blocks that is inversely related to its order, which guarantees that the system can distribute the workload equally among all of the active nodes. However, Rabbit still does not support the write workload so it cannot consider the cost of reflecting the updated data in a low gear.

Sierra [3] was designed as a power-proportional distributed storage system for general data centers where a replicated ob- ject store supports the write-and-read workloads during multi- gear operations. This method guarantees the write availability in a low gear by exploiting the concept of write off-loading [6], which was motivated originally by the aim of saving power by spinning down unnecessary disks. This method allows write requests on spun-down disks to be redirected to other active disks in the file system. Thus, this technique increases the spin- down duration, thereby providing additional power savings.

This method may be considered as a solution for multigear file systems to deal with updated data in a low gear. Sierra can deal with write requests in a low gear, but it is still not optimized to reflect the updated data efficiently when the system moves to a higher gear.

In previous studies [7], we conducted a simple evalua- tion of Rabbit and PARAID [2] to identify an appropriate data placement approach to support efficient gear-shifting in power-proportional systems. PARAID uses a skewed pattern to replicate and stripe data blocks to the disks. This facilitates adaptation to the system load by varying the number of active disks in the system. PARAID focuses only on the RAID unit and it is unreliable when adapting to a distributed environment.

We also proposed an architecture known as NDCou- plingHDFS [8] to facilitate the efficient reflection of updated data in a power-proportional HDFS. NDCouplingHDFS fo- cuses on coupled metadata management and data management on each HDFS node, which localizes the range of data main- tained by the metadata in an efficient manner. This reduces the cost of managing the metadata generated during changes in the system configuration. However, the data placement method was not considered in this study.

Other studies, rather than power-proportional designs, have aimed to reduce the total power consumption based on a trade- off with performance in general storage system [9]?[12].



III. PROPOSED METHOD  In this section, we describe the data placement method used by Accordion in detail. Next, we explain the load balancer, which aims to distribute the workload among all of the active nodes and provide power proportionality. Finally, we present the processes that reflect updated data, which are written to the system in a low gear, when the system performs gear-shifting.

Algorithm 1 Algorithm used to assign roles to nodes in the cluster.

Input: All the nodes of the system which are organized in G groups (Nodeig , g ?  [1, G], i ? [1, Ng ]) Output: Role(Nodeig) 1: for Groupg from Group1 to GroupG do 2: if Ng is even then 3: middle = Ng   4: for i from middle to 1 do 5: order = middle? i + 1 6: Role(Nodeig) = Left  order g  7: end for 8: for i from middle + 1 to NG do 9: order = i?middle 10: Role(Nodeig) = Right  order g  11: end for 12: else if Ng is odd then 13: middle = Ng  + 1  14: for i from middle to 1 do 15: order = middle? i + 1 16: Role(Nodeig) = Left  order g  17: end for 18: for i from middle to NG do 19: order = i?middle 20: Role(Nodeig) = Right  order g  21: end for 22: end if 23: end for  A. Accordion design  Accordion was designed to provide power proportionality and a high data I/O throughput in cluster file systems that use commodity computer servers such as HDFS, Google File System [13]. In Accordion, the files are divided into a large number of blocks and a number of replicas of each data block are distributed among the nodes of the cluster. The mapping of the file names to block identifiers is maintained by a separate metadata service.

Like other approaches, Accordion aims to control the power consumption of the system by dividing the nodes in a cluster into several separate groups. A system that uses the Accordion data placement layout can then operate in a multigear mode where each gear contains a different number of groups. The higher gears have more groups of nodes.

Power proportionality is achieved by Accordion?s data placement policy, which is based on skewed replication, and a careful consideration of the effects of reflecting the modified dataset when the system moves from low to high gears. The data placement policy is described in detail in the following parts and the symbols used are summarized in Tab. I.

1) Node role assignment: In a system that uses Accordion, changes in the operational modes of nodes are associated with changes in the shape of the bellows of an Accordion (musical instrument) after adjusting for effects on the transitions of a note or between multiple notes. When the system moves up to higher gears or down to lower gears, the active node ranges are expanded or reduced centrally.

In our method, the nodes are arranged geometrically in a horizontal array because the nodes that belong to lower groups are bounded by the nodes of higher groups. Groupm is higher than Groupn if m > n. For example, we assume that a system is operating in a two-gear mode with two groups of nodes, i.e., Group1 and Group2. The nodes from Group1 are activated in Gear 1 and the nodes from Group1 and Group2 are turned on  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ???? ?   ??? ?   ??? ?  ?????  ?????  ???? ?  ?  ???? ?    ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???	? ?  ?  ???	? ?  ?  ???	? ?  ?  ???	? ?  ?  ???	? ?  ?  ???	? ?  ?????  Fig. 1. Example of a two-gear system using Accordion where two groups of nodes have roles, where G = 2, N1 = 4, N2 = 8, and N = 12.

in Gear 2. In this case, Group2 is higher than Group1. Thus, the nodes of Group1 are bounded by the nodes of Group2.

To perform data replication among the nodes in the system, i.e., to identify the destination nodes for storing the backup data of a specific node, each node is assigned its corresponding role in the group. The role of each node is determined by the configuration, which is related to the number of groups and the total number of nodes in each group. The algorithm used to assign the roles to nodes is shown in Algorithm 1:  Role(Nodeig) = Part order g , (1)  where Part is either Left or Right and order ? [1, Ng +1].

Definition 1: For a GroupgA that contains an odd number of nodes (NgA is an odd number), there is a node that has two roles, i.e., Left1gA and Right  gA.

An image of a multigear system using Accordion with organized nodes and roles are shown in Fig. 1. Gear 1 requires the nodes from Group1 (a set of Left1 and Right1) to be activated while Gear 2 requires the nodes from both Group1 and Group2 to be activated.

2) Skewed data replication in Accordion: The three goals of Accordion are to provide power proportionality in the read performance, reduce the cost of reflecting updated data when the system changes gear, and guaranteeing the data reliability in all file system operating modes. Thus, we need to apply the policies shown below to satisfy these goals.

a) Location of primary data: First, we distribute the primary data in the dataset to all of the nodes in the system.

This means that each node stores the same amount of data.

b) Location of backup data: Starting with the highest GroupG, we replicate the data stored in this group to the next lower group GroupG?1. Thus, the node with the role PartorderG?1 in GroupG?1 is allocated to the backup data for the data from the nodes in GroupG, which have roles in the following range, if they exist.

[Part (middle?order)rateG+1 G , Part  (middle?order+1)rateG G ],  where Part is Left or Right, rateG = NG  NG?1 , and  middle =  { NG 2 NG is even  ?NG2 ?+ 1 NG is odd (2)  For example, in Fig. 1, the data from the range [Left32, Left42] are replicated in the node with the role Left  1. This     TABLE I. NOTATIONS  Symbol Description  N Number of nodes in the cluster G Number of groups in the cluster Groupg A group of nodes with index g (g ? [1, G]) Ng Number of nodes in group Gg Nodeig A node with index i in group Gg (i ? [1, Ng ])  Role(Nodeig) The role of a node Node i g , is Part  orderi g , where Part is Left or Right  Leftg Leftg = ?Node i g ? Groupg, Role(Node  i g) = Leftg  order  Rightg Rightg = ?Node i g ? Groupg, Role(Node  i g) = Right  order g  B Total number of blocks in a dataset V (B) Storage requirements to store a dataset with B blocks V (B)g Storage requirements to store a dataset with B blocks in Groupg  ?  ???  ???  ???  ???  ???  ???  ??  ? ? ? ???????? ???????????????    ?   ? ? ? ?  ?? ?   ?  ??  ??  ??  ??  ??   ?  ??  ??  ??  ??  ??  ????? ?  ????? ?  ????? ?  ??	? ?  ??	? ?  ??	? ?   ???? ? ? ? ? ? ?   ???? ? ? ? ? ? ?   ???? ? ? ? ? ? ?  ???????  ??????? ???????  ???????  ?????????????????  ? ? ? ? ? ? ?    ? ? ?  ?  ?  Fig. 2. An example of a three-gear system based on Accordion data placement.

means that the data in Node12 and Node 2 are replicated in  Node11.

The process is finished when the backup data for the nodes in Group2 are replicated to the nodes in Group1.

c) Chained declustering at the smallest group: To guarantee the data reliability in the lowest gear, we apply the chained declustering policy to the smallest group (Group1).

Each node replicates its data to its neighbor node, which guarantees that all of the data in the dataset are replicated in the two neighbor nodes. In Fig. 1, the data (the primary data and the backup data) in Node11 are replicated in Node  1, then  from Node21 to Node 1, and so on. In other power-proportional  approaches, the data reliability in the lowest gear is often omitted because the data are not replicated.

Figure 2 shows an example of a three-gear system based on Accordion data placement where B = 600, G = 3, and N = 60 (N1 = N2 = N3 = 20).Groupi contains the nodes of Lefti and Righti. Gear 1 contains only the nodes in Group1.

To serve a request, Gear 2 requires the nodes in Group1 and Group2 to be activated, while Gear 3 requires all of the nodes in Group1, Group2, and Group3 to be activated. The primary data in 600 blocks are stored equally among all of the nodes so each group locates 100 blocks initially. Next, the data in  Group3 are replicated in Group2 and the data in Group2 are replicated in Group1. Finally, the chained declustering method is used to replicate the data in Group1. Thus, the three groups contain 1200, 400, and 200 blocks.

3) Storage requirements: This section describes the total storage requirements for storing a dataset based on the skewed data replication policy used by Accordion. The total of blocks in a dataset is B and there are G groups, where each group contains Ng nodes. The total amount of data blocks V (B) stored is calculated as:  V (B) =  G? g=1  V (B)g, (3)  where V (B)g is the number of data blocks located on the nodes of Groupg. Initially, all of the blocks are stored equally among all of the nodes in the cluster so V (B)G = B ?  NG N  , where N =  ?G g=1 Ng is the total number of nodes in  the system. In addition to the original data, the nodes in GroupG?1 are also used to locate the replication data from the nodes in GroupG. Thus,  V (B)G?1 = B NG?1  N +B  NG  N = B(  NG?1  N +  NG  N ). (4)  The amount of data in the remaining groups from Group (G-2) to Group 1 are similarly calculated. Finally, chained declustering is applied to Group1 so the storage required by Group1 is as follows:  V (B)1 = 2 B  N (  G? g=1  Ng) = 2B. (5)  Substituting the values of V (B)g , (g ? [1, G]) into (3) yields the following:  V (B) = B(2 + NG  N + (  NG?1  N +  NG  N ) + ...+  G?i+1? i=2  Ni  N )  = B  G? g=1  (g + 1)Ng N  . (6)  4) The amount of data transferred during gear-shifting: In this section, we calculate and compare the amount of data that is transferred internally when the system changes its configuration using Accordion and other methods such as Rabbit and Sierra. In such methods, as each group contains one replica of the dataset, the entire updated dataset is transferred      0.2  0.4  0.6  0.8   1.2  1.4  Gear 1 to Gear 2 Gear 2 to Gear 3 Gear 3 to Gear 4 Gear 4 to Gear 5  N or  m al  iz ed  a m  ou nt  o f t  ra ns  fe rin  g da  ta  Rabbit or Sierra (G=5) Accordion (G=5, scale=3) Accordion (G=5, scale=2) Accordion (G=5, scale=1)  Fig. 3. The normalized amount of data transferred when gear-shifting is performed in each gear  during each gear-shifting. In Accordion, however, shifting between each gear in the system only leads to variation in the subpart of the dataset located on the nodes that are reactivated during transitions.

From the calculations in Section III-A3, the amount of data moved when the system changes from Gearg to Gearg+1 is,  Vg(D) = D  G? i=g+1  Ni  N , (7)  where G is the number of groups, Ni is the number of active nodes in Groupi, N is the total number of nodes, and D is the number of blocks updated in the dataset in Gearg . A constraint on Accordion is that the preferred number of nodes in Groupg is a multiple of the number of nodes in Groupg?1.

To evaluate this further, we consider a simple case where ?g ? [1, G],  Ng+1 Ng  = scale (scale ? 1). Substituting into (7), we obtain the following:  Vg(D) = D  ?G i=g+1 scale  i  ?G?1 i=0 scale  i . (8)  Figure 3 shows the amount of data moved, which was normalized against the amount of the dataset that was updated during each gear shift with Accordion and other methods (Rabbit and Sierra), where the systems were configured to operate using five gears. The amount moved was always smaller in Accordion than Rabbit or Sierra and it became smaller when the system performed gear-shifting in a higher gear. The degradation of the system performance was reduced so Accordion may be applicable to smooth gear-shifting in multigear power-proportional file systems where the number of gears is high.

5) Skewed dataset distribution in Accordion: The skewed data replication in Accordion leads to an imbalance in the amount of data stored on each node. Like in Rabbit and Sierra, some nodes (in the smaller groups) store considerably more data than others (in the higher groups). However, this imbalance does not lead to considerable problem to the overall  I/O performance as current hard disk drives normally make use only part of the capacity other than full of the capacity to provide the I/O requests. Given that the amount of unused storage is increasing [14] and that the energy problem is a greater focus, the provision of smooth gear-shifting is more important when delivering power-proportional systems.

6) Physical data placement on a node using Accordion: In Accordion, each node stores the primary data (the original data allocated) and the backup data (replicas of the data from other nodes) so the physical locations of these two types of data in the disks should be well designed. Normally, the data are stored physically in a number of sectors of the disks.

The complexity of writing and replicating the data means that the orderless arrival timing of writing requests on each node promotes the discreteness of the physical locations of the sectors for the primary and backup data on the disks.

However, on current disks, the seek time required to allocate the responsible sectors still degrades the I/O performance greatly, especially for discretely located sectors. Therefore, it is preferable to allocate the responsible sectors to sequential locations on the physical disks.

In this paper, we also propose an optimized version of Ac- cordion known as Accordion-with-Disk-Partition (Accordion- DP) that uses a partitioning technique on each node, which guarantees that the primary data and backup data will be located in two separate parts of the disks. Thus, the physical locations of the sectors from the primary and backup data in each part are allocated sequentially. For example, in Fig. 2, in Left1, P3, B1?B2 and B4?B6 are stored in separated partitions of the disks. Accordion-DP is expected to improve the I/O throughput performance of file systems because it reduces the seek time on the disks.

B. Load balancer  When a request for a block is received from a client, the file system has to select the node that will serve the request because the block is replicated in multiple nodes in the system.

To provide power proportionality when serving a dataset with multiple blocks, it is preferable to balance the load among all of the available nodes. The load balancing mechanism used in Accordion is basically the same as that employed by Rabbit.

If n nodes are active when serving a B-block dataset, the goal of the load balancer is to make each node serve B  n blocks.

Similar to Rabbit, we define an ideal value for each node where Nodeig equals  B n?containig  . When the dataset is being  read, the current hit of the node Nodeig is servedig  1?containig , where  containig is the number of blocks stored locally onNode i g , and  servedig is the number of blocks already served by Node i g .

From the possible nodes that may store a requested block, the load balancer greedily selects the node where the distance between the current hit and the ideal value is the largest.

Although this mechanism is similar to Rabbit, the different policy of locating the primary data makes Accordion preferable to Rabbit. In Rabbit, each of the replica set of the whole dataset is stored separately in each group?s node while in Accordion, there is always part of the dataset that is stored only in the lowest group?s nodes. Consequently, the lowest group?s nodes can serve the request from the beginning and hence it leads to     ??????? ??????  ? ?  ????  ????  ?  ????  ????  ???? ???????? ???? ?????????? ??  ????????? ?????????? ??? ???	??? ???????? ??  ?  ?  ?????????? ?????????? ???????? ??  ????	?? ??	????!?	??????????? ? ???????  ?	?? ??	??????  ???  "  #  ?  ?  ? #  " ?  ?  ? "  #  ?  ?  ? #  " ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ???? ?  ?  ??  ???  ?? ??  ??  Fig. 4. Updated data reflection using write off-loading.

less skew in distributing the load among nodes in Accordion than in Rabbit. It is explained in more detail and clearer in Sect. IV-C2 through utilizing an empirical experiment.

C. Writing data using write off-loading  When a subset of a group of nodes is deactivated in a low gear, the system can accept write requests from clients using the write off-loading technique. Next, when the system moves to a higher gear by reactivating nodes, it transfers the updated data internally in the background without stopping the processing of read serves from clients.

1) Writing new data using the write off-loading technique: When the system is in a low gear and it has to deal with requests to write new data to a previously stored dataset, the placement of data is performed according to its original policy.

Because the system operates in low gear, certain parts of the new data cannot be written to their corresponding deactivated nodes. Hence, the system selects another node randomly from the active nodes to serve this request. Information about the data, the temporary node, and the intended node are saved in a log file. An example of the write off-loading process is shown in Fig. 4. In this example, Node22 should serve the write request for data E according to the original data placement policy. However, it is powered off in a low gear so the system decides to use an alternative node, i.e., Node11 is selected in this case.

2) Reflecting updated data: When the system changes to a high gear to serve a request for high-performance processing with the newly updated dataset, it needs to perform two functions. The first function is to transfer the data written in temporary nodes to their actual intended nodes. This can be achieved by reading the information in the log files. In Fig. 4, Node11 is set to transfer data E to Node  2. The second  function is to serve a request by scanning the new dataset in the storage system. When there is no need to correct the data layout, compared with a normal service in a high gear, the cost of allowing the system to operate in multiple modes to save power will depend greatly on the quantity of data that needs to be transferred.



IV. EXPERIMENTS  We conducted an empirical experiment using actual ma- chines to verify the methods proposed in this study. We  TABLE II. SPECIFICATION OF A NODE  CPU TM8600 1.0 GHz Memory DRAM 4 GB NIC 1000 Mb/s OS Linux 3.0 64-bit Java JDK-1.7.0  TABLE III. EXPERIMENTAL ENVIRONMENT  Number of gears 3 Number of active nodes (Accordion, Accordion-DP) 2, 8, 20 Number of active nodes (Rabbit) 2, 7, 21 Number of files 420 File size 64 MB HDFS version 0.20.2 Block size 32 MB  chose Rabbit which also shares the idea of achieving power- proportionality as the comparative method. First, we compared Accordion with Rabbit with respect to power proportionality during the performance of reads. Next, we tested the effective- ness of Accordion for reducing the cost of reflecting updated data when the system shifted to a higher gear. Finally, we evaluated the power proportionality of Accordion using several configurations.

A. Implementation  In this study, we implemented a prototype of the power- proportional distributed file system Accordion based on a modified HDFS. We changed the current class used to select block locations via an interface where different data-layout policies can be performed. We also added the load balancing mechanism in to HDFS. The write off-loading policy was im- plemented in the low-power mode, which selects the temporal nodes for writing the new data for the currently turned off nodes. To guarantee the data reliability, block replicas were written to distinct nodes in all of the operation modes.

B. Framework used for the experiments  Our test-bed for the experiments comprised dozens of commodity nodes, which was based on the HDFS architecture with one NameNode, and a cluster of nodes for storing data.

We were focused on the energy-aware commodity system so we used low power consumption ASUS Eeebox EB1007 machines, the specifications for which are provided in Tab. II.

In the experiments, The power consumption of the cluster of data storage nodes was measured using an AC/DC Power HiTESTER 3334 [15]. The interconnect was a 1000 Mbps switching hub and all of the inactive nodes were hibernating.

C. Power proportionality of Accordion and Rabbit  We evaluated the effectiveness of Accordion by determin- ing the ratio of the throughput when reading a dataset and the power consumption of the cluster of data-storing nodes.

In addition to Accordion and Rabbit, we also configured Accordion-DP to test whether it improved the throughput performance.

1) Experimental environments: We compared Accordion and Accordion-DP with Rabbit in terms of their power propor- tionality when performing reads. These systems were operated using a three-gear configuration based on three groups of      0.2  0.4  0.6  0.8   1.2  1.4  Gear 1 Gear 2 Gear 3  T hr  ou gh  pu t p  er W  at t [  M B  /W ]  Power setting  Rabbit Accordion  Accordion-DP  Fig. 5. Throughput per watt using Accordion-DP, Accordion, and Rabbit with various power settings.

0  5  10  15  20  25  T hr  ou gh  pu t [  M B  /s ]  Number of active nodes  Accordion-DP Accordion  Rabbit  Fig. 6. Read performance using Accordion-DP, Accordion, and Rabbit with various power settings.

nodes. The constraint on the number of nodes in the gear configuration meant that the three gears in Rabbit contained 2, 7, and 21 nodes. To ensure a fair evaluation, the three gears in Accordion and Accordion-DP had 2, 8, and 20 nodes.

The scanning workload was distributed uniformly from all of the active nodes. The other information can be referred from Tab. III.

2) Experimental results: Figure 5 shows the throughput per watt to compare the read performance using the afore- mentioned dataset with three power-setting modes: Gear 1, Gear 2, and Gear 3. The results were the averages of five runs and the Linux buffer cache was cleared between runs.

Of the three configurations, Accordion-DP yielded the best results whereas Rabbit had the worst results in Gear 2 and Gear 3. In Gear 3, Accordion-DP delivered 20% better results than Rabbit because it gained better throughput as can be seen in Fig. 6 which shows the average throughputs for the three configurations. The reason was that the better load balancer in Accordion-based increased the throughput while consuming less power (20 nodes vs 21 nodes in Rabbit).

?  ?  ??  ??  ??  ??  ? ??? ??? ??? ??? ????  ?  ?  ??  ??  ??  ??  ? ??? ??? ??? ??? ????  ?  ?  ?    ?  ?  ?     ?  ?  ? ??? ??? ??? ??? ????  ?  ?  ?    ?  ?  ?     ?  ?  ? ??? ??? ??? ??? ????  ?????????	? ??  ?????????	? ??  ??? ??????	? ??  ??? ??????	? ??  ???????   ??????  Fig. 7. Distribution of timing on the nodes when serving the blocks in Gear 2 and Gear 3 using Rabbit and Accordion.

The load balancer was the same in all configurations so the differences may be explained by the timing distribution when each node served the requested blocks. Figure 7 shows the results for Rabbit and Accordion in Gear 2 and Gear 3. In each graph, the vertical axis is the NodeID while the horizontal axis shows the BlockID of the dataset. In Rabbit, the nodes in ranges [1, 2], [3, 7] and [8, 21] consequently belong to Group1, Group2 and Group3. In Accordion, the corresponding ranges are [1, 2], [3, 8] and [9, 20]. It is easy to recognize that the distribution of the access to blocks was far more balanced with Accordion than Rabbit. In Rabbit and Accordion, the load balancer tended to transfer the workload to the nodes in the outbound group, which could be turned off when the system operated in a lower gear. Rabbit stored the replicas of the dataset in group units, i.e., Group1 stored the primary data, Group2 stored the secondary replicas, etc., so certain groups of nodes were selected centrally by the load balancer when scanning the dataset. By contrast, the skew of the timing distribution was lower when selecting nodes to serve the requests using Accordion. This is because Accordion allocated the primary data among all of the nodes in the system initially so some data were only stored in the low group. Thus, the active nodes in these groups could be selected to serve the requested files from the start of the scanning process.

In this experiment, the benefit of the partitioning technique for separating the primary and backup data areas on nodes was confirmed as Accordion-DP gained better results than Accordion. From the latter experiments, Accordion-DP was used to evaluate the effectiveness of Accordion.

D. Effect of reflecting the updated data on the performance  This experiment evaluated the effect of reflecting the updated data when the system served read requests while performing updated data reflection in the background.

1) Experimental method: First, part of a similar dataset to that used in the above experiment was written to the system while the system operated in Gear 3. The operation mode of the system was then shifted down to Gear 2 by hibernating the nodes of Group3. Next, the remaining parts of the dataset were written to the file system using the data-layout policy           Without Updated Data  Small Medium Large  T hr  ou gh  pu t [  M B  /s ]  Configuration  Rabbit Accordion-DP  Fig. 8. Average throughput for scanning the dataset.

with the write off-loading technique. Finally, after finishing the write requests, the system moved to Gear 3 by reactivating the nodes of Group3 at the same time as it served the scanning workload, which was generated in a similar way to that used in the experiment above. The execution time for serving the read requests was measured to verify the effect of updated data reflection on the file system. Here, the total number of files used in the dataset was 420 and each file contained two blocks, which was the same as the experiment above. We also changed the sizes of the parts of the dataset written when the system operated in Gear 2 to 140, 280, and 420 files (small, medium, and large update configurations, respectively). In each case, the number of files written previously when the system operated in Gear 3 was 700, 560, and 420, respectively, so there was no need to re-transfer these files.

2) Experimental results: Figure 8 shows the experimental results as the average throughput while scanning the dataset in three cases: small, medium, and large amounts of transferred data. The results were compared with the results when the system performed the read requests in Gear 3 (without updated data), which were the same as the previous experiment. It is seen that configurations based on Accordion-DP and Rabbit were affected significantly by the updated data reflection. The throughputs were degraded significantly by more than 60% (66% and 61% for Rabbit and Accordion-DP). It became worse with higher amounts of re-transferred data. This confirmed the need to design the data placement method carefully to ensure efficient gear-shifting in power-proportional file systems.

The results also indicated that Accordion-DP improved the performance by 30% compared with Rabbit. The reason is with Accordion-DP, the amount of data re-transfer required was less than that with Rabbit. With Accordion-DP, only part of the dataset written when the system operated in Gear 2 had to be re-transferred when the system moved to Gear 3.

By contrast, the whole dataset had to be re-transferred with Rabbit as the placement policy located replicas of the dataset in each group.

Figures 9 and 10 show the amounts of re-transferred data and the execution times required to finish the re-transfer process. Figure 9 shows that with Rabbit, the amounts of data in the small, medium, and large cases were 4480 MB, 8960           Small Medium Large  D at  as iz  e [M  B ]  Configuration  Rabbit Accordion-DP  Fig. 9. The amount of data that had to be re-transferred when the system moved from Gear 2 to Gear 3.

Small Medium Large  U pd  at ed  d at  a re  fle ct  io n  tim e  [s ]  Configuration  Rabbit Accordion-DP  Fig. 10. The execution time for the data-re-transfer process when the system moved from Gear 2 to Gear 3.

MB, and 13440MB; while with Accordion-DP were 2688MB, 5376 MB, and 8064 MB, respectively. As shown in Figure 10, Accordion-DP significantly reduced the time required to finish the updated data-re-transfer process by up to 66% (Small case) compared with Rabbit.

E. Effects of different configurations of Accordion  We also performed an experiment to evaluate the effects of different configurations of Accordion on the power pro- portionality of the system. We used three configurations with different numbers of active nodes. The system was assumed to operate in a three-gear mode: Gear 1, Gear 2, and Gear 3. In the configuration Accordion-DP (x, y, z), x, y, and z indicate the number of active nodes in Gear 1, Gear 2, and Gear 3, respectively. The other environments were the same as those used in the previous experiment in Tab. IV.

Figure 11 shows the performance (throughput per watt) for the three configurations we evaluated. With a larger scale con- figuration, the power-proportional factor appeared to converge on a high result. In all configurations, the factor increased from Gear 1 to Gear 3 because the number of active nodes increased.

TABLE IV. EXPERIMENTAL ENVIRONMENT  Number of Gears 3 Number of active nodes Accordion-DP (4, 8, 12) 4, 8, 12 Number of active nodes Accordion-DP (4, 12, 20) 4, 12, 20 Number of active nodes Accordion-DP (8, 16, 24) 8, 16, 24 Number of files 420 File size 64 MB   0.2  0.4  0.6  0.8   1.2  1.4  Gear 1 Gear 2 Gear 3  T hr  ou gh  pu t p  er W  at t [  M B  /W ]  Power setting  Accordion-DP (4, 8, 12) Accordion-DP (4, 12, 20) Accordion-DP (8, 16, 24)  Fig. 11. The throughput per watt with Accordion-DP in several configura- tions.

Furthermore, from the results at three gears, Accordion-DP (4, 12, 20) experienced the worst standard deviation (0.114 compared with 0.04 and 0.08 in Accordion-DP (8, 16, 24) and Accordion-DP (4, 8, 12), it could be suggested that Accordion is more suitable with the configuration that the number of active nodes in each group is equal.

F. Discussion  The data placement strategy used by Accordion ensures high power-proportionality performance of systems, especially when systems operate in a high gear mode with a larger amount of active nodes. In Accordion, the amount of data requested and the access timing of the active nodes are well distributed among all the active nodes so the I/O throughput performance scales well with the system?s size. Furthermore, Accordion was highly effective at reducing the cost of gear-shifting because it improved the performance by 66% when transferring the updated data. The numerical analysis in Sect. III-A4 showed that the efficiency was even greater when gear-shifting was performed in a higher gear.



V. CONCLUSION AND FUTURE WORK  Recently, energy-efficient infrastructures for Big Data pro- cessing are gaining much attention from both industrial and academia. In this paper, we identified the issue of ineffective gear-shifting in power-proportional distributed file systems and we proposed the Accordion data placement method to address this problem. Furthermore, the Accordion configuration is highly flexible because the number of nodes in each group can be determined by a weak constrain. In Accordion, the data reliability in the lowest configuration which is omitted in other methods, is ensured through utilizing chained declus- tering. Extensive experiments using actual machines with the  Accordion prototype verified the effectiveness of Accordion.

Accordion reduced the execution time required for updated data movement by 66% and improved the power-proportional performance by 20% compared with Rabbit. Furthermore, the numerical analysis and the experimental results also indicated that Accordion is applicable for smooth gear-shifting in multi- gear systems.

In the future, we would like to confirm the effectiveness of Accordion in different experimental environments. Moreover, we want to integrate Accordion with architectures other than HDFS. We will also consider developing a specific algorithm to deal with system failures.

