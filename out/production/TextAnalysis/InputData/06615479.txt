Discovering Frquent Itemsets an Improved Algorithm

Abstract-Mining association rules is an essential task for  knowledge discovery. But discovering association rules based on  graph need many times to traverse graph in generating candidate  item set. This paper proposes the improved algorithm, which  constructs the directed graph and generate candidate item sets by  using the directed neighbor nodes set, the algorithm need  traverse the directed graph only once. The algorithm verifies  whether a candidate itemset is a frequent itemset by logic AND operation. Experimental result shows that the improved  algorithm has better efficiency than other algorithms based on  graph.

Keywords-data mining; frequent item sets; directed graph; directed neighbor node; logic operation

I. INTRODUCTION  The concept of association rules was proposed by Agrawal first in 1993 [1], it is an important field in data mining.

Association rules can show the relationships between data items. So it is widely used in many industries [2-3]. The most famous association rules mining algorithm is Apriori algorithm, which is an iterative searching process, and Apriori algorithm need scan database many times to mine frequent item sets. Low time efficiency is an obvious shortcoming when Apriori algorithm is applied in large scale database. So how to improve the efficiency to mine frequent itemset is search hot in data mining field. In recent years, many improved algorithms [5-7] based on Apriori algorithm have been proposed. The main limitation of these algorithms is the need to scan database many times to generate frequent item sets and to generate a huge amount of candidate item sets. Sample algorithm in [8], which reduces the scanning database times as it need only once to scan database, but it need much considerable time on candidate itemsets. Taxonomy superimposed graphs is frequent patterns in this new graph model, there may be many patterns that are implied by the specialization and generalization hierarchy of the associated node label taxonomy [9].

Any kind of information is able to be representing as graphs of graph databases, where changes in data can be possible for naturally accommodation [10, 11].

DLG algorithm [12] scans database only once, the database is mapped to a vector matrix, and then construct the    Lei Ma Department of Media  Linyi University  Linyi, Shandong Province, China  correlation graph, and discovering frequent item sets through search graph, but it need many times to traverse the graph to generate candidate itemset. And then there are a lot of improved algorithms based on graph, for example in [13].

Reference [14] presented a GBMFS (Graph Based Maximum Frequent Set) algorithm, which combines the graph and bidirectional search strategy, the algorithm dynamically select time to generate MFCS according to the number of frequent item sets and non-frequent item sets. But the limitation of the algorithm is time overhead of updating MFCS. And soon many improvements have been proposed [15-17]. Hybrid? DLG algorithm [18] is an improved algorithm based on DLG algorithm, the algorithm combines the advantages of DLG algorithm and GBMFS algorithm, but the algorithm need search graph many times.

This paper puts forward the improved algorithm to overcome the shortcomings of above algorithms, the algorithm need scan database only once. The algorithm generates binary array to find frequent I-itemset when scanning database, and then constructs the directed graph, and generate directed neighbor nodes set for each node. The algorithm need traverse the directed graph only once. The algorithm generates candidate itemsets by using the directed neighbor nodes. The improved algorithm verifies frequent item sets by logic operation. So the improved algorithm is high efficient in mining frequent itemsets.

[I. RELEVANT DEFINITIONS AND PROPERTIES  The concepts used in this paper as follows:  Definition 1 Let D be a transaction database, and D = {T], T2, ... ,Tn}, and a set of items 1= {lJ,I2, ... ,1m},which is all items of transaction database, where Ti (1::;i::;n) is a transaction which contains a set of items in I,each transaction exists a flag, denoted as TID. Let A be an itemset,if A c; Tj, then Tj contains A.

Definition 2 Let X be an item set, the support of X is the proportion of transactions in D which contain X, denoted as sup(X); if sup(X) 2':min _sup, min_sup is given by user, then X is a frequent itemset, otherwise X is not a frequent itemset.

Defmition 3 Let X be an itemset, itemset X contains k items, X is called k item set. The set of all frequent k item sets is denoted by Lk.

Definition 4 Let [i be an item set, the binary array of [i is denoted by Ai.

Definition 5 [f there exists a directed edge Vi---* Vi in directed graph, then Vj is called Vi to the directed neighbor node. Vi is not the directed neighbor node of Vi'  Defmition 6 The set which contains all the directed neighbor nodes of node i in directed graph G is called directed node extended set, denoted as DNES (I).

Defmition 7 Let l={l]'b, ... ,ld is a k itemset, then directed item extended set is the directed node extended set of the last item h, that is DNES(I)=DNES(h).

Property 1 Let [={[J,[z, ... ,[k} is a k item set, any item [5 in DNES(I), (I U Is) is a k+ 1 candidate itemset.

Property 2 The set of frequent k itemset [ and directed extension set DNES(I), that is, [U DNES (I), is the largest superset of all frequent item set led by I.

Property 3 if X is a frequent itemset, then any subset of X must be a frequent itemset; if X is not a frequent itemset, then any super set of X must be not a frequent itemset.



III. THE IMPROVED ALGORITHM  A. Algorithm Relation Knowledge  We construct binary arrays when scanning the database.

According to the definition, we generate binary array for each item in database D, for item Ii (l:Si:Sm), if T/ I:Sj:Sn) contains Ii, then Aim will be set to 1 ,otherwise Aim will be set to O. So there have m binary arrays, each array's length is the length of transaction; the improved algorithm adopts binary bit to storage 1 and 0 in order to reduce space overhead.

The structure of binary array is shown in Table 1.

T bl I B' Ar a e . mary ray Array Name Array Value  Al I or 0 arraY,the count of numbers is n A2 I or 0 array,the count of numbers is n  Am I or 0 arraY,the count of numbers is n By countmg the number of Is m array Ai (l:Sl:Sm), denoted  as counti, if counti is not less than the minimum support threshold, then item Ii is frequent 1 itemset. So we can easily generate frequent 1 item set by binary array.

Then sort all frequent 1- itemsets by support ascending order, generating candidate 2 item sets according to frequent [ itemset, then verifying whether a candidate 2 itemset is a frequent 2 itemset by logic AND operation, any candidate 2 itemset {Ii,Ij}(sup(I;):Ssup(Ij)), let B=Ai&Aj, if the number of Is in B is greater than or equal the minimum threshold, then {[i,Ij} is a frequent 2 itemset.

And then we construct the directed graph by using frequent 2 itemsets. [f {[i,Ij} is a frequent 2 item set, then draw a directed   edge Vi---* Vj in directed graph. We draw a directed edge for each frequent 2 item set.

Generating DNES (Ii) of each node Ii by traversing the directed graph, if there exists a directed edge Vi---* Vi, then Vj is a directed neighbor node of Vi. All directed neighbor nodes of Vi is called DNES (lD.

According to the directed graph and directed neighbor nodes set, we generate all candidate itemsets. [f [={I)'[z, ... ,[k}, any item Is of DNES(I), I U Is is a candidate k+ 1 itemset. We generate candidate item sets until DNES (I) is null.

B. Algorithm decription  The steps of the improved algorithm are follows: [nputtransaction database D, the minimum support  threshold min_sup; Output Frquent itemset FSD; begin  FSD = 0 ; Ilfrequent itemset for each transaction Tj in D  begin if Tj contains item Ii then  Ai[j]=1 ; else  Ai[j]=O; end  get each item's support by counting the number of 1 s in corresponding array;  generate frequent 1 itemset LJ ; sort items in LJ by support ascending order; generate frequent 2 item sets Lz; II construct the directed graph foreach(\i {[i,Ij} E Lz ,sup(lD:Ssup(lD)  { Draw the directed edge Vi---* Vj in directed graph  } Ilgenerating DNES(Ii) of each node Ii for (each node Vi in the directed graph) {  }  if there exists the directed edge Vi---* Vj then add Ij to DNES(Ii);  c= 0; Iiall candidate itemsets Ilgenerate all candidate item sets for (each itemset B in Lz)  GenerateCandidate(B); Ilgenerating frequent itemsets while (C is not null, \i X E C) {  find corresponding binary array of all items In X ={Ib ... ,1s}(sup(ID:S ... :Ssup(Is))  B=AJ& ... &As; count= counting the number of 1 s in B; if (count2':min _sup)  { FSD=FSDUX; fore each item set Y in candidate itemset C)  if (Y is a subset of X) {    }  } else  }  add Y to FSD; delete Y from C;  delete X from C;  FSD=FSD U L2;  end; Algorithm GenerateCandidate as follows: GenerateCandidate(B) {  }  If (DNES(B) is not null) {  for (each item r in DNES(B)) {  Add BUr to C; GenerateCandidate(B U r);  C. Algorithm example  For example, transaction database D is shown in Table 2,  D = {T), T2. T3, T4, Ts, T6, T7, Ts, T9, TlO} , items 1=  {I),12.13,14,ls},the minimum support is 3.

Table 2 Transaction Database D TID Itemset  T, 11,I" I.,ls T2 11,1,,1.

TJ h,I.

T. I"r"h,I.,Is Ts 11,1,,1.

T6 r" h,I.

T7 I"h,I.

Ts 1,,1,,1.

To I"r"h,I.,Is  (1) Scanning database to generate binary array for each item in database D, binary arrays are shown in Table 3.

array A,  A2 A,  A.

As  T bl 3 b' fi D a e mary arrays or value  {I, 1,0, I, 1,0, 1,0, I, I) {1,1 ,0,1,1,1,0" 1, 1, 1) {O,O,I,I,O,I,I,I,I,O} {I, 1, 1, 1, 1, 1, 1, 1, 1, 1) { 1,0,0,1,0,0,0,0,1,0)  (2)We can eas!ly get each Item's support from bmary arrays, as follows: sup({Td)=7, SUp({T2})=8, SUp({T3})=6, SUp({14})=IO, sup({ls})=3, so L)={{I)},{12},{13},{14},{ls}}, sort all items in frequent 1 itemset L1 by support ascending order, sup( {Is} ):Ssup( {13} ):Ssup( {I)} ):Ssup( {12} ):Ssup( {14} ),then get new Ll ={ {Is},{I3},{Id,{Iz},{I4}} in support ascending order.

(3)Generate frequent 2 itemset. Generate candidate 2 itemsets according to frequent 1 itemset and binary arrays, and then verifying wether a candidate itemset is a frequent itemset.

Finally,Lz={ {Is,l1}, {Is,lz}, {Is,l4}, {I3,Il}' {I3,Iz}, {I3,14}, {Il,I2}, {   Il,I4}, {I2,I4} }. Then construct the directed graph according to frequent 2 itemset. The directed graph is shown is Fig. I.

Fig.l. directed graph  By traversing the directed graph, we can get DNES(item) of each item, as shown in Table 4.

Table 4 DNES of each item Item DNES(Item)  Is { 1,,1,,1. } h { 1"1,, I. ) I, { 1" I. } I, {I4}

I. { )  (4)Then we can generate candIdate Itemsets accordmg to L2 and Table 4. For example, frequent 2 itemset {Is,l1}, DNES({ls,ld)={ 12. 14 }, item Iz of DNES({ls,ld) ,then generate candidate itemset {Is,ll,I2},add {Is,l1,1z} to c, DNES( {ls,I),12} )={14}, continue to generate candidate itemset {Is,ll,I2,I4}, and add {Is,l1,1z,l4} to C,because DNES( {ls,I),12,14}) is null, so generating candidate itemset by item Iz is end. Then generating candidate itemset by item 14 of DNES( {ls,I)}) ,first generate candidate itemset {ls,I),14} ,add {Is,ll,I4} to C, because DNES( {Is,ll,I4}) is null, so generating candidate itemset by item 14 is end. With the same operation on other frequent 2 itemsets in L2. Finally we get all candidate itemsets C= { {Is,ll ,12 }, {Is,l1 ,1Z,l4}, {ls,I 1,14}, {Is,lz,l4}, {I3,I 1 ,I2}, {I3,11 ,12,14 }, {13,1 ),14}, {13,12.14}' {I ),12,14} }.

(5)Finally generating frequent itemsets. We verify whether each candidate itemset in C is a frequent itemset. For example, candidate itemset {ls,I),12,14}, corresponding binary array AS,Al,Az and A4, B= As&A1&A2&A4={l,O,O,1,O,O,O,O,1,O}, then sup(B)=32':min_sup,then add {Is,I),12,14} to FSD, delete all subsets of {Is,l],Iz,I4} in C, so C={ {I3,1),lz},{13,1),12.14},{13,1),14},{13,12,14}}' We continually verify each remaining candidate itemset. Finally we get frequent item set FSD= { {Is,ll ,12,I4}, {Is,I ],Iz}, {Is,l1,14}, {Is,l2,14}, {I 1 ,12,I4}, {I3,I ],14 }, {13,12.14}' {ls,I)}, {ls,lz}, {ls,14}, {13,1)}, {13,lz}, {13,14}, {I ),Iz}, {I),I 4}, {I2,I4} }.



IV. PERFORMANCE ANALYSIS AND TESTING  The improved algorithm has many advantages compared to other algorithm based on graph:  (1) The improved algorithm adopts binary bit 1 and ? to storage information instead of storing TID, if TID of a transaction need k bytes, the improved algorithm only need n *m bits storage space, n is the number of transactions, m is    the number of items for database. So the improved algorithm can save more space when database scale is large.

(2) The improved algorithm construct the directed graph according to frequent 2 itemset Lz, the algorithm only need traverse the directed graph to generate the directed neighbor nodes ONES for each item, but other algorithms [12,18] need many times to traverse graph, so the improved algorithm has obvious time advantage.

(3) The improved algorithm generates candidate itemsets by the directed neighbor nodes, instead of traversing the directed graph, so it reduces time overhead.

This paper realized OLG algorithm, Hybrid-OLG algorithm and the improved algorithm in order to verify the efficiency of the improved algorithm. Experimental environment: Memory 1 G, CPU for Intel Pentium M 1.73GHZ, Windows XP operating system, using C#, and test database is mushroom database [19]. The experimental results obtained in the different support are shown in Figure 1.

u; 100  c: c 60   o  ?DLG  --e-- IIybrid-DLG  ?improved algorithm  30 25 20 15  Minimum Support(%)  Figure I Performance comparison of three algorithms in different minimum support  These three algorithms need scan database only once, but DLG algorithm need two-directional search to find candidate item sets and need more times to traverse graph, though Hybrid? DLG algorithm has improvements on DLG algorithm, but which need two-directional search and many times to traverse graph, the improved algorithm need traverse the directed graph only once in order to generate the directed neighbor nodes for each item, and generate candidate itemsets by using DNES.

From the above experimental results, the improved algorithm has more advantages when the minimum support threshold is smaller. And the improved algorithm adopts binary to storage information. So the improved algorithm is more suitable for large-scale database.



V. CONCLUSION  Mining association rules is one of the key issues in data mining field, this paper proposed the improved algorithm based on directed graph, which need only one time to traverse the directed graph, and generate candidate itemset by using the directed neighbor nodes of itemset. The experimental results show that the improved algorithm has more obvious   advantages compared to DLG algorithm and Hybrid-DLG algorithm.

