Context-Aware Workflow Modeling Approach Using OWL Pengfei Wang1, Huifang Li2, Baihai Zhang3

Abstract: Context-aware workflow systems can adapt their behavior based on the changes of real world, which is often gathered by a big amount of sensors. Thus, the modeling of context-aware workflow is the key issue in context-aware workflow systems, because context information is often varied and complex. To better describe context information in business processes, this paper proposes an OWL-based (Web Ontology Language) approach to model context-aware workflows. The context model and process model elements is defined based on OWL, so it can not only express the context information involved in business processes but also the corresponding workflow control items as OWL. The modeling rules which make the model more normalized are also designed. Case study and analysis show that our approach has good adaptability, and can be used to easily describe any sophisticated context-aware workflows.

Key Words: Workflow, Context-Aware Computing, Workflow Model, OWL  1 INTRODUCTION  With the development of workflow technology, workflow management system has been greatly applied in enterprise business process management(BPM). Workflow manage- ment system, as an integration platform of enterprise busi- ness process, plays a key role in business process automa- tion and highly effective workfow management. With the deepened application of workflow technology, people have realized the disadvantage of traditional workflow manage- ment system when capturing and utilizing the context in- formation of business processes. In traditional BPM, the context is not considered in architecture design and it lacks context expressing mechanism and context modeling.

On the other hand, with the arrival of Internet of Things and Mobile Internet era, business processes becomes in- creasingly closely related with context so the business pro- cess needs to be advanced and executed under context- aware environment to make it more smooth and intelligent.

Context-aware workflow modeling is the fundamen- tal problem of context-aware workflow management sys- tem(CWMS). Context-aware workflow model needs to in- clude the context information such as activity, context ele- ments, control flow, data stream, role and actor, etc.

Although current workflow languages such as WS-BPEL,  WSFL, and XLANG can specify the data flow among ser- vices based on Web services, these workflow languages do not support the ability to select services using context, pro- file, or event information in ubiquitous computing environ- ments. Therefore, it is difficult to express the relationships among the services using traditional workflow languages in ubiquitous computing environments[1].

Joohyun Han et al. proposed Ubiquitous Workflow De- scription Language(uWDL), to model context-aware work- flow in ubiquitous computing environments[1,2]. uWDL expresses the contextual information by a kind of struc- tured situation model. uWDL language defines a set of syn- tax elements, mainly includes <node> element, <link> element, <condition> element, <action> elements etc.

The <node> element points to an operation that provides a functionality of Web services in ubiquitous environments.

The <condition> element uses <context>, <profile> and <event> subelements to specify the context, profile and event status of a specific node, respectively. The <action> element consists of <export> and <transition> elements, where <export> has a control link and a data link ac- cording to its attribute, and <transition> specifies the state change of the current node.

uWDL can specify the context information on transition constraints of a service workflow in ubiquitous computing environments. As a result, users are provided with an ap- propriate service according to the users context informa- tion.

Matthias Wieland et al. used WS-BPEL language and its extension mechanism for context-aware workflow model- ing [3], where the method introduced some new activities elements and the expanded version of WS-BPEL named Context4BPEL. The method aims to explicit model scenar- ios influence in workflow, its benefits are to make modeler directly observe the context elements in workflow model.

This method defines the three basic concepts: contex- t event, context query and context decision. Context events allow a workflow to wait asynchronously for a special en- vironment state. The listening for the event is done in par- allel to the normal workflow. As soon as the environment     is in the awaited state, the context management system pro- duces an event notification. After that, the workflow system delivers the event notification to the concrete workflow in- stance. By defining event handlers, the workflow can react to the occurring event in a predefined way.

A context query allows synchronous query oriented the access of context data with a query language. The query language can support object selection based on the spatial predicates and the filtering of the results.

A context decision allows the process to route process control flow based on context data using context-aware op- erators. The context data used by the context-aware oper- ators can be internal process data or can be gathered by a context query from process external sources.

Liliana Ardissono et al. proposed Context Aware Workflow Execution(CAWE) framework[4-8], which used abstract workflow description method for context-aware workflow modeling. The abstract workflow is a workflow that has at least one abstract activity. Each abstract activity has an associated set of context-dependent implementation- s representing the alternative courses of action which the workflow engine should actuate, depending on the context.

This paper mainly study context description and context- aware process integration methods in workflow environ- ment, which are the most important problem in context- aware workflow. a context-aware workflow modeling ap- proach using Web Ontology Language(OWL) is proposed.

OWL that based on ontology, when it is used for model- ing complex context in workflow, exhibits unique advan- tages: OWL can completely describe and express context in workflow, is platform independent, and supports logic reasoning, etc.

This paper is organized as follows: in section 2, basic con-  cepts of context-aware workflow are introduced; section 3 presents context-aware workflow modeling methods based on OWL; a modeling instance of the proposed modeling method is given in section 4; we summarize this paper in section 5.

2 DEFINITIONS OF CONTEXT-AWARE WORKFLOW  Context is any information that can be used to characterize the situation of an entity. An entity is a person, place, or ob- ject that is considered relevant to the interaction between a user and an application, including the user and applications themselves[9]. Context can be categorized as follows ac- cording its attributes: (1) Computing context?network connectivity, commu- nication cost, communication bandwidth and nearby re- sources, etc.

(2) User context?user location, profiles, and social status, etc.

(3) Physical context?temperature, brightness, noise, traf- fic condition, etc.

(4) Time context?hour, minute, day, week, season, etc.

(5) Social context?institution, law, custom and habit, etc.

Definition 1. Context-aware workflow management sys- tem(CWMS). CWMS is a workflow management system  that is context-aware. CWMS can capture, recognize, an- alyze and understand environment information, can react intelligently according to context information, especially in Internet of Things and mobile internet environments.

In CWMS, the functions of context are: (1)condition transfer; (2)resource allocation; (3)process instance start- ing; (4)workflow exception handling.

(1) Transition condition. It is a basic working mode. When a workflow instance is executing, workflow engine that us- es context to control workflow routing determines work- flow transition according to the user location, network bandwidth, user?s social state, etc.

(2) Workflow resource allocation. In a task node of the workflow, the actor is called resource(operator, applica- tion, machinery and equipment, etc). The status of re- source are considered as context. The performance of workflow management system can be greatly enhanced ac- cording to the context baesd resource allocation. For in- stance, resource can be allocated according to the opera- tor?s state(idle/busy) and the context-aware system evalu- ates the operator?s busyness degree according to the related sensors in intelligent space and the workflow engine pushes tasks according to the degree, and the tasks can be reallo- cated to the idle operators.

(3) Workflow instance starting. When an event occurs in the context, workflow instance is started according to the predefined rules. For example, in a smart warehouse, when the stock of one instrument falls below its threshold, then the context-aware system will trigger a corresponding in- ventory inefficiency event. Driven by this event, workflow engine will automatically start a purchase process and no- tify related staff to purchase the instruments.

(4) Workflow exception handling. Workflow exception means that activity failure and/or workflow failure caused by outer exception of workflow, system exception of work- flow, and activity execution exception, which causes the workflow does not work normally according to the prede- fined workflow model. Workflow management system can handle the exceptions when the process is executing ac- cording to context, thereby enhances its exception handling ability of workflow.

3 CONTEXT-AWARE WORKFLOW MODEL- ING  3.1 OWL Language OWL is a ontology modeling language developed by W3C.

OWL language has the following characteristics: (1) Major language elements of OWL language are class, property, individual among which property is categorized into object property and datatype property.

(2) Class in OWL that is essentially a set concept, is differ- ent from the class in the program design languages. Class of OWL includes subClass and superClass and any class is its own subclass and superclass. In fact, we can consider subclass as subset and superclass as superset. In OWL, two classes, Thing and Nothing, are predefined. The thing class can be seen as a universal set and Nothing can be seen as empty set.

4162 2014 26th Chinese Control and Decision Conference (CCDC)    (3) In OWL, the concept property is also different from that of programming language. The object property in OWL is a binary relation over two sets, but ?datatype property? equals to the concept property in programming language.

(4) Property domain and range(which can be seemed as two classes) of an object in OWL can be user defined.

(5) Datatype property in OWL associates an object with its data.

(6) Individual in OWL equals to the elements in a set.

3.2 Advantages of Modeling with OWL (1) OWL can fully describe and express context informa- tion in workflow. Context is complex and includes many types of information such as computing context, user con- text, physical context, time context and social context, etc., so it seems better to use OWL to model the context and relationships.

(2) OWL language is an international standard, and is hard- ware, operation system and programming language inde- pendent that can be interchanged and shared among differ- ent software systems.

(3) OWL language supports logic reasoning that becomes especially important when modeling. Context-aware server or context-aware middleware need to collect, filter, aggre- gate and reason over the original data, so using OWL to model context can be convenient to inference machine.

3.3 Meta-Model of Context-Aware Workflow Workflow meta-model is the model that defines the work- flow semantic model constructs and rules. In this paper, we use OWL to model context-aware workflow, action nodes and router nodes, actor, execution time, place and other contexts. These modeling elements are defined as class- es in OWL language using inheritance(each class derived from its super class).

Class Node is defined as the superclass of all nodes, Class TaskNode is defined as the superclass of all task n- odes, Class RouteNode is defined as the superclass of all route nodes. Subclasses of class Node include class StartN- ode, EndNode, TaskNode and RouteNode. Subclasses of class TaskNode include class ApplicationTask, HumanTask and SubWorkflow. Subclasses of class RouteNode con- tain class ForkBegin, ForkEnd, SwitchBegin, SwitchEnd, LoopBegin and LoopEnd.

Class Agent is defined as the activity executor in workflow  and derivates subclass Application and Person denoting au- tomatic task executor and manual executor.

We define activity execution time class as Time, and place  class as Location. Two subclasses Coordinate and Place are derived from Location, denoting the location described by the geographical coordinates and place expressed with nat- ural language respectively. All classes in the meta-model are inherited from the root class Thing, their inheritance relation is shown in Figure 1.

3.4 Process Model Elements Process model elements include startNode, endNode, tas- kNode, routerNode. StartNode denotes the beginning of a process, endNode is the ending of the process, taskNode denotes all kinds of process activities, routerNode imple-  Figure 1: Inheritance of Meta-Model  ments the control function of the processes. Node is de- fined as a node class from which the other classes are de- rived.

The beginning node is denoted as StartNode and is defined  by OWL as follows: <owl:Class rdf:ID=StartNode >  <rdfs:subClassOf rdf:resource=#Node/> </owl:Class> The endNode denotes ending of the process, defined with  OWL as: <owl:Class rdf:ID=EndNode >  <rdfs:subClassOf rdf:resource=#Node/> </owl:Class> TaskNode denotes a task in a process. TaskNode contains  three subclasses: HumanTask node, ApplicationTask node, and SubWorkflow node. Tasks are classfied into atomic tasks and compound tasks. Atomic task cannot be divided into the smaller tasks which can be categorized into human tasks and automatic tasks. Compound tasks are composed of simple/compound tasks connected by some control log- ic such as serial, parallel, selection, etc. Compound task is defined as a subprocess node. Subprocess node can realize modularity and reuse. Process block repeated in some pro- cesses can be defined as subprocess, so process modeller can reuse these subprocesses to enhance the modelling ef- ficiency and avoid some repeated labors. TaskNode, Ap- plicationTask, and HumanTask are defined with OWL as follows: <owl:Class rdf:ID=TaskNode >  <rdfs:subClassOf rdf:resource=#Node/> </owl:Class> <owl:Class rdf:ID=ApplicationTask >  2014 26th Chinese Control and Decision Conference (CCDC) 4163    <rdfs:subClassOf rdf:resource=#Node/> <rdfs:subClassOf rdf:resource=#TaskNode/>  </owl:Class> <owl:Class rdf:ID=HumanTask >  <rdfs:subClassOf rdf:resource=#Node/> <rdfs:subClassOf rdf:resource=#TaskNode/>  </owl:Class> <owl:Class rdf:ID=SubWorkflow >  <rdfs:subClassOf rdf:resource=#Node/> <rdfs:subClassOf rdf:resource=#TaskNode/>  </owl:Class> RouteNode is used to denote the process logic between  process nodes such as parallel, selection and loop. Parallel tasks start its execution from a parallel node and are syn- chronize by a commond node to finish its execution. For parallel task, we use parallel start node and end node to denote such executing relationship.

Selection is a basic structure in the process. We use SwitchBegin and SwitchEnd to denote the selection. Loop is also a basic structure in the process. We use LoopBegin and LoopEnd to denote the begin and the end of the loop.

Definitions of RouteNode, ForkBegine, ForkEnd, Switch- Begin, SwitchEnd, LoopBegin and LoopEnd using OWL are as follows: <owl:Class rdf:ID=RouteNode >  <rdfs:subClassOf rdf:resource=#Node/> </owl:Class> <owl:Class rdf:ID=ForkBegin >  <rdfs:subClassOf rdf:resource=#Node/> <rdfs:subClassOf rdf:resource=#RouteNode/>  </owl:Class> <owl:Class rdf:ID=ForkEnd >  <rdfs:subClassOf rdf:resource=#Node/> <rdfs:subClassOf rdf:resource=#RouteNode/>  </owl:Class> <owl:Class rdf:ID=SwitchBegin >  <rdfs:subClassOf rdf:resource=#Node/> <rdfs:subClassOf rdf:resource=#RouteNode/>  </owl:Class> <owl:Class rdf:ID=SwitchEnd >  <rdfs:subClassOf rdf:resource=#Node/> <rdfs:subClassOf rdf:resource=#RouteNode/>  </owl:Class> <owl:Class rdf:ID=LoopBegin >  <rdfs:subClassOf rdf:resource=#Node/> <rdfs:subClassOf rdf:resource=#RouteNode/>  </owl:Class> <owl:Class rdf:ID=LoopEnd >  <rdfs:subClassOf rdf:resource=#Node/> <rdfs:subClassOf rdf:resource=#RouteNode/>  </owl:Class> In OWL language, binary relation from one class to an-  other class can be defined using owl:ObjectProperty. To specify process description, object property is defined as a transition to denote the connections between nodes.

<owl:ObjectProperty rdf:about=transition?>  <rdfs:domain rdf:resource=#Node /> <rdfs:range rdf:resource=#Node/>  </owl:ObjectProperty>  3.5 Context Model Elements Context modeling elements include place, time, actor and other context information. We use ?objectPropery? in OWL language to describe context.

Task execution time is defined as ExecuteAt with OWL as: <owl:ObjectProperty rdf:about=ExecuteAt?>  <rdfs:domain rdf:resource=#TaskNode /> <rdfs:range rdf:resource=#Time/>  </owl:ObjectProperty> Note that TaskNode is the task node and Time is the time  class. Task execution place is defined as ExecuteIn in OWL as: <owl:ObjectProperty rdf:about=ExecuteIn?>  <rdfs:domain rdf:resource=#TaskNode /> <rdfs:range rdf:resource=#Location/>  </owl:ObjectProperty> Note that TaskNode is the task node and Location is the  geographical location class. Relation between tasks and actors is defined as ExecueBy by OWL: <owl:ObjectProperty rdf:about=ExecuteBy?>  <rdfs:domain rdf:resource=#TaskNode /> <rdfs:range rdf:resource=#Agent/>  </owl:ObjectProperty> Here Agent is the actor class.

Besides the above three typical contexts, users can define  their own object property in accordance with OWL gram- mar to correlate context with object. User defined object property can greatly enhance the descriptiveness and scal- ability of our proposed modeling approach so as to make use of any context to model workflow.

We use constraint mechanisms and boolean combination of class in OWL to express context. In OWL, boolean com- bination mechanisms include ?complement?, ?and?, ?or? op- erations of class. In context-aware workflow models, the context information is used as the constraint condition of a node class and the node is described as a subclass with the above constraint conditions.

3.6 Modeling Rules Here, we give several the modeling rules used in our mod- eling method.

(1) There is only one Start node for any processes; (2) There is only one End node for any processes; (3) Several Task nodes can exist in a process; (4) Several Route nodes can exist in a process; (5) Nodes are connected by directed arcs, directed arcs rep- resent node execution order; (6) ForkBegin and ForkEnd must appear in pairs; (7) SwitchBegin and SwitchEnd must appear in pairs; (8) LoopBegin and LoopEnd must appera in pairs; (9) In/Out degrees of each node should meet rules listed in Table 1.

4 MODELING INSTANCE  According to the modeling method introduced in the for- mer section, we present a modeling instance of context- aware workflow. For simplicity, we just present a local  4164 2014 26th Chinese Control and Decision Conference (CCDC)    Table 1: In/Out Degree Rules of a Node Node In degree Out degree Start 0 1 End 1 0 Task 1 1 ForkBegin 1 N ForkEnd N 1 SwitchBegin 1 N SwithcEnd N 1 LoopBegin 2 1 LoopEND 1 2  code for an activity. Suppose a human task needs a ?ac- countant? to execute in Room 301 at 2013-03-12. Using our modeling approach, this activity is model as: <owl:Class rdf:ID=HumanTask A > <rdfs:subclassof rdf:resource=#HumanTask / > <rdfs:subclassof >  <owl:Restriction> <owl:onProperty rdf:resource=#ExecuteBy /> <owl:allValuesFrom rdf:resource=#Accountant/>  </owl:Restriction> </rdfs:subclassof > <rdfs:subclassof >  <owl:Restriction> <owl:onProperty rdf:resource=#ExecuteAt/> <owl:hasValue rdf:datatype=&xsd;date>  2013-3-12 </owl:hasValue>  </owl:Restriction> </rdfs:subclassof > <rdfs:subclassof >  <owl:Restriction> <owl:onProperty rdf:resource=#ExecuteIn/> <owl:hasValue rdf:resource=#Room 301/>  </owl:Restriction> </rdfs:subclassof > </owl:Class>  5 CONCLUSION  CWMS is a workflow management system that is context- aware. CWMS can drive workflow execution according to context(such as location, time, weather and the status of people, etc.), make workflow more intelligent, and enhance workflow efficiency. In this paper, a context-aware work- flow modeling approach based on OWL language is pro- posed. This approach uses the ontology of OWL language that can describe the complex context in the process. Mod- eling elements include process elements and context ele- ments described with OWL class and its properties. This approach has the following advantages: 1) it can express complex contexts and context information can be explicit- ly expressed in the process model; 2) it has good language structure. To understand and model easily, parallel route, select route and loop route all need a starting node and an ending node in pairs. 3) it is platform independent. Be- cause OWL language is a international standard modeling language, model sharing and interoperation can be easily established in different systems and software platforms.

