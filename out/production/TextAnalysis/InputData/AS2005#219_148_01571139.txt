Hiding Sensitive Predictive Association Rules

Abstract - Privacy-preserving data mining [22], is a novel research direction in data mining and statistical databases, where data mining algorithms are analyzed for the side effects they incur in data privacy.  For example, through data mining, one is able to infer sensitive information, including personal information or even patterns, from non- sensitive information or unclassified data.  There have been two types of privacy concerning data mining.  The first type of privacy is that the data is altered so that the mining result will preserve certain privacy.  The second type of privacy is that the data is manipulated so that the mining result is not affected or minimally affected.

Given specific rules to be hidden, many data altering techniques for hiding association, classification and clustering rules have been proposed.  However, to specify hidden rules, entire data mining process needs to be executed.  For some applications, we are only interested in hiding certain sensitive predicative rules that contain given items.  In this work, we assume that only sensitive items are given and propose two algorithms, ISL (Increase Support of LHS) and DSR (Decrease Support of RHS),  to modify data in database so that sensitive predicative rules containing specified items on the left hand side of rule cannot be inferred through association rule mining.

Examples illustrating the proposed algorithms are given.

The characteristics of the algorithms are analyzed.  The efficiency of the proposed approach is further compared with Verykios etc [9,23] approach.  It is shown that our approach required less number of databases scanning and prune more number of hidden rules.  However, our approach must hide all rules containing the hidden items on the left hand side, where Verykios etc approach can hide any specific rule.

Keywords: privacy preserving data mining, predictive association rule.

1 Introduction The concept of privacy preserving data mining has been recently proposed in response to the concerns of preserving personal information from data mining algorithms [3,4,5,15,16,22].  There have been two types of privacy concerning data mining.  The first type of privacy is that the data is altered so that the mining result will preserve certain privacy.  Many techniques have been  proposed for this type of output privacy [1,6,7,8,9,17,18,20,23].  For example, perturbation, blocking, aggregation or merging, swapping, and sampling are some alternation methods that have recently been proposed.  The second type of privacy is that the data is manipulated so that the mining result is not affected or minimally affected [10,11,12,13,21].  For example, the cryptography-based techniques like secure multiparty computation allow users access to only a subset of data while global data mining results can still be discovered.

The reconstruction-based technique where the original distribution of the data can be reconstructed from the randomized data is another method for this type of input privacy.

Given specific rules to be hidden, many data altering techniques for hiding association, classification and clustering rules have been proposed.  However, to specify hidden rules, entire data mining process needs to be executed.  For some applications, we are only interested in hiding certain sensitive predicative rules that contain given items.  In this work, we assume that only sensitive items are given and propose two algorithms to modify data in database so that sensitive predicative rules containing specified items on the left hand side of rule cannot be inferred through association rule mining.  The proposed algorithms are based on modifying or perturbing the database transactions so that the confidence of the association rules can be reduced.  Examples demonstrating the proposed algorithms are shown.  The characteristics of the proposed algorithms are analyzed.  The efficiency of the proposed approach is further compared with Verykios etc approach.  It is shown that our approach required less number of databases scanning and prune more number of hidden rules.  However, our approach must hide all rules containing the hidden items on the left hand side, where Verykios etc approach can hide any specific rule.

The rest of the paper is organized as follows.  Section 2 presents the statement of the problem and the notation used in the paper.  Section 3 presents the proposed algorithms for hiding sensitive predictive association rules that contain the specified items. Section 4 shows some examples of the proposed algorithms.  Section 5 analyses the characteristics of proposed algorithms and further compare with Verykios etc approach.  Concluding remarks and future works are described in section 6.

2 Problem Statement 2.1 Predicative Association Rules The problem of mining association rules was introduced in [2]. Let }   ,,  , { 21 miiiI L=  be a set of literals, called items.  Given a set of transactions D, where each transaction T  is a set of items such that ,IT ?  an association rule is an expression YX ?  where ,IX ?  ,IY ?  and .?=?YX  The X and Y  are called respectively the body (left hand side) and head (right hand side) of the rule.  An example of such a rule is that 90% of customers buy hamburgers also buy Coke.  The 90% here is called the confidence of the rule, which means that 90% of transaction that contains X also contains Y.  The confidence  is calculated as ||  || X  YX ? .  The support of the rule is the  percentage of transactions that contain both X and Y, which  is calculated as N  YX || ? , where N is the number of  transactions in D.  In other words, the confidence of a rule measures the degree of the correlation between itemsets, while the support of a rule measures the significance of the correlation between itemsets.  The problem of mining association rules is to find all rules that are greater than the user-specified minimum support and minimum confidence.

As an example, for a given database in Table 1, a minimum support of 33% and a minimum confidence of 70%, nine association rules can be found as follows: B=>A (66%, 100%), C=>A (66%, 100%), B=>C (50%, 75%), C=>B (50%, 75%), AB=>C (50%, 75%), AC=>B (50%, 75%), BC=>A(50%, 100%), C=>AB(50%, 75%), B=>AC(50%, 75%).

Table 1: Database D TID Items T1 ABC T2 ABC T3 ABC T4 AB T5 A T6 AC    However, mining association rules usually generates a large number of rules, most of which are unnecessary for the purpose of prediction.  For example, given itemset for prediction P = {C}, the rule set that contains only two rules C=>A (66%, 100%), C=>B (50%, 75%), will generate the same predicted itemset Q = {A, B} as the nine association rules found from Table 1.  A predictive association rule set (or informative rule set) [14] can be informally defined as  the smallest rule set that makes the same prediction as the association rule set by confidence priority.

2.2 Problem Description The objective of data mining is to extract hidden or potentially unknown interesting rules or patterns from databases.  However, the objective of privacy preserving data mining is to hide certain sensitive information so that they cannot be discovered through data mining techniques [1,4-12,16].  In this work, we assume that only sensitive items are given and propose two algorithms to modify data in database so that sensitive predictive association rules cannot be inferred through association rule mining.  More specifically, given a transaction database D, a minimum support, a minimum confidence and a set of sensitive items X, the objective is to modify the database D such that no predictive association rules containing X on the left hand side will be discovered.

As an example, for a given database in Table 1, a minimum support of 33%, a minimum confidence of 70%, and a hidden item X = {C}, if transaction T5 is modified as AC, then the following rules that contain item C on the left hand side will be hidden: C=>B (50%, 60%), AC=>B (50%, 60%), C=>AB(50%, 60%).

The following notation will be used in the paper.

Each database transaction has three elements: T=<TID, list_of_elements, size>.  The TID is the unique identifier of the transaction T and list_of_elements is a list of all items in the database.  However, each element has value 1 if the corresponding item is supported by the transaction and 0 otherwise. Size means the number of elements in the list_of_elements having value 1.  For example, if I = {A,B,C}, a transaction that has the items {A, C} will be represented as t = <T1,101,2>.  In addition, a transaction t supports an itemset I when the elements of t.list_of_elements corresponding to items of I are all set to 1.  A transaction t partially supports an itemset I when the elements are not all set to 1.  For example, if I = {A,B,C} = [111], p = <T1,[111],3>, and q = <T2,[001],1>, then we would say that p supports I and q partially supports I.

3 Proposed Algorithms In order to hide an association rule, we can either decrease its support or its confidence to be smaller than pre-specified minimum support and minimum confidence.

To decrease the confidence of a rule, we can either (1) increase the support of X, i.e., the left hand side of the rule, but not support of X ? Y, or (2) decrease the support of the itemset X ? Y.  For the second case, if we only decrease the support of Y, the right hand side of the rule, it would reduce the confidence faster than simply reducing the support of X ? Y.  To decrease support of an item, we will modify one item at a time in a selected transaction by changing from 1      to 0 and from 0 to 1 to increase the support.

Based on these two strategies, we propose two data- mining algorithms for hiding sensitive predictive association rules, namely Increase Support of LHS  (ISL) and Decrease Support of RHS (DSR).  The first algorithm tries to increase the support of left hand side of the rule.

The second algorithm tries to decrease the support of the right hand side of the rule.  The details of the two algorithms are described as follow.

Algorithm ISL Input: (1) a source database D, (2) a min_support, (3) a min_confidence, (4) a set of hidden items X Output: a transformed database D?, where rules  containing X on LHS will be hidden  1. Find large 1-item sets from D; 2. For each hidden item x?  X 3.  If x is not a large 1-itemset, then X := X -{x} ; 4. If H is empty, then EXIT;// no AR contains X in LHS 5. Find large 2-itemsets from D; 6. For each x ?  X { 7.    For each large 2-itemset containing x { 8.       Compute confidence of rule U, where U is a rule like  x?  h ; 9.       If confidence(U) <  min_conf, then 10. Go to next large 2-itemset; 11. Else {  //Increase Support of LHS 12.         Find TL = { t in D | t does not support U} ; 13.         Sort TL in ascending order by the number of Items; 14.         While { confidence(U) >=  min_conf and TL is not empty) { 15.           Choose the first transaction t from TL; 16.           Modify t to support x, the LHS(U); 17.           Compute support and confidence of U; 18. Remove and save the first transaction t from TL; 19. };  // end While 20.  }; // end if 21. If  TL is empty, then { 22. Can not hide x?  h; 23. Restore D; 24. Go to next large-2 itemset; 25. } // end if TL is empty 26. } //end of for each large 2-itemset 27. Remove x from X; 28. } // end of for each x 29. Output updated D, as the transformed D?;  Algorithm DSR Input: (1) a source database D, (2) a min_support, (3) a min_confidence, (4) a set of hidden items X  Output: a transformed database D?, where rules containing X on LHS will be hidden   1. Find large 1-item sets from D; 2. For each hidden item x?  X 3.  If x is not a large 1-itemset, then X := X -{x} ; 4. If H is empty, then EXIT;// no AR contains X in LHS 5. Find large 2-itemsets from D; 6. For each x ?  X { 7.    For each large 2-itemset containing x { 8. Compute confidence of rule U, where U is a rule like x?  h ; 9.       If confidence(U) <  min_conf, then 10. Go to next large 2-itemset ; 11. Else {  //Decrease Support of RHS 12. Find TR = { t in D | t fully support U} ; 13. Sort TR in ascending order by the number of Items; 14. While { confidence(U) >=  min_conf and TR is not empty) { 15. Choose the first transaction t from TR; 16. Modify t so that h is not supported; 17. Compute support and confidence of U; 18. Remove and save the first transaction t  from TR; 19. };  // end While 20.  }; // end if 21. If  TR is empty, then { 22. Can not hide x?  h; 23. Restore D; 24. Go to next large-2 itemset; 25. } // end if TR is empty 26. } //end of for each large 2-itemset 27. Remove x from X; 28. } // end of for each x 29. Output updated D, as the transformed D?;  4 Examples This section shows four examples for demonstrating the two proposed algorithms in hiding sensitive predictive association rules in the association rule mining.

For a given database in Table 1, a minimum support of 33% and a minimum confidence of 70%, the first two examples hide the sensitive rules using the ISL algorithm.

The difference of the two examples is that the order of hiding item is different.  The first example hides item C and then item B.  The second example hides item B and then item C.  The result is given in section 4.1.

The third and fourth examples hide the sensitive predictive association rules using DSR algorithm.  The difference is also the order of items to be hidden.  The result is given in section 4.2.

Table 2: Database D using the specified notation TID Items Size T1 111 3 T2 111 3 T3 111 3 T4 110 2 T5 100 1 T6 101 2    4.1 Examples Running ISL Algorithm  Example 1 Assuming that the min_supp = 33% and min_conf = 70%, the result of hiding item C and then item B using ISL algorithm is as follows.  To hide item C, the rule C => B (50%, 75%) will be hidden if transaction T5 is modified from 100 to 101 using ISL (Increase Support of LHS).  The new database D1 is shown in Table 3.  The rule C => B will have support = 50% and confidence = 60%.

However, rules C => A, B => A, B => C cannot be hidden by ISL algorithm.

Table 3  Databases before and after hiding item C and item  B using ISL            Example 2 As in example 1, reversing the order of hiding items, the result of hiding item B and then item C using ISL algorithm is as follows.  To hide item B, the rule B => C (50%, 75%) will be hidden if transaction T5 is modified from 100 to 110 using ISL.  The new database D2 is shown in Table 4.  The rule B => C will have support = 50% and confidence = 60%.  However, rules B => A, C => A, C => B cannot be hidden by ISL algorithm.

One observation we can make is that different sequences of hiding items will result in different transformed databases, i.e., D1 and D2 for ISL algorithm.

Table 4 Databases before and after hiding item B and item  C using ISL TID D D2 T1 111 111 T2 111 111 T3 111 111 T4 110 110 T5 100 110 T6 101 101    4.2 Examples Running DSR Algorithm  Example 3 Assuming that the min_supp=33% and min_conf=70%, the result of hiding item C and then item B using DSR algorithm is as follows.  To hide item C, the rule C => A (60%, 100%), C => B (50%, 75%), B => C (50%, 75%), B => A (60%, 100%) will be hidden if transaction T6 is modified from 101 to 001, T1 is modified from 111 to 011, T1 is modified from 011 to 001, and T4 is modified from 110 to 010, using DSR.  The new database D3 is shown in Table 5.

Table 5  Databases before and after hiding item C and item  B using DSR TID D D3 T1 111 001 T2 111 111 T3 111 111 T4 110 010 T5 100 100 T6 101 001   Example 4 As in example 3, reversing the order of hiding items, the result of hiding item B and then item C using DSR algorithm is as follows.  To hide item B, the rule B => A (60%, 100%), B => C (50%, 75%), C => A (60%, 100%), C => B (50%, 75%) will be hidden if transaction T4 is modified from 110 to 010, T1 is modified from 111 to 011, T1 is modified from 011 to 010, T6 is modified from 101 to 001, using DSR.  The new database D4 is shown in Table 6.

Table 6  Databases before and after hiding item B and item  C using DSR TID D D4 T1 111 010 T2 111 111 T3 111 111 T4 110 010 T5 100 100 T6 101 001   One observation is that different sequences of hiding items will result in different transformed databases, i.e., D3 and D4 for DSR algorithm.

5 Analysis This section analyzes some of the characteristics of the proposed algorithms and compares with the algorithms proposed in Verykios etc?s [9,23].  The first characteristic we observe is the item ordering effect.  The transformed databases are different under different ordering of hiding items, even though the same set of sensitive items is specified.  The second characteristic we observe is the algorithm effect.  The transformed databases will be different under different algorithm. These characteristics  TID D D1 T1 111 111 T2 111 111 T3 111 111 T4 110 110 T5 100 101 T6 101 101      are demonstrated in the four examples in section 4 and summarized in Table 7.  Databases D1 and D2 are resulting databases using ISL algorithm and D3 and D4 are resulting databases using DSR algorithm.

Table 7  Databases before and after hiding items B and C using ISL and DSR  TID D D1 D2 D3 D4 T1 111 111 111 001 010 T2 111 111 111 111 111 T3 111 111 111 111 111 T4 110 110 110 010 010 T5 100 101 110 100 100 T6 101 101 101 001 001   The third characteristic we analyze is the efficiency of the proposed algorithm compared with the Verykios etc algorithms.  Even though it is the hidden rules, instead of hidden items, that are specified in [9,23], we compare the number of database scanning and the number of rules pruned between the two approaches.  Table 8 summarizes the results.

For ISL algorithm, the number of database scanning comes from the calculation of large one itemsets, large two itemsets, and transactions TL.  The rules pruned are AC => B and C => AB.  For Verykios etc?s 1a algorithm, the number of database scanning comes from the calculation of large one itemsets, large two itemsets, large three itemsets, and partial support transactions T.  No rules are pruned in the Verykios etc?s algorithm.  It can be seen that the ISL algorithm requires less database scanning and prune more number of association rules.  Similar results are obtained for comparing DSR algorithm and Verykios etc?s 1b algorithm.

Table 8  Database scans and rules pruned in hiding item C  using ISL DB Scans Rules  Pruned ISL 3 2  Dasseni?s 1a 4 0   One of the reasons that Verykios etc?s approach does not prune rules is that hidden rules are given in advance and the algorithms try to hide every single rule without checking to see if rules can be pruned after some transactions have been changed.

However, our approach needs to hide all rules containing hidden items on the left hand side.  But Verykios etc?s approach can hide some of the rules containing hidden item on the left hand side.  For example, for hidden item C, Verykios etc?s approach can hide C => A, but show C => B, whereas our approach must hide both C => A and C => B.

The fourth characteristic we analyze is efficiency comparison of the ISL and DSR algorithms.  One observation we conclude from the examples in section four is that DSR algorithm seems to be more effective when the support count of the hidden item is large.  This is due to when support of right hand side of the rule is large; increase support of left hand side usually does not reduce the confidence of the rule.  However, decrease support of right hand side usually decreases the confidence of the rule.

6 Conclusions In this work, we have studied the database privacy problems caused by data mining technology and proposed two na?ve algorithms for hiding sensitive predictive association rules in association rules mining.  The proposed algorithms are based on modifying the database transactions so that the confidence of the association rules can be reduced.  Examples demonstrating the proposed algorithms are shown.  The item ordering and algorithm ordering characteristics of the proposed algorithms are analyzed.  The efficiency of the proposed approach is further compared with Verykios etc?s [9,23].  It was shown that our approach required less number of database scanning and prune more number of hidden rules.

