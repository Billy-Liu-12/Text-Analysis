Coevolving Heuristics for The Distributor?s Pallet Packing Problem

Abstract? Efficient heuristics are required for on-line opti- mization problems where search-based methods are unfeasible due to frequent dynamics in the environment. This is especially apparent when operating on combinatorial NP-complete prob- lems involving a large number of items. However, designing new heuristics for these problems may be a difficult and time- consuming task even for domain experts. Therefore, automating this design process may benefit the industry when facing new and difficult optimization problems. The Distributor?s Pallet Packing Problem (DPPP) is the problem of loading a pallet of non-homogenous items coming off a production line and is an instance of a range of resource-constrained, NP-complete, scheduling problems that are highly relevant for practical tasks in the industry. Common heuristics for the DPPP typically decompose the problem into two sub-problems; one of pre- scheduling all items on the production line and one of packing the items on the pallet. In this paper we concentrate on a two dimensional version of the DPPP and the more realistic scenario of having knowledge about only a limited set of the items on the production line. This paper aims at demonstrating that such an unknown heuristic may be evolved by Gene Expression Programming and Cooperative Coevolution. By taking advan- tage of the natural problem decomposition, two species evolve heuristics for pre-scheduling and packing respectively. We also argue that the evolved heuristics form part of a developmental stage in the construction of the finished phenotype, that is, the loaded pallet.



I. INTRODUCTION  The industry is frequently faced with combinatorial prob- lems such as job scheduling, assembly planning, sorting, cutting and packing. Efficient ways of coping with these problems have obvious potential economic benefits, but even simple scheduling problems are NP-complete, thus being complex and difficult to solve within a reasonable time span.

On-line, search-based algorithms only provide solutions to a specific scheduling instance, meaning that new solutions must be found for different initial conditions. In a dynamic and uncertain environment, where re-scheduling is frequently necessary, this computation time may not be practically available. Traditional optimization techniques such as linear programming only guarantee the location of a local optimum for such difficult problems. Global optimization techniques, such as genetic algorithms or simulated annealing are known for yielding near-optimal solutions within a reasonable time- span. However, the computation time often scales up expo- nentially with the size of the problem.

Marcus Furuholmen is with the Department of Systems Engineering, Aker Subsea AS, Snaroyveien 36, 1364 Fornebu, Norway (phone: +4792015802; fax: +4767513010; email: marcus.furuholmen@akersolutions.com). Kyrre Glette, Mats Hovin and Jim Torresen are with the Department of Infor- matics, University of Oslo, P.O. Box 1080 Blindern, 0316 Oslo, Norway (phone: +4722852410; fax: +4722852401; email: {kyrrehg, matsh, jim- toer}@ifi.uio.no).

For the above reasons, these problems are often solved by employing a rule or a heuristic not requiring a time- consuming search process. Since heuristics may be generated off-line in advance, they can be applied in a real-time scheduling problem. The quality of a heuristic may vary from the ?rule of thumb? to more optimized policies designed by domain experts. A high-quality heuristic yields solutions for all the problem instances in a scheduling environment, has low processing time, is robust and resilient to perturbations.

However, designing novel heuristics may be a difficult and time-consuming task, even for domain experts, and the effi- ciency may be difficult to verify. Methods that can automate this design process by yielding near-optimal heuristics at a low cost are therefore of significant interest for the industry.

One instance of a practical, combinatorial problem is the Distributor?s Pallet Packing Problem (DPPP), where the task is to load pallets with non-homogeneous items coming off a production line. The DPPP is an example of a constraint- based scheduling problem also relevant for other problem domains, such as in assembly planning problems, where uncertainties regarding the order of goods arriving at the construction site may influence the optimal design of the product. In this paper we concentrate on the two-dimensional case of the DPPP, which is equivalent to loading only the first layer onto the pallet.

The DPPP is normally divided into two sub problems; one of pre-scheduling and one of packing the items on the pallet. Pre-scheduling normally applies to all items on the production line, however we question the realism of such an implementation in an industrial environment. Rather, we suggest that pre-scheduling a limited window of items currently seen on the production line may be realistically implemented. To the author?s best knowledge, heuristics have not been developed for this scenario.

This paper aims at demonstrating that such unknown heuristic may be automatically designed by using Gene Ex- pression Programming (GEP) for the automated synthesis of the heuristics and cooperative coevolution (CC) in order to let both the packing heuristic and the scheduling heuristic evolve together. We call this method Cooperative Coevolutionary Gene Expression Programming (CCGEP). Previous relevant work by the authors on CC and GEP can be found in [1] and [2].

The next section reviews previous approaches to the DPPP.

The CCGEP system is explained in section 3 and experimen- tal results are presented in section 4. The results are discussed in section 5 and section 6 concludes.



II. PREVIOUS APPROACHES  Among the simplest packing heuristics are the Next Fit (NF) and the Next Fit Decreasing (NFD) illustrated in figure 1. The most common approach is to combine these with a level technique [3] where e.g. the NF heuristic is applied to the problem by building rows onto the pallet as they come off the production line. The highest item on the row determines the height of the next level. When an item is too large to fit onto the current row it is placed on the next level and the current level is closed. Note that the NF packing heuristic assumes no knowledge about the arriving items. In the NFD heuristic all items are additionally pre- scheduled by decreasing height. Not surprisingly, the NFD gives better results assuming the knowledge about all items in the problem. Among other level-based heuristics are the First Fit (FF), First Fit Decreasing (FFD), Best Fit (BF) and Best Fit Decreasing (BFD) heuristics, all requiring more processing time but in most cases, yielding slightly better results. Several enumerative approaches have also been proposed, but these methods are extremely time-consuming and also assume the knowledge of all items on the production line. For a review of several methods for two dimensional packing see [4].

In a realistic scenario, one might have some limited knowl- edge about the items on the production line, i.e. a window of items available for pre-scheduling. One may assume that a heuristic taking this limited knowledge into consideration would be able to perform better than NF and maybe worse than NFD.

A. Genetic Algorithms  Evolutionary computing (EC) has been extensively in- vestigated in solving combinatorial problems due to the ability to locate near-optimal solutions to NP-complete prob- lems within a reasonable time span. The most common EC implementation is genetic algorithms (GA) for solving combinatorial and real-valued optimization problems. Most research on the use of GA for solving packing problems assumes the knowledge of all items in the problem, such as in the case of NFD, and presents only a solution to the specific problem instance, meaning that a new solution must be found for different initial conditions.

Level 01  Level 01   2 3    8 9   2 3     Level 02  6 4 8 9  1 5    Level 02  Next Fit (NF) Next Fit Decreasing (NFD)  Fig. 1. The Next Fit and the Next Fit Decreasing Heuristics  Corcoran et al. [3] demonstrated packing in three dimen- sions by extending the above mentioned level techniques to three dimensions and combining these with GA for pre- scheduling the items. The use of GA improved the result by 20% compared to the NF and FF, but NFD and FFD performed even better. The best results were obtained by using a GA seeded with best pre-processed packing. Note that the packing strategy was pre-decided and thus formed part of the objective function.

Herbert et al. [5] explored the use of GA for two di- mensional packing of identical items by developing a two- dimensional representation not requiring an execution of a packing algorithm (e.g. NF) in order to decode the solution and calculate the fitness. This was done by allowing any placement of boxes onto the loading area, even if this resulted in one or more pieces overlapping. Feasible placement points were reduced by using only normal cutting positions i.e.

coordinates which were integral combinations of box lengths and widths from the nearest pallet edge. However, by using this direct representation, packing only 27 identical boxes required a string length of 181 elements. It was concluded that the attempt to obtain a more direct representation and developing corresponding new cross-over operators did not result in better performance than known heuristics. It was also concluded that it may be more profitable to remove overlap systematically.

B. Genetic Programming  Scalability is a topic currently being addressed in the EC research community. Among future recommended work in a recent survey on evolutionary scheduling by Hart et al. [6] was the design of not necessarily optimal, but reconfigurable schedulers that are resilient to perturbations and that scale up well with the size of the problem.

Among several approaches addressing scalability is arti- ficial embryogeny (AE) [7], focusing on evolving rules, or indirect mappings rather than direct mappings. In a direct mapping, every element of the phenotype is represented by a single gene in the genotype, while in an indirect mapping, the number of elements in the genotype may be orders of magnitude less than the number of elements composing the phenotype. As an analogy, we argue that in the case of the DPPP, a direct mapping would suggest all items in the problem to be represented in the genotype, while an indirect mapping corresponds to evolving a heuristic that is independent of the problem size.

In quest of automating the process of designing heuristics, hyper-heuristics is the study of how to combine low-level heuristics in a learning system. The motivation is that the human programmer needs only to supply the potential build- ing blocks of a heuristic in order to evolve a suitable solution for the proposed problem. One such hyper-heuristic method- ology is Genetic Programming (GP), originally developed by Koza [8]. GP is an EC technique that evolves populations of computer programs which are represented as executable parse trees. The building blocks are pre-selected functions and terminals selected to suit the problem at hand. Genetic  2009 IEEE Congress on Evolutionary Computation (CEC 2009) 2811    operators such as mutation and crossover are performed directly on the tree structures.

Miyashita showed in [9] how to evolve dispatching rules by GP. A dispatching rule is a scheduling heuristic that decides the sequence of operations to be executed at each resource in the scheduling problem. The author found that the heuristics evolved by GP were better compared to known human-made heuristics. Jacobovic et al. [10] demonstrated the evolution of heuristics for scheduling by GP and ob- served in most cases performance comparable to human- made algorithms. Langdon et al. [11] described the use of GP in scheduling maintenance of an electrical grid. Lower cost schedules were found by seeding the GP with the best known heuristic. Burke et al. [12] demonstrated successful evolution of heuristics by GP in the application of the one- dimensional bin-packing problem without pre-scheduling.

The GP approach produced heuristics similar to the First Fit heuristic. However, it was noted that the GP evolved increasingly complex solutions as the generations progressed due to the inherent bloating problem found in GP, and that these solutions were hard to understand and to implement by humans.

A relatively new EC approach is Gene Expression Pro- gramming (GEP), originally developed by Ferreira [13]. GEP is an EC technique that combines the advantages of both GA and GP, while overcoming some of their individual limitations. GEP genomes are represented in fixed sized linear strings on which traditional GA-style genetic operators such as crossover and mutation are easily implemented. In a second stage, the genomes are translated into executable parse trees. In contrast to GP, GEP genomes always produce syntactically correct expressions making all individuals con- tribute to the exploration of the search space. The fixed size of the genotypes further prevents the well known bloating problem found in in GP, thus increasing the efficiency as repair functions are unnecessary. GEP has proven success in benchmark studies reaching from symbolic regression and sequence induction to classification [14] and combinatorial optimization [15]. In this paper we demonstrate how GEP is applied to the evolution of heuristics for the DPPP.

C. Cooperative Coevolution  In cooperative coevolutionary (CC) EC systems, the prob- lem is decomposed into smaller, more tractable sub-problems that are solved independently by sub-populations. CC is be- lieved to be an important tool for coadapting sub-components in a system of components. As already mentioned, the DPPP is normally decomposed into two sub-problems; one of pre- scheduling the items and one of placing the items on the pallet. In solving the DPPP, we take advantage of this natural problem decomposition by using CC.

Potter et al. demonstrated CC in [16] where a func- tion optimization problem was decomposed into the same number of co-evolving species as there were parameters in the problem. The fitness of a member of a species was obtained by combining it with the current best member of the remaining, temporarily frozen, species. It was shown  that CC significantly outperformed the standard GA both in precision and speed. However, it was concluded that such procedures work well on functions whose variables are reasonably independent, but have difficulties on functions with interacting variables. For a review of CC, see [17], where Potter et al. also demonstrate the emergence of an appropriate number of species for a simple string-matching task.

In a more relevant problem, Husbands [18], [19] recog- nized that in the field of job-shop scheduling, the implicit assumption was that once process planning had finished, scheduling takes over. The author argued that this standard definition is too restrictive because there may be many possible choices for the sub-operations in most planning problems. A coevolutionary system was demonstrated, where separate populations representing feasible process plans for each component were given fitness according to their ability to optimize the plan of the component. One population of another species was given fitness according to its ability to resolve conflicts between members of the other populations when they demanded the same resources during overlapping time intervals. Low-cost schedules emerged that were both effective and robust in handling noise and dynamics.



III. SYSTEM  The CCGEP system implements two species; a scheduler species evolving scheduling-heuristics for pre-scheduling boxes currently seen on the production line and a packer species evolving packing-heuristics for packing the boxes onto the pallet. The two species coevolve in a two-stage cycle as illustrated in figure 2 where; a) the fitness of the packer species is measured by its ability to generate heuristics that covers the largest area of the pallet, using the best (temporarily frozen) scheduling heuristic so far, and; b) the fitness of the scheduler species is measured by its ability to generate scheduling heuristics that covers the largest area of the pallet, using the best (temporarily frozen) packing heuristic so far. In this way, one species generates the fitness landscape for the other. More formally, an individual packer heuristic pi is evaluated by generating a layout Lik from the fitness case (queue) qk by the formula  Lik = Pp(pi, Ps(se(qk))) (1)  where Pp and Ps are development programs called the packer program and the scheduling program respectively, and se is the best scheduling heuristic so far, called the scheduling elite. An individual scheduling heuristic sj is evaluated by  Scheduler Elite  Packer Elite  Scheduler Specie  Scheduler Elite  Packer Elite  Packer Specie  a)  b)  Fig. 2. The two-stage cyclical coevolutionary process for the DPPP; a) evolving packer species and b) evolving scheduling species  2812 2009 IEEE Congress on Evolutionary Computation (CEC 2009)    generating a layout Ljk from the fitness case qk by the formula  Ljk = Pp(pe, Ps(sj(qk))) (2)  where pe is the best packer heuristic so far, or the packer elite. By execution, the packer program loads a pallet ac- cording to the implemented heuristics and returns the fitness FL of the layout according to the formula  FL =  Ap  n?  l=1  abl (3)  where Ap is the area of the pallet, abl is the area of the l?th box placed on the pallet and n is the total number of boxes placed on the pallet. In the case of a perfect solution, where the total area of the boxes loaded on the pallet equals the area of the pallet, the formula yields a fitness of 1.0.

A. Development Programs  The mapping from genotype (the evolved heuristics) to phenotype (the loaded pallet) is performed by development programs implementing the evolved heuristics. A high-level illustration is shown in figure 3. The development programs are analogous to a developmental stage in an AE system where the phenotype is developed in interaction with the current phenotype state and the evolved heuristics. A de- velopment program feeds input parameters (feature vector) from the current phenotype state into the evolved heuristic.

The heuristic outputs an action vector to the development program. As explained in the previous section, the cyclical coevolutionary process determines which of the two heuris- tics is temporary frozen and which is under evaluation. The finished phenotype (the pallet) is evaluated in the selection environment by formula 3 and the fitness is fed back into the evolutionary process.

Algorithm 1 and 2 outlines the scheduling and packing program respectively. The scheduling program constantly pre-schedules the boxes currently seen on the production line (i.e. in the window) according to the scheduling heuristics currently under evaluation. The output of the scheduling heuristic determines which box to re-schedule to the first position in the queue. The packing program places the first box from the pre-scheduled queue in the upper left corner.

For each succeeding box coming off the production line, the boxes already placed on the pallet are evaluated in turn by the packing-heuristic currently under evaluation until the  Development Program  Evolve Heuristic Phenotype  State Finished  Phenotype  Action vector  Feature vector  Fitness  Fig. 3. Evolutionary process with developmental stage  Algorithm 1 Scheduling Program qk ? raw queue from fitness case sj ? scheduling heuristic w ? window size while boxes in qk do  Feature vector ?f ? get input parameters from the current phenotype state in queue (w) Action vector ?a ? sj(?f) Action A = MAX(a1, a2, ..., an) Item to be resceduled to first position ? A  end while  Algorithm 2 Packing Program qk ? pre-scheduled queue of boxes Place first box from queue on upper left corner of pallet pi ? packing heuristic bq ? get next box from qk bp ? get first box placed on pallet while boxes in qk AND bq not placed on pallet do  Feature vector ?f ? get input parameters from the current phenotype state (bp) Action vector ?a ? pi(?f) Suggested next action A ? MAX(a1, a2, ..., an) if A is a feasible action then  do A bp ? get first box placed on pallet bq ? get next box from qk  else bp ? get next box placed on pallet  end if end while  new box is properly aligned to one of them. The output of the packing-heuristic determines if, and how to align the new box. The possible placements of a new box are limited to the 12 neighboring positions examplified in figure 4.

Additionally, the new box can be rotated 90?, thus giving 24 possible configurations corresponding to a neighbor box. If a packing heuristic suggests an infeasible action, the placement is rejected by the packing program. Such infeasible actions are placements resulting in an overlap and placements outside the pallet area. This approach prevents the evolved heuris- tics from performing infeasible actions in a real situation.

The evolution must therefore learn how to overcome these constraints in order to produce heuristics that are able to load the pallets. When a new box is successfully aligned to a box on the pallet, the ratio between the neighboring sides is stored in an array. E.g. if the new box is aligned to the neighbor box on the right top (RT) position and occupies half the length of that side, the value 0.5 is stored in the array of the neighbor box and the value 2.0 is stored in the array of the new box. These arrays are then accessible as input parameters for the continuation of the development process.

2009 IEEE Congress on Evolutionary Computation (CEC 2009) 2813    Neighbour Box  New Box  TRC TLC  BLC BRC  Fig. 4. Some of the possible placements of a new box in relation to a neighbor box already placed on the pallet.

B. Synthesizing Heuristics  Figure 5 is intended as an illustrative example of a heuristic evolved by GEP, showing a single member from one species with only four input parameters and three output actions (For the DPPP there are many more inputs and outputs). The input parameters on the left side of the figure are selected features called terminals sampled from the current phenotype state. The evolved heuristic transforms the input parameters and yields a vector coding for selected output actions. The action with the highest output value is selected and suggested to the development program.

GEP genomes are represented as a collection of linear symbol strings of fixed length called genes. A single gene consists of members from a function set and a terminal set that are the pre-selected building blocks available for the evolutionary search process (see table I). Due to the linear structure of the genomes, genetic material is easily exchanged between the members during crossover. For this application we use traditional GA-style two-point crossover and point mutation (roughly equivalent to bit-flip mutation in GA). The illustrated heuristic may actually be represented  Gene 01 +  b  c  *  d  /  ca  Gene 02  *  d  a  LT  c  Gene 03  a  b  c  0.1  0.8  0.5  d 0.3  Param Value    0.95  0.2  0.0   Action  d * c + b  a / c  LT ( c ,  a ) * d  Expression Value  Heuristic  Fig. 5. Illustrative example of a heuristic with four input parameters and three output actions evolved by GEP. Each gene codes for a specific action.

by e.g. the genome  +*bdcaa./acbbcb.*<dcaac  where the three genes are separated by a dot. The genes decode into executable parse trees composed out of the selected functions and terminals. A single gene corresponds to one of the specified output actions and the task for the evolution is to build genes that yield suitable output values for a given phenotype state. The parse trees are easily translated into symbolic expressions that can be examined by humans. For further details on GEP see [13].

The functions and terminals selected for the DPPP are displayed in table I. The functions are equal for both species while the terminals obviously differ. In the case of the packing species, several features of the phenotype state such as the position and size of the neighbor box, the size of the new box to be placed on the pallet, and various global parameters, are fed into the evolved program. This yields an output that is mapped to suggested actions such as rotation and alignment of the new box. In the case of the scheduling species, input parameters are taken from the height and the width of the boxes arriving at the production line within the selected window size. The output yielding the highest value corresponds to which box that should be re-scheduled to front position. All terminals are implemented as relative to the size of the pallet, e.g. the terminal a in the packer program is implemented as the width of the new box divided by the width of the pallet.



IV. EXPERIMENT  We evaluated the performance of CCGEP by evolving 25 independent runs and comparing the evolved heuristics to the NF and NFD heuristics. The termination criteria was set to 100 generations. For each run a randomly generated training set consisting of 100 independent queues was generated.

A single queue was initiated by randomly generating non- homogenous items at sizes between 1/12 and 1/4 the size of the pallet until the total area of the generated items were greater than or equal to the size of the pallet. An independent, equal sized test set was also randomly generated for every run. The evolutionary settings were equal for both the packer and the scheduler species. Details of the experiment-settings are listed in table II.

A. Results  Lets call the best performing heuristic from the 25 in- dependent runs the ?CCGEP-1? heuristic. The performance of the CCGEP-1 heuristic is compared to the performance of the NF and NFD heuristics from the same run in table

III. The CCGEP-1 heuristic performs approximately 7.5% better than the NF heuristics and 8.25% worse than the NFD heuristic. The CCGEP-1 heuristic is shown in table IV, while it is beyond the scope of this paper to provide a thorough analysis of the functioning of the heuristic. Obviously, some of the expressions may be re-written to more parsimonious expressions, but we chose to express them in their original form in order to demonstrate the nature of the evolutionary  2814 2009 IEEE Congress on Evolutionary Computation (CEC 2009)    TABLE I  FUNCTIONS AND TERMINALS  Symbol Description Functions for both species  + Addition - Subtraction * Multiplication % Protected division. Division by zero returns 1 LT Less than. Returns 1 if second argument i larger than first  argument, and 0 otherwise NE Not Equal To. Returns 1 if arguments are different and 0  otherwise ET Equal To. Returns 1 if arguments are equal and 0 otherwise IF If Function with three arguments. Returs the value of the  second argument if first argument is larger than 0.5 and returns the value of the third argument if first argument is less than 0.5  Terminals for the packer species a Width of new box b Height of new box c Width of neighbour box d Height of neighbour box e X position of neighbour box f Y position of neighbour box g Right side of the right most box on pallet h Bottom side of the lowest box on pallet i X position of center of gravity of all items on pallet j Y position of center of gravity of all items on pallet k Value of bottom left (BL) cell l Value of bottom right (BR) cell m Value of left bottom (LB) cell n Value of left top (LT) cell o Value of right bottom (RB) cell p Value of right top (RT) cell q Value of top left (TL) cell r Value of top right (TR) cell s Value of bottom right corner (BRC) cell t Value of bottom left corner (BLC) cell u Value of top right corner (TRC) cell v Value of top left corner (TLC) cell  Terminals for the scheduler species a ? t Widths and heights of 10 first boxes in queue  search. Examples of pallets loaded by the different heuristics are illustrated in figure 6.

An arising question is to which degree the CCGEP archi- tecture is able to reliably produce high-quality heuristics. The results from the 25 independent runs illustrated in table V shows that in the case of the DPPP, the average performance of the evolved heuristics are lower than that of the NF heuristic, hence several runs may be needed for finding good heuristics for novel problems. A typical plot for the evolutionary search process averaged over 10 independent runs is shown in figure 7.



V. DISCUSSION  Our initial assumption was that it should be possible to evolve heuristics for the DPPP, and in specific, the case where one has a limited knowledge of the items coming off the production line. We expected that these heuristics would be able to perform better than the NF heuristic (assuming no knowledge of the items on the production line) and maybe  TABLE II  EXPERIMENT SETTINGS  Setting Value Number of queues in training set 100 Number of queues in test set 100 Box sizes Between 1/12 and 1/4 of total pallet  size Number of boxes in window 10 Number of generations (termina- tion criteria)  Packer 100, Scheduler 100  Population size Packer 50, Scheduler 50 Gene length Packer 21, Scheduler 21 Mutation rate Packer 0.05, Scheduler 0.05 Crossover rate Packer: 0.4, Scheduler 0.4  TABLE III  EXPERIMENTAL RESULTS  Heuristic Fitness CCGEP-1 0.6831 NF 0.6077 NFD 0.7656  worse than the NFD heuristic (assuming full knowledge of the items on the production line). We further assumed that this should be possible by function decomposition and cooperative coevolution. The performance of the best heuris- tic evolved by the CCGEP system demonstrated that this assumption was indeed correct. However, we expected even better performance than 68% covering and some issues are discussed in the following.

Since the heuristics are generated offline in advance, the required training time may not be of crucial importance.

It is evident from the convergence in figure 7 that higher performing heuristics may emerge if letting the evolution run for more generations. A termination criteria based on convergence may be more useful for this application.

Indirect representation and AE is aiming at improving the scalability of evolved solutions. However, we question the ability of evolving heuristics equaling the performance of direct representations in terms of level of optimization. A part of the selection environment for the CCGEP system is the ability to generalize and this obviously limits the level of precision of the evolved solutions. We hypothesize that in general; evolving heuristics results in high-speed solutions at  Fig. 6. Typical packings produced by the different different heuristics. From left to right; CCGEP evolved heuristic, NF heuristics and NFD heuristics.

2009 IEEE Congress on Evolutionary Computation (CEC 2009) 2815    TABLE IV  THE CCGEP-1 HEURISTIC  Action Value CCGEP-1 Packer Heuristic  Rotate NE(NE(c,c),((a+m)-c)/m) Bottom Left LT(IF(ET(d,a),1,(k/f-g)),b) Bottom Right m Left Bottom ET(m,c)+h Left Top LT(1,l)-NE(NE(LT(i,p),1),q) Right Bottom k Right Top 1 Top Left b Top Right ET(p,a) Bottom right corner LT(j,h) Bottom left corner k Top right corner 0 Top left corner IF(o,a,ET(e,l))  CCGEP-1 Scheduler Heuristic Select item nr. 1 b Select item nr. 2 e Select item nr. 3 a Select item nr. 4 IF(1,g,l) Select item nr. 5 i Select item nr. 6 k Select item nr. 7 n-e Select item nr. 8 i Select item nr. 9 g Select item nr. 10 s  TABLE V  CCGEP PERFORMANCE OVER 25 INDEPENDENT RUNS  Average Deviation Best Worst 0.5940 0.0453 0.6831 0.4525  the cost of precision.

As in any machine learning system, the feature selection  (functions and terminals) is crucial for the overall perfor- mance. It may be observed from the CCGEP-1 heuristic that only some features are used in the final solution. It may aslo be assumed that other features (e.g. average size of items seen so far) could be integrated and thus increase the per- formance. The development programs also poses constraints on the evolved solutions. The programs may be improved by eventually becoming an integral part of the evolutionary search process, however this would increase the search space.

The average quality of the heuristics found by the CCGEP architecture indicates that several runs are required in order to find adequate solutions. Several papers, e.g. [20], have documented the fact that coevolution may suffer from several pathologies arising from complex evolutionary dynamics. We suspect some of these pathologies to frequently cause the CCGEP algorithm to get stuck in local optima; hence we recommend further research in coevolutionary robustness in order to improve the stability of the system.

The window size in the scheduling program determines the size of the search space available for the scheduling heuristics. Offcourse, longer training time may be required for a larger seach space. However, higher quality heuristics may emerge. Thus, if the application permits an increased  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9   0  10  20  30  40  50  60  70  80  90  100  F itn  es s  Generations  Packer Elite  Fig. 7. Fitness plot of the CCGEP algorithm averaged over 10 independent runs.

window size, and if training time is available, we expect the CCGEP system to be able to generate higher performing heuristics than demonstrated in this work.

A potential benefit of the symbolic implementation of the heuristics evolved by GEP is that it may enable humans to extract greater knowledge about the nature of the problem (compared to e.g. artificial neural networks). However, the evolved heuristics are difficult, though not impossible to understand. This phenomenon is a typical feature of machine learning. An open question is to what extent effort should be put in understanding evolved solutions e.g. in the case of the DPPP if a machine is to perform the packing.



VI. CONCLUSIONS  We have demonstrated how novel heuristics may be evolved by using a framework called Cooperate Coevolu- tionary Gene Expression Programming (CCGEP). Several combinatorial problems, such as job-scheduling and process- assembly planning are naturally decomposed into two or more sub-problems, and heuristic solutions to these problems may be co-evolved. The chosen problem domain of two- dimensional packing of non-uniform items and the assump- tion of having only a limited knowledge about the items coming off the production line was optimized by the CCGEP approach. One species evolved heuristics for packing and another species evolved heuristics for pre-scheduling the items coming off the production line. The best heuristic found by CCGEP had a 7.5% increased efficiency compared to the Next Fit heuristic assuming no knowledge about the items in the problem, and a 8.25% decreased efficiency compared to the Nect Fit Decreasing heuristic assuming the knowledge of all items in the problem.



VII. ACKNOWLEDGEMENT  The authors wish to acknowledge the support of the Nor- wegian Research Council and the TAIL IO project for their continued funding and support for this research. The TAIL IO project is an international cooperative research project led by StatoilHydro and an R&D consortium consisting of ABB, IBM, Aker Solutions and SKF.

