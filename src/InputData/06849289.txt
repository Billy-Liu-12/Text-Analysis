Conditional Proxy Re-Encryption for Secure Big Data Group Sharing in Cloud Environment

Abstract?Conditional PRE (CPRE) is a novel public key primitive which enables the group sharing of confidential data without revealing its plaintext or decryption key to outside the group member. Previously, several efforts are made to facilitate CPRE in group data sharing in cloud environment. The main drawback of the state-of-art CPRE schemes for this purpose is that whenever the group member changes, the originator of the data needs to download all of the existing data on the cloud, encrypt them again with a new condition value, and uploads them to the cloud. As a result, they are not suitable for secure big data sharing among group member in cloud environment. In this paper, we introduce a new CPRE called the outsourcing CPRE scheme (O-CPRE) which reduces the client overhead drastically.

When the membership of the group changes, in O-CPRE, the originator only needs to select a new condition value and upload it to the cloud. In addition, O-CPRE will move a part of client overhead at the initial setup stage and at the decryption of each message from the client to the cloud. As a result, O-CPRE is much more suitable for secure big data sharing in cloud environment than the other existing schemes.

Index Terms?Cloud computing, cloud storage, big data, proxy re-encryption, conditional proxy re-encryption, efficiency.



I. INTRODUCTION  The recent advances in cloud computing have dramatically altered the shape of current information technology industry.

This new computing paradigm enables companies to purchase the pay-per-use computing resources in need from a cloud service provider, which is typically cheaper than establishing their own computing environment [1]. However, to make this innovative model more viable, it is crucial to guarantee the security of the data of the companies in the public cloud from any type of adversary including the cloud provider [2]?[4].

To preserve the confidentiality of the data stored at a cloud storage server, one can encrypt the data using its secure key before sending it to the server and decrypt it after downloading from the server. However, this strategy is extremely inefficient in cloud environment due to the heavy overhead at the user.

Meanwhile, it is also not appropriate for a cloud server to obtain the encryption/decryption privileges on behalf of the user due to the confidentiality issue. This conundrum of designing efficient and secure cloud storage becomes even complicated if the data is being shared among a group of users whose membership is not necessarily static.

To address the issue of secure group data sharing at a  cloud environment, the concept of proxy re-encryption (PRE) has been introduced in the literature [5]?[7], where a data originator ui delegates the privilege of re-encrypting a data m encrypted by ui for another user uj to a cloud storage such that (a) the cloud cannot see the plaintext of m using the privilege, but (b) uj can recover the plaintext from the re-encrypted message (by the cloud) with its own private key.

This strategy elegantly moves the user overhead to the cloud environment, but the existing PRE schemes suffer from one common security concern called the abuse of re-encryption.

In detail, once ui sends a re-encryption (privilege) key to the cloud storage for a new group member uj , uj can collude with the cloud storage operator to decrypt all of the old and messages originated from ui for the other group members even though uj is not authorized to access them.

To deal with this issue, the conditional proxy re-encryption (CPRE) has been introduced [8], [9]. In CPRE, ui creates encrypted messages as well as re-encryption keys (one for each member of a group) with a certain condition value (for the whole group). In detail, given a group, ui first selects a condition value w. Then, use w and its own private key to encrypt the messages to be shared. At the same time, ui create a re-encryption key for each member of the group using w and the public key of the member. Then, the encrypted messages, w, and the re-encryption keys are sent to the cloud storage for message re-encryption and distribution like PRE.

Once the membership of the group is changed, ui selects a new condition value w? and repeat the process for the new messages generated after the group change as well as the existing messages in the cloud storage. In this way, any revoked member left the group cannot access new messages, and any new member cannot access old messages.

In [15], Son et al. pointed out that the existing CPRE can suffer from a serious efficiency issue if the size of the group is large and the membership of the group changes frequently. This is because whenever membership changes, the re-encryption key for each group member is newly generated by each data originator and the existing messages in the cloud have to be encrypted again using this new condition value.

To alleviate the overhead, they proposed an efficient CPRE (E-CPRE) in which whenever the membership of the group changes, a data originator needs to select a new condition  2014 IEEE INFOCOM Workshops: 2014 IEEE INFOCOM Workshop on Security and Privacy in Big Data     value and sends it to the cloud server, but does not need to create and upload the re-encryption keys for the other group members. When the group membership changes, E- CPRE works more efficiently than the existing CPRE since it reduces the overhead of the data originator to compute new re- encryption keys and upload them to the cloud. However, both CPRE and E-CPRE require to encrypt the existing messages on the cloud using the new condition value and upload them.

As a result, they are inefficient for secure big data group sharing in cloud environment.

In this paper, we introduce an improved version of E-CPRE, namely the outsourcing CPRE scheme (O-CPRE). Unlike the other existing CPRE schemes including E-CPRE, in O-CPRE, the only tasks required for the originator of messages to perform when the group membership is changed are (a) computing a condition value changing key (CCK), which  includes a new condition value, and (b) sending the CCK to the cloud storage. Then, the cloud  storage will use the CCK to transform existing ciphertexts such that the messages inside the ciphertexts are encrypted using the new conditional value.

Clearly, the overhead of the message originator under the group membership change is drastically reduced. In addition, the advantage of O-CPRE over E-CPRE (and the other existing CPRE schemes) is getting magnified as the amount of the data in the cloud storage increases. As a result, O-CPRE is much more desirable than the other existing CPRE schemes for secure group big data group sharing in cloud environment.

The rest of this paper is organized as follows. Section II discusses our system and security models. In Section III, we introduce some preliminaries. Our main contribution, the new conditional proxy re-encryption scheme with much lower user overhead, is presented in Section IV. The security and efficiency analysis of the proposed scheme is in Section V.

Finally, we conclude this paper in Section VI.



II. SYSTEM MODEL AND SECURITY MODEL  A. System Model  Fig. I. illustrates a system model for data sharing in cloud computing. We define three different entities and they can be identified as follows.

? Outsourcing Server: This entity has important role in our system model. Outsourcing Server is to complete delegated expensive operations to overcome the disadvan- tage that the re-encryption key generation and decryp- tion phase in typical CPRE requires a lot of overload operations at client. In addition, we assume a honest- but-curious system model. The outsourcing server in this model runs a given protocol as best as it can and pays attention to client?s data simultaneously. Therefore, there is possibility of passive attacks such as looking at content of data or eavesdropping in data transfer process. Since the cloud server can take on a role of outsourcing server, in the following descriptions we will use outsourcing server and cloud server interchangeably.

Fig. 1: System Model.

? Cloud Storage: It provides the users with computing and storage resources in pay-per-use basis. The cloud storage maintains the users? ciphertexts, re-encrypts, and sends data on the request of a customer. In the following descriptions, we will use ?Cloud Storage? and ?Cloud? interchangeably.

? Client: This entity has large data files to be stored in the cloud and relies on the cloud for data maintenance and computation. Clients can be either individual consumers or organizations. The client can connect to the cloud with various devices. It includes resource-constrained mobile devices such as smart phone or tablet. Therefore, it can be relieved of the burden of maintaining and computation by storing the large data files in the cloud storage. In our environment, a client can be the originator of data files as well as destination of data sharing.

B. Security Model  We argue that the data sharing scheme is secure when it satisfies the following conditions.

(a) No polynomial time extractor exists that can recover the  original data files by carrying out partial decryptions. This condition is applied to the outsourcing server.

(b) No polynomial time extractor exists that can generate re- encryption key by carrying out partial re-encryption key computation. This condition is applied to the outsourcing server.

(c) No polynomial time extractor exists that can recover the condition value or insert another condition value to the ciphertext. This condition is applied to the cloud.



III. PRELIMINARIES A. Notations  The notation used in this paper are listed in Table 1.

2014 IEEE INFOCOM Workshops: 2014 IEEE INFOCOM Workshop on Security and Privacy in Big Data     TABLE I: Notations.

Notation Description q k-bit prime number Zq Integers modulo q  G,GT Cyclic group with prime order q g Generator of G e Bilinear pairing that satisfies with G? GT Ui Client i  pki, ski Public/private key pair of Ui n Polynomial in k m Data, m = {0, 1}n w Condition value r Random number that is included in G s Random number that is included in Z?q  CTi Ciphertext generated by Ui RKpart j Partial re-encryption key for j RK(i?j) Re-encryption key for Ui ? Uj CCK Condition value Changing Key H1 {0, 1}? ? Zq H2 {0, 1}? ? G H3 G ? Zq  B. Assumption  In this paper, we establish following two assumptions.

? Assumption 1: The proposed scheme assumes that there  is no collusion between a client and the cloud. A client does not send and receive information that is necessary to decrypt data to/from the cloud.

? Assumption 2: The proposed scheme assumes that a client does not share its condition values with other clients.

C. Cryptographic Background  Next, we introduce two important definitions.

Definition 1 (Bilinear map). A bilinear map is a map e : G?G? GT with the following properties [11].

(a) Computable: there exists an efficiently computable algo-  rithm for computing e, (b) Bilinear: for all h1, h2 ? G and a, b ? Zp, e(ha1 , hb2) =  e(h1, h2) ab, and  (c) Nondegenerate: e(g, g) ?= 1, where g is a generator of G.

Definition 2 (DBDH). The Decisional Bilinear Diffie-Hellman (DBDH) problem in groups (G,GT ) is, given a tuple (g, ga, gb, gc, Z) ? G4 ? GT with unknown a, b, c ?R Zq , whether Z = e(g, g)abc. A polynomial-time algorithm B has advantage ? in solving the DBDH problem in groups (G,GT ), if  |(Pr[(g, ga, gb, gc,Z = e(g, g)abc) = 1] ? Pr[(g, ga, gb, bc,Z = e(g, g)d) = 1])| ? ?,  where the probability is taken over the random choices of a, b, c, d ? Zq , the random choice of g in G, and random bits consumed by B.



IV. PROPOSED SECURELY OUTSOURCING CPRE  When a condition value needs to be changed, the originator has to generate new condition value. Then, the originator generates CCK which contains new condition value and sends  it to cloud. Note that CCK is generated through exponential operations and thus the condition value is protected by discrete logarithm problem. Once the cloud storage receives CCK, it performs pairing operations with CCK and multiplies it with stored ciphertexts to change old condition value. Since the cloud can transform all the ciphertexts that include old condition value using CCK, the originator does not need to manually retrieve the ciphertexts to change condition value like the other existing CPRE schemes.

Additionally, O-CPRE partially delegates the operations which are traditionally burdened to the clients in the existing CPRE to the cloud and further reduce the overhead of client in two ways. First, our scheme delegates re-encryption key generation process. In detail, we introduce a new two-phase re-encryption strategy. The first phase is performed by the cloud and the second phase is performed by the originator after receiving the result from the first phase. Although a re- encryption key generation process is performed only once at the initial setup of the system, our scheme can significantly reduce a burden of the clients by delegating exponential computation to the cloud. Second, our scheme moves a part of the decryption process from the clients to the cloud. That is, per the client?s request of partial decryption, a cloud server performs pairing operation with the public key of the client and a part of the re-encryption key for the client. After receiving result of the partial decryption from the cloud, the client can complete the decryption with a single exponential operation.

A. Setup  On input a security parameter 1k, the setup process first determines (q,G,GT , e). Next, the cloud chooses g ?R G, and five hash functions H1, H2, H3, H4, and H5. The global parameter is  ((q,G,GT , e), g, n,H1, H2, H3).

The client generates a public/private key pair (pki, ski). The client picks xi ?R Zq , and computes g(xi). The private key is ski = xi and the public key is pki = g(xi).

B. Re-encryption Key Generation  To outsource re-encryption key generation process, we construct that re-encryption key can be generated through two diffrent phases. First, Outsourcing server computes partial computation that needs heavy exponential operation. Then the client generates re-encryption key through one multiplication.

Using this method, computational overhead of mobile client can reduce drastically.

The Ui who is the originator of the ciphertext, can generate the re-encryption key as meaning of allowing Uj to share the data. A client requests partial re-encryption computation with issuing gs?ski , then outsourcing server computes following partial re-encryption key:  RKpart j = pk H3(g  s?ski ) j .

2014 IEEE INFOCOM Workshops: 2014 IEEE INFOCOM Workshop on Security and Privacy in Big Data     On receiving this, The Ui completes the re-encryption key as  RK(i?j) = (rk1, rk2)  rk1 = RKpart j ? gs ? r?ski = r?ski ? pks+H3(gs?ski )j ,  rk2 = g s?ski .

C. Data Encryption  CPRE scheme has two encryption levels. The first level encryption generates a ciphertext which does not allow re- encryption. Therefore, the first level ciphertext is generated without condition value. And the second level encryption generates a ciphertext which allows re-encryption. The second level ciphertext includes condition value which is used to con- trol decrypt permission. The client can chooses the encryption level depending on the importance of the data. The first level ciphertext can be generated by following process.

The Ui first picks R ?R G and s ?R Z?q . The client com- putes r = H1(m,R), and generates the first level ciphertext CTi = (C1, C2, C3, C4) as  (gr, R ? e(g, pki)?r?s?H5(pksi ),m?H3(R), gs).

For data sharing, the client generates the second level ciphertext by following process:  CTi = (C1, C2, C3, C4)  C1 = g W ,W = H1(w)  C2 = e(pki, r) W  C3 = m ? e(g, g)s C4 = H2(C1, C2, C3).

Then, the client sends this encrypted data to the cloud.

D. Data Re-encryption  The cloud can re-encrypt the CTi by Uj?s request. Re- encryption process is as follow:  CTj = (C1, C2, C3, C4)  C1 = C1,  C2 = C2 ? e(C1, rk1) = e(pki, r)  W ? e(gW , r?ski ? pks+H3(gs?ski )j ) = e(gW , pk  s+H3(g s?ski )  j ),  C3 = C3 = m ? e(g, g)s, C4 = rk2.

E. Changing Condition Value  In previous CPRE scheme, a client has to receive its own ciphertext and encrypt it again with new condition value to change condition value. It is cymbersome to client. Therefore, we design the system where cloud can change condition value by condition value changing key that issued by a client. To  change condition value, the client performs following process with newly generated condition value, w?:  W ? = H1(w?) t = W ? ?W.

The client sends gW ?  and rt to the cloud. Now, cloud generates new C2 that has newly issued condition value by performing following process:  C ?1 = g W ? ,  C ?2 = C2 ? e(pki, rt) = e(pki, r)  W ? .

F. Partial Decryption  Surely, a client can decrypt a ciphertext with whole decryp- tion process as well as delegate to make outsourcing server computing partial decryption process. To outsource partial decryption, we use condition value as secret factor. Since out- sourcing server cannot obtain condition value in our scheme, this secret factor makes partial decryption possible without revealing private key or original message. For a client?s request of partial decryption, outsourcing server computes following process:  CTpart = C2  e(C1, pk H3(rk2) j )  = e(gW , pksj ) ? e(gW , pkH3(s?ski)j )  e(gW , pk H3(s?ski) j )  = e(gW , pksj ).

The outsourcing server sends CTpart to the Uj .

G. Data Decryption  The Ui can decrypt the first level ciphertext by following process. First, the Ui computes  R = C2 ? e(C1, C4)ski?H5(C ski 4 ), and m = C3 ?H3(R).

Next, the Ui checks g(H1(m,R)) = C1 to confirm the validity of the data.

Uj can decrypt the partial decrypted ciphertext by following  process. The Uj can obtain a plaintext only if it knows the condition value.

m = C3  CT 1/(H1(w)?skj) part  = C3  e(gW , pksj ) 1/(H1(w)?skj) .



V. ANALYSIS OF PROPOSED SCHEME  A. Security  This subsection analyzes the security of the method pro- posed on the security model in Section 4.2. The main purpose of the method proposed is to delegate heavy computational  2014 IEEE INFOCOM Workshops: 2014 IEEE INFOCOM Workshop on Security and Privacy in Big Data     TABLE II: Comparison of Computational Overhead in client side  CPRE [8] Efficient CPRE [15] Proposed Scheme Re-encryption key  generation 4te + 3tm + 2th 3te + 2tm + 1th 3te + 3tm Decryption 1tp + 2te + 1tm + 2th 1tp + 2te + 3tm + 2th 1te + 2tm + 1th Changing  a condition value 1tp + 4te + 4tm + 3th 1tp + 2te + 1tm + 2th 2te + 1th  overhead during data sharing process through CPRE. There- fore, we need to prove that the proposed scheme can securely delegate a computation of CPRE.

Theorem 1. The proposed scheme is secure against chosen- ciphertext attack under DBDH assumption.

Proof. For robustness of our scheme, we make use of the idea in [8], [10] by making relationship between sub re- encryption keys. The design of scheme proposed is based on n-Quotient Bilinear Diffie-Hellman Assumption, the scheme shows security by calculating complexity of DBDH. The re- encryption key consists of two values, (rk1, rk2) and by including H3(pkrk2B ) = H3(pk  gs?ski B ) to the rk1, this makes  relationship between rk1 and rk2. In this way, the proposed scheme can have robustness for the chosen ciphertext attack. In [8], they already proved the security against chosen-ciphertext attack, we do not repeat verification in detail.

Theorem 2. An outsourcing server cannot recover a plaintext by carrying out multiple partial re-encryptions.

Proof. To outsource decryption securely, we use a condition value as blinding factor which is the shared secret among the group of users. Through this blinding factor, our scheme is able to delegate partial decryption operation to outsourcing server without private key or plaintext leakage. Additionally, we argue that the condition value is hard to recover under the DBDH assumption.

Theorem 3. An outsourcing server cannot generate a new re- encryption key by carrying out multiple partial re-ecnryption key computations.

Proof. A first re-encryption key rk1 in our scheme consists of two part. First part is computed by outsourcing server and second part is computed by client. A client can complete a re-encryption key by merging two parts. Here, first part of rk1 has only public value. The outsourcing server adds a hash value to the robustness of CPRE. Although the outsourcing server has a lot of this public values and re-encryption keys, it needs to know additional data to generates a new re-encryption key. The outsourcing server has to know s or r and it is secure under difficulty of discrete logarithm problem [12].

Additionally, we assumed that honest-but-curious system of outsourcing server and outsourcing server sends validity value with RKpart. Therefore, we omit the proof about forging a RKpart that the outsourcing server generates it with another public key rather than requested public key.

Theorem 4. A cloud cannot recover the condition value or  insert another condition value to the ciphertext by carrying out multiple condition value changing processes.

Proof. A client has to send gW ?  and rW ??W to change  condition value. To forge a condition value, the cloud needs to compute rx?w (where x is a condition value that the cloud wants to forge). But, it is computationally impossible to the cloud restoring W from gW and computing rx?w without having r.

B. Efficiency  Our main design objective of O-CPRE is to delegate the heavy computational overhead on the client side (especially the data originator) to the cloud storage during data sharing in mobile cloud. The greatest advantage of our scheme is that the cost of expensive re-encryption key generation, decryption and condition value changing are significantly reduced by partially delegating the tasks to server. Apparently, O-CPRE performs much more eifficiently than the existing CPRE schemes from the client perspective. In Table. 2, we present the result of computational overhead comparison among CPRE, E- CPRE, and O-CPRE. In this table, tp, te, tm, th represent the computational cost of a bilinear pairing, an exponentiation, a multiplication, and a hash, respectively.

The computational overhead of re-encryption key generation process in proposed scheme seems similar to CPRE scheme.

Since a client can reuse the part of re-encryption key which is used to complete a re-encryption key, a client has higher effi- ciency for generating more re-encryption keys in our scheme.

Fig. 2 shows an overall simulation results in re-encryption key generation, decryption and changing a condition value aspects.Our experiment is implemented on an Intel core (TM) i7 processor running at 1.5 GHZ, 8.00 GB of RAM, and SSD Serial ATA 3.0 Gbit/s drive with a 16MB buffer. All algorithms are implemented using C language in Linux Ubuntu 12.04 LTS 32 bit. Our code uses pairing based cryptography (PBC) library version 0.5.12. All experimental results represent the average of 10 trials. Fig. 2 (a) shows comparison in point of re- encryption key generation among CPRE schemes. Because of our scheme can delegate re-encryption key generation process partially, it can provide high efficiency in client side. Our scheme can delegate approximately 92.5% of computation for re-encryption key generation. Since originator needs to receive public key of other client to generate re-encryption key. In our scheme, originator receives cloud computed partial re- encryption key instead of public key. Therefore, overall com- munication overhead is similar as previous CPRE schemes.

Fig. 2 (b) shows comparison in point of decryption among CPRE schemes. Using partial decryption function of our  2014 IEEE INFOCOM Workshops: 2014 IEEE INFOCOM Workshop on Security and Privacy in Big Data     Fig. 2: Simulation results  scheme, we can delegate approximately 61.7% of computation for decryption. Fig. 2 (c) shows comparison in point of chang- ing condition values. Our scheme can delegate approximately 30% of computation by CCK. These delegation means less computation is needed to sharing data using CPRE for mobile clients.



VI. CONCLUSION  In this paper, we propose an outsourcing CPRE scheme which can delegate heavy computation securely during data sharing in mobile cloud environment. The proposed scheme introduces outsourcing server which performs delegated oper- ations due to two characteristics. First, partial re-encryption key generation and decryption phases can be delegate to outsourcing server. Second, condition value changing phase can be delegate to cloud server with CCK which is new approach of our scheme. By delegating three phases of CPRE, our scheme can significantly reduce burden of a client.

