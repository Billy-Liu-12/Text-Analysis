High Performance Frequent Pattern Mining

Abstract? Mining frequent patterns is a fundamental data  mining task with numerous practical applications such as  consumer market-basket analysis, web mining, and network  intrusion detection. When database size is large, executing this  mining task on a personal computer is non-trivial because of  huge computational time and memory consumption. In our  previous research, we proposed a novel algorithm named FEM  which is more efficient than well-known algorithms like Apriori,  Eclat or FP-growth in discovering frequent patterns from both  dense and sparse databases. However, in order to apply FEM to  applications with large-scale databases, it is essential to develop  new parallel algorithms that are based on FEM and deploy this  mining task on high performance computer systems. In this  paper, we present a new method named PFEM that parallelizes  the FEM algorithm for a cluster of multi-core machines. Our  proposed method allows each machine in the cluster execute an  independent mining workload to improve the scalability.

Computations within a multi-core machine use shared memory  model to reduce communication overhead and maintain load  balance. With the collaboration of both distributed memory and  shared memory computational models, PFEM can adapt well to  large computer systems with many multi-core.

Keyword ? data mining; frequent pattern mining; association  rule mining; multi-core cluster; parallel algorithm; transactional  databases.



I.  INTRODUCTION  Frequent pattern mining is an important problem in data mining which is aimed to search for groups of itemsets, subsequences, or substructures that co-occur in a database with their frequency no less than a user-specified minimum support threshold. This mining task can be used to discover many types of relationships in large databases such as associations [1], correlations [2], causality [3], sequential patterns [4], episodes [5] and partial periodicity [6]. In addition to its numerous practical applications, it is also applied in data indexing, classification, clustering, especially association rule mining as well [7], [8].

Motivation: Although frequent pattern mining has a simple computational model, this task is computationally intensive,  I/O intensive, and requires large computing resources especially memory [9]. In our previous research [27], [28], we proposed a novel approach for frequent pattern mining that combines mining strategies of two well-known algorithms Eclat [10] and FP-growth [11]. The FEM algorithm developed from this mining approach performs better than many popular algorithms like Apriori [1], Eclat or FP-growth on both dense and sparse databases. However, our experiments show that mining on very large databases (e.g. web document databases or integrated biological databases) requires parallel frequent pattern mining methods to efficiently utilize computing resources of large high performance computer systems such as clusters.

For over a decade, many parallel and distributed algorithms have been proposed [8], [23], [30], [31]. However, most of these methods were developed for shared memory systems or distributed memory systems alone. Clusters of multi-core machines is the current trend in high performance computing which requires new algorithm and system design that can take advantage of both the shared and distributed memory environments. Although clusters offer a much higher computing power, they pose major challenges in design and implementation of efficient high performance algorithms. The goal here is to design an efficient and fast parallel and distributed frequent pattern mining task for large-scale applications.

Contribution:  In summary, the contributions of this paper are as follows:  (1) We propose PFEM, a parallel method based on FEM [27] for large-scale frequent pattern mining on multi-core  clusters. PFEM can improve the scalability by distributing  independent mining workload over the multi-core  machines of the cluster and utilizing shared memory  computational model to reduce communication overhead  as well as maintain the balance of the workload.

(2) Because of the similarities of FEM and FP-growth, our proposed method of combining distributed memory and     shared memory computational models can be also applied  to parallelize FP-growth-like algorithms [11].



II. OVERVIEW OF THE FEM ALGORITHM  A. Frequent Pattern Mining Problem  The frequent pattern mining problem aims to search for groups of itemsets, subsequences, or substructures that co- occur in a database with their frequency no less than a user- specified minimum support threshold. For example, a set of items (itemset), such as milk and bread that appear frequently together in a database is a frequent itemset or frequent pattern.

In a typical transactional database, the number of distinct single items and their combinations are usually very large. For a small minimum support threshold, the number of generated itemsets can be extremely large. Hence, it is a great challenge to design algorithms for mining frequent patterns that scale with memory size and run in reasonable time [9].

B. FEM: An Adaptive Method for Mining Frequent Patterns from Dense and Sparse Databases  Many algorithms have been proposed for frequent pattern mining [1], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26]. However, most of them behave differently on different databases making it difficult for users to select a suitable method for their applications. To address this issue, we have developed a new algorithm called FEM that combines mining strategies of two well-know algorithms Eclat and FP-growth to unify their merits and adapt mining behavior to characteristics of databases. Our experimental results show that FEM performs efficiently on both dense and sparse databases [27], [28]. The FEM algorithm includes three main tasks:  ? FP-tree construction: Database is scanned for the first time to find the frequent items and create the header table. A second database scan is conducted to get frequent items of each transaction. Then, these items are inserted into the FP-tree in their frequency descending order.

? FP-tree mining: This task uses the mining solution of FP- growth to construct the conditional FP-trees and recursively mines these trees to find the frequent patterns.

However, before a conditional FP-tree is constructed, it will check the size of the appropriate conditional pattern base. If its size is smaller or equal to a threshold K (e.g.

K=128), the conditional pattern base will be transformed into TID bit vectors and a weight vector and the mining process switches to the TID-bit-vector mining task.

? TID-bit-vector mining: This task obtains the TID bit vectors and continues searching for frequent patterns recursively by logical ANDing these bit vectors. The new patterns are constructed by concatenating the suffix pattern of previous steps with the newly generated frequent patterns. This mining task is inspired by Eclat?s mining strategy. However, TID bit vectors are used instead of the TID-lists for their efficiency as shown in [8].



III. PFEM: PARALLEL FEM FOR MULTI-CORE CLUSTER  A. Multi-core Cluster Architecture  A typical multi-core cluster is usually a network of many  multi-core machines (nodes) with Gigabit Ethernet/Infiniband  interconnection. Each node can have one or many multi-core  chips which share main memory. Cores on a single chip can  have private and shared caches. Figure 1 shows an example  architecture of a typical dual six-core cluster in which two  chips of a node share main memory; six cores of a chip share  L3 cache and each core has private L1 and L2 caches.

Communication latency among cores on the same chips is  smaller than among cores on different chips because of the  impact of shared cache. Communication latency between cores  on different nodes is largest because of large latency of  interconnection network among the nodes.

Figure 1: Architecture of a Typical Cluster with Dual Six-core nodes  B. Challenges in Developing a Parallel Algorithm bBased on  FEM  Scalability and load balancing are two major desirable  characteristics of a parallel frequent pattern mining algorithm  used in large-scale mining applications. In this research, we  aim to develop a parallel algorithm for FEM that runs fast and  scales well on multi-core clusters. There are several challenges  to be solved in order to obtain high scalability and speedup  [9].

? Memory consumption. For large databases or mining with very low minimum support, the corresponding FP-trees  are very large and may not fit in main memory. Hence, it  is necessary to partition the database into smaller ones  that fit in the main memory of each of the nodes.

? Data communication: parallel frequent pattern mining algorithms like FEM usually requires huge  communication and synchronization to construct FP-trees.

Core Core Core  Memory  L3 Cache  Core Core Core  Core Core Core  L3 Cache  Core Core Core  Core Core Core  Memory  L3 Cache  Core Core Core  Core Core Core  L3 Cache  Core Core Core  Network  Node 0  ?    Node N-1     ? Load balancing: FEM works in a depth-first manner with recursive computational model. Thus, load balancing is  important to avoid unfair computational distribution.

? Other elements like cache architecture and I/O utilization can affect the program performance and scalability that  also needs to be considered.

In addition, our observations on many experimental results  conducted on our cluster [29] show that a parallel algorithm  that maximizes the use of shared memory, both main memory  and the shared caches, will minimize the communication  overhead and result in better speedup and scalability.

C. PFEM: Design of Parallel FEM For Multi-Core Cluster  PFEM is designed with consideration of challenges  presented in previous section. Its computational model  combines features of both distributed memory and shared  memory systems where communication among nodes in the  cluster will use message passing and communication among  cores in a node is done via shared memory. In the context of  this paper, we use core to indicate thread/process running on  one core of a node.

PFEM divides mining workload into M parts where  frequent pattern generation of each part is independent. M  should be much larger than the number of nodes in the cluster.

Data and computation of M parts will be distributed to nodes  in a dynamic manner to improve load balance. Cores in a same  node share same memory space and working data. Each core  will generate frequent patterns from shared data and store  them in its own local file. Finally, all frequent pattern sets are  combined for final mining results.

The detailed design of PFEM consists of two stages:  Stage 1 - Parallel FP-tree construction:  This stage executes the FP-tree construction task of FEM.

1. Create a local copy of database on each node in the cluster.

2. Each core in the cluster scans its data partition to compute local counts of all items. Then, global  counts of all items are computed using all local count  values.

3. Frequent items are specified and grouped into M groups. M is large enough for good load balancing.

4. Each node will be assigned a group of frequent items to construct a set of FP-trees where each tree is  associated with an item in the group. There are two  ways to do this task: (1) each core reads the whole  database and create FP-trees of one or several item in  the group; (2) all cores in a node read their portions  of the database to construct a set of FP-trees where  each tree is associated with one item in the group.

5. When all FP-trees of items in the group are constructed, the mining process starts by switching to  Stage 2 to find all frequent patterns from these FP-  trees.

Figure 2: Overview computational model of PFEM    Stage 2 - Parallel Frequent Pattern Generation This stage executes two tasks FP-tree mining and TID-  bit-vector mining of FEM.

1. Each node creates a queue that contains all FP-trees in the set of FP-trees generated in Stage 1.

2. Each core in a node obtains a FP-tree from this queue and starts mining using FEM approach. Frequent  patterns generated by each core are stored in its local  output file.

3. During the recursive mining process, new conditional FP-trees are generated and added to the queue. When  all frequent patterns of the FP-tree set are found,  mining process of the node will stop.

4. The algorithm will check if another group of frequent items created in Stage 1 is available. If there is an  unprocessed group, the algorithm will switch to Step  3 of Stage 1 to work on this group.

5. When all frequent patterns are found and the  frequent pattern generation completes, all local output files will be combined into a global output file  containing the datasets.



IV. CONCLUSION   In this paper, we present PFEM, a parallel version of the  FEM algorithm for mining frequent pattern on multi-core clusters. By addressing the computing resource challenges, PFEM can solve the computation and memory bottleneck as well as minimize the data communication and automatically balance the workload. This algorithm is expected to scale well and result in fast performance on the parallel systems. The proposed method of combining distributed memory and shared memory computational model can be also applied to parallelize FP-growth like algorithms and other related problem.

