DSOSW: A Deleting Strategy in Mining Frequent Itemsets over Sliding Window of Stream ?

Abstract  Most traditional mining approaches of frequent itemsets consider mainly on databases and thus can use the sec- ond storage and need multiple scans which are not adapted to mining of stream. Some new algorithms over stream?s sliding window are presented recently, which perform addi- tion and deletion over stream independently, so the common deleting strategy which removes the earliest transaction is used when the window slides. This paper considers both operations together to reduce the computation cost, conse- quently, three deleting strategies are proposed to improve the performance with little precision loss. The experimental results show that these strategies over current method are effective and efficient.

1 Introduction  Frequent itemsets(FI) mining is a traditional and impor- tant mining approach in data mining area. An itemset is fre- quent when its weight is not less than a threshold minimum support(MS) configured by user. Traditional FI mining ap- proaches mainly considered the problem of mining over transaction database, which should be stored in secondary storage so that multiple scan over data can be performed.

?This research is partly supported by the National Science Foundation of China(60673138,60603046), Key Program of Science Technology Re- search of MOE(106006), Program for New Century Excellent Talents in University and Chinese National Programs for Science and Technology Development(2005BA112A02).

There are mainly three kinds of FI mining approaches over database: the reading based, the writing based and the pointer based. The reading based methods only perform reading operation on database for multiple rounds such as Apriori[1]; the writing based methods write each projec- tions of existing FIs to secondary storage so that no repeated reading are used, MaxClique[3] and FP-growth[2] are the representation of this kind; the pointer based methods such as BUC[4] and H-cubing[5] derive from the second kind, which suppose database can totally load into memory so that pointers are used to point various parts of the data in- stead of writing the projection to storage, which much raises the performance.

Many previous studies contributed to the efficient mining of FIs in streaming data[7]-[16]. According to the stream processing model[17], the research of mining FIs over data stream can be divided into three categories: landmark windows[9][10][13][14], sliding window[8][11][12][15] and damped window[7][16]. Two types transaction- sensitive sliding window and time-sensitive sliding window are used in mining data streams. The basic processing unit of window sliding of first type is an expired transaction while the basic unit of window sliding of second one is a time unit.

In this paper, we consider the addition and deletion oper- ation in sliding window together to reduce the computation time thus propose new deleting strategies to improve the mining efficiency.

The rest of this paper is organized as follows: In Section 2 we present the problem definition of FIs mining over slid- ing window of stream. Section 3 focuses on the different  2008 International Symposiums on Information Processing  DOI 10.1109/ISIP.2008.30   2008 International Symposiums on Information Processing  DOI 10.1109/ISIP.2008.30     kinds of deleting strategies and describes the detail of so- lution scheme. Section 4 evaluations the performance and precision of these strategies with experimental results. Fi- nally, Section 5 concludes this paper.

2 Problem Statement  The general mining sliding window?s problem is to mine data in the most recent N transactions in a data stream.

Each transaction has a related id. Fig.1 is an example with I = {1, 2, 3, 4} and window size N=4. In this figure, dur- ing window?s sliding, a new transaction ? is added and an old transaction ? is deleted. Most works discuss these two operations separately. but in fact, if ? and ? have intersec- tion, there exist some operation redundant. For an instant, let ? = {1, 2, 3} be the added transaction and ? = {2, 3, 4} be the deleted transaction then we have to add and delete {2}, {3}, {2, 3}, in fact it affects nothing about the mining results but spends lots of computation time.

Figure 1. A runing example of sliding window  3 Deleting Strategy  Considering this problem, we perform both processes Addition and Deletion together. When we issue addition operation on a new transaction ?, we will consider if ? is involved in the deleted transaction, and nothing is issued if the above situation is satisfied. Similarly, when we issue deletion operation on an old transaction ?, we will check if it is involved in the added transaction to decide what to do. In this way, for the above transactions ? = {1, 2, 3} and ? = {2, 3, 4}, we only perform addition on item- sets {1},{1, 2},{1, 3} and {1, 2, 3} and perform deletion on itemsets {4},{2, 4},{3, 4} and {2, 3, 4}.

We use the traditional removing strategy which deletes the earliest transaction in sliding window, called the origi- nal deleting strategy in this paper. As shown in Fig.1, when transaction 5 {1, 3, 4} is added, transaction 1 {1, 2, 3} is deleted, that means only item {1} is ignored, so little com- putation time is reduced. Actually, because deleting trans-  Algorithm 1 Select(Nnew,Dra,?) 1: max = 0; 2: rid = -1; 3: for each transaction Nold in Dra do 4: compute ?(Nnew, Nold); 5: if max < ?(Nnew, Nold) then 6: max=?(Nnew, Nold); 7: rid = tid of Nold; 8: if ?(Nnew, Nold) > ? then 9: return tid of Nold;  10: return rid;  action is a passive process, we can implement a sliding win- dow with soft boundary, i.e., we can delete any transactions in sliding window[22]. Consequently, we use three remov- ing strategies as follows.

3.1 Naive Deleting Strategy  To full use rules to save more computation resources, the naive strategy is to scan the original sliding window entirely and find the most similar transaction to delete with the new one, if they are same, we will ignore both of the two oper- ations; on the other hand, scanning window is also a time cost operation, so actually it is infeasible.

3.2 Sample Deleting Strategy  To make up the drawback of the naive strategy, a sample scan can be used, in which we random pick ? transactions in sliding window and choose the most suitable one. Even though it can make finding operation faster, there is another drawback which naive strategy also has: the mining results will change little when it happens that we always find the alike deleted transaction arrived recently. The worst condi- tion is that each pair of transactions when adding and delet- ing are same, then the mining results never changed, that means it can?t reflect the trend of stream?s changing thus users can?t get the useful information.

3.3 Improved Strategy  To reflect the time characteristic of stream, we use two parameters minimal similarity ? and removable ratio ?(0 < ? < 1) to improve the removing strategy.

Definition 1: Given a new transaction ? and an existing transaction ?, we call ?(?, ?) = ( |???||?| +  |???| ? )/2 the  similarity of ? and ?.

Definition 2: Given a sliding window of stream D and its  earliest tid a, we call the subset of D from a to a + ?? |D| the removable area denoted as Dra, i.e., |Dra| = ? ? |D|.

In Algorithm 1, upon arrival of the new transaction ?, we will find the most suitable transaction in removable area Dra(line 3-9) before we begin deletion function, if we find a transaction ? s.t. ?(?, ?) > ? then we use ? as the delet- ing transaction(line 8-9), or we use ? s.t. ?(?, ?) is maxi- mum(line 5-7).

Figure 2. A runing example of new removing strategy  Fig.2 is a running example of the improved deleting strategy, in this example, we set removable ratio ? = 12 and minimum similarity ? = 23 . when a new transaction{1, 3, 4} arrives, the similarity ? = 13 < 23 for the earli- est transaction {1, 2, 3}, the similarity ? = 56 > 23 for the second earliest transaction {3, 4}, so we regard {3, 4} as the deleted transaction; similarly, {1, 2, 3} are regarded as the deleted transaction when the second new transaction ar- rives.

4 Experimental Result  We use MOMENT[8] as the baseline algorithm, which performs a closed frequent itemset(CFI) mining over sliding window of stream. All experiments are implemented with C++, compiled in Visual C++ of Windows XP and executed on a Pentium IV 3.2GHz PC with 512MB main memory.

The real-life datasets KDDCUP 2000(http://www.ecn.purdue.edu/KDDCUP) are adopted to evaluate these strategies, in which there are 59601 trans- actions and 497 distinct items. The maximal transaction size is 267 and the average transaction size is 2.5. We set the sliding window size |D| = 10000 and do experiments on 10000 consecutive sliding windows.

We first evaluate the running time cost of the three strate- gies over MOMENT. Here we set the sample size ? = 0.1 ? |D|, As shown in Fig.3, the MOMENT performs ad- dition and deletion independently, which have a little more running time cost the original deleting strategy which con- sider both operations together; the naive strategy take a little shorter time than the sample one, that is because even scan- ning stream costs time, but naive strategy can find the most adapted deleted transaction so that more operation on sub-  itemsets are ignored; furthermore, we set the parameters re- movable ratio ? = 0.1 and minimal similarity ? = 0.5 in improved strategy, the performance is almost same with the sample strategy because both strategy choose the same size to look for the deleted transaction.

Figure 3. Runining Time Cost  In original deleting strategy, each deleted transaction is the earliest one in sliding window, i.e., we delete the small- est tid transaction, so after mining, all the deleted transac- tions has the minimal tid?s summary. For example, in Fig.1, transaction 1 and 2 is deleted, and 1+2 is the minimal value.

Consequently we use the tid?s sum ? of deleted transaction to evaluate the time characteristic that these strategies can reflect. Fig.4 shows the trend of stream?s changing based on the left y axes, in which the naive and the sample strat- egy has almost the same ?, and that improved strategy has much less value of ? and is nearest to the original one, so it is the most time-related in these three strategies.

Figure 4. Time Characteristic and Precision  Finally we evaluate the precision of these strategies. We use R to denote the traditional mining results and Ri to de- note the mining results under strategies. Then the preci- sion of using strategy is compute as P (Ri) = Ri?RR . Fig.4     shows the worst precision for different strategies based on the right y axes. The naive strategy and the sample strategy have a less precision than the improved strategy, that is be- cause the deleted transaction of previous two strategies are always different from the original algorithm.

5 Conclusions  This paper considers addition and deletion together for mining sliding window of stream and thus presents a soft bound of sliding window, in which the deleted transaction is not limited to be the earliest one. Three strategies are pro- posed and discussed to improve the running time cost. The experimental result show that these strategies are effective and efficient.

