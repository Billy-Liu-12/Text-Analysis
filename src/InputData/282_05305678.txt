A framework of estimating software project success  potential based on association rule mining

Abstract-The paper proposes a framework to estimate the software project success potential using association rule mining technique. The framework aims to explore the relationship between the risk dimensions and project outcome. By the obtained association rules that take risk dimensions as the condition and the project outcome as the result, project managers can estimate whether a new project will be successful or failure based on its risk factor values as early as possible.

At last we design a project data generator to illustrate how the framework works.

Key words-software project success potential? association rule mining? genetic algorithms

I. BACKGROUND According to the SD Times? reports [1], Standish Group  Report 2006 showed that 35% of software projects started in 2006 could be categorized as successful; only 19% were outright failures; and 46% were challenged. Compared with the situation of 1994, software industry has made great progress.

However, according to Jone?s criteria [2], the challenged and failure software project were both regarded as unsuccessful, it means there were still 65 percent of projects were unsuccessful.

So the research on software project success still had a long way.

The research on the problem of software project success and failure begun in 1974 [3], and the most widely cited definition of project success was a project that was completed on time, within budget, and met customer requirements (or agreed upon business objectives) [4-7]. Following them, many case study approaches with enough data were used to analyze the success and failure factors about software projects [8-15]. Many research also showed that there were huge difference among various project stakeholders? perception about the software projects success and failure [16-19].

In above literatures, statistical analysis was often used to deduce the key factors that lead to software project success or failure. But sometimes we maybe more care about the questions such as whether the projects will be successful? What is the probability of the success? It is a pity that the literatures about how to estimate software project success potential early were limited. We propose a framework to estimate the software success potential using association rule mining technique. It can provide managers the feasible method to control risks effectively as early as possible, thus help the management in the decision making to increase success rate of software projects.



II. RELATED WORKS  A. Software Projects? Success Criteria Based on the definition of past literatures [4-7, 20-22], we  classify the software projects into two groups as successful and unsuccessful from the project managers? point of view.

Successful: The project is completed on time and on budget, with all features and functions originally specified.

Unsuccessful: the project is completed and operational, but over-budget, over the time estimate, and with fewer features and functions than initially specified; or the project is cancelled before completion or never implemented.

B. Software Project Risk Factors Since Bohem introduced Top 10 Risk Item List [23], more  and more scholars devoted their efforts to software project risk factors and their taxonomy [6, 24-29]. Based on these literatures? results, we categorize the software project risk factors into 6 dimensions shown in Table I. Considering the complexity and particularity of the environment factor, we take it as incidental risk factor, thus leave it out of account.



III. ESTIMATION OF SOFTWARE PROJECT SUCCESS POTENTIAL BASED ON ASSOCIATION MINING  The estimation of software project success potential is to induce the association rules between risk factors and project success in the form of if X then Y. Considering the number of induced useful rules maybe small if we take risk factors as condition and software project success as result, we try to construct the rules between the top-hierarchy concept of risk dimension and the success potential, which can make the induced estimation model more comprehensive, more useful and easier to understand.

A. The Framework of Software Project Success Potential Estimation The framework of our estimation framework includes five  steps.

Step 1: Data Collection. First we collect the probability and the impact of each risk factor and project outcome in historical projects. The output of Step 1 is a raw project database.

TABLE I.  CATEGORIES OF SOFTWARE PROJECT  Risk dimensions Risk factors  Risk dimensions Risk factors  D1 Team risk[25, 28-30]  1.Lack of required professional skills [25-29,31] 2.Conflicts among members[25,29] 3.Unfamiliar with the tasks [25,29] 4.Inadequate trained development team members [26-29] 5.Ineffective communication [25-28] 6.low morale[26-27,32-33] 7.lack of staff commitment [30,32] 8.Unavailability of key staff [32] 9.personnel shortfalls [23,30] 10. Lack of clarity of role definitions[31] 11.Inexperienced team members [8,25,30] 12. Reliance on a few key personnel[32]  D4 Project management risk [8, 25-30]  1.Lack of an effective project management methodology[25- 29,32,37] 2. Worse/poor project plan [25,28-29] 3.Ineffective track record or process monitored loosely [25-30] 4.Inadequate estimation of required resources[25-29,31,32,34] 5. Period underestimating [25,29] 6. Unrealistic budgets[23,26-27,30,32-33] 7. Unrealistic schedules[23,26-27,30] 8. Project milestones not clearly defined[25-29] 9. Not managing change properly [26-27,30] 10. Experience in project management[37]  D2 Requirements risk [8, 25, 28- 29]  1. Incorrect or misunderstanding system requirements or specifications[23,28-30,34-35] 2.Continuing changes for requirements [23,25,28-31] 3.System requirements not adequately identified [28] 4.System requirements conflict[25,29] 5.unclear system requirements[25,28-29] 6. Gold plating[23,30,32] 7. Creeping user requirements [32,33] 8. Changing scope/objections[35] 9. Creeping scope [34] 10. No define the finish scope[29] 11. Failure to manage end user expectations[30,35]  D5 Project complexity risk [25-29]  1. Introduction of new technology[26-28,35] 2. Using immature technology [25-26,28-29,32] 3. Links to other system[25-27,29] 4. High level of Technical complexity[25-29,31,36] 5. Bad expansibility in old system[26-27] 6. Project size[31-32,36] 7. Task or application complexity [31-32,36] 8. Use of technology that has not been used in prior projects[25,28] 9. Lack of experience with the software product type [32] 10. Inexperience with project?s platform/environment  [32] 11. Large number of complex external interfaces  [32] 12. Technological change[36]  D3 Customers? and users? risk [8, 25-29]  1.lack of customers? or users? involvement[25-27,29,34] 2.failure to gain customers?/users? commitment [26-28,31- 32,35] 3.conflict between users or user departments [25,27-29,31,34] 4.lack of customers? or users? cooperation [25,28-29] 5.Users resist to change[25-29] 6.Users with negative attitudes toward the project[25,28] 7. Inexperience with the user environment/operations[31] 8. Project personnel did not have required knowledge [26-27]  D6 Environment risk of organization [25, 29-30]  1. Lack of senior management commitment to the project[25- 27,29-30,32-33,35] 2. Unstable organizational structure[25,28-29] 3. Instability and lack of continuity in project staffing[26- 27,29,32-33,37] 4.Changes of organizational management [25,28-29] 5. Negative impact by cooperation strategy[28-30] 6.Manage organization change concurrently[37] 7. Lack of organizational maturity [32]  Step 2: Data Preprocessing.

1) Compute the risk exposure of each project risk factor.

Suppose the risk probability, impact and risk exposure of the jth (j=1,?,Lk)risk factor of the kth  (k=1,2,?,6) risk dimension in the ith (i=1, ? ,m) project are ( )  kLm k ij  k pP ?  = ,  ( ) kLm  k ij  k cC ?  = and ( ) kLm  k ij  k rR ?  =  respectively, then k ij  k ij  k ij cpr ?=  ' .

2) Compute the risk exposure of each project risk dimension.

Suppose k j?  is the weight of the jth (j=1,?,Lk) risk factor of the  kth (k=1,2,?,6)risk dimension. ( ) 1?= mkik rdRD is the risk exposure of the kth risk dimension in the ith (i=1,?,m) project,  then ( )?  =  === kL  j  k ij  k j  k i kmirrd   6,...,2,1;,...,2,1? .

3) Discretion of each project risk dimension?s risk exposure.

The discretion technique is used to reduce the number of continual attribute by partitioning the field of attribute into intervals. Here we make discretion technique to the risk exposure of each risk dimension in each project.

Step 3: Association Rule Mining. The input of this step is processed risk exposure of six risk dimensions and outcome of each historical project; the output is the association rules. The process of association rule mining is described in Part C.

Step 4: Association Rule Reduction. If the two induced rules are same, or the condition of one rule contains that of the other rule, they are redundant, and one should be removed from the rule sets by the following strategy: 1) If the two rules are same, remove either one; 2) If the condition of one rule contains that of the other, it is usually thought that the rule with shorter condition tends to contain the one with longer condition. So remove the rule that has the longer condition.

Step 5: Project Success Potential Estimation. With the update of the historical project database, the rule sets are updated to reflect the association rules that can estimate software project success potential effectively. For a new project, we can compute the risk exposure of each risk dimension by its risk factors, thus estimate the project success potential.

B. The Steps of Determining the Weight of Risk Factors Suppose there are m software projects, the risk exposure  matrix of the Lk risk factors of the kth (k=1,2,?,6) risk dimension in the ith (i=1,2, ? ,m) project is expressed by ( )  kLm k  ij k rR  ? = '' , (j=1,2,?,Lk)?.

Step 1, Because risk factors are cost indexes, it means the smaller the  'kR the better.

'kR can be standardized through (1).

''  ''  minmax  max  k j  k j  k ij  k jk  ij rr  rr r  ?  ? =  (1)  Where kijr are the non-dimensional quantities of 'k  ijr , '  max k  jr and '  min k  jr are the maximum and minimum of each risk factor of the kth risk dimension in each project respectively.

After step 1, we get the matrix? ( ) [ ]1,0, ?=  ? k  ijLm k  ij k rrR  k .

Step 2, For Lk risk factors of k risk dimensions in m software projects, the entropy ( )  kL k j  k j hH = of each risk factor can be  determined as [ ]1,0,ln ln    ??= ? =  k j  m  i  k ij  k ij  k j hffm  h ,  where ),,2,1;,,2,1(  k  m  i  k ij  k ij  k ij Ljmirrf === ?  =  . If 0=kijf , it is  meaningless, we can correct 0ln =kij k  ij ff  in that case.

Step 3, Compute the entropy weight ( )  '' ?  = kL  k j  k j ??  of each  risk factor by (2).

kL  j  k jk  k jk  j Lj hL  h k  ,...,2,1,   ' =  ?  ? =  ? =  ?  (2)  which satisfies 1  ' =? =  kL  j  k j? .

Step 4, Get the subjective weight kL k j  k k  ??? ,,,,1 of each risk factor of the kth dimension by Delphi. We can determine the weight of each risk factor using (3).

? =  = kL  j  k j  k j  k j  k jk  j   '  '  ??  ?? ?  (3)  which satisfies 10 ?? kj?   and 1  =? =  kL  j  k j? .

C. Association Rule Mining Using Genetic Algorithms Software project success potential estimation is a genetic-  based algorithm with steps as follows.

1) Individual representation. The individual gene is encoded with the binary character string of 0 and 1. As the condition of the rules, each risk dimension has two strings. The conclusion of the rules, which represent whether the project is successful or  failure have one string, thus the individual is codes with 13 binary character strings which is generated by the system randomly.

2) Initial population. Each individual is generated by the stochastic method, which corresponds to one solution of the problem. The initial population is the hypothetical solution set.

The number of initial population, which is represented by n, is taken as 30-160 generally.

3) Determine the fitness function of each individual. Here fitness function is the convex combination of the confidence and support of each individual. In the evolution process, the individuals that have higher fitness values can be inherited to the next generation.

4) Selection. We suppose the selection is copy the individuals that rank top n1 according to fitness value in the current population to the next.

5) Crossover and Mutation. We choose one-point crossover strategy and basic bit mutation strategy of the n1 individuals selected above.

6) Loop operations. Through selection, crossover and mutation we can get a new population, then repeat the step 3) - 5), until reach the stop condition.

7) The criteria for stopping the iteration. We specify the maximum iteration number maxgen, when it reaches maxgen the iteration stops.



IV. EXPERIMENTS AND DISCUSSIONS In order to perform a meaningful study, we need a lot of  project data. Because these project detail data can?t be obtained in the short time, we develop a project data generator firstly according to some parameters such as software project type, which is categorized according to the capital invested in the project. The project data generator is a tool which can generate risk probability and impact of each risk factor, as well as project outcome. With a project data generator the possibility of hand- tuning algorithms is reduced.

We generate 100 project data of different project types. The optimal solution is reached after 10 iterations of every type software project as Figure 1 shows.

Figure 1.  The software project success potential rules  The example rule we obtained is as follows.

Rule 1:  If the team risk is high and the customers risk is high and the requirements risk is high and the project complexity risk is high and the project management risk is high and the environment risk of organization is low then the project will be unsuccessful at the support of 0.01 and at the confidence of 1.

When we have a new project, we can compute its risk dimensions by the judgments of its risk factors. Suppose its environment risk of organization is low, while others are all high, we can determine that this project will be unsuccessful at the confidence of 1, and take measures to control these risks.



V. CONCLUSIONS This paper proposed a framework of software project  success potential estimation, which aims to find the association rules between software project risk dimensions and its success potential. Using obtained association rules, project managers can judge the project outcome as early as possible.

Next we will design the questionnaire to collect practical historical project data and create software project success potential rule base. We believe the rules are very important and helpful for software project managers to control their projects more efficiently and effectively.

