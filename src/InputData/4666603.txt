Mining Weighted Closed Sequential Patterns in Large Databases1

Abstract    Previous algorithms mine the complete set of sequential patterns in large database efficiently, but when mining long sequential patterns in dense databases or using low minimum supports, it may produce many redundant patterns and some uninterested patterns. In this paper, a novel weighted closed sequential pattern mining algorithm (WCSpan) is presented, which implements the closed sequential pattern mining with weight constraints, so the uninterested patterns could be pruned and the redundancy could be reduced. This algorithm can find fewer but interested weighted sequential patterns by weighted pruning method and hash structure. The experimental results show that WCSpan algorithm is more efficient than CloSpan and WSpan.

Keywords: data mining, weighted constraint, closed sequential pattern.

1. Introduction   Sequential patterns mining which has been developed as an essential topic for database research,   1 This work was supported by the Natural Science Foundation of  Hebei Province P. R. China, No.F2008000888  was first introduced by Agrawal[1]. The typical mining methods are Apriori-based candidate generation-test method[2] and projected-based pattern growth method[3]. For broad applications, many extended methods such as constraint-based sequential pattern mining, incremental sequence mining, multi-dimensional sequential pattern mining have been brought forward. These methods have very good performance in some areas, but there exists the same problem which will produce many redundant sequences when the pattern is long, so an amusing solution which is called frequent closed itemsets mining[4] has been proposed, it is efficient to the closed itemsets mining.

To apply this technology to sequential pattern mining, the CloSpan[5] algorithm which mines those patterns containing super-sequence without the same support is presented, it generates the less patterns and runs much faster than PrefixSpan algorithm. In addition, the BIDE[6] algorithm which mines frequent closed sequence without candidate maintenance was presented, it consumes less memory and can save much running time.

The above algorithms are useful to reduce the redundant patterns, but there are some limitations.

These algorithms treat sequential patterns uniformly while real sequential patterns have different importance. So we could give high weight to those   DOI 10.1109/FSKD.2008.97    DOI 10.1109/FSKD.2008.97     valuable patterns. For the weighted mining, most of previous works are related to the mining of association rules and discovery of frequent itemsets[7]. Recently U.Yun presents a new algorithm WSpan[8] which bases on the prefix projected sequential pattern growth approach and uses the pruning condition for finding weighted sequential patterns. Then the U.Yun presents the WCloset[9] to mine the closed weighted frequent patterns, it also can find frequent patterns only but not frequent sequential patterns.

In this paper a new algorithm WCSpan (weighted closed sequential pattern mining) is proposed to find weighted closed sequential patterns, it can prune the uninterested patterns and frequent subsequences early, resulting in the interested and least sequential patterns.

When the minimum support is low and the length of patterns is long the WCSP is efficient in running time.

This paper is organized as follows: Section 2 describes the problem definition. Section 3 gives the method of mining the weighted closed sequential pattern. Section 4 presents the experiment results.

Section 5 summarizes our work.

2. Problem Definition   Let I = {i1, i2, . . . , in} be a unique set of items, and a database DB= {T1, T2, . . . , Tn } where Ti (i?[1 . . . n]) is a transaction which contains a set of items in I. The Ds represents the projected database of the sequence s.

l(Ds) is the total number of items in the projected database. A sequence ? = (x1, x2, . . . , xn) is called a sub-sequence of another sequence ? = (y1, y2, . . . , ym), and ?  is called a super-sequence of the sequence ? if and only if ? 1?i1???in?m such that x1 ? yi1, x2 ? yi2, ? , xn ? yin .  If the support of a sequence s is no less than the minimum support threshold, s is called a frequent sequential pattern (FS). The set of closed frequent sequential pattern (CS) has no frequent super-sequence pattern with the same support.

The lexicographic sequence tree contains a sequence-extended sequence, s?sa={t1, t2, . . . , tm,  (a)}, or an itemset-extended sequence, s? ia={t1, t2, . . . , tm ? (a)}. Figure 1 shows the partial lexicographic sequence tree of the sequence in Table 1.

<>   <(a)>     <(b)>  <(ac)>  <(af)>  <(a) (e)>  <(ac) (f)>    <(ac) (a)>  <(ac) (f) (d)>    Figure 1. The lexicographic sequence tree.

Table 1. A sequence database (SDB).

SeqID        Sequence  1         <(ac)(f)(d)(e)> 2         <(a)(eb)dfh> 3         <(afc)ad> 4         <(eb)ade> 5         <e(af)h > 6         < ac(ed)> 7         <f(eb)a >  The sequence s? is called a backward sub-pattern of s if s<s?, s ? s? and l(Ds)=l(Ds?), then the process the searching descendant of s? is stopped in the prefix search tree. And the sequence s? is called a backward super-pattern of s if s<s?, s ? s? and l(Ds)=l(Ds?), then the descendants of s is transplanted to s?. So by subtree merging a lexicographic sequence tree can be replaced by a prefix sequence lattice L[5].

The weight of items is given according the purpose of different users, the biggest weight is denoted as MaxW. The weight of a sequential pattern is obtained by the average value of the weights that show the importance of each sequence. For example, given SDB in Table 1, WR1 as normalized weights of items in     Table 2, the weight of the sequence <(ac)(f)(d)(e)> is ((0.9+1.3+0.7+0.85+0.9)/5)=0.93. The weighted support is defined as multiplying the pattern?s support with MaxW of the pattern.

Table 2. An example of items with normalized weights.

Item   <a>  <b>  <c>  <d>  <e>  <f>  <h> Support  7    3    3    5    6    5    2 WR1   0.9   1.4  1.3  0.85   0.9  0.7  0.8  Definition of the weighted closed sequential patterns WCSP: A pattern is called WCSP if and only if (1) the weighted support is not less than a mini_support; (2) the support of the pattern is not less than a mini_support or the weight of the pattern is not less than a mini_weight; (3) the sequence doesn?t contain super sequence with the same support.

3. Mining Weighted Closed Sequential Pattern   In this section, a new mining algorithm WCSpan for finding weighted closed sequential pattern is presented.

In our approach, two weighted pruning methods and the hash table structure are used to find weighted closed sequential patterns. The weighted pruning methods is implemented according the definition of the WCSP, and the hash structure is the same as CloSpan algorithm, l(Ds) is used as a hash key in the hash table, when a new sequence comes we check its hash key if it exists in the hash table, then we link the sequence which has the same hash key in the hash table, if not we add its l(Ds) as an new hash key to the table.

This algorithm contains pruning step and checking step. In the first step the weighted pruning methods are used to prune the uninterested sequence; In the second step the process of the finding backward pattern is used to stop searching the corresponding sequence. When the backward sub-pattern is generated, we set a stop marker at the absorbed sequence, so the trace of the absorbed sequence can be reserved.

Algorithm WCMing (D, min-sup, min-weight, WCSP) Input: A database D, min-sup and min-weight.

Output: The weight closed sequential patterns WCSP.

1: initial WCSP null; 2: find all the weighted frequent 1-item sequence s1  in D; 3: for each sequence s1, do 4:   WCSpan (s,Ds, min-sup, min-weight, L); 5: eliminate non-closed sequences from L; Algorithm WCSpan (s, Ds, min-sup, min-weight,  L) Input: A sequence s, a projected database Ds,  min-sup, and min-weight Output: The prefix sequence Lattice L 1:check whether a sequence s? satisfy l(Ds?)=l(Ds); 2: if the sequence s<s? and s ? s? then 3:   modify the link in L, sign the absorbed  sequence with the stop marker; duplicate the subtree of the exist sequence to  the absorbed tree; 4: if the sequence s<s? and s ? s? then  5:   modify the link in L; 6:  return;  7: else insert s into L; 8: Scan Ds once, find each weighted frequent item  a if the following pruning conditions are satisfied.

Condition 1: (weighted support (support * MaxW) ? min_sup) Condition 2: (support ? min_sup or weight P ? min_weight)  9:   s can be extended to (s?a); 10:  else return; 11: for each valid a do 12:  Call WCSpan (s ? a, Ds ? a, min-sup,  min-weight, L) 13: return;  In line 1of the algorithm WCSpan the size of the projected database is checked first to save running time,     or the containing testing of each sequence will be costly. This check step is implemented by the hash structure, next we check whether the backward pattern is generated, then we modify the link in L and the corresponding pattern be absorbed.

When the case D<(a)(b)(c)>=D<(b)(c)>= D<(f)(b)(c)> is generated, by the CloSpan algorithm <(b)(c)> can be absorbed by <(a)(b)(c)>,so when<(f)(b)(c)> comes, the subtree of <(b)(c)> cannot be transplanted to <(f)(b)(c)>, for the trace of <(b)(c)> disappears. In line 3 of the WCSpan algorithm a stop marker is used when the backward pattern generates, we set the marker at the pattern whose searching process will be stopped, such as <(b)(c)>, then stop search <(b)(c)> and duplicate the subtree of the <(a)(b)(c)> to the subtree of <(b)(c)>, so when the <(f)(b)(c)> comes we do not need search its trace again and duplicate the subtree of <(b)(c)> directly.

In line 7 of the WCSpan algorithm two pruning conditions are used, given the SDB in Table 1, WR1 as normalized weights in Table 2, a min_support is 4 , a min_weight is 0.85, ?h? is pruned because its weighted support is less than 4, it does not satisfy the condition 1.

The support of ?c? is less than 4, but its weight support is more than 4, the ?c? is reserved, so the interested item is reserved by this pruning condition.

The last task of the algorithm is to eliminate non-closed sequence from L, sequential patterns starting with the stop marker is deleted, then the valid hash key is used to reduce the search space and the containment is used to check whether have sequences can be absorbed.

4. Experimental Result   In this section, we conduct our experiments on both synthetic and real datasets. We use a synthetic data generator which can be retrieved from IBM website, http://www.almaden.ibm.com/cs/quest. Essential parameters showed in table 3. WCSpan is written in C++ and experiments are performed on a 3.2GHz,  Pentium-4 PC with 1GB main memory, under windows XP Professional.

Table 3. Parameters for IBM quest  data generator.

0.001 0.002 0.003 0.004  minmum support threshold  r u n ni  n g  t i m e ( s e c )  Wspan  CloSpan  WCSpan   Fig 2. the running time of three  algorithms.

12 14 16 18  number of transctions  per customer  r un  n i n g  t i m e ( s e c )  Wspan  CloSpan  WCSpan   Fig 3. the running time with different  number of transaction.

Figure 2 shows the running time of three algorithms  using D10C9T2.5N9S6.5I3, with normalized weights  symbol        meaning D     Number of customers in dataset C     Average number of transactions per  customer T   Average number of items per transaction N     Number of different items S     Average length of maximal sequence I      Average length of transaction with  the maximal sequence     of items from 0.7 to 1.4, it illustrates WCSpan outperforms CloSpan by weighted pruning method, while CloSpan is much faster than WSpan because the redundancy is reduced. Figure 3 shows the running time under different average number of transactions per customer.

The experiments show that WCSpan outperforms the WSpan when the minimum support is low and the length of patterns is long, because the redundant pattern is absorbed. As the uninterested pattern is pruned early, WCSpan also save much time than CloSpan although need more memory.

5. Conclusion   In this paper, a new algorithm called WCSpan for mining weighted closed sequential patterns is presented.

It can prune the uninterested and frequent subsequence early, weighted constraint is used to prune the uninterested patterns and closed constraint is used to reduce the redundancy of frequent sequential pattern mining. So WCSpan can mine longer and least frequent sequence in a large data set but having the same expression with WSpan. The experiment results show when the minimum support is low and the length of patterns is long the WCSpan is more efficient than CloSpan and WSpan in running time.

