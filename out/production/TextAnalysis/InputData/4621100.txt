

Abstract: In the past, the FUFP-tree maintenance algorithm is  proposed to efficiently handle the association rules in incremental mining. In this paper, we attempt to modify the FUFP-tree maintenance algorithm for maintaining sequential patterns based on the concept of pre-large sequences to reduce the need for rescanning original databases in incremental mining. A fast updated sequential pattern trees (FUSP trees) structure and the maintenance algorithm are proposed, which makes the tree update process become easier. It does not require rescanning original customer sequences until the accumulative amount of newly added customer sequences exceed a safety bound, which depends on database size. The proposed approach thus becomes efficiently and effectively for handling newly added customer sequences.

Keywords: Data mining; sequential pattern; FUSP tree; large  sequence; pre-large sequence; incremental mining  1. Introduction  Mining useful information and helpful knowledge from these large databases has thus evolved into an important research area [1][2][3][5][6][7]. Depending on the classes of knowledge sought, mining approaches may be classified as finding association rules, classification rules, clustering rules, and sequential patterns, among others [6].

Among them, finding sequential patterns in temporal transaction databases is important since it allows modeling of customer behavior [4][14][15].

Mining sequential patterns was first proposed by Agrawal et al. in 1995 [4], and is a non-trivial task.

Although customer behavior models can be efficiently extracted by the mining algorithm in [4] to assist managers in making correct and effective decisions, the sequential patterns discovered may become invalid when new  customer sequences occur. Developing efficient approaches to maintain sequential patterns is thus very important to real-world applications. Lin et al. proposed the FASTUP algorithm [14] to maintain sequential patterns by extending the FUP algorithm [3]. Their approach works well except when newly coming candidate sequences are not large in the original database. If this occurs frequently, the performance of the FASTUP algorithm will correspondingly decrease.

Han et al. thus proposed the Frequent-Pattern-tree (FP-tree) structure for efficiently mining association rules without generation of candidate itemsets [9]. The FP-tree was used to compress a database into a tree structure which stored only large items. It was condensed and complete for finding all the frequent patterns. They showed the approach could have a better performance than the Apriori approach.

Cheng et al. proposed the IncSpan (Incremental mining of sequential pattern) algorithm for efficiently mining sequential patterns from tree structure [8]. It was used to compress a database into a tree structure which stored not only the frequent sequences but also the semi-frequent sequences. However, the IncSpan algorithm consider only when newly added customer sequences which not applicable in the real-world.

In the past, Hong et al. modified the FP-tree structure and designed the fast updated frequent pattern trees (FUFP-trees) [13] to efficiently handle newly inserted transactions based on the FUP concept [3]. The FUFP-tree structure was similar to the FP-tree structure except that the links between parent nodes and their child nodes were bi-directional. Besides, the counts of the sorted frequent items were also kept in the Header_Table of the FP-tree algorithm. Experimental results showed that the FUFP-tree maintenance algorithm could achieve a good performance for handling the new inserted transactions.

Hong et al. also proposed a novel and efficient      incremental mining algorithm capable of updating sequential patterns based on the concept of pre-large sequences[10][11][12]. A pre-large sequence is not truly large, but nearly large. A lower support threshold and an upper support threshold are used to realize this concept.

Since the database grows huge, the proposed algorithm becomes increasingly efficient especially useful for real-world applications.

In this paper, we thus attempt to modify the FUFP-tree maintenance algorithm to make the updated efficiently based on pre-large concepts for sequential patterns. A fast updated sequential pattern trees (FUSP tree) is proposed, which will make the tree update easier. It is extended from the FUFP-tree structure, similarly to FP-tree structure. An incremental FUSP-tree maintenance algorithm is also proposed for processing newly added customer sequences.

The proposed algorithm does not require rescanning the original database to construct the FUSP tree until a number of new transactions have been processed.

2. Review of Related Works  2.1. The FUP-tree algorithm  The FUFP-tree construction algorithm [13] is based on the FP-tree algorithm [9]. The links between parent nodes and their child nodes are, however, bi-directional.

Bi-directional linking will help fasten the process of item deletion in the maintenance process. Besides, the counts of the sorted frequent items are also kept in the Header_Table.

An FUFP tree must be built in advance from the original database before new transactions come. When new transactions are added, the FUFP-tree maintenance algorithm will process them to maintain the FUFP tree. The entire FUFP tree can then be re-constructed in a batch way when a sufficiently large number of transactions have been inserted.

2.2. The prelarge sequences algorithm  Maintaining sequential patterns is much harder than maintaining association rules since the former must consider both itemsets and sequences. The pre-large concept is used here to postpone original small sequences directly becoming large and vice-versa when new transactions are added. When new transactions are added to a database, they can be divided into two classes:  Class 1:new transactions by old customers already in the original database;  Class 2:new transactions by new customers not already in the original database.

Newly added transactions are first transformed into customer sequences, and those belonging to class 1 mentioned above are merged with corresponding customer sequences in the original database. Considering an original customer sequences and newly merged customer sequences in terms of the two support thresholds, the nine cases illustrated in Figure 1 may occur.

Large  Large  Pre-large Original database  New transactions  Small  Small  Case 1      Case 2      Case 3  Case 4      Case 5      Case 6  Case 7      Case 8      Case 9  Pre-large  Large sequences  Large  Pre-large Original customer  sequences  Newly merged customer sequences  Small  Small  Case 1      Case 2      Case 3  Case 4      Case 5      Case 6  Case 7      Case 8      Case 9  Pre-large  sequences  sequences  sequences sequences sequences   Figure 1. Nine cases arising from adding new customer sequences to an existing database   Cases 1, 5, 6, 8 and 9 will not affect the final large  sequences according to the weighted average of the counts.

Cases 2 and 3 may remove existing large sequences, and Cases 4 and 7 may add new large sequences. It has been formally shown that the sequences in Case 7 cannot possibly be large for the entire updated database as long as the number of customer sequences is small compared to the number of customer sequences in the original database. The formula is shown below.

t ? u  u  u  lu  S qS  S dSS  ? ?  ? ?  )(  ,       (1)  where t is the number of the newly added customer sequences, and q be the number of newly added customer sequences belonging to old customers, Su is the upper threshold, Sl is the lower threshold, and d is the number of customer sequences in the original database.

3. The proposed FUSP-tree maintenance algorithm  In the past, Cheng et al. proposed the IncSpan (Incremental mining of sequential pattern) algorithm for efficiently mining sequential patterns from tree structure [8].

It was used to compress a database into a tree structure which stored not only the frequent sequences but also the semi-frequent sequences. The mined sequential patterns are constructed into tree structure by the features of SES (sequence-extended sequence) and IES (itemset-extended sequence). If a sequence belongs to SES, the connected nodes are marked as s; otherwise, marked as i. IncSpan algorithm does not deal the problem of newly added customer sequence which already existing in the original      database.

In this paper, the FUSP tree is proposed to handle the  sequential patterns in incremental mining. The FUSP tree must be built in advanced from the initially original database before new customer sequences come. Its initial construction is similar to an FP tree [9] and FUFP tree [13].

The original customer sequences is first scanned to find the large 1-sequences and pre-large 1-sequences with their supports large than the predefined upper threshold Su and the lower threshold Sl. Next, the large and pre-large sequences are sorted in descending order by their frequency to construct the Header_Table and Pre_Header_Table, respectively. At last, the original customer sequences are scanned again to construct the FUSP tree according to the sequences order in the original customer sequences. If an itemset is contained in a sequence, the itemset is sorted by their frequency in descending order from Header_Table and Pre_Header_Table. When the linking between the nodes is the sequence-extended sequence (SES), the linking is marked as s; otherwise, when the linking between the nodes is the itemset-extended sequence (IES), the linking is marked as i. The construction process is executed tuply by tuply, from the first customer sequences to the last one.

After all customer sequences are processed, the FUSP tree is completely constructed.

Besides, the index table is constructed by composing all 1-sequences in the original customer sequences. For each 1-seqeunces, there is a corresponding list of customer IDs in which the 1-sequence is presented. The index table helps to efficiently find the small 1-sequences in the original customer sequences when the rescanning the original customer sequences is needed. Two global variables, c and b, are used to accumulate, respectively, the number of newly added customer sequences and the number of newly added customer sequences belonging to old customers since the last re-scan of the original database.

The detail of the proposed algorithm is described below.

The FUSP-tree maintenance algorithm: INPUT: A set of large and pre-large sequences in the  original database D consisting of (d+c) customer sequences, its corresponding Header_Table and Pre_Header_table which sorting the frequent 1-sequences and pre-large 1-sequences initially in descending order, its corresponding FUSP tree, a lower support threshold Sl, an upper support threshold Su, the index table for all 1-sequences with their corresponding customer IDs from the original customer sequences, the accumulative amount b of new customer sequences belonging to old customers, and a set of t newly added customer sequences transformed from new transactions.

OUTPUT:  A new FUSP tree for the updated databases by using the FSUP-tree maintenance algorithm.

STEP 1: Calculate the value of the first term in Formula 1 [12] as:  f = u  lu  S dSS  ? ?  )(  .

STEP 2: Merge the newly added customer sequences with the old sequences in the original database and count the value q, which is the number of the newly added customer sequences belonging to old customers.

STEP 3: Set b = b + q and calculate the second term u  u  S bS ?1    in Formula 1 [12] as :  h = u  u  S bS ?1  ,  where b is the accumulative amount of q since the last re-scan.

STEP 4: Scan the merged sequences to get all the 1-sequences and their counts.

STEP 5: Divide the sequences in the newly added customer sequences into three parts according to whether they are large, pre-large or small in the original customer sequences.

STEP 6: For each sequence I which is large in the original customer sequences, do the following substeps (Cases 1, 2 and 3): Substep 6-1: Set the new count SU(I) of I in the  entire updated database as: SU(I) = SD(I) + ST(I),  where SD(I) is the count of I in the Header_Table (original database) and ST(I) is the count of I in the newly customer sequences.

Substep 6-2: If SU(I)/(d+c+t-b) ? Su, update the count of I in the Header_Table as SU(I), and put I in the set of Insert_Seqs, which will be further processed in STEP 10; Otherwise, if Su > SU(I)/(d+c+t-b) ? Sl, remove I from the Header_Table, put I in the head of Pre_Header_Table with its updated frequency SD(I), and keep I in the set of Insert_Seqs; Otherwise, sequence I will become small after the database is updated; remove I from the Header_Table and connect each parent node of I directly to its child node in the FUSP tree.

STEP 7: For each sequence I which is pre-large in the original database, do the following substeps (Cases 4, 5 and 6): Substep7-1: Set the new count SU(I) of I in the  entire updated database as: SU(I) = SD(I) + ST(I),  Substep 7-2: If SU(I)/(d+c+t-b) ? Su, sequence I will be large after the database is updated; remove I from the Pre_Hedaer_Table, put I with its new frequency SD(I) in the end of Header_Table, and put I in the set of Insert_Seqs; Otherwise, if Su> SU(I)/ (d+c+t-b) ? Sl, sequence I is still pre-large after the database is updated; update I with its new frequency SD(I) in the Pre_Header_Table and put I in the set of Insert_Seqs; Otherwise, remove item I from the Pre_Header_Table and connect each parent node of I directly to its child node in the FUSP tree.

STEP 8: For each sequence I which is neither large nor pre-large in the original database but large or pre-large in the new transactions (Cases 7 and 8), put I in the set of Rescan_Seqs, which is used when rescanning the original customer sequences in STEP 9 is necessary.

STEP 9: If c + t ? f ? h or Rescan_Seqs is null, then do nothing; Otherwise, do the following substeps for each sequence I in the set of Rescan_Seqs: Substep9-1: Rescan the original customer  sequences to decide the original count SD(I) of I.

Substep 9-2: Set the new count SU(I) of I in the entire updated database as:  SU(I) = SD(I) + ST(I).

Substep 9-3: If SU(I)/(d+c+t-b) ? Su, sequence I  will become large after the database is updated; put I in both the sets of Insert_Seqs and Branch_Seqs and insert the sequence in the Branch_Seqs to the end of the Header_Table according to the descending order of their updated counts; Otherwise, if Su> SU(I)/(d+c+t-b) ? Sl, sequence I will become pre-large after the database is update; put I in both the sets of Insert_Seqs and Branch_Seqs, and  insert the sequences in the Branch_Seqs to the end of the Pre_Header_Table according to the descending order of their updated counts. Otherwise, do nothing.

Substep 9-4: For each original customer sequences with a sequence I existing in the Branch_Seqs, finding the corresponding sequences from the index table. If I has not been at the corresponding branch of the FUSP tree for the customer sequences, insert I at the end of the branch and set its count as 1; Otherwise, add 1 to the count of the node I.

STEP 10: For each new customer sequences with a sequence I existing in the Insert_Seqs, do the following substeps: Substep 10-1: For the new customer sequences  which already existing in the original database, If sequence I has not been at the corresponding branch of FUSP tree, insert I at the end of the branch and set its count as 1; Otherwise, add 1 to the count of the node I.

Substep 10-2: For the new customer sequences which are new customer transactions, if I has not been at the corresponding branch of the FUSP tree for the new transaction, insert I at the end of the branch and set its count as 1; Otherwise, add 1 to the count of the node I.

STEP 11: If c + t > f - h, then set d = d + c + t, c = 0 and b = 0; otherwise, set c = c + t.

In STEP 9, a corresponding branch is the branch generated from the large sequences in the transaction and corresponding to the order of sequences in the databases.

After STEP 11, the final updated FUSP tree by using the maintenance algorithm is constructed. The new transactions can be integrated into the original database. Based on FUSP tree, the desired large sequences for the updated database can be determined by using FP-growth mining approach as proposed in [9].

4. An example  In this section, an example is given to illustrate the proposed incremental mining approach for sequential      patterns based on FUSP tree. Table 1 shows a database to be used in the example. It contains 10 customer sequences and 9 items, denoted a to i. The index table is also constructed in Table 2 after scanning the original customer sequences.

Table 1. The customer sequences Cust_id Customer sequence  1 <(a)(b)> 2 <(c, d)(a)(e, f, g)> 3 <(a, h, g)> 4 <(a)(e, g)(b)> 5 <(b)(c)> 6 <(a)(b, c) 7 <(a)(b, c, d)> 8 <(e, g)> 9 <(f)(i)>  10 <(h, i)>   Table 2. The index table 1-seqeunces Corresponding customer IDs  <(a)> 1, 2, 3, 4, 6, 7 <(b)> 1, 4, 5, 6, 7 <(c)> 2, 5, 6, 7 <(d)> 2, 7 <(e)> 2, 4, 8 <(f)> 2, 9 <(g)> 2, 3, 4, 8 <(h)> 3, 10 <(i)> 9, 10   Assume Sl is set at 30% and Su is set at 50%. Here, not  only the frequent 1-sequences are kept in the FUSP tree but also the pre-large 1-sequences. The FUSP tree is then formed from the database, the Header_Table and the Pre_Header_Table. The results are shown in Figure 2.

{root}  a:5  b:3  c:1  a:1  g:1  e:1  g:1  e:1  b:1  b:1  c:1  c:2  g:1  e:1  s  ss  s s s  s  s  i  g:1  i  s  ii  is  Null s  Null s  Null s  Null  s  Null  s  Null  s  Header_Table Sequences Frequency Head  <(a)>            6  <(b)>            5  Pre_Header_Table Sequences Frequency Head  <(c)>          4  <(g)>           4  <(e )>           3   Figure 2. The Header_Table, Pre_Header_Table and the FUSP tree constructed    Assume the three new customer sequences shown in Table 3 appear. The proposed FUSP tree maintenance algorithm proceeds as the following. The global variables c and b are initially set at 0.

Table 3. Three newly added customer sequences  Cust_id Customer sequence 5 <(g)>  11 <(a)(b)(g)(i)> 12 <(a)(f, h)(i) >   The value of the first term in Formula 1 [12] is  calculated as:  f = 4 5.01  10)3.05.0(  )( = ? ?=  ? ?  u  lu  S dSS .

The three new sequences in Table 3 are merged with their corresponding old sequences in Table 1. Since only the customer sequence with Cust_id = 5 in Table 3 belongs to old customers in Table 1, q is thus set as 1. b = b + q = 0 + 1 = 1. The value of the second term in Formula 1 [12] is calculated as:  h = 1 5.01 5.0*1  =  ? =  ? u u  S bS .

The merged customer sequences first scanned to get the 1-sequences and their counts. The counts are actually the count increments due to insertion of newly customer sequences. After that, all the sequences a to i are divided into three parts, according to whether they are large (appearing in Header_Table), pre-large (appearing in Pre_Header_Table) or small in the original customer sequences. Each part is processed according the proposed FUSP-tree maintenance algorithm. The final results after STEP 11 are shown in Figure 3. Note that the final value of c is 3, and b is 1 in this example. The new value of b and c will be used for processing next new customer sequences.

Based on the FUSP tree shown in 3, the desired large sequences then be found by the FP-Growth mining approach as proposed in [12].

{root}  a:7  b:4  c:1  a:1  g:1  g:1  b:1  b:1  c:1  c:2  g:1  s  s  s s s  s  s  g:1 i  s  i  s  Null Null  s  Null  s  Null  s  Null  s  Null  s  Header_Table Sequences Frequency Head  <(a)>            8  <(b)>            6  <(g)>            6  Pre_Header_Table Sequences Frequency Head  <(c)>          4  s  g:1  s  g:1  s  Null  s   Figure 3. The final FUSP tree      5. Conclusions  In this paper, we have proposed a novel FUSP-tree structure and maintenance algorithm to efficiently and effectively handle newly added customer sequences in incremental mining. The construction of FUSP tree is extended from FUFP tree, which similarly to the FP tree.

When new customer sequences are added, the proposed incremental maintenance algorithm processes them to maintain the FUSP tree. It first partitions 1-sequences into nine parts according whether they are large, pre-large or small in the original customer sequences and in the newly added customer sequences. Each part is processed in its own way. The proposed approach can thus achieve a good trade-off between execution time and tree complexity.

Acknowledgements  This research was supported by the National Science Council of the Republic of China under contract NSC 96-2221-E-390-003.

