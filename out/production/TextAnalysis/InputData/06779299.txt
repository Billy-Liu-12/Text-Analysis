Multilevel Hybrid Graph Partitioning Algorithm

Abstract?Balanced graph partition is a type of graph partitioning problem that divides the given graph into components, such that the components are of about the same size and there are few connections between the components. The existing approaches partition the graph initially in a random manner which has a very high impact on determining the final quality of the solution. Recently, Multilevel Partitioning methods are proven to be faster among other approaches. This paper proposes a multilevel hybrid algorithm for balanced graph partitioning. Here graph is initially partitioned using Balanced Big method in order to improve the initial solution quality.

Further, the quality of the obtained solution is improved using local search refinement procedure. The experimental results indicate that the relatively good initial partitions, when subjected to local search techniques like tabu search and hill climbing, results in better solutions. The experimental results also indicate that for the proposed approach, when the number of partitions increase (are high), the quality of the solution is better than the currently available solutions reported in the existing approaches.

Keywords?Random Initial Partition, Local Search, Hill Climbing, Refinement, solution quality

I.  INTRODUCTION Graph partitioning falls under the category of NP-Hard  problems. Important applications of graph partitioning include scientific computing, partitioning various stages of a VLSI design circuit and task scheduling in multi-processor systems [2]. Recently, the uniform/balanced graph partition problem has gained importance due to its application for clustering and detection of cliques in social, pathological and biological networks [2]. Therefore, in recent years, many efforts have been made in devising a number of efficient and powerful heuristics to find reasonably good partitions. The existing approaches for graph partitioning from the literature are discussed below. Breadth First Search (BFS) method is the simplest graph partitioning technique [18]. BFS approach is generally applied to partition the graph into two partitions i.e., k=2. Though it is simple, it is efficient only for planar graphs and overlay graphs. Spectral partitioning methods [9] are efficient and the most widely used technique. But due to the fact that it consumes too much of time for computing the Eigen vectors for the adjacency matrix of the graph, this method cannot be applied for larger graphs. Geometric partitioning methods [17] exploit the network flow technique and identify  the cut of the graph. In graph theory, cut is a partition of the vertices of a graph into two disjoint subsets that are joined by at least one edge. Partition of graph identified using geometric algorithms tend to be fast but often yield partitions that are worse than those obtained by spectral methods [17]. These algorithms are applicable only if the coordinates are available for the vertices of graph. The geometry of the graph is not considered in many applications like VLSI layout [17].

Multilevel graph partitioning algorithms [19,12]  are the class of graph partitioning algorithms reduce the size of the graph by coarsening vertices and edges, partitions the smaller graph (i.e., coarsen the graph), and then uncoarsens it to construct a partition for the original graph.

In general, multilevel approaches follow the strategy of decrease and conquer. The decrease and conquer strategy is based on exploiting the relationship between a solution to a given instance of a problem and a solution to a smaller instance of the same problem [6]. Among the available decrease and conquer techniques, multilevel graph partitioning algorithms follow ?Variable Size Decrease? technique where a size reduction pattern varies from one iteration of the algorithm to another [6]. Therefore, all the benefits of decrease and conquer strategy are gained by these approaches. As the problem size is reduced, the computational time for identifying a solution to the smaller instance of the problem is greatly reduced.

Although additional time is required for problem reduction as well as for projecting the solution back to the original problem, it is still beneficial than the time required to explore the original problem in entirety. The major issue concerned with this approach is related to the quality of the initial solution [2].

Most of the approaches pick up a random initial partition which is further projected back to the larger instance of the problem.

This highly random nature of the initial solution has a direct impact on determining the quality of the final solution.

Improving the quality of the initial partition improves the final partition quality to a greater extend. Taking this fact into account, this paper proposes a hybrid approach with an improvement strategy to the initial partition based on balanced big method [14] followed by local search refinement. Rather than the existing technique, the partition technique based on satisfying the problem objective of maintaining the balance factor with a certain level of diversification can be adapted.

The rest of the paper is organized as follows: Section II provides the formal graph partitioning description. In section     III, the proposed approach with improved initial partitioning is described. Section IV discusses the experimental results and finally concluded in section V.



II. PROBLEM DESCRIPTION In mathematics, the graph partition problem is defined as,  given an undirected graph G = (V, E) of V vertices and E edges such that it is possible to partition G into smaller components with specific properties. The vertices and edges may be weighted. By default, the vertices and edges are assumed to be of unit weight. A partition of a graph is mapping of V into k disjoint subdomains say P = P1 U P2 U ? U Pk such that  - The sum of the node weights in each partition Pj is about the same  - The sum of all weights of edges between different partitions say Pi and Pj is minimized  i.e., To partition a graph, G (V,E) into k disjoint subsets of about the same size, such that the number of cutting edges is minimized. The union of all the vertices of each Pj is equal to

V. The weight of a subdomain is just the sum of the weights of the vertices in it. The edges that are not a part of any of the subdomain, i.e., the inter subdomain edges are called cut edges of the partition. The edge cut cost can be computed using (1),  ?dge cut cost =  W(eij), subject to e ? ?  and Pi  Pj (1)  where, eij  represents the edge connecting vertices Vi ? Pi and Vj ? Pj, Pi represents partition i, W(eij) represents the weight of edge eij.



III. PROPOSED APPROACH This paper proposes a multilevel hybrid algorithm for  balanced graph partitioning which applies a better method for initial partitioning phase followed by local search. Perfectly balanced partitions are generally not feasible. Solutions obtained by approaches that depend on the properties for the graph while partitioning do not depend on the quality of initial partition, whereas refinement strategies followed in multilevel algorithms are local search techniques in which the quality of initial solution has a major impact on the final solution.

Therefore, it is a better idea to consider the balance factor while performing the initial partitioning. During initial partitioning phase, to make sure that the partitions are not only balanced but also satisfies the edge cut minimization requirement, this work tries to maintain the coarsened edges together based on balance factor and introduce a small degree of diversification through greedy approach towards uncoarsened and less coarsened vertices. Less coarsened vertices are vertices with lesser degree of coarsening. In order to identify vertices that are less coarsened, we consider the degree of the vertex as the degree of coarsening [19]. The initial partition is further subjected to local search refinement.

The hybrid balanced big method works as follows: Generate initial partition in such a way that, for a highly coarsened  vertex, apply balanced partition by placing it in the minimum size partition and for less coarsened vertex, apply greedy partition by allocating it to the maximum size partition or any other partition other than the minimum size partition. This would improve the initial partition quality thereby overcoming the major drawback of existing algorithms. Now, this better quality solution is subjected to local search technique which applies single move, double move and relaxed move strategies. Fig. 1 depicts the general procedure of the proposed multilevel partitioning technique.  The different stages of the algorithm are discussed below:  A. Preprocess Input Graph The partitioning algorithm must preprocess the input graph  and represent it in an appropriate data structure. In order to maintain the weight of both vertices and edges during the course of partitioning, the appropriate data structure to represent the graph is a variant of adjacency list structure also called as incidence list [1]. This Adjacency list structure performs asymptotically better than other representations for the proposed partitioning algorithm.

B. Coarsening Stage Followed by initial preprocessing of the graph, the graph is  subjected to coarsening process. The process of coarsening involves transforming the original graph G0 into a sequence of smaller graphs G1, G2.. Gm such that |V1|>|V2|>..>|Vm|. A coarser graph Gi+1 = (Vi+1, Ei+1) is formed from a graph Gi = (Vi, Ei) by finding an independent subset of edges and then coarsen the vertices connected by each of the edge in the subset identified. Different matching schemes are available in the literature and an appropriate matching scheme that satisfies the problem objective can be chosen. Considering the fact that the partitioning objective is to minimize the edge cut cost, it is better to retain heavier edges together in the same partition. Therefore, Heavy Edge Matching (HEM) scheme is chosen as the appropriate method for coarsening [13].

The time complexity of HEM matching scheme is O(|E|) [14]. This process of coarsening is continued until the coarsening threshold is reached. i.e., the size of the coarser graph becomes equal to or less than the coarsening threshold.

During the coarsening process if two graphs Gi and Gi+1 are of the same size, this means that the graph cannot be coarsened further. In such cases, the coarsening process stops even before reaching the coarsening threshold.

C. Initial Partitioning Stage Initial partition in the proposed approach is implemented  based on balanced big method on the coarsest graph obtained from coarsening phase. The quality of the initial partition depends on the partitioning strategy applied. As the coarsening phase concentrates more on retaining the heavier edges together, it would be better to concentrate on maintaining the balancing factor in this phase. Since the problem objective is to minimize the edge cut cost as well as to maintain balanced partition. As a new vertex is encountered, placing the vertex in one of the k partitions with minimum partition size would  86 2014 IEEE International Advance Computing Conference (IACC)    boost up the partition size balance. Since the initial partition is performed on a coarser graph, the vertices of the graph would be of different degree of coarsening. As the vertex weight is updated at each step of coarsening, the coarsen degree can be determined from the vertex weight. Higher degree of coarsening of a vertex depicts that the vertex has more number of vertices combined together. Maintaining these vertices together is necessary to satisfy the minimum edge cut requirement. Adding this vertex to a larger size partition would result in imbalanced partition as the vertices are uncoarsened. It is a better to place such high degree vertex in a partition with smaller size [14]. Applying the same rule for vertices with lower degree of coarsening would require the vertex to be placed in any partition other than the minimum size partition. To introduce some degree of greediness and diversification, we would place such a less coarsened vertex in the partition with maximum size.

D. Refining Stage The refinement stage works as an improvement strategy to  enhance the quality of initial partition obtained via the Initial Partitioning Stage. Local search technique is employed to the initial partition as well as to the partitions obtained while projecting back the initial partition to the original graph. To improve the implementation strategy of the refinement phase, special data structures including bucket data structure [19, 8] can be used. The partition quality improved by moving vertices across different partitions based on move gain. Given a partition P = P1 U P2 U.. Pk. For each partition say Pj, move gain is computed for all the vertices that are not part of Pj. i.e., Compute move gain for all v in Vi such that v Pj.  It is required to find a highest gain vertex while choosing vertices for move operation. As the initial partition quality obtained in the partitioning phase is of relatively good quality, further exploitation through local search technique (Hill Climbing) would refine the obtained solution. The conventional local search applied to graph partitioning problem works by moving the vertices across partitions. To maintain the balance of the partitions, the move strategies picks up high gain vertices from bucket data structure and moves the chosen vertex from its current partition to the chosen partition only if the balance criteria is maintained.

The refinement strategy follows three kinds of moves namely single move, double move and relaxed move. Both single move and double move are applied alternatively to improve diversity.  In addition to these two moves, to include some level of diversification, relaxed move is also included.

The steps involved in single move, double move and relaxed move are depicted below.

The steps involved in single move strategy are: ? Randomly choose a partition say Pi other than the  partition with maximum size say Pmax.

? Pick a high gain vertex v from bucket data structure  such that, the size of the current partition of v must be greater than the size of the partition Pi to which it is chosen to be moved.

? Move the vertex v to Pi.

The steps involved in single move strategy are:  ? Single Move vertex u to partition Pj.

? Apply Relaxed Single Move  o Randomly choose a partition say Pi other than and Pj and the partition with maximum size say Pmax.

o Pick a high gain vertex v from bucket data structure such that, the size of the current partition of v must be greater than the size of the partition Pi to which it is chosen to be moved and Pi  Pj.

o Move the vertex v to Pi.

The steps involved in relaxed move strategy are:  ? Randomly choose a partition say Pi other than the partition with maximum size say Pmax.

? Pick a high gain vertex v from bucket data structure such that, the size of the current partition of v must be greater than the size of the partition Pi to which it is chosen to be moved.

E. Uncoarsening/Projecting Stage Uncoarsening is simply the reverse of coarsening phase.

The partition obtained for the coarser graph must be projected back to the original graph. i.e., projecting back the partitioning to the graphs Gi-1, Gi-2 ? G0 would result in the partition of the original input graph [19]. As the uncoarsening proceeds, the number of vertices and edges in the graph increase whereas the weights of vertices and edges decrease. Uncoarsening and refinement is continued until the original graph G0 is obtained and the partition is projected back to it.

Algorithm: MultilevelGraphPartition(Graph G)   PreprocessInputGraph; //Coarsening Phase While(|V| > coarsen_threshold) do  Coarsen(Gi to Gi+1); End while; //Apply Balanced Big Initial Partition to Gm For all v in V do  If coarsendegree(v) is high Then Use Balanced partitioning Else Use Greedy partitioning  End for; //Refinement LocalSearch(Initial Partition)  //Uncoarsen, Refine and Project Partition While(Gi != G0) do  Uncoarsen(Gi to Gi-1) LocalSearch(Current Partition)  End While; Fig. 1. Multilevel Hybrid Graph Partitioning Technique.

2014 IEEE International Advance Computing Conference (IACC) 87

IV. EXPERIMENTAL RESULTS The experiments were carried out to evaluate and analyze  the efficiency of the proposed approach. The experiments were conducted on a set of well-known benchmark graphs that are widely used to assess graph partitioning collected from the University of Greenwich Graph Partitioning Archive. The experiments were conducted in Intel? Core? i3-2330M 2.20GHz 4.00 GB configuration and the algorithm was implemented in Microsoft C#.Net and compiled in Microsoft .Net Framework 4.5.

The original graph is processed initially by the input graph representation module and the appropriate adjacency list structure is created. This step involves processing each and every vertex and the edges connecting its adjacent vertices.

Therefore it requires O(|V|+|E|) space complexity.

The input graph is further coarsened using HEM technique.

HEM takes O(|E|) time and is carried out n number of times until the coarsened graph reached the coarsening threshold [17]. The coarsened graph is further partitioned. To prove the quality of initial partitioning of the proposed approach, the experiments were carried out by subjecting the coarsened graph to multilevel algorithms with random initial partition and tabu search refinement as well as with the proposed balanced big initial partition with local search (Hill climbing) refinement. From the results it is inferred that the edge cut cost is minimized in the proposed approach.

A. Analysis of Results The experiment was conducted in few of the benchmark  instances shown in Table I with different values of k={2,4,8}.

The experimental results were conducted with Coarsen_thereshold = 200 and for 100 iterations of refinement.

The comparative performance of random initial partitioning with Tabu Search Refinement and balanced big method of partitioning for the benchmark instances in Table 1 are shown in Fig. 2 and the results are discussed below.

The graph of Fig. 2a represents the comparative performance of the proposed approach with the random technique with tabu search for add20.graph benchmark instance. Though the solution obtained by existing technique is relatively good for smaller value of k, as k increases, the proposed method out performs the existing technique.

TABLE I.  BENCHMARK INSTANCES  Instance Vertices Edges  add20.graph 2395 7462  uk.graph 4824 13722  add32.graph 4960 6837  3elt.graph 4720 9462     (a)   (b)   (c)   (d)  Fig. 2. Performance of Random Tabu Search(TS) Vs Balanced Big Hill Climbing(HC) for (a) add20.graph (b) uk.graph (c) add32.graph (d) 3elt.graph  88 2014 IEEE International Advance Computing Conference (IACC)     Fig. 3. Performance Comparison with different iteration count for uk.graph  The experimental results for uk.graph, add32.graph and 3elt.graph are represented in Fig. 2b, 2c and 2d respectively indicate that as the size of the graph (i.e., number of vertices and edges) as well as the number of partitions (k) increase, the proposed method performs better than the existing random initial partition with tabu search refinement approach. Fig. 2d also indicates that as the size of the graph increases, even for k=2, the quality of partition improves for the proposed method.

The experimental results are shown upto 11% and 8% improvement for k=4 and k=8 respectively for medium sized graph considered. On an average, with the current settings, 5% to 11% of improvement is obtained using the proposed approach.

Further the results also indicate that, the quality of the partition improves as the number of iterations increase. Also, on an average, as the value of k increases (i.e., the number of partitions), the proposed approach performs better. This implies that as per Table 1, when the number of edges is high, the performance of the proposed algorithm improves. To evaluate this, the experimental results were also taken for varying number of iterations says, 100 to 300. The results indicate that as the number of iterations increase, the quality of partitions gradually improves. Increasing the number of iterations further result in high quality solutions. This can be inferred from Fig. 3. Further additional analysis and experiments have to be performed to exactly quantify the improvement factor.

The results indicate that, adapting the balanced big method in the initial stage leads to a significant improvement in the quality of solution in the subsequent phases of graph partitioning. The partition refined via local search is further projected back to the original graph via uncoarsening process.

The experimental results also show that there may be a significant trade-off between solution quality and partition balance. Obtaining perfectly balanced partitions is not feasible.



V. CONCLUSION In this paper, a multilevel hybrid graph partitioning  algorithm using balanced big method for initial partitioning followed by local search refinement was implemented and compared with the existing random initial partition with tabu search refinement. The proposed algorithm follows the basic  framework of multilevel approach but replaces the random initial partitioning approach by balanced big approach and uses conventional local search technique in the refinement phase. The experimental result shows that the proposed method improves the partition quality compared to existing method for medium sized graphs.

The proposed approach can be further improved with better refinement strategies and extended for applications like road network graphs where graph partitioning is an essential step to reduce the problem size.

