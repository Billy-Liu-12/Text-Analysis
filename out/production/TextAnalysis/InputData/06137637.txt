Graph-based Bioinformatics Mining Research and Application DeQuan Tang

Abstract?In the biological technology domain, the biologist discovered frequent subgraph mining may reduce the price of structure match experiment in the protein gene structure match experiment. Molecular model can be abstracted as a set of graph, it usually needing to find out the particular molecular structure in biomedical testing. Therefore, research on the frequent subgraph mining has the important significance of theory and the application value.

Our contribution in this paper includes: (1) based on the usual frequent subgraph definition, we propose a novel definition of frequent subgraph mining; (2) propose a nove graph canonical form to determining graph isomorphism and avoid the NP-Complete problem of subgraph isomorphism; (3) Can efficient enumerated candidate subgraph?s supporty and frequency by maintaining an embedding set. At last, performance study indicates that FSubgraphM can effectively discovery the frequent induced subgraph from the database carcinogen, it also can form some interesting association rules from the frequent subgraphs which has some theoretical and practical significance for Bioinformation Data Mining and Its Application.

Keywords- Molecular model; subgraph mining;biological technology;subgraph isomorphism;frequent subgraph

I. INTRODUCTION Frequent pattern mining[1] are wide application in bioinformatics and biochemistry molecular structure mining field [2]. Biochemistry have long been used to study molecules and macromolecules such as organic compounds nucleic acids and Proteins[3]. Recurring substructures in a group of compounds with similar biological activity can be identified by representing these compounds as undirected graphs[4]. The recurring substructures can indicate chemical features responsible for compounds? activities[5]. For example,   usually need to find out the molecular quantity of  the cancer-causing molecular structure in chemistry mixture. According the above, we apply to data mining technology of graph to handling graph sets of chemical molecular structure[6] and get we want to graph structure. In another example RNA secondary structure has been modeled by a labeled graph in Which each node is a paired base and their relation is determined by the nesting of base pair bonds.

For a compound the vertices and edges in the graph are determined by the corresponding atoms and bonds that connect the bonds respectively, and the labels of the vertices and edges represent the vertices? name or information and the type of the bonds or the information of the bonds respectively.



II. PRELIMINARIES Definition 2.1 Labeled graph G is a five element tuple  ? ?lEVG EV ,,,, ??? where V is a set of vertices and VVE ?? is a set of undirected edges.

V? E? are the sets of vertex labels and edge labels respectively.The labeling function l de.fines the mappings VVl ??: EE ?? .

Definition 2.2 Given a pair of labeled graphs  ? ?lLEVG ,,,? ? ?lLEVG 				?	 ,,,, G is an subgraph of G  VV 	?  ? ? ? ?? ?ululVu 	? ? , EE 	?  ? ? ? ? ? ?? ?vulvulEvu ,,,, 	? ? G	 G Definition 2.3  A labeled graph ? ?lLEVG ,,,? is isomorphic to another graph ? ?lLEVG 				?	 ,,,, there exists a bijection )()(: GVGVf 	? such that  ? ? ? ?? ?? ?uflulVu 	? ? , ? ? ? ? ? ?? ? EvufEvuVvu ?  ? ,(,,,  ? ? ? ? ? ? ? ?? ?? ?vfuflvulEvu ,,,, 	? ? The bijection f is an isomorphism between G and G	 .

Definition 2.4  A labeled graph G is subgraph isomorphic to a labeled graph G	 , denoted by  GG 	? ,iff there exists a subgraph G 		 of G	 such that G is isomorphic to G 		 .

Definition 2.5  support and frequent  Given two rooted ordered and labeled graph ( , , )P P PP V E? ? and ( , , )D D DD V E? ? ,  ?nGGGGDD ,,, 21 ?? , where GD is a set consisting of n labeled graphs. We say P is a candidate graph and D is a data graph. If there exists a mapping function f , we can say f is a subgraph isomorphism from P to D , or a matching from P to D , or a inclusion of P in D . We say D contains P . An occurrence of P in D can be identified by it?s unique matching, a matching is a sequence of vertices and edge in D that P matches, ? ? ? ?? ? ? ?pxlxxlxl ?211 , ,    where i Dx V . Let ( )D P? denote the number of occurrences of the candidate graph P in a data graph D .

Let Dd be an indicator variable, with  1 ( ) 0 ( )  D  D  if P d P  otherwise ???? ?? ??  ? ? ???  The supporty of a candidate graph P in the database DB is defined as ( ) ( )D DB DP d P? ? ? , that is the total number of data graph that contain P at least once.

The frequency of P in DB is defined as  ( ) ( )D DB DP P? ? ? ? , namely the total occurrence of P in DB . Then the support of P in DB is ( ) ( ) / | |S P P DB?? , and the frequent  of P in DB is ( ) ( ) / | |F P P DB?? . It?s trivial that 0 ( ) 1S P? ? , ( ) ( )F P S P? . Note that ( )F P can be greater than 1[7].



III. GRAPH CANONICAL FORM Definition 3.1 Given an n ? n adjacency matrix M of a graph G with n vertices, we de.ne the code of M, denoted by code(M), as the sequence formed by concatenating lower triangular entries of M (including entries on the diagonal) in the order:  nnnnnn mmmmmmm ,1,2,1,2,21,21,1 ?? ??? , where mi,j is the entry at the ith row and jth column in M (0 <j ?? ???????? We assume that the rows in M are numbered 1 through n from top to bottom and the columns are numbered 1 through n from left to right.

Definition 3.2 We define adjacent lists information use  a tuple (l(e),l(v),d(v)),wherel(e) is the label of the  incident edge e, l(v) is its vertex label, and d(v) is the  degree of the adjancent vertex v.

We use standard lexicographic order  0????? yxba ? on sequences to define a total order of two arbitrary codes p and q.Given a graph G, its canonical form is the maximal code among all its possible codes. The adjacency matrix M which produces the canonical form is de.ned as G?s canonical adjacency matrix (CAM)[8].We give the algorithm of canonical adjacency matrix as follows: Input: the adjacency matrix of graph M Output: the canonical adjacency matrix of graph CAM C1:[Initialization] partioned a class by the node which has the same node label. Extract the representation of the element of table , Arranged the element of table by dirictionary sequence.

C2:rearranged the same node grade in each kind by ruler C3 and C4.

C3:Arranged node grade by degree from big to small in the same kind Output this matrix as CAM if there is only one invaiable node.

C4: Holding the same degree nodes in the same kind are arranged by the information?s size of adjacency table in size Output this matrix as CAM if there is only one invariable node by the time).

C5:Output the matrix as CAM if there is only one invariable node in each kind. Otherwise: C6:Output CAM which it is the biggest code? corresponding to adjacency matrix.

Theorem 3.1 Given graph G, according to the algorithm of canonical adjacency matrix for graph G, which can get maximal (unique) code.

Proof: (proof by contradiction) If a canonical code of connected graph G is CAMCode(M), and assume that we get other Code(N) and  nnMCode ?? ? )(Code(N) mm ,denote  mmmm nnnnnn ,2,1,2,21,21,1 ? > nnnn mmmmmm ,2,1,2,21,21,1 ? .If it is true,then must jiji mn ,, ? ( i?	?? ???????????????????????  jin , to displace jim , : If i=j, jin , and jim , are the node label of matrix N and Matrix M respectively.

According to first step of canonical adjacence matrix, at most of  jin , = jim , .But jiji mn ,, ? conflict to first step of canonical adjacence matrix algorithm.

If ji? , jin , and jim , are the edge label of matrix N and Matrix M respectively.

According to third step of canonical adjacence matrix, at most of  jin , = jim , .But jiji mn ,, ? conflict to the information?s size of adjacency table in size.

To conclude,we have not  mmmm nnnnnn ,2,1,2,21,21,1 ? >  nnnn mmmmmm ,2,1,2,21,21,1 ? .

Therefore,after canonical form for graph G that we have  not Code(N) and )(Code(N) MCode? .We get  CAMCode(M) of canonical code is maximal or unique  code.



IV. CANDIDATE SUBGRAPH GENERATE The current methods for enumerating all the  subgraphs might be classified into two categories: one is the join operation. A join operation takes two joinable frequent k-edge graphs G1 and G2 and produces a (k + 1)-edge graph candidate G such that both G1 and G2 are    subgraphs of G. Two k-edge graphs are joinable if they share a common (k .1)-edge subgraphs. The join operation is expensive, as shown in[9], in that a single join operation might generate multiple graph candidates and one candidate might be redundantly proposed by multiple distinct join operations.

On the other hand, an extension operation produce a (k +1)-edge graph candidate from a frequent k-edge graph G by adding an additional edge to G (with/without introducing an additional node)[10].This operation is also costly since for a given graph,there are many nodes in the graph that an additional edge might be attached to.



V. FREQUENT SUBGRAPH MINING One of the key challenges[11] for efficient subgraph  enumeration is the scheme to e.ciently count the support and frequency of a particular subgraph G. A brute force way to do this is to perform subgraph matching and count how many graphs in a graph database are the supergraph of G. This scheme involves a subgraph matching procedure which is known to be NP-complete in the general case[12].

From a practical point of view, the above scheme can be significantly sped up by recording the previous matched vertices (denoted as an embedding) and basing the subsequent search on the previous recorded information. To further explain this point, we define an embedding as follows: Definition 5.1 Given an arbitrary n ? n adjacency matrix A and a labeled graph ? ?lEVG EV ,,,, ??? a vertex list VuuuL n ?? ,,, 21 ? is an embedding of A in G iff:  (1) ? ?? ?iii ulai ?? ,, (2) ? ?? ?jijiji uulaaji ,0, ,, ???? where  nij ???0 .

The set of all embeddings of a matrix in a database  is defined as its embedding set.

To count the frequent is equivalent to count the  number of isomorphisms from P to GD . We employ a new data structure tree unit to count the support and frequent of a candidate subgraph P in GD for the sake of the NP-Complete problem of subgraph isomorphism test. The graph unit of a candidate P in GD is a triple  ?? occlistgraphlist,clcode, , where ? ?Pcodeclcode canonical? , graphlist is a list of  isomorphic subgraphs, and occlist is the corresponding occurrence list of an isomorphic subgraph. clcode can be obtained by using CAM, graphlist can be obtained by  embedding of P , and occlist can be obtained by embedding set for every subgraph in the graphlist .



VI. EXPERIMENTS AND ANALYSIS  A. Preprocessing of the primitive data Experiment environment: The computer used is a PC  with Intel Core 2 Duo 2.53GHz CPU and 1G main memory, 80GB disk. The program implemented with Java on the platform of JBuilder2006 under Windows XP.

Data source and preprocessing: FSubgraphM was applied to chemical carcinogenesis analysis which is a challenge topic proposed in IJCAI-97[13]. The objective data were obtained from the website of National Toxicology Program(NTP) and Oxford University. The database contains information on 337 chemical compounds in two separated files. The first file named atoms.pl contains definitions of atoms in compounds. For example, atm 11, 1 , , 22, 0.133d d c ? means that a chemical compound 1d has an atom whose  identifier is 11d , of element carbon, of type 22 and with partial charge -0.133. The other file bonds.pl provides bonding information between atoms. A line in the file  1 2( 1, 1 , 1 ,7)bond d d d , for instance, states that in  the compound 1d its atoms 11d and 21d are connected by a type 7 bond. There are 4 different types of bonds( 1,2,3 and 7) , 66 atom types and 24 different atoms As, Ba, Br, C, Ca, Cl, Cu, F, H, Hg, I, Mn, N, Na, O, P, Pb, S, Se, Sn, Te, Ti and Zn .

For simplicity, we didn?t have consider the information of the atom types, partial charges. For each compound, it?s atoms correspond the vertices in the corresponding graph, and the bonds correspond to the edges. Then we got a database consisting of 337 graphs.

We  have represent of canonical adjacence matrix for each graph in the graph data sets, then we got 337 CAM.

The minimal graph with size of 2, and the maximal with size of 214.

B. Analysis of the result Figure 1 shows the performance of algorithm  FsubgraphM applied to carcinogen. To certain size graph sets |D|=100, the average n |N|=20, the test running time along with the support change,result in Figure 1 (a) shows To certain size graph sets |D|=100, support is 15%, the test running time along with the number of nodes change,result in Figure 1 (b) shows To certain size graph sets |D|=337, support is 15%, the test running time along with the number of datasize change,result in Figure 1 (c) shows To certain size graph sets |D|=337, average nodes |N|=24, the test number of candidate subgraph along with the support change,result in Figure 1 (d) shows.

CONCLUSIONS we are propose a nove graph canonical form to  determining graph isomorphism and avoid the NP- Complete problem of subgraph isomorphism. Can efficient enumerated candidate subgraph?s supporty and frequency by maintaining an embedding set. Next, based on the usual frequent subgraph definition, we propose a novel definition of frequent subgraph, and we propose algorithm FSubgraphM which employs the above techniques to mine frequent induced subgraph from a graph data sets.

There are some drawbacks need more attention in the future research[14].As stated above, within a group of compounds having the same or similar characteristics[15], if candidate graph p occurs in compound a frequently, while it doesn?t appear in the other compounds. In case that the frequent of p may equal to or greater than the threshold of frequent but the support is less than the support threshold, so p is not frequent. That is to say, p cann?t describe the common characteristic of the compounds, but please note that it occurs frequently in compound a , it may describe the personality of compound a . It?s valuable to find the common characteristics from a group of structures[16], but, if we can discovery the personalities from the common characteristics will surprise you indeed.

