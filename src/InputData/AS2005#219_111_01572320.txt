Consistent Evolution of UML Models by

Abstract    As software evolves, analysis and design models  should be modified, correspondingly. In this scenario,  one of the main problems is to detect which elements  should be changed due to a given change. This paper  presents an approach that applies data mining over a  versioned UML repository in order to detect change  patterns among model elements at different abstraction  levels. These patterns are presented to the software  engineer together with contextual information obtained  from a change control system, so he can decide the  software evolution task at hand.

1. Introduction   The software development process encompasses  many distinct phases, each of them working on a spe-  cific abstraction level. Some decades ago, completely  different paradigms were used to construct artifacts in  these different phases of the development process. For-  tunately, in the last decades some paradigms, such as  object-oriented, aspect-oriented and component-based,  have tried to reduce the gap between the problem defi-  nition and its solution. Besides the chosen paradigm,  UML notation were always a strong candidate for rep-  resenting analysis and design artifacts [1-3]. However,  software engineers must ensure that all UML artifacts  are up to date and consistent throughout the abstraction  levels to avoid misunderstandings.

Traceability techniques can be used to solve this  problem by identifying all UML model elements that  shall be updated when a change is introduced [4]. By  analyzing the traceability links, the software engineer  can identify the potential side-effects of a new change,  estimating what should be modified to accomplish a  proposed change. Moreover, traceability links detec-  tion at analysis and design levels helps software engi-  neers to identify bad design decisions early on the  software development process and provides a high  level view of the system dependencies [5].

The traceability link detection approaches based on  data mining [6-8] usually search for concomitant  changes in Software Configuration Management  (SCM) systems to discover possible dependencies  among software artifacts. SCM techniques are com-  monly used to control the evolution of software sys-  tems by providing versioning, via Version Control Sys-  tems (VCS), and support for activities related to change  management, via Change Control Systems (CCS).

Our work uses a data mining technique named asso-  ciation rules, which extracts sets of items that fre-  quently occur in the database transactions. Table 1  shows how each data mining term is related to our ap-  proach. In the classical usage context of data mining,  all sales are analyzed to detect buying patterns among  different customers. These patterns indicate which  items are frequently purchased together. In our ap-  proach, items are represented by UML model elements.

Therefore, the mined database is a versioned UML  repository that stores changes performed during the  development and maintenance phases. Moreover, each  database transaction is mapped to a change, imple-  mented via one or more check-in operations.

This paper is organized in four sections besides this  introduction. Section 2 describes our approach for  change traces detection via association rule data mining  technique over versioned UML repositories. Section 3  presents some related works. Finally, Section 4 con-  cludes the paper presenting some future works.

Table 1. Data mining terminology  Context Item Transac-  tion Database  Mining  Result  Supermarket Product Sale Purchase  database  Customer  preference  Software  evolution  UML model  elements Change  Versioned UML  repository  Change  traces  Proceedings of the 2005 Eighth International Workshop on Principles of Software Evolution (IWPSE?05)      2. Mining UML repositories   This section introduces the proposed approach for  traceability link detection among UML model ele-  ments, which encloses mining of change traces and  gathering of rationale behind the change traces.

2.1. Change traces   Change traces are defined as traceability links ob-  tained from change information. Throughout the lifecy-  cle of a project, software artifacts are changed when  new features are added or bugs are fixed. All these  changes are stored in CCS and VCS.

In the context of CCS, changes have a predefined  lifecycle, determined by the SCM activities [9]: (1)  change request, (2) classification, (3) analysis, (4)  evaluation, (5) implementation, (6) verification, and (7)  integration. During the implementation phase of this  lifecycle, different software artifacts are modified to  perform the change. Each version of the modified arti-  facts is stored in VCS. Along with the versioned arti-  facts, other information is kept by VCS, such as change  description, author, and date of each check-in operation  performed during the change implementation.

In a previous work, an infrastructure named Odys-  sey-VCS [10] was defined to version UML model ele-  ments. The integration of information provided by CCS  and Odyssey-VCS allows the detection of which arti-  facts are affected by a given change.

When a requested change is implemented, distinct  artifacts are modified at different abstraction levels.

Figure 1 shows two types of change traces that can be  obtained by our approach: intra-model and inter-model.

Figure 1. Change traces   The intra-model change trace relates two or more  elements in the same abstraction level. For example, it  is possible to detect that two use cases are always  changed together. On the other hand, inter-model  change trace relates two or more elements in different  abstraction levels. For example, it is possible to detect  that a use case and a class are always changed together.

2.2. Traceability links rationale   While developers investigate change traces, they  pose various questions to uncover the rationale of de-  pendencies that were identified. Currently, most ap-  proaches that support traceability lacks to provide the  semantics of the relations among software artifacts. To  minimize this problem, our approach provides a view  of all related artifacts that shall be updated and the de-  tails about the rationale, the history, and the people  behind the change traces. Such details are vital in as-  sisting developers to understand the state of the soft-  ware system throughout the evolution process [11].

This rationale follows an information structure  widely used in the Computer Supported Cooperative  Work literature to contextualize and provide knowl-  edge about elements [12]. This information structure is  known as 5W+1H and comprises the following pieces  of information: who, when, where, why, what, and how.

For example, the knowledge of who has performed a  change may assist developers to understand if the  change trace was introduced by a senior developer.

Moreover, even if the change trace were introduced by  a senior developer, other questions may indicate that  this change trace was introduced to fix a critical bug in  the few days/hours before a release, lacking adherence  to some coding standards used in the company.

However, in the real world of software develop-  ment, manually recording such information is neither  possible nor practical. On the other hand, SCM reposi-  tories store change details obtained from SCM activi-  ties presented in Section 2.1. These change details are  automatically collected and organized by our approach  to provide the required 5W+1H information, as shown  in Table 2.

Table 2. Rationale gathering Information type Collection place  Who ? Check-in information from VCS  ? Implementation activity from CCS  When ? Check-in information from VCS  ? Implementation activity from CCS  How ? Impact analysis from CCS  Why ? Change request activity from CCS  What ? Check-in information from VCS  ? Verification activity from CCS  Where ? Check-in information from VCS    The automatic gathering of 5W+1H information de-  pends on another previous work named Odyssey-CCS  Change request  Change Control System (CCS)  Version Control System (VCS)  Analysis  Design  Intra-model traces  Inter-model traces  Code  Proceedings of the 2005 Eighth International Workshop on Principles of Software Evolution (IWPSE?05)      [10], which is a CCS that allows process and informa-  tion customization. Our work uses Odyssey-CCS to  collect the rationale information shown in Table 2. For  each required piece of information, the gathering place  should be defined in terms of the field inside a specific  document that stores the information in Odyssey-CCS.

For example, to collect the ?why? information using a  conventional SCM process [9], the field ?change de-  scription? in the document ?change request? should be  inspected.

2.3. Process for traceability links detection   The process for traceability links detection com-  prises two main phases: configuration and querying.

The configuration phase is when the configuration  manager sets the desired data mining metrics and in-  forms the activities and fields of CCS that should be  used to collect rationale information, as mentioned in  the previous section.

The querying phase occurs when developers want to  know the change traces among UML model elements.

Usually, a UML model element is selected and all  traceability links for this element are provided. This  mechanism helps to answer questions such as ?Devel-  opers that change a given element also change which  other elements??, providing support for the developers?  future changes.

It is important to notice that this approach does not  intend to replace the work of software engineers. Since  change traces are based on past experience, they do not  constitute absolute truth, but suggestions. To categorize  the relevance of these suggestions, each change trace  has a probabilistic interpretation based on the amount  of evidence from the data that they are derived from.

This evidence can be represented by two data min-  ing metrics: support and confidence. These metrics are  used to mine only frequent rules in databases. Support  quantifies the significance of the (co-)occurrence of  artifacts in implemented changes.  Confidence repre-  sents how much one artifact depends on others.

Typically, association rules techniques are interested  in rules that satisfy both minimum support and confi-  dence thresholds. In our approach, such thresholds  should be set by the configuration manager at the con-  figuration phase.

The process for mining change traces related to the  selected model element comprises two steps: (1) selec-  tion of changes that will be analyzed, and (2) mining  the transactions, searching for rules that describe rela-  tionships between UML model elements.

Only changes that satisfy the following conditions  are analyzed by the data mining algorithm: (1) the  change should be completely implemented, (2) the  change should be older than the UML model element  that is been queried by the developer, and (3) the  change should affect the UML model element that is  been queried by the developer.

After that, our approach can apply data mining over  the changes selected according to the above conditions.

The data mining algorithm calculates the support and  confidence metrics for each pair of artifacts which are  included in the changes and, then, prunes the elements  with support and confidence lower than the minimum  thresholds.

Our approach presents, together with the mined  traceability links, the rationale behind each change  trace, as shown in Figure 2. The rationale is composed  by the 5W+1H information (shown in Table 2) col-  lected from every change that participates in the mining  of each detected change trace.

Figure 2. Detected change traces.

3. Related work   In the last decade, researchers have experienced the  use of SCM repositories to understand software as well  as their evolution. Gall et al. [13] use release data to  detect logical coupling between modules. Ball et al.

[14] have performed some cluster analysis of C++  classes stored in SCM repositories. A similar work has  been conducted later by Bieman et al. [15] on classes  of a commercial system. In this work, they identify  change-prone classes that are targets for re-engineering.

Some works also perform historical analysis over  SCM repositories. Shirabad et al. [7] use inductive  learning to find out different concepts of relevance  among logically coupled files. Eick et al. [16] argue  that code decay is related to the difficulty to perform  changes. For this reason, they analyze change history  applying decay indexes to identify risk factors. Dra-  Proceedings of the 2005 Eighth International Workshop on Principles of Software Evolution (IWPSE?05)      heim et al. [17] argue that product quality is dependent  of process quality. Due to this argument, the develop-  ment process activities are analyzed and some metrics  are applied over VCS. Finally, Zimmermann et al. [8]  have evidenced that mining SCM repositories can be  useful for suggesting and predicting likely further  changes, detecting hidden dependencies, and prevent-  ing errors due to incomplete changes.

However, these related approaches work over file-  based SCM repositories. For this reason, they lack sup-  port for traceability links detection of fine-grained  UML model elements. Moreover, they do not provide  change traces rationale, automatically extracted from  an integrated CCS and VCS infrastructure.

4. Conclusion   This paper presented an approach for the detection  of change traces among UML model elements. This  approach can contribute to the impact analysis activity,  avoiding under-prediction of the scope of a change and  helping to identify critical side-effects. Also, it can  indicate anomalies in the design structure which may  be subject to restructuring if a change trace between  two classes of different components is detected.

Some positive aspects of our approach are: (1)  automatic change traces detection; (2) use of UML  model elements as mining units, leveraging the state of  the art to fine-grained analysis and design artifacts; and  (3) description of change traces rationale using the  5W+1H structure, automatically collected from an in-  tegrated CCS and VCS infrastructure.

Our future work includes the summarization of the  reasoning information. This feature will allow, for ex-  ample, detecting which developer is the main expert for  a given artifact due to the number of changes he/she  has previously performed in this artifact. Moreover, we  intend to perform some case studies to verify how the  benefits and limitations of our approach affect the  maintenance tasks in a real usage scenario.

5. References   [1] D. D'Souza and A. Wills, Objects, components, and  frameworks with UML: The catalysis approach: Addi-  son Wesley, 1998.

[2] M. Page-Jones, Fundamentals of Object-Oriented De-  sign in UML: Addison-Wesley, 1999.

[3] AOM, "5th Aspect-Oriented Modeling Workshop", in  http://www.cs.iit.edu/~oaldawud/AOM, accessed in  14/Feb/2004.

[4] J. Cleland-Huang and C. K. Chang, "Event-Based  Traceability for Managing Evolutionary Change", IEEE  Transactions on Software Engineering, vol. 29, pp. 796-  810, 2003.

[5] R. Settimi, J. Cleland-Huang, O. B. Khadra, J. Mody,  W. Lukasik, and C. DePalma, "Supporting Software  Evolution through Dynamically Retrieving Traces to  UML Artifacts", presented at International Workshop on  Principles of Software Evolution (IWPSE), Kyoto, Ja-  pan, 2004.

[6] A. T. T. Ying, G. C. Murphy, R. Ng, and M. C. Chu-  Carroll, "Predicting Source Code Changes by Mining   neering, vol. 30, pp. 574-586, 2004.

[7] J. S. Shirabad, T. Lethbridge, and S. Matwin, "Support-  ing Software Maintenance by Mining Software Update   Software Maintenance, Florence, Italy, 2001.

[8] T. Zimmermann, P. Weisgerber, S. Diehl, and A. Zeller,  "Mining version histories to  guide software changes",   neering (ICSE), Edinburgh, Scotland, UK, 2004.

[9] IEEE, "Std 1042 - IEEE Guide to Software Configura-  tion Management", Institute of Electrical and Electron-  ics Engineers 1987.

[10] L. G. P. Murta, H. L. R. Oliveira, C. R. Dantas, L. G. B.

Lopes, and C. M. L. Werner, "Towards Component-  based Software Maintenance via Software Configuration  Management Techniques", presented at Workshop on  Modern Software Maintenance (WMSWM), Bras?lia,  Brazil, 2004.

[11] A. E. Hassan and R. C. Holt, "ADG: Annotated De-  pendency  Graphs for Software Understanding", pre-  sented at Visualizing Software For Understanding And  Analysis (VISSOFT), Amsterdam, Netherlands, 2003.

[12] P. Dourish and V. Bellotti, "Awareness and Coordina-  tion in Shared Workspaces", presented at Conference on  Computer Supported Cooperative Work, Toronto, Can-  ada, 1992.

[13] H. Gall, M. Jazayeri, R. Kl?sch, and G. Trausmuth,  "Software Evolution Observations based on Product Re-   Software Maintenance (ICSM), Bari, Italy, 1997.

[14] T. Ball, J. Kim, A. A. Porter, and H. P. Siy, "If your  version control system could talk", presented at ICSE  '97 Workshop on Process Modelling and Empirical  Studies of Software Engineering, Boston, MA, 1997.

[15] J. M. Bieman, A. A. Andrews, and H. J. Yang, "Under-  standing change-proneness in OO software through  Visualization", presented at International Workshop on  Program Comprehension (IWPC), Portland, USA, 2003.

[16] S. G. Eick, T. L. Graves, A. F. Karr, J. S. Marron, and  A. Mockus, "Does code decay? Assessing the evidence   Software Engineering, vol. 27, pp. 1-12, 2001.

[17] D. Draheim and L. Pekacki, "Analytical Processing of  Version Control Data: Towards a Process-Centric  Viewpoint", presented at International Workshop on  Principles of Software Evolution (IWPSE 2003), Hel-  sinki, Finland, 2003.

