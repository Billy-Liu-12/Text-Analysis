Comparison of Track Fusion Rules and  Track Association Metrics

Abstract ? This paper presents numerical performance evaluation of various algorithms that have been developed for track-to-track fusion and association problems, through a long history of the distributed multiple target tracking algorithm development. We will use a general linear-Gaussian standard model both for the target state and the sensor observation models.

Doing so, we can analytically evaluate any linear track fusion rule that produces a global target state estimate by fusing local target state estimates obtained by local sensor processing systems. In order to clearly compare performance of various track fusion rules, we will only utilize simple two-station (two-sensor) track association and fusion problems. Two typical situations, supplementary and complementary sensor scenarios, will be considered. Repeated track fusion with and without feedback will be examined in addition to simple one-time track fusion. For track-to-track association performance, we will compare the effects of using various track association metrics, proposed so far, in a simple one-time track association problem, through Monte Carlo methods.

Keywords - Distributed Multiple Target Tracking, Track-to- Track Fusion, Track-to-Track Association

I.  INTRODUCTION This paper is generally concerned with multiple target  tracking, as defined in [1-6], as an extension of dynamical state estimation, i.e., filtering problems [7]. The extension is due to an unknown (random) number of objects without a priori identifications, whose states are to be simultaneously estimated, based on measurements from multiple sensors, each measurement originating from an unknown origin. In short, multiple target tracking is filtering (dynamic state estimation) to which data association problems are added.

In this paper, we are specifically interested in track-to-track fusion and association problems under distributed tracking situations, where each sensor has its own data processing capability to associate local data to form local tracks, and communicate (transmit) them, either to each other, or to a higher-level processing center, where local tracks are associated and fused into a set of global tracks.

This distributed processing architecture is often preferred over centralized counterparts where all the raw sensor data are assembled centrally and processed, despite possible loss of optimality. This preference is based on the lack of the single point of failure, the smaller communication requirements, the avoidance of the processing bottlenecks, and others.

Particularly multiple target tracking problems may require heavy data processing loads, when a centralized processing node accumulates a large amount of multiple-sensor raw data  under a high target density environment. Distributed tracking may be able to balance a data association burden into local data association and global track-to-track association.

This concept of distributed target tracking was presented in a pioneering paper [8], almost as soon as the subject of multiple target tracking itself was introduced. However, the systematic treatments of track fusion and track association were started with two seminal papers, [9] by Y. Bar-Shalom, and [10] by Y.

Bar-Shalom and L. Campo. Since then significant volume of studies on the subject of track fusion and association has been steadily accumulated (Cf., e.g., [6]).

The objective of this paper is not to present any new algorithm or new theory. It is rather to describe a method for comparing various known track-to-track fusion and association algorithms, and to compare their performance using tracking models that are simple but would capture important key factors for the target tracking. This goal is shared by the earlier work [11] on the same subject. This paper will present comparison of a widen set of track fusion rules and association metrics, under two-sensor supplementary and complementary measurement cases, and repeated fusion cases as well as one-time fusion cases.

The rest of the paper is organized as follows: In the next section, Section II, we define a linear-Gaussian target model and a distributed sensor model, which will be used as the basis for the rest of this paper. Sections III describes various track fusion rules, for one-time track fusion, while Sections IV and V examine repeated track fusion situations, with (Section IV) and without (Section V) feedback of fused tracks to local trackers.

Each of these sections provides some closed-form numerical performance comparison of various track fusion rules. Section VI describes various track association metrics, and provides comparison of track-to-track association performance to examine any difference made by the choice of various track association metrics, using a Monte Carlo method, followed by Section VII where we state our concluding remarks.



II. TRACK FUSION PROBLEM Let us consider two sensors, 1,2i = , which observe a  common target as ( )ik ik ik iky H x t ?= + , at time ikt , 1,..., ik N= , such that 1 2 ii i iNt t t< < < , with observation matrices ikH  of appropriate dimensions, each measurement error ik?  is an independent zero-mean Gaussian random vector, whose covariance matrix is ikR . The target state is modeled by a       continuous-time vector stochastic process 0[ , )  ( ( ))t tx t ? ?  defined by a linear stochastic differential equation  ( ) ( ) ( )t tdx t A x t dt B dw t= +  (1)  with initial condition 0 0( )x t x=  at the initial time  0 11 12min{ , }t t t? , given as a Gaussian vector 0x  with mean 0x and covariance matrix 0V , and a unit-intensity vector Wiener process  0[ , ) ( ( ))t tw t ? ? . We assume 0x , 0[ , )( ( ))t tw t ? ? , and  1 1(( ) )i N  ik k i? = =  are all independent from each other.

We assume each local sensor, 1,2i = , processes each measurement, iky , 1,..., ik N= , by a Kalman filter to maintain target state estimates, and at a given fusion time  1 21 2 max{ , }F N Nt t t? , communicates (transmits) the local state  estimate 1? ( ( ) | ( ) )i N  i F ik kx x t y == E , to each other, or a higher- order fusion center, together with its estimation error covariance matrix iV . (We use E  as the conditional and unconditional expectation operator, and P and p as the generic symbols for the conditional and unconditional probability density or mass function. By TX  we will mean the transpose of a matrix or a vector X.)  Then our problem is to generate a fused target state estimate ?Fx  by combining two local estimates 1x?  and 2x? .

For the sake of notational simplicity, let ( )Fx x t= , ( ( ))Fx x t= E , (( )( ) )TV x x x x= ? ?E , and ?ix  and  ?i ix x x= ?  be the local estimate and estimation error by sensor 1,2i =  , respectively. In order to evaluate various track fusion  rules described in the next section, besides the local estimation error covariance matrices, ( )Ti i iV x x= E , 1,2i = , which is obtain from the local Kalman filter, we may need the cross covariance matrices 12 1 2( )  TV x x= E , as well as 0 (( ) )  T i iV x x x= ?E , 1,2i = , reflecting the fact that (i) the  local estimation errors, 1x  and 2x , are correlated with each other, through the common state initial condition 0x , as well as the common target dynamics process noise  0[ , ] ( )  Ft t t t w ? , and  that (ii) each local estimation error ix  is not necessarily independent of the target state x.

The calculation of these cross covariance matrices are described in [10,11].



III. ONE-TIME TRACK FUSION We first consider a simple one-time track fusion problem  for generating the fused state estimate ?Fx  from the two local estimates 1x?  and 2x? . Our linear-Gaussian assumptions justify the use of the linear track fusion formula,  0 1 1 2 2? ? ?Fx W x W x W x= + +  (2)  with 0 1 2W W W I+ + =  (unbiased-ness). All the track fusion rules described in this section have this form, and hence, the performance (in terms of estimation error covariance) of each rule can be analytically expressed as   [ ]  01 02 0  0 1 2 01 1 12 1  02 12 2 2  ? ?(( )( ) )TF F F T  T T  T T T  V x x x x  V V V W W W W V V V W  V V V W  = ? ?  ? ?? ? ? ?? ?= ? ?? ? ? ?? ?? ? ? ?  E  (3)  Bar-Shalom-Campo and Speyer Rules: The Bar-Shalom- Campo rule was described in the first comprehensive paper [10] on the subject of track fusion, and defined by, for 1,2i =  11 2 12 12( )( ) T  i j jiW V V V V V V ?= ? + ? ?  (4)  with 3j i= ? . The Bar-Shalom-Campo rule is the maximum likelihood estimator with the likelihood function defined as 1 2 1 2? ? ? ?( ; , ) ( , )x x x p x x x x= ? ?L , where 1 2( , )p x x  is the joint probability density function of the two local estimation errors.

We should note that this likelihood is not 1 2? ?( , | )P x x x  that we may consider as the likelihood function in the strict Baysian sense, because the estimation errors 1x  and 2x  are correlated with the true state x. We call the track fusion rule obtained by ignoring the cross covariance 12V  in (4) the Speyer Rule, as appeared as eqn. (22) of [12].

Tracklet Fusion Rule: The tracklet fusion rule is defined by  i F iW V V ?= , 1,2i = , with 0 1 2W I W W= ? ? , as described in  [13,14]. This is a Gaussian case of the more general fusion rule to obtain the fused a posteriori probability density function 1 1 2? ?( ) ( ) ( ) / ( )Fp x C p x p x p x  ?= , from the two local conditional probability density functions 1p?  and 2p? , and the a priori probability density p , as first described in [15].

Minimum Variance (MV) and Maximum Likelihood (ML) Rules: It is well known (e.g. [16]) that the conditional expectation 1 2? ? ?( | , )Fx x x x= E  minimizes the estimation error covariance among all the estimates (i.e., all the measurable functions of the local estimates 1x?  and 2x? ), and can be obtained by [ ] 11 2 xz zzW W V V ?= , and 0 1 2W I W W= ? ? , where   1 01 01 12 01 02  12 02 01 2 02 02  01 02  and T T  zz T T T  xz  V V V V V V V V V  V V V V V V V V V V V V V  ? ? ?+ ? ? + ? ? =? ? ?+ ? ? + ? ?? ? ?  ? = ? ?? ?? ??  (5)  are the self covariance of 1 2? ? TT Tz x x? ?= ? ?  and the cross  covariance between x and z. The Bar-Shalom-Campo rule is the maximization of a likelihood function in the classical statistics sense. Let us consider the likelihood function in the strictly Bayesian sense, i.e., 1 2? ?( , | ) ( | )P x x x P z x= , and call the corresponding maximum likelihood (ML) estimate,       defined by [ ] 11 2 ?xz zzW W MV V ?=  and 0 1 2W I W W= ? ?  with 1? T  zz zz xz xzV V V V V ?= ?  and ( ) 11? Txz zz xzM V V V V ??= , the Bayesian  Maximum Likelihood (BML) fusion rule. The MV rule is the best linear unbiased estimate (BLUE) with the form of (2), while the Bar-Shalom-Campo rule is the BLUE with the constraint 0 0W =  [25].

Covariance Intersection (CI) Rules: The CI fusion methods were devised as fusion rules when the cross covariance, e.g., 12V , is not known [17], and defined as   1 1 1  1 1 2 2 1 1 1  1 2  ? ? ?(1 ) (1 )  F F  F  V x V x V x V V V  ? ? ? ?  ? ? ?  ? ? ?  ? = + ? ? = + ??  (6)  with a fixed [0,1]? ? . We consider two methods for determining the scalar ? : (i) The Shannon rule which minimizes the ( )det FV , and (ii) the Chen-Arambel-Mehra rule which minimizes tr( )FV . The linear-Gaussian assumption ties ( )det FV  to the differential entropy or the continuous entropy, ? ?ln( ( )) ( )F Fp x p x dx= ??H , of the fused probability density function Fp  [18], while the minimization of tr( )FV can be related to the minimization of the function,  ( )1 1 1 2 2 2tr tr( )T TWVW W V W+ , with respect to the matrix weights, 1 2( , )W W , under the constraint 1 2W W I+ =  [19].

Numerical Examples: To compare the performance of various track fusion rules, we have chosen a model that is simple but still captures important essential elements of general tracking systems. For that purpose, a two-dimensional position and two-dimensional velocity, the Ornstein- Uhlenbeck model was adopted using eq. (1) with  0t  I A  I? ? ?? ? ??? ?  ,  tB qI ? ?  = ? ? ? ?  , and  0 2  p  v  I V  I ?  ? ? ?  = ? ? ? ?  , where  the target velocity is a stationary process, with three parameters, ? , q, and v? , related as  22 0vq ??= > . The Ornstein-Uhlenbeck model can approximate a realistic target maneuver behavior, known as a random-tour behavior, with  1? ?  as the mean time between two maneuvers or of the length of each constant-velocity leg [20].

In order to examine the effects of the relationship between two sensors, we will consider two cases, supplementary and complementary sensor cases.

Supplemental Sensors: As an extreme example of the situations where two sensors are similar and hence supplementary to each other, we use two identical position- only sensors, i.e., [ ]0ikH I?  and 2ik mR I?? . Figs. 1 (a) and (b) show performance of various fusion rules when the process noise intensity varies over a wide range as a measure of target maneuver frequencies. The stationary velocity standard deviation 3v m? ?=  is fixed to model the physical reality of  the target, while the positional initial condition standard deviation is set as 10p m? ?= . We assume a sequence of 10 synchronous measurements are available with a fixed sampling rate t? , and the process noise intensity q is normalized as 2/ ( / )vq t? ? .

As described in the paper [10] and our previous study [11], performance by various track fusion rules is found to be within a very small range of differences, i.e., within 5% increases of the RMS (root mean square) estimation errors over the centralized tracking performance. The exception is the performance by the (Bayesian) maximum likelihood estimate, i.e., the BML Rule.

This poor performance by the BML rule should be contrasted with the robust performance by the other maximum likelihood estimate, i.e., the Bar-Shalom-Campo rule, which shows clearly which likelihood function works better for our track fusion problem. Since this supplementary sensor case uses two similar sensors, although there exists cross covariance between the two local estimates, the fusion weights by the Bar-Shalom-Campo rule are identical, i.e.,  1 2 (1 / 2)W W I= = , and so is the Speyer rule. As seen in the CI fusion equation (6), in this case, the fused CI covariance matrix FV  is the same for any [0,1]? ? . We have chosen  1 / 2? = , which makes the CI rule (both the Shannon and the Chen-Arambel-Mehra rules) identical to the Bar-Shalom- Campo and the Speyer rule.

(a) RMS Position Error  (b) RMS Velocity Error Fig. 1: Performance Comparison: Supplementary Sensors as Function of  Normalized Process Noise Intensity  The MV rule is guaranteed to generate the best performance among the fusion rules that use only local estimates. The performance of the tracklet fusion rule, which explicitly uses the a priori mean, stays between the MV and       the Bar-Shalom-Campo rule, the latter not using the a priori mean, for the positional RMS performance. This trend is reversed for the velocity estimation performance, i.e., the Bar- Shalom-Campo rule performs clearly better than the tracklet fusion rule.

(a) RMS Position Error  (b) RMS Velocity Error Fig. 2: Performance Comparison: Supplementary Sensors as Function of  Normalized Initial Position Uncertainty  Fig. 2 shows the similar performance comparison when the initial condition positional standard deviation P?  is varied, while the normalized process noise intensity level is fixed as  2 /vq t? ?= . This figure shows, with 10 local measurements for each sensor, the performance is almost constant with respect to the initial position uncertainty P? . The ranking between the Bar-Shalom-Campo and the tracklet fusion rule is also reversed in Fig. 2, as in Fig. 1.

Complementary Sensors: To simulate cases where two sensors are different and complementary to each other, we let  2 2 1 diag( ,4 )k m mR ? ??  and  2 2 2 diag(4 , )k m mR ? ?? . Fig. 3 shows  the track fusion performance by the percent increase of the RMS estimation errors over the centralized tracking results, as varying the normalized white noise intensity level as in Fig. 1.

In this case, the local state estimation error covariance matrices are different, 1 2V V? , and hence, we have 1 2W W? , and the benefit of using the cross covariance matrix 12V  by the Bar-Shalom-Campo rule is reflected by the difference between the Bar-Shalom-Campo and the Speyer rules.

As before, the MV rule gives the best performance. The BML rule, the ML estimator in the strict Bayesian sense, is omitted from Fig. 3 because of its poor performance. Since we  represent the sensor complementariness by the combination of the orthogonal asymmetric measurement error covariance matrices, both the determinant det( )FV  and the trace tr( )FV for the CI fusion rules of eqn. (6) are minimized uniquely at  1 / 2? = , which makes the two CI fusion rules identical to the Speyer rule that ignores the cross covariance matrix 12V .

(a) RMS Position Error   (b) RMS Velocity Error  Fig. 3: Performance Comparison: Complementary Sensors as Function of Normalized Process Noise Intensity Level  In this complementary-sensor case, there is a crossover of the performance of the Bar-Shalom-Campo and the tracklet fusion rules, for the positional estimation performance. Other trends in Fig. 3 are similar to those in Fig. 1. There are two peaks in the RMS error as a function of normalized process noise level, one in the low 2/ / )vq t? ?(  level, the other one in the high 2/ / )vq t? ?(  level. The tracklet fusion rule exhibits uniformly worse performance than the Bar-Shalom-Campo and the Speyer rules for the velocity estimation performance.

(a) RMS Position Error        (b) RMS Velocity Error  Fig. 4: Performance Comparison: Complementary Sensors as Function of Initial Position Uncertainty  Fig. 4 shows the performance comparison when the initial positional uncertainty is varied for the complementary sensor case. The performance curves are very similar to those in Fig.

2 for the supplementary sensor case. The only performance difference is the separation between the Bar-Shalom-Campo and the Speyer rules, caused by the inclusion of the cross covariance 12V .



IV. REPEATED TRACK FUSION WITHOUT FEEDBACK  Let us consider the cases where the track fusion, either between the local two sensor systems, or by the fusion center, is repeated. Let 1 2F F FNt t t< < <  be the fusion times, and assume, at each fusion time Fkt , 1,2,...k = , the two sensors simultaneously send the local state estimates ?ikx , 1,2i = , either to each other, or the fusion center.

We will examine two different modes of information flows: (i) repeated track fusion without feedback, and (ii) repeated track fusion with feedback. This section will describe the former, while the latter will be described in the next section.

The fusion rules described in the previous section will or will not be modified for the repeated fusion as follows:  Bar-Shalom-Campo, Speyer and CI Rules: Since these rules do not use the a priori information, under the repeated track fusion, they use only the most recent state estimates. In that sense, these rules can be said to be memoryless rules.

Tracklet Fusion Rule: The tracklet fusion defined in the previous section for the one-time fusion can be applied to the repeated fusion cases as an almost memoryless rule, using the most recent local state estimates, and the a priori information.

When we use the Ornstein-Uhlenbeck model, since the velocity process is a priori a stationary stochastic process, even when the track fusion is repeated many times, the use of the a priori information makes a certain difference from the Speyer rule. We call this form of application of the tracklet rule the common prior form.

Decorrelation Method: Another form of extension of the tracklet rule for the repeated fusion can be written as   1 1 1 1  1 1 2 2  1 1 1 1 1 2  ? ? ? Fk Fk Fk Fk k k k k  Fk Fk k k  V x V x V V  V V V V  ? ?? ? ? ? ? ? ? ?  ? = + +? ?  = + +?? (7)  with   1 1 1  1 1 1  ? ? ?  ik ik ik ik ik ik  ik ik ik  V V x V x  V V V  ?? ? ? ? ? ?  ? = ?? ?  = ??? (8)  for 1,2i = , where ?Fkx  is the fused state estimate at the k-th fusion time Fkt  with the estimation error covariance matrix  F?kV , Fkx  is the extrapolation of the fused state estimate ( 1)?F kx ? at the last fusion time ( 1)F kt ? , ?ikx  is the state estimate by sensor i at Fkt , and ikx  is the extrapolation of the local state estimate ( 1)?i kx ?  at the last fusion time ( 1)F kt ? . Eqn. (7) has the standard form of the Kalman filter, while (8) can be seen as the process for decorrelating the sequence of the local state estimates, 1 2? ?, ,...i ix x , 1,2i = . We call this form of the tracklet fusion rule the decorrelation form. The ik?  obtained by the decorrelation is sometimes called the pseudo-measurement or the equivalent measurements [21,22]. This decorrelation method is used as a basic mechanism for isolating the approximately conditionally independent information in the form of the pair ( , )ik ikV?  or equivalently by  1 1( , )ik ik ikV V? ? ? .

This fusion rule is also called the information filter in [23], and the channel filter in [24]. The decorrelation form of the tracklet filter, (7) and (8), is the one-step or limited memory method. For the one-time only track fusion, the common prior and the decorrelation forms are identical to each other.

Minimum Variance (MV) Rule: At fusion time, the available local state estimates are 21 1?(( ) )  k i ix ? ? = = , based on which  the MV estimate is defined as  1 1 0  1 1  ? ? ?( ( ) | (( ) ) ) ( ) k  k Fk Fk i i k F ki i  i  x x t x W x t W x? ? ? ? ?  = = = =  = = +??E  (9)  with  1 1  k  k ki i  W I W ? ?= =  = ??? . This gives us a full-memory fusion rule. However, as we have accumulate the local state estimates, the MV estimate, as defined in this way, may require a large number of cross covariance matrices among local state estimates at many past fusion times. To avoid such an increase of requirements, we may limit the number of past local estimates in eqn. (9), to make the MV rule a limited memory rule.

Numerical Example: Fig. 5 shows the comparison of the performance by various fusion rules for a repeated fusion without feedback case. We have chosen a complementary sensor case described in the previous section. The same Ornstein-Uhlenbeck model is used. We assume 5 fusion times, while between two consecutive fusion times 10 local measurements are used by the local data processing node.

(a) RMS Position Error   (b) RMS Velocity Error  Fig. 5: Performance Comparison: Repeated Fusion without Feedback as a Function of Normalized Process Noise Intensity Level  In these figures, the two MV rules are shown: one using only the most recent local state estimates, labeled as MV 1, and the other using the most recent two local state estimates for each sensor, labeled as MV 2. Because of the orthogonal symmetry of the sensor measurement error covariance matrices (of complementary sensors), as discussed in the previous section, both the Shannon and the Chen-Arambel- Mehra rules yield the equal scalar weights, 1 / 2? = , and labeled as CI rule, which becomes the same as the Speyer rule.

The tracklet rule is in its decorrelation form.

The positional estimation performance of various fusion rules generally shows the same trends with two peaks. The reversal of the performance in the positional and velocity estimation in the ranking of the Bar-Shalom-Campo and the tracklet rules remain the same. However, when the normalized white noise intensity level 2/ ( / )vq t? ? is small, effects of using or not using the a priori information are clearly reflected in the figures as the difference between the two groups; a group consisting of the tracklet and the MV 2 rules, and the remaining ones.



V. REPEATED FUSION WITH FEEDBACK It is rather natural to feedback fused state estimates to the  local sensor processing nodes, so that they can process data with improved accuracy. Certainly, we can expect to improve the gating and the false alarm (clutter) rejection performance in that way. With proper feedback, the overall system stability may be improved as well, provided that the information being exchanged is unbiased. However, one potential problem of the feedback approach is: When the two local state estimates are fused, either at a fusion node, or at each local node, depending on any particular track fusion rule, the estimation error covariance of the fused state estimate may or may not be  accurate. Both pessimistic and optimistic departure from the ?true? estimation error may deteriorate the performance of the local sensor tracking ability, when it is propagated back to the local data processing node. The study presented in this section is to explore such effects.

The adjustments for fusion rules to this situation will be summarized as follows:  Bar-Shalom-Campo, Speyer, and CI Rules: Since these rules do not use the a priori information, the rules themselves are unchanged. However, although the fused estimation error covariance matrix that the Bar-Shalom-Campo rule produces is honest or consistent, meaning that it is exact, both the Speyer and the CI rules provide estimation error covariance that is not honest. The one from the former tends to be optimistic, and the one from the latter pessimistic.

Minimum Variance (MV) and Tracklet Rules: Since the entire information, as far as the state estimates exchanged among the estimation nodes are concerned, is shared within the entire system, it is no longer necessary to extend the length of the memory of the past state estimates. Both MV and tracklet rules require only one-step-before fused estimate as the a priori information. Therefore, the MV rule uses only the most recent local state estimates as the best affine estimator, while the tracklet rule can use its one-step-memory form, rather than the decorrelation form that becomes equivalent.

Numerical Example: The same example using the complementary sensors and the Ornstein-Uhlenbeck model is used. Fig. 6 shows the comparison of the same set of fusion rules that are shown in Fig. 5. The overall trends among various fusion rules largely remain the same. As in Fig. 5, the deterioration from the centralized-tracking performance remains small, i.e., within 5%, over a very large range of the normalized process noise intensity.

(a) RMS Position Error   (b) RMS Velocity Error  Fig. 6: Performance Comparison: Repeated Fusion with Feedback: Function of Normalized Process Noise Intensity Level       However, we observe two departures from Fig. 5: (i) Because the Speyer and the CI rules use different calculations for the resultant fused estimate error covariance, we observe some differences in their performance; in a high maneuver rate area for the positional estimation, and in a low maneuver rate area for the velocity estimation. (ii) Both the Bar-Shalom- Campo and the Speyer rules exhibit slight divergent trends in the positional estimation performance in a high maneuver rate area. Again the rules that do not use the a priori information, i.e., the Bar-Shalom-Campo, the Speyer, and the CI rules, do not show the convergence when the target model approaches its deterministic form.



VI. TRACK ASSOCIATION METRICS The track association is generally a prerequisite for the  track fusion in any distributed tracking system. In many cases, however, the association is rather obvious, and therefore, the target state estimation in a distributed sensor environment, i.e., the track fusion problems, becomes the major problem. On the other hand, when the target density becomes higher, the track association problem may become a much more important problem than the track fusion problem. In this section, we treat the situations where the distributed tracking can be viewed as a two-stage problem, i.e., the track association followed by the track fusion.

Fig. 7: Tracks from Two Complementary Sensors  As a typical example, we use the complementary sensor case, used for the last two sections to examine the track fusion performance for the repeated track fusion. We consider situations where, with enough local observations, each sensor can establish tracks rather easily, but when local tracks from the two sensors are to be fused together, some serious association ambiguity may occur, as illustrated in Fig. 7.

In order to simulate multiple targets situations, the set of targets are modeled by a system of independent, identically distributed (i.i.d.) linear-Gaussian stochastic processes, i.e., n independent replications of the model described in Section II.

The number of targets, n, is generally unknown, and hence should be modeled as a random variable. However, for the study shown in this section, it will be treated as a constant, assuming that there is no missed target by any of the two sensors, and no false track. This assumption may be justified in many distributed tracking situations, where the local sensor and data processing have enough capability to observe all the relevant targets, and to weed out all the false tracks.

As mentioned before, the idea of distributed tracking was developed shortly after the target tracking itself started to be  discussed in terms of a modern estimation theory, i.e., the filtering theory. For the early works, we can cite the Singer- Kanyuck paper [8] published in 1971, and the seminal 1981 paper [9] by Yaakov Bar-Shalom. Those papers propose the track association metric, used in the track-to-track association probability evaluation by   ( ) ( , ( )) n  i  P a C i a j? =  = ?  (10)  where ( )P a  is the a posteriori probability of track-to-track association hypothesis represented by a permutation a on the set {1,..., }n , C is the normalizing constant, and ( , )i j ,  1,...,i n= , 1,...,j n= , is the track association likelihood between the i-th track from sensor 1, and the j-th track from sensor 2. We call the half-negative logarithm,  ( , ) (1 / 2) ln( ( , ))L i j i j= ? , of the track association likelihood in (10) the track association metric. The following track association metrics are considered:  Bar-Shalom and Singer-Kanyuck Metrics: The Bar-Shalom metric is defined as 1  1 2 12 12   1 2 ( ) ? ?( , ) T  i j ij ij i j V V V V  L i j x x ?+ ? ?= ?  (By Ax  we mean the norm on Euclidean spaces defined by a positive definite matrix A as T  A x x Ax= .), with the local state  estimates, 1? ix  and 2? jx , of the i-th track from sensor 1, and the j-th track from sensor 2, associated with self estimation error covariance matrices, 1iV  and 2 jV , respectively, and with the cross covariance matrix 12ijV . The Singer-Kanyuck metric  ignores 12ijV , so that we have 1 1 2   1 2 ( ) ? ?( , )  i j i j V V  L i j x x ?+= ? .

Chong-Mori-Chang Metric: This metric is derived as the linear-Gaussian form of a general track association likelihood  1 2? ?( , ) ( ( ) ( ) / ( ))i ji j p x p x p x dx= ? , where ? ikp  is the posterior target state distribution by the k-th track from the i-th sensor, and p  is the common a priori state distribution density. As shown in [13], the metric can be written as  1 1 1 1 2  2 2 2  12 1 12 2 12? ? ? ? ? ? ?( , )  i j ij i ij j ijV V V  L i j x x x x x x? ? ?= ? + ? ? ?  (11)  where x  and V  are the mean and the variance matrix of the a priori density function p , and 12? ijx  is the fused state estimate under the hypotheses that the two tracks originate from the same target.

Extended State Metric: The Chong-Mori-Chang metric provides an exact form for the track association for deterministic cases. To extend this optimality to non- deterministic cases, we can expand the target states to include all the states at local sensor observation times. We call the resultant metric the extended state metric.

Numerical Example: Fig. 8 shows the comparison of the track association performance, measured by the probability for each track being associated with the track that shares the same       target, using various association metrics. Unlike the track fusion performance, there is no exact analytic evaluation method, and hence, we use the Monte Carlo method, assuming one-time fusion after 10 local measurements, 100 independent targets ( 100n = ), and 1000 samples for each point in the figure.

(a) As Function of Normalized Process Noise Intensity  (b) As Function of Normalized Initial Position Uncertainty Fig. 8: Track Association Performance Comparison  It is very natural to see that the extended state metric outperforms any other metric, because of the extent of the use of the target state history. Among other metrics, the Bar- Shalom metric shows its advantage gained by its use of the cross covariance over the other metric.



VII. CONCLUSION We have reviewed various track fusion methods and track  association metrics that have been proposed in a rather long history of distributed tracking development, dated back to the pioneering work [8] and the two seminal works [9,10] on the subject. Using simple but realistic models, we compared performance of various track fusion rules and track association metrics. As for the track fusion performance, the performance deterioration by using any distributed tracking method is found very small, supporting the use of distributed architecture over the centralized one. The exception is the performance by the maximum likelihood method using the likelihood function in the strict Bayesian sense, showing the right choice of the likelihood concept chosen by the Bar-Shalom-Campo rule.

Other small variations by various track fusion rules reveal their characteristics clearly related to their derivations.

Throughout the track association metric comparison, as well as track fusion rule comparison, the use of the cross covariance information, emphasized in [9,10] clearly showed its advantage.

