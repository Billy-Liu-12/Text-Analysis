Discovering Frequent Itemsets over P2P Network

Abstract?Mining frequent itemsets over P2P network is a challenging problem. The obstacles mainly lie in numerous frequent itemsets and huge communication cost. To solve the two problems, a maximal itemset mining algorithm P2PMaxSet is proposed. Firstly, only maximal itemset is considered, which reduces the number of itemsets greatly. Secondly, mining results are only interchanged between neighbor nodes, which save communication cost. Finally, adjust strategies are discussed for dynamic environment. Experimental results show P2PMaxSet is not only accurate but also with lower communication cost.

Keywords- data mining; P2P network; maximal frequent itemset

I.  INTRODUCTION The Frequent Itemset Mining (FIM) problem in large  transactional databases was first introduced in 1994 [1]. Now FIM has been the focus of great interest among data mining researchers and practitioners. It is today widely accepted to be one of the key problems in the data mining field. In recent years, database systems have undergone major changes.

Databases are now detached from the computing servers and have become distributed in most cases. An especially interesting example for large scale distributed databases is Peer-to-Peer (P2P) system [2, 3]. If data sources are distributed over a large-scale P2P network, collecting the data at a central location before FIM is not an attractive and practical option.

Consider, for example, mining user preferences over the Kazaa file sharing network. The files shared through Kazaa are usually rich media files such as songs and videos.

Participants in the network reveal the files they store on their computers to the system and gain access to files shared by their peers in return. This database may contain interesting knowledge which is hard to come by using other means. It may be discovered, for instance, that people who download The Matrix also look for songs by Madonna. Such knowledge can then be exploited in a variety of ways, much like the well-known data mining example stating that ?customers who purchase diapers also buy beer.?  The P2P FIM problem is very different from the distributed FIM [4, 5] problem, because a database that is composed of thousands of partitions is very different from a small scale distributed database. The scale of these systems introduces a plethora of new problems which have not yet been addressed by any FIM algorithm.

Recently, Datta & Kargupta proposed a sampling-based algorithm for discovering frequent itemsets from a P2P  network [6]. They concentrated on approximate solution instead of an exact solution with probabilistic guarantee. The benefit of approximation technique is reflected in the low communication overhead in discovering majority of frequent itemsets with probabilistic guarantee. The main principal followed by the algorithm assumes that an independent and identically distributed (iid) sample of the entire data is available at one location to generate a set of candidate itemsets.

Generally speaking, we think there are two challenging issues for the problem of FIM over P2P network. One issue is the numerous frequent itemsets. It is well known that FIM often generates an exponential number of patterns, which is unavoidable when the database distributed over large P2P network. The other issue is there is no global synchronization in a system that large. The important consequence is that the communication cost between nodes is high.

To solve these two problems of FIM over P2P network, we propose a maximal itemset mining algorithm P2PMaxSet.

Firstly, only maximal itemset [7, 8] is considered, which reduces the number of itemsets greatly. Secondly, the proposed algorithm takes a completely decentralized approach, where temporal mining results are only interchanged between neighbor nodes. Thus, communication cost is saved. Furthermore, this algorithm can easily adapt to dynamic P2P network where existing nodes drop out and new nodes join in during the execution of the algorithm and the data in network changes. Experimental results show P2PMaxSet is not only accurate but also with lower communication cost.



II. PROBLEM STATEMENT  A. Maximal Frequent Itemset The problem of mining Maximal Frequent Itemsets (MFI)  is formally stated by definitions 1-4 and lemmas 1-2.

Let I={i1, i2,?, im} be a finite set of items and D be a dataset containing N transactions, where each transaction t?D is a list of distinct items t={i1, i2,?, i|t|}, ij?I(1?j?|t|), and each transaction can be identified by a distinct identifier tid.

Definition 1. A set X?I is called an itemset. An itemset with k items is called a k-itemset.

Definition 2. The support of an itemset X, denoted as sup(X), is defined as the number of transactions in which X occurs as a subset.

DOI 10.1109/ICICIS.2011.104     Definition 3. For a given D, let min_sup be the threshold minimum support value specified by user. If sup(X)? min_sup, itemset X is called a frequent itemset.

Definition 4. A frequent itemset is called a maximal frequent itemset if it is not a subset of any other frequent itemsets.

According to definitions 3-4, the following lemmas hold.

Lemma 1. A proper subset of any frequent itemset is not a maximal frequent itemset.

Lemma 2. A subset of any frequent itemset is a frequent itemset, a superset of any infrequent itemset is not a frequent itemset.

B. P2P Network The traditional FIM algorithms are designed to work  when D is stored in a single place and can be accessed in its entirety. We address the problem of carrying out maximal frequent itemsets mining when D is distributed over a large P2P network. Each node in the network, Ni (1 ? i ? n), holds D (i) ? D in its local memory; we call this the local data of Ni.

We assume that D is partitioned disjointly and exhaustively over the network (D= 1  n i?? D (i)). We assume that each node  can communicate directly with only a handful of other nodes called neighbors. The set of neighbors of Ni is denoted as ?(Ni). The overall network can be thought of as a connected, undirected graph with n vertices (each representing a node) where each vertex shares an edge only with its neighbors and each node has a unique network identifier.

Our goal is to discover maximal frequent itemsets over P2P network consistent with the global discovery of D using a traditional MFI algorithm, such as Index-MaxMiner [8].



III. P2PMAXSET ALGORITHM IN STATIC ENVIRONMENT In this section, the MFI mining algorithm in each node is  introduced at first. Then, MFI mining algorithm over a static P2P network is proposed.

A. MFI Mining in Each Node For the sake of explanation, we propose the MFI mining  algorithm within each node at first.

Algorithm 1.

MaxSet(C, MFI)  (1) if ((sup(C ? tail(C))? min_sup) AND there is no superset of C ?tail(C) in MFI) then  (2)   C ? tail(C)? MFI?  (3)   return  (4) for each frequent item i?tail(C)? do  (5)  Cn=C ? i?  (6)   if (sup(Cn) ? min_sup) then  (7)    MaxSet(Cn, MFI)  (8) if (tail(C)==?) then  (9) C ? MFI?  In Algorithm 1, tail(C) is the set of frequent items ranking after C according to certain order (e.g., lexicographic order); MFI is the set of discovered maximal frequent itemsets; the initial values of C and MFI are empty sets.

B. P2PMaxSet Algorithm in Static Environment The algorithm of mining MFI in static P2P network is  shown in Algorithm 2. Since all nodes in P2P are equal, only the procedure of one node Ni is illustrated.

Algorithm 2.

(1) Run Algorithm 1 to discover the local set of maximal itemsets MFIi of node Ni;  (2) for each node Nj??(Ni) do  (3)  send MFIi to Nj?  (4) for each MFIj sent by Nj??(Ni) do  (6) for each itemset i?MFIi do  (7)   for each itemset j?MFIj do  (8)    if i?j then  (9)    MFIi=MFIi\i?  (10)    if j?i then  (11)    MFIj=MFIj\j?  (12) MFIi=MFIi? MFIj?  (13) if MFIi changes  then  (14) goto (2)?  (15) else node Ni enters the termination state;

IV. ADJUSTMENT IN CHANGING ENVIRONMENT In this section, we describe how the algorithm can be  modified to work in a dynamic P2P environment.

A. Node Failure If a node Nj leaves the network, its immediately  neighboring nodes will discover this (by monitoring ?(Nj)).

The algorithm to do this is illustrated in Algorithm 3.

Algorithm 3.

(1) If node Nj leaves the network, its immediately neighboring nodes Ni will discover this change by searching ?(Ni);  (2) If the edge between Ni and Nj goes down, delete Nj from ?(Ni), delete Ni from ?(Nj);  (3) If Nj??(Ni) leaves the network, add nodes in ??(Nj) into ??(Ni). Send the their local maximal itemsets to Ni;  B. Node Addition If a new node Nj joins the network, the way to process  this situation is illustrated in Algorithm 4.

Algorithm 4.

(1) Run Algorithm 1 to discover the local set of maximal itemsets MFIj of node Nj;  (2) Nj begins the following steps of Algorithm 2;     C. Data Change If the data at Ni change, it can be dealt by Algorithm 5.

Algorithm 5.

1) If Ni is not in the terminated state, its behavior need not change;  2) If Ni is in the terminated state, active Ni, and re- computes its local maximal frequent itemsets MFIi;  3) Neighbors not in the terminated state can ignore the message;  4) Neighbors in the terminated state will determine whether to become active using the same technique as described above in Algorithm 4.



V. EXPERIMENTAL RESULTS We studied the behavior of P2PMaxSet in a simulated  environment on a single machine. Before reporting the results, we first describe the simulator used in the experiment.

A. Simulator Our simulation consists of two parts: the network  topology with edge delays and local computation behavior with message exchange. For the network topology and delays, we have used an Internet topology generator developed elsewhere, BRITE (www.cs.bu.edu/brite). It produces a weighted graph with edge weights representing communication delays (in milliseconds). We have used flat level ?Autonomous System? (AS) with Waxman model to simulate the network in BRITE, where two nodes u and v are connected with a probability shown in (1).

P(u, v) = ?e?d(u, v)/?L                                                      (1)  Where ?=0.15, ?=0.2, and L is the maximum distance between any two nodes. An ?incremental growth? version of the Waxman model with random node placement is used during topology construction. A new node surveys the existing nodes in the graph in each step and connects to m (=2) of them with the said probability. The diameter of the networks generated using this model usually follows a logarithmic relation with the number of nodes in the network.

Other parameters used are HS=1,000; LS=100 (size of the plane), and constant bandwidth distribution with Max BW=1,024 and Min BW=10.

The dataset used is the standard artificial transaction data generated by international business machine (IBM) Quest data generator, ?T10I4D100K?.

B. Accuracy We run standard MFI algorithm [8] on the entire data  centralized in one place and find the MFI identified by centralized approach. We then compare them with the MFI found by our proposed P2PMaxSet approach. Two parameters ? and ? are used for measuring the accuracy of the proposed algorithm. ? represents the percentage of an itemset is actually MFI in the entire data, and P2PMaxSet also detects it. ? represents the percentage of MFIs discovered by P2PMaxSet, and they are really MFIs in the entire data.

Figure 1.  Accuracy of P2PMaxSet  From Fig. 1, we can see that ? scales steadily near 100%, while ? drops with the increase of number of nodes. That is to say, the real MFIs can be discovered by P2PMaxSet, while with the increase of number of nodes, more false MFIs will be discovered by P2PMaxSet.

C. Communication Cost We test the efficiency of the algorithm at first. Fig. 2  shows the overall communication cost over different number of network?s nodes. And Fig. 3 shows the average communication cost of single node over network with different number of nodes.

From Fig. 2 and Fig. 3, we can see that P2PMaxSet algorithm is robust to change of data. Both overall and average communication complexity scales linearly with the network sizes.

Figure 2.  Overall communication cost over P2P network with different number of nodes       Figure 3.  Average communication cost of single node over P2P network with different number of nodes

VI. CONCLUSIONS This paper considers the problem of mining maximal  frequent itemsets on data distributed over a P2P network.

Centralizing all the data to a single machine to run a centralized MFI algorithm is not a feasible option. Thus, we proposed a MFI mining algorithm without centralizing the data. It can approximate the results of a centralized MFI mining at reasonable communication cost. The proposed algorithm works by having nodes communicate only with their topologically immediate neighbors in the network. This algorithm can adapt gracefully to a dynamic environment.

Our experiments show it can not only produce highly accurate results, but also with high scalability.

