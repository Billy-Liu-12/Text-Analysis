Outlier Detection for Transaction Databases using Association Rules

Abstract  Outlier detection, a data mining technique to detect rare events, deviant objects, and exceptions from data, has drawn increasing attention in recent years. Much existing research targets record data constructed with numerical at- tributes or a set of points having numeric values. How- ever, very few studies have attempted to detect outliers from data having items. We focus on transaction data and pro- pose a framework for detecting outlier transactions that be- have abnormally compared to others. As an outlier, we are interested in a transaction t in which more items are not observed even though they should normally have a strong dependency on itemsets in t. We use information of as- sociation rules with high confidence for the outlier degree calculation. In this paper, we first discuss what outliers of transactions are, and provide an outlier degree for system- atically detecting outlier transactions. We also propose al- gorithms for efficiently detecting outlier transactions from transaction databases. We present two devices for faster detection that (i) remove redundant association rules and (ii) prune candidates of outlier transactions utilizing max- imal frequent itemsets. In experiments using synthetic and real world data sets, we show that our proposal can derive enough detection accuracies and detect outlier transactions faster than a brute force algorithm.

1. Introduction  With the growth of information technology, data mining, which systematically extracts useful information from data, has become more essential. Outlier detection is the one of data mining techniques that detects rare events, deviant ob- jects, and exceptions [3, 5, 6, 8, 9, 12, 14, 15, 16, 17]. This technique has recently begun drawing attention because of its widespread applications, for example, monitoring the oc-  Table 1. Purchase Data of a Store TID Set of items  001 Bread, Jam, Milk 002 Bacon, Corn, Jam, Milk 003 Bread, Jam, Milk 004 Bacon, Bread, Corn, Egg, Milk 005 Bacon, Bread, Corn, Egg, Jam, Milk 006 Bread, Corn, Jam, Milk 007 Bacon, Bread, Egg, Milk 008 Bacon, Bread, Egg, Jam, Milk 009 Bread, Jam, Milk 010 Bacon, Egg, Milk  currence of abnormal numeric values in stock prices or sen- sor data and the detection of large withdrawals from bank accounts or credit cards. There are many useful techniques on outlier detection available for numerical data. However, very few studies attempted to detect outliers from categori- cal data such as record data having nominal attribute values and transaction data.

Until now, we have focused on categorical record data and have proposed a framework for detecting outliers from it [13]. Since there are many transaction databases in the real world, detecting outliers from them is also important and desirable. Now, we target transaction data and present a framework for detecting outlier transactions that signifi- cantly deviate from regularities or features in the input data.

For such data regularities, we apply association rules with high confidence and derive outlier degrees. The proposal in this paper provides a more general framework for detecting outliers from categorical data than that in [13], since cate- gorical record data can be converted to transaction data by regarding a pair of an attribute and its value as an item.

This paper contributes the following three points.

Formulation of an outlier degree for transactions The objective of this paper is to detect transactions that deviate from regularities or features in the input data as outliers.

To be more specific, we are interested in a transaction t in   DOI 10.1109/WAIM.2008.58    DOI 10.1109/WAIM.2008.58     Table 2. Association Rules with a Minimal Confidence 80%  ID High-Confidence Rules  rule1 {Jam} ? {Bread} rule2 {Jam,Milk} ? {Bread} rule3 {Jam} ? {Bread,Milk} rule4 {Bacon} ? {Egg} rule5 {Bacon,Milk} ? {Egg} rule6 {Bacon} ? {Egg,Milk} rule7 {Milk} ? {Bread}  which more items are not observed even though they should normally have a strong dependency on itemsets in t. We use examples to explain. Table 1 is an example of purchase data for a store.

Each row lists the commercial products a consumer bought on one shopping event. The first column corre- sponds to transaction IDs. The second column lists trans- actions that are represented as sets of commercial prod- ucts (items). Also, Table 2 shows all possible associa- tion rules generated with the support threshold at 50% and the confidence threshold at 80%. The rules with 100% confidence are ignored here. In Table 1, the transac- tions 002 and 010 include {Milk} but {Bread}, even though {Bread} should normally have a very strong depen- dency on {Bacon} because the confidence of {Milk} ? {Bread} is no less than 80%. That is, these transactions are thought to violate {Milk} ? {Bread}. Beyond that, transaction 002 violates not only this rule but also all rules in Table 2, because each right-hand itemset of the rules can- not be found even though the left-hand one occurs in this transaction. Consequently, it is thought that this transaction is less likely than transaction 010.

As the above observation shows, the transactions we want to detect as outliers are those violating more associ- ation rules with high confidence (common-sense rules). We introduce a formula for the outlier degree of transactions using information of association rules with high confidence on a given transaction database. Because this outlier degree is based on both intuitive and mathematical discussions, the outlier transaction detected with this outlier degree can be expected to have certain persuasiveness as an outlier.

Devices for faster detection Transaction data generally comprises many transactions. Although we assume that as- sociation rules with only high confidence are used to calcu- late outlier degrees, the number of these rules is still large.

For that reason, calculation can take a long time. To over- come this problem, we propose algorithms to detect outliers faster from transaction data. To increase speed, we show two algorithmic proposals: (i) removing redundant associa- tion rules and (ii) pruning candidates of outlier transactions utilizing maximal frequent itemsets.

Experimental availability validations of proposals In experiments, using synthetic and real world data, we show that our proposals can detect outlier transactions with good accuracy compared to an approach in the related work [12], which targets transaction data similar to ours and proposes an outlier degree using frequent itemsets. Beyond that, another experimental result shows that the proposed algo- rithms accomplish faster detection than a brute force al- gorithm. Also, we discuss parameter sensitivities of our method by presenting experimental results.

The rest of the paper is organized as follows: Section 2 refers to related work. Section 3 explains preliminaries for this paper and defines terms and statements. Section 4 introduces a formula of the outlier degree for transactions.

Section 5 proposes outlier detection algorithms, taking into account two, speed increasing devices. Section 6 shows ex- perimental results for real data and synthetic data. Section 7 summarizes the paper and introduces future work.

2. Related Work  Until now, much research on outlier detection targeting numerical databases has been proposed [3, 5, 6, 14, 15, 17].

They differ from our research, which targets transaction data.

[8, 9] focus on categorical databases to detect exceptions, anomalies and outliers. Just as with our method, Chan and others propose an approach based on association rules [8].

They derive an anomaly score on the basis of the proba- bilistic concept using confidences of association rules [8].

The proposal in [9] is another probabilistic approach to de- tect anomalies, targeting record data. They assume that a record having unusual combinations of attribute values sets may be an anomaly, and provide a normal degree of a record that corresponds to the probability that a combination of at- tribute values sets included in the record occurs. None of the research directly assumes transaction data. Unlike this other research, our outlier degree is not based on such a so- phisticated probabilistic theory.

Z. He at el. studied outlier detection for transaction databases in [12]. They assumed that transactions having less frequent itemsets that should often occur in data are more likely to be outliers. Because their research is similar to ours, we use their method as the baseline for detection accuracy in evaluating experiments. Here we outline their method. Based on the concept that transactions having less frequent itemsets are outliers, they derive a formula of trans- actions? normal degree using frequent itemsets. Let F be a complete set of frequent itemsets mined from input data with a given threshold and let sup(X) be a support value of an frequent itemset X ? F . The normal degree nd(t) of a     transactions t is derived as:  nd(t) =  ? X?t?X?F sup(X)  |F | .

As nd(t) is low, the corresponding transaction t is likely to be less normal. They output top-k transactions in the normal degree ascending order, as outliers.

3. Preliminaries  This section introduces the terms and statements used in this paper. A transaction database T is a set of trans- actions. |T | indicates a set cardinality of database T , that is, the number of transactions included in T . A transaction t ? T is a set of items. The set cardinality |t| is the number of items for t. Let I be a set of all items that exist in trans- action database T and let X ? I be an itemset. X?s sup- port sup(X) on T is defined as sup(X) = |{t|t?T?X?t}||T | .

For a user-specified threshold min sup, itemset X such that sup(X) ? min sup is called frequent itemset [4]. In this paper, we often call a frequent itemset FI for short. Also, the threshold min sup is named minimal support. In a set of all frequent itemsets derived with a minimal support min sup, an itemset, which has no other frequent itemsets as a super- set, is called maximal frequent itemset [7]. In this paper, we often call a maximal frequent itemset maximal FI for short.

For two itemsets X,Y ? I such that X ? Y = ?, the statement representing an association such that when X oc- curs then Y occurs is called the association rule. Then, the left part X is called the antecedent and the right part Y is the consequent. Using the support defined above, the confidence of an association rule X ? Y is defined as conf(X ? Y ) = sup(X?Y )sup(X) . Generally, because the num- ber of association rules generated from a complete set of FIs is vast, it is natural that, for a user-specified thresh- old min conf , only association rules such that conf(X ? Y ) ? min conf are generated as useful information. Such a threshold min conf is a minimal confidence. When an association rule X ? Y has a confidence greater than or equal to a minimal confidence, we call such an association rule X ? Y high-confidence rules. Our focus is on the high-confidence rules in which the confidence is especially high. In this paper, unless specifically stated, we assume that confidences of high-confidence rules are very high.

Definition 1 Unobserved rule For an association rule X ? Y , when an itemset Z ? I  satisfies X ? Z ? Y ? Z, Z is said to violate for X ? Y .

Beyond that, such an association rule X ? Y is called Z?s unobserved rule.

4. Outlier Degree  In this section, we derive an outlier degree using associa- tion rules to detect transactions that should be outliers from  a transaction database.

We are interested in a transaction t in which more items  are not observed even though they should normally have a strong dependency on itemsets in t. An association rule X ? Y with a high confidence means that when X occurs, then Y occurs with high probability. That is, for a high- confidence rule X ? Y , when X occurs in a transaction, then it is thought that all items included in Y should also oc- cur in the transaction. Violation of the rule is an indication of the outlier transactions we want to detect.

To derive the formula of outlier degree, we now consider the ideal form of a transaction t, t+, which includes t com- pletely and does not violate any high-confidence rules.

Definition 2 Associative Closure For itemset t ? I and a set of high-confidence rules R, t?s  associative closure t+ is defined as follows:  t0 = t ti+1 = ti ? {e|e ? Y ? X ? ti ? X ? Y ? R}  t+ = t?  For transaction t, the cardinality of itemset ti+1 increases when the itemset ti has unobserved rules. If ti has no un- observed rules, ti+1 converges and becomes t?s associative closure t+. Obviously, t+ is uniquely decided for each t.

If t has fewer items that should have a strong dependency on an itemset in t, the difference between t and its ideal form t+ must become larger. If t has fewer unobserved rules, t+ must be similar to t and must not be interesting as an outlier.

Here, we derive an outlier degree of transactions using this associative closure as follows:  Definition 3 Outlier Degree Let t+ be the associative closure of transaction t ? T for  high-confidence rules set R. Then t?s outlier degree is de- rived by the formula below.

od(t) = |t+ ? t| |t+|  The domain of the value is 0 ? od(t) < 1. When t+ = t, od(t) = 0. Only when t = ?, od(t) = 1. We do not assume such a transaction t. Therefore, the upper bound is od(t) < 1. Note that we can ignore rules with 100% confidence in the set of high-confidence rules R for the cal- culation of outlier degrees, because such rules cannot be unobserved rules for any transaction.

We now show a process for calculating a transaction?s associative closure and the outlier degree using an exam- ple. We now calculate the associative closure of transac- tion 002 in Table 1 using high-confidence rules in Table 2. According to the procedure in Definition 2, t1 is de- rived. Because transaction 002 includes antecedents of all rules, taking the union of consequents of all rules to be {Bread,Egg,Milk}, t1 is derived as follows:     t0 = {Bacon,Corn, Jam,Milk} t1 = {Bacon,Corn,Bread,Egg, Jam,Milk}  Again comparing each rule in Table 2 and t1, t2 is derived.

However, because obviously t1 = t2, we get t+ = t1.

Therefore, the outlier degree of transaction 002 is 2/6 = 0.33 from |t+ ? t| = 2 and |t+| = 6.

We now formally define the outlier transactions.

Definition 4 Outlier Transaction For user-specified threshold min od, when transaction t ? T satisfies the condition od(t) ? min od, t is regarded as an outlier and called outlier transaction. min od is called minimal outlier degree.

The outlier degree we derive does not take into account the rules? confidence values. However, because our focus is association rules such that the consequent?s dependency for the antecedent is strong, i.e., the confidence values are very high, the gap among rules? confidences is relatively small.

5. Outlier Transaction Detection Algorithms  In this section, we propose algorithms for detecting faster outlier transactions from transaction databases.

The pseudo code presented in Table 3 is conceivably a simplest brute force algorithm for detecting outlier trans- actions. In line 1, it mines a set of FIs F with a minimal support min sup from a transaction data T . For practi- cal implementations, we use the FpGrowth algorithm [11], which mines depth-first FIs with a compact tree structure to keep data in memory. In line 2, it generates all possible high-confidence rules and derives the complete set R from F . For practical implementations, we use the association rules generation algorithm in [4]. Finally, in line 3, it calls the function getOutliers presented in Table 4. This function receives T , R and a minimal outlier degree min od, derives associative closures of each transaction, calculates the out- lier degree and returns a set of outlier transactions.

Because the function getOutlier has O(|T | ? |R|) time complexity, when |R| and |T | become very large, the pro- cess time will be very large. To detect outlier transactions faster, we improve this brute force algorithm. The proposed algorithm provides two devices that decrease |R| and |T |, respectively. These two devices and the specific algorithms are now explained.

5.1. Outlier Candidates Detection  The objective of the second device for faster detection prunes transactions that cannot be outliers.

We now focus on the following property of the proposed outlier degree.

Table 3. Basic Algorithm (Brute Force) Input: database T , each threshold min sup, min conf and  min od Output: A set of outlier transactions OT  1. get complete set of FIs F on T with min sup; 2. get complete set of high-confidence rules R with F and  min conf ; 3. OT = getOutliers(T ,R,min od);  Table 4. Function getOutliers Function getOutliers(database T, rules set R, threshold min od)  1. foreach t ? T 2. t+ = t; 3. size = 0; 4. while size < |t+| 5. size = |t+|, ttmp = ?; 6. foreach X ? Y ? R 7. if X ? t+ then ttmp = ttmp ? Y ; 8. t+ = t+ ? ttmp, ttmp = ?; 9. od(t) = |t+ ? t|/|t+|;  10. if od(t) ? min od then OT = OT ? {t};  Property 1 Let t ? T be a transaction. For minimal sup- port and two different minimal confidences min conf1 and min conf2 such that min conf1 < min conf2, t?s outlier degrees are od1(t) and od2(t). Then, od1(t) ? od2(t).

Proof 1 For a set of FIs, let R1 be a set of high-confidence rules derived with min conf1 and R2 be that derived with min conf2. When min conf1 < min conf2, R2 ? R1.

Thus, for a transaction t, let t1+ be t?s associative clo- sure derived with R1 and t2+ be t?s associative closure de- rived with R2, t2+ ? t1+. That is, when min conf1 < min conf2 then |t2+| ? |t1+|. For a constant c and vari- able x, x?cx is a monotone increasing function. Therefore, for a fixed t, od1(t) is not less than od2(t). Hence, when min conf1 <min conf2, then od1(t)?od2(t).

Here, we introduce a new definition.

Definition 5 Maximal Associative Closure Let M be a set of all maximal FIs derived from a transac-  tion database T . For an itemset t ? I , t?s maximal asso- ciative closure t+max is derived as follows:  t0max = t ti+1max = t  i max ? {e ? mi|mi ? M ? mi ? timax ?= ?}  t+max = t ? max  Property 2 For a transaction t ? T and a minimal sup- port, a maximal associative closure t+max equals t?s asso- ciative closure t+0 , which is derived with min conf = 0%.

Proof 2 For a maximal FI mi ? M for a minimal support, if mi ? timax ?= ?, let X = mi ? timax and Y = mi ? X .

Then, both X and Y are frequent itemsets and an associa- tion rule X ? Y exists in a set of all high-confidence rules with min conf = 0%. Then, because it is obvious that timax ?Y = timax ?mi, t+max equals an associative closure t+0 , which is derived with min conf = 0%.

Thus, the proposed outlier degree derives an upper bound for a minimal support value.

Definition 6 Upper Bound of Outlier Degrees For a transaction t ? T , a minimal support and a mini-  mal confidence, let t+max be t?s maximal associative closure and let od(t) be t?s outlier degree. od(t)?s upper bound odmax(t) is derived as odmax(t) =  |t+max?t| |t+max| .

A transaction t, if the upper bound of t?s outlier degree is less than a given minimal outlier degree, are not regarded as an outlier at any price.

The proposed algorithm figures out which FIs are maxi- mal and gets a complete set of maximal FIs M in the step of frequent itemset mining. Generally, the number |M | is much less than that of high-confidence rules |R|. We can finish calculating the maximal outlier degrees of all trans- actions much faster than calculating the outlier degree of all transactions.

Then, pruning transactions of which the outlier degree upper bounds are less than the minimal outlier degree, we figure out the outlier degree for fewer transactions using R.

5.2. Pruning Redundant Rules  This sub-section describes the device that decreases the number of high-confidence rules used to calculate outlier degrees.

To calculate outlier degrees, we derive an associative clo- sure t+ of each transaction t ? T using a complete set of high-confidence rules R. Practically, however, R has many high-confidence rules that are not needed to calculate asso- ciative closures.

We explain again taking Table 2 as an example. From Definition 2, associative closure t+ grows with ti?s un- observed rules. Let us assume an itemset t such that {Bacon} ? t, then the consequent {Egg, Milk} of rule6 is appended for making t?s associative closure. Also, the consequent {Egg} of rule4 is appended. However, this ad- dition is obviously redundant. The reason is that when the item Egg is appended by rule4, Egg can also be appended by rule6.

From the above observation, it is clear that a set of all high-confidence rules for a minimal confidence has obvi- ously redundant rules for making associative closures.

Definition 7 Nonredundant Rules Let R be a set of all high-confidence rules. An association  rule X ? Y ? R is called nonredundant rule when it has no other association rule Z?W ?R and S?V ?R such that (i) X ?Y = Z?W ?X ? Z and (ii) X = S?Y ? V respecticely. A set of all nonredundant rules in R is called the minimal rules set for R.

From the above definition, a minimal rules set naturally has the two properties listed below.

Table 5. Proposed Algorithm Input: database T , each threshold min sup, min conf and  min od Output: A set of outlier transactions OT  1. get complete set of FIs F and that of maximal FIs M on T with min sup;  2. /* calculate upper bounds and get a set of candidate outlier transactions */  3. C = ?; 4. foreach t ? T 5. calculate odmax(t) using M ; 6. if(odmax(t) ? min od) then append t into C; 7. If C = ? then exit; 8. /* get a minimal rule set Rmin */ 9. foreach lk ? F (k ? 2)  10. H1={{h?lk}|conf((lk?{h})?{h})?min conf}; 11. Rmin = genMinRule(lk, H1); 12. foreach non-marked X?Y?Rmin and the other S?V?Rmin 13. if X = S ? Y ? V then mark X?Y ; 14. remove marked rules from Rmin; 15. call getOutliers(C,Rmin,min od);  Property 3 For a set of all high-confidence rules generated from a set of FIs F , a minimal rules set Rmin derived also from F is uniquely decided and Rmin?R thus |Rmin|?|R|.

Property 4 Let F be a set of FIs, R be a set of all high- confidence rules generated from F , and Rmin be the mini- mal rules set for R. For an itemset t, let t+ be t?s associative closure derived by R and t+min be t?s associative closure de- rived by Rmin. Then, t+ = t+min.

From the above two properties, in the step that generates high-confidence rules from a set of FIs F , the proposed al- gorithm derives Rmin, i.e., a set of only nonredundant rules rather than derive a set of all high-confidence rules R. The specific algorithm generating only nonredundant rules is ex- plained later.

The next sub-section explains the full algorithms.

5.3. Full Algorithm  From the above discussion, the proposed algorithm is presented in Table 5. While the brute force algorithm in Table 3 derives only a set of FIs F , the proposed algorithm derives a set of maximal FIs M as well as F (line 1). The implementation for line 1 is based on an existing algorithm FpGrowth [11]. It receives a transaction database T and a minimal support min sup and returns a set of FIs F and a set of maximal FIs M . After building an FP-tree [11], it starts mining recursively FIs according to the algorithm of FpGrowth. Concurrently, it figures out which FIs are maximal using an MFI-tree and subsetChecking method in [10]. [10] proposes the MPmax* algorithm, which mines only maximal FIs using the MFI-tree.

Table 6. genMinRule Function genMinrule(FI lk, set of m-itemsets Hm)  1. if k > m + 1 2. TMP1 = ?; 3. Hm+1 = apriori-gen(Hm); 4. foreach hm+1 ? Hm+1 5. r = hm+1 ? (lk ? hm+1); 6. if conf(r) ? min conf then append r to TMP1; 7. else Hm+1 = Hm ? hm+1; 8. TMP2 = genMinRule(lk, Hm+1); 9. foreach X ? Y ? TMP1  10. foreach Z ? W ? TMP2 11. if X ? Y = Z ? W ? X ? Z then 12. mark X ? Y ; 13. return TMP1 ? TMP2;  Then, deriving a set of candidate outlier transactions C with M , if C is an empty set, that is, there are no candidate outliers, the process stops (line 3-7).

Otherwise, it derives a minimal rules set Rmin con- structed only with nonredundant rules (line 9-14). The al- gorithm for generating high-confidence rules is based on the algorithm in [4]. In the function genMinRule in Table 6, generating high-confidence rules recursively, it marks asso- ciation rules X ? Y ? Rmin, which have another associa- tion rule Z ? W ? Rmin in Definition 7. After the recur- sive process, it marks association rules X ? Y ? Rmin, which have another association rule S ? V ? Rmin in Definition 7. It then removes rules that have a mark.

Finally, with C, Rmin and minod, call the function getOutliers and get outlier transactions (line 15).

6. Experimental Results  The experimental environments are RedHat Linux, In- tel(R) Xeon(TM) 3GHz CPU, 6GB main memory and Java 1.6.0. First, explaining data used in the experiments, we show the detection accuracy comparisons against [12] and runtime comparisons against the brute force algorithm. We also provide an analysis of parameter sensitivities for the proposed method.

6.1. Data Sets  We use a real data set (Intrusion) and a synthetic data set (Synthetic).

We have derived a network connection records data set from the UCI Machine Learning Repository [2], which in- cludes a variety of intrusions. Attributes include length of the connection, the type of protocol, network service on the destination and so on. Each record is classified into the nor- mal class or one of the intrusion classes such as guess pass- word, warezmaster and so on. Most attributes take contin- uous values, which are discretized to 5 levels. We selected records in the guess password class as the true outliers set        0 20 40 60 80 100 Detection Rate (%)  D et  ec tio  n Pr  ec is  io n  (% )  AR Method (min_sup=80%,min_conf=80%) AR Method (min_sup=80%,min_conf=95%) FI Method (min_sup=50%)  Figure 1. Accuracy Comparison (Intrusion)  and created a data set, which contains 97% normal records and 3% outlier records. Because our method targets trans- action data, we converted this record data to transaction data in which each item corresponds to a pair of an attribute and its value. Thus, the cardinality of each transaction is the same. The number of transactions is 2053.

The synthetic data set is generated by a data generator of IBM [1]. We provided two different parameter sets to the generator and created two kinds of data sets, which have the same item domain (10,000 items) but a different item dis- tribution. One contains about 1,100 transactions; the other has about 97,000 transactions. We combined these two data sets and finally derived a synthetic data set for experiments.

In the experiments below, we try to detect transactions that originally belonged to the smaller data set as true outliers.

6.2. Accuracy Comparisons  We validate our method, which uses association rules (AR Method), against the method (FI Method) using fre- quent itemsets in [12]. We take two accuracy measures, the detection rate (d rate) and detection precision (d prec) de- fined by the next formulas:  d rate = # of detected true outliers  # of all true outliers  d prec = # of detected true outliers  # of detected transactions as outliers Parameter sets used in AR Method and FI Method are  different. For fair evaluation, we provide fixed parameters for each method, and regard transactions which have the top-k highest outlier degree (or top-k lowest normal degree) as outliers. Changing the k value, we derive accuracies for a given parameter set. Among some sets of parameters pro- vided for experiments, we regard the parameter set as the most proper one when the best F-measure is highest.

Fig. 1 shows the accuracy comparison for Intrusion. The parameter set (min sup, min conf ) = (80%, 80%) is most proper for AR Method. Besides, we provide min sup = 50% to FI Method as a proper parameter. The plot lines of AR Method and FI Method get together completely,       0 20 40 60 80 100 Detection Rate (%)  D et  ec tio  n Pr  ec is  io n  (% )  AR Method (min_sup=0.05%,min_conf=70%) AR Method (min_sup=0.05%,min_conf=75%) AR Method (min_sup=0.05%.min_conf=65%) AR Method (min_sup=0.07%,min_conf=70%) AR Method (min_sup=0.03%,min_conf=70%) FI Method (msup=0.025%)  Figure 2. Accuracy Comparison (Synthetic)  where the best F-measure is recorded as 94.4% when d rate = 96.2% and d prec = 92.7%. Both our method and FI Method maintain very high values for both the detection rate and precision.

In order to analysis about parameter sensitivities of our method, we provide 65% and 95% as min conf when min sup = 80% for AR Method. Moreover, 75% and 85% as min sup are also given when min conf = 80%. Al- though the plot line for (min sup, min conf ) = (80%, 95%) lowers a little comparing to that for (min sup, min conf ) = (80%, 80%), the detection performance is enough (See Fig. 1). The plot lines for the other param- eter sets are omitted in Fig. 1 because they have produced the same result for (min sup, min conf ) = (80%, 80%).

The reason that each plot line shows very high accuracies is thought that the associations between items are very strong in Intrusion. Almost all of the association rules generated by itemsets in this data have a very high confidence. As a result, AR Method and FI Method show the same accuracies when a proper parameter set are provided.

Fig. 2 shows the accuracy comparison for Synthetic.

We have given (min sup, min conf ) = (0.05%, 70%) as the proper parameter set for AR Method, while min sup = 0.025% is the most proper for FI Method. Then, our method obviously outperforms FI Method. The best F- measure is recorded as 69.3% when d rate = 79.8% and d prec = 61.2% for AR Method; for FI Method it is 5.7% when d rate = 25.7% and d prec = 3.2%. FI Method can rarely detect true outliers in Synthetic. This is because as- sociations between items in Synthetic are not very strong and are insufficient for only FIs to extract regularities and features from this data.

When the minimal support is higher, fewer itemsets are mined from Synthetic. Thus, with FI Method, substantial transactions derive a 0 value as the normal degree. Like-      91 92 93 94 95 96 97 98 99  Minimal Support (%)  R un  tim e  [m se  c] (lo  g.

s  ca le  )  BF MinR MaxC MinR+MaxC  Figure 3. Runtime vs. min sup (Intrusion)  wise, AR Method provides a 0 value to many transactions as the outlier degree, because it can not derive a suffi- cient number of association rules with high confidence from fewer itemsets.

Inversely, many varieties of itemsets start being mined from Synthetic when minimal support becomes lower. As a result, with FI Method, only the transactions of which car- dinality is smaller have a chance for the normal degree to become lower, because they must have less FIs. On an- other front, AR Method can extract regularities and features from this data by generating high-confidence rules. Thus our method can detect more true outliers.

For AR Method, we provide the other min conf val- ues, 65% and 75%, when min sup = 0.05%. Additionally, we give 0.03% and 0.07% as min sup when min conf = 70%. Then, additional four lines are plotted in Fig. 2. These plot lines show that our method provides different detection accuracies for each parameter set. Further analysis for pa- rameter sensitivities is presented later.

To conclude, unlike FI Method, AR Method has good de- tection performance for data when the associations between items are not very strong, as well as for data having strong associations between items.

6.3. Runtime Comparisons  Here, we verify that the proposed algorithm delivers faster detection. We compare four detecting methods. First is the brute force algorithm in Table 3 (BF). Second is an outlier detection that uses only a minimal rules set (MinR), which reduces the number of high-confidence rules used for the outlier degree calculation. Third is one that uses only a maximal associative closure (MaxC), which prunes the number of transactions required to calculate the outlier degree accurately. Fourth is our complete algorithm using both a minimal rules set and a maximal associative closure (MinR+MaxC).

Fig. 3 shows the processing time (logarithmic scale) for Intrusion when min conf = 95%, min od = 0.15 as min sup changes. Compared with BF, both MinR and MaxC provide much faster detection. The runtime         0.04 0.05 0.06 0.07 0.08 0.09 0.1  Minimal Support (%)  R un  tim e  [m se  c] (lo  g.

s  ca le  )  BF MinR MaxC MinR+MaxC  Figure 4. Runtime vs. min sup (Synthetic)  difference between MinR and MinR+MaxC is small but MinR+MaxC runs a little faster. Because the number of maximal FIs is almost equal to that of high-confidence rules, pruning candidates of outlier transactions using max- imal FIs works not so effectively.

The runtime changes (logarithmic scale) for Synthetic are shown in Fig. 4, with min conf = 75% and min od = 0.4 as as min sup changes. For min sup less than 0.09%, MinR+MaxC is fastest, while MinR is the fastest for min sup ? 0.09%. When a minimal support is larger, the algorithm that uses only a minimal rules set detects outliers fast enough. Overall, MinR can reduce runtime by much more than MaxC can.

6.4. Observation for Parameter Sensitivities  In this subsection, we provide an analysis with regard to parameter sensitivities. Figs. 1 and 2 show that our method may detect a different set of transactions, when different minimal support and confidence are provided. Especially, with data where associations between items are not very strong like Synthetic, the accuracies are likely to change larger depending on provided parameter sets.

From this analysis, although the proposed method has excellent potential to detect performance, it is sensitive to a set of parameters given by the user. The problem of how to select the proper set of parameters for input data is impor- tant. We plan to cope with this problem in future work.

7. Conclusions  In this paper, we target transaction databases and pro- pose the detection of transactions that are likely to be out- liers. Defining the concept of associative closure using as- sociation rules with high confidence, we derive a formula for outlier degree. Also, to detect outlier transactions faster, introducing nonredundant rules, we propose to decrease the number of association rules used to calculate outlier de- grees. Beyond that, using maximal FIs, we present pruning candidates for outlier transactions. Experiments using syn- thetic and real data show that our proposed algorithm can  detect outlier transactions with good accuracy, compared with an existing algorithm. In addition, runtime compar- isons against a brute force algorithm reveal that our pro- posed algorithm is faster. A future task is to derive the most proper parameter values such as min sup, min conf and min od.

