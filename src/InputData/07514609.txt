A marketing solution for cross-selling by high utility

Abstract?Utility-base mining has emerged as an alternative  approach for frequent itemset mining because it reflects  statistical correlation and semantic significance among the items.

Dynamic databases require a provision for adding new data to  the previous analysis results to handle existing and newly  generated data efficiently. This paper introduces a system which  uses HUPID-Tree structure to maintain the information about  the database and patterns and it is updated only with the  incremented data. It reduces the time overhead of rescanning the  database from the beginning. High utility itemsets (HUIs) i.e. the  desirable patterns mined from the HUPID-Tree will be used for  generating rules. Cross selling profit of each rule will be  estimated with the help of an objective function i.e. the rule  utility function. Cross selling is the practice of selling among the  established customers. It uses items in the consequent part of a  rule for recommendation and provides future profit information  with the application of a rule. Managers can use this cross-selling  profit information to maximize the profit and the itemsets which  will be sold in the future will also be the high utility itemsets.

Keywords? Dynamic Databases; High utility itemsets; Rule  utility.



I. INTRODUCTION  Data mining techniques are the algorithmic processes, help in mining useful and hidden information from the large databases. Recent data mining researches focus on discovering interesting patterns. In the real world databases like transactional databases and web databases, it is difficult to find interesting itemsets only on the basis of their occurrence frequencies. It is necessary to take quantity (internal utility) and importance (external utility) of the items into consideration. Real world databases are dynamic in nature because data is generated continuously. In the distributed databases, central database is appended with the databases from the various sites periodically. Hence dynamic databases require a provision for adding new data to the previous analysis results to handle existing and newly generated data efficiently [12]. It can reduce database scans, which is a time consuming activity for the large databases. Hence for dynamic databases, using incremental pattern mining approach is beneficial [2].

The rules generated from the high utility itemsets can be used either for packaging or cross-selling. In packaging, items which are to be sold together are displayed in the same shelf.

Hence knowing itemset utility is enough to evaluate rule?s usefulness [19]. But in cross selling, items in the consequent part of a rule are used for recommendation [7].

Recommendations will be done on the basis of the customer?s purchased history [7]. Cross selling increases profit by selling some additional items to the customers. Hence finding high utility itemsets is never enough for cross selling because it considers all the items and all the items do not contribute in the calculation of cross selling profit [7].

In cross selling, profit generated by the rule is evaluated in terms of its rule utility. It gives information about the amount of output that can be achieved with the application of some rule [19]. It is calculated with the help of a rule utility function which considers three elements: (1) Probability, (2) Opportunity and (3) Effectiveness of a rule. Probability element is defined on the basis of probability that a rule will yield benefit hence it is equivalent to the confidence of a rule [7]. Opportunity can be interpreted as the number of potential customers or the market size. In transactional databases, Potential customers are targeted by their purchase history [7].

Finally, Effectiveness is defined on the basis of average benefit expected from the rule. In cross selling, it takes only effective items i.e. the consequent items into consideration [19]. If these rules will be generated from the high utility itemsets, the itemsets which will be sold in the future for increasing profit will also be the high utility itemsets.

Proposed system will maintain the information about the database and patterns in HUPID-Tree i.e. High Utility Patterns in Incremental Databases Tree [12]. It uses incremental mining strategy hence doesn?t need to scan the database from the beginning for each update in the data. The tree will be restructured for pruning the search space and for reducing the candidates [12]. HUIs which are extracted from the candidates will be used for generating a set of rules as an output. The rules will be filtered by making the use of some user defined cross selling profit threshold [7].

Remaining sections in the paper are as follows. Earlier work done in this field is described in section 2. Section 3 contains overall process of the proposed system. Algorithm is illustrated in section 4 and section 5 provides analysis of the system with an example. Finally, the contribution is concluded in section 6.



II. RELATED WORK  Utility based mining has emerged as an alternative approach for frequent pattern mining [7]. Two-phase is the Apriori- based algorithm suggested by Liu Y, Liao W-K, and Chaudhary AN. It uses TWU based overestimation method but faces the problem of large candidate pattern generation [15].

To resolve this issue UP-Growth [14], Up-Growth+ [3], IHUP [16] were suggested. IHUP used incremental mining approach and constructs tree with single database scan. It can extract all the high utility itemsets. But, for long transactions and low minutil threshold value, it extracts many candidate patterns.

Up-Growth uses potential high utility to reduce the number of candidates. Up-Growth+ further used strategies like decreasing local node utility and discarding local unpromising items.

FUP-HU was proposed in 2012 [2]. It was based on the fast update approach and it was faster than the two-phase batch mining algorithm. It uses existing data as well as new data to classify the patterns. Patterns from existing as well as new data and with TWU values more than or equal to the minutil threshold are classified as the first type. Patterns only from the existing data and with TWU values more than or equal to the minutil threshold are classified as the second type. Patterns only from the new data and with TWU values more than or equal to the minutil threshold are classified as the third type and patterns in the forth type are having TWU values less in both existing as well as new data.

HURM algorithm can estimate the cross selling profit of a rule by defining a rule utility function [7]. It is a rule based algorithm but it cannot handle the dynamic nature of the databases. Whenever the database is incremented, it requires scanning of the database from the beginning and it is a time consuming task for the large databases.

Chan proposed HUIM [16]. It defines an objective function and finds rules which satisfy that function. HUIM was applied to market basket analysis by Yao in 2004 [17].



III. OVERALL PROCESS OF THE PROPOSED SYSTEM  A. Definitions  Definition 1: D be the database consists of m transactions such  as D = {T1, T2, T3, -----, Tm}.

Definition 2: I is the set of items such as I = {i1, i2, i3, ---, in}.

Definition 3: Pattern P be the set of k distinct items such as {i1,  i2, i3, --------, ik}, where P ? I and 1 ? k ? n.

Definition 4: Internal utility (iu): Internal utility is the non-  binary quantity value of the item.

Definition 5: External utility (eu): External utility is the unit  price or unit profit of the item.

Definition 6: Utility of the item (u (i, Tj)): It is calculated as iu  (i, Tj) * eu (i).

Definition 7: Pattern Utility (u (P)):  Pattern Utility in D is  calculated with the formula ? u (P, Ti) where P ? Ti and 1 ? i ? m.

Definition 8: Transaction utility (TU):  Transaction utility is  calculated with the formula  ? u (i, Ti) where i ? Ti.

Definition 9: Transaction Weighted Utility (TWU (P)):  Transaction Weighted Utility of the pattern P is calculated by  taking the sum of transaction utilities of all the transactions  which include pattern P, ? TU (Ti) where P ? Ti and Ti ? D.

Definition 10: Utility of the database U (D): It is defined as ?  TU (Ti) where Ti ? D.

Definition 11: Minimum Utility Threshold (?): It is the ratio to  U (D) i.e. the database utility. E.g. consider Table 1, if ? is set  to 25% and U (D) = 101, minutil = U (D) * ? = 101 * (25 /  100) = 25.25.

Definition 12: Path Utility (PU):  PU (ip, P) is the utility of the  path P at the item ip and it is calculated as MIN (ip.Maxquantity  * eu (i) *   support (P) + PU (ip-1, P sorted), TU (P)).

Definition 13: Minimum-utility: It is the least item utility  available in the database.

Definition 14: Local path utility: lpu (ip, P) is the Local path  utility of the sorted path P of length k at each item ip and it is  calculated as utility (P) - ? minimum-utility (ij) * support (P)  where 1 ? p ? j ? k in the search space.

Definition 15: Rule Utility (RU): It measures usefulness of a  rule. It is calculated with the help of Rule Utility Function as  RU (C ? D) = Probability (C ? D) * Opportunity (C ? D) *  Effectiveness (C ? D).

B. System Block Diagram                                          Fig. 1.  System block diagram    Proposed system as shown in fig. 1 will have the following  two phases:       Phase1: Global HUPID-Tree construction and candidate pattern  generation [12]  Phase 1 will start with the construction of Global HUPID-Tree  by taking database D and external utility table as input. For each  transaction, items will be added into the HUPID-Tree from the  root node. Each node in the tree will maintain three values: (1)  Node Name, (2) Maximum-quantity of the item and (3)Path  Utility. Initially Path Utility value will be 0 for each node. Two  Tables i.e. Header Table and TIList Table (Tail Item List Table)  will be maintained along with the tree. Header Table will be  used for the calculation of TWU value of each item and TIList  Table will be used for maintaining the information about each  path in the tree. When a new node is added to the tree, its entry  will be created in the Header Table with its name and TU value.

If the node for the item which is being added, already exists in  the tree, only the TWU value in the Header Table will be  updated. When the last item of the transaction will be added into  the tree, the TU and support value of that transaction will be  added in the TIList Table. If more than one transaction will end  up with the same tail node, TU and support value will be  updated accordingly in the TIList Table. After the insertion of  last transaction from the database D, the process of restructuring  will be carried out. In restructuring, for each tail node entry in  the TIList Table, a path is extracted up to the root node of the  tree. All the items from the extracted paths will be sorted in their  descending TWU order. Simultaneously, Path Utility for each  item will be calculated as described in Definition 12. The items  from the sorted paths with their Path Utility values will be added  to the tree using the same insertion process. This will bring the  items with higher TWU values in the upper part of the tree.

Thus, restructuring will help in pruning candidate patterns and  search space.  When there will be an increment in the database  after the construction of Global HUPID-Tree, the items from the  transaction which is being inserted will be sorted in their  descending TWU order and added to the tree with Path Utility as  0. After the insertion of the last transaction from the  incremented data, restructuring will be carried out in the same  manner. When a mining request will come from the user,  Header Table will be traversed from the bottom. If TWU value  of an item is more than or equal to the minutil then it will be  selected as a global promising item (conditional item). For each  global promising item, a search space will be prepared. Search  space is also called as the conditional pattern base. For the  construction of conditional pattern base, all the paths above the  conditional item in the tree will be extracted.  Path Utility value  of the conditional item is selected as extracted path?s Utility.

Support of the extracted path will be calculated from the support  of all the tail node items present below the conditional item  including itself. For each item in the conditional pattern base,  Local TWU value will be calculated and locally unpromising  items will be discarded from the extracted paths. The remaining  items will be sorted in their descending local TWU order.

Simultaneously their Local Path Utility will be calculated as  described in Definition 14. Conditional Pattern tree will be  constructed by adding the sorted paths from the conditional  pattern base. Each node will maintain support and Local Path  Utility value with it. Here, the candidate of length 1 will be  generated. If Header Table of the conditional pattern tree  contains more promising items into it, then recursively search  space and conditional pattern tree will be created for them and  candidates will be generated accordingly.

Phase 2: Extraction of High utility itemsets and set of rules with  high cross selling profit  High utility itemsets will be extracted from the generated  candidates by comparing their utilities with the user defined  minutil threshold value [12]. Further, rule utility is calculated for  each generated rule with the help of a rule utility function [7]. In  the proposed system, rule utility is the measure of cross-selling  profit. Rule utility function is the product of three elements (1)  Opportunity, (2) effectiveness and (3) probability [19]. It is  defined as    RU (C? D) = Prob (C ? D) * Opp (C ? D) * Eff (C ? D)(1)  ? ? ? ????????????? ???? ??? Opportunity of the rule C ? D  is denoted as Opp (C ?  D). It represents opportunity to apply the rule. In cross selling, it targets percentage of the customers who don?t buy the consequent items [7]. It can be defined as  Opp (C ? D) = (1- Conf (C ? D)) * sup (C)             (2)   Effectiveness of the rule C?D is denoted as Eff (C ? D).

In cross selling, it represents average transaction utility [19]  and it can be defined as  ? t ? C ? D ? i ? D (Quantity (i, D) * profit (i)) Eff (C ? D) =                                                                         (3)  Count (D ? C) Probability of the rule C ? D is denoted as Prob (C ? D).

In cross selling, confidence is the good estimate of probability  [7]. It can be defined as    Prob (C ? D) = Conf (C ? D)                  (4)    Rule Utility of each rule will be compared against the user  defined cross selling profit threshold. A set of high cross  selling profit rules will be generated as an output. This  information will be helpful for the managers for maximizing  profit in the future or increasing sell of some items by  recommending them to the established customers.



IV. ALGORITHM [12]  Input: Transactional database DB, incremented database db,  minutil ?, a minimum cross-selling profit.

Output: a set of rules generating high cross selling profit  (HCP).

Fig. 2 illustrates HUPID-Tree construction algorithm.

Fig. 2.  Algorithm for  HUPID-Tree construction  Algorithm for mining HUIs and high cross selling profit rules is shown in Fig. 3.

Fig. 3.  Algorithm for  mining HUIs  and a set of high cross selling profit rules  Fig. 4 illustrates algorithm for the procedure of restructuring.

Fig. 4.  Algorithm for  Restructering                    Fig. 5.  Algorithm for  mining candidates  Algorithm for mining candidates is illustrated in Fig. 5 above.



V. ANALYSIS OF THE PROPOSED SYSTEM WITH EXAMPLE  Example below explains the proposed system.

Fig. 6 shows transactional database and Fig. 7 shows the external utilities. It will be the unit profit of the item for cross selling.

Fig. 6.  Transactional database          Fig. 7.  External Utility Table  Phase 1:  HUPID-tree construction:  Fig. 8(a) shows HUPID-Tree after the insertion of items from the transaction T1. Each node maintains 3 values i.e.

(1)Node Name, (2) Maximum-quantity and (3) Path Utility which will be 0 initially.

Fig. 8(a).  HUPID-Tree after inserting transaction T1  Fig. 8(b) shows the Global HUPID-Tree after the insertion of items from two more transactions, T2 and T3.

For each new transaction do  N := NR  /* NR is the root node */  Sort transaction items i in their current sorting order  For each i with quantity q do  If no child Ni under N with Ni.Name = i then Create Ni as a child under N  Set Ni.Name := i, Ni.Max := q, Ni.PU := 0  If q >Ni.maxqty  then Ni.maxqty := q If i is the end of the transaction then  Update information about Ni in TIList  Table with TU of T N :=  Ni  If T is the end of db or DB then  Call Restructuring (Tree)  If user requests for mining then  HUI  := ?, PFI := ?  /* PFI is the prefix itemset */ Call Miner (Tree, PFI, HUI)  Remove itemsets with utility < minutil from HUI  For each pattern H in HUI do  For each h ? H do Calculate RU (h ? H-h)  If RU (h ? H-h) ? minimum cross-selling profit  Add h ? H-h to HCP    Procedure Restructuring (Tree) For each entry from the TIList Table do  Read path in Tree with the help of E.link  Sort path in the decreasing order of TWU N := NR  For each item ip in the path do  Calculate PU (ip) If no child Nip under N with Nip.Name = ip then  Create   Nip as child for N  Set Nip.Name = ip, Nip.Maxqty := q, Nip.PU := PU(Nip) If q > Nip.Maxqty then Nip.Maxqty := q  if Nip  is the end of transaction then  Update information about Nip in TIList Table with TU of T N :=  Nip    Procedure Miner (Tree, PFI, HUI) //CPT Conditional pattern tree, CPI Conditional prefix itemset, CPB  Conditional pattern base  For each Header Table item i from the bottom with i.TWU ? minutil  CPT := ?,CPT := ?, CPI :={i} ? PFI For each N with N.Name = i do Extract path up to NR starting from N  If global tree then  Calculate Support (path) Else Support (path):= N.Support  Add information of path in CPB with Support (path),  N.PU Create CPT without unpromising items in CPB  Add CPI in HUI  Call Miner (Tree, PFI, HUI) /* Recursive call */                           Fig. 8(b). HUPID-Tree after inserting first three transactions  Restructuring:  For each tail node entry in the TIList Table, extract the path from tail node to root node e.g. for the first tail node entry E extract the path <E, D, B, A>. Items will be sorted in the descending order of their TWU values. For the sorted path < D, E, A, B >, calculate Path Utility at each node as described in Definition 12.

PU (D, T1) = MIN ((2*1*1) + 0, 24) = 2.

PU (E, T1) = MIN ((3*5*1) + 2, 24) = 17.

PU (A, T1) = MIN ((4*3*1) +17, 24) = 24.

PU (B, T1) = MIN ((2*2*1) +24, 24) = 24.

Sorted paths are inserted into the tree using the same insertion process used earlier. Fig. 8(c) shows the tree after the insertion of sorted path <D, E, A, B> with the Path Utility of each item.

Fig. 8(c). Restructured tree after inserting first sorted path  Similar process will be applied for all the remaining tail node entries in the TIList Table and the resultant restructured tree, as shown in the figure 8(d) will obtain.

Fig. 8(d). Complete restructured HUPID-Tree  Update the global tree with the incremented databases:  Insert the items from the transactions T4 and T5 of the incremented database into the tree in their descending TWU order and the result will be shown in figure 9(a).

Fig. 9(a). Updated HUPID-Tree  The updated tree is again restructred to bring the  items with higher TWU values in the upper part of the tree.

The result of restructuring is shown below in Fig. 9(b).

Fig. 9(b). Restructured tree after updating the database  Conditional pattern base construction:  As described in Definition 13 minimum-utility for each item is  calculated and the result will be as shown in Fig. 10.

Fig. 10. Minimum-Utility Table  If ?  is set to 25% then minutil = 0.25 * U(D) = 0.25 * 101 = 25.25. The Header Table is traversed from the bottom. If TWU(item) ? minutil then the item is selected as a promising item.  Search space will be created for each promising item.

Search space for the item C will be as shown in Fig. 11.

Fig. 11. Search space for C  E.g. When path <E, D, A, B> is extracted. Items  will be sorted in the decreasing order of local TWU values. i.e. local TWU(E) is 61, local TWU(D) is 49,  local TWU(A) is 22 and local TWU(B) is 22. Local unpromising items i.e. B and E will be deleted from the path and local path utilities for each remaining item in the path will be calculated as described in Definition 14.

i.e.  lpu (D) = 22,  lpu (E) = 22 ? (1* 1) = 21.

Similar procedure will be applied for the paths <E, D> and <E>.

Construction of conditional pattern tree:  Conditional pattern tree will be built only for the items which are locally promising. Fig. 12(a) shows the conditional pattern tree after the insertion of first path <E (21), D (22)>.

Fig. 12(a). Conditional pattern tree after adding the path <E, D>  Fig. 12(b) shows the complete conditional pattern tree  after the insertion of all the sorted paths from the Table 4.

Fig. 12(b). Conditional pattern tree for item C  Items D and E become promising when Header Table in Fig 8(b) is traversed from the bottom. Hence recursively build search space and conditional pattern tree for them and following candidate patterns will be generated.

i.e. {C}, {C, D}, {C, E}, {C, D, E}  Phase 2: Extraction of HUIs and generation of high cross selling profit rules.

Fig. 13 shows the generated candidates and extracted high utility itemsets.

Fig. 13. Candidates and HUIs  Further, cross selling profit will be calculated for each rule generated from the high utility itemsets as per the Definition 15.

e. g. Rule Utility (C ? D) will be calculated as RU (C ? D) = Probability (C ? D) * Opportunity (C ? D) *  Effectiveness (C ? D)  ((2 / 3) * (1 ? (2 / 3)) * (3 / 5)  * ((4 * 1) / 2)) = 0.27.

If the user defined cross selling profit threshold is set to 0.5 then we get a set of rules with high cross selling profit as shown in the Table 1 below.

TABLE I.  HIGH CROSS-SELLING PROFIT  RULES AND THEIR RULE UTILITY  Association Rule (Confidence %) Rule Utility  D ? C (67% ) 1.87  E ? C (75% ) 1.75  B ? E (67% ) 1.33  E ? B (50% ) 0.8  A ? E (67%) 1.33  E ? A (50% ) 0.6  C ? DE (67%) 0.94  D ? CE (67% ) 2.53  E ? CD (50% ) 3.2  B ? DE (67% ) 1.67  D ? BE (67% ) 1.87  E ? BD (50% ) 1.3  B ? AE (67% ) 1.73  E ? AB (50% ) 1.4  A ? BE (67% ) 1.87  A ? DE (67% ) 1.67  D ? AE (67% ) 1.73  E ? AD (50% ) 1.1  D ? ABE (67% ) 2.27  E ? ABD (50% ) 1.9  A ? BDE (67% ) 2.2  B ? ADE (67% ) 2.07  DE ? C (67% ) 1.87  DE ? B (67% ) 0.53  AB ? DE (67% ) 1.67  DE ? AB (67% ) 0.93

VI.  CONCLUSION  Proposed system can mine high utility itemsets from the  dynamic as well as the static databases with reduced overhead  of database scans. High utility itemsets are the desirable  patterns and they will be used for generating  rules with high  cross selling profit. Cross selling profit of the rule will be  measured with the help of rule utility function which is the  objective function. The remarkable advantage of the rule  utility function is that it can vary with business purpose and  objectives. It considers Probability, Opportunity and  Effectiveness of the rule. Example discussed in the 5 th  section  describes a phenomenon  that the rule utility for cross selling  depends on the confidence of a rule and maximum cross  selling profit can be expected from the rule with the  confidence of 50% e.g. E ? CD.

