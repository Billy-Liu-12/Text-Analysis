On Mining General Temporal Association Rules in a Publication Database

Abstract  In this papel; we explore a new problem of mining gen- eral temporal association rules in publication databases.

In essence, a publication database is a set of transactions where each transaction T is a set of items of which each item contains an individual exhibition period. The cur- rent model of association rule mining is not able to handle the publication database due to the following fitndamental problems, i.e., ( I )  lack of consideration of the exhibition period of each individual item; (2) lack of an equitable sup- port counting basis for each item. To remedy this, we pm- pose an innovative algorithm Progressive-Partition-Miner (abbreviated& as PPM) to discover general temporal asso- ciation rules in a publication database. The basic idea of PPM is to first partition the publication database in light of exhibition perioch of items and then progressively accu- mulate the occurrence count of each candidate 2-itemset based on the intrinsic partitioning characteristics. Algo- rithm PPM is also designed to employ a3ltering threshold in each partition to early prune out those cumulatively infre- quent 2-itemsets. ExplicitrY, the execution time of PPM is, in orders of magnitude, smaller than those required by the schemes which are,directly extended from existing methods.

1 Introduction  The discovery of association relationship among a huge database has been known to be useful in selective market- ing, decision analysis, and business management [4, 91. A popular area of applications is the market basket analysis, which studies the buying behaviors of customers by search- ing for sets of items that are frequently purchased together (or in sequence). For a given pair of confidence and sup- port thresholds,, the problem of mining association rules is to identify all association rules that have confidence and support greater; than the corresponding minimum support  threshold (denoted as min-sup) and minimum confidence threshold (denoted as min-conf).

Since the early work in [I], several efficient algorithms to mine association rules have been developed in recent years. These studies cover a broad spectrum of topics in- cluding: (1) fast algorithms based on the level-wise Apri- ori framework [2, 131 and partitioning [I  l]; (2) FP-growth algorithms [8]; (3) incremental updating [6, IO]; (4) min- ing of generalized and multi-level rules [7, 141; (5) mining of quantitative rules [IS]; (6) mining of multi-dimensional rules [18]; (7) constraint-based rule mining [I61 and mul- tiple minimum supports issues [12, 171; and (8) temporal association rule discovery [3, 51.

While these are important results toward enabling the integration of association mining and fast searching algo- rithms, e.g., BFS and DFS which are classified in [9], we note that these mining methods cannot effectively be ap- plied to the mining of a publication-like database which is of increasing popularity recently. In essence, a publication database is a set of transactions where each transaction T is a set of items of which each item contains an individ- ual exhibition period. The current model of association rule mining is not able to handle the publication database due to the following fundamental problems, i.e., (1) lack of consideration of the exhibition period of each individ- ual item; (2) lack of an equitable support counting basis for each item. Note that the traditional mining process takes the same task-relevant tuples, i.e., the size of transaction set D, as a counting basis. Recall that the task of support speci- fication is to specify the minimum transaction support for each itemset. However, since different items have different exhibition periods in a publication database, only consider- ing the occurrence count of each item might not lead to a fair measurement. This problem can be further explained by the illustrative example below.

Example 1.1: In a bookstore transaction database as shown in Figure 1, the minimum transaction support and confidence are assumed to be min-supp = 30% and min-conf = 75%, respectively. A set of time series  0-7695-1 119-8/01 $317.00 0 2001 IEEE 337     Item Informadon Item PublicationDate  &a Feb4l Mar-01  Figure 1. An illustrative transaction database and the corresponding item information  database indicates the transaction records from January 2001 to March 2001. The publication date of each trans- action item is also given. Based on the traditional min- ing techniques, the absolute support threshold is denoted as S A  = 112 * 0.31 = 4 where 12 is the size of transac- tion set V. It can be seen that only {B, C, D, E, BC) can be termed as frequent itemsets since the amounts of their oc- currences in this transaction database are respectively larger than the absolute value of support threshold. Thus, only rule C ===+ B is termed as a frequent association rule with sup- port s = 41.67% and confidence c = 83.33%. However, some phenomena are observed when we take the ?item in- formation? in Figure 1 into consideration.

1. An early publication intrinsically possesses a higher likelihood to be determined as a frequent itemset.

For example, the sales volume of an early product, such as A,  B,  C or D, is likely to be larger than that of a newly exhibited product, e.g., E or F ,  since an early product has a longer exhibition period. As a result, the association rules we usually get will be those with long-term products such as ?milk and bread are fre- quently purchased together?, which, while being cor- rect by the definition, is of less interest to us in the association rule mining. In contrast, some more recent products, such as new books, which are really ?fre- quent? and interesting in their exhibition periods are less likely to be identified as frequent ones if a tradi- tional mining process is employed.

2. Some discovered rules may be expired from users? interest. Considering the generated rule C ==-+ B, both B and C were published from the very early dates of this mining transaction database. This information is very likely to have been explored in the previous mining database, such as the one from January 1996 to December 1997. Such mining results could be of less  interest to our on-going mining works. For example, most researchers tend to pay more attention to the lat- est published papers.

Note that one straightforward approach to addressing the above issues is to lower the value of the minimum support threshold required. However, this naive approach will cause another problem, i.e., those interesting rules with smaller supports may be overshadowed by lots of less important information with higher supports. As a consequence, we introduce the notion of exhibition period for each transac- tion item in this paper and develop an algorithm, Progres- sive Partition Miner (abbreviatedly as PPM), to address this problem. It is worth mentioning that the application do- main of this study is not limited to the mining of a publica- tion database. Other application domains include bookstore transaction databases, video and audio rental store records, stock market data, and transactions in electronic commerce, to name a few.

Explicitly, we explore in this paper the mining of gen- eral temporal association rules, i.e., ( X  a Y)t+, where t is the latest-exhibition-start time of both itemsets X and Y ,  and n denotes the end time of the publication database. In other words, (t ,n) is the maximal common exhibition period of itemsets X and Y. An association rule X ==-+ Y is termed to be a frequent general tem- poral association rule ( X  + Y)t>n if and only if its probability is larger than minimum support required, i.e., P ( X t ) n  U Yt>?) > min-sup, and the conditional prob- ability P(Ytin IXttn) is larger than minimum confidence needed, i.e., P(Ytin IXt+) > min-con f .  Instead of using the absolute support threshold S A  = TlVl * min-suppl as a minimum support threshold for each item in Figure 1 , a dat ive  minimum support, denoted by S z  = [(Vx(* min-suppl where IVx I indicates the amount of partial transactions in the exhibition period of itemset X ,  is given to deal with the mining of temporal association rules.

To deal with the mining of general temporal association rule ( X  --7? Y)tin, an efficient algorithm, Progressive Par- tition Miner, is devised. The basic idea of PPM is to first partition the publication database in light of exhibition pe- riods of items and then progressively accumulate the occur- rence count of each candidate 2-itemset based on the in- trinsic partitioning characteristics. Algorithm PPM is also designed to employ a filtering threshold in each partition to early prune out those cumulatively infrequent 2-itemsets.

The feature that the number of candidate 2-itemsets gen- erated by PPM is very close to the number of frequent 2- itemsets allows us to employ the scan reduction technique by generating C k s  from Cz directly to effectively reduce the number of database scan. Experimental results show that PPM produces a significantly smaller amount of candidate 2-itemsets than Apriorif, i.e., an extended version of Apri-     ori algorithm. In fact, the number of the candidate itemsets Cks generated by PPM approaches to its theoretical mini- mum, i.e., the number of frequent k-itemsets, as the value of the minimal support increases. Explicitly, the execution time of PPM is, in orders of magnitude, smaller than those required by Apriori+. Sensitivity analysis on various pa- rameters of the database is also conducted to provide many insights into algorithm PPM. The advantage of PPM over Apriorif becomes even more prominent as the size of the database increases. This is indeed an important feature for PPM to be practically used for the mining of a time series database in the real world.

It is worth mentioning that the problem of mining gen- eral temporal association rules will be degenerated to the one of mining temporal association rules explored in prior works [3,5] ifthe exhibition period (t, n) of association rule ( X  a Y)tJ' is applied to a non-maximal exhibition pe- riod of X --I Y, such as ( j ,  n) where j > t. Consider for example the database in Figure 1 where (C ===+ B)173 and (C are two general temporal association rules in database V while the temporal subset of (C --*. B)193, e.g., (C + B)233, can also be a temporal association rule as defined in [3,5], showing that the model we consider can be viewed as a general framework of prior studies. This is the reason we use the term "general temporal association rule" in this paper.

We mention in passing that the Frequent Pattern growth (FP-growth), which constructs a highly compact data struc- ture (an FP-tree) to compress the original transaction database, is a method of mining frequent itemsets with- out candidate generation [8]. However, in our opinion, FP-growth algorithms do not have obvious extensions to deal with this publication database problem. Further, some methodologies were proposed to explore the problem ofdis- covering temporal association relationship in the partial of database retrieved [3, 51, i.e., to determine association rules from a given subset of database specified by time. These works, however, do not consider the individual exhibition period of each transaction item, and are thus not applicable to solving the mining problems in a publication database.

On the other hand, some techniques were devised to use multiple minimum supports for frequent itemsets genera- tion [12, 171. However, it remains unclear for how the techniques in [ 12, 171 to be coupled with the correspond- ing minimum confidence thresholds when general temporal association rules we consider in this paper in a publication database are being generated.

The rest of this paper is organized as follows. Prob- lem description is given in Section 2. Algorithm PPM is described in Section 3. Performance studies on various schemes are conducted in Section 4. This paper concludes with Section 5.

2 Problem Description  Let n be the number of partitions with a time granularity, e.g., business-week, month, quartel; year, to name a few, in database V. In the model considered, dbtyn denotes the part of the transaction database formed by a continuous region from partition Pt to partition P,, and Idbt(nl=Ch=t,n lPhl where dbty" c V. An item xx.start*n is termed as a tempo- ral item of x, meaning that Px.start is the starting partition of x and n is the partition number of the last database parti- tion retrieved.

Example 2.1: Consider the database in Figure 1. Since database V records the transaction data from January 2001 to March 2001, database V is intrinsically segmented into three partitions P I ,  PZ and P3 in accordance with the "month" granularity. As a consequence, a partial database db2l3 c V consists of partitions P2 and P3. A temporal item E2y3 denotes that the exhibition period of E293 is from the beginning time of partition P2 to the end time of partition p3.

As such, we can define a maximal temporal itemset Xtyn as follows.

Definition 1: An itemset Xt." is called a marimal tem- poral itemset in a partial database dbt7" if t is the latest starting partition number of all items belonging to X in database D and n is the partition number of the last parti- tion in dbtin retrieved.

For example, as shown in Figure 1, itemset DE293 is deemed a maximal temporal itemset whereas CD2l3 is not.

In view of this, the exhibition period of an itemset is ex- pressed in terms of Maximal Common exhibition Period (MCP) ofthe items that appear in the itemset. Let MCP(2) denote the MCP value of item x. The MCP value of an item- set X is the shortest MCP among the items in itemset X.

Consider three items C, E and F in Figure 1 for example.

Their exhibition periods are as follows: M C P ( C )  = (1,3), MCP(E)  = (2,3) and M C P ( F )  = (3,3). Since itemset CEF is termed to be CEF3?" = (CEF)37n with consid- ering the exhibition of C E F ,  we have M C P ( C E F )  =  In addition, Idbtinl is the number of transactions in the partial database dbtin. The fraction of transac- tion T supporting an itemset X with respect to par- tial database dbtin is called the support of Xtyn, i.e.,  a rule (X --I Y ) M c P ( X y )  is defined as supp((X ===+ y)MCP(XY) ) = ~ z l p p ( ( X U Y ) ~ ~ ~ ( ~ ~ ) ) .  The con- fidence of this rule is defined as conf((X ===+-  general temporal association rule ( X  + Y ) ~ ~ ~ ( ~ ~ )  (373).

, , p p ( ~ ~ ~ ~ ( ~ ) )  = J { T E d b M C P ( X )  I&,MCP(?)J X C T  - " *  The Of  y ) M C p ( X y )  S U P P ( ( X  Y ) l w c p ( x y ) s U p p ~ M c p ~ x y ) )  ) .  Consequently, a 1 =     which holds in the transaction set D can be defined as fol- lows.

Definition 2: An association rule ( X  ==+ Y ) M C P ( X Y ) is called a general temporal association rule in the trans- action set D with c o n f ( ( X  + Y)Mcp(xy) )  = c and s u p p ( ( x  ===+ Y ) M C P ( X Y ) )  = s i fc% oftransactions in dbMCP(XY)  that contain X also contain Y and s% oftrans- actions in dbMCP(XY)  contain X U Y while X  For a given pair of min-conf and min-supp as the min- imum thresholds required in the maximal common exhibi- tion period of each association rule, the problem of min- ing general temporal association rules is to determine all frequent general temporal association rules, e.g., ( X Y )MCP(XY)  E dbMCP(XY)  which transaction itemsets X and Y have "relative" support and confidence greater than the corresponding thresholds. Thus, we have the following definition to identify the frequent general temporal associa- tion rules.

A general temporal association rule ( X  * Y ) M C P ( X Y )  is termed to be frequent if and only if supp((X + Y ) M c p ( x y ) )  > min-supp and c o n f ( ( ~  * Y ) ~ ~ ~ ( ~ ~ ) )  > min-cmf.

Consequently, this rule mining of general temporal asso- ciation can also be decomposed into to three steps: (1) generate all fiequent maximal temporal itemsets ( T I S ) with their support values.

(2 )  generate the support values of all corresponding tempo- ral sub-itemsets (S I s )  of frequent T I S .

(3) generate all temporal association rules that satisfy min-conf using the frequent T I S  andor SIs.

Example 2.2: Recall the illustrative general temporal as- sociation rules, e.g., (C ==+ E)2>3 with relative sup- port 37.5% and confidence 75%, of the bookstore trans- action database as shown in the Figure 1. In accor- dance with Definition 3, the implication (C 3 E)2>3 is termed as a general temporal association rule if and only if supp((C + E)293) > min-supp and conf((C ==+  > min-con f .  Consequently, we have to deter- mine if supp(CE2i3) > min-supp and s ~ p p ( C ~ > ~ )  > min-supp for discovering the newly identified association rule (C ==+ E)273. It is worth mentioning that though CE2l3 has to be a maximal temporal itemset, called T I , C2l3 may not be a T I .  We call C2l3 is one of correspond- ing temporal sub-itemsets, i.e., S I ,  of itemset CE2,3.

For better readability, a list of symbols used is given in Table 1 .  Then, the definition of a frequent maximal tem- poral itemset and the property of its corresponding sub- itemsets are given below.

Definition 4: A maximal temporal itemset X M C P ( X ) is termed to be frequent when the occurrence frequency  Y = 4.

Definition 3:  ' IdbZVn I XZ>" T I S I  of X M C P ( X )  is larger than the value of min-supp re- quired, i.e., s ~ p p ( X ~ ~ ~ ( ~ ) )  > min-sup, in transaction set d b M C P ( X ) .

When a maximal temporal k-itemset is frequent in data set dbMCP(X") ,  each of its  (1 5 i < k )  is also corresponding sub-itemset X y c p ( x L ' ) frequent in d b M C P ( X " ) .

Property 1:  x Y p ( x k )  Number of transactions in dbZYn A temporal itemset in partial database dbZin A maximal temporal itemset A corresponding temporal sub-itemset of TI  Table 1: Meanings of symbols used  Once, 3 = { x M C P ( X )  2 1 I x M C P ( X )  is frequent}, the set of all frequent T I S  and SIs  to- gether with their support values is known, deriving the desired association rules is straightforward. For ev- ery X M C P ( X )  E 3, check the confidence of all rules ( X  --r. Y)McP(XY)  and drop those that do not sat- isfy > mzn-con f .  This problem can also be reduced to the problem of finding all frequent maximal temporal itemsets first and then generat- ing their corresponding frequent sub-itemsets for the same support threshold. Therefore, in the rest of this paper we concentrate our discussion on the algorithms for mining fre- quent T I S  and SIs.  In fact, the process steps of generating frequent T I S  and S I s  can be further merged to one step in our proposed algorithm P P M .

As explained, we have to find all maximal temporal item- sets that satisfy min-supp first and then to calculate the oc- currences of their corresponding sub-itemsets for producing all temporal association rules hidden in database V. How- ever, if we use an existing algorithm to find all frequent T I S for this new problem, the downward closure property, which Apriori-based algorithms are based on, no longer holds. In addition, the candidate generation process is not intuitive at all. Note that, even though itemset X t 3 n  is not a fre- quent itemset, it does not imply that X t f ' + ,  i.e., a tem- poral sub-itemset of Xt+,  is not a frequent itemset. In other words, even knowing X t > n  is not frequent in dbtJ' where M C P ( X )  = ( t ,  n),  we are not able to assert whether X Y t f l i n  is frequent or not when M C P ( Y )  = (t + 1,n).

Specifically, to determine whether a general temporal as- sociation rule ( X  * Y)t+l,n is fiequent, we have to find out the support values of X t f l , n  and X Y t f l i n  where M C P ( X Y )  = I l fCP(Y)  = ( t  + 1, n).

Example2.3: Consider MCP(s1) = (1, n),  MCP(z2)  = (2, n) and MCP(s3)  = (3, n). If we find that item z1 is not frequent at exhibition period (1, n),  then it does not sat- isfy min-supp requirement at level 1. Under a conventional     h on exhibition periods candidate 2-TIS Use candidate 2-TIS to produce candidate  k-TIS and k-SIs  I 2nd Scun - Generate frequent Rule k-TIs and k-SIs - generation  I I I I I  Figure 2. The flowchart of PPM  Apriori-based association rule mining algorithm, this item- set is discarded since it will not be frequent. The potentially frequent itemsets 51x2 and 21x3 will then not be generated at level 2 for consideration. Clearly, this disposition is in- correct in mining general temporal association rules since q is still possible to be frequent at (2 ,n)  and (3,n), in- dicating that the downward property is not valid in mining general temporal association rules.

It is worth mentioning that since the downward level- wise property, which holds for Apriori-like algorithms, is not valid in this general temporal association rule mining problem, the second method is to expand each transaction item to be its combination with different exhibition peri- ods. For instance, all temporal sub-itemsets of X?" at level k with different exhibition periods, i.e., X i " ,  X:'"", XL+29n, ..., X,"'", are taken as "temporal candidate k- iternsets" for producing any possible combination of gen- eral temporal association rules. Using this approach, the problem of mining temporal association rules can be imple- mented on an anti-monotone Apriori-like heuristic. As in most previous works, the essential idea is to iteratively gen- erate the set of candidate itemsets of length (k + l), i.e.,  'I" , from the set of frequent itemsets of length k ,  i.e., @, (for k 2 1); and to check their corresponding occur- rence fiequencies.in the database db'?". This is the basic concept of an extended version of Apriori-based algorithm, called Apriori+ , whose performance will be comparatively evaluated with algorithm PPM in our experimental studies later.

3 General Temporal Association Rules  An overview. of progressive partition miner is given in Section 3.1. We present an illustrative example of algorithm PPM in Section 3.2.

3.1 An overview of Progressive Partition Miner  As explained. above, a naive adoption of conventional methods to mine general temporal association rules will be  prohibitively expensive. To remedy this, by partitioning a transaction database into several partitions, algorithm PPM is devised to employ a filtering threshold in each partition to deal with the candidate itemset generation and process one partition at a time. For ease of exposition, the processing of a partition is termed a phase of processing. Explicitly, a progressive candidate set of itemsets is composed of the following two types of candidate itemsets, i.e., (1) the can- didate itemsets that were carried over from the previous pro- gressive candidate set in the previous phase and remain as candidate itemsets after the current partition is included into consideration (Such candidate itemsets are called type cr candidate itemsets); and (2)  the candidate itemsets that were not in the progressive candidate set in the previous phase but are newly selected after only taking the current data parti- tion into account (Such candidate itemsets are called type ,El candidate itemsets). Under PPM, the cumulative informa- tion in the prior phases is selectively carried over toward the generation of candidate itemsets in the subsequent phases.

After the processing of a phase, algorithm PPM outputs a progressive screen, denoted by PS, which consists of a pro- gressive candidate set of itemsets, their occurrence counts and the corresponding partial supports required.

3.2 Algorithm of PPM  The operation of algorithm PPM can be best understood by an illustrative example described below and its corre- sponding flowchart is depicted in Figure 2. Recall the trans- action database shown in Figure 1 where the transaction database db1>3 is assumed to be segmented into three par- titions PI ,  P2 and P3, which correspond to the three time granularities from January 2001 to March 2001. Suppose that min-supp = 30% and min-con f = 75%. Each par- tition is scanned sequentially for the generation of candi- date 2-itemsets in the first scan of the database db1l3. After scanning the first segment of 4 transactions, i.e., partition PI, 2-itemsets { B D ,  BC, CD, AD} are sequentially gen- erated as shown in Figure 3. In addition, each potential can- didate itemset c E C2 has two attributes: ( 1 )  c.start which contains the partition number of the corresponding starting partition when c was added to C2, and (2) ccount  which contains the number of occurrences of c since c was added to Cz. Since there are four transactions in PI ,  the partial minimal support is r4 * 0.31 = 2. Such a partial mini- mal support is called thejltering threshold in this paper.

Itemsets whose occurrence counts are below the filtering threshold are removed. Then, as shown in Figure 3, only { B D ,  BC}, marked by " 0 ", remain as candidate item- sets (of type ,El in this phase since they are newly generated) whose information is then carried over to the next phase Pz of processing.

Similarly, after scanning partition P2, the occurrence     0 BD 0 BC  CD AD  P, + P: -1 0 BC I I B E 2 O C E 2  2  P, + P,+P,  BF CF EF AD 3 BD 3 DF 3  Aner I SI scan dambars D, \\c ha\c candidatc ilcmsels ( rclatke suppon = 30% ) BS Col lo~~s (8?). (8?). (C?), {C?). (E?). (F?), iBC?.?), {BF?). (CE?)  (C?)  (BC? ?)  {E?)  (CE?)  Aner 2nd scam databarc D. n e  h a c  frequent Ilcmscts ( r c l a l ~ ~ e  ruppon = 30%) as Colloar IB?.?). {B?). {C?). (C?). (E?). (F?). {BC?). {BF?). {CE?)  Figure 3. Frequent temporal itemsets genera- tion for mining general temporal association rules by PPM  counts of potential candidate 2-itemsets are recorded (of type Q and type p). From Figure 3 ,  it is noted that since there are also 4 transactions in Pz, the filtering thresh- old of those itemsets carried out from the previous phase (that become type CY candidate itemsets in this phase) is [(4 + 4) * 0.31 = 3 and that of newly identified candidate itemsets (i.e., type ,h? candidate itemsets) is r4 * 0.31 = 2.

It can be seen that we have 3 candidate itemsets in C2 after the processing of partition P2, and one of them is of type Q and two of them are of type p.

Finally, partition P3 is processed by algorithm PPM. The resulting candidate 2-itemsets are C2 = { BC, CE,  B F }  as shown in Figure 3 .  Note that though appearing in the pre- vious phase P2, itemset { D E }  is removed from C, once P3 is taken into account since its occurrence count does not meet the filtering threshold then, i.e., 2 < 3. However, we do have one new itemset, i.e., B F ,  which joins the C2 as a type p candidate itemset. Consequently, we have 3 can- didate 2-itemsets generated by PPM, and two of them are of type Q and one of them is of type p. Note that only 3 candidate 2-itemsets are generated by PPM.

After generating C2 from the first scan of database db1,3, we employ the scan reduction technique [ 131 and use C2 to  generate Ck ( I c  = 2,3,  ...) m), where C,,, is the candidate lust-itemsets. Instead of generating C3 from LZ * L2, a C2 generated by PPM can be used to generate the candidate 3-itemsets and its sequential Ck-l can be utilized to gener- ate Ck. Clearly, a CA generated from Cz * Cz, instead of from L2 * L2, will have a size greater than IC31 where C3 is generated from L2 * L2. However, since the IC2 I generated by PPM is very close to the theoretical minimum, i.e., 1,521, the IC41 is not much larger than IC31. Similarly, the ICkl is close to \Ch\. Since C2 = { B C , C E , B F } ,  no candidate Ic-itemset is generated in this example where Ic 2 3. Thus, Ck = {BC,  C E ,  B F }  and all CL can be stored in main memory. Then, we can find Lks ( I c  = 1 ,2 ,  ...) m) together when the second scan of the database db1v3 is performed.

Note that those generated itemsets Ck = {BC,  C E ,  B F } are termed to be the candidate maximal temporal itemsets (TIS) ,  i.e., BC1l3, CE2?3 and BF3l3, with a maximal ex- hibition period of each candidate.

Before we process the second scan of the database db1t3 to generate L ~ s ,  all candidate S I s  of candidate TIS can be propagated based on Property 1, and then added into Ck. For instance, as shown in Figure 3 ,  both candidate 1-itemsets B193 and C173 are derived from BC?33. Moreover, since BC1l3, for example, is a candidate 2-itemset, its subsets, i.e., and C1l3, should potentially be candidate itemsets. As a result, 9 candidate itemsets, i.e.,  as shown in Figure 3 ,  are generated. Note that since there is no candidate T I  Ic-itemset ( k  2 2) containing A or D in this example, Ai?3 and Dil3 (1 5 i 5 3) are not necessary to be taken as SI  itemsets for generating general temporal association rules. In other words, we can skip them from the set of candidate itemsets (7;s. Finally, all occurrence counts of CLs can be calculated by the second database scan. Note that itemsets BC1l3, BF3l3 and CE2,3 are termed as frequent TIS,  while B3>3, C1v3, C2l3, E2t3 and F333 are frequent SIs  in this example.

As shown in Figure 3,  after all frequent T I  and S I  item- sets are identified, the corresponding general temporal as- sociation rules can be derived in a straightforward man- ner. Explicitly, the general temporal association rule of ( X  =+- Y ) M C P ( X Y )  holds if conf ( ( X  + Y ) M C P ( X Y )  ) -  > min-con f .

( ~ 1 3 3  B3,3 c1,3 c 2 , 3  E ~ J  F3,3 ~ ~ 1 , 3 , ~ ~ 3 , 3  C ~ 2 , 3 } , , , > I ,  4 Experimental Studies  To assess the performance of algorithm PPM, we per- formed several experiments on a computer with a CPU clock rate of 450 MHz and 512 MB of main memory. The methods used to generate synthetic data are described in Section 4.1. The performance comparison of PPM and Apriori+ is presented in Section 4.2. Results on scaleup experiments are presented in Section 4.3.

4.1 Generation of synthetic workload 500  8 400 s 2 300 i=  h  .E 4- 200 0 s 100 W  o +  For obtaining reliable experimental results, the method to generate synthetic transactions we employed in this study is similar to the ones used in prior works [2, 131. These transactions mimic the publication items in a publication database. Each database consists of ID1 transactions, and on the average, each transaction has IT1 items. To simu- late the characteristic of the exhibition period in each item, transaction items are uniformly distributed into database 73 with a random selection. In accordance with the exhibition periods of items, database 2) is divided into n partitions. Ta- ble 2 summarizes the meanings of various parameters used in the experiments. The mean of the correlation level is set to 0.25 for our experiments. Without loss of generality, we use the notation Tx - Iy - D m  to represent a database in which D = m thousands, IT1 = x, and 111 = y. We compare relative performance of Apriori+ and PPM.

- ' . T 10-14-DI 00  . . +- ~ Apriori+ -A- PPM  !.,  - i..

- "*,.

- - -  ....____ -...

.-_. . -*..

- -  I 1731 I Number of transactions in the database -*...-. .........____, ... -..

1 IT1 I Average size of the transactions ,  1 I\ I Average size of the maximal frequent itemsets ILI 1 Number of maximal potentially frequent itemsets N I Number of items IP;I I Number of transactions in the Dartition database Pi  Table 2: Meanings of various parameters  4.2 Relative performance  We first conducted several experiments to evaluate the relative performance of Apriori+ and PPM. Since the ex-  , perimental results are consistent for various values of n, ILI and N ,  for interest of space, we only report the results on ILI = 2000 and N = 10000 in the following experiments.

Figure 4 shows the relative execution times for both two algorithms as the minimum support threshold is decreased from 1% support to 0.1% support. When the support thresh- old is high, there are only a limited number of frequent item- sets produced. However, as the support threshold decreases, the performance difference becomes prominent in that PPM significantly outperforms Apriori+. Explicitly, PPM is in orders of magnitude faster than Apriori+, and the margin grows as the minimum support threshold decreases.

4.3 Scaleup performance  In this experiment, we examine the scaleup performance of algorithm PPM. The scale-up results for different se- lected datasets are obtained. Figure 5 shows the scaleup per- formance of algorithm PPM as the values of ID1 increase.

0.1 0.3 0.5 0.7 0.9 Minimum Support (%)  g2400  E1800 ''i i=  v  "20-16-D 100  -.+- Appriori+ -A- PPM  I  Figure 4. Relative performance studies  Three different minimum supports are considered. We ob- tained the results for the dataset T10 - I4 - Dm when the number of customers increases from 100,000 to one mil- lion. The execution times are normalized with respect to the times for the 100,000 transactions dataset in the Fig- ure 5. Note that, as shown in Figure 5 the execution time only slightly increases with the growth of the database size, showing good scalability of PPM.

5 Conclusion  In this paper, we not only explored a new model of mining general temporal association rules, i.e., ( X  =+- Y ) M C P ( X Y ) ,  in a publication database but also developed algorithm PPM to generate the temporal association rules as well as conducted related performance studies. Un- der PPM, the cumulative information of mining previous partitions is selectively carried over toward the generation of candidate itemsets for the subsequent partitions. Algo- rithm PPM is particularly powerful for efficient mining for a publication-like transaction database, such as bookstore transaction databases, video rental store records, library- book rental records, and transactions in electronic com- merce. One extension to our proposed model in this paper is to mine general temporal association rules with different      2 ' 1 100 300 500 700 900  ID/, transaction number ( K )  Figure 5. Scaleup performance of PPM  start and end points of items. This is an interesting yet chal- lenging issue since the levelwise property does not hold in this situation, and will be a matter of future research.

6 Acknowledgment  The authors are supported in part by the Ministry of Ed- ucation Project No. 89-E-FA06-2-4-7 and the National Sci- ence Council, Project No. NSC 89-2219-E-002-028 and NSC 89-22 18-E-002-028, Taiwan, Republic of China.

