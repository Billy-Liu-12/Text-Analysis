MINING CROSS-TABLE ASSOCIATION RULES ElASED ON PROJECTIONS  OF ITEMSETS

Abstract: Association d e s  are generally recognized as a highly  valuable type of regularities and various algorithms have been presented for efficiently mining them in large databaws.

However, the application of most algorithms is so far restricted to cases where information is put together in single table. To the databases containing multiple tables, little work has been done. To solve this problem, we introduce the problem of mining cross-table association rules in two tables containing both quantitative and categorical attributes, and present an algorithm for mining cross-table ampciation rules.

The algorithm is based on the projections of itemsets. All large cross-table itemsets can be constructed by their projections  of data being reileated. Although more data is produced, a lot of information about how the data was originally structured is lost. Also, the creation of useful, understandable 2nd informative attributes may require a substantial amount of domain knowledge, which may defy the purpose of KDD. Therefore, neither of approaches is very attractive, c c  a proper way of dealing with multiple tables is necessary.

2 Related work  Currentlv. most work on association rule mining has - directly. It neither needs to join the tables nor Creates a been done in a saele  table. hut little in multinle tables. A - universal table or expends m y  of the tables. The algorithm orients large databases and considem general relationships expressed by semantic correlation attributes between two tables, where the cornlation may be keys, foreign  the algorithm is efficient.

l e d n g  algorithn AQ is first used to mind association et al [41, Because of the  restraint of its conditions, the relationships among the tables  can be fully loaded into the memory. Thus, to a certain  in multiple tables by  keys or other equivalent attributes. The experiment shows that can be through the and the data  Keywords: Association rules; Cross-table association rules; Data mining  1 Introduction  Association rules are generally recognized as a bigbly valuable type of regularities and various algorithms have been presented for efficiently mining them in large databases 31. To the best of our knowledge, the application of most algorithms is so far restricted to cases where information is put together in single table. To the  . databases containing multiple tables, little work has been done. When adopting these algorithms to mine association rules in a database containing multiple tables, one must first transform the multiple tables into a single table format.

There are two ways of doing it. One is to create a universal table, which involves joining all tables to form a single table. The resulting universal table can be extremely large and impractical to handle. In addition, since multiple tables may belong to different databases or even different organizations, it is difficult to join them for the sake of security or other reasons. The second way of transform the multiple tables into a single table format involves the creation pf new attributes in the central fact table that summarize or aggregate information which can be found in other tables. However, it produces very wide table with lots  0-7803-750&4/02/$17.00 a 0 0 2  IEEE  extent, its application is restricted. Some researchers from the area of Indmtive Logic Programming [??? studied the problem of data mining in multiple tables, and presented some algorithms, such as algorithm WARMRC6?. However, these algorithms :me mostly based on data stored as F?rolog programmes, anC. little attention bas been given to data stored in re1ation:d database and to how howledge of the data model can help to guide the search process. They are only available in inductive relational databases. ZUO Wan- li [71 presented a parallel algorithm for mining association rules in multiple tables, which is available in the case that the data type is ,only boolean and the common attributes only with value 1 .  b o b b l e  et a![*? presented a framework for mining association rules in multiple tables, but it still deals with the joining operation among the tables.

Facing the above problems, we introduce the problem of mining cross-tabh: association rules from the point of view of databases. An algorithm for mining cross-table association rules is presented through the introduction of projections of the itemset. The algorithm orients large relational databaies and considers general relationships expressed by semantic correlation attributes between two tables, where the correlation attributes may be keys, foreign keys or other eqrdvalent attributes. The attributes may be quantitative or categorical, which are partitioned into intervals or value sets. During association rule mining, it does not need to join the tables, and the large cross-table  http://163.com mailto:xalnq@sina.com    itemsets are constructed by using their projections in each of the tables. The experiment shows that the algorithm is efficient.

The remaining of the paper is organized as follows.

Section 3 is definitions and problem statement. Section 4 develops an algorithm for cross-table association rule mining. Section 5 is performance analyzing and section 6 is conclusions.

3 Definitions and problem statement  We now give a formal statement of the problem of mining cross-table association rules and introduce some terminology.

Now, let RI and Rz be two relation tables. We assume that these attributes may be categorical or quantitative, which are partitioned into intervals or value sets. Let Anr(R,) and Anr(Rz) respectively denote sets of attributes of RI and Rzr and J I  and Jz  respectively denote the sets of equivalent attributes of RI and Rz. Let UI be equal to Atrr(RI)-Jl and U, be equal to Arrr(Rz)-Jz.

Definition 1 Let AeAttr(Rj) (i=1,2) be a attribute. I is one of the partitioned intervals or value sets of A. Then we refer to a pair 4, h as an item for A. We say that a set of items is an itemset if and only if the set consists of the items of different attributes. If all.items in an itemset do not belong to the same table, the itemset is also called a cross-table itemset. A k-itemset is a set of k items, and the k is called its length. 0  Let Di denote the set of items which are defined on U,, where i=l, 2. We have the following definitions.

Definition 2 Let Ri (i=1,2) be a table, and 4, I> be an item.

We say that a tuple tsRi supports the item 4, I>, if and only if t[A]sI. Also, we say that a tuple rsRi supports an itemset, if and only if the tuple r supports every item in the itemset. 0 Definition 3 Let X be a cross-table itemset. Then its support is defined as the fraction of the tuples which support X in the equijoin table RI J 1 Rz, denoted as @X). If X's support is greater than the user-specified minimum support, we call X is frequent or large. 0 Definition 4 A cross-table association rule is implication of the form X*Y, where X and Y are itemset, and X n Y = 0 , X u Y O i  (i=l,2). Its support is defined as o ( X a Y ) = o ( X u r ) .

Its confidence is defined as  ~X*Y)=o(X*ryo(X).  0 Given two relational tables RI ,  Rz, the problem of mining  cross-table association rules is to find all cross-table association rules that have support and confidence greater than the user-specified minimum Support (called minsup) and minimum confidence (called minconfl respectively.

4 Cross-tahle association rule mining  4.1 The main idea adopted in the algorithm for mining cross-  table association rules is similar to Apriori'". A breadth-  The idea and the concept's properties  first strategy from local to global, bottom to top is employed. First, from bottom to top computing projections of large cross-table itemsets in each of the tables level by level, and then constructing large cross-table itemsets according to the projections. In the end, use the itemsets produced above to generate all cross-table association rules.

During the whole process, it neither needs to join the two tables practically, nor creates a universal table or expends any of the tables. This not only effectively avoids producing a substantial amount of redundant data, but also a likely explosion of data for joining operation of the tables.

As following we are to introduce projections of a cross- table itemset and properties for some concepts.

Definition 5 Let X be a cross-table itemset, X I  be equal to (x I x e X A x s O l j ,  andXZ be equal to {x I x e X h x e D z ) .

Then XI and X ,  are called projections of X over RI and R2 respectively. 0 Theorem 1 Let Vall(JI), Valz(Jz) and V be equal to ( r [ J l l  IreR11, {r[Jzl I tcRzJ and Vall(Jl)nValz(Jz) respectively. Then the tuple number in the equijoin table RI 11 Rz, denoted as Joinsize, is equal'to Zb,~I{tll fllJ~]=d, rls RI 11x1 t tzl tz1JZl=d, rZs,Rz 1 I. U Proof Since V is a common value set of the joining attributes in the table RI and Rz. and that I{tl I tl[J~I=d, t l ~ R I ) I  and I { I z l  rz[Jz]=d, tzcRz)l are the tuple numbers for the joining attributes with a common value d respectively.

So it holds according to the equijoin definition of tables. 0 Theorem 2 Any proper subset of a large cross-table itemset must be large in the equijoin table RI 1) Rz. U Proof Let X be a large cross-table itemset. For any itemset Y c X ,  the tuples that support X must support Y in the equijoin table RI 1) Rz, so we have o(X)S@Y). Since Xis a large cross-table itemset by the condition above, then Y is also large in the table RI 11 Rz. 0 Theorem 3 Let XcDl be an itemset over the table RI. X is a projection of a large cross-table itemset if and only if there is an item Y c D ,  over the table Rz such that X u Y  is large.

Similarly, let XCO,  be an itemset over the table Rz. X is a projection of a large cross-table itemset if and only if there is an item Y c D ,  over the table RI such that X u Y  is large. U Proof If XcDl is a projection of a large cross-table itemset, there must be an item YcD, over the table Rz such that X u Y is large by the definition 4. Against, if there is an item Y c D z  over the table Rz such thaV'XuY is large for the itemset X c D l  over the table RI,  then X must be a projection of the cross-table itemset X u Y  by the theorem 2 and the definition 4. The same as the above, we can prove that the second half of the theorem 3 holds. 0  In the end of this section, we give some notations that will occur in our algorithm as follows.

For all cross-table itemsets, let Cik denote the set of all candidate k-projections (potentially large projections) and 4 the set of all large k-projections in the table Ri (i=1,2).

Let Ji.tjc denote the set of pair 5 jval, sum)  where jvak (?RI I teRi A r[J& V )  and sum is the number of tuples with the same value jval,(i=1,2). For each itemset      X d ;  (i=l,2), let X.tjc denote a set of pair (jval, sum) where jval is one of the projection values that tuples supporting X in the table R; are projected on the amibutes J, and sum is the number of tuples with the same value jval.

4.2 Computing the projections of large cross-table ihnsets  In this section, we give a procedure to compute the projections of large cross-table itmsets as follow.

Input: table R I ,  Rz, minimum mincup Output: set of Large Cross-table Itemsets Method  for(i=l; i e 2 ;  i++) do begin C;l=Di; foreach tuple te R; and r[J;]c V do begin  Count(t, J;.tjc); foreach itemset uc C;, do if t supports U then Count@, U&);  end end LlI=~cll CIE C l / ,  3c2e cz,,  Lzr=lczl CZE CZI, 3ClECIl.

Sum(cl.tjc, cz.rjc)UionSizexminsup 1 ;  Sum(cl.tjc, c&)>-onSizexminsup) ; for(i=l; i<=2; i++) do begin for(k=2; Ljk-]#0;  k++) do begin  ' . c;FcUnd-Gen(L;k-I); foreach tuple tc R; and t[J;]e V do foreach itemset UE C;, do  if t supports U then Count((, u.tjc); if i= =1 then L /F (d  C l ? C / k ,  3C2ELZ1, Sum(cl. tjc, cz.rjc)~ionSizexminsup) ;  else LZF{cll CIE C2b 3CZEL11, Sum(cl.tjc, c2.rjc)llionSizexminsup] ;  end Answer,=ukLjk;  In the procedure above, we first respectively scan table R;, and invoke function Count to compute the set J;.tjc and the set u.tjc for each item U E  C;I in the table Ri (i=l,2),  where the function Count is as follow: Count (t. u.tjc )  end  if ~ V E  u.tjc and v.jval= =t[Ji] then  else v.sum=v.sum+l;  insert (jval. sum) into u.tjc with j v a k  Then by the theorem 3, we compute the large 1- projection set L;, for each table R; (i=1,2), where the function Sum invoked is as follow: Sum (cl.tjc, c2.tjc) forall V E  cl.tjc do  t[J;], sum=l;  if 3wc c2.tjc and w.jval= =v.jval then  count==c unt+w.sumxv.sum; reNm count; After having (computed L;;, we are able to compute La,  4, .. . 4, .__ m:ursively from L;I (i=1,2). For M2, L;k can be obtained k m  candidate projection set c;k by the theorem 3, but the candidate projection set Cjk is generated from L&-l by inv,king the following function Cand-Gen.

Cad-Gen (Lik-.,) insert into Cjk select { p[lI,pl:21, ... ,p[k-ll,q[k-lIl from L;k.@, Lir.l.q  where p [ l ] = q [  l ] A p [ 2 ] = q [ 2 ] ~ .  . . Ap[k-2] =q[k-2: i~p[k- l ]<q[k- l ]~  I P [ ~ I , P [ ~ I ,  . . . , P [ ~ - ~ I J J [ ~ - ~ I  { P [ ~ I , P [ ~ I ,  ... , ~ [ k - 2 l , ~ l k - ~ l  Ip[ll,p[21, ... . P [ ~ - ~ I , P [ ~ - ~ I  ,q[k-IIk L-1 A  ,q[k- l ] ]e  L;k-l A ... A  d k - 1 I k  4-1; For convenience of computing in this function, each  itemset in L;k-l i:; ordered in the order of the attributes in table R;, and the notation p[n is used to denote j-th item in the itemset p whmxe j=l ,2 ,  _ _ _  k-I .  The Cand-Gen function takes as argument Gk-,. It returns a superset of the set of all large k-projections. Its function is equivalent to extending Ljk-,,, with each item in the D, and then deleting those itemsets for which the (k-1)-itemset obtained by deleting one item from the 1-th to the (k-2)-th items is not in L;k-l according to the theorem 2. The condition p[k-l]<q[k-ll simply ensures that no duplicates are generated.

After all, computing the collections of all large projections for each table R; (i=1,2) respectively, which is denoted as Answc r,.

Theorem 4 The large projection set Answeri(i=1,2) contains all proje(:tions of all large cross-tahle itemsets in the table R;. 0 hoof  Let X be any large cross-table itemset, and X can be decomposed into X I u X 2  where X l d l  and X 2 d 2  are X's large projections .in the table RI and R2respectively. For any item Y 2 d 2 ,  since cross-table itemset X I u Y 2 d ,  then, by the theorem 2, XluY2 must be large, and so the itemset ZuY, for any subset Zc X I .  According to the process of the Answerl, we have: XlsAnswerl. The same as the above, we can prove that X2~Answer2 is also hue. 0  4.3 Generating large cross-table itemsets  In this section, we give a procedure to generate large cross-table itmset; as follow.

Input: Large projecton set Answerl, Answer2,  Output: Large cr,xs-table itemsets L Method:  forall itemset usAnswerl do begin o(u)=Sum(u.tjc, Jl.tjcYJionSize;  minimum minsup      forall itemset v?Answer2 do begin U@)= Sum(u.tjc, Jz.tjcyJionSize; c=Sum(u.tjc,v. tjcyJionSize; if ctminsup then Insert uuv into L with cr(uw)=c;  end  In'this procedure, firstly invoke the Sum function to compute the support of each large projection. Then generate large cross-table itemsets by the projections in Answerl and Answerz so that the set of all large cross-table itemsets L being obtained finally.

Theorem 5 The set of large cross-table itemsets L contain all large itemsets over the equijoin table R I  J 1 Rz. U Proof According to the theorem 4, any large itemset over the equijoin table RI J 1 R2 can be generated by combining one large projection in Answerl with another in Answerz. It is obvious that the procedure above enumerates all possible combinations of the projections in Answerl and Answer2.

Thus the theorem 5 holds. 0  4.4 Generating cross-table association rules  end  It is similar to single table association rule mining, the key to the cross-table association rule mining lies in the generating of large cross-table itemsets. We have obtained the set of large cross-table itemsets L. The last step is generating all cross-table association rules: In here, we adopt the method given by R. Agrawal et al. in literature U1 to generate all the rules.

5 Performance andyzing  Compared with others of multi-table association rule mining (e:g. 5 4 ,  the significant characteristics of our algorithm are as follows. (1) It orients large relational databases and considers general relationships expressed by semantic correlation attributes between two tables. The table attributes may be quantitative or categorical. So its application domain is wider. (2) It is based on the projections of itemsets. All large cross-table itemsets can be constructed by their projections directly without joining the tables so that the cross-table association rule mining problems, which are not solved because the tables are not joined for the sake of security or other reasons, are solved.

(3) The algorithm may be used in parallel computing environment. It makes it possible to speed up the speed of cross-table association rule mining.

In order to analyze the performance, some notations are given as follow. IRil------ the number of tuples in the table Ri: ICikl------ the number of candidate k-projections in Cik, rj ---- -- tuple's length in the table Ri, Ki ------ the maximum length of candidate projections in the table R;, N-----the average size of the set u.tjc (U being an itemset), where i=1,2.

Theorem 6 In the whole generation of large cross-table itemsets, the costs of computing, disk I/Os and spaces are O(IR11xrlx~IC~tl+lR21 xr2xZklCzd ), O(IRllxrlxK~+IR~lxr~xKz) and O((ZklClkl+ZICzkI)x( 1+m) respectively. 0 Proof Since most computing is in the generating of candidate projections, scanning the tables to compute candidate projections' oval, sum) pair, and constructing of large cross-table itemsets. Their costs are respectively  O(lRl lxr lx~~lC~~I+IRzlxr~x~~lC~~l ) , and O(IAnswerlIxlAnswer21xll.l). Thus the total computing cost is O( lR~ lx r~x~~ IC l~ l+ IRz lx r~x~~ lC~~ l  ). Every time the set of large k-projections is generated, the table R I  and Rz must be scanned once. Thus the I/O cost is O(IR1 IxrlxKl+IR21xr2xK2).

During the mining, we not only store all large projections, but also their sets of the pair oval, sum) and the link attributes'. Then the space cost is O ~ ~ ~ l c l k l + ~ l C z ~ i ) + ~ Z ; I C l t l + ~ l c 2 k l ~ ~ + 2 l l . l ~ ,  viz.

During the Toss-table association rule mining, the main cost is disk I/O. It needs to scan the two tables KI and KZ passes respectively, where K; (i=1,2) is the maximum length of candidate projections in the table Ri. It is correspond to the total passes of algorithm Apriori"' which are used respectively in each of the two tables. Thus the cost of disk I/O is acceptable in most applications. Our experiments are performed on a PII-350 PC machine with 128MB main memory, running on Microsoft Windows98.

All the programs are written in JAVA 2. All data are obtained from a real database. The results of the experiments show that the algorithm is efficient.

6 Conclusions  O(zb11Llx~112xk+Z~,IL?*_IIzxk),  o((~Icl~l+~Icz,I)x(1+~). 0  When mining association rules over large relational databases, algorithm costs of the spaces and times are usually very large. Especially for mining cross-table association rules, not only the costs of spaces and times are large but also the tables are usually not joined for the sake of 'security or other reasons. Thus multi-table association mining bas been given little attention. In this paper, we put forward an algorithm for mining cross-table association rules through the introduction of projections of itemsets. It neither needs to join the two tables nor creates a universal table or expends any of the tables. The algorithm orients large databases and considers general relationships expressed by semantic correlation attributes between two tables. The amibutes may be quantitative or categorical, which are partitioned into intervals or value sets. The experiments show that the algorithm is efficient. The algorithm may be used in parallel computing environment.

Acknowledgements      The work is supported by the National Natural Science Foundation of China under Grant No. 60173058.

