Optimizing network traffic by generating association

Abstract? Association rule mining is a technique of generating frequent item sets so that the analysis on the basis of  these sets can be used for different application areas such as  analysis of network traffic. Although the frequent sets generated  using apriori algorithm provides less computational time and  provides less frequent sets, but the technique that we are  implemented here provides less computational time as compared  as well generated less sets and provides less rules for the network  traffics. These frequent sets are used for the analysis of traffic in  the network so that the analysis of different spams or any  unwanted issues can be detected easily.

Keywords? Genetic Algorithm; Apriori Algorithm; frequent  itemsets; Association rule mining

I. INTRODUCTION  A Large collection of data has been used routinely in day- to-day life such as in administration or in banking or in stock market. Such data may be used for wide variety of applications such as analysis of web log data or intrusion detection or analyze the network traffic [5].

Frequent itemsets mining is a core component of data mining and variations of association analysis, like association- rule mining and sequential-pattern mining. Extraction of frequent itemsets is a core step in many association analysis techniques. An itemset is known as frequent if it presents in a large-enough portion of the dataset. This frequent occurrence of item is expressed in terms of the support count. Therefore, it needs complicated techniques for hiding or reforming users? private information during a data gathering process. Moreover, these techniques should not surrender the correctness of mining results [1].

The main mining algorithm based on association rule, Apriori not only predisposed the association rule mining community, but it pretentious other data mining fields as well.

Genetic Algorithms are a family of computational models inspired by advancement. These algorithms are predetermine a  prospective solution to a specific problem on a simple chromosome-like data structure and apply recombination operators to these structures as to defend significant information. Genetic algorithms are habitually inspected as function optimizer, although the ranges of problems to which genetic algorithms have been applied are quite broad. In this paper we are proposing Apriori and Genetic Algorithm (GA) based frequent itemsets mining for network traffic.

A. Association Rules  Association rules are if and then statements that help uncover relationships between seemingly unrelated data in a relational database or other information repository. An association rule has two parts, an antecedent (if) and a consequent (then). Association rule is expressed as X=>Y, where X is the antecedent and Y is the consequent. Each association rule has two quality measurements, support and confidence. Support implies frequency of occurring patterns, and confidence means the strength of implication [1-3] and [16].

B. Genetic Algorithm  Genetic Algorithm (GA) was developed by Holland in 1970. This incorporates Darwinian evolutionary theory with sexual reproduction. GA is stochastic search algorithm modeled on the process of natural selection, which underlines biological evolution. GA has been successfully applied in many search, optimization, and machine learning problems.

GA process is an iteration manner by generating new populations of strings from old ones. Every string is the encoded binary, real etc., version of a candidate solution. An evaluation function associates a fitness measure to every string indicating its fitness for the problem. Standard GA apply genetic operators such selection, crossover and mutation on an initially random population in order to compute a whole generation of new strings.

The most important biological terminology used in a genetic  algorithm is:  The chromosomes are elements on which the solutions are built.

Population is made of chromosomes.

Reproduction is the chromosome combination stage.

Mutation and crossover are reproduction methods.

Quality factor (fitness) is also known as performance index, it is an abstract measure to classify chromosomes.

The evaluation function is the theoretical formula to calculate a chromosome?s quality factor [12] and [13] and [17].

C. Genetic Operators  The GA maintains a population of n chromosomes (solutions) with associated fitness values. Parents are selected to mate, on the basis of their fitness, producing offspring via a reproductive plan (mutation and crossover). Consequently highly fit solutions are given more opportunities to reproduce (selected for next generation), so that offspring inherit characteristics from each parent. As parents mate and produce offspring, room must be made for the new arrivals since the population is kept at a static size (population size). In this way it is hoped that over successive generations better solutions will thrive while the least fit solutions die out. The representation scheme, Population Size, Crossover rate, Mutation rate, and fitness function and selection operator are the GA operators [4- 6].

D. Genetic Algorithm for Association Rule Mining  Genetic Algorithm (GA) is an adaptive heuristic search algorithm based on the evolutionary ideas of natural selection and genetics. The evolutionary process of a GA is a highly simplified and stylized simulation of the biological version. It starts from a population of individuals randomly generated according to some probability distribution, usually uniform and updates this population in steps called generations. In each generation, multiple individuals are randomly selected from the current population based upon some application of fitness, bred using crossover, and modified through mutation to form a new population [14] and [15].



II. RELATED WORK  Xin Li et al [1] proposed Frequent Itemsets Mining in Network Traffic Data. They think about the problem of frequent itemset mining problem in network traffic data, and propose an algorithm for mining frequent itemsets. They try to minimize the size of results and only maximal frequent itemsets are considered. To protect the privacy, intermediate mining results are encrypted using hashing method by different servers. The proposed algorithm is evaluated from the perspectives of accuracy and efficiency.

Mining of frequent itemsets using Genetic algorithm was proposed in [2]. This work carried out with logic of GA to  improve the scenario of frequents itemsets data mining using association rule mining. The main benefit of using GA in frequent itemsets mining is to perform global search with less time complexity. This scheme gives better results in huge or larger data set. It is also simple and efficient.

Another frequent itemsets mining approach based on genetic algorithm for non binary dataset was proposed by G.

Vjiay Bhaskar et al [4]. They present an efficient algorithm for generating significant association rules among database items.GA is used to improve the scenario and system can predict about negative attributes in generated rules.  As per results obtained this scheme is simple and efficient one. The Time complexity of the algorithm is also less and suitable for non binary data sets.

In continuation with this R. Vijaya Prakash et al [5] proposed similar method mining frequent itemsets for large data set using Genetic Algorithm. They implement frequent itemsets mining for numeric attributes also. Association rule mining is used to find relationship among attributes of database. This process was much time consuming and applied on discrete attributes. GA gives the facility of global search and minimum complexity. This algorithm avoids the necessity of discrediting apriori in attribute domain. They used an evolving algorithm to find the most appropriate amplitude of the intervals that are conventional a k-itemset, so that they have an elevated support value without being the intervals too extensive.

Sanat Jain and Swati Kabra [6] proposed Mining & Optimization of Association Rules Using Effective Algorithm.

In this they work on association rules organization and frequent itemsets generation using positive and negative association rule mining. They proposed an apriori based algorithm to find valid positive and negative association rule in confidence framework or structure. As per result this algorithm is efficiently works for mining of positive and negative association rules in database and also optimize positive and negative association rule using genetic algorithm. This approach also reduces the search space and improved usability of mining rules that uses correlated coefficient to judge which association rule is used to mine.

A Frequent Pattern Tree Algorithm for Mining Association Rule Using Genetic Algorithm was proposed by K.

Poornamala and R. Lawrance [7]. This algorithm is useful for larger datasets. In this genetic algorithm used to optimize larger data set. This algorithm also uses the advanced frequent pattern tree to mine the frequent itemset without producing conditional FP-tree. This was an efficient and less time consuming algorithm for mining of total possible frequent itemsets without producing conditional FP-tree in compressed tree structure form.

A new method for generating all positive and negative Association Rules was proposed in [8]. According to this apriori algorithm is used to generate all association rule that are hidden. They uses new name for negative rules like ANR, CNR and ACNR. They also modify correlation coefficient for improving results. Apriori Algorithm used for frequent itemset generation along with generation of positive rules, then NRGA algorithm was applied.

The multi-thread processing method with a Multi-Threaded Paralleled frequent item-set mining Algorithm (MTPA) was proposed by Xue Ping Zhang et al [8]. It is useful for enterprise human resources management system. It defines Hash allocation strategy for the number of threads to ensure the reasonable distribution. According to result obtained the time complexity of MTPA was superior to FP-tree algorithm. Using the multi core processing the Superiority of MTPA algorithm will enhance the efficiency of the frequent itemsets mining.

An efficient algorithm Weighted Support Frequent Itemsets (WSFI) was used to mine with normalized weight over data streams [10]. They use a new tree structure known as Weighted Support FP-Tree (WSFP-Tree) for storing crucial information in compressed form about frequent itemsets. In this approach they try to allow users to identify weight of each itemset then determine useful knowledge from data stream using one time scan using weighted support. Weighted function and weighted table are used to efficiently discover the frequent itemsets mining in single or one time scan. This algorithm was suitable for mining of frequent itemsets from stream of datasets effectively in terms of memory and run time effectiveness. It also contribute to execute frequents by generating constraint candidate itemsets effectively.

A genetic algorithm based optimized association rule mining was proposed by Anandhavalli et al [11]. In this algorithm negative occurrence of itemsets are used that are not considered in earlier algorithms like priori, incremental, border algorithm, pincer-search algorithm etc. GA algorithm is used to identify negative attributes generated by rules among more attribute in consequent part. This algorithm obtains possible optimized rules from given data set by means of genetic algorithm. The Apriori association rule mining is used to generate frequent dataset in this scheme. The positive attributes of frequent itemsets generated by genetic algorithm and subsequent part contains single attributes in negation of attributes. This algorithm gives better result for optimized rules.



III.  PROPOSED METHODOLOGY  The work that we are implemented here is a combinatorial method of generating association rules using apriori and genetic algorithm. Here the network Data set is passed to the apriori algorithm and then the result of the frequent sets is passed to the genetic algorithm to generate fewer rules.

A. Algorithm Used  Count supports of each individual item.

Create a set F with all individual items with min support  Creates "Candidate Set" C[k] based on F[k-1].

Check each element c in C[k] to see if it meets min support  Return set of all frequent item sets and initialize the genetic parameters and fitness value.

Create two sets differing only in the last element, based on some seed set  Join those item sets into c and generate crossover of each individual set.

Compare each subset s of c to F [k-1], if s is not in F[k-1] or its?s value is less than fitness value, delete it.

Return final candidate set  Take Frequent Item Set F  If {F[1], F[2],...F[k-1]} => {F[k]}meets some min confidence, make it a rule.

Remove last element from antecedent, insert into consequent, and check again with child created using genetic algorithm.

Though the Apriori principle allows us to considerably reduce the search space, the technique still requires a huge computation, particularly for large databases. This research proposes an approach for finding fuzzy sets for quantitative attributes in a database by using clustering techniques and then employs techniques for mining of fuzzy Associate rules.



IV. EXPERIMENTAL RESULT ANALYSIS  In our experiment we use a dataset of network traffic from UCI repository [18]. Here different feature of the network has been given in numerical form containing 8124 records where each record contains 119 columns of file size 558 KB. The different analysis on this dataset is shown below.

As shown in Table 1. Is the analysis of the existing work and the proposed work on the basis of different parameters.

Here in the table different values of support and confidence is given on the basis of which frequent item sets are generated and number of rules which defines the number of sets possible to identify any unwanted traffic data in the network. Here the performance of the proposed work is better as compared to the existing technique means the proposed work takes less time as compared to the existing technique and generated less frequent sets and generation rules for the network traffic.

TABLE 1. PARAMETER ANALYSIS ON BASIS OF SUPPORT & CONFIDENCE    Support   50 35 55 80  Confidence   30 20 35 45  Frequent Sets in  Apriori    153 1189 99 23  Generation Time  of Apriori    0.07 sec 0.37 sec 0.06 sec 0.03 sec  # Rules in  Apriori    570 17152 317 44  Frequent Sets in  Apriori-Genetic    44 49 38 39  Generation Time  in Apriori-  Genetic    0.05 sec 0.28 sec 0.04 sec 0.03 sec  # Rules in  Apriori-Genetic    487 973 56 19    As shown in Table 2. is the result analysis of proposed work on  the basis of generation time to generate association rules,  number of nodes created, support value increment and total  storage cost of the algorithm. The proposed work that we are  implemented here takes less time for the generation of  association rules and generates less frequent sets.

TABLE 2. Parameters Analysis of Proposed Work   Support   45 55 85 70  confidence   35 25 45 30  Frequent Sets in  Apriori-Genetic    42 34 48 43  Generation Time  in Apriori-  Genetic    0.09 sec 0.04 sec 0.02 sec 0.03 sec  # of Rules in  Apriori-Genetic    2018 307 17 98  Total # of Nodes  Created    526 228 130 145  Total # of  Support Value  Increments    178800 739012 269734 366754  Total  Storage(Bytes)  on Completion    34236 11760 3144 4424  As shown in the below fig. 1 is the time comparison of the  existing work and the proposed work where the proposed work  takes less time than the existing technique.

Fig. 1. Generation Time Comparison

V. CONCLUSION  Frequent item sets for the network traffic are used for the  analysis of different unwanted or any resource utilization of  node is observed. The existing technique of generated frequent  item sets for these network traffic takes less computational time  as well generates less frequent sets and takes less association  rules. But the technique that we are proposed here takes less  time and generated less frequent sets and contains less  association rules for a given support and confidence value of  the network traffic.

