

Hiding Sensitive Items in Privacy Preserving Association Ru.le Mining*  Shyue-Liang Wang, Yu-Huei Lee, Steven Billis, Ayat Jafari Department of Computer Science New York Institute of Technology  New York, USA slwang@nyit.edu  Absfrad - Pi-ivacy-preserving data mining [3] has recent!y emerged to address one of the negative side.7 of data mining technology: the threat to individual privacy.

For example, through data mining, one is able to ii,fer sensitive information, including personal information or even patterns, @om non-sensitive information or unclassified data. There have been two broad approaches for privacy-preserving data mining. Thefirst approach is to alter the data before delivery to the data miner so ?hat real values are obscured. The second approach assumes the data is distributed between two or more sites, m d these sites cooperate to leam the global data mining results without revealing the data at their individual sites.

Given specifc rules to be hidden, many data altering techniques for hiding association, classification rind clustering rules have been proposed. However, to specih hidden rules, entire data mining process needs to be executed For some applications, we are only interested in hiding certain sensitive items. In this work, we assume that only sensitive items are given and propose w o algorithms to mod& data in database so that sensitive items cannot be inferred through association rules mining algorithms. Examples illustrating the propo::ed algorithms are given. The efficiency of the propo::ed approach is further compared with Dasseni etcs [9] approach. It is shown that our approach required less number of databases scanning andprune more number of hidden rules. However, our approach must hide all rules containing the hidden items on the right hand side, wh,?re Dasseni?s approach can hide speciJic rules.

Keywords: privacy preserving data mining, association rule.

1 Introduction The concept of privacy preserving data mining has  been recently been proposed in response to the concerns of preserving personal information from data mining algorithms [3, 141. There have been two broad approaches. The first approach is to alter the data before delivery lo the data miner so that real values are obscured.

One technique of this approach is to selectively modify individual values from a database to prevent the discovery  * 0-7803-8566-7/04/$20.00 0 2004 IEEE.

of a set of.rules [9,16,17,19]. They apply a group of heuristic solutions for reducing the number of occurrences (support) of some frequent (large) itemsets below a minimum user specified threshold. The advantage of this technique is that it maximizes the amount of available data, although it does not ensure the integrity of the data.

The second approach is to allow users access to only a subset of data while global data mining results can still he discovered.

Given specific rules to he hidden, many data altering techniques for hiding association, classification and clustering rules have been proposed. However, to specify hidden rules, entire data mining process needs to be executed. For some applications, we are only interested in hiding certain sensitive items that appeared in association rules. In this work, we assume that only sensitive items are given and propose two algorithms to modify data in database so that sensitive items cannot be inferred through association rules mining algorithms. The proposed algorithms are based on modifying the database transactions so that the confidence of the association rules can be reduced. Examples demonstrating the proposed algorithms are shown. The efficiency of the proposed approach is further compared with Dasseni etc?s 191 approach. It is shown that our approach required less number of databases scanning and prune more number of hidden rules. However, our approach must hide all rules containing the hidden items on the right hand side, where Dasseni?s approach can hide specific rules.

The rest of the paper is organized as follows.

Section 2 presents the statement of the problem and the notation used in the paper. Section 3 presents the proposed algorithms for hiding association rules that contain the specified sensitive items. Section 4 shows some examples of the proposed algorithms. Section 5 analyses the result of the efficiency of proposed algorithms and further compare with Dasseni etc approach.

Concluding remarks and future works are described in section 6.

mailto:slwang@nyit.edu   2 Problem Statement 2.1 Mining of Association Rules  The problem of mining association rules was introduced in [Z]. Let I = { i,, i,;.., i, } be a set of literals, called items. Given a set of transactions D, where each transaction T is a set of items such that T E I ,  an association rule is an expression X 5 Y where xc l ,  Y c l ,  and X n Y = ( .  The X a n d  Y are called respectively the body (left hand side) and head (right hand side) of the rule. An example of such a rule is that 90% of customers buy hamburgers also buy Coke.

The 90% here is called the confidence of the rule, which means that 90% of transaction that contains X also  contains Y. The confidence is calculated as  The support of the rule is the percentage of transactions that contain both X and Y. which is calculated as  IXUYl 1x1  . In other words, the confidence of a rule IXUYl N  measures the degree of the correlation between itemsets, while the support of a rule measures the significance of the correlation between itemsets. The problem of mining association rules is to find all rules that are greater than the user-specified minimum support and minimum confidence.

As an example, for a given database in Table 1, a minimum support of 33% and a minimum confidence of 70%, nine association rules can be found as follows: B=>A (66%, loo%), C=>A (66%, loo%), B=>C (SO%,  (50%, 75%, BC=>A(50%, loo%), C=>AB(SO%, 75%), 75%), C=>B (50%, 75%), AB=>C (50%, 75%), AC=>B  B=>AC(SO%, 75%).

Table 1: Database D pi ABC  I T4 I AB I  The objective of data mining is to extract hidden or potentially unknown interesting rules or patterns from databases. However, the objective of privacy preserving data mining is to hide certain sensitive information so that they cannot be discovered through data mining techniques [1,4-12,151. In this work, we assume that only sensitive items are given and propose two algorithms to modify  data in database so that sensitive items cannot be inferred through association rules mining algorithms. More specifically, given a transaction database D, a minimum support, a minimum confidence and a set of items H to be hidden, the objective is to modify the database D such that no association rules containing H on the right hand side will be discovered.

As an example, for a given database in Table 1, a minimum support of 33%, a minimum confidence of 70%, and a hidden item H = {C}, if transaction T5 is modified as AB, then the followiiig rules that contain item C on the right hand side will be hidden: B=>C (50%, 60%), AB=>C (50%, 60%), B=>AC(50%, 60%).

The following notation will be used in the paper.

Each database transaction has three elements: T=<TID, list-of-elements, size>. The TID is the unique identifier of the transaction 7 and list-of-elements is a list of all items in the database. However, each element has value 1 if the corresponding item is supported by the transaction and 0 otherwise. Size means the number of elements in the list-of-elements having value 1. For example, if I = {A,B,C),  a transaction that has the items {A, C )  will be represented as 1 = <T1,101,2>. In addition, a transaction t supports an itemset I when the elements of t.list-of-elements corresponding to items of I are all set to 1. A transaction tpartially supports an itemset I when the elements are not all set to 1. For example, i f I  = {A,B,C) = [111],p=<T1,[111],3>, andq=<T2,[001],1>, thenwe would say that p supports I and q partially supports I.

3 Proposed Algorithms In order to hide an association rule, we can either  decrease its support or its confidence to be smaller than pre-specified minimum support and minimum confidence.

To decrease the confidence of a rule, we can either (1) increase the support ofX, i.e., the left hand side of the rule, but not support of X U Y, or (2) decrease the support of the itemset X U Y. For the second case, if we only decrease the support of Y, the right hand side of the rule, it would reduce the confidence faster than simply reducing the support o f X  U Y. To decrease support of an item, we will modify one item at a time by changing from 1 to 0 or from 0 to 1 in a selected transaction.

Based on these two strategies, we propose two data- mining algorithms for hiding sensitive items in association rules, namely Increase Support of LHS First (ISLF) and Decrease Support of RHS First (DSRF). The fxst algorithm tries to increase the support of left hand side of the rule. If it was not successful, it tries to decrease the support of the right hand side of the rule. The second algorithm reverses the order of the first algorithm. The detail of the ISLF algorithm is described as follow.

Algorithm ISLF Input: (1) a source database D,  (2) a min-support, (3) a min-confidence, (4) a set of hidden items H  OutDut: a transformed database D?. where rules  1.

2.

3.

4.

5.

6.

7.

8.

containing H on RHS will he hidden  Find large I-item sets from D ; For each hidden item h E H  If H is empty, then EXIT;// no AR contains H in RHS Find large 2-itemsets from D ; For each h E H {  If h is not a large I-itemset, then H := H-{h} ;  For each large 2-itemset containing h { Compute confidence of rule U, where U is a rule  ofx- h ; 9.

IO.

11.

12. Repeat { 13.

14.

15.

16. Until ( confidence(U) <min-conf or TJ is  17.

18.

19.

20.

21. Repeat { 22.

23.

24.

25.

26.

27.

28.

29. Else 30.

3 1.

32. Remove h from H ; 33. } // end of for each h E H Output updated D, as the transfonnedD?;  If Confidence > min-conf, then { //Increase Support of LHS  Find TI = { f in D 1 f partially supports LHS (U) ; Sort TI in descending order by the number of  supported items ;  Choose the first transaction f from TI ; Modify I to support LHS( U) ; Compute support and confidence of U } : }  empty 1 ; } ; //end if confidence>min-conf Ifconfidence > min-conf, then {/Decrease  Find T2 = { f in D I f supports RHS (U)} ; Sort T, in descending order by the number of  Support of RHS  supported items ;  Choose the first transaction I from T z ; Modify f to partially support RHS(U) ; Compute support and confidence of U ;  }  Until ( confidence(U) <min-conf or T,is empty ) ; } ; //end if confidence>min-conf If Confidence > min-conf, then  CAN NOT HIDE h ;  Update D with new transaction I ; }. // end of for each large 2-itemset  4 Examples This section shows four examples for demonstrating  the two proposed algorithms in hiding sensitive item!. in the association rules mining.

For a given database in Table I ,  a minimum sup~~or t of 33% and a minimum confidence of 70%, the first two  examples hide the sensitive items using the ISLF algorithm. The difference of the two examples is that the order of hiding item is different. The first example hides item C and then item B. The second example hides item B and then item C. The result is given in section 4.1.

The thud and fourth examples hide the sensitive items using DSRF algorithm. The difference is also the order of items to he hidden. The result is given in section 4.2.

Table 2: Database D using the specified notation  4.1 Examples Running ISLF Algorithm EramDle 1 Assuming that the min-supp = 33% and min-conf = 70%, the result of hiding item C and then item Busing ISLF algorithm is as follows. To hide item C, the rule B => C (SO%, 75%) will be hidden if transaction T, is modified from 100 to 110 using ISL (Increase Support of LHS). The new database DI is shown in Table 3. The rule B => C will have support = 50% and Confidence = 60%. To hide item B, the rule A => B (67%, 83%) will be hidden if transaction T, is modified from 111 to 101 using DSR (Decrease Support of RHS). The new database D2 is shown in Table 3. The rule A => B will have support = 67% and confidence = 67%.

Example 2 As in example 1, reversing the order of hiding items, the result of hiding item B and then item C using ISLF algorithm is as follows. To hide item B, the rule C => B (SO%, 75%) will be hidden if transaction Ts is modified from 100 to 101 using ISL. The new database D3 is shown in Table 4. The rule C => B will have support = 50% and confidence = 60%. To hide item C, the rule A => C (83%, 83%) will he hidden if transaction TI is modified from 111 to 110 using DSR. The new database D4 is shown in Table 4. The rule A => C will have support = 83% and confidence = 67%.

Table 3 I latahases before and after hiding item 1 C and item     Table 4 Databases before and after hiding item B and item One observation is that different sequences of hiding  items will result in different transformed databases, i.e., D5 and D6.

5 Analysis This section analyzes some of the characteristics of  the proposed algorithms and compares with the algorithms proposed in Dasseni etc [9]. The first  Dasseni?s l a  4  One observation we can make is that different sequences of hiding items will result in different transformed databases, i.e., D2 and D,.

4.1 Examples Running DSRF Algorithm ExamDle 3 Assuming that the min_supp=33% and min_conf=70%, the result of hiding item C and then item B using DSRF algorithm is as follows. To hide item C, the rule B => C (50%, 75%) will be hidden if transaction TI is modified from 11 1 to 110 using DSR. The new database DJ is shown in Table 5. The rule B => C will have support = 33% and confidence = 50%. To hide item B, the rule C => B (50%, 67%) will be hidden due to transaction TI is modified.

Table 5 Databases before and after hidine item C and item   I  Examnle 4 As in example 3, reversing the order of hiding items, the result of hiding item B and then item C using DSRF algorithm is as follows. To hide item B, the rule C => B (50%, 75%) will be hidden if transaction TI is modified from 11 1 to 101 using DSR. The new database D6 is shown in Table 6. The rule C => B will have support = 33% and confidence = 50%. To hide item C, the rule B => C (33%, 67%) will be hidden due to transaction TI is modified.

characteristics we show is that the transformed databases are different under different ordering of hiding items, even though the same set of sensitive items is specified.

This characteristic is demonstrated in the four examples in section 4 and is summarized in Table 7. Databases D2 and D, are resulting databases using ISLF algorithm and D5 and Da are resulting databases using DSRF algorithm.

Table 7 Databases before and after hiding items B and C  The second characteristic we analyze is the efficiency of the proposed algorithm compared with the Dasseni?s etc [9] algorithms. Even though it is the hidden rules, instead of hidden items, that are specified in [9], we compare the number of database scanning and the number of rules pruned between the two approaches. Table 8 summarizes the results.

For ISLF algorithm, the number of database scanning comes from the calculation of large one itemsets, large two itemsets, and partial support transactions TI.

The rules pruned are B => AC and AB => C. For Dasseni?s l a  algorithm, the number of database scanning comes from the calculation of large one itemsets, large two itemsets, large three itemsets, and partial support transactions T. No rules are pruned in the Dasseni?s l a algorithm. It can be seen that the ISLF algorithm requires less database scanning and prune more number of  Table 6 Databases before and after hiding item B and item C using DSRF  association rules. Similar results are obtained for comparing DSRF algorithm and Dasseni?s l b  algorithm.

Table 8 Database scans and rules pruned in hiding item C  Pruned     One of the reasons that Dasseni?s approach does not prune rules is that hidden rules are given in advance and the algorithms try to hide every single rule without checking to see if rules can be pruned after some transactions have been changed.

However, our approach needs to hide all rules containing hidden items on the right hand side. But Dasseni?s approach can hide some of the rules containing hidden item on the right hand side. For example, for hidden item C, Dasseni?s approach can hide A => C, but show B => C, whereas our approach must hide both A => C and B => C.

The third characteristic we analyze is efficiency comparison of the ISLF and DSRF algorithms. (One observation we conclude from the examples in section four is that DSRF algorithm seems to be more effective when the support count of the hidden item is large. This is due to when support of right hand side of the rule is large; increase support of left hand side usually does not reduce the confidence of the rule. However, decrcase support of right hand side usually decreases the confidence of the rule.

6 Conclusions In this work, we have studied the database privacy  problems caused by data nuning technology and proposed two nahe algorithms for hiding sensitive data in association rules mining. The proposed algorithms are based on modifying the database transactions so that the confidence of the association rules can be reduced.

Examples demonstrating the proposed algorithms are shown. The efficiency of the proposed approach are further compared with Dasseni?s approach [9]. It ?#as shown that ow approach required less number of datatiase scanning and prune more number of hidden rules.

However, our approach must hide all rules containing the hidden items on the right hand side, where Dasseni?s approach can hide some of the specified rules. In addkion, more simulation must be carried out to show the feasibility and efficiency of the proposed algorithms.

