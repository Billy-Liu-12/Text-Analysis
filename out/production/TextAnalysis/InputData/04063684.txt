Preserving Private Knowledge in Frequent Pattern Mining?

Abstract  The knowledge discovered by data mining may contain sensitive information, which may cause potential threats to- wards privacy and security. In this paper, we address the problem of better preserving private knowledge by propos- ing an Item-based Pattern Sanitization to prevent the dis- closure of private patterns. We also present two strategies to generate a safe and shareable pattern set for preserving private knowledge in frequent pattern mining.

1 Introduction  Recent studies [4] show that the knowledge discovered by data mining can contain sensitive information, which are private knowledge of the data owner. Disclosing them may have potential threats towards privacy and security. In this paper, we address the problem of preserving private knowl- edge in frequent pattern mining, where the data are stored in a transaction database, and the discovered knowledge is represented by a collection of frequent patterns with their supports. We consider the scenario that some of the discov- ered frequent patterns contain sensitive information, called private patterns, which should not be disclosed.

Only eliminating private patterns from the result of fre- quent pattern mining is not enough for preserving the dis- closure of private patterns. Because of the correlation be- tween private patterns and non-private patterns, an attacker may infer private patterns from a set of non-private patterns.

Hence, some non-private patterns need also be hidden when hiding private patterns. The goal of our study is to prevent the disclosure of private patterns and maximize the result of frequent pattern mining that can be released.

?This research was supported by the Shanghai Rising-Star Program (No. 05QMX1405), the National Natural Science Foundation of China (No. 60303008), the National Grand Fundamental Research 973 Program of China (No. 2005CB321905).

2 Related work  The study of Oliveira et al. [9] is closely related to our work. They investigated secure association rule sharing.

Given association rule set R for sharing, and a subset RR of R is restricted from disclosure, they converted associa- tion rules into frequent patterns, then sanitized the set of frequent patterns by using Downright Sanitizing Algorithm (DSA). However, an attacker can still infer sensitive infor- mation from the sanitization results of DSA. We will discuss it in Section 3.

Some studies also addressed the problem of privacy- preserving frequent pattern mining in a different scenario from ours. They considered to release a sanitized dataset instead of the mining result. In these studies, the origi- nal dataset is sanitized so that no private pattern can be mined from the sanitized dataset. The procedure is called data sanitization. Atallah et al. [2] proved that the prob- lem of optimal data sanitization is NP-hard. Different heuristic approaches for data sanitization were proposed in [2, 8, 10, 11, 12]. However, data sanitization may bring fake frequent patterns which do not appear in the orig- inal database but in the sanitized dataset. More impor- tantly, many non-private frequent patterns in the sanitized dataset may have different supports from those in the origi- nal dataset.

3 Preserving private patterns  Let I = {i1, i2, ? ? ? , in} be a set of literals, called items.

A transaction T is a set of items from I. For each transac- tion T , there is a unique identifier Tid associated with it. A transaction database D is a set of transactions. Figure 1(a) gives an example of transaction database.

A pattern (or itemset) p is a subset of items I. If there are k items in p, we say that the length of p is k, de- noted by |p| = k. For facility, we write a pattern p = {ij, ij+1, ? ? ? , ik} in the form of p = ijij+1 ? ? ? ik. The  0-7695-2702-7/06 $20.00  ? 2006    Tid T 1 b d x 2 a b c d 3 a b c d 4 b c d y 5 a b c z  (a)  Length Frequent Patterns 1 (a, 60%), (b, 100%),  (c, 80%), (d, 80%) 2 (ab, 60%), (ac, 60%),  (ad, 40%), (bc, 80%), (bd, 60%), (cd, 60%)  3 (abc, 60%), (abd, 40%), (acd, 40%), (bcd, 60%)  4 (abcd, 40%) (b)  Figure 1. A transaction database and its fre- quent patterns  support of pattern p is the fraction of transactions that con- tain p, denoted by sup(p). We have the follow theorem for the relation between the supports of two patterns p and q.

Theorem 1. If p ? q, then sup(p) ? sup(q).

Proof sketch. Because any transaction containing q must contain p, we have sup(q) ? sup(p).

Definition 1. Given transaction database D and minimum support threshold ?(0 < ? < 1), we say that p is a ?- frequent pattern of D if sup(p) ? ? in D.

For facility, we sometimes call ?-frequent pattern fre- quent pattern if the context is clear. Given a transaction database D, and minimum support threshold ?, the task of frequent pattern mining [1, 6] is to find the collection of all ?-frequent patterns with their supports in D. The re- sult of frequent pattern mining can be denoted by F = {(p, sup(p))|sup(p) ? ?}. For example, given transaction database D in Figure 1(a), and ? = 30%, all ?-frequent patterns are shown in Figure 1(b).

Definition 2. If a frequent pattern p contains any sensitive information that cannot be disclosed, we say that p is a pri- vate pattern. The set of private patterns is denoted by Ps.

Generally, whether a frequent pattern is private or not is identified by the data owner. The problem of preserv- ing private knowledge in frequent pattern mining is as fol- lows: given the result F of frequent pattern mining, let Ps ? {p|(p, sup(p)) ? F} be a set of private patterns, we need to generate a subset F ? of F such that for any q ? Ps, an attacker cannot infer sup(q) ? ? from F ?. Besides, we also need to maximize the number of patterns in F ?.

We assume |Ps| ? |F|, where |Ps| and |F| are the num- ber of private patterns and frequent patterns, respectively.

We also assume that what an attacker can get is only F ?.

Definition 3. If an attacker can infer sup(q) ? ? from F ?, we say that F ? |= (sup(q) ? ?). Otherwise, we say that F ? ?|= (sup(q) ? ?). If F ? ?|= (sup(q) ? ?) for any q ? Ps, we say that F ? is a safe and shareable pattern set.

Oliveira et al. presented DSA for hiding private patterns in [9]. For each q ? Ps, DSA randomly chooses a sub- pattern q? ? q with |q?| = 2, and generates a subset F? of F by removing any pattern q?? ? q from F . However, the F? generated by DSA is not always a safe and shareable  pattern set. For example, consider the transaction database and its frequent patterns in Figure 1, assume that q = abcd is a private pattern, and DSA chooses q? = ab ? q, we have F? = {a, b, c, d, ac, ad, bc, bd, cd, acd, bcd}. However, F? is not a safe and shareable pattern set. Because accord- ing to inclusion-exclusion principle [7], we can infer that sup(q) ? sup(acd) + sup(bcd) ? sup(cd) = 40% ? ?.

In order to generate a safe and shareable pattern set, we need to block all the channels that an attacker may infer pri- vate patterns from non-private patterns. We have the follow- ing theorems for judging whether F ? is a safe and shareable pattern set or not.

Lemma 1. Given q ? Ps, if ?q? ? q ? |q?| ? 1 such that F ? ?|= (sup(q?) ? ?), then F ? ?|= (sup(q) ? ?).

Proof sketch. (By contradiction). Assume that F ? |= (sup(q) ? ?), but ?q? ? q(|q?| ? 1) and F ? ?|= (sup(q?) ? ?). From Theorem 1, we have sup(q?) ? sup(q). Hence F ? |= (sup(q?) ? ?). This conflicts with the assumption that F ? ?|= (sup(q?) ? ?).

Lemma 2. Given q ? Ps and |q| = 1, if ?p ? q, (p, sup(p)) ?? F ?, then F ? ?|= (sup(q) ? ?).

Proof sketch. Assume that q = {x}, where x is an item.

Since ?p ? q, (p, sup(p)) ?? F ?, an attacker cannot tell if there exists item x in the original database or not. Thus, F ? ?|= (sup(q) ? ?).

Theorem 2. For each q ? Ps, if ?q? ? q and |q?| = 1 (i.e., q? is an item of q) such that ?p ? q?, (p, sup(p)) ?? F ?, then F ? is a safe and shareable pattern set.

Proof sketch. For each q ? Ps, it belongs to one of the following cases:  (1) When |q| = 1, we have q? = q. From Lemma 2, we know F ? ?|= (sup(q) ? ?) ;  (2) When |q| > 1, we have q? ? q. First, we have F ? ?|= (sup(q?) ? ?) from Lemma 2. Then, we have F ? ?|= (sup(q) ? ?) from Lemma 1.

Therefore, F ? is a safe and shareable pattern set.

Based on Theorem 2, we propose a special form of  pattern sanitization, called Item-based Pattern Sanitization, which is described as follows: given the result F of fre- quent pattern mining, let Ps ? {p|(p, sup(p)) ? F} be a set of private patterns. First, we initialize F ? = F . Then for each q ? Ps, we choose an item x ? q, and remove all the frequent patterns containing item x from F ?. The item x is called the victim of private pattern q.

Theorem 3. Item-based Pattern Sanitization can generate a safe and shareable pattern set.

Proof sketch. Since for each q ? Ps, there exists item x ? q such that for any pattern p ? {x}, (p, sup(p)) ?? F ?. We know from Theorem 2 that the F ? generated by Item-based Pattern Sanitization is a safe and shareable pattern set.

However, how to maximize the number of frequent pat- terns in the F ? generated by Item-based Pattern Sanitization is not trivial. We call this problem Maximal Item-based Pat- tern Sanitization.

0-7695-2702-7/06 $20.00  ? 2006    Theorem 4. The problem of Maximal Item-based Pattern Sanitization is NP-hard.

Proof sketch. The NP-hardness of Maximal Item-based Pat- tern Sanitization can be proved by a reduction from the NP- hard problem of hitting set [5]. Due to the limitation of space, the details of the proof are omitted here.

Under item-based pattern sanitization, we have two strategies for generating a safe and shareable pattern set.

One strategy is to sanitize patterns after frequent pattern mining, another is to integrate pattern sanitization into fre- quent pattern mining. We will discuss them in Section 4 and 5, respectively.

4 Sanitizing the mining results  A strategy for generating a safe and shareable pattern set is to sanitize patterns after frequent pattern mining. That is, we first mine transaction database D to get the collec- tion F of all frequent patterns with their supports. After the set Ps of private patterns is identified, we then sanitize F to get a safe and shareable pattern set F ?. Based on this idea, we present two heuristic algorithms, MINSS (MINi- mal Support Sanitization) and MINNS (MINimal Number Sanitization).

Algorithm: MINSS Input: the collection F of frequent patterns, the set Ps of private patterns Output: safe and shareable pattern set F ? Methods:  F ? = F ; for each q ? Ps do begin  select x ? q such that x = arg mini?q{sup(i)}; for each (p, sup(p)) ? F ? and x ? p do F ? = F ? ?{(p, sup(p)};  end  Figure 2. MINSS algorithm  Algorithm: MINNS Input: the collection F of frequent patterns, the set Ps of private patterns Output: safe and shareable pattern set F ? Methods:  F ? = F ; for each q ? Ps do begin  for item i ? q do num[i] = |{p|(i ? p) ? ((p, sup(p)) ? F ?)}|; select x ? q such that x = arg mini?q{num[i]}; for each (p, sup(p)) ? F ? and x ? p do F ? = F ? ?{(p, sup(p)};  end  Figure 3. MINNS algorithm  The details of MINSS are shown in Figure 2. MINSS first initializes F ? = F . Then for each q ? Ps, MINSS chooses an item x ? q such that the support of x is no larger than those of any other items in q. If there are multiple items with the same minimal support, then an item will be chosen randomly. Lastly, any frequent pattern p containing item x will be removed from F ?. Based on Theorem 3, the F ? generated by MINSS is a safe and shareable pattern set.

Another algorithm MINNS is described in Figure 3. For each q ? Ps, MINNS chooses such a victim x ? q that the  number of frequent patterns containing item x is no larger than those of any other items in q. If there are multiple items meeting the requirement, an item will be chosen randomly.

This way of choosing a victim may preserve more number of patterns in F ?. Based on Theorem 3, MINNS also gener- ates a safe and shareable pattern set F ?.

5 Integrating sanitization into mining  The findings of this paper show that if a pattern q is pri- vate, then any pattern q? ? q should not appear in the safe and shareable pattern set.

Theorem 5. Given q ? Ps, if F ? is a safe and shareable pattern set, then we have ?q? ? q, (q?, sup(q?)) ?? F ?.

Proof sketch. (By contradiction). Assume that ?q? ? q, (q?, sup(q?)) ? F ?. From Theorem 1, we have sup(q) ? sup(q?) ? ?. This conflicts with the condition that F ? is a safe and shareable pattern set.

According to Theorem 5, we present a privacy- aware frequent pattern mining algorithm called S-Apriori (Sanitization-Apriori). Its details are given in Figure 4. S- Apriori is based on Apriori [1], and integrates pattern san- itization into frequent pattern mining. In Figure 4, Lk is the set of frequent patterns with length of k. The function apriori-gen is the same as that in [1], which generates a set Ck+1 of candidate frequent patterns with length of k + 1 from Lk.

Algorithm: S-Apriori Input: database D, minimum support threshold ? Output: safe and shareable pattern set F ? Methods:  Ps = ?; k = 1; L1 = {(p, sup(p))|(sup(p) ? ?) ? (|p| = 1)}; while Lk ?= ? do begin  specify the set of private patterns Pks in Lk; Lk = Lk ? {(q, sup(q))|q ? Pks }; Ps = Ps ? Pks ; Ck+1 = apriori-gen(Lk ); for each c ? Ck+1 do calculate sup(c); Lk+1 = {(c, sup(c))|(c ? Ck+1) ? (sup(c) ? ?)}; k = k + 1;  end F = ?i=1...k Li; get F ? by calling MINSS or MINNS with F and Ps.

Figure 4. S-Apriori algorithm  S-Apriori works in an interactive way. After it finds the set Lk of frequent patterns with length of k, data owner can specify the set Pks of private patterns in Lk. For any q ? Ps, S-Apriori moves (q, sup(q)) from Lk, and adds q into Ps.

However, S-Apriori is a conservative algorithm. Because it only removes private patterns from Lk, there is the chance that an attacker can infer private patterns from non-private patterns. Hence, in order to generate a safe and shareable pattern set, S-Apriori still needs to call MINSS or MINNS as its last step.

In Figure 5, we present a more aggressive algorithm, called MINSS-Apriori, which incorporates the idea of  0-7695-2702-7/06 $20.00  ? 2006    Algorithm: MINSS-Apriori Input: database D, minimum support threshold ? Output: safe and shareable pattern set F ? Methods:  F ? = ?; k = 1; L1 = {(p, sup(p))|(sup(p) ? ?) ? (|p| = 1)}; while Lk ?= ? do begin  specify the set of private patterns Pks in Lk; for each q ? Pks do begin  select x ? q such that x = arg mini?q{sup(i)}; Lk = Lk ? {(p, sup(p)) ? Lk)|x ? p}; F ? = F ? ? {(p, sup(p)) ? F ?)|x ? p};  end Ck+1 = apriori-gen(Lk ); F ? = F ? ? Lk; for each c ? Ck+1 do calculate sup(c); Lk+1 = {(c, sup(c))|(c ? Ck+1) ? (sup(c) ? ?)}; k = k + 1;  end  Figure 5. MINSS-Apriori algorithm  MINSS into frequent pattern mining. Once a pattern q is identified as private pattern, we choose an item x ? q such that the support of x is no larger than those of any other items in q, and remove any pattern containing x from both Lk and F ?. In MINSS-Apriori, pattern sanitization is com- pletely integrated into frequent pattern mining. When Lk is empty, we know from Theorem 3 that F ? is a safe and shareable pattern set.

Algorithm: MINNS-Apriori Input: database D, minimum support threshold ? Output: safe and shareable pattern set F ? Methods:  F ? = ?; k = 1; L1 = {(p, sup(p))|(sup(p) ? ?) ? (|p| = 1)}; while Lk ?= ? do begin  specify the set of private patterns Pks in Lk; for each q ? Pks do begin  for each i ? q do num[i] = |{p|(i ? p)?((p, sup(p)) ? F ?)}|; select x ? q such that x = arg mini?q{num[i]}; Lk = Lk ? {(p, sup(p)) ? Lk)|x ? p}; F ? = F ? ? {(p, sup(p)) ? F ?)|x ? p};  end Ck+1 = apriori-gen(Lk ); F ? = F ? ? Lk; for each c ? Ck+1 do calculate sup(c); Lk+1 = {(c, sup(c))|(c ? Ck+1) ? (sup(c) ? ?)}; k = k + 1;  end  Figure 6. MINNS-Apriori algorithm  Besides MINSS-Apriori, we also present another privacy-aware frequent pattern mining algorithm in Fig- ure 6, called MINNS-Apriori. MINNS-Apriori is similar to MINSS-Apriori, but it incorporates the idea of MINNS into frequent pattern mining. MINNS-Apriori can also generate a safe and shareable pattern set directly.

6 Experiments  In our experiments, we use a real dataset (RETAIL) which is the market basket data from an anonymous retail store. There are about 16,500 distinct items and 88,000 transactions in RETAIL. For frequent pattern mining, we use an efficient implementation of Apriori [3]. S-Apriori, MINSS-Apriori and MINNS-Apriori are also implemented  based on [3] with C programming language. We vary the number of frequent patterns by changing minimum sup- port threshold ?. The set Ps of private patterns is formed by randomly choosing 25 ?-frequent patterns. For any q1, q2 ? Ps, we require q1 ? q2 and q1 ? q2. All ex- periments are performed on a 750MHz Intel Pentium III PC with 128MB main memory and Windows 2000.

We use execution time to measure the efficiency of al- gorithms, and use an metric called SPF (Shareable Pattern Factor) to measure the effectiveness. SPF is defined as fol- lows: SPF = |F ?|/|F?s|, where |F ?| is the number of fre- quent patterns in a safe and shareable pattern set, and |F?s| is the number of frequent patterns which do not contain any private patterns. An algorithm with higher SPF means that algorithm is more effective. We plot each result in our fig- ures with an average over the results of 10 trials.

0.02 0.03 0.04 0.05 0.06 0.07 0.08       Minimum Support Threshold (%)  S P  F (  % )  Apriori+MINSS Apriori+MINNS  (a)  0.02 0.03 0.04 0.05 0.06 0.07 0.08         Minimum Support Threshold (%)  T im  e (s  ec on  d)  Apriori+MINSS Apriori+MINNS  (b)  0.02 0.03 0.04 0.05 0.06 0.07 0.08       Minimum Support Threshold (%)  S P  F (  % )  S?Apriori+MINSS S?Apriori+MINNS  (c)  0.02 0.03 0.04 0.05 0.06 0.07 0.08          Minimum Support Threshold (%) T  im e  (s ec  on d)  S?Apriori+MINSS S?Apriori+MINNS  (d)  0.02 0.03 0.04 0.05 0.06 0.07 0.08       Minimum Support Threshold (%)  S P  F (  % )  MINSS?Apriori MINNS?Apriori  (e)  0.02 0.03 0.04 0.05 0.06 0.07 0.08        Minimum Support Threshold (%)  T im  e (s  ec on  d)  MINSS?Apriori MINNS?Apriori  (f)  Figure 7. Sanitization options  We evaluate three options for generating a safe and shareable pattern set. In the first option (Figure 7(a) and 7(b)), first we mine the collection of all frequent pat- terns with Apriori, then we sanitize the mining result with MINSS or MINNS (denoted by Apriori+MINSS or Apri- ori+MINNS, respectively). In the second option (Figure 7(c) and 7(d)), first we mine the set of non-private pat- terns with S-Apriori, then we sanitize the mining result with MINSS or MINNS (denoted by S-Apriori+MINSS or S- Apriori+MINNS, respectively). In the third option (Figure 7(e) and 7(f)), we mine a safe and shareable pattern set di- rectly with MINSS-Apriori or MINNS-Apriori.

It is observed that an MINNS-based algorithm (including  0-7695-2702-7/06 $20.00  ? 2006    Apriori+MINNS, S-Apriori+MINNS and MINNS-Apriori) generates a safe and shareable pattern set with larger size than the corresponding MINSS-based algorithm (including Apriori+MINSS, S-Apriori+MINSS and MINSS-Apriori).

The reason is that an MINNS-based algorithm can often choose a better victim during pattern sanitization than the corresponding MINSS-based algorithm. However, choos- ing such a victim may be time-consuming, because it needs to scan the set of all frequent patterns to determine an ap- propriate victim for each private pattern.

0.02 0.03 0.04 0.05 0.06 0.07 0.08       Minimum Support Threshold (%)  S P  F (  % )  Apriori+MINSS S?Apriori+MINSS MINSS?Apriori  (a)  0.02 0.03 0.04 0.05 0.06 0.07 0.08        Minimum Support Threshold (%)  T im  e (s  ec on  d)  Apriori+MINSS S?Apriori+MINSS MINSS?Apriori  (b)  0.02 0.03 0.04 0.05 0.06 0.07 0.08       Minimum Support Threshold (%)  S P  F (  % )  Apriori+MINNS S?Apriori+MINNS MINNS?Apriori  (c)  0.02 0.03 0.04 0.05 0.06 0.07 0.08         Minimum Support Threshold (%)  T im  e (s  ec on  d)  Apriori+MINNS S?Apriori+MINNS MINNS?Apriori  (d)  Figure 8. MINSS-based and MINNS-based al- gorithms  Figures 8(a) and 8(b) compare the performance of MINSS-based algorithms. We observe that their SPFs are very close. In MINSS-based algorithms, the victim of a pri- vate pattern is chosen based on the supports of the items in that private pattern. Integrating pattern sanitization into fre- quent pattern mining does not change the supports of items.

Only when there exist multiple candidate items with the same support, a victim will be chosen randomly. There- fore, the choice of victims is almost the same for different MINSS-based algorithms, and the safe and shareable pat- tern sets generated by them have similar sizes.

However, the execution time of MINSS-Apriori is the shortest, follows by Apriori-MINSS and then Apri- ori+MINSS. This is especially true when the minimum sup- port threshold is small. The reason is as follows: S-Apriori integrates pattern sanitization into frequent pattern mining.

It removes a pattern q from Lk immediately when q is iden- tified as a private pattern. Hence, S-Apriori will reduce the sizes of both candidate frequent pattern set and frequent pat- tern set, and will cause both the mining time and the time taken for subsequent sanitization to be shorten. It is also noted that MINSS-Apriori takes least time to generate a safe and shareable pattern set because it pushes sanitization even deeper into frequent pattern mining than S-Apriori, and it does not need any sanitization after mining.

We also compare the performance of MINNS-based al- gorithms (Figure 8(c) and 8(d)). The experimental results are similar to those of MINSS-based algorithms.

7 Conclusions  In this paper, we present two strategies for preserving private knowledge in frequent pattern mining, and also pro- vide heuristic algorithms for each strategy. Our experimen- tal results show that by integrating pattern sanitization into frequent pattern mining, we can improve the efficiency of privacy-preserving frequent pattern mining without reduc- ing the effectiveness of privacy protection.

For future research, we will investigate the possibility of developing more effective and efficient algorithms. We also plan to extend our research to other tasks of data mining, like classification and clustering, etc.

