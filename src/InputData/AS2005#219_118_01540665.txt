Intelligent Aggregation of Purchase Orders in e-Procurement

Abstract  A large enterprise generates millions of Purchase Orders (PO) each year buying various types of goods and services. Each PO has a cost associated with it. This cost comprises multiple elements including the price of the good or service, the shipping and handling of the purchase, and the overhead in initiating, generating, tracking, and managing the PO. To reduce the cost of doing business, it is imperative to reduce the total cost of POs in enterprise e-Procurement in an automated fashion.

One way to reduce enterprise procurement cost is to aggregate demands so that the total cost of a bunch of POs will be reduced by a better price, a lowered shipping and handling fee, and a reduced overhead. The cost of goods and services often depend on several factors including volume, timing, and other business objectives.

This paper describes an Intelligent Aggregation approach for automatically aggregating demands to reduce procurement cost in enterprise e-Procurement.

Our aggregation approach for e-Procurement consists of an information model for representing products (goods or services) and representing purchase orders for such products, a corporate agreement system, a negotiation engine, and a rule-based aggregation engine.

The information model is based on an extension of the classic Entity-Relationship model. The extension enables association of rules and constraints with and among attributes. These rules and constraints must be satisfied during PO aggregation and thus ensure the aggregate PO to be consistent with original individual POs. A rule-based aggregation engine examines POs as they arrive and interact with other decision aids to determine whether aggregation of a particular bunch of POs makes any business sense. Aggregation can happen in two business scenarios, one for POs constrained by existing corporate agreements and another for POs to be refined by online negotiations. The aggregation engine interacts with a corporate agreement system to obtain supplier policies in the first scenario. For the second scenario, it interacts with the negotiation engine to obtain supplier?s policies during iterations of the negotiation process. Relevant policies are those that define product pricing, shipping and handing, and post-sale services as well as warranties  and returns. Examples are given to demonstrate how automated intelligent aggregation of purchases is performed and how it reduces cost in enterprise e- Procurement.

1. Introduction  Enterprise supply chain management is a complex process that involves consumers, intermediaries, and producers. E-commerce technologies have much improved efficiency and reduced cost in the supply chain. One particular aspect of supply chain management is procurement. E-procurements utilize business services connected by the Internet to buy and sell goods and services. Buyers, intermediaries, and sellers exchange electronic Purchase Orders (PO) in automated e- procurement systems. A PO is defined as an electronic representation of a purchase of goods or services at any stage of its lifecycle: initiation, proposal, refinement, commitment, submission, confirmation, processing, shipping, delivery, payment, and closure.

On the consumer side, a large enterprise buys goods and services on a daily basis and millions of POs are generated each year. The total cost of a PO comprises multiple elements including the price of the good or service, the shipping and handling of the purchase, and the overhead in initiating, generating, tracking, and managing the PO. To reduce the cost of doing business, it is imperative to reduce the total cost of POs in enterprise procurement in an automated fashion.

On the supplier side, producers of goods and services offer rules, agreements, and incentives for selling to consumers. Business rules may consider types of products, volume, and timing in pricing. Large enterprises of consumers and suppliers may also enter corporate agreements for procurement. Corporate agreements allow consumers to receive discounts and guarantees and allow producers to have a steady stream of purchases.

Intermediaries like transportation and warehousing add value to the supply chain and at the same, cost to consumers. The cost is part of the total cost of POs and is often calculated based on factors like weight, distance, number of orders, number of delivery trips, and urgency.

Proceedings of the 2005 Ninth IEEE International EDOC Enterprise Computing Conference (EDOC?05)    The question is then how to take advantage of the terms and incentives in the rules and agreements in the supply chain to reduce the cost of purchase orders. In this paper, we describe an Intelligent Aggregation facility for aggregating POs aimed at achieving business goals like cost reduction in enterprise e-procurement. This facility can be inserted in enterprise e-Procurement workflow as a value-added service and should work with existing corporate agreements and dynamic negotiation service in procurement. The purpose of PO aggregation is to reduce enterprise procurement cost by aggregating the commonality in demands from different organizations in an enterprise and demands over a period of time as well as demands from multiple enterprises in an e-market exchange.

The remainder of this paper is organized as follows. In Section 2, we briefly review related work in this area.

Section 3 provides an information model for POs. PO aggregations can be done in two contexts, corporate agreement or dynamic negotiation. Section 4 presents elements of corporate agreements and negotiations in enterprise procurement. An intelligent aggregation architecture is described in Section 5. We then use some concrete PO examples to show the benefits of intelligent aggregation in Section 6. We conclude the paper by outlining the main ideas of intelligent PO aggregation in enterprise e-Procurement.

2. Related Work  PO is a central piece of data in enterprise e- Procurement. Figure 1 shows a generic life cycle of a PO in a typical e-Procurement workflow. As shown in the picture, a PO goes from buyer?s enterprise procurement system (using enterprise specific process) to buyer?s enterprise gateway broker, then to supplier?s enterprise gateway broker, and finally to supplier?s enterprise systems. The gateway brokers on both buyer and supplier sides use the same standard-based process to ensure interoperability. Since the gateway broker implements standard processes, interactions between business partners are through standard interfaces regardless whether a common multi-party exchange environment is used.

Depending on procurement policies, certain types of purchases may or may not need to go through the Request for Quote (RFQ) steps before a PO is created.

The Electronic Business XML (ebXML) initiative [1] is intended to allow businesses to find each other using a registry, define trading partner agreements, and exchange XML messages in support of business operations. The ebXML standard comprises several families of specifications including business process modeling, a registry and discovery mechanism for recording business process and their exchanged messages, business and company profiles, and a uniform message transport layer  for establishing business collaborations and executing business transactions. While ebXML is essential in e- Procurement, our focus in this paper is on intelligent aggregation approach and architecture for POs as a value- added service in e-Procurement.

Research in the integration of Business Processes, Events, and Rules [2, 3, 4] introduced an event-trigger-rule mechanism embedded in processes and events to enforce business rules and policies in e-business workflow.

Work in [5, 6] developed formalism for expressing enterprise policies. Policies in corporate agreements in e- procurement are a specific type of enterprise policies.

Basic concepts and formalism in [5, 6] are applicable to expressing policies in corporate agreements. Work in [7, 8, 9] proposed frameworks and languages for expressing, monitoring, and assessing contracts in e-commerce. These work provided the conceptual framework and formalism for expressing policies in corporate agreements and contract negotiation and enforcement in e-Procurement.

3. An Information Model for PO  In order to automatically aggregate POs, information models must be formed to represent products and POs. In this paper we propose to use an Entity-Attribute-Relation model extended with constraints and business rules. This information model can be easily converted into XML schemas. In the following, we use an example to illustrate the model.

Computing equipment such as desktop computers (PC) is a common type of products an enterprise purchases. In this example, we assume that each desktop PC has a standard configuration. A product representation includes product attributes together with constraints in and between attributes. Some of the attributes have fixed values, while others are in a range or set of values.

Information model for Desktop-PC with constraints looks like this:  Product Desktop-PC Standard Configuration { // attributes and constraints on them Attribute Standard-For String Enumeration {?}; Attribute Effective-Period Range [from Date, to Date]; Attribute Buyer (Organization String, User String,  Location String); Attribute BIN Integer Enumeration {11381, 11382}; Attribute Supplier (Company String, Catalog URI  http://?/); Attribute Model String; Attribute CPU (Type String, Speed Real); Attribute Memory (Size Integer, Unit String ?MB?); Attribute HardDrive (Size Integer, Unit String ?GB?,  Type String ?ATA-100?);  Proceedings of the 2005 Ninth IEEE International EDOC Enterprise Computing Conference (EDOC?05)    Attribute Monitor (Size Integer Enum {17, 19, 21}, Manufacturer String Enum {Mitsubishi, Sylvania, Sony}) OPTIONAL;  Attribute CD-ROM (Speed Integer, Type String ?IDE?);  Inter-attributes constraints:  (1) Buyer.Location = ?PS? implies BIN = 11381; (2) Buyer.Location <> ?PS? implies BIN = 11382;  }  ProcessPO SendPO Customer  SendPO Supplier  Process SalesOrder  Buyer Supplier  ReceivePO Acknowledge  SendPO Acknowledge  SendPO Response  Close  SendPO  ReceivePO Response  SendPO Response  Acknowledge  ReceivePO  SendPO Response  ReceivePO Response  Acknowledge  ReceivePO  Check Customer  Check Credit  Check Availability  CreateSales Order  ReceivePO Acknowledge  SendPO Acknowledge  SendPO Response  Close  ReceivePO Request  Select Supplier  Generate RFQ  Send RFQ  Select RFQ Response  Send PO  Close  SendPO  ReceivePO Response  SendPO Response  Acknowledge  ReceivePO  SendPO Response  ReceivePO Response  Acknowledge  ReceivePO  Check Customer  Check Credit  Check Availability  Create Sales Order  Private process (Company-specific)  Publicprocess (Standard)  Publicprocess (Standard)  Privateprocess (Company-specific)  PO  CRM  SCM  ERP  Enterprise Gateway Broker  Enterprise Procurement  Figure 1: A Generic Purchase Order (PO) Interaction Flow in Enterprise e-Procurement  In this example, attributes have constraints. For example, the ?effective-period? is constrained in a range.

In addition, there are also constraints between attributes.

For example, the value of BIN attribute is determined by the buyer?s Location attribute. The BIN attribute in the example is a number that marks the differences in regional equipment management practices.

For intelligent aggregation purpose, we further extend the Desktop-PC entity-attribute information model with procurement related attributes and constraints as well as business rules.

Desktop-PC Purchase Order { // include the attributes and constraints in Desktop-PC  ? // Additional Attributes Attribute CorporateAgreement? Boolean {?yes?, ?no?}; Attribute CorporateAgreement-id URI;  Attribute Value float COMPUTED; Attribute Price float DERIVED; Attribute Shipping-Handling float COMPUTED; Attribute Order-Date Date; Attribute Required-Delivery-Date Date;  Additional Attribute Constraints: // Compute the shipping and handling cost: check UPS Shipping-Handling = query (UPS, desktop-pc-box);  Inter-Attribute Constraints: // Define corporate agreement if any Supplier.Company is Dell implies {  CorporateAgreement? = ?yes? and CorporateAgreement-Id = http://?./; }  Monitor isNotSelected implies { Value = query(Catalog, desktop-pc);  Proceedings of the 2005 Ninth IEEE International EDOC Enterprise Computing Conference (EDOC?05)    Discount_Rate = query(CorporateAgreement-Id, desktop-pc, ?STANDARD?);  Price = Value * (1-Discount_Rate); } Monitor isSelected implies { V1 = query(Catalog desktop-pc); Discount_Rate = query(CorporateAgreement-Id,  desktop-pc, ?STANDARD?); V2 = query(Catalog monitor); Markup_Rate = query(CorporateAgreement-Id,  desktop-pc, ?THIRD_PARTY?); Price = V1 * (1-Discount_Rate) + V2 *  (1+Markup_Rate); }  In this example, additional attributes are defined in the information model including corporate agreement that governs the purchase of this product. Constraints on attributes and business rules are included to guarantee the integrity of the purchase and the business process.

Checking business rules requires first checking attribute constraints like deriving purchase price, which requires representation and utilization of pricing policies and rules in corporate agreements.

Note that constraints and rules shown in examples above are inherently associated with products. Therefore, they are always part of any single purchase order.

Intelligent aggregation must first ensure that these constraints are satisfied and rules are checked before applying additional aggregation rules to aggregate multiple purchase orders.

4. Corporate Agreements and Negotiation Models  4.1. e-Procurement under Corporate Agreement  Corporate Agreement (CA) is a kind of buyer- supplier agreements between business partners. It is used to govern the business transactions between partners. It stipulates the contract and the course of actions between a supplier and a buyer regarding products or services. Goals, Roles, Policies, Rules, Products, Services, and Processes are the key concepts in CA. These concepts relate to each other and form a framework to define corporate agreements.

A business goal is a set of points that a business intends to reach. A goal is often expressed in a high level statement (e.g. stated in the RECITALS part of a corporate agreement). To make it a driving force in business activities such as negotiation and aggregation, a business goal must be parameterized in a goal space. For example, a goal to reduce cost can be parameterized in several dimensions (or indexes): availability, profitability, quality, maintainability, time-to-market, profitability, and desire- for-relationship, etc. A goal is a point in the goal space.

The goal point can be reached by following a set of policies and rules.

A role is an abstract representation of a set of behaviors. For example, buyer is a role, while Boeing can play as a buyer role. Supplier is another role, while Dell can play as a supplier role. A particular company can play both a buyer role and a supplier role. Roles can interact with each other. These actions are governed by a set of policies and rules. For example, a buyer can interact with one or more suppliers and this interaction is governed by rules and policies in buyer-supplier agreements.

A product is the object that one role (e.g., buyer) agrees to accept (e.g., purchase) from another role (e.g., supplier) subject to conditions and terms (e.g., rules).

Similarly, a service is the work that one role (e.g., supplier) performs for another role (e.g., buyer) to perform subject to conditions and terms.

A process is the sequence of activities that a role has to carry out to achieve an objective. Each activity can have triggers defined by events. For example, in the event of defective product, a product return process is triggered and a course of actions should be followed as defined by the return policy in the corporate agreement.

A policy (in this context) is a course of actions, which can be expressed in a set of rules in terms of obligations, permissions, and prohibitions. For example, as a part of packing and shipping policy, a supplier is obligated to pack the goods in a way that is safe for transportation and is prohibited from including hazardous material. As another example, as part of a pricing policy, supplier is obligated to apply discount rates automatically on categories of goods as agreed. Furthermore, the buyer is prohibited from revealing these discount rates to third parties. An obligation represents a course of actions that a role must perform, while a prohibition represents a course of actions that a role must not do. Rules may be embedded in policies. For example, a pricing rule may state that Buyer?s standard desktops are priced at 20% off Supplier?s retail. Some of these rules could be quite complex. For example, the pricing rule may depend on a number of factors such as volume, configuration, timing, and market conditions.

Policies tie together the concepts in a CA and representation of polices in XML-based formats enables parsing and querying specific conditions and rules in these policies. A policy engine that supports the parsing and querying can be used to support aggregation of POs.

4.2 e-Procurement under Negotiation Models  Alternative to established corporate agreements between a buyer and a supplier, buyer and supplier can negotiate the terms and conditions of a purchase based on a particular negotiation model. Such negotiation can be completely automated or semi-automated and it may take  Proceedings of the 2005 Ninth IEEE International EDOC Enterprise Computing Conference (EDOC?05)    from a few seconds to a few days to complete. There are three basic negotiation models: namely bidding, auction, and bargaining. The fundamental driver for negotiation in e-procurement is of course achieving business goals, which are parameterized along multiple indices (dimensions) such as quality, cost, profitability, reliability, and desire for business relationship. A negotiation is successful when an acceptable point is reached for the buyer in buyer?s goal space and the same is true on the supplier side. Other indices being equal, cost is often an important motivation for buyer to aggregate POs to gain purchasing power. This is because the cost of a PO often depends on the size, value, volume, timing, and repeated business of the purchase. Naturally, it also depends on supplier side current rules and policies.

For suppliers, sale rules and policies change from time to time in order to reflect it?s own production situation and market conditions. Simple examples of supplier rules include advertisements like ?Free UPS Ground Shipping on all Orders over $75?, ?Get 10% off on your next purchase?, ?Buy two books, get a third equal or less value free?, and so on. From these examples we can see that pricing policies depend on factors like purchase value, repeated business, and volume. These pricing policies are pretty static, as they do not have any adjustable variables.

For bargaining type of negotiations, the price of a purchase may be within a range, buyer gain some while supplier give some until they agree. Exactly where the final price ends in the range depends on the business goals of the two sides. Additional factors that will affect supplier?s profit like long-term relationship (repeated business) will also come into play.

Since the focus of this document is not automated negotiation, we will not further elaborate on this subject (negotiation). The description so far gives us sufficient information to develop an intelligent aggregation facility, which will give buyers an edge in terms of order value, volume, and repeated business as well as other factors during negotiation. It is clear that the intelligent aggregation facility will be able to help buyers to gain business advantage during negotiation, be it automated or human-driven.

5. Intelligent Aggregation Architecture in Enterprise e-Procurement  In previous sections, we described the information model for POs and making purchases under corporate agreement and negotiation. As POs are generated by buyer representatives in different organizations of an enterprise or from multiple enterprises in a consortium kind of arrangements, an aggregation facility can aggregate these POs wherever it is advantageous to do so. By doing  aggregation of POs instead of sending them as they were individually generated, buyers can potentially make the best from the terms and incentives in the supply chain to reduce purchase and overhead cost. Figure 2 shows the key technical elements in our aggregation facility.

We take a rule-based approach to aggregation in the intelligent aggregation facility. A rule-based approach enables business goals to be embedded in rules and extended when additional aggregation strategies are discovered. The aggregation rules are derived from two types of aggregation techniques: attribute-based aggregation and semantics-based aggregation, although they are not mutually exclusive and can be used together at different stages of aggregation.

Attribute-based aggregation combines data elements based on their common set of attributes (attribute values or attribute types (meta-values)). For example, purchase orders for desktops can be aggregated by their common supplier. Semantics-based aggregation combines data elements based on their semantic relations. For example, bill of material is an aggregation of logically related parts.

As another example, purchase orders for a desktop PC, monitor, printer, zip drive, and extra memory can be aggregated as a single purchase order based on a whole- part relationship (by doing so, you may get the printer and extra memory for free). Semantics-based aggregation, in the narrow sense, denotes only a few types of explicit relations among data elements, such as composition and inclusion. In a broader (semantically richer) sense, other types of explicit relations (such as derivation, entailment, attribute, and membership) also become significant. And the broadest (semantically richest) sense entails deduction and implicit relations, enabling precise meanings of any aggregation relations to be represented and utilized.

For aggregation under corporate agreement, the attributed-based aggregation is better suited because the terms and conditions are pretty much defined in the agreement. For aggregation under dynamic negotiation, the semantics-based aggregation is better suited because supplier sale policies change often and require dynamic semantic match making.

This aggregation facility can be inserted in the enterprise e-Procurement workflow as described in Figure 1. Figure 3 shows the insertion point of the facility in buyer side of the workflow. In the next section, we use some concrete examples to show how the rule-based aggregation approach is used to aggregate POs in reducing procurement cost. While reducing the number of POs by aggregating them automatically has value on its own (e.g., reduce overhead and transaction cost), we will focus more on how direct cost like price and shipping can be reduced.

Proceedings of the 2005 Ninth IEEE International EDOC Enterprise Computing Conference (EDOC?05)    H T M L/X M L G U IIntelligent A ggregation A rchitectu re ? Technical Com ponents  A ggregation Facility  Supplier profiles, B usiness Policies, R ules, & C atalog  PO  PO  N egotiation  A ggregated PO  .

C orporate A greem ent  Enterprise G atew ay B roker  H T M L/X M L G U I  X M L/O bject Parser  R ule-based system  Figure 2 Intelligent Aggregation Facility Technical Components  ProcessPO  Buyer  EnterpriseGateway Broker  ReceivePO Request  Select Supplier  Generate RFQ  Send RFQ  Select RFQ Response  Send PO  Close  PO  Intelligent Aggregation ? If no prior corporate  agreement exists for this type of PO, this picture shows a RFQ process based on the bargaining negotiation model.

? If a corporate agreement already exists, then the RFQ steps will not be necessary.

Figure 3: Insertion of Intelligent Aggregation in Enterprise e-Procurement as shown in Figure 1  Proceedings of the 2005 Ninth IEEE International EDOC Enterprise Computing Conference (EDOC?05)    6. Intelligent Aggregation of Purchase Orders in e-Procurement  In this section, we use concrete examples to show how the rule-based aggregation engine works with corporate agreement policy engine and negotiation service in the intelligent aggregation facility.

6.1 Aggregation POs under Corporate Agreements  In Section 3, we defined an information model for products in e-procurement. In particular, rules and constraints can be associated with attributes and between attributes of any product type. This is an important extension to current XML schemas for product representation because it enables dynamic information (rules and constraints) to go together with static information (product attributes). Again, we use plain entity-attribute representation instead of XML schemas for clarity, while the conversion between them can be easily achieved.

We again use computing equipment as the type of goods an enterprise wants to purchase. Also assume that a corporate agreement has been established between a buyer and a supplier. Assume that the agreement states that packaging cost is included in the purchase price, but shipping cost is extra. It defines a pricing policy, which consists of a set of rules for calculating price, depending on product categories: standard PC, non-standard PC, factory upgrade items, and third party products. A discount rate (for standard products) or a markup rate (for third party products) is defined for each category. Buyer?s total cost is the price adding the service and warranty cost and shipping cost as well as applicable taxes. While the pricing policy looks complicated, they can easily be represented as a set of rules.

6.1.1 Purchase Orders  Suppose we have the following purchase orders: Larry from organization A requests for a standard desktop PC, a 19? monitor, and additional 256MB of memory. Jon also from organization A requests for a standard desktop PC.

PO1 Attribute Buyer = (Organization: ?A?, User: ?Larry?,  Location: ?PS?); Attribute Supplier = (Company: ?Dell?, Catalog:  http://?/dell); Attribute Product = ?Optiplex GX150MT?; // a  standard configuration desktop PC Attribute Quantity 1;  Attribute BIN: 11381; // The required delivery date is a Range constraint:  any date within the next 30 days Attribute Required-Delivery-Date: [today, today+30  days]; Attribute S&H1 = query(UPS, Product); // a  COMPUTED value, say it?s $39.95 Attribute Value = query(Catalog, Product); // a  COMPUTED value Attribute Price1; Attribute Total1;  Inter-attribute constraints in PO1: // Pricing rule for standard configuration from  corporate agreement: discount_rate= x% Price1 = Value * (1-x%); Total1 = (Price1+S&H1)*1.088; //assume 8.8% tax  rate  PO2 Attribute Buyer (Organization: ?A?, User: ?Larry?,  Location: ?PS?); Attribute Supplier = (Company: ?Dell?, Catalog:  http://?/dell); Attribute Product = Monitor (Size: 19, Manufacturer:  Mitsubishi); Attribute Quantity 1; Attribute BIN: 11381; Attribute Required-Delivery-Date: [today, today+30  days]; // a Range constraint Attribute S&H2 = query(UPS, Product); // say it?s  $29.95; Attribute Value= query(Catalog, Product); // a  COMPUTED value Attribute Price2; Attribute Total2;  Inter-attribute Constraints in PO2: // PO2?s delivery date must be the same as PO1?s  delivery date (1) PO2.Required-Delivery-Date = PO1.Required-  Delivery-Date // Pricing rule for THIRD_PARTY component from  corporate agreement: markup_rate= y% (2) Price2 = Value * (1+y%); (3) Total2 = (Price2 + S&H2) * 1.088; // assume 8.8%  tax rate  PO3 Attribute Buyer (Organization: ?A?, User: ?Larry?,  Location: ?PS?); Attribute Supplier = (Company: ?Dell?, Catalog:  http://?/dell); Attribute Product = Memory (Size: 256, Unit: ?MB?); Attribute Quantity 1;  Proceedings of the 2005 Ninth IEEE International EDOC Enterprise Computing Conference (EDOC?05)    Attribute BIN: 11381; Attribute Required-Delivery-Date: [today, today+30  days]; // a Range constraint Attribute S&H3 = query(UPS, Product); // say it?s  $9.95; Attribute Value= query(Catalog, Product); // a  COMPUTED value Attribute Price3; Attribute Total3;  Inter-attribute Constraints in PO3: // PO3?s delivery date must be the same as PO1?s  delivery date (1) PO3.Required-Delivery-Date = PO1.Required-  Delivery-Date // Pricing rule for additional parts from corporate  agreement: discount_rate= z% (2) Price3 = Value * (1-z%); (3) Total3 = (Price3 + S&H3) * 1.088; // assume 8.8%  tax rate  PO4 Attribute Buyer = (Organization: ?A?, User: ?Jon?,  Location: ?PS?); Attribute Supplier = (Company: ?Dell?, Catalog:  http://?/dell); Attribute Product = ?Optiplex GX150MT?; // a  standard configuration desktop PC Attribute Quantity 1; Attribute BIN: 11381; Attribute Required-Delivery-Date: [today, today+45  days]; Attribute S&H4 = query(UPS, Product); // say it?s  $39.95; Attribute Value = query(Catalog, Product); // a  COMPUTED value Attribute Price4; Attribute Total4;  Inter-attribute constraints in PO4: // Pricing rule for standard configuration:  discount_rate= x% Price4 = query(Catalog, Product) * (1-x%); Total1 = (Price4 + S&H4) * 1.088; // assume 8.8% tax  rate  6.1.2 Attribute-based PO Aggregation  While an enterprise may generate millions of POs every year, the number of distinct products and services the enterprise purchases is actually much smaller, in the hundreds rather than in the millions. This means that many POs are purchases of the same product or service.

Attribute-based PO Aggregation technique combines POs based on their common attributes (values or types),  trying to achieve a business goal in doing so. Business goals are parameterized. Reducing cost is an important parameter for achieving business goals. The rule-based aggregation engine in the intelligent aggregation facility (Figure 2) attempts to combine the POs and see whether the combined PO can better achieve business goals, e.g., reducing cost. It queries the Corporate Agreement policy engine for discount rates of different product categories.

For example, by aggregating PO1, PO2, and PO3 based on their common User name ?Larry? would create the following PO.

PO123 Attribute Buyer = (Organization: ?A?, User: ?Larry?,  Location: ?PS?); Attribute Supplier = (Company: ?Dell?, Catalog:  http://?/dell); Attribute Product = (?Optiplex GX150MT?,  ?Monitor?, ?Memory?}; Attribute Quantity 1; Attribute BIN: 11381; // The required delivery date is a Range constraint:  any date within the next 30 days Attribute Required-Delivery-Date: [today, today+30  days]; Attribute S&H = query(UPS, Product); // say it is  $59.95 Attribute Value1 = query(Catalog, Produc.1t); Attribute Value2 = query(Catalog, Product.2); Attribute Value3 = query(Catalog, Product.3); Attribute Price; Attribute Total;  Inter-attribute constraints in PO123: Price = Value1 * (1-x%) + Value * (1+y%) + Value3  * (1-z%); Total = (Price + S&H) * 1.088; Total <= Total1 + Total2 + Total3. This constraint  implies that the total cost of this aggregate PO must not more than the sum of the costs of individual POs.

In this particular example, the obvious saving is the shipping cost: (39.95+29.95+9.95-59.95)*1.088 = 21.65.

Similarly, PO1, PO2, PO3, and PO4 could be aggregated by their common Organization name ?A?.

PO14 // aggregation of PO1 and PO4 Attribute Buyer = (Organization: ?A?, User: {?Larry?,  ?Jon?}, Location: ?PS?); Attribute Supplier = (Company: ?Dell?, Catalog:  http://?/dell); Attribute Product = ?Optiplex GX150MT?; Attribute Quantity 2; Attribute BIN: 11381;  Proceedings of the 2005 Ninth IEEE International EDOC Enterprise Computing Conference (EDOC?05)    // The required delivery date is a Range constraint: any date within the next 30 days  Attribute Required-Delivery-Date: [today, today+30 days];  Attribute S&H = query(UPS, Product); // say it is $59.95  Attribute Value = query(Catalog, Product); Attribute Price; Attribute Total;  Inter-attribute constraints in PO14: Price = Quantity * Value * (1-x%); Total = (Price + S&H) * 1.088; Total <= Total1 + Total4.

In this case, the Quantity attribute value has changed to 2 by adding both requests together. Furthermore, the Delivery-Date attribute value is a result of finding a common range of the two. The obvious saving in this case is (2*$39.95 - $59.95)*1.088 = $21.71.

Whether a bunch of POs should be aggregated in a particular way depend on whether costing savings can be achieved while satisfying all the constraints.

6.2 Intelligent Aggregation of Purchase Orders in e-Procurement with Negotiations  Aggregation under dynamic negotiation is harder because supplier side could be revising its own strategies and parameters on the fly. While human intervention in the aggregation process is possible, we focus on automated aspects of the aggregation in this paper. Suppose we have a simple supplier side rule: buy one and get second one half price from LT, a supplier of mice, keyboard, and trackball. Suppose we have requests to buy Mice as follows:  PO5 Attribute Buyer = (Organization: ?B?, User: ?Joe?,  Location: ?PS?); Attribute Supplier = (Company: ?LT?, Catalog:  http://?/LT); Attribute Product = ?Optical Mouse? Attribute Quantity 1; Attribute Required-Delivery-Date: [01/21/05,  02/21/05]; // a range of dates: [order date, deadline date]  Attribute S&H9 = query(UPS, Product); // say it?s $4.95;  Attribute Value = query(Catalog, Product); Attribute Price10 = Value; // say it?s $29.95 Attribute Total10;  Total10 = (Price10 + S&H10) * (1+ tax rate), results in a value: ($29.95 + $4.95)*1.088 = $39.97.

PO6 Attribute Buyer = (Organization: ?C?, User: ?Al?,  Location: ?PS?); Attribute Supplier = (Company: ?LT?, Catalog:  http://?/LT); Attribute Product = ?Optical Mouse? Attribute Quantity 1; Attribute Required-Delivery-Date: [01/25/05,  02/28/05]; // a range of dates: [order date, deadline date]  Attribute S&H10 = query(UPS, Product); // say it?s $4.95;  Attribute Value = query(Catalog, Product); // say it?s $29.95 per mouse  Attribute Price10 = Value; Attribute Total10;  Total10 = (Price10 + S&H10) * (1+ tax rate), results in a value: ($29.95 + $4.95)*1.088 = $39.97.

6.2.1 PO Aggregation Under Negotiation  The rule-based aggregation engine uses the Negotiation service to understand supplier?s offers and tries to take advantage of the terms in the offers. For example, by aggregating PO5 and PO6 can be aggregated as follows:  PO56 Attribute Buyer = (Organization: {B, C}, User:  {?Joe?, ?Al?}, Location: ?PS?); Attribute Supplier = (Company: ?LT?, Catalog:  http://?/LT); Attribute Product = ?Optical Mouse? Attribute Quantity 2; Attribute Required-Delivery-Date: [01/25/05,  02/21/01]; Attribute S&H10 = query(UPS, Product); // say it?s  $4.95; Attribute Value = query(Catalog, Product); // say it?s  $29.95 per mouse Attribute Price10 = 1.5 * Value; Attribute Total10;  Total10 = (Price10 + S&H10) + tax = (1.5* $29.95 + $4.95)*1.088 = $54.26. A saving of $39.97 * 2 - $54.26 = $25.68, or over 32% of savings.

Note the changes of the ?Quantity? and ?Required- Delivery-Date? attributes after aggregation. The quantities are added up and the required delivered dates are merged for a common range. Due to the constraints on object attributes, aggregation may require complex constraint solving.

Proceedings of the 2005 Ninth IEEE International EDOC Enterprise Computing Conference (EDOC?05)    7 Conclusions and Future Work This paper describes an Intelligent Aggregation  facility in enterprise e-Procurement process. This facility introduces an information model, a rule-based aggregation engine, corporate agreement policies, and negotiation in aggregating large volume of POs in enterprise e- procurement to reduce cost and maximize efficiency. This information model includes extensive use of constraints for and among attributes in a PO. These constraints guard the integrity of POs as they are aggregated. The intelligent aggregation facility can be inserted as a value-added service in the enterprise e-Procurement workflow.

An enterprise generates millions of POs every year, but the number of distinct products and services the enterprise purchases is actually much smaller, in the hundreds rather than in the millions. This presents cost saving opportunities by aggregating POs that makes best use of terms and conditions in corporate agreements or supplier offers. Some concrete examples are used to show the idea of automated aggregation and the opportunities in reducing procurement cost. As millions of POs are generated, even a small percentage of savings would mean substantial savings for large enterprises.

The ideas described in this paper have not been fully implemented in our prototype. One area needs more work is the formal representation of policies in corporate agreements, which would allow the aggregation engine to automatically explore aggregation opportunities before POs are made to suppliers. Another is the semantic model of products, which would enable more semantics-based aggregation of POs.

8 References  [1] ebXML, http://www.ebxml.org/ [2] Meng, J., Su, S.Y.W., Lam, H., and Helal, S.,  ?Achieving Dynamic Inter-Organizational Workflow Management by Integrating Business Processes, Events, and Rules,? Proceedings of the 35th Hawaii (HICSS35), Hawaii, USA, January 2002.

[3] Su, S. Y.W., Lam, H., Lee, M., Bai, S., and Shen, Z., "An Information Infrastructure and E-services for Supporting Internet-based Scalable E-business Enterprises," Proceedings of the 5th International Enterprise Distributed Object Computing Conference, Seattle, Washington, USA, September 2001.

[4] Su, S. Y.W., Huang, C., Hammer J., Huang, Y., Li, H., Wang, L., Liu Y., Pluempitiwiriyawej, C., Lee, M., and Lam, H., ?An Internet-based Negotiation Server for E-commerce,? VLDB Journal, Vol. 10, No. 1, 2001, pp.72-90.

[5] Morris Sloman, ?Policy Driven Management for Distributed Systems?, Journal of Network and  Systems Management, Plenum Press, Vol 2 No 4 1994.

[6] Maarten Steen, John Derrick, ?Formalising ODP Enterprise Policies?, Proceedings of the 3rd  International Enterprise Distributed Object Computing Conference, Mannheim, Germany, IEEE CS Press, September 1999.

[7] James Hanson, Zoran Milosevic, ?Conversation- Oriented Protocols for Contract negotiations?, Proceedings of the 7th International Enterprise Distributed Object Computing Conference, Brisbane, Australia, IEEE CS Press, September 2003.

[8] S. Neal, J. Cole, P.F. Linington, Z. Milosevic, S.

Gibson, S. Kulkarni, ?Identifying Requirements for Business Contract Language: a Monitoring Perspective?, Proceedings of the 7th International Enterprise Distributed Object Computing Conference, Brisbane, Australia, IEEE CS Press, September 2003.

[9] T. Dimitrakos, I. Djordjevic, Z. Milosevic, A. Josang, C. Phillips, ?Contract Performance Assessment for Secure and Dynamic Virtual Collaborations?, Proceedings of the 7th International Enterprise Distributed Object Computing Conference, Brisbane, Australia, IEEE CS Press, September 2003.

