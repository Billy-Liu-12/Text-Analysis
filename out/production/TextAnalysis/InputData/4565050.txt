??8 ??9

Abstract?The fuzzy association rule has been proven to be effective to present users? network behavior offline from a huge amount of collected packets. However, not only effectiveness, efficiency is important as well for Network Intrusion Detection Systems (NIDSs). None of those proposed NIDSs subject to fuzzy association rule can meet the real-time requirement because they all applied static mining approach. In the paper, we propose a real-time NIDS by incremental mining for fuzzy association rules.

By consistently comparing the two rule sets, one mined from online packets and the other mined from training attack-free packets, our system can make a decision per time unit, 2 seconds in the paper. Experiments have been done to demonstrate its excellent effectiveness and efficiency of the system.

Index Terms?Network Security, Real-Time NIDS, Anomaly-based NIDS, Association Rules, Fuzzy Association Rules, Online Mining, Incremental Mining

I. INTRODUCTION  The fuzzy association rule [1, 2, 3, 4] has been receiving a great attention recently and has been applied to many applications in different fields so far [4, 5, 6, 7, 8]. Several researchers adopted fuzzy association rule to design their anomaly-based Network Intrusion Detection Systems (NIDSs) [5, 9, 10, 11, 12]. However, they all emphasized the effectiveness (high detection rate, low false alarm rate, etc) of applying fuzzy association rules to design NIDSs, but ignored the time efficiency of their own mining algorithms. Basically, they adopted a static mining approach to mine out fuzzy association rules from a lot of data records about network traffic, for making a decision.

This work was supported in part by the National Science Council, Taiwan under Grants NSC 95-2221-E-130-003 and NSC 96-2221-E-130-009.

Ming-Yang Su is with the Department of Computer Science and Information Engineering, Ming Chuan University, Taoyuan Campus, Taiwan.

(Corresponding author, phone: +886-3-3507001; fax: +886-3-3593874; e-mail: minysu@mcu.edu.tw).

Kai-Chi Chang has received his B.S. degree from the Department of Information Management of Hsing Kuo University of Management, Taiwan in 2006. He is now pursuing his M.S degree at Ming Chuan University, Taiwan.

(e-mail: nesoking@gmail.com).

Hua-Fu Wei is with the Department of Computer Science and Information Engineering, Ming Chuan University, Taoyuan Campus, Taiwan. (e-mail: whf0070484@yahoo.com.tw).

Chun-Yuen Lin is with the Department of Computer Science and Information Engineering, Ming Chuan University, Taoyuan Campus, Taiwan.

(e-mail: o1o1o1o1o@xuite.net).

Incremental fuzzy-rule mining is much suitable to meet the real-time demand because it can produce the latest rule set while a new data record is gathered online. In [14], the authors have designed an on-line incremental mining algorithm for generating fuzzy association rules. In the paper, we present a real-time intrusion detection system based on the rules generated by the algorithm proposed in [14]. The rest of this paper is organized as follows. Some background knowledge is introduced in Section 2. The algorithm proposed in [14] is briefly introduced in Section 3. Our real-time NIDS is presented in Section 4. Some experimental results are given in Section 5. Finally, a conclusion is followed.



II. BACKGROUND An association rule has the form of If X, then Y , denoted as  X Y, where X and Y are sets of items (or called itemsets). The formal statement about association rules is given as: Let I = {i1, i2 , i3, , im} be a set of items. Let D be a set of transactions, where each transaction T is a set of items such that T  I. We say that a transaction T contains an itemset X if X T. An association rule is an implication of the form X Y, where X I, Y I, and X Y = . The rule X Y in the transaction set D has support s if s% of transactions in D contain X Y, and has confidence c if c% of transactions in D that contain X also contain Y. That is, let Sup (X) denote the occurrence frequency of the itemset X in D, s = Sup (X Y) and c = Sup (X Y) / Sup (X).

Agrawal and Srikant proposed the well known Apriori algorithm [13] in 1994, in which given two thresholds of mini_sup and mini_conf, the algorithm will find all such rules as X Y with s mini_sup and c mini_conf. For any itemset, say X, with Sup (X) greater than or equal to the mini_sup, is called frequent itemset. Let k-itemset denote an itemset having k items. Let Lk represent the set of frequent k-itemsets, and Ck the set of all possible (or candidate) k-itemsets. The first phase of Apriori algorithm is to generate all frequent itemsets described as follows:  Step 0. Scan the database D to find out L1.

Step 1. Ck, k > 1, is generated by joining the itemsets in Lk-1.

The itemsets in Ck which have some (k-1)-subset that is not in Lk-1 are deleted.

Step 2. The support of itemsets in Ck is calculated through  A Real-time Network Intrusion Detection System Based on Incremental Mining Approach  Ming-Yang Su, Kai-Chi Chang, Hua-Fu Wei, and Chun-Yuen Lin Abstract ?Cyberactivism refers to the use of the Internet to advocate vigorous or intentional actions to bring about social or political change. Cyberactivism analysis aims to improve the understanding of cyber activists and their online communities. In this paper, we present a case study of online Free Tibet activities.

For web site analysis, we use the inlink and outlink information of five selected seed URLs to construct the network of Free Tibet web sites. The network shows the close relationships between our five seed sites. Centrality measures reveal that tibet.org is probably an information hub site in the network. Further content analysis tells us that common hub site words are most popular in tibet.org whereas dalailama.com focuses mostly on religious words. For forum analysis, descriptive statistics such as the number of posts each month and the post distribution of forum users illustrate that the two large forums FreeTibetAndYou and RFAnews-Tibbs have experienced significant reduction in activities in recent years and that a small percentage of their users contribute the majority of posts. Important phrases of several long threads and active forum users are identified by using mutual information and TF-IDF scores. Such topical analyses help us understand the topics discussed in the forums and the ideas and interest of those forum users. Finally, social network analyses of the forum users are conducted to reflect their interactions and the social structure of their online communities.

Index Terms ? Cyberactivism, Forum Analysis, Free Tibet, Web Site Analysis

I. INTRODUCTION CTIVISM often refers to vigorous or intentional actions that aim to bring about social or political change [1]. The  rapid development of the Internet makes it an ideal source for information and propaganda dissemination [2] [3]. Cyber activists use web sites, forums, and other types of computer media to build relationships with the public, voice their opinions, and spread their propaganda [4] [5]. Consequently, Cyberactivism, which refers to activism on the Internet, has emerged as a new and important social phenomenon.

A comprehensive and systematic framework for analysis of Cyberactivism needs to be developed for researchers, analysts, and related government agents to get a better understanding of cyber activists and their online communities. For example, it has been observed that web sites of related activism groups are linked to each other through hyperlinks, creating their own community network [6]. A good research framework would include an effective method to identify such networks and the roles of the web sites in the networks. In forums, social networks of forum users, representative topics and phrases, and active users are useful information that can help understand member interactions.

This paper presents a case study of online Free Tibet  activities and is an initial attempt toward a framework to analyze Cyberactivism. Two popular Internet media, web sites and forums of Free Tibet activities, are identified, collected, and analyzed. We aim to shed light on the following research questions:  1. What automated methods can be used to analyze Cyberactivism?

2. What knowledge and insights can we gain through social network and topical analysis of Cyberactivism?



II. FREE TIBET Tibet generally refers to the Tibet Autonomous Region, a  province-level entity governed by the People's Republic of China (PRC). Religion is extremely important to the Tibetans and Tibet is the traditional center of Tibetan Buddhism.

Panchen Lamas and Dalai Lamas are two well-known spiritual leaders of Tibetans.

Tibet was first included into China?s territory in the 1300s.

At the beginning of the 20th century, Tibet and Mongolia signed a treaty proclaiming mutual recognition and their independence from the Republic of China.  When the China Civil War ended in 1949, Tibet became a part of the PRC. In 1959, PRC armies thwarted the Tibetan resistance movement and Tenzin Gyatso, the 14th Dalai Lama, fled to India.

The Central Tibetan Administration (CTA), also referred to as the Tibetan Government in Exile (TGE), is headed by the 14th Dalai Lama and claims to be the rightful and legitimate government of Tibet.  Free Tibet activities refer to activities that aim to support the independence of Tibet. Most Free Tibet activities are guided by the CTA.



III. RESEARCH DESIGN Free Tibet related web sites and forums are the focuses of  this case study. Such web sites and forums are created and maintained by activists, supporters, and sympathizers in a variety of languages, including English, Chinese, and Tibetan.

In this study, we propose different methodologies for analysis of each medium.

A. Web Site Analysis 1) Identifying and Collecting Important Web Sites  Since there are many Free Tibet web sites available, the first step is to identify which ones are important. Fig. 1 shows our identification process.

Analysis of Cyberactivism: A Case Study of Online Free Tibet Activities  Tianjun Fu and Hsinchun Chen, Artificial Intelligence Lab, University of Arizona  A  1ISI 2008, June 17-20, 2008, Taipei, Taiwan    ??0 ???  database scan to decide Lk.

Step 3. Go to Step 1 until Lk = .

The main concept behind the algorithm is that all subsets of a frequent itemset must be frequent.  After the first phase, Apriori algorithm s second phase is to compute supports of all nonempty susbsets of each frequent itemset, in order to derive qualified rules which confidences are greater than or equal to the mini_conf. Association rules mining has become a focal point of research and application in data mining since Apriori algorithm was proposed.

Since Apriori algorithm [13] was designed for mining in databases with binary features (item and feature being used interchangeably throughout the paper), fuzzy association rules mining [1, 2, 3] was one of those variations to deal with quantitative features. Let T = {t1, t2, , tn} be the database and each transaction ti represents the ith tuple in T. Moreover, we use I = {i1, i2, , im} to represent all features appeared in T.

Each quantitative feature ik, 1 k m, is associate with some fuzzy variables, say v1, v2, , vj. Every fuzzy variable is represented by a membership function. For easy representation in the following, we use Fik.vj to uniquely denote the jth membership function of feature ik.

In fuzzy association rule mining, a fuzzy itemset consists of two parts: items and fuzzy variables, denoted as <X, V>, where X = (x1, x2, , xi)  I is a collection of items (or features) and V = (v1, v2, , vi), is the collection of corresponding fuzzy variables to X in order. For instance, if X = (#packet, #SYN, #ACK, #connection) and V = (low, medium, low, high), the fuzzy itemset <X, V> represents {#packet is low, #SYN is medium, #ACK is low, #connection is high}. The support of <X, V> is computed as [3, 4]:  inrecordsofnumber ,satisfying votesofSum),Sup(  T VXVX (1)  , ])[(  T  xtFTt jisxXxi jjj  where ti[xj] denotes the value of feature xj of the ith record, and T  represents the total number of records.

Instead of If X, then Y  in association rule, a fuzzy association rule now has the form of If <X, V>, then <X , V > .

Here <X, V> and <X , V > are two itemsets, X I, X I, and X  X = . The first part <X, V> is called antecedent and the second part <X , V > is called consequent. Similarly support s and confidence c of the fuzzy association rule <X, V>  <X , V > are computed as  s = Sup (<Y, U>) and  c = Sup (<Y, U>) / Sup (<X, V>),  where <Y, U> being the concatenation itemset of <X, V> and <X , V >.



III. INCREMENTAL MINING ALGORITHM FOR FUZZY ASSOCIATION RULES  By the algorithm [14], current support value of every itemset is kept in the memory. As the next data record is gathered, the algorithm uses current support value to compute the latest support value, and replaces the current support value by the new one. Look at an example. Suppose the quantitative values of four features: #packet, #SYN, #ACK, and #connection, are measured for each time unit, and in sequence they are t1 = (70, 6, 5, 12), t2 = (59, 8, 4, 3), t3 = (90, 12, 6, 9), , ti = (200, 25, 12, 31), . For the itemset <X, V> = {#packet is low, #SYN is medium, #connection is low}, its support value s at t1, t2, t3, ?, ti, is computed individually as  s at t1 = (F#packet.low(70) F#SYN.medium(6) F#connection.low(12)) /1 tmp;  s at t2 = (tmp  1 + (F#packet.low(59) F#SYN.medium(8) F#connection.low(3))) / 2 tmp;  s at t3 = (tmp  2 + (F#packet.low(90) F#SYN.medium(12) F#connection.low(9))) / 3 tmp;  s at ti = (tmp  (i-1) + (F#packet.low(200) F#SYN.medium(25) F#connection.low(31))) / i tmp;  Figure 1 Time costs for static mining and incremental mining  Since contribution of previous records to the current support can be ephemerally saved to a temporary variable, the cost of mining time wouldn?t be prolonged as observed records    ??0 ???  increase. Time costs for static mining and incremental mining are illustrated in Figure 1, whereas both get the same rule set.

Su et al. [14] used an alphabet character to denote one feature s fuzzy variable. So if there are n features and each has m fuzzy variables, then n m consecutive characters are used.

For the example of n = 6 and m = 3, starting with character A the matrix is shown in Figure 2. For each character, it has three notations, i.e., ASCII value, position index, and fuzzy variable, and transformation among these notations is very simple.

low   medium  high 0       1        2  A B C  D E F  G H I  J K L  M N O  P Q R  Figure 2 Transformation among character ASCII, position index, and fuzzy variable  For such arrangement, each fuzzy itemset can be expressed by a string. For instance, string EJR  denotes the fuzzy itemset {f2 is medium, f4 is low, f6 is high}. Since each itemset has to associate with a variable to store its current support value, a node structure is defined as follows. In the algorithm, each fuzzy itemset is represented by a node.

struct itemset { float SupVal; char STRING[maxlen]; struct itemset *next;  };  Variable SupVal is used to store the current support value, and the maxlen is defined as the longest length of itemset. Su et al.?s algorithm [14] consists of threes procedures: Initialization, SupCal, and RuleGen. All nodes are constructed and linked by the Initialization. Support value of each node is updated by the SupCal; meanwhile for any node with support value greater than or equal to the mini_sup, the RuleGen is called to test all possible rules and print out those rules with confidences greater than or equal to the mini_conf. The Initialization is run only once at the beginning, while the procedures SupCal and RuleGen are run one time as one new record is being gathered.

The work of Initialization is used to create and keep all possible itemsets in the main memory. Again for Figure 2, all possible fuzzy itemsets are linked as shown in Figure 3. All details about the algorithm are referred to [14].

Figure 3 All possible fuzzy itemsets

IV. OUR REAL-TIME NIDS DESIGN Based on the incremental mining algorithm [14], our NIDS  architecture is illustrated in Figure 4. In the training stage, network traffic information with attack free was collected, one record for every two seconds, and stored in Computer C. For the on-line testing, Computer A collects network traffic information online, also one record for every two seconds, and consistently sends one record per 2 seconds to the Computer B.

Computer B applied the incremental mining algorithm to generate the newest fuzzy rule set. At the same time, Computer C performs incremental mining per 2 seconds on the attack-free data records, adding one record per 2 seconds. The two newest rule sets come from Computer C and B are sent to Computer D for comparison. If their similarity is below the threshold, an anomaly of network traffic is detected. In the paper, we define the similarity between two rule sets as follows.

Figure 4 The architecture of our NIDS  f1  0  f2  1  f3  2  f4  3  f5  4  f6  5  A B Q R  AD AE OQ OR  ADG ADH LOQ LOR  ... ...

length     maxlen    ??? ???  Let S1 and S2 be two rule sets, the similarity between them is computed as:  sim(S1, S2) =  S  SCORE S  SCORE ,  where S1 , S2  represent the number of rules in the corresponding set,   ),(1 2 Sr  SrscoreSCORE , and   ),(2 1 Sr  SrscoreSCORE .

Here for a single rule r with support s and confidence c, and a rule set S, we define score(r, S) as:  If there is a rule r? = r in S with support s? and confidence c?, then  score(r, S) ) ),max(  , ),max(  max(1 ss  ss cc  cc ,  else score(r, S)  -(c  s).

Finally, we let SCORE1 or SCORE2 to 0 if it is a negative value. Once an attack is detected, three actions may respond.

An alarm is first inserted to the database, Computer A is required to gather more detailed information about the attack, and finally the filtering rule in the firewall may be changed dynamically.

During the incremental mining, we emphasize that to the latest rule set the contribution of the latest data record should more than historical data records, in the NIDS design. Because we anticipate the similarity can quickly degrade to present DoS/DDoS attack as soon as possible, and quickly upgrade the similarity when the attack stops flooding. So in the system, for any itemset we compute its support by  Current support = support due to the latest record * 0.2 + support due to the historical records * 0.8.

That is, no matter how many records were past by, we let their contribution to the current support computation is four times than the latest single record. For example, suppose contiguous n records in time t1, t2, ..., tn-1, tn have their contribution for a specific itemset?s support being s1, s2, ?, sn-1, sn, respectively.

The current support of the itemset in time tn is computed as  Current support = 0.2 * sn + 0.8 * (0.2 * sn-1 + 0.8 * (0.2 * sn-2 + 0.8 *(?. + 0.2 * s3 + 0.8 * (0.2 * s2 + 0.8 * s1))?).



V. PERFORMANCE ANALYSIS The network topology for experiment is shown in Figure 5.

A commercial application named IP Traffic [15] was applied to produce background traffic, which can generate any amount of TCP/UDP/ICMP packets. Two hosts running IP Traffic played sender and receiver, respectively, and we deployed the receiver in the LAN and the sender transmitting packets through the Internet. Using IP Traffic, we can choose protocol and data source with mathematical laws (Pareto, Uniform, and Exponential), file or packet generator with configurable contents. Inter-packet delay and packet size can be selected.

Normally we kept the network traffic amount in the range of 10 to 80 Mbps. One laptop in the LAN launched DoS attacks against the victim. Our system was coded by Microsoft Visual C++, and run on a laptop with Windows XP.

Figure 5 The network topology for simulation  For all experiments in the section, we adopt 16 features, listed in Table 1 to collect network traffic information and generate one data record per two seconds. These features were reported as important ones for detecting DoS/DDoS attack in [16]. Only rules derived from large itemsets with length 2 were considered, thus we can only considered 200~300 rules out of several thousands rules.

Figure 6 shows that the similarity between the two rule sets, i.e., mined from online traffic and training attack free traffic respectively, is really with degradation while attack appears.

Four attacks belonging to different protocols were applied and their similarity degradations are illustrated in Figure 6. Look at Figure 6(a) for example. We launched the DoS.Win32.IIS attack at the fifth time unit. After 2 time units, the similarity was downed to 0 at the seventh time unit. Lasting for 10 time units (20 seconds) of flooding, we stopped the attack at the    ??? ???  15th time unit. The similarity was apparently to rise at the 20th time unit. Since historical data records were taken into consideration, the similarity can?t go back to normal level immediately. Figure 7 shows that our system didn?t generate false positive for FTP, HTTP, and SMTP downloads if we set the threshold to be 0.4.

Table 1 Feature List  No protocol feature 1 TCP S.IP+SYN count 2 TCP S.IP+URG_Flag+URG_data count 3 TCP S.IP+ACK_Flag+ACK count 4 ARP S.IP+ARP count 5 IP D.IP slots hit 6 IP Header length!=20 count 7 IP MF_Flag count  8 IP (Total length>1400 || <40) &&TTL == 64 count 9 IP checksum_error count  10 TCP ACK_Flag+ACK count 11 TCP checksum_error count 12 UDP Same_length_interval count 13 ICMP Type error count 14 ICMP checksum_error count 15 IGMP checksum_error count 16 IGMP Length>1000 count  (a) DoS.Win32.IIS/TCP protocol  (b) DoS.Win32.Angryping/ICMP protocol  (c) DoS.Win32.ChinBomb/ARP protocol  (d) DoS.Win32.DeepThroat/UDP protocol  Figure 6 Similarities degradation under attacks  Figure 7 No false positive occurred for FTP, HTTP, SMTP download

VI. CONCLUSION Several Researches [5, 9, 10, 11, 12] have shown that the  fuzzy association rule can be effectively applied to design their NIDSs. However, none of them can really achieve detection in real time because they all collected a lot of records of network traffic information first, and then analyzed these records later by static mining. Su et al., [14] first proposed incremental mining to deal with such drawback. Based on the algorithm in [14], we have designed a real-time intrusion detection system in the paper. Detailed description about similarity between two rule sets has been proposed. Besides, contribution of data records in the time serial has also been included to present their different influence on the rule generation. Finally, some experiments have been done to demonstrate our good performance for detecting DoS/DDoS attacks. The most contribution of the paper is to realize a real-time anomaly-based NIDS by incremental mining approach, which can make a    ??? ???  decision per two seconds.

