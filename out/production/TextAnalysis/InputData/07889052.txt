IEEE/ACM TRANSACTIONS ON NETWORKING 1

Abstract? This paper presents the first distributed algorithm to construct a spanner for arbitrary ad hoc networks under the physical signal-to-interference-and-noise-ratio (SINR) inter- ference model. Spanner construction is one of the most important techniques for topology control in wireless networks, which intends to find a sparse topology in which only a small number of links need to be maintained, without substantially degrading the path connecting any pair of the nodes in the network.

Due to the non-local property of interference, constructing a spanner is challenging under the SINR model, especially when a local distributed algorithm is desired. We meet this challenge by proposing an efficient randomized distributed algorithm that can construct a spanner in O(log n log ?) timeslots with a high probability, where n is the total number of nodes and ? describes the ratio of the maximum distance to the minimum distance between nodes. The constructed spanner concurrently satisfies two most desirable properties: constant stretch and linear sparseness. Our algorithm employs a novel maximal independent set (MIS) procedure as a subroutine, which is crucial in achieving the time efficiency of spanner construction. The MIS algorithm improves the best known result of O(log2 n) [33] to O(log n) and is of independent interest as the algorithm is applicable also to many other applications. We conduct simulations to verify the proposed spanner construction algorithm, and the results show that our algorithm also performs well in realistic environments.

Index Terms? Wireless ad hoc networks, distributed algorithms, SINR, topology control, spanner.

Manuscript received April 28, 2016; revised January 6, 2017; accepted February 18, 2017; approved by IEEE/ACM TRANSACTIONS ON NETWORKING Editor P.-J. Wan. This work was supported in part by the National Natural Science Foundation of China under Grant 61602195, Grant 61373027, Grant 61672321, Grant 61402461, Grant 61433019, and Grant U1435217, in part by the International Science and Technology Cooperation Program of China under Grant 2015DFE12860, in part by the National Key Research and Development (R&D) Plan under Grant 2016YFB0200502, and in part by the Fundamental Research Funds for HUST under Grant 0118210142, Grant 0180210115, and Grant JCYJ20140509174140680. (Corresponding author: Jiguo Yu.)  D. Yu is with the Services Computing Technology and System Laboratory, Big Data Technology and System Laboratory, Clusters and Grid Computing Laboratory, School of Computer Science and Technology, Huazhong University of Science and Technology, Wuhan 430074, China (e-mail: dxyu@hust.edu.cn).

L. Ning is with the Center for High Performance Computing, Shenzhen Institutes of Advanced Technology, CAS Shenzhen, Shenzhen 518172, China (e-mail: li.ning@siat.ac.cn).

Y. Zou and F. C. M. Lau are with the Department of Computer Science, The University of Hong Kong, Hong Kong (e-mail: yfzou@cs.hku.hk; fcmlau@cs.hku.hk).

J. Yu is with the School of Information Science and Engineering, Qufu Normal University, Rizhao 276826, China (e-mail: jiguoyu@sina.com).



X. Cheng is with the Department of Computer Science, The George Wash- ington University, Washington, DC 20052 USA (e-mail: cheng@gwu.edu).



I. INTRODUCTION  W IRELESS ad hoc networks are formed by autonomousdevices communicating with radios. They have attracted a great deal of attention due to their potential civilian and military applications. Typically, such networks are intended to be employed in situations where no com- munication infrastructure is present or where the reliance on previously available infrastructures is not desired or not possible. Due to physical constraints, the power supply of a wireless device generally relies on a weak battery or a small solar cell; but applications usually require it to operate for a considerable period of time without recharging or replacement.

Hence, reducing energy consumption is one of the most fundamental problems in the design of an ad hoc network.

A popular approach to meeting the challenge of designing an efficient ad hoc network is to find a sparse topology in which only a small number of links need to be maintained while the performance degradation of the paths that connect any pair of nodes is reasonably bounded.

A fundamental approach to designing such an efficient topology is to construct a spanner. A wireless network is commonly modeled as a graphG(V,E), in which V represents the set of wireless nodes and E is the set of communication links connecting the nodes in V . A spanner is a connected subgraph H over G by removing certain links from the initial graphG. Besides the basic connectivity requirement, a spanner needs to possess the following two crucial features which determine its efficiency.

? Distance stretch factor. The distance stretch factor t of a spanner H is defined as the smallest value such that the minimum distance path between any pair of nodes u, v in the spanner is at most t ? d(u, v), where d(u, v) is the Euclidean distance between u and v. The distance stretch factor has a strong effect on the quality of geographic routing protocols [16]. Such protocols typically use greedy forwarding decisions based on the geographic progress towards the destination, thus having a low distance stretch in the underlying topology graph is essential for efficient and successful geographic routing.

? Sparseness. A spanner should be a sparse graph, i.e., the total number of links in the spanner topology should be as small as possible relative to all the links in the network.

This enables most of the topology-related algorithms to run more efficiently in terms of time and power consumption. The sparseness of a spanner is also crucial  See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

2 IEEE/ACM TRANSACTIONS ON NETWORKING  for the scalability of a network. The best case is to maintain a spanner with only a set of links whose size is linear with respect to the total number of wireless nodes, known as linear sparseness.

However, the objectives of low stretch and sparseness con- tradict with each other in a certain sense: to abtain a low stretch, more edges are needed in the spanner to shorten the shortest paths between nodes. Therefore it is challenging to concurrently achieve both objectives.

Spanner construction has been intensively studied under various geometric settings [6], [23], including those pertaining to wireless networking. However, almost all previously pro- posed approaches for wireless networks are mainly suitable for graph-based communication models, and handling of interfer- ence is largely ignored. But indeed, interference is an unavoid- able issue in wireless networks due to the shared feature of the spectrum, and the complexity of spanner construction will inevitably and heavily rely on the adopted interference model.

In principle, the interference model adopted for an algorithm design should reflect the real wireless interference such that the devised algorithm can perform well in practice. With this consideration, we employ the Signal-to-Interference-and- Noise-Ratio (SINR) model in this study, which can capture the physical nature of wireless communications more accurately than those conventional protocol interference models. Those conventional models simplify the effect of interference to be local (i.e., within a node?s direct neighborhood) and binary (i.e., there is either interference or no interference) in order to ease the algorithm design. The SINR model has been widely adopted recently due to its closer reflection of the reality, despite the fact that it would greatly increase the difficulty of devising algorithms because interference in SINR has a global influence.

We focus on distributed solutions for spanner construc- tion. A local distributed algorithm is always desirable in a wireless ad hoc network, as it allows each node to perform its operations independently and simultaneously. But on the other hand, computing a spanner in a localized manner under SINR is non-trivial because each wireless node can only communicate directly with the nodes within its communication range whereas SINR exhibits a non-local behaviour of the interference. To our knowledge, there is only one result [35] on distributed spanner construction under the SINR model, which however considered only networks of constant density.

There are no results known for arbitrary network topologies.

We summarize the main contributions of this paper as follows. All results are guaranteed with a high probability, i.e., with probability at least 1?n?c for some constant c > 0, where n is the total number of nodes in the network.

? We propose a randomized distributed algorithm for span- ner construction. The running time of the algorithm is O(log n log ?), where ? describes the ratio of the maximum distance to the minimum distance between nodes. In most feasible deployments, ? is just a constant or upper bounded by a polynomial in n, yielding a time complexity of O(log2 n).

? Specifically, our algorithm can construct a spanner with stretch 1 + ? for any given constant ? > 0 while  attaining linear sparseness. Furthermore, we also show that the maximum degree of the nodes in the constructed spanner is upper bounded by O(log ?). Hence, in most feasible deployments, each node only needs to maintain and interact with a small number of neighbors (constant or O(log n)). This is attractive since a wireless node has limited computational resources, storage, and, more importantly, battery power. Low degree is also crucial for balancing the load of the nodes when performing certain applications such as data aggregation or information broadcast, such that the lifetime of the network can be extended.

? We also propose a Maximal Independent Set (MIS) procedure as a subroutine for our spanner construction algorithm. This MIS algorithm can compute an MIS in O(log n) timeslots if the density of the nodes?that is, the maximum number of nodes within the transmission range of a node?is a constant. This improves the best known O(log2 n) result in existing literature [33]. Our MIS algorithm is crucial for the time efficiency of the proposed spanner construction algorithm, and it should be of independent interest as there are other applications that could also make use of it.

? We conduct extensive simulations to evaluate our algorithms, and the simulation results corroborate our theoretical analysis.

The rest of the paper is organized as follows. We give an overview of related work in Section II. The network model is presented in Section III. We propose our MIS algorithm and the spanner construction algorithm in Section IV and Section V, respectively. Section VI reports and discusses our simulation results. The paper is concluded with some discussion about future work in Section VII.



II. RELATED WORK  The concept of spanner was first studied by Chew in computational geometry in 1986 [11]. Chew [11] claimed that for a complete Euclidean graph, there is a triangulation of the point set such that a path along the edges of the triangulation with a length at most  ? 10 of the Euclidean distance between  any two points exists. Peleg and Ullman introduced the formal definition of spanner for an arbitrary graph in both geometric and non-geometric settings [25]. Following that, the problem of constructing spanners was extensively studied in computa- tional geometry, and the basic construction methods for sparse spanners [23] include the greedy methods, the Well-Separated Pair Decomposition method, Delaunay triangulation, ?-graphs, and Yao Graphs (YGs).

Li et al. [21] addressed the spanner property in wireless net- works. The authors modeled the network as a unit disk graph (UDG) and analyzed the energy stretch factor of several com- mon subgraphs of a UDG: n?1 for the relative neighborhood graph (RNG), 1 for the Gabriel graph (GG), and O(1) for YG.

They also proposed a local construction of a sparse spanner with a constant degree and a constant energy stretch factor.

In Gao et al. [15], a restricted Delaunay graph (RDG) with a constant stretch factor was proposed for geographic routing    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

YU et al.: DISTRIBUTED SPANNER CONSTRUCTION WITH PHYSICAL INTERFERENCE 3  protocols. Wang and Li [30] considered a localized Delaunay graph (LDel), in which the worst-case stretch is a constant.

These proximity graph structures (RNG, GG, YG, RDG, LDel) have been widely used; in these models, each node only needs to consider its neighborhood. Chen et al. [9] presented the construction of spanners for quasi-unit disk graphs. Peleg and Roditty [24] studied the spanner construction for disk graphs.

Jenkins et al. [19] presented a local distributed algorithm for spanners in unit ball graphs and quasi-unit ball graphs.

Rickenbach et al. [28] presented the LISE (low interference spanner establisher) algorithm to establish a topology that is a distance-spanner, where the interference definition is based on the question of how many nodes are affected by the communications over a certain link. The stretch factor of the spanners constructed using YGs has also been extensively studied [1]?[3], [5], [31]. Note that since the above spanner algorithms for wireless networks are all investigated under the graph-based communication models, they cannot effectively deal with interference [20] under the physical interference model.

One can see that the study of spanner construction under geometric settings can greatly facilitate the investigation under the ad hoc setting. As a result, wireless network requirements, which typically need to efficiently satisfy various topological characteristics, promote the development of geometric spanner constructions. Recent results on sparse geometric spanners focus on satisfying one or multiple topological properties such as lightness [13], small maximum degree [4], fault-tolerance [12], [27], and multiple other characteristics [7], [8], [14].

For the SINR model, the only known distributed spanner construction algorithm was given in [35], which is based on Yao-graph. In particular, the algorithm divides the surrounding area of each node into c sectors of equal angles and adds edges to the nearest neighbor within each sector. It was shown that the algorithm can construct a spanner with constant stretch factor in 11?sin(?/c) in O(log n) rounds. However, the algorithm only works in networks of constant density, i.e., the degree of every node is bounded by a constant. Furthermore, the algorithm implicitly relies on the assumption that for each node, there is at least one neighbor in every split sector. The empirical comparisons of the algorithm given in [35] and ours are presented in Section VI. There are also some other works considering topology control for link scheduling problems, such as [22], [26], and [34]. But all these results are centralized and not directly about spanner construction. For this line of work, please refer to the good survey [18].



III. MODEL AND PRELIMINARIES  We consider a network with a set V of n nodes deployed arbitrarily in a 2-dimensional geographic plane. The (Euclid- ean) distance between two nodes u and v is denoted by d(u, v) (or simply duv). Assume that all nodes are time- synchronized, and that the system time is divided into slots.

Within each slot, a node v can decide to transmit or listen with some probability; if transmitting, v can select a real- valued transmission power Pv . For simplicity, we normalize the minimum distance between two nodes to be 1. Denote  by ? the maximum distance between any two nodes in the network. Each node knows nothing about the network except the total number of nodes n and the maximum distance ?.

SINR (Signal-to-Interference-and-Noise-Ratio) Model: We adopt the SINR model, in which a receiver v successfully receives a message from a transmitter u if and only if the following condition holds.

SINRu,v = Pu d?uv?  w?S\{u} Pw d?wv  +N ? ?, (1)  where SINRu,v is the SINR value experienced by v for u?s transmission, ? ? (2, 6] is the path-loss exponent, ? ? 1 is a hardware determined threshold, N is the ambient noise, and S ? V denotes the set of nodes simultaneously transmitting with u.

Transmission Range The transmission range Rv of a node v with a transmission power Pv is defined as the maximum range within which another node u can successfully receive the message of v, if no other transmissions exist. Based on the SINR condition, Rv = (Pv/N?)1/?.

Geometric Spanner: Let G? = (V,E?) be a subgraph of the complete graph Kn, which is obtained by connecting all pairs of nodes in V . The length of an edge is defined as the distance of its two endpoints. For a path P in G?, the length of P is the sum of the lengths of the edges in P . The distance of two nodes u, v in G? is the length of the shortest path from u to v in G?, denoted as dG?(uv).

Let t ? 1 be a real number. A spanning subgraphH(V,EH) is said to be a t-geometric spanner of V , if for any two nodes u and v in V , their distance in H is at most t times of the distance of u and v, i.e.,  dH(u, v) ? t ? d(u, v). (2)  The constant t is called the stretch factor of H . The degree of v in the spanner H , denoted as d(v), is defined as the number of nodes connected with v in H .

Distance Measurement: We assume that a node can detect its distance to the sender when successfully receiving a mes- sage. This primitive can be implemented using the coordinate information carried by the message, which can be provided by GPS or other positioning systems [10].

Maximal Independent Set (MIS): A set S ? V is an independent set of V with respect to a distance r if for any pair of nodes u and v in S, d(u, v) > r; and S is said to be a maximal independent set if for any node w /? S, there is a node x ? S such that d(w, x) ? r.

Notations: Let Nr(v) be the set of nodes within distance r from v. Denote by Erv the disk centered at v with radius r.

Note that Nr(v) does not include v.

Preliminaries: Our algorithm is a randomized one, which means that in  each timeslot, a node may decide whether or not to transmit with a probability. In the following, we first present a useful fact used in our performance analysis.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

4 IEEE/ACM TRANSACTIONS ON NETWORKING  Fact 1 ([32]): For a set of probabilities p1, ? ? ? , pn, if pi ? [0, 1/2] with i ? [1, n], the following inequality holds,  (  )?n i=1 pi  ? n?  i=1  (1 ? pi) ? (  e  )?n i=1 pi  We next present a lemma (Lemma 2) that gives a sufficient condition for a successful local broadcast of a message under the SINR model. This lemma serves as the basis of the analysis on successful transmissions in our algorithms proposed later.

Let p(v) denote the transmission probability of v and set P (v) =  ? u?NRv (v) p(u). Recall that Rv is the transmission  range of v. Thus, P (v) denotes the sum of the transmission probabilities of all nodes in v?s transmission range.

Lemma 2: Given a network within which each node has the same transmission rangeR. If for each node v, P (v) ? p? holds for a sufficiently small constant p?, then, with some constant probability ?, a node u can send a message to all its neighbors within distance (1??)R, where ? can be any constant in (0, 1).

Proof: For any neighbor w of u, we first show that w can receive the transmission of u with a constant probability.

To prove this, we need to consider the interference experienced by w. Denote by Iw the interference at w caused by the nodes outside ERw . We claim that E[Iw] ? ((1 ? ?)?? ? 1)N/2.

Divide the whole monitored area into rings {Cj} for j ? 1, where Cj is the ring with distance in the range [jR, (j+1)R) from w. Consider a maximal independent set S with respect to R. Denote by sj the number of nodes in S that are located in the ring Cj . Noting that the disks of radius R/2 centered at the nodes in S are disjoint, we have  sj ? ?[(j + 1)R+R/2] 2 ? ?[jR ?R/2]2  ?(R/2)2 ? 24j. (3)  By the maximality of S, the disks centered at the nodes in S with radius R can cover all the nodes. Denote by Sj the set of nodes in S that are located in the ring Cj . Let Yx be the random variable with value 1 if a node x transmits and 0 otherwise. Denote by Ixw the interference at w caused by the transmission of node x. Then,  E[Iw ] = ??  j=1  ?  y?Sj  ?  x?NR(y)?x?Cj E[Ixw]  = ??  j=1  ?  y?Sj  ?  x?NR(y)?x?Cj E[Ixw|Yx = 1] ? Pr(Yx = 1)  = ??  j=1  ?  y?Sj  ?  x?NR(y)?x?Cj  Px d?xw  ? p(x)  ? ??  j=1  N?R?  (jR)? ? 24j ? p?  = 24p?N? ??  j=1  j??1  ? 24p?N? ? ?? 1 ?? 2  ? ((1 ? ?)?? ? 1)N/2,  where the last inequality holds by setting p? ? ((1??)???1)(??2)  48?(??1) .

Now we can bound the probability at which u can  successfully send a message to all its neighbors within distance (1??)R. Based on the above analysis and the Markov inequal- ity, with probability at least 1/2, the maximum interference at any node w ? E(1??)Ru is at most ((1 ? ?)?? ? 1)N if u is the only transmitting node in E2Ru . Then in this case, for any node w ? E(1??)Ru , we have  SINRu,w ? Pu  ((1??)R)? N + ((1 ? ?)?? ? 1)N  = N?R?  ((1??)R)? N + ((1 ? ?)?? ? 1)N  = ?. (4)  Thus w can successfully receive the message of u. Next, we bound the probability at which u is the only transmitting node in E2Ru .

We first bound the sum of the transmission probabilities of the nodes in E2Ru . For this purpose we derive the upper bound of the number of disks of radii R to cover E2Ru . Let S  ? be a maximal independent set with respect to R in E2Ru . Clearly, the disks with radii R centered at the nodes in S? can cover all the nodes in E2Ru based on the maximality of the independent set. We know that the disks of radii R/2 centered at the nodes in S? are disjoint and all these disks are located in E5R/2u .

Then, we can bound |S?| using a similar area argument as that in Inequality (3) and get that |S?| ? 25. Therefore, the sum of the transmission probabilities of the nodes in E2Ru is upper bounded by 25p?.

Note that the probability that u is the only transmitting node in E2Ru is  ? x?E2Ru (1?p(x)) ? (1/4)  ? x?E2Ru  p(x) ? (1/4)25p? by Fact 1. Therefore we conclude that with probability at least 2 ? (1/4)25p?, u is the only transmitting node in E2Ru , and the maximum interference at any node w ? E(1??)Ru is at most ((1 ? ?)?? ? 1)N . Based on Inequality (4), any node w ? E  (1??)R u can successfully receive the message of u. By setting  ? = 12 ? (1/4)25p?, the Lemma then follows. ?

IV. MAXIMAL INDEPENDENT SET ALGORITHM  In this section, we present a maximal independent set algorithm that will be used as a subroutine in our spanner construction algorithm.

A. Algorithm  The pseudocode of the maximal independent set algorithm is given in Algorithm 1. This algorithm intends to compute a maximal independent set with respect to a given distance r.

The transmission power of the nodes are set to P = 2N?r?  such that the transmission range 21/?r is a bit larger than r.

It works in the following setting: for each node v, |Nr(v)| ? ?, where ? is a known positive integer. Note that in this algorithm, the greek letters ? and ? are constants that will be determined later.

During the algorithm?s execution, nodes may stay in one of the following three states:    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

YU et al.: DISTRIBUTED SPANNER CONSTRUCTION WITH PHYSICAL INTERFERENCE 5  ? State C, in which a node is competing to join the MIS; ? State M, in which a node has joined the MIS; ? State D, in which a node has stopped its competition to  join the MIS and stays outside of the MIS.

Initially, all nodes are in state C. If a node is able to join the MIS (Line 10), it goes to state M; if it receives a controlling message Mm from a neighbor in state M (Line 13), it stops the competition and goes to state D. We next detail the operations of the nodes at each state.

Consider any node v. If v is in state C, it maintains a counter countv, a threshold based on which to determine when v should join the state M. The counter countv is updated at the beginning of each timeslot. Within each timeslot, v transmits a message Mcv with a specified constant probability pc. The message Mcv contains v?s ID and countv. If v receives a message Mcu from a neighbor u with |countu ? countv| ? ? logn, it updates its counter countv to ?(Qv), where ?(Qv) is defined as the maximum integer satisfying the following two conditions: i) ?(Qv) ? 0, and ii) ?(Qv) does not fall into the forbidden intervals defined by the countw with w ? Qv; here a forbidden interval with respect to an integer i is defined to be [i ? ? logn, i + ? logn]. If v receives a message Mmu from a neighbor u in Nr(v), which means that u has joined the MIS, it moves to the state D and stops competing from then on. When countv exceeds the threshold ? logn, v joins the MIS and enters the state M. Then v stays in the state M for ? logn timeslots, and transmits a controlling message Mmv with probability pm at each timeslot such that its neighbors in Nr(v) can stop their competitions after hearing the message.

B. Analysis  In this subsection, we show that Algorithm 1 can compute a maximal independent set with respect to r in O(log n) timeslots with a high probability.

The key point in proving the time complexity of the algorithm comes from the following observation: once a node v in state C successfully sends a message to all neighbors within distance r in a certain timeslot t, countv will not be changed by these neighbors thereafter, as v?s message has made the values of all its neighbors? counters outside of the forbidden interval defined by countv. By lower bounding each node?s counter in any timeslot, one can see that at timeslot t+O(logn), v either goes to state M or receives a controlling message from a neighbor in state M within distance r (i.e., v goes to state D). Hence, v can determine its final state and stop executing the algorithm at timeslot t+O(log n). On the other hand, by showing that the condition in Lemma 2 is satisfied for each timeslot in Algorithm 1, we use Lemma 4 to prove that at each timeslot, a node in state C can successfully send a message to all its neighbors within distance r with a constant probability. Accordingly, we prove that with probability at least 1 ? O(n?2), a node can successfully send a message to all its neighbors in r within O(log n) timeslots. Therefore we conclude that a node v takes O(log n) timeslots before it successfully sends a message to all neighbors within distance r and then takes O(log n) timeslots before determining its final state. Hence, the total time a node takes in executing  Algorithm 1 MIS: a Node v in States C,M,D  1 Initialization: statev = C; pc = pm = 1?? ; countv = 0; and Qv = ?;  At each timeslot after entering state C: 2 countv = countv + 1; 3 transmits a message Mcv with probability pc; 4 if receives a message Mcu then 5 if d(u, v) ? r then 6 Qv = Qv ? {u}; 7 if |countu ? countv| ? ? logn then 8 countv = ?(Qv) where ?(Qv) is the maximum  integer such that ?(Qv) ? 0 and ?(Qv) /? [countw ? ? logn, countw + ? logn] for each w ? Qv;  9 if countv ? ? logn then 10 statev = M;  11 if receives a message Mmu then 12 if d(u, v) ? r then 13 statev = D;  upon entering state M: 14 for ? logn timeslots do 15 transmits a message Mmv with probability pm at each  timeslot;  upon entering state D: 16 keeps silent;  Algorithm 1 is O(log n). We next give the formal proofs of the corresponding lemmas and theorem.

We first show that the condition in Lemma 2 is fulfilled during the algorithm execution, such that one can use Lemma 2 to determine the probability of a successful transmission by a node in state C at a timeslot. Let Pr(v) denote the sum of the transmission probabilities of all the nodes in Erv in a timeslot.

Notice that we only need to show that Pr(v) is bounded by a constant during the algorithm execution for each node v, as a disk of radius 21/?r (the transmission range of nodes) can be covered by a constant number of disks of radii r.

Lemma 3: Pr(v) ? 1? .

Proof: The Lemma can be proved by directly summing  up the transmission probabilities of all the nodes in Erv in a timeslot, i.e., Pr(v) ? ? ? 1?? = 1? . ?  For any node v, we say that v succeeds if it successfully sends a message to all its neighbors within r in a timeslot. With Lemma 3, by setting ? to be a sufficiently large constant, one can use Lemma 2 to determine the probability at which a node succeeds within a timeslot. For this purpose, we set ? ? 1p? in this study, where p? ? ((1??)???1)(??2)48?(??1) is a constant as discussed in Section III.

Lemma 4: In a timeslot t, a node v in state C can succeed with constant probability ? = ?/??.

Proof: Based on Lemma 2 and Lemma 3, if v transmits, it succeeds with constant probability ? as ? is a sufficiently    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

6 IEEE/ACM TRANSACTIONS ON NETWORKING  large constant. Then, the probability that v succeeds is at least pc ? ? = ?/?? ? ?(1) in a timeslot t. Therefore the lemma holds when setting ? = ?/??. ?  We next lower bound the value of the counter for each node in state C, which will be used to determine the time a node stays in state C.

Lemma 5: For each node v in state C, countv ? ?2?? logn? 1 during the algorithm execution.

Proof: According to the update principle of countv, one can see that countv takes the maximum integer that does not fall into the forbidden interval [countw ? ? logn, countw + ? logn] of each w ? Qv. Notice that Qv only contains the nodes that are within distance r from v. Hence, |Qv| ? ?.

Therefore, the union of the forbidden intervals defined by the counters of the nodes in Qv has a length at most 2?? logn.

Then based on the Pigeon Hole principle, it is easy to derive that at any timeslot, there must be an integer i ??2?? logn? 1 such that i does not fall into the corresponding forbidden intervals. This means that ?(Qv) ? i ? ?2?? logn?1 always holds. ?  We next bound the time a node takes to join state M from the time when it successfully sends a message to all its neighbors within distance r in a timeslot.

Lemma 6: If a node v in state C succeeds in timeslot t, it will go to state M if it does not receive a controlling message Mmu from any neighbor u ? Nr(v) within the next O(log n) timeslots.

Proof: From Algorithm 1, one can see that if node v succeeds in timeslot t, each node w ? Nr(v) will update its countw such that countw is outside of the range [countv ? ? logn, countv + ? logn]. Hence after t, countv will not be affected by the counters of v?s neighbors and its value will be increased by 1 at each timeslot. According to Lemma 5, countv ? ?2?? logn ? 1. Therefore if v does not receive a controlling message Mmu from any neighbor u ? Nr(v), countv should exceed the threshold ? logn after at most (2? + 1)? logn + 1 timeslots, at which time it will join the MIS. ?  Equipped with Lemma 6, we can now bound the time a node takes in state C.

Lemma 7: For each node v, with a high probability, it will join state M or state D in O(log n) timeslots.

Proof: We first show that if v does not receive a con- trolling message Mmu from any neighbor u ? Nr(v), it can finally move to the state M in O(log n) timeslots with a high probability. We divide this process into two stages. The first stage starts from the beginning and ends at the time when v succeeds and the second stage is thereafter till v goes to state M. The length of the second stage is O(log n) as proved by Lemma 6. Thus we only need to bound the length of the first stage.

By Lemma 4, v can succeed in a timeslot with constant probability ?. Then, after ? logn timeslots, the probability that v does not succeed is reduced to (1 ? ?)? logn ? e??? logn ? n?2 if ? ? 2/?, where the first inequality holds according to Fact 1. Thus with probability at least 1 ? n?2, the first stage takes at most ? logn timeslots for v.

Therefore, with probability at least 1?n?2, v can move to state M after O(log n) timeslots unless it receives a controlling message Mmu from a neighbor u ? Nr(v), at which time it will join the state D. Thus we conclude that the lemma holds for all n nodes with probability at least 1 ? n?1. ?  Theorem 8: Algorithm 1 can compute an MIS with respect to r in O(log n) timeslots with a high probability.

Proof: According to Lemma 7, each node can make a decision of joining the MIS or not in O(log n) timeslots with a high probability. Thus to prove the theorem, we only need to show the correctness of the computed MIS, i.e., the MIS does not contain two nodes within distance r.

We prove the claim by contradiction. Assume that two neighboring nodes u and v with d(u, v) ? r both appear in the MIS. There are two cases we should consider: u and v join the MIS at the same timeslot or at different timeslot.

Case 1: u and v join the MIS at the same timeslot t. Based on the analysis in the proof of Lemma 6, this scenario only occurs if u and v do not exchange their counters. According to Algorithm 1, u and v should stay in state C for at least ? logn timeslots. As shown in the proof of Lemma 7, u and v exchange their counters at least once with a high probability before they join the MIS. Without loss of generality, assume that it is u who sends its counter to v. Then v should update its counter to ?(Qv), which is outside of the forbidden interval defined by countu. Clearly, u does not receive a controlling message from a node in M. Hence, u increases its counter after each timeslot. This implies that countv is always outside of the forbidden interval defined by countu. Thus, u and v can not join the MIS at the same timeslot, which contradicts our assumption.

Case 2: u and v join the MIS at different timeslots. Without loss of generality, we assume that u joins the MIS before v. As mentioned above, when both are in state C, u and v exchange their counters at least once. Therefore, countv < countu ? ? logn when u joins the MIS. According to the proof of Lemma 7, during the ? logn timeslots when u stays in state M, u can successfully transmit a controlling message to all its neighbors with a high probability. Thus, v should receive this controlling message before its counter exceeds ? logn with a high probability. Therefore v can not join the MIS, which contradicts our assumption. ?

V. SPANNER CONSTRUCTION  In this section, we present our spanner construction algorithm. The algorithm consists of two procedures: tree construction and cross edge insertion. In the tree construc- tion procedure, a tree with log ? + 1 levels is constructed hierarchically. As this tree cannot guarantee the property of a constant stretch, in the follow-up cross edge insertion procedure, we add edges between neighboring nodes at the same level to shorten their distances. With these two steps, a spanner with a constant stretch of 1 + ? for a given constant ? is constructed. As shown later, the constructed spanner also satisfies the sparseness requirement: the number of edges is bounded by O(n). Additionally, the degrees of the nodes in the spanner are not high: the maximum degree is only O(log ?).

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

YU et al.: DISTRIBUTED SPANNER CONSTRUCTION WITH PHYSICAL INTERFERENCE 7  A. Algorithm  We next introduce the two procedures of our spanner construction algorithm.

Tree Construction: In this procedure, a tree with log ? + 1 levels will be constructed, and the nodes at each level will be elected. The leaves in the constructed tree are at level 0 and the root is at level log ?. The nodes at level i is those in a maximal independent set elected from nodes at level i? 1.

Denote by Vi the set of nodes at level i; then we have V0 = V and Vi+1 ? Vi. Let ri = 2i. We call a node in a computed maximal independent set a dominator, and correspondingly, the other nodes are dominatees.

The tree construction procedure consists of log ? stages.

At each stage, there exist ?1 logn timeslots, with ?1 being a sufficiently large constant whose value will be clear later.

Specifically, in the i-th stage, with i = 1, ? ? ? , log ?, we have  ? the nodes in Vi are elected from Vi?1, and Vi is an MIS of Vi?1 with respect to ri;  ? each node v in Vi?1 \ Vi makes the node u in Vi its dominator, if u is the first node in Vi from which v receives a dominating message; in this case, u is the parent of v in the tree and an edge connecting v to u should be added to the tree;  ? each node in Vi can get the knowledge of its children in Vi?1.

There are two substages within a stage i: the first one is for the election of the nodes in Vi and the second one is to make each node in Vi acquire the knowledge of its children. Each substage contains ?1/2 ? logn timeslots.

Substage 1: Electing Vi and connecting the nodes in Vi?1 \ Vi to those in Vi.

To elect Vi, we let the nodes in Vi?1 execute the MIS algorithm given in Algorithm 1 with respect to ri, and the nodes in the computed MIS constitute Vi. Note that ?1 should be sufficiently large such that the time in this substage is enough for executing the MIS algorithm. Also note that a node may appear in multiple levels (belonging to multiple dominating sets), and if a node u ? Vj , it belongs to Vk for k = 0, 1, ? ? ? , j ? 1; but this will not affect the tree construction.

This substage can easily connect a node v in Vi?1 \ Vi to its parent u in Vi, which is the first node in Vi that sends a dominating message Mm to v. After this step, each node in Vi?1 knows its parent and its connected edge in the tree. But the node in Vi still does not know its children in Vi?1. Hence, we set the second substage to discover the children for each node in Vi.

Substage 2: Children discovery.

In this substage, each node v ? Vi?1 intends to send  a message to its parent. The message contains its ID and its parent?s ID such that its parent can be informed of the connection between them. This procedure can be detailed as follows. At each timeslot, v transmits the message with probability 1/?1 for some constant ?1 whose value will be clear later. The transmission power is set as Pi = 2N?r?i , to ensure that the parent of v is within its transmission range, since the distance between them is at most ri. For each node  u ? Vi receiving the message, it should record v as one of its children.

The final constructed tree is denoted as T .

Cross Edge Insertion: The tree construction procedure can successfully construct  a tree T . This tree is a spanner, but it cannot ensure a low stretch. Thus, some edges need to be inserted. Particularly, we consider to insert edges connecting two nodes in the same level of the tree to guarantee a small stretch.

There are log ?+1 stages in this procedure, and each stage contains ?2 logn timeslots, where ?2 is a constant whose value will be clear in our theoretical performance analysis section. At the i-th stage, the nodes in Vi need to communicate with each other if they are in close vicinity and construct connections between them if needed. From a global view, each pair of nodes u, v ? Vi with d(u, v) ? ?ri will be connected by an edge, where ? = 4 + 32	 . Recall that ? is the constant parameter given in the stretch requirement.

More specifically, each node v ? Vi needs to transmit with probability 1/?1 a message containing its ID to all nodes within distance ?ri, where ?1 is set to be a sufficiently large constant. The transmission power is set as P ?i = 2N?(?ri)  ?.

If v receives a message from a node u ? Vi and detects that d(u, v) ? ?ri, it adds u to its neighbor list. Note that this process only connects the nodes at the same level of the tree within distance ?ri.

After the cross edge insertion procedure, we obtain a spanner denoted as H . By construction, the edge set of H consists of two subsets: the subset of edges inserted in the tree construction procedure and that of the edges connecting pairs of nodes within distance ?ri at the same level of the tree in the cross edge insertion procedure.

B. Analysis In this subsection we show that our spanner construction  algorithm can construct a spanner with stretch 1 + ? and other desirable properties such as linear sparseness and small maximum degree.

We first prove that the tree is correctly constructed in the first procedure. This tree has two properties: 1) the nodes in Vi for i = 0, 1, ? ? ? , log ? constitute an MIS with respect to ri = 2i; 2) each node in Vi?1 is connected to a node in Vi.

Then we show that each pair of nodes in Vi within distance ?ri are connected in the second procedure. These properties support the proofs of low stretch, linear sparseness, and small node degrees.

In summary, we will prove the following result, which is a direct corollary of Lemmas 20, 22, and 18.

Theorem 9: A spanner H with stretch 1 + ? can be con- structed in O(log ? logn) timeslots with a high probability by the spanner construction algorithm. Furthermore, the algorithm ensures with a high probability that the number of edges in H is O(n) and the maximum degree of the nodes in H is O(log ?).

Analysis on Tree Construction: We first present the following property: for each node in Vi  with i = 0, 1, ? ? ? , log ? ? 1, the number of nodes within distance ri+1 is bounded by a constant.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

8 IEEE/ACM TRANSACTIONS ON NETWORKING  Property 10: For each node v ? Vi, i = 0, 1, ? ? ? , log ??1, |Nri+1(v)| ? 25.

Property 10 will be proved later in Lemma 12. With this property, by setting ? = 25, Algorithm 1 can be executed to compute an MIS of Vi for each i = 0, 1, ? ? ? , log ? ? 1 with a high probability. Then we have the following result.

Lemma 11: At each stage i of the tree construction pro- cedure with 1 ? i ? log ?, Vi can be elected in O(log n) timeslots, and the nodes in Vi constitute a maximal indepen- dent set with respect to ri with a high probability.

Proof: According to Lemma 7 and Theorem 8, at any stage i, a maximal independent set of Vi?1 with respect to ri can be computed with probability at least 1 ? n?2 by well tuning the constant parameters in Algorithm 1. To prove that the result is true for all levels, we need to show that the high probability result holds after adding up the error probabilities of all levels. Notice that though in the algorithm, there are log ? levels, there can be at most n different maximal independent sets being computed. Hence, with probability at least 1 ? n?1, the maximal independent set is correctly computed at each stage of the first procedure. ?  We now prove the correctness of Property 10.

Lemma 12: Property 10 holds with a high probability.

Proof: We prove the Lemma inductively. Consider V0.

We need to show that for each node v ? V0, |Nr1(v)| ? 25. Because each pair of nodes have distance at least 1, the disks centered at the nodes in V0 with radii 1/2 are disjoint.

Denote such disks centered at the nodes in Nr1(v) as D1v.

Clearly, these disks are all contained in the disk Er1+1/2v = E  5/2 v . Then, we can use an area argument to bound |D1v| as  follows:  |D1v| ? Area(E5/2v ) ? ? (1/2)2 =  ? ? (5/2)2 ? ? (1/2)2 = 25. (5)  We next prove the inductive step. Assume that the Lemma is correct for Vi with i ? j. We then consider Vj+1. Because for each node v ? Vj , |Nrj+1(v)| ? 25, and the MIS algorithm in Algorithm 1 can correctly compute an MIS of Vj with respect to rj+1, Vj+1 is an MIS with respect to rj+1. We can then use the same area argument as that for proving the case of V0, and obtain that for each node u ? Vj+1, |Nrj+2(u)| ? 25.

The above analysis is based on the correct computation of the MIS, which is shown in Lemma 11. ?  With the above Lemma 12, we can get the following corollary.

Corollary 13: For each node v ? Vi with 1 ? i ? log ?, it has at most 25 children in Vi?1 \ Vi.

So far, we have shown that the nodes at each level in the tree can be constructed as required, and the children of each node is not very large. We still need to show that the tree is well connected, i.e., each node at level i ? 1 knows its parent at level i, and each parent node at level i knows its children at level i ? 1. Based on the algorithm, a child node knows its parent when electing the nodes of the upper level. Therefore in the following, we prove that a parent node can get the knowledge of its children with a high probability.

Lemma 14: At each stage i with 1 ? i ? log ?, each node v ? Vi can acquire the knowledge of its children with a high probability.

Proof: We first show that in a stage i, each children u ? Vi?1/Vi of v ? Vi can send a message to v with probability at least 1 ? n?3.

By Property 10, within distance ri of each node, there exist at most 25 nodes in Vi?1. Note that the transmission range of the nodes is r = 21/?ri and a disk of radius r can be covered by at most a constant number of disks of radii ri. Based on the algorithm, in the second substage of stage i, each node u ? Vi?1/Vi transmits with constant probability 1/?1 at each timeslot. Thus the condition in Lemma 2 holds by setting ?1 to be a sufficiently large number. Then, in each timeslot, the probability at which u can successfully send a message to v is at least 1?1 ??. Therefore if ?1 ? 6?1? , after 12?1 logn timeslots in this substage, the probability that v cannot receive a message from u is reduced to  (1 ? 1 ?1  ? ?) 12?1 logn ? e? 12?1? ??1 ?logn ? n?3, (6)  where the first inequality holds by Fact 1.

To prove the Lemma, we still need to bound the error  probabilities for all the nodes. Note that each node v can have O(n) children. Thus, with probability at least 1? n?2, v can receive messages from all its children. And this is true for all the nodes with probability at least 1 ? n?1, which completes the proof. ?  Now we have analyzed the process of tree construction.

Next, we start the analysis on the cross edge insertion proce- dure.

Analysis on Cross Edge Insertion: We show that in this procedure, any pair of nodes  in Vi within distance ?ri are connected by an edge. First, we need to show that the number of nodes within dis- tance ?ri of any node is bounded by a constant, which will allow us to use Lemma 2 to determine successful transmissions.

Lemma 15: With a high probability, there exist at most (2? + 1)2 nodes in Vi that are within distance ?ri of v for each node v ? Vi, where 0 ? i ? log ?.

Proof: By Lemma 11, the nodes in Vi constitute an MIS of the nodes in Vi?1 with respect to distance ri. This means that any two nodes in Vi have a distance larger than ri, and that the disks centered at these nodes with radii ri/2 are disjoint.

Therefore using a similar area argument as that in proving Lemma 12, we can prove this lemma. ?  With Lemma 15, one can see that at each stage i, within the transmission range of each node, the sum of the transmission probabilities of nodes is bounded by a constant. Thus, we can use Lemma 2 to ensure successful transmissions by setting ?1 to be a sufficiently large constant. With a similar analysis as that used in the proof of Lemma 14, we can get the following result.

Lemma 16: Each node v ? Vi, where i = 0, 1, ? ? ? ,? ? 1, can send its ID to all nodes within distance ?ri, with a high probability.

Lemma 16 implies that the following result holds.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

YU et al.: DISTRIBUTED SPANNER CONSTRUCTION WITH PHYSICAL INTERFERENCE 9  Corollary 17: Each pair of nodes in Vi within distance ?ri are connected by an edge with a high probability.

Proof: According to Lemma 16, one can see that with a high probability, each pair of nodes within distance ?ri can receive a message from each other; therefore an edge will be inserted between them as stated by the algorithm. ?  We then summarize the results based on Lemma 11, Lemma 14, and Corollary 17.

Lemma 18: A spanner H can be constructed in O(log ? logn) timeslots with a high probability; and the following properties hold with a high probability:  (i) the nodes Vi in level i, with 1 ? i ? log ?, constitute a maximal independent set of Vi?1 with respect to ri;  (ii) each node v ? Vi?1 \ Vi has a parent node u ? Vi and d(v, u) ? ri;  (iii) for each pair of nodes u, v ? Vi, there exist an edge connecting them if d(u, v) ? ?ri.

We next investigate the three properties of the constructed spanner: constant stretch, linear sparseness, and bounded max- imum degree. To simplify our description, we ignore the randomness guarantee in Lemma 18, and consider that the given properties hold deterministically. Note that the ?high probability? guarantee in Lemma 18 ensures that the subse- quently derived results hold with a high probability as well.

Constant Stretch: To prove that the constructed spanner H has a constant  stretch factor, we need to first prove the following claim.

Claim 19: Let T be the tree obtained from the tree con-  struction procedure. For any non-root node v and any 1 ? i ? log ?, there exists a path Pi starting from v and ending at some node xi ? Vi, such that |Pi| ? 2ri.

Proof: Let i? be the largest j such that v ? Vj . Therefore for any 0 ? i ? i?, by setting Pi to be {v}, the claim holds trivially. In the following we only need to consider the case of i > i?, and the claim can be proved inductively.

Consider i = i? + 1. Let xi be the parent of v in Vi; then Pi = {vxi}. According to Lemma 18, d(vxi) ? ri. Hence, the claim holds for i = i? + 1.

Now we consider the case of i > i? + 1. Because the claim holds for i ? 1, ?xi?1 ? Vi?1 such that a path Pi?1 = {v, ? ? ? , xi?1} exists with |Pi?1| ? 2ri?1. If xi?1 is also in the set Vi, then we set Pi = Pi?1, and the claim holds; otherwise, according to Lemma 18, there exists a xi ? Vi which is the parent of xi?1 and d(xi?1, xi) ? ri.

Let Pi = {v, ? ? ? , xi?1, xi}; then we have  |Pi| = |Pi?1| + d(xi?1, xi) ? 2ri?1 + ri = 2ri.

?  Theorem 20: The constructed spanner H has a stretch factor of 1 + ?.

Proof: To prove this theorem, we need to show that for every pair of nodes u, v, dH(u, v) ? (1 + ?)d(u, v).

Suppose that d(u, v) ? [ri, ri+1) and ? ? [8 ? 2?j, 16 ? 2?j).

We first consider the case of i ? j ? 1. In this case, d(u, v) < ri+1 < 16/? < ? ? r0 (recall that ? = 4 + 32	 ).

By Lemma 18, u, v must be connected by a cross edge at level 0. Hence, dH(u, v) ? (1 + ?)d(u, v). We next assume that i ? j.

Let t = i?j. We claim that there exist two nodes u?, v? ? Vt such that dH(u, u?) ? 2rt and dH(v, v?) ? 2rt. We consider u first. There are two cases for u: either u ? Vt or u /? Vt.

In the first case, we can set u? = u, and thus dH(u, u?) ? 2rt trivially holds. In the second case, we can find u? ? Vt such that dH(u, u?) ? 2rt based on Claim 19. Similarly, we can find v? ? Vt such that dH(v, v?) ? 2rt holds.

Now we show that u? and v? are connected by a cross edge in H . This requires to bound d(u?, v?) as follows:  d(u?, v?) ? d(u?, u) + d(u, v) + d(v, v?) ? dH(u, u?) + d(u, v) + dH(v, v?) ? 2rt + ri+1 + 2rt ? 2rt + 2t+j+1 + 2rt = (4 + 2j+1)rt ? (4 + 32/?)rt. (7)  By Lemma 18, u?, v? are connected by an edge in H .

Now we are ready to bound dH(u, v). As shown in the  above analysis, we have d(u?, v?) ? 4rt + d(u, v). Then dH(u, v) ? dH(u, u?) + dH(u?, v?) + dH(v?, v)  = 2rt + d(u?, v?) + 2rt ? 4rt + 4rt + d(u, v) = 8 ? 2i?j + d(u, v) ? ?ri + d(u, v) ? (1 + ?)d(u, v), (8)  which completes the proof. ? Sparseness and Upper Bound on the Maximum Degree: We finally give the upper bounds on the total number of  edges and the maximum degree of the constructed spanner.

To proceed, we need to prove the following claim:  Claim 21: The edges in H can be directed such that the out-degree of each node is bounded by a constant.

Proof: Define the highest level i? of a node x to be the largest i such that x ? Vi \ Vi+1. Then the directions of the edges can be set as follows: for each edge connecting two nodes in adjacent levels, its direction is from the child node to the parent node; and for each cross edge, its direction is from the node with the lower highest level to the one with the higher highest levee (ties are broken arbitrarily). Then each edge in the tree becomes a directed edge.

We next consider the out-degree of each node v. Based on the tree construction procedure, the out-degree generated by the non-cross edges in the tree is 1. The out-degree generated by the cross edges connecting v to the nodes in the same level is bounded by a constant as shown in Lemma 15.

By combining the two cases, we prove the claim. ?  Theorem 22: The constructed spanner H contains O(n) edges, and the maximum degree of the nodes is O(log ?).

Proof: Because the number of edges is equal to the sum of the out-degrees of the nodes, Claim 21 implies that the total number of edges in H is O(n).

We next consider the maximum degree of each node v.

Let i? be the highest level to which v belongs in the tree i.e., v ? Vi? \ Vi?+1. Then for each j < i?, the number of    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

10 IEEE/ACM TRANSACTIONS ON NETWORKING  Fig. 1. Influences on the number of edges when n varies. (a) Uniform distribution. (b) Normal distribution. (c) Exponential distribution.

Fig. 2. Influences on the number of edges when ? varies. (a) Uniform distribution. (b) Normal distribution. (c) Exponential distribution.

children of v in Vj is at most 25 by Corollary 13. According to Lemma 15, for each t ? i?, there exist a constant number of nodes in Vt connected to v by cross edges. Hence, the maximum degree of v is O(i?), which is O(log ?). ?

VI. SIMULATION RESULTS  We study the empirical performance of our spanner con- struction algorithm in this section. The influences of the following parameters on the performance of our algorithm will be investigated: (i) the number of nodes, the distribution of nodes and the constant ?; (ii) the parameters of the SINR model (? and ?). Furthermore, we compare our algorithm with the only known spanner construction algorithm under the SINR model, the Yao-graph based algorithm (Yao) given in [35].

We consider a network whose nodes are located in a square area of 150m? 150m. Over 20 runs of the simulations were carried out for each reported result.

A. Performance Evaluation  The metrics of the algorithm performance include: (a) the number of edges in the constructed spanner; (b) the stretch of the constructed spanner; (c) the ratio of the failed node pairs in the constructed spanner to the total number of node pairs (a failed node pair u, v is one with dH(u,v)d(u,v) > 1 + ?  (the required stretch)); and (d) the distribution of dH(u,v)d(u,v) for all pairs of nodes u and v and the distribution of the nodes?  degrees. Three typical node distributions are considered: uni- form, normal and exponential.

Influences of the Total Number of Nodes and ?: We first explore the impacts of the total number of nodes and the values of ? on our algorithm. In this study, we set the SINR model parameters ? = 3 and ? = 3. As shown later, our algorithm is insensitive to these SINR parameters, and the selection of ? and ? do not have any significant impact on the algorithm?s performance. The evaluation results are illustrated in Figs. 1-6.

Fig. 1 and Fig. 2 report the number of edges in the con- structed spanner when n and ? vary. From Fig. 1, one can see that the number of edges increases linearly with the value of n, which corroborates our theoretical analysis, and it is less than 20 times of n in most cases under three distributions. Notice that in normal and exponential distributions, the number of edges is much less than that in uniform distribution. This is because in normal and exponential distributions, most nodes are at the center of the deployment area and nodes are closer to each other, unlike the situation in uniform distribution. Hence, less edges are needed to maintain the required stretch factor.

Fig. 2 shows that the number of edges decreases as ? increases.

In other words, a smaller stretch factor needs more edges to be included, which is consistent with intuition. Fig. 2 also shows that with the increase of ?, varying n has smaller influence on the number of edges in the constructed spanner. This is because when ? gets larger, i.e., the stretch requirement is larger, a smaller number of cross edges are inserted by the algorithm as the required distance for two nodes at the same    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

YU et al.: DISTRIBUTED SPANNER CONSTRUCTION WITH PHYSICAL INTERFERENCE 11  Fig. 3. Influences of n and ? on the failure ratio. (a) Uniform distribution. (b) Normal distribution. (c) Exponential distribution.

Fig. 4. Influences of n and ? on the real stretch. (a) Uniform distribution. (b) Normal distribution. (c) Exponential distribution.

level to get connected decreases with ?. On the other hand, the decrease of the number of neighbors connected by cross edges slows down as ? increases; consequently, the change on the number of edges becomes small.

In the analysis of our algorithm, we show that the algorithm performance is guaranteed with a high probability, i.e., the error probability is bounded by ?(n?1). To verify this result, we evaluate the ratio of the failed node pairs in Fig. 3, i.e., the ratio of the number of node pairs u, v with dH(u,v)d(u,v) > 1 + ? (the required stretch) to the total number of node pairs.

It can be observed that in all three distributions, the failure ratio is no more than 9 times of 1n , which corroborates our theoretical analysis. The failure ratio gets larger as ? increases and n decreases. This is justified as follows: the failure ratio increases when ? gets larger and n gets smaller because the constructed spanner contains fewer edges, and hence a failure of a very small number of edge connections can heavily affect the failure ratio. Therefore, our algorithm works better in constructing a spanner with a small stretch in a large-scale network. Furthermore, the failure ratio is a bit larger in normal and exponential distributions than that in uniform distribution, which can be justified similarly as above, since in the former two cases, fewer edges are added in the constructed spanner, as shown in Fig. 1 and Fig. 2.

In Fig. 4, we evaluate the real stretch of the constructed spanner under different settings of ? and n. Notice that in this evaluation, we ignore the failure node pairs as the fraction is acceptable based on our analyzed error probability guarantee.

One can see that in all cases, the real stretch does not exceed  TABLE I  DISTRIBUTION OF dH (u,v) d(u,v)  WITH ? = 3  the required 1 + ?; and in some cases, for example, ? = 2, 3 in uniform distribution, the real stretch is much smaller than 1 + ?. We also demonstrate the distribution of dH(u,v)d(u,v) under the setting of ? = 3 and uniform distribution in Table I. From Fig. 4(a), one can see that the stretch for the case of ? = 3 is about 2.7. Notice that the stretch is the largest dH(u,v)d(u,v) . Table I  tells us that for most pairs of the nodes u, v, dH(u,v)d(u,v) is much smaller than 2.7. It can be seen that for almost all the node pairs, dH(u,v)d(u,v) falls in the interval of (0,2], and only 0.001% of  node pairs with dH(u,v)d(u,v) larger than 2. We observe the same phenomenon in other cases, which tells us that the spanner may perform much better than what the stretch reflects.

Fig. 5 shows that the degrees of most nodes are not large.

In particular, the figures illustrate the number of nodes whose degrees are less than 50 under different settings of n and ?.

From the figures, it can be seen that at least more than half of the nodes have a degree less than 50, even if ? is set    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

12 IEEE/ACM TRANSACTIONS ON NETWORKING  Fig. 5. Influence on nodes? degrees when ? varies. (a) Uniform distribution. (b) Normal distribution. (c) Exponential distribution.

Fig. 6. Influence on nodes? degrees when ? varies. (a) Uniform distribution. (b) Normal distribution. (c) Exponential distribution.

Fig. 7. Influence on nodes? degrees when ? varies. (a) Number of edges. (b) Failure ratio. (c) Distribution of nodes? degrees  to be very small. In the cases of normal and exponential distributions, almost all the nodes have degrees less than 50.

We also found that even in those cases of small ? under the uniform distribution, which need to insert more edges, most nodes have degrees less than 100 and the maximum degree is less than 200, which is still very small when compared with the total number of nodes in the network.

We illustrate the distribution of the nodes? degrees in Fig. 6 when ? = 3, where x-axis represents the values of the node degree and y-axis represents the number of nodes. It can be seen that the node degree increases as the number of nodes gets larger. But in all cases, the maximum degree is at most 100, and more than 95% of the nodes have degrees less than 50.

Particularly, in normal and exponential distributions, almost all nodes have degrees less than 30.

In summary, the above simulation results demonstrate that: 1) our algorithm can construct a spanner with a constant stretch  and a linear number of links; 2) the maximum degree is not large and most nodes have small degrees; and 3) the error probability is very small, which is O(1/n). The simulation results corroborate our performance analysis.

Impacts of the SINR Model Parameters: Lastly, we inves- tigate the impacts of the SINR model parameters on the algorithm performance. We consider the combinations of ? = 3, 4, 5 and ? = 2, 3, and set n = 7500 in this evaluation study. As shown above, the algorithm performs similarly in different node distributions. Hence, we consider only the uniform one in here.

The impact of the parameters on the number of connected edges is illustrated in Fig. 7(a), where the x-axis represents the values of ?, and the y-axis represents the number of edges in the constructed spanner. From this figure, one can see that the number of edges is almost the same, although the values of ? and ? vary.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

YU et al.: DISTRIBUTED SPANNER CONSTRUCTION WITH PHYSICAL INTERFERENCE 13  TABLE II  COMPARISONS OF OUR ALGORITHM AND YAO-GRAPH BASED ALGORITHM  Fig. 7(b) illustrates the ratio of the failure node pairs.

We observe that the failure ratio is smaller than 0.0012 in all cases, which is about 10 times of 1n and the ratios under different settings of ? and ? differ very little.

Fig. 7(c), where the x-axis represents the value of node degree and y-axis represents the number of nodes, shows that the degrees of nodes change very little when ? and ? change.

In summary, Fig. 7 demonstrates that our algorithm is insensitive to the SINR parameters ? and ?.

B. Comparison  We compare the performances of our algorithm and the Yao algorithm in the aspects of the number of edges, the contruction time and the failure ratio when n varies. The experiments are conducted in the setting of uniform node distribution and ? = 3. The comparison results are summarized in Table II.

It can be observed that in most cases, the number of edges in the spanner constructed by the Yao algorithm is smaller than ours. But the construction time the Yao algorithm takes is much larger, and increases linearly in n. In contrast, the running time of our algorithm is logrithmic in n, and hence grows much slower as n increases. Furthermore, to ensure the required stretch factor, in the Yao algorithm, the surrounding area of each node is divided into c sectors of equal angles for some specified parameter c and edges are added to connect each node and its nearest neighbor within each sector. Hence, if there are no neighbors in a particular sector for a node, the stretch factor cannot be guaranteed. In other words, the algorithm heavily relies on the network topology. This point is also illustrated in Table II. It can be seen that when n is small, the failure ratio increases significantly, as in sparse networks, it may not ensure that there exists a neighbor in each sector around a node. But in our algorithm, the failure ratio is independent of the network topology.



VII. CONCLUSION  In this paper, we considered the distributed spanner con- struction under the physical SINR model, which has never been addressed in the literature to the best of our knowledge.

We presented an algorithm that can efficiently construct a spanner, and the constructed spanner possesses two most desirable properties: constant stretch and linear sparseness, which are crucial in enhancing the efficiency in terms of time and power consumption of the algorithms. Our spanner construction is based on a novel MIS algorithm proposed in this paper, which improves the best known result of MIS  construction by a logn factor in networks with constant densities. This MIS algorithm is expected to be applicable in other applications as well.

We hope that this study can shed light on the fundamental topic of spanner construction with certain desirable properties.

There exist many meaningful and important future directions which we can further explore. Firstly, our algorithm does not rely on nor take advantage of any special functions of the wireless devices, such as physical carrier sensing. It is not clear whether such functions when employed would lead to faster or better solutions or not. Secondly, our algorithm still requires the knowledge of some network parameters such as the total number of nodes n. Devising an algorithm that is independent of all network parameters is attractive, especially for dynamic networks. Lastly, there does not exist a lower bound on the time complexity of spanner construction under the SINR model, which should be a good topic for investigation.

