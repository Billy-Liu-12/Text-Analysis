Frequent Closed Itemset Mining with Privacy Preserving for Distributed Databases

Abstract?In the present paper we introduce closed itemsets into frequent itemset mining from horizontally-partitioned transaction databases with preserving privacy. Closed itemsets were originally from the research area of Formal Concept Analysis, and it is shown that even if results of frequent itemset mining are restricted to closed itemsets, all frequent itemsets can be recovered from the results. This property suggests that using closed itemsets would contribute to decreasing the cost of communication among distributed databases with privacy preserving mining. We present a mining procedure revising and amalgamating two previous works: one is for mining closed itemsets from horizontally-partitioned databases, and the other is for privacy preserving mining of itemsets from such databases. We analyze the procedure on both of the viewpoint of communication cost and that of security. We also show results of some experimental practice of applying the procedure to a well-known dataset.

Keywords-frequent itemset mining; closed itemsets; privacy preserving data mining;horizontally-partitioned databases

I. INTRODUCTION  This paper presents a method which finds frequent closed itemsets from distributed transaction databases with pre- serving privacy. Finding patterns occurring frequently in databases is a fundamental subject in the research of data mining. When the databases are transaction databases and patterns are itemsets, the problem is called frequent itemset mining, and is the basis of association rule mining. Privacy preserving mining from transaction databases has also been investigated [6]. Closed itemsets were originally from the re- search area of Formal Concept Analysis, andwere introduced for developing efficient mining algorithms [10]. It is shown that even if results of frequent itemset mining are restricted to closed itemsets, all frequent itemsets can be recovered from the results. This property suggests that using closed itemsets would contribute to decreasing the cost of commu- nication among distributed databases with privacy preserving mining. Our final goal is to show that this suggestion can be true by developing a mining procedure. This paper gives a basic idea and a basic mining procedure, and analyzes the procedure on both of the viewpoint of communication cost and that of security. We also show results of some  experimental practice of applying the procedure to a well- known dataset.

In the research of privacy preserving mining from trans- action databases, several models have been proposed for distributed transaction databases. We adopt the horizontally partitioned database model [9]. In the model a global trans- action database consists of several private databases each transaction in which is a subset of a same universal sets of items. Every private database is managed by its own site. Frequent itemset mining with preserving privacy in the model is to find all itemsets which occur frequently in the global transaction database, with less information is transformed between the sites.

We give a procedure named SFC-combine for discovering all of frequent closed itemsets with preserving privacy. We first show that, for a given horizontally partitioned database, every frequent closed itemset in the global database must be a subset of a frequent closed itemset in at least one private database. Then we design an algorithm named FC- combine for finding all frequent closed itemsets in the global database, with less communication costs between distributed private database management systems. The SFC-combine algorithm is implemented as the combination of FC-combine and an encryption method which has the commutative prop- erty. In our implementation of experimental practice we adopt the Pohlig-Hellman method.

The paper is organized as follows: In the following section we survey some fundamental concepts and terminology in frequent itemset mining and define the problem we are solving. In Section III we give the procedures FC- combine and SFC-combine. In Section IV we report some experimental results with comparing the method proposed in some previous work and a na??ve method based on multi- party protocol. We also give theoretical analysis of the communication cost and security. We concludes the paper in Section V.

DOI 10.1109/ICDMW.2010.135    DOI 10.1109/ICDMW.2010.135

II. PRELIMINARIES  A. Frequent itemset mining and closed itemsets  Let I = {i1, i2, . . . , im} be a set of items. A subset of I is called an itemset. Following the custom of the research area an itemset {i1, i2, . . . , ik} is denoted by i1i2 ? ? ? ik. A transaction is a pair (tid,X) where tid is a natural number for its index and X is an itemset. For a transaction t = (tid,X), we write id(t) = tid and itemset(t) = X . A transaction database DB is a finite set of transactions such that id(t) ?= id(s) for any two distinct transactions t and s in DB.

Roughly speaking, frequent itemset mining means that finding itemsets which frequently occurs in a given trans- action database. If X ? itemset(t) for a transaction t, we say that X occurs in t and write X ? t. The support of an itemset X in DB is defined as

X.supDB = ?{t |X ? t}  ?(DB) ,  where ?(S) denotes the cardinality of a set S. The suffix is omitted if it is clear from context. Given a real number ? (0 ? ? ? 1) as a threshold, an itemset X is ?-frequent, or frequent if X.supDB ? ?, and frequent itemset mining is defined as finding all ?-frequent itemsets. It is known that the number of frequent itemsets is of exponential order of ?I [12], and that it is difficult to find important itemsets if we enumerate all frequent ones.

Closed itemsets are introduced for reduce the numbers of outputs in solving the frequent itemset mining problem [10].

Let us define functions f : 2DB ? 2I , g : 2I ? 2DB , and cl : 2I ? 2I as follows:  f(T ) = {i ? I | ?t ? T, i ? t} for T ? DB, g(X) = {t ? DB | ?i ? X, i ? t} for X ? I,  cl = f ? g.

The function cl is called a Galois closure operator because we could regard the pair of f and g as a Galois connection in mathematics. An itemset X is closed if cl(X) = X . The frequent closed itemset mining problem is defined as finding all ?-frequent closed itemsets.

Example 1: Let DB be the transaction database illus- trated in Figure 1. Then it holds that  f({(2, bce), (3, abce), (5, abce)}) = bce, g(ce) = {(2, bce), (3, abce), (5, abce)},  f(g(ce)) = bce.

For an itemset ac, we have  cl(ac) = f(g(ac))  = f({(1, acd), (3, abce), (5, abce)}) = ac  DB ID Items 1 a c d 2 b c e 3 a b c e 4 b e 5 a b c e  I = {a, b, c, d, e}  Figure 1. An Example of a Transaction Database  DB1 ID Items 1.1 a b 2.2 a b 3.3 a c  DB2 ID Items 2.1 a 2.2 a 2.3 b c  DB3 ID Items 3.1 a b c 3.2 a b c 3.3 a b c  Figure 2. An Example of a Distributed Database  and therefore ac is a closed itemset. The singleton itemset a is not closed because  cl(a) = f(g(a))  = f({(1, acd), (3, abce), (5, abce)}) = ac.

When we let the threshold ? = 0.5, the set of all frequent closed itemsets in DB is FC = {c, ac, be, bce} while the set of all frequent itemsets is FC ? {a, b, bc, ce, e}.

It was shown in [10] that all frequent ?-itemsets can be efficiently generated from the set of ?-frequent closed itemsets.

B. Itemset Mining in Distributed Databases We adopt horizontally-partitioned transaction databases as  the model of distributed databases in the theory below. An example of such databases is illustrated in Figure 2.

We give a formal definition of distributed databases. A distributed transaction database DB is a set of transaction databases DB1, DB2, . . ., DBN (N ? 2) which satisfy that  ?i, j(1 ? i < j ? N) ?t ? DBi ?s ? DBj id(t) ?= id(s). (1)  Each database DBi is called a private database. We assume that each private database DBi is managed by its own DBMS called Site Si. We sometimes call DB a global database.

Let K = {a1, a2, . . . , ai} ? {1, 2, . . . , N} be a set of indices. From the restriction (1), the union  DBK = DBa1 ?DBa2 ? . . . ?DBai     of any subset of DB is a transaction database, and called the sum of the subset. The definition of frequent itemsets can be extended for distributed databases as follows: The support of itemsets X on DBK is denoted by X.supK .

Given a threshold ? (0 ? ? ? 1), X is locally frequent on DBK if X.supK ? ?. If X.sup1???N ? ?, X is globally frequent. For a set S of itemsets, freqK(S) denotes the set of all itemsets in S which is frequent in DBK . The problem of mining frequent itemsets in a distributed databases is defined as finding all globally frequent itemsets.

We can also extend the definition of closed itemsets for distributed databases. As an extension of the function g we define gK : 2I ? 2DBK as  gK(I) = {t ? DBK | ?i ? I, i ? t}  and clK : 2I ? 2I as  clK = f ? gK .

An itemset X is locally closed in DBK if clK(X) = X , and globally closed if it is locally closed for DB12???N . The set of all locally closed itemsets in DBK is denoted by and CK , and we let FCK = freqK(CK).

Example 2: For the distributed database illustrated in Figure 2, the followings hold:  C1 = {a, ab, ac}, C2 = {a, bc}, C3 = {abc}, C12 = {a, b, c, ab, ac, bc}, C23 = {a, bc, abc}, C123 = {a, b, c, ab, ac, bc, abc}.

Note that b ? C12 but that b ?? C1 ? C2.

Now we define the problem we are solving.

Mining Globally Frequent Closed Itemsets in a Distributed Database: Input: A distributed database {DB1, DB2, . . . , DBN}  minimal support ? (0 ? ? ? 1) Output:FC12???N .

Example. Given the distributed database illustrated in Fig- ure 2 and ? = 0.5 as the inputs of the problem, the output is FC123 = {a, b, c, ab}. Note that FC1 = {a, ab}, FC2 = {a}, FC3 = {abc}, FC12 = {a, b}, FC23 = {a, bc, abc}, FC13 = {a, ab, ac, abc}.

In particular, c ? FC123 but c ?? C1 ?C2 ?C3, and c ?? FCK for K = {1}, {2}, {3}, {1, 2}, {2, 3}, {1, 3}.



III. MINING GLOBALLY FREQUENT CLOSED ITEMSETS  A. Mining closed itemsets For any pair S1,S2 ? 2I of set of itemsets, we define the  meet S1 ? S2 and the merge S1?S2 as follows [9] 1:  S1 ? S2 = {X1 ?X2|X1 ? S1, X2 ? S2} S1?S2 = S1 ? S2 ? (S1 ? S2).

1In [9] the merge operator is denoted by S1?S2, but we use the notation above, which is based on [7].

Procedure FC-Combine0 I, J ? {1, . . . , N}, I ? J = ?.

InputsF FCI  ? k?I  Ck from DBI ,  FCJ , ? k?J  Ck from DBJ  OutputFFCI?J , ( ? k?I  Ck) ? ( ? k?J  Ck)  MethodF 1) FCI?J := ?; S := ?; SI := ?; SJ := ?; 2) S := FCI ? FCJ ; 3) for all X ? FCI 4) SI := SI ? Clsetsum(1, X,  ? k?J  Ck,FCI);  5) end for 6) for all X ? FCJ 7) SJ := SJ ? Clsetsum(1, X,  ? k?I  Ck,FCJ);  8) end for 9) FCI?J := freqI?J(S ? SI ? SJ);  10) return FCI?J , ( ? k?I  Ck) ? ( ? k?J  Ck);  Figure 3. The Procedure FC-Combine0  Theorem 1 ([9]): For any distributed database {DB1, . . ., DBN} (N ? 2), it holds that  C1???N = (? ? ? ((C1 ? C2) ? ? ? ?) ? CN ).

The next theorem presents useful properties of the meet operator.

Theorem 2: For any S1,S2,S3 ? 2I , the following laws hold:  Commutative Law : S1 ? S2 = S2 ? S1.

Associative Law : (S1 ? S2) ? S3 = S1 ? (S2 ? S3).

Distributive Law : (S1 ? S2) ? S3 = (S1 ? S3) ? (S2 ? S3), S1 ? (S2 ? S3) = (S1 ? S2) ? (S1 ? S3).

From the associative law, we are allowed to write  (S1 ? S2) ? S3 = S1 ? S2 ? S3.

The commutative and associative laws enable us to represent Theorem 1 in the form  C1???N = C1 ? C2 ? ? ? ? ? CN .

.

B. FC-Combine0 and FC-Combine  The procedure FC-Combine0 is for computing frequent closed itemsets on two private databases. From now on we let I, J ? {1, . . . , N}, and assume that I ? J = ?.

Procedure Clsetsum(i, X, Sa, Sb) InputsF A natural number i, an itemset X , a set of itemsets Sa = {Y1, . . . , Y#Sa}, Sb OutputF{ X ? Yc1 ? . . . ? Yck  ???? 1 ? k ? #Sa ? i+ 1,c1, . . . , ck ? {i, i+ 1, . . . ,#Sa} } ?Sb  MethodF 1) A := ? 2) if i = #Sa + 1then 3) return A 4) else 5) A = A ? Clsetsum(i+ 1, X, Sa, Sb); 6) if X ? Yk = ? or X ? Yk ? Sb 7) return ?; 8) else 9) A = A ? Clsetsum(k + 1, X ? Yk, Sa, Sb);  10) end if 11) end if 12) return A;  Figure 4. Procedure Clsetsum  Assume that the set of all frequent closed itemsets on DBI are obtained and the same set is also obtained for DBI . The following lemma gives the basic idea of how to compute the all frequent closed itemsets on DBI?J from the two sets by using Theorem 1.

Lemma 1: It holds that  FCI?J = freqI?J(CI ? CJ ).

The following theorem shows that we need not compute unions for all pairs of an itemset from CI and an itemset from CJ .

Theorem 3: For any X ? FCI?J there exist an itemset Y such that X ? Y ? FCI or X ? Y ? FCJ .

Example 3: In the distributed database in Figure 2, if I = {1}, J = {2}, X = b, then Y = ab and K = I are respectively the itemsets and the indexset ensured by Theorem 3.

By using Theorem 3, we present the procedure FC- Combine0 as shown in Figure 3, which computes FCI?J from FCI , FCJ ,  ? k?I  Ck and ? k?J  Ck. The procedure stores  the candidates in SI and SJ with using neither CI nor CJ , but using FCI and FCJ . The subroutine Clsetsum in Figure 4 computes all intersections of a set X and sets in Sa of any size, by using recursion starting with i = 1 and Sb = ?. The correctness of FC-Combine0 can be shown directly from Theorem 1. Note that we can introduce pruning in running Clsetsum. For example, when it holds that X ? Yi ? FCI , we can stop the generation because every element in FCI appears on Line 3 of FC-Combine0 and passed to Clsetsum.

This pruning is represented on Line 6 and 7.

DB3DB1 DB2 DB?DB?-1??? C1 C2 C3 C?C?-1  ??? ??? FC1??  Figure 5. A Tournament Method  Theorem 2 shows that the order of applying the merge operator ? does not affect to the result in any order. This sug- gests a procedure for computing all globally frequent closed itemsets as shown in Figure 5. The procedure should call FC-Combine0 simultaneously in several sites and combine the results as in a tournament. We call this procedure FC- Combine. Below, for a set of indices I , site SI means the site Sk where k is selected from I in the tournament.

C. SFC-Combine  We introduce some encryption in communication of two sites in FC-Combine. The basic principle is that every item in a site is encrypted before executing FC-Combine0 and that the results of FC-Combine0 is passed to another sites.

The revised algorithm is called SFC-Combine0, and SFC- Combine is constructed in a similar way of construction of FC-Combine.

Here we assume that the encryption method should have the commutative property. More precisely speaking, for mutually distinct pairs ((e1, d1), . . . , (en, dn)) of an encrypt key and a decrypt key, we assume that  Any pair of permutationi and j, Eei1 (? ? ?Eein (M) ? ? ?) = Eej1 (? ? ?Eejn (M) ? ? ?).(2)  The secret key cryptosystem based on Pohlig-Hellman algo- rithm [11] has the property (2).

The precise description of SFC-Combine0 is shown in Figure 6. In the description Ek and Dk are respectively the encrypt key and the decrypt one for Site k, and El and Dl be for site l. From the commutative prop- erty Ek(El(M)) = El(Ek(M)) and Dk(Dl(M)) = Dl(Dk(M)), and these allow us to represent Ek(El(M)) = E(M) and Dk(Dl(M)) = D(M).

The procedure SFC-Combine0 consists of the encryption phase, the merging phase, and the decryption phase, and they work as follows: In the encryption phase from Line 1 to Line 7 in the figure, site Sk respectively encrypt FCI and CCI with the encryption key for Site J and, Site j do vise versa. In the merging phase from Line 8 to Line 15 both of the sites generates their candidate sets CI and CJ with FC-Combine0. In the decryption phase from Line 16     Procedure SFC-Combine0 I, J ? {1, . . . , N}, I ? J = ?.

Inputs : (From DBI) FCI ,  ? k?I  Ck  (From DBJ) FCJ , ? k?J  Ck  Output : FCIJ , ( ? k?I  Ck) ? ( ? k?J  Ck)  Procedure : Encryption phase  1. CCI := ? k?I  Ck; CCJ := ? k?J  Ck;  2. for each site (k, l) ? (I, J) do 3. send Ek(FCk) and Ek(Ck) to the other site l 4. receive El(FCl) and El(Cl) from the other site l; 5. encrypt them and send E(FCl) and E(Cl) to  the other site l; 6. receive E(FCk) and E(Ck) from the other site l; 7. end for  Merging phase 8. SI := ?; SJ := ?; 9. for each site (k, l) ? (I, J) do  10. Sk := Sk ? (E(FCk) ? E(FCl)); 11. for all X ? E(FCl) 12. Sk := Sk ? Closedsetsum(1, X,E(Ck), E(FCl)); 13. end for 14. send Sk to the other site l; 15. end for  Decryption phase 16. FCIJ := ?, CCIJ := ? 17. for each site (k, l) ? (I, J) do 18. receive Sl from the other site l; 19. decrypt and send Dk(Sk ? Sl)to the other site l; 20. receive Dl(Sk ? Sl) and decrypt Dl(Sk ? Sl); 21. decrypt CCk and send Dk(Ck)to the other site l; 22. receive Dl(CCl) and decrypt Dl(Cl); 23. CCIJ := CCIJ ?D(Ck) ?D(Cl); 24. end for 25. FCIJ := freqIJ(D(Sk ? Sl)); 26. return FCIJ , CCIJ ;  Figure 6. Procedure SFC-Combine0  to Line 26 each of the site decrypt the candidate set from the other site. On Line 25 the frequency of each item set is calculated with the method presented in [6].



IV. EVALUATION OF SFC-COMBINE We compare SFC-Combine and SFDM [6], and also a  na??ve method using the multi-party protocol introduced in the next subsection. SFDM is a procedure to obtain fre- quent itemsets from distributed transaction database by using cryptography method, but SFDM obtains not frequent closed itemsets but frequent itemsets unlike our study. We compare them from two points of view. One is a communication cost.

Another is security of protocol. We show summary of the comparison in Table I.

A. A Procedure based on Multi-Party Protocol For evaluate our protocol, we define a method based  on the multi-party protocol. Multi-party protocol [5] is a protocol as follows:  ? Participant i has private information xi.

? The participants compute y = f(x1, . . . , xn). However,  participants know no information about private infor- mation xi of other participants.

Goldreich[5] constructs the multi-party protocol for any logical function f .

We construct a multi-party protocol for computation of SA ? SB(SA,SB ? 2I) ( SA and SB are sets of itemsets).

We assume that every itemset is encoded by constant h bits.

Two sites have a number w which is at least #SA and #SB . Next, we add (w ? Si) itemsets in which itemsets are encoded by h bits of 0 to Si(i = A,B). i-th itemset of SA is denoted by ai(1 ? i ? w). ai is bit sequence whose length is h. From now k-th bit of ai is denoted by a (k) i (1 ? k ? h). j-th itemset of SB is also denoted by  bj(1 ? j ? w), and bj is bit sequence whose length is h.

k-th bit of bj is denoted by b  (k) j (1 ? k ? h).

We can compute SAB = {c1, c2, . . . , cw2} by using AND operation as follows:  for (1 ? i ? #SA) for (1 ? j ? #SB)  for (1 ? k ? h) c (k) (i?1)?w+j = a  (k) i ? b  (k) j  The number of itemsets is w in every Si because we add 0 bit sequence. The reason of adding 0 bit sequence is to conceal the number of itemsets in #SA and #SB . [6] also uses this method.

B. Evaluation of Communication Cost We compare communication costs in the three procedures.

We assume that itemsets and arbitrary encrypted texts are encoded by constant bits.

SFC-Combine At first we evaluate the number of messages generated in executing SFC-Combine. By checking the operation ?send? in Figure 6 we can see that messages are generated on Lines 3, 5, 14, 19, 21 and 29. The total size sm of messages generated by the operator on each line m is as follows:  s3 = O(#FCI +#( ? k?J  Ck) +O(#FCI +#( ? k?J  Ck)),  s5 = O(#FCI +#( ? k?J  Ck)) +O(#FCI +#( ? k?J  Ck))  s14 = O(#SJ) +O(#SI) s19 = O(#SI ?#SJ) s21 = O(#FCI +#(  ? k?J  Ck)) +O(#FCI +#( ? k?J  Ck))     Table I COMPARISON OF PROTOCOLS  SFC-Combine SFDM[6] multi party protocol Output Frequent Closed Itemsets Frequent Itemsets Closed Itemsets  Algorithm Tournament type Parallel type Parallel type Cost # bits O(N#C12...N ) O(N2  ?m+1 k=1  #Cand(k))) at least O(N2wN ) items not in other sites secure secure secure  Security items in other sites secure secure itemsets not in other sites secure secure secure  itemsets in other sites secure  Table II COMPARISON OF THE NUMBER OF COMMUNICATED ITEMSETS  minimum support 1% 2% 5% 10% 20% 50% SFC-Combine 679,238 493,334 321,320 243,030 207,962 198,845  SFDM 721,325,038 177,450,024 27,312,860 4,603,279 432,581 1,240  Moreover on Line 21 messages whose total size is s?21 = O(#SI ?#SJ ) are needed.

Now we show that the sum of all of the above is O(#C12???N ). For each of s3, s5, and s21 the bound is obtained by using the relations FCI ? CI ? C12???N and FCJ ? CJ ? C12???N . The bound of s14 is obtained by using #SJ ? #C12???N and #SI ? #C12???N , each of which is concluded by the relations that SJ , SJ ? CJ ? CI = CIJ ? C12???N . The bound of s9 and s?12 is obtained by SI ? SJ ? C12???N , which is from SI ? C12???N and SJ ? C12???N . From all these bounds, the message size in SFC-Combine0 is bounded by O(#C12???N ). Since SFC- Combine0 is called N ? 1 times in one execution of SFC- Combine, the total message size is O(N ?#C12???N ) bits.

SFDM Let m be the maximum size of frequent itemsets in DB, and let Cand(k) the set of candidates of k frequent itemsets generated from k ? 1 frequent itemsets by the a priori algorithm[1]. It was shown in [6] that the size of commu-  nication bits in SFDM is O(N2 ? ( m+1? k?1  #Cand(k))). The  number of frequent itemsets increases exponentially with small minimum supports[12]. The number of Cand(k) is also large. We expect that the number of communication bits in our method SFC-Combine is expected smaller than that in SFDM with small minimum supports.

The procedure based on multi-party protocol We show that the number of communication bits is O(N2 ? wN ). (w is at least maximum of #S1,#S2, . . . , and #SN .)  First, we show that communication bits in the computation of Si ? Sj (i, j ? {1, 2, . . . , N}) is O(N2 ? w2). We need O(N2) communication bits for one AND computation in the multi-party protocol[5].

Because the number of AND computation is w ? w ? h (h is constant), the number of communication bits in Si ? Sj (i, j ? {1, 2, . . . , N}) is O(N2 ? w2). We calculate  S1 ? S2 ? ? ? ? ? SN from the left sequentially, k-th ? computation (1 ? k ? N ? 1) needs communication of O(N2 ? wk ? w) = O(N2 ? wk+1) bits. The total size is  O(  N?1? k=1  N2 ? wk+1) = O(N2 ? w N+1 ? w2  w ? 1 ) = (N2 ? wN ).

Therefore, we need at least O(N2 ? wN ) bits for the ? computation.

Experimental Results We apply SFC-Combine and SFDM to real data. We use mushroom.dat in Frequent Itemset Mining Implementations Repository2. We divide mushroom.dat into four parts(N = 4). TableII shows the number of communicated itemsets with various minimum supports. The cost of SFC-Combine is smaller than that of SFDM when the minimum support is small. On the other hand, the cost of SFC-Combine is larger than that of SFDM when the minimum support is large.

SFC-Combine communicates CI and CJ even if minimum support is small.

C. Evaluation of Security  We compare security of the three procedures. First, we consider what information other than the output leaks.

Multi-party protocol ensures that no information other than outputs of a site leak to other sites. Based on the property of multi-party protocol it is natural to evaluate, as in [6], the security of a procedure by analyzing which types of information might leak out to other sites.

Consider the execution of SFC-Combine0 between sites SI and SJ and assume that neither of site SI and site SJ do other than the procedure. Then on besides of the output of site SJ , all that site SI can know are as follows:  ? items in ? k?J  Ck which site SI shares with site SJ  (Line 4 of Figure 6).

2http://fimi.cs.helsinki.fi/data/     ? the number of itemsets of size k in FCJ and CCJ for every k ? 1 (Line 4).

3. the size of x ? y for any x ? FCJ and y ? CCI (Line 12).

4. the number of itemsets of size k in SJ for every k ? 1 (Line 18).

5. #SI ? SJ (Line 19).

6. #CCI ? CCJ (Line 22).

In the way similar to analyzing SFC-Combine, on besides  of the output of site SJ , all that site SI in executing SFDM can know are as follows:  ? itemsets which are shared by the two sites.

? the number of frequent itemsets which any number of  sites indexed with odd numbers share.

? the number of frequent itemsets which any number of  sites indexed with even numbers share.

? the number of frequent itemsets which are shared by at  least one site with an odd number and at least one site with an even number  The analysis above is summarized as in Table I.

Now we compare SFC-Combine and SFDM. SFDM can  protect from leak items shared by two sites, because itemsets are encrypted in SFDM while items are encrypted in SFC- Combine. All sites communicates other all sites in SFDM and the multi-party protocol method. On the other hand, SFC-Combine is based on communication between two sites because SFC-Combine is a tournament type protocol.

Therefore, information might leak from the output. We consider SFC-Combine0 between site I and J . We also consider X ? FCI?J . If i ? X is not frequent in site SI , site SI understands i is frequent in site SJ . If X ?? CI , site I understands there exists Y such that X ? Y, Y ? CJ .



V. CONCLUSION  In this paper we proposed a method SFC-Combine for closed itemset mining from distributed databases with pre- serving privacy, assuming that the distributed databases are horizontally partitioned transaction databases. The protocol enumerates all itemsets which globally frequent and closed.

The method is improved with the property that globally closed itemsets is locally closed in at least one private database.

Our experimental results show that SFC-Combine is su- perior to the method proposed by a previous research on the point that the communication cost in SFC-Combine is less than that of previous research. We also compare SFC- Combine with a na??ve method based on the multi-party pro- tocol and confirmed that SFC-Combine is currently superior to the multi-party protocol method in the communication cost.

However, SFC-Combine has the problems that some in- formation might leak on the items which occurs in more than two private databases, and that the outputs might also  leak some information. In order to overcome the problem we are designing an improved method based on the multi-party protocol. Solving the second problem is our future work.

