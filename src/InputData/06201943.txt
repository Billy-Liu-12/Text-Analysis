Fig. 1. The suffix tree for ?ababac$?

Abstract?Pattern matching is an important detecting method of a misuse intrusion detection system. With the increase in the number of rules, the performance of pattern matching algorithm has been a gradually decline and has been a bottleneck. A new type of pattern matching based on suffix tree is proposed. The method mines rule?s data structure and prunes rule set based suffix tree, the model size of the search space has been reduced.

Experiments show, compared to the conventional pattern matching method, it is an effective method to reduce the time of pattern matching, and improves the detection efficiency of intrusion detection systems.

Keywords- Pattern matching; Intrusion Detection; Suffix tree

I. INTRODUC ION Intrusion Detection System (IDS) has become an  indispensable part of the network security system. There are two types of detection technology [1] in intrusion detection system: one is the Anomaly Detection; the other is Misuse Detection. In misuse detection system, when the system receives a new network packet or session process, the new data will be matched with the pre-defined patterns of behavior. If there is a pre-defined patterns of behavior matched successful, the new data will be regarded as an "invasion".

At present, there are several classical pattern matching algorithm [2,3], such as BM, AC, MWM, AC_BM and E2XB.

With the increasing network traffic and rule library, intrusion detection systems had to detect more and more objects, the efficiency of the matching algorithm has be more urgent problem to be resolved. Experts put forward some new methods to improve the efficiency of matching [4,5,6,7], but there were still some deficiencies

II. SUFFIX TREE  in practice. For fast increasing search time of rule matching, a suffix tree-based pattern matching algorithm is proposed. This algorithm mines association rule set and draw simple rules set to construct a descending suffix tree, and effectively reduce the pattern search time, and it improves the efficiency of intrusion detection.

Experimental demonstration shows that the algorithm can effectively improve the efficiency of intrusion detection.

Let S [1..n] = S [1]S [2] ?S [n] be a string of length n on an alphabet A with | A | n. S [n] = $ is a unique terminator which alphabetically precedes all other symbols. The j-th suffix of S is defined as S [ j..n] =S [ j ]S [ j+1] ? S[n] and expressed by Sj  The suffix tree of a String S [1..n] is a compressed trie built on all suffixes of S [8]. It has n leaves, each of which corresponds to a suffix of S. Each label is labeled by a string, called edge-label. The concatenation of labels on a path from the root to a node is called the path-label of the node. The path-label of each leaf coincides with a suffix. For each internal node, its children are sorted in the alphabetic order of the first characters of edge-labels. The leaves are then sorted in the lexicographic order of suffixes. We store the indices j of suffixes S  . A substring S [1.. j ] is called a prefix of T .

j in this order in an integer array SA[1..n]. This is called the suffix array. Figure 1 shows the suffix tree for a string ?ababac$.? Leaf nodes are shown by boxes, and numbers in the boxes represent the elements of the suffix array. Internal nodes are shown by circles, and the numbers in them represent their inorder ranks, which are defined later.

The string-depth of a node is the length of the string represented by the node, while the node-depth of a node is the number of nodes on the path from the root node to the node, including itself and excluding the root node.

Suffix links are defined for all internal nodes, except the root node, The suffix link sl(v) of an internal node v with path-label x , where x denotes a single character and  denotes a possibly empty substring, is the node with path-label .

Suffix links are not only necessary to construct a suffix tree in linear time but also solve problems efficiently, for example finding the longest common substring of two strings in linear time.

A suffix tree is decomposed into five components: string, tree topology, node-depths, edge-labels, and suffix links. A basic representation is the following: String is the string S, which is encoded in n lg|A| bits. Tree topology represents  This work is completed under the support of the 863 Project of China (No.

2009AA043507) and the National Torch Plan of China (No. 2008GH531170).

parent-child relationships of nodes and consists of O(n) pointers, which occupies O(n lg n) bits. Node-depths store the string-depth for each internal node in n lg n bits. An edge-label between internal nodes is represented by a pointer to the string in n lg n bits. Note that the length of the edge is computed from node-depths of both endpoints of the edge. An edge-label between an internal node and a leaf is represented by the suffix array of S, which occupies n lg n bits. Suffix links are pointers between internal nodes and are represented in n lg n bits.



III. DESCENDING SUFFIX TREE-BASED PATTERN MATCHING ALGORITHM(DST_PM)  On string searching and matching in the rules set, if a rule is a frequent item, then it?s any substring set is frequent. The suffix tree based tree structure is used to search through space for frequent patterns, and to judge the resulting of closed mode.

Then search space will be reduced by cutting branches, in order to avoid generating larger candidate rules items, while the link will be generated as suffix between the nodes. Thus, the rule base structure will become smaller and more efficient under the mining process in the search.

Finally, complete content and organizational editing before formatting. Please take note of the following items when proofreading spelling and grammar:  A. Definitions Set a collection of items I={I1 I2 IN} and  transaction data set T={T1 T2 TN}, Ti I, Ti is a transaction of I. Transaction T contains item set X, if and only if X T. In the transaction data set T, the number of item set X of T is called supported count, denoted by count (X). Support of X is expressed as support (X) = count (X) / N, where N is the total number of transactions in T. Given transaction data set T and the minimum support threshold min_sup, item set X is frequent if and only if support (X) min_sup. Search in the transaction data set can be described as mining problem: Given a transaction database T and the minimum support threshold min_sup.

Definition 1 Given a transaction database TDB and the minimum support threshold min_sup, Item set X is closed mode, if and only if the following two conditions hold:  1) item set X is frequent;  2) Y X, Meet the support(Y) support(X).

Definition 2 Given a transaction data set T and the minimum support threshold min_sup, when X and X Y is closed mode, the rules X Y as a closed model that's based on simple association rules.

Definition 3 Descending Suffix Tree (DST) is a clue to the tree, defined as follows:  1) DST contains a root node, with null tag, each node in the tree as subtree is a child of the root. Subtrees do not contain the root node, and support with a large node closer to the roots.

2) Each node contains a subtree suffix field, which is a pointer pointing to the suffix chain. The chain contains itemsets  in the current study issues arising from items. This field is initially set to null.

3) Support descending suffix tree is a trail tree. All nodes with same item value are horizontal pointer is linked together to form a node chain. There are two arrays, link-head and link-head [item], pointed to the value of the tree with the first node, and total [item] records the node count of node chain.

4) With the mining in-depth search, DST continuously adjusts to form a new leaf node and the suffix node chain, Also updates and sets up each leaf node of the suffix.

B. Mining and pruning rules based suffix tree In search of the entire rule space, descending suffix tree  may cut off non-closed candidate, and detects the common suffix item, then clears non-closed mode. When the search finished digging an item, it will delete the corresponding nodes or links into the suffix, do not need to do additional operations.

While the suffix tree creates nodes it needs to set the suffix chain.

1) rules mining process In mining process, set CF (im, ..., i2, i1) (i1 i2 im)  indicates that the search excavation, resulting in item set {i1 i2 im} for the beginning of the candidate frequent closed patterns set. When the CF(im i2 i1) is set to null, then all the smaller items i i1, non-empty set CF (im i2 i1  When candidate simple rules set is created, sub-frequent closed patterns and frequent closed patterns will be generated in closed patterns. Then it should be calculated it?s confidence, and form a simple association rules, then put forward. As the mining process, intermediate candidates closed mode need not to be saved, and mining results generated in accordance with the order of items, so only a small amount of simple candidate association rules set will be saved.

)is recursively empty.

2) item pruning process When an item is assessed, if the public item found in this  node chain, it will be cut down. When item e is assessed, if the suffix contains the public item f, in the current mining, including the term f must contain e; f can not be composed of longer closed mode, then it should be cut.

When the suffix tree has finished mining an item, it merged all assessed nodes to form the suffix chain, without re-creating the suffix chain of the parent node. If the parent suffix chain is empty, put the current node and its suffix links as parent?s suffix. When a candidate creates suffix tree and sets the suffix, the common suffix item appeared in original suffix tree will not be copied. With the deepening of mining and branches, the suffix tree becomes smaller and simple.

3) Algorithm steps Start: Create a descending suffix tree (DST), Loop: DST proceeds as follows: step 1: Traversal query DST, obtain the most pending  frequent items ik, and set CFCS =     Fig. 3. Compare with memory consuming  Fig. 2. compare with on time consuming  step 2: If ik suffix node is not exist in common item, then all the same conditions is set as csi, and insert ik to create : CFCS = .

step 3 if there is other uncommon items im in csi, then a ne condition DST (ik, im) will be created for im.

step 4 each item of CFCS inserts into the csi; step 5 all current simple association rules are created; step 6 the nodes of items im

IV. SIMULATION EXPERIMENT  are chained into the DST.

Our experiments use the data source from the KDD'99 DARPA intrusion detection evaluation data [9]  1 DoS(Denial of Service): such as ping-of-death, SYN flood, land.

, the data set consists of about 500 million training set and 30 million detection set. The data set includes four types of attacks:  2 R2L(Remote to Local): such as guessing password.

3 U2R(Unauthorized access to Root): such as  buffer-overflow.

4 Probing: all kind of port scanning and Vulnerability  Scanning, such as port-scan, ping-sweep.

A. Experiment 1 testing algorithm performance on time consuming  To test the performance of algorithm?s time consumption changed with the number of rules, our algorithm(DST_PM), AC algorithm, and BM algorithm take experiment with rule?s number increasing with 500, the result shown in Figure 2,   As shown from Figure 2, BM algorithm is a single pattern matching algorithms, time consuming was fast-growing with the number increasing of rules. AC and DST_PM, reflecting the better performance, take more peaceful on time consumption growth. But DST_PM compared with AC has better performance.

B. Experiment 2 testing algorithm performance on memory consumption To test the performance of algorithm?s memory  consumption changed with the number of rules, DST_PM, AC algorithm, and BM algorithm take experiment with rule?s number increasing with 500, the result shown in Figure 3.

Memory consumption performance of the three algorithms, BM does not use complex algorithms to preprocess the data structure, so its space consumption is minimal. Compared with AC, DST_PM spent more memory consumption because it should convert the original rules set into rule suffix tree.



V. CONCLUSIONS A simple suffix tree-based pattern matching algorithm was  presented. It adopted rule set?s mining and pruning mechanism based on the suffix, shown an effective rules item pruning, and generated a clean association rule set with avoiding duplication of data sets. Thus DST_PM improves the matching algorithm efficiency on time consumption. Tested by experiments, our algorithm can improve the efficiency of matching time in IDS.

There was a shortcoming on the increase in space consumption, which would be the focus of our further study.

