iSocialMash: Convergence of Social Networks and Services Composition on a  Mashup Framework

Abstract?Facilitated by advanced Web technologies, service mashups are currently popular for composing new value- added applications. Mashup developers might often struggle to locate the relevant and appropriate services to satisfy their dynamic and personalized requirements . This paper proposes the concept of iSocialMash, a framework that assists the rapid, on-demand and intuitive composition of service mashups, by leveraging social networks. There two key observations guiding the development of iSocialMash. On the one hand, social networks can capture both common interests and personal preferences of different users in the same or similar application contexts; they might use similar candidate services and glue them together in similar manner. On the other hand, social networks can identify potential value-added composition of mashups; different users might have complementary collaboration opportunities for newly emergent goals.

iSocialMash exploits the successful experiences of social networks to provide users with useful composition recommendations (such as missing or potentially proper services as well as connections between them). Capturing such composition knowledge, the users are presented by a set of ranked recommendations from which they can choose for their personalized needs. In iSocialMash, the data model leverages the social tagging to enrich the semantics and simplify the presentation and extraction of composition knowledge. We model the composition knowledge into some mashup patterns to accommodate different social networks interactions, and generate on-the-fly recommendations according to user personal requirements. We also experimentally evaluate the efficiency of our approach and present the current status of the prototype.

Keywords-services composition, social networks, mashups

I.  INTRODUCTION With the wide adoption of Services Computing and  recent innovations of Web 2.0, it promotes the newly emerging applications that are called service mashups [1], or mashups, over the World Wide Web. Generally speaking, service mashups compose existing Web resources by utilizing a set of Web-delivered services, such as SOAP Web services, RESTful Web services and RSS/Atom feeds.

Mashups often aims at meeting situational requirements, and it encourages a light-weight and quick-rollout development lifecycle [2].  Therefore, it is a significant issue to make mashup development as simple as possible, particularly for those less/none professional programmers or even end-users.

* corresponding to: liuxzh@sei.pku.edu.cn  The key steps of mashup development remain the same as in traditional service composition: how to discover appropriate services with respect to user?s needs, and how to compose them correctly and quickly. In recent years, there has been a large body of research works for mashup development. Some promising solutions have been made, in terms of enabling end-user development process as well as providing easy-of-use tools[3][4][5]. However, in our opinion, these efforts might not fully accommodate the latest trend of Web. The Web is now undergoing a change towards the ?user-centric? environment, where millions of users can participate and collaborate for their own interests and benefits. Particularly, social networks tremendously encourage the user?s proactivity and promote the popularity of Web applications. Both providers and end users (including non-expert users) can easily and freely share interests, advice and experience over the Web, which in turn improves the efficiency and quality of Web resource creation. We argue that, it brings us a new perspective for facilitating mashup development: social networks can serve as an additional ingredient to current mashup development. Two important observations can be found.  Firstly, social networks can capture some useful and reusable knowledge or experiences in the same or similar application contexts. Different users might use the same or similar candidate services and glue them together in the similar manner. For example, when making a travel plan, most of users might compose services such as Hotel, Airline, Restaurant and Maps. Secondly, some potential composition might be found considering the complementary collaborations between users.  For example, when a user shares a mashup including services PhotoPublish and Maps, which can display the picture of a place (such as a park), and locates the place on the map.

Another user (who might be a friend) might add the PostTwtitter service to this mashup, which provides value- added information.

In this direction, we aim at weaving social elements and factors into service mashups development. In our previous work, we proposed the iMashup[6][7]. In a nutshell, iMashup provides mashup toolkit including component model, composition model and a browser-based composition runtime. iMashup integrates the tag-based semantics for simple and flexible annotations of services[7].  Based on iMashup, this paper proposes the iSocialMash framework.

Leveraging experiences from social networks, iSocialMash extracts the knowledge about services that have been successfully selected in existing mashups by other users (i.e, the information about the contexts in which certain    combination of services were considered most appropriate), and also attempts to retrieve potential composition opportunities (i.e, the complementary collaboration information from users). iSocialMash categorizes and represents the knowledge within some mashup patterns, and recommends the ranked relevant candidate services in the mashup development.

In this paper, we focus on the definition and modeling of iSocialMash framework. More specifically, we make the following contributions:  We propose a novel mashup development perspective by converging services computing and social computing, and present meta-data model for representing composition information with social tagging;  We specify the types of composition knowledge according to different social interaction context;  We describe mechanisms to extract the composition knowledge into a set of mashup patterns;  We present an empirical evaluation on the effectiveness and efficiency of the proposed framework, and briefly discuss the current status of the implementation.

The paper is organized as follows. Section 2 describes the concepts, principles and preliminaries of iSocialMash framework. Section defines the meta-data model of composition knowledge in mashup applications. Section 4 explains how to extract the knowledge into a set of mashup patterns. Section 5 evaluates the proposed framework with empirical experiments. Section 6 shows the current status of implementation. Section 7 ends the paper with concluding remarks.



II. CONCEPTS, PRINCIPLES AND PRELIMINARIES  A. Concepts and Principles of iSocialMash  Mashups usually aim at the situational problems that  require quick-rollout development process. Most of mashup developers are non-professional programmers or even end- users. They often benefit from mashups that are created by others. In this way, mashup developers are very typical prosumers. One observed fact is that, there have been more than 5,000 mashups published and shared on the ProgrammalbeWeb, which is the most famous mashup portal.

As shown in Figure 1, iSocialMash can be viewed as a convergence of services computing and social computing research. The core principle of iSocialMash is to apply knowledge from social networks to improve mashup development. Two views are held in iSocialMash. On the one hand, iSocialMash emphasizes on harvesting more accurately labeled data (e.g., social tagging) and deriving metadata from both previous mashups and social interactions around mashups. Then composition knowledge will be consolidated into some mashup patterns (e.g., data-mapping and co-occurrence of services/components), and used to recommend candidate services or solutions to users. On the other hand, iSocialMash also focuses on the social behavior and dynamics over the mashup development. We can  perform the social networks analysis based on collaboratively annotated tags of mashups. For example, consider the case that Lucy and Mike are friends with common interests such as travel. When another user, e.g, Tony, adds a new service PostTwitter and some new tags over Lucy?s existing mashup, can we conclude that Tony might be a friend of Mike? If so, can we find some potential collaboration opportunities between them to develop a new value-added application?

Figure 1 Concepts and Principles of iSocialMash   In this paper, we mainly focus on the first view of iSocialMash, which aims at social-empowered mashup development. The basic tasks are of two aspects: (1) extracting and representing the useful composition knowledge by leveraging social networks; (2) applying knowledge to assist mashup development for a given partial application in a specific context.

B. Preliminaries Before introducing iSocialMash, we present some  background concepts used in the remainder of the paper, namely mashup component model, mashup composition model, composition runtime and tag-links, to make the paper self-contained.

In our previous work, we develop the iMashup toolkit, which provides the concepts above as well as their implementations. Mashup component model is a unified model that specifies common properties and behaviors of popular Web-delivered services, including SOAP/REST Web services, RSS/Atom feeds, at both application and presentation level.  Such a component model alleviates developers from tedious work on dealing with heterogeneity in ad-hoc manner. Particularly, mashup component model allows the tag-based annotations to describe the programmatic inputs and outputs. For example, the WeatherForecast component may be annotated by tags {city, state} as inputs and {temperatureF, humidity, sunny, rainy, windy} as outputs. Such tag-based annotations enrich the semantics and provide a simple manner to understand service capabilities. How to associate the tag-based semantics to mashup component model is defined in [7]    Mashup composition model specifies the composition logics for a set of mashup components.

With the tag-based semantics, when the tags one component produces, are semantically equivalent to those another components can consume, there might be a composition opportunity in terms of ??tag-based?? data flow, which is called tag-link.  For example, the LocalSearch component can generate tags {address, postcode} as outputs, which the WeatherForecast component can consume as inputs. Here we assume that the composition semantics are determined by predefined tag-based ontologies (which are usually named ??folksonomies?? in social networks).



III. META-DATA MODEL OF THE FRAMEWORK As mentioned above, mashup composition model only  describes the services that are composed in a mashup application, as well as their relationships. However, for the same mashup applications, different users might have different preferences and application context (i.e., for a travel mashup, the user?s timezone, geographical position, local currency, type of Web browser, may be relevant).  We argue that, in the social networks environment, such information might be very helpful to assist mashup development.

We introduce the concept of mashup task, a data structure which captures the information about the preferences and contexts of a mashup application that have been successfully used [7]. To keep the consistency with iMashup toolkit, the meta-data is also annotated by tags in iSocialMash. Formally, we can represent a mashup task in the tuple <mashup_task, user, time, tags>, which means that the task is created by a user at some time (since the user and time are very important information in social networks), and can be described by a set of tags. Mashup task can be consistently transformed into the mashup composition model of iMashup (or vise-versa),  and  the composition logics are described in terms of tag-links.

A. Composition Information of  Mashup Tasks The information of mashup task can be specified as  follows. The service_seletected attribute presents the components or services that are selected to compose the mashup task. For example, the Milan_Travel_Plan_John_July072011 mashup task consists of services Yahoo!  HotelSearch, Yelp FoodSearch, Yahoo!LocalTraffic and GoogleMap. For each service/component, we also express the inputs/outputs as a set of pairs <inputs/outputs, {t1, t2, ?}>, where ti is a tag belonging to a predefined tag-based ontology T defined in [6].

Suppose that there are two mashup tasks for the same goal (travel plan in Milan city), Milan_Travel_Plan_John_July072011 and Milan_Travel_Plan_Lucy_Aug022011 are created by John and Lucy respectively.  As John and Lucy might have their own preferences and contexts, they select very preferred services to compose the mashup tasks. The composition logics might be slightly different. For example, after finding  the hotel and restaurant, John prefers to locating their driving direction by Yahoo! LocalTraffic and publishing his own travel experiences by WordPressBlog, while Lucy prefer to visiting some spots (e.g., the Church of Duomo) by Yahoo!

LocalSearch and viewing the pictures by flickrPhotoSearch.

However, some useful information should also be identified.

These two tasks have some shared services (e.g., Yelp FoodSearch and GoogleMap), which might reflect the common interests for they are often selected simultaneously.

Some services are mutually substitutable, e.g., the Yahoo!

LocalSearch and HotelSearch, as they provide equivalent functionalities.

B. Social  Information of  Mashup Tasks To help the search for the mashup task, we propose the  notion of context_annotations, which identifies the context information of a mashup task. The context might be the actual values of the specific inputs/outputs (e.g., Milan for the city name); or an environmental context (e.g., hardware and software characteristics of the user?s devices).

Context_annotations attribute is also specified in a pair of tags, <context, {t1, t2, ?}>.   With simple tag-based search, other users can query personalized mashups that have been executed and shared by others in a certain context.

Social information is a specific type of contextual information. We enrich some social informational attributes around the mashup task. The social_relaionthip attribute represents a group of users with whom a single user maintains some social relationships, for example, friend, business colleague, family, competitor, common interest.

The reputation identifies the ranking level of a specific user whose shared mahsup task is published on iSocialMash.  For example, Mike is a friend and business colleague of John, but Lucy holds closer relationship. We can simply conclude that Lucy?s mashup taks might take heavier weight when Mike plans a trip in Milan.

Considering the social_relationships above, (partial) mashup tasks can be assigned with some social interaction policies by their owners. The social interaction policy can be represented as <policy, with_user, goal, scope>, which means the policy is assigned to the designated users under a specific goal (e.g., travel plan). The scope attribute allows the task owners to identify the policy with partial (some services or some fragments of the task) or full (the whole task). The social interaction policies might include sharing, competition and collaboration.

Sharing: the sharing policy means that the mashup task can be shared with other users for the goal.

Competition: the competition policy means that the mashup task might compete against other users for the goal in case of selection. Most of time, competition implies that the services or tasks might be functionally similar and substitutable with one another.

Collaboration: the collaboration policy means that the mashup task might collaborate with other users for an emergent goal. For example, when Mike plans a trip to Milan, he might add the flickrPhotoSearch (used by Lucy) for finding some    pictures of the Duomo Church, and submit the picture to WordPressBlog (used by John).



IV. COMPOSITION KNOWLEDGE RETRIEVAL FOR MASHUP PATTERNS  We put forward to the concept of mashup patterns, which are extracted from different perspectives.  Patterns are structured composition knowledge that can be reused.

Patterns can be delivered to the users as recommendations, for completing given partial mashup applications.

A. Frequent Data Value Pattern The Frequent Data Value pattern is common and simple  in most cases. IT indicates the most possible value of given inputs/outputs parameter of a service. For instance, the AirChina will always generate the flight information like ?airline company name? (CA) plus ?number?, and Yahoo!

LocalTraffic might often use the current location as the default origin.  In iSocialMash, we find that the frequent data values of a service are very relevant to the users? context. So we can easily investigate the context_annotations and generate such pattern using statistical approaches.

B. Co-occurence Pattern Co-occurrence pattern indicates the pairs of components  or services. For instance, most of time, Yelp FoodSearch and GoogleMap are often selected in travel plan task. To retrieve the co-occurrence pattern, we firstly leverage the service mining techniques defined in previous work [6] to find association rules of services and mashup tasks. We similarly use such definition to annotating a service like <service, user, time, tags>. Here the tags might be from service_selected and context_annotations. We then apply the association rules to find the co-occurrence of two services.

Let 1 2{ , ,..., }mI t t t= be a set of tags. To reflect the co- occurrence, we then apply data mining approaches to discover tag association rules. The association rule of tags can be represented asm i jt t?  where both it  and j It ?  .

To achieve this goal, we apply the following steps. For each mashup task, we generate all possible tag pairs ( it , jt ), where: it  and jt  are two tags annotating two different services used by the mashup task. Assume that it  is annotated to one service, and jt  is annotated to the mashup task itself. We construct a base of all generated tag pairs.

Each pair is assigned a count, representing the number of mashup task where the pair is encountered. These counts are used to calculate support and confidence metrics for each pair. By repeating this process for each mashup task, we have all extracted tag pairs. This enables us to calculate the support and confidence for each pair by tracking its repeatability. When we get all the tag pairs in such bottom- up manner, we apply the hierarchical tag-based taxonomy T derived in [6] to determine the semantic concepts of tags.

For example, tags such as ?maps?, ?mapping?, ?gmap? are clustered into the same concept. Finally, we generate association rules. Each association rule discovered between these concepts is an indication of how frequently users integrate the concepts into mashups.

The co-occurrence pattern may have significant benefits when there are a large number of services and mashups to select. We can use the discovered patterns in recommending mashup candidates from a set of services, based on their tags.

For each two services in the set, we can generate a list of tag pairs from all ?semantically shared? tags annotating the two services. With the knowledge of association rules, we can assign a co-occurrence score to the two services, based on the collective support and confidence values of their generated tag pairs. In this way, when a user chooses a service we can recommend a list of services to use in mashups, ranked by their co-occurrence score.

C. Data Mapping Pattern The Data Mapping Pattern indicates the data  dependency of two services. Such a pattern can match two services both syntactically and semantically. We mainly focus on the semantic level mapping. In our previous work [7], we have proposed a tag-based service model, which associates the service input/output parameters with a set of tags. The tag-based data mapping pattern is defined simply as the result of creating a sequence of tags, namely Tag Link (TL) as follows.

TL = . Each service is represented as a tag-basd tuple ,i ok kT T< > , where  i kT and  o kT are tags representing the inputs and outputs of a service  respectively. For ?k, the following two contraints should be promised.

The above definition indicates the data mapping between  services: subsequent services may use the outputs produced by preceding services as inputs. Such data dependencies are described in terms of tags. The first precondition ensures the semantic mapping and propagation between services, where  't t? means that t? is a sub-class of t (i.e., IBM ? company).

The second precondition ensures that no extra parameters are left.

The co-occurrence pattern only indicates the two services are usually selected together, but does not identify their relevance at composition level. However, the data mapping pattern can assist the users to find the services that can be composed given the current outputs. In[7], we have proposed a graph-based,  forward-backward search algorithm. It allows the users to represent their desired outputs given their initial inputs, and retrieves all tag-links from a large number of services.

D. Substitution Pattern The substitution pattern indicates that two services are  mutually substitutable, for example, the Yahoo!

LocalSearch and HotelSearch in Section 3.   Most of the time, the substitution pattern implies the two services are functionally equivalent. With this pattern, when one service fails, the other service can replace for continuously functioning.  In [6], we have proposed an approach to    determining whether two services are similar, by investigating their operation, inputs/outputs at semantic level.



V. EMPERICAL AND EXPERIMENTAL EVALUATIONS In this section, we will evaluate the effect and efficiency  of the mashup patterns. We select tags of Programmableweb as our data set. Progrmmableweb is a well-known mashup portal, which has hosted more than 5,200 mashup applications together with over 2,100 services or APIs until July, 2011. We have crawled 32,345 tags and filtered those redundant ones. Finally we had a data set of 18,051 different tags. Applying the annealing algorithm for tag clustering and the EM processing, we have attained 522 clusters such as hotel, geography, weather, search, map, etc.

A. Evaluation of Co-Occurrence Pattern Firstly, we evaluate the co-occurrence pattern. We  generate the association rules of tag pairs and consider their semantic relationships. Figure 2 illustrates the co-occurrence frequency of all services crawled. Each vertex represents a service. The size of the vertex implies the service popularity.

For example, in our experiment study, GoogleMap and Twitter are much bigger than others, which is consistent with the fact on Programmableweb. Once an edge exists between two services, it means these two services have co- occurred at least once. The distance between two vertices implies their co-occurrence frequency. In our experiment, we find that GoogleMap is often coupled with Yahoo!

Search and flickr.

Figure 2 Regular Co-Occurrence Pattern  Although results in Figure 2 can help users find the most popular service as well as their most frequently co-occurring services, we argue that, there are yet some troubles when browsing such a large size of services. Therefore, we further consider the social information around the mashups. We consider the users to control the distribution. We utilize 934 member profiles that have complete information on Programmablweb. We try to study the relationships of user, services, and tags. Figure 3 shows the results. We can clearly see that the distribution converges that in Figure 2.

More specifically, we find that, users with similar background (for example, from the same area recorded in the profile), may have similar preferences or behaviors to choose services that co-occur. For example, when selecting GoogleMap as the initial service, 137 of 222 users from US choose flickr at the same time, while 29 of 52 users from  Korea choose eCommerce such as Amazon. Therefore, such the result is consistent with the fact that people, who have similar ideas in groups, are most likely to have similar behavior and tend to have the common favorite services and mashups.

Figure 3 Co-Occurrence Pattern with Social Analysis    B. Evaluation of Data-Mapping Pattern To evaluate the data-mapping pattern, we conduct  experiment by testing the outputs produced given a user inputs. We attach tag-based semantics to 200 services in the dataset. Then we set up a series of experiments to evaluate the concept coverage of tags. Twenty users arbitrarily search their outputs on our system, and we check how many of their desired outputs or relevant interested ones are captured by the data-mapping pattern.

Figure 4 Data-Mapping Pattern Evaluation  Top-k in Figure 4 means the k ranked solutions including their desired outputs sorted by the descending order. We can clearly see that in the Top-5 curve, about 80% of all users have all their desired or relevant outputs in the Top-3 recommendations, and about 10% users have more than 90% desired or relevant outputs. The same observation holds for the Top-5 plot where 78% of the users can discover more than 90% of their desired or relevant outputs covered by the our data-mapping. Although only 68% of all users are satisfied with 75% results from Top-10 returned plans, we argue that the results are acceptable, for the users are more likely to prefer less than five options.

C. Evaluation of Substitution Pattern The efficiency of substitution pattern is determined by  the function similarity of two services, in aspects of operation, inputs and outputs. We choose the keyword search and schema matching approach for comparison. Figure 5 illustrates the R-P curve of the three approaches. Obviously, our approach beat the other two. In iSocialMash, we try to attach the underlying semantic concepts to the input/output, based on the derived tag-based taxonomy, and evaluate the    concepts to improve the results. Schema-matching also has very low precision, for it only considers the XML structure and the distance between nodes in the tree, while lack of the underlying semantics. Keyword-based approach, is the lowest, for it only matches the keyword from the user?s requests, and the results are coarse.

Figure 5 Substitution Pattern Evaluation

VI. SYSTEM DESIGN AND IMPLEMENTATIONS The overall architecture of iSocialMash framework is  presented in Figure 6. There are three components, respectively named as iSocialMash Infrastructure, Service Advisor, and iMashup toolkit. As mentioned above iSocialMash is built upon our previous work, the iMashup Toolkit. iMashup has provided a browser-based visual environments supporting mashup development. The users are allowed to drag-and-drop services on canvas, make some configurations and execute the application. The browser-based runtime can interpret the composition logics and display the on-the-fly results.

Figure 6 System Architecture of iSocialMas Currently we mainly focus on the issues of iSocialMash  Infrastructure, including the repository of mashup tasks, mashup patterns and social networks management.

iSocialMash Infrastructure provides interfaces for users to publish and share services and applications. The mashup tasks repository keeps track of all services and mashup tasks to facilitate the search of resources. The Tag-based Taxonomy is derived from the tags of mashup tasks, and facilitates the generation of mashup patterns.

Social networks management records the users registered on iSocialMash, and their relationships. Currently, we assume that the initial relationships among social network agents are formed through invitations. The social networks  management performs two main tasks: (i) building and maintaining the list of users with their mashup tasks meta- data; (ii) forwarding the request by the Service Advisor, collecting the results and relaying them.

Service Advisor facilitates the users to retrieve the composition recommendations for their desired goals. The User Agent captures the current contexts in given partial mashup and dynamically recommends candidate solutions based on mashup patterns by Composition Planner.

Coordinating with the iMashup Toolkit, Service Advisor can result in the changes of user interface. Such process can be iteratively performed until the user finishes his desired mashup.



VII. CONCLUSION REMARKS In this paper, we propose the iSocialMash framework by  weaving social elements and factors into service mashups development. We propose a novel mashup development perspective by converging services computing and social computing, and present meta-data model for representing composition information with social tagging. We specify the types of composition knowledge according to different social interaction context, and describe mechanisms to extract the composition knowledge into a set of mashup patterns. Empirical and experimental evaluation shows the efficiency and effects of our approach.

ACKNOWLEDGEMENT This work was supported by the National Basic Research Program (973)  of China under Grant No. 2009CB320703; the National Natural Science Foundation of China under Grant No. 60821003 and 61003010. The authors would like to appreciate Prof. M. Blake from Notre Dame University, for kind and valuable suggestions.

