An Efficient Algorithm for Detecting Closed Frequent Subgraphs

Abstract   In this paper, aimed at the problem of detecting  closed frequent subgraphs in biological networks, an improved FP-growth algorithm MaxFP is presented, which is based on the simplification model appropriate to biological networks. The defects of the algorithm based on item-set mining are analyzed when it is applied to biological networks, and which is overcome in MaxFP.

In addition, MaxFP also takes the biological network characteristics into account. Experiment results show that MaxFP runs faster than the algorithms based on Apriori, and MaxFP not only detects maximal frequent subgraphs, but also finds more frequent subgraphs having biological meaning. The results got by performing Apriori based algorithms many times can be got by performing MaxFP once.

1. Introduction   Molecular biology progress from sequence to biological networks, have resulted in a new generation of experimental data that entails the relationships and interactions between biomolecules[1,2]. These data are frequently abstracted using graph models, such as protein interaction networks, gene regulatory networks, signal transduction pathways and metabolic pathways.

Efforts aimed at mining frequent patterns in such networks have been motivated by significant advances in the understanding of genomics and have been the focus of considerable research attention.

The classical algorithms for mining biological networks frequent pattern are AGM[3] and FSG[4]. These two algorithms all adopt well-known Apriori algorithm[5],  mining frequent subgraphs by candidate-test technique.

Because node have the same label inevitable in biological networks, Apriori computing candidate subgraphs usually produces isomorphism subgraphs, needs to spend massive time to removing isomorphism subgraphs. Following algorithms improved by developing more efficient canonical representations that help in reducing redundancy in candidate generation along with several optimization techniques to help pruning out the search space more efficiently. such as MULE[6] merged nodes in the graph with identical labels and developed a depth-first enumeration algorithm based on backtracking. Codense[7] transformed frequent subgraph mining problem to fully connected subgraph mining problem in quadratic graph.

Mining closed frequent pattern instead of all frequent patterns may satisfy the need of biological research[8].

Employing graph simplification model suited to biological networks, this paper proposed an innovative algorithm MaxFP to mining closed frequent subgraph.

Applying the FP- tree structure in the graph theory, our algorithm utilizes improved FP-growth[9] to mine closed frequent subgraph in biological networks.

2. Model and related definitions   This paper takes metabolic pathway as its object.

Metabolic pathways characterize the process of chemical reactions that, together, perform a particular metabolic function. They are chains of reactions linked to each other by chemical compounds (metabolites) through product-substrate relationships. A natural mathematical model for metabolic pathways is a directed hypergraph in which each node corresponds to a compound, and   DOI 10.1109/BMEI.2008.187    DOI 10.1109/BMEI.2008.187       each hyperedge corresponds to a reaction (or equivalently, an enzyme)[10]. The direction of a pin of a hyperedge indicates whether the compound is a substrate or product of the reaction. Figure 1(a) illustrates the directed graph model for metabolic pathways. In the pathway, enzymes are shown by rectangular boxes while metabolites are shown by ovals. Two metabolites interact through the enzyme. The relations of the two metabolites are expressed by the direction of hyperedge.

Figure 1. Directed graph model for metabolic pathway  The goal in mining metabolic pathways is to discover frequent common motifs of enzyme interactions that are related to each other. The researchers omit metabolites, because they are interested in relationships between enzymes. It is possible to replace aforementioned model by a simpler directed graph. In such model, enzymes correspond to nodes of the graph and a directed edge from one enzyme to another indicates that a product of the first enzyme is a substrate of the second, as is shown in figure 1(b). In metabolic pathway, an enzyme may show up more than once in the same pathway, implying that this enzyme takes part in the whole process at different time instants. The implication of this fact on graph model is that more than one node of a graph (pathway) might have the same label (enzyme). The researchers mining frequent subgraph in metabolic pathways are not interested in the structure temporal relationships but only care about general relationships between pairs of enzymes. One may merge nodes in the graph with identical labels, and simplifies models. For example, the enzyme 2.7.1.2 participates in two interactions in figure 1(a), merges them in figure 1(b).

In biological networks, it can not cause the subgraph isomorphism with unique node label model which can simplify mining graph problem[6]. In the simplified model, uniqueness of nodes implies unique labeling of edges, providing us with the opportunity of reducing the problem to frequent subgraph mining by specifying edges as fundamental data units.

The related definitions as follows: DEFINITION 1. Given a collection of graphs G1,  G2, ??, Gn and support threshold ?, if one subgraph appeared in n? graph, n??n, n?is the support sup of this subgraph. The subgraph is frequent if n????  DEFINITION 2. If one frequent subgraph X has not been contained by other frequent subgraph Y have same  support. i.e. there is not ? X ? Y if sup(X)=sup(Y), define X is closed.

The set of closed frequent subgraph has contained some subsets of the set of maximal frequent subgraph [9].

Maximality of discovered subgraphs in biological networks is enforced in order to avoid redundancy.

Closity can simplify graph mining problem than maximality, and conform biological characteristic.

3. Algorithm  3.1 Related Work   MULE, applying the subgraph connectivity, reduces the size of candidate sets by improving Apriori. But it can not solve the performance battleneck of Apriori.

Apriori may suffer from the following two nontrivial costs: It is costly to handle a huge number of candidate sets. It is tedious to repeatedly scan the database and check a large set of candidates by pattern matching. So the demands of space and time are great in Apriori and Apriori-like algorithm that it is unable to meet demand of the large-scale data computing.

It is not difficult to find that FP-growth can solve the problem of Apriori by comparing these two algorithms.

FP-growth does not generate the candidate sets and scan the database only twice. It can largely reduce the space and time of computing. Although FP-growth has many advantages, there are some problems when being applied to mining closed frequent subgraph. The result of FP- growth is not the closed frequent subgraph sets. FP- growth will cost much time and space to test all the combinations of single-path for mining long pattern.

Using the FP-tree for frequent item-set, the connectivity of the result subgraphs is not guaranteed.

3.2 The MaxFP Algorithm        Aimed at the abovementioned problem, this paper presented a MaxFP algorithm. Firstly, we get a group of metabolic pathways from the database and transform them to a group of connectivity graphs. Secondly, we create the FP-tree for these graphs [11]. After the previous two steps, we transform mining frequent pattern problem in graph database to mining FP-tree problem. Thirdly, we construct their conditional pattern bases by identifying the frequent 1- frequent pattern (initial suffix pattern). Then, we create the condition FP-tree for the conditional pattern base[11] and mine this tree recursively.

We generate the frequent pattern by mining the condition FP-tree. The pattern is grown by connecting the suffix pattern to the frequent pattern.

When mining the FP-tree in FP-growth, we need consider all the combinations of single-path. Because the frequent subgraphs that are biologically significant in the biological networks are connective, they are always the long patterns. MaxFP improves FP-growth algorithm and presents a new concept of high-variety combination ?: Let set A is the set of all combinations; the set B is the  set of all ?. B ? A. There is a combination a?A, if there is no combination b?A, and a ? b, sup (a) = sup (b), then the combination a is a high-variety combination.

For example: (AS:19; SS:17; SA:17; AG:15) is a path P, then the high-variety combinations in the P includes {AS,SS,SA,AG:15}, {AS:19}, {AS,SS,SA:17}, i.e. the sets of closed frequent pattern which supports  are varied and all larger than or equal to the support threshold. In this way, it is effective for mining a long single-path and will not miss the combinations of biological significance.

The following is the description of MaxFP.

Algorithm: MaxFP. Mining frequent subgraphs  based on FP-tree structure and pattern growth technique.

Input: A group of metabolic pathway graphs and a  minimum support threshold ?.

Output: A set of frequent subgraphs.

(1) Create the FP-Tree; (2) Call MaxFP( TP_tree, null) mining FP-Tree: procedure  MaxFP( Tree , ?)  1) if Tree contains a single-path P 2) then for each high-variety combination ? of  the nodes in the path P do 3) generate pattern ? U ? with sup = minimum  support of nodes in ?; 4) else for each ?i in the header of the Tree do{  5)   generate pattern ? =?i U ? with sup = ?i.sup; 6)   construct  ??s conditional pattern base and  then ??s conditional FP-tree Tree?; 7)   if Tree? ? ? ; 8)   then call MaxFP(Tree?, ?)?}   3.3 Post-processing   In order to keep connectivity and biological significance of the output frequent subgraphs, the result of algorithm need to be further processed. The post- processing includes: transforming the results into the connective frequent subgraphs, deleting the repeated results or the result having no biological significance, inserting some significant frequent subgraphs into the results.

The following is the function that transforms the results into the connective frequent subgraphs.

ExchangeFreitem() (1) for each frequent subgraphs ?i, ?i = {e1, e2,  e3, ?, en }??i?A, A is the set of frequent subgraphs. {  (2) call Exchange(?i) } Exchange(?i)   //transform ?i to frequent subgraph  (1) B={ei}?C=?i?B?ei??i; (2) for each ej?ej?C{  (3)     if ?  ej connected ei then (4)     B=B+{ej}?C=?i?B? (5)     else output B} (6) if C!= ? then call Exchange (C)?  This transforming process will generate some repeated connective subgraphs. For example: Both A and B are frequent subgraph. If the connectivity frequent subgraph C is in the transforming result of A, the connectivity frequent subgraph D is in the transforming  result of B, and D ? C, sup(D)<=sup(C), then D is insignificant and should be deleted.

The pattern-growth technique excludes some significant 1-frequent edges from the results [11]. It is necessary to insert the 1-frequent edges into the result.

For instance, the support of a 1-frequent edge e is n. If the support of each subgraph which contains edge e is less than n, then the 1-frequent edge e is significant for biological frequent pattern. It is necessary to insert this subgraph which only contains the edge e into the result.

4. Experiment and analysis   In order to test the MaxFP, we got many different species of metabolic pathways from KEGG metabolic pathway database (http://www.kegg.com/)[10]. We do  experiment with two metabolic pathways of alanine- aspartate and glutamate, which are used in the paper [6] to test MULE. Then, we compare the result of the two algorithm.

Table 1. The experimental results of mining metabolic pathways with different scale and support threshold The number of frequent  subgraph Runtime (s) metabolic pathway  The size of experiment  dataset (node, edge)  Support threshold  The scale of maximal frequent subgraph  The number of 1-  frequent item MULE MaxFP MULE MaxFP  6 16 27 14 55 5.818 1.125 13 4 10 6 10 1.405 0.328 40  (692, 2123) 15 3 6 3 5 1.063 0.297 8 16 32 22 87 7.624 2.197  17 7 12 7 13 3.136 0.453 55 (952, 2978) 20 3 6 3 6 1.36 0.411 10 17 35 15 100 11.214 3.901 24 7 11 6 10 3.897 0.578  alanine- aspartate  (1227, 3845) 30 3 6 4 5 1.689 0.52  10 6 12 3 10 2.064 0.328 40 (669, 2657) 12 3 7 3 6 1.063 0.302  16 6 9 2 9 2.691 0.437 55 (948, 3891) 18 3 5 3 5 1.359 0.422  18 3 11 5 10 1.5 0.489  glutamate  (1033, 4155) 20 3 5 3 5 1.489 0.469           *ST: Support threshold  Figure 2. The result of MULE (ST: 13)                                               Figure 3. The result of MaxFP (ST: 13)             Figure 4. The result of MULE (ST: 15)                                                Figure. 5. The result of MaxFP (ST: 15)  In table 1, we can find that MaxFP is more effective than MULE, because MaxFP does not use candidate sets and scans database only twice. It?s also easy to find that  the runtime of MaxFP grown slowly when the size of experiment dataset grown or support threshold decreased, and other parameters irrelevant. The runtime of MULE is  aspS  argG argH  aspS  purA  purA  purB  argG purA  argG  argH panD argG  purA pyrB  aspS  purA  purA  argG  argH  purA pyrB       not only related to the two parameters above, but also closely related to the size of maximal subgraph in result.

The scale of maximal subgraph is the number of the edges of subgraph which has the most edges in results.

The reason is MULE need scan database more times and spend more time on I/O in larger size subgraph. So the size of the database larger, MaxFP more effective compared to the MULE.

The number of result in MULE is less than MaxFP.

The reason is that the MULE just outputs maximal frequent subgraph set, but MaxFP outputs the closed frequent subgraph set. Take the alanine-aspartate experiment whose scale is 40 for example, As figure 2-5 show, it?s easy to find that MaxFP not only exports the maximal frequent subgraphs which in result of MULE but also exports the closed frequent subgraphs. The outputting set of MaxFP is the superset of the outputting set of MULE.

Comparing figure 5 with figure 3, we can easily find that all of the subgraphs in figure 5 are the subgraphs whose support are more than or equal to the 15 in figure 3. But the result of MULE in figure 2 and figure 4 does not have this character. It needs long time to mine really large-scale biological networks. If the result of one computing corresponding to one support threshold, then it needs to compute more times to get the satisfied result.

As is described above, MaxFP can get the result corresponds to many support thresholds by one computing. It can effectively decrease the times of computing.

The experiment proved that MaxFP based on FP- growth is more effective than MULE based on Apriori.

MaxFP can find more biological significant frequent subgraphs. The result of MaxFP computing once contained the result of MULE computing many times.

5. Conclusion  This paper presented a new closed frequent subgraph  mining algorithm named MaxFP, which are based on simplifying model appropriate to biological networks. It used FP-tree structure to compress the graph database and improved FP-growth effectively. The experiment proved MaxFP is more effective than MULE. MaxFP can find more biological significant frequent subgraphs than MULE. The proposed model and algorithm are  applicable to a variety of biological networks and other complex networks. The future work will be focused on the closed frequent pattern mining in the not-unique- label graphs.

Reference   [1] Hartwell,L.H., Hopfield,J.J., Leibler,S., et al. From  molecular to modular cell biology. Nature, 1999,402:  C47?C51.

[2] Oltvai,Z.N. and Barab?si,A.L.. Life?s complexity  pyramid. Science, 2002,298: 763-764.

[3] Inokuchi,A., Washio,T., Okada,T., et al. Applying the a  priori-based graph mining method to mutagenesis data  analysis. Comput. Aided Chem., 2001, 2: 87-92.

[4] M. Kuramochi and G. Karypis, Frequent subgraph  discovery. IEEE Intl. Conf. Data Mining,California,  USA,2001,313-320.

[5] Agrawal,R. and Srikant,R. Fast algorithms for mining  association rules. Proceedings of the 20th International  Conference on Very Large Data Bases (VLDB?94),  Santiaogo di Chile, Chile, September, 1994: 487-499.

[6] Koyut?rk M., Grama A. and Szpankowski W.. An  efficient algorithm for detecting frequent subgraphs in  biological networks. Bioinformatics, 2004,20: i200-i207  [7] H.Y. Hu, X.F. Yan, Y. Huang, et al. Mining coherent  dense subgraphs across massive biological networks for  functional discovery [J]. Bioinformatics,2005,21: i213-  i221  [8] Olken,F. Biopathways and protein interaction databases.

A lecture in Bioinformatics Tools for Comparative  Genomics: A short course, Berkeley, CA, 2003.

[9] J.W. Han, J. Pei and Y.W. Yin. Mining frequent patterns  without candidate generation. ACM-SIGMOD. Dallas,  TX, New York: ACM Press, 2000, 1-12.

[10] Krishnamurthy,L., Nadeau,J., ?zsoyo?glu,G., et al.

Pathways database system: an integrated system for  biological pathways. Bioinformatics, 2003,19: 930?937.

