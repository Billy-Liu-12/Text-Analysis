An Algorithm for Mining Frequent Closed Itemsets

Abstract The problem of mining frequent itemsets  plays an essential role in mining association rules, but it is not necessary to mine all frequent itemsets, instead it is sufficient to mine the set of frequent closed itemsets, which is much smaller than the set of all frequent itemsets. In this paper, we present an efficient algorithm, FCI-Miner, for mining all frequent closed itemsets. It based on the improved FP-Tree (Frequent Pattern Tree), and used depth-first search strategy without generating conditional FP-Trees and candida- te itemsets. The experimental evaluation on a number of real and synthetic databases shows that our algorithm outperforms previous method in most cases.

Key words Data mining; Association rule; Frequent closed itemsets 1. Introduction  1It has been well recognized that association rules mining is a very important problem in data mining [1]. The issue of mining frequent itemsets plays a crucial role in transaction databases, sequential databases, etc. However, mining frequent itemsets often generates a large number of frequent itemsets and rules,   This work was supported by Natural Science Foundation  of Shaanxi Province ( 2005F13 ), and The Research Fund by Education Department of Shaanxi Province ( 06JK248 ).

Subsequently, mining maximal frequent item sets [2] is studied popularly in data mining field, because the set of maximal frequent itemsets (MFI) is orders of magnitude smaller than the set of frequent itemsets (FI).

However, only mining MFI has the following deficiency: from MFI and its support s, we just know that all its subsets are frequent and the corresponding support of any of its subsets is not less than s, but we do not know the exact value of the support. To solve this problem, another type of a frequent itemsets, called frequent closed itemsets (FCI) was proposed in [3]. A frequent itemsets X is closed if none of its proper supersets have the same support. Any frequent itemset has the support of its smallest closed superset. and the following relationship holds [4]: MFI FCI FI.

Pasquier et al introduced the problem of mining FCI, and proposed an Apriori-like algorithm A-close in [3]. Zaki and Hsiao [5] proposed another mining FCI algorithm CHARM. HAN et al in [6] extended the FP-growth method to a method called CLOSET for mining all FCI. Burdick et al, proposed an efficient algorithm Mafia [4] using depth-first search strategy to mining all FCI.

In this paper, we present a new algorithm for  ___________________________________     mining FCI. Our performance study shows that FCI-Miner is an effective method.

2 Problem Description 2.1 Frequent Itemsets and Frequent  Closed Itemsets Let I = {i1, i2 ? im} be a set of m different  items, and D be a database of transactions, where each transaction T is a set of items such that T I. The number of the transactions in D is denoted by |D|, associated with each transaction is a unique identifier, called its Tid. We call X I an itemset. The count of X is the number of transactions in D that contain X, which is labeled as count(X), and let support(X) be the percentage of transactions in D that contain X.

The relationship of count(X) and support(X) is: count(X) = support(X) ? |D|.

Definition 1: Given a transaction database D and a minimum support threshold s (or the minimum support count ), if support(X) s (or count(X) ), we say that X is a frequent itemset, and we  denote the set of all frequent itemsets by FI. The number of item contained in X is called its dimension or length, denoted by |X|. The frequent 1-itemset is called frequent itemset for short.

Definition 2: A frequent itemset X is closed if there does not exist an itemset X' such that X  X' and support(X') = support(X). We say that X is a frequent closed itemset, and we denoted the set of all frequent closed itemsets by FCI.

Property 1: Let L1 be a list of all frequent items sorted in their frequency descending order, and each of the frequent closed itemsets is made up of the item in L1.

Property 2: All subsets of a frequent itemset are frequent.

Property 3: All supersets of an infrequent itemset are infrequent.

2.2 Data Format & Its Operation  In this paper, we define bit object to represent itemsets, which is a set of binary bits, where the number of bits it contained equals to the number of frequent items in L1. Each bit?s position value  in bit object correspond to one frequent item.

Let?s take the database shown in table 1 for example, when  = 2 , we can get all frequent item which are (f:5) (c:4) (d:4) (b:3) (e:3) and (a:2), and their corresponding position value in bit object are shown in table 2, where the rightmost bit?s position value is 0 which stands for the item a with the lowest minimum support, and the next bit?s to the left is 1 stands for the item e,  and so forth. From the description above, Each transaction can be represented as one bit object, where the corresponding value of each bit (0 or 1) depends on whether the frequent item this current bit stands for exists in this transaction (yes, set to 1, otherwise set to 0).

Therefore, each transaction?s frequent items is represented by one bit object, where the length of bit object is |L1| = 6. (Each transaction?s corresponding bit object is shown in table 3, and ordered frequent items in each transaction are listed in the second column of table 3.)  Table1. Business database D  Table2. Position value  Table3. The bit objects of D  Tid Items  100 a, c, d, f, n  200 b, c, d, e, f, i, k  300 d, e, f, g, m  400 b, f, p, s  500 c, d, f, j  600 a, b, c, e, h, o  L1 Position value f 5  c 4  d 3  b 2  e 1  a 0     Let T(x) be a frequent item?s bit object, which is also a set of binary bits (0 or 1). The length of T(x) is equal to the number of the bit objects considered. Let?s show an example in the third column in table 3, where the length of each bit object is 6, its position value range from 0 to 5 from right to left, the position value 4 stands for the frequent item c, so each bit value of this position in all bit objects composed frequent item c?s bit object, which is T(c) = 110011.

Theorem 1: The number of ones in T(X) is the support of item X, denoted by T(X).count.

Rationale. If there exists only one item x in X, we have this theorem according to the definition of the bit object.

If X = x1x2, we first perform And-Operation on these two bit objects (T(x1) & T(x2)), then the number of ones (denoting the times they co-occur) in T(X) is the support of item X.

If X = x1 x2  xn, the same rationale as above.

Let?s examine the bit objects of D shown in table 3, where T(fc) = T(f) & T(c) = 111110 & 110011 = 110010. So we have T(fc).count = 3, which indicates that the support of fc is 3.

According to theorem 1, we observe that the bit object?s And-Operation is an effective method to generate candidate itemset and count their support.

2.3 The Improved FP-Tree  Frequent pattern tree, or FP-Tree for short, proposed by Han et al, each node consists four fields: node-name node-count node-link and node-parent. In addition, Htable is structured to facilitate the traverse of FP-Tree. However, many FP-Tree-based methods still suffer from  the following costly costs: They may need to generate a large number of conditional FP-Trees iteratively. Moreover, candidate set generation and test is still expensive, especially when there exists quite low minimum support threshold.

Therefore, we improved FP-Tree from the following aspects: The node-name field and the field Item-name in Htable are replaced by items? corresponding position value in order to use bit object and its operations in the process of mining.

There are some differences in constructing improved FP-Tree with the former FP-Tree, and the constructing algorithm is described as follows: (1). Scan the database D once, collect the set of frequent items and their supports, sort frequent items in support descending order as L1, and form the corresponding position value.

(2). Get all bit objects of each transaction in D, insert all the bits whose value is 1 into the improved FP-Tree, the remaining construction steps is the same as Han et al. The improved FP-Tree of D shown in table 1 is shown in figure 1, where each node contains its position value and its support, such as node (5:5), which indicate the position value is 5, the number after ?:? indicate the support.

Figure 1. FP-Tree of D with = 2  From the construction process of FP-Tree, we can observe the following property 4.

Property 4: Any frequent item x, all the possible frequent itemsets contain x can be obtained by following x?s Item-head.

Theorem 2: If there are some nodes whose node-count is no less than the predefined minimum support threshold, the itemsets formed by its prefix nodes and it must be frequent.

Tid Ordered FI Bit objects  100 f, c, d, a 1 1 1 0 0 1  200 f, c, d, b, e 1 1 1 1 1 0  300 f, d, e 1 0 1 0 1 0  400 f, b 1 0 0 1 0 0  500 f, c, d 1 1 1 0 0 0  600 c, b, e, a 0 1 0 1 1 1     Rationale. Suppose that node N is the suffix of path P and N.node-count , then any node N in N?s prefix path, we have N .node-count N.node-count , so N.node-count is the least in path P. Therefore, itemset formed by path P is frequent.

Base on the property 4, we can extract all items carrying the same Item-name via Item-head and their corresponding prefix subpaths. Each item and its prefix subpath can be transformed to one bit object, where the length of the bit object is |L1| = 6, the current node and its prefix nodes? corresponding position value are set to 1, others are set to 0. Let the array A be used to register the number of each bit object, which carry the same count with node-count. The so formed bit objects are called the current node?s bit object group. Let?s examine the position value which is 3(corresponding to frequent item d) in figure 1.

Its bit object group is shown in figure 2, which contain two bit objects. The first is ?111000?, where the leftmost two bits stand for the position value 5 and 4(corresponding to f and c.) contained in the prefix subpath of item d. the  Figure 2. The bit object group of node d  third bit to the right stands for the current node d, so the three positions (5 4 and 3) are set to 1.

Due to the postfix nodes needn?t to be considered, so the remaining three bits (2 1 and 0) are set to 0, and the A carry the same count as the node d?s node-count which is 3. The second is ?101000?, where the second bit to the right is set to 0 due to the position value 4 (correspon- ding to c.) does not exist in its prefix subpath, and A is registered by the node-count which is 1. By doing so, we can get the item d?s bit object group shown in figure 2.

Theorem 3: All the frequent closed itemsets of node x can be generated from its bit object group and the array A.

Rationale. Based on node x?s bit object group, we have just consider the nodes carrying the same Item-name and their corresponding prefix subpaths. The array A register the bit object?s number, that is, the node?s prefix subpath has the same count as the current node. Let?s show the example in figure 2, we have T(dc) = T(d) & T(c) = 11 & 10 = 10, so T(dc).count = 3 + 0 = 3; T(df) = T(d) & T(f) = 11 & 11 = 11, so T(df).count = 3 + 1 = 4. So we have the above-mentioned theorem.

3 Description of Algorithm 3.1 Problem Analysis  The main process of mining frequent closed itemsets has the following two main steps: (1). we first use the constructing algorithm to represent and compress but complete frequent itemset information of the entire database into the improved FP-Tree.

(2). Based on the FP-Tree, we perform a divide-and-conquer framework to mine all the frequent closed itemsets, which means that we discover each frequent item?s (in Htable) all frequent closed itemsets by constructing its bit object group. When performing FCI-Miner on frequent item?s bit object group, we adopt a depth-first search strategy described below.

3.2 Mining Strategy  When mining each frequent item?s all frequent closed itemsets based on its bit object group, the searching space can be organized as an enumeration tree[7] rooted by the current frequent item during mining. We adopt a depth-first search strategy to visit all nodes by a top-down way. Figure 3 shows the search space tree of node e, which contains all the frequent closed itemsets with the suffix of e. Based on the definition of frequent closed itemsets and property 3, the problem of mining frequent closed itemsets can be viewed as finding a cut through such search tree, such that all elements above the cut are frequent, and all below are infrequent. All frequent closed itemsets with the suffix of e exist in the frequent itemsets above     the cut, and this cut exists in any cases.

Therefore, when there are some elements infrequent, all its children nodes are also infrequent; they are all below this cut and can be trimmed out of the search space. By doing so, we can reduce the search space dramatically, thus improve the mining efficiency. Let?s consider node e?s search tree in figure 3, the node e will be counted firstly by the depth-first way, then the node eb is counted, based on the cut in figure 3 the two nodes are frequent, thus they are stored into LFCI (storing the local FCI), then count ebd?s support, because T(ebd).count = 1 is less than the minimum support threshold which is 2,  it is infrequent, and all its children nodes rooted by ebd need to be pruned away. In the rest of the search tree, ebc will be counted then, using the same way until all frequent closed itemsets are mined. Finally, we can get LFCI = {e: 3, ebc: 2, edf: 2}.

Figure 3. The search space tree of node e  3.3 Algorithm of FCI-Miner Algorithm: Mining frequent closed itemsets algorithm FCI-Miner.

Input: The minimum support threshold  and the improved FP-Tree.

Output: FCI.

1. FCI = NULL; 2. For each x Htable //x is element in Htable 3. {Construct x?s bit object group; 4. x_Miner (Bitsets, Begin, LFCI, CurItem); //mine all frequent closed itemsets with suffix x 5. GetFCI (LFCI, FCI) ;} 6. Return FCI; Procedure: x_Miner (Bitsets, Begin, LFCI, CurItem) //Begin is the current node?s position in bit object, End is the position having the top position value, CurItem is the current items? position value.

1.   Tempfci = CurItem; // Tempfci store the  position value of the current item 2.   for ( i = Begin; i  End; ++ i) 3.      {if ((T(i)&T(i+1)).count ) 4.          {GetFCI (Tempfci, LFCI); 5.           x_Miner (Bitsets, i+1, LFCI, Tempfci +item (i+1)?s position value);}} Procedure: GetFCI (TFCI, FCI) 1. if (each M ( TFCI) isn?t the subset of some elements in FCI with the same support) 2.      {FCI = FCI  M; 3.        Delete elements which are the subset of M in FCI with the same support ;} 3.4 Experimental Evaluation  We conduct all experiments on a notebook of DELL with Intel(R) Core(TM) 2 Duo 1.6 GHz CPU and 1024MB of main memory, running Microsoft windows XP. All the codes are written in Microsoft Visual C ++ 6.0. We compare FCI-Miner with Mafia (Mafia can download from the website (http://fimi.cs.helsinki.fi)). We chose several real and synthetic databases for testing the performance of FCI-Miner. The real databases are all taken from the website of UCI Machine Learning Database Repository (http://www.ics.uci.edu/~mlearn/MLRepository.

html). These real databases are very dense. We also chose a few synthetic databases, which can be generated by the generator from IBM Almaden Centre website (http://www.almaden.ibm.com/cs/quest/demos.ht ml) . Database T25I20D10K has 50 items, T25 shows that the average transaction length is 25; I20 shows that the average maximal potentially frequent itemset size is 20; D10K shows that there are 10K transactions. These databases are sparse.

Table4. Database characteristics  Table 4 above shows the characteristics of all databases used in our evaluation. It shows the number of items, the average transaction length     and the number of transaction in each database.

The following figures show the testing results on these databases.

0.2  0.4  0.6  0.8   1.2  0.1 0.5 1 5 10 25 40 60 65 90  Min Support (%)  To ta  l t im  e (s  )  Mafia FCI-Miner  Figure 4. FCI-Miner versus Mafia on Mushroom   0.3  0.6  0.9  1.2  75 80 85 90 95 Min Support (%)  To ta  l t im  e (s  )  Mafia FCI-Miner  Figure 5. FCI-Miner versus Mafia on Chess       75 80 85 90 95  Min Support (%)  To ta  l t im  e (s  )  Mafia FCI-Miner  Figure 6. FCI-Miner versus Mafia on Connect-4   0.2  0.4  0.6  0.8   1.2  1.4  40 50 60 70 80 90 Min Support (%)  To ta  l t im  e (s  )  Mafia FCI-Miner  Figure 7. FCI-Miner versus Mafia on T25I20D10K       70 75 80 85 90 95 Min Support (%)  To ta  l t im  e (s  )  Mafia FCI-Miner  Figure 8. FCI-Miner versus Mafia on T50I20D100K  As shown in figure 4 to figure 8 above, we tested the total execution time of Mafia and FCI-Miner on five databases described in table 4.

In figure 4, FCI-Miner outperforms Mafia range from 0.001 to 1. When tested on dense databases such as Chess and Connect-4, FCI-Miner performs well when minimum support threshold is greater than 0.75. On T25I20D10K and T50I20D100K, FCI-Miner also outperforms  Mafia in most cases.

4 Conclusions  In this paper, we presented and evaluated an efficient algorithm for mining frequent closed itemsets in transaction database. FCI-Miner adopts a novel data structure for compressing crucial information about frequent itemsets, which can reduce the database greatly, and also uses an effective method to generate candidate itemsets and count their support without generating conditional FP-Trees. The experimental results show that it is an effective and efficient algorithm.

5. References [1] R. Agrawal, R. Srikant. Fast algorithm for mining  association rules[C]. In: Proc. of the 20th Int?l  Conf. on VLDB?94. Santiago: Morgan Kaufmann,  1994: 487-499.

[2] R. Bayardo. Efficiently mining long patterns from  databases[C]. Proc. of 1998 ACM SIGMOD Int?l  Conf. on Management of Data. New York: ACM  Press, 1998: 85 93.

[3] N. Pasquier, Y. Bastide, R. Taouil, and L. Lakhal.

Discovering frequent closed itemsets for  association rules. Proceeding of the 7th Int?l  Conference on Database Theory. 1999: 398-416.

[4] D. Burdick, M. Calimlim, J. Gehrke. Mafia: A  maximal frequent itemset algorithm for  transactional databases [C]. Proceeding of the 17th  Int?l Conference on Data Engineering. Heidelberg:  IEEE Press, 2001: 443-452.

[5] Zaki MJ, Hsiao CJ. CHARM: An efficient  algorithm for closed itemset mining. Proceeding  of the 2nd SIAM Int?l Conference on Data Mining.

Arlington: SIAM, 2002: 12-28.

[6] Pei J, Han J, Mao R. CLOSET: An efficient  algorithm for mining frequent closed itemsets.

Proceeding of the 2000 ACM SIGMOD Int?l  Workshop on Data Mining and Knowledge  Discovery. Dallas: ACM Press, 2000: 21-30.

[7] Rymon R. Search through systematic set  enumeration. Proceeding of the 3rd Int?l  Conference on Principles of Knowledge  Representation and Reasoning. 1992: 539-550.

