Efficient Algorithms for Mining Frequent Itemsets with Constraint

Abstract?An important problem of interactive data mining is ?to find frequent itemsets contained in a subset CC of set of all items on a given database?. Reducing the database on C or incorporating it into an algorithm for mining frequent itemsets (such as Charm-L, Eclat) and resolving the problem are very time consuming, especially when C is often changed. In this paper, we propose an efficient approach for mining them as follows. Firstly, it is necessary to mine only one time from database the class LG  A containing the closed itemsets together  their generators. After that, when C is changed, the class of all frequent closed itemsets and their generators on C is determined quickly from LG  A by our algorithm  MINE_CG_CONS. We obtain the algorithm MINE_FS_CONS to mine and classify efficiently all frequent itemsets with constraint from that class. Theoretical results and the experiments proved the efficiency of our approach.

Closed itemsets, frequent itemsets, constraint, generators, eliminable itemsets

I.  INTRODUCTION Currently, Internet makes the real changes in the ways  human thinks and does. People access to Internet to get useful information from it. Normally, the data of websites for users is obtained and is saved in the tables (or databases).

The number of attributes (items) is often enormous.

However, for a while, they only take care of a set of attributes (called the constraint). To show immediately to the users the knowledge mined from them such as the frequent itemsets or association rules is very important. In [3, 5, 8, 9, 13, 14] some authors researched on mining frequent itemsets and association rules from the standpoint of the user?s interaction with the system. They studied mining frequent itemsets with many different kinds of constraints. Nguyen et al. [9] proposed an architect including domain, class and SQL-style aggregate constraints. Some categories of constraints such as anti- monotone, monotone, and succinct have been integrated into the mining process [9]. In [13], Pei et al. proposed the concept of convertible constraints and considered pushing them into the mining progress of the FP- growth algorithm. Srikant et al. [14] considered the problem of integrating constraints that are Boolean expressions over the presence or absence of items in the association rules.

Bayardo et al. [3] restricted the problem of mining  association rules in two constraints of the consequent and the minimum improvement. In [5], Cong and Liu proposed an technique based on the concept of tree boundary to utilize previous mining results for reducing the mining time. They considered tightening and relaxing constraints such as increasing and decreasing supports.

This paper concentrates on solving the problem of to find frequent itemsets contained in a subset C of the set of all items from a given database (called the problem of mining frequent itemsets with constraint C). A simple approach is to reduce the database on C and after that to mine them by an algorithm used widely such as Apriori [1], Eclat [20], Charm-L [18], FP-growth [8], etc. This approach is not efficient because the constraints are often changed. A different one is to filter the output of those algorithms in a post-processing step to determine frequent itemsets with constraint. It is also not efficient because their outputs are usually enormous. In [14], Srikant et al. showed that we should incorporate C into the mining process. They modified the apriori candidate generation procedure to only count candidates that contain selected items. However, there are still many candidates generated. Furthermore, when C is changed, users must run the algorithm. It is very time consuming. In [8], Han et al. also suggested incorporating C into the mining FP-Tree. However, they did not propose the algorithm to do it. We also incorporate constraint C into Charm-L and Eclat (well-known algorithms for mining frequent closed itemsets and all frequent itemsets) to mine frequent itemsets with constraint. This approach will be compared to our approach.

Recently, we [15, 16] showed the structure of each class of equivalent frequent itemsets having the same closure based on the generators and eliminable subsets of that closure. Based on it, we approach to the problem of mining frequent itemsets with constraint as follows. Firstly, it is necessary to mine only one time from the database the class LG  A containing the closed itemsets and their generators.

After that, when C is changed, the class FLG C of frequent  closed itemsets and their generators is determined quickly from LG  A . Using a unique representation of frequent itemset,  we derive completely, directly, non-repeatedly from FLG C   all frequent itemsets with constraint. The mining script is shown as follows: 1) To mine only one time the class LG  A ,   DOI 10.1109/KSE.2011.12     2) User selects the constraint C and the minimum support threshold s:  (2.1) to determine quickly the class s A  FLG of the frequent closed itemsets (and their generators) with respect to s from LG  A in the first mining time; otherwise, from  maxs AFLG (was saved before), where smax is maximum  such that smax ? s, (2.2) from s  A FLG , our algorithm MINE_CG_CONS  (based on the propositions 2 and 3) is used to exploit directly the class FLG  C ,  (2.3) from FLG C , the class FS  C of all frequent itemsets with  constraint C is mined quickly by our algorithm MINE_FS_CONS (using theorem 4).

3) Return the step 2.

Figure 1.  Mining frequent itemsets with constraint.

The method is suitable when C is usually changed.

Indeed, the size of the class of all frequent closed itemsets and their generators is much smaller than the one of all frequent itemsets, especially on the dense databases. With the small values of minimum support thresold, this class can be still mined and saved in main memory by Charm-L and MinimalGenerators [18]. The response of the system in early times is often slow because the size of LG  A is big. After the  first period, the classes of 1sAFLG , 2s  AFLG , .., ns  AFLG are saved in the system (the values of sj, j=1, .., n are distributed regularly on [0, 1], 0 ? s1 < s2 < .. < sn ? 1). Thus, we only need to select the frequent closed itemsets and generators that those supports exceed threshold s directly on maxsAFLG , where smax = max {sj | sj ? s, j=1, .., n}. For the threshold s given by user, the corresponding threshold smax is usually closed to it. Therefore, the time to exploit sAFLG is often small. Using some simple operators on the itemsets in sAFLG , we can mine directly the class FLGC of the frequent closed itemsets and generators restricted on C. The class FS  C is partitioned into the disjoint equivalence classes.

Each class contains frequent itemsets on C that have the same closure. So, they can be mined concurrently by parallel algorithms. A unique representation of frequent itemsets based on frequent closed itemset (represented to that class) and its generators is indicated to derive directly, non- repeatedly all frequent itemsets on C from FLG  C .

The rest of the paper is organized as follows. Section 2 recalls some primitive concepts and results. This section also  proposes a unique representation of itemsets. The main results are in section 3. In it, we obtain the algorithm for determining quickly all frequent closed itemsets and their generators with constraint C. The efficient algorithm to mine all frequent itemsets from them is also figured out. Sections 4 and 5 contain the experimental results and conclusions.



II. PRIMITIVE CONCEPTS AND RESULTS  A. Primitive concepts Given set O contained records or transactions of a  database T and A contained attributes or items related to each of transaction o?O and R is a binary relation in OxA.

Consider two operators: ?:2O?2A, ?:2A?2O determined as (?(?) := O,  ?(?) := A):  ?(O) = {a?A | (o, a) ? R, ?o?O}, ?O?O, ?(A) = {o?O | (o, a) ? R, ?a?A}, ?A?A.

Defining closure operator h in 2A [4] by: h = ? o ?, we say that h(A) is the closure of itemset A ?A. If A = h(A), A is called closed itemset. The class of all closed itemsets is denoted as CS. The support of itemset A is defined as the probability of the ocurrence of a transaction containing A on O: s(A) = |?(A)|/|O|. Denoted that s0 is minimum support, s0 ? [1/|O|; 1], if s(A) ? s0 then A is called frequent itemset [1].

Let FS, FCS be the classes of all frequent itemsets and all frequent closed itemsets.

For two non-empty itemsets G, A: ??G?A?A, G is called a generator of A [11] iff: h(G)=h(A) and (? ??G??G ? h(G?)?h(G)). Let G(A) be the class of all generators of A.

Let LG  A and FLG  A 1  be the classes of all closed itemsets  together their generators on A and all elements in LG A  that are frequent with respect to s0. In 2A, an itemset R is called eliminable in S [15, 16] iff R?S and ?(S) = ?(S\R). Let N(S) denote the class of all eliminable itemsets in S, N*(S) := N(S) \ {?}, we have [15]: N(S) = {A: A ? S\G, G ? G(S)}.

TABLE I.  DATABASE 1  Trans ID Items  1 aceg 2 acfh  3 adfh  4 bceg  Example 1. Let us consider database 1 in Table I, with minimum support s0 = ?, used in all next examples of this paper. From the definitions of ? and ?, we have: ?({1, 4}) = ceg, ?(ceg) = {1, 4} and then, h(ceg)=ceg. So ceg is a frequent closed itemset with the support |?(ceg)|/|O| = ?.

1 For briefly, we write  s AFLG simply AFLG .

C, s  T LG A FLG  A FLG  C FS  C      This itemset contains two generators e, g because h(e)=h(g)=h(ceg)=ceg.

B. Structure of Itemsets In this part, the class of all itemsets is partitioned into the  disjoint equivalence classes. The elements of an equivalence class have the same closure and can be derived from that closure and its generators. Thus, we only need to mine the class (with the small size) of frequent closed itemsets (and generators). When it is necessary, we can derive to users the frequent itemsets in a class that they are interested in.

Definition 1 [15] (Equivalence relation ~h over the class of all itemsets 2A): ? A, B ? 2A:  A ~h B ? h(A) = h(B).

Theorem 1 [15] (A partition of 2A): Relation ~h partitions 2A into the disjoint equivalence classes. Each class contains itemsets that have the same closure. The equivalence class containing A is denoted as [A].

2A = A  [A] ? ? CS  and FS = A FCS  [A] ? ? .

Based on this partition, we can exploit independently each equivalence class. The elements in a class have the same support so we only compute and save it once.

Theorem 2 [15] (Representation of itemset): For every itemset A such that ??A?CS:  X ? [A] ? ? G0 ?G(A), ? X??N(A): X = G0 + X?.

Denoted N(S, G) := {A: A ? S\G, G?G(S)}, it is obvious  that: N(S)= ( , )S G G (S)? ? N G  . For G1, G2 ? G(S), G1 ?G2, the  intersection of N(S, G1) and N(S, G2) can be not empty. The above representation of a itemset in a class can be not unique because the representation of an eliminable itemset is not unique.

Example 2. Let us consider equivalence class [X], where X=aceg, G(X) = {ae, ag}. We have: N*(X, ae) = {cg, c, g}, N*(X, ag)={ce, c, e}, N*(X, ae)?N*(X, ag) = {c} ? ? and N*(X) = N*(X, ae)?N*(X, ag) = {cg, c, g, e, ce}. Then, from theorem 2, [X] = {ae, aeg, aec, aecg, ag, agc}, in which, aeg can be represented by two ways: aeg = ae+g = ag+e.

C. Unique Representation of Itemset by Generator and Eliminable Itemset The process of deriving of all itemsets of an equivalence  class using theorem 2 can make the duplication because the representation of an itemset is not unique.  Theorem 3 shows a unique representation of itemset, in other words, based on it, all itemsets in the same class can be derived non- repeatedly (as a result, quickly), completely.

2 The symbol + is denoted as the union of two disjoint sets.

?X?CS, let us call i  U i X (X)  X X ?  = ? G  , XU,i=XU\Xi,  X_=X\XU, IS(X) := {X?=Xi+X?i+X~ | Xi?G(X), X~?X_, X?i?XU,i, i=1 or (i>1: Xk?Xi+X?i, ?k: 1?k<i)}.

Theorem 3 (Unique representation of itemset by generator and eliminable itemset): We have:  a. [X] = IS(X).

b. All itemsets of IS(X) are derived non-repeatedly.

Proof: (a) .???: If X??[X], assume that i is the minimum index such that Xi?G(X), X??i?X\Xi and X? = Xi+X??i. Let X?i = X??i?XU, X~ = X??i\XU, then X?i?XU,i, X~ = X?\XU ? X_ and X? = Xi+X?i+X~. Assume that there exists the index k such that 1?k<i, Xk?G(X), Xk?Xi+X?i then X?=Xk+X??k, where X??k=X?k+X~ and X?k=(Xi+X?i)\Xk?X\Xk, X~?X\Xk.

Thus, X??k?X\Xk: it is absurd!

.???: If X??IS(X), there exists Xi?G(X), X~?X_?X\Xi, X?i?XU,i?X\Xi: X?=Xi+X?i+X~. Let X??= X?i+X~?N(X), then X?=Xi+X??, thus X??[X] by theorem 2.

(b) Assume that there exists i, k such that i>k?1 and Xi+X?i+X~i ? Xk+X?k+X~k, where: Xi, Xk ?G(X); X~i, X~k?X_; X?i?XU,i, X?k?XU,k. Since Xk?X~i=?, so Xk?Xi+X?i (the equality do not occur because Xi and Xk are two different generators of X). It contradicts to the selection of index i! ?  Example 3. Let us consider class [X] where X=aceg, G(X) = {X1=ae, X2=ag}, we have: XU=aeg, XU,1=g, XU,2=e, X_=c.

By theorem 3, itemset X?=aceg?IS(X) is generated uniquely as follows: X?=X1+X?1+X~ where X?1=g ? XU,1, X~=c ?X_. By theorem 2, X? has two duplicate representations: X?=ae+cg=ag+ce. If the condition ?i>1: Xk?Xi+X?i, ?k: 1?k<i? is absent, then duplicate X? is generated once again: X?=X2+X?2+X~, where X?2=e ? XU,2 and X1?X2+X?2. Similarly, all itemsets of [X] = IS(X) = {ae, aeg, aegc, aec, ag, agc} are derived non-repeatedly.

From theorem 3, the algorithm GEN_ITEMSETS is obtained (see Fig. 2) to generate non-repeatedly all itemsets in each equivalence class [X], X?CS.



III. MINING FREQUENT ITEMSETS WITH CONSTRAINT As the discussion in introduction, to mine frequent  itemsets on C with minimum support threshold s0, firstly, without the general, we need to determine the class FLG  A of  all frequent (with respect to s0) closed itemsets and their generators from LG  A . After that, it is quickly to mine the  class FLG C of all frequent closed itemsets and generators  restricted on C from FLG A . That bases on some relations  between closed itemsets and generators of FLG C and the   corresponding ones of FLG  A . Finally, the partition of the     class of all frequent itemsets with constraint C allows us to use the algorithm GEN_ITEMSETS for deriving quickly them.

Figure 2.  GEN_ITEMSETS, the algorithm to generate non-repeatedly all  itemsets in class [X].

A. Mining frequent closed itemsets and their generators with constraint We will define again the operators ?, ? and h over  constraint C and figure out the relation between them with the corresponding ones over A. From that, the algorithm for mining quickly FLG  C from LG  A is indicated.

Definition 2 (The Galois connection operators over constraint C): For every C?2A\{?}, let us consider operators: ?  C :2C?2O, ?C:2O?2C and hC:2  C?2C defined as follows: ???C??C, ??O?O,  ? C (C?) = {o?O: (o, a)? R, ?a?C?}, ?C(?) := O, ?  C (O)  = {a?C: (o, a)?R, ?o?O}, ?C(?) := C,  h C = ?C o ?C.

An itemset C??C is called closed itemset on C iff h C (C?)  = C?. The class of all frequent itemsets on C  is denoted as FS  C . The class FCS(C) contains all frequent closed itemsets  on C.

Proposition 1: For every C?2A\{?}, ??C??C, O?O, the following statements are true:  a. ? C (C?) = ?(C?), so s(C?) = |?(C?)| = |?  C (C?)|,  b.  ? C (O) = ?(O)?C,  c.  h C (C?) = h(C?)?C.

Proof: Obviously from definitions of ?, ? C , ?, ?  C , h and h  C .?  Proposition 1.c enables us to determine frequent closed itemset on C by intersecting C with each frequent closed itemset (on A) of FLG  A . This way can make the  duplications. In other words, a frequent closed itemset on C can be derived many times.

Example 4. Let us consider database 1, we have: FLG  A ={acfh, aceg, adfh, bceg, afh, ceg, ac, c, a}. Then, by  proposition 1.c, with C=abde, FLG C ={ae, ad, be, e, a}.

Some of its elements are derived many times, for example: a = acfh?C = afh?C = ac?C = a?C.

Based on a condition over generators, proposition 2 is obtained to eliminate the duplication in generating frequent closed itemsets restricted on C.

Proposition 2 (Generating non-repeatedly all frequent closed itemsets with constraint C): Let us call FCS  C :=  {C?=L?C | L?FCS, ?Li ?G(L): Li ? C}, we have: a.  FCS  C = FCS(C).

b. All elements of FCS C are generated non-repeatedly.

Proof: a. ????: ???C??FCS C : C? = L ? C ? C, h(C?) ?  h(L) = L. Then, C? ? hC(C?) = h(C?) ? C ? L ? C = C?.

Therefore C? = hC(C?), i.e., C? ? FCS(C).

???: ???C??FCS(C): C? = hC(C?) = h(C?) ? C = L ? C, where L:=h(C?) ? FCS. Let Ci?G(C?) (there always exists), then: h(Ci)=h(C?)=L=h(L) and ?C0?Ci then h(C0) ? h(Ci)= L. Thus, Ci ? G(L) and Ci ? C? ? C, i.e., C??FCSC. We conclude that C??FCS  C .

b. Assume that, with k=1, 2, C?k=Lk?C ? FCSC, let Lk?FCS, Lk,0 ?G(Lk), Lk,0 ? C such that C?1 ? C?2 and L1 ? L2. We have Lk,0  ? Lk?C, Lk=h(Lk,0) ? h(Lk?C) ? h(Lk)=Lk. Therefore, h(C?k) = Lk, ?k=1, 2 and L1=L2: it is absurd!  ?  In the next step, we will show how to determine the generators of frequent closed itemsets on C.

Definition 3 (The generators of C? restricted on C): For every G, C?: ??G?C??C, G is called a generator of C? on C iff:  h C (G)=h  C (C?) and (? ??G??G ? h  C (G?) ? h  C (G)).

The set of all generators of C? on C is denoted as G C (C?).

Proposition 3 (Determining the generators with constraint C): ?C?=L?C ? FCS  C :  G C (C?) = G(C?) = {Li?G(L): Li ? C?}.

Proof: It is obvious because ? C (C?) = ?(C?).  ?  From propositions 2 and 3, the algorithm MINE_CG_CONS is indicated to mine quickly the class  FLG C := {<C?, s(C?), G  C (C?)> | C??FCS  C }  from LG A .

<IS(X), s(X)>   GEN_ITEMSETS (X, s(X),G(X)): 1.   IS(X) = ?; XU = XiG( )X Xi?  ? ;  X_ = X\XU;  2.   for each (i=1; Xi?G(X); i++) do { 3.        XU,i = XU\Xi; 4.        for each (X?i  ? XU,i) do { 5.            IsDuplicate = false; 6.            for (k=1; k<i; k++) do 7.                 if (Xk ? Xi+X?i) then  { 8.                       IsDuplicate = true; break; 9.                 } 10.         if (not(IsDuplicate)) then 11.      for each (X~ ? X_) do 12.                    IS(X) = IS(X) +{Xi+X?i+X~}; 13.      } 14. } 15. return  <IS(X), s(X)>;                      Figure 3.  MINE_CG_CONS, the algorithm to generate non-repeatedly all  frequent closed itemsets and their generators with constraint C.

Example 5. The process of mining frequent closed itemsets and generators on C=abde from LG  A ={<L, s(L), G(L)>} is  shown in Table II (C?=L?C).

TABLE II.  AN EXAMPLE OF MINING FREQUENT CLOSED  ITEMSETS AND THEIR GENERATORS WITH CONSTRAINT  L Li ??G(L) s(L) C ?Li C? GC(C?) s(C?) acfh cf, ch ? aceg ae, ag ? ae ae ae ? adfh d ? d ad d ? bceg b ? b be b ? afh f, h ? ceg e, g ? e e e ? ac ac ? c c ? a a ? a a a ?  B. Mining all frequent itemsets with constraint Here, we will partition the class FS  C of all frequent  itemsets restricted on C into the disjoint equivalence classes.

Each class contains the itemsets having the same closure with the frequent closed itemset represented to that class.

Thus, it is correct to use the efficient algorithm GEN_ITEMSETS for mining quickly FS  C from FLGC.

Definition 4 (Equivalence relation over 2C): ? A, B ? 2C: A ~  C B ?  h  C (A) = h  C (B).

Theorem 4 (Partition and representation of FS C ): The  equivalence relation ~ C partitions FS  C into the disjoint  equivalence classes. Each class contains the frequent itemsets having the same closure:  ~ ' ( ) '  [ '] ( ').

C C  C C ? ?  = =? ?C CC  FS FCS FCS  IS  Proof: This theorem is consequence of theorems 1, 3 and the proposition 2.  ?  The algorithm MINE_FS_CONS mines and classifies quickly all frequent itemsets on C from LG  A .

Figure 4.  MINE_FS_CONS, the algorithm to generate non-repeatedly all frequent itemsets on C.

Example 6. The processes of mining from LG A  = {X=<L, s(L), G(L)>} all frequent itemsets restricted on C1=abde and C2=abceg are figured out in Tables III and IV, where FLGC = {Y = <C?, s(C?), G  C (C?)>}.

TABLE III.  MINING ALL FREQUENT ITEMSETS ON C1  X ? LG A Y ? FLG  C <IS(C?), s(C?)>  acfh, ?, {cf, ch} aceg, ?, {ae, ag} ae, ?, {ae} {ae}, ?  adfh, ?, {d} ad, ?, {d} {d, da}, ? bceg, ?, {b} be, ?, {b} {b, be}, ? afh, ?, {f, h} ceg, ?, {e, g} e, ?, {e} {e}, ?  ac, ?, {ac} c, ?, {c} a, ?, {a} a, ?, {a} a, ?  TABLE IV.  MINING ALL FREQUENT ITEMSETS ON C2  X ?LG A Y?FLG  C <IS(C?), s(C?) > acfh, ?, {cf, ch} aceg, ?, {ae, ag} aceg, ?,  {ae, ag} {ae, aec, aeg, aegc,  ag, agc}, ? adfh, ?, {d} bceg, ?, {b}  bceg, ?,  {b} {b, bc, be, bg, bce, bcg, beg, bceg}, ?  afh, ?, {f, h} ceg, ?, {e, g} ceg, ?,  {e, g} {e, ec, eg, egc, g, gc},  ? ac, ?, {ac} ac, ?, {ac} {ac}, ? c, ?, {c} c, ?, {c} {c}, ? a, ?, {a} a, ?, {a} {a}, ?

IV. EXPERIMENTAL RESULTS The following experiments were performed on a 2.93  GHz Pentium(R) Dual-Core CPU E6500 with 1.94GB of  FLG C MINE_CG_CONS (LG  A , C, s0):  1.  FLG C = ?;  2.  for each (<L, s(L), G(L)> ? LG A ) do  3.     if (s(L) ? s0) then    // L ? FLGA 4.        if (? Li ? G(L) and C ? Li) then { // not to generate repeatedly 5.           C?        =  L ? C; 6.           G  C (C?) =  {Li ? G(L) | Li  ? C?};  7.           FLG C =FLGC + <C?, s(L), GC(C?)>;  8.        } 9.  return FLG  C ;  FS C MINE_FS_CONS (LG  A , C, s0):  1.  FS C = ?;  2.  FLG C = MINE_CG_CONS (LG  A , C, s0);  3.  for each (<C?, s(C?), G C (C?)> ? FLG  C ) do {  4.     <IS(C?), s(C?)> = GEN_ITEMSETS (C?, s(C?), G  C (C?));  5.      FS C = FS  C + {<IS(C?), s(C?)>};  // classify FS C  6.  } 7.  return FS  C ;     RAM, running Linux, Cygwin. Algorithms were coded in C++. The code of Zaki [22] is used to run Charm-L, MinimalGenerators and Eclat. Four databases in [21] are used during these experiments. They have been used as benchmark for testing mining algorithms. Table V shows their characteristics.

TABLE V.  DATABASE CHARACTERISTICS  Database (DB) # Records # Items Average size Mushroom (M) 8124 119 23 Connect (Co) 67557 129 43 Chess (Ch) 3196 75 37 Pumsb (P) 49046 7117 50   As the discussion in the introduction, Srikant et al.

incorporated C into the mining process by modified the apriori candidate generation procedure. In this experiment, to compare with our approach in mining frequent itemsets with constraint from LG  A , we incorporate C into the Charm-  L and Eclat (well-known algorithms for mining frequent itemsets). This is done easily by choosing only frequent items that are in C to work in the next steps of those algorithms. Those new versions are called C?Charm, and C?Eclat.

The items of the constraints are selected from the set AF of all frequent (corresponding to the minimum support MS) items of A with the ratios of ?, ? and ?. We have the constraints with the sizes of l1=?*|AF|, l2=?*|AF| and l3=?*|AF|. For each li, C is constructed from two subsets: C = C1+C2. In the reality, the constraints that users are interested in usually contain the high-support items. Thus, we will sort all items by the order of their supports. To determine a constraint C with the size li, firstly, we construct the first subset C1 of C containing [p*li] items randomly selected from the set of high-support items in AF, where p?[0; 1]; the remained part C2 of C contains  [(1- p)*li] randomly selected items from AF\C1. For experiments at here, we set p = 0.5 and consider two constraints for each li.

We will do two comparisons. Firstly, in Table VI, we compare the average time for mining frequent closed itemsets and their generators with constraint C by our algorithm MINE_CG_CONS (shown in column TCO) to the one by C?CharmGen (column TCC) upon P, M, Co, and Ch.

C?CharmGen is the combination of C?Charm (for mining frequent closed itemsets with constraint) and MinimalGenerators [19] (for determining their generators).

The reduction in the mining time is shown in column RTCO (RTCO = TCC/TCO). With the different minimum support thresholds, we see that it is drastic, ranging from a factor of 60 to 316 times! That reduction plays an important role in mining quickly association rule with constraints because, as  the discussion on [15, 6], all association rules can be mined quickly from frequent closed itemsets and their generators.

TABLE VI.  MINING FREQUENT CLOSED ITEMSETS AND GENERATORS WITH CONSTRAINT: MINE_CG_CONS VS C-CHARMGEN.

DB MS (%) TCC TCO RTCO Co 75 1.07 0.005 213 65 1.29 0.013 99 55 3.49 0.026 134  Ch 65 1.21 0.011 115 55 6.08 0.055 111 50 10.93 0.111 98  P 80 1.50 0.010 145 70 13.74 0.115 120 65 39.22 0.243 161  M 15 0.16 0.003 60 5 0.84 0.003 316 1 4.80 0.018 264   In the second, the time for mining all frequent closed  itemsets restricted on C by our algorithm MINE_FS_CONS is compared to the one by C?Eclat. We did experiments on on three databases (that have many items) Co, P, M. The reduction in the mining time by our approach is drastic. It ranges from a factor of 14 to 1063 times and is shown in Fig.

5.

Figure 5.   The reduction in mining time all frequent itemsets with  constraint: MINE_FS_CONS vs C?Eclat.

For database P, the reductions are small because the average size of transactions is small compared with the number of all items. Then, practically (users are usually interested in high-support items), we should consider the constraints containing many high-support items. Indeed, the bigger of the number of high-support items (corresponding with the big values of p) are, the bigger reductions become.

Table VII showed that. In addition, the output of our algorithm MINE_FS_CONS  is classified into disjoint classes. All frequent itemsets with constraint in a class have     the same closure and support. Thus, when it is necessary, we only access without the need to compute them.

TABLE VII.  THE REDUCTIONS IN MINING TIME FREQUENT ITEMSETS WITH CONSTRAINT: DATABASE P  MS p 80 70 65  ? 61 13 15 ? 51 26 36  4/5 70 37 65

V. CONCLUSIONS This paper proposed an approach to mine and classify  efficiently frequent itemsets with constraint C on a given database, especially, when C is often changed. The correctness and efficiency of the approach were ensured by the theoretical results. The corresponding algorithms were obtained and were tested on benchmark databases. In future, based on this approach, we will research on the problem of mining association rules with constraint.

