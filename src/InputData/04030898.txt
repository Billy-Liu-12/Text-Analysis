An Algorithm for Privacy-preserving Quantitative Association Rules Mining*

Abstract  When Data mining occurs on distributed data, privacy of parties becomes great concerns. This paper considers the problem of mining quantitative association rules without revealing the private information of parties who compute jointly and share distributed data. The issue is an area of Privacy Preserving Data Mining (PPDM) research. Some researchers have considered the case of mining Boolean association rules; however, this method cannot be easily applied to quantitative rules mining.

A new Secure Set Union algorithm is proposed in this paper, which unifies the input sets of parties without revealing any element?s owner and has lower time cost than existing algorithms. The new algorithm takes the advantages of both in privacy-preserving Boolean association rules mining and in privacy-preserving quantitative association mining. This paper also presents an algorithm for privacy-preserving quantitative association rules mining over horizontally portioned data, based on CF tree and secure sum algorithm. Besides, the analysis of the correctness, the security and the complexity of our algorithms are provided.

1. Introduction  Quantitative association rule [1, 2] plays an important role in association rules. Most classical algorithms do not refer to privacy of parties? sharing distributed data, though data mining over distributed data has been widely applied to practical setting with development of multi-party computation, and various   * Supported (in part) by the National Grand Fundamental Research  973 Program of China (Grant No. 2003CB317000 ) and Supported by the NSF of China (Grant No. 60573171).

data owners wish to mine for global data without revealing any information of their own. Data mining in distributed setting without disclosing private information of different data owners is known as privacy-preserving data mining (PPDM). In fact, PPDM has many applications. For instance, different mobile net companies need PPDM, when they try to obtain some rules over global data without revealing their own.

In recent yeas, numerous algorithms for PPDM have been proposed in the literature [3~7]. Among them, Randomization model [3] and secure multi-party computation model [4] are two important PPDM approaches. One can find two classical methods of privacy-preserving association rules mining in [5, 6].

One mines association rules on vertically partitioned data [5], based on a secure scalar product sub-protocol; while the other mines on horizontally partitioned data [6], based on a secure set union sub-protocol. Also, the literature [7] presents an algorithm for privacy- preserving Boolean association rules mining, based on randomized response theory. We observe that all the above algorithms are only concerned with Boolean association rules mining, and they cannot be easily adapted to mining quantitative association rules. The reason is that quantitative attributes are numeric and have to be discretized, which need to learn the distribution of global data, while the distribution of local data of one party is not necessarily related to the global distribution. This paper considers how to get the global distribution without revealing the local distribution. Obviously, privacy-preserving Boolean association rules mining (PPBARM) does not need to take account of this problem. Although the generic method based on circuit [8, 9] can securely solve any problem of Secure Multi-party Computation (SMC), it is too expensive to use in data mining. A detailed discussion on generic method can be found in [9, 10].

Proceedings of the 2nd IEEE International Symposium on Dependable, Autonomic and Secure Computing (DASC'06) 0-7695-2539-3/06 $20.00  ? 2006    A new algorithm for secure set union is proposed in this paper, which is shown more efficient than the comparable one in [6]. The algorithm can be viewed as an essential sub-protocol for secure set union. One advantage is that it does prevent the disclosure of frequent item sets in PPBARM. The other is that the algorithm can be easily adapted to algorithms for quantitative association rules mining to securely compute global distribution. Then, this paper presents an algorithm for privacy-preserving quantitative association rules mining based on CF-tree [12] and secure sum [6], when the model of data sharing is horizontal.

The definition of data horizontally partitioned is that each party has identical attribute set and distinct attribute values. While data vertically partitioned deals with the case of distinct attribute set. In this paper, only data horizontally partitioned is considered. Let n denote the number of parties participating in computation, and assume 3n . The semi-honest model [6] is employed in the algorithm, which allows parties to arbitrarily analyze received data but requires parties to correctly run the algorithm.

The paper is organized as follows. Section 2 describes several definitions used in this paper. The new algorithm for secure set union is proposed in section 3. In section 4, we provide the algorithm for privacy-preserving quantitative association rules mining.

2. Preliminaries  If a rule concerns associations between the presence or absence of items, it is a Boolean association rule. If a rule describes associations between quantitative items or attributes, then it is a quantitative association [11]. This paper adopts the definition of generalized quantitative association rules, since this definition is considered to fit the quantitative properties and semantics of data [2].

In [2], quantitative attributes are divided into clusters, sets consisting data points with close distance, then they consider the association rules between these clusters.

Definition 2.1 [2]: Let X  denote a distance metric on values in the attribute set X , such as the Euclidean or Manhattan distance. The diameter d on X  of a set of tuples }1:{ NiitS is the average pairwise distance between tuples projected on X .

)1(  ])[],[( |)|( 1 1  NN  XtXt XSd  N  i  N  j jiX  (1)  Note that the two thresholds on the cluster size and diameter can be used to restrict the quality of a cluster.

Definition 2.2 [2]: A cluster XC defined on a set of attributes X is any subset of r that satisfies the following for some density threshold Xd 0 and frequency threshold 0s ,  X X dXCd 0])[( 0|| sC X (2)  Where r is a relation over a relation schema and | r |= n . The number of tuples in the cluster is || XC and the dimension is || X .

Definition 2.3 [2]: A generalized quantitative association rule is an implication of the form  yYYxXX CCCC ......

where all iX and jY are  disjoint. A rule holds with confidence c , if cCCC  iXijYjiXi ||/|)()(| .The rule holds  with support s , if sDBCC jYjiXi  ||/|)()(| .

Where || DB  is the size of database, i.e., the total number of tuples;  iXi C  is a set of tuples in which  each tuple belongs to every iXC .

3. Secure set union  In this section we present a new algorithm for secure set union that has less number of element encryptions. This algorithm can be applied to our privacy-preserving quantitative association rules mining with less modification.

3.1. Algorithm  Secure set union is employed to compute the union of sets presented by different parties under the condition of not revealing any element?s owner to other parties. The existing algorithm for secure set union in [6] and [13] needs to encrypt every element n times, where n  is the number of parties. This will lead to huge computing cost when n  and data volumes are large. Compared with it, our proposed algorithm does not relate the number of element encryptions with the number of parties in the following algorithm. This can be achieved by mixing up input elements and encrypting elements with RSA scheme, which is known as a famous public key encryption scheme.

The proposed algorithm for secure set union is illustrated in Table 1, where we name it as Algorithm 1 for easily referring latterly.

It can be shown that algorithm 1 meets the requirement: (1) no party can determine any element?s  Proceedings of the 2nd IEEE International Symposium on Dependable, Autonomic and Secure Computing (DASC'06) 0-7695-2539-3/06 $20.00  ? 2006    owner, (2) no party can learn how many elements any other party has because of random division in Step2, and (3) the number of any element encryptions is at most one and is not related to the number of parties.

Table1 Algorithm 1 secure set union Input: n sets. Each set, denoted by iA  ( ni1 ),  belongs to each party.

Output: ii A ( ni1 ). That is the set union.

Step1:    Public keys announcement.

The public key of party i is denoted by ip .

Step2:    Mixture and transmission.

For ,,,1 ni  each party i divides iA into n subsets at random, i.e., jiji AA , ( nj1 ), and sends )( ,mod1 jip AE nj to party  j (i.e., that the encrypted subset with the public key njp mod1 ).

Step3:    For ,,,1 ni Each party i sends )( ,mod1 ijp AE ni to  party ni mod1 .

Step4:    Decryption.

For ,,,1 ni  each party ni mod1 computes decryptions and eliminates duplications, and then sends the set union ijj A ,  to party 1.

Step5:   Party 1 computes the set union )( ,ijji A ,  i.e., iijiji AA ,, , and then broadcast the result.

If algorithm 1 is applied to the literature [6], the privacy-preserving Boolean association rules mining will be more efficient. For quantitative association rules, this only needs a little modification on Step4 & Step5. Step5 can be deleted and modify Step4 as: for  ,,,1 ni  each party ni mod1 computes decryptions and then sends decryptions to party 1. The modified Algorithm will become an algorithm for secure data collection and can be used as a sub-protocol of the following quantitative association rules mining.

3.2.  Analysis  Theorem 1: (Correctness) Algorithm 1 outputs a set union of all iA  Proof: Two aspects of correctness should be considered, as follows:  1. No element in all input sets is wrongly omitted.

2. Any pair of elements in the output set is not  identical.

In algorithm 1, only Step4 and Step5 are considered, since parties compute the set union in these two steps and they do not have any computations in the remaining ones.

In Step4, each party computes the union of decrypted sets, which lead to satisfaction of the first requirement of correctness. In fact, it is reasonable that the error is not considered if the computation occurs in decrypted data.

Likewise, in Step5 party 1 computes the union of decrypted data and in Step5 the computation satisfies the second requirement of correctness because it unites all elements and ensures that no pair of the same elements exists. Theorem1 follows.

Theorem 2: (Security) Algorithm 1 securely computes the set union.

Proof:  An algorithm or protocol is said to be secure if there exists a simulator such that we can simulate the views of all parties on the known input and output, i.e.

the output of the simulator is computationally indistinguishable from the real views of the party in the algorithm or protocol. A detailed discussion on security can be found in [9].

We consider the view of party j , denoted by ),,( 1 nj AAView . On input jA , in Step2 party j  receives )( ,mod1 jip AE nj ( ni1 ); in Step3  party j receives )( 1, jip AE j ( ni1 ); in Step5  party j receives ii A  as the output. We construct a simulator S that behaves as follows:  1. S randomly and uniformly divides ii A  into n subsets, such that ii A = ii A .

2. For every j , S  randomly and uniformly selects some elements in ii A , and then adds them into jA , such that jA  is modified to be a new subset, denoted by jA , in which some pairs of elements may be the same.

3. S  randomly and uniformly divides jA into n subsets, denoted by jiA , , and computes  encryptions )( ,mod1 jip AE nj ( ni1 ) which  are regarded as messages received by party j in Step2, then S outputs these encryptions.

4. )( 1, jip AE j ( ni1 ) are regarded as  messages received by party j in the Step3, and then S  outputs them.

Considering the difference between ),,( 1 nj AAView and the output of simulator S , we  Proceedings of the 2nd IEEE International Symposium on Dependable, Autonomic and Secure Computing (DASC'06) 0-7695-2539-3/06 $20.00  ? 2006    know that )( ,mod1 jip AE nj and )( ,mod1 jip AE nj , as well as  )( 1, jip AE j ( ni1 ) and )( 1, jip AE j ( ni1 ) are  computationally indistinguishable because of the property of the public key encryption scheme.

Therefore, the output of algotithm1 is not changed when the view of a party is replaced with the output of simulator S . In addition, the view of party 1 is different from the view of other parties and it cannot know any other element?s owner because of the mixture in Step2, Step3 and Step4.

Thus, it can be concluded that we can simulate the views of all the parties on the real input and output by constructing a simulator S . This implies that any party can only access the output information and does not learn more information after executing algorithm 1.

Theorem 2 follows.

Complexity: We consider the communication complexity and the computational complexity of algorithm 1.

The most important communication measure is the round complexity. Obviously, the number of rounds in algorithm 1 is linear with n , i.e. )(nO .

We denote the size of every input set by || im ( ni1 ) and the total number of elements  by || m . For every party, random choice runs at time |)(| imO and encryption or decryption runs at time |)|( imtO , where let the time of encrypting or decrypting an element be t . Thus, the computation complexity of algorithm 1 is bounded by |)|(|)|||( imtOimimtO , compared with |)|( mtO in [6].

Num.of all elements/Num.of parties  Ti m  e( s)  Our algorithm 1 old algorithm  Fig. 1: Party?s computation time We also implemented algorithm 1 and the literature  [6]?s algorithm on an Intel Pentium4 CPU 2.40GHz and Windows XP sp2 OS computer. We used RSA scheme in a crypto function library, Crypto++5.23. We  assume that the size of an element is 512bits and the total number of parties is 3. Figure 1 illustrates our measurements of one party?s computation time in these two algorithms.

In [6], each party needs to encrypt all elements; however, in our algorithm, each party just needs to encrypt part of all elements. Thus, as shown in Fig. 1, the running time of [6]?s algorithm is about n times longer than our algorithm?s.

4. Privacy-preserving quantitative association rules mining  In this section, we present an algorithm for privacy- preserving quantitative association rules mining.

An algorithm for quantitative association rules mining (definition 2.3) includes two phases if it does not care about privacy: the first phase is to find the clusters and the second phase is to form rules that hold with confidence and support threshold. In the following algorithm, in order to securely find the clusters, we take advantage of the properties of CF-tree in the BIRCH method [12] and invoke secure data collection sub-protocol from modified algorithm 1.

Secure sum sub-protocol in [6] is used for securely forming association rules.

4.1. CF-tree  In the BIRCH method [12], a CF tree is built for each quantitative attribute set that needs to be discretized. Since a node in a CF tree records the summary of the properties of the cluster, a single data point cannot be revealed in the CF tree. The summary information is called as a Clustering Feature (CF) that contains the number of tuples, the linear sum of the tuples and the square sum of the tuples of the cluster [2]. The CF is defined as follows:  Definition 4[2]: For a cluster },...,{ 1 NX ttC  on a set of attributes X  )][],[,()( 1 1  N  i  N  i iiX XtXtNCCF           (3)  Given the CF of a cluster, we can easily compute the diameter, the size, and the centroid of the cluster.

From the CFs of two clusters, the CF of their union can be derived. Hence, clusters can be combined and new points added to clusters using only the CFs [2].

A CF tree is a height-balanced tree (similar to a B tree). An internal node contains a list of (CF i , child i ) pairs where the child i is a data pointer that points the i -th child node and the CF i is the CF of  Proceedings of the 2nd IEEE International Symposium on Dependable, Autonomic and Secure Computing (DASC'06) 0-7695-2539-3/06 $20.00  ? 2006    the i -th sub-cluster that is derived from the i -th child node. A Leaf node contains a list of [CF i ] where the CF i  is the CF of the i -th sub-cluster. Actually, in a CF tree, the cluster derived from a node is the union of all sub-clusters derived from its child nodes. We note that the detail of single tuple is not recorded in a CF tree. A more detailed description can be found in [12].

For each attribute set iX , we select an initial  diameter threshold iXd0  and build a CF tree that holds with the threshold. If the memory is full, the tree should be reduced by increasing the diameter threshold and rebuilding the tree [2].

4.2.  Secure identifying clusters  In order to securely find clusters over global data, each party first builds CF trees for local data, which are adapted to the size of the local memory. In view of privacy, each sub-cluster of a leaf node should include more than two data points at least such that any attribute value is not directly recorded in a leaf node.

Then, every party sends the local leaf nodes to party 1 without disclosing any data owner and party 1 builds a CF tree on input all leaf nodes. We observe that, firstly, any attribute value is not revealed because of the properties of CF tree, and that, secondly, any local CF tree is not revealed because of the secure collection.

Furthermore, the way of handling the outliers may be not changed, because we will refine the clusters on global data. Hence, it plays an important role in our algorithm to securely send leaf nodes to party 1.

One method of secure data collection is to mix up and transmit the leaf nodes. Each party randomly and uniformly divides each local leaf node into n factions and sends the i -th faction to party i , such that no party can learn all CF vectors of any leaf node of any other party. Then, all received data are transmitted to party 1 to build a global CF tree. Because of the mixture, party 1 does not know which party any CF vector belongs to.

The above method is efficient, though maybe it is not enough for security. Obviously, each party could obtain 1/ n  data of other party. If n is small, a more secure method should be considered. We recall that algorithm 1 can be modified to securely collect data.

Hence, we can invoke the modified algorithm as a sub- protocol to securely collect leaf nodes and each party?s input in the sub-protocol is one leaf node. However, the sub-protocol is not efficient because of introduction to encryption schemes. The trade-off between efficiency and security should be considered in order to choice a sound method of data collection.

Finally, we need to refine global clusters to avoid the undesirable effect of the skewed input order. In fact, exiting clustering algorithms for a set of data points can be readily adapted to work with a set of sub- clusters, each described by its CF vector [12]. Then, the refined clusters can be found by party 1. In addition, we can refine the clusters further by scanning the global data, which is similar to the option phase in BIRCH method. We can first calculate the centroids of clusters that have been refined by applying existing clustering algorithms to a set of sub-clusters, and we regard these centroids as seeds. Secondly, each party scans the local set of tuples and redistributes the data points to its closest seed to obtain new clusters. At last, party 1 securely collects the CF vectors representing the clusters and rebuilds a global CF tree. As a result, we can obtain more refined global clusters without disclosure of information of every party.

4.3.  Secure forming rules  Party 1 invokes a classic Apriori algorithm for association rules mining on input the clusters. The following form of an association rule can be discovered by finding frequent cluster sets and generating rules from frequent cluster sets:  yx YYXX CCCC ...... 11 It holds with confidence c ,  if cCCC iji XiYjXi ||/|)()(| , and it holds  supports s , if sDBCC ji YjXi ||/|)()(| . (See  definition2.3) When we test the support threshold without  revealing local support count, we have the following reduce that is similar to reduce in [6] except for input cluster sets.

sup.X s | DB |= s )||(  n  i iDB  n  i iX   sup. s )||(  n  i iDB  n  i ii DBsX   |)|sup.( 0  X denotes a cluster set, and sup.X denotes the support count for X (i.e. the number of tuples , and each of them belongs to all clusters in X ).

Therefore, testing support threshold for a cluster set is reduced to a comparison against a sum of local values. We can invoke a secure sum algorithm [6] to  Proceedings of the 2nd IEEE International Symposium on Dependable, Autonomic and Secure Computing (DASC'06) 0-7695-2539-3/06 $20.00  ? 2006    check if n  i ii DBsX   |)|sup.( 0 without revealing  the local support count. Likewise, we can securely check confidence threshold for a cluster set by a similar reduce and invoking the secure sum algorithm.

Furthermore, we can not directly check if a data point satisfies a quantitative association rule because every cluster is presented by its CF vector. However, we can distribute a data point to its closest cluster by calculating the distance between the data point and the centroid of a cluster. As a result, we can check if a data point satisfies an association rule by calculating the distance.

4.4. Description and analysis  Table 2: Algorithm 2 (privacy-preserving quantitative association rules mining)  Input:   n parties have their own database iDB that have identical attribute set and distinct attribute values; Support threshold s ; Confidence threshold c ;  Output: Quantitative association rules  yx YYXX CCCC ...... 11   hold with thresholds.

Step1:      For ,,,1 ni each party i do  Build_CF_Tree( iDB );  Step2:      For ,,,1 ni each party i do  randomly and uniformly divides every leaf node into n factions and then sends the j -th faction to party j .

Step3:      For ,,,1 ni each party i do  sends received data to party 1;  if i =1 do  Build _CF_Tree; //The party 1 builds a CF tree based on received data.

Step4:      Find further refined global clusters.

Step5:     Party 1 invokes the Apriori algorithm to form rules, and broadcasts them:  When testing thresholds, the parties invoke secure sum algorithm.

The aim of privacy-preserving quantitative association rules mining is to discover generalized quantitative association rules (see definition 2.3)  without revealing any information of the local data that includes values of local tuples, distribution of local data and the local count of a cluster. The algorithm is described in Table 2, and is called algorithm 2.

We analyze the correctness, the security and the complexity of algorithm 2 as follows.

Theorem 3 (Correctness): Quantitative association rules that hold with support and confidence thresholds can be discovered by algorithm 2.

Proof: We have taken advantage of the BIRCH clustering method, the only difference between the BIRCH method and our clustering method is that our clustering program runs on distributed data. If the BIRCH method is much sensitive to the input order of data, our clustering method will fail on distributed data.

Fortunately, compared with other clustering methods, the BIRCH method has less order sensitive [12]. We consider algorithm 2 step by step as follows. In Step 1 and Step 2, all data points are presented by entities in leaf nodes and in Step 3 all entities are collected to party 1. Compared with the BIRCH method, the input data are disordered in the above steps such that the input order may be very different from the input order of the original BIRCH method when a global CF tree is built in Step 3. However, because the original BIRCH method is not sensitive to the input order, the CF tree building is correct in Step3. Even if the data collection in algorithm 2 leads to the skewed input order of CF tree building, the effect of the skewed input order will be avoided in Step 4. We invoke a classic method to form rules in Step5 and we can conclude that theorem 3 follows.

Theorem 4 (Security): Quantitative association rules are securely discovered by algorithm 2.

Proof: The privacy of each party includes values of tuples and local data distribution. Algorithm 2 is considered to be secure if the privacy of each party is preserved. We analyze algorithm 2 step by step as follows.

No message is exchanged in the Step 1. The CF vectors for sub-clusters of leaf nodes are send in Step 2.

We first observe that the CF vectors do not record the concrete value of any tuple, although the CF vectors record the summary of the properties of the cluster.

Hence the values of tuples are preserved by their owner. Secondly, the party that has received some CF vectors from other parties may learn some data distributions of other parties, although it can not obtain the full data distribution of any other party. This can be avoided by invoking secure collection sub-protocol if users prefer security to efficiency. Otherwise, users may trade security for efficiency. The building of CF trees in Step3 and Step4 utilizes CF vectors as input and party 1 that builds global CF trees does not know  Proceedings of the 2nd IEEE International Symposium on Dependable, Autonomic and Secure Computing (DASC'06) 0-7695-2539-3/06 $20.00  ? 2006    which party any CF vectors belongs to, hence in Step 3 and Step4 party 1 does not obtain any information of values of tuples or local data distribution. In Step 5 secure sum algorithm can check the support and confidence thresholds without revealing local count values. As a result, Quantitative association rules are securely discovered by algorithm 2.

Complexity:  BIRCH can work with any given amount of memory and the I/O complexity is a little more than one scan of data [12]. Although it runs on distributed data, algorithm 2 does not lose the advantage of BIRCH. The cost of building trees in party 1 is ))(log( 2NMO L [12], where M denotes the total number of attribute sets, L  is a threshold value for the size of internal nodes of a CF tree and N  is the total number of all tuples. The cost of random division in algorithm 2 is )(NO . If encryption scheme is introduced, the cost of encryption is )( NtO  where t denotes the time of encrypting a message. The communication complexity is acceptable because we note that CF vectors just record the summary of the properties of clusters and the size of messages exchanged in algorithm 2 is limited by the amount of memory of each party, although the number of message exchanges seems )(NO .

5. Conclusions  This paper concerns the security of distributed quantitative association rules mining. We have presented an algorithm (algorithm 2) for mining quantitative association rules without revealing private information of parties on horizontally partitioned data.

As an important sub-protocol for both our algorithm and Boolean association rules mining, algorithm 1 is proposed for secure set union, which is employed to compute set union of input of all parties without disclosing data?s owners. It has been shown that this algorithm for secure set union is more efficient than the algorithm presented in [6]. The results of implementing of two algorithms are also provided. In algorithm 2, we have taken advantage of the properties of CF trees and utilized secure sum sub-protocol to prevent breach of privacy of parties when we mine quantitative association rules. In addition, the correction, the security and the complexity of the proposed algorithms are analyzed. Future works maybe focus on the measurements of efficiency and security or other secure questions of data mining.

6. References  [1]  R. Srikant, and R. Agrawal, ?Mining Quantitative Association Rules in Large relational Tables?, Proceedings of the 1996 ACM SIGMOD international conference on Management of data, ACM Press, Montreal, Quebec, Canada. June 1996, pp.1-12.

[2]  R.J. Miller, and Y. Yang, ?Association Rules over Interval Data?, Proceedings of the 1997 ACM data, Tucson, Arizona, United States, May 1997, pp.452-461.

[3]  R. Agrawal, and R. Srikant, ?Privacy-preserving data mining?, Proceedings of the 2000 ACM SIGMOD on Management of data, Dallas, TX USA, May 15-18 2000, pp.439-450.

[4]  Y. Lindel, and B. Pinkas. ?Privacy preserving data mining?, Journal of Cryptology,2002, 15(3), pp.177- 206.

[5]  J. Vaidya, and C. Clifton, ?Privacy Preserving Association Rule Mining in Vertically Partitioned Data?, Proc. of SIGKDD02, Edmonton, Alberta, Canada. July 23 - 26, 2002, pp.639-644.

[6]  M. Kantarcioglu, and C. Clifton ?Privacy-preserving Distributed Mining of Association Rules on Horizontally Partitioned Data?, Transactions on Knowledge and Data Engineering Volume 16,  Issue 9, IEEE Computer Society Press, Los Alamitos, Sept.

2004, pp.1026 - 1037.

[7]  Luo Yonglong , Huang Liusheng , Jing Weiwei , Yao yifei and Chen Guoliang , ?An algorithm for Privacy- preserving Boolean Association Rule Mining?, ACTA ELECTRONICA SINICA, 33(5), 2005, pp.900-903.

[8]  A.C.Yao, ?Protocols for secure computations?, In Proceedings of the 23rd Annual IEEE Symposium on Foundations of Computer Science, 1982, pp.160-164.

[9]  O. Goldreich. The Foundations of Cryptography - Volume 2, Basic Applications , Cambridge University Press 2004.

[10]  W. Du, and Mikhail J. Atallah, ?Secure Multi-Party Computation Problems and Their Applications: A Review and Open Problems?, NSPW?01, Cloudcroft, New Mexico, USA. ACM Press, Sept. 10-13, 2002, pp.13-22.

[11]  J. Han , and M. Kamber, Date Mining : Concepts and Techniques [ M ]. Morgan Kaufmann Publishers, 2000.

[12]  T. Zhang, R. Ramakrishnan, and M. Livny, ?BIRCH: An Efficient Data Clustering Method for very large Databases?, Proceedings of the 1996 ACM SIGMOD Montreal, Quebec, Canada, June 1996, pp.103-114.

[13]  C. Clifton, M. Kantarcioglu, X. Lin, and M. Zhu, ?Tools for privacy preserving Distributed Data Mining? ACM SIGKDD  Explorations 4(2), January 2003. pp.1-7.

[14]  Huang Liusheng, Chen Huaping, et al., ?A fast algorithm for mining association rules?, Journal of Computer Science and Technology 2002 15(6), China, 2000, pp.619 ? 624.

