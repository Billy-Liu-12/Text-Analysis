0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

Abstract?The transfer of big data in various applications across high-performance networks (HPNs) in a national or inter- national scope consumes a significant amount of energy on a daily basis. However, most existing bandwidth scheduling algorithms only consider traditional objectives such as data transfer time minimization, and very limited efforts have been devoted to energy efficiency in HPNs. In this paper, we consider two widely adopted power models, i.e. power-down and speed-scaling, and formulate two instant bandwidth scheduling problems to minimize energy consumption under data transfer deadline and reliability constraints. We prove the NP-completeness of both problems, and design a fully polynomial time approximation scheme (FPTAS) for the problem using the power-down model.

We also design an approximation algorithm and a heuristic approach that considers the tradeoff between objective optimality and time cost in practice for the problem using the speed-scaling model. The performance superiority of the proposed solutions is illustrated by extensive results based on both simulated and real-life networks in comparison with existing methods.

Index Terms?High-performance networks, bandwidth scheduling, energy efficiency.



I. INTRODUCTION  MANY large-scale applications in various science, en-gineering and business domains are generating colos- sal amounts of data, now frequently termed as ?big data?,  which are carried by high-performance networks (HPNs) with  the capability of bandwidth provisioning to support various  remote operations. Several HPN projects are currently un-  derway, including On-demand Secure Circuits and Advance  Reservation System (OSCARS) [1] of the Energy Sciences  network (ESnet) and Interoperable On-demand Network (ION)  of Internet2 [2].

The trunk links in HPNs are oftentimes underutilized as  exemplified by ESnet [33]. However, due to a dynamic dis-  tribution of traffic loads, network devices are always powered  on to support long-duration big data transfer, which consumes  a significant amount of energy on a daily basis. Hence, it is  particularly important to achieve energy-proportional network-  ing in HPNs. The energy consumption of network devices  consists of two components, i.e. static energy consumption  (SEC) and dynamic energy consumption (DEC). In many  cases, SEC could take up around 90% of the total consumed  energy. Green networking is mainly based on two types  of techniques, i.e. traffic consolidation to reduce SEC by  powering down idle network devices, and load balancing to  Some preliminary results in this manuscript were published in a conference paper [28].

T. Shu and C.Q. Wu are with the Department of Computer Science, New Jersey Institute of Technology, Newark, NJ 07102, USA. Email: {ts372, chase.wu}@njit.edu. Please send all correspondence to Wu.

reduce DEC using adaptive link rate supported by dynamic  voltage and frequency scaling (DVFS) for speed-scaling power  consumption, or a combination of both. Researchers have  applied such techniques to different network environments  including the Internet, which is an extreme-scale network  without a centralized scheduler, and data center networks  (DCNs), which are small-scale local access networks with  a hierarchical topology, and proposed various network-layer  solutions. However, the efforts made in HPNs along these lines  are still quite limited.

Unlike the Internet and DCNs, HPNs are wide-area back-  bone networks with an irregular topology to provision ded-  icated channels through bandwidth reservation for big data  transfer. Moreover, bandwidth provisioning fits naturally in  the framework of the emerging Software-Defined Networking  (SDN) technology, where the controller is separated from  the data plane and maintains the global network topology.

In general, the HPN infrastructures such as edge devices,  core switches, and backbone routers are coordinated by a  management framework, namely control plane, which is re-  sponsible for reserving link bandwidths, setting up end-to-  end network paths, and releasing resources when tasks are  completed. As the central unit of a generalized control plane,  the bandwidth scheduler computes appropriate network paths  and allocates link bandwidths to meet specific user requests  based on network topology and bandwidth availability [24].

Different from existing bandwidth scheduling problems that  mainly consider traditional optimization objectives such as  minimizing the time span of a data transfer, our work focuses  on the energy efficiency of bandwidth scheduling in HPNs.

We take two orthogonal approaches to achieve energy effi-  ciency in HPNs: i) reduce SEC, the main energy cost, based on  the power-down model, taking transitional power consumption  and time into consideration while ignoring the non-linear vari-  ation of dynamic power consumption (DPC); ii) reduce DEC  based on the speed-scaling model since frequently shutting  down network devices may disrupt network connectivity and  undermine the life span of affected devices. The speed-scaling  model in existing research is divided into two categories:  experimental power model based on the linear regression of  device measurements, and theoretical power model including  step functions and power functions based on the property of  a single gate circuit. The former does not consider the non-  linear variation of DPC, while the latter may lack accuracy in  modeling the actual power consumption of network devices.

To improve the modeling accuracy with a better alignment  with practical measurements, we develop and adopt a DPC  model based on polynomial functions.

0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   In this paper, based on the widely adopted power-down  and speed-scaling models, we formulate two instant bandwidth  scheduling problems to minimize energy consumption under  data transfer deadline and reliability constraints. We prove  the NP-completeness of both problems and design a class of  approximation and heuristic algorithms, referred to as Smart  Advance reserVation for Energy Efficiency (SAVEE), taking  into consideration energy consumption, reliability, and transfer  time in practice. The performance superiority of the proposed  solutions is illustrated by extensive results based on both  simulated and real-life networks in comparison with existing  methods.

The rest of the paper is organized as follows. Section II  provides a survey of related work. We formulate two band-  width scheduling problems in Section III and prove their  NP-completeness in Section IV. In Section V, we design a  fully polynomial time approximation scheme (FPTAS) for the  problem using the power-down model. In Section VI, we  design an ?-approximation algorithm and a heuristic for the problem using the speed-scaling model. Sections VII and VIII  present the performance evaluation results.



II. RELATED WORK  Since Gupta et al. first discussed energy saving by putting  network components to sleep [20], many research efforts  have been made in green networking. Existing techniques  at the software level mainly fall in two categories: resource  consolidation and energy-proportional computing [9].

A. Resource Consolidation  Resource consolidation, i.e. power-down, reduces energy  waste due to the over-provisioning and over-dimensioning  of network infrastructures [25], by turning off some lightly  loaded routers and rerouting the network traffic on a selected  set of active network equipments [26].

Some research on power-down policies is focused on  energy-efficient routing on the Internet (no centralized sched-  uler) to address various issues, such as topology construction  for full connectivity using the least number of network de-  vices [13], routing stability during topology reconstruction,  and compatibility with existing routing protocols [23].

Other efforts concentrate on centrally controlled networks  with MPLS and RSVP-TE protocols. Zhang et al. proposed an  intra-domain traffic engineering mechanism called GreenTE, a  heuristic that deals with multiple traffic demands to maximize  power saving on idle links and line cards under link utilization  and packet delay constraints in commercial networks, such as  AT&T [38]. In frame-based telecommunication infrastructures,  Andrews et al. studied periodic scheduling and routing to  minimize an active period per element within each frame,  and designed a schedule with close-to-minimum delay in a  linear topology. They extended it to an arbitrary topology by  network partition, and provided a O(log logN)-approximation for power and delay minimization by reducing switching  via routing [5]. Addis et al. formulated multiperiod energy-  aware fixed and variable routing as an ILP problem for  multiple traffic demands with the constraints on the chassis  capacity and interperiod line-card reliability restriction among  a set of traffic scenarios and proposed a heuristic online  approach [3]. Since ILP cannot be solved in polynomial time,  their solutions were only verified in a small-scale network of  9 nodes. Zhang et al. investigated an NP-complete problem  of utilizing correlated traffic demands to conduct power-aware  configuration of points of presence (PoPs) [39]. They designed  an optimal algorithm when each chassis has 2 ports, and  a P/2-approximation and a 2 lnN -approximation algorithm for the general problem, where P is the number of ports per chassis and N is the number of chassis. However, their work was focused on static network construction, not dynamic  routing or scheduling.

There also exists some work on energy efficiency in data  center networks (DCNs). Considering the fact that band-  width demands of different flows do not peak simultaneously,  Wang et al. formulated the integration of link rate adaptation  and traffic consolidation based on correlation analysis among  flows in DCNs as an NP-complete flow assignment problem  for minimum power consumption of switches, and proposed  a correlation-aware heuristic to select a minimum subset of  devices [37]. Li et al. proposed an energy-aware instant  flow scheduling solution in SDNs for DCNs with homoge-  neous switches through an exclusive routing scheme for each  flow [22]. Note that DCNs are local access networks with a  hierarchical organization of switches to interconnect tightly-  coupled high-performance servers, while HPNs considered in  our work are one type of backbone networks with irregular  wide-area footprints to support dedicated data transfer.

While power-down policies save significant SEC, frequently  switching on/off devices involves considerable time and energy  overhead. However, the above work does not consider booting-  up and shutting-down time (several minutes) that is critical in  HPNs, and is not intended for HPNs where a single big data  transfer may consume substantial energy. Our work fills in the  blank for energy efficiency in HPNs.

B. Energy-proportional Computing  Energy-proportional computing, i.e. speed scaling, ensures  that power consumption scales proportionally with resource  utilization. Typical examples include dynamic voltage and  frequency scaling (DVFS) and adaptive link rate (ALR) [8].

Energy saving from speed scaling largely depends on specific  power models of devices.

Chabarek et al. and Vishwanath et al. measured the power  consumption of routers/switches equipped with different line  cards under various traffic conditions through experiments, and  developed power models at the granularity level of per chassis,  line card or port [11], and at the granularity of per-packet  processing and per-byte store-and-forward packet handling  operations [35], respectively. Since measurement-based power  models are generated by linear regression, they are mainly  used in system design for simplicity.

Dynamic power models are sometimes considered as step  functions with respect to the data rate. Tang et al. formulated  problems of single-session and multi-session flow allocation  with rate adaptation (SF-RAP and MF-RAP) for multi-path  transfer, to find a flow allocation on given candidate paths  for each session to minimize incremental power consumption.

They proved the NP-hardness of both problems and presented    0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   a 2-approximation for SF-RAP and an LP-based heuristic for  MF-RAP [29]. According to the advanced configuration and  power interface specification that introduces low power idle  (LPI) and ALR, Bolla et al. proposed a queuing theory-based  model to describe the impact of these technologies on the  packet processing engine with multiple parallel pipelines in-  side a single line card, and formulated a problem to capture the  tradeoff between power consumption and packet latency [10].

Other research considers dynamic power models as power  functions of data rate r, i.e. P (r) =  {  0, r = 0 ? + ?r?, r > 0  . i)  Some work only considers DPC, i.e. speed-power curves  (? > 1) with ? = 0. Zhao et al. introduced a Nash bargaining framework that treats load balance and energy efficiency ob-  jectives as two virtual players in a game theoretic model [40].

Andrews et al. proposed Batch, SlowStart and queue-based  rate adaptation policies for a single server to ensure various  bounds on queue size (i.e. network stability) and energy usage,  and showed that in a temporary sessions model, SlowStart  with farthest-to-go/nearest-to-source scheduling provides the  bounds on queue size and energy usage, and in a perma-  nent sessions model, any above rate adaptation policy with  weighted fair queueing scheduling provides a delay bound  with respect to rates [6]. ii) Some other work considers  both static (? > 0) and DPC. Andrews et al. formulated a min-power multicommodity integral unicast routing problem  that guarantees the bandwidth demand of each flow in an  undirected graph, and proved that there is no bounded ap-  proximation. They provided a O(log3 N)-approximation for subadditive speed-power curves, where N is the network size, and used randomized rounding to provide a O(log??1 D)- approximation for a superadditive speed-power curve ?er  ?  per link e, where D is the maximum bandwidth demand of flows, and a O(n+ log??1 D)-approximation, where n is the number of flows, and a O((1+maxe{?e/?e}1/?) log??1 D)- approximation for speed-power curves ?e+?er  ? (? > 1) [4].

Antoniadis et al. designed a O(log? n)-approximation offline algorithm and a O(log3?+1 n(log logn)2?)-competitive online algorithm for a unicast energy-efficient multicommodity edge  routing problem of unsplittable unit flows in an undirected  multi-graph with ? > 1 [7]. Wang et al. studied a schedul- ing and integral routing problem that considers deadline-  constrained flows with given data sizes in DCNs, and pro-  posed a P -solution for a special case with given routes [36].

They proved that the joint scheduling and routing problem  is strongly NP-hard, and provided a O(??(n2 log d)??1)- approximation, where d is the maximum density of flows and ? = (tK ? t0)/mink(tk ? tk?1), where t0 ? t1 ? . . . ? tK are release times and deadlines of flows. Gupta et al.

designed an ??-competitive online greedy algorithm for a unicast energy efficient edge routing problem with splittable  flows [19]. Since speed scaling is applied to routers more  than links, Krishnaswamy et al. proposed a O(log12?+5 N)- approximation for a unicast energy-efficient vertex routing  problem with splittable unit flows in an undirected multi-graph  with ? > 1 [21].

In fact, the dynamics in the power consumption of routers,  switches, and line cards in real networks are much more  A power increase of 117W can be observed when the ASR1000- ESP20 module is added.

Power utilization on a non-redundant, partially populated chassis at maximum line rate with firewall enabled did not surpass 360W.

PSU: Power Supply Unit  (a)  Device State  (b)  Fig. 1. Power profiles of Cisco routers: (a) Cisco ASR 1000 Series [14]; (b) Cisco 3945 ISR [15].

complex than the above power models. Fig. 1 shows the actual  power consumption measurements of different Cisco routers in  various settings. The simplified power models in the literature  such as a step or power function are generally insufficient to  model such complexities in real networks, such as Fig. 2 in [8].

In this paper, we develop a generalized power consumption  model of a polynomial function for network devices and  employ the speed-scaling technique based on this model to  achieve energy efficiency in HPNs.



III. PROBLEM FORMULATION  A. System Background  The bandwidth reservation service in HPNs follows two  fundamental processes: resource scheduling and path routing  based on resource availability and existing reservations, i.e.,  multi-constrained path computation. In real-life bandwidth  reservation services such as OSCARS [1] of DOE?s ESnet  as illustrated in Fig. 2 [34], the resource manager typically  maintains a priori knowledge of exact flow cost and an  accurate snapshot of available network resources, which are  used to determine the best reservation option for a given user  request.

B. Cost Models  We consider an HPN G(V, L) that consists of a set V of routers connected through a set L of full duplex wired links of capacities CL = {Cl|l ? L}. Each router v is equipped with Nv line cards cv,i, i = 1, 2, ..., Nv, each of which contains multiple ports [28]. Each line card cv,i includes a transmitter cTv,i and a receiver c  R v,i. The set V of routers  and the set LC of line cards on all the routers make up a set D of network devices, i.e. D = V ? LC. Each pair of adjacent routers are connected by one port-to-port link, which  is associated with a link error rate ?l (0 ? ?l ? 1). We    0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   User Requests  Source Destination Data Size Deadline ReliabilityReliability  Network Resource RequestNetw  Solution Path  On-demand Secure Circuits and Advance Reservation System (OSCARS)S t (OSCAR  Resource Manager  Database Update the resource manager  with new path utilization  t2[0] t2[1] t2[2] t2[3]  R e se  r v a ti  o n  B a n  d w  id th  t2[0] t2[1] t2[2] t2[3]  R e se  r v a ti  o n  B a n  d w  id th  Per Link Utilization by Time  Network Topology  t2tt [0] t2tt [1] t2tt [2] t2tt [3]]  R e se  r v a ti  o n  B a n  d w  id th  [[00]] t [[11]]  R e se  r v  t [[22]] t [[33  Link Utilization vs Time  st  t2tt [0] t2tt [1] t2tt [2] t2tt [3]]  R e se  r v a ti  o n  B a n  d w  id thth  [[[000]]] tt [[[111]]]  R e se  r v  tt [[[222]]] tt [[[33  Fig. 2. On-demand Secure Circuits and Advance Reservation System.

introduce a path transmission failure rate (PTFR) ?p to define the reliability of data transfer along a path, which is measured  as the accumulated error rate over all component links of a  path p, i.e. ?p = 1? ?  l?p (1 ? ?l). A user data transfer request R(vs, vd, ?, t  A, tD, ?) specifies the source vs, the destination vd, the data size ?, the time point t  A (tA ? 0) when the data becomes available for transfer, the deadline tD by which the transfer must be completed, and the maximum allowed PTFR  ? of the data transfer.

1) Bandwidth Reservation Model  t1[0] t1[1] t1[2] t1[3]  t2[0] t2[1] t2[2] t2[3]  t[0] t[1] t[2] t[3] t[4] t[5]  Aggregated TB  TB list for link 2  TB list for link 1  A v  ai la  b le  B an  d w  id th  A v  ai la  b le  B an  d w  id th  A v  ai la  b le  B an  d w  id th  Fig. 3. An example ATB table.

We use a 3-tuple of time-  bandwidth (TB) (tl[i], tl[i + 1], bl[i]) to represent the avail- able (or residual) bandwidth  bl[i] of link l at time in- terval [tl[i], tl[i + 1]), i = 0, 1, ? ? ? , Tl?1, where Tl is the total number of time slots of  link l. For each directed link l ? L, its TB list corresponds to a step function with respect to  time t to describe the available bandwidth of link l. We com- bine the TB lists of all links to  build an Aggregated TB (ATB)  table, where we store the avail-  able bandwidths of all links in  each intersected time slot. As  shown in Fig. 3, we first create  a set of new time slots by combining the time slots of all links  l ? L, and then map the available bandwidths of each link to the ATB table in each new time slot. We denote the ATB  table as (t[0], t[1], b0[0], b1[0], ? ? ? , bm?1[0]), ? ? ? , (t[TA ? 1], t[TA], b0[TA ? 1], b1[TA ? 1], ? ? ? , bm?1[TA ? 1]), where TA is the total number of new time slots after the aggregation of TB lists of m links. The time slot i corresponds to the time interval [t[i], t[i + 1]), and t[TA] = +? [24]. The scheduler maintains the ATB table BAL (t) for all directed links L in all future time slots.

Once the scheduler admits a new user request over a com-  puted network path for a certain time duration, or a network  device is shut down or booted up, the ATB is dynamically  updated: BAl (t) = Cl(t) ? BRl (t) ? 0, where Cl(t) is the actual capacity of link l at time point t, and BRl (t) is the reserved bandwidth on link l at time point t. We use Bp(t) to denote the bottleneck bandwidth of path ps,d from source vs to destination vd at time point t, i.e. Bp(t) = minl?p B  A l (t) [28].

2) Power Models  According to the architecture of commercial routers, we  extend the power model in [11] to a more general one, and use  it to calculate the power consumption of router v with a set of traffic loads Rv = {rv, rTv,i, rRv,i|i = 1, ? ? ? , Nv}, where rv is the sum of incoming, outgoing and forwarding data rates on  router v, and rTi and r R i are transmitted and received data rates  on line card cv,i, respectively, i.e. Pv = P S v +P  D v (Rv), where  PSv = Nv ?  i=0  PSv,i, and P D v (Rv) = P  D v,0(rv) +  Nv ?  i=1  PTv,i(r T v,i) +  Nv ?  i=1  PRv,i(r R v,i). Here, P  S v is the static power consumption (SPC)  of router v, which consists of the SPC PSv,0 by the chassis of router v and the SPC of all the line cards on router v; PSv,i (i ? 1) is the SPC of the i-th line card on router v in a base configuration. PDv (Rv) is the DPC of router v, which is a function of traffic loads Rv. P  D v,0(rv) is the DPC  function for the chassis of router v with respect to the total traffic load rv . P  T v,i(r  T v,i) and P  R v,i(r  R v,i) are the DPC functions  of transmitting rate rTv,i and receiving rate r R v,i on line card  cv,i, respectively. Note that wide-area connections may require relays, which also consume energy. However, such energy  consumption could be combined with line cards at two ends,  and hence is not considered here. Accordingly, the incremental  energy Ep(t1, t2) consumed by a user request over path p during a time window from time t1 to time t2 consists of a static part ESp (t1, t2) and a dynamic part E  D p (t1, t2):  Ep(t1, t2) = E S p (t1, t2) + E  D p (t1, t2),  where  EDp (t1, t2) =  ? t1  t2  {  ?  v?p  [PDv,0(rv(t) + rp(t1, t2))? PDv,0(rv(t))]  + ?  cT v,i  ?p  [PTv,i(r T v,i(t) + rp(t1, t2))? PTv,i(rTv,i(t))]  + ?  cR v,i  ?p  [PRv,i(r R v,i(t) + rp(t1, t2))? PRv,i(rRv,i(t))]  ?  ?  ?  dt.

(1) Eq. 1 calculates the incremental DEC of all routers and line  cards on a path. ESp (t1, t2) is specific to the power model in use and will be defined later in this subsection for different  power models.

We present the two main power models as follows.

i) Power-Down (PD) Model  The scheduler uses a booting-up time (BUT) list TUD (including entries TUv,0 and T  U v,i) and a shutting-down time  (SDT) list TDD (including entries T D v,0 and T  D v,i) to record  the amount of time required for activating and deactivating  each network device (including the chassis of each router v    0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   and each line card cv,i), respectively. Based on T U D , T  D D and  the current bandwidth reservation status, we are able to make  our bandwidth scheduler energy-aware by shutting down idle  network devices if the resulted energy saving is greater than  the energy consumed for bringing them back up. Also, we use  an SPC table PSD(t) to keep track of the time-varying SPC of each network device based on the ATB, BUT, and SDT  tables. At time point t, for the chassis of router v (or line card cv,i) in one of the four different states, i.e. two stable states (powered-off and active) and two transitional states (booting-  up and shutting-down), we set its corresponding entry PSv,0(t) (or PSv,i(t)) in the SPC table to be 0, P  AS v,0 (or P  AS v,i ), P  US v,0  (or PUSv,i ), and P DS v,0 (or P  DS v,i ), respectively. In this model, we  calculate the incremental SEC of all affected routers and line  cards for transferring a new bulk of data from t1 to t2 along path p as follows:  ESp (t1, t2) = ?  cv,i?p  ESv,i(t1, t2)  + ?  v?p  ESv,0(t1 ? maxcv,i?pT U v,i, t2 + maxcv,i?p  TDv,i), (2)  where ESv,i(t1, t2) = P  AS v,i ? (t2 ? t1)  + min{PASv,i ? tFv,i(t1), PUSv,i ? TUv,i + PDSv,i ? TDv,i} +min{PASv,i ? tBv,i(t2), PUSv,i ? TUv,i + PDSv,i ? TDv,i}  ? ? t2+t  B v,i(t2)  t1?tFv,i(t1)  PSv,i(t)dt.

(3)  Here, ESv,0(t1, t2) and E S v,i(t1, t2) (i ? 1) are the incremental  static energy consumed by the chassis of router v and the i-th line card on router v, respectively, to transfer data from t1 to t2 for a given user request; t  F D(t) and t  B D(t) are the shortest  period from the previous time point when the network device  is active to time point t, and the shortest period from time point t to the subsequent time point when the network device is active, respectively. In Eq. 2, to guarantee that the transmitting  and receiving line card(s) are powered on (i.e. active/booting  up/shutting down) from t1 to t2, the chassis of router v should be active from t1 ? max  cv,i?p TUv,i to t2 + maxcv,i?p  TDv,i, and would  consume ESv,0(t1 ? maxcv,i?pT U v,i, t2 + maxcv,i?p  TDv,i) more static  energy. To further clarify the calculation of the incremental  SEC of a network device, we provide an illustrating example  in Fig. 4 to explain Eq. 3 as follows. At the current time  t = 0, the SPC PSv,i(t) of a line card cv,i in the SPC table is shown in the upper part of Fig. 4 based on existing bandwidth  reservations. If we transfer data for a new user request from  t1 to t2 via cv,i, cv,i should be active during the period of [t1, t2], and would consume static energy corresponding to the first term in Eq. 3 and the green area with vertical lines  in Fig. 4. To ensure that cv,i is ready to use at t1, we check its preceding period of [t1 ? tFv,i(t1), t1] to decide whether cv,i should remain continuously active during the period or be first shut down and then booted up for possible energy saving.

Based on the decision, the SEC of cv,i during the preceding period corresponds to the second term in Eq. 3 and the blue  area with horizontal lines in Fig. 4. Similarly, the SEC of  cv,i based on its status selection during the succeeding period  AU D AU D AU D  P S  v,i(t)  t  A  tt2t1  T U  v,i T D  v,i  U D  P US  v,i  P DS  v,i   t1-t F  v,i(t1)  U  FF  A  tt  A  t B  v,i(t2) = 0  t2+t B  v,i(t2)  UU A  U: Booting Up A: Active (ready to use) D: Shutting Down O: Powered Off U+A+D: Powered On  FF  D  tttt  U  P AS  v,i  A Period for New Data Transfer  t F  v,i(t1)  P US  v,i  P DS  v,i   P AS  v,i  Fig. 4. An example for the power-down model.

Normalized Data Rate 0 0.2 0.4 0.6 0.8 1  N o  rm a  liz e  d D  P C   0.2  0.4  0.6  0.8   P(r) = r  (a)  Normalized Data Rate 0 0.2 0.4 0.6 0.8 1  N o  rm a  liz e  d D  P C   0.2  0.4  0.6  0.8   P(r) = r 0.5  (b)  Normalized Data Rate 0 0.2 0.4 0.6 0.8 1  N o  rm a  liz e  d D  P C   0.2  0.4  0.6  0.8   P(r) = 4 r - 6 r  + 3r  (c)  Fig. 5. Different dynamic power modeling functions: (a) a linear function; (b) a concave function; (c) a polynomial function.

of [t2, t2 + t B v,i(t2)] corresponds to the third term in Eq. 3  and zero area in Fig. 4, where tBv,i(t2) = 0. In addition, if we do not transfer any new data, the SEC of cv,i during the entire period of [t1 ? tFv,i(t1), t2 + tBv,i(t2)] corresponds to the fourth term in Eq. 3 and the orange area with slanted lines  in Fig. 4. As shown in Eq. 3, the incremental SEC of cv,i is the difference between the SEC of cv,i during the period of [t1 ? tFv,i(t1), t2 + tBv,i(t2)] with and without the transfer of new data.

The scheduler maintains a powered-on time (POT) list  T onD (including entries T on v and T  on v,i ) to record the amount of  time, during which a network device (such as router v and line card cv,i) is continuously powered on up to the current time point. During booting-up, the router cannot be used and  the lines cards cannot be activated until the router is active,  i.e. T onv,i = 0 if T on v ? TUv,0.

Based on the BUT, SDT, and POT lists, the bandwidth  scheduler calculates an available state table AD(t) as follows: if router v or line card cv,i is active at time point t, we set Av(t) or Av,i(t) to be 1; otherwise, we set it to be 0.

Obviously, Av,i(t) = 0 if Av(t) = 0. The actual capacity of network link l at time point t depends on the availability status of the line cards cv,i, cu,j ? l on both ends of the link, i.e.

Cl(t) = Cl ? Av,i(t) ?Au,j(t) [28].

Each network device has constant SPC PSv,i > 0 while powered on. Here, we model DPC PDv (rv), P  T v,i(r  T v,i) and  PRv,i(r R v,i) by non-decreasing concave functions P (r) ? 0 of  data rate r with P (0) = 0, as shown in Figs. 5(a) and 5(b).

ii) Speed-Scaling (SS) Model  In this model, each router v ? V and its line cards remain powered on, so there is no incremental SEC for a data  transfer request, i.e. ESp (t1, t2) = 0. We use a generalized polynomial function P (r) of data rate r to model the DPC of different network devices, i.e. power modeling functions  PDv (rv), P T v,i(r  T v,i) and P  R v,i(r  R v,i) of data rates rv , r  T v,i, and  rRv,i for the chassis, line card transmitters and receivers, respec- tively. The power modeling function P (r) is non-decreasing in R+ (i.e. dP (r)/dr ? 0 for r ? R+), in the form of P (r) = akr  k + ak?1r k?1 + ? ? ? + a1r, ai ? R, k ? Z++,  as shown in Fig. 5(c).

0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   TABLE I NOTATIONS USED IN THE COST MODELS.

Notations Definitions  G(V,L) A directed network graph of a set V of routers and a set L of directed links among them  CL A set of the capacities of directed links L Nv The number of line cards on router v LC A set of line cards  cv,i, c T v,i , The i-th line card on router v and its transmitter and receiver,  and cRv,i respectively  D A set of network devices (routers and line cards) ?L A set of link error rates of directed links L  Lout(v) and A set of outgoing and incoming directed links from router v,  Lin(v) respectively R(vs, vd, ?, A user request for transferring data of size ? from source vs tA, tD, ?) to destination vd with PTFR ? ? after data available  time tA before deadline tD  TUD and T D D The booting-up and shutting-down time lists of all devices,  respectively  PASD , P US D , The active, booting-up and shutting-down SPC list of all  and PDSD devices, respectively  PSD(t) The SPC list of all devices at time t without the current data transfer request  tFv (t) The shortest period from the previous time point when  (or tFv,i(t)) router v (or line card cv,i) is powered on to the time point t  tBv (t) The shortest period from the time point t to the subsequent  (or tBv,i(t)) time point when router v (or line card cv,i) is powered on  BAl (t) The available bandwidth of directed link l at time t Bp(t) The bottleneck bandwidth of path p at time t Ps,d A set of paths from source vs to destination vd  rp(t1, t2) The data rate on path p from time t1 to time t2 rv(t) The total data rate of incoming, outgoing and forwarding  flows on router v at time t  rTv,i(t) and The total data rate of outgoing and incoming flows on line  rRv,i(t) card cv,i at time t, respectively  PSv,0 The SPC of the chassis of router v  PSv,i(i ? 1) The SPC of line card cv,i  PDv,0(r) The DPC of the chassis of router v with traffic loads at data rate r  PTv,i(r) and The DPC of line card cv,i for transmitting and receiving data  PRv,i(r) (i ? 1) at rate r, respectively  Ep(t1, t2) The incremental energy consumption over path p from time t1 to time t2  ESp (t1, t2) and The incremental SEC and DEC over path p from time t1 to  EDp (t1, t2) time t2, respectively  We tabulate the main notations used in the cost models in  Table I for convenience.

C. Problem Definition  Based on the above cost models, we formulate an instant  bandwidth scheduling problem using PD and SS models, re-  spectively, in high-performance networks. In view of different  transport constraints (i.e. a fixed path or varying paths) and  application requirements (i.e. a fixed data rate/bandwidth or  varying data rates/bandwidths), Lin et al. categorized instant  bandwidth scheduling into four types [24]. One of these types  is to establish a channel along a fixed network path from a  source node to a destination node with a fixed bandwidth,  referred to as FPFB, during the whole period of a given data  transfer. Since FPFB is one of the most commonly used service  models in real-life HPNs, we formulate our problem based on  FPFB as follows:  Definition 1. FPFB-MEC: Given an HPN G(V, L) where each link l ? L is associated with a link capacity Cl, traffic load rl(t), and a link error rate ?l, as well as a user request R(vs, vd, ?, t  A, tD, ?), based on the following two power models:  ? Power-Down (PD): booting-up and shutting-down time  lists TUD and T D D , an SPC table P  S D(t), a powered-on  time list T onD , as well as SPC P AS v,i , P  US v,i , and P  DS v,i and  dynamic power models PDv (rv), P T v,i(r  T v,i) and P  R v,i(r  R v,i)  in the form of concave functions,  ? Speed-Scaling (SS): polynomial power modeling func-  tions PDv (rv), P T v,i(r  T v,i) and P  R v,i(r  R v,i) of data rates  rv , r T v,i, r  R v,i for the chassis, line card transmitters and  receivers, for each router v ? V with the line cards always powered on,  we wish to find a triplet (p, t1, t2) of a fixed path p with a fixed data rate rp, start time t1, and end time t2 to meet the user request R with minimum energy consumption:  min p?Ps,d;t1;t2  Ep(t1, t2),  subject to tA ? t1 < t2 ? tD,  (t2 ? t1) ? rp(t1, t2) = ?, rp(t1, t2) ? min  t1?t?t2 Bp(t),  ?  l?p  (1 ? ?l) ? 1? ?.



IV. COMPLEXITY ANALYSIS  A. Complexity Analysis for FPFB-MEC-PD  We prove that FPFB-MEC-PD is NP-complete by reducing  from the restricted shortest path (RSP) problem, whose NP-  completeness is shown in [18].

Theorem 1. FPFB-MEC-PD is NP-complete.

Proof. Obviously, FPFB-MEC-PD ? NP. Given a solution to FPFB-MEC-PD, one can verify the validity of the solution in  polynomial time by checking whether or not the data transfer  meet the requirements and the energy consumption bound for  the decision version of FPFB-MEC-PD.

We first consider a special case of the decision version of  FPFB-MEC-PD with a bound E on the energy consumption as follows: In the user request, tD = tA+?/C; in the HPN, all the links are idle with identical link capacity C after tA and there is no other power consumption except the SPC {PSv,0} of the router chassis. Obviously, t1 = t  A and t2 = t A + ?/C.

The special case is equivalent to the following problem (P1):  Given a directed graph G(V, L) with vs and vd, a non-negative weight wl = ?log(1? ?l) for each directed edge, and a non- negative cost cv = P  S v,0 ? ?/C for each node, the goal is to  find the path p from vs to vd under the total weight constraint ?  l?p wl ? W = ?log(1??) with the total cost no more than E. Furthermore, for any i, j ? L, let wi = wj = wv if edges i and j end at the same node v. Accordingly, a problem P2 as a special case of P1 can be stated as follows: Given G(V, L) with vs and vd, non-negative weight wv and cost cv for each node, the goal is to find a path with the total cost  ?  v?p cv ? E under the total weight constraint  ?  v?p,v 6=s wv ? W .

We now reduce to P2 from RSP, which is defined as follows:  Given a directed graph G?(V ?, L?) with source v?s, destination v?d, cost c  ? l? ? 0 and weight w?l? ? 0 for each edge, the goal  is to find the path with the total cost no more than E from v?s to v  ? d subject to a limit W on the total weight. For any  instance in RSP, we construct an instance of P2 by adding  two new virtual directed edges {l?s, l?d} into G?(V ?, L?), where l?s and l  ? d are an incoming link to vs and an outgoing link from    0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   v'0  v'1  l'2  l'1  l's v'2  l'3  l'd  G'  vl s c's = 0 w's = 0  2 l ddd c'd = 0 w'd = 0  l 2 c'2 , w'2  c'1 , w'1 c'3 , w'3  (a)  vs v0 = l's  v1 = l'1  l1  l0  v2 = l'2  l4  G  l3 vd  v4 = l'd  l2 v3 = l'3  c0 = c's = 0 w0 = w's = 0  c4 = c'd = 0 w4 = w'd = 0  c2 = c'2 w2 = w'2  l  c1 = c'1 w1 = w'1  l  c3 = c'3 w3 = w'3  (b)  Fig. 6. A small network example: (a) a network graph G? in RSP; (b) the newly constructed network graph G in P2.

vd, respectively, and then constructing a new directed graph G(V, L) with V = L? ? {l?s, l?d}. If the end node of l?i and the start node of l?j are the same in G  ?, there is a directed edge from  node l?i to node l ? j in G. For illustration, we provide a small  network example in Fig. 6(a), where V ? = {v?0, v?1, v?2}, L? = {l?1, l?2, l?3}, v?s = v?0 and v?d = v?2. In the newly constructed graph, V = {l?1, l?2, l?3, l?s, l?d}, L = {l0, l1, l2, l3, l4}, and node costs and weights are shown in Fig. 6(b). Obviously, this  construction can be done in polynomial time, and a solution  to the RSP or P2 instance can solve the other. Hence, RSP is  reduced to P2, and thus to P1 and FPFB-MEC-PD. Since RSP  is NP-complete, so is FPFB-MEC-PD. Proof ends.

B. Complexity Analysis for FPFB-MEC-SS  We also prove that FPFB-MEC-SS is NP-complete by  reducing from RSP to a special case of FPFB-MEC-SS.

Theorem 2. FPFB-MEC-SS is NP-complete.

Proof. Obviously, FPFB-MEC-SS ? NP . We consider a special case of the decision version of FPFB-MEC-SS as  follows: In the user request, tD = tA + ?/C; in the HPN, all the links are active and idle with identical link capacity C after tA and each router only incurs linear DPC PDv (rv) = fv ? rv.

Obviously, t1 = t  A and t2 = t A + ?/C. The special case  is equivalent to the following problem (P3): Given G(V, L) with vs and vd, a non-negative weight wl = ?log(1 ? ?l) for each directed edge, and a non-negative cost cv = fv ? ? for each node, the goal is to find path p with the total cost no more than E under the total weight constraint  ?  l?p wl ? W = ?log(1 ? ?). Since P3 is equivalent to P1, which has been proved to be NP-complete in the proof of Theorem 1,  FPFB-MEC-SS is also NP-complete. Proof ends.



V. ALGORITHM DESIGN FOR FPFB-MEC-PD  A. An FPTAS for FPFB-MEC-PD  1) Algorithm Framework  We propose an FPTAS, named SAVEE-PD-App, for the  FPFB-MEC-PD problem. The pseudocode of SAVEE-PD-App  is provided in Alg. 1, which follows the framework of the  algorithm design of the optimal solution SAVEE-PD-Opt for  the special case of FPFB-MEC-PD where the PTFR constraint  is sufficiently large (i.e. no reliability constraint) in [28].

Given a user request, the algorithm first updates the ATB  table according to the BUT and POT lists (Line 1). TSPC contains the start and end time points of all the time slots in  the SPC table (Line 2); and TU (or TD) contains the booting- up (or shutting-down) time of all the line cards when the router  is active or powered off (Line 3). Since the data transfer must  start and finish within the time period from tA to tD, the  algorithm varies the transfer start time slot x+1 from the first time slot to the y-th time slot for a given data transfer end time slot y, and finds the path ? with the minimum energy consumption such that the data of size ? can be transferred during the time window of slots [x+1, y]. Here, a time window is defined as a set of contiguous time slots. The algorithm  repeatedly increases y by 1, and computes the approximately optimal transfer start time t1 and end time t2 by considering all possible x and y values (Lines 4-5).

We define the following notations in SAVEE-PD-App: i)  bl: the maximum available bandwidth of link l over the time window of slots [x + 1, y] (Line 7), ii) B0: the minimum bandwidth to transfer the data of size ? during the time window of slots [x + 1, y] (Line 8), iii) B1: the maximum bandwidth to transfer the data of size ? from the beginning of the start time slot x+1 to a time point in the end time slot y (Line 8), iv) B2: the maximum bandwidth to transfer the data of size ? from a time point in the start time slot x+1 to the end of the end time slot y (Line 17). In each time window, SAVEE-PD- App selects all the available link bandwidths within the upper  and lower boundaries as mentioned above (Lines 9, 18). For  a given path and a given bandwidth, an optimal bandwidth  reservation either starts at time ts ? TS (TS is the set of all possible optimal data transfer start time points as defined  in Line 10) or ends at time te ? TE (TE is the set of all possible optimal data transfer end time points as defined in  Line 19), depending on the SEC of data transfer over different  time slots in the SPC table. Hence, SAVEE-PD-App calculates  the exact time window [?1, ?2] (Lines 12, 21). Then, the minimum energy consumption ? in this time window and the corresponding path are calculated using an existing FPTAS  in [17] or [12] based on a new graph constructed from the  original one (Lines 13-14, 22). SAVEE-PD-App examines all  possible optimal transfer time windows and bandwidths, and  guarantees that the returned energy consumption is within an  upper bound (Lines 9-16, 18-22). Finally, SAVEE-PD-App  updates the ATB table to reserve the bandwidth, and the SPC  table to boot up necessary devices and shut down unused  devices (Line 23).

2) Network Graph Reconstruction for Shared SEC  In the original network graph, the number of all possible  paths is exponential, which prohibits an exhaustive search  in large-scale networks. Since routers and line cards are the  main energy consumers, we associate each router equipped  with ingress and egress line cards with a cost of energy  consumption (not a link cost). Therefore, the shortest path  algorithm does not work on the original network graph.

To address this issue, we construct a new directed graph  G?(V ?, L?) with weight of wL? and cost of cL? from G(V, L) (Line 13), where the links with bandwidth less than the  requirement ?, the incoming links to vs and outgoing links from vd have been removed from L as they do not affect the problem. Here, the set V ? = L?{ls, ld}, where ls is a virtual link to source vs and ld is a virtual link from destination vd in G. The set L? contains pairs of links in G that are connected without forming a loop, and each edge l? can be represented by a triplet of a router v and its ingress and egress line cards    0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   Algorithm 1: SAVEE-PD-App  Input: G, CL, ?L, R, ATB, SPC, BUT , POT and {P S v,i}  Output: Energy Emin, path p, start time t1, end time t2 1: Updates the ATB table according to the BUT and POT lists; 2: TSPC = {the start and end time points of all the time slots in the P  S D  table}; 3: TU = {0, T  U v,i, T  U v,i + T  U v,0|v ? V, cv,i ? LC};  TD = {0, T D v,i, T  D v,i + T  D v,0|v ? V, cv,i ? LC}; Emin = ?;  4: for y = 1 to TA do 5: for x = 0 to y ? 1 do 6: for all l ? L do 7: bl = min  x?i?y?1 bl[i];  8: B0 = ?  t[y]?t[x] ; B1 =  ? t[y?1]?t[x]  ;  9: for all ? ? {bl|B0 ? bl < B1, l ? L} do 10: TS = {t  ? 1 + t  ? 2|t[x] ? t  ? 1 + t  ? 2 ? t[y]?  ? ? , t?1 ? TSPC , t  ? 2 ?  TU}; 11: for all ts ? TS do 12: ?1 = ts; ?2 = ts +  ? ?  ;  13: Construct a directed graph G?(V ?, L?) from G with weights wL? and costs cL? = {El? (?1, ?2), l  ? ? L?}; 14: (?, ?) = the minimum energy cost and the corresponding  path to transfer the data of size ? from vs to vd during time window [?1, ?2] on G?;  15: if ? < Emin then 16: Emin = ?; p = ?; t1 = ?1; t2 = ?2; 17: B2 =  ? t[y]?t[x+1]  ;  18: for all ? ? {bl|B0 ? bl < B2, l ? L} do 19: TE = {t  ? 3 ? t  ? 4|t[x] +  ? ?  ? t?3 ? t ? 4 ? t[y], t  ? 3 ? TSPC , t  ? 4 ?  TD}; 20: for all te ? TE do 21: ?1 = te ?  ? ?  ; ?2 = te; 22: Compute the minimum energy consumption and the  corresponding path (?, ?) in the same way as above, and update Emin, p, t1 and t2 if needed;  23: Update the ATB table and the SPC table to indicate when the routers and line cards are booted up or shut down.

24: return (Emin, p, t1, t2).

cv,i, cv,e that connect the pair of directed links in G. The cost cl? of edge l  ? ? L? is the incremental energy consumption of the triplet (v, cv,i, cv,e) for transferring data of size ? from ?1 to ?2, which is a constant at a given data rate within a given time window. The weight wl? of edge l  ? ? L? is the same as the weight wl = ?log(1 ? ?l), where l is the starting vertex of l?. For illustration, we provide a small example in Fig. 7(a), where V = {v0, v1, v2, v3}, L is updated from {l0, l1, . . . , l9} to {l0, l1, . . . , l5} as vs = v0 and vd = v3, and the line card configurations are as follows: l0 is from c0,1 in v0 to c1,1 in v1; l1 is from c0,2 in v0 to c2,1 in v2; l2 is from c1,2 in v1 to c2,2 in v2; l3 is from c2,2 in v2 to c1,2 in v1; l4 is from c1,1 in v1 to c3,1 in v3; l5 is from c2,1 in v2 to c3,2 in v3. In the new graph constructed from the original one, V ? = {l0, l1, . . . , l5, ls, ld} and L? = {l?0, l?1, . . . , l?9} as shown in Fig. 7(b).

B. Performance Bound and Time Complexity Analysis of  SAVEE-PD-App  Based on the optimality proof and the time complexity anal-  ysis for SAVEE-PD-Opt in [28], we derive the approximate  ratio of SAVEE-PD-App.

Theorem 3. SAVEE-PD-App finds a feasible triplet (p, t1, t2) of energy consumption within the least energy consumption  multiplied by (1 + ?) in time O(T 3A|L|2|D|3(log log log |D|+ ??1)) if the FPTAS in [17] is used in Lines 14 and 22 in Alg. 1.

c1,2  c2,1  c1,1  c0,1  c0,2 c2,2  c3,1  c3,2  G  c0,1  0,2  c0  ccc0  v0  c  ,  cc  v1  c2 1ccc222 11  v2  c3 1  c3,  3,1  c33,222  v3  l0  l1  l4  l5  l2 l3  l6  l9  lS lD  (a)  G?  ls  l0  l1  ld  l'0  l'1  l'8  l'9  l4 l'3  l2 l'2  l3  l5  l'5  l'4  l'0: v0c0,1 l'1: v0c0,2 l'2: c1,1v1c1,2 l'3: c1,1v1c1,1 l'4: c2,1v2c2,2 l'5: c2,1v2c2,1 l'6: c2,2v1c2,1 l'7: c1,2v2c1,1 l'8: c3,1v3 l'9: c3,2v3  (b)  v0  c T   c T   v1  v3  c T   c T   c R   c R   v2  c T   c T   c R   c R   c R   c R   l0  l5  l4  l1  l2  l3  G?  DS  (c)  Fig. 7. A small network example: (a) the original network graph; (b) the newly constructed graph for the power-down model; (c) the newly constructed graph for the speed-scaling model.

Proof. The FPTAS of RSP in [17] can find a feasible path  whose cost is within the least cost multiplied by (1+?) in time O(mn(log log logn+??1)), where n and m are the number of nodes and the number of edges, respectively. The approximate  ratio of SAVEE-PD-App is the worst one in all the cases. Proof  ends.

Theorem 4. SAVEE-PD-App finds a triplet (p, t1, t2) with no more than the least energy consumption and PTFR  within (1 + ?) of its requirement in time O(T 3A|L||D|3(|L|+ |D|log|D|)??1) if the FPTAS in [12] is used in Lines 17 and 27 in Alg. 1.

Proof. The FPTAS of RSP in [12] can find a path with no  more than the least cost and a weight within (1 + ?) of its requirement in time O((m+ n logn)H??1), where n, m and H are the number of nodes, the number of edges, and the number of hops of the longest unweighted path, respectively.

Proof ends.



VI. ALGORITHM DESIGN FOR FPFB-MEC-SS  In this section, we design a pseudo-polynomial time approx-  imation algorithm and a heuristic algorithm for FPFB-MEC-  SS.

Since the transmitter and receiver of a line card are sep-  arate components with respective dynamic power functions,  we consider physical links, router chassis, as well as line  card transmitters and receivers as directed edges in G?, i.e.

L? = L ? V ? {cTv,i, cRv,i|cv,i ? LC}. The cost cl? of edge l? ? V ? {cTv,i, cRv,i|cv,i ? LC} is the incremental energy consumption of network device v, cTv,i, c  R v,i for transferring  data of size ? from time ?1 to time ?2, which is a constant at a given data rate within a given time window. Ignoring the  energy consumption of fibers, we have cl? = 0 for l ? ? L?.

The weight wl? of edge l ? ? L? is the same as the weight  wl = ?log(1? ?l), and wl? = 0 for l? ? V ? {cTv,i, cRv,i|cv,i ? LC}. For illustration, we provide a small network example in Fig. 7(a) as mentioned in Subsection V-A. In the new graph  constructed from the original one, L? = {v0, v1, v2, v3} ?    0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   {cT0,1, cT0,2, cT1,1, cT1,2, cT2,1, cT2,1, cR1,1, cR1,2, cR2,1, cR2,1, cR3,1, cR3,2} ? {l0, l1, l2, l3, l4, l5} as shown in Fig. 7(c).

Furthermore, we design algorithms for FPFB-MEC-SS  based on the following lemma.

Lemma 1. If FPFB-MEC-SS has feasible solutions, there  exists an optimal solution where either the start time is the  beginning of a time slot in the ATB table or the end time is  the end of a time slot in the ATB table.

Proof. The energy consumption of data transfer starting at the  J-th time slot and ending at the K-th time slot on link l? is El? (t1, t1 + ?r  ?1) = ?K?1  j=J+1 (t[j]? t[j ? 1])(Pl? (r + rl? [j])? Pl?(rl? [j]))  + (t[J ]? t1)(pl?(r + rl? [J ])? pl?(rl? [J ]))+ (t1 + ?r  ?1 ? t[K ? 1])(pl?(r + rl? [K])? pl?(rl? [K])).

(4)  From Eq. 4, ?  l??p El?(t1, t1 + ?r ?1) is a linear function  of t1. Hence, given a data rate r, the energy consumption is minimized within the time window of slots [J,K] when t1 = t[J ? 1] or t1 = t[K]? ?r?1. Proof ends.

A. An Approximation Algorithm for FPFB-MEC-SS  1) Key Idea for Dynamic Energy Saving  We exploit the feature of a non-monotonously increas-  ing dynamic energy consumption function derived from the  polynomial power function to design a pseudo-polynomial ?- approximation algorithm, named SAVEE-SS-App, for FPFB-  MEC-SS in Alg. 2. Since the DPC function is a non-decreasing  polynomial function, the incremental DEC function (IDEC)  derived from it might decrease with respect to data rate, but  not in a drastic manner. In other words, the derivative of IDEC  has an upper bound, which is expressed in a simple inequality  in Lemma 2 for a special case. As a result, the key idea of  our approximation algorithm is to select a series of data rate  samples at a uniform interval ?, and then compute the path corresponding to each data rate sample. Note that the upper  bound of the sampling interval would limit the difference  between the optimal IDEC and the best IDEC calculated from  all the samples.

2) Performance Bound and Time Complexity Analysis of  SAVEE-SS-App  We calculate the upper and lower bounds of the data rate as  r = max tA?t?tD  min{ max l?Lout(vs)  BAl (t), max l?Lin(vd)  BAl (t)} and r = ?/(tD ? tA). We also calculate the lower bound of the energy consumption and the upper bound of the power consumption  on any path as P = ?  l??L? Pl?(Cl? ) and E = ?r ?1(PSs,0 +  PSd,0), respectively.

Theorem 5. SAVEE-SS-App with ? = (? ? ?1)(1 + ?1)  ?1r2E??1P ?1  finds a feasible triplet (p, t1, t2) of en- ergy consumption within the least energy consumption mul-  tiplied by (1 + ?) in time O(T 2A|L||D|(log log log |D| + ??11 )?PE  ?1r?2(r ? r)(1 + ?1)(? ? ?1)?1) if the ?1- approximation algorithm in [17] is used in Lines 10 and 16  in Alg. 2, where ?1 = ?1 + ? 1 + ? .

Proof. Without loss of generality, we consider the energy  consumption of data transfer starting at the beginning of the  Algorithm 2: SAVEE-SS-App  Input: G, CL, ?L, R, ATB, {P D v (?)}, {P  T v,i(?)} and {P  R v,i(?)}  Output: Energy Emin, path p, start time t1, end time t2 1: Emin = ?; 2: for y = 1 to TA do 3: for x = 0 to y ? 1 do 4: for all l ? L do 5: bl = min  x?i?y?1 bl[i];  6: B0 = ?  t[y]?t[x] ; B1 =  ? t[y?1]?t[x]  ;  7: for all ? ? {B0 + k?|0 ? k ? ?(B1 ?B0)/?? , k ? Z+} do 8: ?1 = t[x]; ?2 = t[x] +  ? ?  ;  9: Construct a directed graph G?(V ?, L?) from G with weights wL? and costs cL? = {El? (?1, ?2), l  ? ? L?}; 10: (?, ?) = the minimum energy cost and the corresponding path  to transfer the data of size ? from vs to vd during time window [?1, ?2] on G?;  11: if ? < Emin then 12: Emin = ?; p = ?; t1 = ?1; t2 = ?2; 13: B2 =  ? t[y]?t[x+1]  ;  14: for all ? ? {B0 + k?|0 ? k ? ?(B2 ? B0)/?? , k ? Z+} do 15: ?1 = t[y]?  ? ?  ; ?2 = t[y]; 16: Compute the minimum energy consumption and the  corresponding path (?, ?) in the same way as above, and update Emin, p, t1 and t2 if needed;  17: return (Emin, p, t1, t2).

J-th time slot and ending at the K-th time slot on link l? as follows:  El?(r) = ?K?1  j=J (t[j]? t[j ? 1])(Pl?(r + rl? [j])? Pl?(rl? [j]))  + [?r?1 ? (t[K ? 1]? t[J ? 1])] ? (Pl?(r + rl? [K]) ? Pl?(rl? [K])).

dEl?(r)  dr = ?K?1  j=J (t[j]? t[j ? 1])dPl?(r + rl? [j])  dr  + [?r?1 ? (t[K ? 1]? t[J ? 1])]dPl?(r + rl? [K]) dr  ? ?r?2[Pl?(r + rl? [K])? Pl?(rl? [K])] ? ??r?2Pl? (r + rl? [K]) ? ??r?2Pl?(Cl?).

Ep(r) = ?  l??p El?(r).

dEp(r)  dr = ?  l??p  dEl?(r)  dr ? ??r?2  ?  l??p  Pl?(Cl? ) ? ??r?2P .

We use p? and r? to denote the path and the data rate of an optimal solution for data transfer from the J-th time slot to the K-th time slot, respectively. Let ?? = r? ? B0 ? k?|B0+k??r?<B0+(k+1)?,k?Z+ and ?? = min{?? ? 0|Ep?(r? ? ??) = Ep?(r  ? ? ??)}. We have Ep?(r? ? ??) ? Ep?(r?) ? ?? min r?????r?r?  dEp?(r)  dr ? Ep?(r?) + ???r?2P . Let E(r) denote the energy consumption of the approximate solution obtained  in Alg. 2 for data transfer from the J-th time slot to the K-th time slot. Let E?(r) denote the minimum energy consumption of data transfer from the J-th time slot to the K-th time slot    0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   given the data rate r. Since ? = (???1)r 2E  (1+?1)?P ,  E(r)  Ep?(r?) ? (1 + ?1)E  ?(r)  Ep?(r?) ? (1 + ?1)Ep?(r)  Ep?(r?)  ? (1 + ?1)Ep?(r? ? ??)/Ep?(r?) ? (1 + ?1)[Ep?(r?) + ???r?2P ]/Ep?(r?)  = (1 + ?1)[1 + ???P  r2Ep?(r?) ]  ? (1 + ?1)[1 + ???P  r2E ] ? (1 + ?1)[1 +  ??P  r2E ] = 1 + ?.

The algorithm?s execution time is calculated as f(?1) =  ?1 ? 1+?1?1(???1) . Let df(?1) d?1  = ?1 ? ? 1+2?1??  ?2 (???1)2  = 0. Then, 0 < ?1 =  ?1 + ? 1 + ? < ?. Proof ends.

Theorem 6. SAVEE-SS-App with ? = ?1r 2E??1P  ?1 finds  a feasible triplet (p, t1, t2) of energy consumption within the least energy consumption multiplied by (1 + ?1) and PTFR within (1 + ?2) of requirement in time O(T  A|D|(|L|+  |D| log |D|)?PE?1r?2(r?r)???11 ??12 ) if the ?2-approximation algorithm in [12] is used in Lines 10 and 16 in Alg. 2.

Proof. The proof of the approximate ratio for energy con-  sumption is similar to the proof of Theorem 5. Here, we  derive the approximate ratio for the PTFR ? in the ap- proximate solution. The ?2-approximation algorithm in [12] guarantees that ? log(1 ? ?) ? [? log(1 ? ?)](1 + ?2). Let f(?2) = (1 + ?2)? + (1 ? ?)1+?2 . Since f(0) = 1 and when ?2 ? 0, df(?2)/d?2 = ? + (1 ? ?)1+?2 ln(1 ? ?) ? ? ? (1? ?)1+?2 ? ?/(1? ?) = ?[1? (1? ?)?2 ] ? 0, we know that f(?2) ? 1. Hence, ? ? 1 ? (1 ? ?)1+?2 ? (1 + ?2)?.

Proof ends.

Lemma 2. In SAVEE-SS-App, dEl? (r)/dr ? ?El?(r)/r if the data available time and the deadline of a data transfer request  are in the same time slot in the ATB table.

Proof. The energy consumption on link l? of data transfer in a single time slot is El?(r) = ?r  ?1[Pl?(r + rl? ) ? Pl?(rl? )].

Since r > 0 and dPl?(r)/dr ? 0, we have dEl?(r)dr = ??r?2[Pl?(r+ rl? )? Pl?(rl? )] + ?r?1 dPl? (r+rl?)dr = ?  El?(r) r +  ?r?1 dPl?(r+rl?)dr ? ? El?(r)  r . Proof ends.

Theorem 7. If the available time and the deadline for a  data transfer request are in the same time slot in the ATB  table, SAVEE-SS-App with ? = r ? (? ? ?1)/(1 + 2? ? ?1) finds a feasible triplet (p, t1, t2) of energy consumption within the least energy consumption multiplied by (1 + ?) in time O(T 2A|L||D|(log log log |D|+ ??11 )r?1(r?r)(1+2?? ?1)(?? ?1)  ?1) if the ?1-approximation algorithm in [17] is used in Lines 10 and 16 in Alg. 2, where ?1 = 1 + 2? ? ?  (1 + ?)(1 + 2?).

Proof. Here, p?, r?, E(r), E?(r), ?? and ?? are the same as defined in the proof of Theorem 5. Since ?? ? ? = r(? ? ?1)/(1+2???1) ? r?(???1)/(1+2???1), (r?? ??)(1+?1) ? (r? ? 2??)(1 + ?). Also, we have Ep?(r?) ? Ep?(r? ? ??) + ?? ?minr?????r?r? dEp?(r)/dr ? Ep?(r? ? ??) ? ?? ? Ep?(r? ? ??)/(r? ? ??) = Ep?(r? ? ??) ? (r? ? 2??)/(r? ? ??) ? E?(r? ?  ??) ? (r? ? 2??)/(r? ? ??) . Hence, E(r)Ep?(r?) ? (1+?1)E  ?(r????) Ep?(r?)  ? (r????)(1+?1)Ep?(r)  (r??2??)Ep?(r) = (r  ????)(1+?1)  r??2?? ? 1 + ?.

The algorithm?s execution time is calculated as f(?1) = ?2 ? 1+2???1 ?1(???1)  . Let df(?1) d?1  = ?2 ? ?? 1+2(1+2?)?1??(1+2?)  ?2 (???1)2  = 0. Then,  0 < ?1 = 1 + 2?? ?  (1 + ?)(1 + 2?) < ?. Proof ends.

Theorem 8. If the data available time and the deadline for  a data transfer request are in the same time slot in the ATB  table, SAVEE-SS-App with ? = r ??1/(1+2?1) finds a feasible triplet (p, t1, t2) of energy consumption within the least energy consumption multiplied by (1+ ?1) and PTFR within (1+ ?2) of requirement in time O(T 2A|D|(|L|+ |D| log |D|)r?1(r?r) ? (1+2?1)?  ?1 1 ?  ?1 2 ) if the ?2-approximation algorithm in [12] is  used in Lines 10 and 16 in Alg. 2.

Proof. The proof is similar to Theorem 6 and Theorem 7, and  hence is skipped.

B. A Heuristic Algorithm for FPFB-MEC-SS  Considering the high time complexity of the proposed  pseudo-polynomial approximation algorithm, we design a  heuristic algorithm, named SAVEE-SS-Heu, for FPFB-MEC-  SS, as shown in Alg. 3. Since TA time slots form TA(TA?1)/2 time windows and the feasible data rate range can be divided  into no more than |L| data rate intervals, we only need to consider the subproblem in each time window and each data  rate interval, and then the entire problem can be tackled by  exhaustive search. For each subproblem, we solve it in three  phases: 1) compute the average energy consumption on each  link l? for data transfer of size ? over the data rate range (Lines 11, 21); 2) apply an existing algorithm to find a path  with an approximately minimum energy consumption in a  directed graph G? constructed from G (Lines 13, 21); 3) minimize the energy consumption of a univariate polynomial  function with respect to data rate r over the data rate range to find the minimum energy cost and the corresponding data  rate on a path obtained in Phase 2 (Lines 14, 21). If the  time for Phase 2 is T (?), the time complexity of Alg. 3 is O(T 2A|L|T (?)).

For practical use, we make a tradeoff between objective op-  timality and time complexity, and thus use the ?-approximation algorithm in [12] to find a path with an approximately mini-  mum energy consumption in Phase 2. To guarantee a feasible  solution, we replace the user request R(vs, vd, ?, t A, tD, ?)  with R?(vs, vd, ?, t A, tD, ?(1 + ?)?1) if there exists a feasi-  ble solution for R?. Otherwise, we only compute a feasible solution for R. In this case, the time complexity of Alg. 3 is O(T 2A|L||D|(|L|+ |D|log|D|)??1).



VII. EVALUATION FOR POWER-DOWN MODEL  A. Simulation Setup  SAVEE-PD-App is an instant bandwidth scheduling algo-  rithm, which does not automatically guarantee the maximum  overall energy saving in HPNs with continuously arriving user  requests over a period of time. We conduct a simulation-  based performance evaluation of SAVEE-PD-App in compar-  ison with two algorithms: i) the minimum end time (MET)  algorithm, which, for the maximum available bandwidth b of    0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   Algorithm 3: SAVEE-SS-Heu  Input: G, CL, ?L, R, ATB, {P D v (?)}, {P  T v,i(?)} and {P  R v,i(?)}  Output: Energy Emin, path p, start time t1, end time t2 1: Emin = ?; 2: for y = 1 to TA do 3: for x = 0 to y ? 1 do 4: for all l ? L do 5: bl = min  x?i?y?1 bl[i];  6: B0 = ?  t[y]?t[x] ; B1 =  ? t[y?1]?t[x]  ;  7: B = {bl|B0 < bl < B1, l ? L} ? {B0, B1}; 8: Sort bl ? B and label them as b1 < b2 < ? ? ? < bm; 9: for all bi ? B ? {B1} do  10: Construct a directed graph G?(V ?, L?) with weights wL? from G;  11: Compute the average energy consumption E?l? on each link l ?  for data transfer with size ? over data rate range [bi, bi+1]  based on E?l? = ? bi+1 bi  El?(t[x], t[x] + ?/r)dr /  (bi+1 ? bi);  12: Assign E?l? to link l ? as its cost cl? ;  13: Use the PDA algorithm in [12] to compute a path ? with the minimum energy consumption in G?;  14: Minimize a univariate polynomial E? =  ?  l??? El?(t[x], t[x] + ?/r) in data rate range [bi, bi+1] to find the minimum energy cost ? and the corresponding data rate r on a given path ?;  15: if ? < Emin then 16: Emin = ?; p = ?; t1 = t[x]; t2 = t[x] + ?/r; 17: B2 =  ? t[y]?t[x+1]  ;  18: B = {bl|B0 < bl < B2, l ? L} ? {B0, B2}; 19: Sort bl ? B and label them as above; 20: for all bi ? B ? {B2} do 21: Compute the minimum energy cost ?, the corresponding path  ? and the corresponding data rate r in data rate range [bi, bi+1] in the same way as above, and update Emin, p, t1 and t2 if needed;  22: return (Emin, p, t1, t2).

each link over each time-slot range [i, j], calculates the path with the highest reliability and the available bandwidth of at  least b in time-slot range [i, j] to form a candidate solution set, and then selects the path and time-slot range of data  transfer with the minimum end time meeting the reliability  requirement from the candidate solution set, and ii) an energy-  aware version of MET, referred to as EAMET. MET does  not consider the energy consumption of network devices and  always powers on all routers and line cards; while EAMET  shuts down idle routers and line cards to achieve energy  saving. In the simulation, the scheduler uses EAMET to find  the earliest end time of data transfer, which is then used as  a base point for setting an appropriate deadline constraint for  SAVEE-PD-App in FPFB-MEC-PD.

We evaluate the performance of these algorithms in two  types of networks: i) DOE?s ESnet, which is a real-life  HPN whose logical topology is shown in Fig. 8, and ii)  semi-random simulated networks, where almost half of the  routers form a grid, and each router in the rest connects  to a randomly selected router in the grid. In semi-random  simulated networks, we set the capacity of links in the grid to  be 100 Gbps, and the capacity of other links to be 10 Gbps.

The link error rate is randomly generated from a uniform  distribution in [0, 0.01]. The arrivals of user requests follow  a Poisson process, as widely adopted for traffic modeling in  network simulation [24], [16], and hence the arrival interval  of user requests follows an exponential distribution. We set  30(LIGO)  31(JGI)  32(SNLL)  33(SAND)  34(GA)  35(NPS)  36(PNNL)  37(BOIS)  38(INL)  39(LSVN)  40(NSO)  41(MSRI)  42(NREL)  43(NGA-SW)  44(SNLA)  45(IARC)  46(KCP)  47(Y12)  48(PANTEX)  49(AMES)  50(KCP-ALBQ)  51(SRS)  52(SRS-EM)  53(OSTI)  54(PPPL)  55(JLAB)  56(DOE-GTN)  57(ETTP)  58(ORAU)  59(PSFC)  60(LNS)  61(DOE-FORRESTAL)  62(DOS-NNSA)  0(PNWG)  1(SACR)  2(SUNN)  3(NERSC)  4(LBL)  5(DENV)  6(ALBQ)  7(LANL)  8(SLAC)  9(LLNL)  10(ANL)  11(FNAL)  12(KANS)  13(HOUS)  14(ELPA)  15(STAR)  16(CHIC)  17(NASH)  18(ATLA)  19(ORNL)  20(BNL)  21(AOFA)  22(WASH)  23(LOND)  24(CERN-513)  25(BOST)  26(NEWY)  27(AMST)  28(CERN-272)  29(CERN)                    47 53       100GB  1GB  10GB   Fig. 8. The logical topology of ESnet [33] of 63 routers, where any of the ten trunk routers in green and edge routers in black could be shut down without affecting the network connectivity, while powering off any of the other 16 trunk routers in orange would break the network connectivity.

the default average arrival interval of user requests to be one  second and also consider multiple user requests that arrive in  a burst within one second. The base-10 logarithm of the data  sizes (in Gigabytes) follows a normal distribution N(3.5, 0.5) such that 99.7% of the data sizes fall within a range from  0.8 Terabytes to 0.8 Petabytes. The difference between data  available time and user request submission time in unit of sec-  onds is randomly generated from an exponential distribution,  whose average is set to be the data size divided by 10,000. The  maximum PTFR in a user request is randomly generated from  a uniform distribution in [0, 0.1]. Each simulation continuously  processes 200 data transfer requests with different sources and  destinations. Each simulation is repeated 10 times and each  data point in a performance curve denotes the average result  across 10 runs. The simulations in Section VIII use the same  settings.

We set the parameters of the power model in Table II in  reference to the specifications of Cisco CRS-3 100G router  and Cisco 7603 10G router. According to their specifications,  the maximum power consumptions of Cisco CRS (4-Slot) and  CRS-3 (16-Slot) single-shelf systems are 3080W and 12320W,  respectively, when the chassis is fully configured with line  cards with traffic running [32], [31], and the power supply  for Cisco 7603 Chassis is 950W [30]. In addition, [27] shows  that the line card wakeup time has been reduced from 43s  to 127ms based on the experimental results on an FPGA-  based prototype. Nevertheless, the static and dynamic power  consumption and booting-up/shutting-down time of different  network devices could vary within a large range. Therefore,  we use the normal distribution to model the variations in the  parameter values of real network devices. The dynamic power  model of each device is a linear function with respect to its  instantaneous data transfer rate. We use the PDA algorithm  in [12] with ? = 0.2 in Lines 14 and 22 of SAVEE-PD-App.

By default, we set the deadline of data transfer in SAVEE-  PD-App to be 1.1 times of the minimum end time calculated  by EAMET.

0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   TABLE II THE PARAMETERS OF THE POWER MODEL  Devices* Stable SPC Booting-up SPC Shutting-down SPC Booting-up Shutting-down Max DPC / Max Data  (W) (W) (W) time (s) time (s) Rate (W/Gbps)  100G Routers N(1300, 65) 2? Stable SPC 2? Stable SPC N(180, 9) N(180, 9) N(8, 2) 10G Routers N(950, 50) 2? Stable SPC 2? Stable SPC N(120, 6) N(120, 6) N(32, 8) 1G Routers N(230, 15) 2? Stable SPC 2? Stable SPC N(60, 3) N(60, 3) N(128, 32)  100G Line cards N(450, 22) 2? Stable SPC 2? Stable SPC N(30, 6) N(30, 6) N(2, 0.5) 10G Line cards N(150, 8) 2? Stable SPC 2? Stable SPC N(20, 4) N(20, 4) N(4, 1) 1G Line cards N(70, 4) 2? Stable SPC 2? Stable SPC N(10, 2) N(10, 2) N(6, 1.5)  * A 100G/10G/1G router (or line card) is defined as a router (or line card) connected to a link with the capacity of at most 100/10/1 Gbps.

We define the incremental energy consumption (IEC) re-  duction (IECR) of SAVEE-PD-App over EAMET as:  IECR(EAMET) = IEC(EAMET)? IEC(SAVEE-PD-App)  IEC(EAMET)  ? 100%, and the total energy consumption (TEC) reduction (TECR) of  SAVEE-PD-App over another as:  TECR(Other) = TEC(Other)? TEC(SAVEE-PD-App)  TEC(Other)  ? 100%.

B. Traffic Load  We test MET, EAMET, and SAVEE-PD-App in ESnet under  different traffic loads. We exponentially increase the average  arrival interval of user requests within a range from 62.5  milliseconds to 16 seconds with a ratio of 2 to reflect a  large variation in the dynamic distribution of traffic loads,  in reference to the traffic parameter setting in [24], [16]. In  the simulation, we run both EAMET and SAVEE-PD-App to  schedule each incoming request. If the minimum end time and  the corresponding PTFR calculated by EAMET meet the user  requirement, we obtain the corresponding energy consumption  for that request as the lower bound of the IEC, and then apply  the schedule with less IEC produced by SAVEE-PD-App to  the current user request; otherwise, there does not exist any  feasible schedule.

We first evaluate the performance of SAVEE-PD-App in  comparison with EAMET as an instant scheduling algorithm  for FPFB-MEC-PD, and plot the average IECR measurements  with the standard deviations in Fig. 9. These measurements  show that SAVEE-PD-App saves IEC per user request from  10.8% to 12.4% over EAMET.

In practice, network service providers are always more  concerned about the overall energy cost of the entire network  than the individual energy cost of each request. Therefore,  we evaluate the overall performance of MET, EAMET, and  SAVEE-PD-App in terms of TEC of all user requests, and plot  the average TECR measurements with the standard deviations  in Fig. 9. These measurements show that SAVEE-PD-App  saves energy by around 73% over MET and by 6.2% to 7.1%  over EAMET under different average arrival intervals of user  requests from 62.5 milliseconds to 16 seconds. Note that more  frequent user requests result in higher traffic loads.

C. Deadline Constraints  We further examine the performance of MET, EAMET,  and SAVEE-PD-App in ESnet under different data transfer  deadline constraints. The data transfer deadline in SAVEE-  PD-App is set to be from 1 to 1.3 times of the minimum  end time calculated by EAMET, at an interval of 0.05. We  plot the average IEC and TEC with the standard deviations  in Fig. 10, which shows that SAVEE-PD-App saves IEC per  user request by 7.4% to 16.1% over EAMET, and saves TEC  by 72.8% to 73.9% over MET and by 3.3% to 7.4% over  EAMET, as the deadline increases. We observe that the impact  of deadline constraints on the energy-saving performance of  SAVEE-PD-App is not very obvious, especially after the  deadline constraint is extended to 1.1 times of the minimum  transfer end time. These results provide a practical guidance  for users to choose an appropriate deadline that is close to the  minimum transfer end time calculated by EAMET.

D. Scalability  We run MET, EAMET, and SAVEE-PD-App in semi-  random networks with different network sizes for scalability  evaluation. The average IECR and TECR measurements with  the standard deviations are plotted in Fig. 11, which shows  that SAVEE-PD-App saves IEC per user request by 14.4% to  19.4% over EAMET, and saves TEC by 49.7% to 63.9% over  MET and by 6.2% to 9.2% over EAMET, as the number of  routers increases from 60 to 100 at an interval of 5.

E. Network Structures  We investigate MET, EAMET, and SAVEE-PD-App with  various network structures, including a real-life topology (ES-  net of 63 routers), semi-random topologies (a grid with random  stars), a mesh topology (a grid with five routers per row),  and purely random topologies. All networks except ESnet  consist of 65 routers. We plot the average IECR and TECR  measurements with the standard deviations in Fig. 12, which  shows that SAVEE-PD-App saves IEC per user request by  11.9%, 18.7%, 18.5%, and 15.6% over EAMET, and saves  TEC by 75.9%, 53.3%, 64.3%, and 60.4% over MET, and  by 5.8%, 7.7%, 16.6%, and 11.7% over EAMET, in ESnet,  semi-random, mesh, and purely random network topologies,  respectively.



VIII. EVALUATION FOR SPEED-SCALING MODEL  A. Simulation Setup  We conduct a simulation-based performance evaluation of  SAVEE-SS-Heu in comparison with two algorithms: MET and  a linear power function-based algorithm, referred to as LPF-  SS, which is used for comparison to evaluate the dynamic en-  ergy saving achieved by polynomial power functions. LPF-SS  takes the following procedure: i) evenly selects 1000 samples  from the polynomial power function of each device within its  data rate range and generates a linear power function using  the least-squares fitting; ii) uses the PDA algorithm in [12]  to search for the approximately minimum DEC within each  time-slot range based on generated linear power functions.

Similarly, in the simulation, the scheduler uses MET to find    0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   1/16 1/8 1/4 1/2 1 2 4 8 16  Average Arrival Interval of User Requests (s)          E  n e rg  y C  o n s u m  p ti o n R  e d u c ti o n (  % )  TECR(MET)  TECR(EAMET)  IECR(EAMET)  Fig. 9. The energy saving of SAVEE-PD-App with different arrival intervals of user requests in ESnet.

1 1.05 1.1 1.15 1.2 1.25 1.3  Deadline Factor    E n e rg  y C  o n s u m  p ti o n R  e d u c ti o n (  % )  TECR(MET)  TECR(EAMET)  IECR(EAMET)  Fig. 10. The energy saving of SAVEE-PD-App with different deadline constraints in ESnet.

60 65 70 75 80 85 90 95 100  The Number of Routers             E n e rg  y C  o n s u m  p ti o n R  e d u c ti o n (  % )  TECR(MET)  TECR(EAMET)  IECR(EAMET)  Fig. 11. The energy saving of SAVEE-PD-App under different network sizes in semi-random networks.

ESnet Semi-random Grid Random  Structures of Network Topologies            E n e rg  y C  o n s u m  p ti o n R  e d u c ti o n (  % )  TECR(MET) TECR(EAMET) IECR(EAMET)  Fig. 12. The energy saving of SAVEE-PD-App with different network structures.

1/16 1/8 1/4 1/2 1 2 4 8 16  Average Interval of User Requests (s)         D E  C R  e d u c ti o n (  % )  IDECR(LPF-SS,MET)  IDECR(SAVEE-SS-Heu,MET)  TDECR(LPF-SS,MET)  TDECR(SAVEE-SS-Heu,MET)  Fig. 13. The dynamic energy saving of SAVEE- SS-Heu and LPF-SS over MET with different arrival intervals of user requests in ESnet.

1 1.05 1.1 1.15 1.2 1.25 1.3  Deadline Factor          D E  C R  e d u c ti o n (  % )  IDECR(LPF-SS,MET)  IDECR(SAVEE-SS-Heu,MET)  TDECR(LPF-SS,MET)  TDECR(SAVEE-SS-Heu,MET)  Fig. 14. The dynamic energy saving of SAVEE- SS-Heu and LPF-SS over MET with different deadline constraints in ESnet.

60 65 70 75 80 85 90 95 100  The Number of Routers        D E  C R  e d u c ti o n (  % )  IDECR(LPF-SS,MET)  IDECR(SAVEE-SS-Heu,MET)  TDECR(LPF-SS,MET)  TDECR(SAVEE-SS-Heu,MET)  Fig. 15. The dynamic energy saving of SAVEE- SS-Heu and LPF-SS over MET under different network sizes in semi-random networks.

ESnet Semi-random Grid Random  Structures of Network Topologies           D E  C R  e d u c ti o n (  % )  TDECR(LPF-SS,MET)  TDECR(SAVEE-SS-Heu,MET)  IDECR(LPF-SS,MET)  IDECR(SAVEE-SS-Heu,MET)  Fig. 16. The dynamic energy saving of SAVEE- SS-Heu and LPF-SS over MET with different network structures.

TABLE III TEMPLATES FOR THE POLYNOMIAL FUNCTIONS OF DPC  (p?(r) ? 0, r ? [0, 1])  Linear p = r.

Concave p = ?r2 + 2r, p = r3 ? 3r2 + 3r, p = ?r4 + 4r3 ? 6r2 + 4r.

Convex p = r2, p = r3, p = r4.

Non-convex p = 2.2857r3 ? 1.7143r2 + 0.4286r, and p = 2.2857r3 ? 5.1429r2 + 3.8571r,  Non-concave p = 4r3 ? 6r2 + 3r, p = 2r4 ? 4r3 + 3r2, p = 0.3333r4 ? 1.3333r3 + 2r2, p = 31.6098r5 ? 79.0244r4 + 67.3171r3 ? 21.9512r2  +3.0488r, p = 33.3913r5 ? 83.4783r4 + 76.5217r3 ? 31.3043r2  +5.8696r.

the earliest end time of data transfer, which is then used as  a base point for setting an appropriate deadline constraint for  LPF-SS and SAVEE-SS-Heu in FPFB-MEC-SS.

The dynamic power model of each device is a polynomial  function with respect to its instantaneous data transfer rate,  and is randomly selected from a set of polynomial function  templates with both the data rate and DPC normalized to the  range of [0, 1], as listed in Table III. The maximum data rate of a router is the sum of the capacities of all incoming and  outgoing links, and the maximum data rate of the transmitter  (or the receiver) of a line card is the sum of the capacities  of all outgoing (or incoming) links. We follow the parameter  values in the last column of Table II to set the maximum  DPC and adapt the selected polynomial function templates to  the corresponding ranges of data rate and DPC. By default,  the deadline of data transfer in SAVEE-SS-Heu and LPF-SS  is set to be 1.1 times the minimum end time calculated by  MET. Other settings remain the same as in Subsection VII-A.

We define the incremental dynamic energy consumption  (IDEC) reduction (IDECR) of an algorithm over another as:  IDECR(Alg. 1,Alg. 2) = IDEC(Alg. 2)? IDEC(Alg. 1)  IDEC(Alg. 2)  ? 100%, and the total dynamic energy consumption (TDEC) reduction  (TDECR) of an algorithm over another as:  TDECR(Alg. 1,Alg. 2) = TDEC(Alg. 2)? TDEC(Alg. 1)  TDEC(Alg. 2)  ? 100%.

B. Traffic Load  We examine the performance of MET, LPF-SS, and SAVEE-  SS-Heu in ESnet under different traffic loads. The average  arrival interval of user requests exponentially increases from  62.5 milliseconds to 16 seconds with a ratio of 2. We plot  the average IDECR and TDECR measurements of LPF-SS  and SAVEE-SS-Heu over MET with the standard deviations    0090-6778 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TCOMM.2017.2693262, IEEE Transactions on Communications   in Fig. 13, which illustrates that LPF-SS and SAVEE-SS-Heu  reduce IDEC per user request by 4.5% to 5.4% and by 7.4%  to 7.9%, and TDEC by 3.7% to 5.1% and by 5.6% to 6.9%, in  comparison with MET, respectively. These performance curves  clearly show that SAVEE-SS-Heu based on polynomial power  functions saves more DEC than LPF-SS based on linear power  functions.

C. Deadline Constraints  We investigate the performance of MET, LPF-SS, and  SAVEE-SS-Heu in ESnet under different data transfer deadline  constraints. The data transfer deadline in SAVEE-SS-Heu and  LPF-SS is set to be from 1 to 1.3 times the minimum end  time calculated by MET, at an interval of 0.05. We plot the  average IDECR and TDECR of LPF-SS and SAVEE-SS-Heu  over MET with the standard deviations in Fig. 14, which  show that LPF-SS and SAVEE-SS-Heu reduces IDEC per user  request by 2.5% to 7.8% and by 3.4% to 11.5%, and TDEC  by 2.4% to 7.9% and by 3.1% to 10.4%, in comparison with  MET, respectively, as the transfer deadline increases. It is also  interesting to point out that the impact of deadline constraints  on the dynamic energy saving of SAVEE-SS-Heu becomes  less significant when it is larger than 1.1 times the minimum  end time. Similarly, these results provide a practical guidance  for users to choose an appropriate deadline constraint, which  is around 1.1 times the minimum transfer end time calculated  by MET.

D. Scalability  We run MET, LPF-SS, and SAVEE-SS-Heu in semi-random  networks with different network sizes for scalability evalua-  tion. The number of routers in the networks increases from 60  to 100 at an interval of 5. We plot the average IDECR and  TDECR of LPF-SS and SAVEE-SS-Heu over MET with the  standard deviations in Fig. 15. These measurements show that  LPF-SS and SAVEE-SS-Heu reduce IDEC per user request by  10.0% to 11.3% and by 13.3% to 15.5%, and TDEC by 11.6%  to 16.0% and by 13.7% to 19.9%, in comparison with MET,  respectively.

E. Network Structures  We evaluate MET, LPF-SS, and SAVEE-SS-Heu under  various network structures. The average IDECR and TDECR  of LPF-SS and SAVEE-SS-Heu over MET with the standard  deviations are plotted in Fig. 16. These measurements show  that LPF-SS and SAVEE-SS-Heu reduce TDEC by 5.5% and  7.3%, by 12.3% and 15.2%, by 12.2% and 14.9%, as well  as by 17.7% and 19.0% over MET in real-life, semi-random,  mesh, and purely random network topologies, respectively.



IX. CONCLUSION  We formulated two advance instant bandwidth scheduling  problems FPFB-MEC-PD and FPFB-MEC-SS in HPNs us-  ing two power models, i.e. power-down and speed-scaling,  for minimizing energy consumption of data transfer under  deadline and reliability constraints. Both of the problems have  been proved to be NP-complete. We designed an FPTAS for  FPFB-MEC-PD, and designed an approximation algorithm and  a heuristic algorithm for FPFB-MEC-SS.

Our work reveals that energy-aware bandwidth scheduling  could lead to significant energy saving in comparison with  the existing scheduling algorithms with focus on traditional  optimization objectives. It is of our future interest to incor-  porate the proposed bandwidth scheduling algorithms into the  control plane of existing high-performance networks such as  ESnet OSCARS, and evaluate the energy saving performance  in real-life network environments.

