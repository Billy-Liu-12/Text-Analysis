Mining Closed Frequent Itemsets in the Sliding Window over Data Stream

ABSTRACT  Mining closed frequent itemsets in the sliding window is one of important topics of data streams mining. In this paper, we propose an algorithm, MCFI-SW, which mines closed frequent itemsets in the sliding window of data streams efficiently. It uses a CFP-tree based on FP-tree to record the current information in stream and prunes the obsolete items and a lot of infrequent items by operating the pointer. A novel approach is presented to mine a set of closed frequent itemsets in the CFP-tree. Theoretical analysis and experimental results show that the proposed method is efficient and scalable.

Keywords: data stream;closed frequent itemsets; sliding window  1. Introduction  Recently, data streams are found in a variety type of applications, so, data stream mining has been widely studied. Pasquierti proposed the conception of closed frequent itemset in [10]. Consequently, the problem of mining frequent closed itemsets has being concerned extensively.

According to the data stream processing model, the research of mining frequent patterns in data streams can be divided into three fieldsj l l ]: landmark windows model, sliding windows model, and damped windows model , as described briefly as follows. In the landmark windows, [1] proposed the single-pass algorithms, called DSM-MFI, to mine the set ofall maximal frequent itemsets.

Prefix-tree based data structures are developed in the proposed algorithms to store information embed in data streams. [2] proposed the efficient algorithms based on Chernoffbound for false negative or false positive mining of frequent itemsets from high speed transactional data streams. The algorithms use a running error parameter to prune itemsets and use a reliability parameter to control memory. In the damped windows, Chang and Lee [3] develop an algorithm estDec for mining frequent itemsets in streaming data in which each transaction has a weight and it decrease with age. [5] developed a FP-tree-based algorithm [4], called FPstream, to mine frequent itemsets at multiple time granularities by a novel titled-time. In the sliding windows, Moment[6] uses a Closed Enumeration Tree (CET) to maintain a dynamically selected set ofitemsets. The selected itemsets consist ofa boundary between closed frequent itemsets and the rest of the itemsets. Conceptual drifts in a data stream are reflected by boundary movements in the CET.

NewMoment[7] uses bit-sequence to represent itemsets to mine closed frequent itemset. During the process of tree-search, the support of an itemset can be counted quickly by bitwise logical operation AND on two sub-itemsets.

Moment and NewMoment are the typical algorithms to mine frequent closed itemsets from data streams.

However, there are three fatal problems in Moment and NewMoment algorithm. Firstly, Moment algorithmic efficiency is limited in the case of low support because every node in CET is not closed so that there are still some redundant nodes and the number of nodes in CET would increase remarkably with the reducing ofsupport. Secondly, Moment algorithmic adopts the idea of Apriori[8] that generates a larger itemset through the union of its less subsets. Thirdly, The memory usage and the loading time of the first window of NewMoment are lower than those of Moment, but for the average time of window sliding, NewMoment is a little slower than Moment in the experiments in paper [7]. In this paper also presents a MCFI-SW (mining closed frequent itemsets in sliding window) algorithm to incrementally mine the closed frequent patterns in recent time window over a data stream. Compared with the presented works, our method has the following merits: Firstly, A data structure named Current Frequent Pattern tree (CFP-tree for short) is proposed to capture the up-to-date contents of a data streams. Although a CFP-tree is not the best on space, it is more competent to incrementally mine an online data stream than the pattern trees used in presented works.

Secondly, a CFP-tree has many excellent properties which make it more efficient to maintain and mine the closed frequent patterns with the tree. Thirdly, although both frequent patterns and non-frequent ones are kept in a CFP-tree, an improved mining method is designed to efficiently select closed frequent itemsets from a CFP-tree.

The remainder of this paper is organized as follows. Problem definition is given in Section 2.

Algorithm MCFI-SW to find the closed frequent itemsets is described in Section 3. The performance results are presented in Section 4. Section 5 concludes our study.

2. Preliminaries  A data stream, DS = [WI, W2,... , WN], is an infinite sequence of basic windows, where each basic window Wi, "if i = 1, 2, ... , N, is associated with a window identifier i, and N is the window identifier of the "latest" basic window WN. A basic window consists of a fixed sized number of transactions denoted by <TI , Tz, ??? , Tk, ??? >.

Each transaction is composed of a set of items (named itemset) denoted by Xi (i=l, 2, ???, p). The size of a basic window Wi is denoted by IWil.

The true support of an itemset Xi is the number of transactions of the stream containing the itemset as a subset, and denoted by i:(Xi) . The estimated support of an itemset Xi is the estimated true support stored in the summary data structure, and denoted by fsw(xi). Note that 1 :::; t: (Xi) :::; i:(Xi). In this paper, the itemsets embedded in the data streams can be divided into three types: frequent itemset, significant itemset, and infrequent itemset. An itemset Xi is called frequent if fsw(xi?(S-E)INI, where S is a user-defined minimum support threshold in the range of [0, 1], E is a user specified maximum support error threshold in the range of [0, s] and INI is the number of transactions in sliding window. An itemset Xi is called significant iffsw(x  i ) > E IN I. An itemset Xi is called infrequent if  t: (Xi) =:; E IN I? X-< Y denotes that lexicographical-order of item X is  lower than that the item Y in this paper.

3. Algorithm Implement  In this section, we will propose the method for mining the closed frequent itemsets in a sliding window of an online data stream, including the current frequent pattern tree and a series of algorithms based on the tree.

3.1 The structure of CFP-tree  The current frequent pattern tree is an improved FP-tree [4] to adapt for incrementally mining the current frequent patterns over an online data stream. Compared with an FP-tree, a CFP-tree has the following improvements: (1) All items in the CFP-tree are sorted in lexicographical-order. In contrast, the frequent items in the FP-tree are sorted in their frequency descending order.

(2) Each node in an FP-tree consists of three fields: item-name, count, and node-link. But in a CFP-tree, besides three fields, another field, item-sign (also means the sign of item) registers the type of node, which ?is frequent item, 1 is significant item and 2 is infrequent item.

(3) An item-list table is used to index the CFP-tree. All items of a data stream are maintained in the table and sorted in lexicographical-order. Each entry in the table consists of four fields, item-name, count, item-sign and head of node-link, where head of node-link is a pointer pointing to the first node in the CFP-tree carrying the item-name.

(4) Each entry in the tid-list consists of two fields: tid and pointer. Tid registers the number of transaction. Pointer is a pointer pointing the last item of each branch in the CFP-tree.

3.2 Incremental Updata  The information in sliding window over data stream  is constantly changed. When new transactions in current window arrive in sliding window, the transactions in obsolete window are deleted from sliding window. Thus, the newly generated transaction can be stored immediately in the CFP-tree according to lexicographical-order as it arrives. The procedure of incrementally updating a CFP-tree is shown in algorithm 1.

Algorithm 1 UpdataCFP-tree Input: the current transaction in the data stream TC, a user-specified minimum support threshold s E (0,1), and a user-defined maximum support error threshold e E (O,s);  Output: A CFP-tree generated so far; Get the projection TC',of TC; for each item XiETC do if Xi ~ It.em-I ist then  Create a new entry of forrrux, 1,2,node-link) into the Item-list; else  Xi. count= Xi. count+1; if the frequent type of Xi is changed then  set the frequent item-sign of all node with item-name=Xi in CFP-tree;  endif endif if CFP-tree has a child node with itemname such that  y. itemname=xi. itemname then y.count=y. count+l;  else Create a new entry of form (xi,,1,2,node-link) into the CFP-tree;  endif endofor  3.3 Efficiently Pruning CFP-tree As data streams flow, the information of many historic  transactions might become obsolete. Additionally, the number of lots of infrequent itemsets is really huge. It is consumptive for a CFP-tree to maintain lots of obsolete itemsets and infrequent itemsets. So, an operation of pruning CFP-tree should be periodically performed to delete the obsolete and infrequent itemsets.

Proposition Llf'X, is an infrequent itemset, Xi could be deleted without bringing any false error.

Proof. Suppose a sliding window, SW = [SW., SW2, ??? , SWN] , is an infinite sequence ofbasic windows, where N is the number of sliding window. Additionally, INI is the number of transaction in sliding window, ISWil is the number of transaction in basic window and G is a user specified maximum support error threshold.

As any Xi in a sliding window, its support threshold is defined f (x). IfXi is infrequent item in the basic window of m and it i~ changed frequent item or significant item in the basic window of n-m, its true support threshold in sliding window, SW,is as following:  , m f (x) = f (x) + L fsw.(x.) m<n  sw 1 SW 1 '1 } 1 in MCFI-SW, if:Xi is a infrequent itemset, we can  know J: (Xi)~ EX ISW; I t.r.: (x) s Extl B?; I < EX I N I nence, f;w (xr~ f  s w (x) < ex I N I. ends  Proposition 2.As any path in the CFP-tree, the support threshold ofnodes in the same path is descending sort and all leaf nodes represent the itemset of least support threshold.

Proof. Let node, and node, be two nodes in the same path of a CFP-tree and node,be an ancestor ofnode,.

According to the properties of the CFP-tree and algorithm 1, we can know that if node, be an ancestor of node, node; -< node  j .Additionally, ifnode,is stored in the  CFP-tree, node, must be inserted into the CFP-tree because node, and node,are both in the same path. But, if node, is stored in the CFP-tree, node, could not be inserted into the CFP-tree. Hence, nodecountc-nodej.count.

According to algorithm 1, we can know that all the leaf nodes are the last node inserted in each path ofthe CFP-tree and the support threshold of their parent nodes is greater than their support threshold. Hence, all the leaf nodes represent the itemset of least support threshold. ends.

According to the properties ofthe CFP-tree, tid registers the number of current transaction and it corresponds to pointer which is a pointer pointing the last item of each branch in the CFP-tree. Thus, the obsolete items can be immediately moved by the pointer from the CFP-tree. At the same time, a lot of infrequent items and the items which their frequent support threshold is zero are recorded in the CFP-tree. One, if ~w (x) ~ E IN I, '\Ix; E Item <list .X, is a infrequent item. According to Proposition 2, the child nodes ofXi are infrequent items. Hence, According to Proposition 1, all nodes carrying item-name are the same to Xi in the CFP-tree and their descendant are deleted. Two, ~w (x) > E IN I, '\Ix; E Item -list, Xi is a frequent or significant item. According to Proposition 1, all nodes carrying item-name is the same to Xi in the CFP-tree can not be deleted. But, if the nodes carrying X.count are zero in the CFP-tree, Xi is an obsolete item.

According to proposition 2, their descendant nodes are obsolete items.

Based on the above propositions and analysis, given the maximum support error E and the size, N, of a sliding window, the CFP-tree could be pruned by the procedure shown in algorithm 2 without needing to traverse the whole CFP-tree.

Algorithm 2. PruningCFP-tree Input: a CFP-tree to be pruned, the number of current transaction in the  data stream tide; Output: a CFP-tree after being pruned for each tid< tide, where tid ETid-list do  for each Xi E path which tid corresponds to pointer pointing each branch in the CFP-tree Xi. count= Xi. count r l  endfor endfor for each XiEItem-list do  count Xi. count if the frequent type of Xi is changed then  set the frequent i tern-sign of all node with i ten-name-X, in the CFP-tree  endif  iffsw (xJ < e *INI delete all nodes carrying i ten-name-X, in CFP-tree and their descent; delete Xi from Item-list;  else delete all nodes carrying i ten-name-X, and Xi. count=O in the CFP-tree and their descent;   endif endfor  3.4 Mining closed frequent itemsets from CFP-tree This paper adopts the idea of CLOSE+[9] which  bases on the famous FP-tree in static data-base to find the closed frequent itemsets in data stream over sliding window. Because the CFP-tree is similar to FP-tree in structure, but different from FP-tree in dealing with the data, it needs to improve the CLOSE+ to find the closed frequent itemsets from CFP-tree.

Property 3: In a CFP-tree that has been pruned, the potential frequent itemsets are not always the leaves.

Proof: suppose INI is the number of transactions in a sliding window, E is a user specified maximum support error threshold, the leaf node is nodeleaves. Suppose all of the leaf nodes are significant frequent items, that to say, f  sw (node/eaves) > e I N I?  In CFP-tree, if an item im that is sorted latter location in lexicographical-order, it means it -< h... -< im, imis leaf node, t: (x  m ) = p and p > (s - E) IN l Due to  algorithm 1 and property 2, we can know the number of imis p, t: (xm ) = 1< E IN I, so impossibly is the leaf node of p branches in CFP-tree. It conflicts with the suppose, so the property is proved.

From the property 2, we can know that nodes of every branch in FP-tree and CFP-tree both are ordered by decreasing support, so it is easy to build the conditional pattern base. FP-tree stores all frequent items in data-base, however CFP-tree stores all the frequent items and potential frequent items in sliding window.

Compared to CLOSE+, mining closed frequent itemsets from CFP-tree has two improvements. First, the algorithm has to neglect the potential frequent items, and build the conditional pattern base in frequent items in Item-list. Second, when building conditional pattern base of some item, the conditional pattern base must only include the frequent items, must not include the potential frequent items according to property 3.

4. Performance Study and Experiments  All the experiments are performed on a 2.0GHz PertiumIV with 1GB, and the program is written in Microsoft Visual C++6.0. To evaluate the performance of Moment, NewMoment and MCFI-SW algorithm, we conduct the empirical studies based on the synthetic datasets TI0II0D200K which is generated by IBM synthetic data generator[12] with of items being 10K. All data streams are represented by average transaction length (T), average pattern length (I) and the size of stream data (D).

The performance measurements include the loading time of the first window, and the average time of window sliding. Average time of window sliding is reported over 100 consecutive sliding windows.

4.1 Comparison with Algorithm on Different Support Threshold  In the first experiment, the minimum support    O O SS N ...... .............l  _.

M~' r o"1: M~'N~om.., l 0"" MC f' ? 8 WM C f"_S W 0_,  L ~ O O ;) S.... o o :x?r- 1?02 5- .

~ .. . . 00'", I J0 0'1) : :. 0010  0 ' o. - 0 005- 0' O . 00 0 . ,?  M......... ... 5uppoo1 I""' J .Jh ri.rn u n S UJ>PO<tc"',  threshold is changed from 1% to 0.1%, and the size of sliding window is fixed to 100,000 (l00 K) transactions.

In Figure 1 (a), the time of loading the first window incurred by MCFI-SW is shorter than that of Moment and NewMoment except the time of loading the first window incurred by NewMoment is smaller than that of MCF-SW in the case of smaller support threshold. The experiment shows that MCFI-SM performs more efficiently than that of Moment and NewMoment. In Figure 1 (b), the average time of window sliding of MCFI-SW is smaller than that of NewMoment and is quite steady than that ofMoment.

In this paper, we propose an efficient single-pass algorithm MCFI-SW to mine the set of closed frequent itemsets over data streams in sliding window. In MCFI-SW algorithm, an efficient CFP-tree is developed to capture information embed in the data streams generated so far. Additionally, a novel approach is designed to mine a set of closed frequent itemsets in the CFP-tree. Experiments show that the proposed MCFI-SW algorithm outperforms the Moment and Newmoment, a state-of-art algorithm for mining the set of closed frequent itemsets over online data streams in sliding window.

6. Reference  [I] Hua-Fu Li, Suh-Yin Lee. Online Mining (Recently) Maximal Frequent  Itemsets over Data Streams. In: Proceedings of the 15th RIDE-SDMA  Conference, Tokyo, Japan, pp.II-18, 2005  [2] Yu J, Chong Z, Zhang H. A false negative approach to mining frequent  itemsets from high speed transactional data streams. Information  Sciences, 176(14): 1986-2015 ,2006  [3] Chang J, Lee W. Finding recent frequent itemsets adaptively over Data  Stream. In : Proceedings of the 9th ACM SIGKDD International  Conference on Knowledge Discovery and Data Mining, Wasington,  USA, pp. 487-492, 2003  [4] J Han, J. Pei, Y. Yin. Mining Frequent Patterns without Candidate  Generation. In: Proceedings of the 2000 ACM SIGMOD, USA,pp 1-12,   [5] Giannella G, Han J, Yu P. Mining Frequent Patterns in Data Streams at  Multiple Time Granularities. Data Mining: Next Generation Challenges  and Future Directions. pp 191-212,2004  [6] Chi, Y, Wang H, Yu P. MOMENT: maintaining closed frequent itemsets  over a data stream sliding window. In: Proceedings of the 2004 IEEE   [7] H. Li, C. Ho, et al. A New Algorithm for Maintaining Closed Frequent  Itemsets in Data Streams by Incremental Updates. In Proc. Of  IWMESD'06, Hong Kong, pp. 672-676,2006.

[8] R. Agrawal, R. Srikant. Fast Algorithms for Mining Association Rules.

Bases, Santiago, Chile, 1994.487-499  [9] Jianyong Wang,Han Jiawei. CLOSET+:Searching for the Best Strategies  for Mining Frequent closed Itemsets. In: Proceedings of the 2003  SIGKDD,Washington,USA .pp.236-245.,2003  [10] N.Pasquire,Y.Bastide. Discovering Frequent Closed Itemsets for  association rules. ICDT'99, Jerusalem,lsrael , 1999.

[11] Li,H-F,Lee. An efficient algorithm for mining frequent itemsets over  the entire history of data streams. In Proceedings of the first  international workshop on knowledge discovery in data  stream,pisa,ltaly. pp.592-599, 2004.

[12] http://www.almaden.ibm.com/software/projects .

5. Conclusions  eo .. ..

...........,.,. Sll.l~ " ........,tlOfl. '  (b) Support Threshold Fixed to 0.6%  J': .~...

! .I ., . r t J ? - "  (a) Support Threshold Fixed to 0.1%  (a) Time of Loading the First Window (b) Average Time of Window Sliding  Figure I Comparison with Algorithm on Different Support Threshold  4.2 Comparison with Algorithm on Different window sizes  In the second experiment, the size of sliding window is changed from 10K transactions to 100 K transactions, and all minimum support thresholds are fixed to 0.1% except the minimum support threshold is fixed to 0.6% ofexperiment in figure 2(b).

In Figure 2 (a) shows the time of loading the first window incurred by MCFI-SW is between Moment and NewMoment in the case of lower support threshold. In Figure 2 (b) shows the time of loading the first window incurred by MCFI-SW is slower than that of Moment and NewMoment in the case of higher support threshold.

These experiments show that MCFI-SW algorithm is more efficient except in the case of smaller support threshold . In Figure 2 (c) shows the average time of window sliding. In this experiment, the time of window sliding of three algorithms are almost the same with the increasing sliding window size.

