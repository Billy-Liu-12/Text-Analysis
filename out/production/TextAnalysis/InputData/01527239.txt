A HIGH EFFICIENT APRIORITID ALGORITHM   FOR MINING ASSOCIATION RULE

Abstract: Mining association rule is one of the common forms in  data mining, in which the critical problem is to gain the frequent itemsets efficiently. The classical Apriori and AprioriTid algorithm, which are used to construct the frequent itemset, are analyzed in this paper. Author finds out that there too many data due to those items repeatedly saved in the AprioriTid algorithm. On the basis of analysis, we give a theorem of the itemset whose support is less than minsup in  Ck-1 is useless in 1kC ? . Then HEA algorithm based the theorem is offered. The experiments show that the new algorithm is more effective in decreasing data size and execution times than AprioriTid algorithm.

Keywords: Association rule; AprioriTid algorithm; HEA algorithm;  date mining; KDD  1. Introduction  Data mining has recently attracted tremendous amount of attention in database research because of its applicability in many areas. In the data mining, the database can be transaction databases or analytical databases. Analytical databases can work as transaction databases by using the predicate logic. The mining method of association rule in the transaction databases is suitable for analytical databases.

Here are some narrations and definitions of conceptions [1? 2] which will be used in this paper later.

Definition 1: Let I={i1,i2,?,im} be a set of items, then is a transaction database,  where Tid is an identifier which be associated with each transaction.

{ , |D Tid T T= < > ? }I  Definition 2: Let X I? ,Y , and , we called  I? X Y? = ? X Y?  as association rule.

Definition 3: Suppose c is the percentage of transactions in D containing A that also contain B, then the rule X Y?  has confidence c in D. If s is the percentage of transactions in D that contain , then the rule A B?  X Y?  has support s in D.

Definition 4: Hypothesis: X I? , minsup is the  smallest support. If the frequency of X is greater than or equal to minsup, then X is called as frequent itemsets, otherwise X is called non-frequent itemsets.

Given a minimum confidence threshold minconf and a minimum support threshold minsup, the problem of mining association rules is to find all the association rules whose confidence and support are larger than the respective thresholds. We also call an association rule a strong rule to distinguish it from the weak ones, i.e., those that do not meet the thresholds [3]. So the problem of mining association rules can reduce to two subproblems.

1) Find all large itemsets for a predetermined minimum  support.

2) Generate the association rules from the large itemsets  found.

The last problem is easy to resolve. So the most crucial  factor that affects the performance of mining association rules is to find an efficient method to resolve the first problem. In this paper, we will firstly analyze the Apriori and AprioriTid Algorithm. Secondly, we will give an improvement algorithm of AprioriTid, called as HEA (High Efficient AprioriTid) algorithm. At last, we will make some experiments of new algorithm and give the conclusions.

2. Analysis of Apriori and AprioriTid algorithm  2.1.  Apriori algorithm  The Apriori algorithm is one of the most popular algorithms in the mining of association rules in a centralized database. The main idea of Apriori is outlined in the following.

1) The large itemsets are computed through iterations. In  each iteration, the database is scanned once and all large itemsets of the same size are computed. The large itemsets are computed in the ascending order of their sizes.

2) In the first iteration, the size-1 large itemsets are computed by scanning the database once. Subsequently, in the kth iteration (k > l), a set of candidate sets Ck is created by applying the candidate set generating function Apriori-gen on Lk-1, where Lk-l is the set of all large (k-1)-itemsets found in iteration k-1. Apriori-gen generates only those k-itemsets whose every (k-1)-itemsets subset is in Lk-l. The support counts of the candidate itemsets in Ck are then computed by scanning the database once and the size-k large itemsets are extracted from the candidates.

In this algorithm, if the number of first itemsets element is k, DB will be scanned k times at least. So it will have low efficient. It is a base point to reduce the number of itemsets for improving the Apriori algorithm.

2.2. AprioriTid algorithm  Contrasted to Apriori algorithm, the AprioriTid algorithm [4] has the additional property that the database is not used at all for counting the support of candidate itemsets after the first pass. Rather, an encoding of the candidate itemsets used in the previous pass is employed for this purpose. In later passes, the size of this encoding can become much smaller than the database, thus saving much reading effort. The AprioriTid algorithm also uses the Apriori-gen function to determine the candidate itemsets before the pass begins. The interesting feature of this algorithm is that the database D is not used for counting support after the first pass. Rather, the set kC  is used for this purpose. Each member of the set kC  is of the form , where each ,{ }kTID X< > kX  is a potentially large k-itemset present in the transaction with identifier TID.

For k=1, 1C  corresponds to the database D, although conceptually each item I is replaced by the itemset {i}. For k>1, kC  is generated by the algorithm. The member of  kC t  corresponding to transaction t is . If a transaction  does not contain any candidate k-itemset, then  . ,ID {c< ? |kT C c contained in }t > kC  will  not have an entry for this transaction. Thus, the number of entries in kC  may be smaller than the number of transactions in the database, especially for large values of k.

in addition, for large values of k, each entry may be smaller than the corresponding transaction because very few candidates may be contained in the transaction. However, for small values for k, each entry may be larger than the  corresponding transaction because an entry in Ck includes all candidate k-itemsets contained in the transaction.

From above analysis, using kC  is efficient method to avoid scanning DB in AprioriTid algorithm [5?6]. However, a same item may appear in many candidate itemsets contained in a transaction and appear many times in kC , which will make item to be repeated stored and improve size of query data. In next fraction, we will give a theorem for reducing size of data stored in kC  and a new HEA (high efficient AprioriTid) algorithm.

3. HEA algorithm  3.1. Theorem and proof  Theorem: if  and c.support<minsup, c is  useless in  1kc C ?? 1k ?C .

Proof: hypothesis  and s.support<minsup, s.itemset={s[1],s[2],?,s[k-1]}.

1ks C ??  For , so . Known from Apriori-gen function, C  1 1{ | . min sup}k kL c C c count? ?= ? ?  k  ks L ?? k comes from Lk-1. To p C?  1 1kC L ?? 1C , p.itemset={p[1],p[2],?,p[k]},  p.itemset birthed from , .itemset= { [1], [2],?, [k-1]} and ,  .itemset={ C [1], [2],?, C [k-1]}.

1C   1C 1C 2 1kC L ?? C 2 2C 2  Moreover p[1]= [1]= [1],?, p[k-2]= [k-2]= [k-2], p[k-1]= [k-1], P[k]= C [k-1], [k-1]< [k-1].

1C 2C 1C 1C  2C 2C  1C 2  So {s[1],s[2],?,s[k-1], x item?? }-itemset will not appear in Ck. That is to say that we need not to compute the support of this itemset.

To 1kt C ?? ? , s={s[1],s[2],?,s[k-1]} and support(s)<minsup.

Hypothesis in step 7 of AprioriTid algorithm, s? birthed from s, which has only two possible formats as following.

kC?  { [1], [2],..., [ 2], [ 1], } , [ 1] { [1], [2],..., [ 2], , [ 1]} , [ 1]  { s s s k s k x s k x s s s k x s k s k x  ? ? ? < ? ? ? >  However whichever format, it is necessary that Lk-1 must include a itemset as format of {s[1],s[2],?,s[k-1]}-itemset. It is to say that support ({s[1],s[2],?,s[k-1]}) minsup. This is contradiction with Hypothesis. Proof is over.

?      3.2. HEA algorithm  HEA algorithm is improved AprioriTid algorithm, whose idea: on the basis of theorem, we only use itemsets of Ck-1, which supports are equal to or greater than minsup, to build 1kC ? ; So we renew the relationship of transaction t with entry, defined as  . ,{ | .sup minsup}k kC tTID c C c t and c port=< ? ? ? > ; This  will consumedly decrease size of stored data in kC ; Moreover, because searching data scale is reduced when we compute support of itemsets in Ck. At the same time, it will reduce much time of I/O and running.

In AprioriTid algorithm, from step 6 to step 11, it is to compute new kC  and support of itemset in Ck. So we can add the sentence, which will delete itemset that support is smaller than minsup in kC , to optimize the algorithm after step 11. However, in application of data mining, frequent itemset also can be build from SQL sentence on the basis of structure of table. So through analysis, we also use circle of Ck in HEA to instead of circle of kC  in AprioriTid step 6.

The material process is showed : Firstly, Confirming itemset c in Ck, then transaction set Tc, presented with TID, including the item of c, is computed; Secondly, the number of entry is computed in Tc, defined as |T , which is support of itemset c; Thirdly, if |T , c is included into L  c| minc| sup?  k and kC  , otherwise deleting c. Through above process, with the computed support in Ck, void itemset can be directly deleted from kC  or added to kC and Lk.

In following, we give the detailed data structures used to implement the HEA algorithm.

1) ; 1L ={largel-itemsets} 2) 1C database D= ; 3) For (k=2; ; K++) do begin 1kL ? ? ? 4) ;  1( )k kC appriori gen L ?= ?  // New candidates 5) ; kC = ? 6) For all  do begin kc C? 7) 1{ . | , ( [ ])c kT t TID t C c c k?= ? ? ? ?  . (t set of itemsets c c k? ? ? ?[ 1]  }   ? ?  . )t set of itemsets? 8) If  then begin | | min supcT ?  9)  { }k kL L c= ? 10) For all cp T?  do 11) ,k kC C p c= ? < > ; 12) end 13) end 14) end 15) Answer=  kL?  Figure 1. HEA Algorithm   From step 8 to 12 of algorithm, we can see that eligible itemset c is added into Lk and all transactions of Tc are added into kC .

4. Experiments and conclusions  4.1.  Experiments  For validating the effect of HEA algorithm, author choices a course database to mine association rule of course relationship. In this database, there are 19 courses of 71 students and total records are 963. Author defines minsup as 0.5% and minconf as 60%. The number of Lk and 1kC ? record is shown in table1.

Table 1. Contrast of Record Number  K value Number of record  ApriorTid algorithm  HEA algorithm  K=1 Lk 75 75 1kC ? 963 963 K=2  Lk 599 599 1kC ? 5802 3540K=3  Lk 660 660 1kC ? 7743 2970K=4  Lk 142 142 1kC ? 1055 590 K=5  Lk 10 10 1kC ? 44 41 K=6  Lk 0 0   From table 1, we can see that HEA algorithm is valid in reducing data scale. The number of record is averagely reduced to 47%. With the searching scale decreasing, the algorithm complexity of HEA is reduced than AprioriTid algorithm.

With above transaction database, when minconf is defined as 60%, we also make experiment with different minsup varying from 0.2 to 1, to contrast execution time      between HEA and AprioriTid algorithm. The experiment is performed on a workstation with a CPU clock rate of 2.0 GHz, 256 MB of main memory. The result is shown as following.

Figure 2. Execution times   Figure 2 shows that with the minsup decreasing, the  execution times of two algorithms increase because of increases in the total number of candidate and large itemsets. However, the HEA execution time is smaller than AprioriTid for searching data scale is reduced in kC . When minsup is varied from 0.9 to 1.0, the execution times of two algorithms are nearly same. But when the candidate itemsets in kC  are rapidly increased with minsup reduced step by step, HEA can save more execution times than AprioriTid algorithm for HEA can sharply reduce scale of itemsets in kC .

4.2. Conclusions  In this paper, author first detailed analyzes the Apriori and AprioriTid algorithm, then gives an theorem to reduce the scale of candidate itemsets. On the basis of theorem and proof, author gives an improved AprioriTid algorithm-HEA  algorithm, the experiment results show that HEA can gain a better performance in the execution times and complexity of computing than AprioriTid algorithm.

Acknowledgements  This paper is supported by Science-Technology Development Project of Tianjin (04310941R) and Applied Basic Research Project of Tianjin (05YFJMJC11700).

