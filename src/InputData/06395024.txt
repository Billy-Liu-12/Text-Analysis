Maintenance of DBV-trees for Transaction Insertion

Abstract?In this paper, we present an incremental mining algorithm for handling the mining problem from inserted transactions. The algorithm is based on the Dynamic Bit- Vector (DBV) structure and pre-large itemsets. The DBV structure facilitates the processes for maintaining large and pre-large itemsets. The pre-large concept is used to reduce the number of database scans. The experimental results show that the proposed algorithm is faster than some other algorithms.

Keywords?Data mining, frequent itemset, incremental mining, pre-large itemset, Dynamic bit vector.



I.  INTRODUCTION  Mining frequent itemsets (FIs) is the most important task in mining association rules. A lot of algorithms for mining FIs have been proposed. Some of famous ones are Apriori [1], FP-growth [4], Eclat [13, 14], BitTableFI [3], Index- BitTableFI [11], and so on. They can be divided into two categories according to the database formats: horizontal and vertical. The horizontal data format is the same as that presented in a database. The vertical data format is a conversion from the horizontal one, with the transaction identifiers (TIDs) grouped for each item. Most of the vertical-based approaches scan databases once for fast mining FIs. Two representative ways are Tidset [13, 14] and BitTable [3]. The Tidset maintains a list of TIDs for each interesting item, and the BitTable uses a bit-vector to represent the transactions with the item. However, the bit- vectors occupy the same fixed size which depends on the number of transactions in a given database.  In practice, there are usually many bits of ?0? in a bit vector. Vo et al.

proposed a structure, namely Dynamic Bit-Vector (DBV) [12], to solve the above problems. The authors also proposed an algorithm for fast computing DBV intersections. They showed the DBV-based approach outperforms the BitTable-based approach.

All Apriori, FP-tree-based and DBV-based algorithms use batch mining. They must thus process all the transactions batch-wise. In real-world applications,  transactions are commonly inserted and deleted. Therefore, designing an efficient algorithm for the maintenance of association rules as a database grows is critically important.

The first incremental mining algorithm was the Fast-UPdate algorithm (called FUP) [2]. Like Apriori-based algorithms, FUP generates candidates and repeatedly scans the database, although it avoids a lot of unnecessary checking. After that, Hong et al. [5] proposed the pre-large concept to further reduce the need for rescanning the original database. This algorithm does not require the original database to be rescanned until a number of new transactions have been inserted. The maintenance cost is thus reduced with the pre- large concept.

In the past, Lin et al. proposed the pre-large tree algorithm [7], which is mainly based on pre-large tree structure, an improvement of FP-tree structure. However, this algorithm must rescan the original database for maintaining pre-large itemsets and rebuilding the pre-large tree. After that, FP-Growth algorithm [4] must be used to mine all FIs. This requires twice the computation time needed for a single procedure. Recently, Le et al. [9] also proposed the Pre-FUIT algorithm (Fast-Update algorithm based on the IT-tree structure and the pre-large concept) for the efficient handling of the insertion of transactions.

However, the tidset intersections process is time-wasted.

Much memory and time are thus needed for computing the tidset intersections.

In this paper, an incremental algorithm for handling of the insertion of transactions based on the pre-large concept and the DBV structure is proposed to solve above problems.

The proposed algorithm only processes inserted transactions for updating the final supports of itemsets using the depth- first traversal technique. The incremental supports of itemsets are rapidly computed using DBV intersections.

Experimental results show that the proposed algorithm has a good performance for the incremental handling of inserted transactions.

2012 Conference on Technologies and Applications of Artificial Intelligence  DOI 10.1109/TAAI.2012.31   2012 Conference on Technologies and Applications of Artificial Intelligence  DOI 10.1109/TAAI.2012.31

II. RELATED WORK  A. DBV-tree structure DBV-tree was proposed by Vo et al. in 2012. Each  dynamic bit-vector consists of two elements: position (abbreviated as pos) and bit vector. The first element, position, point out the position of the first non-zero byte in the bit vector. The second element, bit vector, is a list of bytes representing the bit vector in bytes after removing the zero bytes at the front and at the tail. A fast algorithm for getting the intersection between two DBVs is proposed [12].

The support of an itemset could be found by counting the number of ?1? bits in it corresponding bit-vector. Figure 1 shows an example of a bit-vector (in decimal format).

Figure 1.  An example of a bit-vector with 16 bytes   Figure 2.  A representation of DBV for the bit-vector in Figure 1  The authors also proposed the DBV-tree for mining FIs.

Each node in DBV-tree includes two elements X and DBV(X), where X is an itemset and DBV(X) is a dynamic bit-vector containing X. Arc connects between two nodes X and Y must satisfy condition that X, Y have the same length and the same |X| - 1 prefix items. More details about the algorithm for mining FIs using DBV-tree can be found in [12].

B. Pre-large concepts The pre-large concept was proposed by Hong et al. [5]. It  was based on a safety threshold f to reduce the need of rescanning original databases for efficiently maintaining association rules. The safety number f of inserted transactions was derived as follows:  ( ) ,   u l  u  S S d f  S  ? =  ?  ? ? ? ?? ?  (1)  where Su is the upper threshold, Sl is the lower threshold, and d is the number of original transactions. When the number of new transactions is smaller than f, the algorithm did not need to rescan the original database.



III. PROPOSED ALGORITHM  The notation used in the proposed algorithm is first described below.

A. Notation D the original database T the set of inserted transactions  U the entire updated database, i.e., D ? T d the number of transactions in D t the number of transactions in T Sl the lower support threshold for pre-large itemsets Su the upper support threshold for large itemsets, Su>Sl X an itemset Tr a DBV-tree storing the set of pre-large and large  itemsets from D R a set of itemsets for which the original database has  to rescan to update the final supports DBV (X) dynamic bit-vector of item X in T |DBV (X)|  the number of ?1? bits in DBV(X) STr(X)  the support count of X in Tr SD(X)   the support count of X in D ST(X)   the support count of X in T, ST(X) = |DBV (X)|  ?U(X) the support of X in U, ?U(X) = ( ) ( )  D T S X S X  d c t  +  + +   ?D(X) the support of X in D, ?D(X) = ( )  D S X  d   ?T(X) the support of X in T, ?T(X) = ( ) ( )  T DBV X S X  t t =  B. Proposed  algorithm In this section, an algorithm for handling of inserted  transactions is presented. According to whether the number of inserted transactions exceeds a safety f threshold, the proposed algorithm requires the original to be rescanned.

The details of proposed algorithm are shown in Figure 3.

If the number of inserted transactions is less than f, the UP-DBV procedure for updating the DBV-tree is performed.

The main idea of this procedure is to maintain the large and pre-large itemsets stored in the DBV-tree using depth-first order traversal. Firstly, a set of nodes of itemsets at level 1 in Tr and their DBVs are determined from inserted transactions.

The final support counts of them are also updated. Itemsets at level 1 in Tr that does not satisfy Sl are removed from Tr.

After L and R are determined, the procedure UP-DBV- EXTEND extends the nodes in L to one more level by combining the nodes following them. With each pair (X, Y), this procedure will compute the intersection of DBV(X) and DBV(Y). If itemset XY exists in Tr, the final support count is updated, and XY is inserted into Li if XY is pre-large or large in the entire updated database. Otherwise, if XY is small in T and does not exist in Tr, itemset XY is inserted into R. After Li created, the algorithm will be called recursively to update the support count of all child nodes of the nodes in Li. When inserted transactions are processed, new transactions can be inserted continuously. If the number of inserted transactions does not exceed f, the UP-DBV procedure is called and all processes are the same as above.

INPUT:  - A lower support threshold Sl, an upper threshold Su, and a set of itemsets in R  - A DBV-tree Tr that stores large and pre-large itemsets derived from the original database D consists of (d + c) transactions with c is a variable which is used to record the number total of inserted transactions since the last rescan of the original database with  d  transactions.

- A set of t inserted transactions.

OUTPUT: A new DBV-tree Tr storing final large and pre-large itemsets, and R.

METHOD:  Inc-DBV(Tr, D, T, Sl, Su, R)  1.

( )   u l  u  S S d f  S  ? =  ?  ? ? ? ? ? ?    2. If (t + c < f) then {  3.     UP-DBV(Tr, D, T, Sl, Su, R) //processes inserted transactions for updating Tr  4.     Set c = c + t }  5. Otherwise {  6.     rescan d transactions to determine whether the itemsets in R are large or pre-large in D, add itemsets which are large and pre-  large into Tr  7.     Set R = ?; d = d + c; c = 0  8.     Inc-DBV(Tr, D, T, Sl, Su, R) }   UP-DBV(Tr, D, T, Sl, Su, R)  9. Update the new support count of each itemset at level 1 in Tr based on their DBV in T, after that remove nodes at level 1 that  does not satisfy Sl threshold.

10. L = { iDBV(i) | itemset i belongs to a set of itemsets at level 1 in Tr and ?U(i) ? Sl }  11. R = { i|DBV(i)| | itemset i belongs to 1-itemsets in T, but not exists at level 1 in Tr, and ?T(i) ? Sl }  12. UP-DBV-EXTEND(Tr, L, R, Sl)   UP-DBV-EXTEND(Tr, L, R, Sl)  13. ?XDBV(X)? L:  14. Create the new set Li by joining XDBV(X) with YDBV(Y) following X in L:  15. If XY exists in Tr then  16.       If ?U(XY) ? Sl then add XY and DBV(XY) into Li and update the support count of XY in Tr  17.       Otherwise remove XY from Tr  18. Otherwise, if ?T(XY) ? Sl then add XY with |DBV(XY)| into R  19. If| Li | ? 2 then UP-DBV-EXTEND(Tr, Li, R, Sl)  Figure 3.  Algorithm for maintenance the DBV-tree         Assume after that some new transactions need to be added, if the number of inserted transactions (including the newest inserted transactions) exceeds f, the algorithm must rescan the original database to determine whether the itemsets in R are large or pre-large in the entire updated database. The itemsets in R which are large or pre-large are inserted in to Tr. After that, the new safety f threshold is re- computed. The algorithm will compare the number of the newest inserted transactions and f, and all processes are then repeated as above.

C. An example In this section, an example is given to illustrate the  proposed incremental data mining algorithm. Assume that the initial D database includes 8 transactions shown in Table

I. For Sl = 30% and Su = 50%, a DBV-tree constructed from D is shown in Figure 4. In fact, the DBVs of the itemsets which are mined from the original database are not retained as the algorithm does not consider them in the maintenance process.

TABLE I.  AN EXAMPLE OF ORIGINAL DATABASE  Original database TID Items  1 ACE 2 ABDE 3 BCDE 4 ACE 5 ACE 6 ABC 7 BDE 8 ABCE                  Figure 4.  DBV-tree Tr that are constructed from the original database  After the DBV-tree Tr is built, two new transactions which are shown in Table II are inserted. The bit-vector and DBV of each items in T is shown in Table II.

TABLE II.  TWO NEW TRANSACTIONS  New transactions TID Items  9 ABCD 10 CEF    TABLE III.  BIT-VECTOR AND DBV OF EACH ITEMS IN TABLE II  Items Transactions Bit-Vector DBV A 9 00000001 {0,{1}} B 9 00000001 {0,{1}} C 9 10 00000011 {0,{3}} D 9 00000001 {0,{1}} E 10 00000010 {0,{2}} F 10 00000010 {0,{2}}  For the above data, the proposed maintenance algorithm proceeds as follows. The variable c is initially set at 0, and the safety f  threshold will be computed:  ( ) (0.5 0.3)8  1 1 0.5 u l  u  S S d f  S  ? ? = = =  ? ?  ? ? ? ? ? ? ? ?? ?? ?  .

As t + c = 2 + 0 = 2 ? f, rescanning the original database is unnecessary, the UP-DBV procedure is called. The final support counts of itemsets at level 1 in Tr will be updated based on their DBVs in T. Take itemset {A} as an example, |DBV(A)| = 1, SU(A) = SD(A) + ST(A) = SD(A) + |DBV(A)| = 6 + 1 = 7. The results are shown in Figure 5.

Figure 5.  DBV-tree Tr after the 1-itemsets have been processed  In this example, L = {A, B, C, D, E}. Take itemset {A} as an example, |DBV(A)| = 1, the support count of {A} in T is thus 1. As ?U(A) = (6 + 1)/(8 + 2 + 0) ? 0.3, {A} is inserted into L. Itemsets {B}, {C}, {D}, {E} are similarly processed. For itemset {F}, |DBV(F)| = 1, the support count of {F} in T is thus 1. As ?T(F) = 1/2 ? 0.3, and {F} is small in D, {F} is inserted into R.

After L and R are determined, the UP-DBV-EXTEND is called. With L = {A, B, C, D, E}, this procedure creates nodes at higher level, it joins each child node with all its following nodes. For example, consider node A at level 1 of DBV-tree in Figure 5. It will be combined with the other nodes as follow: ? {A} joins {B} to create a new node AB, DBV(A) =  {0,{1}} and DBV(B) = {0,{1}}, so DBV(AB) = DBV(A) ? DBV(B) = {0,{1}}?{0,{1}} = {0,{1 & 1}}= {0,{1}}.

As {AB} exists in Tr and ?U(AB) = (3 + 1)/(8 + 2 + 0) ? 0.3, Li = Li ?{AB}  ? {A} joins {C} to create a new node AC, DBV(A) = {0,{1}} and DBV(C) = {0,{3}}, so DBV(AC) =  {}  A(6) 0,0  B(5) 0,0  C(6) 0,0  D(3) 0,0  E(7) 0,0  AB(3) 0,0  AC(5) 0,0  AE(5) 0,0  ACE(4) 0,0  BC(3) 0,0  BD(3) 0,0  BE(4) 0,0  BDE(3) 0,0  CE(5) 0,0  DE(3) 0,0  {}  A(7) 0,1  B(6) 0,1  C(8) 0,3  D(4) 0,1  E(8) 0,2  AB(3) 0,0  AC(5) 0,0  AE(5) 0,0  ACE(4) 0,0  BC(3) 0,0  BD(3) 0,0  BE(4) 0,0  BDE(3) 0,0  CE(5) 0,0  DE(3) 0,0     DBV(A) ? DBV(C) = {0,{1}}?{0,{3}} = {0,{1 & 3}}= {0,{1}}. As {AC} exists in Tr and ?U(AC) = (5 + 1)/(8 + 2 + 0) ? 0.3, Li = Li ?{AC}  ? {A} joins {D} to create a new node AD, DBV(A) = {0,{1}} and DBV(D) = {0,{1}}, so DBV(AD) = DBV(A) ? DBV(D) = {0,{1}}?{0,{1}} = {0,{1 & 1}}= {0,{1}}. As {AD} does not exist in Tr and ?T(AD) = 1/2 ? 0.3, R = R ?{AD}  ? {A} joins {E} to create a new node AE, DBV(A) = {0,{1}} and DBV(E) = {0,{2}}, so DBV(AE) = DBV(A) ? DBV(E) = {0,{1}}?{0,{1}} = {0,{1 & 2}}= {0,{0}}.

As {AE} exists in Tr and? ?U(AE) = (5 + 0)/(8 + 2 + 0) ? 0.3, Li = Li ?{AE} After that, the procedure UP-DBV-EXTEND is repeated  recursively with Li = {AB, AC, AE}, and the final support counts of corresponding nodes will be updated. This process will be repeated recursively to update the final support counts of all nodes in Tr. The results are shown in Figure 6, and the final Tr are shown in Figure 7.

Figure 6.  DBV-tree Tr after the branch corresponding to[A] have been processed                Figure 7.  Final DBV-tree Tr  When the Inc-DBV algorithm is finished, R = {F: 1, AD: 1, ABC: 1, BCD: 1, CD: 1}. Besides, the final value of c is 2 in this example, and f ? c = 1. This implies that one more transaction can be inserted without rescanning the original database.

After two new transactions in Table II are processed, assume that, other two new transactions which are shown in Table IV need to insert into the database. The Inc-DBV algorithm is performed as follows.

TABLE IV.  TWO NEW ADDITIONAL TRANSACTIONS  New transactions TID Items 11 ABC 12 ACDE  Firstly, the safety f  threshold is computed.

( ) (0.5 0.3)8  1 1 0.5  u l  u  S S d f  S  ? ? = = =  ? ?  ? ? ? ? ? ? ? ?? ?? ?    As t + c = 2 + 2 = 4 > f, the original database must be rescanned for updating the final supports of itemsets in R.

The results are {F: 1, AD: 2, ABC: 3, BCD: 2, CD: 2}. As the support ratio of {F}, {AD}, {BCD}, and {CD} are less than the lower support threshold, they are removed from DBV-tree Tr. For example, ?U(F) = 1/(8 + 2 + 0) < 0.3, {F} is removed from Tr. ? ?? ? {ABC} has ?ABC(ABC) = 3/(8 + 2 + 0) ? 0.3, {ABC} is thus inserted into Tr. The results of Tr are shown in Figure 8.

Figure 8.  DBV-tree Tr after the original database has been rescanned  After rescanning, the original database is updated.

Similar to the processes of two transactions in Table II, two new transactions in Table IV are processed to maintain the DBV-tree Tr.



IV. EXPERIMENTAL RESULTS  Experiments were conducted to show the performance of the proposed algorithm. All the algorithms were implemented on a PC with a Core 2 Duo (2 ? 2 GHz) CPU and 2 GBs of RAM running Windows 7. All the algorithms were coded in C++. The accidents (with 340183 transactions with 468 items) database was used.

Experiments were made to compare the execution time for mining all FIs using the pre-large-tree-based algorithm, the Pre-FUIT, and the Inc-DBV algorithm when a number of transactions were inserted into the database. The accidents database was used for the first experiments. A total of 300000 transactions were used to construct an initial pre-  {}  A(7) 0,1  B(6) 0,1  C(8) 0,3  D(4) 0,1  E(8) 0,2  AB(4) 0,1  AC(6) 0,1  AE(5) 0,0  ACE(4) 0,0  BC(3) 0,0  BD(3) 0,0  BE(4) 0,0  BDE(3) 0,0  CE(5) 0,0  DE(3) 0,0  {}  A(7) 0,1  B(6) 0,1  C(8) 0,3  D(4) 0,1  E(8) 0,2  AB(4) 0,1  AC(6) 0,1  AE(5) 0,0  ACE(4) 0,0  BC(4) 0,1  BD(4) 0,1  BE(4) 0,0  BDE(3) 0,0  CE(6) 0,2  DE(3) 0,0  {}  A(7) 0,1  B(6) 0,1  C(8) 0,3  D(4) 0,1  E(8) 0,2  AB(4) 0,1  AC(6) 0,1  AE(5) 0,0  ACE(4) 0,0  BC(4) 0,1  BD(4) 0,1  BE(4) 0,0  BDE(3) 0,0  CE(6) 0,2  DE(3) 0,0  ABC(3) 0,0     large tree, IT-tree, and DBV-tree. Sets of 4000 transactions were then sequentially used as the inserted transactions for the experiments. The upper and the lower support thresholds were set at 40% and 50%, respectively. Figure 9 shows the execution time of the two algorithms for processing each set of 4000 inserted transactions.

Figure 9.  Comparison of the execution time for the sequentially inserted  transactions (accidents database)

V. CONCLUSION  In this paper, we have proposed the Inc-DBV maintenance algorithm for incremental mining based on the concept of pre-large itemsets. Instead of batch mining, the proposed algorithm only concentrates on processing inserted transactions. Besides, pre-large concept is used to reduce the number of database scans. User-specified upper and lower support thresholds are used to avoid the small items directly becoming large in the updated database when transactions are inserted. When new transactions are inserted, the proposed algorithm processes them to maintain the DBV- tree. The supports of nodes in DBV-tree are updated based on their DBVs in inserted transactions. Experimental results show that the proposed In-DBV algorithm runs faster than the Pre-FUIT and the pre-large-tree-based algorithms.

