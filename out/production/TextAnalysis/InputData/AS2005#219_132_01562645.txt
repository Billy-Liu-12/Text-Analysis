From Intent Reducts for Attribute Implications to Approximate Intent Reducts for Association Rules

Abstract  Automatic extraction of data dependencies or regulari- ties from historical data is of great importance in practice.

Concept lattice could serve as a common framework for such tasks. To deal with two typical kinds of data dependen- cies, attribute implications and association rules, this paper presents the definitions of intent reducts and approximate intent reducts, as the theoretical foundation for extracting these two kinds of knowledge. Algorithms for calculating them are developed. We also given out the methods for ex- tracting attribute implications and association rules. The results provide a better understanding of attribute implica- tions, association rules, and concept lattices.

1 Introduction  Automatic extraction of data dependencies or regulari- ties from historical data is of great importance in many prac- tical domains, and thus has been addressed in a number of fields including databases, machine learning, data mining, and rough sets. In databases, the most studied dependen- cies are functional dependencies; in machine learning, they present themselves as decision trees, decision lists, and so on;in data mining, association rules have prevailed for more than one decade; while in rough sets, dependencies take the forms of reducts and decision rules.

Formal concept analysis [5][2] provides a unified frame- work for dependency analysis, through a fundamental data structure?concept lattice. Concept lattice is constructed  upon a binary relation between objects and attributes. Such a binary relation is of highest abstraction, which builds a bridge towards various data in many different domain. For example, to investigate the relation between procedures and global variables in legacy code, a binary relation could be built up depending on whether one procedure makes access to one global variable [3].

Definition 1. A formal context K := (G, M, I) consists of two sets G and M and a relation I between G and M . The elements of G are called the objects and the elements of M are called the attributes of the context. In order to express that an object g is in a relation with an attribute m, we write gIm or (g, m) ? I and read it as ?the object g has the attribute m?.

Definition 2. For a set A ? G of objects we define A? := {m ? M |gIm for all g ? A}  (the set of attributes common to the objects in A). Corre- spondingly, for a set B of attributes we define  B? := {g ? G|gIm for all m ? B} (the set of objects which have all attributes in B).

In this paper, we shall call B? the support set of B in K, with another denotation Support(B) = B?.

Definition 3. A formal concept of the context (G, M, I) is a pair (A, B) with A ? G, B ? M , A? = B and B? = A.

We call A the extent and B the intent of the concept (A, B).

B(G, M, I) denotes the set of all concepts of the context (G, M, I).

Assume B is an intent in K, augmenting B with any other attribute will cause the shrink of corresponding sup- port set. Put it formally, if B = B?? and B ? B1 then B?1 ? B?.

Example 1. The table below illustrates a simple context (G, M, I), where G = {1234567} and M = {abcdefg}.

Due to the fact that {ab}? = {235} and {235}? = {abceg}, it follows that {ab} ?= {ab}??, and hence {ab} is not an intent. On the contrary, subset {ac} is an intent, for {ac}? = {1235} and {1235}? = {ac}.

a b c d e f g  1 ? ? 2 ? ? ? ? ? 3 ? ? ? ? ? 4 ? ? 5 ? ? ? ? ? 6 ? ? ? ? ? 7 ? ?  Definition 4. If (A1, B1) and (A2, B2) are concepts of a context, (A1, B1) is called a subconcept of (A2, B2), pro- vided that A1 ? A2 (which is equivalent to B2 ? B1). In this case, (A2, B2) is a superconcept of (A1, B1), and we write (A1, B1) ? (A2, B2). The relation ? is called the hierarchical order (or simply order) of the concepts. The set of all concepts of (G, M, I) together with the order re- lation, (B(G, M, I),?), is called the concept lattice of the context (G, M, I).

If (A2, B2) > (A1, B1) and there does not exist any other concept (A3, B3) such that (A2, B2) > (A3, B3) > (A1, B1), then (A2, B2) is called a parent concept of (A1, B1), while (A1, B1) is a child concept of (A2, B2).

Once concept lattice has been constructed, various kinds of knowledge can be drawn out from it. The paper will ex- plore two such kinds of knowledge, one is attribute impli- cations while the other association rules. The whole paper is organized as follows. Next section is devoted to the ba- sics of these two kinds of knowledge. Section 3 is devoted to intent reducts for attribute implications, while Section 4 devoted to approximate intent reducts for association rules.

Algorithms for computing (approximate) intent reducts are developed, and methods for extracting attribute implications and association rules are given out.

2 Attribute Implications and Association Rules  Definition 5 (Attribute Implications). An attribute impli- cation ?P ? Q? for a context K = (G, M, I) consists of two subsets (P and Q) of the attribute set M , where P is called the premise and Q the conclusion. [2]  When the sets are small, we shall omit the brackets, i.e., we shall write P ? m instead of P ? {m}. Further, we shall write ab instead of {a, b}. With its simple syntactic form defined above, let us now examine when it holds in a context.

Definition 6 (respects and holds). A subset T ? M re- spects an implication P ? Q if P ?? T or Q ? T . T respects a set L of implications if T respects every single implication in L. P ? Q holds in a set {T1, T2, . . . } of subsets if each of the subsets Ti respects the implication P ? Q. P ? Q holds in a context (G, M, I) if it holds in the system of object intents. In this case, we also say that P ? Q is an implication of the context (G, M, I) or, equiv- alently, that within the context (G, M, I), P is a premise of Q.

In context (G, M, I), an object g is represented by a sub- set of M , i.e. g? ? M . Therefore, we shall not distin- guish between objects and subsets of attributes below, and use them interchangeably.

Example 2. In Example 1,Object 6 respects the implication ?bc ? d? because {d} ? 6 ? = {bcdef}; Object 1 also re- spects this implication, but because {bc} ?? 1 ? = {ac}; On the contrary, object 2 does not respect it, for {d} ?? 2 ? = {abceg} and {bc} ? 2 ? = {abceg}. Therefore, the implica- tion ?bc ? d? does not hold in the formal context. Two ex- emplar implications holding in this context are ?abc ? eg? and ?a ? c?, because all the objects in the context respect them.

Theorem 1. An implication P ? Q holds in (G, M, I) if and only if Q ? P ??.

Proof. 1) Assume P ? Q holds in (G, M, I). P ? = {g ? G|P ? g?} denotes the objects with P , and all these objects must have attributes Q. It follows directly that Q ? P ??.

2) Assume that Q ? P ??. Q? ? P ? follows directly, which means that all the objects with P must be also with Q.

For a given context, the number of implications holding in it is normally very huge, even for small or moderately- sized contexts. Luckily enough, many of them could be deduced from much smaller sets of rules in the light of some inference mechanism. One such inference system of great popularity is the so-called Armstrong axioms. If you are interested, please refer to some classical books on database theory, such as [4], for detailed information.

What attribute implications represent are deterministic.

However, noises and uncertainties are prevailing in realistic domains. It is a must to introduce possibility and probability into knowledge. In addition, to make the discovered knowl- edge statistically significant, it is also prerequisite that the knowledge should be supported by enough instances (or ob- jects). Therewithal, association rules [1] emerged.

Definition 7 (Association Rules). With respect to the sup- port threshold ? and confidence threshold ?, ?P ? Q? is an association rule holding in context K = (G, M, I), if it satisfies |(P ? Q)?| ? |G| ? ? and |(P?Q)?||P ?| ? ?.

Example 3. Follow the context in Example 1 once time again, and assume that ? = 0.2 and ? = 0.7. Association rule ?a ? bce? holds because |{abce}?| = |{235}| = 3 ? |G|? ? = 1.4 and |{abce}?||{a}?| = 34 ? ? = 0.7. ?f ? d? does not hold because |{df}?| = |{6}| = 1 < 1.4. ?e ? a? does not hold, because |{ae}  ?| |{e}?| =  5 < ? = 0.7.

3 Intent Reducts  A formal context is normally generated in some specific application domain, representing the accumulation of his- torical empirical data. Those data are doomed to respecting the attribute implications existing in that domain. Extract- ing attribute implications from concept lattice is one kind of re-engineering, which recovers the underlying set of at- tribute implications as a process of inductive learning.

Holding in a given context, the rule of form ?P ? Q? requires that an object with attribute set P should also have the attribute set Q. Therefore the context satisfies P ? = (P ? Q)?.

3.1 What are intent reducts?

For any concept (A, B), its intent B is maximized with respect to its extent A. Adding any other attribute into B  will make the corresponding support set smaller. On the contrary, Removing an attribute from B will not necessar- ily lead to the expansion of the corresponding support set.

Motivated by this fact, the definition of intent reducts was presented [6, 7]:  Definition 8 (intent reducts). An attribute set R is an in- tent reduct of concept c = (A, B), if R satisfies:  (1) R? = B? = A, and (2) ?R1 ? R: R?1 ? R? = B? = A.

In the above definition, the condition 1) is thought of as  the invariability of support set, which means that the con- cept and all its intent reducts have the same support set. The condition 2) is called the minimality of intent reducts, which means that the removal of any attribute from an intent reduct will cause the expansion of the corresponding support set.

The family of all the intent reducts of concept c is denoted as IR(c).

Property 1. If c = (A, B) is a concept and P ? ? B?, then it holds that P ? B.

Proof. From P ? ? B? = A, it follows that P ?? ? B?? = A? = B. Therefore, P ? P ?? ? B.

Property 2. For any concept c = (A, B), provided that P ? = B?, there must be some intent reduct R of c such that R ? P .

Proof. omitted.(If there is an attribute m ? P such that (P ? {m})? = P ? = B?, then this attribute can be removed from P ; repeat this process until we can not find such an attribute; If P does not contain such an attribute, P will become an intent reduct.)  Theorem 2. For any concept c = (A, B) and attribute sub- set P ? B, if P?(B?Bp) ?= ? holds for any parent concept cp = (Ap, Bp) of c, then P ? = B? = A must hold.

Proof. Because P ? B, it is evident that P ? ? B? = A.

For the pair (P ?, P ??) is complete, it is a concept in concept lattice. From the fact that P ? (B ? Bp) ?= ? holds for any parent concept cp = (Ap, Bp) of c, it follows directly that P ?? Bp. Thus, P ? ?? B? = A (Otherwise, there must be some parent concept cp = (Ap, Bp) of c such that P ? Bp).

Therefore, P ? = B? = A.

Theorem 3. For any concept c = (A, B), if P ? = B? = A, then we have P ? (B ? Bp) ?= ? for any parent concept cp = (Ap, Bp) of c.

Proof. Assume that there exists some parent concept cp = (Ap, Bp) that satisfies P ? (B ? Bp) = ?. Following from property 1, we have P ? B, and thus P ? Bp. Therefore, P ? ? B?p = Ap ? A, which contradicts the assumption of P ? = A. So, the assumption is wrong and the theorem gets proved.

According to the theorem 2 and theorem 3, for any given concept (A, B), the necessary and sufficient conditions for an attribute subset P ? B to satisfy P ? = B? is specified as follows.

Theorem 4. For any concept c = (A, B), an attribute subset P ? B satisfies P ? = B? = A if and only if P ? (B ? Bp) ?= ? holds for each parent concept cp = (Ap, Bp) of c.

To go one step further, provided that P ? = B?, P is an intent reduct of c = (A, B) if and only if for any P1 ? P , there does exist some parent concept cp = (Ap, Bp) of c such that P1 ? (B ? Bp) = ?. In addition, it is evident that removing any attribute from an intent reduct will lead to the expanding of the corresponding support set.

As we discussed before, the removal of an attribute from a concept will not necessarily lead to the expansion of the corresponding support set. Next, we shall put forward the notation of intent core. The intent core of an concept c con- sists of all the indispensable attributes in c Once any such attribute was removed, the corresponding support set would be expanded.

Definition 9 (intent core). For any given concept c = (A, B), attribute m ? B is indispensable in c if (B?m)? ? A holds. The set of all the indispensable attributes in c is called the intent core of c, denoted as core(c).

A concept c may have more than one intent reduct, but I must have exactly one intent core. Further, this intent core is included in each intent reduct. The next property describes the relationship between intent reduct and intent core:  Property 3. For any given concept c = (A, B), the follow- ing properties hold:  1) core(c) is included in each intent reduct of c, that is, ?R ? IR(c)(core(c) ? R);  2) core(c) = ? IR(c);  3) core(c) = {m|there exists some parent concept cp = (Ap, Bp) of c such that Bp ? {m} = B}.

Example 4. Consider concept #8 in the example 1, with intent abceg and extent 235. Attribute subset abc satisfies (abg)? = 235 = (abceg)?, but it does not be an intent reduct of this concept. This is because its true subset ag satisfies (ag)? = 235 as well. Note: ag is an intent reduct of concept #8 (you could verify it yourself).

On the other hand, with the help of theorem 4, we can judge whether the true subset abg of the intent reduct of concept #8 satisfies the invariability of the support set.

Concept #8 has three parent concepts, with bce,ac and cg as their intents respectively. Due to the facts that abg?(abceg?bce) = abg?ag = a ?= ?, that abg?(abceg? ac) = bg ?= ?, and that abg?(abceg?cg) = ab ?= ?, we can draw the conclusion that abg satisfies (abg)? = (abceg)?.

From property 3, it can be concluded that the intent core of concept #8 is empty, that is to say, no one attribute in the intent is indispensable. However, the intent core of concept #4 is {c}.

3.2 Minimal Covers of a Family of Sets  The previous section defined what are intent reducts and described some properties of them. This section is devoted to computing intent reducts based on the minimal cover of a given family set.

Definition 10 (minimal cover). For a given family F = {F1, F2, . . . , Fn}, set F is called a minimal cover of F if it satisfies two conditions: 1)?Fi ? F(F ? Fi ?= ?), and 2)?S ? F (?Fi ? F(S ? Fi = ?)).

The family of (all the) minimal covers for F is denoted as MC(F) = {F |F is a minimal cover of F}.

Example 5. Let F be a family of three sets, F = {F1, F2, F3}, where  F1 = {a, b}, F2 = {b, c},F3 = {a, b, e}.

Although the set {b, c} has common elements with all the three sets in F , it is not a minimal cover because its true subset {b} intersects with each Fi(i = 1, 2, 3) as well. The family F has exactly two minimal covers: {b} and {a, c}.

Theorem 5. Attribute subset P ? B is an intent reduct of the concept c = (A, B) if and only if P is a minimal cover of the family  {B ? Bp|(Ap, Bp)is a parent concept of c}.

Proof. It can be easily proved with the help of Definition 8, Theorem 4 and Definition 10.

According to the theorem above, the problem of com- puting all the intent reducts of a given concept has been transformed into the problem of computing all the minimal covers of a specific family. To solve the later problem, the definition of minimized family is introduced as follows.

Definition 11 (minimal set and minimal family). Given a family D, set D ? D is called a minimal set, if there does not exist any other set D1 ? D such that D1 ? D. The family of all the minimal sets is called the minimal family, denoted as Dminimal = {D ? D|?D1 ? D(D1 ?? D)}.

In addition, we could prove the next two theorems, which would serve as the foundation for calculating the family of (approximate) intent reducts, in this paper.

Theorem 6. If the family F consists of exactly one set F1, that is, F = {F1}, then we have  MC(F) = {{f}|f ? F1}.

Proof. It is evident.

Theorem 7. Assume that Q = MC(F) is the family of minimal covers for a given family F . If a set Fnew is newly added into F , and let D = {Q ? {f}|Q ? Q, f ? Fnew}, then we have MC(F ? {Fnew}) = Dminimal.

Proof. (1) Firstly, we prove that each set Q1 ? Dminimal ? D has non-empty intersection with each set in F ?{Fnew}.

Assume that Q1 is not a minimal cover of F ?{Fnew}, that is to say, there exist some Q2 ? Q1 which intersects with all the sets in F?{Fnew}. That Q2 intersects with Fnew means that there exists some element f1 ? Fnew ? Q2. Because Q2 intersects with all the sets in F , there must exist Q3 ? Q2 which is a minimal cover of F (Q3 ? Q = MC(F)).

Therefore, Q3 ? {f1} ? D, while Q1 ? Dminimal and Q3?{f1} ? Q2?{f1} = Q2 ? Q1. That is to say, Q1 is a minimal set of family D, while there exists in D another set Q3?{f1} that is a true subset of Q1, which contradicts with the definition of minimal set (Definition11). As a result, Q1 is a minimal cover of F ? {Fnew}.

(2) Due to the fact that each set Q1 ? MC(F ?{Fnew}) intersects with each set in F ? {Fnew}, there must exist some Q2 ? Q = MC(F) such that Q2 ? Q1, and there also exists some element f1 ? Q1 ? Fnew. Because Q2 ? {f1} intersects with each set in F ? {Fnew} and Q1 is a minimal cover of F ? {Fnew}, it follows that Q2 ? {f1} = Q1. It holds that Q1 ? D = {Q ? {f}|Q ? Q, f ? Fnew}.

While each set in D intersects with each set in F ?{Fnew}, From that Q1 is a minimal cover, we get to know that Q1 must be a minimal set in D, that is to say, Q1 ? Dminimal.

Example 6. In the example 5, MC(F) = {{b}, {a, c}}.

Suppose Fnew = {c, e}, we have MC(F ? Fnew) = {{b, c}, {b, e}, {a, c}, {a, c, e}}minimal  = {{b, c}, {b, e}, {a, c}}  3.3 Algorithms for calculating the family of min- imal covers  To compute the family of minimal covers, the simplest possible way is a brute-force algorithm, which consists of two phases. For a given family F = {F1, F2, . . . , Fn}, to calculate its family of minimal covers, as the first step, we must find out all the subsets satisfying the condition (1) in Definition 10 and then store these subsets into the variable FCOV . After that, for each set F ? FCOV , if there does not exist any other set H ? FCOV such that H ? F , then F is a minimal set in FCOV . The second step is to locate all the minimal sets, and they will constitute the family of all the minimal covers for F .

Function MC(F) //brute-force version  Input: a family of sets, F = {F1, . . . , Fn} Output: all the minimal covers of F begin  FCOV :=?; for each set F ? F1 ? F2 ? ? ? ? ? Fn do  b_ok:=true; for each set Fi ? F do  if F ? Fi = ? then b_ok=false; break;  endif; endfor; if b_ok THEN  FCOV :=FCOV ? {F}; endif;  endfor; return minimal(FCOV );  end.

Function minimal(FCOV ) begin result:=?; for each F ? F do  if ? ?Fi ? F such that Fi ? F then result:=result?{F};  endif; endfor; return result;  end;  Based on theorem 6 and theorem 7, we can work out the incremental algorithm for calculating the family of all the minimal covers, with the following pseudo-code.

Function MC(F) //incremental version Input: a family of sets,F = {F1, . . . , Fn} Output: all the minimal covers of F begin MIN_COV:={?}; for each Fi ? F do  MIN_COV:=MC_INC(MIN_COV,Fi); endfor; return MIN_COV;  end;  Function MC_INC(MIN_COV,Fi) begin COV:=?; for each R ?MIN_COV do  temp:=R ? Fi; if temp ?= ? then  COV:=COV?{R}; else  for each r ? R do     COV:=COV?{R ? {r}}; endfor;  endif; endfor; return minimal(COV);  end;  On the basis of the algorithm for computing the family of minimal covers, it is a simple task to calculate the family of intent reducts of a given concept c, which can be fulfilled by the following several lines of codes.

begin F:=?; for each parent (Ap, Bp) of concept c do  F:=F ? {B ? Bp}; endfor; return MC(F);  end;  3.4 Extracting Attribute Implications Based on Intent Reducts  Definition 12 (true intent reduct). An intent reduct R of the given concept c = (A, B) is called a true intent reduct, if R ? B. If c has one true intent reduct, then all its other intent reducts are true.

Concept (P ?, P ??) is called the host concept of the at- tribute implication ?P ? Q?. If this implication holds in the context (that is, P ? = (P ? Q)?), it can be inferred that (P ?, P ??) = ((P ? Q)?, (P ? Q)??).

All the holding implications could be partitioned accord- ing to their host concepts. Thus, each concept c corresponds to a set of implications, rules(c) = {R ? Intent(c) ? R|R is a true intent reduct of concept c}. Such an implica- tion set is non-redundant, because the premise of any impli- cation in the set is not a subset of the premise of any other implication in the set.

Let rules(K) = ?{rules(c)|c is a concept in context K},  we could also prove that rules(K) is complete, with re- spect to the set of all the implications holding in K. This is because any holding implication can be inferred from this implication set by applying Armstrong Axioms [4].

However, rules(K) is usually redundant. To obtain the complete and non-redundant set of implications, one pos- sible way is to apply the redundant functional dependency elimination algorithms in [4] to rules(K).

4 Approximate Intent Reducts  4.1 what are approximate intent reducts?

Definition 13 (Approximate Intent Reduct). For a given concept c = (A, B) and a real number ?, 0 < ? ? 1, attribute subset R ? B is called a ?-approximate intent reduct of c, if (1) |B  ?| |R?| =  |A| |R?| ? ?, and  (2) ?R1 ? R |B ?|  |R?1| = |A| |R?1| < ?.

The family of all the ?-approximate intent reducts of con- cept c is denoted as IR?(c).

Approximate intent reduct is one kind of generalization to intent reduct, and intent reduct can be thought of as a special case of approximate intent reduct. Put another way, intent reduct corresponds to the ?-approximate intent reduct with ? = 1, IR(c) = IR1(c).

Definition 14 (?-cap). For a given concept c = (A, B) and 0 < ? ? 1, another concept c1 = (A1, B1) is called a ?- cap of c, if it satisfies: (1) c1 is a superconcept of c, that is, A1 ? A; (2) |A||A1| < ?; The set of all the ?-caps of c is denoted as CAP (c, ?).

According to the above definition, it is evident that when ? = 1, c1 is a ?-cap of c if and only if c1 > c.

Theorem 8. For any given concept c = (A, B) and 0 < ? ? 1, attribute subset P ? B satisfies |B?||P ?| ? ? if and only if (B ? B1) ? P ?= ? holds for each c1 = (A1, B1) ? CAP (c, ?).

Proof. From P ? B, it follows that c2 = (P ?, P ??) is a superconcept of c.

1) Firstly, Let us prove that if |A||P ?| ? ? then (B ?B1) ? P ?= ? holds for any c1 = (A1, B1) ? CAP (c, ?).

Assume that there exists some ci = (Ai, Bi) ? CAP (c, ?) satisfying (B ? Bi) ? P = ?. Due to the fact that both P and Bi are subsets of B, we have P ? Bi, and then P ? ? B?i = Ai. According to |A||Ai| < ?, we have |A| |P ?| < ?, which is a contradiction. As a result, the assump- tion is wrong.

2) Next, we proceed to prove that if (B ? B1) ? P ?= ? holds for each c1 = (A1, B1) ? CAP (c, ?), then |A||P ?| ? ?.

For each ?-cap c1 = (A1, B1) of c, c2 is definitely not its superconcept (that is, c ?? c1), because P ? (B ? B1) ?= ?.

It means that concept c2 itself is not a ?-cap of c (otherwise, P ? (B ? P ??) = ?). Thus, |A||P ?| ? ? comes out as a result, according to Definition 14.

By the theorem above, the problem of computing the family of approximate intent reducts can be transformed into the problem of computing the family of minimal covers of a corresponding family.

Theorem 9. For each concept c = (A, B) and a subset P ? B, P is a ?-approximate intent reduct of c if and only if P is a minimal cover of the family {B ? B1|(A1, B1) ? CAP (c, ?)}.

Proof. Omitted.

Thus, the algorithm for calculating all the ?-approximate intent reducts could be easily designed, with the help of the function MC_INC(c) in section 3.

Input: a concept c = (A, B) Output: IR?(c) begin  IR?:=?; for each (Ai, Bi) ? CAP (c, ?) do  Fi := B ? Bi; IR?:=MC_INC(IR?,Fi);  endfor; return IR?;  end;  Next subsection will give out several theorems which could be applied to make improvements on this algorithm.

4.2 Improvements  Theorem 10. For any given family F , F is a minimal cover of F if and only if F is a minimal cover of the minimal family, Fminimal, of F .

Proof. Let D = F ? Fminimal. For any Dj ? D, there must exist some Fi ? Fminimal that satisfies Fi ? Dj .

(1) Firstly, let us prove that if F is a minimal cover of F , then F is also a minimal cover of Fminimal.

Evidently, each set in Fminimal has non-empty intersec- tion with F , for Fminimal ? F . Assume that there ex- ists some Fs ? F such that Fs intersects with every set in Fminimal. It follows directly that for each D ? D, there exist Fi ? Fminimal such that Fi ? D. Since Fs intersects with Fi, Fs also intersects with D. Therefore, Fs intersects with all the sets in F , which contradicts with the fact that F is a minimal cover of F .

(2) Next we could prove that if F is a minimal cover of Fminimal, then F is also a minimal cover of F , which is evident and thus omitted.

With this theorem, it is clear that if some child concept c2 of a ?-cap c1 is also a ?-cap, then c1 could be removed from CAP (c, ?). Such consideration leads to the definition of so called ??-restrictor?.

Definition 15 (?-restrictor). For a given concept c = (A, B) and 0 < ? ? 1, a ?-cap c1 of c is call a ?-restrictor of c, if none of its child concepts is ?-cap of c. The set of all the ?-restrictors of c is denoted as RESTR(c, ?).

When ? = 1, concept c1 is a parent concept of c, if and only if c1 is a ?-restrictor of c. It is evident that RESTR(c, ?) = CAP (c, ?)minimal. Consequently, fol- lowing Theorems 9 and 10, we have the theorem below:  Theorem 11. For each concept c = (A, B) and a subset P ? B, P is a ?-approximate intent reduct of c if and only if P is a minimal cover of the family {B ? B1|(A1, B1) ? RESTR(c, ?)}.

Similar to the definition of indispensable attribute, the ?-approximate indispensable attribute goes here.

Definition 16 (approximate intent core). For a given con- cept c = (A, B) and 0 < ? ? 1, attribute m ? B is ?- approximate indispensable in c, if it satisfies |B  ?| |(B?m)?| < ?.

The set of all the ?-approximate attributes in c is called the ?-approximate intent core, denoted as core?(c).

Property 4. Any ?-approximate indispensable attribute in c must be indispensable in c. Put it another way, core?(c) ? core(c).

Property 5. For any concept c = (A, B),  (1) core?(c) is included in each ?-approximate intent reduct of c;  (2) core?(c) = ? IR?(c);  (3) core?(c) = {m|there exists some ?-restrictor c1 = (A1, B1) of c such that B1 ? {m} = B}.

By using the notion of approximate intent core, we have the following theorem.

Theorem 12. For a given concept c = (A, B), let CNS(c) = {B ? B1|(A1, B1) ? RESTR(c, ?), (B ? B1) ? core(c) = ?}, it holds that IR?(c) = {core(c) ? R|R ? MC(CNS(c))}.

Example 7. Consider the concept lattice in Example 1.

With ? = 0.7, what are the ?-restrictors of the concept #8?

Firstly, the ?-caps should be the superconcepts of #8. There are #1, #2, #3, #4, #5 and #6 satisfying this constraint. Sec- ondly, the ?-caps should have enough objects. Therefore, #4, #5 and #6 get excluded. That is, concept #8 has only three ?-caps (#1, #2 and #3). Finally, due to the fact that #1 is the parent concept of both #2 and #3, #1 is not a ?-restrictor of c. As a result, concept #8 has only two ?- restrictors, concept #2 and concept #3.

Next, what are the ?-approximate intent reducts of con- cept #8? According to Theorem 11, the problem can be transformed to what are the minimal covers of the family     {acg, abeg}. In virtue of the algorithms in section 3.3, we get IR?(#8) = {a, bc, ce, g}.

Finally, we get to know that the approximate intent core of concept #8 consists of two attributes, a and g, by applying Property 5.

4.3 Extracting Association Rules  On the basis of approximate intent reducts, extracting association rules is quite a simple job which can be done as follows.

Concept c = (A, B) is frequent, if |A| ? |G| ? ?. For each frequent concept c = (A, B), let us firstly calculate all its ?-approximate intent reducts, IR?(c). And then, for each R ? IR?(c), an association rule R ? B ? R would be derived.

The correctness of such extracted association rules is easy to prove. Since c is frequent and R ? B, we have |(R ? (B ? R))?| = |B?| = |A| > |G| ? ?. Because R is a ?-approximate intent reduct of c, we have |(R?(B?R))  ?| |R?| =  B? R? ? ?.

In addition, each association rule can be mapped to ex- actly one concept. For each association rule ?P ? Q? hold- ing in the given context, concept ((P ? Q)?, (P ? Q)??) is also called the host concept. Such a mapping is helpful in the proof of the completeness of the method for extracting association rules.

Before we dive into the problem, let us consider the fol- lowing inference rules for association rules.

Property 6. Given support threshold ? and confidence threshold ?, if association rule P ? Q holds, then P ? Q1 must hold for any Q1 ? Q.

Property 7. Given support threshold ? and confidence threshold ?, if association rule P ? Q ? W holds, then P ? W ? Q must hold.

For any association rule S ? T that holds, let c = (A = (S ? T )?, B = A?(S ? T )??) be the host concept. There must exist some ?-approximate intent reduct R of c such that R ? S. Therefore, association rule R ? B ? R is extracted by the method at the beginning of this subsection.

Let W = S ?R. We have B ?R = (B ? S)? (S ?R) = (B ? S) ? W . From R ? B ? R ? R ? (B ? S) ? W , we could infer R ? W ? (B ? S) ? S ? B ? S by Property 7. Due to the fact that T ? B, S ? T could also be inferred from S ? B ? S.

5 Conclusions  This paper presents the definitions of intent reducts and approximate intent reducts, serving as the theoretical foun- dation for extracting attribute implications and association  rules. The properies of them are studied, and algorithms are developed for their computation. We also give out the methods for extracting attribute implications (or association rules). The resulting set of rules are shown to be complete with respect to some inference rules. Futher research work will focus on removing redundancy from the resulting rule sets.

