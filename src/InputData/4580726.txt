

Abstract   The development and the wide spread use of web services allow for convenient electronic data storage and distribution all over the world.  As this web services is a new service-oriented computing paradigm which poses the unique security challenges due to its inherent heterogeneity, multi-domain characteristic and highly dynamic nature. A key challenge in Web services security is to design effective access control schemes. However, most current access control systems base authorization decisions on subject?s identity. In this paper, we suggest web  access control scheme which incorporating  user password and web server log. The major objective of the proposed model is to provide mechanisms to allow control of web user access based on the user access behavior by tracking the web access history. The system controls access to web pages depending on user password, date of last request, page visited (URL) and status action. The active user?s access pattern is matched with user access data discovered from user access history, based on mining web usage data using association rules mining and PrefixSpan algorithms, then analyzed to make the access control decision (web access is permitted or denied).

Keywords:  Access Control,  Web Mining , Web Usage Mining , Web Sevices,  PrefixSpan,

I. INTRODUCTION Access control problems are a key problem for  information processing in a World Wide. Web[2], [3], [9],  In this global environment, people often lose control of information, how it is used and to whom it is disclosed[1], [7], [10] The distribution and sharing of information via the Web require the definition and enforcement of security controls, ensuring that information will be accessible only to authorized entities [5], [7],[8]. One of  used access controls is password access control, which requires the user to enter his/her username and password [2], [9].

Although passwords are a simple and effective method  of web security, their security is limited by the combined problems of picking good passwords, password sniffing, and the ease with which people share them. In addition, password based access control not fully effective and to be used with caution [5], [8].

Even if user?s accessibility has been controlled, there are always people who can misuse other peoples? passwords who will create opportunities to obtain access even if they are not authorized or not familiar with using the web [3], [11]. for example, a Medical research centre provides clinical information systems over the web. Research projects are conducted and the research database is made available over the internet.

These projects? content sensitive data is released only to specific authorized users under specific conditions.

Most projects involve human health data collected from hospitals which must be made available to heath care institutions or related partners for research purposes (e.g. Universities) under specific conditions with restricted use.

The main goal of our paper is to develop a Web access control scheme based on user access behavior, through mining Web usage data by tracking user access history.The ACSWS check the user password, the date of last access, the page visited (URL), and the status field, which is set by the server and indicates the action taken in response to the request (status action is success, error or the request not found, etc.).  The ACSWS access control scheme match web user access transaction entries patterns (password, date of last request, page requested (URL)) with the active user?s access transaction and then the status action to give user the access permission. The mining process goes through preprocessing data, pattern discovery, and pattern analysis [4].The paper begins with a brief description of  the related work. Section two illustrates the ACSWS security policy. Section three presents ACSWS Design Architecture. Section four presents and demonstrates the ACSWS model development and implementation. The conclusion is included in the last section.



II. ACSWS DESIGN ARCHITECTURE In the proposed system the data sources are the  server log data and the login data. The system utilizes these data through different stages as displays in figure 1. The first stage is preprocessing; the main goal of this stage is to create minable objects for knowledge discovery, through data transformation and integration.

The output of this stage is preparing the data. The rule mining algorithms are identified for pattern discovery in stage two. The SQL rational engine and rule  induction (If.. then) are used as an access control enforcement to produce web access patterns. Stage three includes the analysis and identification of the user access patterns. The goal of this stage is to eliminate the irrelative rules and to extract the interesting rules or patterns from the output of the previous stage. The system checks the user access right depending on the web user access data and access query pattern. In the last stage, the access control decision is made and either allows access or denies it.



III. ACSWS SECURITY POLICY system administrator sets the system security policy  and configures the access  permission. The access rights are associated with the objects and the users must ensure that they have sufficient access rights before gaining access to the objects (access the Web).

The new user provides his/her login data or registration data.The system administrator must make sure that the  user use  his/her access right and browseing the Web page or Web pages at lest once.



IV. MINING PROCESS IN ACSWS Figure 2 gives an overview of the mining process in  of ACSWS technique. The mining process based on tracking user access behavior goes through several phases, preprocessing, pattern discovery, pattern analysis, and make access decision.

Figure 2: The Control Flow of Mining Process in SWAC  Figure 1: ACSWS Design Architecture  The  algorithms  Identification  (Association  l i i  (Access allows or denies)    Pattern Discovery  Pattern Analysis  Data Source  Determine the access control  decision  Getting the data ready  The user access  patterns analysis  and  Preprocessing  Data trans -formation and integration  Make Decision    Relevant Data  Database Query    Database User access Patterns  Pattern analysis  Preprocessing  Pattern Discovery  Make decision    User access behavior  Result  User         A. Preprocessing Tasks The web user access transactions entries contains  information about user navigation history on the web, which is recorded in server log file. Preprocessed  the server log data   to identify the web users? access transaction. Four server log entries are selected, are as follows: (1)User Identification: User password. (2) Date (Date of last request): the time duration from when the user accessed last, e.g. today, yesterday, the day before yesterday, etc.

(3) Page visited: URL of the page visited. the Web server log contains a complete history of file access by clients. Due to local caches not all page requests made to a server are recorded in the server log file. Since the  browser finds in its cache a copy of a document being requested by the user, the request is not made to the server and the stored copy of the document is displayed.  Therefore, although the page is viewed by the user, the request is not recorded in the server log file, since it can be found in the browser's cache. If the user disables the browser's cache, then the user's requests can be recorded (4) Status action: The status field is set by the web server and indicates the action taken in response to a request.  For example (Codes from 200 through 299 indicate success, 300 through 399 indicate some form of redirection, 400 through 499 indicate an error serving the particular request and 500 through 599 indicate a problem in the web server)[3].

TABLE I.  SET OF USERS ACCESS TRANSACTIONS ENTRIES (SAMPLE)       1) Definition 1 [Preprocessing Tasks]  1. Let L= {l1, l2 ??., lm} be the set identified web access transactions entry, where l ? L is define as a tuple, li = {passwordi , datei .urli, statui}, where the transaction entries l ? L , such that for  password i = user password , datei = datei of request .urli=  url of the page visited, and .statusi=status code, for li ? L, where 1< i<m.

2. Let U be a set of attributes to identify the web user access transaction entries, U? L.  Specifying a value for each attribute in a class set U order set, where the class set U order set forms a web access transactions entry data. The transaction identification (password) is the class set identifier. Using the above definition Table (1) shows the set of users access transactions entries sample.

B.  Pattern Discovery In this phase, association rule discovery techniques  are applied to the formatted data of web user access  transactions entries, and the sequential pattern is used to find the maximal sequences among this data.

1)  Association Rules Discovery  In ACSWS the application of association rule mining is to discover the associations and correlations among web user access transaction entries {user identification, date of the request, page visited (URL), and status action}, where the presence of one set of web access entries pattern in the transaction implies the presence of others with 100% confidence, and minimum support ?2. Association rule mining is a two- step process: Step 1: Find all frequent patterns. By definition, each of these patterns will occur at least as frequently as a pre-determined minimum support count.

Step 2: Generate strong association rules from the frequent patterns. By  definition,  these  rules  must satisfy  the  minimum  support ? 2 and  minimum confidence =100%.

page_log Password URL Date Action-code  Mm99123  medicalhome/clinical_data.asp 7/30/2007 8:53:05 AM 200 sudan /userpages/medicalhome/research.asp 7/30/2007 4:20:21 PM 200 mm_125 /userpages/index.asp 7/30/2007 4:39:39 PM 304 samia338 /userpages/index/ ESRG_project_database.asp 7/30/2007 4:40:02 PM 200 Samia_338 medicalhome/clinical_data.asp 7/30/2007 5:21:10 PM 301 samia338 /userpages/medicalhome/research.asp 7/30/2007 6:20:21 PM 200 samia338 /userpages/index.asp 7/30/2007 6:39:39 PM 200      Example1( using association rule mining) :Let X,  Y, Z, M  ? U  where X = user password, Y= Page_requsted ,  Z = Date of request , and  M = Status action .  Using Table 1 (examples of Users Transaction Entries) the confidence means that .  If X = Sudan and Y= /.../Research Subject Review Board. asp and   Z = 7/29/2003  Then Status action = 200, with confidence is = 100%.

2) Sequential Discovery Pattern  In ACSWS, Sequential pattern mining for intra- transaction patterns such that the presence of user access transaction entries patterns followed by another in user access transaction. Prefix-projected Sequential pattern mining (PrefixSpan) approach was used to solve the problem[6]. These approach uses prefix projection to mine the set of frequent user access transaction entries patterns.

? PrefixSpan Algorithm   The algorithms of PrefixSpan are: 1. S = Frequent_sequence (D) // (is a sequence of database D of user access transactions Entry  patterns.  ; Minimum support ? 2.

2. L= length of S;  // 3. D|s = S-projected database, if  S ? <>, otherwise =  the sequence of   Database D.

4. The projected database S|L is created from all  sequence S 5. Scan D|s for once to find intra-sequence b if not then  appended. b to S to form the sequence.

7. For each b frequent sequence, extend prefix b  accordingly //b can Assembled to the    last element of D to form a  sequence; 8. For each frequent item b, append it to S to form S?,  and output S? 9. For each S?, construct S?-projected database D| S?,  recursively.

10. The process ends when no new frequent sequence  can be generated.

11. The complete set of sequential patterns.

PrefixSpan (Prefix-projected Sequential pattern mining) algorithm starts by finding all frequent events in the input data (web user access transaction entries).

The search space is then divided by partitioning the sequential patterns into subsets having distinct frequent events as prefixes. These results in the same number of subsets as there are frequent events, the patterns in each subset starting with corresponding event. The subsets are mined by constructing corresponding projected databases and mined each recursively.

Example 1: Using PrefixSpan  algorthims, and based on data in Table 1, the web access transaction Entries Sequence for  a single user  < 7/30/2003,..

/userpages/index/ ESRG_project_database.asp, 200 > is the suffix (postfix) with the regard to the prefix < samia_338 >, < /userpages/index/ ESRG_project_database.asp, 200>   is the suffix (postfix) with the regard to the prefix <7/30/2003 >, < 200 > is the suffix (postfix) with the regard to the prefix <.. /userpages/index/ ESRG_project_database.asp>, and < > is the suffix (postfix) with the regard to the prefix <200 >

V. PATTERN ANALYSIS The pattern analysis filter out the patterns through  through Structure Query Language (SQL to eliminate the irrelative rules and to extract the interesting rules or patterns from the pattern discovery. The Structure Query Language (SQL) provide the user control over the data mining process and allow the user to extract only relevant and useful patterns  The example below presents a complete representation of the SQL rule // Select Password, date-last-request, pagevisitited, status //  SELECT Password, date-last-request, pagevisitited, status.

If login password= user password, Then If  date-of- last- request = date_of _last- request then If  pagerequested=pagevisitited Then  If status action = successful access Activate the page link ( page access permitted ).

With minimum support=2 and confidence of the rule is 100%.



VI.  MAKE ACCESS DECISION The web user access transaction explicitly is used to  match an active user?s access pattern with the categories discovered from the user access history. The server pre-fetches a page that a user visited, based on access rule and patterns extracted by association rule and sequential patterns and SQL.



VII. CONCLUSION In the paper, we have attempted to develop a web  access control scheme that has the ability to determine user access permission ( either allow or deny) based on an identity plus a set of attributes associated with user     access behavior saved in the server log by tracking his/her access history.

