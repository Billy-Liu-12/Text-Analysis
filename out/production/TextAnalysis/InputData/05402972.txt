Web-based Visualization of Atmospheric Nucleation Processes for Mobile  Embedded Clients

Abstract   With the development of science, remote data  visualization is playing an increasingly important role.

Meanwhile working on the road is becoming the life style of modern society. However, handicapped by the limits of the mobile embedded device and mass data to be visualized, the remote data visualization for mobile clients is still a big challenge. In this paper, we enhance our previously developed web-based tool to support mobile collaborative research of atmospheric nucleation processes. The paper shows how data mining, data compression, rendering acceleration and other techniques are used to overcome the limitations of network transfer, computation capability and cache capacity.

1. Introduction   Nucleation process is a highly pivotal phenomenon in many atmospheric and technological processes.

Understanding how particles or phases nucleate and grow in a multi-component mixture has significant practical influences from climate to micro-emulsions, gas separations, and nano-materials. However, due to lacking effective data processing tools, the process of investigating atmospheric nucleation processes has been slow.

In paper [1], we designed and developed the web- based tool, CT-IANP(Cyber Tool for Investigating Atmospheric Nucleation Processes), to facilitate data exploration. The tool mines the wealth of data generated from a particle-based nucleation simulation to visualize nucleation processes and search for  patterns in the molecular self-organization of the clusters. Figure 1 describes the complete process from data generation to exploration. The web-based tool is deployed on the web server.

Figure 1. The complete process from data generation to exploration   The web clients can be classified into three  categories based on the equipment they use: PC (Personal Computer) Clients, laptop Clients and Mobile clients. The Mobile clients include PDAs (Personal Digital Assistant), mobile phones, MIDs (Mobile Internet Device) and some other embedded networking devices.

The web-based tool has excellent performance for PC clients and laptop Clients, shown as ?Web Client2? and ?Web Client3? in Figure 1. However, when it comes to mobile clients, that is, ?Web Client 1? in Figure 1, the performance still needs to be improved due to their limited computing capability and slow network connection.

In this paper, we aim to improve the mobile user experience of CT-IANP. Our work focuses on the improvement for mobile clients who do not have a powerful graphics processing unit and high speed network connection. Worse still, they are mostly using a lower Clock Speed Central Processing Unit compared to the other two clients. To overcome these limitations, we propose a solution that utilizes data mining, data compression, rendering acceleration and some other techniques.

2. Background  2.1. Remote Visualization   In the past few years, several visualization  algorithms [4], [5], [9] have been proposed to facilitate remote data analysis and promote remote collaborations. Various remote visualization strategies are used for interactive exploration of large data sets: image-based rendering, parallel visualization severs, and sub-sampling-clustering [12], [6], [7], [8].

Recently, many researchers have been investigating remote and distributed data analysis and visualization. Grid Initiative and projects such as the Globus Toolkit [10], [11] provided toolkits and infrastructure to deploy Grid computing systems.

Several visualization applications have been built using the service.  The impact of the Grid on visualization has been investigated by many researchers [2], [3], [13].

2.2. Data Compression   To achieve higher interactivity, many existing  remote visualization systems aim to reduce the amount of data transport by transforming raw data into an intermediate form of compact sizes [14], [17], [20]. In paper[14], Ma and Camp inclined to use lossy compression methods and mainly considered JPEG and two other compression methods, LZO and BZIP. On the contrary, [17] tend to use loss-less compression techniques though the lossy compression has a higher compression rate. They thought the lossy compression can degrade the visual quality of final rendering significantly. Whether to use the lossy compression or lossless compression depends on the specific demand of the application. In this paper, a lossy compression method is adopted according to the properties associated with the data.

2.3. Rendering Accelerating    3D visualization is a time-consuming work with large amount of matrix operations.

During past years, researchers mainly focused on the hardware based acceleration methods. Several techniques for polygon rendering are compared in Pascual?s paper [15]. And Kruger. J. introduced a new GPU-accelerated volume rendering approach [16].

For embedded devices with no special graphic hardware, 3D rendering is a tough work. Lamberti proposed a stream-based solution in his paper [18]. A 3D visualization system for mobile devices is described in Mosmondor?s paper [19].

In our system, some simplifications are applied to raw data for faster rendering on embedded devices.

3. System Overview  Figure 2. Graphical user interface design.

The figure 2 shows the overall user interface design of our tool. The 2D image on the left side shows the energy height information. The color at each pixel implies the strength of the energy, which is controlled by the colormap. On the right, molecule structures for all possible configurations are displayed. The details of the system can be found in [1].

Figure 3. System schema   In this paper we enhance the system with three  improvements as demonstrated in Figure 3. First, the raw data files are divided into small ones to avoid    unnecessary data analyses. The molecule structure similarity is taken into consideration to facilitate the user interaction. Second, the data file is transformed into a visually lossless compression form to reduce the communication cost. Third, some mechanisms are applied to reduce the rendering cost and improve the interactivity. All these improvements will be discussed in detail in following sections.

4. Data Mining   An interesting phenomenon can be seen from our  observation of visualization process. The user doesn?t need all data in the configuration file. One configuration file is about 600M and it is impossible and unnecessary to display all the information on the screen. In fact, the client could be overwhelmed if too much information were given. The network load would be too heavy and the disk would be choked up with data. So it is important to identify the information the user actually needs. The following subsections will describe how we achieve this goal.

4.1. Data File Division  When a user picks on a point on the energy height image, it is rational to assume that the user is only interested in the possible molecule structures on that position. That is, only a small fraction of the data need to be transmitted to the user and displayed on the screen.

Since the data is organized in order of the three- dimensional coordinates, it is not difficult to find the data that is really needed. However, checking the whole file every time when the user asks for data still wastes a lot of time. Dividing the gigantic data file into small ones can solve the problem. Though it will cost a little bit more storage, it is obviously worthy.

The data file can be easily divided according to the coordinates. However, to facilitate the further work, reorganized by similarity, the data file is divided into smaller ones. Each file only presents one molecule structure and all the files corresponding to the same coordinate are grouped in the same file folder.

4.2. Reorganize by Similarity   Though data file division described in Section 4.1 has reduced communication and storage cost, the user will have to deal with more than 40 structures at the same time. A more efficient solution is needed.

Meanwhile, the researchers are interested in the similarity of the structures. It is a difficult and boring work to assort the structures manually. The similarity  can be defined by Euclidean space distance. In another words, when the centroidal distance between two crystal nucleuses is no more than a pre-defined threshold, such as 2 units, in the coordinate system, they are considered similar to each other. It can be defined by the formula below:   n  i k k i k  G w a n ?  =  ? ?= ?? ? ? ? ?  If 1 2 2G G? ? , crystal nucleus 1 is considered similar to crystal nucleus 2.

ka ?  is the position vector of the atom k in the crystal nucleus i; wk is the weight of the atom k, and ni is the amount of the atoms of the crystal nucleus.

Figure 4. The display of the groups     Figure 5. The expand mode   With the similarity definition, the raw data  representing similar structures can be gathered in the same group. The group becomes the smallest file folder. Only the first molecule structure in the group    will be displayed on the screen and the others will be displayed in the expand mode. Figure 4 displays groups for our data. For example, when the user chooses a group, the first molecule structure will be on the webpage. Clicking the button ?Expand? will change the page into Figure 5.

4.3. Achievement and Deficiency  The data that need to be transported and stored is far less than the original one. Taking one configuration file as example, the size of the undivided file is 673.291MB. After two steps of selection, the related data are divided into smaller ones whose average size is 7KB. The number of groups for a random position is 7. In that sense, the data needed is about 49KB, which is more than 10 thousand times smaller than original one. The effect of data reduction is significant.

However, defining similarity with Euclidean space distance has ambiguous sometimes.

Figure 6. An example showing the ambiguity   In Figure 6, the distance between A and B is 1.5 units and so is the distance between B and C. A, B and C are colinear. By definition, A is similar to B, B is similar to C, and A is not similar to C because the distance between them is 3. However according to the transitivity of similarity, A is similar to C. Two results are contradictory. The definition need to be modified.

For example, we may limit use of transitivity in our system.

5. Data Compression  The data of energy height and structure coordinates are floating numbers. Considering the insufficiency of floating-point arithmetic operations for some embedded devices, converting the data into integer ones in a virtually lossless way is a good solution. It will also reduce the storage requirement. The compression algorithm is similar for all kinds of data.

Here we only focus on demonstrating the compression on the structure coordinate data. However, we will still discuss about the influence of data compression on other datasets in Section 5.2.

5.1. Compression algorithm  In this section, the compression algorithm will be demonstrated step by step. The range of converted data  is a symmetrical area around 0. The raw data of the coordinates are float numbers as table 1. The data in Table 1, Table 2 and Table 3 is consistent with the image in the next section.

Table 1. Raw data  Raw data X y z  32.01348 28.05173 32.04031 18.02388 1.11762 48.03477 10.97445 25.02113 8.05043 25.01412 45.98017 2.01899 22.02443 43.01921 18.02546 11.01204 8.01563 36.03153  ?? ?? ??  The data in Table 1 is converted with the following formulas:  '  ' ,  '  x x x  y y y  z z z  = ?  = ?  = ?    where:  25.20613, 24.57040, 23.95484.x y z= = = The results  after data conversion are listed in table 2.

Table 2. Intermediate data  intermediate data x? y? z?  6.80735 3.48133 8.08547 -7.18225 -23.45278 23.95484 -14.23168 0.45073 -15.90441 -0.19201 21.40977 -21.93585 -3.18170 18.44881 -5.92938 -14.19409 -16.55477 12.07669  ?? ?? ??  The intermediate data is distributed in a range around 0. Since the largest absolute value of the data is less than 40, we can make a mapping transformation which turns the intermediate data into integer data between - 20 and 20. Table 3 shows the data after conversion.

Table 3. Converted data converted data  x y z 5 2 6 -5 -18 19  -11 0 -12 0 17 -17 -2 14 -4  -11 -13 9 ?? ?? ??     The range of the table can be adjusted in case two atoms are placed in same position.

Rendering with converted data is much faster than the raw data for as operation on integer numbers are more efficient than floating-point operations.

5.2. Compression ratio and Outcomes  After compression, the size of the data file is cut down from 10,468B to 6,192B. In another word, the compression ratio is about 1.69:1. Though the compression ratio is not notable, the impact of avoiding floating-point calculations is obviously important to embedded system.

It has been our major concern that the image of energy height will have distorted colors and the 3D rendering of molecule structures will also be distorted.

From our experiments, most of time, the difference is unnoticeable and the rendering results are very close to the ones without compression. If you change the image and the structure into a big one, some small differences can be seen. Figure 7 demonstrates two energy height images and Figure 8 shows the 3D rendering results of two molecular structures. The left ones are results without data compression while the right ones are the ones using compressed data.

Figure 7. The comparison of the original image (Left)  and the compressed image(Right)    Figure 8. The comparison of original model(Left)  and the compressed model(Right)   6. Rendering Acceleration    Rendering original data files can be a heavy burden for many embedded devices. The problem was caused not only by the computing capability but also by the size of cache. We solve the problem in following ways.

Most people take a ball as the appearance of an atom without any doubt about that. In fact this opinion has been proved yet. Furthermore, when the device can not support the user interactivity with perfect ball model, face reduction is an efficient compromise. If the model is displayed in a small screen like mobile phone, even an icosahedrons looks like a ball.

An experiment is made on an intelligence mobile phone Blackberry 8700G. With the original rendering method, only 4 pictures per minute can be displayed.

That is when user tries to rotate the model, only discontinuous pictures are displayed. When the icosahedrons are adopted, it displays 20 pictures per minute while the atoms look very similar as shown in Figure 9.

Figure 9. The comparison of using different  precisions: The left picture shows the rendering result using face reduction and the right one shows  rendering results without face reduction.

Different configurations can be chosen in the option panel according to the device configuration.

Although face reduction is more focused on the limitations of the computing capability, it also has effects on other limits of the embedded device. With proposed solution, the rendering of large data files become affordable to most embedded device.

7. Conclusion and Future Work   In this paper, we introduce the improvements made for the mobile users who want to experience the web- based tool, CT-IANP. It demonstrates that visualization can be well applied to mobile devices.

In the future, more researches are needed in rendering algorithms and other related technologies.

Considering the size of the data, more data analysis functionalities supported by data mining technologies are worthy for further exploration.

Furthermore, we expect that this paper will be a trigger for further related researches.

8. Acknowledge   The authors would like to thank Professor Ilja Siepmann from the University of Minnesota, Samuel Keasler, Hyunmi Kim, and Ricky Nellas from the Louisiana State University at Baton Rouge, and the anonymous reviewers for their useful comments and suggestions.

9. References  [1]R. Ding, J. Gao, B. Chen, J.I. Sieprmann, Y. Liu. Web- based visualization of atmospheric nucleation processes using Java3D. Cluster Computing and the Grid, 2009.

CCGRID `09, 9th IEEE/ACM International Symposium on 18-21 May 2009 Page(s):597-602.

[2] I. J. Grimstead, N. J. Avis and D. W. Walker. Automatic distribution of rendering workloads in a grid enabled collaborative visualization environment. In SC '04: Proceedings of the 2004 ACM/IEEE conference on Supercomputing, page 1, Washington, DC, USA, 2004. IEEE Computer Socienty.

[3]P. Heinzlreiter, D. Kranzlmuller, and J. Volkert. Network transportation and optimization for gri-enable techniques.

Neural Parrallel Sci. Comput., 12(3):307-328, 2004.

[4] K. Engel, O.Sommer and T. Ertl. A framework for interactive hardware accelerated remote 3d-visualization. In proceedings of Vissym 2000, 2000.

[5] VRML 97, international specification iso/iec is 14772-1.

1997.

[6]Chun-Fa Chang, Gary Bishop, and Anselmo Lastra. LDI tree: A hierarchical representation for image-based rendering.

In Proceedings of SIGGRAPH 99, page 291-298, Los Angeles, California, August 1999.

[7]Arsi Vaziri and Mark Kremenetsky. Bisualiztion and tracking of parallel CFD simulations. In proceedings of HPC 95. Society of Computer Simulation, 1995.

[8]Hugues Hopper. Progressive meshes. In Computer Graphics SIGGRAPH 96 Proceedings, pages 99-108, 1996.

[9] O. Hendin, N. John, and O. Shochet. Medical volume rendering on the www using vrml and java. In Proceedings of MMVR?97, 1997.

[10]I.T. Foster. Globus toolkit version 4: Software for service-oriented systems. In NPC, pages 2-13, 2005  [11]I.T. Foster, C. Kesselman, and S. Tuecke. The anatomy of the grid-enabling scalable virtual organizations. CoRP, cs.AR/0103025, 2001.

[12] L. Freitag and R. Loy. Comparison of remote visualization strategies for interactive exploreation of large data sets. In Proceedings of IPDPS 2001,2001.

[13]J. Shalf and E. W. Bethel. The grid an future visualization system architectures. IEEE Computer Graphics and Applications, 23(2):6-9, 2003.

[14] K.-L. Ma and D. M. Camp. High performance visualization of time-varying volume data over a wide-area network. In Proc. of Supercomputing, 2000.

[15] A Comparative Study of Acceleration Techniques for Geometric Visualization; Pascual Castell?; Jos? Francisco Ramos; Miguel Chover; Computational Science, ICCS 2005.

[16] Acceleration techniques for GPU-based volume rendering; Kruger. J.; Westermann. R.; Visualization. 2003.

VIS 2003. IEEE; pages 287-292.

[17] J. Ding, J. Huang, M. Beck, S. Liu, T. Moore, and S.

Solteesz. Remote visualization by browsing image based databases with logistical networking. In Proc. of Supercomputing 2003.

[18] A Streaming-Based Solution for Remote Visualization of 3D Graphics on Mobile Devices; Lamberti, F; Sanna, A; pages 247-260.

[19] 3D visualization of data on mobile devices; Mosmondor.M; Komericki. H; Pandzic. I.S;Electrotechnical Conference, 2004. MELECON 2004. Proceedings of the 12th IEEE Mediterranean; pages 645-648.

[20] G. Ji, H.-W. Shen, and J. Gao. Interactive exploration of remote isosurface with point-based non-photorealistic rendering. In Proceedings of IEEE Pacific Visualization 2008, 2008.

[21]J. Gao, R. Ding, Y. Liu, B. Chen, X. Cui J. Siepman.

Web-based Visualization and Analysis of Atmospheric Nucleation Processes. International Journal of u- and e- Service, Science and Technology. Vol. 2, No. 2, June 2009.

