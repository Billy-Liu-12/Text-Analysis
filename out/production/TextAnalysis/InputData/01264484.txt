MOBILE-AGENT-BASED DISTRIBUTED AND INCREMENTAL '  TECHNIQUES FOR ASSOCIATION RULES

Abstract: The ever-growing size of data being stored in today's  information systems, inevitably leads to the distributed database architectures. Moreover, many databases are distributed in nature. It is important to devise efficient methods for distributed data mining. It is well known that distributed database has an intrinsic data skew property. So it is desirable to mine the global rules for the global business decisions and the local rules for the local business decision. In this paper a mobile-agent-based distributed knowledge discovery architecture has been proposed for data mining in the distributed, heterogeneous database systems. Based on this architecture a flexible and efficient mobile-agent-based distributed algorithm for association rules (IDMA) is presented that can mine the global and local large itemsets at the same time. Furthermore, when mining the local large itemsets an incremental algorithm (IAA) is employed, which utilizes a heuristic selective scan technique to reduce the number of database scans required and to keep the size of the candidate itemset sets from increasing exponential. The performance of IDMA is studied. The results show that the algorithm IDMA is valid and has superior performance.

Keywords:  Incremental mining; Mobile Agent KDD; Data mining; Association Rule; Distributed mining;  1 Introduction  The importance of data mining is growing at rapid pace recently. Analysis of past transaction data can provide very valuable information on ' customer behavior and business decisions. Many databases are distributed in nature. For example, the departments of many organizations and companies are scattered across a country or all over the world so the huge number of transaction records are likely to be store at different sites. It's inevitably leads to distributed database architecture. At the same time the transactions in the distributed database may be changed time to time. Consequently, the research of distributed and incremental algorithm, architectures and systems for mining distributed information sources is very important and challenging.

0-7803-7865-2/03/$17.00 02003 IEEE  Of the various data mining problems, mining of association rules is an important one. The problem has been studied substantially with many interested and efficient data mining algorithms reported. Apriori [I] runs a number of iterations and in each iteration scans the database once to obtain the large itemsets of the same size. DHP [2] is the improvement of Apriori in which the hash technique is adopted. FP-tree [3] proposes a novel frequent pattern tree structure and develops an efficient FP-tree based mining method, which only needs to scan the database once and is efficient for small database. All of the algorithms above are not considered the problem of the refresh of the database.

FUP2 [4] is an incremental maintaining technique for association rules when the new transactions are added to the database and the obsolete ones are deleted from it.

FUP2 tends to suffer from the inherent problem of need multiple scans of database.

Algorithm Count distribution (CD) [ 5 ] ,  which is the adaptation of Apriori algorithm, has been proposed for the parallel mining environment. The PDM [6] algorithm tries to parallelism the DHP algorithm. FPM [7] adopts the count distribution approach and has incorporated two powerful candidate pruning techniques, distributed pruning and global pruning. But all of CD, PDM and FPM tend to suffer from the following inherent problems. (1) Only the global large itemsets can be mined. The information of the local large itemsets on each site cannot be provided. So it may not provided support for local business decision. (2) The information in the previous mining cannot be used to reduce the cost of current mining, since they are not incremental algorithm.

Mobile agents [8] are intelligent programs that can migrate on computer networks. The concept of having mobile agents carrying out tasks is creating a new paradigm for network-enabled distributed computing. Mobile agents make it very much easier to design, implement, and maintain distributed systems. Mobile agents can reduce network traffic, provide an effective means of overcoming network latency, and help us to construct more robust and fault-tolerant systems. IBM's Aglets Workbench system [9] provides an applet-like programming model for mobile   mailto:wangyunlan@263.net    agents.

The contribution of this paper is as follows. 1) The  architecture of the mobile-agent-based distributed knowledge discovery system has been proposed for data mining in the distributed, heterogeneous database systems, which is implemented based on Aglet. The architecture consists of a knowledge discovery management system (JSDMS) and some knowledge discovery sub-systems (sub-KDS). KDMS is located in the management system of the distributed database system. The sub-KDS is located in each site of the distributed database. 2) Based on the architecture of the distributed knowledge discovery system a flexible and efficient mobile-agent-based distributed algorithm (IDMA) for association rules is presented, in which the global association rules and all the local association can be mined at the same time. The thinking in IDMA is that one mobile agent is dispatched by the KDMS to each sub-KDS to mining all the local large itemsets.

According to the relations between the local and the global large itemsets, most global large itemsets can be ascertained. If some itemsets cannot be decided they are  global large or not, the counter mobile agents can be dispatched to relative sites to get the support count. So all the global frequent itemsets can be mined.

The remainder of the paper is organized as follows.

The architecture of the distributed knowledge discovery system is discussed in section 2. The mobile-agent-based distributed algorithm is proposed in section 3. The performance study of the distributed algorithm IDMA is reported in section 4. The conclusions are presented in section 5.

2 The Architecture of the Mobile-Agent-Based Distributed Knowledge Discovery System  The architecture of the distributed knowledge discovery system, which is based on mobile agent, is illustrated in fig. 1. The system includes the distributed knowledge discovery management system (KDMS) and the knowledge discovery sub-system (sub-KDS), the structures of KDMS and sub-KDS are as follows:  I I I I  MPM: mining process manage MACC: mobile agent control centre GKB: global knowledge base LKB: local knowledge base DMMA: data mining mobile agent PMA: data pre-processing mobile agent MAE: mobile agent environment CMA: counter mobile agent MAEE: mobile agent execution environment  Figure 1. The architecture of the mobile-agent-based distributed knowledge discovery system  2.1 The Structure of KDMS of this module is as follows: 1) Dispatches the mobile agent to each sub-KDS and mining the local knowledge, integrates the local knowledge to get the global knowledge.

2) Analyzes the data in the data warehouse by the means of  Mining Process Manager: This is the core module of the distributed knowledge discovery system. The function      QLAM.

Data Warehouse: The history data is stored in the data  warehouse. The databases in the different sites of the distributed information system are often heterogeneous.

The data warehouse techniques should be adopted to transfer the data to uniform format so the data can be organized and accessed efficiently.

QLAM: OLAM is the combine of OLAP and data mining. Data warehouse provides the platform for OLAP and data mining. The data in the multi-dimension data warehouse can be analyzed and mined. The operating of slice, scan, drill and rotate can be processed.

Global Knowledge Base: The knowledge in the global knowledge base includes the knowledge mined from the global data warehouse and the knowledge, which is mined from all the sub-KDS by the mobile agents and integrated by the mining process manager.

Mobile Agent Control Center (MACC): MACC is the framework within which the mobile agent activities in the distributed data mining system take place. MACC is responsible for generating/activating/assembling the agents required for the data mining process. The different agent types and their tasks are briefly discussed below.

Data mining mobile agent (DMMA). This agent can be dispatched to sub-KDS to mine the local large itemsets.

2) Data pre-process mobile agent (PDA), which be dispatched to sub-KDS to pre-process the data in the local database and collect the data to the data warehouse.

Counter mobile agent (CMA). The task of this agent is to be dispatched to the sub-KDS and scan the local database to get the support count of some itemsets.

1)  3)  2.2 The Structure of sub-KDS  Local database: The local real time information is stored in the local database, which can be queried by the local supervisor and at the same time can be mined by the mobile agent dispatched by the supervisor.

Local knowledge database: the knowledge discovered by the mobile agent is return to the KDMS, at the same time it is saved in the local knowledge base, which can provide references to the local supervisor.

Mobile agent execution environment (MAEE): The KDMS dispatches the mobile agent to the sub-KDS, so the mobile agent execution environment has to be installed in the sub-KDS. In this paper Aglet is used as the mobile agent platform.

3 The Mobile-Agent-Based Distributed Algorithm for Association Rules  3.1 The Important Property in Distributed Mining for Association Rules  Let D be a partitioned, database located at n sitesS1,S2, ..., S" .  The database partitions at these sites are {D ' ,D  *.. . ,On} . Let D' be the local database at site Si and U:=, D' = D , D' n D J  =I$ for i #  j . We useX,, , Xiup to denote the support count in D and D' respectively. Let ID1 be the number of transactions in  global database D and lDil be the number of transactions  in local database D' .

Definition 1. Xis global large, if Xsup 2 s * ID] .

Definition 2. Xis local large in site Si , if X:up 2 s * ID' I .

Lemma 1. If itemset X is global large, there exists a site Si (1 5 i I n ), such that X and all its subsets are locally large at site S' .

Lemma 2. If the set of the global large itemsets is GL, the set of the local large itemsets at site Si is LL , then GL c a.

i=l  Lemma 3. For an itemset X, i f  the set of sites at which Xis large noted as Xfie-, , the set of sites at which Xis  not large noted as . It is . clear that  Xfie-s X u n f i e - s  = {SI ,...Sn I and X f i e - s  n Xunfie-s Q .

The following results hold 1) The possible minimal support count of X is denoted as Xmin-sup 7 Xmin-sup 2 C ~ i u p  .

s'ex,m.,  2). The possible maximal support count of X is denoted as  Lemma 4. If Xmin-sup 2 s*IDI, then X is global large itemset.

Lemma 5. If Xmax-sup < s * ID1 , then X cannot be global large itemset.

3.2 The Thinking in Distributed Algorithm IDMA and Its Procedure  The thinking in the mobile-agent-based distributed      algorithm for association rules (IDMA) is that the KDMS dispatches the mobile agent DMMA to each site. The mobile agents move to the sub-KDS and execute the mission of data mining. The local large itemsets can be got so the local association rules can be obtained and the local knowledge base can be refreshed. The set of local large itemsets and their support counts led back to the KDMS by the mobile agents. When all the mobile agents come back to KDMS, the possible minimum and maximum support counts of the potential global large itemsets can be got according to lemma 3. According to lemma 4 and lemma 5,  most of the itemsets in the set uLL' can be judged  whether they are global large or not. The itemsets that cannot be judged are added to the set of agenda itemsets.

The counter mobile agent (CMA) is dispatched to the related sites to get the support counts of the itemsets that are in the set of agenda itemsets. When these mobile agents come back to KDMS all the global large itemsets can be got.

n  1=1  Procedure IDMAO:  incremental algorithm IAA.

2)  1) MACC creates DMMA according to the  MACC dispatches the mobile agent to each  The mobile agent distributed and parallel mines the local large itemsets at each sites. LL' is the set of local large itemsets at site S' . The mobile agent comes back to KDMS with the set of local large items and its support count.

4) The set of global candidate itemsets  Sub-KDS.

3)  " G C = U L L ' .

: a c h e  Learning and Cybernetics, Wan, 2-5 November 2003  18) 19) 20) 21) end for 22) fori = 1 ton  23)  24) end for  25) for each X E u A i  26) if Xsup 2s*IDI G L = G L u { X ) 27) End for  else if Xmax-sup 2 s*IDI for i = 1 to n  if x e LL' A' = A' u{x>; '  if A' f I$ , CMA is dispatched to Si to scan D' once and get the support counts of the itemsets in A i  .

n  i=l  3.3 The Incremental Algorithm IAA for the Local Large Itemsets  The algorithm that is employed to derive the local large itemsets is IAA [ 101. The feature of IAA is as follows: Firstly, The selective scan technique is adopted to determine frequent itemsets in batch so as to reduce the number of database scans required and to avoid the size of the candidate set becomes huge too quickly. Secondly, IAA is an incremental algorithm for maintaining the frequent itemsets in the cases of insertion, deletion and modification of the transactions in the database. It takes advantage of the previous mining result to cut down the cost of finding the new rules in a frequently updated database. Lastly, the useful relations between the previous frequent itemsets with respect to the origin database and the new frequent itemsets with respect to the updated database have been studied; they are used to prune the candidate itemsets  for i = 1 to n lln is the number of sites.

A' = I$  efficiently when scanning the added and deleted portions of the database.

4 Performance Study of IDMA  I/ A' is the set of agenda itemsets at  end for.

for each itemset X E GC  Xmax-sup = 0 ; Xmin-sup = 0 ; for i = 1 to n  if x E LL' Xmax-sup = Xmax-sup + X L p  ;  Xmin-sup = Xmin-sup + X:up ;  else x ~ ~ - ~ ~ ~  = x ~ ~ ~ - ~ ~ ~  + s * I D ' I  - end for if x ~ ~ ~ - ~ ~ ~  ~ s * I D I  G L = G L u ( X } ;  To assess the performance of the algorithm IDMA, we performed several experiments on a cluster of computers of 2.0 GHz and 526 MB of memory. The simulation program was coded in C++. The methods used to generate synthetic data are the same as the technique introduced in [7]. The notation of the database is in the form Dx.Ty.Iz.Sr, where x is the number of transactions in each site, y is the mean size of the transactions, z is the average size of the potentially large itemsets, and Y is data skewness. The number of sites is denoted as n. And the minimum support threshold is noted as minsup. For the aim of simplicity, we assume that the number of deleted and added transactions on each site is 10% of the transactions on the site in the previous mining.

1 ;      4.1 The Performance of the Mobile Agent decreases. On the contrary, the execution time of IDMA increases slightly as the data skew-ness increase. However, IDMA is faster than FDM about 0.6 to 2.8 times. The time cost for mobile agent serialized, the time for  the transmission of mobile agent on the network and the time for the mobile agent de-serialized would affect the performance of the data mining system. So it is important to test the time performance of mobile agent. It can be seen from table 1 that the time consumed by mobile agent is in millisecond degree. Compared to the time consumed by the data-mining algorithm, it can be ignored. So it will not depress the performance of the data mining system.

Table 1. The Performance of Mobile Agent  / The time for mobile agent serialized I 12.8ms I 15.0ms The time for mobile agent transmission in the network  3.9ms The time for mobile agent installed by java class loader  4.2 The Relative Performance of IDMA and FPM  The mobile-agent-based distributed knowledge discovery system is a Java based system. The way to accelerate the, data mining processing is through use of native (C/C++) methods and including the data mining algorithm IAA, which was coded in C++, as a dynamic link library through Java's JNI [ 111. We have compared the time performance between IDMA and FPM.

4 J 815 1 1.5 2 2.5 3  Minimum Support Threshold (%) Figure2. The relative performance with respect to different minimum support threshold  The first experiment is conducted to examine the relative performance for the same databases on different minimum support threshold. The result is reported in Fig.2.

It can be seen that IDMA is faster than FDM about 0.8 to 1.9 times. Where the number of sites is 4.

Figure.3 studied the relative performance with respect to varied data skew-ness. Due to the global pruning, as the data .skew-ness increase the response time of FPM  DlOOK.T5.14.S? n=4 minsup=l.O%  I I I I I l I 1 1  I I I I I  I I I I I  Skewness (S) Figure3. The relative performance with respect  to different data skewness  T300Wn.D5.14.S0.8 n=? minsup=l .O% I I I I I I  I 2 3 4 5 6  Number of Sites Figure.4. The execution time with respect to the  number of sites  D300Wn.T5.14.S0.5 n=? minsup=l.O%  Number of Sites Figure.5. Execution time speedup  i      In the speedup experiment we use the database D300k/n.T5.14.S0.5, which has medium database skew-ness, as the base-database to performance the speedup experiments. The number of sites is 1 to 6. The support threshold is 1.0%. The results are shown in Fig.4 and FigureS. It can be seen clearly that IDMA almost achieves the ideal liner speedup.

0 3  T5 14 SO 5 n=5 minsup=l 0%  i nnn -c FPM --c- IDMA  200 400 600 800 1000 Numer of Transactions on Each Site (K)  Figure 6. Scale-up experiment  In the scale-up experiments, the number of processors involved is fixed to 4. The number of transactions on each site is varied from 50K to 1000K. The results are shown in Figure.6. It is shown that the execution time of IDMA and FPM increase linearly as the number of transactions increases. It is also shown that IDMA is faster than FPM about 1.5 times. This shows that IDMA is scalable and can work well with very large databases.

5 Conclusions  In this paper the mobile-agent-based distributed knowledge discovery architecture has been proposed for data mining in the distributed, heterogeneous database systems. Based on the architecture of the distributed knowledge discovery, a flexible and efficient distributed algorithm IDMA for association rules is presented, which can mine all the global large itemsets and all the local large itemsets at the same time. A novel incremental algorithm for the association rules is employed to mine the local large itemsets. The performance of IDMA is studied. The results show that the algorithm IDMA is valid and has superior performance.

