Mining Positive and Negative Fuzzy Sequential Patterns   in Large Transaction Databases

Abstract   Sequential patterns mining is an important research topic in data mining and knowledge discovery.

Traditional algorithms for mining sequential patterns are built on the binary attributes databases, which has two limitations. First, it can not concern quantitative attributes; second, only positive sequential patterns are discovered. Mining fuzzy sequential patterns has been proposed to address the first limitation. In this paper, we put forward a discovery algorithm for mining negative sequential patterns to resolve the second limitation, and a discovery algorithm for mining both positive and negative fuzzy sequential patterns by combining these two approaches.

1. Introduction   Sequential patterns mining is an important research topic in data mining and knowledge discovery, which is firstly proposed by R.Agrawal [1]. A sequential pattern is formed as (A, B), where A and B are disjoint item sets, and its support is no less than a user-specified minimum support. In real applications, sequential pattern (A, B) can be applied to predict, e.g., if A is in a transaction, then B would be in another transaction with high probability.

Since this kind of correlation is positive, we call it positive sequential pattern.

Contrasted to positive sequential patterns, inspired by the idea of negative association rules [3,4], we put forward the concept of negative sequential patterns. The negative sequential pattern can be formed as (A, ?B), which means that if A is in a transaction, then B would not in another transaction with high probability. There are other forms negative sequential patterns likes (?A, B) and (?A, ?B).

In the real applications, not only may have binary attributes, but also may have quantitative attributes [5,6].

T. P. Hong put forward a method of mining fuzzy  sequential patterns from quantitative transactions [7], which integrates the fuzzy-set concepts and the AprioriAll algorithm.

In this paper, we combine these two extensions to propose a novel approach for mining both positive and negative fuzzy sequential patterns.

The rest of the paper is organized as follows. The definitions for positive and negative fuzzy sequential pattern are given in Section 2. In Section 3, we describe the discovery algorithm for mining positive and negative fuzzy sequential patterns. Section 4 presents our primary experimental results. The conclusions are made in the last section.

2. Problem Definition  2.1 Sequential Patterns   Let I = {i1, i2, ? ,im} be a set of literals called items.

Let the database D = { t1, t2, ? ,tn } be a set of transactions, where each transaction is a subset of I. A non-empty subset of I is called itemset. An itemset containing k items is called k-itemste. The support of an itemset X denoted as sup(X) is defined as the number of transactions containing X in D. An itemset is frequent if its support is greater than a user-specified threshold minsup.

A sequence is an ordered list of itemsets such as s = (s1, s2, ? ,su), where each itemset si is an element of the sequence. A sequence is said to be non-empty if it contains at least one element. An item can appear only once in an element, but can occur multiple times in different elements of a sequence. Items in an element are assumed to be sorted in lexicographic order. A sequence with k items, where ?= j jsk || , is called a k-sequence, where | sj | denotes the number of items in itemset sj.

A sequence is frequent if the support of the sequence is no less than the predefined minimum support threshold   DOI 10.1109/FSKD.2008.245     minsup. The maximally large sequences are called as sequential patterns.

2.2 Positive and Negative Sequential Patterns   Corresponding to a positive sequential pattern such as  (A, B), there are three possible negative sequential patterns, (A, ?B), (?A, B) and (?A, ?B). For a sequence (A, ?B) and a certain transaction sequence CS, if A ? CS and ?B ? CS, we say that CS supports (A, ?B). Assume there is a negative sequential pattern such as ({i1}, ?{ i2 , i3}), which means that if i1 is in customer sequence CS, i2 and i3 would not appeared in the transaction sequence CS at same time, but there is a possibility that one of the i2 and i3 is in sequence.

To discover negative sequential pattern, we need to consider all of the possible sequence in transaction databases. If (A,?B) is a negative sequential pattern, it will hold that sup(A, ?B) >= minsup. A higher value for minsup possibly means sup(A, B)<minsup, i.e., (A, B) is infrequent sequence. However, there are too many infrequent sequences in database. If A is a frequent itemset while B is a infrequent itemset with support 1, we will have: sup(A)>=minsup, sup(B)?0, sup(A, ?B) ?sup(A)>=minsup. Therefore, it seems that (A, ?B) is a negative sequential pattern. In fact, this kind of sequences is rather prevalent in real database, for example, a set of the goods rarely bought by customers in supermarket is an infrequent itemset. In practice, since the task of data mining is to find all kinds of valuable correlations, we usually more focus on the correlations between the well- sold goods, which are based on the frequent sequence. In other word, if (A, ?B), (?A, B) and (?A, ?B) are negative sequential patterns, A and B would be frequent sequence. In generally speaking, we only focus on the frequent sequence whether the sequential patterns are positive or negative.

In order to find valuable association rules, Piatetsky- Shapiro had put forward an interestingness measurement of association rules [8]. If sup(X?Y) ? sup(X) ? sup(Y), X?Y is considered as uninteresting rules. In other words, we can say that as the association rule X?Y is interesting only if sup(X?Y) ? sup(X) ? sup(Y) is no less than a specified minimum interesting value, mininterest.

Similarly, we adopt the same method to measure the interesting of negative sequential patterns.

We formally define an interesting negative sequential pattern (A, ?B) as: (1?A ? B = ?; (2) sup(A)>=minsup, sup(B)>=minsup, sup(A??B)>=minsup? (3) sup(A??B) ? sup(A) ? sup(?B)>= mininterest.

Noted it need to satisfy condition sup(B)>=minsup since we are only interested in frequent itemset in sequential patterns.

By the same way, we can define conditions of negative sequential patterns forms as (?A, B) and (?A, ?B).

If (A, ?B) is a negative sequential pattern, A?B will be an interesting infrequent sequence. If i is an interesting infrequent itemset, there exists at least one expression, i=A?B, which makes one of (A, ?B), (?A, B) and (?A, ?B) be interesting negative sequential pattern hold.

2.3 Fuzzy Sequential Patterns  Most of current discovery algorithms for mining sequential patterns focused on binary valued transaction data. Since transaction data in real-world applications usually contains quantitative values, traditional sequential patterns for binary valued transactions should be extended to fuzzy sequential patterns for quantitative valued transactions.

In the context of fuzzy sequential patterns, the support of an itemset can be counted as follows: for every sequence in the customer sequences database, take the fuzzy logic AND of the membership values of the items under consideration, and summate these numbers. Let the customer sequences database be SD and an itemset X = {x1, x2, x 3, ? , xk} ? I. The support of a sequence s?SD to the itemset X can be defined as  ?ki x ssX i1 )(),sup( == ?                                 (1) where  ix ? is the membership function of item xi for all xi  ?X , )(s ix  ?  represents the degree that sequence s contains the item xi.

If we take the fuzzy logic AND as the product, the support of X from the customer sequences database SD is then defined as  ? ?? ? ?  = ==  SDs SDs  k  i x ssXX  i1 )(),sup()sup( ?          (2)  If we take the fuzzy logic AND as the min function, the support of X from the customer sequences database SD is then defined as  )(min),sup()sup( 1 ssXX ix SDs SDs  k i ?? ?  ? ? ===         (3)  The fuzzy sequential patterns mining algorithm proposed in [3] first transforms each quantitative value into a fuzzy set with linguistic terms using membership functions. It then calculates the scalar cardinality of each linguistic term on all the transaction data, and adopts formula (3) to calculate the support of itemsets, carry an iterative search approach to find large itemsets. Each item uses only the linguistic term with the maximum cardinality in later mining processes, thus making the number of fuzzy regions to be processed the same as the number of original items. The algorithm therefore focuses on the most important linguistic terms, which reduces its time complexity. The mining process based on fuzzy     counts is then performed to find fuzzy sequential patterns from these large itemsets.

2.4 Positive and Negative Fuzzy Sequential Patterns   In this section, we present the definitions of both positive and negative fuzzy sequential patterns with the assumption that transaction data are fuzzy.

2.4.1 Positive Fuzzy Sequential Patterns   We take the support of itemset X as the number of transaction sequences in SD that contains X, which is denoted as sup(X). Let A and B be two sequences (ordered lists of itemsets). The sequence (A,B) is positive frequent, if the following conditions hold:  (1) A?B = ?; (2) sup(A?B)=  )()( tt By y  SDt Ax x ??? ?  ? ?  ?? >=minsup;   2.4.2 Negative Fuzzy Sequential Patterns   Let A and B be two sequences (ordered lists of itemsets), if  (A, ?B) is a negative sequential pattern, both A and B must be frequent, which means that their support should be not less than the support threshold, while A?B should be infrequent. Taking this into account, the three types of negative fuzzy association rules can be defined as follows.

(A, ?B) is a negative fuzzy sequential pattern, if the following conditions hold:  (1) A?B = ?; (2) sup(A)>=minsup, sup(B)>=minsup; (3) sup(A??B) =  ))(1()( tt By y  SDt Ax x ??? ?  ? ?  ? ?? >=minsu  p; (4) sup(A??B) ? sup(A) ? sup(?B)>=  mininterest   (?A, B) is a negative fuzzy sequential pattern, if the following conditions hold:  (1) A?B = ?; (2) sup(A)>=minsup, sup(B)>=minsup; (3) sup(?A?B) =  )())(1( tt By y  SDt Ax x ??? ?  ? ?  ? ?? >=minsu  p; (4) sup(?A?B) ? sup(?A) ? sup(B)>=  mininterest  (?A, ?B) is a negative fuzzy sequential pattern, if the following conditions hold:  (1) A?B = ?; (2) sup(A)>=minsup, sup(B)>=minsup; (3) sup(?A??B) =  ))(1())(1( tt By y  SDt Ax x ??? ?  ? ?  ?? ?? >=  minsup; (4) sup (?A??B) ? sup(?A) ? sup(?B)>=  mininterest  3?Discovery Algorithm for Mining Positive and Negative Fuzzy Sequential Patterns   Our mining algorithm first transforms each quantitative value into a fuzzy set with linguistic terms using membership functions. It then calculates the scalar cardinality of each linguistic term on all the transaction data. Each item uses only the linguistic term with the maximum cardinality in later mining processes, thus making the number of fuzzy regions to be processed the same as the number of original items. The algorithm therefore focuses on the most important linguistic terms, which reduces its time complexity. The mining process based on fuzzy counts is then performed to find fuzzy sequential patterns from these large itemsets. Notations used in our algorithm are described as follows: n: the total number of transactions in database; m: the total number of items; c: the total number of customers; ni: the number of transactions from the ith customer,  1? i ?c; Di: the purchase sequence of the ith customer, 1? i ?c; Did: the dth transaction in Di, 1? d ? ni; Ig: the gth item, 1? g ?m; Rgk: the kth region of Ig, 1? k ? | Ig |, where | Ig | is the  number of fuzzy regions for item Ig; g idv : the quantitative value of item Ig in Did;  g idf : the fuzzy set converted from  g idv ;  gk idf : the membership value of  g idv  in region Rgk;  gk if : the membership value of region Rgk in the ith  customer sequence Di; countgk: the scalar cardinality of region Rgk; maxcountg: the maximum count value among countgk  values; maxRg: the fuzzy region of item Ig with maxcountg; Ck: the set of candidate itemsets with k items; Lk: the set of large itemsets with k items; SCk: the set of candidate sequences with k itemsets; SLk: the set of large sequences with k itemsets; SNLk: the set of non-large sequence with k itemsets;     minsup: the predefined minimum support threshold; mininterest: the predefined minimum interestingness  threshold.

3.1 Mining both frequent and infrequent fuzzy sequence of interest   The algorithm of mining both frequent and infrequent fuzzy sequence of interest is described as follows.

Algorithm: MBFIFS(Mining both frequent and infrequent fuzzy sequence of interest) Input: A body of n transaction data, each consists of customer ID, transaction time and the purchased items with their quantities, a set of membership functions and a predefine minimum support threshold minsup; Output: A set of frequent fuzzy sequences FFS, a set of infrequent fuzzy sequences IFS; (1) The transaction database is sorted by customer ID  as the major key and transaction time as the minor key.

(2) Form a customer purchase sequence Di for each customer i by sequentially listing his/her ni itemsets, where ni is the number of transactions from customer i . Denote the dth itemset in Di as Did.

(3) Transform the quantitative value gidv of each itemset Ig appearing in Did into a fuzzy set  g idf represented as  )( 2    gl  gl id  g  g id  g  g id  R f  R f  R f +++ using given  membership functions, where Rgk is the kth fuzzy region of item Ig, gkidf is  g idv ?s fuzzy membership  value in region Rgk, and l is the number of fuzzy regions for Ig.

(4) Find fuzzy membership value gkif of each region Rgk in each customer sequence Di as  gk if = )(  ||  gk id  D d fMAX i= ,where |Di| is the number of  itemsets in Di.

(5) Caculate the scalar cardinality of each attribute  region Dgk as ? == c  i gk  i gk fcount  .

(6) Find maxcountg= )(1 gkl  k countMAX = , where 1? g ?m and l is the number of regions for item Ig. Let maxRg be the region with maxcountg for item Ig.

The maxRg will be used to represent the fuzzy characteristic of item Ig in later mining processes.

(7) Check whether the value maxcountg for a region maxRg, for g=1 to m, is larger than or equal to the predefined minimum support threshold minsupp. If the value of maxcountg is equal to or greater than  minsupp, put maxRg in the large 1-itemsets L1.

That is L1={ maxRg | maxcountg ?minsup, 1? g ?m }.

(8) If L1is null, then exit the algorithm; otherwise, do the next step.

(9) Set k=1, where k is used to represent the number of items kept in the current large itemsets.

(10) Generate the candidate set Ck+1 from Lk in a way similar to that in the apriori algorithm [1].

(11) Do the following substeps for each newly formed (k+1)-itemsets s with items (s1, s2, ? , sk+1) in Ck+1: (a) Caculate the fuzzy value sif for of s in each customer sequence Di as: )(|| 1  s id  D d  s i fMAXf i== ,  and 121 +??= kSid s  id s  id s  id ffff .

(b) Caculate the scalar cardinality of s as  ? == c  i s  i s fcount  .

(c) If counts is larger than or equal to the predefined minimum support threshold minsup, put s in Lk+1.

(12) If Lk+1is null, then do the next step; otherwise, set k=k+1 and repeat Step 10 to Step 12.

(13) Map each larger itemset to a contiguous integer and put it in the large 1-sequence set SL1.

(14) Transform each customer sequence using the integer representation.

(15) Set w=1, where w is used to represent the maximum length of sequences currently kept.

(16) Generate the candidate set SCw+1 from SLw by joining two large w-sequence from SLw if the two sequences are joinable (see definition 1).

(17) Do the following substeps for each newly formed (w+1)-sequence u= (u1, u2, ? , uw+1) in SCw+1(each ui is actually an itemset for the original data): (a) Calculate the fuzzy value uif of u in each transformed customer sequence Di as  )(11 uk  i w k  u i fMINf  + == ,where itemset uk must  appear after itemset wk-1 in Di. If the sequence u occurs more than once, uif  is set by maximum fuzzy value of all the occurrences.

(b) Calculate the scalar cardinality of u  as ? == c  i u  i u fcount  .

(c) If countu is larger than or equal to the predefined minimum support threshold minsup, put u in SLw+1;otherwise put u in SNLw+1.

(d) FFS = FFS ? SLw+1; IFS = IFS ? SNLw+1.

(18) If SLw+1is null, then do next step; otherwise, set w=w+1, and repeat step 16 to 18.

Limited to the paper space, illustrative example is omitted in this paper.

4.2 Construct Positive and Negative Fuzzy Sequential Patterns   Based on the definition of interesting negative sequential patterns in section 2.4.2, we proposed three types of negative fuzzy sequential patterns and their constructing algorithm Definition: Let I be all the set of items in transaction database D, A and B are itemset, where i=A?B, A?B=?, minsup and mininterest are the minimum support threshold and minimum interestingness threshold respectively.

According to the above definitions we set forth the following negative sequential pattern mining algorithm.

Algorithm: CPNFSP(Construct Positive and Negative Fuzzy Sequential Patterns) Input: database D ? minimum support minsup ? minimum interestingness mininterest? Output?Positive sequential patterns set PSP; Negative sequential patterns set NSP? Begin  ?1? Call procedure MBFIFS; ?2? Transform the maximally large q-sequences  in FFS, q?2, into sequences of original items and put them to PSP  ?3? For each itemset i in IFS Do ?4?    For any A?B=i and A ? B = ? Do ?5?      Begin ?6?       If sup(A)>=minsup ? sup(B)>=minsup  ? sup(A??B)>=minsup ?7?       Then If sup(A??B) ? sup(A) ?  sup(?B)>= mininterest ?8?           Then NSP = NSP ? {(A??B)}; ?9?       If sup(A)>=minsup ? sup(B)>=minsup  ? sup(?A?B)>=minsup ?10?       Then If sup(?A?B) ? sup(?A) ?  sup(B)>= mininterest ?11?            Then NSP = NSP ? {(?A?B)}; ?12?       If sup(A)>=minsup ? sup(B)>=minsup  ? sup(?A??B)>=minsup ?13?       Then If sup(?A??B) ? sup(?A) ?  sup(?B)>= mininterest ?14?              Then NSP = NSP ? {(?A??B)}; ?15? End;  End.

5. Experiment   To test the performance of our proposed algorithm we have done some experiments. The computation  environments are Pentium D820, memory of 1G, operating system of Windows XP. The algorithm is implemented with C++. The synthetic experiment data set is generated by Assocgen [1] program of IBM Almaden research center. The meanings of used parameters are showed in Table 1.

Symbol Meaning D Number of customers(=size of database) C Average number of transactions per  Customer T Average number of items per Transaction S Average length of maximal potentially large  Sequences I Average size of Items in maximal potentially  large sequences NS Number of maximal potentially large  Sequences NI Number of maximal potentially large  Itemsets N Number of items  Table 1: Parameters We set parameters C=10, T=5, S=4, I=2.5, NS =500,  NI =2500, N =10000, total number of customers D=100000, and the generated dataset is named as C10T5S4I25. The membership functions used in our experiment are shown as figure 1.

Figure 1: membership functions   Figure 2 shows the algorithm executing time variance  with minimum support decreasing from 1% to 0.2%. It demonstrates that the algorithm increases with the declining of minsup.

Low  0   1          6           11   Middl High  Quanti  Membership function     C10T5S4I25       1 0.8 0.6 0.4 0.2  Mininum Support  R u n  t i m e ( s )  MDIFSP  Figure 2?Execution times   To examine the scalability of algorithm we increased the numbers of customer D from 50,000 to 150000, with minsupp=1%. The results are shown in Figure 3. The executing time is increased almost linearly with the increasing of dataset size. It can be concluded that our algorithm has a good scalable performance.

C10T5S4I15           50 75 100 125 150  Number of Customers  R un  t im  e( s)  MDIFSP   Figure 3?Scale-up: Number of customers   6?Conclusions   In this paper, we addressed two limitations of traditional sequential patterns mining:crisp itemsets and  only direct sequential patterns. The fuzzy extension of crisp itemsets results in approaches of mining fuzzy sequential patterns, while indirect sequential patterns can be discovered as direct sequential patterns are mined. We put forward an algorithm for mining both direct and indirect fuzzy sequential patterns by combining these two extensions. The primary experiments demonstrated that the algorithm is efficient and scalable.

Acknowledgement We would like to thank T. P. Hong for his kindly email some reference literatures to us and excellent comments on our research works.

