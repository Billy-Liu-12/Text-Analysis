Discovery of High-Dimensional Inclusion Dependencies?

Abstract  Determining relationships such as functional or inclu- sion dependencies within and across databases is impor- tant for many applications in information integration. When such information is not available as explicit meta data, it is possible to discover potential dependencies from the source database extents. However, the complexity of such discov- ery problems is typically exponential in the number of at- tributes.

We have developed an algorithm for the discovery of in- clusion dependencies across high-dimensional relations in the order of 100 attributes. This algorithm is the first to ef- ficiently solve the inclusion-dependency discovery problem.

This is achieved by mapping it into a progressive series of clique-finding problems in k-uniform hypergraphs and solv- ing those. Extensive experimental studies confirm the algo- rithm?s efficiency on a variety of real-world data sets.

1. Introduction  In this work, we are concerned with the discovery of meta-information (dependencies and interrelationships) in databases, and in particular with the discovery of inclusion dependencies (INDs).

Due to the nature of data and its generation, informa- tion is often stored in multiple places, with large amounts of redundancy (for example across different departments of a large enterprise or across multiple companies in the same field of business). When integrating data sources that are likely to be (even partly) redundant, such as in the EVE view integration system [6], a method to discover such re- dundancies is needed.

? This work was performed while Andreas Koeller was a research assis- tant at Worcester Polytechnic Institute. The work was supported in part by the NSF NYI grant #IRI 97?96264, the NSF CISE Instrumentation grant #IRIS 97?29878, and the NSF grant #IIS 9988776.

Also, applications in which data about similar real-world objects is collected independently will benefit greatly from redundancy discovery. For example, medical or pharma- cological databases could be compared for similarities or overlaps, which could provide important information rele- vant for the discovery of treatments for certain diseases.

In general, the discovery of INDs will be beneficial in any effort to integrate or compare unknown databases. A manual extraction of INDs by domain experts is usually not feasible due to the large number of information sources in the world, the potentially high number of attributes in real-world relations, and a widespread lack of reliable meta- information about legacy databases. Furthermore, the gen- eral IND discovery problem has been shown to be NP-hard as a function of the number of attributes in the relations to be compared [4].

To the best of our knowledge, the algorithm we are pre- senting is the first that solves the IND-finding problem for large numbers of attributes. We are aware of only one other solution of the IND discovery problem, using a levelwise enumeration algorithm [3]. It shows good performance for relations with few attributes but does not scale well to num- bers of attributes (and in particular maximal IND sizes) be- yond 10.

The IND discovery problem is loosely related to the problem of association rule mining (ARM, [1]). However, with the exception of [7], ARM algorithms are levelwise al- gorithms in the sense that a ?frequent itemset? of length k is only discovered after all itemsets of lengths 1 . . . (k ? 1) have in some sense been evaluated. Typically, ARM algo- rithms become feasible by using additional properties of as- sociation rules (most notably the concept of support), which are not available to us. For this reason, an adaptation of such algorithms to IND discovery would show significantly higher complexity than algorithm FIND2.

In the remainder of this paper, we sketch the main idea of the FIND2 process while a more extensive description including mathematical background and algorithmic details is given in [5].

2. Background  Inclusion dependencies are defined as below.

Definition 1 (IND) Let R[a1, a2, . . . , an] and S[b1, b2, . . . , bm] be (projections on) two relations.

Let X be a sequence of k distinct attribute names from R and Y a sequence of k distinct attribute names from S, with 1 ? k ? min(n,m). Then an inclu- sion dependency (IND) ? is an assertion of the form ? = R[X ] ? S[Y ]. k is called the arity of ?. An IND ? = (R[a1, . . . , ak] ? S[b1, . . . , bk]) is valid between two relations R and S if the sets of tuples in R and S satisfy the assertion given by ?.

One very important observation on INDs is that a k-ary IND with k > 1 naturally implies a set of m-ary INDs, with 1 ? m ? k. That is, for a given valid IND ? = R[A] ? S[B] 1, the IND ?? = R[A?] ? S[B?] will be valid for any subset A? ? A and its corresponding subset B? ? B. Such a set of m-ary INDs implied by a k-ary IND has a cardinal- ity of  ( k m  ) and is denoted by ?km. Note that the validity of  all implied k-ary INDs of a given IND ? is a necessary but not a sufficient condition for the validity of ?. For example, (R[A1] ? S[B1]) ? (R[A2] ? S[B2]) ? (R[A3] ? S[B3]) does not imply R[A1, A2, A3] ? S[B1, B2, B3].

3. Mapping the IND Discovery Problem to a Graph Problem  The worst-case complexity of the problem is determined by the number of possible distinct INDs between two re- lations, which is exponential in the number of attributes in those relations [5, 4]. In our work, we instead make use of the fact that it is possible to find a minimal cover of valid INDs (i.e., a set of INDs from which all valid INDs can be derived by implication) without even enumerating all valid INDs, reducing the complexity significantly.

We propose a mapping of our problem into a more tractable graph problem. We use k-uniform hypergraphs which are graphs in which each edge is incident to exactly k nodes. Thus, standard undirected graphs can be consid- ered ?2-uniform hypergraphs?. Furthermore, we extend the concept of clique (maximal connected subgraph) to hyper- graphs.

Definition 2 (hyperclique) Let G = (V,E) be a k- hypergraph. A hyperclique is a set C ? V such that for each k-subset S of distinct nodes from C, the edge corre- sponding to S exists in E. The cardinality of a hyperclique C, denoted by |C|, is the number of nodes in C. As a special case, a single node with no adjacent edges is a hyperclique of cardinality 1.

1The notation A means a set of attributes.

In analogy to above, a clique is a hyperclique in a 2- hypergraph. The mapping from our problem to a graph problem is achieved as follows:  We first map the set of valid INDs to a set of hypergraphs Gm (2 ? m < k), by making all k-ary valid INDs hyper- edges in a k-uniform hypergraph. The nodes of all hyper- graphs (for any k) are formed by the unary INDs. For ex- ample, the first hypergraph for k = 2 has as its nodes all valid unary INDs, and as its edges all valid binary INDs.

We then show that, for m = 2 . . . k ? 1, any set ?km of INDs implied by a valid ?k maps to a hyperclique in the cor- responding hypergraph Gm. In other words, the only candi- dates for valid high-arity INDs are those that correspond to cliques in k-uniform hypergraphs for small k. Those graphs can be constructed after a relatively small number of IND validity checks on INDs of very small arity.

3.1. The Clique-Finding Problem  The Clique-Finding Problem (also called the Maxi- mum Clique Problem) is a well known NP-complete graph problem. Efficient algorithms for reasonably sized graphs (i.e., 2-hypergraphs, with up to about 100 nodes) are given in the literature, e.g., [2]. With our definition of hyper- cliques (Def. 2), the Clique-Finding Problem extends nat- urally to k-hypergraphs.

The NP-complexity of the clique-problem is mainly due to the exponential number of possible cliques in a graph, although there are polynomial-time algorithms for some cases. We have developed and implemented an algorithm called HYPERCLIQUE that finds cliques in k-uniform hy- pergraphs and, while NP-complete, shows satisfactory per- formance for relatively sparse graphs with few cliques. Due to space limitations, we refer to [5] for details.

4. Algorithm FIND2  We now briefly sketch out the algorithm FIND2 (Fig. 1) which applies clique- and hyperclique-finding techniques to find inclusion dependencies (INDs). Full details and deriva- tions can be found in [5]. FIND2 takes as input two relations R and S, with kR and kS attributes, respectively and re- turns a generating set of INDs between attributes from R and S. The algorithm proceeds by first exhaustively val- idating unary and binary INDs, thus forming the first (2- uniform) hypergraph (Lines 01-02). A clique-finding al- gorithm then determines all higher-arity INDs candidates (Line 06). Since the clique property is necessary but not sufficient for the validity of a higher-arity IND, each IND candidate thus discovered must also be checked for valid- ity (Line 09). Each IND that tests invalid (but is a clique in the 2-hypergraph) is broken down into its implied 3-ary INDs, which then form the edges of a 3-hypergraph (Line        11). Edges corresponding to invalid INDs are removed from the 3-hypergraph (Line 05). Then, our algorithm HY- PERCLIQUE finds new IND candidates, in the manner de- scribed above (Line 06), with invalid INDs broken down into 4-ary subsets, and so forth for increasing k. The pro- cess is repeated until no new cliques are found. At each phase, some small INDs might be missed and are discov- ered in line 13 (see [5]). In all of our experiments using real data sets, the algorithm terminated for k ? 6.

01 : Set V ? genValidUnaryINDs(R,S) 02 : Set E2 ? genValidBinaryINDs(R,S, V ) //initialize result set with unconnected nodes //(i.e., cliques of size 1)  03 : Set res ? {v ? V |degree(v) = 0} 04 : for m ? 2 . . . kS ? 1 05 : Graph Gm ? (V, validINDs(Em)) 06 : Set I ? genCliquesAndCheckAsINDs(Gm) 07 : Set Ctmp ? ? //collect invalid cliques into Ctmp  08 : forall (c ? I) 09 : if (c is valid ? |c| ? m) res ? res ? c 10 : if (c is invalid ? |c| ? (m + 1))  Ctmp ? Ctmp ? c //generate edges for the next hypergraph Gm+1  11 : Em+1 ? genKAryINDsFromCliques (m + 1, Ctmp)  12 : if (Em+1 = ?) return res 13 : res ? res ? genSubINDs(m,Em+1, res) 14 : return res  Figure 1. Algorithm FIND2.

A complete explanation of the algorithm?s functions, in- cluding a correctness and complexity discussion, can be found in [5].

5. Discussion  We implemented algorithm FIND2 in Java over Oracle 8i relational databases (using JDBC). We ran a large suite of experiments, comparing our algorithm to well-known lev- elwise strategies (?Apriori? class of algorithms), as well as testing the algorithm?s performance on multiple data sets obtained from the UC Irvine KDD Archive.

We found that algorithm FIND2 finds large INDs (50- 100 attributes in relations of 5,000-100,000 tuples) in rea- sonable time (minutes to a few hours). As one example, the discovery of a 30-ary IND in a training set (two relations of 41 attributes each, with 4500 and 5000 tuples, respec-  tively) took about 350 seconds. Note that the implementa- tion used standard SQL queries to determine IND validity and significant speedups are possible with more careful im- plementation. Also, the algorithm scales linearly in the size of base relations, even in the simple SQL-based implemen- tation used. The full set of experiments can be found in [5].

6. Conclusions  In this paper, we have proposed an algorithm called FIND2 for the problem of discovering inclusion dependen- cies over high-dimensional databases. With our solution, it is possible to automatically compare two databases with known schema, but unknown interrelationships, and iden- tify inclusion dependencies between their attributes. As our algorithm discovers database interrelationships, it is useful for a variety of purposes, such as the identification of database duplicates or the comparison of large multi- dimensional databases. The discovery of inclusion depen- dencies is a hard problem, with inherent NP-complexity [4].

By mapping the problem to a set of graph problems, we achieve a significant improvement in performance over the na??ve algorithm. Due to space limitations, we can only give a very brief overview over the work. A more detailed treat- ment can be found in [5].

