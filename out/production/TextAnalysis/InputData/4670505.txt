NEtwork Digest analysis by means of association rules

Abstract- The continuous growth in connection speed al- lows huge amounts of data to be transferred through a net- work. An important issue in this context is network traf- fic analysis to profile communications and detect security threats. Association rule extraction is a widely used ex- ploratory technique which has been exploited in different contexts (e.g., network traffic characterization). However, to discover (potentially relevant) knowledge a very low sup- port threshold needs to be enforced hence generating a large number of unmanageable rules. To address this issue in net- work traffic analysis, an efficient technique to reduce traffic volume is needed.

This paper presents a NEtwork Digest framework, which performs network traffic analysis by means of data mining techniques to characterize traffic data and detect anomalies.

NED exploits continuous queries to efficiently perform real- time aggregation of captured network data and supports fil- tering operations to further reduce traffic volume focusing on relevant data. Furthermore, NED provides an efficient algorithm to perform refinement analysis by means of asso- ciation rules to discover traffic features. Extracted rules al- low traffic data characterization in terms of correlation and recurrence of feature patterns. Preliminary experimental results performed on different network dumps showed the efficiency and effectiveness of the NED framework to char- acterize traffic data.

Index Terms- Association rules, Continuous queries, Net- work traffic analysis, Stream analysis

I. INTRODUCTION  Due to the continuous growth in network speed, ter- abytes of data may be transferred through a network every day. Thus, two major issues hamper network data capture and analysis: (i) A huge amount of data can be collected in a very short time (e.g., an Ethernet frame at 10Gbps is received in less than 70ns). (ii) It is hard to identify cor- relations and detect anomalies in real-time on such large network traffic traces. New efficient techniques able to deal with huge network traffic data need to be devised.

A significant effort has been devoted to the application of data mining techniques to network traffic analysis [6]. The application domains include studying correlations among data (e.g., association rule extraction for network traffic characterization [4], [11] or for router misconfiguration de- tection [14]), extracting information for prediction (e.g., multilevel traffic classification [13] , Naive Bayes classifica- tion [16]), grouping network data with similar properties (e.g., clustering algorithms for intrusion detection [18], or for classification [7], [9], [21], [15]). While classification al- gorithms require previous knowledge of the application do- main (e.g., a labeled traffic trace), association rule extrac- tion does not. Hence, the latter is a widely used exploratory  D. Apiletti, E. Baralis, T. Cerquitelli, v. D'Elia are with the Dipartimento di Automatica e Informatica, Politecnico di Torino, Corso Duca degli Abruzzi 24, 10129 Torino, Italy {daniele.apiletti, elena.baralis, tania.cerquitelli, vincenzo.delia}@polito.it  technique to highlight hidden knowledge in network flows.

The extraction process is driven by enforcing a minimum frequency (Le., support) constraint on the mined correla- tions. However to discover (potentially relevant) knowledge a very low support constraint has to be enforced hence gen- erating a huge number of unmanageable rules [4]. To ad- dress this issue, a network digest representation for traffic data is needed. Continuous queries are an efficient tech- nique to perform real-time aggregation and filtering, thus they can be exploited to effectively reduce traffic volume.

A new approach jointly taking advantage of both continu- ous queries and association rules could efficiently perform network traffic analysis.

This leads to the proposed framework, called NED, which performs network traffic analysis by means of data mining techniques to characterize traffic data and detect anomalies. NED performs (i) On-line stream analysis to ag- gregate and filter network traffic, and (ii) refinement anal- ysis to discover relationships among captured data. NED allows on-line stream analysis concurrently with data cap- ture by means of user-defined continuous queries. This step reduces the amount of network data, thus obtaining mean- ingful network digests for pattern discovery. Furthermore, NED provides a refinement analysis to discover traffic fea- tures from network digests by means of association rule ex- traction. NED's final output is a set of association rules [12] which are able to characterize network traffic and to show correlation and recurrence of patterns among data. Prelim- inary experimental results performed on different network dumps showed the efficiency and effectiveness of the NED framework in characterizing traffic data and highlighting meaningful features.

The paper is organized as follows. Section II presents an overview of the NED framework. While Section III de- scribes the network traffic stream analysis performed by means of continuous queries, Section IV presents the re- finement analysis phase. In Section V experiments to val- idate the proposed framework are reported. Section VI draws conclusions and presents future developments of the proposed approach.



II. OVERVIEW  NED (NEtwork Digest) is a framework to efficiently per- form network traffic analysis. NED addresses two main issues: (i) Data stream processing to reduce the amount of traffic data and allow a more effective use, both in time and space, of data analysis techniques, (ii) Hidden knowl- edge extraction from traffic data to characterize network traffic, detect anomalies, and identify recurrent patterns.

Data stream processing is performed concurrently with    data capture by means of continuous queries, whereas hid- den knowledge is extracted from the stored continuous query results in a refinement analysis step, which currently implements an efficient association rule mining algorithm.

Other data mining techniques [12] may be easily integrated in this step.

Continuous queries perform aggregation (Le., similar records can be summarized by a proper digest) and jiltering (Le., meaningless data for the current analysis is discarded) of network traffic. Their results can be stored on disk for several refinement analysis sessions. Eventually, meaning- ful knowledge is extracted in the refinement analysis session in the form of association rules, e.g. rules which represent correlations and implications among network traffic data.

Stream analysis:  cont1nuous queries  Fig. 1. NED's architecture  Figure 1 shows NED's main blocks: Data stream pro- cessing and refinement analysis. Captured traffic packets are the input stream of the continuous query block, whose objectives are (i) summarizing the traffic while preserving structural similarities among temporally contiguous pack- ets and (ii) discarding meaningless traffic to reduce traffic volume. The output flows (Le., filtered and aggregated packet digests) can be saved into a permanent data store.

The storage is required only when different refinement anal- ysis sessions need to be performed. The refinement analy- sis is a two step process: (i) An optional data stream view block selects a suitable user-defined subset of flows to focus the following analysis on. (ii) Association rule extraction is performed either on the data stream view, which contains the selected flows, or on all the flows in the permanent data store. The aim of the refinement analysis is to discover interesting correlations, recurrent patterns and anomalies among traffic data. Association rule analysis is currently implemented, but the framework allows different analysis techniques to be easily integrated.

To describe NED we will use a running example, which  will be validated on real datasets in Section V.



III. DATA STREAM PROCESSING  The data stream processing block of NED reduces the volume of traffic data by grouping similar packets and dis- carding irrelevant ones. Network traffic can be considered as a stream of structured data. Each packet is a record whose attributes are defined by network protocols. In our running example, the available attributes are source and destination IP addresses, source and destination TCP ports, the level 4 protocol (e.g., TCP, UDP) and the size of the packet. Since packets are captured as an unbounded stream, a conventional aggregation process would never ter- minate. To overcome this issue, continuous queries [3] are exploited and CQL (Continuous Query Language [2]) is used. Queries are issued once and then logically run contin- uously over a sliding window of the original stream. Hence, the following parameters need to be defined: (i) Aggrega- tion and filtering rules expressed in a subset of SQL in- structions, (ii) a sliding window, whose length is expressed in seconds, which identifies the current set of data on which rules are applied, (iii) the step Step ~ length, which defines how often the window moves and the output is produced.

In NED a record produced as output by the continuous query is a flow, which summarizes a group of similar and temporally contiguous packets, as shown in the following examples.

Example 1: Figure 2(a) reports a toy packet capture to describe how the sample query works. The length of win- dow length is 6 UOT (Units Of Time) and the output is produced every 2 UOT (Step == 2 UOT). Figure 2(b) shows the output produced by the continuous query and how the window evolves. Some steps are not reported due to lack of space. I  Three types of continuous queries are implemented in NED (see Section III-A, III-B, and III-C for more details).

To improve CQL query readability, aggregation queries and filtering queries are decoupled (see Figure 3). Aggrega- tion is performed concurrently with data capturing, while filtering can be executed both on line and off line. The packet filtering is performed in the stream analysis block and discards meaningless packets from the aggregation, whereas flow filtering is performed in the data stream view block and discards undesired flows for the specific analysis purpose.

A. Query 1  The purpose of Query 1 is to reduce the volume of traffic data while preserving information about TCP flows, their participants, their size and their fragmentation.

Ti:rnesta:rnp o  Source A A B A B B A B C  Size sizeA,O  sizeA,l  sizeB,2  sizeA,3  sizeB,4  sizeB,5  sizeA,6  sizeB,7  sizec,8  B. Query 2  This query targets the extraction of the longest IP traffic flows. Once packets have been aggregated by source ad- dress and destination address, flows whose length is lower than a given threshold are discarded. The threshold is ex- pressed as a percentage of the total traffic of the current window. Both filtering and aggregation considerably re- duce the dataset size.

c. Query 3 This query targets the recognition of unconventional  TCP traffic, which is usually exchanged on ports different from the well-known ones (Le., port number> 1024).

(a) A toy packet capture  Ti:rne Current flows  OutputSource Size 0 A sizeA,o - 1 A ~iE{O,l}sizeA,i -  2 A l:::iE{O,l}sizeA i - B S'lZeB,2  A  L.:iE{O,1,3,6}sizeA i {A,B} B ~iE{2,4,5}sizeB i  A ~iE {1,3,6}sizeA i - B  L.:iE{2,4,5,7}S ize B i  A L.:iE{3,6}SiZ e A i  8 {A,B,C} B ~iE {2,4,5,7}size B,i C S'lZeC,8  (b) Flows in window  Fig. 2. Packet aggregation: length = 6, Step = 2  Select  From Where Group By  Select From Where  Select  From Where Group By  Aggregate source-IP,destination-IP, Sum(size) as flow-size Count(*) as packets Packets [Range 6 seconds] level3 = 'IP' source-IP,destination-IP  Filter source-IP, destination-IP, flow-size Aggregate flow-size > ratio * (Select S~m(flow-size) From Aggregate)  Aggregate source-IP,source-Port,destination-IP, destination-Port, Sum(size) as flow-size Count(*) as packets Packets [Range 6 seconds] level4 = 'TCP' source-IP,source-Port,destination-IP, destination-Port  Since this query targets all TCP flows in network traffic, it does not perform any data filtering, but simply aggre- gates by IP source address, TCP source port, IP destina- tion address, and TCP destination port. It also computes the total size and the number of packets of the flow.

< .,', pkt m,pkt m+l, ... >  Port-Filtering *  Size-Filtering *  Aggregate source-Port > 1024 And destination-Port> 1024  Port-Filtering flow-size > ratio * (Select S~m(flow-size)From Port-Filtering)  Select From Where  Select From Where  Query 3 has two filtering stages. Firstly, only flows which do not have well-known ports as source and destination are kept. Secondly, the longest flows are selected. If these two filtering stages are both performed in the continuous query, the output flows are significantly reduced, but differ- ent analysis types become unfeasible. To avoid this limita- tion, filters may be applied in the data stream view block.



IV. REFINEMENT ANALYSIS  NED discovers interesting correlations and recurrent pat- terns in network traffic data by means of association rule mining, which is performed in the refinement analysis phase.

Let Traffic be a network traffic dataset whose generic record Flow is a set of Feature. Each Feature, also called item, is a couple (attribute, value). An attribute models a characteristic of the flow (e.g, source address, destination port). Such a Traffic dataset is available in the NED data store, Le., the input of the refinement analysis block.

Association rules identify collections of itemsets (Le., sets of Feature) that are statistically related (Le., frequent) in  Aggregate  select source_address, destination_address, sum(size) as length  from Packets range 6s group by source_address.

destination_add ress  , I ' , , , I 15 20  Filter source-IP, source-Port,destination-IP, destination-Port, flow-size Aggregate  Aggregate source-IP,source-Port,destination-IP, destination-Port, Sum(size) as flow-size Count(*) as packets Packets [Range 6 seconds] level4 = 'TCP' source-IP,source-Port ,destination-IP, destination-Port  < ...? f/own, ... > output stream  Fig. 3. Pipeline of continuous queries  From  Select  From Where Group By  Select  Timing Window  I' , , , I ' I:' ii' o 5. 10  input stream  t    Since the complete dataset contains hundreds of flows, the support of the SYN-flooding rule may be too low to be relevant. To overcome this issue, the output of the previous continuous query may be appropriately filtered. Since we are interested in flows whose size is lower than a threshold x expressed in bytes, the following query may be exploited to create a data stream view.

Filter Select source-IP, source-Port ,destination-IP,  destination-Port, flow-size From Aggregate Where flow-size < x  the underlying dataset. An association rule is represented in the form X => Y where X and Yare disjoint conjunc- tions of Feature. Rule quality is usually measured by sup- port and confidence. Support is the percentage of items containing both X and Y. It describes the statistical rel- evance of a rule. Confidence is the conditional probability of finding Y given X. It describes the strength of the im- plication. Association rule mining is a two-step process: (i) Frequent itemset extraction and (ii) association rule generation from frequent itemsets.

Given a support threshold s%, an itemset (i.e., a set of Feature) is said frequent if it appears in at least s% of flows.

Example 2: Consider the toy dataset in Fig. 2(a) for the itemset mining process. With a support threshold greater than 25%, the 2-itemsets  Select  From Where Group By  Aggregate source-IP,source-Port,destination-IP, destination-Port, Sum(size) as flow-size Packets [Range 6 seconds] level4 = 'TCP' source-IP,source-Port,destination-IP, destination-Port  {( dest addr : DAl), (dest p : DPl)}, S{DAl,DPl} = 50%  (1) {( dest addr : DA2), (dest p : DPl)}, S{DA2,DPl} = 50%  The refinement analysis, performed on the results of the described data stream view, extracts a small number of as- sociation rules characterized by high support. These rules highlight more effectively any specific traffic behavior. I

V. EXPERIMENTAL VALIDATION  A set of preliminary experiments have been performed by analyzing NED behavior on real datasets. We assessed (i) the number of extracted association rules and (ii) the interest of mined rules.

TABLE I  NETWORK TRAFFIC DATASETS  are frequent. Hence, the flows directed to DA2 or DA1 at port DP1 are frequent.

Once mined frequent itemset, association rules [1], [12] are used to analyze their correlations. Given the itemsets in (1), the following association rule  {( dest addr : DAI )} =:;> {( dest p : DPl)}  { s% support c% confidence  states that (dest p : DP1) appears in c% of Flow which contains also (dest addr : D Al ). I  ID A B C  NUlllber of Packets  Size (Mbyte]  A. Data stream view  The data stream view block allows to select a subset of the flows obtained as continuous query output. The following example, focusing on the SYN flooding attack, shows its usefulness.

Example 3: The SYN flooding attack occurs when a vic- tim host receives more incomplete connection requests that it can handle. To make this attack more difficult to detect, the source host randomizes the source IP address of the packets used in the attack. An attempt of SYN flood- ing [10] can be recognized by mining rules in the form  { victim-IP, victim-port} => size  { s% support c% confidence  where the left term is the victim fingerprint, while the right part is the size of the flow which is supposed to be very small. The frequency of this pattern is measured by means of support s and confidence c.

Suppose that, to reduce the amount of stored data, the network traffic has been aggregated with respect to address and port of both source and destination. For each flow the size is computed (e.g. packets differing in one of these fea- tures belong to different flows). This step is performed by running the following continuous query on the data stream.

Three real datasets have been obtained by performing different capture stages using the Analyzer traffic tool [17] on a backbone link of our campus network. We will re- fer to each dataset using the ID shown in Table I, where the number of packets and the size of each dataset is also reported.

Experiments target the execution of the queries discussed in Section III. They have been performed by considering three window lengths (60 s, 120 s, and 180 s) and two link speeds (10 Mbps and 100 Mbps). The value of the window  window length fstep Step has been set to 2 . Due to lack 0 space, reported results refer to experiments performed with 100 Mbps link speed and 60 s window length. The ratio parameter of Queries 2 and 3 has been set to 0.1.

To avoid discarding packets, a proper buffer size has to be determined. The buffer must be able to store all possi- ble flows in a time window, whose worst case value is the maximum number of captured packets (i.e., each packet belongs to a different flow). Thus, the buffer size has been set to the following number of flows.

. link speed * window length szze == -----------  minimum size of a packet    Frequent itemset extraction is based on the LCM v.2 algorithm [20] (FIMI'04 best implementation algo- rithm), while association rule generation is performed using Goethal's implementation of the Apriori algorithm [5].

Experiments have been performed on a 2800 Mhz Pen- tium IV PC with 2 Gb main memory running Linux (kernel 2.7.81). All reported execution times are real times, includ- ing both system and user times. They have been obtained using the Linux time command as in [8].

A. Query 1  Query 1 (Section III-A) aggregates packets with respect to source address, source port, destination address and des- tination port. Thus, it significantly reduces the data car- dinality, while preserving general traffic features.

Figure 4(a) reports the number of extracted rules for each dataset considering different support and confidence thresholds. Since the three datasets have similar behav- ior, we focus on dataset A, where we observe that some 1-itemsets are highly frequent, such as (source - address: 130.192.a.b) and (destination-address: 130.192.a.b) 1 To further investigate the meaning of the rules, we consider the following examples.

Example 4: Considering minimum support s 2:: 0.1% and minimum confidence c 2:: 50% leads to the extraction of a large amount of rules in the following form.

{( *-port : x )} JJ-  {( *-address : 130.192.a.b)} Since port x is frequent (regardless of the port number),  these rules state that the address 130.192.a.b (i) generates remarkable traffic both as receiver and as transmitter, (ii) it is likely to be a server which provides many services, be- cause it uses a wide range of ports. We can conclude that 130.192.a.b is probably the public IP address of a router implementing NAT. An inspection of the network topology confirms such result. I  Figure 4(a) reports the number of extracted rules when varying support and confidence thresholds. For Query 1, as reported in Figure 4(a), by enforcing high support and confidence thresholds, the number of extracted patterns decreases. The decreasing trend is particularly evident for high support thresholds, whereas most of the rules have high confidence values for any support threshold. Thus, in this scenario, support is more selective in filtering patterns.

Example 5: By setting the minimum support to 0.3% and the minimum confidence to 0.5%, some interesting pat- terns are extracted. NAT rules are still present, and other rules become more evident. For example  {( source-address: 130.192.c.d)} JJ-  {( source-port : 443 )}  { s == 0.3% c == 99%  1The actual IP addresses have been masked for privacy reasons.

identifies 130.192.c.d as an https server. It was confirmed to be the student webmail server.

{(destination-port: 6101 ) (flow-size: 96)}  JJ- {( source-address: x.y.z.w )}  { s == 0.3% c == 98%  highlights that Synchronet-rtc service is frequently and mostly used by x.y.z.w. I  Analyses performed on rules extracted from datasets B and C confirm the results obtained on dataset A. The traf- fic network features, inferred from the rules, highlight the same NAT routing and servers.

To identify patterns arising from long flows, another step of filtering is required. This issue, addressed by the second query, has been analyzed in the next section.

B. Query 2  The second query (Section III-B) selects the flows which generate an amount of traffic greater than a certain per- centage of the total traffic in a window. The aim is to describe more accurately rules extracted by Query 1.

Figure 4(b) shows the number of association rules ex- tracted from the results of Query 2 applied to the datasets A, B, and C. Rules discovered in this case predominantly have the following form.

{( source address: SA), (source port: SP)}  JJ- {( destination address: D A ),  ( destination port: D P )}  Many extracted rules describe general network features such as NAT routing or main servers. Furthermore, this analysis assesses the pervasiveness of different services.

Mined rules highlight the importance of several protocols like netrjs, systat and QMTP in the examined network.

Some rules are worth further investigation. Many flows have source and destination ports> 1024. This fact may highlight unconventional traffic, such as peer-to-peer com- munications. Another filtering step is necessary to clearly identify involved hosts. This issue has been addressed by Query 3.

c. Query 3 The third query (Section III-C) extracts long flows whose  source and destination ports are beyond 1024.

Figure 4(c) shows the number of association rules ex-  tracted from the result of Query 3 applied to datasets A, B, and C. Because of the additional filtering step, the num- ber of rules is significantly lower than the ones extracted by Query 1 and Query 2. Furthermore, these rules are even more specific than previous ones, as shown by the following example.

Example 6: Consider the following rule.

~ "3  ? g ... 0,; '"~I J 't1... ~ ..;p .., 8c; "'.l [) "5  ~ z  ;l ? .\ ?  (a) Query 1 (b) Query 2  Fig. 4. Number of extracted association rules  (c) Query 3  {( source-address: 130.192.e.f)} JJ,  {( destination-port: 4662)}  { s == 1.98% c == 77%  The address 130.192.e.f is identified as having a remark- able amount of traffic toward remote hosts on port 4662.

Since this is the default port for eDonkey2000 servers [19] of the ED2K peer to peer network, we can conclude that (i) the source host is exchanging data with the ED2K servers, and (ii) its amount of traffic on not well-known ports is mainly related to such peer to peer network. I

VI. CONCLUSIONS AND FUTURE WORK  NED is a framework to efficiently perform network traffic analysis. NED provides techniques to perform data stream analysis and refinement analysis. The former reduces the amount of traffic data while the latter automatically ex- tracts correlation and recurrence of patterns among traffic data.

Association rule extraction algorithms do not easily de- tect patterns nested in rare flows, even if they might be rel- evant. Hence future developments of the NED framework will explore generalized association rules. Generalized as- sociation rules could represent network traffic at a higher level of abstraction and could become a more powerful tool to efficiently extract hidden knowledge not captured by tra- ditional approaches.



VII. ACKNOWLEDGMENT  We are grateful to Fulvio Risso for providing the real traffic datasets captured from the campus network.

