A Collaborative and Semantic-Based Approach for Recommender Systems

AbstractThe constant growth of the Internet has made  recommender systems very useful to guide users coping with  a large amount of data. In this paper, we present a domain  independent collaborative and semantic-based recommender  system which uses distinct and complementary modules. The  approach targets users with various interests and is based on:  (i) a collaborative module using association rules in order  to mine a set of rules for the target user, (ii) a semantic  module using the domain ontology to reason about items, (iii)  a frequency module using the frequency of the item features  in order to discover additional items to be recommended.

Unlike numerical approaches, applying these different modules  separately provides a multi-view basis to explain the recom-  mendations proposed to the user. Our recommendation system  has been tried out on the MovieLens dataset and the results  that have been evaluated by a set of volunteers are promising.



I. INTRODUCTION  With the growth of the Internet, finding relevant informa-  tion is more and more difficult. Thats why helping users  to target their needs seems to be the right solution. In this  context, many personalization tools have been proposed. A  recommender system is one such tool.

A recommender system aims at selecting a set of items  which are relevant for the user without any query. These  systems are most often employed in e-commerce and the  most famous example is Customers Who Bought This Item  Also Bought used on Amazon.com TM1.

Given a set of users U and a set of items I, a recommender  system tends to predict the valuation of a user u ? U for  an item i ? I. More formally, given a utility function e  such that e : U  I ? R where R is a totally ordered set  of numbers, the recommendation process aims at finding the  items i that maximize the utility function e for the user u [1].

But defining such utility function is difficult. More often,  the users history is used to try to evaluate it. This history  contains items that are explicitly or implicitly evaluated by    the user.

Recommender systems have been studied since the mid-  dle of the 90s. That is why, growing number of varying  approaches can be found in the literature: content-based,  1http://www.amazon.com/  collaborative, demographic, knowledge-based and utility-  based techniques [2]. The most popular ones are content-  based [3], [4] and collaborative approaches [5][7]. Recom-  mended items in content-based recommender systems are  similar to those contained in users history while collab-  orative filtering recommends items which are appreciated  by users having similar behavior to the target user. Each  recommender system suffers from its own limitations. For  example, collaborative filtering presents three known limita-  tions: cold-start problem, new item problem and the sparsity  of the user rating matrix [1]. Fortunately, the combination  of recommendation approaches allows one to alleviate some  limitations and gives better results. Such combinations are  the core of hybrid recommender systems [8][10].

In this paper, we deal with a novel hybrid  collabora-  tive and semantic-based  recommendation approach which  combines different recommendation modules. The approach  aims at defining a domain-independent framework which  will adapt automatically to the targeted domain thanks to  its ontology. The framework is based on learning the user  profile and then adapting the recommendation process to  such a profile. This aims at choosing the most adapted  combination of modules for the user. Actually, users vary  with their behavior and interests. Consequently, a one size  fits all recommendation process is no longer accurate. Here,  we focus on users with various interests. The defined combi-  nation for such users consists in first using association rules  to provide a collaborative view for the recommendation. As-  sociation rule mining results in a set of rules leading to a set  of items which are candidates for the recommendation. The  semantics of these candidate items is then used to refine the  recommendation. This is done by using the domain ontology  to detect each feature of an item and then compute the users  interest for these features according to the users behavior.

Finally, the frequency of the features and associations of  features of an item is considered. The detection of such  frequent features helps at discovering other items which    are added to the set of recommendations. The application  of these different modules separately provide a multi-view  basis to explain the recommendations proposed to the user,  something which would not be possible in pure numerical  approaches. For now, the approach is being experimented in  469978-1-4244-8136-1/10/$26.00 c2010 IEEE  the movie domain, using a subset of the MovieLens2 dataset,  the recommender system of GroupLens3.

Our contribution in this paper is:  1) the consideration of users with various interests.

2) the use of semantics to refine the recommendations  obtained by the collaborative filtering;  3) the explanation of the resulting recommendations;  This paper is organized as follows: first, we present some  related works in the domain of recommender systems. Then,  we present in detail our recommendation approach for a  particular category of users, then the experimental results  and their evaluation. Finally, we discuss our work and the  future contributions.



II. RELATED WORK  Many recommender systems use association rules for  computing the recommendations [11][14]. For example, the  authors of [13] discretize the users ratings by computing the  average rating he gives. This helps to binarize the ratings  by distinguishing the liked and the disliked items, but this  can also be a problem in the case of a user who rates  mainly items he likes (or dislikes). The frequent itemsets are  subsequently computed and stored in an acyclic graph used  to extract the personalized association rules for the user. The  approach of [12] is based on the Apriori algorithm [15] and  the CBA-RG algorithm [16]. It aims at finding N association  rules for each user by fixing the minimum confidence and by  adapting the minimum support to obtain the N rules. This  allows one to generate recommendations for people with  uncommon interests. The disadvantage of this technique is  that by adapting the minimum support, there is typically a  loss of quality of the rules and consequently some irrelevant  recommendations.

Unlike [13], we perform the binarization of the history  items according to a threshold we fixed. However, rating  patterns are taken into account to categorize users. Indeed,  users are classified into categories according to their ratings    habits (exclusive ratings of liked (disliked) items, sharp or  balanced ratings), thanks to the user profile learning compo-  nent. This differences are then taken into account during the  recommendation process. We also put a major importance  on the trust of the recommended items, especially when  issued from collaborative filtering. Thats why, we go beyond  the confidence of the association rules. Indeed, we tend to  check the relevance of the recommendations issued from the  association rule mining. Each recommended item is analyzed  semantically thanks to an ontology and to the user behavior.

Ontologies have already been used in recommender sys-  tems [17], [18]. The authors of [17] introduce AVATAR, a  TV recommender system. The proposed framework relies  on an OWL ontology which defines several features of a  2http://www.movielens.org/  3http://www.grouplens.org/  TV program. Semantic associations are computed. This  consists in finding programs appealing to the users interests  by the way of semantic paths based on the user history.

The programs are first sorted out according to the weight  which had been computed and they are finally presented  to the user. Unlike AVATAR, our system doesnt try to  discover semantic paths in order to find recommendations. It  tends to determine the relevance of the candidate items for  the recommendation (issued from the collaborative module).

This is done by analyzing the shared characteristics of  these items with the characteristics of the users history  items. Moreover, the semantic measure is designed to fit any  domain, and consequently any ontology. All that is needed is  to apply the semantic module on the concepts representing  the recommended items and the process will automatically  adapt to the domain.

Recommender systems propose a solution to solve some  particular recommendation problems, such as the lack of  information about the user (a new user or a user who doesnt  give explicit feedback) [14], [19] or the recommendation of  items for users with uncommon interests [12]. Our approach  aims at detecting the relevant problem for a particular user  and combine recommender modules in a way which suits  the user. Several combinations have been used to create  hybrid recommender systems [2], [8], [19][21], and the  author of [2] identified 7 ways to combine recommender    systems. Let us focus on cascade, mixed and switched  techniques. In cascade hybrids, one recommender is used to  produce recommendations, and the other recommendation  techniques are applied to refine and reorder the output of  the last recommender. Mixed hybrids tend to present a  mixed result issued from different recommender systems.

Finally, switched hybrids use one technique instead of  another depending on certain criteria. Our approach belongs  to this three categories. The recommender system is actually  based on many modules. It first switches between the  recommendation techniques according to the user category.

Some selected modules are then used in a cascading way  but not all of them. At the end, a mixed result of the  independent recommendation modules and the cascading  ones is presented to the user.



III. COLLABORATIVE AND SEMANTIC-  BASED RECOMMENDATION APPROACH  In this section, we introduce the recommendation process  executed for a particular category of users. In fact, the  recommender system depicted in Fig. 1 is composed of  many recommendation modules which can be combined in  different ways. We assume that such a combination shouldnt  be the same for all the users. For example, semantics should  be mainly used for a user with sharp interests. On the other  hand, it is relevant to use collaborative filtering for users  with various interests.

Figure 1. The recommendation framework  Our recommendation framework aims at dealing with the  problems encountered during a recommendation process and  at explaining the obtained results. As a matter of fact, users  behave differently which is not convenient when a one  size fits all recommender system is applied. Consequently,  the system begins by learning the user model. This is  done by analyzing explicit (ratings, forms) and implicit  (clickstream, research) user data. As a result, the type of the  user is identified: user with few explicit feedbacks, user who  rates only non appreciated items, user with sharp ratings,  user with sharp interests, and user with various interests.

According to the user type, the best combination of several  recommendation modules is computed. We wont further  discuss this process here. However, we present the recom-    mendation process used for a user with various interests.

A user with various interests needs varying but adapted  recommendations. Actually, such a user can be classified  in many groups at the same time according to his in-  terests. The usage of collaborative filtering is then justi-  fied for serendipity. After that, the personalization of the  results should be performed using the semantics of the  items and the frequency of their characteristics. Thus, a  hybrid recommender system that is both collaborative and  semantic-based is needed. Such a recommendation process  is depicted in Fig. 2. It consists of the combination of  different recommendation modules that lead to the explained  recommendation of a set of items. The first step consists  in performing collaborative filtering using user behaviors  to generate a first set of rules. This is done by means of  association rule mining and is detailed in Sect. III-B. In  the semantic part described in Sect. III-C, the semantics  of the items is used thanks to an ontology described in  OWL4. The users interest for each concept is computed,  which helps to refine the users degree of interest for the  candidate items and classify them according to the users  4http://www.w3.org/2004/OWL/  Figure 2. The recommendation process for a user with various interests  history (features which appear frequently in the user history  are more weighted and this is used for sorting the items).

Finally, in Sect. III-D, we explain the use of a frequency  module which finds relations between item features. What  comes out at the end are items of interest for the user.

The sequencing of these successive modules and the storage  of their results can explain the obtained recommendations.

Indeed, after passing each module, the sequence which led  to the current result is saved. This provides a means for real  semantics for the resulting recommendations.

A. Items and User Model  According to the established user model, the users data are  collected into user profiles5. The user profiles are updated  automatically and explicitly (the user gives the data himself  by rating items and/or entering information in forms) or  implicitly (clickstream data and research are used to dis-  cover other interests of the user), individually (the user is  considered as an entity, not as a member of a user group)  and on a long-term-basis (the user profile is persistent). Their    history is contained in the system: a set of items with their  valuations and this helps to identify their interests. In the  following, we use valuation to refer to an implicit or explicit  rating. The usage of implicit and explicit data is not the same  in the different modules.

B. Collaborative Filtering Module  1) Association Rule Mining: Collaborative filtering is  performed by computing association rules. Association rule  mining is commonly used to perform market based analysis  [15]. It is used to discover patterns linking items purchased  5A user profile is an instantiation of the user model.

together by customers. For example, a possible association  rule may detect that most customers who buy cheese also  buy red wine. Formally, an association rule is an expression  X ? B where X ? I and B ? (I \ X). X and B are  respectively called body and head.

In the context of recommender systems, using association  rule mining aims at discovering items that might interest  the user based on the previous items he has rated and which  have also been rated similarly by a group of users. Typically,  they discover sequential patterns between session profiles.

The problem is that a session profile is relevant in certain  domains only (webmarket for example). On the opposite, in  a movie rental platform, a session profile has no meaning.

This is why, we expend the session profile to a short-term  profile, which allows domain-independence.

There is a great deal of research dealing with association  rule mining in recommender systems [22]. Association rule  mining allows one to compute the rules off-line, which is  significant as it reduces the recommendation process time.

Furthermore, model-based algorithms such as association  rule mining, are more robust when dealing with profile  injection attacks6 than memory-based algorithms (k nearest  neighbors). Indeed, model-based approaches rely on the  whole set of users to generate recommendations while  memory-based ones only use the most similar users who can  have in this case attacker profiles [13]. Finally, association  rule mining deals well with the scalability problem. Actually,  it is fast to implement and execute and it manages well  large sets of data. This is why it represents the core of our  collaborative module.

To be preserved, an association rule must satisfy two  measures.

The support of an itemset A, denoted s(A), defines  the frequency of the itemset A among the set of  transactions T (users history items in the context).

s(A) = |{t?T :A?t}||T |  The con?dence of a rule X ? B, denoted c(X ? B),  is defined by: c(X ? B) = s(X?B)  s(X)  Association rules are mined using the Apriori algorithm  [15]. The liked and disliked items are first distinguished in  the user history using their item ratings. This is done in  order to gain a global view of the liked and disliked items.

For ratings between 1 and 5, values strictly lower than 4 are  considered to represent disliked items. On the other hand,  values equal to or higher than 4 represent items that fit the  users taste. Thus, items can be labeled with two values l  (like) and d (dislike). So, given a set of items and a set of  users who have rated some of these items, we can obtain  the extraction of the rules.

This module doesnt depend on a particular user. The  computation is conducted generally for all users and is  6The insertion of multiple profiles under false identities in order to  promote or denote the recommendation of a particular item.

performed periodically.

2) Personalization of the Association Rules: This part  aims at personalizing the association rules for the user.

The association rules are filtered according to the user by  applying the following rules in the following order:  (a) we only keep the rules which have a body composed  of items contained in the users history (this is a strong  rule which can be relaxed  see Sect. V);  (b) the items already rated by the user are deleted from  the head because there is no sense in recommending  an item he has already consulted;  (c) the items with a dislike label in the head are deleted  because there is no sense in recommending to the user  an item he will not appreciate;  (d) the rules with an empty head are deleted. This happens  as a consequence of (b) and (c).

Example: Let us consider movie recommendation.

Given a user u who rated and liked the movies F1, F3 and    F5 denoted F l1, F l3 and F l5. The following rules are obtained:  r1 : {F l1, F l3} ? {F l5}  r2 : {F l1, F l2} ? {F l4}  r3 : {F l3, F l5} ? {F d6 }  r4 : {F l1, F l5} ? {F l3, F l7}  By the application of (b) and then (d), the rule r1 is not  kept. The rule r2 is also not kept by the application of (a).

r3 is not kept after passing (c) and then (d). r4 is turned into  r?4 : {F l1, F l5} ? {F l7} because of (b). So, we only keep the  rule r?4.

This result is justified because r1 leads to the recommen-  dation of an item already consulted by the user, which is  useless. r2 doesnt fit the user because he hasnt consulted  all of the items contained in the body so we cannot make  any conclusions. The recommendation of r3 is not accurate,  because the item is predicted as disliked. Finally, we can  extract rule r4 which results in a possible recommendation,  the item F7.

C. Semantic-Based Module  This module is based on an ontology. An ontology is an  explicit specification of a shared conceptualization [23]. It  is used to formally describe domains by means of concepts  and properties. Typically, concepts are classes and properties  are relations characterizing the concepts. A property has a  domain and a range. For example, the domain of the property  hasActor(Film,Actor) is Film and its range is Actor.

Instances of concepts and properties are called individuals7.

In the following, we denote C as the set of the concepts of  the the ontology, and Rel as the set of properties (relations).

We consider that an item is characterized by the concepts  hes related to. Moreover, each concept has its proper  influence on each user. This is why, the interest of a user  7The terms instance and individual are used without distinction.

in an item is defined by his interest in the concepts related  to the item. The user preference for a concept over another  is learned by analyzing his profile. We do not explain this  process in this paper.

Once the association rules concerning the user are iden-  tified, we use the ontology to compute the interests of  each item in the head. This helps to refine the obtained  results from the previous module. Indeed, before applying    the semantic module, the recommendation is issued from  collaborative filtering. While in some cases these recom-  mendations can fit the user, it is possible that they dont  suit his other interests. This semantic module performs the  required adjustments and takes into account the user as a  unique entity.

The prediction of the interest of these features of item f  uses the following parameters for the user u:  the users valuations for the items which have at least  one shared feature with f  the number of occurrences of each feature of f among  those rated by u  This is done in two steps: the computation of the instance  interest and then the computation of the concept interest.

1) Instance Interest:  Definition: Given a user u, the interest of u for an  instance i is a prediction based on the past valuations of u  for the items connected to i by a certain relation R ? Rel.

An instance i is connected to 0 to n items in the users  history. Thus, 0 to n valuations related to this instance are  obtained. The interest of i is then estimated according to  the valuations connected with it. This is done by computing  the median of these valuations. Actually, median allows one  to avoid extreme and unusual values which add some noise  when computing a basic average of a set of values.

instanceInterest(u, i) =  median({eval(u, f)|?R ? Rel R(f, i)}) (1)  where eval(u, f) is the valuation of the user u for the item  f .

2) Concept Interest:  Definition: Given a user u, the interest of u according  to a concept c for an item f is based on the instance interests  of the individuals of the concept c connected to f by a  certain relation R ? Rel.

conceptInterestc(u, f) =  (  ?

i?{i? |?R?Rel R(f,i?)?c(i?)}  instanceInterest(u, i)  ratioocc(u, i))  (  ?

i?{i? |?R?Rel R(f,i?)?c(i?)}  ratioocc(u, i))  ?1  (2)  where ratioocc(u, i) is the proportion of occurrence of the  instance i among the instances of the same concept in the  users history.

D. Frequency Module  This module aims at detecting the frequent instances  and the frequent associations of instances. Indeed, such  a frequency depicts an important interest of the user for  the concerned instances. Consequently, it is relevant to  recommend items with these characteristics to the user.

1) Frequent Instances: This part of the module only  considers the profile of the user. It aims at detecting the  most important features of interest for the user.

Regardless of the estimated interest of an instance for  a user, we consider that if the user has in his history a  significant percentage of items which have as a feature that  particular instance, the interest of this instance is significant.

Unlike the previous computation, this computation ignores  the users ratings for the items which have the instance as a  feature.

Example: A user who has watched 80% of the films  interpreted by the actor Tom Hanks should get the recom-  mendation of the other 20% he has not seen even if some  of the films of Tom Hanks in his history are badly rated.

2) Frequent Associations of Instances: Just as was the  case with frequent instances described above, this part of  the module deals not only with the profile of the user, but  also with the set of items. It aims at discovering frequent  associations between the features in the user history. It  detects the features that often occur together in order to  discover new recommendations. To achieve this, frequent  sets of the instances related to the items in the users  history are computed. Then, items with such instances are  recommended to the user.

Example: A possible frequent association is the actor  Johnny Depp and the director Tim Burton. A user who is  interested in these two instances will be recommended the  other films related to them.

E. Recommendation and explanation    As explained in Sect. II, the collaborative and the se-  mantic modules are in cascade. Consequently, the result  is a set of recommendations rec1 which is mixed with  the recommendations of the frequency module rec2 such  that rec1 is presented before rec2 to the user. This order  can be inverted according to user feedback. Concerning  the explanation of the recommendations, this is done by  highlighting the instances which have highly scored the  interest of the user for the items of rec1, and by highlighting  the frequent instances in the items of rec2.

F. Example  In this section, we illustrate the recommendation process  for any user u, in the movie domain. We will simplify to  preserve the clarity of the example.

Table I  EXTRACT OF THE PROFILE OF THE USER u  Film Rating Transformation  Psycho 5 Psychol  Rear Window 4 Rear Windowl  Four Weddings and a Funeral 4 Four Weddings and a Funerall  Monty Pythons Life of Brian 5 Monty Pythons Life of Brianl  Carrie 3 Carried  Stephen Kings The Langoliers 1 Stephen Kings The Langoliersd  Pulp Fiction 4 Pulp Fictionl  Dr. Strangelove 2 Dr. Strangeloved  A Clockwork Orange 1 A Clockwork Oranged  Let us consider u who has rated the movies in Tab. I:  Collaborative Filtering Module: Let us assume that the  association rule mining result is:  r1 : {Psychol, Pulp Fictionl} ? {The Shiningl}  r2 : {Pulp Fictionl,Monty Pythons Life of Brianl}  ? {Monty Python and the Holy Graill}  r3 : {Monty Python and the Holy Graill, Jurassic Parkl}  ? {Indiana Jones and the Last Crusadel}  According to the rules introduced in Sect III-B2, we only  keep the association rules r1 and r2.

Semantic-Based Module: In this step, the interest of  the user for each movie in the head of each rule from the  last module is computed. The concerned movies are The  Shining and Monty Python and the Holy Grail.

For The Shining, we obtain the following interest re-    sults:  conceptInterestActor (u, TheShining) = 1.0  conceptInterestDirector (u, TheShining) = 1.5  conceptInterestWriter (u, TheShining) = 1.7  conceptInterestGenre (u, TheShining) = 3.0  Unlike the prediction of the previous modules, it seems  that The Shining is not a good recommendation for u.

Actually, this film shares its director with Dr. Strangelove  and A Clockwork Orange which are negatively rated by u.

Moreover, it has a writer in common with Carrie and The  Langoliers which are also movies disliked by u. The same  reasoning is made about the concepts Actor and Genre.

Concerning Monty Python and the Holy Grail, the  interests by concept are:  conceptInterestActor (u, HolyGrail) = 5.0  conceptInterestDirector (u, HolyGrail) = 3.0  conceptInterestWriter (u, HolyGrail) = 5.0  conceptInterestGenre (u, HolyGrail) = 4.0  This recommendation is a good one. The film shares its  actors, writers and director with Monty Pythons Life of  Brian which is highly rated by the user. The recommenda-  tion is thus justified.

Figure 3. Extract of the movie ontology  Frequency Module: Let us assume that the user rated  60% of Alfred Hitchcocks films (in Tab. I, Psycho and  Rear Window are some of them). The Birds is then  recommended to u.



IV. EXPERIMENTAL EVALUATION  A. Ontology Description  For the experimentation, we built the ontology manually  (see Fig. 3) according to the information available on  IMDB8. We focused only on a set of data which led to the  concepts Film, Person, Actor, Director, Writer and Genre.

The connections between these concepts are:  Each movie is related to a certain number of persons  who can be actors, directors or writers but it can also be  related to other movies (Example: Free Willy 2: The  Adventure Home and Free Willy 3: The Rescue are  related).

A person and a movie have a genre (Action, Adventure,  Animation, Children, Comedy, Crime, etc.).

B. Experimentation and Evaluation    We use a subset of the dataset provided by MovieLens, the  recommender system of GroupLens Research. The dataset  contains a set of users, the set of items they have evaluated  with a rating between 1 (for the least liked) and 5 (for the  most liked) and the name of the evaluated movies. In our  framework, we deal with a set of 86 movies, 934 users  and 13 053 ratings. The dataset contains 3593 actors, 77  directors, 275 writers and 17 genres.

Using a 65% confidence and a 5% support, association  rule mining resulted in 1472 rules after running the col-  laborative module. We evaluated the results obtained from  the system by eighteen 20-50-year-old volunteers. The eval-  uation consisted exclusively in explicit valuations (ratings  8http://www.imdb.com/   Figure 4. Users evaluation of the system  between 1 and 5) of the recommended items. Each volunteer  rated at the beginning between 11 and 31 films. For each  recommended item, the user rates it as liked or disliked. If  an item is rated as liked, the recommendation is considered  as accurate. Otherwise, the system explains the reason why  this item is recommended. The user can then agree with  this explanation or not. Explanation of recommendation can  be effective in convincing users in their appreciation of  the items [24]. In our approach, the explanation aims at  discovering if the detected patterns in the recommended item  are accurate or not. Let us consider the following explanation  in the recommendation of a film: This film may interest you  because you frequently watched Tim Burtons films with  Johnny Depp. If the user agrees with the explanation, that  means that the association (Tim Burton - Johnny Depp) is  relevant but this particular film do not appeal to the user.

Otherwise, we consider that the detected association was  purely a coincidence. In this case, the system will be able  to ignore this pattern for this user in the future.

The results of this evaluation are depicted on Fig. 4. We  can see that 84,9% of the recommendations satisfy the users.

Concerning the recommendations rated as disliked, 59,4% of  the explanations are approved by users. Finally, 93,9% of the  recommendations are satisfying or approved.

An average of 5 recommendations is obtained by running  the collaborative and the semantic-based modules (which is    acceptable due to the low number of movies  86  in the  dataset), while 13 recommendations is the average for the  frequency module. This difference is due to the fact that  the cascading modules (collaborative and semantic-based)  are limited by the unique usage of the ratings to compute  the association rules. The frequency module, on the other  hand, is based on a statistical analysis of the item contents.

Consequently, it does not suffer from the sparsity of the user  rating matrix like the previous modules.

The collaborative module results in some recommenda-  tions which are not liked by users. Fortunately, such recom-  mendations are eliminated by the semantic-based module.

Other recommendations are eliminated by the semantic-  based module though they appeal to users. We explain this  because the concerned items dont share any features with  the ones in the users history. This is why, we aim at  introducing a semantic similarity measure to alleviate this  problem (see Sect. V). Finally, 81,3% of the frequency  module recommendations and 58,1% of the explanations  of the disliked recommendations, satisfy the users. We can  conclude that the combination of all the modules results in  better recommendations.



V. CONCLUSION AND FUTURE WORK  In our work, we propose a hybrid recommender system  that combines collaborative filtering and semantic analysis  of the items. The approach is based on many modules that  refine the rules which progressively lead to a recommen-  dation. A process targeting users with various interests is  described. First, the collaborative filtering step is achieved  using association rule mining which is a flexible way to  classify the user. His history is then used to make the  results more adapted to him. The semantic module aims at  refining the recommendation issued from the rules. Finally, a  frequency module is used to discover other items of interest  for the user. Using distinct modules allows us to explain the  recommendations to the user.

The results we have obtained from the evaluation experi-  ments are promising. The combination of the collaborative,  and semantic modules improves the quality of the recom-  mendations and the frequency module adds new ones. 93,9%  of the recommendations are satisfying or approved.

In near future, we aim at defining the approach to learn    the user profile in order to adapt the combination of the  recommendation modules. We also plan to improve the  semantic module by defining the semantic similarity between  instances [25], [26]. Thus, when computing the interest by  instance, those which are semantically similar to the current  instance can be used when the instance is not present in the  users history.

This similarity could also be used during the personaliza-  tion of the association rules. The personalization rule (a),  which consists in only keeping the rules which have a body  composed of items contained in the users history, can be  relaxed if the items violating (a) are semantically similar to  the items in the users history. The advantage of the semantic  similarity is that it can be computed off-line which does not  slow down the recommendation process.

Another improvement we want to introduce is the use  of implicit data collected and based on the users behavior  e.g. his search history, the time he spent looking at an item  and his navigational patterns. This will help to increase  the knowledge about the user and, in turn, lead to a better  understanding of his expectations.

Finally, we plan to experiment the framework on other  domains to confirm the domain-independence of the system.

