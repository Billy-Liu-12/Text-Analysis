Parallel Algorithm for Mining Fuzzy Association Rules

Abstract  The principle and steps of the algorithm for  mining fuzzy association rules is studied, and the  parallel algorithm for mining fuzzy association rules  is presented. In this parallel mining algorithm,  quantitative attributes are partitioned into several  fuzzy sets by the parallel fuzzy c-means algorithm, and  fuzzy sets are applied to soften the partition boundary  of the attributes. Then, the parallel algorithm for  mining Boolean association rules is improved to  discover frequent fuzzy attributes. Last, the fuzzy  association rules with at least fuzzy confidence are  generated on all processors. The parallel mining  algorithm is implemented on the distributed linked  PC/workstation. The experiment results show that the  parallel mining algorithm has fine scaleup, sizeup and  speedup.

Keywords: data mining; fuzzy association rules;  parallel; fuzzy clustering  1. Introduction  The mining of association rules is one of the most  important issues in the field of data mining. The problem  of mining Boolean association rules over basket data is  introduced in [1]. There are many known algorithms for  mining Boolean association rules, such as Apriori[2] ,  DHP[3] , etc. As the database size becomes larger and  larger, a better way is to mine association rules in parallel.

Some parallel association rule mining algorithms have  been proposed in [4, 5].

Recently, people have got interested in quantitative  attributes. The problem of mining quantitative association  rules is introduced in [6]. The algorithm in [6] finds  association rules by partitioning the attribute domain,  combining adjacent partitions, and then transforming the  problem into binary one. Although this mining algorithm  of quantitative association rule can solve problems  introduced by quantitative attributes, it introduces some  other problems. The first problem is that equi-depth  partitioning cannot embody the actual distribution of the  data. On the one hand, it may not work very well on  highly skewed data and tends to split adjacent values with  high support into separate intervals though their behavior  would typically be similar. On the other hand, it is not  easy to distinguish the degree of membership. For  instance, age of 50 and age of 70 will both be classified  into the old. However, we intuitively know that age of 70  is much older than age of 50. The second problem is  caused by the sharp boundary between intervals. The  algorithm either ignores or over-emphasizes the elements  near the boundary of the intervals in the mining process.

Ref. [7] uses fuzzy set to soften partition boundary of  the domains, and presents the concept of fuzzy association  rules, but it does not present partitioning algorithm which  can embody the actual distribution of the data and does  not present the mining algorithm for fuzzy association  rules which fits for large databases. Ref. [8] uses the  relational fuzzy c-means algorithm to partition the  quantitative attributes into several fuzzy sets, then the  problem of mining fuzzy association rules is introduced  by combining fuzzy sets. The relational fuzzy c-means  algorithm can embody the actual distribution of the data.

Furthermore, fuzzy sets can soften partition boundary.

But combining fuzzy sets can obtain excessive fuzzy  association rules, so the mining algorithm cannot fit for  large database. The improved algorithm for mining fuzzy  association rules, which fits for large database, is  presented in [9]. This mining algorithm consists of three  parts:     (1) Quantitative attributes are partitioned into several  fuzzy sets by the fuzzy c-means (FCM) algorithm;  (2) Discovering frequent fuzzy attributes;  (3) Generating fuzzy association rules with at least a  minimum confidence from frequent fuzzy  attributes.

In this paper, the parallel algorithm for mining fuzzy  association rules is discussed. In this parallel mining  algorithm, quantitative attributes are first partitioned into  several fuzzy sets by the parallel fuzzy c-means  algorithm. Secondly, the parallel algorithm for mining  Boolean association rules is improved to discover  frequent fuzzy attributes. Last, the fuzzy association rules  with at least fuzzy confidence are generated on all  processors. The parallel algorithm is implemented on the  distributed linked PC/workstation. The experiment results  show that the parallel mining algorithm has fine scaleup,  sizeup and speedup.

2.The algorithm for mining fuzzy association rules  Let },,,{ 21 ntttT   be a relational database, jt  represents the j-th record in T, let },,,{ 21 miiiI   be the  attribute set where ji  denotes a boolean, categorical or  quantitative attribute, ][ kj it  represents value of the j-th  record in attribute ki . Values of the record in attribute  need to be partitioned into several fuzzy sets for mining  fuzzy association rules.

Let 1A  and 2A  be two values of the record in boolean  attribute, then two values can be partitioned into two  fuzzy sets 1A  and 2A :    ,0  ,1 {)(  Ax  Ax xA    ,0  ,1 {)(  Ax  Ax xA  Categorical attribute with fewer values can be  partitioned into several fuzzy sets with the same method.

Each quantitative attribute is partitioned into several fuzzy  sets by FCM algorithm[10].

For example, the process of using FCM algorithm to  partition quantitative attribute ki  into c fuzzy sets is given  below. Put the values taken by attribute ki  together as a  set of samples X. Let ijij vxd , m=2, matrix norm  is the maximum element of the matrix. After clustering  with the FCM algorithm, partition matrix U and c centers  iv  are obtained.

In order to mine fuzzy association rules, we first  construct a new database through original database T. In  this new database, attributes are fuzzy sets; values of the  record in attributes are obtained as follows: Let 1ki  be a  fuzzy set of attribute ki ,  ki  is an attribute in new database.

Value of the j-th record in attribute 1ki  is ])[(  kjk iti .

])[(1 kjk iti  is membership value of ][ kj it  with respect to  fuzzy set 1ki . In this new database, because attributes are  fuzzy sets, we call attributes fuzzy attributes next. Let I  still be the fuzzy attribute set, let )( kj yt  represent value of  the j-th record in fuzzy attribute ky , )( kj yt  falls in [0,1].

Let  IyyyX p },,,{ 21  IyyyY qppp },,,{ 21  YX =  An association rule is an implication of the form  YX . Because attributes in X and Y are fuzzy  attributes, YX is called fuzzy association rule. The  fuzzy support and fuzzy confidence of fuzzy association  rule are defined as follows[9].

Definition 1. Let fuzzy attribute set  IyyyX p },,,{ 21  , the fuzzy support of X is defined  as follows  n  yt  XFSup  n  j  p  m  mj  1 1  )(  )(  where n  j  p  m  mj yt 1 1  )(  is called as the fuzzy support count.

Fuzzy attribute sets with at least a minimum fuzzy support  are called frequent fuzzy attribute sets.

Definition 2. The fuzzy support of YX  is defined  as follows  n  yt  FSup  n  j  qp  m  mj  1 1  )(  Definition 3. The fuzzy confidence of YX  is  defined as follows  )(XSup  Sup FConf  Because )( kj yt  falls in [0,1], we can know that all  subsets of a frequent fuzzy attribute set must also be  frequent according to definition 1. So it is easy to modify  Apriori algorithm[2] to mine fuzzy association rules. The  detail process can be obtained in  [9].

3. Partition the quantitative attributes  Quantitative attributes are partitioned into several fuzzy  sets by the FCM algorithm in section 2. As the database     size becomes larger and larger, FCM algorithm requires  lots of computation power, main memory and disk I/O.

Lamehamedi H. presents the parallel fuzzy c-means  (PFCM) algorithm [11]. The PFCM algorithm is developed  following a master/slave approach. The computation is  iterative and consists of s slaves controlled by the master.

In order to implement the parallel algorithm for mining  fuzzy association rules on the distributed linked  PC/workstation, we improve the master/slave approach to  the single program/multi data approach. Indeed, the  PFCM algorithm is shown in Algorithm 1.

Algorithm 1.  PFCM algorithm  PFCM1. The values taken by each attribute are regarded as the  initial set of patterns. Partition the initial set of patterns among the  processes. Each process will get n/s patterns. Where n is the number  of patterns and s is the number of the processes launched.

sProcess2Process1Process  },,||,,|,,,{ 1)/)(1(/21)/(/21 nsnssnsnsn xxxxxxx  PFCM2. Initialize the civi ,,2,1,   on the root process, and broadcast them to all processes.

PFCM3. Each process receives civi ,,2,1,  , and computes the membership values of the patterns it holds. Each process j  operates separately on its subset of data  }/,,1/)1(,{ sjnsnjkxk  , this step is the end of the initialization part.

kivxvxu c  j  m AjkAikik ,])||||/||(||[    )1(2  0,0,0,  For t=1 to T  PFCM4. Each process computes: xsize  k k m  tikji xu1 1,, )(  xsize  k  m tikji u1 1,, )(  where snxsize /  is the number of patterns receive by each  process.

PFCM5. Each process j sends these results ( ji,  and ji, ) to  the root process, which then aggregates to compute tiv ,  and broadcasts to all processes.

civ s  j ji  s  j jiti ,,2,1)/()(  1 ,1 ,,   PFCM6. Each process receives the value of the cluster  centers and computes the membership values of the patterns.

Each process operates separately on its subset of data.

kivxvxu xsize  j  m AtjkAtiktik ,])||||/||(||[    )1(2  ,,,  PFCM7. Each process computes the error. The portion of  error at each process j is computed and then sent to the root  process.

xsize  k  c  i tiktikj sjforuuerror  1 1   ,1, .,,2,1)(  PFCM8. The errors are aggregated at the root process: 2/1  )(  s  j jt errorE  if tE , then stop.

Algorithm 2.  PMFAR algorithm  Input: Subset of data iD ),,2,1( si  ; minFsup; minFconf.

Output: Fuzzy association rules (FARs).

/* Parameter: nproc (the number of process), myid (process label), mysize (data size of the subset), pPMat (partial partition matrix), pFARs (partial fuzzy association rules) */  Methods:  {  MPI_Init (&argc,&argv);  /* Get the number of process */  MPI_Comm_size (MPI_COMM_WORLD, &nproc);  /* Get the process label */  MPI_Comm_rank (MPI_COMM_WORLD, &myid);  /* Read in the subset of data iD */  Data_input (Di);  /* The processes are synchronous */  MPI_Barrier (MPI_COMM_WORLD);  If (myid==0)  startwtime=MPI_Wtime ();  for (cl=0; cl<COLUMN; cl++)  /* Clustering by PFCM */  PFCM (Di, mysize, cl, pPMat[cl]);  /* Construct a new database */  Transform (pPMat);  istree=ist_create (m, minFsupp, minFconf);  /* Discover frequent fuzzy attributes */  do {  for (i=0;i<mysize;i++)  ist_count (istree, pPMat, mysize, i);  extract_count (istree, LCntArr);  MPI_Reduce_scatter (LCntArr, PartGCntArr, PartSize, MPI_SUM, MPI_COMM_WORLD);  MPI_Allgatherv (PartGCntArr, PartSize[myid],  GCntArr, PartSize, disp, MPI_COMM_WORLD);  Writeback_count (GCntArr, istree);  l=ist_addlvl (istree);  } while (l==0);  /* Parallel generating fuzzy association rules */  Gen_rule (istree, pFARs);  If (myid==0) {  MPI_Gather (pFARs, FARs, MPI_COMM_WORLD);  endwtime = MPI_Wtime ();  printf ("wall clock time = %f\n",endwtime-startwtime);  }  MPI_Finalize ();  If (myid==0)   Return FARs;}  }     4. Parallel mining fuzzy association rules  Parallel mining Boolean association rules is introduced  in [4]. Two parallel algorithms, Count Distribution and  Data Distribution are proposed. The Count Distribution  algorithm scales linearly and has excellent speedup and  sizeup behavior with respect to the number of  transactions. In this paper, we adopt the similar idea of the  Count Distribution algorithm to design parallel algorithm  for mining fuzzy association rules (PMFAR).

The key step for generating frequent fuzzy attribute sets is  obtaining the whole fuzzy support count by exchanging  the local fuzzy support count of the candidate fuzzy  attribute sets. First, each process obtains local fuzzy  support count of the candidate fuzzy attribute sets from  hash tree asynchronously and put into the array LcntArr.

Second, each process aggregates to compute components  of the array by function MPI_Reduce_Scatter () and  broadcasts them to each process, which only receives the  whole fuzzy support count with respect to its partition.

Third, each process gathers the whole fuzzy support count  of the candidate fuzzy attribute sets to the array GcntArr  by function MPI_AllGatherv (). The parallel algorithm  based on the message passing interface (MPI) is shown in  Algorithm 2.

5. Experimental results  We implemented our parallel algorithm for mining  fuzzy association rules on the distributed linked  PC/workstation. This workstation consists of six  computers with 128,000 KB of real memory, which are  interconnected via a 10M/100M hub. We use the parallel  message passing software MPICH1.2.4.

The experiment is implemented on an abalone dataset  from UCI machine learning. We first copy abalone dataset  32 times, and obtain a 5.72MB dataset with 133,664  records, which is regarded as the initial dataset. The  performance of scaleup, sizeup and speedup are analyzed.

To see how well our parallel algorithm handles large  dataset when more computers are available, we perform  scaleup experiments where the dataset is copied from the  initial dataset in direct proportion to the number of the  computers in the workstation. The number of maximal  processors is set to 6.  In the experiment, attributes are  partitioned into three fuzzy sets by PFCM algorithm. Let  minimum fuzzy support be 0.01, let minimum fuzzy  confidence be 0.1. The performance results of scaleup are  shown in figure 1.

We fix the size of the computers at 4 in the  workstation, while growing the dataset from 1.5MB per  computer to 9MB.  Figure 2 shows the performance  results of sizeup. The results show subliner performance  for our parallel algorithm. Our parallel algorithm is  actually more efficient as the dataset size is increased,  since increasing the size of the dataset simply makes the  non-communication portion of the code take more time  due to more I/O and more transaction processing. This has  the result of reducing the percentage of the overall time  spent in communication.

5 0 0  1 0 0 0  1 5 0 0  2 0 0 0  2 5 0 0  3 0 0 0  3 5 0 0  4 0 0 0  0 2 4 6 8  The number of processes  R es  p o  n se  t im  m e  (sec .)   5 0 0  1 0 0 0  1 5 0 0  2 0 0 0  2 5 0 0  3 0 0 0  3 5 0 0  4 0 0 0  0 2 4 6 8 1 0  Data size per process( M B )  R es  p o  n se  t im  m e(  se c.

)   5 0 0  1 0 0 0  1 5 0 0  2 0 0 0  2 5 0 0  3 0 0 0  0 2 4 6 8  The number of process  R es  p o  n se  t im  m e(  se c.

)  We perform Speedup experiments where we keep the  dataset constant and vary the number of computers. We  Figure 1.  Scaleup  Figure 2.  Sizeup  Figure 3.  Speedup     use the initial dataset (5.72MB), the number of maximal  processors is set to 6. Figure 3 shows the performance  results of Speedup.

6. Related works  Ref. [12] introduces the problem of maintaining  Boolean association rules and gives the FUP algorithm  that can maintain Boolean association rules when new  transactions add into a database. Ref. [13] proposes a  more general algorithm, FUP2, which can maintain  Boolean association rules when some records are inserted,  deleted or updated in the database. Ref. [14] uses negative  borders to maintain rules. Ref. [15] introduces the  problem of mining Boolean association rules with  weighted items. Ref. [16] introduces the problem of  mining Boolean association rules and fuzzy association  rules with weighted items. Liu, Hsu and Ma propose  classification based on associations (CBA), which uses  iterative method to find the frequent and accurate possible  rule set and then uses method of elicitation to build  classification system.[17] But it is important to note that the  intervals involved in quantitative association rules may  not be concise and meaningful. A fuzzy approach that can  be used for mining interesting rules for classification with  degree of membership in [18,19]. This approach  represents the revealed regularities and exceptions using  linguistic terms. The use of linguistic terms allows human  users to better understand the discovered rules because of  the affinity with the human knowledge representation.

Furthermore, this approach is capable of finding  interesting relationships among attributes without any  subjective input required of the users. Some results show  that the classification methods in [18,19] have good  accuracy and interpretability than C4.5 and CBA.

7. Conclusions  We discuss the parallel algorithm for mining fuzzy  association rules. In this parallel mining algorithm,  quantitative attributes are first partitioned into several  fuzzy sets by the parallel fuzzy c-means algorithm.

Secondly, the parallel algorithm for mining Boolean  association rules is improved to discover frequent fuzzy  attributes. Last, the fuzzy association rules with at least  fuzzy confidence are generated on all processors. The  parallel algorithm is implemented on the distributed  linked PC/workstation. The experiment results show that  the parallel mining algorithm based on the MPI has fine  scaleup, sizeup and speedup. Our parallel algorithm  considers the number of the records mainly. In our  parallel algorithm, the real memory of every computer  must save all candidates fuzzy attribute sets. When the  number of quantitative attributes is increasing, our  parallel algorithm may be ineffective. How to mine the  fuzzy association rules in the database with lots of  quantitative attributes is a further work.

