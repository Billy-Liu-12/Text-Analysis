TDFA: Traceback-based Defense against DDoS  Flooding Attacks

Abstract? Distributed Denial of Service (DDoS) attacks are one of the challenging network security problems to address. The existing defense mechanisms against DDoS attacks usually filter the attack traffic at the victim side. The problem is exacerbated when there are spoofed IP addresses in the attack packets. In this case, even if the attacking traffic can be filtered by the victim, the attacker may reach the goal of blocking the access to the victim by consuming the computing resources or by consuming a big portion of the bandwidth to the victim. This paper proposes a Traceback-based Defense against DDoS Flooding Attacks (TDFA) approach to counter this problem. TDFA consists of three main components: Detection, Traceback, and Traffic Control. In this approach, the goal is to place the packet filtering as close to the attack source as possible. In doing so, the traffic control component at the victim side aims to set up a limit on the packet forwarding rate to the victim. This mechanism effectively reduces the rate of forwarding the attack packets and therefore improves the throughput of the legitimate traffic. Our results based on real world data sets show that TDFA is effective to reduce the attack traffic and to defend the quality of service for the legitimate traffic.

Keywords? Packet Filtering; Traffic Control; IP Traceback; DDoS Attack; Deterministic Flow Marking

I. INTRODUCTION Distributed Denial of Service (DDoS) attacks are a well-  known way to attack a victim machine from a large number of compromised systems. DDoS attackers infect and compromise several vulnerable hosts, dispersed over the Internet, to forward a large volume of attack traffic to the victim. This way, they are able to consume critical resources of the victim such as the CPU time, the stack space or the network bandwidth.

Therefore, the victim cannot provide normal services to the legitimate users.

Two features of the DDoS attacks are challenging for the security (defense) systems. Firstly, the DDoS packets tend to appear as legitimate packets, so filtering them with no impact on the legitimate traffic is challenging. Secondly, as the source IP address can be spoofed easily, finding the source of DDoS attacks is very challenging. To find the source of such an attack, several IP traceback mechanisms are proposed. These approaches usually require that some routers along the attack path embed marking information to the packets to recognize the identity of the routers. After collecting an appropriate  number of marked packets, the victim is able to find the attack path or the source of the attack. Although the IP traceback approaches let the victim to guess the source of an attack, in general they do not have the ability to decrease the impact of the attack while the attack is in progress.

In this work, our goal is to explore how far we can push a defense/security system to mitigate the impact of such an attack while the attack is in progress. Our objectives are: (i) to minimize the burden of filtering on the participating routers; (ii) to minimize the number of modifications required on the current protocols in use; and (iii) to maximize the survival rate for the legitimate traffic under an intensive attack. To achieve such a solution, we propose the TDFA approach. The proposed system defends against DDoS attacks by coordinating between the defense systems at the source and the victim ends. This necessitates communication between the victim and the filtering routers so that the filtering can be located as far away as possible from the victim. TDFA consists of three main components: Detection, Traceback, and Traffic Control. The detection component aims to detect unusual changes of the incoming traffic to identify DDoS attacks. The traceback component employs the deterministic flow marking (DFM) technique [1-3] to find the source of the attack. The traffic control component, which is the focus of this work, aims to minimize the attack traffic. Once a DDoS attack is detected by the detection component, the traceback component finds the source of the attack using the DFM technique. Then the traffic control component sends traffic control messages to the edge router of the attack network. When the edge router of the attack network receives the control messages, it will be triggered to adjust the packet forwarding rate to the victim. TDFA filters attack traffic at the source end to eliminate the consumption of the computing resources and the bandwidth of the victim. This in return improves the performance of the system for the legitimate services and users.

To evaluate the performance of the proposed system, TDFA is implemented and tested by ?CAIDA anonymized Internet traces 2012? and ?CAIDA DDoS Attack 2007" traces, which are traffic data sets captured in the real world. The results show that TDFA succeeds in lowering the attack traffic by 88%, while maintaining the Quality of Service (QoS) for the legitimate traffic.

The rest of the paper is organized as follows. Related works   DOI 10.1109/AINA.2014.73        are discussed in Section 2. In Section 3, the proposed defense system is presented. Its performance is evaluated in Section 4.

Section 5 provides the conclusions and the future work for this research.



II. RELATED WORKS Several defense mechanisms have been proposed to counter  DDoS attacks. They can be divided into two main categories: Prevention defense and Reaction defense [4]. A prevention defense aims to eliminate the possibility of an attack, or to enable the victim to tolerate an attack without blocking the legitimate traffic. Prevention defense mechanisms usually require many changes in the softwares and the client/server protocols.

Reaction defense mechanisms [5,6] aim to stop the attacks while they are in progress and to reduce the impact of the attacks on the legitimate traffic. In doing so, they require to detect the attack as quickly as possible and to respond to it by blocking the malicious traffic. These defense mechanisms need to discriminate between the legitimate and the attack traffic, so that the traffic filtering can be selectively performed. To this end, first they identify the attack source or the attack path and then, they enable the filtering to block the malicious traffic coming from the identified source. Traffic classification is an important component of the reaction defense mechanisms, but when anonymized or spoofed IP addresses are employed in the attack packets, it becomes more complicated. Although ingress filtering [7] and route-base packet filtering [8] are two well- known mechanisms against IP spoofing, their performance is mostly based on the distribution over the network. These defense mechanisms require a router to check the source IP address of each packet against a database of legitimate IP addresses. This operation causes a large overhead on the filtering routers and therefore is a challenge to employ in practice. In addition, by spoofing the source IP addresses of the attack packets with the IP addresses of a legitimate host, the attacker can make these mechanisms ineffective.

Another approach for detecting and responding to the spoofed attacks is to use IP tunneling between the entire edge routers and several tracing centers [9]. Once a DDoS attack is detected, the edge router forwards the victim traffic to the tracking centre. In doing so, the point of attack traffic entry to the Internet can be detected. Besides the considerable overhead of IP tunneling on the edge routers, the tracking centre processes a large amount of traffic during the attack.

The other mechanism to counter the spoofed attacks is to employ an IP traceback technique [10-12]. An ideal IP traceback algorithm lets the victim to identify the source of an attack. Therefore, when the traceback is completed, it is possible to identify the attack sources and to block them. It is a valuable defense method against the DDoS attacks. However, these methods react to the attack once the attack is completed.

This means the critical resources of the victim have already been consumed.

There are several attempts to integrate the traceback mechanisms with the real-time DDoS defense systems to react to the attacks while they are in progress [13-20]. Sung and Xu [14] has suggested a mechanism where the IP traceback and the packet filtering are integrated and work together. Thus, the  victim resources are preserved, even before the traceback is completed. In this approach, two types of marks are employed, the signaling mark for the traceback and the data mark for filtering. The victim employs a traceback method to identify the attack path. While the traceback algorithm is in progress, the victim identifies the data marks of suspicious packets and selects the filtering probability of the marked packets. This decision is based on the rate of incoming packets and the attack path. This algorithm is performed regularly and the results sent to the filtering router that is located near the victim. There are several challenges related to this approach. First of all, filtering is limited to the packets with the data mark, so the data marking rate is required to be adjusted by the attack intensity.

However, such a feature does not exist in the current traceback approaches. Secondly, the victim sends the identified attack path to all of the filtering routers. To avoid the extra communication overhead between the victim and the filtering router, the number of filtering routers and consequently, the distance between the defense systems and the victim is required to be low (in terms of the number of hops). However the proximity of the defense systems and the victim may cause the filtering routers to be overwhelmed by an intense attack where the attackers are highly distributed over the network and can generate a high volume of attack traffic. More importantly, if the defense system is located near the victim, when a legitimate packet reaches to the filtering router, it most likely carries the marking information of an infected router, and therefore there is a low probability for it to escape the filtering.

Chen and Song [15] have changed the aforementioned defense system [14] to only rely on the edge router near the victim for both of the IP traceback and the packet filtering purposes. This defense scheme is interesting but if the attack is widely distributed over the Internet, this approach cannot differentiate between the legitimate and the attack traffic appropriately. A good example of this kind of attack is the Code Red Worm that orchestrated 300,000 bots to initiate a DDoS attack against the White House website in 2001 [16].

Yaar et al. [17] has proposed the Pi approach that is a deterministic packet marking (DPM) mechanism and embeds the path fingerprint into every packet. This defense approach does not work in a situation where the purpose of the attack is to consume the victim?s bandwidth, because it only relies on the DDoS packet filtering at the victim side. To address this problem, they also proposed a capability-based defense system [18]. However, their approach requires fundamental and essential modifications in the current network protocols. This prevents their approach to be employed easily over the Internet. Chen et al. [19] has proposed another DDoS attack detection and filtering based on packet marking which is very similar to the Pi approach [17]. Instead of tracking the attacking packets, they have proposed to create a table of legitimate paths and eliminate the packets that come from the other paths. Since the filtering operation is performed at the victim side, this approach suffers from the same problems as the Pi approach.



III. THE PROPOSED DEFENSE SYSTEM: TDFA It was first observed by Mahajan et al. [21] that when a  DDoS attack occurs, most of the traffic drops by the upstream routers, even before reaching to the victim. In this case, when         Fig. 1. The locations of TDFA modules on a sample network. The hosts H1, H2, H3, H4 and H5 are legitimate hosts. The TA module at the victim  end is in communication with the PF module on the edge routers of the attacking networks.

the attack is heavy, it is impossible for the defense system to react to the attack at the victim-end. To mitigate the attack, we propose a system model to set up the second defense line at the upstream routers to react to the attack, Fig. 1. This system relies on the IP traceback approach based on the DFM [1-3] algorithm. DFM enables the victim to differentiate the traffic coming from different sources. DFM has the ability to infer the source of an attack. What makes DFM more appealing is that unlike several other IP traceback methods, DFM only requires the cooperation of the edge router. The proposed system based on DFM improves the throughput of the legitimate traffic during the attack by filtering the attack traffic at the source- end. This approach can be viewed as a distributed algorithm that consists of the following components:  ? DDoS Detection component: This component is used at the victim-end edge network for recognizing anomalous changes on the network traffic. There are several algorithms and tools for detecting DDoS attacks that can be used for this component such as Snort [22]. Our intention in this paper is not to propose a new DDoS detection algorithm.

? IP Traceback component: The IP traceback component employs the DFM traceback technique to identify the source of a DDoS attack. This traceback mechanism consists of a light weight flow marking module running on the edge routers (DFME) and a mark decoding module running on the victim-end (DFMD) to infer the source of traffic based on the information extracted from the marked packets. A detailed description of the DFM technique could be found in our previous work [1-3].

? Traffic Control component: This component consists of two modules: Traffic Adjustment (TA) and Packet Filtering (PF) modules. The TA module runs on the victim or the border gateway device (e.g. firewall) of the victim network. After finding the source of the attack, using IP traceback component, the TA module sends a request  message, which carries attack traffic information, to the defense system at the source-end edge network. On the other hand, the PF module runs on every edge router and filters packets that are directed to the victim based on the instructions issued from the TA module.

After analyzing the network traffic on the victim or the border devices (Router 1 in Fig. 1), the DDoS detection component reports to the IP traceback module (DFMD) about the ongoing DDoS attack. By collecting the appropriate number of marked packets from the source-end edge routers, the IP traceback component infers the IP address of the source end edge routers (e.g. Routers 6 and 9 in Fig. 1) and aims to detect the origin of the attackers. Then, the TA module at the victim-end sends a request message to the PF module at the source-end edge router (e.g. Routers 6 and 9). Based on this information, the PF modules at the source-end sets a forwarding rate limit on the packets that are directed to the victim.

Next, we briefly review the DFM IP traceback mechanism and describe the aforementioned TA and PF modules in detail.

A. Deterministic Packet Marking (DFM) IP Traceback To employ an IP traceback mechanism in TDFA, we prefer  the technique that requires a small number of marked packets to infer the source of an attack, that imposes little workload on the participating routers, and only needs the participation of the edge routers (not all) along the attack path. Among the IP traceback techniques, DFM shows better performance than the PPM or the DPM in realizing the aforementioned requirements as demonstrated in the evaluations in [1,3]. In DFM, each Internet edge router marks the flows in a deterministic way.

These marks allow the victim to find the source of an attack, which consists of the network edge router of the attacker, the ingress interface of the edge router, and the attacker node behind the edge router, even if the attacker is located behind a NAT or a firewall.

DFM encoding module (DFME) marks every flow, (i.e. the first two or five packets of each flow), instead of every packet, to take advantage of both the high traceback accuracy and the low packet marking rate. The DFM encoding module (DFME) uses three identifiers to mark a flow: (i) the IP address of the egress interface of the edge router; (ii) the network interface identifier (NI-ID), which is an identifier assigned to each interface of either the MAC address of a network interface on the edge router, or the VLAN ID of a virtual interface if the edge router uses VLAN interfaces; and (iii) Node-ID, which is an identifier assigned to each source MAC address observed on incoming traffic from local networks. In this IP traceback approach, only the edge router marks the packets, and the rest, including the core routers, are not involved in packet marking.

The DFME module marks each flow by using 60-bits identification data to distinguish the traffic of a particular node from the other nodes. The 60-bits identification data is divided into K fragments; therefore the mark contains M=60/K bits of the identification data and S=log2(K) bits are required to identify a fragment. DFM also takes advantage of one flag bit to identify the marked and the unmarked packets in a flow. The first K packets of every flow carry the mark fragments including M bits for identification data fragment, S offset bits         Fig. 2. The proposed ICMP messge, desined for communication between the  TA and the PF modules  to represent 2S possible fragments and one bit flag F, which should be set to ?1? for the marked packets and ?0? for the others.

At the destination-end, the DFM decoding (DFMD) module maintains a table matching the flow ID and K possible mark fragments. Flow ID has been defined as the five tuples indicating the source IP address, thedestination IP address, the L4 protocol type (TCP/UDP), the source port and the destination port numbers for TCP and UDP flows. For ICMP flows, it has been defined as the six tuples including the source IP address, the destination IP address, the L4 protocol type (ICMP), the ICMP type, the ICMP code and the ICMP ID.

When a packet of an unseen flow arrives at the destination node, the DFMD module extracts the marking information of this flow from the marked packets, identified by F flag. After all the fragments corresponding to a flow reach the destination, the source node for the given flow is recognized by the destination. Using DFM, the destination is able to differentiate the traffic of different nodes behind an edge router. As a result, when abnormal traffic is observed, the victim is able to distinguish between the attack and the legitimate traffic and infer the source of an attack. In a situation when the attacker spoofs the source MAC address of the attack packets with several valid MAC addresses in the network, then DFM can infer the source of an attack up to the ingress interface of the attacker end edge router.

B. Traffic Adjustment (TA) and Packet Filtering Modules To control the attack traffic, we propose a rate limit  algorithm that relies on some concepts of TCP flow and congestion control algorithms to allocate the bandwidth to all the incoming traffic from the routers that forward the attack traffic. It is not fair to punish all these routers by setting the same rate limit on them. Therefore the traffic histories of individual routers should be considered by the TA module before sending a rate limit request to a PF module. Our proposed defense algorithm can be divided into the following phases:  ? Connection Establishment: Connections must be properly established in a 3-way handshake process. The TA module at the victim end opens a full duplex session with the PF module at the attacker edge router end for subsequent communications.

? Congestion Avoidance: The PF module performs the congestive avoidance phase once it gets a message indicating that the destination of the outgoing packets is  under a DDoS flooding attack. In this case, the forwarding rate of the packets directed to the victim is decreased exponentially in such a manner that the forwarding rate is halved at each round trip time (i.e. after X round trip times, the forwarding rate will be decreased by 2X times). This operation continues until the PF module gets a message from the victim indicating that the receiving packet rate is tolerable.

? Slow Start: The PF module performs this phase once it is informed that the victim is able to tolerate the current packet forwarding rate. In this case, the packet forwarding rate to the victim is increased linearly. After each increase in the rate, the PF module sends an update message to the TA module indicating that the rate has been changed, and then waits for the confirmation of the new rate from the TA module. This way, the PF module infers if the victim is able to tolerate the new rate or not. If the new rate is not confirmed, then the algorithm gets back to the congestion avoidance phase; otherwise, it waits for a given period of time and then increases the forwarding rate again. This process continues until the packet drop rate, calculated by the PF module, is equal to zero. The packet drop rate is calculated using Eq. 1:  ???? ???	 =  ?? ????   ?? ????	 + ?? ?? (1)  Zero drop rate means that either the flooding attack is finished, or the current rate of packet forwarding can be tolerated by the victim without any impact on the throughput of the legitimate traffic from the other paths.

? Connection Termination: If the drop rate is zero, then the PF module removes any rate limit on the forwarding packets destined to the victim and sends an update message to the TA module. If the TA module confirms the new rate limit, the algorithm enters the connection termination phase to close the established virtual circuit.

This process can be done by a 3-way FIN/ACK exchanges between the PF and the TA modules, which is started by the PF module. If the TA module does not confirm it, the algorithm gets back to the congestion avoidance phase.

Note that once the PF module changes the packet forwarding rate (it may happen in any of the phases, namely congestion avoidance, slow start, and connection termination phases), it sends an update message to the TA module and waits for a response. If the TA module does not confirm the new rate, then the PF module performs the congestion avoidance phase again. Not confirming to the new rate limit is determined by the PF module in 3 ways:  1. Getting an ACK+REQ2 message from the TA module: If the TA module gets an update message from the PC module while the victim is still under the flooding attack, it sends an ACK+REQ2 message to the PC.

2. Duplicated acknowledgment or request messages: It means that the victim is under a heavy flooding attack, so the update message has not reached to the TA module due to the traffic congestion.

3. Lack of acknowledgment before time  out: It  indicates  that        Fig. 3. The proposed defense approach in operation  TABLE I. MESSAGES EXCHANGED BETWEEN THE TA AND THE PF MODULES AND THEIR FLAGS IN THE ICMP HEADER  SYN FIN ACK REQ1 REQ2 SYN 1 0 0 0 0  SYN+ACK 1 0 1 0 0 FIN 0 1 0 0 0  FIN+ACK 0 1 1 0 0 ACK 0 0 1 0 0  REQ1: Node Filtering 0 0 0 1 0 REQ2: Interface Filtering 0 0 0 0 1  ACK+REQ2 0 0 1 0 1 Update 0 0 0 1 1  because of heavy traffic, the bandwidth is full at the victim-end and the TA messages cannot reach to the PC module.

C. The Proposed System Design To transmit the control messages between the TA and PF  modules, we propose to use Internet Control Message Protocol (ICMP). ICMP messages are used by network devices, like routers, to send error messages indicating, for example, that a requested service is not available or that a host or a router could not be reached. ICMP can also be used to relay query messages. Fig. 2 presents the proposed ICMP message that is very similar with the ICMP Timestamp (Type 13) and the ICMP address Mask Request (Type 17) messages [23]. For all the ICMP packets, the first 4 bytes of the header will be consistent. The first byte is for the ICMP type. The second byte is for the ICMP code, and the third and fourth bytes are a checksum of the entire ICMP message. The first byte can be used to address 255 different ICMP Type values, but so far only 28 of them are used and the rest are free to employ for other purposes. Types 1 and 2 are both free, so we have employed type 1 for sending messages from the TA module to the PF module and type 2 for sending messages from the PF module to the TA module. The next 39 bits consists of 16 bits sequence number, 16 bits acknowledgment number, and 5 control flag bits including SYN, FIN, ACK, REQ1 and REQ2.

If the SYN flag is set to (1), then this is the initial sequence number. The sequence number of the actual first data byte and the acknowledgement number in the corresponding ACK are  equal to this sequence number plus 1. If the SYN flag is clear (0), then this is the accumulated sequence number of the first data byte of this segment for the current session. If the ACK flag is set then the value of this field is the next sequence number that the receiver is expecting. This acknowledges receipt of all prior bytes (if any). The first ACK sent by each end acknowledges the other end's initial sequence number itself. The next two fields are the Interface-ID and Node-ID of the attacker that are identified by the IP traceback component.

Using these 2 fields, the TA module sends the attacker identity to the PF module.

