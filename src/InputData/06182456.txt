Weighted Concise Association Rules Generation Under

Abstract-Association rules tell us interesting relationships between  different items in transaction database. But traditional association  rule has two disadvantages. Firstly it assumes every two items have  same significance in database, which is unreasonable in many real  applications and usually leads to incorrect results. On the other  hand, traditional association rule representation contains too much  redundancy which makes it difficult to be mined and used. This  paper addresses the problem of mining weighted concise  association rules based on closed itemsets under weighted support?  significant framework, in which each item with different  significance is assigned different weight. Through exploiting  specific technique, the proposed algorithm can mine all weighted  concise association rules while duplicate weighted item set search  space is pruned. As illustrated in experiments, the proposed method  leads to good results and achieves good performance.

Keywords-weighted concise association rule; closed itemset; support-significant; algorithm

I. INTRODUCTION  Extensive studies have been devoted into association rules mining [1]-[4] in data mining area. Association rule is an important knowledge representation and it tells us significant relations among itemsets present in large number of transactions.

But traditional association rule has two disadvantages as follow.

First, it assumes every two items have same significance in transaction database. Obviously it is unreasonable in real applications, which usually leads to incorrect results biased with users' expectation in real applications. Second, traditional representation contains too much redundancy which often makes the mining process and results are flooded in the combinatorial explosion of insignificant relationships.

Association rules generation has tow steps: one is to mine all the itemsets, and the other is to enumerate association rules. In fact, one item may be different greatly from the other for the semantics in different real context. It is impossible to express all the differences absolutely between them. Attaching different weights to items with different significances is a good alternative in many circumstances. In real circumstance, general association  978-1-4577-1587-7/111$26.00 ?20111EEE 2403  rule must be re-defmed to derive the result selectively referring to the weights on items and make more reasonable results.

In this paper, association rule under weighted framework and its mining methods are respected. Weighted concise association rule is re-defined through exploiting weighted support-significant framework. We find that it is possible to define weighted concise association rule based on closed item set when the "downward closure property" holds. We can mine the whole set of weighted closed itemsets. The first step of association rule generation can be completed. Through exploiting the depth-first mining strategy and exactly itemset checking approach, duplicate closed itemsets can be identified early. In the second step, weighted concise association rules are enumerated. Weighted concise itemsets are arranged according to the item sequences based on tree structure.

We gear the rule generating sequence to concise item sets generating sequence that they can be processed concurrently.

Additionally much space can be saved. Experimental studies are conducted to show that the method in this paper is reasonable and achieves good results.



II. DEFINITIOIN AND TERMINOLOGY  Let 1={i), i2, . ? .  , irn} be a set of items and TDB={T), T2, . . .  , Tn} be a transaction database, where T iCl:Si:Sn) is a transaction which contains a set of items in 1. A set of items is called an itemset or a pattern. A transaction T is said to contain item set X if and only if Xt:;;T. The number of transactions in TDB that contain X is called the support count of X, denoted as count(X), and the support of X is denoted as support(X), which equals to count(X)/ITDBI, where ITDBI is the total number of transactions in TDB.

Given the form X=> Y, the confidence of X is denoted as conjidence(X=>Y), which equals to support(XU Y)/support(X).

Definition 1. Weighted item. Given a transaction database TDB, and the item sets l={i), i2, . ? .  , in} which appear in TDB.

We attach a value Wrn to each irn representing its significance.

Such an item is called weighted item. And its weight is denoted weightUrn) or weight( {irn}), which equals Wrn'  The items' weights may be defmed repectively in different area to balance the significance between items in transaction database.

December 24-26, 20 II    Definition 2. Weighted itemset. Given a itemset X, for each item in it has a weight, item set X may take different significance beyond the other. We denote the significance of X weight(X), which varies according to the item set X.

Given an itemset X, from above defmition, we define the weighted support of X as ws(X).

Definition 3. Weighted closed itemset. Given a transaction database TDB and a minimum support threshold .;" an itemset X is a frequent weighted closed itemset if both of the following conditions are true:  1) ws(X)2:';/; 2) V Y?X such that ws( Y)<ws(X).

The problem of weighted closed itemsets mining is to fmd  the complete set of frequent weighted closed item sets in a given transaction database with respect to the given support threshold .;.

Definition 4. Weighted concise associateion rule based on closed itemset. Given a transaction database TDB and a minimum support threshold .;, and a minimum confidence threshold ';2, an rule X=> Y is a weighted concise associateion rule based on closed itemset if both of the following conditions are true:  1) X, Y(Y?X) are frequent weighted closed itemsets; 2) ws(Y)/WS(X)2:';2' The problem of weighted concise associateion rule mining  is to find the complete set of weighted concise associateion rule based on closed itemsets in a given transaction database with respect to the given support threshold ';/ and confidence threshold ';2.



III. WEIGHTED CONCISE ASSOCIATION RULES BASED ON CLOSED ITEM SETS  In this section, we explore properties of weighted concise association rules based on closed itemsets. First, weighted closed item sets should be enumerated. In definition 3, frequent weighted closed itemset is defined. But it is difficult to decide how to calculate the weights of item sets reasonably to mine the complete set of weighted closed item set and rules properly. Different definitions of itemset's weight may lead to different results, but properties of traditional closed itemset may not hold. The total itemset search space will be viewed, which is impossible. And we must ensure that all weighted association rules generated can be derived from concise ones, and duplicate item sets and search space can be pruned efficiently while mining weighted concise association rules.

Traditional item sets will come less frequent when being added to items while being enumerated. Then the enumerating process can be stopped when infrequent item sets are found. If the "Anti-monotone" property of itemset does not hold on weighted itemset, we may not know when the enumerating process will be stopped. Otherwise, weighted concise association rules can be generated in depth-first like manner properly. A weighted support-significant framework [11] is adopted to keep "downward closure property". In the mining process, the method of calculating weighted support of an itemset is adopted. We prove that weighted closed item set keeps the anti-monotone   properties. All weighted concise association rules can be mined and all weighted association rules can be derived from concise ones.

Definition 5. Weighted support of itemset. Given a transaction database TDB and each transaction Ti in it is attached a weight twi. Then the weighted support of item set X is defined as follow:  (1)  For any Ti E TDB, we can defme WS(Ti) as we will reasonably.

Generally weighted support of item set X is defined as follow:  Lweight(I) w s('0) = ....:1 J'-E_T;_.,--,--__  1'01 (2)  Lemma 1 (downward closure property). For an item set X, 3Y?X, ws(Y)?ws(X).

Lemma 2. For an itemset X, 3Y?X, ws(Y)=ws(X), then X can't be a weighted closed itemset.

Proof From definition 4, we can have the lemma.

Lemma 3. For two itemsets X, Y(Y?X), ws(Y)=ws(X), then V  Z (Y?Z?X), Z isn't a weighted closed itemset.

Proof Let TS(X)={TiITiETDB, Ti?X} be the set of  transactions containing itemset X, then we can have that:  ws(X) Ltw; = Ltw; T;ETDB, T;ETS(X)  For Y?Z?X, we have that TS(X)-;;;2TS(Z)-;;;2TS(y), then  T;ETS(X) T;ETS(Z) T;ETS(Y)  From equation (3), we can have  (3)  (4)  ws(X) Ltw, ? ws(Z) Ltw, ? ws(Y) Ltw, (5)  Then ws(X)?ws(Z)?ws(Y), and ws(Y)=ws(X), so ws(Y)=ws(Z) =ws(X), from definition 4, we have the lemma.

Lemma 4. For item sets X, Y(Y?X), ws(Y)=ws(X), then V Z (Z?X, Y<ZZ), Z can't be a closed itemset.

Proof For Y?X, TS(X)-;;;2TS(Y), and ws(Y)=ws(X) in lemma 4, then TS(X)=TS(Y).

From the property of set, we can have    TS(XuZ)=TS( YuZ) Additionally, Z=:>X, Ya:Z, we have  TS(Z)=TS(YuZ) and YuZ=:>Z From the inference in lemma 3, we have that  ws(YuZ)= ws(Z) then we have the lemma.

From above lemmas, we can explore the weighted closed  itemsets search space in specific manner, and can prune much search space early.

Theorem 1. All weighted association rules can be derived from weighted concise associateion rule based on closed itemset.

Rationale. Weighted support of any frequent itemset can be calculated by weighted closed item set.

Proof For any itemset X, there must be a weighted closed itemset Y=:>X, and ws( Y)=ws(X), otherwise from lemma 1, itemset X must be a weighted closed itemset. Thus we have weighted support of itemset X from itemset Y or X itself.

Then for any weighted association rule X? Y, there must be two itemsets V(V=:>X) and W(W=:>Y), that ws(V)= ws(X) and ws(Y)= ws(W). We can have support and confidence rule X?Y from rule V? W. Then we have theorem 1.

IV . ENUMERATE WEIGHTED CONCISE ASSOCIATION RULES WHILE GENERATING WEIGHTED CLOSED ITEMSETS  In this section, we try to enumerate weighted concise association rules while weighted closed itemsets are being mined.

Several techniques are adopted to realize the process.

A. Weighted Closed Itemset Tree  In this section, we arrange weighted closed itemsets in tree to decrease space occupation in weighted concise association rules generation. The tree is called weighted closed itemset tree( WCIT), whichi is like FP-tree. But items in the link from one node with weighted support to root consist form a weighted closed set while node without weighted support doesn't.

f:2  Figure I. Weighted closed itemset tree  Then we have following property.

Property 1. One node without weighted support must have  descendant nodes.

In the weighted concise association rules generation, we can  index weighted closed itemsets or just candidate ones. If the tree is too large to be stored in memory, we can serialize it in external storage partially by branches.

B. Mining Weighted Clsoed Itemset Directly in Specific Order Under Weighted Support Framework  In order to gear to mine the weighted concise association rules simultaneity, we enumerate weighted closed item sets in specific order.

We assume that there is a partial order on itemset 1, denoted  as -<. Without loss of generality, we assume in the remainder of  the paper -< is the ascending supports order of items in 1. During the mining process, weighted closed itemsets will be enumerated according to partial order on item set 1 . And duplicate search space will be pruned at the same time.

In this section, we exploit the conditional weighted closed set [10] to facilitate the mmmg process, is denoted as CWCS(iJ,i2, . . ?  ,ik)' while following conditions are satisfied:  1) ik-< ... -<i2-<i) ; 2) VXECWCS(i),i2, ? ? ?  ,ik) such that 3 TcTDB,  XU {iJ,i2'" .,ik}cT;  3) Let im be the largest item in X, then im-<ik ; 4) CWCSO is the conditional weighted closed set of0.

First transactions' weights in database are calculated. Then  they are projected into the conditional weighted closed set as the pattern grows.

First, we initialize CWCSO. We eliminate all the items whose weighted support is less than r; in all transactions and insert item sets left into CWCSO. If there is a same item set, then eliminate it and update weight of the other, otherwise initialize its weight. Then for every frequent item im in a CWCS(iJ,i2, ... ,ik)' we do as follows: For every item set t containing im in CWCS(i J,i2, . . ?  ,ik)' we collect all the frequent item in in t where  in-<im, as a new itemset to be inserted into CWCS(i),i2, ? ? ?  ,ik,im).

Then we set CWCS(i),i2, ? ? ?  ,h) to 0. With the mining process recursively going on, all the conditional weighted closed sets are initialized.

But the weighted closed sets can be generated in different order. We must choose one to facilitate weighted concise association rules generation. Generally the itemsets can be enumerated in depth-first order as following.

Figure 2. Itemset search space with four items  Itemset search space is traversed as following: -{a} -{b}, {b,a} -{ c}, {c,a}, {c,b}, {c,b,a} We call it in right-depth-first order, in which latter items  are always respected first, just as following: -{d}    -{ c}, {c,d} -{b}, {b,d}, {b,d}, {b,c,d} In right-depth-fust mining process, the items nearer to root  are always dealt with fust. For an item in in CWCS(iI,i2, ... ,ik),  we assume all CWCS(i),i2, ... ,ik,im)(in-<im-<ik) have been dealt  with, then for every im (in -<im -<ik), we do WeightedChecking(CWCS(iJ,i2, ? ? ?  ,ik,in), CWCS(iJ,i2, ... ,ik,im)).

After all items in CWCS(iI,i2, ... ,ik) have been dealt with, we do as follows: for every item ie in CWCS(iJ,i2, ... ,ik,in), ie is inserted into every element of CWCS(i),i2, ? . .  ,ik,in), then elements of CWCS(iJ,i2, ... ,ik,in) are removed to CWCS(iJ,i2, ... ,ik)'  C. Enumerating Weighted Concise Association Rules Based on Weighted Closed ltemsets  In this section, we present the general mining method, which can generate weighted concise association rules while weighted closed item sets are being enumerated as in Figure 3.

Through exploiting WeightedChecking technique and right? depth-fust mining order, the proposed algorithm prunes item set search space efficiently and integrates weighted closed item sets and rules enumerating process properly.

For the given database and minimum support threshold ?, all the weighted concise association rules based on closed itemsets can be get by calling procedure WeightedConciseRulesEnumerate () as in Figure 3.

Procedure WelghtedConclseRulesEnumerate(a) (Here a re resents i ,i" . . .  ,i i -<. .. -< i,-< i . reca cu ate a weig te support 1 Wit t e new occurrence  frequencies in CWCS(a); 2. if(all support(i)<() f 3. set CWCS(a) =O:{0}; 4. return; 5. } 6. for item i=max to min contained in CWCS(a) do { 7. if(support(i) ? 0 { 8. Rtoj ? ct item set t I.n CWCS(a) to CWCS(a, i); 9. WelghtedConclseRuiesEnumerate(a, i); 10. for j=i+ 1 to max WejghtedChecldng( CWCS( a,i),  CWCS(a,j?;  I b :M there is an item i in CWCS(a) and support(a)= support(i? 12. set CWCS(a )=RS(a)=0; 11. else set CWCS(a) =0; RS(a)={0? m}; 12. for(item i=max to min contained in CWCS(a? { 13. for(every item set is in CWCS(a,i? set  CWCS( a)=CWCS( a) U {is U {i) } ; 14. serialize Y={ a} U ISU (i) into WCfT; IS. fore every subset sseY) 16. generate rule S? YWlth confidence w.s(}j/ w.s( A);  }}  Figure 3. Pseudo code for enumerating and exactly checking method  Lemma 5. When a weighted closed itemset Y is generated, all weighted concise rules x=> Y (XcY) can be enumerated.

Proof In procedure WeightedConciseRulesEnumerateO, itemset search space is traversed in right-depth-fust order. Then we can have that all the subsets have been mined when a itemset is generated. We have the lamma.

Theorem 2. After WeightedConciseRulesEnumerateO is executed, all the weighted concise association rules based on closed itemsets can be get.

Proof First, the proposed algorithm can filter all weighted closed item sets throught exploiting WeightedChecking technique.

Second, from lemma 5, we can see that all weighted concise rules x=> Y (XcY) can be enumerated when a weighted closed itemset Y is generated. We can enumerate the rules simultaneously.

D. Weighted-Suffix-Projection: Mining Weighted Closed ltemsets Directly  Weighted Suffix Projection Property: When an item in is concerned, we can tell whether current itemset is closed by projecting larger items than in in its suffix link through adjusting its descendant linked branches. After all the descendant linked branches are combined, only the items with the same weight of item in are linked to its suffix link.

Weighted Suffix Growth Optimization: In the right-depth? fust mining process, the larger items are always considered first.

For items i3 -<i2 -<i J, if WS(i3) in CWCS(i I) is equal to that in CWCS(i I, i2), item i3 need not to be considered in CWCS(i I)' And item i3 needn't to be projected on larger items in suffix links.

From above two main optimizations, we can just tell whether an weighted item set I is closed through respecting the suffix of the minimum item in I. Additional calculation and space are not needed.

Example 1. Given the transaction database TDB with the item weight settings, the minimum weighted support threshold ?I =0.2 and confidence threshold ?2 =0.3, the created global FP-tree like structure is shown in Figure 4. Item e is removed for its support is below ?. The ascending support order on I is  b-<c-<e-<a-<d-<f.

I?T?ID?I?it?e?m?s-'l--w -s-'lrli?te-m'l-w-e??'ht'l-su- p-p-or?tTI--w-s-'1 100 c,e 1.1 a 0.4 0.375 0.3178 200 a,b,c,e 0.8 b 0.6 0.75 0.7115 300 b,c,d 0.9 c 1 0.625 0.6553 400 b,c 0.8 d 1.1 0.125 0.1320 500 a,b 0.5 e 1.2 0.5 0.5379 600 b,f 0.95 f 1.3 0.125 0.1395 700 b,e 0.9 800 a,c,e 0.8667  Figure 4. Transaction database TDB and weight settings  Figure 5. data structure created for CWCSO  We can get following weighted closed item sets as Figure 6.

{a}, {b}, {c}, {e}, {b,c}:0.3667, {b,e}:0.2494, {c,e}:OA059,  {c,e,a}:0.2445.

Figure 6. WCIT for generated concise item sets  And we get weighted concise association rules based on weighted closed itemsets as following:  {b}?{b,c}:0.5154, {c}?{b,c} :0.5154, {b}?{b,e}:0.3505, {e}?{b,e} :0.4637 {c}?{c,e} :0.6194, {e}?{c,e}:0.4637 {c }?{ c,e,a} :0.3731, {e}?{c,e,a} :0.4545 {a}?{ c,e,a} :0.7694, {c,e}?{ c,e,a} :0.6024 {c,a}?{ c,e,a}: 1, {e,a}?{ c,e,a}: 1 We can see that count of weighted concise rules is larger than  that of weighted closed itemsets. After attaching weights to itemsets, the mining result is more reasonable in real applications than traditional ones. Additionally the number of useless concise itemsets and rules generated decreases greatly. And all general association rules can be derived from weighted concise ones.



V. EXPERIMENT AL RESULTS  In this section, We conduct experiments on public simulated data sets.

il 300000 ? 250000 j 200000 ? 150000  ?WcighlcdConciseRulc -"'-Wcighl;dao""d h?msct  Figure 7. Size of rules and closed item sets generated comparison  ldin;up??)  Figure 8. Runtime comparison  The target platform is a Lenovo PC equipped with 2.6G clock rate CPU and 1024M main memory. The operation system is WindowsXP Professional. The proposed algorithm is implemented in C++. Tested datasets include mushroom, chess, pumsb, kosarak, TlOI4DI00K, which can be download from UCI Repository [9] or Frequent Item set Mining Implementation Repository. Here we just demonstrate the results on mushroom   when mmmg general associatIOn rules and weighted concise association rules under specific weights setting. Mushroom dataset contains all kinds of mushroom information with different properties which decide whether this kind of mushroom is poisonous. When attaching hight weight to specific properties, the corresponding properties are more likely to be mined.

Following figures shows the test results.

From above results, we can see that weighted concise association rules generation consumes no more time than just weighted closed item sets generation only. But it can derive more reasonable result than traditional ones.



VI. CONCLUSION  In this paper, we proposed a method for mining weighted concise association rules effectively. Based on specific search space exploring order, we gear rules generating process to item sets exploring process properly, and derive all rules while enumerating closed item sets concurrently. It can derive more reasonable results than general ones in real circumstance, but with not much time consuming. The test results show that the algorithm has good time scalability.

