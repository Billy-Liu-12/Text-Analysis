A Study on the Mining Algorithm of Fast Association Rules for the XML Data

Abstract   It presents an efficient mining algorithm FreqtTree for discovering all frequent patterns from XML data, and then considers mining global frequent patterns from XML data in distributed environment in this paper. First of all, the XML files are transferred to DOM tree, and then it mines all the frequent patterns from the DOM tree. It?s a high efficient algorithm because it adopts the right extension technology and scans the DOM tree only one time. After that, it describes the distributed association rule data mining algorithm DFreqtTree based on DOM tree. At last, this algorithm is implemented and analyzed by Java language.

1. Introduction   With the extensive use of Internet, XML data is greatly increased. How to mine the potential useful knowledge in large amounts of XML data is the matter of particular concern to the data mining research.

D.Braga et al. propose that some algorithms such as XMINE algorithm can be applied in the association rule mining of XML data. In these algorithms, XML data shall firstly be transferred to the relational table, and then the association rules shall be mined based on the relational table, and lastly the mined rules shall be transferred to the corresponding XML format. This method requires that XML data must have a certain structure, thereby limiting the scope of XML data?s application. This paper proposes the incremental algorithm FreqtTree for discovering all frequent patterns from XML data and explores the association rule mining of XML data in the database environment.

2. Frequent pattern based on DOM tree   Fig.1 is the DOM-tree D of a file. When D={V, E}, { ,..., }i nV v v=  is the vertex set of the DOM tree and  1{ , | , }j i iE v v v v V= < > ?  is the edge set of the DOM tree. The node structure of the DOM tree is defined as:  Definition 1: Supposing that in the DOM- tree { , }, ,D V E u v V= ? , u is the ancestor node of v and the path length from u to v is P, then u is the ancestor p of v, which can be represented by ( )pD v? .

By definition, 0 ( )D v?  refers to the v node and  1 ( )D v? refers to the parent node of the v node.

Definition 2: Supposing that in the DOM-tree { , }T TT V E=  and the DOM-tree { , }D DD V E=  the  conditions  ,(1) ;(2) , , _T D i j T i j TV V v v V v v E? ? ? < >?  is satisfied and then ,i j Dv v E< >? , the tree D includes the tree T or the tree T is the subtree of the tree D, written T D? . When satisfying T D? and D T? , the tree T is equivalent to the tree D, written T=D.

Figure 1. The DOM-tree D of a file   DOI 10.1109/ICCSIT.2008.89    DOI 10.1109/ICCSIT.2008.89      Definition 3: Supposing that in the DOM tree T={V  ?E} the tree T is implemented by ?preorder traversal? means and the last node obtained is called the right- most leaf node, written r1eaf(T). The path from the root node to the right-most leaf node is called the right- most branch of the tree T.

Definition 4: Supposing that in the DOM tree T [v=r1eaf(T)? 0?p<level(v)], 1eve1(v) expresses the level number of the node v, then the ( , )pnewp v extension of the tree T means that a new node pnewv  added on the node ( )  p T v?  can be used as  the rightmost child.

article  author  Frank  article  author year  Frank  (a) Tree T ?b) Extension of Tree T (2,?year?) Figure 2. An example of the ( , )pnewp V  extension of  the tree T   Supposing that the tree T is shown as Fig.2(a) and the node v of the label ?Frank? is the rightmost leaf node of the tree T, i.e. v=r1eaf(T); and if the newly- added node pnewV  is the node of the label ?year? when p=2, the obtained 2 ( )T v?  is the node of the label ?article? and pnewV  added on this node is used as its rightmost child; then, the (2??year?) extension of the tree T is shown as Fig. 2(b).

Definition 5: The XML file is given to be transformed into the DOM-tree D. Supposing that the tree T is the subtree of the tree D (T D? ), then the support number of the tree T in the tree D equals to the number of the tree T which the tree D contains, written T.sup. The support degree of the tree T in the tree D equals to the ratio of the support number of the tree T to the total number N of the nodes of the tree D, written Support(T), i.e. Support(T)=T.sup/N ?100%.

When the threshold value of the minimum support degree (minSup) has been given and if Support(T)?minSup, then the tree T is the frequent pattern of the tree D; if the total number of the nodes of the tree T is k, then the tree T is called the frequent k pattern, written Lk. The collection of all frequent k patterns is called the set of frequent K patterns, written Fk.

Definition 6: Supposing that the set of matches for the rightmost leaf node of the k pattern C in the DOM-  tree D is defined as { |ckmatch v v D= ? ?( v. l abel =r l eaf ( C) . l abel ) } ,  then the set of matches for all k patterns can be expressed as kmatch .

3. Incremental data mining algorithm FreqtTree for frequent patterns   Mining all frequent patterns in the DOM tree can be actualized by the algorithm FreqtTree. In the mining process, the algorithm ExpandTree can be used to create candidate patterns and count the support number.

Concerning the DOM tree shown in Fig.1, the process of mining frequent patterns by the algorithm FreqtTree is shown in the following:  Step 1: Traversing the whole DOM tree to gain the set of frequent 1 patterns, i.e.

1 11{F T= = ? ar t i cl e ?, =12T ? aut hor ? =13T ?Fr ank ?, =14T ?Mar k ?}.

Step 2: C2 is generated by F1 and then C2 is used to calculate the set of frequent 2 patterns, i.e. F2={T21? T22?T23}, as shown in Fig. 3.

Figure 3. The set of frequent 2 patterns   Step 3: C3 is generated by F2 and then C3 is used to  gain the set of frequent 3 patterns, i.e. F3= {T31, T32, T33}.

Step 4: C4 is generated by F3 and then C4 is used to gain the set of frequent 4 patterns, i.e. F4={T41?T42}, as shown in Fig. 4.

Figure 4. The set of frequent 4 patterns   Step 5: C5 is generated by F4 and then C5 is used to  gain the set of frequent 5 patterns, i.e. F5={T51}, as shown in Fig. 5.

Figure 5. The set of frequent 5 patterns   The algorithm FreqtTree shall firstly traverse the  whole DOM tree to solve the set of frequent 1 patterns, i.e. F1={T1?T2?T3?T4}, and the set of its matches, i.e. 1match ; then, the single nodes of all frequent 1 patterns in F1 are regarded as new nodes and the rightmost expansion technique is applied to create the set of candidate 2 patterns, i.e. C2.  When calculating the support number of C2, the incremental counting method is applied to calculate the support number of C2 according to the rightmost leaf node stored in the 1match . When k>2, the solved set of frequent (k- 1) patterns (i.e. Fk-1) is applied to determine new nodes used for expanding; as to any expanded node on the rightmost branch of frequent (k-1) patterns (i.e. Lk-1), the new node pnewv ? {v|(v.1abel=u.1abel)  1 1 1 1 1( ) ( )k k ku L L F? ? ?? ? ? ? ? (parent(u).label= Ev .l  abel)} creates a small number of candidate k patterns.

The algorithm Freqt in the literature [65] uses the nodes of all different identifiers of the whole DOM tree as the new nodes for expanding each frequent pattern, which creates a huge number of candidate patterns.

4. Mining algorithm of association rules based on the DOM tree   The mining algorithm of association rules based on the DOM tree applies the distributed XML database based on global and local site patterns. The global site and the local site work coordinative to complete the global association rule mining of the XML file. The mining task of the local site is to provide the global site with the set of the local candidate patterns (i.e. ikG ) and its support number on the local site; the mining task of the global site is to collect the local candidate patterns (i.e. ikG ) sent by each local site and calculate the global frequent patterns (i.e. kL ). As the global and local site patterns are applied, the communication cost O (n) is required when the system transfers candidate patterns and their support numbers; this can significantly reduce the communication cost and enhance the efficiency of the mining system.

The mining algorithm of association rules based on the DOM tree applies the iterative method to solve the global frequent patterns, and the process of the k-th iteration is described as follows:  (1) The local site (1 )iS i n? ?  applies the algorithm ExpandTree  ( 1) ( 1)( , ,& ,& )  k i k k i k iL match G math  ? ?  to create the  local candidate k patterns (i.e. ikG ); ( 1)kL ?  is the set of  the global frequent ( 1)k ?  patterns and ( 1)kimatch ?  is the set of ( 1)kL ?  matches for the DOM tree on the  local site iS . If i kG  is blank, then iS  ends the mining  task, otherwise iS  continues the mining task; (2) For any ikX G? , calculate the local support  number .supiX  and create the local frequent k patterns, i.e. kiL ;  (3) The local site sends ikG  and its local support number to the global site G;  (4) The global site G collects ikG  from the local site and calculates the global frequent k patterns and its support number; then, the global site G sends kL  back to each local site, returning Step (1).

5. Experimental results and performance comparison   To test the performance of the algorithm FreqtTree, this paper applies Java to the algorithm FreqtTree. In the first group of experiments, the total numbers of the nodes of the DOM tree that have been taken are 80305, 125244, 160183, 203222, and 241865, respectively; the support degree is 0.04, and the run time of the algorithm FreqtTree and the algorithm Freqt is tested.

In the second group of experiments, the total number of the nodes of the DOM tree that have been taken is 160183 and the support degrees are 0.01, 0.03, 0.05, 0.07, and 0.09, respectively. The result of this experiment shows that the efficiency of the algorithm FreqtTree is higher than that of the algorithm Freqt.

6. Conclusions   According to the potential application background of the data mining technology research and the in- depth analysis of the association rules mining and the updating algorithm, for the data mining system of the global and local site patterns, this paper proposes the     mining of the constrained frequent itemsets and the updating algorithm to mine association rules that users are interested in. This paper also proposes the incremental algorithm FreqtTree for mining frequent patterns in the XML data and explores the association rules mining of the XML data in the database environment.

7. References  [1] Fayyad, U., Piatetsky-Shapiro, G., & Smyth, P., ?From data mining to knowledge discovery: an overview?, Advances in knowledge discovery and data mining, Cambridge, MA, USA: AAAI Press/The MIT Press, 1996, pp. 1?30.

[2] Agrawal R, Imielinski T, Swami A, ?Mining association rules between sets of items in large databases?, Proc. ACM SIGMOD Intl. Conf. Management Data,1993.

[3] Agrawal, R., & Srikant, R., ?Fast algorithms for mining association rules?, Proceedings of the 20th International Conference on Very Large Databases, Santiago, Chile,  Expanded version available as IBM Research Report RJ9839, [4] Fukuda, T., Morimoto, Y., & Morishita, S., ?Data mining using two-dimensional optimized association rules: scheme, algorithms, and visualization?, Proceedings of the 1996 Management of Data, 1996, 12?13.

[5] Chris Evans, ?The effectiveness of m-learning in the form of podcast revision lectures in higher education?, Computers &Education, 2007, doi: 10.1016 /j.compedu. 2007. 09. 16.

[6] Wu zhaohui, ?Association rule mining based on simulated annealing genetic algorithm?, Computer Applications, Vol.25, 2005, pp.1009-1011 [7] Li Gao, Shangping Dai, ?Using Genetic Algorithm for Data Mining Optimization in an Image Database?, Fourth Discovery, 2007 [8] Gao Li, Li Dan, Dai Shangping, ?A mining Algorithm of constraint based association rules?, journal of Henan University, Vol.33, 2003, pp.55-58 [9] Muhlenbein and Schlierkamp-Voosen D., ?Predictive Models for the Breeder Genetic Algorithm: I. Continuous Parameter Optimization?, Evolutionary Computation, 1993, Vol. 1, No.1, pp. 25-49.

