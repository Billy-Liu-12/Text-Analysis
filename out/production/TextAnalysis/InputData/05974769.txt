An Intrusion Detection Method Combined Rough  Sets and Data Mining

Abstract?In order to improve the detection efficiency of intrusion detection and reduce false alarm, an approach combined rough sets and data mining is proposed to enhance the traditional intrusion detection methods. First, collected data is classified and preprocessed by normalizing the value variables and discretely processing the nominal variables, an attribute reduction to the result set can be made based on Pawlak attribute weights Rough Set Algorithm with characteristics of the property up and down approximation set.

According to attribute reduction, association rules can be generated which satisf  a certain degree of confidence, then imported into the rule set. Experiments show that the detection approach combined rough sets and data mining has improved the detection efficiency above 20%. The detection rate is almost linear with the number of intrusions.

Keywords-component; Intrusion Detection; Pawlak attribute weights Rough Set; attribute reduction; data mining  I.

[1]        II.

A.

K=(U,S) U  Card(U) S U S U  ? (U)=U / S  RED U U  S ??S P P P U P  IND(P) S S=(U,  A, V, f) S A Va a V  Aa aV  ?  A=C D C={?|??C}  ?j ? C(1? j  m) C D={d d?D} C D= C D C  D C D S DT           B.

S={Si Si ? Userdata or Actdata} v Map  < R,v> R={r|Wi Ci} K={k i |k i ? IDR_Base}  1) S  a0 A=A- a0 (Decision Table, DT)  2) n for i=1 to n do  aS  iw  End do DT  S   n for i=1 to n do  S ai DT S'=RED(S)  Card (ai ) Let S'= S If (Card (S) = Card(S - ai) then delete (ai) end If End do  r0 R=R- r0 R={r|Wi Ci} 3)  L  L       <R,v>  K=K+R   If (Check (ri) = = true or GetNewRule () )  Then K = K + ri; Else if (Check (ri) = = false or DeleteRule () )  Then K = K - ri; End if    C.

1)  UNIX Linux API Libpcap  Libpcap API Libpcap BSD  BPF Berkeley Packet Fliter Windows Windows   2)  10 1     ? 1 Tcp http SF 181 5450 66 7 ? Normal 10 2 Tcp http SF 239 486 33 14 ? Normal 3 3 Tcp http SF 354 1752 21 19 ? Normal 45 4 Tcp http SF 214 1495 61 28 ? Normal 0 5 Tcp telnet SF 308 445 13 19 ? Normal 13 6 Tcp Private REJ 0 0 2 0 ? Worm 0 7 Udp telnet SO 345 21 2 15 ? Worm 7 8 Udp Private SF 4 0 4 13 ? Spy 19 9 Tcp Private SO 0 0 5 2 ? Worm 0 10 Tcp http SF 54540 8358 41 26 ? Xlock 342 11 Tcp http SF 54540 8314 58 0 ? Xlock 0 12 Tcp IRC RSTR 26280 1460 65 13 ? Xlock 11 ? ? ? ? ? ? ?  ? ? ?       1/20000 1/5000  1/2500 1/500 1/125 1/10    Roseta BROrthogonalScaler    Pawlak            1 1 1 1 2 3 1 1 2 1 1 1 2 2 1 1 3 2 4 3 1 1 1 1 4 1 3 2 1 1 2 3 5 2 3 4 2 2 1 3 6 1 1 3 3 3 1 2 7 1 3 4 1 1 2 4 8 2 3 3 1 1 1 4 9 1 1 3 3 3 1 2 ? ? ? ? ? ? ? ?  3)         1 {1} {1} {1}  {6}  2 {2} {2} {2}  {7}  3 {3} {3} {3}  {8}  4 {4} {4} {4}  {9}  5 {5} {5} {5}  {10}  6 {6}    {11}  7 {7}    {12}  8 {8}  9 {9}  10 {10}  11 {11}  12 {12}  3 1  1 6  4)      Reduct Support Length  { } 100 1  { b, c, f} 100 3  { b, d, f} 100 3  { b, c, e} 100 3  { a, b, c} 100 3  { b, c, f} 100 3  { b, c, d} 100 3 4 b,  d, f AND  100 3 5)      6)  Rule set 12 0.9 0.8 0.8 0.7 0.6 0.8 0.9  0.5 0.7 0.6 0.8 0.9  III.

A.

Windows Sever 2003 Inter  Pentium CPU2.4 GHz 1.0 GB Visual C++ 6.0 Rose2 Rosetta                 50 100 120 150 200 250  /s   NO. (No. =>Rule) LHS Support  RHS Support  RHS Accuracy  LHS coverage  RHS Coverage  RHS Stability  LHS Length  RHS Length  1 (1)  (Normal) 1 1 1.0 0.083333 0.2 1.0 1 1 2 (2)  (Normal) 1 1 1.0 0.083333 0.2 1.0 1 1 3 (3)  (Normal) 1 1 1.0 0.083333 0.2 1.0 1 1 4 (4)  (Normal) 1 1 1.0 0.083333 0.2 1.0 1 1 5 (5)  (Normal) 1 1 1.0 0.083333 0.2 1.0 1 1 6 (6)  (Worm) 1 1 1.0 0.083333 0.333333 1.0 1 1 7 (7)  (Worm) 1 1 1.0 0.083333 0.333333 1.0 1 1 8 (8)  (Spy) 1 1 1.0 0.083333 1.0 1.0 1 1 9 (9)  (Worm) 1 1 1.0 0.083333 0.333333 1.0 1 1 10 (10)  (Xlock) 1 1 1.0 0.083333 0.333333 1.0 1 1 11 (11)  (Xlock) 1 1 1.0 0.083333 0.333333 1.0 1 1 12 (12)  (Xlock) 1 1 1.0 0.083333 0.333333 1.0 1 1 ? ? ? ? ? ? ? ?  ?  B.

50 100 120  150 200 250  20%               IV.

