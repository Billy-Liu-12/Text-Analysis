A Research about Independent Tasks Scheduling on  Tree-Based Grid Computing Platforms*

Abstract-Task scheduling has been one of the hot and difficult problems in grid computing, it is a big challenge to design an efficient scheduling algorithm. This paper discusses the problem of independent tasks scheduling on tree-based grid computing platforms, a small heap tree (virtual resource tree) model was proposed and on the model we propose a tasks scheduling heuristic algorithm based-on linear programming. In this algorithm, we consider the computing power and bandwidth for each node in the model and assign task for each node in an integrated manner. The algorithm analysis shows the proposed algorithm is rational and effective.

Keywords-grid; task scheduling; small heap tree; linear programming; heuristic algorithm

I.  INTRODUCTION In the grid system, tasks scheduling is an important part of  it. According to the tasks information, tasks scheduling should make some appropriate strategies to assign the different tasks to the appropriate resources node to run it. The target of the grid tasks scheduling is to achieve optimal scheduling and to improve the overall throughput of grid system. Reference [1] described the characteristics and the main objective of grid task scheduling. Reference [2] discussed the complexity of independent tasks scheduling in the tree-based multi-processor computing platform. In reference [3], a tree-Petri model for grid resource scheduling is presented. References [4-5] discussed the tasks scheduling problem in the tree-based grid computing platforms, and the outcome of the simulation in [4] proved that the tree structure can simplify the implementation of network platform and reduce the communication complexity of the nodes to facilitate the management of grid resource. In reference [5], the author analyzed the independent tasks scheduling problem in the tree-based grid computing platforms, turn the independent tasks scheduling into linear programming problem. And based-on the linear programming, two demand- driven and dynamic heuristic algorithms for task allocation are proposed.

According to the gird task scheduling goal in [1], and based-on the tree-based grid computing platforms, a small heap tree for virtual resource model was proposed, using the model, we proposed a heuristic algorithm for task allocation. In this algorithm, the computing and bandwidth of the node was considered in the model in an integrated manner.



II. TASKS SCHEDULING  ON TREE-BASED GRID COMPUTING PLATFORMS  A. A Tasks Scheduling Model on Tree-based Grid Computing Platforms Let tree structure as a communication model in the grid  computing environment, this can simplify the realization of grid computing, reduce the complexity of the node communication. Because in the model, each node is only need to communication with the father node and the son node, root node to each node has only one router [5]. Consider of these characteristics on the tree-based grid computing platforms, we proposed a small heap tree for virtual resource model.

According to the computing power of each node on the tree- based grid computing platforms (the computing power of a node is measured by the time to execute a unit of the task, the computing power of a node is more strong, it takes less time to execute a unit of the task), hierarchically traverse the tree- based platforms to build a small heap tree for virtual resource model dynamically. The model features as follows:  ? Consider costs of the task relocation, it takes time to transfer the task.

? Consider the nodes in the tree-based grid computing platforms can communication with each other. When we create the virtual resource model, transfer a unit of task in the small heap tree to obtain the relative communication capabilities between the father nodes and the son nodes.

? The tasks are independent to each other.

? One task can only be completed by one node; one node can only compute one task at one time.

? Single-port master / slave mode task scheduling.

? All the tasks import from the root node.

A small heap tree virtual resource model is shown in Figure 1; it?s a complete binary tree.

*The work was supported by the National Natural Science Foundation of China (NSF) under grants (No. 60773211, No. 60970064), Program for New Century Excellent Talents in University, China (NCET-08-0806), and the National Science Foundation of  Hubei Province under Grant No.2008CDB335.

Figure 1. A small heap tree virtual resource model  The symbols in Fig.1 are described below:  ? P0?P1???Pk-1 indicate the nodes in the virtual resource model.

? c0?c1???ck-1 indicate the computing power of nodes, the time cost to execute a unit of task.

? t1 ? t2 ? ? ? tk-1 indicate the communication capabilities between the father node and its son nodes, the time cost to transfer a unit of task.

xi is defined as the number of task which is assigned to the Pi node, so the Pi node will take cixi time to complete the xi tasks, and will take tixi time to receive the xi tasks; M is defined the total number of the tasks which need to scheduling, T is defined the time to complete all the tasks.

Based-on the tree-based grid computing platforms, the independent tasks scheduling can be turned into the linear programming problem [5], some symbols about linear programming equations as follows:  ? xi is the number of task which is assigned to a node, and M is the total number of the tasks, so we can get (1).

? The number of assigned tasks(xi) for each node should no more than the total number of the tasks M, so we can get (2).

? The time of the root node to execute the assigned tasks should no more than the total tasks? completion time, so we can get (3).

? The time of each node to receive and execute the assigned tasks should no more than the total tasks? completion time, so we can get (4).

? Each sub-tree has a bandwidth constraint, so we can get (5). For example, the time of the root node spend to transfer all the tasks should no more than the total tasks? completion time T.

? ? ? ?  ? ? ?  ?  ?  ? ?  ?  ? ? ? ?  ? ? ? ?  ? +   jt Zj Yp  pj Txx j    Z0 is a node set which contain the root node?s son nodes,  Yj is a node set which contain the node behind node Pj, the number of the tasks which root node  transfer to its son nodes is ? ? ?  ? ? ? ?  ? + ?  ? jYp pj xx , xj is the  number of tasks which the node Pj would compute,  ? ? jYp  px is the total number of tasks that the node Pj?s  descendants nodes should compute, M, T, xi, ci, Yj all are integer. So the linear programming equations as follows:  ? ? ? ? ? ?  ?  ? ? ? ? ? ?  ?  ?  ? ? ?  ?  ?  ? ?  ?  ? ? ? ?  ? ? ? ?  ? +  ?  ? ?????  =  ? ?  ?  ?  ? ?  ?  =  ?  =  jii  Zj Yp pj  k  i ii  i  k  i i  YcxTM  Txx  Tcx  Tcx kiMx  Mx  j  ????)6(  t)5(  .)4(  .)3( 10,0)2(  )1(   j         In the above equations, M, tj, ci, Yj  are known parameters, xi is a variable, Minimize T is the objective function.

B. An Example of Independent Tasks Scheduling on the platform For example, a tree-based grid computing platform is  shown in Figure 2,  n0  n1 n2  n3 n4   6 5  7 10   1 3    Figure 2. A tree-based grid computing platform  Based-on the platform in Fig.2, a small heap tree can be created. The virtual resource model based-on Fig.2 is shown in Figure 3:   Figure 3. The virtual resource model (small heap tree)    In the above model, the set of the node computing power C={5, 7, 6, 8, 10}, the set of the bandwidth t={1, 2, 1, 3}.

Using the above linear programming to solve the tasks scheduling problem, with Lingo tool, when M=8, the optimal result is {x0,  x1, x2, x3, x4}={2, 2, 2, 1, 1}, Minimize T=15; when M=50, the optimal result is {x0,  x1, x2, x3, x4}={15, 11, 13, 4, 7}, Minimize T=80. Minimize T to meet (T, x0, x1, x2, x3, x4  are integer):  ? ? ? ?  ?  ? ? ? ?  ?  ?  ?+++ ?++  ?++ ?+  ?+ ?  =++++  Txxxx Tx  Tx Tx  Tx Tx  Mxxxxx         4221)7( 3110)6(  118)5( 26)4(  17)3( 5)2(  )1(

III. HEURISTIC TASKS SCHEDULING ALGORITHM BASED-ON SMALL HEAP TREE MODEL  According to the linear programming model above, a heuristic tasks scheduling algorithm based-on the small heap tree model was proposed. In this algorithm, using the linear programming model to get the assigned task number for each node, then considered the computing and bandwidth of the node in the model and in an integrated manner to assign task for node. For each non-leaf node, we make the following deal: when a son node requests task from the father node, first checkout whether it can accept more task, if yes, assign a task to it; when more than one nodes request task, checkout their task number and select the best node to assign a task to it.

Because bandwidth has a greater impact on task scheduling than computing power [5], so when select the best node we adopt the following strategy: first, compare the bandwidth between the son nodes, if they have the same bandwidth then select the node which computing power is more strong, else select the node which bandwidth is more wide. The heuristic task scheduling algorithm code described as follows:  Procedure task_assign_OPCHATA() CreateHeapTree()      //create the small heap tree  PreAssign()    //using the linear programming model to pre-assign task to each node  While(Receive_Task())  //when receive task from the father node  Add_task(Queue)    //put the task into the queue End While While(Receive_req())  //receive the task request from  son node Add_req(Queue_Req(Px)) //put the task request into  the request queue End While  If(Exist_task(Queue)) //task queue is not null If(array(Pi)>0)   //node Pi can accept more task  Execute_task(Queue) //execute one task in the task queue  End If Select_best(Queue_Req (Px))  //select the best node  from the request queue If(array(Px)>0)  // node Pi can execute one more task Trans_task(Px)  //transfer a task to node Px Del_req(Queue_Req (Px)) //delete node Px from the  request queue End If Else   //send the task request to its father node Send_req(Pi) End If  End The code of Select_best() function:  Select_best(Queue_Req(Px)) {  Compare_bandwidth()   // compare the bandwidth between the son nodes  If(bandwidth_is_equal())  //they have the same bandwidth  Compare_compute() Select_maxCompute()  Else Select_maxBandwidth() EndIf  } CreateHeapTree() was used to create a small heap tree  based-on the computing power of the nodes in the tree-based grid computing platforms. In the PreAssign() function, using Karmarkar algorithm to solve the linear programming equations, so that to get the task scheduling for each node, and then put the task scheduling result into an array which is called array, such as array[i] means the number of tasks that the node Pi  would process.



IV. ALGORITHM PERFORMANCE ANALYSIS In our paper, we use the SimGrid[7] to simulate and analyse  the algorithm which is proposed. SimGrid offers a series of core functions to create and simulate the heterogeneous distributed environment[7], so it?s suitable for simulating the independent task scheduling algorithm in the grid environment.

For example, The optimal solution of the model in the Fig.3 is {x0,  x1, x2, x3, x4}={2, 2, 2, 1, 1}, the task scheduling is shown in Figure 4:   Figure 4. The  optimal solution task scheduling  The level of the solid line with arrows indicate the execute time of the task, the slash with arrows indicate the transfer of the task. When M=8, The time to complete all tasks is 18, so T=18, which is close to the Minimize T(T=15).

0  1   2   3  4   5  6  7   8   9 10 11 12 13 14 15 16 17 18  19  P0 P1 P2 P3 P4    From the Fig.4, we can get the calculate completion time(T(Pi)) of each node: T(P0)=10, T(P1)=15, T(P2)=18, T(P3)=14, T(P4)=17. The computing time of each node(Tc(Pi)) is equal to the calculate completion time minus the transfer time of each node, also we can get the computing time of each node from the Fig.4: Tc(P0)=10, Tc(P1)=15, Tc(P2)=14, Tc(P3)=12, Tc(P4)=14. Because the linear programming model doesn?t consider the node cannot transfer two tasks at one time, so the Minimize T should equal to the maximum of the computing time of each node in the model. The time of each node spend on the computing is equal to the completion time minus the transfer time, the computing time of each node is: Tc(P0)=10, Tc(P1)=15, Tc(P2)=14, Tc(P3)=12, Tc(P4)=14, so the Minimize T=max(Tc(PI))=15, this verify the correct of the model, the scheduling in the Fig. 4 is the optimal scheduling.



V. SUMMARY AND OUTLOOK Scheduling algorithm has been one of the hot and difficult  problems in grid computing. In this paper, we proposed a small heap tree model and a heuristic task scheduling algorithm. In this algorithm, we consider the computing power and bandwidth for each node in the model and assign task for each node in an integrated manner, then use the SimGrid [7] to simulate and analyze the algorithm, and get good result. But the algorithm still has some problems, such as didn?t consider the task?s computing and bandwidth requirements, the load balancing, dependencies between tasks. There are all the problems we will concentrate on next.

ACKNOWLEDGEMENTS The work was supported by the National Natural Science  Foundation of China (NSF) under grants (No. 60773211, No.

60970064), Program for New Century Excellent Talents in University, China (NCET-08-0806), and the National Science Foundation of Hubei Province under Grant No. 2008CDB335.

Any opinions, findings, and conclusions are those of the authors and do not necessarily reflect the views of the above agencies.

