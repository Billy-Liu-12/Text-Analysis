ProductRank: A Random Walk Model for

AbstractElectronic Commerce has offered a convenient way for  people to go shopping on the Internet. However, it is difficult for  Internet customers to select a valuable item from the great  number of various products available on line. When we use a  keyword and search in a EC website, the ranking algorithm of  products is usually based on statistics or simply the shop  managers preference, which does not fully exploit the knowledge  and experiences hidden in the prior daily transaction records in  the database. In this paper, we propose a novel approach to  extract the purchasing behaviour of customers who purchase the  same kind of goods, and with which we rank the products for  user personally by comparing their behaviour. We introduce our    evaluation metrics to assess the prediction accuracy of the  proposed recommendation algorithm using transaction records  of an online wine shop, the experiment results show that our  algorithm is able to produce valuable recommendations.

General TermsAlgorithms, Experimentation, Performance  KeywordsRecommendation, Random Walk

I. INTRODUCTION  The E-Commerce induced by rapid development of Internet  has greatly promoted the on-line sales. With the growth of  massive database of transaction records, the problem of  finding hidden habits and behaviour of customers has attracted  many researchers to attach increasing importance to the  research and application of E-Commerce recommendation  systems.

Recommendation systems provide advice on movies,  products, travel, leisure activities, and many other topics.

Some popular systems have achieved great triumph, such as  Google News[1], Amazon[2] and movieLens[3].

Currently, the E-Commerce recommendation systems  mainly provide three ways to help users find products to their  needs. The first one is based on semantic, which analyses  customers reviews[4], or/and require customers to express  their preference according to either certain system pre-defined  format[5, 6] or in natural language[7]. The customers  requirement may be distorted when they cannot determine the  rigorous description of the goods that they need. Due to the  limited nature of semantic analysis, using natural language  cannot meet the needs of users fuzzy and emotional shopping  psychology either. Thus, the contradiction of requirement is  prominent in such systems.

The second approach is based on association rule mining[7,  9, 10, 11, 12, 13, 14], which was first introduced by Argawal,  Imielinski and Swami[11, 12]. Most of these systems are  goal-oriented recommendation systems, which are able to  provide product-related information well, but cannot provide  real-time recommendation.

The third way is based on Collaborative Filtering [1, 2, 6,  15, 16, 17, 18]. Collaborative Filtering(CF) has been  demonstrated to be an effective framework to generate  recommendations. It identifies the potential preference of a  customer for a new product based on the information collected  from other consumers. The CF based recommendation system    involves three components in general:?A method to represent  user-user or product-product similarities. ?A method to  combine the similarities to generate a raw map of  recommendation strategies. ?A method to evaluate the  recommendation strategies to adjust the system and optimize  the performance.

However, the performance of CF based recommendation  systems is still limited. The reason is that CF cannot explore  transitive associations between products that have never been  bought together but share the same neighbourhoods. One way  to overcome the problem is to use random walk based  recommendation algorithms.

The random walk model is closely related to Googles  PageRank algorithm[19], and has been applied to the task of  text summarization [20], and question-answering [21, 22].

In this paper, our proposed model first fully exploit the past  transaction records and extract the consumers habits of  different products. Then we incorporate the information into a  random walk model, i.e., a Markov chain to analyse the  association of different kinds of products. The process is  similar to Opinion-PageRank Model in [22].

978-1-4244-7161-4/10/$26.00 2010 IEEE  Finally, we compute the similarity between the users  consuming habits and the purchasing feature of customers of  every kind of products, by integrating the similarity with the  relation between products, we calculate a score for each of the  products and rank them according to the scores.

The remainder of the paper is organized as follows. Section  2 presents the proposed model. We will discuss our evaluation  metrics and experiment results in section 3. Section 4  concludes this paper and provides possible future work.



II. PRODUCTRANK MODEL  In order to uncover the hidden habits of customers, we first  build up sets of customers by the kind of products they bought.

That is, given the set }{ iP bB = containing all products and  the set }{viVp =  containing all the products to be  recommended ( pV is a subset of pB ), that is, pB  includes  two classes of products, the first class are products in pV ,  these are potential products a user may want to buy and are  called positive products. The rest products of pB  are used to  describe the purchasing habits of positive products consumers.

Set iC  is the set of customers who have bought product iv .

Note that the intersection of two different sets, iC  and jC ,  is usually not null, for a customer may buy both product iv  and product jv . By adding up all prior daily transaction  records of the customers in a set, we got a history vector  ih ={ 1in , 2in , , ijn }for each positive product. The value  of ijn  ranges from zero to any integer, which stands for the  number of product j bought by customers in set iC .

According to the history vector, we know what and how  many products the consumers of a positive product have  purchased, the purchasing habits are hidden in the history  vectors. Secondly, we will calculate the weight for each item  of a history vector ih :  =  ?

?

=  1k  ik  ij  ij  w  ww     (1)  ijijij idffw =?    (2)  j  ij  ij  MaxFreq  freqf =   (3)  )log(  j  j  N  Nidf =   (4)  which is similar as (Ribeito-Neto and Baeza-Yates, 1999),  ijfreq  is the raw frequency that describes how often the  product jb  is bought by customers of iC , jMaxFreq  is  the maximum frequency of product jv  among all history  vectors. N is the number of history vectors, i. e. , its the  number of products in pV . jN  is the number of history  vectors in which the jn  is bigger than the threshold, during  this paper, we set the threshold to 1 for simplicity. The f factor    provides one measure of how well that product describes the  consumer behaviours of a positive product. The motivation for  usage of an idf  factor is that products which appear in  many history vectors but are not very useful for distinguishing  a users habit. For example, the buyers of flashlight usually  buy many batteries at the same time. Though the quantity sold  of batteries is large, it cannot distinguish the purchasing habits  of different flashlights consumers well. Without the idf  factor, the flashlight will be described by the quantity sold of  batteries, instead of the preference of consumers.

Therefore we got a weighted vector iW ={ 1iw , 2iw , ,  ijw  } for each of the products in pV , where ijw  means how  strong the product jb can represents the hidden habits of  customers who bought product iv .

(1) is the process of normalization. It makes the sum Si =  =1j  ijw  to be 1. It ensures that both popular products, the  products bought more often, and the other products share the  same recommendation priority. Without normalization, the  popular products rank significantly higher than the rest,  which distorts the process of describing purchasing habits.

However, sometimes the popularity is an important factor a  user may be interested in. So we introduce the ?  factor to  adjust the model.

We rewrite (1) as follows:  =  +??

?

=   )1(  k  ik  ij  ij  w  ww ??

where ?  ranges from 0 to 1. When ?  = 0, it is the same  as(1), the normalization process doesn't change. When ? =1,  the process of normalization is totally abandoned, the popular    products take advantages over the others when being  recommended as they have a much higher overall score than  the products not being bought that often.

Then we introduce how to incorporate the products into  the Markov Random Walk model, which is similar to the  opinion PageRank model [22]. We construct a similarity graph  where each node represents a product in pV . There are edges  between nodes. The edge weight between product iv and jv  is the normalized cosine similarity between iW  and jW  (we define cos( iW ? iW )=0 to avoid self transition):  )( ji WWQ ? =  =  ?

?

||   )cos(  )cos(  pV  k  ki  ji  WW  WW  As a result of this normalization, the sum  =  =?

||   1)(  pV  j  ji WWQ . If we view each product as a state in a  Markov chain, )( ji WWQ ?  is the transition probability  from state i to state j in the corresponding Markov chain. The  Markov random walk model can be used to describe the  relations between positive products.

When a customer login to the website and type in a  keyword to search something, we should first generate a  normalized history vector ch  for it in a statistical way:    ch ={ 1n , 2n , , jn }  jn =  =  ?

?

1k  k  j  n  n  kn?  stands for the number of product kb  bought by the  user.

In order to incorporate the user-product(The product here  is referred to prior consumers purchasing habits of this  product) similarity and product-product relation to rank  products for the user, we propose a ProductRank model(Figure  1) on a two-layer link graph. In our proposed model, the first  layer contains the past purchasing information, the history  vector of the user. The second layer denotes the products  relations in the Markov Random Walk model discussed above.

We denote the user-product relation as the lines between the  two layers.

Figure 1:ProductRank model  Then we compute the score for each of the product to be  recommended as follows:  =  ???+  ?=  ||   )()cos()1(  )cos(  pV  k  kikc  ici  WWQWh  WhScore  ?

?

Where ?  is the damping factor. It is a trade-off which  controls the relative contributions from user-product relation  and product-product relation.



III. EXPERIMENT  1)  Data Sets:  We collect all the transaction records of a wine shop in  taobao. com. We choose the latest 20 transaction records to be  the testing set, and the older ones to be the training set.

By analysing the training set we know which products were  bought, who the consumers are and the prior daily records of  those consumers. Applying these data to the ProductRank  model, we can get the weighted vectors for each of the  products of that wine shop and the Markov chain of those  products.

We view the customers of the latest 20 transaction records  as new customers. We collect all the past transaction records  of them, and delete the items that were bought in this wine  shop. Thus we can compute the hc  vector for these new  customers. By applying the ProductRank model with the  weighted vectors, Markov chain and the hc , we can calculate  a score for each of the products of this shop, and get a list of  products and their corresponding scores.

2)  Evaluation Metrics  As most online shops will provide no less than 20 products  in the first result page when a user search for some item using  keywords, we explicitly list the top 20 high-scored products  and their corresponding scores.

We introduce the Prediction Accuracy(PA) to represents the  performance of the ProductRank model. We compute the PA  as follows:  If some a product bought by the customer(it is the product  bought in this wine shop, which is the same product deleted  from the history vector) is not in the list, the prediction  accuracy is 0.

Instead, if the product bought by this user is in the top 20  list, the prediction accuracy of the model is calculated as  follows:  PA = 100%  MaxScore  ScoreHit  Where ScoreHit is the score of the product bought by the    customer and MaxScore is the score of the top ranked product.

We compute the PA of those twenty new customers with  varying ? (0, 0.2, 0.5, 0.8 and 1), and calculate the average  value of PA respectively.

Note that we set the ?  factor to be 0 in this paper, as we  are only concerned about how accurately the ProductRank  model can predict which items a new customer will buy.

While the performance of a recommendation system is usually  measured by how much it can improve the sales, the end user  of the system, a market manager or a customer, may be  interested to regulate the ?  factor, the trade-off between  purchasing habits and product popularity.

3)  Experiment Results:  In this section, we present the results of our experiments.

The performance is affected by the damping factor ? .

Figure 2:Prediction accuracy with varying ?

In ProductRank model, the ?  factor combines the  product-product relation and user-product relation. For lower  value of ? , we give more importance to the similarity  between different products than the relation of purchasing  habits between new customer and history customers. Figure2  curves the prediction accuracy when the ?  factor changes.

When the ? is too low or too high, the PA decreases. This  demonstrates the importance of reinforcement between two  products. When we set value of ?  to 0.5, the prediction  accuracy of this model reaches the highest point, about 0.37.

?  Figure 3 : The snapshot of a recommendation result  Figure 3 shows a snapshot of the recommendation results of  ProductRank. The bought item of the customer is Schwarzbier.

From the chart we can see that the other two top ranked  products, Dry red wine and Fenjiu wine are both with low  alcohol content, which is similar to Schwarzbier. The  latter  two kinds of wine are products that share likely neighborhoods  with the bought product, but rarely purchased together. That is,  the customers often buy snacks like peanuts together with  Schwarzbier, and the customers of Fenjiu wine and Fruit wine  may also like to buy such sort of snacks. As most customers  would not buy the three kinds of wine at the same time, the  other two products, Dry red wine and Fenjiu wine will hardly  be recommended if we use state of the art algorithms like  collaborative filtering. They are both valuable    recommendation items and can be produced by ProductRank  as we explore the transitive association between different  products. The random walk model solves the problem of  exploiting the relation between products,  which limits the  performance of CF based model a lot.



IV. CONCLUSIONS AND FUTURE WORK  This paper proposes a ProductRank model based on random  walk for personalized recommendation for the on-line shops.

The proposed model fully exploits the past transaction records  in the database to uncover the hidden purchasing habits of  consumers who bought a certain kind of products. The model  also takes the similarity of different products into  consideration, which is proven to be important by the  experiment results. By incorporating both the product-product  relation and user-product relation, the PageRank model  produces valuable personalized recommendations for users.

The PageRank model can be applied by E-Commerce  websites to produce live recommendations and provide  personalized searching results for customers as it is less  time-consuming than many other recommendation algorithms.

By recording the improvement of sales, we will also regulate  ?  factor and thus optimizing the precision.

