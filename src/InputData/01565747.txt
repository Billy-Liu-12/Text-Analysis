Suppressing Data Sets to Prevent Discovery of Association Rules

Abstract  Enterprises have been collecting data for many reasons including better customer relationship management, and high-level decision making. Public safety was another motivation for large-scale data collection efforts initiated by government agencies.

However, such widespread data collection efforts coupled with powerful data analysis tools raised concerns about privacy. This is due to the fact that collected data may contain confidential information.

One method to ensure privacy is to selectively hide confidential information from the data sets to be disclosed. In this paper, we focus on hiding confidential correlations. We introduce a heuristic to reduce the information loss and propose a blocking method that prevents discovery of confidential correlations while preserving the usefulness of the data set.

1. Introduction  Data collection is one of the major tasks of enterprises especially after the Internet revolution, which made the data collection task even easier.

Collected data is usually stored in data warehouses and powerful data mining tools are used to turn it into competitive advantage via better business intelligence. However, pervasive data collection efforts coupled with widespread usage of data mining techniques raised a lot of concerns about privacy.

This is due to the fact that confidential data mining results can now be extracted with data mining tools, or data mining models themselves can be used to discover confidential information. Therefore, privacy issues have become one of the important aspects of data mining research.

In order to preserve privacy while disclosing data sets, it must be guaranteed that not only confidential data values but also confidential knowledge within the data set which is discoverable by certain data  mining methods should be suppressed. Correlations or rules are examples of such confidential information that one can learn from the data. Within the scope of this work, we particularly concentrate on a broad category of rules, which are called association rules.

The problem of suppressing confidential association rules has been addressed in literature [1][2][3].  These approaches employ data sanitization either by distorting or blocking the data sets. The distortion approaches [2][3] introduce false values to the data sets to avoid discovery of confidential association rules. However, these false values reduce the trustworthiness and usefulness of the data sets.

Blocking approaches [1] overcome this problem by introducing unknown values denoted by ??? to the data sets. By doing so, they suppress a given set of confidential rules while reducing the side effects on non-confidential ones. However, these approaches also have certain drawbacks. First of all, they do not try to minimize the information loss. Moreover, they cause privacy breaches on the modified data set.

Actually, knowing the blocking approach employed, an adversary can infer actual values of all ?s and discover the confidential association rules.

In this paper, we modify the blocking algorithms of [1] by proposing a new heuristic in order to reduce the information loss. Besides, we put forward a new approach that overcomes the privacy breach problem of existing blocking approaches.

The rest of the paper is organized as follows: In section 2, we formally define the problem. In section 3, we present the algorithms for suppressing association rules. In section 4, we present the experimental results of the proposed approaches.

Finally, section 4 concludes the paper.

2. Suppressing Association Rules  Let I = {i1, ?, in}  be a set of  literals called items and D be a transaction data set where each transaction T is a set of items such that T I. We say      that a transaction T supports X, a set of items in I, if X T. An association rule is an implication of the form X Y, where X I, Y I and X Y = . The rule X Y holds in data set D with confidence c and support s if       1 c and         s holds. Given a data set D, a minimum support threshold MST, and a minimum confidence threshold MCT association rule mining is the process of finding all association rules whose support and confidence are above the corresponding thresholds. In this study, we aim at suppressing confidential association rules by reducing their support or confidence below predetermined thresholds, so that they cannot be mined. Formally, the problem of suppressing confidential association rules can be stated as follows:  Given a data set D, a set of association rules R mined from D with minimum support threshold MST and minimum confidence threshold MCT, and a set of confidential association rules RC such that RC R, how can we modify the data set D to form a new data set D  with as little information loss as possible, such that only the confidential rules in RC cannot be mined from D  with the same confidence and support thresholds and the original data set D cannot be reconstructed from D .

In order to solve this problem, we extend the work proposed by Saygin et al. in [1] and propose a heuristic for the confidence reduction algorithms of [1], namely the CR and CR2 algorithms, in order to reduce the information loss measured in terms of sum of Kullback Leibler distances.

Definition 1 (Sum of Kullback Leibler Distances) Given the set of items I = {i1,?,in}, the original data set D and the modified data set D , the sum of Kullback Leibler distances can be defined as  ( , ) ( || )  i i  n  org new i  SKLD D D D p p , (1)  where porgi and pnewi are the original and new probability distributions of the ith item of I respectively, and D(porgi || pnewi) is the Kullback Leibler distance between these probability distributions.

Apart from the heuristics, we propose a new confidence reduction algorithm that builds upon the modified algorithms to prevent reconstruction of the original data set by an adversary which is the major drawback of all existing blocking algorithms.

In order to reflect the uncertainty introduced into the data set with unknown data values to the support and confidence of association rules we modify their definitions. Instead of a single value for the support of  1 |X| represents the number of transactions that supports itemset X.

an itemset X, we use [minsup(X), maxsup(X)] interval where minsup(X) is the percentage of transactions that contain 1s for all the items in X and maxsup(X) is the percentage of transactions that contain either 1s or ?s for all the items in X. Similarly, instead of  a  single value for the confidence  of  an association  rule X Y, we use [minconf(X Y), maxconf(X Y)] interval, where minconf(X Y) = aaaaaaaaaaaaaaand maxconf(X Y) =                                         . In this case, a con- fidential association rule X Y can be suppressed either by decreasing the minimum support of the itemset X Y  below the minimum support threshold, or by decreasing the minimum confidence of the rule X Y below the minimum confidence threshold by a certain safety margin denoted by SM.

3. Algorithms  3.1. Modified CR (MCR) Algorithm  Similar to the original CR algorithm [1], MCR algorithm hides a confidential rule r by replacing items among the consequent of the rule, denoted by rr, with a ? in transactions supporting r. This replacement reduces both the minimum support and the minimum confidence of r. In order to reduce the information loss, we propose a new heuristic that favors an item j from rr which minimizes the sum of Kullback Leibler distances between the original and modified data sets when marked as ?. More specifically, the heuristic selects the item satisfying   argmin ( , ) ( || ) i i  n  r j j org new i  j r SKLD D D D p p , (2)  where D j is the resulting data set when item j is hidden from the current transaction. An overview of MCR algorithm is depicted in Figure 1 while the details can be found in [4].

INPUT: RC, D, MCT, MST, SM OUTPUT: D Begin Foreach rule r in RC do 1. Tr = {t in D | t fully supports r} 2. Sort Tr in ascending order of transaction size Repeat until minconf(r) < MCT?SMor minsup(r) < MST? SM  3. Choose the first transaction t Tr 4. Choose the item j from rr minimizing KL distance 5. Place a ? for item j in t and remove t from Tr 6. Recompute minsup and minconf of affected rules in RC  7. Remove r from RC End  Figure 1. MCR algorithm  ( )100 ( ) minsup X Y  maxsup X( )100 ( ) maxsup X Y  minsup X  | | | |  X Y X  | | | |  X Y D      3.2. Modified CR2 (MCR2) Algorithm  CR2 algorithm aims at increasing the maxsup(lr) without affecting the minsup(r) where lr represents the antecedent of the rule r. Similar to CR2, MCR2 finds transactions that partially support lr and do not fully support rr, denoted by T r, and increases maxsup(lr) by replacing 0 values of items of lr in transactions t T r with a ?. The replacement criterion is transaction-based since once a transaction is chosen, items to be hidden is known precisely.

Therefore, we modified the heuristic in a way to favor a transaction t from T r that leads to minimum Kullback Leibler distance when used in the suppression process. More specifically, the heuristic selects the transactions satisfying   argmin ( , ) ( || ) i i  n  r t t org new i  t T SKLD D D D p p , (3)  where D t is the resulting data set when all items of lr not supported by t are hidden. An overview of the modified CR2 algorithm is depicted in Figure 2 while the details can be found in [4].

INPUT: RC, D, MCT, MST, SM OUTPUT: D Begin Foreach rule r in RC do 1. T r ={t in D | t partially supports lr and  t doesn?t fully support rr} 2. Sort T r in ascending order of KL distances Repeat until  minconf(r) < MCT ? SM or T r =  3. Choose the first transaction t from T r 4. Place ? in t for the items in lr that are not supported by t 5. Recompute maxsup and minconf of affected rules in RC 6. Remove t from T r, recompute KL distances of  affected transactions and reorder T r 7. Remove r from RC End  Figure 2. MCR2 algorithm  3.3. CR3 Algorithm  The idea behind the CR3 algorithm is that; using only one blocking algorithm to hide confidential rules may not preserve privacy. Consider the following case: The original data set does not contain any unknown values and either RC consists of one rule or all the rules in RC are hidden using the same blocking algorithm. Then, the modified data set contains ?s all of which were 1s or 0s in the original data set. An adversary, knowing the blocking algorithm used, can reconstruct the original data set and discover all confidential association rules. In  order to overcome this problem, CR3 uses both modified confidence reduction algorithms as inline functions in an interleaved fashion so that the number of ?s replaced by each algorithm will be the same at the end.

The algorithm works as follows: As the first step, Tr and T r are built and sorted similar to MCR and MCR2 algorithms respectively. Then, the decision on the inline function that will be called is made. The function that has placed less ?s so far is always favored against the other. At the end, the function that can be run and is favored or the alternative of the function that can not be run is called as the inline function. Each inline function performs the corresponding suppression process on a single transaction. The whole suppression process is repeated until one of the threshold conditions is satisfied. An overview of this algorithm is depicted in Figure 3.

4. Experimental Results  In order to conduct the experiments we used a real market basket data set belonging to one of the biggest retailers in Turkey. The data set contained 160k transactions on 40 item-groups obtained through generalization of original items. We mined all association rules with 0.05 MST and 0.5 MCT. Then, we randomly selected 4 association rules to be confidential. We implemented the algorithms using C++ and evaluated their performance on a 2.80 GHz Celeron PC with 512 MB of memory running Windows XP operating system.

As the first performance criterion, we measured the CPU time required to suppress the set of confidential rules with varying SM values. The CPU time performances for each suppression strategy are depicted in Figure 4. Due to complex item and transaction selection criteria involving computation of logarithms, the proposed algorithms perform slightly worse compared to the original algorithms.

Next, we measured the side effects as the percentage of non-confidential rules that are lost due to suppression. The side effects for each suppression strategy are depicted in Figure 5. Since MCR2 and CR2 algorithms hide ?non-existence? of items in transactions by replacing 0s with ?s they cause the least amount of side effects. Next comes the MCR and CR algorithms, followed by CR3. Since CR3 algorithm works with a diverse set of items both from the antecedent and consequent of the confidential rules, it performs worse compared to the other algorithms.

INPUT: RC, D, MCT, MST, SM OUTPUT: D Begin Initialize NumberOf0sHidden, NumberOf1sHidden to 0 Foreach rule r in RC do  1. T r ={t in D   |   t partially supports lr and t doesn?t fully support rr} 2. Sort T r in ascending order of KL distances 3. Tr ={t in D|t fully supports r} 4. Sort Tr in ascending order of transaction size Repeat until minconf(r) < MCT ? SM or minsup(r) < MST ? SM  If   TMCR2 <>  and (NumberOf0sHidden < NumberOf1sHidden or (NumberOf0sHidden = NumberOf1sHidden and choosing MCR2 increases KLD less than MCR))  Then 5. NumberOf0sHidden += MCR2(r, TMCR2)  Else 6. MCR(r, TMCR) 7. NumberOf1sHidden ++ 8. Remove r from RC  End  Inline MCR(Rule r, item i, transaction set Tr) Begin 1. Choose item j from rr minimizing KL distance 2. Choose the first transaction t from Tr 3. Mark item j as unknown in t and remove t from Tr 4. Recompute minsup and minconf of affected rules End  Inline MCR2(Rule r, transaction set T r) Begin 1. Choose the first transaction t from T r 2. Place a ? for all items of lr that are not supported by t 3. Recompute maxsup and minconf of affected rules 4. Remove t from T r, recompute KL distances of affected transactions and reorder T r 5. Return number of items replaced with a ?

End  Figure 3. CR3 algorithm  Finally, we measured the information loss caused by the suppression algorithms in terms of sum of Kullback Leibler distances between the original  and  modified data sets. The information loss caused by the suppression algorithms is shown in Figure 6. Due to the proposed heuristic, the modified algorithms perform on the average 2% better than the original algorithms. In fact, with an original data set containing unknowns or with increasing number confidential rules this percentage tends to increase.

5. Conclusion  In this paper, we proposed a new heuristic and a new algorithm to address the major drawbacks of existing association rule suppression approaches. We modified the blocking algorithms of [1] using a new heuristic which aims at reducing the information loss so that the usefulness of the data set is preserved.

Besides, we put forward a new algorithm that avoids the reconstruction of the original data set and discovery of confidential association rules. Our experiments with a real data set showed that the proposed heuristic improves the performance of the original blocking algorithms with respect to both side effects and information loss. Moreover, with a slight performance overhead the CR3 algorithm avoids an adversary to guess the actual values of ?s and to discover the confidential association rules.

6. References  [1] Saygin, Y., Verykios, V. S., Clifton, C. Using Unknowns to Prevent Discovery of Association Rules.

SIGMOD Record, 30(4):45-54, December 2001.

[2] Verykios, V. S., Elmagarmid, A., Bertino, E., Saygin, Y., Dasseni, E. Association Rule Hiding. IEEE TKDE, 16(4), 2004.

[3] Oliveira, S. R. M., Zaiane, O. R. Protecting Sensitive Knowledge by Data Sanitization. In Proc. of the 3rd 613-616, Nov 2003.

[4] Azgin Hintoglu, A., Inan, A., Saygin, Y., Keskinoz, M. Suppressing Data Sets to Prevent Discovery of Association Rules. http://students.sabanciuniv.edu/ ~aycah/ICDM05.pdf.

