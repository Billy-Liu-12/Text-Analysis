Frequent Itemsets Mining in Network Traffic Data

Abstract?Many projects have tried to analyze the structure and  dynamics of application overlay networks on the Internet using  packet analysis and network flow data. While such analysis is  essential for a variety of network management and security tasks,  it is difficult on many networks: either the volume of data is so  large as to make packet inspection intractable, or privacy  concerns forbid packet capture and require the dissociation of  network flows from users? actual IP addresses. In this paper, an  algorithm for mining privacy preserving itemsets is proposed. On  the one hand, only maximal itemset is considered, which reduces  the number of itemsets greatly. On the other hand, the  intermediate mining results are encrypted for the security  concern. Experimental results show that the proposed algorithm  is both accurate and efficient.

Keywords-data mining; frequent itemset; privacy preserving;  network traffic data

I.  INTRODUCTION  There is a growing need for efficient algorithms to detect  important trends and anomalies in network traffic data [1, 2].

For example, finding excessive consumption of network  bandwidth caused by P2P mass flow, finding internet virus,  and finding DDoS (Distributed Denial of Service) attacks are  important security issues. As network capacities increase,  traffic analysis tools face the problem of scalability due to high  packet arrival rates and limited memory. Recently, there has  appeared a new kind of data mining researches that extract  useful knowledge from network traffic data automatically  gathered by a remote server [3, 4].

Network traffic data contain detailed information of  Internet usage for every user, which informs that a user  accesses a site at a time specifically. Thus, data mining on  network traffic data has the problem of compromising privacy  of network users. Therefore, it requires sophisticated  techniques for hiding or reforming users? private information  during a data gathering process. Moreover, these techniques  should not sacrifice the correctness of mining results.

Privacy Preserving Data Mining (PPDM), is a research area  concerned with the privacy driven from personally identifiable  information when considered for data mining [5]. Assuming  sites are semi-honest, Fu et al proposed a privacy-preserving  frequent pattern mining based on the concept of semi-join [6].

In [7], privacy preserving frequent itemsets algorithms for both  vertically and horizontally partitioned data are proposed. These  algorithms are designed for discovering the whole set of  frequent itemsets. It is well known that it can generate an  explosive number of output itemsets, which lays heavy burden  for mining traffic data. To decrease the cost of communication  among distributed sites, Kuno et al proposed an algorithm for  mining frequent closed itemsets in distributed databases [8].

Closed sets are lossless in the sense that they uniquely  determine the set of all frequent itemsets and their exact  frequency. At the same time closed sets can themselves be  orders of magnitude smaller than all frequent sets, especially  on dense databases. However, the methods emphasizes too  much the supports of itemsets so that their compression power  is quite limited. On the contrary, maximal frequent itemset can  usually reduce the number of itemsets greatly smaller than  frequent closed itemsets [9]. Thus, maximal frequent itemset is  more suitable than frequent closed itemset for large and sparse  network traffic data.

In this paper, we consider the problem of frequent itemset  mining problem in network traffic data, and propose an  algorithm for mining frequent itemsets in this environment. To  reduce the size of results, only maximal frequent itemsets are  considered. To protect the privacy, intermediate mining results  are encrypted via hashing method by different servers. The  proposed algorithm is evaluated from the perspectives of  accuracy and efficiency.



II. PROBLEM STATEMENT  A. Maximal Frequent Itemset  The problem of mining Maximal Frequent Itemsets (MFI)  is formally stated by definitions 1-4 and lemmas 1-2.

Let I={i , i  ,?, i  m } be a finite set of items and D be a  dataset containing N transactions, where each transaction t?D is a list of distinct items t={i  , i  ,?, i  |t| }, i  j ?I(1?j?|t|).

Definition 1. A set X?I is called an itemset. An itemset with k items is called a k-itemset.

Definition 2. The support of an itemset X, denoted as  sup(X), is defined as the number of transactions in which X  occurs as a subset.

Definition 3. For a given D, let min_sup be the threshold  minimum support value specified by user. If sup(X)? min_sup, itemset X is called a frequent itemset.

DOI 10.1109/ICICTA.2012.105     Definition 4. A frequent itemset is called a maximal  frequent itemset if it is not a subset of any other frequent  itemsets.

According to definitions 3-4, the following lemmas hold.

Lemma 1. A subset of any frequent itemset is a frequent  itemset, a superset of any infrequent itemset is not a frequent  itemset.

Lemma 2. A proper subset of any frequent itemset is not a  maximal frequent itemset.

B. Network Traffic Data  Network traffic data are normally gathered by a tcp/ip data  capture program such as Ethereal [10]. Table I shows an  example of network traffic data gathered by Ethereal.

TABLE I.  AN EXAMPLE OF NETWORK TRAFFIC DATA GATHERED BY  ETHEREAL  timestamp source  address  source  port  destination  address  destination  port  13:37:11.950966 180.1.1.1 36872 amazon.com www  13:37:11.954474 amazon.com www 180.1.1.1 36872  13:37:22.384472 180.1.1.1 36915 192.168.1.3 telnet  13:37:22.385327 192.168.1.3 telnet 180.1.1.1 36915    In this paper, we aim at finding maximal frequent itemsets  from network traffic data without disclosing data in each site.

So we simplify the network traffic data in the form of Table I  as those in the form of Table II. In Table II, ?out? denotes  sending and ?in? does receiving.

TABLE II.  AN EXAMPLE OF NETWORK TRAFFIC DATA RECONSTRUCTED  timestamp in/out address  13:37:11.950966 out amazon.com  13:37:11.954474 in amazon.com  13:37:22.384472 out 192.168.1.3  13:37:22.385327 in 192.168.1.3    We formulate the problem we are going to solve as follows:  Given m sites T , T  , ... , T  m , the minimum support min_sup, we  discover all the maximal frequent itemsets. We assume that a  site stores network traffic data as in the form of Table II.

A mining process should also satisfy the condition for  preserving privacy in every site. Let us denote a set of sites,  where network traffic has occurred, as E and a set of network  traffic data as I. In a mining process, an element e j in E is  opened since it participates in the mining process; Also, an  element i k in I is also opened since it should be contained in a  result of mining. However, a pair of (e j , i  k ), which says a site e  j   has been connected to an IP address i k , should not be opened in  a mining process. We define this condition for preserving  privacy.



III. THE MFITD ALGORITHM  Given n servers, {S , S  , ... , S  n }, and n pairs of encryption  keys and decryption keys, {(EK , DK  ), (EK  , DK  ), ... , (EK  n ,  DK n )}. Each site has all encryption keys but server S  i has only  a decryption key DK i (1 ? i ? n).

A. Discovery of Frequent Items  Firstly, Algorithm 1 is used for discovering all the 1-  frequent items.

Algorithm 1.

1) Each site classifies the items (i.e., the traffic data) into n  groups, {G , G  , ... , G  n }, using a hash function.

2) Each site encrypts the items in G i with encryption key  EK i (1 ? i ? n).

3) Each site sends the encrypted items in G i to server S  i+1 (1  ? i ? ??1), and the encrypted items in G n to server S  .

4) Each server performs the aggregation on the encrypted  items to obtain the number of occurrences of each encrypted  item and then picks up the encrypted frequent items. The set of  frequent items is denoted as F .

We assume that the servers in our model operate in a semi-  trusted operation model. In the semi-trusted operation model,  servers may try to acquire private data but do not cooperate  with other servers to do that. This semi-trusted operation model  is common in real environments where one wants to get the  result of computation but is not willing to offer one?s own data  to others.

B. Discovery of Maximal Frequent Itemsets  After finding out F , we discover maximal frequent  itemsets site by site. One of n servers S i is elected as a principal  mining server, then for others. The mining process in one  server is described in Algorithm 2.

Algorithm 2  MaxSet(i, MFI)  1) for each encrypted frequent item i?F do  2)  CM= i ? tail(i);  3)  The server sends every site T a query asking whether  CM has ever occurred in T or not.

4)  Each site T sequentially inspects traffic data, to  determine CM?s occurrence in T. An actual answer of the query  would be 1 or 0 as CM?s occurrence. However, to preserve the  privacy of the site, the actual answer is perturbed by the  retention replacement [11].

5)  For each query, the server S i aggregates the counts of  the sites answered 1 and the sites answered 0. Then, using the  two counts, it conjectures the number of sites whose actual  answers were 1, and sets this number as the support of CM.

6)  if ((sup(CM)? min_sup) AND there is no superset of CM in MFI) then     7)  CM ? MFI;  8)  for each frequent item j?tail(i) do  9)   C=i ? j;  10)   Compute sup(C) by via routine similar to  Step 3-Step 5;  11)   if (sup(C) ? min_sup) then  12)     MaxSet(C, MFI);  13) Server S i sends encrypted MFI to server S  i?1 . If i=1,  sends the discovered encrypted maximal itemsets to server S n .

14) Server S i?1  decrypts the received MFI with its  decryption key DK i?1  and then reports the maximal frequent  itemsets to public.

In Algorithm 2, tail(i) is the set of frequent items ranking  after i according to certain order (e.g., lexicographic order);  MFI is the set of discovered maximal frequent itemsets. The  initial values of i and MFI are empty sets.



IV. EXPERIMENTAL RESULTS  In experiments, we collected traffic data by Ethereal [10].

The hardware platform is the Pentium (R) Dual-Core 2.5GHz  PC equipped with 2 GB main memory. The software platform  is the Windows XP and Microsoft Visual Studio 2005.

A. Accuracy Test  In this experiment, we set min_sup, the number of sites, and  the number of servers to 0.2, 10, and 5 respectively. As  measures for evaluating accuracy, we used Recall and  Precision.

true  target  | |  | |  I  Recall  I  = . (1)  ?  + ?  = ?. (1) (1)  In (1), I target  denotes a set of all maximal frequent itemsets  in network traffic data, I true  denotes a set of discovered  maximal frequent itemsets. Thus, Recall indicates how much  fraction are mined from all the actually maximal frequent ones.

Fig. 1 shows the results of Recall with p in retention  replacement [11] of 0.5 to 1.

0.5 0.6 0.7 0.8 0.9 1.0  0.0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1.0  R e c a l l  p    Figure 1.  Recall with different probability p  true  mined  | |  | |  I  Precision  I  = . (2)  In (2), I mined  denotes a set of maximal frequent itemsets  mined by our method, I true  denotes a set of discovered frequent  itemsets. Thus, Precision indicates how much fraction of  mined patterns are actually maximal frequent. Fig. 2 shows the  results of Precision with p in retention replacement [11] of 0.5  to 1.

0.5 0.6 0.7 0.8 0.9 1.0  0.0  0.2  0.4  0.6  0.8  1.0  P r e c i s i o n  p    Figure 2.  Precision with different probability p  B. Performance Test  As a performance measure, we used the average elapsed  times in mining maximal frequent itemsets. In this experiment,  we set min_sup, the number of sites, and the number of servers  to 0.5, 10, and 5 respectively. We measured the elapsed time     with different numbers of traffic data in each site. Fig. 3 shows  the results.

1000 2000 3000 4000 5000         T i m e ( s )  Number of traffic    Figure 3.  The elapsed time with different numbers of traffic data

V. CONCLUSIONS  This paper proposes a frequent itemset mining algorithm  MFITD in network traffic data. For the sake of proper size of  results, this algorithm discovers maximal frequent itemsets  only. Furthermore, the intermediate results are encrypted via  retention replacement.

In the future work, we will consider different kinds of  frequent pattern mining problems in network traffic data.

Meanwhile, how to evaluate the mining results is also an  important issue.

