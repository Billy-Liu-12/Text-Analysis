A New Temporal Measure for Interesting Frequent Itemset Mining

Abstract Frequent itemset mining assists the data miner in  searching for strongly associated items (and transactions) in  large transaction databases. Since the number of frequent  itemsets is usually extremely large and unmanageable for a  human user, methods for mining interesting rules have been  proposed to define meaningful and summarized  representations of them. Furthermore, many measures have  been proposed in the literature to determine the interestingness  of the rule. In this paper, we introduce a new temporal  measure for interesting frequent itemset mining. This measure  is based on the idea that interesting frequent itemsets are  mainly covered by many recent transactions. This measure  reduces the cost of searching for frequent itemsets by  minimizing the search interval. Furthermore, this measure can  be used to improve the search strategy implemented by the  Apriori algorithm.

Keywords-Association Rule Mining, Frequent itemset  mining, temporal data mining, temporal interestingness  measure

I. INTRODUCTION  Data mining is the process of finding interesting information  from large databases. The authors in [11] list the most  challenging problems in data mining research. One of those  problems is mining sequence data and time series data. A  fundamental problem for mining association rules is mining  frequent itemsets. In a market basket transaction dataset,  frequent itemset mining is the process of searching for  itemsets that a group of customers likely to purchase in a  given visit to the store. In a previous approach [3; 4], the  authors studied the behavior of frequent itemsets with  respect to time. This is done through mining for frequent  itemsets in different time periods.

Top level goal of temporal analysis is to filter for interesting    frequent itemsets. We argue that interesting frequent  itemsets are mainly covered by many recent transactions.

For example, in a transactions database in an electronics  store, before two years a 500MB MP3 player was frequently  sold, nowadays most of the people buy MP3 players with at  least 2GB capacity. From that, when mining the whole  transactions dataset, we may get an interesting rule saying  that a percentage of customers are interested in buying  500MB MP3 players. This rule is not anymore interesting  because people are not anymore interested in such small  capacity MP3 players. So we can say that this  rule  is too old to be interesting. On the other hand, a rule that  says that a good percentage of people are interested in  buying 2GB MP3 players is still interesting as it can be  taken into account in the decision making process.  This rule,  after a period of time is also going to be non-interesting.

This paper is structured as follows. In section 2, we  introduce the problem of association rule mining. Then, in  section 3, we discuss some related work. We present our  new measure to mine for interesting frequent itemsets in  section 4. Experimental work is introduced in section 5.

Then, in section 6, we discuss some possible application  fields of our approach. Finally, in section 7, we summarize  the main contributions of our paper and identify possible  future directions to extend this work.



II. ASSOCIATION RULE MINING  Association Rule Mining captures the relationships between  different items. An association rule finds the notion that two  different items occur together in a transactions database. An  Association Rule has the form X Y? , where X and Y are  sets of items and have no items in common. Given a  database of transactions D  where each transaction  T D? is a set of items, X Y? denotes that whenever a  transaction T contains X then there is a probability that it  contains Y too. The rule X Y? holds in the transactions  set T with confidence c if c % of transactions in T that  contain X also contain Y. The rule has support s in T if s %  of all transactions in T contains both X and Y. Association  rule mining is finding all association rules that have support  and confidence values greater than or equal a user-specified    minimum support (minsup), and minimum confidence  (minconf) respectively. Association rule mining consists of  _____________________________________  978-1-4244-5265-1/10/$26.00 2010 IEEE  two steps: finding frequent itemsets and then extracting  interesting rules from the frequent itemsets.

A. The Apriori Algorithm  The Apriori algorithm is one of the efficient association rule  mining algorithms [8].  It generates all frequent itemsets,  called also large itemsets, by making multiple passes over  the transactions database D. The algorithm makes a single  pass over the data to determine the support of each item  which results in the set of 1-itemsets. Next, the algorithm  will iteratively generate new candidate k-itemsets using the  frequent (k ? 1)-itemsets found in the previous iteration.  An  additional pass over the data set is made to count the support  of the candidates.  After counting their supports, the  algorithm eliminates all candidate itemsets whose support  count is less than minsup. The algorithm eliminates some of  the candidate k-itemsets using the support-based pruning  strategy. If any subset of the k-itemset I is not frequent then  I is pruned. The algorithm terminates when there is no new  frequent itemsets generated. Association rules are generated  by generating all non-empty subsets of each frequent itemset  and outputs its rule if its confidence is >= minconf. That  rules are called interesting association rules.



III. RELATED WORK  Temporal data mining [6] is the process of mining databases  that have time granularities. The goal is to find patterns  which repeat over time and their periods, or finding the  repeating patterns of a time-related database as well as the  interval which corresponds to the pattern period [13]. The  work presented in [5] studies the problem of association  rules that exist in certain time intervals and thus display  regular cyclic variations over time. Since their introduction  in 1993 in [1], hundreds of new scalable methods have been  proposed to solve the problem of mining frequent itemsets.

Typically, while a too high support threshold leads to  generate only commonsense patterns (or none), mining all  the itemsets having a low support, or dealing with high  correlated data, may generate an explosive number of results,    often hard to examine for a user.

In order to solve this problem, several methods were  proposed to compress (or summarize) the set of frequent  itemsets, i.e. to find a concise representation [10] of the  whole collection of patterns. In [7], the authors present an  algorithm that utilizes the transaction time interval of  individual customers and that of all customers to find out  when and who will buy products, and what items of  products they will buy. The work in [9] presents a  visualization technique to allow the user to visually analyze  the rules and their changing behaviors over a number of  time periods. This enables the user to find interesting rules  and understand their behavior easily.

Beside support and confidence, the authors in [12] present a  survey of the available interestingness measurements in the  literature such as Conviction, Lift, Piatetsky-Shapiro,  Coverage, Correlation, and Odds ratio. All those measures  are defined using probabilities. As far as we know, there is  no previous work that takes the temporal aspects into  account in the process of searching for interesting frequent  itemsets.



IV. TEMPORAL FREQUENT ITEMSET MINING  Supposing that we have a dataset that represents the log of  some website. The web log consists of a set of records R  that represent user requests. Every request consists of a  client IP address, the requested URL, and the time stamp t ,  when the URL is requested. Most websites implement user  tracking in some way, mostly using cookies. This makes it  possible to map the client IP address to some user ID, which  is unique for a user. This avoids difficulties with users,  whose IP address changes over time. A session is created by  taking consecutive requests of a particular user with small  waiting time   between the consecutive requests and a  maximum session time length . We consider the time  stamp of the first request of a session to be the time stamp of  the session. As a result, we get the session which is a  sequence of visited URLs with a time stamp. The set of all  sessions may include multiple sessions of the same users.

The set of unique URLs of all sessions in forms the set of  items  waitt  maxt    S  S  I used for frequent itemset mining in the next step.

The sessions in S are transformed to transactions by  removing the duplicate URLs which may appear several  times during a single session. So, we have a one to one  mapping from the set of sessions S  to the set of  transactionsT .

The set FI include all frequent itemsets f I? , which are  covered by more than minsup transactions. The frequent  itemsets can be found from T by the Apriori algorithm.

Those frequent itemsets represent URLs that are frequently  visited together by the users. In order to include the  temporal information into our analysis, for each frequent  itemset f FI?  the set of covering transactions  ( )cover f  are found:  ??, ( ) : ,f FI cover f t t T f t? ? ? ?  Since a transaction t T?  corresponds to exactly one  session in s S? , we can trace back the time stamp of s  once we know t . So, we construct a time series for each  frequent set f FI? as follows. First, all covering  transactions ( )cover f  are determined for f . Second, the  set of time stamps of the session corresponding to all  ( )t cover f?  is found. Then, the found set of time stamps  is ordered and forms the time series fs corresponding to the  frequent itemset f . Note that the length of  fs  equals the  support of f :  f FI? length  c At median  ,   ( ) )f support? ?( fs  ( )s  minsup  The set of time series for all frequent itemsets is denoted  byTS .

Definition: A frequent itemset A  is interesting if  ? where  is the current time,  is  the ordered time series of the frequent itemset  ct As  A , and  is a  positive number that represents a time threshold. That  means finding all frequent itemsets from the transactions  within time interval ?    ,ct t  c with respect to minimum  support gives a super set of all interesting frequent itemsets.

Figure 1 shows an example of interesting and non-  interesting frequent itemsets. The frequent itemsets {b, d}  and {a, b, c} are not interesting because the median is  outside the time interval?  ,c  ctt  . It is also clear that the  frequent itemset {a, b, c} is too old to be interesting. On the  other hand, {a, e, f} is interesting because the median of its  time series is within the determined interval.  A necessary  condition for interesting frequent itemset A is:  ( )c pt Q A  ?  ( )pQ A  pQuantile   2 (  with p  A  ?  ? )  minsup  sup  Where  is the  of the time series of set A.

The  of the ordered set of values is a number  puantileQ  x  such that a proportion p of the set are less than or equal  to x .

Figure 1. Interesting and non-interesting frequent itemsets  For example, the  (called also the quartile) of  an ordered set of values is a value  0.25Quantile  x  such that 25% of the  values of the set are below that value, and 75% of the values  are  above that value. The Quantile  (same as the  median) is the central value of the set, such that half the  values are less than or equal to it and half are greater than or    equal to it. The usage of the above condition means finding  all frequent itemsets from the transactions within the time  interval  0.5  ?  ,ct t  'minsup  c  / 2  with respect to minimum  support minsup? , gives a super set of all  frequent itemsets.  This is because when the frequent itemset  A is interesting, then ( )Aian sct med  ? , and because  the median is the central values of the frequent itemset, then  we need at least half of the interval?  ,c ct t  .

If the itemset is interesting, then it should definitely be  frequent. Therefore, supporting transactions  should be in the interval  / 2minsup  ?  ,ct  ct . This condition can be  used either as a preprocessing step to search for frequent  itemsets within the determined interval, or as an extension to  the Apriori algorithm to prune non-interesting frequent  itemsets. Figure 2 is an example of applying this condition.

In this example, we have the minsup = 10. When using this  condition, the search for frequent itemsets will be within the  interval ?  ,c ct t  with minsup = 10/2 = 5.

From that, we get a super set of all interesting frequent  itemsets. The 3-candidate frequent itemset with minsup = 5  is {a,b,e}. On the other hand, the 3-candidate frequent  itemsets with minsup =10 are {a,b,c} and {a,b,e}.

Candidates for interesting frequent itemsets are (interesting  frequent itemsets are underlined):  {a}, {b}, {c}, {e}  {a,b}, {a,c}, {a,e}, {b,e}    {a,b,e}  On the other hand, all frequent itemsets are:  {a}, {b}, {c}, {e}  {a,b}, {a,c}, {a,e}, {b,c}, {b,e}  {a,b,c}, {a,b,e}    Figure 2. An example of using the necessary condition  Using this method, we reduced the cost of searching for  frequent itemsets. This method can be used to improve the  search strategy implemented by the Apriori algorithm. A  time series fs  of a frequent itemset f  is an ordered  sequence of time stamps of the covering transactions. This  set will be helpful in finding out what kinds of changes are  occurring in which time periods. This can give an indication  of the behavior of users with respect to time. We can find  why some pages are frequently visited and why others not.

Through that, we can get a better view about our pages, and  also about the users visiting our website. We can predict the  future behavior of users depending on the periodical  behavior of the users that we have already extracted.



V. EXPERIMENTAL WORK  For the experiments we used a dataset that contains the  preprocessed and   filtered sessionized data for the main  DePaul CTI Web server (http://www.cs.depaul.edu). The  data is   based on a random sample of users visiting this site  for a 2 week period during April of 2002. Each session  begins with a line of the form:  SESSION #n (USER_ID = k)  Where n in the session number and k is the USER_ID.

There may be multiple   consecutive sessions corresponding  to the same USER_ID (repeated users). Each sessions ends  with a dashed line. Within a given session, each line  corresponds to one page view access. Each line in a session  is a tab delimited sequence of 3 fields: time stamp, page  view accessed, and the referrer. The time stamp represents  the number of seconds relative to January 1, 2002.

In order to illustrate what we made in our experimental  work, let us take a sample of three sessions that could be  found in the web log file.

SESSION #1 (USER_ID = 11)  9374553 /news/default.asp /news/  9374590 /people/search.asp?sort=pt /news/default.asp    9374610 /people/facultyinfo.asp?

/people/search.asp?sort=pt  9374685 /news/default.asp /people/facultyinfo.asp  9374720 /courses/ /news/default.asp  ------------------------------------------------------------  SESSION #2 (USER_ID = 22)  9185108 /admissions/ /programs/  9185138 /news/default.asp /news/default.asp  ------------------------------------------------------------  SESSION #3 (USER_ID = 33)  9226945 /people/search.asp?sort=pt /people/  9226975 /people/facultyinfo.asp?

/people/search.asp?sort=pt  9227072 /advising/ /courses/  9227098 /people/search.asp?sort=pt /news/default.asp    After preprocessing which includes the removal of  redundant URLs within every session, considering the time  stamp of the first request in every session as the time stamp  of the session, and the removal of the referrer we get:  SESSION #1 (USER_ID = 11)  9374553 /people/search.asp?sort=pt  /people/facultyinfo.asp  /news/default.asp  /courses/  ------------------------------------  SESSION #2 (USER_ID = 22)  9185108 /admissions/  /news/default.asp  ------------------------------------  SESSION #3 (USER_ID = 33)  9226945 /people/search.asp?sort=pt  /people/facultyinfo.asp  /advising/  /news/default.asp  Then we build the set of items which consists of the set of  unique URLs of all sessions:  Set of items I = {/people/search.asp?sort=pt,  /people/facultyinfo.asp,  /news/default.asp, /courses/, /admissions/, /advising/}  We then used the Apriori algorithm to mine for frequent  itemsets. We set the minimum support to be 20% which is    equivalent to minimum support count equal to 2.

Candidate 1-itemset = {  /news/default.asp (support count =3),  /people/search.asp?sort=pt( support count =2),  /people/facultyinfo.asp(support count =2)}  Candidate 2-Itemset = {  {/news/default.asp, /people/search.asp?sort=pt}(support  count = 2),  {/news/default.asp, /people/facultyinfo.asp}(support count  =2),  {/people/search.asp?sort=pt, /people/facultyinfo.asp}  (support count= 2)}  Candidate 3-Itemset = {  /news/default.asp, /people/search.asp?sort=pt,  /people/facultyinfo.asp(support count= 2) } Due to  the lack of time stamped transactional datasets  and  because the available dataset was not suitable to run our  experiments, the main goal of our future work is to find a  real life representative dataset that fits our experimental  needs or use one of the available dataset generators to  generate a suitable one.

Candidate 3-Itemset represents the frequent itemset f . The  set of covering transactions for the frequent itemset f  are  in session #1 and session #3 which have the time  stamps  9374553 and 9226945 respectively. The time stamps are  then ordered to get the time series corresponding to the  frequent itemset f :  REFERENCES  [1] Agrawal, R., Imieliski, T., and Swami, A. Mining association  rules between sets of items in large databases. In: SIGMOD,  NY, USA, ACM Press (1993) pp(207-216) f  S = {9226945, 9374553}  The experimental results we have got were not  representative enough to reflect the applicability of our  approach. Such bad results were expected because the  dataset we used was not the one we need. On one hand,  because the time interval of the transactions is too small (2  weeks) which is not enough to test our approach. On the  other hand, the transactions represent user sessions in a  university website, and usually the transactions recorded in  the web log file of university websites are not more than  course registration, search for an assignment, etc.  The  dataset we need to run an effective experiment should have    a long time interval for example a dataset that represents  customers transactions in a retail website within two years.

As far as we know, such dataset does not exist especially  when we talk about time stamped datasets. This lack of such  datasets amplifies the need to develop time stamped  transactional datasets generators which is discussed in [2].

[2]  Asem Omari, Regina Langer, and Stefan Conrad. TARtool: A  Temporal Dataset Generator for Market Basket Analysis. In   Data Mining and Applications (ADMA 2008), Chengdu, China,  2008. Springer Lecture Notes in Artificial Intelligence (LNAI),  August 2008.

[3] Asem Omari. Data Mining for Improved Website Design and  Enhanced Marketing.  In Yukio Ohsawa and Katsutoshi Yada,  editors, Data Mining for Design and Marketing,  volume 5 of  Chapman Hall/CRC Data Mining and Knowledge Discovery  Series, chapter  6. Chapman Hall/CRC, First edition, November  2008.

[4] Asem Omari, Alexander Hinneburg, and Stefan Conrad.

Temporal Frequent Itemset Mining. In Proceedings of the  Knowledge Discovery, Data Mining and Machine  Learning  workshop (KDML 2007), Halle, Germany, September 2007.

[5]  B. Ozden, S. Ramaswamy and A. Silberschatz: Cyclic  Association Rules. In: ICDE  98: Proceedings of the  Fourteenth   USA, IEEE Computer Society (1998) pp(412421)  [6] C. Antunes and A. Oliveira: Temporal Data Mining: An  Overview. In: Proceedings of the Workshop on Temporal Data  Mining, of Knowledge Discovery and Data Mining KDD01, San  Francisco, USA (2001)

VI. APPLICATION FIELDS  This method can be applied in different fields. One  application field is in search engine log files for example to  find out the most frequently searched keywords in the last  time period. Another application field is in web usage  mining for example to find out the most visited web pages  in the last 3 months in some website. It can also be applied  to a transaction dataset in a physical store or business to find  out the most frequently bought products or used services in  the last time period. Any other problem that needs to study  the behavior of some items with respect to time can be a  good application field.

[7] Ding-An Chiang, Shao-Lun Lee, Chun-Chi Chen, and Ming-  Hua Wang. Mining Interval Sequential Patterns. International  Journal of Intelligent Systems, 20(3): pp(359373), 2005.

[8] J. Han and M. Kamber: Data Mining Concepts and Techniques.

Morgan Kaufmann Publishers, San Francisco (2001)  [9] Kaidi Zhao and Bing Liu. Visual Analysis of the Behavior of  Discovered Rules. In Workshop Notes in ACM SIGKDD-2001  Workshop on Visual Data Mining, San  Francisco, CA, 2001.

[10] Mannila, H., Toivonen, H.: Multiple uses of frequent sets and  condensed representations. In: KDD, Portland, USA (1996)  pp(189-194)  [11] Q. Yang and X. Wu: 10 Challenging Problems in Data Mining  Research. Volume 5, World Scientific Publishing Company,  International Journal of Information Technology and Decision  Making (2006) pp(597604)

VII. SUMMARY AND FUTURE WORK  In this paper, we presented a new measure to mine for  interesting frequent itemsets. This measure is based on the  idea that interesting frequent itemsets are mainly covered by  many recent transactions.  This measure reduces the cost of  searching for frequent itemsets by minimizing the search  interval. Furthermore, it can be used to improve the search  strategy implemented by the Apriori algorithm.

[12] Sheikh, L.M. Tanveer, B. Hamdani, M.A. Interesting Measures  for Mining Association Rules. In proceedings of the 8th  International Multi-topic Conference INMIC, 2004. pp (641-  644), IEEE 2004.

