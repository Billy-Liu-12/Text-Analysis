An Organization-Oriented Model for  Federated Identity Management and Its Application

Abstract-Along with the emerging various application system, federation becomes a must in recent information construction.

Government, college and enterprise that have many information systems face a big problem of identity management after a federation is established. This situation is further intensified by Internet security threat for identity information has to be transferred in order to authenticate and authorize. In this paper we propose an organization-oriented model of federation identity management. Aim to simplify identity management process, we consider application user and operating system user and design a unified user attribute structure. Facing organization?s hierarchy framework, our design should be realized in LDAP, which is competent for level structure. And we also propose a solution to implement the model to federation situation. Part of the model has been realized in an actual identity authentication system.



I.  INTRODUCTION  With the rapid development of information technology and network technology, governments, colleges, enterprises are employing more and more information systems. In order to simplify identity management process, unified identity management system appears. Typically, an identity management system manages identity information of several application systems in one security domain. However, most identity management systems only focus on application user management or operating system user management.

In this paper we propose an organization-oriented model for federated identity management, which is very useful to hierarchy identity structure, especially for the government situation. And differing from common ones, our model considers application user, Windows system user and Linux system user to form a unified user information structure.

Along with the urgent requirement of cross-domain resource sharing and cross-domain operation, different security domains form a federation. So we give a solution to federation identity management based on the preceding model.

There is a life-circle of identity information. It starts with the registration of identity, through identity information provision, attribute modification till the destruction of the information. If identity information is physically destroyed, then the life-circle comes to an end, else, if it is logically locked, then the life-circle can go on with the activation and the following procedure. So our discussion will cover the steps of identity life-circle.

To clearly explain the model, this paper is organized as follows: First, in section 2, we give an introduction on unified  identity management model. In section 3, we give a solution to federation identity management based on the preceding model. In section 4, we introduce the model?s application in our actual identity authentication system, which can be regard as a using example of our model. The conclusion in section 5 summarizes our work and points out the model?s shortcoming and the future working direction.



II.  UNIFIED IDENTITY MANAGEMENT MODEL  Our model aims to aid the implementation of an identity management system. In order to be widely employed in governments, colleges, enterprises, we should consider more about the universality. So we should abide by the following rules:  1) Appropriate. The model should not only provide the functionality requirements, but also consider the specific request to satisfy the specific operation demand.

2) Stability. The model should be stable enough to ensure its usability.

3) Expansibility. The model should be adjusting its structure according to the specific situation.

4) Reusability. The model should be applicable to a kind of multiple applications.

Based on the above principles, we set the following design principles:  1) Hierarchical Architecture. It is an excellent system design method, which could improve the reliability, security of the system. The coupling between the levels is greatly erased, thus is convenient for future expansion.

2) Centralized Directory Service. Centralized identity management implies a high level of control and with that a high level of security. It is also sometimes inferred that simplicity and cost savings are further benefits of a centralized approach [1]. Directory service is used for managing hierarchical architecture and employing it as the core part means we should construct a centralized storage of the identity information and construct a new dependent system.

3) Take over Windows and Linux User Management Module. There are separate user management modules in every operating system. So, we should take over the module to ensure the users are managed by us but the operating system can run with no other side effect.

So, we employ the LDAP (Lightweight Directory Access Protocol) in our model. LDAP is an Internet protocol that  ?    email and other programs use to look up information from. Its aim is to work as a lightweight method to access X.500, which defines a hierarchy directory structure-root at the top, branch, extends downwards-DIT (Directory Information Tree).

Whereas, LDAP costs less but is more efficient.

A.  Unified User Management Model  An actual person may have multi-system access requirement in a security domain. For example, an officer is allowed to login to his working PC in which Windows 2000 is installed, and he is also allowed to login to the Personnel Administration System to finish his task. That is to say, an actual person may have various identities in the discussing area. So, we propose a unified user management model.

As is shown in Fig.1 below, one identity can be linked to different systems using the same series of information. So, we need to store only one record for the officer and all the registration, administration, destruction procedure can be done with the only set of information.

B.  System Association Relationship  To illustrate our model, we suppose there is a Unified Identity Management system (UIM for short), which acts as a centralized server. Its working mode and its interfaces are show in Fig.2 below.

As is shown in Fig.1, the main work of UIM is to manager identity information of applications (including Win32 application, J2EE application) and operating systems (including Windows, Linux and UNIX). So it is reusable to at least such five kinds of situation. To be expansible, any other  application situation can be added in case that there is an authentication proxy [2]. With this UIM it is no need to develop new identity management module and authentication module in other willing system.

According to the previous design principle, UIM is based on LDAP. UIM also reserves audit interface and access control interface for the future integration consideration. And there must be an administrator or multiple level administrators to manage the identities.

So, the over-all identity management procedure is: 1) Identity Registration. The administrator registers the  identity information including username, authentication data (such as password), identity basic information (such as real name, gender, email, mobile number and duty), belonged security domain and the resource, which he has right to access.

After user?s confirmation, commonly through email, the identity becomes valid simultaneously in the area UIM manages. And the user can use the username and authentication data to login to his legal systems.

To be safe, the identity registration procedure is always done locally and the confirmation letter is always encrypted.

That is to avoid transferring plain text on the unsafe Internet.

2) Authentication and Identity Provision. When users login to a system, the authentication proxy accepts the login request.

The proxy finishes the authentication for the system. There are two ways to complete the process. One is: the proxy delivers the accepted information to UIM, UIM finishes the authentication procedure and returns the result to the proxy and then the proxy can tell the result to the system. The other is: the proxy request identity?s information from the UIM and then does the authentication procedure itself. The UIM performs authentication operation in the former and performs identity provision operation in the latter.

3) Attribute Modification and Self-Service. The administrator of UIM has the right to modify any identity information and the UIM should provide the functionality of updating unimportant attribute to ordinary user [3]. Self- service enables ordinary user to modify his identity information, which are not correlated to over-all control. For example, he can modify his password and email now and again, but he cannot change his job duty and his privilege to resource for it influences the mechanism of the over-all run.

4) Destruction. After confirming the identity will no longer login any system, the administrator of UIM can destroy the identity information physically. Hereto, all the procedure of identity management ends. If the identity information is logically destroyed, it can be activated later when necessary.

This always takes place when the person who is temporarily transferred comes back.

Also what we should pay attention to is that all identity information should be treated when delivered on the Internet but this is beyond our discussing scope here.



III.  A FEDERATED IDENTITY MANAGEMENT MODEL  As federation comes into existence, the scope of identity  Fig.1 Unified User Management Model  Fig. 2 Unified User Management System Association Diagram    management enlarges to a wider area. Identity management systems are not independent; they must establish a mechanism to find each other and to cooperate with each other. This becomes a difficult problem where facing the vast Internet. In this section we will introduce you the application of the above model, you should pay attention to it adjusting change from the previous one.

The most distinct difference of federation identity management and ordinary identity management is that an identity from one security domain needs to access the resource (application system or operating system) at the other security domain. There is a trust problem because the entities at the different domain are not in the same trust circle, which means one does not believe the other will always act rightly especially if there is commercial secret or political secret [4] [5]. So identities accessing the outer security domain must provide some credible material offered by an entity trusted by both sides.

In our model, we will not mention the security domains whose identity information is managed by different parties or different kind of systems. We suppose the identities from both security domains are governed by the same kind of systems.

For example, they are both managed by a system call UIM developed by the same company. The aim is to simplify discussion, because we do not discuss the communication of different systems and the trust between them, which need the cooperation of two companies or organizations. However, it is achievable.

Talking about unified identity management in federation, we will cover the following main aspects: account linking, identity mapping, ticket management, SSO support and the general architecture.

A.  Pseudorandom Identifier and Account Linking  When federation operation begins, the security problem is noticeable. Let us see an example situation: organization A and organization B set up a federation and some identities from A want to access some resource of B (both are governed by UIM system). In order to authenticate and authorize, UIM of B must know some information about the identity from A, however, it is no need for the UIM of B to know the entire attribute about the identity, which may aggravate its burden of storing redundant data. So, a good method for UIM of B is to store only the identity account and the security domain where the identity comes. And if needed, it can ask UIM of A the exact information of the exact identity.

So, the returned message says ?John?s information: age: 25; education background: master; duty: director; home: Lianxiang Street...? All the information flees on the net and the unexpected ill-intentioned guy will capture the message and make ill use of the information. To avoid this, there is always a pseudorandom name shared by both side. That is to say, both UIM exchange John?s information by the name of ?d1pznedzs? which is randomly produced by one side and recorded by both. Thus, unwanted middleman can only know  ?d1pznedzs is 25 years old and he lives in Lianxiang Str. ?? which is no use in fact. To avoid the further association of the ?d1pznedzs? by ill-intentioned middleman, we can produce a different pseudorandom identifier [6] where communication starts between another system and UIM.

This looks like a link pointing from UIM of B and C to UIM of A. So it is call account linking. [7] Then pseudorandom identifier and account linking model is shown below.

The more complex situation is user ?John? has different information set at both UIM. In this situation, it is like a bidirectional linking. UIM of A may request John?s information which it doesn?t know from UIM of B, and the reverse may also happen. In bidirectional account linking, just one pseudorandom identifier is needed.

Another solution to find who the identity is is called attribute aggregation, which means the willing UIM will aggregate identity?s attribute getting from the source UIM and maintain the information for further use. For more information please consult [8].

B.  Identity Mapping  In section A, we talked about account linking. After account linking, UIM of security domain B knows ?d1pznedzs? is from security domain A.  However, when needed, it will consult UIM of A the detailed information of ?d1pznedzs?.

With the returned message, UIM of B knows wanted attribute, but it does not know what system the person can access and which concrete function of the system the person can use. At this point, identity mapping is a good choice.

Identity mapping means one security domain identity?s information should be mapped to the counterpart domain.

This should be done automatically and manually. To be automatic, the mapping should be auto-done when accord with the specific mapping rule. To be manual, the mapping result can be modified by the Administrator according to the concrete situation; and the unmapped should be mapped manually.

In the real situation, the automatically mapping always takes place when the federation establishes and the administrator assigns the corresponding level relationship between the exchange visiting identities of the two security domains. And the manually mapping always takes place when  Fig. 3 Pseudorandom identifier and account linking model    a single identity?s privilege changes. Finally, when the federation breaks, the mapping ends and all the record should be cleared up.

The common illustration of identity mapping is: department heads of a region should be mapped as section chiefs of the center when accessing the central resource. This can be the same as role mapping in the visual world. However, identity mapping, different from role mapping, include the instance that many users of different kind mapping to a single user having the same identity information.

C.  Identity Provision and Ticket Management  In this section we will talk about identity provision. To provide identity information, we employ the identity assurance service.

When John has been authenticated in security domain A and he wants to access some resource in security domain B.

The proper situation is John does not provide his own authentication data to UIM of B, but to let UIM of A to prove his identity-in another word, UIM of A assure John?s identity.

That is identity assurance service. In our paper, we just simply talk about identity assurance, see more please consult [9].

Pseudorandom identifier can be used to ensure safety to some extent. It should be set up according to the strategy of both security domains and the identifiers should be changed now and again. Using pseudorandom identifier does not mean we transfer plain information on the Internet. Some disposal should be done before transferring and also after. The common way is encryption, however, it needs large amount of calculation, which needs difficult math foundation, on both sides to ensure its safety, or else, it is useless. In our model, we will employ the method of ticket that is convenient to use.

Identity provision is realized by identity assurance service.

A ticket structure should be shared by the UIM. And the assurance module finishes the task of assurance assertion producing, analyzing, storing and destroying, and also provides its partner the ticket query service. At the same time, it realizes the assurance ticket producing, granting, parsing and checking. The assurance assertion producing should be accomplished with the cooperation of the authentication service.

D.  SSO (Single Sign-On) Support  In the common implementation, ticket is a SAML assertion containing authentication information that can be shared by multi systems. Request and response protocol of SAML will be bind to other communication and transmission protocol, so in order to support SSO; the bound protocol should accomplish the task of cross-domain request and response together with SAML.

And another solution is to employ certificate that can be stored at the side of client. So, the better side of using certificate is if user has already been authenticated, he can directly submit his certificate to the UIM of the other security domain. It can be used in Internet Explorer without abundant client side software.

E.  The General Architecture of the Federated Identity Management  Based upon the above discussion, we give a general architecture of the federate identity management. The architecture is shown as Fig. 4.

Fig. 4 illustrates a cross-domain access in a federation established between security domain A and B. Each domain is managed by a UIM. The entire procedure is listed below.

1) The Initial Identity Mapping. When federation sets up and the cross-domain identities are appointed, the identity mapping takes place. When one side requests the other side to establish a federation, if accepted, the federation is set up.

Commonly, the administrator will designate the identities that will do cross-domain operation. If mapping rule exists, the identities will automatically be mapped to a specific identity of the counterpart domain. In our model, the mapping result is stored in LDAP and the main items are username and the security domain where he is from. In another word, we just store the account linking. The detailed implementation will be shown at part 4.

2) Cross-Domain Access Procedure. The cross-domain access could be divided into two different kinds: not authenticated and already authenticated.

If the user (at the client) has not been authenticated, he will be redirect to the UIM of his local domain with the authenticating mode information. In the authenticating interface, the user can submit his authenticating data to the authentication service of the UIM. The authentication module  UUM  LDAP  UUM  LDAPAuthentication  Ticket Management  Security Domain A  Ticket Dealing  Authentication Service  Identity Assurance  Ticket  Client  Authentication Engine  Security Domain B  Identity Mapping Service  Mapping Rule Set  Authentication Service  Federation  Identity Assurance  Assertion Management  AS1  OS1  AS2  AS-I OS-I  Fig. 4 The general architecture of unified user management in federation    will consult the LDAP and then pass the result to the identity assurance service. The assurance service will gives out an assertion and produces a ticket. The identity ticket is handed to both the client and the counterpart security domain. Then UIM of the outer security domain will save the ticket and tell the service system whether the user can access the resource.

The ticket is hold for the future authorization and access control until the user logout. And if the further information is needed, the UIM of the outer domain will consult the local domain the further information. And the authentication engine of the assurance service is responsible to request the authentication service the requested information. Attribute ticket is produced and passed to the requesting part for further use.

If the user (at the client) has already been authenticated at his local domain, which means the client has the ticket of some level of the user, and then the user can hand in the ticket directly to the UIM of the outer domain. If the security level of the ticket matches the authentication, the user is allowed to the accessing. Else, the UIM will request the UIM of the user?s local domain about the further authentication information using the ticket handed by the user. At the user?s local domain, the ticket is parsed and further information is added to form a new one. The new ticket is handed to both the user to replace the old and the counterpart UIM for the authentication.

3) Identity Information Synchronization. When the user?s information is changed by the user himself or by the administrator, the correlating change should be made to the existing certificates. So the identity assurance service should announce to the user and the outer domain if the change matters much. Or, the changes will be reflected on the new certificate.

4) Identity Information Destruction. Different from the attribute change, the identity information destruction should be spread quickly. So, the destruction certificate should be produced and passed on rapidly to ensure that the identity can access nothing from that moment on.



IV.  MODEL?S APPLICATION DESIGN  In this section, we will briefly introduce the model?s application design, which is already being used in a real identity management system of our laboratory. We will not explain the design concretely, but to show the whole view.

And the concrete information can be different according to the specific appliance. In the model we select LDAP instead of the relation-based database. The differences of them are listed below.

Through the comparison of LDAP and RDB, we conclude that the main difference is LDAP, which employs a hierarchical storage mode, is more suitable of the mostly read operation. Considering the reality of an organization, where the users and the structures are rarely changed and the structure is level-based, we employ LDAP in our model.

A.  Directory Information Tree Structure  In order to show more clearly about the identity management function, we will cover the resource of an organization. So, the sub trees of an organization include its departments, people and resource. And one of the organization?s departments is considered another organization node whose sub trees also include the directly managed users and the department?s resource. Until the lowest level department is added to the information tree, the tree stops expanding.

The sub trees of every resource node in the tree are the same: application, Windows and Linux. Under the three types of nodes, three kinds of systems can be added separately. And the systems added, which belong to the parent node of resource are the final leaf nodes.

What we will emphases in the next phase is the sub tree of people. In all, all the sub nodes of people are the users of the parent node-the organization. There are two types of users including ordinary users and the ?common? user. We will concretely talk about the design of the user information model.

B.  Identity Information Model  We design two kinds of users in the model in order to enable cross-domain identity mapping. The ?common? user is a visual identity, which is not directly used by a person. It is provided to the outer security domain and the aim is to ensure the identity mapping and make it convenient. Its inner structure is no difference than the ordinary users besides the name of the node is ?common?, which means it is shared by many security domains. And the ?common? user is a must sub node of every people node.

Now, let us talk about the user information model. As is shown in Table.2 blow, we will not provide the exact attribute of user due to it should comply with the specific appliance.

The ?special resource? field record which systems originally refusing is now open to the user and which systems should be open to the user do not serve the user at the moment. The meaning of the other majority fields is comprehensible; we will mainly talk about the field of ?pseudorandom identifiers  Fig. 5 Directory Information Tree  Table.1 Difference between Two Storage Modes  Storag e  Read& Write  Access Method  Storage Type  Transaction  LDAP Read>Write LDAP API Hierarchy Not Enabled RDB Read<Write SQL/PLSQL Relation Enabled    list? whose value is determined by the field of ?Is global?.

If the value of ?Is global? is 0, this field is left null. If 1,  this field should list the resources the user can access. If the value of ?Is global? is 2, which means some of the user?s information is stored in the outer domains; the field of identifier list should be filled with the user linking of the identity storage domain and the pseudorandom identifiers list of the other domains. We should have a flag to make it clear that which item is the identity storage one, for example: ?$_sd12se1/michol@people_ENGLISH_BU_edu common @WindowsXP_resource_IEG_CS_BUAA_edu? means the user has another set of information in the node of ?michol@ people_ENGLISH_BU_edu? and the pseudorandom name is ?sd12se1?, and the user also has other system access ability.

Finally, if the value of ?Is global? is 9, then the field of ?pseudorandom identifiers list? should point to the identity source.

So, the field of ?pseudorandom identifiers list? records the user?s cross-domain access ability or points to the identity source. And for the ?common? user, the field of ?Is global? is 0 and the ?special resource? is a big list, while the other fields are blank.

To show the relationship of the resource, we employ several characters including ?_?, ?@?,?$? and so on. What about the situation of the character exist in the username or the resource name? In order to avoid mistake, we will employ escape character-?\?, which is rarely used. So if the username is ?Jose@phy?, then we should use ?Jose\@phy? in the String.

To enable self-service of attribute modifying, only basic information and authentication information can be modified by the user him/herself. All other is managed by the administrator.



V.  CONCLUSIONS  In this paper, we firstly propose unified identity management model and the identity life cycle management.

Then based on this, we give a federated identity management model and the detailed cross-domain access procedure, at the same time talk about account linking, identity mapping and identity provision. At last, we design the model?s application that can be regarded as the example of model?s application.

The contribution of this paper is as follows: 1) Unified identity management model in different  systems.

2) Identity life cycle management both in one UIM and in  federation 3) Pseudorandom identifier enabled account linking and  identity mapping 4) Identity information directory tree structure design and  LDAP user model information structure design However, further study is still needed: expanding the scope  of unified identity management model; improving the security mechanism of the model and analyze the implementing details of the directory service. More work need to be done on this study and the model also need actual application to showing its advantages and disadvantages.

