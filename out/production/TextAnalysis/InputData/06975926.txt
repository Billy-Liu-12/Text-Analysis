

Abstract?Owing to the widely used of data stream, frequent itemset mining on data stream have received more attention.

Data stream is fast changing, massive, and potentially infinite.

Therefore, we have to establish new data structure and algorithm to mine it. On the base of our previous work, we propose a new paralleled frequent itemset mining algorithm for data stream based on sliding window, which is called PFIMSD. The algorithm compresses whole data in current window into PSD-trees on paralleled processor only by one- scan. Increment method is used to append or delete related branch on PSD-tree when window is sliding. The experiment shows PFIMSD algorithm has good performance on efficiency and expansibility.

Keywords-Frequent Pattern, Frequent Itemset Mining, Paralleled, High Performance, Streaming Data

I.  INTRODUCTION Resent years, database and knowledge discovery tend to  give attention to a new data pattern?streaming data which means data comes like uninterrupted streaming. Streaming data has some distinctive features. Such as unknown size and boundary, sometimes data comes with high-speed, data cannot be accessed repeatedly, and the system is not able to control the order of data coming. Online mining on data streaming is not the same as on traditional fixed dataset.

Firstly, all the elements in streaming data can be detected at most once. Secondly, though the quantity of data in data streaming keep rising, the internal memory is limited through the period of mining. Thirdly, streaming data must be processed as soon as possible. Fourthly, the analysis must be provided immediately when users need. Last, the mistakes in analysis should be as less as possible, which make the result effective.

Depend on these features of streaming data, the algorithms of mining streaming data has distinguishing feature as follow[1].

1. The algorithms of mining streaming data have to finish mining process by once scan.

2. Most of the programs can only run in internal memory since the streaming data are high-speed, that means, the time and space complexity of these algorithms is limited.

3. The mining result is approximate. The data streaming is an often-changed no-boundaries data pattern, hence we only keep a certain amount of data rather than all historical data under the usual situation. Therefore, the algorithms of mining streaming data do not have accurate result but only  can make the error in a certain error range which usually inversely proportional to the search space.

For the algorithms of mining frequent itemsets in streaming data have the feature that they should be high- efficiency, we take advantage of high-performance parallel computer to improve the performance of the algorithm. By the way, we need to consider following issues while we design an paralleled frequent itemset mining algorithm for data stream[2].

1. Unlike the data of the database stored in disk, the streaming data generally pass away with time and are not long-term stored on storage device. Therefore, we need a internal data structure to temporarily store the streaming data which need to be mined.

2. Streaming data is not able to be scanned repeatedly as the data in database or data warehouse, therefore, to obtain the mining results by one-scan is an important issue in the data stream mining algorithm.

3. When new data flow in and old data flow out, the internal data structure should make certain adjustment to react speedily and correctly. For the mining algorithm based on windows, there are two ways can be used. First, whenever a new transaction gets into the window and an old one leaves, the algorithm need to re-generate the frequent itemsets for the transactions in whole window. Second, storing every itemsets in a traditional data structures such as prefix tree no matter it is frequent or not, and update its support when new data flow in and old data flow out. It is obviously that the second way which we call incremental approach is more attractive. Those previously mentioned algorithm employ this approach.

4. The algorithms of mining frequent itemsets in streaming data require quick response for request of users.

Therefore, to give full play to the advantages of parallel algorithm and improve the efficiency is the main purpose of this algorithm.

In this paper, we propose a new paralleled frequent itemset mining algorithm for data stream based on sliding window, which is called PFIMSD. The algorithm compresses whole data in current window into PSD-tree on paralleled processor only by one-scan. We apply increment method to append or delete related branch on PSD-tree when window is sliding. The experiment shows PFIMSD algorithm has good performance on efficiency and expansibility.



II. RELATED WORK Owing to streaming data cannot be stored in database as  data in traditional database and accessed randomly at any time, we need the other way to obtain the information of streaming data at a certain time or during a certain period.

As a result, a new data processing model which called stream processing model is proposed. The stream processing model can be classified to the following three types, Sliding windows model, landmark window model and damped windows model, which are corresponding to different application requirements.

For the sake of completeness, we give some problem descriptions which are related to the proposed algorithm.

Definition 1: A Transaction Data Stream TDS (= T1, T2, ? , TN) is a sequent transaction sequence, and N is the transaction ID (TID) of last coming transaction.

Definition 2: A Transaction-Sensitive Window (TSW) is forward sliding window, which has a fixed size w. The processing unit in the TSW is transaction, and w is called the size of the TSW. For current TSWNw+1 = [TN-w+1, TN-w+2,?, TN], Nw+1 is the serial number of current TSW. The support of Itemset X in current TSWNw+1 is the quantity of transactions which contain X, and note as sup(X).

Description of the problem:  To set a transaction- sensitive window and a minimum support, we need to do is to mine all frequent itemsets in w transactions of current window in real time.

Because there is not unlimited space to store all streaming data, we need to balance between correctness and storage space. In general, we usually are willing to get approximate rather than precise answers. For processing streaming data efficiently, we need to create new data structures, techniques and algorithms. Many researchers at home and abroad have obtained many achievements on this field. In 2002, Manku and Motwani[3] proposed two one- scan algorithms which are named sticky-sampling and lossy- counting respectively to mining frequent items by landmark window model on offline streaming data. They also proposed an lossy-counting algorithm BTS(Buffer-Trie- SetGen) based on three models to mining frequent itemsets on offline streaming data. Moment[4] algorithm was proposed by Chi et al. in 2004 is a kind of streaming data mining algorithm based on transaction-sensitive sliding windows model, and might be the first algorithm to mine closed frequent itemsets on online streaming data by using transaction-sensitive sliding windows model. However, Moment has to maintain a large number of CET nodes, and the ratio of CET node and closed frequent itemsets was 30:1.

That means, if there is a great number of closed frequent itemsets, this algorithm will consume a great deal of memory. In 2009, Hua-Fu Li et al. proposed NewMoment[5] algorithm to enhance the efficiency of Moment by reducing the memory consumption during processing closed frequent itemsets online. Whereas, it still uses enumeration to build trees, which is difficult to ensure the efficiency of algorithm in the case of the long mode and the large window.

Our team has already done some work on the FP- Growth-like algorithm and parallel data mining algorithm to  mine frequent itemsets on traditional dataset and get some achievements, such as F-Miner in [6], LPS-Miner in [7] and HPFP-Miner in [8].



III. DESIGN AND CONSTRUCTION OF PSD-TREE In this paper, we propose a Parallel Frequent Itemset  Mining algorithm on Streaming Data (PFIMSD) based on transaction-sensitive window. Before talking about the algorithm, we would like to introduce the data structure we use in this algorithm.

Two arrays Processor and Allot which are used to store the related information of processors and all items appeared in current window and the processor they are in. By using these two arrays, we are able to obtain the load status on each processor and the locations of items, which is convenient to update PSD-tree and assign tasks to each processor. Each unit of Processor is composed by two parts, first part Px is the number of processor, and another is the quantity that this processor can load, note as num. When the PSD-Tree of new item is built make num++, and when a item is deleted make num--. The units of Allot are also composed by two parts. The first one is item id, note as Ii, and another one Px is the processor which item is in. These two arrays work on processor 0 which assigns task to the other processors and balance the loading on each processor.

Because the streaming data is not availiable to repeadly scan, we use one-scan to compress the data in current wondow to the compact tree on parallel processor. Mining the tree structure parallelled will greatly improve the efficiency. We design PSD-tree to be this compact tree to compress streaming data.

PSD-tree is a FP-tree-like distributed parallel tree like HPFP-tree in HPFP-Miner we mentioned before. It has following features.

1. Unlike FP-tree, the nodes in PSD-tree are not only built for frequent items, but also to the non-frequent ones.

That is, the non-frequent item at this time might become frequent at next time, and vice versa, so we have to keep all items appeared on current wondow to PSD-trees. We use a marked bit f to distinguish the node is frequent or not. If it is frequent, the value of f is 1, on the contrary, the value of f is 0.

2. By one-scan we cannot get an ordered head list like used in FP-tree to store the supports and head pointers of items, so the head list of PSD-tree is unordered during the construction period. We adjust it to ordered before we start to mining the PSD-tree.

3. The root of PSD-Tree is not ?null? but an item appeared on the current wondow to identify this tree, Each PSD-Tree independently and completely represents the mode that the current database takes the root node as prefix.

Therefore, many PSD-Trees can be assigned to different processors to achieve parallel processing. PSD-trees that be assigned to the same processor would be linked by pointer, and we call this structure PSD-forest.

A. Build PSD-tree Initially We take an example to implement the building  procedure of PSD-tree and PSD-forest. Figure 1 shows a     data streaming in transaction-sensitive window, and what we need to do is to build PSD-tree for the streaming data in current window on three viable processors.

Figure1.    A Data Stream Example  The initializing building procedure is composed by many insertion operations. Figure 2 shows PSD-forests of window 1 built on three three viable processors.

Figure2.    PSD-forest in each processor  The nodes in PSD-tree are classified to frequent nodes and non-frequent nodes. In figure 2, the dashed border node is non-frequent node, and solid border node is frequent node.

B. Insertion and Deletion on PSD-tree When new transactions arrive and old ones leave, the  PSD-tree adjusts at the same time. We need to delete the branches of outdated transactions and insert new branches for newcome transactions. Figure 3 and figure 4 respectively show the deletion and insertion procedures when window 1 slide to window 2.

Figure3.    PSD-tree after deletion of trasaction 1 in wondow 1  When the transaction leaves sliding window, the algorithm has to find out all the branches of the transaction on each processor. This procedure can be done by the two arrays Processor and Allot we mentioned before. Then delete these branches on each processor and change the status of the node when needed. This procedure is paralleled and shown in algorithm 1.

Algorithm 1: Deletion on PSD-t ree Input?Transaction TD(I1,I2,?,In) procedure?MPI_COMM_RANK(MPI_COMM_WORLD,&myid);  if(myid==0) { for each Ii in TD  {find the processor Px that Ii is in  from Allot; char item[n]; for(int k=i,j=1;k++;k<=n)  item[j++]=Ii; MPI_SEND(i,1,MPI_INT,99,Px,MPI_COMM_WORLD,&status); MPI_SEND(item,n-i+1,MPI_INT,99,Px,MPI_COMM_WORLD,&status);}} if(myid==Px)//parallelled delete the branches {MPI_RECV(i,1,MPI_INT,99,0,MPI_COMM_WORLD,&status); MPI_RECV(item,n-i+1,MPI_INT,99,0,MPI_COMM_WORLD,&status);  for(j=i;j++; j<=n) { node->sup--; //nod point to the processor Ii in node->ischanged=1; if(node->sup==0)    de lete node;}  The next step is insertion of newcome transaction after the deletion operation. The insertion operation needs to insert new nodes or increase the support of node of corresponding processors. If there are new nodes, the algorithm need to scan Allot to decide which processor should be inserted to. The procedure of insertion on PSD- tree is also paralleled and shown in algorithm 2.

Algorithm 2: Insertion of PSD-tree input?Transaction TA(I1,I2,?,In) procedure?MPI_COMM_RANK(MPI_COMM_WORLD,&myid); if(myid==0) { for each Ii in TA {  int inallot=0;  find the processor Px that Ii in from allot array; if(Ii is in allot)  { inallot=1; char item[n];  for(int k=i,j=1;k++;k<=n) item[j++]=Ii;  MPI_SEND(inallot,1,MPI_INT,99,Px,MPI_COMM_WORLD,&status); MPI_SEND(i,1,MPI_INT,99,Px,MPI_COMM_WORLD,&status); MPI_SEND(item,n-i,MPI_INT,99,Px,MPI_COMM_WORLD,&status);} e lse {  find the minimum load processor Px in processor array;  MPI_SEND(inallot,1,MPI_INT,99,Px,MPI_COMM_WORLD,&status); MPI_SEND(i,1,MPI_INT,99,Px,MPI_COMM_WORLD,&status); MPI_SEND(item,n-i,MPI_INT,99,Px,MPI_COMM_WORLD,&status);}}  if(myid==Px) { MPI_RECV(i,1,MPI_INT,99,0,MPI_COMM_WORLD,&status); MPI_RECV(item,n-i,MPI_INT,99,0,MPI_COMM_WORLD,&status); if(inallot==1) { for(j=i; j++;j<=n) { if(node?=null) //node point to the node of Ij  node->sup++; node->ischanged=1;  else Addnode(Ij,Ii,item); //insert node Ij on Ii PSD-tree that root is Ii }} else Newpsd-tree(Ij,item); //build new PSD-tree that root is Ij}  Figure 4 shows the PSD-tree after insertion of transaction 6 in window 2.

Figure4.    PSD-tree after insertion of  trasaction 6 in wondow 2  In algorithm 2, when new transaction is being inserted, if there are new items in it the new PSD-tree should be built in minimum loaded processor, else it only need to increase support of nodes or insert new nodes on corresponding branches.



IV. PFIMSD ALGORITHM  A. PFIMSD Algorithm When the construction of PSD-tree is finished, we need  to mine itemsets by PSD-tree according to the requirements of users. The mining procedure is similar to HPFP-Miner, while there some differences. Firstly, the head list is unordered, the algorithm have to sort it before mining. We use fast sort in our algorithm. Secondly, the infrequent branches that we have to contain in PSD-tree. However, because the support of child node is not bigger than parent node, that feature makes the procedure of mining easier.

The procedure of mining is shown in algorithm 3.

Algorithm 3?Miner Input?root of PSD-t ree being mined, depth of tree num, init ial mode FPT  and mode length Output?all frequent itemset in current window procedure?  sort the head list of each PSD-tree; FPT[length++]=root->item; if(isSingle(root,num,P))//if there is single frequent branch P { foreach subpath Y of P if(root->sup>=min_sup&&root->ischanged==1) { L=FPT?Y;  MPI_File_write_shared(file,L,length_L,MPI_INT,status); root->ischanged=0?}  else assign the next child node of the parent in this branch to root;} else { for(j=num-1;j>=0; j-=1) { build_newtree(newroot,root,j); merge(newroot,j-1); Miner(newroot,j,FPT,length); Delete_tree(newroot,j);}}  The procedure of mining is paralleled running in each computing processor. Algorithm 3 is a recursion algorithm.

If the HPFP-Tree contains a single-frequent-branch P, enumerate all the combinations of the subpaths (which must include the root node) of P, and combine these combinations with the existing pattern (the initial existing pattern is null) to generate new pattern. The shared file  pointer mode is used to assure the mining result from many processors exporting in the same file. We use a field ischanged for node in PSD-tree. If in the procedure of insertion and deletion, the node is changed, this field will be set to 1, and the fields of all nodes will be set to 0 after mining.

B. Single Frequent Branch In the algorithm 3 we mentioned a term called single  frequent branch, now we give its definition.

Definition 3: If a PSD-Tree has no branches, i.e. for  each node N in the tree, it has at most one child node, and then we can say the PSD-Tree contains a single-frequent- branch. The branch goes from the leaf node to the root node of the PSD-Tree.

If a PSD-Tree contains a single-frequent-branch P, then mining this tree will become very easy. We can enumerate all the combinations of the subpaths (which must include the root node to assure the discovered frequent itemsets are not repetitive or omitted) of P, and combine these combinations with the pre-existing pattern. The other nodes in the PSD- Tree are no need to consider.



V. EXPERIMENTAL ANALYSIS In this section, we evaluate the performance of PFIMSD  algorithm in parallel environment. All the experiments have been conducted on a Downing 4000L platform at Gansu Computing Center. The platform contain 48 2.2GHz CPUs and 24 2.2GHz Core 2 CPUs. It has 14 146G Ultra30 SCSI hard disks. The proposed algorithm has been implemented using GCC version 3.4.3 and MPI library mpich2-1.0.7.

The experiment chooses dataset T10I4D100K which has 100,000 records in. All the datasets can be downloaded from the website of FIMI (Frequent Itemset Mining Implementations Repository) http://fimi. cs.helsinki.fi/.

Figure5.    speed-up radio of PFIMSD  We analysis the parallel performance of proposed algorithm, and got the speed-up ratios of the algorithm on 1, 3, 6, 8 and 16 processors. The speed-up ratio of a parallel algorithm is an important criterion to evaluate the parallel     efficiency of parallel algorithms, and it is calculated as follows.

run time parallel run time serial_ =radiospeedup  Figure 5 shows the speed-up radio of PFIMSD algorithm that runs on 1, 3, 6, 8 and 16 processors.

Firstly, we choose different minimum support thresholds to evaluate the performance of PFIMSD. The chosen size of window is 90k, the results are the average results by sliding window 20 times. The result of experiment is shown in figure 6.

Figure6.    performance of PFIMSD on different minimum support  Next, we set different size of window from 10k to 100k to evaluate the performance of PFIMSD, and fix the minimum support threshold to 0.1. The result of experiment is shown in figure 7.

Figure7.    performance of PFIMSD on different window size  We compare the performance of PFIMSD algorithm with the classic algorithm of mining frequent itemset on streaming data Moment. In figure 5, with support threshold decreasing, the gaps between algorithms increase. Especially, the running time of Moment algorithm increases rapidly when the support threshold is over 0.2, while the running  time of our proposed algorithm still increases gently. In figure 6, we can see the running time of PFIMSD increases more gently than Moment on entire expansion process of window size.  The whole experiments prove the performance of PFISD algorithm is much better than existing algorithms Moment.



VI. CONCLUSIONS In this paper, we discuss mining frequent itemset on  streaming data. Because data steam has its own features, the mining algorithm is distinguished to the traditional dataset.

The result should be feedbacked in real time, and the parallel algorithm will improve the time efficiency remarkably.

We design a parallel data structure PSD-tree and a new paralleled frequent itemset mining algorithm for data stream based on transaction sensitive sliding window. We use one- scan to compresses streaming data in sliding window to the PSD-tree on each processor. As the window moves forward by time, the incremental method is used to insert and remove the related branches on PSD-tree. PFIMSD algorithm is an efficient scalable parallel algorithm for mining frequent patterns on multiprocessor systems. The proposed algorithm has little communication overheads by efficiently partitioning the list of frequent elements list over processors.

In this parallel algorithm, we use one processor (processor 0) to take charge of scanning the whole database and assign transactions to the rest viable processors. The rest processors build PSD-tree and mine the frequent itemsets. The results of experiment show that PFIMSD algorithm has good scalability and performance.

