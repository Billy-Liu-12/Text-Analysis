

Optimize Genomics Data Compression with Hardware Accelerator  Weigang Li  Intel Corporation {weigang.li}@intel.com    Genomics analysis has complicated workflow, it involves many reading and writing of  large files to and from disk and compression, de-compression of the intermediate or  output files. Binary Alignment/Map (BAM) files size can be huge with many Gigabytes  in size, and normally it is stored in disk with compressed format, that means it need to be  decompressed first before sorting and compressed afterwards. In this work we analyze  the performance characterization of the compression workload in genomics analysis  pipeline, and we develop a new hardware acceleration method that efficiently compresses  DNA sequences with the reduced computation time and CPU utilization. The new  optimization method results in a 1.5X speedup (1-thread) and 3.5X CPU cost savings (32-thread) for an out-of-core sorting of genomics data.

Our experiment is based on SAMtools (v1.3.1-41, htslib1.3.2-134), which is a popular open-source tool used in next-generation sequence analysis. The genomic file we select  for the benchmark profiling is downloaded from European Nucleotide Archive (ERR1295998_1-2.fastq), the FASTQ file is aligned to a SAM-file with 23GiB raw size.

A compute node (Intel? Xeon Haswell E5 v3 2699, 72 Hyper-threaded Cores) is setup  for SAMtools performance benchmarking, ZFS on Linux (ZOL v0.6.5.3) is installed for the backend storage file-system with Intel? QuickAssist Technology (QAT, DH8950) integrated in ZFS as hardware accelerator. Several different compression methods are  evaluated: software GZIP-1 compression in SAMtools, software LZ4 compression in ZFS, and hardware QAT compression in ZFS.

CPU  Dram  P CI  e  ZFS pool  gzip gzip  B lock (128K iB)  Compress Buffer   Figure 1: Hardware Offloading Architecture in ZFS.                                           Figure 2: Compressed BAM-file size (MB).

Figure 3: BAM-file Sorting (1-thread): CPU Utilization and Run time.        Figure 4: BAM-file Sorting (32-thread): CPU Utilization and Run time.

