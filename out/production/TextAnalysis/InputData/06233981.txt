

Abstract- Graph-based Association Rules Mining (ARM) is a research area that represents a transactional database into a graph structure to optimize the search for frequent item sets.

Sub-graph search is the process of pruning the search by looking for the best representation of connected nodes in a graph to represent the fully connected graphs. Triangle Counting Approach is one of the sub-graph search approaches to find the most represented graph. This study aims to employ the Triangle Counting Approach for graph-based association rules mining. A triangle counting method for graph-based ARM is proposed to prune the graph in the search for frequent item sets. The triangle counting is integrated with one of the graph-based ARM methods. It consists of four important phases; data representation, triangle construction, bit vector representation, and triangle integration with the graph-based ARM method. The performance of the proposed method is compared with the original graph-based ARM. Experimental results show that the proposed method reduces the execution time of rules generation and produces less number of rules with higher confidence.

Keywords:  Triangle Counting, Association Rules Mining, Graph- Based, Data Representation.



I. INTRODUCTION  Association Rules Mining (ARM) is one of the data mining tasks that find frequent item sets from large transaction database. Searching is the NP-hard problem in ARM since the algorithm needs to search for all possible frequent items before the association rules are generated. Because of an enormous amount of data stored, it was necessary to develop powerful algorithms to deal the mining process in ARM. In graph theory, there is an area of graph mining called Triangle Counting Approach. Triangle is the most basic non trivial sub-graph. It is a fully connected sub-graph containing three nodes. Triangle graph has been used to uncover hidden thematic structure of the web and as a feature to assist the classification of web documents. In this approach, the appropriate set of triangles is computed as sub-graphs believed to be the best sub-graph to represent the whole graph. Searching for triangles that can preserve the important knowledge that the graph holds is critical. The Triangle Counting approach has not been used yet in the graph-based ARM algorithm. Therefore, the aim of this study is to incorporate the Triangle Counting approach in graph-based ARM. The triangle counting for graph-based ARM will function to prune the graph in the search for frequent item sets.

The rest of the paper is organized as follows: Section II will discuss related work on the graph-based ARM and the Triangle Counting approach. The algorithm that incorporates the Triangle Counting approach for ARM is proposed in Section III. The result and analysis are presented in Section IV and Section V contains the conclusion of this work.



II. RELATED WORK  A. Association Rules Mining  Since the introduction of the problem of mining association rules several generate-and-test type of algorithms have been proposed to discover frequent itemsets [1]. An efficient breadth-first or level-wise method for generating candidate sets, i.e., potentially frequent sets, has been presented in [2].

An alternative strategy for the database pass, using inverted structures and a general purpose DBMS, has been considered in [3]. The efficient algorithm so far, in particular in terms of database operations, is Partition [4].

Other works related to association rules include the problem of mining rules with generalizations [5], management of large amounts of discovered association rules [6], and a theoretical analysis of an algorithm for a class of Knowledge Discovery KDD problems including the discovery of frequent sets [7] and a connectionist approach in mining rules is presented in [8].

B. Graph-Based Data Mining  Graphs are ubiquitous: the Internet, the World Wide Web (WWW) [12][13], social networks [20] , protein interaction networks and many other complicated structures can be modelled as graphs [16][17][18]. The problem of counting sub-graphs is one of the typical graph mining tasks that have attracted a lot of attention [9]. Several researches on sub-graph were discussed in [10][11]. Sub-graph patterns such as bipartite cores or almost ?bipartite cliques", are used to detect emerging communities in the Web Graph [12].

Finding patterns in large-scale graphs, with millions and billions of edges is attracting increasing interest with numerous applications in computer network security (e.g., intrusion detection, spamming), in web applications (e.g., community detection, blog analysis), in social networks such as Facebook and LinkedIn (e.g., for link prediction) and many more [13].

C. Direct Large Items Generation (DLG)   Yen & Chen [14] propose a graph-based association rules mining called DLG (Direct Large items Generation). DLG adopts a vertical layout database, maps the information from the database into bit vector matrix, and scans the database only once. The candidate frequent itemsets can be generated through the construction of directed graph, and tested using the intersection of bit vector. The DLG algorithm contains three main steps. First, the representation of the items support to the bit-vector representation. Next; construct the directed graph to show the links between items, and finally, the generation of frequent k-itemsets (k > 2). Experiments done by Sharma [15] employs graph based ARM for various real life datasets and shows significant improvement in execution time when compared with the Apriori algorithm.

In this study, we employ the DLG method as the base method for the proposed triangle counting approach [16].

D.  Triangle Counting Approach   Counting the number of sub-graphs in a large graph is a difficult computational task. The current state of the art provides methods that are either computationally infeasible for large files or do not guarantee the accuracy of the estimates available. The best known method for solving the simplest non trivial version of this problem is Triangle Counting. Schank and Wagner [17] give an extensive experimental study of the performance of algorithms for counting and registration of triangles in graphs. In complex network analysis, computation of the transitivity ratio and the clustering coefficients require computing the number of triangles in the graph [16].

Triangles are commonly used in the exponential random graph model [18] and appear naturally in models of realistic network development [19].

Many studies have been conducted to find or implement new algorithms for Counting Triangles in Data Graph Sets. Tsourakakis, et al. [20] proposes a method for counting triangles in a large power-law network. They present an algorithm that under mild conditions on the triangle density of the graph will perform accurately by producing a good estimate of the number of triangles with high probability as outputs. The work reported in [21] presented a new highly-parallel randomized algorithm for approximating the number of triangles in an undirected graph. A recent work by Tsourakakis [22], proposed the EigenTriangle and EigenTriangle Local algorithms to compute the total number of triangles and the number of triangles that each node participates in, respectively, an undirected graph. These algorithms work for any type of graph but they are effective when the graph possesses certain spectral properties.



III. METHODOLOGY In this work, an algorithm of triangle counting for  graph-based ARM is proposed in order to prune the graph in the search for frequent item sets. Two important stages are involved with the integration; i) development of the Triangle Counting algorithm to find numbers of triangles, ii) development of ARM scheme from the triangles obtained in i). The triangle counting algorithm is based on creating the adjacent matrix for the graph and counting the triangles. The De-Morgan Laws is used to create the new graph containing only the nodes and edges of triangles.  The second stage involves, the use of the triangles using the bit vector representation obtained from i) to generate the frequent items plus the association rules.

A. Data Representation As mentioned in the preceding section, the proposed method has two stages. In stage one, we will find the number of triangles in the graph. The first step in the process to find the number of triangles in a graph is to concisely represent the data. In this work, we chose Adjacency Matrix for this purpose. A matrix is used to represent an adjacency structure, which in turn represents a graph.

For example, if G is a directed graph then aij = 1 if there exists an edge directed from vertex i to vertex j; otherwise aij = 0 (no such edge exists). If the vertices of the graph are numbered 1,2,?m, the adjacency matrix is of a type m?m. If A?A???A (p terms, p?m) is evaluated, the non-zero entries indicate those vertices that are joined by a path of length p; indeed the value of the (i,j)th entry of Ap gives the number of paths of length p from the vertex i to vertex j.

Input: Graph Data Set with N nodes and E edges Output: N*N Matrix, shows the connections between nodes   1. Start 2. Determine the size of the matrix, which is N*N (N  is the number of nodes in the graph) 3. Create the matrix 4. For each node v ?N { 5. If there is any edge from vi to vj {  a. aij = 1 6. else  a. aij = 0 }  7. Stop Algorithm 1: Adjacency Matrix Representation  For example if we have a simple graph represented in Fig.1.

Fig. 1 Example Graph representation   Then the Adjacency Matrix for this data will be as in  Table I.

TABLE I Adjacency Matrix representation   A B C D E F G A B 1 C 1 D   1 E 1 F 1 1 1  1 G  1  1  1  B. Construction of Triangles   The triangle counting step is conducted over the represented data where the selected triangles are obtained. In this study, the De ? Morgan?s Laws is used to generate the triangles where given two conjunction edges AB and BF connected with a conjunction AB?BF then we obtain AF. The triangle counting algorithm is presented in Algorithm 2.

Input: N*N matrix Output: Number of triangles in the graph   1. Start 2. For each edge in the matrix aij, namely XY, find all  edges start with Y                     { 3. If XY exist in the input matrix { 4.               Add 1 to counter 5.               Add the edges used and gave the result to  a new array 6. } 7. } 8. Stop  Algorithm 2: Triangle Counting Algorithm   By using De-Morgan?s laws, we may decide how many triangles we have and which nodes and edges for these triangles:  AB?BF?AF AB?BG ?AG AC?CD? AD AC?CF?AF AE?EF ?AF AF?FG?AG BF?FG?BG CD?DG?CG CF?FG?CG EF?FG?EG  Here we can note that form the edges of the triangles are AF where three consecutive links can be obtained from this link:   AB ? BF ? AF AC ? CF ?AF AE ? EF ? AF BF ? FG ?BG    C. Bit-Vector Representation The bit?vector representation is used in this study to  represent the pruned graph obtained from the previous section in order to find the association rules. For every edge in the triangle, it is given a unique transaction ID (TID), and for every node, a unique number is given and the number of times it appears in the dataset is also counted. Table II and Table III shows the example for market basket data and the support values for each item set respectively.

TABLE II  Market Basket Data    TABLE III Support Values of Itemsets    TID Itemset  Item- Value  Item Name  Sup- value  1 AB  1 A 4 2 BF  2 B 3 3 AF  3 C 2 4 AC  4 E 2 5 CF  5 F 5 6 AE  6 G 2 7 EF 8 FG 9 BG   Then, the bit vector is found for each item. For  every item in Table III, we observe all the itemsets in Table

II. If the item appears in the i?th transaction, the i?th position of the bit vector which is linked to that item will be ?1.? If not, it will be a ?0.? The bit vector related with the item is articulated as i BV the number ?1? (hereinafter called the support value), where i BV equals the number of transactions which support the item. The length of the bit vector depends on the number of itemsets, and the number of bit vectors depends on the number of items, as shown in Table IV.

TABLE IV Bit ? Vector Values Bit vector Bit vector value BV1 101101000 BV2 110000001 BV3 000110000 BV4 000001100 BV5 011010110 BV6 000000011

IV. EXPERIMENTS The experiment is conducted using the different sizes of  datasets described in Table V. The datasets can be obtained from the http://www.cise.ufl.edu/research/sparse/matrices and http://snap.stanford.edu/index.html. The performance is     measured in terms of the execution time, generated and the average confidence of rul   TABLE V Summary of Datasets  Dataset Number  Dataset Name Number o Nodes  D1 Wikipedia 2007/2 2983494 D2 Wikipedia 2006/6 3566907 D3 Journals 124 D4 AS Oregon 13579 D5 Political blogs 1222  The integration of DLG with Tri  approach is called DLG.T. It is compared algorithm without triangle counting appro execution time for association rules gen number of rules generated are recorded f Table VI gives the results obtained from the number of rules generated and percentage o  The comparison was analysed in term value and t-test (p-value < 0.05). The execu showed that the DLG.T is faster than DLG number of rules is significantly lower in D to the DLG. The number of frequent edg higher than DLG. Figure 3 compares result of rules generated after running DLG represented in ln(x) to scale up the graph.

TABLE VI Experimental Resu  Data Set  Time Number of Rules  DLG.T DLG DLG.T DLG D1 45.1 54.3 8892716 11586431 D2 41.8 50.1 5423920 7914365 D3 0.1 0.26 3712 4832 D4 8.4 12.4 15340 17450 D5 2.1 3.5 10815 12924 p-  value 0.0315   0.0888      The number of rules generated in bo  significantly different especially for large (D1, D2). The reason is that the number pruned graph in large graphs is different fro edges in the original graph, but in the case small graph data, the number of edges in the similar to the original graph.

number of rules les.

s used of Number of  Edges 4 35048116 7 42375912   iangle Counting d with the DLG ach (DLG). The  neration and the for each dataset.

e execution time, f frequent edges.

ms of the average ution time results  G. In addition, the DLG.T compared ges in DLG.T is ts of the number G and DLG.T  ults Rules  Confidence (%)  DLG.T DLG 1 65 27 62 23  92 81 73 47 89 77  0.0070     oth techniques is er graph datasets  of edges in the om the number of e of medium and e pruned graph is   Fig. 2 Performance of the E   Fig. 2 depicts the execution tim  with triangle counting (DLG.T) mining. Using the triangle counting be reduced. The DLG.T works bette the time is significantly reduced c datasets.

Fig. 3 Performance of Nu   The quality of the rules for bo  computed using confidence as in Eq   ednumber rulenumberconfidence _  _ =   The confidence is computed  number of edges and is computed finding the number of triangles in th by using De-Morgan?s Laws, and graph which contains only the no triangles. The number of edges in saved in one file through the runni later it was used to find the frequen Fig.4 shows that the DLG.T gives t to DLG.  In general by producing t the graph, where the number of reduced. To conclude, employmen association rules mining problem, in running time and in producing a with better confidence.

D1 D2 D3 D4       1 2 3 4    Execution Time  me of the proposed DLG ) for association rules g the execution time can er in larger dataset where compared to the smaller    umber of Rules  oth DLG and DLG.T are quation 1.

graphdges generatedes _  _  (1)   d when DLG with full d for second time after he first stage of the work constructing the pruned des and edges from the n the pruned graph was ing of the procedure and  ncy average (confidence).

the best results compared triangles, we are pruning f nodes and edges are t DLG.T concept within give better performance a lower number of rules  D5  DLG.T  DLG   DLG.T  DLG       Fig. 4 Performance in Rules Conf

V. CONCLUDING REMA In this work, we showed how the propos modify a graph by converting it into anoth significantly lower number of edges and number of triangles in the graph. Furthermo method is easy to parallelize since it Adjacency Matrix, which is easy to imple importantly, gives significant speedups v forward competitor. The integration of the t approach with the graph based ARM has re improvements in ARM research. The most to consider in this study is the preservati knowledge while mining within the pruned example in forensic analysis through social where the accurate knowledge or informati decision making process.

