Privacy Preserving Association Rule Mining by

Abstract? Association Rules discovered by association rule  mining may contain some sensitive rules, which may cause  potential threats towards privacy and security. Many of the  researchers in this area have recently made efforts to preserve  privacy for sensitive association rules in statistical database. In  this paper, we propose a heuristic based association rule hiding  using oracle real application clusters by introducing the concept  of impact factor of transaction on the rule. The impact factor of a  transaction is equal to number of itemsets that are present in  those itemsets which represents sensitive association rule. Higher  the impact factor of a transaction, higher is its sensitivity.

Proposed algorithm exhibits the concept of impact factor to hide  several rules by modifying fewer transactions. As modifications  are fewer, data quality is very less affected. Use of clustering aids  in increasing performance by running operations in parallel.

Keywords- Frequent Itemsets, Data Mining, Clusters, Oracle  Real Application Clusters, Association Rules

I. INTRODUCTION  The problem of association rule hiding was first probed in 1999 [1]. After that, many approaches were proposed that can be classified into following classes: heuristic based approaches, border based approaches, exact approaches, reconstruction based approaches, and cryptography based approaches. In following, a detailed overview of Heuristic approaches is given. Heuristic Based Approaches can be further divided into two groups based on data modification techniques: data distortion techniques and data blocking techniques.

The core idea of data modification approaches is the data sanitization. They hide sensitive association rules by directly modifying, or we say, sanitizing the original data D, and get the released database D? directly from D, Most of the existing methods belong to this data modification prosperous track.

However, data modification approaches cannot control the hiding effects intuitively as the sanitization is performed on data level.

Data-Distortion is based on data perturbation or data transformation, and in particular, the procedure is to change a selected set of 1-values to 0-values (delete items) or 0-values to 1- values (add items) if we consider the transaction database as a two-dimensional matrix. It is aimed to reduce the support or confidence of the sensitive rules below the user pre-defined  security threshold. Early data distortion techniques adopt simple heuristic-based sanitization strategies as Algo1a/Algo1b/Algo2a,Algo2b/Algo2c[2],Naive/MinFIA/Max FIA/IGA[3],SWA[4]. Different heuristics determine different selection strategies on which transactions are to be sanitized and which items are to be victims, which are two core issues affecting the hiding effects in the algorithms. Subsequent techniques like WSDA/PDA[5] and Border-Based [6] advanced the simple heuristics to heuristic greedy (local optimal) strategies trying to greedily select the modifications with minimal side effects on data utility.

Data-Blocking [7] is another data modification approach for association rule hiding. Instead of making data distorted (part of data is altered to false), blocking approach is implemented by replacing certain data items with a question mark ???. The introduction of this special unknown value brings uncertainty to the data, making the support and confidence of association rule become too uncertain intervals respectively. At the beginning, the lower bounds of the intervals equal to the upper bounds. As the number of ??? in the data increases, the lower and upper bounds begin to separate gradually and the uncertainty of the rules grows accordingly. When either of the lower bounds of a rule?s support interval and confidence interval gets below the security threshold, the rule is deemed to be concealed.

Super Programming Model (SPM) [8] proposes the use of pc clusters to generate the frequent itemsets with their support counts and generate association rules.

[9] Addresses secure mining of association rules over horizontally partitioned data. The methods incorporate cryptographic techniques to minimize the information shared, while adding little overhead to the mining task.

In this paper, we have used the concept of pc cluster for finding frequent itemsets as well as for hiding SAR (sensitive association rule).

In SPM [8], association rules are generated by concept of clusters, not hided, while in our approach we generate clusters for each and every association rule. Also the selection criterion of transaction is based on impact factor that depends not only on current cluster but it includes all clusters.

Proposed approach also proposes a hybrid approach by combining the concept of ISL (Increase support of LHS) and DSR (Decrease support of RHS) to hide rules.



II. PROBLEM DEFINITION  An association rule is an implication of the form X  Y, where X ,Y are Itemsets,  and    X  Y=  . We say the rule X  Y holds in the database D with confidence c if |XUY|/|X| c. It can also be said that the rule X  Y has support s if |XUY|/|D|  s. Note while the support is a measure of the frequency of a rule, the confidence is a measure of the strength of the relation between sets of items. The well-known association rule mining problem aims to find all significant association rules. A rule is significant if its support and confidence is no less than the user specified Minimum Support Threshold (MST) and Minimum Confidence Threshold (MCT).

To find the significant rules, an association rule mining algorithm first finds all the frequent itemsets and then derives the association rules from them. On the contrary, the association rule hiding problem aims to prevent some of these rules, which is referred as ?sensitive rules?, from being mined.

Given a data set D to be released, a set of rules R mined from D, and a set of sensitive rules Rh subset of  R to be hided, how can we get a new data set D?, such that the rules in Rh cannot be mined from D?, while the rules in R- Rh can still be mined as many as possible.



III. PROPOSED FRAMEWORK  The framework of cluster based Association Rule Hiding (ARH) is depicted in Fig. 1.

Fig. 1. Framework of proposed cluster based ARH  The first step is to build a cluster of n machines using oracle real application cluster. A cluster is a group of computers, called nodes that function as a single computer/system to provide high availability and high fault tolerance for applications or services. Windows 2003 Servers can participate in a cluster configuration through the use of Cluster Services.

Oracle Real Application Clusters (RAC) is a database clustering solution that allows more than one instance to mount and open an Oracle database. RAC can only be used on special clustered systems with shared disk storage and private networks interconnect. The second step is to horizontally partition the database D into D1,D2,?Dn. This partitioned  database is assigned to n processors and local support count of each item is determined. Global support count can be generated by using a distributed algorithm. Frequent itemsets are identified and association rules are generated further. Then clusters are built to hide sensitive association rules using the concept of impact factor. The impact factor of a transaction is equal to number of itemsets that are present in those itemsets which represents sensitive association rule. Higher the impact factor of a transaction, higher is its sensitivity. So, transaction with high impact factor was selected for data distortion to hide the sensitive association rule. According to above presented framework Algorithm 1 hides association rules from database.

Algorithm 1 Clustering based ARH  1: Begin 2: Apply horizontal partitioning on DB.

3: Assign part to corresponding processor  4: Generate Frequent Itemsets.

5: Generate association rules.

6: Select Rh in SAR  7: Input sensitive item( if any )  8: for each sensitive rule  SAC {  9: add clusters in C  10: Find impact factor (ImF) of transaction  11: Sort c in decreasing order of their ImF }  12: For each cluster c  C        {  13: While(sensitive rules c is not hidden )  14: While(unchecked transaction exists){  15: Select unchecked transaction with highImF  16: If single transaction selected  then  {  17:  Delete R.H.S. item from the transaction  18: mark the transaction as checked }  19: Else 20: {  21:  Select unchecked transaction having highest ImF by  summing ImF for all cluster.

22: Delete R.H.S. item from the transaction.

23: Mark the transaction as checked.

24: }  25: Update support & confidence of the rule r  26: If(supp(r) < MST or conf(r) < MCT)  27:  Remove Rule r from Rh }  28: } 29: End while 30: } 31: End for 32: if sensitive item is present in any LHS  33: If  rule still not hided then  34: Apply ISL on transaction having 0 ImF for that rule  35: Update the modified transactions in D.

36: End  By using given minimum support threshold (MST) and minimum confidence threshold (MCT), algorithm first generates the possible number of association rules from source database D. Now some of the generated association rules are selected as sensitive rule set (set Rh) by database owner. Rules with only single R.H.S. item are specified as sensitive. Then algorithm finds impact factor & after that it index sensitive  2012 7th IEEE Conference on Industrial Electronics and Applications (ICIEA) 1459      transactions for each cluster and sorts all the clusters by decreasing order of their impact factor. For the high impact factor cluster, algorithm sorts sensitive transaction in decreasing order of their impact. Now the hiding process tries to hide all sensitive rules by deleting right hand side items of rules in cluster from transaction having highest impact factor.

While loop continues until all rules are not hidden, Algorithm also checks whether any sensitive item is mentioned by owner.

If yes, then it will check its presence on left hand side of rule and increase the support of left hand side till sensitive item gets completely hidden. The following example illustrates proposed framework. A sample transaction database D is shown in Table

I. TID shows unique transaction number. Suppose MST and MCT are selected 3 and 75% respectively.

TABLE I. SAMPLE TRANSACTION DATABASE D  TID Items 1 a b c d e 2 a c d 3 a b d f g 4 b c d e 5 a b d 6 c d e f h 7 a b c g 8 a c d e 9 a c d h  To improve the performance apply horizontal partitioning and assign each part to a corresponding processor, which performs task in parallel. Each cluster node finds the support count of each item. In this example, part1 contain first 5 transactions and part 2 contains last 4 transactions as shown in Table II.

TABLE II. SUPPORT COUNT OF ITEM  Item Cluster 1 Cluster 2 a 4 3 b 4 1 c 3 4 d 5 3 e 2 2 f 1 1 g 1 1 h 0 2  Now total support count of item is calculated and frequent itemsets are selected based on MST as shown in Table III.

Since MST is 3 so item a,b,c,d,e are selected as frequent itemsets.

TABLE III. FREQUENT ITEMSETS  Item Support a 7 b 5 c 7 d 8 e 4  In following, the possible number of association rules satisfying MST and MCT, generated by Apriori algorithm: b a, a d, d a, b d, c d, d c, e c, e d, ab d, bd a, ac d, ce d, de c, e dc. Suppose the rules b-->a, b-->d and c-->d specified as sensitive and should be hidden in sanitized database. As shown in Table IV, Algorithm generates three clusters one for each sensitive rule and calculate the impact factor of each transaction in each cluster. Clusters are sorted based on their impact factor.

TABLE IV. IMF OF SENSITIVE ASSOCIATION RULES  TID ImF of b d ImF of c d ImF of b a Total ImF  1 2 2 2 6  2 1 2 1 4  3 2 1 2 5  4 2 2 1 5  5 2 1 2 5  6 1 2 0 3  7 1 1 2 4  8 1 2 1 4  9 1 2 1 4  Hiding process of Algorithm 1 modifies the transaction and generates the database as shown in Table V.

TABLE V. RELEASED DATABASE  TID Items 1 b c e 2 a c d 3 a b d f g 4 b c d e 5 a b d 6 c d e f h 7 a b c g 8 a c d e 9 a c d h  Now we can see all sensitive association rules are successfully hidden from the database with a very few side effects. Whole approach is based on concept of pc cluster, impact factor and hybrid algorithm which reduces the time and make few modifications to hide the sensitive association rules.

Lemma 1:- Performance increased by using clusters and running operations in parallel  Proof:- The concept is based on calculating impact factor of each transaction on a particular sensitive rule. If there are multiple sensitive association rules r1, r2, ?..rn then impact factor of each transactions has to be calculated for r1,r2,?.rn i.e. scanning the whole database. Let the execution time for finding the impact factor of each transaction on rule r1 be t1.

Then total execution time for finding impact factor of each transaction on rule r1,r2,?rn may be approximately equal to (n X t1). If clusters are used then impact factor of transaction on rules can be calculated in parallel so execution time may be somewhat near to (t1 + delay due to parallelism + network delay ) which will be less than (n X t1).

1460 2012 7th IEEE Conference on Industrial Electronics and Applications (ICIEA)

IV. EXPERIMENTAL SETUP  Experiments used 25 cluster nodes of Intel Pentium dual core with 2.80GHz and 1 GB of RAM (Mahakal Institute of Technology, Ujjain, India laboratory environment) to conduct the experiments. The input dataset is Mushroom downloaded from http://fimi.ua.ac.be/data/. Experiment suggests that as more and more cluster nodes are used well is execution time.

Table VI Shown below representing our performance results.

TABLE VI. EXECUTION TIME USING CLUSTERS  No of Nodes  Execution Time ( in msec) (Average Case)  5 300 10 240 15 190 20 140 25 110

V. CONCLUSION  In this paper a framework has been proposed and implemented for fast privacy-preserving Association rule mining. Proposed approach on concept of pc clusters to perform the task in parallel which results in improved execution time.

The concept of impact factor was used to reduce the number of modifications and keep the quality of data intact.

Results on example dataset are also presented.

