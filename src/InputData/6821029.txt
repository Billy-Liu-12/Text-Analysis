A Game Theoretical  Fault-tolerant Task Scheduling Algorithm for Wireless Sensor  Network

Abstract?In this paper, by employing primary/ backup (P/B) technique and the concept of game theory, we propose a game theoretical fault-tolerant task allocation algorithm for heterogeneous WSNs. During the experiment, our job can be divided into two parts. Firstly, our algorithm introduces the idea of game theory into the solving of primary tasks allocation problem, then we define the playoffs function to find the Nash equilibrium point of task allocation for the purpose of saving the node energy consumption and balancing the network energy under the restraint of tasks deadline. Secondly, based on the allocation of primary tasks, our algorithm determinate the scheme of backup copies, then allocate those tasks by employing passive backup copies overlapping technology. The result of simulations shows the feasibility and effectiveness of our algorithm.

Keywords-WSN; Task Allocation; Game Theory; Fault- Tolerant

I.  INTRODUCTION Wireless senor network is a late-model wireless network  with non-infrastructure and self-organization [1]. Because the nodes in WSN are powered by batteries, which have limited power energy, the techniques of making good use of the energy is one of its focuses in designing and applications.

Task scheduling is a classic problem of extensive research in the field of high-performance computing, and is also the core issues in the area of operating system research. Task management is an important module in WSN, and it works together with the mobile management and energy management to monitor energy consumption, dynamic change and the role of task allocation of the sensor nodes in the entire network [2]. Increasing attention has been directed toward dynamic fault-tolerant scheduling algorithm using the primary-backup mode. In the P/B model, two copies of a task are executed serially on two different nodes and an acceptance test is performed to check the result [3]. The backup mode is divided into two modes: passive backup- copy and active backup-copy.

The major contributions of this study are summarized as follows:  ? By invoking the extensive form game in WSNs, we define the player of game, the strategies of player and the payoffs function to find the Nash Equilibrium point for the purpose of minimizing  tasks execution time, saving node energy consumption, balancing network load and prolonging the network lifetime.

? By employing P/B technique with overlapping to determinate the mode of backup tasks copies adaptively according to the laxity for the purpose of making full use of network resource.

The remainder of this paper is organized as follows. In Section II, related work is provided. Section III describes the scheduling model. In Section IV, the proposed algorithm is given in details. Section V analyzes the performance of our algorithm. Finally, we make conclusions and discuss the future work in Section VI.



II. RELAED WORK Some related works have been conducted on tasks  allocation for single class jobs in distributed systems with the purpose of reducing task completion time and energy consumption. In [4], Yin et al. proposed a hybrid particle swarm optimization (HPSO) algorithm for finding the near- optimal task allocation within reasonable time. In [5], D.

Datla et al. proposed a task allocation and scheduling algorithm that optimizes both energy consumption and make span in a heuristic manner. In [6], dos Santos et al. discuss the application of a clustering algorithm that is inspired by swarm intelligence techniques such as organization of bee colonies and task allocation among social insects.

The structural framework of game theory enables put many factors affecting the equilibrium into a comprehensive model to analyze. In [7], M. Abdeyazdan et al. considered each task as a player attempting to reduce its earliest time as much as possible, and applied the idea of Nash equilibrium in game theory to determine the most appropriate merging.

In [8], YI et al built a Grid model of m?n type grid using M/ M/ 1 queue system, and promoted the concept of task scheduling Nash equilibrium among multi-schedulers.

The P/B copies technology is a common methodology used for those fault-tolerant scheduling algorithms. In [9], R.

Al-Omari et al. proposed an adaptive fault tolerant scheduling scheme that has a mechanism to control the overlap interval between the primary and backup versions of tasks such that the overall performance of the system is improved. In [10], W. Luo et al. proposed a algorithm to assign tasks copies in a way to improve reliability of system, and then considers backup copy in both active and passive   DOI 10.1109/CLOUDCOM-ASIA.2013.20    DOI 10.1109/CLOUDCOM-ASIA.2013.20     status. In [11], X. B. Yu et al. proposed a hybrid fault- tolerant scheduling algorithm for multi-processor in space environment.

In this paper, we pay attention on the issues of non- preemptive fault-tolerant scheduling of real-time a periodic task on heterogeneous WSN. Our algorithm allocates the primary copies based on the idea of game theory for the purpose of network optimization, and adaptively switches between the active backup copy and passive backup copy based on the allocation of primary copies.



III. SCHEDULING MODEL A wireless sensor network with n heterogeneous sensor  nodes is distributed in a certain range, and we can define the set of nodes as N= (n1, n2, ???, nm). A set of independent tasks T= (t1, t2, ???, tn) arrive at the sink node at the same time. Each task has two copies, primary copy tiP and backup copy tiB, and ai and di are used to denote the arrival time and deadline time.

task1  task2 ...

taskn  Primary copies controller  Backup copies controller  Our algorithm  ...

node1  node2  nodem  ...Tasks queue  Tasks queue of node   Figure 1.  The scheduler model  A. Assumptions In this paper, to simplify the task allocation model, we  make the following assumptions.

? At one time instant, only one node can be failed.

Before another node is failed, those failures of primary copies of tasks on the fault node can be successfully executed by their backup copies.

? Faults can be transient or permanent and are independent, i.e., a fault on one node will not affect the other nodes.

? Primary copy and backup copy are the same, i.e., tiP and tiB will have the same energy consumption and the same executing time in the same node.

B. Network model 1) Task execution time  In this paper, a matrix B= (bij)n?m is used to record the capacity of nodes on different tasks. We define an n- dimensional vector REQ= (req1, req2, ???, reqm) denotes requirements of tasks, where reqi denotes the requirement of ti. Then we can define the execution time as follows:  time req bij i ij=                          (1)  2) Energy consumption The energy consumption mainly focuses on the  transmission energy consumption. As show in, the distance dij determines the consumption [12]:  2 2  , ,2 2  (4 )ij i trans o trans  t r  d P P  d G G ? ?  ? = ? ?               (2)  As [(4?)2?]/(GtGr?2?P0,trans) is a constant value, (dij/d0)2 is the evaluation index of unit data of transmission energy. To simplify the data, a matrix COST= (costij)n?m is used to record the transmission consumption.

3) Energy enytopy An n-dimensional vector E= (e1, e2, ???, em) is used to  denote the residual energy of the nodes. P(ei) denotes the proportion of the residual energy of the i-th node in the total residual energy of the whole network.

( )  l  i i i i  P e e e =  = ?                         (3) In order to prolong the network lifetime, it is necessary to  balance the residual energy of each node during the process of task allocation. The average degree of the network residual energy can be defined as follows [13]:  ( ) ( )  log i l  P e i  i H P e  =  = ??                    (4) Where H denotes the energy entropy of the network. The larger the value of the energy entropy is, the more the average residual energy distributes, and the longer the network lifetime will be.

C. Fault- tolerant model 1) Laxity time  Let fiP and fiB be the finish times of primary copy tiP and backup copy tiB, liP denotes the laxity of tiP.

P P i i il d f= ?                           (5)  2) Backup-copy mode In this paper, backup copies may be active or passive.

Our scheme adaptively decides the backup-copy mode based on the laxities of primary copies. Let S(tijB) denote backup- copy mode of tiB on node nj. The backup-copy mode can be expressed as:  ,     ( ) ( )  , ij  B iB  ij  passive if l time S t  active else  ? <?= ? ??  (6)

IV. PROPOSED ALGORITHM  A. The allocation of primary copies 1) The earliest start time  Let ESPP=(estijP)n?m be an earliest start time matrix of the tasks? primary copies, where element estijP denotes the earliest start time of tiP on node nj. The earliest start time estijP of a primary copy tiP on node nj must satisfy the following two constraints: 1) node nj has an idle time slot sufficient to accommodate tiP; 2) the finish time of tiP must be earlier than or equal to the deadline of ti, fiP di.

Without loss of generality, before estijP can be computed, it is assumed that a set of tasks T?= (t1?, t2?, ???, tq?) has been allocate to node nj. Node that these tasks can be primary     copies or backup copies. The idle time slots on nj are [0, s1?], [f1?, s2?], ???, [f?q-1, sq?], [fq?, ], where sq? and fq? denote the start time and finish time of q-th task on node nj respectively.

Now there is a primary copy tip send to the node nj, in order to get estijP, all idle time slots must be scanned from left to right.

nj ...

di tiP ...t1' t2' tk' tq't'k+1  s'k+1fk' ai  timeij Figure 2.  The idle time slots on node nj  As shown in figure 2, the first idle time slot [fk?, s?k+1] that satisfies the following inequality is chosen:  ' 1k is d+ ?                                     (7)  ' ' 1 max{ , }kk i ijs a f time+ ? ?                   (8)  Thus, the earliest start time estijP and the finish time fi j of ti on node nj are determined as follows:  'max{ , }Pij i kest a f=                        (9) j p  i ij ijf est time= +                         (10) 2) The Definition of game  In this paper, we introduce game theory into the solving of primary tasks allocation problem for the purpose of get the best solution to save the node energy consumption and balance the network energy. The indexes of game theory are defined as follow: Definition 1 The process of allocating primary copies is a game.

Definition 2 The players of this game are a set of non- cooperative tasks, T= (t1, t2, ???, tn).

Definition 3 The players? sequence of actions are defined as A= (a1, a2, ???, an), where ai denotes the arrival time of ti.

Definition 4 One pure strategy for a player thus consists of a selection?allocating itself to one node. The strategy set of player ti defines as Si= (pi(n1), pi(n2), ???, pi(nm)), where pi(nj) denotes the strategy that ti chooses node nj.

1, ( )  0,    ji  j  idlen h time sas p n  lot else  ? = ? ?  (11)  Definition 5 For each task, it will be cares about is whether it can be finished as soon as possible and whether the node selected has enough energy to ensure that it will be able to completed satisfactorily. Based on this idea, the payoff profile function of the players is defined as follows:  1 2 3cos j j j  i i i ju w f w t w e= ? + ? + ?                (12) Where uij denotes the gain when the player ti chooses strategy pi(nj), node that the strategy will be better when the value of payoff profile function is smaller; w1, w2 and w3 are the weight values.

3) Backward induction  In game theory, backward induction is a method used to compute sub-game perfect equilibrium in sequential games.

Backward induction is the process of reasoning backwards in time, from the end of a problem or situation, to determine a sequence of optimal actions. It proceeds by first considering the last time a decision might be made and choosing what to do in any situation at that time. Using this information, one can then determine what to do at the second-to-last time of decision. This process continues backwards until one has determined the best action for every possible situation at every point in time. This method is briefly introduced below by using a simple example.

Figure 3.  The tree of game  As shown in figure 3, there are two players. Player 1 moves first and chooses either L or R. Player 2 sees Player 1's move and then chooses L? or R?. Finally, Player 1 see Player 2?s move, and it will choose L? or R? if it chooses L at first step. Suppose that Player 1 chooses R and then Player 2 chooses R?, then Player 1 gets 5 and Player 2 gets 1. There five steps to find the Nash equilibrium shown as follow: Step1: In the sub-tree , Player 1 will get 2 when it chooses L?, and it will get 3 when R? is selected. We can know clearly that R? is an optimal strategy, i.e., L  is the strictly worse strategy, so the result (3, 2) is the sub-game perfect equilibrium and the strategy L? will be eliminated from sub- tree .

Step2: In the sub-tree , Player 1 will get 2 when L? is select, and it will get 4 when it chooses R?. Due to 4>2, the result (4, 1) is the sub-game perfect equilibrium, and the strictly worse strategy L? will be eliminated from sub-tree .

Step3: In the sub-tree , according to the elimination in first two step, Player2 will get 2 when L? is selected, and it will get 1 when it chooses R?. The result (3, 2) is the sub-game perfect equilibrium of sub-tree , and the strategy R? will be eliminated from this sub-tree.

Step4: In the sub-tree , Player 2 will get 3 when it choose L?, and it will get 1 when R? is selected. So the result (2, 3) is the sub-game perfect equilibrium, i.e., the strategy R  will be eliminated from sub-tree  as a strictly worse strategy.

Step5: In the tree of game, according to the elimination mentioned above, Player 1 will get 3 when it chooses L, and it will get 2 when it chooses R. So the result (3, 2) is the Nash equilibrium of this game.

4) The primary copies allocation treeRoot = null;  get a new task ti to create the structure  of game tree  get the tree structure that  already exists;  eliminate ti?s useless strategies according to  method 1;  according to Eq. (12), compute the gain by finish time fij,  energy consumption costij and residual energy ej;  eliminate ti?s strictly worse strategies  according to method 2;  update the idle time slots of nodes, the residual energy of  nodes and the structure of game tree;  the tasks number is n?

Yes  Use backward induction mentioned above to find the  Nash equilibrium point according to game tree;  No   Figure 4.  The process of primary copies allocation  In this paper, our model has much more players and much more strategies than the example mentioned above, so it is essential to decrease the complexity of game tree. There are two method introduced as follow: Method 1: The strategy pi(nj) is a useless strategy if pi(nj) =0.

Based on this rule, our algorithm can eliminate the useless strategies from Si, i.e., these useless strategies can be called the strictly worse strategy, and they will not be player?s option when it makes its choice.

Method 2: As shown in Eq. (12), the payoff function uij is determined by the finish time fi j, energy consumption costij and nodes? residual energy, so the gain of the player who moves early will not be hurt by the choice of the players who move later. Base on this rule, when player ti make its choice, our algorithm can compute the gain of its each strategy, then compare these values of gain to select some strategies which can obtain max value, and these strategies are the optimal strategy in the game.

B. The allocation of backup copies 1) The latest start time  In our algorithm, the backup copy of a task is permitted to execute only if a fault occurs in the primary task. If the primary copy has been safely accomplished and its backup copy in the passive mode, this backup copy will be removed from the node. If backup copy in the active mode, it need to execute part of itself. It is essential to let the backup copy start as later as possible, so the executing part of active backup copy will be as smaller as possible. In this paper, let LSTB=(lstijB)n?m be the latest start time matrix of the tasks? backup copies, where element lstijB denotes the latest start time of tiB on node nj.

As far as the computation for the latest start time of backup copy tiB is concerned, we do not necessarily select an idle time slot to accommodate tiB. This is because in our fault-tolerant scheduling algorithm, multiple backup copies  may overlap in the same time slot on the same node. We can now discuss the latest start time of a task?s backup copy. For any backup copy tiB on node nj, node that the backup copy tiB and primary copy tiP cannot run in the same node, we can compute the latest start time lstijB follow by some case.

B B ij i ijlst d time= ?                       (13)  '  B B ij k ijlst s time+= ?                       (14)  nj ...

di ...t1' t2' tk' tq't'k+1  s'k+1fk'ai  timeijB tiB   Figure 5.  The scenario of case 1  Case 1: As shown in figure 5, there is an idle time slot satisfies the backup copy tiB, i.e., s?k+1-di 0 and di-timeijB fk?, node that t1?, t2?, ???, tq? can be primary copies or backup copies, the latest start time lstijB can be computed as Eq. (13).

nj ...

di ...t1' t2' tk' tq't'k+1  s'k+1fk'ai  timeijB tiB   Figure 6.  The scenario of case 2  Case 2: As shown in figure 6, the latter part of backup copy tiB overlap with t?k+1, i.e., di-s?k+1 0 and di-timeijB>fk?, node that t1?, t2?, ???, tq? can be primary copies or backup copies, the latest start time lstijB can be computed according to the type of tk?.

? If tk? is the primary copy or active backup copy, the overlap part of two tasks is logically impossible.

Because if the node of tiP fails before s?k+1, then tiB should execute. This will result in tiB and tk? executing simultaneously in some time slot. Thus, the system is not able to realize fault tolerance, so the latest start time lstijB can be computed as Eq. (14);  ? If tk? is a passive backup copy, and tkP? (primary copy of tk?) and tiP are in the same node nq, the overlap of two tasks is logically impossible. Because if node nq fails before minimum fkP? and fiP, then tiB and tk? should execute. This also is not able to realize fault tolerance, so the latest start time can be computed as Eq. (14);  ? If tk? is a passive backup copy, and tkP? (primary copy of tk?) and tiP are in the different node nq, the overlap is feasible. The latest start time can be computed as Eq. (13).

2) The backup copies allocation The goal of backup allocation is to allocate backup  copies to the node, and it also strives to make backup copies use active scheme. In order to make tiB employ passive scheme, tiB should begin to execute as late as possible, thus we can calculate the latest start time lstijB of tiB on node nj. If the latest time of tiB is later than or equal to the finish time of tiP, tiB is capable of employing passive mode. If the latest     start time of tiB is earliest than the finish time of tiP, tiB must execute by active mode.

get the allocating solution of primary copies  get a new backup copy tiB whose primary copy tiP  has been allocated;  scan all nodes except the node of tiP, then compute the latest  start time of tiB according to the method mentioned above;  Yes  reject primary copy tiP and backup copy tiB;  choose the latest lstijB, and allocate tiB;  the backup copies number is n?

Yes  get the allocation of backup copies  No  tiB does not exits latest start time ?

No   Figure 7.  The process of backup copies allocation

V. PERFORMANCE EVALUATION In this section, we present a group of experimental results  to observe the performance comparison of Game Theoretical Fault-tolerant Task Scheduling (GTFT), Non-Overlap Game Theoretical Fault-tolerant Task Scheduling (NOGTFT), and Minimum Complete Time Fault-tolerant Task Scheduling (MCFT). These algorithms are briefly described as follows:  ? GTFT: In the process of allocating each primary copy, GTFT invokes the idea of game theory, then uses backward induction to get the best solution of allocation. Base on the allocation of primary copies, GTFT employs the P/B technology with overlapping to determinate the mode of backup tasks copies.

? NOGTFT: Like about GTFT, NOGTFT also uses backward induction to get the best solution of allocation, however, NOGTFT employs the P/B technology without overlapping.

? MCFT: This algorithm allocates each primary copy based on its complete time in each node. MCFT chooses a node offering the minimum complete time to allocate primary copies. Like about GTFT, MCFT also employs the P/B technology with overlapping to determinate the mode of backup tasks copies.

The experimental parameter in our simulation studies are shown as follow: the execution time timeij of task ti on the node nj is uniformly distributed between 15 and 70. The energy consumption costij of task ti on the node nj is uniformly distributed between 30 and 70. The arrival time is described as: ai = ai-1 + interval, where interval is a random number and a0 =0. The deadline di of task ti is chosen as: di =ai + max {timeij} + base, where base is a random number and determines whether the tasks have loose deadlines or  not. The energy of each node is distributed between 6000 mj and 9000 mj.

40 50 60 70 80 90  0.1  0.2  0.3  0.4  0.5  0.6  0.7  Number of nodes  M is  si ng  r at  e      GTFT  NOGTFT  MCFT   Figure 8.  The missing rate  Figure 8 illustrates the tasks missing rate of GTFT, NOGTFT, and MCFT, and figure 9 depicts the average executing time of GTFT, NOGTFT, and MCFT. It is found that with the increase of node number, the task missing ratios and the average executing time of these algorithms all get decreased. This is because the idle slot of nodes is increased with the increasing of node number, which leads to more tasks being accommodated. The missing rate of GTFT and MCFT turn out to be lower than that of NOGTFT, and the average executing time of GTFT and MCFT is much higher than that of NOGTFT. This result can be attributed to the fact that NOGTF does not allocate the backup copies by employing the P/B with overlapping, making some back copies unable to be accepted. Furthermore, we can observe that the missing rate of MCFT always remains higher than that of GTFT and the average executing time of MCFT remains lower than that of GTFT. The reason is that MCFT only focus on the complete time of tasks, which enhances the utilization of time slot in nodes.

100 110 120 130 140 150          Number of nodes  A ve  ra ge  e xe  cu tin  g tim  e      GTFT  NOGTFT  MCFT   Figure 9.  The average executing time  Figure 10 depicts the average energy consumption of GTFT, NOGTFT, and MCFT. The average energy consumption of them decreases with the increase of node     number, and he residual energy of GTFT and NOGTFT is much more average than that of MCFT. From figure 10, we can know that the average consumption of MCFT turn out to be much higher than that of GTFT and NOGTFT. It should be noted than MCFT only guarantee the complete time of tasks and does not care about the energy consumption or the residual energy of nodes, which leads to more tasks being allocated to the nodes with higher executing ability. On the contrary, GTFT and NOGTFT not only focus on the complete time of tasks, but also consider the energy consumption of tasks and the residual energy of each node, which leads to more tasks being allocated on the nodes which have more energy. Due to the restriction of energy in WSN, the consumption of energy and the balance of network energy are the vital factors to impact the network?s lifecycle, we come to the conclusion that GTFT and NOGTFT will perform better than MCFT in the lifecycle of WSN.

100 110 120 130 140 150        Number of nodes  A ve  ra ge  e ne  rg y  co ns  um pt  io n      GTFT  NOGTFT  MCFT   Figure 10.  The average energy consumption

VI. CONCLUSION This paper presents an efficient fault-tolerant scheduling  algorithm that schedules independent tasks in a heterogeneous WSN. We discuss the problem of primary copies allocation dealing with energy efficiency, minimizing tasks execution time, load balancing in WSNs with the help of concepts from game theory. Then striving to delay the start time of backup copies, we employ the backup copy overlapping technology within timing constraints. The illustration and experimental results indicate that the algorithm is effective. In the future, we will structure a more complex game theory model, and extend our fault-tolerant model to reduce unnecessary redundancy of the overlap.

