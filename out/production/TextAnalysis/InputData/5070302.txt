Research and Application of Association rules mining in group-based teaching

Abstract?For increasing the efficiency of mining association rules in student score database, this paper presents an improved algorithm that doesn?t extract all rules, but extracts a subset of all rules that is called rule-generating set. We can use it to get all rules. The number of the rule-generating set is smaller than all rules, so the efficiency of mining is increased.

The algorithm in this paper extracts rule from a group of nodes. We can use smaller memory sizes storing rules and increase the speed of finding rules. The paper also proposed a kind of data structure used storing the rule-generating set and an algorithm that can use the rule-generating set to get normal rule-generating set. Lastly the method of deciding an itemset existing or not was presented for application system.

Keywords- data mining; association rules; concept lattice; rule-generating set; group-based teaching.



I.  INTRODUCTION With the rapidly developing of education, the education  reform became more and more important. The old method of teaching all students with the same way have not been right.

Because the difference between students became larger in recent years for all kinds of reason, such as goal, base, personal ability, interesting. We should change old teaching method and teach them with different ways according to their reality. For example, different teaching methods, goal, processing, knowledge, valuing system. So each student can have most knowledge increasing. It is called group-based teaching which will do a good job in resolving some problem like inspiring student?s interest, improving teaching quality[1].Obviously classifying students is very difficult problem, here we can only do it according to their scores.

Knowledge discovery in database is more important area in AI researching now and mining association rules is the widest application in data mining area. The traditional Apriori algorithm can generate all association rules, but the number of association rules is usually very large and redundant because a number of rules can be generated by other rules. The concept lattice that is proposed by Wille et al. in 1982 is an efficient tool of mining association rules.  A node in it is called a concept[2]. The extension of concept is a set of object belonged to the concept and the intension of concept is a set of attribute shared by all object. The concept lattice describes the relationship of generalization and specialization among concepts and the Hasse Graph realizes visualization to data[3] .As a kind of formal tool used data analyzing and knowledge processing the concept lattice has  already been used in information indexing, data mining, software engineering et al. area.

The concept lattice and Hasse Graph expresses the relationship of generalization and specialization among concepts of concept lattice is very suitable for extracting rules. Godin et al. proposed the algorithm of extracting rules based on concept lattice but the number of rules is usually large. Zaki proposed the algorithm that uses the minimal generators of closed items to generate non-redundant association rules.



II. BASE THEORY  A.  Association rules[4] The association mining task can be stated as follows: Let  I = {1, 2, . . . ,m} be a set of items, and let T = {1, 2, . . . , n} be a set of transaction identifiers or tids. The input database is a binary relation ? I ?T. If an item i occurs in a transaction t, we write it as (i, t) ? ?, or alternately as i?t. Typically the database is arranged as a set of transactions, where each transaction contains a set of items. The support of an itemset X, denoted ?(X), is the number of transactions in which it occurs as a subset, i.e., ?(X) = |t(X)|. An itemset is frequent if its support ?(X) ? minsup, where minsup is a user- specified minimum support threshold. An association rule is an expression A?B (q,p), where A and B are itemsets. The support of the rule is q=? (A?B)=|t(A?B)| (i.e., the joint probability of a transaction containing both A and B), and the confidence p = ?(A?B)/?(A) = |t(A?B)|/|t(A)|.A rule is frequent if the itemset A?B is frequent (i.e., q ? minsup). A rule is confident if p ? minconf, here minconf is a user- specified minimum threshold. When support is understood, we omit q and write a rule as A ?B(q).Association rule mining consists of two steps : (1) Find all frequent itemsets (2) Generate high confidence rules[5].

B.  concept lattice[6] For any closed itemset X, there exists a closed tidset  given by Y, with the property that Y = t(X) and X = i (Y) (conversely, for any closed tidset there exists a closed itemset). We can see that X is closed by the fact that X = i (Y), then plugging Y = t(X), we get X = i (Y) = i (t(X)) = ci t (X), thus X is closed. Dually, Y is closed. For example in figure 1, we have seen that for the closed itemset ACW the associated closed tidset is 1345. Such a closed itemset and closed tidset pair X ? Y is called a concept.

2008 International Workshop on Education Technology and Training & 2008 International Workshop on Geoscience and Remote Sensing  DOI 10.1109/ETTandGRS.2008.96   2008 International Workshop on Education Technology and Training & 2008 International Workshop on Geoscience and Remote Sensing  DOI 10.1109/ETTandGRS.2008.96      Figure 1.  concept lattice example  C.  Duquenne-Guigues&Luxenburger basis Gerd Stumme proposed two subsets of all association  rules: Duquenne-Guigues basis and Luxenburger basis in his paper. We can use them generating all rules whose confidence is 100% or lower 100% respectively .The idea gives us new thought about extracting association rules on lattice[7].



III. EXTRACTING ASSOCIATION RULES ON LATTICE  A. traditional algorithms In order to extracting non-redundant association rule sets  on lattice the traditional algorithm is proposed. It usually involves two stages[8]:  1. find all node couple(c1,c2),where |c1|/|c2|>miniconf and |c1|>minisup,c1<c2.

2. delete all redundant couple, extract association rule and delete all redundant rules.(the detail can be seen in documentary [8])  B.  group-generating rule sets algorithm The algorithm on this paper does not extract all rules but  extracts a subset of all rules that is called rule-generating set.

We can use it to get all rules. The set is not similar to that from traditional algorithm. It doesn?t extract rules from a pair of nodes but from a group of nodes on lattice, so we called the algorithm GRGSA (group-rule-generating sets algorithm). The algorithm to extract group rule-generating sets is shown in figure 2.

1)  GRGS Algorithm //  the lattice L, minisupport ?, miniconfidence ? Function  remove(M,t)  // delete all nodes whose  extension are lower than t from M Function  child(N) // get children node of each node in N Function  Gmin (c1,c2) //get rule sets whose confidence is 100% from c1 and c2 // the detail can be found in documentary [9] INPUT: L, ?, ? OUTPUT?? .      //group-rule-generating sets ??=?; ?n=N*?? //N is the count of all transaction   in dataset ?M0 = M0?c0 ;   //c0 is the root node of lattice ? M1  =child( M0 )?remove(M1  ); ? if M1=?? then ? Else C={first node in M1};  ?. e=extension(c); ?. N0 =child(c), remove(N0 ,min(n, e*?)); ?. R2={Gmin( C,C2) |?C2?N0?}??=??R2; ?.  N1 =child(N0 ), remove( N1 ,min(n,e*?)); ?. IF    N1=?  THEN ?; ELSE  R3={Gmin( father(c2),C2) |(C2?N1)},?=??R3 ; Remove all nodes whose father node belongs to N1 from  N0; N0=N0?N1; Goto ?; ?.  R1={A ?Intension(I)-A|A?Gmin(C), I?N0 }?  ?=??R1; ?.  If c.next=null then ? else C=C.next:goto?; ? M1?M0?goto ?; ? end;  Figure 2.  group-rule-generating sets algorithm  2) data structure used to store GRGS This paper use such data structure to store GRGS  according to the algorithm. It is shown in figure 3.The head record is used storing group-rule and other record is used storing precise rules that extracted between node in the group and its father-node except for the first node. The record is null if there is no rule between two node.

C ATW 6    TW A 3    3   T C 4 null   Figure 3.  data structure for GRGS  The first field of record is used storing head of the rule.

The second field of record is used storing back of the rule.

The third field of record is used storing extension of the node. The rest field of record is used storing pointer that points next node.

3)  From GRGS to traditional rule-generating set Function  child(N) // get children node of each node in N; Function pre(r)  // get the forward of the rule r; Function back(r) //get the back of the rule r; input? M     // group-rule-generating set output??    //traditional rule-generating set ??=?; ?H=M.first;    //H is a link table pointer ? ?=??H.rule; G= H.rule; N =child(H); ?if pre(G)=pre(N.rule) then ? else ?. N?=N?m=0; While ni.rule=null {ni=ni.next;m=m+1};   ?ni?N?? ?. If  back(ni)=pre(G)  then  ?  else ?  ?ni?N?? ?. A=pre(n1)?pre(n2) ??pre(nn)    ni?N? B=pre(n1)-pre(n2)-?pre(nn)    ni?N? ?.  R={pre(G) back(G)-A};?=??R; ?.  R1={ pre(G) back(G)-B}:m=m-1;     IF m=0 then ?=??R1; ?. N?=child(N);GOTO ?; ?.G={pre(ni) back(G)+pre(G)-pre(ni)} ni?N?; ?=??G; Goto ? ? if M=? then ? else H=M.next: goto ?; ? end;

IV. APPLICATION SYSTEM We had a student score database that recorded all  student?s scores of  all courses during the past terms. In the past years we only used simply it seeking or counting. Now we hope mining the data and getting some association rules that can help us in group-based teaching works. The architecture of the system is shown in figure 4.

Figure 4.   architecture of the application system  We first deal with the data item according to the requirement of association rules mining. The scores were replaced with the order number of the score in all student?s scores and some exception data was cleared. There is an item if i occurs in a transaction in transaction database. Here we defined an itemset in student?s score database:  D=|SS-AVER|  TABLE I.    SYSTEM  MINING RESULTS  rules minsupp minconf & C Language  Data structure  60% 70% 55.3%  C Language  Math&Data structur  60% 50% 48.8%  Computer theory  Digital circuit  60% 70% 70.5%  Computer theory  Digital circuit  60% 50%  MIS none 60% 70%  MIS English&VF 60% 50% 65.5%  Here SS is the order number of the score, AVER is the average of order number of all scores that are in the itemset.

If d<=5,the itemset is existing.

We had done some experiments after the system had been completed. Some rules were listing in table 1. Then we  used some data to check these rules and the percentage of correctness & is also listed in table 1.



V. EXPERIMENT AND RESULT ANALYSIS After the text edit has been completed, the paper is ready  for the template. Duplicate the template file by using the Save As command, and use the naming convention prescribed by your conference for the name of your paper. In this newly created file, highlight all of the contents and import your prepared text file. You are now ready to style your paper.

We use three kind of different algorithm (APRIORI, traditional rule-generating sets algorithm[8], GRGSA in this paper)to mining association rule sets under the same condition. The test result is shown in figure 5.

It can be seen from figure 5 that the number of the association rules is smaller when the GRGSA is used to mine than others But the time efficient is lower than the traditional algorithm.

APRIORI TRADITIONAL GRGSA  RULE NUMBER  TIME   Figure 5.  performance comparision of three algorithms

VI. CONCLUSION AND EXPANSION Mining association rule from large data usually gets too  much rules that sometimes we have no enough space to store .This paper proposed an algorithm(GRGSA) that can extract rule-generating set and the rule-generating set is smaller than others. When the mining data is very large and the confidence threshold is very low, our algorithm can get smaller rule-generating set than other algorithm. So we can give the user smaller rule set and user can choose a part of rules according to his aid. Our next object is to get user- oriented rules from GRGS according to different requirement from user and the efficient is higher.

