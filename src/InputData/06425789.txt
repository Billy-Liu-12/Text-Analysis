Social-Based Conceptual Links: Conceptual Analysis Applied to Social Networks

Abstract?In this work, we propose a novel approach for the discovery of frequent patterns in a social network on the basis of both vertex attributes and link frequency. With an analogy to the traditional task of mining frequent itemsets, we show that the issue addressed can be formulated in terms of a conceptual analysis that elicits conceptual links. A social-based conceptual link is a synthetic representation of a set of links between groups of vertexes that share similar internal properties. We propose a first algorithm that optimizes the search into the concept lattice of conceptual links and extracts maximal frequent conceptual links.

We study the performances of our solution and give experimental results obtained on a sample example. Finally we show that the set of conceptual links extracted provides a conceptual view of the social network.

Index Terms?Social network; social network mining; formal concept analysis; frequent patterns; semantic; conceptual view

I. INTRODUCTION New algorithms or adjustments of existing algorithms have been  proposed to introduce the dimension given by node attributes as a complementary source of information in various problems, such as visualization [8] or classification [3] tasks or the identification of communities [6]. In the latter category, communities or subgraphs that are searched are intended to satisfy not only a best internal connectivity but attribute similarity too. In a very recent work, a different idea [7] was to explain the occurrence of dense subgraphs with node attributes comparison.

In this work, we follow a novel approach that consists (i) on selecting the attribute similarity as the most important criteria for grouping nodes in conceptual clusters and (ii) on retaining sets of links in the social network that are enough numerous between nodes of the conceptual clusters. Since (i) is equivalent to a search for frequent itemsets among objects that are nodes here, we identify (ii) as an enhancement of the formal concept analysis fitted to social links that we call conceptual links. The originality of our approach is its ability to take into consideration first the attributes of nodes and then the network structure for extracting the conceptual links by combining formal concept analysis and search for frequent patterns.

This kind of patterns provide useful knowledge on the groups of nodes that share common internal properties defining a concept, and that are mostly connected to another group of nodes associated in the same manner to another concept.

The mining algorithm we propose works without any a priori knowledge on the social network and performs a bottom-up re- search by gradually reducing the search space. Conceptual links discovered provide a synthetic and conceptual view that summarizes the knowledge acquired on the network. The efficiency of our solution is demonstrated through several experiments that show good performances in various configurations.

This paper is organized as follows. Section II gives an overview of the previous works on the extraction of patterns in social networks. In Section III, we formally define the concept of social-based conceptual  link. Section IV details the proposed algorithm for the extraction of maximal frequent conceptual links. Section V is devoted to the conceptual views provided by these links. Experimental results are presented in Section VI and we conclude in Section VII.



II. RELATED WORK The problem we address in this paper is related to three close  fields: (i) network-based frequent pattern discovery, (ii) link-based clustering and (iii) social network conceptual analysis.

(i) The most natural and widely used definition of a pattern in the context of social networks is that of a ?subgraph? [3], [1]. Thus, the problem of frequent pattern discovery consists on searching for subnetworks frequently found in a collection of networks [4] or in a single large network [5] according to a minimum support threshold.

The traditional approach is to use labels associated to nodes and links.

Afterwards, by using such a network representation, the problem consists on searching for sets of labels occurring frequently.

The main frequent subgraph discovery algorithms can be classified according to two basic approaches: (1) the Apriori-based approach [4] and (2) the Pattern-growth approach [10].

(ii) Link-based clustering (LBC) is a class of methods that perform clustering by using links among objects [9]. The classical objective is to partition the network into several components, also called communities. For this purpose, the algorithms attempt to maximize intra-cluster links while minimizing inter-cluster ones.

Two classes of methods are usually distinguished: (1) methods only based on topological structure [9] and (2) methods taking into account attributes so that nodes with common attributes are grouped into same partitions [11].

(iii) Some very recent works have attempted to apply the so called formal concept analysis (FCA) to social networks. These works have been motivated by the belief that one interesting approach for understanding and interpreting the interactions into social networks would be to combine analysis and visualization techniques, for addressing the world in terms of objects and attributes. Thus, social network conceptual analysis consists on searching for the groups of nodes that have common contacts.

For instance, Snasel et al. [8] focus on the visualization issue and propose a solution that reduces the links between objects for optimizing the concept lattice formation. Le Grand et al. [6] propose several measures for characterizing the nodes of the network.

The approach we propose in this paper is hybrid. It combines techniques conducted on social network conceptual analysis and search for frequent patterns.



III. PRELIMINARIES We propose a definition that associates the graph structure and  the node attributes by defining a pattern as a ?set of links between two groups of nodes, where nodes in each group share common properties?. When these patterns are found frequently enough in the overall network, they are frequent patterns in the traditional meaning and we call them ?frequent conceptual links?.

DOI 10.1109/ASONAM.2012.15    DOI 10.1109/ASONAM.2012.15     Let G = (V,E) be a network, where V is the set of nodes (vertexes) and E the set of links (edges) with E ? V ? V .

V is defined as a relation R(A1, ..., Ap) where each Ai is an attribute. Thus, each vertex v ? V is defined by a tuple (a1, ..., ap) where ?k ? [1..p], v[Ak] = ak, the value of the attribute Ak in v and |R| = p.

An item is a logical expression A = x where A is an attribute and x a value. The empty item is denoted ?. An itemset is a conjunction of items for instance A1 = x and A2 = y and A3 = z. An itemset which is a conjunction of k non empty items is called a k-itemsets.

Let IV be the set of all itemsets built with V .

Let us consider G as a unipartite directed graph. Thus, for any itemset m in IV , we denote Vm the set of nodes in V that satisfy m and we define: - the m-left-hand linkset LEm as the set of links in E that start from nodes satisfying m i.e LEm = {e ? E ; e = (a, b) a ? Vm} - the m-right-hand linkset REm as the set of links in E that arrive at nodes in Vm i.e REm = {e ? E ; e = (a, b) b ? Vm}.

Definition 1. Conceptual link. For any two elements m1 and m2 in IV , we define the set of links connecting nodes in Vm1 to nodes in Vm2 as the conceptual link (m1,m2) of G.

For instance, if m1 is the itemset cd and m2 is the itemset efj, the conceptual link (m1,m2) = (cd, efj) includes all links in E between nodes in V that satisfy the property cd with nodes in v that satisfy the property efj.

Let LV be the set of conceptual links of G = (V,E). Let (m1,m2) be any element in LV : (m1,m2) = LEm1 ? REm2  = {e ? E ; e = (a, b) a ? Vm1 and b ? Vm2} Definition 2. Support of conceptual link. We call support of any  element l in LV , the proportion of links in E that belong to l, i.e.

supp(l) = |l| |E| .

For any itemset m and any conceptual link l, if l = (?,m) or l = (m, ?) then supp(l) = 0.

Definition 3. Frequent Conceptual Link. A conceptual link l in LV is frequent if its support is greater than a minimum support threshold ?, i.e. supp(l) > ?.

Let FLV be the set of frequent conceptual links (FCL) in G = (V,E) according to a given threshold ?.

FLV = ?  m1?IV ,m2?IV { (m1,m2) ? I2V ; |(m1,m2)||E| > ? }  Property 1. Frequency property. If the conceptual link (m1,m2) is frequent then the sets LEm1 and REm2 satisfy the following conditions: |LEm1 | > ? ? |E| and |REm2 | > ? ? |E|  Proof. If (m1,m2) is frequent then |(m1,m2)| |E| > ?  ? |LEm1 ? REm2 ||E| > ? ? |LEm1 ? REm2 | > ? ? |E| ? |LEm1 | > ? ? |E| and |REm2 | > ? ? |E|  The relation ? that defines a partial order on IV can be extended to LV . As for the traditional research of frequent itemsets in the data mining area, the extraction of all FCLs can be achieved by pruning a concept lattice. As we show just bellow, (LV ,?) induces a concept lattice into which we extract so called maximal frequent conceptual links (MFCL).

Definition 4. Conceptual sub-link. Let two any itemsets sm1 and sm2 be respectively sub-itemsets of m1 and m2 in IV . The conceptual link (sm1, sm2) is a conceptual sub-link of (m1,m2).

Similarly, (m1,m2) is a conceptual super-link of (sm1, sm2).

We write (sm1, sm2) ? (m1,m2).

Property 2. Downward-closure property. If a conceptual link l is frequent then all its sub-links are frequent. Thus if a link is  a, a a, b b, a  ab, b  ab, ab  a, ab b, abab, a  b, b  ?, ?  (a)  a, b  ab, b  ab, ab  a, ab b, abab, a  b, ba, a b, a  ?, ?  (b)  Fig. 1. An example of social-based concept lattice: (a) (ab, b) is frequent and (b, b) is infrequent, (b) irrelevant links are pruned  infrequent then all its super-links are infrequent.

Proof. Let sm1 and sm2 be respectively sub-itemsets of m1 and m2.

The properties Vm1 ? Vsm1 and Vm2 ? Vsm2 hold.

Therefore (m1,m2) ? (sm1, sm2) Thus |(m1,m2)| ? |(sm1, sm2)|.

Definition 5. Maximal frequent conceptual link. Let ? be a given support threshold, we call maximal frequent conceptual link, any frequent conceptual link l such as, there exists no super-link l?  of l that is also frequent.

More formally, ?l? ? FLV such as l ? l?.

FCLs give a conceptual view of the social network about groups of nodes that share common internal properties (or concepts) and are the most connected into the network. MFCLs provide the synthetic visualization of the social network.

For instance, if links (b, a) and (ab, a) are FCLs and (ab, a) is maximal, then the MFCL (ab, a) represents the social concept: ?among all links in G, those that connect nodes with properties a and b, and nodes with properties a are more than ?%? According to the formal concept analysis [2], we should write this conceptual link as follows: (({v1, v2}, ab), ({v3, v4, v5}, a) where ({v1, v2}, ab) and ({v3, v4, v5}, a) are the two concepts each defined by its intention ab or a (the property) and its extension {v1, v2} or {v3, v4, v5} (the sets of objects-nodes that each satisfies its property).

Thus this conceptual link (({v1, v2}, ab), ({v3, v4, v5}, a)) is an element of P (V )2 ? I2V .

Definition 6. Binary relation. We define the binary relation ? on P (V )2 ? I2V as follows. For any two elements ((x, y), (m, p)) and ((x?, y?), (m?, p?)) in P (V )2 ? I2V , ((x, y), (m, p)) ? ((x?, y?), (m?, p?)) iff (x?, y?) ? (x, y) and (m, p) ? (m?, p?).

Property 3. Social-based concept lattice. (P (V )2 ? I2V ,?) is a concept lattice, called social-based concept lattice, defined on LV .

Proof. Same properties of extensivity, idempotence and mono- tonicity as for the standard concept lattice (P (V )? IV ,?).

Definition 7. Conceptual view of the social network. Let G = (V,E) be a social network, ? the minimum support threshold and FLVmax be the set of the maximal frequent conceptual links in FLV . FLVmax provides a conceptual and synthetic view of the social network in which only relevant links between groups of nodes are represented.

On the basis of the downward-closure property, the search path for MFCL can be optimized as illustrated by Figure 1 on a small lattice.

In a top-down search into the lattice, when a MFCL like (ab, a) is found, all its sub-links may be pruned since they cannot be MFCL.

Similarly, in a bottom-up search into the lattice, when an infrequent conceptual link like (b, b) is found, all its super-links may be pruned since they cannot be frequent.



IV. MINING MAXIMAL FREQUENT CONCEPTUAL LINKS The search for all MFCLs may be much time consuming since it  is similar to the problems of counting and finding maximal frequent itemsets that were identified to be ?P and NP -hard. That is why the solution proposed attempts to gradually reduce the search space in the     Algorithm 1 MFCL-Min Algorithm Require: G = (V,E): Network, and ? ? [0..1]: Minimum support  threshold 1. FLVmax : Set of all MFCLs ? ? 2. LIcand: Stack of left-hand itemset candidates ? ? 3. RIcand: Stack of right-hand itemset candidates ? ? 4. L: List of frequent conceptual links ? ? 5. t: Iteration ? 1 {Generation of the 1-frequent conceptual links}  6. LI1 ? Generate 1-itemsets m from V such as |LEm| > ??|E| 7. RI1 ? Generate 1-itemsets m from V such as |REm| > ??|E| 8. for all itemset m1 ? LI1 do 9. for all itemset m2 ? RI1 do  10. if |(m1,m2)| > ? ? |E| then 11. add m1 to LIcand 12. add m2 to RIcand 13. add (m1,m2) to L 14. add (m1,m2) to FLVmax 15. end if 16. end for 17. end for {Generation of the other frequent conceptual links}  18. t? t+ 1 19. while L ?= ? and allCombinations() = false do 20. LIcand ? {joint of all distinct left-hand (t-1)-itemsets m of  L sharing (t-2) items, such as |LEm| > ? ? |E|} ?LIcand 21. RIcand ? {joint of all distinct right-hand (t-1)-itemsets m of  L sharing (t-2) items, such as |REm| > ? ? |E|} ?RIcand 22. L? ? 23. for all itemset m1 ? LIcand do 24. for all itemset m2 ? RIcand do 25. if ((|m1| = t or |m2| = t) and ?l ? L such as  (m1,m2) ? l and |(m1,m2)| > ? ? |E|) then 26. add (m1,m2) to L 27. remove all q ? FLVmax such as q ? (m1,m2) 28. add (m1,m2) to FLVmax 29. end if 30. end for 31. end for 32. t? t+ 1 33. end while 34. return FLVmax  social based concept lattice. Section IV-A details our approach for the classical cases of unipartite and oriented networks and Section IV-B discusses flexibility and optimizations of our solution.

A. MFCL-Min Algorithm In a naive approach, the search for MFCLs would require to  generate all possible itemsets from node attributes and then evaluating the frequency of each itemset pair. The MFCL-Min algorithm that we propose (see algorithm 1) performs a bottom-up research and applies properties 1 and 2 (see Section III) for reducing the search space to conceptual super-links potentially involved in MFCLs. Without loss of generality, the search for FCLs involving t-itemsets, comes to searching super-links involving (t-1)-itemsets.

More precisely, at iteration t = 1, MFCL-Min starts by building set LI1 (resp. RI1), the set of potential 1-itemsets m1 (resp. m2) of frequent conceptual links (m1,m2) according to property 1 (see lines 6-7 algorithm 1). Then, FCLs are searched among these itemsets and stored in a temporary list L, that will store afterwards at iteration t all FCLs involving k-itemsets (k ? t). During this process, left- hand and right-hand itemsets are also stored in separate stacks for further generations. At this level, all FCLs are considered as maximal ones and stored in FLVmax (see lines 8-17).

Algorithm 2 Optimizing the generation of the set (m1,m2) Require: G = (V,E): Network, m1: itemset, m2: itemset 1. LEm1 , REm2 : set of links ? ? 2. for all node v ? V do 3. if v matches with m1 then 4. add all output links of v to LEm1 5. end if 6. if v matches with m2 then 7. add all input links of v to REm2 8. end if 9. end for  10. (m1,m2)? LEm1 ?REm2  At iteration t, left-hand and right-hand candidate itemsets are gener- ated and respectively stored in LIcand and RIcand (see lines 20-21).

The candidate itemsets are unions of (i) super-itemsets of the left- hand or right-hand (t-1)-itemsets of L, i.e. the t-itemsets potentially involved in FCLs according to properties 1 and 2, and (ii) k-itemsets already involved in FCLs. Indeed MFCLs do not necessarily include maximal itemsets. Note that all elements of LIcand and RIcand sets are sorted from the largest to the smallest.

Once the candidates are generated, the list L is cleared and FCLs can be extracted (see lines 22-31). The comparison is performed only if at least one of the candidate has a size t (in order not to compare conceptual sub-links already processed) and if a conceptual super-link is not already in L. Indeed, as LIcand and RIcand are ordered, the first (m1,m2) conceptual links identified are necessarily the maximal ones regarding iteration t. Thus, the comparison is done to check if a conceptual super-link has not already been added to L, in other words if (m1,m2) is a MFCL. If (m1,m2) is maximal, it is added to L and FLVmax and all its sub-links are removed from FLVmax .

These operations are repeated until no more MFCL is detected or all the combinations are performed (lines 19-33).

B. Discussion A valuable characteristic of any algorithm that aims to analyze  networks is the ability to adapt to all kinds of networks.

Since it is common to represent an undirected network as a directed  one in which links are stored in both directions, MFCL-Min can be directly applied. Let us note that the frequency property defined on conceptual links becomes symmetric: if (m1,m2) is a FCL then (m2,m1) is a FCL too. Thus, the algorithm 1 can be simplified: one set I1 instead of LI1 and RI1 has to be searched for the generation of the 1-itemset candidates.

Regarding multipartite networks, for instance a bipartite graph G = (VA, VB , E), the algorithm can also be directly applied with simplifications since it would perform unnecessary comparisons. For instance, the initial 1-itemset candidates should be generated on nodes involved in A and B separately as sets I1A and I1B .

On the side of complexity, the key computation step is the evalu- ation of the support of (m1,m2) at each iteration. A straightforward and efficient way to implement this task and speed up the process is to use a node structure that stores both its input and output neighbors.

Thus, rather than iterating over all the network links, the search can be restricted to nodes as detailed on algorithm 2.



V. CONCEPTUAL VIEW GENERATION The acquired knowledge can be synthesized through a graph  structure summarizing the links between the groups of nodes in the network. We call such a network a conceptual view.

In a conceptual view, nodes correspond to itemsets while links represent maximal conceptual links. The generation process performs two steps. (i) MFCLs are extracted from G, then (ii) the conceptual view is generated from FLVmax . The algorithm for generating the conceptual view, called CView-MFCL, is detailed in algorithm 3.

Algorithm 3 CView-MFCL: Conceptual View Generation Require: FLVmax : Set of maximal conceptual links  1. Vconcept: Set of itemsets (nodes) ? ? 2. Econcept: Set of pairs of itemsets (links) ? ? 3. CV iew ? (Vconcept, Econcept): Conceptual view 4. for all MFCL l = (m1,m2) ? FLVmax do 5. if m1 ?? Vconcept then 6. add m1 to Vconcept 7. end if 8. if m2 ?? Vconcept then 9. add m2 to Vconcept  10. end if 11. add (m1,m2) to Econcept 12. end for 13. return CV iew  Let us specify that the conceptual view is not a direct or lighter representation of the initial network. Indeed, there is no simple mapping between the underlying graph of the conceptual view and the initial network since nodes in the initial network may be represented by several nodes in the conceptual view and inversely, nodes in the conceptual view correspond to groups of nodes in the initial network.

In this sense, the resulting structure is a much more semantic net- work, since it may be viewed as a form of knowledge representation, acquired on the connections between groups of nodes in the network.



VI. EXPERIMENTAL RESULTS Various sets of experiments have been carried out for evaluating  the performances of our solution. First, we describe in Section VI-A the test environment. In Section VI-B, we focus on the quality of the patterns extracted, while in Section VI-C, we analyze the extraction process from a quantitative point of view. Finally, Section VI-D focuses on the associated conceptual views.

A. Testbed The dataset used is a geographical proximity contact network  obtained with Episims, a simulation tool that statistically reproduces the daily movements of individuals in the city of Portland. The main features of the network are described in Figure 2.

G en er al  Origine Portland Type Undirected #nodes 3000 #links 4683 Density 0.00110413 #comp 1  cc avg 0.63627  D eg re e  avg 3.087 max 15  Distribution  0,1  0,2  0,3  1 3 5 7 9 11 13 15  Fig. 2. Main features of the contact network used (#comp: number of components; cc: clustering coefficient)  Data have been processed so that each node is identified by (1) age class, i.e. ?age  (2) gender (1-male, 2-female), (3) worker (1-has a  job, 2-has no job), (4) relationship to the head of household (1-spouse, partner, or head of household, 2-child, 3-adult relative, 4-other) and (5) contact class, i.e. ? degree  (6) sociability (i.e. 1-cc > 0.5, 2-else).

Searching for FCLs on such a network makes sense since the comprehension of the way people are connected to each other and broadcast information or a disease through social interactions may be highlighted by implicit links based on their common features.

Our solution has been developed in JAVA. All experiments have been averaged on 100 runs and conducted on a Intel Core 2 Duo P8600, 2.4Ghz, 3Go Ram, Linux Ubuntu 10.10 with Java JDK 1.6. The network size was varied by extracting subgraphs from the overall network. Combinations of network size used are (|V |, |E|) =  {(500 , 806), (1000,1750), (1500,2685), (2000 , 3304), (2500,3988), (3000,4683)}. For simplicity in the rest of this paper, we will discuss the size of the network by simply referring to |V |. In the same way, the number of attributes |R| evolved by removing initial attributes.

B. Qualitative Results As a first approach, performances have been analyzed by focusing  on the quality of the extracted patterns. For example, Figure 3 shows some maximal frequent conceptual links obtained for configuration |V | = 3000 and |R| = 4 when (a) ? = 0.10 and (b) ? = 0.29. ??? means that the attribute can take any value  MFCL Supp.

((4;*;1;*),(*;*;2;*)) 0.107 ((1;*;2;2),(*;1;*;*)) 0.102 ((*;1;1;1),(*;2;*;*)) 0.133  (a)  MFCL Supp.

((*;*;2;*),(*;*;1;*)) 0.295 ((*;*;*;2),(*;*;1;*)) 0.294 ((*;*;*;2),(*;*;*;2)) 0.343  (b)  Fig. 3. Some maximal frequent conceptual links obtained for configuration |V | = 3000 and |R| = 4 when (a) ? = 0.10 and (b) ? = 0.29  We can observe the relevance of the extracted patterns and their practical aspects since conceptual links provide knowledge on the groups of nodes the most connected in the network. For example, the first row of table (a) indicates that 10.7% of the links of the network connect 40 years old individuals who have a job to individuals who do not have a job, while the first row of the table (b) shows that 29.5% of the links of the network connect a man to a woman.

C. Quantitative results In a quantitative point of view, we have focused on the impact  of the number of attributes and the network size on two key aspects of the solution we propose: (1) the runtime (sec) and (2) the gain on the runtime compared to a naive approach. Figure 4 compares results obtained for different support threshold in an empirical way by setting (a) |R| = 6 and (b) |V | = 3000.

Regarding the runtime (see Figures 4(1)), we can globally ob- serve that the time required for extracting MFCL increases when  y = 0,8468x + 0,2606  y = 0,1193x + 0,2233 y = 0,0798x - 0,0425         500 1000 1500 2000 2500 3000  R u  n ti  m e  (s ec  )  Number of nodes (1)  0,1 0,15 0,2 0,25  0,7  0,75  0,8  0,85  0,9  0,95   500 1000 1500 2000 2500 3000  G ai  n o  n th  e ru  n ti  m e  Number of nodes (2)  0,1 0,15 0,2 0,25  (a)  0,7  0,75  0,8  0,85  0,9  0,95   1 2 3 4 5 6  G ai  n o  n th  e ru  n ti  m e  Number of attributes (2)  0,1 0,15 0,2 0,25  y = 0,0004e1,5386x  y = 0,0015e0,7477x  0,001  0,01  0,1    1 2 3 4 5 6  R u  n ti  m e  (l og  )  Number of attributes (1)  0,1 0,15 0,2 0,25  (b)  Fig. 4. Effects of various ? threshold on (1) the runtime and (2) the gain compared to a naive approach when (a) |R| = 6 and (b) |V | = 3000     ? decreases. This is due to our algorithm that is able to gradually reducing the search space during the extraction phase. However, two fundamental observations have to be made: (i) the runtime increases linearly with the size of the network (ii) while it increases exponentially with the number of attributes.

(i) As shown in Figure 4(a)(1), the time required for the extraction seems to increase more or less linearly with the size of the network.

We believe this is due to the nature of the dataset and the optimization presented in algorithm 2.

(ii) However, as observed in Figure 4(b)(1), the logarithm of the runtime seems to increase linearly. This means that the runtime increases exponentially with the number of attributes.

As an indicator of the efficiency of our solution, we can observe that whatever are the variations on the number of attributes or the network size, the gain on the runtime is always greater than 85% for all support thresholds used (see Figures 4(2)). These results demonstrate the good performances of our solution.

To complete this study, we have studied the evolution of the slope of the runtime curve when |R| is varying. Figure 5 shows how the logarithm of this slope evolves according to the number of attributes.

y = 8E-05e1,4584x  y = 0,0003e0,7142x  0,0001  0,001  0,01  0,1   1 2 3 4 5 6  Sl op  e of  th e  ru nt  im e  (lo g)  Number of attributes  0,1  0,15  0,2  0,25  Fig. 5. Evolution of slope of runtime curve (log) according to |R|  Although the runtime increases linearly with the number of nodes (shown on Figure 4(a)(1)), it is interesting to observe that the slope of this runtime curve grows exponentially with the number of attributes as suggested by the linear increase of the logarithm of the slope observed in Figure 5. This allows expressing the computation time as a function of both |V | and |R|, i.e.

y? = a? e(b?|R|) ? |V |+ c. (1) More generally, as easily observable on equation 1, and already  observed in Figures 4(1), the time required for extracting MFCL increases exponentially with the number of attributes while it is increasing linearly with the size of the network.

D. Examples of Conceptual Views To conclude this section on experiments, we focus on the con-  ceptual views. Figure 6 shows some examples of conceptual views obtained from (a) the initial network presented in Figure 2; (b), (c), (d) and (e) are respectively the conceptual views obtained with ? = 0.1, ? = 0.15, ? = 0.2 and ? = 0.25.

As you can see, conceptual views are representations significantly reduced of the initial network. Moreover, we observe that the size of the underlying graph decreases when the support threshold increases.



VII. CONCLUSION AND FUTURE DIRECTIONS In this paper, we have proposed a new and original approach that  extends formal concept analysis to social networks. The interest of our approach is twofold. (i) First, our approach extracts knowledge from social networks by searching for particular patterns that we call conceptual links. This kind of patterns provides relevant knowledge on the groups of nodes the most connected in the whole network.

(ii) Second, the proposed approach allows representing the initial network in a more semantic way, by synthesizing the acquired knowledge through a conceptual view.

(a)          9 10            21 22                 (b)                   (c)          (d)       (e)  Fig. 6. Conceptual views obtained from network (a) (see also Figure 2) with (b) ? = 0.1, (c) ? = 0.15, (d) ? = 0.2 and (e) ? = 0.25  The proposed approach and especially the conceptual view, raises a variety of new interesting research issues. One of the first issues is the definition commonly attributed to a community. Indeed in some extent, our approach highlights somewhat a new kind of communities and the link they maintain. Nevertheless, these communities are far from the traditionally accepted definition. Another interesting track would be to use the conceptual view as a predictive model for addressing the link prediction problem.

