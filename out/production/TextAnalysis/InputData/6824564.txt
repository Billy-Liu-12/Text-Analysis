Designing Contextualized Workflows in the Cloud

Abstract?Cloud workflow allows automating the workflow procedure through a compilation of known sequences of actions in the cloud environment. There is a notable absence of a holistic view in current cloud workflow systems that, on one hand, to capture the evolving context when designing workflow models; and on the other hand, to help a specific user interact with the system during QoS prediction and dynamic selection of the relevant cloud services. In this paper we firstly review recent works on designing cloud workflows by discussing the opportunities and challenges respectively. We then propose a contextualized approach and research directions to improve the design process of cloud workflows in a user-oriented paradigm. The contextualized methodology could be considered as an alternative attempt to address the socio- technical issues in designing cloud workflows.

Keywords-cloud computing; workflow systems; context modeling; workflow as a service; virtual screening

I.  INTRODUCTION Workflow technology has merged over the last decade to  automate the composition and execution of complex computational and data analyses tasks in both business and science domain [1]. With the paradigm-shifting technology, especially cloud computing [2, 27], which is advanced to enable a utility-oriented computing model in terms of elastic size of data center on-demand resource provisioning mechanism, more and more scientists are migrating their workflow applications in the cloud. Plenty of cloud projects [2, 5, 6, 7] are widely applied in genome informatics, nano science, drug discovery process, etc.

Preliminary benefits have been seen in realizing workflows on the cloud [3, 4]. The workflow on the cloud is supposed to be in charge of the dynamic choice of datasets, parameters and workflow components on the cloud. Thus it is not possible to design it in advance. Furthermore, it is challenging when considering the dynamic and elastic features of cloud computing that on-the-fly design of workflows and their smart reruns become an obstacle in the distributed environment [10], especially in the cloud [11].

In general, research attempts focus mainly on addressing technical challenges, such as specification, execution and computing resources, while overlooking the human dimension [4] such as user-system interaction, collaboration patterns, intelligent decision support, etc. For example, routine workflow realizations blow up in a huge number of variants with similar functionality but different quality, thus their differences largely rely on various contexts and situation at hand [4]. However, current methods fail to make once implicit contexts explicit during the design of cloud workflows where extended number of contextual cues will be produced by both the cloud environment and the users.

Hereafter, the paper is organized as follows. Section II introduces the cloud workflow systems and the possibilities of migrating context to cloud workflows. Section III discusses potential opportunities in the design of contextualized cloud workflows. Section IV presents a group of major challenges when designing cloud workflows with contextual constraints. Section V proposes suggestions on research directions to which we could put our research efforts. Finally, the general conclusion and perspective in Section VI closes this paper.



II. MIGRATING CONTEXT TO CLOUD WORKFLOWS Context [18] has long played a well acknowledged role in  a number of domains, such as natural language processing, problem solving, machine learning, knowledge acquisition, and databases and ontology. In this paper, we use the definition of context described in [19]. They declared that context is ?what constrains the resolution of a problem without explicit intervention in it?. This definition has several consequences and three most important ones are: (1) context only has a meaning in relation to a focus, (2) since the focus changes, context is dynamic, and (3) context is anchored within a domain.

In order to introduce the context methodology to cloud workflows, we firstly introduce our working definition of context which is divided into two parts (see Fig. 1): conceptual view and implementation view, based on the   DOI 10.1109/CBD.2013.16     existing works: (1) the conceptual view of context uses the view in [19]; and (2) the implementation view of context is inherited from [20] applied in cloud workflows. In general, the representation in Fig. 1 illustrates the relationship among task, contextual element, rule and cloud workflow.

The major differences between our definition and [20] embrace the following two extended concepts (see Fig. 1): (1) we use the concept of ?task? instead of ?entity? in a broader view of context that does not appear explicitly in the task, not limited to the context of which depends on static attributes from pre-defined entities, as mentioned in context-aware applications [26]; and (2) we introduce the concept of cloud workflow in order to describe the relationship among context-related concepts and information in workflows on cloud.

Figure 1. Our framework for modeling context in cloud workflow.

Furthermore, we propose that the usual approach for  cloud workflow lifecycle is to consider explicitly three context-based processes (see Fig. 2): ? Contextualization process identifies the published  cloud workflow from the repository in a context close to the context at hand (Point A & B in Fig. 2);  ? Decontextualization process extracts the part of published cloud workflow?the abstract model?to be reused for the problem at hand (Point C in Fig. 2); and  ? Recontextualization process designs the cloud workflow concrete model before the cloud workflow is executed to adapt to the current context (Point D in Fig.

2).

Compared with [21], the major characteristics of cloud  workflow lifecycle is that after the execute phase (see Fig.

2), the lifecycle enters the result analysis process, after which the scientist potentially re-designs the current cloud workflow concrete model (Point F in Fig. 2). In this evolving cloud workflow lifecycle, scientists cycle through this process until they are satisfied with the result. Finally, the new cloud workflow concrete model has proved its worth and is to be published to the repository for the purpose of sharing (Point G & H in Fig. 2).

Figure 2. The proposed cloud workflow lifecycle.

The characteristics of this lifecycle lie in an iterative  process triggered by the result analysis process, where ?contextualized? means during the design phase, the abstract model (Point C in Fig. 2) is contextualized to a set of concrete models (Point D in Fig. 2) by the scientist who faces the task realization in a specific context. Specifically, the main focus of contextualized process is twofold (i.e., two instantiations): 1) the selection of relevant contextual elements, and 2) the identification of their values.



III. OPPORTUNITIES The roles of context during the design phase of cloud  workflows are: (i) context is considered as the key component of cloud workflow design; (ii) context is capable of managing constraints to validate the cloud workflow design model before execution; and (iii) context enables the solution to drive programmable-level specification when the use of workflow specification or language presents an interest for users.

We believe that context could bring potential benefits between the cloud workflow design and the user-oriented need. More specifically, context modeling would be the ideal tools for recording provenance information. Using context-based provenance information, scientists could debug workflow execution, validate scientific results, and guide the workflow design and execution with explicit contextual cues. It is in harnessing this possibility, by encouraging scientists to collaborate with the cloud workflow system through interactivity, that contextualized approach could act as one of possible solutions to leverage this gap.

Figure 3. Elements of a contextual graph [22].

In the implementation level, we aim to utilize the Contextual Graphs, or CxGs [22], for representing all the assembling of a cloud workflow in context at the conceptual level. A contextual graph is a directed graph, acyclic with one input and one output and a general structure of spindle.

A path in a contextual graph is composed of elements of reasoning and contexts, which corresponds to a specific way for problem solving. Fig. 3 provides the definition of the elements in a contextual graph (actions, contextual elements, sub-graphs, activities and parallel actions grouping). A CxG can improve the process by proposing the known practices (i.e., ways to build the specific cloud service) to explore.

Thus it could be assimilated to a simulation leading to the best specific cloud workflow component (i.e., a cloud service) in the user's query context.

The role of CxG could be considered as: 1) the production of workflow models according to the quality of service constraints (time, cost, fidelity, reliability and security) and contextual constraints (i.e., type of contextual elements); 2) the translation of workflow candidates according to both contextual clues (i.e., instantiations of contextual elements). The piece of software Contextual Graphs (CxGs) is available at http://www.cxg.fr.



IV. CHALLENGES Contextualized cloud workflow system is a novel type of  workflow management system implemented in the cloud, thus its system architecture is consistent in the cloud computing paradigm and its functionalities contain the general workflow functionalities and new components extended for cloud computing. Additionally, due to the market-oriented and the dynamic nature of cloud computing, quality of service (QoS) management plays an important role in cloud workflow systems. Therefore, we consider the main challenges of designing contextualized cloud workflow systems in the dimension of architecture, functionality and QoS management.

A. Architectural Challenges The system architecture decides how the system  components are organized and how they communicate with each other. For contextualized cloud workflow systems, the architecture should not only follow the general architecture of cloud computing paradigm, but also be adapted according to the contextual requirements of the users.

As discussed before, the real use of cloud workflow systems requires the introduction of the concept of ?context?. Current failures are mainly attributed to the lack of explicitness of contexts in cloud workflow design and its contextualization process [4]. We propose a conceptual architecture of contextualized cloud workflow in Fig. 4 to make contexts explicit in three layers of cloud workflow models, as a trade-off between the global (workflow-level recommendation) and local (service-level selection) optimization to enable a ?Workflow as a Service?. The main  focus of the conceptual architecture is to tackle the orchestration and user-oriented features of cloud workflow to make contexts explicit and to enable the complete sharing of cloud workflow model.

The conceptual architecture in Fig. 4 features in the abstraction of a high-level layer, called Cloud workflow Metamodel (the upper layer in Fig. 4), from the underlying layers. We propose that the metamodel should represent: (1) general steps of the experiment; (2) initial descriptions of scientists? requests for the experiment, such as requirements for the generation of cloud workflow; (3) constraints that must be satisfied by a cloud workflow model in order for it to be validated. For example, dataflow is consistent with the software constraints. Otherwise, it provides suggestion to make other software substituted to achieve the similar function while complying with the constraints; and finally (4) the contextual correlation between cloud workflow abstract model and its corresponding cloud workflow concrete models.

Figure 4. The conceptual architecture of contextualized cloud workflow.

Point A in Fig. 4 shows the first instantiation in the  conceptual framework. The context-oriented cloud workflow metamodel is instantiated to an abstract one in a specific domain to address the particular focus and requirement in this domain. The first instantiation leads to defining the domain that is relevant for the current focus.

For example in Fig. 4, the cloud workflow metamodel class is instantiated in the domain of docking preparation.

The cloud workflow abstract model (the intermediate layer in Fig. 4) corresponds to the cloud workflow abstract model. This model is specified without identifying the specific resource or service for cloud workflow execution.

The scientist makes a simulation before running the cloud workflow concrete model without paying attention to the instances of contextual elements for the current problem.

For example, it is shown in Fig. 4 that the class of ?Docking Preparation? implements a ?Task? activity.

Point B in Fig. 4 highlights the second instantiation that cloud workflow abstract model is instantiated to address a given situation and the scientist?s current understanding of the experiment, combining with the scientist?s focus and     services or resources available for cloud workflow execution.

The cloud workflow concrete model (the lowest layer of Fig. 4) describes the concrete model, which combines the abstract model with specific resources or services. In this layer, the instances of contextual information are chosen to address the specific situation at a given context. Each abstract model represents a separate thread of execution of activities and actions to be controlled independently to the individual enactment. For example in Fig. 4, the ?docking software? is instantiated to ?an instantiation of Dock 6.2 software?. Similarly, ?actor?s preference? will be instantiated to ?familiarity of the software?, ?skill? could be instantiated to ?expertise?, and ?user?s mood? is expected to instantiate as ?normal?.

B. Functionality Challenges System functionality is the set of system functional  components which are designed and developed to meet the system functional requirements. The major challenge to system functionality of contextualized cloud workflow systems can be classified to two categories [11]: 1) functional components to realize the basic functionalities of cloud workflow systems (integration of cloud services, such as cloud resource management and QoS management); 2) functional components to enable the management of context and system reasoning (modeling and representation of contextual information in cloud workflows, dynamic selection of cloud services, etc.).

Other technical issues to be addressed include: Where context may intervene for the operations of cloud workflow?

What are the impacts of context in the design of cloud workflow? What kinds of context constraints and middleware should be integrated with the cloud workflow?

C. QoS Management Challenges QoS management focuses on non-functional requirements  which are the constraints on the system functionality such as time, cost, reliability and security [11]. The main challenge here is how to combine the traditional QoS constraints with user-oriented contextual constraints (user preference, user behavior, etc.).

A user may ask for a specific cloud workflow model, and then the subsequent steps would be: ? The system recommends the cloud services  corresponding to the demand; ? The system built a contextual process by assembling  elementary services according to both QoS constraints (time, cost, fidelity, reliability, security, etc.) and contextual elements (size of the problem, estimated time for the building of the service, cost estimation of this building, etc.);  ? QoS constraints and contextual elements constitute the contextualized cloud workflows for the specific user.

The contextual constraints mentioned above may come from several sources [23]: ? Task at hand (i.e., urgency of the task, and the budget  for computation): If it is a urgent task and the budget is adequate, scientist could choose a more precise cloud services;  ? Situation in which the task is realized (i.e., availability of resources): such as availability of virtual machines, cloud services, storage and instruments;  ? User?s preference, skill and mood (i.e., familiarity of the software): when a scientist is going to choose one cloud service from multiple candidates with similar functionality, he might choose the secondary choice instead, in order to escape the long-time learning curve of manipulating the first-choice method that he doesn?t know how to use at all.



V. SUGGESTIONS ON RESEARCH DIRECTIONS As mentioned in the previous section, various challenges  are foreseen in designing cloud workflows with context constraints. However, those are also prospective areas to which we can put our research efforts and make breakthroughs towards contextualized cloud workflows. We aim to discuss the research directions of designing cloud workflows in the socio-technical dimension, such as user- system interaction, decision supporting system, context- based intelligent assistant system, etc.

However, we are not recommending designing a contextualized cloud workflow from ground up. Middleware technologies that can bridge existing workflow systems with the cloud would seem more cost effective. Plus, to better utilize the mutual approach of designing workflows, we will put context-based and user-oriented approach as top priority by discussing the research interests within the framework of workflow reference model [24] and well-known taxonomy of workflow management systems [13]. By implementing the building blocks in the workflow reference architecture, we could also leverage existing cloud technologies, such as data management, resource provisioning, etc.

There are many existing cloud workflow systems, but it is difficult to make user involved in the design process, due to the lack of making context explicitly and exposing the system?s reasoning to a specific user. However, transitioning into the cloud gives an opportunity for scientists to implement the various key components of workflow which need to be designed in portions, where looking at the actual results of a portion helps decide how that portion should be and once it is settled then the next portion can be designed.

Context-aware QoS prediction has been identified as promising research directions in real-world web services [28] and cloud workflows [12], especially when choosing a certain cloud workflow component (i.e., a cloud service) according to contextual information. QoS predication aims at providing personalized QoS value prediction for service     users, employing the historical QoS values. Recent works mainly consider two kinds of QoS properties [28]: 1) service-side QoS properties (e.g., price, popularity, etc.), which are given by the service providers and identical for different users; and 2) user-observed QoS properties (e.g., response-time, through-put, failure probability, network bandwidth, user location, etc.), which can vary widely for different users due to unpredictable Internet connections and the heterogeneous user environment. However, there is a lack of personalized QoS properties that depend on the user- oriented information (e.g., user behavior, user preference, user experience, etc.). Furthermore, methods for evaluating the prediction accuracy of different prediction approaches would benefit both cloud service providers and end users.

Dynamic cloud service selection combining the QoS with context constraints would become a necessity for modeling the correlations between QoS values (e.g., time, cost, fidelity, reliability, security, etc.) and user-oriented information (e.g., user preference, user behavior and user experience, etc.). Besides dealing with QoS constraints like time and cost, it is necessary to consider the context constraints as well to expose the system?s reasoning to a user for intelligent workflow design [25]. For example, a user may want a justification for why a parameter was set to a certain value or the reason why an algorithm is not appropriate for his data management. This would involve both extending the system to record the contextual reasoning behind its decisions as well as designing the representation of such information. In addition, it is interesting to investigate the types of user satisfactory in cloud workflows.

The automatic composition of cloud workflow model has been considered as one of the main concerns for the adoption of human factors in designing cloud workflows [25]. The proposed roadmap of designing scientific experiment as cloud workflows would be: 1) maximizing all possible workflow compositions; 2) eliminating invalid compositions according to the user-oriented contextual information; 3) predicting the effectiveness and efficiencies of the recommended workflow model with both context and QoS constraints; and finally 4) learning from the failure of dynamic service selection and workflow recommendation by the process of incremental knowledge acquisition.

Realizing elastic requirement of the users could also be an interesting and powerful direction. The design phase of cloud workflows may be heavily reliant on professional knowledge and customized preference of the specific user.

Thus how to model the interactivity between the user and the system becomes a necessity for incremental knowledge acquisition [22], especially when the iterative sub-process such as result analysis process is considered.



VI. CASE STUDY AND EVALUATION We introduce a case study in the field of drug discovery  process called ?virtual screening research on avian influenza H5N1 virus?. Virtual screening is about selecting in silico the best candidate drugs acting on a given target, by docking millions of small molecules separately on the target, which  is the initial step of drug discovery process [9]. Workflow technology has been applied in virtual screening research, to automate complex or repetitive scientific tasks. However, virtual screening is a very flexible and fancy application in which no unique solution necessarily exists for each task.

Thus, the great effort from between the user and the system is urged to build the workflows through the user-system interactivity.

This case study aims to find dozens of drug candidates for H5N1 virus [8], by docking millions of small molecules separately on H5N1 protein [9]. Normally, describing a complete set of ?all possible execution paths? during docking process might be undesirable [10]. As a result, the strategy of incremental acquisition could enable the cloud workflow or its portions to be dynamically defined during workflow execution through the interactivity between the user and the system.

The result is shown in a prototype called CxCloudFlow (Contextualized Cloud Workflow Systems). CxCloudFlow prototype was developed by an open source package Eclipse Helios Sr21  and Java Development Kit 1.6.02. The cloud workflow model was orchestrated by ActiveBPEL engine3.

As what we discussed in Section II, the system interactively builds a workflow model with the user in result analysis and workflow publication phase as recontextualization and decontextualization process. Fig. 5 shows the CxCloudFlow prototype implementing our contextualized methodology in the design phase of cloud workflows. The prototype illustrates (see Fig. 5): 1) in the left part, the system makes available parts of contextual information while the role of the user is to select his/her choice from the possibilities (nine cloud workflows in parallel generated by Contextual Graphs in Fig. 5) suggested by the system; 2) in the right part, after the selection of the user and result analysis process, the system needs collaboration with the user by asking questions. For example, in right part of Figure 5, system askes the question ?Are you satisfied with the result??    Figure 5. Implementation of making contexts explicit in the design phase of  cloud workflow.

1 Ecipse Helios Sr2 Packages. Available via: http://www.eclipse.org/downloads/packages/release/helios/sr2 2 Java Development Kit 1.6.0. Available via: http://www.java.com/en/download/manual.jsp 3 ActiveBPEL engine. Available via: http://www.activevos.com      If the answer is ?Yes?, the system directs the scientist to  see the final result. Otherwise, the system receives the values of contextual elements from the scientist that ?NO, I need to modify the parameter of the radius of the spheres?.

Then the consequent action is taken to drive the iterative process by modifying the parameters. Once satisfied, the system adds new workflow concrete model to the cloud workflow repository for the sake of sharing.

To further evaluate the prototype, we use a multi- criteria method called the analytic hierarchy process (AHP) model [14] to evaluate our prototype. AHP model could incorporate both qualitative and quantitative criteria into a single metric [15]. An advantage of the AHP model for our evaluation is that contributions of the contextualized methodology used in the system to individual criteria can be determined.

Figure 6. The AHP model for the case study.

We firstly set up the AHP model for our application. The  goal of the evaluation is that system recommends the best cloud workflow model according to inputs from the scientists (i.e., instances of contextual elements) when they are choosing from multiple candidate models. There are four cloud workflow alternatives (C1, C2, C3, C4) for reaching the goal, and four criteria (B1, B2, B3, B4) to be used in choosing among alternatives.

Then we make comparative judgments of the criteria on single pairwise comparisons. Furthermore, linear-based synthesis of priorities where alternatives are evaluated in pairs with respect to the criteria on the next level of the hierarchy, and criteria are given a priority expressed as a weight in the AHP matrix. Finally, the weights of four alternatives illustrate that the recommended choice by the AHP model is C2 which is in accord with the result generated by the CxCloudFlow prototype.  ?     Contextualized approach especially in design phase of cloud workflows would bring the significance in: (1) enhancing the ability of interactivity between the user and the system to improve the decision-making process for each cloud workflow; and (2) providing the assistance for the social and human preferences of end-users to represent the knowledge, reasoning and contexts of the user.



VII. CONCLUSIONS Workflow technology has been evolving over the last  decade to automating the composition and execution of complex computing and data analysis in science domain.

However, the challenge for a large use of workflow is the failure in addressing both the dynamic execution environment (i.e. cloud) and the elastic requirement of users (i.e., logic of use rather than logic of functioning). Two lines of research emerged to address this problem. Upstream, researchers try to make explicit the contextualization process in scientific workflows building to facilitate the reuse of contextualized cloud workflow components or services. Downstream, cloud computing is a technology that would bring a better orchestration of workflows but suppose a revision of workflow architecture.

Thus we proposed a user-oriented system called ?contextualized cloud workflow? to make the user in the center of cloud workflow orchestration and provisioning that contexts are made explicit in designing cloud workflows. The motivation is to help users to select the best cloud service, data-sets and parameters from a vast amount of functional equivalent cloud services. Thus how to construct the best cloud workflow candidate (i.e., the combination of best services) for a specific user under a specific context remains an open issue.

The common approach is to use the QoS expectation of the current user as a filter to select the ideal cloud service from the existing service catalog. But the QoS itself ignore the role of the user. Furthermore, recent works begin to take into account the context constraints. However they only consider the "objective" and static part of context (time, network bandwidth, location, etc.), but exclude the ?subjective and cognitive? part of context, that is user- oriented context (preference, mood, level of skill, etc.). We believe that a hybrid method combining the context (user preference, user behavior, user experience, etc.) and QoS constraints (time, cost, reliability, etc.) will be a feasible approach to enable the intelligent design assistance for scientists.

As with any other new paradigm, there are concerns about cloud workflow. For example, the lack of context, such as what kind of contextual reasons is attributed to the unavailability of service in the current situation. By increasing the overlapping on the three communities (i.e., workflow, context, cloud), we expect that each community will benefit from other communities to collectively reach the socio-technical perspective in designing cloud workflows.

