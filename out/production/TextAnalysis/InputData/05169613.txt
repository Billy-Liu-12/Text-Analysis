An Improved FP-growth Algorithm Based on  Compound Single Linked List

Abstract?FP-growth algorithm is one of the most efficient approaches for frequent item set mining. In this article, an improved FP-growth algorithm based on Compound Single Linked List is proposed.  There are two contributions in the new algorithm. One is to use the sequencing table and single linked list as the main data structure, the other is that it does not need to generate conditional  FP-tree. An experiment is conducted to compare the efficiency between the original one and the improved one. It shows that the new one improves the algorithm both in runtime and the main memory consumption.

Keywords- association rules, FP-growth, compound single linked list

I.  INTRODUCTION With the rapid development of the information technology  and the exponential series increasing of information, how to efficiently mine the hidden information in mass data? It becomes the core and the key in data mining technology [1].

Association rule plays an important part in the field of data mining, which is used to mine the association rules in a given data set and is put forward by R.Agraawa l[2] first. It divides the mining process into two steps: (1) find all frequent itemsets.

(2) generate strong association rules from the frequent itemsets.

As we can see, in many cases the Apriori candidate generate- and-test method reduces the size of candidate sets significantly and leads to good performance. However, it may suffer from two nontrivial costs[3]. (1) It may need to generate a huge number of candidate sets. (2) It may need to repeatedly scan the database and check a large set of candidates by pattern matching. For improving the efficiency of Apriori, many variations of the Apriori algorithm have been proposed. For example, Hash-base technique[4], Transaction reduction, Partitioning[5],, Sampling[6],, Dynamic itemset counting and so on. However, generating candidate sets are still inevitable.

Han[7][8][9][10] proposed a completely different and efficient algorithm to mine frequent items without generating candidate sets: FP-growth. It just need scan database twice and mining frequent patterns in the constructed FP-tree. A study on the performance of the FP-growth method shows that it is efficient and scalable and is about an order of magnitude faster than the Apriori algorithm. However, it has its own problems,  during mining frequent itemsets, mass of conditional pattern trees are generated recursively. It cost a lot of time to generate and release these trees. Besides, FP-tree and the conditional pattern tree need to traverse from top to down, but mining frequent pattern is in an opposite way. Finally, traversing in couple ways and a larger memory space is needed to main these tree.

The article proposes an improved FP-growth algorithm based on compound single linked list. The algorithm introduces the compound single linked list to improve the structure of the FP-tree. The improved FP-growth is mined in one direction, using the header table in the former FP-tree, storing them in a sequence table, ordering the frequent itemsets in descending sequence according to the min_sup, then a compound single linked list is formed. Through traversing each transaction?s frequent itemsets stored in its single linked list, mining the frequent patterns directly without generating conditional FP- tree. Through the comparison between the improved algorithm and the former FP-tree, it shows that the new one improves the algorithm both in runtime and the main memory consumption.



II. FP-GROWTH ALGORITHM  2.1 The description of the FP-growth Let I = {a1, a2, . . . , am} be a set of items, and a transaction  database DB=<T1, T2, . . . ,Tn>, where Ti (i ? [1 . . . n]) is a transaction which contains a set of items in I . The support1 (or occurrence frequency) of a pattern A, where A is a set of items, is the number of transactions containing A in DB. A pattern A is frequent if A?s support is no less than a predefined minimum support threshold, ?. [7]  Definition 1 (FP-growth) [8]: Given a transaction database DB and a minimum support threshold ?, the problem of finding the complete set of frequent patterns is called the frequent- pattern mining problem.

2.2  There are two steps to mine frequent patterns using FP- growth:  (1) The first step: constructing the FP-tree:  Definition 2 (FP-tree): FP-tree is a tree structure, it has the following features: [9]   DOI 10.1109/ICIC.2009.96    DOI 10.1109/ICIC.2009.96     a. It consists of one root labeled as ?null?, a set of item- prefix subtrees as the children of the root, and a frequent-item- header table.

b. Each node in the item-prefix subtree consists of three fields: item-name, count,  and node-link, where item-name registers which item this node represents, count registers the number of transactions represented by the portion of the path reaching this node, and node-link links to the next node in the FP-tree carrying the same item-name, or null if there is none.

c. Each entry in the frequent-item-header table consists of two fields, item-name and head of node-link (a pointer pointing to the first node in the FP-tree carrying the item- name).

(2) The second step: mining frequent patterns using FP- tree  Construction of a compact FP-tree ensures that subsequent mining can be performed with a rather compact data structure.

However, this does not automatically guarantee that it will be highly efficient, so a strict and reasonable FP-growth is needed to make it find all the frequent patterns efficiently, exactly and completely. [10]  Constructing FP-tree recursively, and increasing the frequent itemsets it contains. If conditional FP-tree only contains a path, then creating frequent itemsets it contains. As the following Fig 5 shows  It is efficient and scalable for mining frequent patterns, and is about an order of magnitude faster than the Apriori algorithm. However, it needs to traverse in couple ways and generates lots of conditional FP-tree.



III. THE IMPROVED FP-GROWTH ALGORITHM BASED ON COMPOUND SINGLE LINKED LIST  3.1 The steps to construct the compound single linked list 1. The first scan of database is the same as the FP-tree.

The scan of the database derives the set of frequent items (1- itemsets) and their support counts (frequencies). The set of frequent items is sorted in the order of descending support count. This resulting set or list is denoted L and an item header table is built.

2. The second scan of database is different from the FP- growth. It is processing the items in each transaction in L order, and then inserting the items in each transaction into the single linked list recursively. The items? order in each single linked list is according to L order.

3.2 The realization of the pseudocode of the improved algorithm  1. Define storing structure:  Header table: Itemid Support count Node-link  .. .. ..

.. .. ..

.. .. ..

Frequent itemsets:  FreItem pointer Single linked list:  Item count pointer 2.  The realization of the pseudocode:  Input: A transaction database, D; minimum support threshold, min_sup  Output: The collection of the frequent pattern  Method?  (1)The first scan of the database derives the set of frequent items (1-itemsets) and their support counts (frequencies). The set of frequent items is sorted in the order of descending support count. This resulting set or list is denoted L and an item header table is built.

(2)Scan database a second time. The items in each transaction are reserved and processed in L order, then stored in the single linked table Frequent itemsets.

(3)// i is the sequence of each transaction, p is the pointer pointing to one of the frequent itemsets in each trasaction, n is the total number of the transaction.

for (i=1; i?n; i++)  do { scan number i?s trasaction  let p point to number I?s first frequent itemsets;  while (p?Null)  { if (p?next==Null) end;  else { find p?s pointing frequent item in header table  traverse the single linked table that p?next points to  during the traversal ;  if (the current node is in the corresponding single linked table) incremented by 1  else { generate a new node and insert it to single linked table according to the order of L, the count is assigned by 1;  }  }  p= p?next  }  }  (4) Generating frequent patterns.

3.3 An example to examine the improved algorithm?s feasibility  For the same environment of the database, the article uses the database as article[7].

The first step is the same, so we don? t mention it repeatedly?we mainly introduce the second step. Its process is shown as Fig 1-4.

For the first transaction<f,c,a,m,p>, constructing it?s Compound Single Linked List like fig1, taking f as item header-node, insert<c,a,m> after f, then taking c as item header-node, inserting<a,m,p> after c; When inserting the second transaction, because b is after a, before m, then inserting b after a and before m.

Fig.1 inserting the first transaction   Fig.2 inserting the second transaction   Fig.3 inserting the third transaction   Fig.4 inserting the last transaction  The generating frequent patterns is as table1. (min_sup=3).

Table1 generating frequent patterns  Itemid Generating frequent pattern f c a b m P  (f:4), (fc:3), (fa:3), (fm:3), (fca:3), (fcm:3),(fam:3), (fcam:3) (c:4), (ca:3), (cm:3), (cp:3), (cam:3) (a:3), (am:3) (b:3) (m:3) (p:3)

IV. PERFORMANCE STUDY In this section, we shall compare the improved algorithm  with the original FP-growth. The experiment have been conducted on a PC with 2.8GHz speed with 512MB main memory, running Microsoft windows XP. The improved algorithm have been written in C++ and compiled using MS Visual C++6.0. The data we are using is generated synthetically, which is T10I4d100K. A program developed by  IBM Almaden research center[11]. The experimental result shows in fig.5:   fig.5. Experimental result based on T25I10D10K  The experimental result shows the comparison of the two algorithms in runtime and the main memory consumption, the improved one reduces the runtime and the main memory consumption.



V. CONCLUSIONS This article proposes a new method to improve the FP-  algorithm. A new data structure is, called compound single linked list, and an improved algorithm are introduced. The improved FP-growth is mined in one direction, using the header table in the original FP-tree, and a compound single linked list is constructed. We have performed varieties of experiment based on synthetic datasets. The result shows that the improved algorithm is better than the FP-growth.

