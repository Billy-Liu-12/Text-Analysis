Choosing Right Database System: Row or  Column-Store

Abstract? The new generation of applications like Business Intelligence, data warehouses, Social networking etc. requires processing of terabytes or petabytes of data. This is achieved by distributed processing. This is the major reason for the power of web companies such as Google, Amazon, and Salesforce etc. In this case, relational databases are found to be inadequate in distributed processing involving very large number of servers and handling big data applications. The systems like columnar database have attempted to address the problems in storing information using traditional database system. The database system design should be chosen to handle large pool of data to get analytical performance. The present study focuses on identifying the problems in the relational database system and highlighting the benefits gained by usage of columnar database system in area of business intelligence or data warehouse systems.

Index Terms? RDBMS, Columnar database, index-only query, Materialized views, Chubby Server

I.     INTRODUCTION  Computer databases are a common mechanism for storing information on computer systems while providing easy access to users. One purpose of a database system is to answer decision support queries and support transactions.

During query processing, a database system typically utilizes one or more indexes to answer queries. A data warehousing system typically handles large pools of historical information representing different portions of a business. Because of the large quantities of information involved in a typical data warehouse, a database administrator will typically divide the information among multiple database tables rather than including all of the     information in a single table that causes many problems like indexing. The solution to such problems can be obtained by using column oriented approach rather than row oriented one.

The separation of data into multiple physical tables typically precludes the use of "index-only" query plans.

In current systems, this type of query is not possible when the data is split amongst multiple physical tables because an index is not capable of answering a summary query involving information in a set of separate physical tables.

Current systems like columnar database have attempted to address the above problems inherent in storing information in separate tables by using the concept of "materialized views." This approach involves executing a summarizing query offline and storing the results in a persistent temporary table. Materialized views may be used when an administrator knows in advance that a particular summarizing query will be used. The preplanned approach of materialized views is not useful for ad-hoc analysis.

These days many researchers are attempting to resolve the problems present in the traditional DBMS which is also referred as row-store or RDBMS. The present study also focuses to summarize the identified problems with the relational database system and putting forth the importance of column-oriented database system in case of business intelligence and data warehouse applications.



II.     TRADITIONAL DATABASE MANAGEMENT SYSTEM   The physical difference is among the storage structures. The first type is the physical storage of the record-based structure in RDBMS, which is the simplest.

The data is stored row wise in the table. Variations like clustered indexing may change the sequence of the rows, but all rows, columns, and values will be stored as in the table. There are many commercial variations of record- based databases available. All share the common characteristic of storing related values in a physically contiguous record. Oracle, IBM DB2, Microsoft SQL Server, MySQL etc are the examples of RDBMS that store the data row-by-row. The design of such systems     was optimized for the most common application business transactional data processing.

A.     Architecture of MySQL Following is the conceptual architecture of MySQL which is relational database system.

Figure 1.   Architecture of MySQL   The main components are application layer, logical layer and physical layer. In application layer there are different users and database administrators. In logical layer, Query processing, transaction management, recovery management and storage management are the main functions included. At the physical layer the data files, data dictionary, log files and indices are present.

B.     Problems with traditional system The most commonly used form used for data warehousing and analytics is the RDBMS, which has dominated the entire database market for years due to its strengths in processing and storing transactions and in generating reports. Despite its nearly universal acceptance as a standard data structure, the RDBMS has significant limitations that detract from its usefulness.

?    Indexing This is the most serious problem as due to indexing the size of the database increases. Also the process is slowed down because search time for the record becomes more in large table due to record by record search. The number of   indexes that can be made is also limited. Retrieving and writing operations take much of the computational time because of moving entire record. So, all columns cannot be indexed and used effectively.

?    Optimization in the case of many indices A second problem is that the traditional database management system can?t resolve a query and optimize the process to use only indexed fields if there are too many indices involved in the query. This leads to degradation of the system performance.

?    Fixed record structure The RDBMS has a fixed table structure. If new data or field is to be added then table structure is to be modified or new field should be added at other place. It is very difficult to maintain the structure of table at all times.

?    Time to time reorganization of database Real data is all the while modified or changed in a period of time. This change should be incorporated in the database. Because of this many times the index is modified. This is very tedious job to deal with. Thus maintaining the database structure becomes more difficult.

Along with these problems the traditional system has some limitations. The scaling is difficult as RDBMS does not work easily in distributed manner. User has to covert the data into tables only which may be complex when the data does not fit into table structure. Also SQL cannot be used in case of unstructured data and in agile development. In the similar way, the feature set offered by RDBMS may not be required always as cost and complexity are increased.

With the above discussion it is clear that the relational database system which is popular and widely used has some performance related issues in the area of distributed systems or analytical environment. The present study focuses these issues to compare with the columnar database system. The proposed work highlights the differences among both and it throws light on the benefits that can be obtained to get analytical performance of the system.



III.     THEORETICAL FRAMEWORK OF COLUMNAR DATABASE SYSTEM   It is also called as the column-oriented database or column-store. The first introduction of columnar databases was in 1970s. However because of the improvement in the hardware the relational databases became more popular in 1980s and 1990s. But recently the systems like data warehouses or Business intelligence deal with applications where the data volume is very large. These systems can be made effective with the help of column-oriented databases.

The physical storage of a column-based structure present in columnar databases varies depending upon the intended use of the system and the skill of the designer. Indexing features vary from one column-based product     to another. In the column-based structure, consecutive duplicates within a single column would then be automatically removed, and null values would not be recorded since the missing record ID implies a null value. In columnar database the values stored in column one are stored in one set, all the values in column two in another set, and so on. In addition to the values, the information needed to reinsert them into the proper position in the original record format is stored with each set. This provides some significant advantages for analytical processes and ad hoc queries and provides the additional benefit of using less disk space than does an RDBMS.A columnar DBMS stores its content by column rather than by row. However, a database program must show data in a format of two-dimensional tables, but store it as one-dimensional strings.

lightly loaded. The master server communicates with the tablet servers to ensure that they continue to hold on to their corresponding locks.

Each tablet server typically manages between 10 and 1,000 tablets of average size about 100-200 MB. Each tablet contains all the data of a group of rows. A newly created table consists of one tablet. The Tablet servers process read/write requests for tablets.

The Lock servers called as Chubby form a distributed lock service that allows a multi-thousand node Bigtable cluster to stay coordinated. Chubby itself is a cluster app.

Chubby is architected to keep lock management traffic very light. Chubby service is used to track live tablet servers. Each tablet server when it comes up creates and holds an exclusive lock to a unique file in the chubby service.

Col.1 Col.2 Col.3 Col.4 Col.5   Row  Row  Row  Row  Row   Figure 2.   Structure of Column-Oriented Database   Columnar databases approach is especially important in data warehouse domain. Data warehouse are facing with large volume of data, complex data transformations and huge data aggregation. Consequently, appropriate data warehouse systems performance could be achieved by using an adequate approach in data management.

BigTable, MonetDB, VectorWise, Vertica/C-Store, Sybase IQ, Infobright, Exasol, ParAccel etc are the examples of columnar databases.

A.     Architecture of Columnar Database The Column-oriented database system has following architecture. In this case we are considering the Bigtable as an example. It is built on top of Google File System.

The underlying file format is SSTable. SSTables are designed so that a data access requires, at most, a single disk access. An SSTable, once created, is never changed.

If new data is added, a new SSTable is created. Once an old SSTable is no longer needed, it is set out for garbage collection. BigTable has three different types of servers namely Master servers, Tablet servers and Lock servers.

The Master servers assign tablets to tablet servers. Also they balance the tablet server load, detect the loss or addition of tablet servers and perform garbage collection and some other functions. It is important to know that client data doesn't move through the master. i.e. client never communicates with the master to keep master                           Figure 2.   Architecture of BigTable   B. Comparative analysis of traditional relational  database and column-oriented system From the simplicity of the columnar approach accrue many benefits, especially for those seeking a high- performance environment to meet the growing needs of extremely large analytic databases. These key factors are seamlessly engineered into a column-oriented database, which enable reasonably-priced, benchmark-busting performance to meet an organization?s business intelligence needs.

The study on the topic indicates the comparative analysis of traditional and column-store database system. The literature review helped to find the parameters for comparison. Some parameters can be considered for the analysis as shown below.

TABLE I.       COMPARATIVE ANALYSIS OF ROW AND COLUMN-STORE Sr. Criterion Row-Store Column-Store No.

1 Data Loading Slower Rapid      2 Query Efficiency Not much Optimized  optimized   3 Bulk Reporting Good Not so good   4 Smaller Storage Not suitable Very much suitable  5 Frequent Very effective Not much transactions support  6 Compression Not efficient Very much  efficient   7 Analytic Not suitable Very effective performance  8 Parallelization Difficult to achieve Very smooth  and easy    This is clear from the table that the column-store performs well when analytic performance, parallelization, query efficiency, compression and storage are considered while whenever the bulk reporting and frequent transactions are needed relational database system becomes more effective.

C.   Problems with Columnar database The columnar database plays important role in data warehouse systems but when insertion, modification, deletion operations are considered the performance of columnar database becomes poor. The insertion of record at right place becomes costly in this case as finding the right position for insertion is difficult. Along with this, the performance of column-oriented database system degrades in the case of importing, exporting, tuple construction and bulk reporting.



IV.     CONCLUSIONS   Many different kinds of organizations are increasingly recognizing the potential benefits of how analytic databases can support reporting, strategic analysis, and other business intelligence activities. And as the volumes of data used for analysis increase, the sizes of the data warehouses used to support the business intelligence activities must also be increased to meet organizational needs, in terms of size, performance, and scalability. As organizations continue to employ larger data warehouses for purposes ranging from standard reporting to strategic business analytics, complex event processing, and data mining, the need for performance will continue to outpace the capabilities of traditional relational databases.

In order to satisfy the need for the rapidly exploding need for analytical performance, an alternate database approach, which begins by storing data oriented by columns instead of rows, has proven to sustain the performance and rapid growth requirements of analytical applications. In addition, the simplicity and performance characteristics of the columnar approach provide a cost- effective alternative when implementing specialty analytics servers to support a wide range of users and query types. RDBMS will not go away, it is definitely needed. It can be used when the transactions are carried out frequently and bulk reporting is required. They are   effective in import and export operations. However, storage requirements for the new generation of applications are huge different from other traditional applications. As demands for performance and scalability increase, different databases like column-oriented are needed.

