

Abstract?Genetic-fuzzy data mining can successfully find out  linguistic association rules and appropriate membership functions close to human concepts from quantitative transactions, and thus becomes a promising research field in these years. It repeatedly uses fuzzy frequent 1-itemsets to evaluate fitness values of chromosomes, which is very time-consuming. In this paper, we propose a MapReduce preprocessing approach to efficiently transform given quantitative transaction data into pairs of items and quantity lists to increase the performance of genetic-fuzzy mining. The MapReduce architecture totally fits the conversion due to its characteristics of key-value format.

Experimental results also show the effect of the proposed approach.



I. INTRODUCTION Traditional data mining only considers the items with  occurrence or not in transactions of a database, but without their quantities. Some meaningful association rules may thus be dropped because of it. In the past, Srikant and Agrawal proposed quantitative association rules to prevent rule loss by partitioning quantitative data values [4]. Hong et al. then proposed a fuzzy mining approach for deriving association rules from quantitative data [7]. Linguistic and interpretable rules could thus be easily found. Some other extended algorithms or applications were also proposed [8][9][12].

In fuzzy data mining, the quality of membership functions may, however, have a critical effect on the final mining results.

Hong et al. thus adopted the genetic algorithm (GA) to automatically derive appropriate fuzzy membership functions because of the great optimizing capability of GA in limited time [6][10][11]. It is quite time-consuming, especially the fitness evaluating process. It needs to find all the large 1- itemsets by scanning the entire database since the items are spread in transactions. In this paper, we thus try to convert the original dataset into (item, quantity list) pairs to speed up the execution of genetic fuzzy data mining for deriving appropriate membership functions. Besides, the (item, quantity list) pairs fit the requirement of MapReduce, so we will also apply MapReduce framework to parallelize the preprocessing process and to see how much time can be saved.



II. RELATED WORKS Compare to traditional binary mining data, quantitative data  are much closer to the real-world applications and human concept. Srikant and Agrawal proposed quantitative     association rules to well partition quantitative values and reduce the loss of knowledge [4]. Hong et al. adopted fuzzy concept into mining techniques [7]. They extract fuzzy association rules by giving each item a fuzzy membership function. The fuzzy association rules can thus be found.

Since the quality of membership function is a critical issue for the final results, GA-based fuzzy data mining was thus proposed [11], which use genetic algorithm to find better membership function. However, although the quality of membership function is improved, the execution time is still suffered by finding the large 1-itemsets to evaluate the fitness.

Some algorithms [6][10][11] were thus proposed to improve the time efficiency by parallelizing fitness evaluation process.

Google proposed MapReduce in 2008 [2]. It contains two main functions, map and reduce, and the input and output data of each phrase will be stored as key-value format. There are many kinds of research on it, like large-scale data processing [5], cloud database [1] and efficiency improvement for MapReduce [3].



III. THE ALGORITHM In this paper, we only consider how much time can be  speeded up in preprocessing by MapReduce, and we use threads to simulate the performance of MapReduce.

The proposed system architecture and data conversion algorithm is shown Fig. 1 and below.

Fig. 1.  System architecture The MapReduced Fuzzy Data Conversion Algorithm: INPUT: (1) An original dataset D with n triples, each of  which consists of transaction ID, item ID (or name) and item quantity; (2) A MapReduce architecture with a key-size shift parameter k and m available mappers.

OUTPUT: A converted dataset of (item, quantity list) pairs, with the quantity list being the sequence of non-zero quantities of the item.

STEP 1. The master processor removes the field of transaction ID from each triple in D as the the key- value format for the MapReduce architecture, where a key is an item and a value is a quantity of the item.

STEP 2. The master processor splits the input dataset D into  Efficient Data Preprocessing for Genetic-Fuzzy Mining with MapReduce  Tzung-Pei Hong1, Yu-Yang Liu2, Min-Thai Wu1 and Chun-Wei Tsai3 1Department of Computer Science and Information Engineering, National Kaohsiung University, Taiwan  2Department of Computer Science and Engineering, National Sun Yat-Sen University, Taiwan 3Department of Computer Science and Information Engineering, National Ilan University, Taiwan         p data pieces, each of which contains k triples in D.

Thus, p is ? ?kn / .

STEP 3. The master processor distributes the p data pieces to the m mappers in a round-robin way.

STEP 4. Each mapper wj, j = 1 to m, performs the following substeps for concatenating the quantites of the same item ID:  STEP 4.1. Receive the allocated pieces of data from the master. Assume each wj receive amount, tj, of data.

STEP 4.2. Scan the received data one by one until all the data are processed; If the item i in the currently scanned data appears for the first time, then set a quantity list sji with the current quantity as its value, and set i as its index; Otherwise, link the current quantity to sji. .

STEP 5. The reducer do the following substeps for merging the data from the mappers:  STEP 5.1. The reducer receives the data sent from the mappers.

STEP 5.2. Keep the received data pairs (item index i, quantity list si) from the first mapper.

STEP 5.3. Scan the received data (item index, quantity list) one by one coming from the other mappers until all the data are processed; If the item index i in the currently scanned data does not appear in the existing indexes kept, then set a new quantity list si as the current quantity list; Otherwise, link the current quantity list to si.

STEP 5.4. Output each item index i and its si.

After STEP 5, the outputs are the converted data very  suitable for chromosome evaluation in genetic-fuzzy data mining.



IV. EXPERIMENTAL RESULTS Some experiments were done to show the performance of  the proposed MapReduced fuzzy data conversion algorithm.

Four datasets were adopted in our experiments. They have  30000, 50000, 70000 and 90000 transactions, respectively, and each of them has 64 items. The experiments were run with single thread, 2 threads, 4 threads and 8 threads, respectively.

The results for the two datasets are shown in Fig. 2, respectively.

Fig. 2. Execution time cost for different amount of transactions  It can be observed in these figures that the execution time decreases along with the increase of the thread numbers. The  time efficiency of using multiple threads is better than that of using single thread.

The results show that the MapReduce architecture provides a solution to speed up the preprocessing of fuzzy data for genetic-fuzzy mining.



V. CONCLUSION In this paper, we suggest to preprocess original dataset by  joining the quantities of the same item together. After this action, each row will include all the quantities of an item. It means that you do not need to scan the entire database to find one item?s information, and the data will stay complete after the division process of mapping. We examine the time efficiency of preprocessing the dataset in different number of thread, and the result is that the more threads are used, the less time is need to complete the job as expectation. In the future research, we will apply those re-ordered data and see how the data structure actually improves the performance.

