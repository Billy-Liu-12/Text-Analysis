Research On The Privacy Preserving Algorithm Of Association Rule Mining In  Centralized Database

Abstract   The recent advance of data mining technology to analyze vast amount of data has played an important role in marketing business, despite its benefits in such areas, data mining also opens new threats to privacy and information security if not done or used properly. The main problem is that from non-sensitive data, one is able to infer sensitive information, including personal information, fact or even patterns that are not supposed to be disclosed. In order to focusing on privacy preserving association rule mining, the simplistic solution to address the problem of privacy is presented. The solution is to implement a filter after the mining phase to weed out or hide the restricted discovered association rules. Before implementing the algorithms, the data structure of database and sensitive association rule mining set have been analyzed to build the more effective model. This new algorithm can be used to balance privacy preserving and knowledge discovery in association rule mining.

Keywords: Data Mining; Privacy Preserving; Restrictive Association Rule  1. Introduction   Data mining technology can analyze massive data.

Although it plays vital role in many domains, if it is used improperly it can also cause some new problem of information security. There are some new problems in the application of data mining recently.

Fast increasing of a series of digitized data causes people of the world attend the privacy problem of information more and more. Because the data mining technology of traditional centralized database must collect all the data together to process, it will cause the individual information abused or misused easily. Therefore more and more people will not to provide individual privacy data and suspect the using of data mining.

Some people mine the privacy information pattern of the database owner from the original data. It has harmed the database owner's benefit. In order to solve the privacy preserving problem of association rule in centralized  database, before publishing database we should hide the privacy or the sensitive information pattern of the database owner including the sensitive association rule information [1-2]. Usually we use disturbing data method to change the data of original database to hide association rule. But the data disturbance may generate some information pattern that is not existed at all or reduce the accuracy of the original database. Before executing the privacy preserving algorithm, we should analyze the information pattern of association rule and the data structure of the database and find the preferred plan to keep the balance between the accuracy of database information and the privacy of sensitive information.

2. Traditional algorithm of association rule mining   The algorithm of association rule mining is to mine the association rule based the given minimal support and minimal confidence. The most direct method to hide association rule is reducing the support or confidence of the association rule below the minimal support of minimal confidence. In order to reduce the support or confidence of association rule we should find the front-end itemsets, back-end itemsets or the itemsets generated by the whole association rule firstly [3-4].. And we should modify the original database, find the transactions that contain every item of the itemset to update, delete or modify the items of itemsets. For example, in Table.1 the transactions T1 and T4 all support AB itemset, in order to reduce the support of AB itemset, we can choose any transaction from T1 and T4 to delete it or modify A item or B item.

There is a basic principle of choosing the transaction or the item of itemset to be modified that we should reduce the influence of the original database as far as possible.

For association rule A => B, its support and confidence computation formula are: Support = P(AB),    Confidence = P(AB)/P(A)  Hiding association rule A => B can reduce the support and confidence of the association. There are two methods to reduce the confidence. One is keeping P(AB) and adding P(AB). That means keeping the support of the generated itemset and adding the support of front-end  2008 International Symposiums on Information Processing  DOI 10.1109/ISIP.2008.11   2008 International Symposiums on Information Processing  DOI 10.1109/ISIP.2008.11     itemset. The other methods is keeping P(A) and reducing P(AB). That means keeping the support of front-end itemset and reducing the support of generated itemset.

Taking Table.1 transaction data table as example, the minimal support of association rule A => B is 2/10, the minimal confidence is 2/6. In this we introduce the existing three methods simply but do not list their concrete algorithms.

Table.1 Transaction data table                   1) D_CONF1 algorithm: keeping the support of  generated itemset and adding the support of front-end to reduce the confidence. It selects a transaction that does not support all front-end itemset and back-end itemset. In this example it can select transaction T5. It adds transaction A in T5, then the confidence is 2/7 and below the minimal confidence. The sensitive association rule A=>B is hidden.

2) D_CONF2 algorithm: keeping the support of front- end itemset and reducing the support of back-end itemset to reduce the support of generated itemset and the confidence of association rule. In this example we can select transaction T4 and delete B item, then the confidence of association rule is 1/6 and below the minimal confidence. The sensitive association rule A=>B is hidden.

3)D_SUPP algorithm: reducing the support of association rule A=>B to hide association rule. At first, it selects a transaction that supports itemset AB such as T4 and deletes transaction item B from T4. Then transaction T4 does not support itemset AB any more. The support of itemset AB is 1/10 and below the minimal support. The sensitive association rule A=>B is hidden.

D_SUPP algorithm is similar with D_CONF2 algorithm. The differences between them are that D_SUPP algorithm can select sacrifice item in the whole generated itemset and the conclusion of D_SUPP algorithm takes the support as only measure standard [5].

D_CONF2 algorithm selects sacrifice item in back-end itemset only. The conclusion of D_CONF2 algorithm  takes the result of comparing the support with the minimal support and comparing the confidence with the minimal confidence as measure standard.

3. Privacy preserving algorithm   The three algorithms introduced above hide sensitive association rule through reducing the support and confidence separately. But the methods of selecting the transaction to be modified and sacrifice item of the three algorithms are different. Therefore their influences for the original database are different. We should choose the algorithm according to the different situation that can reduce the influence for the original database as far as possible. D_CONF1 algorithm will increase one transaction item when it circulates one time. Usually there are much data and many association rules while it processing the problem of privacy preserving. Frequent using of D_CONF1 algorithm will increase the quantity of data and generate some association rules that do not exist. It has influenced the accuracy of database. If there are some important items that can not be modified or deleted, D_CONF1 algorithm is suitable for this situation.

The front parts of D_CONF2 and D_SUPP are same.

D_CONF2 algorithm can only select sacrifice item in back-end itemset and D_SUPP algorithm can select sacrifice item in whole generated itemset. So if the influence for the original database of selecting sacrifice item in front-end is smallest we can choose D_CONF2 algorithm. If the influence for the original database of selecting sacrifice item in back-end is smaller, we can choose algorithm through comparing the efficiency, the quantity and importance of selected sacrifice item and support of D_CONF2 and D_SUPP algorithm.

3.1 analyzing sensitive association rule set  We should analyze the transaction set of the original database and the sensitive association rule set to be hidden and find the relation of them. So we could select the sensitive transaction and sacrifice item more efficient.

The modified data will be fewer and the influence for the original database will be smaller.

To hide these association rule that relate to users? privacy we should modify the data items of database. So the designer of the algorithm hope to hide more association rules one time as far as possible. When it selects the sacrifice items it should select the item that relate to multi-items of the sensitive association rule.

Therefore it can reduce the support or confidence of several sensitive association rules and hide several association rules through modifying one item. There are some important concepts.

Definition.1: sensitivity of data item [6] is the quantity of data item existed in sensitive association rule set or the  Transaction ID Transaction item  T1 A,B,C,D,E,F,G,H  T2 D,F,H T3 C,D,E,F T4 A,B,C,D,E,G,H  T5 C,G  T6 A,C,D,E,G,H  T7 A,D,E,F,G,H  T8 A,C,F,H  T9 A,C,D,F,G,H  T10 D,E,H     number of the sensitive association rule that are associated with this data item.

The sensitivity of data item means the frequency that the data item appear in sensitive association rule set. It can be regarded as a standard for selecting data item as sacrifice item [7] or a standard for measuring the sensitivity of an association rule.

Definition.2: the sum of the sensitivities of each item of association rule is the sensitivities of the association rule.

The association rules of association rule set can be sorted by their sensitivities from big to small. Therefore the privacy preserving algorithm of association rule can operate each association rule taking data item as unit. We can process the items of which the sensitivities are higher.

Its influence for the whole association rule set is the biggest and the efficiency of the algorithm is the highest.

Because operating the item may influence many association rules that contain this data item, the supports of such association rules are reduced.

3.2  algorithm of sensitive association rule   The owner of the database give the association rule set, key items and original database.

Definition.3 the items of the database that the owner does not want to delete or modify are called key items.

Key item is an important concept, it is an important standard to decide which algorithm should to be executed.

If the front-end itemset of the association rule has key items, it can only modify back-end itemset and execute D_SUPP algorithm. Otherwise, if the back-end itemset has key items, it can only modify front-end itemset and execute D_CONF2 algorithm. If the front-end itemset and back-end itemset all have key items, it can only execute D_CONF1 algorithm. The algorithm is shown as follow:  INPUT : a set RH of rules to hide , the number |RH| of  rules RH . the source database D , the number |D| of transactions in D , a set key items , the min_conf threshold , the min_supp threshold  OUTPUT : the database D? transformed so that the rules in RH can not be mined  Begin For each item in RH do  Compute sensitive degree of the item For each item in D do  Compute support degree of the item Sort(items) by sensitive degree of the item Sort(rules) by sensitive degree of the rule Sort(transactions) by sensitive degree of thetransaction For each rule in Sort(rules) do  {If (the front-end itemset contains the key items) {T[r]={t?D/t in Sort(transactions) fully support r};  N_iter_conf=|D|*[Supp(r) ? Supp(Ar)*min_conf] N_iter_supp = |D|*(supp(r) - min_supp) N_iterations = min(N_iter_conf, N_iter_supp)  For i = 1 to N_iterations do { t = T[r1]  j=choose_item(T[r]) in by sequence of Sort(items) in consequent  set_to_zero(j,t.values_of_items) supp(r) = supp(r) - 1 conf(r) = supp(r)/supp(Ar) T[r] = T[r] ? t   }  RH = RH ? r } elseif (the back-end itemset contains the key items)  {T[r]={t?D/t in Sort(transactions) fully support r}; N_iter_supp = |D|*(supp(r) - min_supp) N_iterations = N_iter_supp  For i = 1 to N_iterations do {t = T[r1]  j=choose_item(T[r]) in by sequence of Sort(items)  set_to_zero(j,t.values_of_items) supp(r) = supp(r) - 1 conf(r) = supp(r)/supp(Ar) T[r] = T[r] ? t  }  RH = RH ? r } else (the front-end itemset and back-end itemset both contain the key items)  { T[r]={t?D/t in Sort(transactions) partially supports Ar and not fully supports Cr};  For each transaction t in T[r] do {t.num_items= |t| - |Ar? t.values_of_items| }  sort(T[r]) N_iterations=[|D| * (supp(r)/min_conf ? supp(Ar))] For i = 1 to N_iterations do { t = T[r1]  set_all.ones(t.values_of_items,Ar) supp(Ar) = supp(Ar) + 1 conf(r) = supp(r)/supp(Ar) T[r] = T[r] ? t   }  RH = RH ? r }  } End   Firstly the algorithm analyzed the transactions of the association rule set and transaction database. The sensitive association rule, transaction and each item are sorted by certain characteristic separately. Therefore we can select sensitive association rule, transaction and sacrifice items according to certain rule or order in the process of implementing algorithm to preserve privacy of the association rule and reduce the influence of the original database.

We can take the data of Table.1 as an example. Its association rule set is {A,C,D=>E,G,H;A,C=>F}, the firstly the algorithm analyzed the transactions of the association rule set and transaction database. The sensitive association rule, transaction and each item are sorted by certain characteristic separately. Therefore we can select sensitive association rule, transaction and sacrifice  items  according  to  certain rule or order in the      Table.2 Privacy preserving algorithm             Table.3 Traditional method               Table.4 Support table that has been executed   process of implementing algorithm to preserve privacy of the association rule and reduce the influence of the original database.

But in Table.4, after the algorithm has been executed, the traditional algorithm modified two item supports and the privacy preserving algorithm proposed in this paper only modified one item support. Its influence to the original database is smaller.

4. Conclusions   Some people mine the privacy information pattern of the database owner from the original data. It has harmed the database owner's benefit. In order to solve the privacy preserving problem of association rule in centralized database, before publishing database we should hide the privacy or the sensitive information pattern of the database owner including the sensitive association rule information. To address this problem, this paper has  presented a new algorithm. Before implementing the algorithms, the data structure of database and sensitive association rule mining set have been analyzed to build the more effective model. This new algorithm can be used to balance privacy preserving and knowledge discovery in association rule mining.

