Immune Clone Algorithm for Mining Association Rules on Dynamic

Abstract  The paper seeks to generate large itemsets in a  dynamic transaction database using immune clone algorithm. Intra transactions, Inter transactions and  distributed transactions are considered for mining  association rules. The time of complexity of  DMARICA(Dynamic Mining of Association Rules using Immune Clone Algorithm) is analyzed, with Fast  Updata(FUP) algorithm for intra transactions and E-  Apriori for inter transactions. The problem of mining  association rules in the distributed environment is explored by Distributed DMARICA(DDMARICA). The  study shows that DMARICA outperforms both FUP  and E-Apriori in terms of execution time and  scalability, without comprising the quality or completeness of rules generated. DMARICA is also  compared with DMARG(Dynamic Mining of  Association Rules using Genetic Algorithm).And it has  better performance than that of DMARG.

1. Introduction  Data mining attempts to extract valuable and hidden  information from large databases ranging from  gigabytes to terabytes. Mining associate rules is one of  the main tasks of data mining.

Mining optimized association rules with respect to  categorical and numerical attributes was introduced  in[4]. The technique for discovering localized  associations in segments of the data using clustering  was discussed in[5]. Mining inter-transaction  association rules was first introduced in[6], in which  extended aprori and extended hash apriori were  proposed to deal with single and multidimensional  inter transaction association rules. DMARG is  presented in [7]. It uses GA to discover the largest  itemsets of association rules in large dynamic database.

The clone selection principle is used to explain the  basic features of an adaptive immune response to an  antigenic stimulus. It establishes the idea that only  those cells that recognize the antigens are selected to  proliferate. The selected cells are subject to an affinity  maturation process, which improves their affinity to  the selective antigens. The general algorithm, named  CLONALG, is primarily derived to perform machine-  learning and pattern recognition tasks, and then it is  adapted to solve optimization problems[2]. But it is  never used to dynamic mining of association rule.

In this paper, we use a computational  implementation of the clone selection principle to  solve the problem of mining association rules on  dynamic database.

2. Immune clone algorithm  2.1. The clone selection theory and the shape-  space model  When an animal is exposed to an antigen, some  subpopulation of its bone marrow derived cells (B  lymphocytes) respond by producing antibodies (Ab).

Each cell secretes a single type of antibody, which is  relatively specific for the antigen.

By binding to these antibodies (cell receptors), and  with a second signal from accessory cells, such as the  T-helper cell, the antigen stimulates the B cell to  proliferate (divide) and mature into terminal (non-  dividing) antibody secreting cells, called plasma cells.

The process of cell division (mitosis) generates a  clone, i.e., a cell or set of cells that are the progenies of  a single cell. While plasma cells are the most active  antibody secretors, large B lymphocytes, which divide  rapidly, also secrete antibodies, albeit at a lower rate.

On the other hand, T cells play a central role in the      regulation of the B cell response and are preeminent in  cell mediated immune responses, but will not be  explicitly accounted for the development of our  model[3].

Lymphocytes, in addition to proliferating and/or  differentiating into plasma cells, can differentiate into  long-lived B memory cells. Memory cells circulate  through the blood, lymph and tissues, and when  exposed to a second antigenic stimulus commence to  differentiate into large lymphocytes capable of  producing high affinity antibodies, pre-selected for the  specific antigen that had stimulated the primary  response.

The shape-space model aims at quantitatively  describing the interactions among antigens and  antibodies (Ag-Ab)[3]. The set of features that  characterize a molecule is called its generalized shape.

The Ag-Ab representation (binary or real-valued)  determines a distance measure to be used to calculate  the degree of interaction between these molecules.

Mathematically, the generalized shape of a molecule  (m), either an antibody or an antigen, can be represented by a set of coordinates  >=< 12 ,,..., mmmm L , which can be regarded as a point in an L-dimensional real-valued shape-space (m  ? LS ). The precise physical meaning of each parameter  is not relevant to the development of computational  tools. In this work, we consider binary strings to  represent the association rules.

2.2.Immune clone algorithm for mining  itemsets in large database  In this work, we consider binary strings to represent  the association rules. The immune clone algorithm has  eight steps ,which are similar to the algorithm in[2].But  it has a little difference in 1-3 steps as follows.

Antigens and antibodies are assumed to be the same  length L. In the following application, L is the length of  the encoded transaction. an explicit antigen population  Ag, which is made up of different transactions, is to be  identified. Without loss of generality, it will be  assumed the pre-existence of one memory antibody,  which is made up of string containing an itemset, from  }{mAb  to each antigen to be recognized.

1. Randomly choose an antigen jAg ( jAg ? Ag ),  that is, a transaction with a transaction identifier, and  present it to all antibodies in the repertoire  }{}{ mr AbAbAb ?=  (r + m = N);  2. Determine the vector jAf that contains its affinity  to all the N antibodies in Ab;  )(nransactionNoofitemst  tsNonmatchbiMatchbits Af j  ?= (1)  where Matchbits  is the No. of matching bits,  gbitsNonmatchin is the No. of non matching bits.

)(nransactionNoofitemst  is the total number of items  in the transaction n.

3. Select the n highest affinity antibodies from Ab  composing a new set j nAb }{ of high affinity antibodies  with relation to jAg ;  The other steps are the same as the algorithm in[2].

After presenting all the M antigens(all transactions)  from Ag and performing the eight steps above to all of  them, we say a generation has been completed.

In our implementation, it was assumed that the n  highest affinity antibodies were sorted in ascending  order after Step 3, so that the amount of clones  generated for all these n selected antibodies was given by (2):  =  = n  i i  N roundNc   ?                         (2)  where Nc is the total amount of clones generated for  each of the antigens, ? is a multiplying factor, N is the total amount of antibodies and round(?) is the operator that rounds its argument towards the closest integer.

The clone selection process is driven by antibody  antigen interactions. The evolution of the antibody  population leads to maturation of the immune  response, which features itself by an increase in the  affinity. The affinity is important to the cloning  expansion process.

Affinity maturation process is implemented by a  relatively high mutation rate (mutation rate of 10%)  over an antibody. The best antibody is maintained from  last iteration to the next one.

3. Algorithms for Association Rules  We consider a sliding window of some specific  size(size is the number of transactions to be handled at  a time)to generate inter-transaction association rules.

Mining intra transaction association rules, is the special  case of inter transaction association rule mining when  the window size is one. Two algorithms-DMARICA  and DDMARICA inspired by[7] are presented to solve  the problem of mining associate rules on dynamic  database.

3.1. Problem Definition and Assumptions  Consider a large database DB  with horizontal layout  consisting of a finite set of transactions },...,{ 21 nttt .Each  transaction is represented by a binary string of fixed      length n ,where n  is the total number of items present. Let an incremental set of new transactions be  added to DB .

The objective is to generate all the large inter  transaction association rules in dbDB ?  without involving DB  using scan only once technique through  an algorithm DMARICA.

Assumptions are as follows.

1.A transaction is represented by a binary coded  string.

2.The items in the transaction are ordered.

3.The transactions are generated by synthetic data  generator.

3.2. Algorithm DMARICA  The algorithm DMARICA is  1.Initialize database DB .

2.Read Window_size(Window_Size)  3.Prepare Database( DB , Window_Size)  4.Initialize itemsets database I .

5.Read an itemset i  from the incremental database  idb . Update those Itemsets in I which share one or  more common transactions with i.

6.Disvover new itemsets  Repeat step 4  Apply immune clone algorithm to member of I .

i)Clone itemsets with high affinity values(1- 4 steps  of Immune clone algorithm).

ii)Mutate certain itemsets to obtain a new itemset, if  complete set not found(5-6 steps of immune clone  algorithm).

iii) Keep the memory of high affinity itemsets and  Updata itemsets until complete set found(7-8 steps of  immune clone algorithm).

7.If end of database idb  has not been reached, goto  step 3.

8.Identify large itemsets above minimum support.

9.Generate all rules above the minimum confidence.

10.If the incremental operation is to be repeated,  goto Step 1.

Given n  hosts },...,{ 21 nhhh where each  )1( nihi ?? ,contains a local database idb , idb  is mined to discover large itemsets local to  ih  and  generate local association rules.

The local large itemsets are combined to generate  global rules. The local databases are horizontally  partitioned. Databases are statically distributed across  all the nodes of the homogeneous network.

3.3. Algorithm DDMARICA  1.The server waits for the request from the clients.

2.Clients register themselves within the allotted time  frame.

3.Serve registers the clients which participate in  mining process.

4.Server requests the clients to check for the  integrity of the executables required for distribute  mining.

5.Clients return status of association rules mined  from the local database idb .

6.Sever waits for clients to perform local mining on  the database and places it in WAIT state.

7.Clients interrupt server when the local mining on  idb  is completed and generates the local association  rules using the algorithm DMARICA.

8.Server requests the clients to send the entire rule  antibody mined.

9.Sever builds the universal database of rule  antibody after receiving the complete set of association  rules mined in all the registered clients.

10.Server generates the global association rules from  the result obtained from step 9.

11.Server closes connections with all the clients.

12.End.

4. Performance Analysis  Simulations were performed on a system of physical  memory capacity 512MB and a Pentium IV processor  of speed 1.5GHz. Transaction data, in the form of  binary strings of desired length, was generated using a  Synthetic Data Generator. The number of items, 25 and  the average size of maximal potentially large itemsets  was 4. DMARICA was compared with a standard  algorithm, FUP(Fast Update),which works on the  principles of Apriori. And it was also compared with  DMARG, which works on the principles of GA.

Figure 1 shows the plot of the execution time of  DMARICA and DMARG versus the number of  transactions. The transaction databases were varied in  the range of[100k-300k]. The support considered was  1. The low value has been explicitly chosen to  exhaustively generate all the possible combinations of  itemsets. The execution time varies from 1 minutes to  15 minutes. It is evident from Figure 1, that  DMARICA can handle large databases without  comprising performance and has excellent scalability.

And it consumes less time that DMARG does. It is also  good at finding small itemset. The difference between  DMARICA and FUP is due to the single scan and  feature of DMARICA. Like the GA, the immune clone  algorithm is highly parallel and presents a fine  tractability in terms of computational cost.

0 50 100 150 200 250 300     Number of Transaction  E xe  cu tio  n T  im e  in M  in s  DMARG  DMARICA  0 10 20 30 40 50 60 70 80 90 100          Number of Transaction  E xe  cu tio  n T  im e  in M  in s  DMARICA  FUP DMARG  Figure 1. Execution time of DMARICA vs No.                      Figure 2. Execution time vs increment database  of transactions                                                                        (intra transaction)  Figure 2. compares the execution times of  DMARICA with the standard algorithm for  incremental mining, FUP and also DMARG. The initial  database DB  was of size 100k.The incremental  database idb was varied form 1% to 100% of DB . The  execution time for  DMARICA was observed to vary  from 1.0 seconds to 110.1 seconds. Under identical  conditions, the execution time of FUP varied from 9.7  seconds to 401.2 seconds. And DMARG varied from  0.8 seconds to 98.1. DMARICA runs a little faster than  DMARG does.   In Figure 3,the variation of the  execution time of DMARICA for various decrements  of DB  is also studied. The initial database DB considered is of size 100k. The decrements were varied  from 10% to 50% of DB . DMARICA is versatile in  handling both increments and decrements to DB . For  inter transaction association rule the database of size  1,00,000 transactions with 300 items and the window  size of three is taken. The execution time of  DMARICA is compared with Extended-Apriori and  DMARG. It can be seen that DMARICA is faster than  DMARG and Extended-Apriori.

0 5 10 15 20 25 30 35 40 45 50        Decrement in %  E xe  cu tt  io n  T im  e in  S ec  s  Extended-Apriori  DMARG  DMARICA  1 1.5 2 2.5 3 3.5 4 4.5 5  0.4  0.5  0.6  0.7  0.8  0.9   No.of Processors  E xe  cu tio  n tim  e in  M in  s  DMARG  DMARICA  Figure 3. Execution time vs decrement database                   Figure 4. Execution time vs No.of processors  (inter transaction)                                                                   (distributed mining)  In case of distributed mining, simulations were  performed on an Ethernet Local Area Network.

Database is distributed uniformly amongst all the  processors. Figure 4 shows the variation of execution  time in minutes versus the number of processors. The  execution time decreases as the increase in the number  of processors. The time taken for the synchronization is  negligible. And DDMARICA consumes less time than  DDMARG does. In the experiments, the database was  kept constant and the number of processors were  varied.

By comparing the proposed algorithm DMARICA  with DMARG , FUP and Extended-Apriori, it can be  noticed that the DMARICA is also good at such  problem. It is mainly because immune clone algorithm  can reach a diverse set of local optima solutions, while  the GA tends to polarize the whole population of  individuals towards the best candidate solution.

Essentially, their coding schemes and evaluation  functions are not different, but their evolutionary  search processes differ from the viewpoint of  inspiration, vocabulary and sequence of steps, though  immune clone algorithm embodies the 5 main steps  required to characterize evolutionary algorithm. So they can solve the same problem with  similar  performance.

5. Conclusions  In this paper, the issue of mining intra and inter  transaction association rules for dynamic database was  examined.

The proposed algorithm is effective in generating  large itemsets and in addressing updations in the  database. The rules generated using DMARICA, are  qualitatively sound. The single scan feature reduces  computational costs significantly. The algorithm  generates inter transaction association rules using the  augmented transactions. DMARICA handles identical  and skewed database.

The algorithms DMARICA and DDMARICA are  effective and efficient. Efficient is because of the  incremental speed and scalability of immune clone  algorithm in performing data mining and a low  communication overhead achieved when building  global knowledge. It is effective because the quality of  the rule antibody is not compromised in the process.

DMARICA uses a single scan technique. The support  is required only before the association rule generation,  to build stronger and relevant rules.

Like the GA, the immune clone algorithm presents  highly parallelism and a fine tractability in terms of  computational cost.

At present, DDMARICA works on an antibody  database. With certain modification, i.e., the exchange  of details regarding the properties of the database  before the mining process, the code can cater to a  heterogeneous database as well.

Acknowledgement  This paper is supported by National Nature Science  Foundation of China,No.60305007, and Nature Science  Foundation of Heilongjiang Province, China, No.F0210  and Basic Theory Research Project Foundation of  Harbin Engineering University,No.HEUF04076.

