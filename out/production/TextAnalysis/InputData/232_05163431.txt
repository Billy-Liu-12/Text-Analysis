Strong Association Rules Mining Without  Using Frequent Items for Microarray Analysis

Abstract-Microarray technology has created a revolution in the field of biological research. Association rules can not only group the similarly expressed genes but also discern relationships among genes. However, the efficiency of traditional method to generate association rules is not very well. We develop a novel algorithm, SAW, to generate strong association rules by combining the paired rules, which can avoid lots of unnecessary computing that traditional method often encounter. The experiments show our method is more efficiently than FARMER.

KeyWords-strong association rules; forward combined; backward combined; closed rules  1. INTRODUCTION Understanding biological processes and gene functions are the fundamental problems in the post-genomic era. Recent advances in microarray technologies have made it possible to measure the expression levels of genes simultaneously. Using microarray data can reveal the structure of the transcriptional gene regulation processes, which is called reverse engineering[1]. Many obvious meaning of gene expression data analysis are illustrated as follow. (1) Identify genes whose expression levels reflect biological processes of interest (such as development of aging). (2) Determine how the expression of any particular gene might affect the expression of other genes, e.g. several co-expressed genes may be composed to a protein. (3) It can provide clues for the function of genes or proteins of unknown role. (4) It can help biologist finding potential transcription factors.

Currently, the most widely used algorithm for analyzing microarray data is clustering[2,3]. Although this method can identify genes whose expression levels are correlated across many experiments. However, using cluster analysis to infer regulatory modules or biological function has several inherent limitations. First, genes that are biologically related often are not related in their expression profiles[4]. Second, one gene may participate in more than one biological process or function. Third, the relationship between clusters can not be discovered.

Therefore, association rules mining method has been used to analyze the gene expression data[5-8], which can discover the relationship among genes. An association rule has the form LHS=>RHS, where LHS and RHS are sets of items, the LHS occurs may result in the occurrence of RHS.

Biologically speaking, the expression of one gene of gene sets may induce the expression of another gene or genes. For example, GENE1=>GENE2 (support 80%, confidence 100%), which means, when GENE1 is expressed, 100 percent of the  time GENE2 is also expressed and both genes are expressed in 80 percent of the microarray experiments. Traditional method to generate association rules is to mine frequent items firstly. Many frequent pattern mining algorithms can be used to generate frequent items, such as [9,10]. Then high confident association rules can be obtained using frequent items. For example, ABC is a frequent item. Using it, we can obtain six potential rules: A=>BC, AB=>C, B=>AC, C=>AB, AC=>B, BC=>A. Based on our experiment, compared to generate frequent items, the obtaining high confident association rules is more time consuming.

In this discussion, we present a novel algorithm SAW(Strong Association rules mining Without using frequent items), to generate high confident association rules without using frequent items. First, all the paired rules are generated.

Second, larger strong association rules can be obtained by combing the above rules. The combined strategy is composed by two parts: forward combined, backward combined, which are show in Fig.1. Using SAW can avoid lots of unnecessary computing. For example, if A=>B is not strong rule, according to the Apriori character, A=>BC must not be the strong one. Therefore, using frequent item ABC to produce strong rules: A=>BC, AC=>B, must be failed. However, using our method can avoid the unnecessary computing, so the efficiency can be improved. In order to reduce the redundant rules, the rules SAW generates are closed rules. We compare SAW with the support-based row-enumeration algorithm FARMER[8]. Our evaluation on Mice Aging microarray dataset shows our method is more efficiently than it.

The remainder of paper is organized as follow: In Section 2, we introduce some preliminaries and give our problem definitions. The SAW algorithm is introduced in Section 3. Experimental results will be given in Section 4. In Section 5, we conclude this paper with a summary.

Figure 1. The combined strategy of SAW  2. PROBLEM FORMULATION  2.1 Association Rules Let the data set 1 2{ , , }nD t t t= be a set of n transactions.

And let 1 2{ , , }mI i i i=  be the set of items (m). Each     transaction t consists of a set of items from I. The support of an item T is the number of transactions in D that contain all the items in T. T is a frequent item iff the support of T is greater than the minimum support. An association rule is described as the form LHS->RHS denoted as R, where LHS and RHS are disjoint itemset. LHS is referred to as the antecedent itemset and RHS as the consequent itemset. The support of R is the number of transactions in D that contain both LHS and RHS. The confidence of R is the ratio support(LHS?RHS)/support(LHS). A rule which satisfies the support and confidence thresholds is claimed a strong association rule. If a rule 1r is a closed strong rule, there does not exit another rule 2r such that 1) antecedent( 1r ) ? antecedent( 2r ), 2) consequent( 1r ) ? consequent( 2r ), 3) support( 1r )=support( 2r ).

2.2 Gene Expression Data  A gene expression profile can be seen as a single transaction, and each gene, transcript or protein can be thought as an item.

The gene expression data can be considered to be a matrix, denoted as G in real expression numbers, which is shown in Table 1. The columns denote different samples or conditions.

The rows denote genes. In applying association rules to gene expression data, traditional technique would be to first convert each gene expression data into one of three items, down-regulated, up-regulated, or normal expression, which can be denoted as -1, 1 and 0, respectively, as shown in Table 2. This is performed by binning the 2log of the expression level into the three classes[6] with bounds ? -?, ? ?, or in between, where ? is a threshold defined by user.

Biologically speaking, the relation between genes is activation and inhibition. The activation means, if one gene is up-expressed, the other one must be up-expressed; or one is down-expressed, the other is also down-expressed. The inhibition is that, if one gene is up-expressed, the other one must be down-expressed; or one is down-expressed, the other is up-expressed. Therefore, the way to calculate the support of two genes X and Y can be defined as follows:  | 1 1|( ) | |  X ORXsupport X G  = = ?  | 1 1| | 1 1|( ) | |  X ANDY X ANDYactivation XY G  = = + = ? = ?=  | 1 1 | | 1 1|( ) | |  X ANDY X ANDYinhibition XY G  = = ? + = ? ==  Table 1. An example of microarray  HiFA1 HiFA2 HiFA3 HiFA4 A 2.39 2.27 2.04 1.6  B 0.33 0.68 0.46 -0.06 C 1.26 1.70 1.58 1.13 D 0.77 1.01 0.73 0.63  E 0.62 0.99 0.87 0.42  Table 2. Converted microarray  HiFA1 HiFA2 HiFA3 HiFA4 A 1 1 1 1 B 0 1 0 0  C 1 1 1 1 D 1 1 1 1 E 1 1 1 0  3. STRONG ASSOCIATION RULES MINING In this section, we will illuminate two ways to generate strong association rules. The first one is to mine association rules by generated frequent items, the other generates association rules without using frequent items.

3.1 Generate Association Rules by Frequent Items The PrefixSpan[9] algorithm is a projection-based, sequential pattern-growth approach for efficient mining of sequential patterns. In this approach, a sequence database is recursively projected into a set of smaller projected databases and sequential patterns are grown in each project database by exploring only locally frequent fragments.

Using the concept of PrefixSpan, we can generate frequent items from microarray, exampled by Table 2. Then strong association rules can be obtained by mined from frequent items. We can consider Table 2 as a transaction dataset, shown as in Table 3, where A denotes the expression number of A is 1, while ?A means the value is -1 which can not be seen in this example.

Table 3. A transaction dataset  Sample Items  HiFA1 ACDE  HiFA2 ABCDE  HiFA3 ACDE  HiFA4 ACD  Let us examine how to use the prefix-based protection approach for mining frequent items. For the database S in Table 3 with minimum support is 3. The mining process is shown as follow:  1. Find length-1 frequent items. Scan S to find all the length-1 frequent items, which are (A):4, (C):4, (D):4, (E):3. The number is support count.

2. Divide the search space. The original dataset can be partitioned into the following four subsets: (1) the ones with prefix A, (2) the ones with prefix C, (3) the ones with prefix D, and (4) the ones with prefix E.

3. Find all the frequent items with prefix A. The A-projected database can be seen as {(CDE), (BCDE), (CDE), (CD)}. Finding all the length-1 frequent items in A-projected database, which are (C):4, (D):4, (E):3. Then generating AC-projected database: {(DE), (DE), (DE), (D)} Finding all the length-1 frequent items: (D):4, (E):3.

Recursively, all frequent items with prefix A can be     discovered.

4. Find all the frequent items. All the frequent items can be found by applying the above recursive mining process, which are shown in Table 4.

Then, it is straightforward to generate strong association rules from the above frequent items. The confidence ratio is set to be 100%. According to the definition of confidence, all the rules can be generated. We take the frequent item CDE for example, which is shown as follows, each list with its confidence. The strong association rules whose confidence is higher than threshold would be output. The rules of other frequent items can be generated by same process.

C->DE  confidence=3/4=75%  D->CE  confidence=3/4=75%  E->CD  confidence=3/3=100%  CD->E  confidence=3/4=75%  CE->D  confidence=3/3=100%  DE->C  confidence=3/3=100%  Table 4. All frequent items of dataset  Prefix Projected database Frequent items  A (CDE), (CDE), (CDE), (CD)  AC,ACD,ACDE,AD, ADE,AE  C (DE), (DE), (DE), (D) CD,CDE,CE D (E), (E), (E) DE E ?  ?   Using frequent items to generate strong association rules  are simply, however, the computing is very costly. If N is the length of frequent item, the times of generating association rules would be 1 2 1 2 2N NN N NC C C  ?+ + + = ? . Therefore, the efficiency is not very well. The SAW algorithm can generate strong association rules without complex computing, which will be illustrated in the next part.

3.2 Generate Association Rules Without Using Frequent Items  Due to the complex computing of traditional mining strong association rules method, we design a novel method to generate rules by combined pairs of rules. Our SAW algorithm consists of six steps, as outlined in Algorithm1 and illustrated as follow:  Algorithm 1: SAW.

Input: A gene expression matrix G, the minimum support threshold min_sup, and the minimum confidence threshold min_conf, a set of mined paired strong association rules PSet, a set of mined strong association rules ASet, a strong association rule T. Output: The complete set of closed strong association rules.

Global: PSet= ? , ASet= ? , T= ? ; Method: Call SAW(G, min_sup, min_conf, Pset P, ASet, T).

(1)  Scan the matrix G, delete the non-frequent genes; (2)  if  PSet= ? , then generate all the paired association rules that satisfy the thresholds, and store to PSet, P=firstrule(PSet); (3)  for each rule in PSet, appeared after P, do existed another rule S (4)  if antecedent(T)=antecedent(S), and TS satisfy the thresholds, then T and S are forward combined to  N, ASet=Aset+N, Using Pruning 1, call SAW(G, min_sup, min_conf, S->next, Aset, N); (5)  else if consequent(T)=consequent(S) and TS satisfy the thresholds, then T and S are backward combined to N, ASet=ASet+N, Using Pruning 1, call SAW(G, min_sup, min_conf, S->next, ASet, N); (6)  After generate all the rules, delete the non-closed rules from ASet, and output ASet.

Algorithm 1 illustrates the framework of our association rules mining approach. Step 1 can decrease the space of dataset. Step 2 generates all the paired strong association rules.

Forward and backward combined (Step 3-5) are used to generate all the strong association rules. After generated all the rules, the closed rules are output(Step 6). As we known, there have two ways to generate closed rules: (1) greedily find the final closed rules; and (2) find a closed rule candidate set and conduct post-pruning on it, when a new rule is discovered, it would check the previous patterns to see whether the new one is whether a closed rule or not. Therefore, the computing is very complex. Based on our experiment, we use the combined of them to generate the closed rules. Using Prune 1 can cut some non-closed rules, but the rules set are not all the closed rules. Then we use the definition to reduce the remainder non-closed rules.

Pruning 1. Given two paired rules: 1r  and 2r . If 1r  and 2r can be combined to a strong rule 3r , if support( 1r )=support( 3r ), then 1r must be not the closed rule.

Then we will illustrate the algorithm using the following example which can be found in Fig.2. The data is shown in Table 2. The support is set to be 3 and the confidence is 100%.

1. Delete the gene B which is not frequent. After this step, it can reduce the size of original dataset.

2. Generate all the paired rules which satisfy the thresholds.

We can get A=>C, C=>A, A=>D, D=>A, C=>D, D=>C, E=>A, E=>C, E=>D.

3. Forward and backward combined rules are obtained by combining the above paired rules. Take A=>D and C=>D for example. The consequent of both rules is same, and they satisfy the thresholds. So AC=>D is a strong association rule. Since the support of A=>D and AC=>D is same, so A=>D must not be closed rule. So is A=>D.

Then AC=>D and E=>D can be forward combined to ACE=>D. Other rules can be generated in same way, which is shown in Fig.2b.

4. Delete the non-closed rules based on definition. For     example, E=>AC and E=>ACD have the same support, and E=>ACD contains E=>AC, so E=>AC would be cut.

All the closed rules can be found in Fig.2c.

In comparison with previous association rules mining methods, our algorithm can show advantage in computing. In  order to improve the efficiency, many previous algorithms narrow the search space only to generate association rule with one antecedent. However, it may ignore some interesting information. For example, the expression of one gene is influenced by many other genes simultaneously, which can be discovered by SAW.

Figure 2. The process of SAW dealing with example dataset.

4. RESULTS AND DISCUSSION  4.1 Dataset To demonstrate the algorithm, we use the AGEMAP[11] gene expression database, which is a resource that catalogs changes in gene expression as a function of age in mice. The AGEMAP database includes expression changes for 8,932 genes in 16 tissues as a function of age. The mice were of ages 1, 6, 16, and 24 month, with ten mice per age cohort.

We only analyze the two tissues: Gonads and Hippocampus, try to find the relationship among age-regulated genes. If the expression value of a gene is changed much between adjacent ages in one sample, we consider the gene is expressed. In this experiment, we set the change ratio to be 0.5. The changed value is higher than 0.5, we claim the gene is up-expressed. If the value is lower than -0.5, the gene is down-expressed. Other else is non-expressed.

4.2 Comparison with Existed Approach In this section, we are going to compare FARMER to demonstrate the effectiveness of our method.

FARMER discovers upper bounds of interesting rule groups by performing depth-first row-wise enumeration instead of the usual column-wise approach. However, FARMER can not handle using activation and inhibition support to generate frequent items. So we use the traditional support to compare with our algorithm.

Fig.3 shows the processing time of both algorithms at different thresholds. The thresholds format means frontal number denotes the support, the later one is confidence. The experimental dataset is  the gene expression array of Gonads. From the Fig.3, we can see SAW is better than FARMER on each threshold. From our related experiment, the time consuming of FARMER is the process of generating association rules, while SAW can avoid the unnecessary computing.

Figure 3. Varying the thresholds  4.3 Biological Rule Analysis In this section, we report on how the biological significance of the rules mined by SAW is evaluated.

However, this is not an easy task, because the function of many mice genes is not confirmed by biological experiments. So most of our results may not be confirmed by known biological relationships, but it does not imply an incorrect relationship.

We run our algorithm in different mice aging period. Aging 1 means the gene expression value changed between 1 month and 6 month, aging 2 means the gene expression value changed between 6 month and 16 month, aging 3 is the one between 16 month and 24 month. Due to the situation of different aging gene expression dataset, the support is set to be     0.65, 0.4, and 0.5, respectively. The confidence is set to be 0.65, 0.7 and 0.6, respectively.

Since the space is limited, the rules whose length is larger than two would be list, which is shown in Table 5. Fig.4 is the gene-gene relation map based on strong association rules from Table 5. From Fig.4, we can see, BG076688 and AW553617 can be found all the aging period. In aging 1, BG076688,  BQ551730 and AW553617 are regulated each other.

This module may influence the aging significantly in this period. In aging 2, BG076688 are regulated with BQ551730 each other and can control AW553617 indirectly. In aging 3, BG076688, AW553617 and AA409219 are regulated each other. So BG076688 and AW553617 may be important age-regulated genes, which regulate different genes in different period.

Table 5?Association rules extracted using SAW     Figure 4. The gene-gene relation maps of different aging period.

5. CONCLUSIONS We develop a novel algorithm, SAW, to efficiently mine strong association rules from microarray dataset.

Instead of using frequent item to generate association rules, our method generates paired rules firstly, then using three combined strategy to get all the strong rules. It can avoid lots of unnecessary computing which traditional methods often encounter. The experiments show our method is more efficiently than other two previous algorithms. Finding the relationship among genes is not enough for discovering the secret of gene regulatory, how to find transcription factors is our future research.

ACKNOWLEDGEMENTS The work is supported by the National Natural Science Foundation of China under Grant No.60703105.

