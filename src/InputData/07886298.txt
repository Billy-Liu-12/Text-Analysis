A Fixture Design Retrieving Method Based on Constrained Maximum Common Subgraph

Abstract? Fixtures are widely used in almost any modern manufacturing. They add directly to the cost base, impact manufacturing firms? responsiveness and contribute to the overall product quality. Computer-aided intelligent fixture design was developed over the years to give a competitive edge to the manufacturing firms who are facing unprecedented competition and challenges. Among the techniques, case-based reasoning (CBR) method leverages previous design experience and emerged as one of the most popular methods. However, existing CBR methods are more focused on frame work building and less on detailed techniques on case retrieving, which is the central part of any CBR methods. This would inevitably impose negative impact on the overall efficiency of any CBR-based methods. In light of this, this paper presents a new case retrieving method based on a constrained common subgraph technique. This technique tracks down similar cases from a case library through comparing the maximal common subgraphs constrained by meeting fixturing functional requirement. Efficient and robust algorithms have been developed subsequently to implement this technique. The developed method can be highly effective for retrieving cases related to some manufacturing parts with complex geometry.

An illustrative example, combined with other key fixture design factors, demonstrates the effectiveness of the proposed method.

The presented method is intuitive and can be used in combination with existing CBR methods and well positioned for the upcoming ?big data? manufacturing.

Note to Practitioners?Providing capability for rapid respon- siveness, enhancement of product quality, and production at low cost are the three main objectives for the wide manufac- turing firms. Fixtures are widely used across manufacturing and assembly processes, and they are closely linked to all these three objectives. Today?s manufacturing enterprises face unprecedented challenges to control costs and to deal with an ever increasing number of product variants and smaller lot sizes.

All these facts raise high demands on computer-aided intelligent fixture design. Case-based reasoning (CBR) method, tackling new problem by using the solution of similar past problems or through revising the previous solution, gains popularity among researchers and practitioners. However, existing CBR methods put more focus on CBR framework design while the case retrieving, the key process of any CBR methods, still relies on some basic feature attributes comparison. This would inevitably reduce the overall effectiveness of the CBR method. In view of that, this paper proposed a graph method for case retrieval  Manuscript received July 25, 2016; accepted February 21, 2017. This paper was recommended for publication by Associate Editor L. Zhu and Editor M. Wang upon evaluation of the reviewers? comments. This work was supported by the National Natural Science Foundation of China under Grant 51105075 and Grant 51575107.

The authors are with the School of Mechanical Engineering, South- east University, Nanjing 211189, China (e-mail: chenluo@seu.edu.cn; 406227085@qq.com; chunsu@seu.edu.cn; nzh2003@seu.edu.cn).

Color versions of one or more of the figures in this paper are available online at http://ieeexplore.ieee.org.

based on comparing maximal common subgraphs (MCSs).

Dictated by fixture functional requirement, a constraint (to match machining features and/or other user defined requirement) has been imposed during the MCS search process. This constraint turns out to be quite useful in term of reducing search space and increasing computation efficiency. Robust algorithms have been subsequently developed to implement this technique. Graph is a powerful tool to analyze structured object, the proposed method can handle some bespoke and complex fixture design cases. The presented method is intuitive and flexible and can be integrated into existing CBR frameworks to improve the allover effectiveness of current intelligent fixture design.

Index Terms? Algorithm, case retrieving, case-based reasoning (CBR), constrained common subgraph, face adjacent graph (FAG), fixture design, graph matching, graph similarity, machin- ing features, maximal common subgraph (MCS), tolerance.



I. INTRODUCTION  F IXTURES are used to locate and hold a workpiece sothat the position and orientation of the workpiece can be controlled during the machining or other manufacturing operations. They are widely used in manufacturing industry which is currently experiencing rapid changes [1]. And today?s manufacturing firms are facing unprecedented challenges in a global environment that originates from abrupt changes in market demands, an ever increasing number of product variants and smaller lot sizes [2], [3]. The prevailing concept of individualization/customization manufacturing has pushed production toward the direction of uniqueness, complex, and variety. In spite of these dynamics, Koren [4] stated that every manufacturing enterprise and therefore every production system should pursue the following three main objectives:  1) providing capability for rapid responsiveness; 2) enhancement of product quality; 3) production at low cost.

Fixtures are linked to all these three main objectives and challenges. It contributes directly to the manufacturing cost base and is one of the bottlenecks in reducing cycle times, improving productivity, and enhancing product quality.

Recent research shows fixtures can account for up to 20% of the overall production costs [5] and about 40% rejected parts due to dimensional error was caused by poor fixture designs [6]. The growing complex manufacturing parts, more dynamic manufacturing processing and shrinking lead times in modern manufacturing all raise high demands and introduce complexities into the fixture design. Driven by these ever- changing and growing challenges, researchers have studied and proposed various methods in this area including genetic  See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

TABLE I  COMPARISON OF MAJOR INTELLIGENT FIXTURE DESIGN METHODS  algorithm (GA) [7]?[10], neural network [11], [12], rule-based reasoning (RBR) [13]?[16], machine learning [17], and finite element method (FEM) [18]?[20].

However, recently case-based reasoning (CBR) approach gains popularity [21]?[23] among researchers in the intelligent fixture design. This method tackles new problem by using the solution of similar past problems or through revising the previous solution [24]. CBR has been widely applied in many different fields, such as medical diagnosis, IT service management, and product design. In the field of fixture design, highly skilled designers can come up with valid designs in a time efficient way. So the previous experience is invaluable in dealing with this task. Hence, many researchers have been attracted to apply CBR into fixture design [25]?[27]. A brief comparison of CBR and other existing intelligent fixture design methods is provided in Table I.

In a computer-aided automated fixture design, standalone workpiece geometry might not enable the system to identify the right type of fixtures. It is shown in Fig. 1 that the two workpieces are identical and even the machining surfaces are similar apart from the holes? position, i.e., one sits in a cylinder and the other lies in the base. It is clear that the involved fixture designs are quite different in such occasion.

And this was due to the difference in terms of the relative position of the machined surfaces/features1 with respect to the workpiece. The tolerance associated with the machining surfaces is valuable information for obtaining the relevant datum surface. And the locating positions can then be obtained through analyzing the tolerance. Hence, the machining features  1Machining features here refer to form features which contain both shape information and parametric information of a region of interest. They are now ubiquitous in most current CAD system/software. Examples of form features are extruded boss, slots, loft, pocket, etc.

Fig. 1. Demonstration of fixturing of a workpiece for machining. (a) Fixture design case of machining the hole in the bracket. (b) Fixture design case of machining the holes in the base.

are important information in fixture design and can normally be fed from an existing system, i.e., CAD.

Case retrieving is central to CBR as this is the process to retrieve similar previous solutions for the existing prob- lem. Low retrieving quality leads to low efficiency of the method. This process in most existing CBR-based fixture design methods is broadly characterized as template retrieval, a method that ?linearly? comparing some attributes, such as workpiece geometry, machining features, and material fea- tures. For simple well-defined manufacturing parts, this is a useful and valid approach if assigned with right set of attributes. However, users will encounter problems when they apply this method to ordinary but irregular parts or some bespoke fixture design cases. It was highly likely that nothing or something irrelevant is being retrieved out. Clearly, a more solid case retrieving model is needed to handle this to avoid the whole design system being broken down and need immediate manual intervention.

In light of this, this paper presents a new case retrieving method based on a constrained common subgraph technique.

This technique retrieves similar cases from a library through comparing the maximum common subgraph constrained by matching machining features and/or other user-defined require- ment. A novel algorithm, tailed to the fixture design, has been subsequently developed to implement this technique. The algorithm can deal with multiple feature-pairing requirement efficiently and itself calls a backtrack algorithm. The imposed feature matching, dictated by fixture functional requirement, turns out to be very beneficial and it drastically reduces the search space and make the graph-based method more computationally efficient and can be applied in a relatively large case library. Armed with this robust algorithm, the developed graph-based method can handle some complex manufacturing parts, i.e., a part with a structure. An illustrative    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

LUO et al.: FIXTURE DESIGN RETRIEVING METHOD BASED ON CONSTRAINED MAXIMUM COMMON SUBGRAPH 3  example, combined with other key fixture design factors, demonstrates the effectiveness of the proposed method. The presented method is intuitive and flexible and can be applied in combination with existing CBR methods and well placed in the upcoming ?big data? manufacturing.

This paper is organized as follows. Section II presents related work in the CBR-based fixture design. Section III pro- vides some preliminaries on graph and subgraph. Section IV presents a constrained maximal common subgraph (MCS) method for fixture design case retrieval. Other key factors in fixture design are taken into account in Section V. An illus- trative case study has been presented in Section VI, and Section VII concludes the proposed methods and provides the direction for the future research.



II. RELATED WORK  Kumar and Nee [25] conducted the early research by intro- ducing CBR method into computer-aided intelligent fixture design [28]. They proposed an initial CBR framework for fixture design. The early idea to retrieve similar cases through indexing within a CBR framework for a modular fixture design was proposed in [26], which also gave the broad procedures for CBR-based fixture design:  1) case representation; 2) case retrieval; 3) case modification; 4) case storage.

As one aspect of CBR method, case representation is addressed in [27]. In which, case representation is described using extensible markup language (XML) format. And this paper proposed to represent XML-based fixture design cases using unified modeling language for developing CBR system.

This approach can facilitate information transmission through network and aid the case retrieval and case storage over the internet. Also, this case representation is in compatible with other CAD/CAM systems.

RBR method has the advantage of high degree of automa- tion and less data intensive. But it has the drawback of requiring expert guidance, weak leaning capacity, and unable to adapt to change. Therefore, Peng et al. [13] tried to combine RBR and CBR for machining fixture design in a virtual-reality-based integrated system. Hunter et al. [29] and Kakish et al. [30] tried to draw the benefits from knowledge- based reasoning (KBR) method into the fixture design. One such approach [31] takes CBR as its core and KBR as its assistant. Using design information, a designer can obtain a subset of plausible fixture designs from the KBR process.

Then, the designer can obtain a target fixture design through retrieving from this subset using other design information, and finally leverage some CBR adaptation techniques to obtain a satisfactory fixture design.

With a view to improve the reusability, Li et al. [32] pre- sented a case-based agile fixture design approach to enhance design efficiency. They focused on the gap between simi- lar fixture cases in place and the design case with actual condition so that the existing case can be revised to meet the actual requirement. In this area, an algorithm has been  proposed in [33] for variant fixture design. The proposed method combines template retrieval with a nearest neighbor algorithm to improve case retrieving efficiency. More recently, Zhou et al. [16] presented a CBR-based fixture design method tailored for aircraft parts in which previous fixture design cases and design rules are described in association with features.

This paper applied a deductive reasoning method by using rule matching to facilitate case retrieval and adaptation.

Boyle et al. [34], [36] and Rong et al. [35] contributed to the CBR framework building for fixture design by introducing two case libraries, where the first one is for concept design which includes the rules for modular fixture design, and the second one is mainly related with more granular design.

Many existing fixture design studies have focused on machining fixtures rather than welding fixtures. To address that, Wang and Rong [37] presented a CBR method specifi- cally tailored for welding fixture design. The proposed multi- level method provides a way for data abstraction and also a road map from concept to detailed welding fixture design.

It is worth noting that the aforementioned CBR methods are, by and large, applying template or equivalent case retrieval.

Under this retrieval method, fixture design cases are being searched and retrieved through comparing some attributes, and the retrieving process was like querying a database. However, this template retrieval could not capture the structure of the objects and this oversimplified method would inevitably cause low retrieving efficiency in many applications.

In this paper, we aim to present a new case retrieving method based on constrained common subgraph technique.

The significance of this research is threefold. First, it pio- neered and introduced the intuitive graph-based case retrieval method into CBR-based intelligent fixture design. Some graph softwares, e.g., UNI-GRAPHICS/AutoCAD, are now widely available and intensively used by many companies, engineers, and students, this opens up potentially wide application for the proposed graph method. Second, graph is a powerful tool for representing and analyzing structured object. The proposed method can handle fixture design case for some complex work- piece, i.e., a workpiece with a structure. Third, the imposed feature-node matching constraint, dictated by fixture functional requirement, combined with the newly devised robust algo- rithm drastically reduced the computational time which is one of the major bottlenecks of graph-based method. Thus the proposed method can be applied, relatively efficiently, to a rather large case library.

More background and details on computer-aided fixture design can be found in book [28] and in latest research review [21].



III. MOTIVATION AND BACKGROUND  Graphs can be used as a tool to compare similarity between structured objects. The graph technique for pattern recognition has been studied for many years now and has been applied to quite a few areas [38]?[42].

Let, G = (V , E) be a graph, where V = {1, . . . , n} is the set of nodes and E ? V ?V is the set of edges. Two nodes u, v ? V are said to be adjacent if they are connected by an edge.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

Fig. 2. FAG representation for a half-through hole workpiece. (a) 3-D geometric shape of a workpiece. (b) FAG representation.

There is a path from vertex u to v if there exists a sequence of vertices starting at u and ending at v, such that every vertex in the sequence is adjacent to the next vertex in the sequence.

A graph G is connected if there is a path (ignoring edge direction) between any two distinct vertices of G [43]. Our research will be focused on undirected graph and limited to common subgraphs that are connected because only connected common subgraphs are relevant in many applications [44], i.e., in the workpiece fixture design. Two graphs G1 and G2 are said to be isomorphic if there is a one-to-one correspondence between their vertex sets that preserves the adjacency of vertices. The MCS of two graphs G and H is the largest graph in terms of vertices that is isomorphic to a subgraph of G and H. More basics about graph can be found in [45]. One technique to implement graph comparison is face adjacency graph (FAG).

A. Face Adjacency Graph and Subgraph  FAG is a relational graph structure based on a boundary representation of solid objects. In this structure, object faces are represented as nodes, and the arcs or lines merged by faces are represented as edges [46]. The edges are labeled by 1 or 2, which relates to the convex and concave attributes, respectively. Many researchers contributed to feature recogni- tion based on FAG due to FAG reflecting the intrinsic hierarchy of geometric information. Hence by matching FAG, one can get the geometric and topological similarity of solid objects.

The FAG representation for a half-though hole workpiece is illustrated in Fig. 2. Eight object faces (A, B, C,?,H) are represented as eight nodes in the FAG in Fig. 2(b). Shaded node G represents the machining feature, and the related geometric dimension and tolerance are shown in Fig. 3.

Fig. 3. Geometric dimension and tolerance of the workpiece in Fig. 2(a).

TABLE II  ADJACENCY MATRIX OF THE GRAPH IN FIG. 2  B. Adjacency Matrix  An adjacency matrix is a means of representing which vertices (or nodes) of a graph are adjacent to which other vertices. Specifically, the adjacency matrix of a graph G on n vertices is the n ? n matrix where the nondiagonal entry ai j represents the adjacency relationship between vertex i and vertex j . ai j takes value of 0, 1, or 2 which corresponds to nonadjacency, convex adjacency, and concave adjacency, respectively. For real application, we only focus on graph which is undirected. As such, the related adjacency matrix is symmetric with zeros on its diagonal. Table II provides the adjacency matrix for the graph in Fig. 2.



IV. CONSTRAINED COMMON SUBGRAPH METHOD FOR CASE RETRIEVING  The most fundamental graph matching problem is (com- plete) graph isomorphism. However, this is less relevant in CBR-based method because exact matches are unlikely to occur. Instead identifying the largest common subgraph is the relevant graph matching measures to aid the case retrieval in the CBR method.

Almost, every fixture is designed to perform a certain type of function. And a fixture design is normally started by looking into these functional requirements in detail. In order to fulfill these practical functional requirements, it is essential for a designer to incorporate these requirements in the fixture design process.

Hence, in a CBR-based intelligent fixture design, the case retrieval should be guided and constrained by meeting these functional and some other user defined requirements.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

LUO et al.: FIXTURE DESIGN RETRIEVING METHOD BASED ON CONSTRAINED MAXIMUM COMMON SUBGRAPH 5  A. Constrained Common Subgraph Method for Case Retrieving  The machining features are important information providing a fixture designer the knowledge about the orientation of the workpiece, which should ensure the machining features are tool reachable and noninterference during the manufacturing process. It can be seen that the orientation of the workpiece in Fig. 1(a) is different from the one in Fig. 1(b). And the involved fixtures are quite different even for the same workpiece in this case. In order to track down similar plausible fixture design cases, it is sensible to set constraints to make machining feature match mandatory in the case retrieval process. In the graph-based case retrieval, it is essential to make machining feature nodes matching compulsory.

In a graph-based method, the similarity between two objects can be judged by the corresponding MCS. The proposed graph-based method is to retrieve similar cases through com- paring MCS constrained by machining feature and/or some other user-defined requirements. To get the MCS between two graphs, there are two widely used algorithms. One is backtrack algorithm [47] and its extended algorithms [48]. The other is maximal clique detection algorithm [49], [44], which transforms maximum common subgraph into maximal clique problem and searches for the maximal clique using a branch- and-bound algorithm. In the application to fixture design, the backtrack algorithms turns out to be the favorite as the clique algorithm is rather suitable for smaller size graphs involving limited vertices/edges.

Assume, graphs G?1 = [V ?1 , E?1 ] and G?2 = [V ?2 , E?2 ] are subgraphs of G1 = [V1, E1] and G2 = [V2, E2], respectively, and are of equal size n?. G?1 and G?2 are isomorphic to each other, i.e., they are common subgraphs. In simple words, all pairs of matching vertices in subgraphs G?1 and G?2 are connected by matching edges. In intelligent fixture design, the task here involves finding out the maximum common subgraph between two graphs constrained by specific requirements.

B. Algorithm for Constrained Maximal Common Subgraph Matching  The problem to determine the MCS between two or more graphs is known to be NP-complete [50], [51]. How- ever, due to the variety of potential applications, there has seen many algorithms been developed to tackle this.

In this paper, we provide a new algorithm to solve the maximum common subgraph problem tailored to fixture design. And the proposed algorithm itself calls a backtrack algorithm.

1) Single-Feature Constrained Fixture Design Case: The fixture design case involves manufacturing a single feature F , with the set of F labeled nodes P1 = {F1} in G1 and P2 = {F2} in G2. And the algorithm for this single feature maximum common subgraph is provided in Algorithm 1.

It begins with sets p1 and p2 in step 1. Then, it calls the backtrack (D) in step 4. The recursive backtrack algorithm attempts to tentatively pair vertices from G1 to vertices in G2 starting from the two vertices with one from p1 and the other from p2, respectively, in steps 3?8. Results are saved and  refined following each try in step 6. When vertex i from G1 is tentatively paired with vertex j in G2, any edge connected to vertex i can correspond only to edges which are connected to vertex j in G2. The situation that multiple vertices have the same feature F is addressed in steps 9 and 10. The output is provided in step 12.

Algorithm 1: Single Feature Maximum Common Subgraph Algorithm  Single_feature(p1, p2) 1. X:=p1,Y=p2 2. D:={X,Y} 3. nmax:=0 4. Backtrack(D) 5. Stop Backtrack(D) 1. if (nmax < |X|) 2. then nmax:= |X|  Xout=X,Yout=Y 3. if (Extendable(D)==true) 4. then Z:=Pickvertex(D) 5. for all (i,j)?Z  if (MappableVertex(i,j)==true) 6. then X:=X+{i} Y:=Y+{j}  D:=Refine(D) Backtrack(D)  7. else if(MappableVertex(i,j)==false) 8. then delete {i,j}  Backtrack(D) 9. if (Extendable(D)==false && |X| >1) 10. then X:=X-{Xi} Y:=Y-{Yj}  D:=Refine(D) Backtrack(D)  11.if (Extendable(D)==false && |X| =1) 12. thenOutput(Xout, Yout) 13.endif  2) Double-Feature Constrained Fixture Design Case: Here, the fixture is designed for manufacturing two distinct features F1 and F2, respectively, i.e., involving two functional require- ments. The set of nodes labeled with F1 or F2 are p1 and q1 in G1, and p2 and q2 in G2, respectively. A two-stage algorithm has been developed to find the maximum connected common graph for such case and is provided in Algorithm 2. In the first stage, the algorithm tries to identify the common subgraphs connected through a ?path? which links the two nodes labeled with the two distinct features F1 and F2, respectively. This is done in steps 3?5 which calls the connect_search (D) function.

In the second stage, the algorithm does the expansion for each labeled node pair using the single_feature in Algorithm 1 and this is done via steps 6?8.

Algorithm 2 is better to be illustrated through an example.

In Fig. 4, feature one (F1) is labeled in node 1 in G1 and node 2 in G2. Node 5 in G1 and node 6 in G2 are both labeled with feature two (F2). In the first stage of the algorithm, the function connect_search (D) aims to find out the feature connected subgraph D = {1, 5, 4; 2, 6, 5}.This is illustrated    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

Algorithm 2: Double-Feature Maximum Common Subgraph Algorithm  Double_feature(p1, p2, q1, q2) 1. X_1:= p1, X_2:= p2; Y_1:= q1, Y_2:= q2 2. D:={(X_1, Y_1), (X_2, Y_2)}/ D? :={ (X_1, Y_2), (X_2, Y_1)} 3. if (Connect_search(D)=false) 4. then there is no constrained common subgraph and search stops 5. if (Connect_search(D)=true) 6. then X= X_1?X_2,Y= Y_1?Y_2 7. for: all (Xi,Yi) ? D  //conduct single feature matching exercise 8. Single feature (Xi,Yi) //adding new extended node pair 9. done 10. Output(XOUT,YOUT) 11. endif Connect_search(D) 1. if (Connect_test({X_1, X_2},{Y_1, Y_2})==true) 2. then return true 3. else// (Connect_test({X_1, X_2},{Y_1, Y_2})==false) 4. if(Extendable(D)==true) //exists matchable node pair 5. then Z:=Pickvertex(D) //select the matched node 6. for all {i,j,s,t}?Z 7. if (MappableVertex(i,j,s,t)==true) 8. then X_1:=X_1+{i}, X_2:=X_2+{j} //extend  to new node Y_1:=Y_1+{s},Y_2:=Y_2+{t}  9. D:=Refine(D) //refine common subgraph 10. Connect_search(D) 11. else if(Extendable(D)==false) //no matchable node pair 12. then return false  in the top of Fig. 4(c) with X = {1, 5, 4} and Y = {2, 6, 5}.

In the second stage of Algorithm 2, it tries to expand on each node pair of D and this is carried out by the steps 5?9 in the main part of Algorithm 2. In Fig. 4, the potential expansion has been explored for the pair {1, 2}, {5, 6}, and {4, 5} and the final result, the maximum common subgraph consists of six nodes {1, 2, 3, 9, 5, 4} in G1 with the corresponding set {2, 4, 7, 8, 6, 5} in G2. The detail can be seen in the bottom of Fig. 4(c). Tables III and IV provide the two adjacency matrices in this example.

3) Multiple-Feature Constrained Fixture Design Case: It is not uncommon that there are situations that the fixture to be designed involving multiple functional requirements. In such occasion, the case retrieval in the CBR process would involve MCS searches constrained by matching three or more nodes between two graphs. Things get complex when applying the two-stage search strategy proposed in Algorithm 2. Two prominent issues needs to be dealt with here. One is that there are potentially many plausible paths in the first stage search. And the other is that the common nodes could occur in different search layers. To handle this, Algorithm 3 has been proposed. The proposed algorithm, in the first stage, starts to find the path for two distinct features node pairs and  Fig. 4. Illustration of the search procedure for double-machining feature fixture design case. (a) G1 with machining feature nodes 1 and 5. (b) G2 with machining feature nodes 2 and 6. (c) Illustration of the search procedure.

TABLE III  ADJACENCY MATRIX FOR GRAPH IN FIG. 4(a)  this is step 7 in connect_search (D) in Algorithm 3. Then, it extends to new nodes recursively to try to find the feature linked subgraph in steps 8?10 in connect_search (D). This implementation is illustrated in the top of Fig. 5(c).The feature connected subgraph D is {1, 5, 4, 9; 2, 6, 5, 8}. In the second stage of Algorithm 3, it explores all potential extension for each pair in matrix D. This is the steps 6?9 in the main part of Algorithm 3. The output from the algorithm is the maximum common subgraph, i.e., the set {1, 2, 3, 9, 5, 4; 2, 4, 7, 8, 6, 5}    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

LUO et al.: FIXTURE DESIGN RETRIEVING METHOD BASED ON CONSTRAINED MAXIMUM COMMON SUBGRAPH 7  TABLE IV  ADJACENCY MATRIX FOR GRAPH IN FIG. 4(b)  in the example in Fig. 5. And the details are illustrated in the bottom of Fig. 5(c).

C. Remarks on the Proposed Algorithm for Intelligent Fixture Design  The above developed algorithms are specifically tailored to the intelligent fixture design. Dictated by the fixture?s func- tional requirements, some constraints have been imposed to the retrieval process. It turns out this drastically reduced the search space and hence dramatically improves the implementation time efficiency, which is a major bottleneck for a graph- based method. Without this constraint, a typical backtrack algorithm [49] will iteratively try every node in the graphs for the pairing, and the worst calculation time is exponential. As such, the benefit of the proposed algorithm is more pronounced when the number of involved nodes increases.

For ease of illustration in the above examples, we did not distinguish the convex/concave adjacency, i.e., both the edges labeled 1 and 2 are viewed adjacency of two faces/nodes. In some real application, we can set constraint to demand convex adjacency on certain feature nodes to meet some practical needs. The above proposed algorithms can well incorporate these requirements.

D. Similarity Metric  There are two widely used approaches to measure the similarity between two graphs. One is graph edit distance method. Here, one introduces a set of edit operations, for example, the deletion, insertion, and substitution of nodes and edges, and defines the similarity of two graphs in terms of the shortest or least cost sequence of edit operations that transforms one graph into the other. The other approach is graph distance metric proposed in [52] and is more relevant to the fixture design.

The MCS calculated from the above algorithms provides good assessment on the topological and geometric similarity (SG ) between the design case and the cases in the case library.

To facilitate the comparison across cases, one can apply the following similarity metric [45]:  SG = |mcs(G1, G2)| max(|G1|, |G2|) (1)  Algorithm 3: Treble or More Features Constrained MCS Algorithm  N_feature(p1, p2?pn, q1, q2?qn) 1. X_1:= p1, X_2:= p2 ?X_n:= pn  Y_1:= q1, Y_2:= q2 ?Y_n:= qn 2. D:={(X_1, Y_1), (X_2, Y_2) ?(X_n, Y_n)}/ {(X_1,  Y_2), (X_2, Y_3)/?/(X_n, Y_1)/{ (X_1, Y_n), (X_2, Y_1) ?(X_n, Y_2)}  3. if (Connect_search(D)=false) 4. then search Stop 5. if(Connect_search(D)=true) 6. then X= X_1?X_2? . . .?X_n,Y= Y_1?Y_2? . . .?  Y_n 7. for: all (Xi,Yi) ? D  //do single feature extension node pairing 8. Single_feature(Xi,Yi) 9. done 10. Output(XOUT,YOUT) 11. endif Connect_search (D) 1. if(Connect_test({X_1,X_2,?,X_n}, {Y_1,Y_2,?,  Y_n})==true) 2. then return true 3. else// (Connect_test({X_1,X_2,?,X_n},{Y_1,Y_2,?,  Y_n})==false) 4. if(Extendable(D)==true) //exists matchable node pair 5. then Z:=Pickvertex(D) //select the matched node 6. for all {i,j,?,s;t,u,?,v}?Z 7. if (MappableVertex(i,j,t,u)==true) 8. then X_1:=X_1+{i} //extend to new node  X_2:=X_2+{j} ? ? ? X_n:=X_n+{s}  Y_1:=Y_1+{t} Y_2:=Y_2+{u}  ? ? ? Y_n:=Y_n+{v} 9. D:=Refine(D) //refine common subgraph 10. Connect_search(D) 11. else if(Extendable(D)==false) //no matchable node pair 12. then return false  where |mcs(G1, G2)| is the number of nodes in the MCS of G1 and G2. |G1| and |G2| are the remaining number of nodes, after removing machining feature labeled nodes, of G1 and G2, respectively.



V. OTHER INFORMATION REPRESENTATION  Fixture design is a complex procedure, which is asso- ciated not only with machining features but also with other features as well including material features, process- ing features, and functional features. As such, all these related features should be incorporated into the fixture design.

Workpiece material, processing, and functional features are typically represented in a numerical or textual form. And comparing this information of two parts means matching    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

Fig. 5. Illustration of the search procedure for the constraint of treble machining features. (a) G1 with feature nodes 1, 5, and 9. (b) G2 with feature nodes 2, 6, and 8. (c) Illustration of the search procedure.

TABLE V  SIMILARITY SCORE AMONG PROCESSING METHODS  symbolic classes without orders. The similarity can be defined as follows.

1) For textual information  Sim = Textnew Textold  = {  0, if Textnew ?= Textold 1, if Textnew = Textold. (2)  2) For numerical information  Sim = 1 ? |Numnew ? Numold||Numnew + Numold| (3) where Textnew and Numnew are the data correspond to the new case while Textold and Numold are the data correspond to the old case.

A. Workpiece Material in Fixture Design  Workpiece material contains important information for a fixture designer including the material type, hardness, and  TABLE VI  SIMILARITY SCORE AMONG HEAT TREAT PROCESS  Fig. 6. Fixture design workpiece G5 and its FAG. (a) Workpiece G5 with two holes in its base to be drilled. (b) FAG of workpiece G5.

heat resistance. The type of material usually provides infor- mation on the alloying elements, i.e., copper, aluminum, and nickel. The hardness of the workpiece directly impacts the selection of clampers, a key component of a fixture. Without careful consideration, even low clamp force can bring harm to some soft workpieces. Further, heat resistance would impose particular demands on the cutting tools and the machining procedures, and thus impact the choice of the corresponding fixtures. Therefore, workpiece material is an important input in the fixture design. The similarity score on workpiece material between two fixture design cases can be calculated as follows:  SM = Wtype M type new  M typeold + Whardness M  hardness new  Mhardnessold + Wthermal M  thermal new  M thermalold (4)  where Wtype, Whardness, and Wthermal are the weights assigned to material type, material hardness, and heat resistance, respec- tively, and sum to unity.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

LUO et al.: FIXTURE DESIGN RETRIEVING METHOD BASED ON CONSTRAINED MAXIMUM COMMON SUBGRAPH 9  TABLE VII  ADJACENCY MATRIX FOR GRAPH G5  Fig. 7. Four fixture design cases stored in the case library. (a) Case G1.

(b) Case G2. (c) Case G3. (d) Case G4.

B. Processing Feature in Fixture Design  Processing features mainly concerns the manufacturing process including processing procedures, manufacturing meth- ods, precision, and parts heat and surface treatment. Processing procedure considers manufacturing flows from raw material to the finished parts. This information would enable a fixture designer to draft a high-level fixture planning. However, the final fixture design still requests details on manufacturing method and processing requirements for each manufacturing step. For example, there are multiple methods to produce a through hole, i.e., drilling, boring, turning, or grinding.

Different manufacturing methods use different tools and tool path. In light of that, designers have to provide a proper fixture layout, decide the height of the fixtures, and make sure there is no interference during the machining process.

In addition, extra care has to be exercised when it comes to workpiece with special surface treatment, i.e., sand spray- ing, paint coating, and electroless plating. And some finely machined surfaces cannot be clamped or used as positioning bases for fixtures, and designers have to revise or amend the fixture to accommodate these situations. Furthermore, heat treatment can change the workpiece properties and impose specific requirements on fixture designing. From the above  Fig. 8. Fixture design workpiece G1 and its FAG. (a) 3-D geometric shape of a workpiece G1. (b) FAG of workpiece G1.

analysis, the processing feature has a substantial impact on fixture design and this has to be carefully factored into the fixture design.

One such similarity score accounting for different process- ing methods and different heat treatments is shown in Tables V and VI, respectively [53]. The overall similarity score for processing features can be calculated as follows:  SP = W p P procedure new  Pprocedureold + W m P  process?method new  Pprocess?methodold + W c P  precision new  Pprecisionold  + W h P heat?treat new  Pheat?treatold (5)  where W p , W m , W c , and W h are the weights assigned to procedures, process methods, precision, and heat treatment, respectively, and sum to unity.

C. Functional Feature in Fixture Design  In fixture design, some other factors also need to be taken into account and they are broadly classified as functional features. First, the function of the final products is very useful information. Two products sharing similar functions could indicate similar type of fixtures required. Second, the purpose of fixture designing is also very useful information. Differ- ent purpose dictates different fixture requirements. A fixture    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

Fig. 9. Workpiece G2 and G3 and their FAG. (a) 3-D geometric shape of the workpiece G2 and G3. (b) FAG representation of G2. (c) FAG representation of G3.

TABLE VIII  ADJACENCY MATRIX FOR GRAPH G1  designed for welding normally focuses on fixturing stability while a machining fixture can pay special attention to machin- ing precision. In addition, fixture designing needs to consider human factors and ergonomics, i.e., health, work efficiency, and safety. Further, other factors also have an impact on fixture design, i.e., cost, weight, and load time. We will store these  Fig. 10. Workpiece G4 and its FAG. (a) 3-D geometric shape of a workpiece G4. (b) FAG representation of Workpiece G4.

TABLE IX  ADJACENCY MATRIX FOR GRAPH G4  information as functional features. The similarity score due to functional features is, by and large, user determined. If only the role of the fixture and the purpose of the fixture design considered, the similarity score can be calculated as follows:  SF = wrole F role new  F roleold + (1 ? wrole) F  purpose new  Fpurposeold . (6)    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

LUO et al.: FIXTURE DESIGN RETRIEVING METHOD BASED ON CONSTRAINED MAXIMUM COMMON SUBGRAPH 11  TABLE X  ADJACENCY MATRIX FOR GRAPH G2  D. Overall Case Similarity in Fixture Design  In order to include other factors, the similarity metric of linear weighted sum is applied. And the overall similarity score S can be calculated as follows:  S = WG ? SG + WM ? SM + WP ? SP + WF ? SF (7) where WG , WM , WP , and WF are the weights assigned to geometric, material, processing, and functional features, respectively, and they sum to unity. Note that (7) is not mean to be exhaustive in terms of requirement/consideration. User can add or reduce factors to tailor to the real fixture design situation.



VI. CASE STUDY  The workpiece G5 to be fixtured is shown in Fig. 6(a), and its FAG is shown in Fig. 6(b). Table VII provides the corresponding adjacency matrix. The machining surfaces are surfaces 15 and 16 in the base. The material is normalized cast iron with hardness of HRC50 and heat resistance up to 1500 ?C. The major operation is to drill two holes 15 and 16 in Fig. 6 with precision of IT 12. The fixture to be designed should securely locate the workpiece and support the work during the drilling process.

There are four fixture design cases currently stored in the case library shown in Fig. 7. Their geometric models and FAGs are shown in Figs. 8?10. And the related adjacency matrices can be found in Tables VIII?X. Case G1?s material is iron casting and it received tempering treatment. Its hardness attaches HRC40 with heat resistance up to 1200 ?C. Hole 14 is the machined surface, which is coarsely drilled and the expected precision is IT12. The workpiece in case G3 has the same shape as the one in case G2. Its material is iron casting and hardness is HBS200 with heat resistance up to  1000 ?C. But the machined features in G2 are the four holes in the base and the precision is IT12. In G3, the machined feature is a hole in the cylinder manufactured through boring.

The expected precision is IT8. Case G4?s material is also cast iron. It undergone annealing and hardness is HRC20 with heat resistance up to 1000 ?C. And workpiece G4 went through rough surface grinding. The target precision is IT8.

Applying the algorithm developed in Section IV, the max- imum common subgraph with node correspondence between G5 and the four stored cases can be obtained. For example, the MCS between G1 and G5 is {14, 5, 10, 2, 4} in G1 and {15, 5, 6, 1, 3} or {16, 5, 6, 1, 3} in G5. This example shows the MCS is not necessary unique. Based on (1), the geometric similarity between G1 and G5 is 0.3125. Further, taking equal weighting, the similarity score for material, processing, and functional feature between G1 and G5 is obtained based on (4)?(6) to be 0.4167, 0.75, and 1, respectively. Assume, the user defined weights WG , WM , WP , and WF equal to 0.4, 0.15, 0.4, and 0.05, respectively, (7) shows the overall similarity score between G1 and G5 is  S = 0.4 ? 0.3125 + 0.15 ? 0.4167 + 0.4 ? 0.75 + 0.05 ? 1 = 0.5375.

Similarly, the similarity between G5 and the remaining cases can be calculated, and Table XI summarizes the results.

With the highest total similarity score in Table XI, case G2 is retrieved out as the most similar one with the target problem G5. And the new fixture design for G5 can benefit from G2. Although cases G2 and G3 have the identical geometric shape, fixture design for G3 is quite different from G2, which shows the importance of the topology in the fixture design. Case G1 and G4?s geometric shape is clearly different from G5, but their fixturing is similar and this is reflected in the similarity score.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

TABLE XI  SIMILARITY BETWEEN THE WORKPIECE (G5) AND G1?G4  Note for ease of illustrating the proposed method (and especially the algorithms), only four stored design cases (involving only ?20 nodes) were shown in this case study. So the practical usefulness of the proposed method is not demon- strated by these four overly simple design cases. However, in real application, users can browse through rather a large case library with tens of thousands of design cases (involving hundreds of nodes for certain design case) using the above presented algorithms.

Also, in practical application, it is possible and essential to link the nodes (in the graph) to a large manufacturing database.

So the key fixture related information (i.e., dimension, datum, locating/clamping, tolerance, and machining tools) on that node can be accessed when the algorithm ?read that node.? Under that situation, user can set specific requirement around this information (i.e., matching a specific machining tool). This can well be incorporated in the algorithms.

For some complex fixture designs, one can retrieve dozens instead of just one plausible case. Then, case adaptation and modification (together with modification cost assessment) can be carried out in this strictly small set.

Further, the graph method developed in this paper is user friendly and quite flexible. It can be used in combination with other existing CBR methods. For example, user can apply some high-level filtering, in the concept design stage proposed by other CBR methods, before embarking on the graph-based case retrieval.



VII. CONCLUSION  CBR is an attractive approach in computer-aided fixture design by leveraging previous successful design solutions to tackle the new problem. However, existing low case retrieving quality significantly limit its usefulness. In view of that, this paper pioneered the research to introduce a graph-based case retrieving method into the intelligent fixture design. The developed technique retrieves similar cases in a library through comparing the maximum common subgraph constrained by matching machining features and/or other user-defined require- ments. Graph is a useful tool for analyzing structured objects, the proposed method can be quite effective in handling some manufacturing parts which have complex geometry.

The imposed corresponding feature node matching con- straint, dictated by the fixture functional requirements, in com- bination with the newly devised robust algorithms drastically reduced the computation time. This ensures the proposed method to be implemented more efficiently and provides user the capability to handle relatively large case library.

It is worth mentioning that the proposed graph method is  flexible and can be used in combination with existing CBR methods [21]?[27] in which the datum, the manufacturing accuracy, fixture structure, and other operational properties (e.g., shorting operation time) were taken into account.

For easy of illustration of the proposed method, the adja- cency matrix was essentially simplified to be a (0, 1) matrix in all above examples. To show the potential of the proposed method, ?2? was introduced into the matrix with ?1? being convex adjacent and ?2? being concave adjacent. Actually, there is no limit on how many categories can be added to the adjacency matrix as long as they were assigned and applied consistently across the whole case library. This obvi- ously would provide tangible benefits to users in practical application.

It can be observed that the set of nodes {1, 2, 3, 4, 5, 6} in Fig. 9(b) is similar to {1, 2, 3, 4, 5, 6} in Fig. 9(c). This reflects the symmetric nature of the workpieces. The MCS calculation can be further improved if the symmetry can be identified before applying the search algorithm. Our future research will be to devise a standalone subalgorithm to identify the symmetry, if appeared, before running the above proposed algorithms. This would further enhance the developed graph- based method.

The proposed CBR technique provides the possibility to avoid time-consuming and expensive experiments and is able to propose a good starting point for the detailed design (even in current status of fragmented systems). In the undergoing and upcoming ?big data? manufacturing era [54], [55], the full integration of IT, manufacturing, and operational systems provides a means to put the abundance data into effective use.

Various fixture related details and requirements can be finely defined, recorded, stored, and extracted/identified. With this big data (which expand the operational space for algorithms) support, the potential of the proposed method can be realized, and it can play a more active and prominent role in the future intelligent fixture design.

APPENDIX I  The adjacency matrix for graph G5, G1, and G4 in the case study is provided in Tables VII?IX, respectively. Case G2 and case G3 share the same adjacency matrix with the only difference lies in the different machining nodes. As such, only adjacency matrix for graph G2 is provided in Table X.

