A Novel Mining Algorithm for Negative Association Rules

Abstract   Negative association rules mining considers not only  existed items but absent items in databases as well. A concept of complete negative association rules is present in this paper. A tree-based algorithm named Free-PNP is presented by which negative frequent patterns can be found from databases and complete negative association can be then obtained.

Experiments demonstrated its effectiveness and efficiency.

1. Introduction   There has been great interest in association rules mining. Traditional association rules mining researches on an association of form A? B, which is concerned with positive associations among items in the database.

In some cases, however, negative association rules among itemsets in the database is important as well.

For example, if people who buy beer rarely buy milk, the milk should be kept far away from the shelves of beer.

There are many topics about negative associations mining on the study recently[2][3]. Literature [4] computers the support and the confidence of the negative association rules via information in positive association rules. Literature [5] search k + 1 itemset via k itemset in an iterative approach of level-wise search similar to Apriori. Literature [6] analyzes the explosions of frequent itemsets in negative associations mining. The negative associations gained from existed algorithms, however, remain to be uncertain and redundant. For example, there is a negative association rule A? ? B, and A = { i1, i2}, B = { i3, i4}. As both { ?  i3, i4} and { i3, ?  i4} are negative itemsets, it is impossible to know whether i3 or i4 is associated with A. Furthermore, if the amount of items in databases is very large, the amount of negative association rules is  extremely large as well. The result will be difficult to be analyze. This paper presents an new algorithm based on tree, named Free-PNP (Frequent Positive- Negative itemset Pairs), based on which complete negative itemsets can be mined.

2. Concept   Let I = { 1 2, ,..., ni i i } be a set of items. An itemset A is a nonempty subset of I. A transaction T is a tuple <tid, A>, where tid is a transaction identifier and A is an itemset. A transaction database TDB is a set of transactions. Transaction <tid, X> contains A if and only if A ? X.

An association rule is a formula of formed A? B, where A ? I, B ? I, and A ? B = ? . A ? B has a support s, which is the probably of transactions in TDB which contain A ? B. This is taken to be the probability, P(A? B).

Definition 1. Item ik?I and transaction T ? I. If ik?T, it is said that transaction T contains ? ik, and ? ik is called a negative item of ik. Itemset A = { 1 2 m, ,...,i i i }.

Replacing some items of A's with their negative items, we generate ? A, which is called a negative itemset of A's. For example, if A = { 1 2 3 4, , ,i i i i }, then both { 1 2 3 4, , ,i i i i? }, and { 1 2 3 4, , ,i i i i? ? } are negative itemsets of A's. If ? A? contains only negative items of the items in A, ? A? is called a complete negative itemset of A's.

Definition 2. A negative association rule is a formula of formed A? ? B. A ? I, B ? I and A? B = ? . The formula A ? ? B? is called complete negative association rule. A? ? B? has a support s, which is the probably of transactions in TDB that contain A ? ? B?. This is taken to be the probability, P(A ? ? B?).

A pattern A is an itemset, whose support is the amount of transaction which contains A in the  Global Congress on Intelligent Systems  DOI 10.1109/GCIS.2009.118     database. A is a frequent pattern if A's support is no less than a predefined minimum support threshold min_support.

Definition 3. There are itemsets X and Y. A tuple <X, Y> is a positive-negative itemset pair ("PNP" for short in the later) contained in transaction T, if (1) X ? T, and (2) Y ? T-X. The first element of the tuple is called positive phase and the second element is called negative phase. The amount of transaction containing PNP <X, Y> in the database is called the support of this PNP. A PNP  is a frequent pattern, if its support is no less than a predefined minimum support threshold min_support.

We also find that we will get a large sum if we intend to find all of the frequent PNPs. For example, there are only two transactions in the database: { 1 2 20, ,...,I I I } and { 1 2 10, ,...,I I I }, and min_support = 1. We will find a closed frequent PNP {< 1 2 10, ,...,I I I ,  11 12 20, ,...,I I I >: 1}, which will generate about 220 frequent PNPs which are too large to be enumerated.

Definition 4. A PNP <X, Y> is closed if there exists no PNP <X?, Y?> such that (1) X ? X? ? Y ? Y? or X ? X? ? Y ? Y?, and (2) ? transaction T, X ? T ? Y ? T ? X? ? T ? Y? ? T. <X, Y> is also called frequent closed positive-negative itemset pair (i.e.

frequent closed PNP) if it is frequent. We can obtain all the information we need if we find all of the frequent closed PNPs.

3. Algorithm Free-PNP  3.1 Description   Two definitions will be given before the algorithm.

Definition 5. Define a partial order, I? : Given two arbitrary itemsets X  =  { 1 2, ,...,X X XmI I I } and Y  = { 1 2, ,...,Y Y YnI I I }, if (1) 1XI  is in front of 1YI  in lexicographic order, or (2) 1 1X YI I=  ? 2 2X YI I= ? ? ? ( 1) ( 1)X k Y kI I? ?= ? XkI  is in front of YkI  in lexicographic order, or (3) 1 1X YI I= ? 2 2X YI I= ? ? ? Xn YnI I= ? m>n, then itemset X I?  item Y, and itemset X is on the left of itemset Y.

Definition 6. Define a partial order p?  of item pairs: For item pairs 1 1,X Y< >  and 2 2,X Y< > , if (1)  1 2X X< , or (2) 1 2X X=  ? 1 2Y Y< , then 1 1,X Y< > p? 2 2,X Y< > , and 1 1,X Y< >  is on the  left of 2 2,X Y< >  in lexicographic order p? .

The algorithm store the mined information using a  data structure, PN-tree. A three-steps process is followed.

(1) Scan the database to record each item's count.

(2) Construct the tree: First, create the root of the tree, labeled with "null". Scan database TDB. The items in each transaction are processed in lexicographic order, and a branch is created for each transaction. Each node in the tree is denoted <I, m>, where I is the item contained in this node and m is the count of the transaction which consists of items from the root to this node. During this step, children of each node are arranged from left to right in lexicographic order.

When a new node is created, the count of it is initialed to 0. After a transaction is inserted into the tree, the count of an item which is arranged at the end of the transaction is accumulated 1.

(3) Mining the PN-tree: An index table Closed_PN is used to store all of the current mined closed PNPs.

Node_count is used to denote how many nodes intersect each other to generate the PNP in this row.

Traversal the tree from the lower left-hand corner in the post-order. If the count of the current node is not 0, then generate the longest PNP according to this node.

After pruned, it is then put into the row node_count = 1 in closed_PN, and intersect it with each PNP in closed_PN in descending order of node_count. The pruning method is as follows. Remove the items the count of which is less than the minimum support from the positive phase in this itemset. Remove the items the count of which is larger than the count of transactions subtracted the minimum support. Define an intersection operation, ?P , between two PNPs as follows: <X1, Y1> and <X2, Y2> are PNPs, then <X1, Y1>?P <X2, Y2> = <X?, Y?>, where X? = X1? X2 and Y? = Y1 ? Y2. Put the PNPs generated by intersecting with the elements in the row node_count = k-1 into the row node_count = k-1. If the same PNP has already existed, then add 1 to its count. If this node generates the same PNP after intersecting with the row node_count = t(t>k-1), then this PNP will not be put in.

Table 1. A transaction database TDB TID Items T1 b, c T2 a, b, c T3 a, b T4 b, d  Example 1. There are some transactions in Table 1.

The minimum support min_sup = 2.

Table 2. Support count Item Support count  b 4 a 2 c 2 d 1     Scan the database once, and the count of each item in transaction is generated. These items are listed in Table 2.

Construct the tree as follows: First, create the root of the tree, labeled with "null". Scan the database D.

The scan of the first transaction T1(b, c) leads to the construction of the first branch of the tree with two nodes, <b, 0>, and <c, 1>, where b is linked as a child to the root, and c is linked to b, and the count of the node c is set to 1. Scan the second transaction T2(a, b, c), and construct the second branch of the tree with three nodes, <a, 0>, <b, 0>, <c, 1>. A is linked to the root. As a is in front of b in lexicographic order, a is put on the left of b. Scan the third transaction T3(a, b), and construct the third branch of the tree with two nodes, <a, 0>, <b, 1>. As the second branch has already had the prefix <a, 0>, <b, 0>, combine it with the third node and add 1 to node b, then generate a new branch <a, 0>, <b, 1>, <c, 1>. Scan other transactions and the PN-tree is constructed as Figure 1.

Figure 1. PN-tree Mining the tree as follows: The longest PNP generated by the first node, c, and  its prefix is {<abc, d>: 1}. Put it into the row node_count = 1.

The second node, c, generates PNP {<ab, cd>: 1}.

Put it into the row node_count = 1, and let it intersect with existed PNP, {<abc, d>: 1}, and we get a new PNP, {<ab, d>: 2}, which has a count of two. Put it into the row node_count = 2.

The counting of the third node, a, is 0. So it is ignored.

The fourth node, c, generates PNP {<bc, ad>: 1}.

Put it into the row node_count = 1. Let it intersect with existed PNP in the row node_count = 2 and none of new PNP is generated. Let it intersect with existed PNP in the row node_count = 1 and generates {<bc, d>: 2} and {<b, a>: 2}. Put them into the row node_count = 2.

Other nodes are mined in this way and the result is listed in Table 3. As min_sup = 2, the closed PNPs in the row node_count = 2 and node_count = 3, is what we want.

Table 3. Closed_PN Node_count Closed_node  1 {<abc, d>: 1}, {<ab, cd>: 1}, {<bc, ad>: 1}, {<bd, ac>: 1}  2 {<ac, d>: 2}, {<ab, d>: 2}, {<bc, d>: 2}  3 {<c, d>: 3}  3.2 The Algorithm Procedure of Free-PNP  Algorithm 1: Free-PNP Input: Transaction database TDB, and the minimum support min_sup. IA = { 1 2, ,..., nI I I }, is the itemset contained in TDB.

Output: Complete set of the frequent closed PNPs, closed_frequent_PN.

Method: (1) Constructing the PN-tree.

procedure create_tree (TDB, min_sup)  Create the root of the PN-tree, null; for each Ti in TDB{  insert_tree (P0 , null) // P0 is the first item of Ti, recursive call the procedure insert_tree to insert  Ti into TDB  } return;   procedure insert_tree (Pj , N) if (N has a child NC where NC .itemname = Pj .itemname) {  insert_tree (Pj+1 , NC); } else {  new NC ; //create a new node NC NC .itemname = P j.itemname; NC .itemcount = 0;   // the count of this node is  initialed to zero Link NC to N as a child of N, and keep N's children alphabetical order;  } if (Pj is the last item of the current transaction) {  NC.itemcount ++; } else{  insert_tree (Pj+1, NC ); } return;   (2)PN-tree is mined as follows:     Create an array IN to store itemset consisting of nodes from root to the current node, and IN is initialed to ? ; Create an index table closed_frequent_PN to store all the generated closed PNPs, and closed_ frequent_ PN is also initialed to ? ; Then call the procedure mining_closed_PN as follow: procedure mining_closed_PN (N, closed_ frequent_ PN, IN )  Insert N's items into IN ; if (N is not a leaf node) {  Insert NP's far left child node, NL, into IN ; // NP is N's parent node mining_closed_PN (NL, closed_ frequent_PN, IN  ); } else {  Generate the longest PNPs, <IN, IA - IN>, according to IN, and put it into the row node_count = 1 in closed_frequent_PN after pruning it; for i = the largest value in node_count to 1 {  Intersect <IN, IA - IN> with each PNP in row node_count = i in closed_frequent_PN, and the result is put into closed_frequent_PN. If this result has already existed in closed_frequent_PN, it will not be inserted;  } if (N is the far right node in its parent node, NP) {  Remove N from IN ; mining_closed_PN (NP, closed_ frequent_ PN,  IN ); } else {  Insert N's right node, NR, into IN ; mining_closed_PN (NR , closed_ frequent_ PN,  IN ); }  }            1 2 3 4 5  Minimum support(%)  E x c u t i o n  t i m e ( s )  MPNAR  Free-PNP    Figure 2. Performance on mushroom   4 Performance   Experiments demonstrated this algorithm's  efficiency. All the experiments were conducted on a P4 2.49GHz PC with 512MB of memory, running Windows XP. The mushroom dataset which contains 8,124 data is used for the experiments. Comparing this algorithm with MPNAR[6], the result is displayed in figure 2. The experiments demonstrated that this algorithm had better running time efficiency.

5 Conclusion   This paper proposed a definition of negative association rules and an algorithm, Free-PNP, based on this definition to mine negative frequent patterns in databases. The algorithm also exist faults. If the count of data is too large, a great deal of space will be cost.

We will focus on this in the future.

6 References  [1] R. Agrawal, and R. Srikant, ?Fast Algorithms for Mining Association Rules?, Proc. 1994 Int?l Conf. Very Large Data Bases(VLDB ?94), [S.l.]:[s.n] 1994, pp. 487-499.

[2] Wu X. D., Zhang C. Q., and Zhang S. C., ?Mining both positive and negative association rules?, Proceedings of the 2002), Morgan Kaufmann Publishers, San Francisco, 2002, pp. 658-665.

[3] A. Savasere, E. Omiecinski, and S. Navathe, ?Mining for strong negative associations in a large database of customer transactions?, Proceedings of the IEEE 14th Int'l Conference on Data Engineering, IEEE-CS, Los Angeles, 1998, pp. 494- 502.

[4] Dong X. J., Wang S. J., et. al, ?Study on Negative Association Rules?, Transactions of Beijing Institute of Technology, Beijing, 2004, 24(11), pp.978-981.

[5] Zhu Y. Q., and Yang H. B., ?Data Mining Algorithm Based on Negative Association Rules?, Journal of Applied Sciences, 2006, 24(4), pp.38 -386.

[6] Ma Z. X., Lu Y. C., ?Exploding number of frequent itemsets in the mining of negative association rules?, J Tsinghua Univ (Sci & Tech), 2007, 47(7), pp.1212-1215.

[7] Han. J. W., Pei. J., and Yin. Y., ?Mining Frequent Patterns without Candidate Generation?, Processing of the ACM SIGMOD Conference 2000 (SIGMOD ?00), May 2000, pp.1?12.

