Using Unknowns for Hiding Sensitive Predictive Association Rules

Abstract   Privacy-preserving data mining [24] is a novel research direction in data mining and statistical databases, where data mining algorithms are analyzed for the side effects they incur in data privacy.  There have been two types of privacy proposed concerning data mining.  The first type of privacy, called output privacy, is that the data is altered so that the mining result will preserve certain privacy.  The second type of privacy, called input privacy, is that the data is manipulated so that the mining result is not affected or minimally affected.

In output privacy, given specific rules to be hidden, many data altering techniques for hiding association, classification and clustering rules have been proposed.

However, to specify hidden rules, entire data mining process needs to be executed.  For some applications, we are only interested in hiding certain sensitive predictive rules that contain given items.  A predictive association rule set is the smallest rule set that makes the same prediction as the whole association rule set by confidence priority [14].  In this work, we assume that only sensitive items are given and propose two algorithms, ISL (Increase Support of LHS) and DSR (Decrease Support of RHS), to replace data by unknowns in database so that sensitive predicative rules containing specified items on the left hand side of rule cannot be inferred through association rule mining.  Examples illustrating the proposed algorithms are given.  The characteristics of the algorithms are analyzed.

The efficiency of the proposed approach is further compared with Saygin etc [22] approach.  It is observed that our approach required less number of databases scanning and prune more number of hidden rules.

However, our approach must hide all rules containing the hidden items on the left hand side, where Saygin etc approach can hide any specific rule.

1. Introduction The concept of privacy preserving data mining has been  recently proposed in response to the concerns of preserving personal information from data mining algorithms [3,4,5,15,16,24].  There have been two types of privacy concerning data mining.  The first type of privacy is that the data is altered so that the mining result will preserve certain privacy.  Many techniques have been proposed for this type of output privacy [1,6,7,8,9,17-20,22,25].  For example,  perturbation, blocking, aggregation or merging, swapping, and sampling are some alternation methods that have recently been proposed.  The second type of privacy is that the data is manipulated so that the mining result is not affected or minimally affected [10,11,12,13,23].  For example, the cryptography-based techniques like secure multiparty computation allow users access to only a subset of data while global data mining results can still be discovered.   The reconstruction-based technique where the original distribution of the data can be reconstructed from the randomized data is another method for this type of input privacy.

In output privacy, given specific rules to be hidden, many data altering techniques for hiding association, classification and clustering rules have been proposed.

However, to specify hidden rules, entire data mining process needs to be executed.  For some applications, we are only interested in hiding certain sensitive predicative rules that contain given items.  A predictive association rule set is the smallest rule set that makes the same prediction as the whole association rule set by confidence priority.  A sensitive predictive rule is a rule in the predictive association rule set that contains sensitive items on the left hand side of the rule.  In this work, we assume that only sensitive items are given and propose two algorithms to modify data in database so that sensitive predicative rules containing specified items on the left hand side of rule cannot be inferred through association rule mining.  The proposed algorithms are based on modifying or perturbing the database transactions so that the confidence of the association rules can be reduced.  Examples demonstrating the proposed algorithms are shown.  The characteristics of the proposed algorithms are analyzed.  The efficiency of the proposed approach is further compared with Saygin etc approach.  It is observed that our approach required less number of databases scanning and prune more number of hidden rules.  However, our approach must hide all rules containing the hidden items on the left hand side, where Saygin etc approach can hide any specific rule.

The rest of the paper is organized as follows.  Section 2 presents the statement of the problem and the notation used in the paper.  Section 3 presents the proposed algorithms for hiding sensitive predictive association rules that contain the specified items. Section 4 shows some examples of the proposed algorithms.  Section 5 analyses the characteristics of proposed algorithms and further compare with Saygin etc approach.  Concluding remarks and future works are described in section 6.

2. Problem Statement 2.1. Predicative Association Rules   The problem of mining association rules was introduced in [2]. Let }   ,,  , { 21 miiiI L=  be a set of literals, called items.  Given a set of transactions D, where each transaction T  is a set of items such that ,IT ?  an association rule is an expression YX ?  where ,IX ?  ,IY ?  and .?=?YX  The X and Y  are called respectively the body (left hand side) and head (right hand side) of the rule.  An example of such a rule is that 90% of customers buy hamburgers also buy Coke.  The 90% here is called the confidence of the rule, which means that 90% of transaction that contains X also contains Y.  The confidence  is calculated as ||  || X  YX ? .  The support of the rule is the  percentage of transactions that contain both X and Y, which  is calculated as N  YX || ? , where N is the number of  transactions in D.  In other words, the confidence of a rule measures the degree of the correlation between itemsets, while the support of a rule measures the significance of the correlation between itemsets.  The problem of mining association rules is to find all rules that are greater than the user-specified Minimum Support Threshold (MST) and Minimum Confidence Threshold (MCT).

As an example, for the given database in Table 1, a MST of 60% and a MCT of 70%, four association rules can be found as follows: A=>B (60%, 75%), B=>A (60%, 75%), A=>D (60%, 75%), D=>A (60%, 100%).

Table 1: Database D  TID Items ABCD  T1 1101 T2 0100 T3 1011 T4 1100 T5 1101    However, mining association rules usually generates a large number of rules, most of which are unnecessary for the purpose of prediction.  For example, given itemset for prediction P = {A}, the rule set that contains only two rules A=>B (60%, 75%), A=>D (60%, 75%), will generate the same predicted itemset Q = {B, D} as the four association rules found from Table 1.  The rule set {A=>B, A=>D} is called predictive rule set of P.  Informally, a predictive association rule set (or informative rule set) [14] can be defined as the smallest rule set that makes the same prediction as the association rule set by confidence priority.

2.2. Problem Description   The objective of data mining is to extract hidden or potentially unknown interesting rules or patterns from databases.  However, the objective of privacy preserving data mining is to hide certain sensitive information so that they cannot be discovered through data mining techniques [1,4-12,16].  In this work, we assume that only sensitive items are given and propose two algorithms to replace data by unknowns in database so that sensitive predictive association rules cannot be inferred through association rule mining.  More specifically, given a transaction database D, a minimum support threshold, a minimum confidence threshold and a set of sensitive items X, the objective is to modify the database D such that no predictive association rules containing X on the left hand side will be discovered.

The approach of hiding sensitive association rules by replacing data items by unknowns was introduced in Saygin etc [22].  As unknowns are involved in the database, the definition of support must be modified.  Instead of a single value for the support of an itemset A, there is a support interval, [minsup(A), maxsup(A)] where the actual support of itemset A can be any value between minsup(A) and maxsup(A).  The minsup(A) is the percentage of the transactions that contain 1s for all the items in A and maxsup(A) is the percentage of the transactions that contain either 1 or ? for all the items in A.  Similarly, the confidence formula is also modified since it will also have a degree of uncertainty.  Instead of a single value for the confidence of a rule A=>B, there is a confidence interval [minconf(A=>B), maxconf(A=>B)], where the actual confidence of a rule A=>B can be any value between minconf(A=>B) and maxconf(A=>B).  Given the minimum and maximum support values of itemsets A ? B and A, the minimum confidence value for a rule A=>B is, minconf(A=>B) = minsup(A?B)/maxsup(A), and the maximum confidence value is maxconf(A=>B) = maxsup(A? B)/minsup(A).

As an example, for the given database in Table 1, a MST of 60%, a MCT of 70%, and a hidden item X = {B}, if transaction T4 is modified as ?100, then the following rule that contain item B on the left hand side will be hidden: B=>A ([40%,60%], [50%,75%]), and the rule A=>B ([40%,60%], [50%,100%]) will be lost due to side effect.

The following notation will be used in the paper. Each database transaction has three elements: T=<TID, list_of_elements, size>.  The TID is the unique identifier of the transaction T and list_of_elements is a list of all items in the database.  However, each element has value 1 if the corresponding item is supported by the transaction and 0 otherwise. Size means the number of elements in the list_of_elements having value 1.  For example, if I = {A,B,C}, a transaction that has the items {A, C} will be represented as t = <T1,101,2>.  In addition, a transaction t supports an itemset I when the elements of t.list_of_elements corresponding to items of I are all set to 1.  A transaction t partially supports an itemset I when the       elements are not all set to 1.  For example, if I = {A,B,C} = [111], p = <T1,[111],3>, and q = <T2,[001],1>, then we would say that p supports I and q partially supports I.

3. Proposed Algorithms In order to hide an association rule, we can either  decrease its support or its confidence to be smaller than pre-specified minimum support and minimum confidence thresholds.  To decrease the confidence of a rule X=>Y, we can either (1) increase the support of X, i.e., the left hand side of the rule, but not support of X ? Y, or (2) decrease the support of the itemset X ? Y.  For the second case, if we only decrease the support of Y, the right hand side of the rule, it would reduce the confidence faster than simply reducing the support of X ? Y.  To decrease support of an item, we will modify one item at a time in a selected transaction by changing from 1 to ? and from 0 to ? to increase the support.

Based on these two strategies, we propose two data- mining algorithms for hiding sensitive predictive association rules, namely Increase Support of LHS (ISL) and Decrease Support of RHS (DSR).  The first algorithm tries to increase the support of left hand side of the rule.

The second algorithm tries to decrease the support of the right hand side of the rule.  The details of the two algorithms are described as follow.

Algorithm ISL Input: (1) a source database D, (2) MST (Minimum Support Threshold), (3) MCT (Minimum Confidence Threshold), (4) a set of hidden items X Output: a transformed database D?, where rules  containing X on LHS will be hidden  1. Find large 1-item sets from D; 2. For each hidden item x?  X 3.  If x is not a large 1-itemset, then X := X -{x} ; 4. If H is empty, then EXIT;// no AR contains X in LHS 5. Find large 2-itemsets from D; 6. For each x ?  X { 7.    For each large 2-itemset containing x { 8.       Compute confidence of rule U, where U is a rule like  x?  h ; 9.       If minConf(U) < MCT, then 10. Go to next large 2-itemset; 11. Else {  //Increase Support of LHS 12.             Find TL = { t in D | t does not support U};  // xh is ?00? 13.         Sort TL in ascending order by the number of Items in t; 14.         While { minConf(U) > MCT and TL is not empty) { 15.             Choose the first transaction t from TL; 16.             Place a ? mark for the item in LHS(U); // ??0? 17.             Compute supports and confidences that  contain item with ? mark; 18.   Remove and save the first transaction t  from TL; 19. };  // end While 20.  }; // end If 21. If  TL is empty, then { 22. Can not hide x?  h; 23. Restore D; 24. UPDATE LARGE-2 ITEMSET AND Go to  next large-2 itemset; 25. } // end if TL is empty 26. } //end of for each large 2-itemset 27. Remove x from X; 28. } // end of for each x 29. Output updated D, as the transformed D?;  Algorithm DSR Input: (1) a source database D, (2) MST (Minimum Support Threshold), (3) MCT (Minimum Confidence Threshold), (4) a set of hidden items X Output: a transformed database D?, where rules  containing X on LHS will be hidden  1. Find large 1-item sets from D; 2. For each hidden item x?  X 3.  If x is not a large 1-itemset, then X := X -{x} ; 4. If H is empty, then EXIT;// no AR contains X in LHS 5. Find large 2-itemsets from D; 6. For each x ?  X { 7.    For each large 2-itemset containing x { 8. Compute confidence of rule U, where U is a rule like x?  h ; 9.       If minConf(U) < MCT, then 10. Go to next large 2-itemset ; 11. Else {  //Decrease Support of RHS 12. Find TR = { t in D | t fully support U}; // xh is ?11? 13. Sort TR in ascending order by the number of Items; 14. While { minConf(U) > MCT and TR is not empty) { 15. Choose the first transaction t from TR; 16. Place a ? mark for the item in RHS(U); //  xh is ?1?? 17. Compute supports and confidences that contain item with ? mark; 18. Remove and save the first transaction t from TR; 19. };  // end While 20.  }; // end if 21. If  TR is empty, then { 22. Can not hide x?  h; 23. Restore D; 24. UPDATE LARGE-2 ITEMSET AND Go to next large-2 itemset; 25. } // end if TR is empty       26. } //end of for each large 2-itemset 27. Remove x from X; 28. } // end of for each x 29. Output updated D, as the transformed D?;  4. Examples  This section shows four examples for demonstrating the two proposed algorithms using unknowns in hiding sensitive predictive association rules in the association rule mining.

For the given database in Table 1, a MST of 60% and a MCT of 70%, the first two examples try to hide the sensitive rules using the ISL algorithm.  The difference of the two examples is that the order of hiding item is different.

The first example hides item B and then item D.  The second example hides item D and then item B.  The result is given in section 4.1.

The third and fourth examples hide the sensitive predictive association rules using DSR algorithm.  The difference is also the order of items to be hidden.  The result is given in section 4.2.

Table 2: Database D using the specified notation TID Items Size T1 1101 3 T2 0100 1 T3 1011 3 T4 1100 2 T5 1101 3    4.1. Examples Running ISL Algorithm  Example 1 Assuming that the MST = 60% and MCT = 70%, the result of hiding item B and then item D using ISL algorithm is as follows.  To hide item B, i.e. the rule B=>A (60%, 75%), no transaction can be found for TL.  Therefore, B=>A can not be hidden using ISL algorithm.   To further hide item D, i.e. the rule D=>A (60%, 100%), one transaction T2 can be found for TL.  The transaction T2 is then replaced by 010?.   However, the resulting support and confidence intervals are [60%,60%] and [75%,100%] which are still greater than MST and MCT.  Therefore, D=>A can not be hidden by ISL algorithm.

Example 2 As in example 1, reversing the order of hiding items, the result of hiding item D and then item B using ISL algorithm is as follows.  To hide item D, i.e. the rule D=>A (60%, 100%), even though transaction T2 is modified, the rule can not be hidden.  To hide item B, no transaction can be found for TL.  Therefore, no rules can be hidden by ISL algorithm.

4.2. Examples Running DSR Algorithm   Example 3 Assuming that the MST=60% and MCT=70%, the result of hiding item B and then item D using DSR algorithm is as follows.  To hide item B, the rule B=>A ([40%,60%], [50%,75%]) will be hidden and the rule A=>B ([40%,60%], [50%,100%]) will be lost due to side effect.  This is due to transaction T4 is modified from 1100 to ?100.  The updated database D3 is shown in Table 3.  To further hide item D, the rule D=>A ([40%,60%], [66%,100%]) will be hidden and the rule A=>D ([40%,60%], [50%,100%]) will be lost due to side effect.

This is due to transaction T1 is modified from 1101 to ?101.

The updated database D4 is shown in Table 3.

Table 3  Databases before and after hiding item B and  item D using DSR           Example 4 As in example 3, reversing the order of hiding items, the result of hiding item D and then item B using DSR algorithm is as follows.  To hide item D, the rule D=>A ([40%,60%], [66%,100%]) will be hidden when transaction T1 is modified from 1101 to ?101.  The other three rules, A=>B ([40%,60%], [50%,100%]), B=>A ([40%,60%], [50%,75%]), A=>D ([40%,60%], [50%,100%]),   will be lost due to side effect.  The new database D5 is shown in Table 4.

Table 4  Databases before and after hiding item B and  item C using DSR         One observation is that different sequences of hiding items will result in different transformed databases, i.e., D4 and D5 for DSR algorithm.

5. Analysis  This section analyzes some of the characteristics of the proposed algorithms and compares with the algorithms proposed in Saygin etc?s [22].  The first characteristic we observe is the item ordering effect.  The transformed databases are different under different ordering of hiding items, even though the same set of sensitive items is specified.  The second characteristic we observe is the algorithm effect.  The transformed databases will be  TID D D3 D4 T1 1101 1101 ?101 T2 0100 0100 0100 T3 1011 1011 1011 T4 1100 ?100 ?100 T5 1101 1101 1101  TID D D5 T1 1101 ?101 T2 0100 0100 T3 1011 1011 T4 1100 1100 T5 1101 1101       different under different algorithm. These characteristics are demonstrated in the four examples in section 4 and summarized in Table 5.  Databases D1 and D2 are resulting databases using ISL algorithm and D3, D4 and D5 are resulting databases using DSR algorithm.

Table 5  Databases before and after hiding items B and D using ISL and DSR   The third characteristic we analyze is the efficiency of the proposed algorithm compared with the Saygin etc algorithms.  Even though it is the hidden rules, instead of hidden items, that are specified in [22], we compare the number of database scanning and the rules pruned between the two approaches.  For the proposed algorithms, the number of database scanning comes from the calculation of only large one and large two itemsets, as well as transactions in TL.  For Saygin etc?s algorithm, the number of database scanning comes from the calculation of all large itemsets, which may include large three or higher itemsets, and partial support transactions T.  No rules are pruned in the Saygin etc?s algorithm One of the reasons that Saygin etc?s approach does not prune rules is that hidden rules are given in advance and the algorithms try to hide every single rule without checking to see if rules can be pruned after some transactions have been changed.

However, our approach needs to hide all rules containing hidden items on the left hand side.  But Saygin etc?s approach can hide some of the rules containing hidden item on the left hand side.  For example, for hidden item A, Saygin etc?s approach can hide A=> B, but show A => D, whereas our approach must hide both rules.

The fourth characteristic we analyze is efficiency comparison of the ISL and DSR algorithms.  One observation we conclude from the examples in section four is that DSR algorithm seems to be more effective when the support count of the hidden item is large.  This is due to when support of right hand side of the rule is large; increase support of left hand side usually does not reduce the confidence of the rule.  However, decrease support of right hand side usually decreases the confidence of the rule.

6. Conclusions In this work, we have studied the database privacy problems caused by data mining technology and proposed two na?ve algorithms for hiding sensitive predictive association rules in association rules mining.  The proposed algorithms are based on modifying the database transactions using unknowns so that the confidence of the  association rules can be reduced.  Examples demonstrating the proposed algorithms are shown.  The item ordering and algorithm ordering characteristics of the proposed algorithms are analyzed.  The efficiency of the proposed approach is further compared with Saygin etc?s [22].  It was observed that our approach required less number of database scanning and prune more number of hidden rules.

However, our approach must hide all rules containing the hidden items on the left hand side, where Saygin etc?s approach can hide any specified rule.  Currently we are performing numerical simulation on the time effects and side effects (the number of lost rules and new rules due to alternation of the database) and will be included in this work.  In the future, we will examine and compare with other alternation techniques for hiding predictive association rules based on current approach   7. References [1] D. Agrawal and C. C. Aggarwal, ?On the design and quantification of privacy preserving data mining algorithms?, In Proceedings of the 20th Symposium on Principles of Database Systems, Santa Barbara, California, USA, May 2001.

[2] R. Agrawal, T. Imielinski, and A. Swami, ?Mining Association Rules between Sets of Items in Large Databases?, In Management of Data, Washington DC, May 1993.

[3] R. Agrawal and R. Srikant, ?Privacy preserving data mining?, In ACM SIGMOD Conference on Management of Data, pages 439?450, Dallas, Texas, May 2000.

[4] Ljiljana Brankovic and Vladimir Estivill-Castro, ?Privacy Issues in Knowledge Discovery and Data Mining?, Australian Institute of Computer Ethics Conference, July, 1999, Lilydale.

[5] C. Clifton and D. Marks, ?Security and Privacy Implications of Data Mining?, in SIGMOD Workshop on Research Issues on Data Mining and knowledge Discovery, 1996.

[6] C. Clifton, ?Protecting Against Data Mining Through Samples?, in Proceedings of the Thirteenth Annual IFIP WG 11.3 Working Conference on Database Security, 1999.

[7] C. Clifton, ?Using Sample Size to Limit Exposure to Data Mining?, Journal of Computer Security, 8(4), 2000.

[8] Chris Clifton, Murant Kantarcioglu, Xiaodong Lin and Michael Y. Zhu, ? Tools for Privacy Preserving Distributed Data Mining?, SIGKDD Explorations, 4(2), 1-7, Dec. 2002.

[9] E. Dasseni, V. Verykios, A. Elmagarmid and E. Bertino, ?Hiding Association Rules by Using Confidence and Support? in Proceedings of 4th Information Hiding Workshop, 369-383, Pittsburgh, PA, 2001.

[10] A. Evfimievski, R. Srikant, R. Agrawal, and J. Gehrke, ?Privacy preserving mining of association rules?, In Proc. Of the 8th ACM SIGKDD Int?l Conference on Knowledge Discovery and Data Mining, Edmonton, Canada, July 2002.

TID D D1 D2 D3 D4 D5 T1 1101 1101 1101 1101 ?101 ?101 T2 0100 0100 0100 0100 0100 0100 T3 1011 1011 1011 1011 1011 1011 T4 1100 1100 1100 ?100 ?100 1100 T5 1101 1101 1101 1101 1101 1101        [11] Alexandre Evfimievski, ?Randomization in Privacy Preserving Data Mining?, SIGKDD Explorations, 4(2), Issue 2, 43-48, Dec. 2002.

[12] Alexandre Evfimievski, Johannes Gehrke and Ramakrishnan Srikant, ?Limiting Privacy Breaches in Privacy Preserving Data Mining?, PODS 2003, June 9-12, 2003, San Diego, CA.

[13] M. Kantarcioglu and C. Clifton, ?Privacy-preserving distributed mining of association rules on horizontally partitioned data?, In ACM SIGMOD Workshop on Research Issues on Data Mining and Knowledge Discovery, June 2002.

[14] Jiuyong Li, Hong Shen and Rodney Topor, ?Mining the Smallest Association Rule Set for Predictions?, Proceedings of the  [15] Y. Lindell and B. Pinkas, ?Privacy preserving data mining?, In CRYPTO, pages 36?54, 2000.

[16] D. E. O? Leary, ?Knowledge Discovery as a Threat to Database Security?, In G. Piatetsky-Shapiro and W. J. Frawley, editors, Knowledge Discovery in Databases, 507-516, AAAI Press/ MIT Press, Menlo Park, CA, 1991.

[17] S. Oliveira, O. Zaiane, ?Privacy Preserving Frequent Itemset Mining, December 2002, pp. 43-54.

[18] S. Oliveira, O. Zaiane, ?Algorithms for Balancing Priacy and Knowledge Discovery in Association Rule Mining?, Proceedings of 7th International Database Engineering and Applications Symposium (IDEAS03), Hong Kong, July 2003, pp.

54-63.

[19] S. Oliveira, O. Zaiane, ?Protecting Sensitive Knowledge by on Data Mining, November 2003, pp. 613-616.

[20] S. Oliveira, O. Zaiane, Y. Saygin, ?Secure Association Rule Sharing?, Proceedings of 8th Pacific-Asia Conference on Knowledge Discovery and Data Mining (PAKDD?04), 2004, pp.

74-85.

[21] S. J. Rizvi and J. R. Haritsa, ?Privacy-preserving association rule mining?, In Proc. of the 28th Int?l Conference on Very Large Databases, August 2002.

[22] Y. Saygin, V. Verykios, and C. Clifton, ?Using Unknowns to Prevent Discovery of Association Rules?, SIGMOD Record 30(4): 45-54, December 2001.

[23] J. Vaidya and C.W. Clifton. ?Privacy preserving association rule mining in vertically partitioned data?, In Proc. of the 8th ACM SIGKDD Int?l Conference on Knowledge Discovery and Data Mining, Edmonton, Canada, July 2002.

[24]  V. Verykios, E. Bertino, I.G. Fovino, L.P. Provenza, Y.

Saygin, and Y. Theodoridis,  ?State-of-the-art in Privacy Preserving Data Mining?, SIGMOD Record, Vol. 33, No. 1, 50-57, March 2004.

[25] V. Verykios, A. Elmagarmid, E. Bertino, Y. Saygin, and E.

Knowledge and Data Engineering, Vol. 16, No. 4, 434-447, April 2004.

