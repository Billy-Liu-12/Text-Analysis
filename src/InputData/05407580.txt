AdamRTP: Adaptive Multi-flows Real-time Multimedia Delivery over WSNs

Abstract - Real-time multimedia applications are time sensitive and require extra resources from the network, e.g. large bandwidth and big memory. However, Wireless Sensor Networks (WSNs) suffer from limited resources such as computational, storage, and bandwidth capabilities. Therefore, sending real-time multimedia applications over WSNs can be very challenging. For this reason, we propose an Adaptive Multi-flows Real-time Multimedia Transport Protocol (AdamRTP) that has the ability to ease the process of  transmitting real-time multimedia over WSNs by splitting the multimedia source stream into smaller independent flows using an MDC-aware encoder, then sending each flow to the destination using joint/disjoint path(s). AdamRTP uses also dynamic adaptation techniques, e.g. changing number of flows and rate adaptation.

Simulations experiments demonstrate that AdamRTP enhances the Quality of Service (QoS) of the data transmission. Also, we show that in an ideal WSN, using multi-flows consumes less power per node than using a single flow and extends the life-time of the network.

Keywords ? Real-time multimedia, Multi-flow, RTP, RR, AdamRTP, QoS, Wireless Sensor Network (WSN).



I. INTRODUCTION  The rapid advancement in Micro Electro Mechanical  Systems (MEMS) and wireless communication technologies  has enabled the integration of sensing, actuation, processing,  and wireless communication capabilities into tiny sensor  devices. Wireless Sensor Networks (WSNs) are composed of many tiny, low-cost, low-power, and scattered devices called  sensor nodes. Each node integrates a processor, memory,  transceiver, and power source into one small device that has the  ability to observe, process, and send data about observed  phenomenon to its neighboring nodes destined to a central  processing unit mainly referred to as a sink. A sensor node  should have the ability to process as much information locally  as possible instead of just disseminating raw data to save  energy, because Radio Frequency (RF) communication is the  key energy consumer [3]. Usually, the main source of energy in  a sensor node is the battery. The lifetime of any node depends on that of the battery. Energy conservation is a main obstacle to  any proposed protocol in sensor networks, while maintaining  high Quality of Service (QoS) measurements is the main goal  in traditional networks [4].

There is an increasing demand for multimedia applications  over all types of wireless networks. But with limitations that  WSNs has naturally inherited from wireless networks, sending  multimedia data can add extra load greater than what a WSN is  capable of, due to the fact that WSNs have limited processing  power, limited energy source, and limited bandwidth.

Multimedia applications require extra memory and cache. In  addition, they require large bandwidth for acceptable quality.

Current real-time multimedia protocols, such as the Real- time Transport Protocol (RTP) [2], are designed to send real-  time multimedia data. Implementing such protocols directly  over WSNs is not practical. For example, the RTP protocol is  not power-aware. It does not consider the amount of power any  node has in the decision of joining or leaving a session or being  a part of a path that forwards the traffic. Moreover, RTP was  designed to work over IP-based networks, such as the Internet,  WLAN, etc?  Achieving good QoS comes at the price of network  resources such as bandwidth and power. Our main goal is to  send real-time multimedia over WSNs while preserving good  QoS and extending the lifetime of the network. Because a WSN has limited resources, e.g. bandwidth and power, we use multi-  flows over multi-paths. The sender divides a large stream of  data into smaller ones and sends each portion over a separate  path, if possible. By doing this, we can relieve intermediate  nodes from the burden of transmitting large amount of data.

Also, multimedia traffic is distributed over more nodes.

Moreover, we use an adaptation technique to adjust transmitted  media dynamically according to the current network state. By  using both techniques, the proposed Adaptive Multi-flows  Real-time Multimedia Transport Protocol for WSNs  (AdamRTP), which modifies the RTP protocol, helps alleviating congestion and providing good QoS and good  distribution of power usage to suite the limitations of WSNs.

This paper is organized as follows. Section II presents an  overview and the design of our new proposed protocol  (AdamRTP). Section III presents our simulation results.

Section IV shows some related work. Finally, we conclude.



II. ADAMRTP  This section presents an overview, then provides detailed  description of AdamRTP and its design architecture, followed  by adaptation techniques used.

A. Overview  Consider an area that is covered by many sensors that are  equipped with audio and video capabilities. Generally, when an  event occurs (see Fig. 1), the sensor node sensing the event  generates a media representation of the event and divides the  stream into many flows using an MDC encoder [1]. Then, it  forwards these flows to the sink over multiple paths. The sink merges the different flows into one stream, then decodes the  stream by a decoder and makes it available to the user directly  or probably over the Internet.

To accomplish this, we assume that each sensor has a fair  size of internal cache which can be used to store continuous  multimedia (audio/video) files of the surrounding environment.

The sensors do not send continuous streams of data to the sink  unless an event triggers the source/sender sensor to do so, e.g. a  triggered event could be the hearing of the word ?HELP? or the  detection of a waiving sign. This prolongs the lifetime of each  sensor node. The sender sensor is equipped with a coder that is  capable of generating multiple flows out of one stream called Multiple Description Coding (MDC).

A flow consists of data packets transferred from the sender  to the receiver using a certain path, while a session consists of  one or more flows which constitute a single real-time  multimedia stream between sender and receiver and necessary  control packets. A path/route is the physical route that a flow  uses to reach the destination.

Fig. 1. AdamRTP, sender generates media presentation of an event and sends it  to user using multi-flows  Each flow is routed to the sink using a different path (if  possible). The sender can always start with one or two flows,  then increases the number of flows (up to n flows) until  something wrong happens, e.g. severe packet loss or failure of  an intermediate sensor on the path used. AdamRTP may  function over any multipath routing protocol such as the  Highly-Resilient Energy-Efficient Multipath Routing in WSNs  [11] or SEER [12].

The receiver/sink generates a Receiver Report (RR) packet every time unit, e.g. every one second, combining statistical  information about all previously received flows in the current  interval, where the interval is the time between issuing the  previous RR from the sink and the current RR. Based on the  RR feedback, the sender tries either to increase the number of  flows if the network is uncongested or to minimize the number  of flows/lower its transmission rate if there is congestion until  the network state goes back to normal.

B. AdamRTP Description  AdamRTP employs no connection establishment mechanism  between the sender and the receiver at the beginning of the  session.  The sender simply sends the real-time multimedia data  to the sink as soon as it detects something. In general, the  multimedia stream goes through the following 5 stages:  (AdamRTP implements the partitioning in stage 1, stage 4, and  the reassemble in stage 5.)  1) Encoding and partitioning: Sensors are equipped with a small and moderate quality camera. For example, a camera  which can capture video of resolution 640x480 pixels at 30  frames-per-second can be considered acceptable, adequate,  and small to fit in one small sensor node. Moreover, this  camera is enough to fulfill the job of delivering a good  quality of video. The stream of video generated by the  camera passes into a coder that compresses and divides it  into n flows using an MDC aware coder [1]. AdamRTP has the ability to compress and partition the video stream using  some partitioning methodologies such as thinning and  striping [13]. Once partitioned, each portion is assigned a  flow number and an initial sequence number, then the flow  is sent to the sink via a separate route, if possible.

2) Path Selection and assignment: Usually finding the best route to the sink is the job of the routing protocol.

AdamRTP assigns only its own header information (such  as flow id, session id, sequence number, and a time stamp),  then passes this information to the lower layer.

3) Packet routing:  It is preferable to find disjoint paths to the sink, so we can distribute the stream of data into flows all over the WSN, thus saving more power and facing less  congestion. But, this requires a huge amount of overhead  trying to find totally disjoint paths from source to  destination resulting in a waste of bandwidth and memory.

4) QoS feedback: AdamRTP generates periodic statistical QoS reports summarizing the quality received by all  previous flows since the last QoS report. However, unlike  RTP, where the sender and receiver must generate these  reports, in AdamRTP only the receiver generates the  report. This frees the network for more data. The Receiver  Report (RR) is almost similar to RR in RTP, where it has information about the fraction of packets lost in the current  interval, accumulation of packets lost since the beginning  of the session, highest sequence number received, the  interarrival jitter, and some other values. Based on these  RRs, sender acts accordingly, i.e. it may increase/decrease  quality of media and number of flows.

5) Reassembling at the sink: Once the sink receives a packet, it extracts the session id and flow id from its header and  queues it until a complete set of packets received up to a  certain time threshold called the playout delay. Then, the  sink decodes the received stream back to its original  multimedia file. We assume the sink is more powerful and has more computational capabilities in terms of processor,  memory, and storage.

C. AdamRTP Architecture  Usually sensors are small in size, so it?s more convenient to  unify a couple of OSI layers or more together to simplify the design [16]. Therefore, we somehow tried to implement  AdamRTP to operate over the network layer directly. Although  it is not considered to be a pure transport layer or an application  layer, it tries to unify the tasks of both layers.

AdamRTP is a connectionless, unreliable protocol that  fragments, then reassembles packets. Large datagrams are  broken into small ones to fit the small frame size of AdamRTP.

When these datagrams arrive at the receiver, it reassembles  them and merges them back to the original packet format. By  using adaptation techniques, AdamRTP helps avoid congested     or dead intermediate sensors and it can adjust the sending rate  which is considered as a simple form of congestion control.

AdamRTP Packet Format: AdamRTP adds its own header  information to the ?payload data? to be sent. Then, the network protocol adds in turn its own header information (see Fig. 2).

?   Fig. 2. AdamRTP Payload and Header  Fig. 3 shows AdamRTP data header format, as follows:  0 1 2 ? 8 9 ?.. 24 25 ?. 31  V PT Session ID Flow ID  Node?s counter  Energy level  Extended Sequence Number  Timestamp  Fig. 3. AdamRTP data header format  Session ID.  (16 bits) A random number specifying the session  used to carry all the multimedia flows belonging to the steams  in the session for a specific event. This can be useful if we have  more than one source of AdamRTP traffic in the same WSN.

Flow ID. (7 bits) Denotes the number of the flow carrying the  payload from source to destination, e.g. if current number of  flows in the session is 3, then Flow ID can be either 1, 2, or 3.

Node?s Counter. (32 bits) Sender initializes this field with 0.

During transmission, each node carrying this packet will  increment this field by one until reaching the destination.

Energy level. (32 bits) Each node on the path between source  and destination adds its own energy level to this field value.

Extended Sequence Number. (32 bits) The extended sequence  number is incremented by 1 for each n flows. For example, if  we are using 3 flows in the session, then the extended sequence  number is incremented by one after the transmission of every 3  packets, each belonging to a different flow. The sequence  number can be used to arrange out-of-order packets arrived at the destination.

The V field denotes protocol version number in Fig. 3 and in  Fig. 4, the PT filed denotes the payload encoding type, and the  timestamp is the time of generation of the data packet.

Fig. 4 shows the RR header format, as follows. Note that the  RR is issued by the sink and sent to the sender.

Packet Type. (8 bits) Specifies the type of reporting packet. So  far, we have one type as we are using RR only.

RR Count. (8 bits) A counter for number of RRs that are issued.

Sequence Number. (8 bits) Specifies a general sequence  number for the whole session.

Number of Flows. (4 bits) Denotes number of active flows  during the session, thus determining number of blocks required.

Session ID.  (16 bits) A number specifying the session used to  carry all the flows belonging to one stream for a specific event.

Flow ID. (16 bits) A number specifying the Flow number of the  flow carrying the payload from source to destination, e.g. if we  use 3 flows, Flow ID will be 0, 1, or 2.

Fraction Lost.  (8 bits) A percentage of packets lost since last  RR issued by the receiver.

Cumulative number of lost packets. (24 bits) Total number of  packets lost since the beginning of the session.

Average Energy. (32 bits) The average energy level, calculated  by the sink, of all nodes in a particular flow delivered on a path.

Extended highest sequence number received.  (32 bits) Denotes  highest sequence number received using a specific flow.

Estimate inter-arrival time jitter. (32 bits) Jitter estimation for a  specific flow.

0 1 2 ? 7 8 ?    ?     ?     ?     ?    V RR Count Packet Type Seq.

number  No. of  Flows  Session ID Flow ID  B lo  ck     fo r  Fraction lost Cumulative number of lost packets  Average Energy  Extended highest sequence number received  Estimate inter-arrival time jitter  Session ID Flow ID  B lo  ck     fo r  Fraction lost Cumulative number of lost packets  Average Energy  Extended highest sequence number received  Estimate inter-arrival time jitter ?      Block n for flow n  Fig. 4. RR header format  D. Adaptations  The other main building block of the AdamRTP protocol is the adaptation mechanism. AdamRTP provides a number of  adaptation mechanisms to enhance QoS and to extend the life  time of the WSN. Statistical QoS feedback information helps  the protocol acquire information about the state of the network,  then allows it to act accordingly on time using adaptations.

AdamRTP provides three different adaptation mechanisms:  1. Number of flows: the sender adjusts the number of flows dynamically to suite the current WSN state. When the  receiver detects that a certain active flow is delivering late  real-time multimedia packets (which we consider lost) and  number of lost packets is greater than certain threshold , or no packets at all are received, the receiver informs the  sender about this incident in the next RR. When the sender  receives the RR, it deletes this flow. The sender adds  another flow only to maintain a minimum number of  flows. Moreover, AdamRTP adds a new flow even if there  is no packet loss at all. This happens if the network is  uncongested, i.e. it adds a new flow if number of flows <  maximum allowed.

2. Rate adjustment: adjusting the sending rate can ease the delivery of packets when the network is facing congestion.

If the network state is congested and deleting an affected  flow does not help alleviating congestion, AdamRTP will decrease the sending rate, i.e. decrease media quality, thus  decreasing the number of packets used to play this media.

However, if the network reports no significant congestion  (according to the value of fraction of lost that each  Network  header  Mac  Header  AdamRTP  Header  AdamRTP  Payload data     individual flow is reporting) for 3 consecutive RRs,  AdamRTP increases sending rate up to a threshold.

3. Power: AdamRTP checks continuously for cumulative remaining power at each path separately. If power is  draining fast from a certain path used by a flow, AdamRTP  instructs the sender about this incident. The sender sensor, in turn, instructs the routing protocol to use different path  if possible. Each node along the path adds its own energy  level to a field in the header and increments another field  that acts as a node?s counter. When the sink receives this  packet, it divides the total number of energy level over  number of node?s count to get the average of power level  for all nodes participating in the process of forwarding the  packet from source to destination. The receiver sends the  average power value to sender in next RR for each flow.

Our adaptation algorithm, implemented at the sender, checks continuously for RRs that have been issued periodically from  the receiver, and examine each flow separately. It calculates the  fraction of packets lost for each flow found in the RR received.

If the loss is less than the minimum threshold (MIN_TH), it  will mark the network as ?GOOD?. When the receiver receives  two RRs stating that network state is good for each individual  flow, then rate adjustment adaptation algorithm increments the  sending rate by a small value, e.g. 0.1, until reaching a  maximum sending rate threshold (MAX_RATE). However, if  the loss is greater than MIN_TH but less than maximum loss  threshold (MAX_TH), it considers the network state as ?ACCEPTABLE?. Checking if packet loss between MIN_TH  and MAX_TH allows the sender not to change the number of  flows immediately, thus preventing oscillations. However, if  the network loss is greater than MAX_TH, the network is  marked as ?BAD? and actions should be taken. The number of  flows is decreased by one. But, before deleting a flow,  AdamRTP checks for current active number of flows. If  number of flows is greater than one, it deletes the affected flow  right away. But, if the number of flows is equal to one,  AdamRTP doesn?t delete the affected flow immediately so that  we don?t end up with no active flow at all. AdamRTP adds a  new flow and instructs the routing protocol to find a new path for the new flow. Once successful, AdamRTP deletes the  affected flow and if the network is still ?BAD?, the sending rate  is decreased until reaching a MIN_RATE.



III. SIMULATIONS  We used the Network Simulator (NS-2) version ns-2.31. We  created a 10 by 10 grid of sensor nodes (total 100 nodes). Each  node is about 50 meters apart. While creating the nodes, we  assigned both AdamRTP and AdamRTCP agents to every  created node in the topology, thus each sensor node can act as a  stream generator and a packet forwarder when necessary.

Some terms need to be clarified, as follows. A healthy Network is a network without any external type of traffic or  any node failure. A congested network means a network that  has an external source of traffic which results in congestion. A  network with node failure suffers from some node failure. Node  failures take a uniform random probability of nodes to die for a  random short duration, e.g. 2 seconds. AdamRTP default  packet size is 200 Bytes. The transmission rate that we mostly  start our script with is around 65 kbps. This means the sender  sends a packet every 24.5 ms. Finally, each node is initially  charged with 1000 J as a source of power.

Four different types of simulation experiments were  conducted. The first compares regular RTP behavior with AdamRTP. The second experiment compares single-flow with  multi-flows performance. The third experiment compares  AdamRTP with and without adaptations. Finally, performance  of AdamRTP in terms of energy consumption is evaluated.

A. RTP vs. AdamRTP  We sent 1000 packets over the same healthy network, once  using RTP and once using AdamRTP. Firstly, we calculated the  average remaining power for the whole WSN as depicted in  Table 1 which shows that AdamRTP consumed less power than  RTP.  AdamRTP consumed 6.77J (1000J ? 993.23J), while  RTP consumed 18.18J on average.

Table 1. Remaining power comparison between RTP and AdamRTP RTP            AdamRTP with 5 flows  Minimum Node Power (J) 972.02 985.06  Average Node Power (J) 981.82 993.23   Fig. 5. Bandwidth of AdamRTP vs. RTP with temporary node failure  Moreover, we instructed one node to fail for some time at a specific point of time in both scenarios, then calculated the  bandwidth (see Fig. 5). In Fig. 5 a node in the path between the  sender and the receiver died at the 8th second for about 1  second. AdamRTP was able to send packets using other flows.

Only one flow was affected by the node failure, while in RTP,  it took some time to discover the failure before the routing  protocol acts upon this and rediscover another path to avoid the  path that it is currently using which contains the dead node.

B. AdamRTP single-flow vs. AdamRTP multi-flows  The sender sends a stream of packets over a congested  network, where we randomly add failing nodes and external  sources of traffic (one source of external traffic at a time).

Table 2 shows statistical results regarding the number of  packets received when running the AdamRTP script using one-  flow and three concurrent flows respectively for 100 times  each. When using 3-flows, AdamRTP performs better in terms  of the number of packets received. Note that the minimum            1 3 5 7 9 11 13 15 17 19 21 23  B an  d w  id th  ( b it  s/ se  co n  d )  Time (seconds)  Bandwidth of AdamRTP vs. RTP  RTP  AdamRTP     number of packets received when sending 3-flows is higher  than the minimum in 1-flow. This clearly indicates that multi-  flows is capable of delivering more packets even in worst case  scenario, e.g. congestion.

Table 2.  Packets received statistics of AdamRTP using one-flow vs. three-flows using 1 flow using 3 flows  Mean 2292 2380  Standard Error 13.26 11.59  Median 2279 2390  Mode 2409 2472  Standard Deviation 133 116  Minimum 1980 2057  Maximum 2516 2631  95% Confidence Interval 2292?26 2380?23  To test whether the data indicates differences between the two scenarios in terms of the number of packets received, we  conducted an independent two-sample t-test. The mean and  standard deviation of the total number of packets received in  the multi-flows scenario were 2380 and 116, respectively,  whereas in the single-flow scenario, these quantities were 2292  and 133, respectively. Since the standard deviations are  comparable, we used two-sample t-test assuming equal  variances. The statistical value obtained was 4.954754, which,  when compared to a t-distribution with 198 degrees of freedom,  gives a one-sided p-value of 7.75x10-7. Thus, the average  number of packets received by the multi-flows is significantly  higher than single-flow.

Fig. 6 shows that the performance improves when the  number of flows increases, i.e. when used with adaptations.

Fig. 6. Comparison of AdamRTP using a single-flow and multi-flows over a  congested network with node failure  C. Effect of Adaptation on AdamRTP   Fig. 7. AdamRTP adaptation vs. no adaptation  The adaptation techniques in AdamRTP provide flexible  reactions to frequent changes in the WSN. Fig. 7 shows the  average number of packets received when comparing  AdamRTP with and without the use of Adaptation. AdamRTP  with multi-flows and adaptation overcomes all other methods.

D. Energy consumption  Initially, each node in the network is configured with 1000J  as a source of power. When a node wants to transmit a packet,  it consumes twice the amount of power compared to receiving a  packet. As a result, with nodes having limited source of power,  a WSN is able to send a little more when using multi-flows  compared to single flow. That is to say, each intermediate node  in the multi-flows scenario sends fewer packets, thus saving  more power per intermediate node.

Table 3. Remaining power comparison between single and multi-flows  Single-Flow Multi-Flows (5-flows)  Node?s Minimum Power (J) 983.67 985.75  Average Power (J) 992.68  993.31  Table 3 shows a comparison of the minimum power  remaining among all sensors and the average remaining power  for the whole WSN when sending 1000 packets over a healthy  network in single and multi flows scenarios.

We choose a healthy network as in a network with node  failure, if packet loss occurs on the path to receiver due to node  failure, the remaining sensor nodes on the path will not send  any packet. Thus, they consume no power, which is not a fair  comparison with a situation where we have more node failures.

Table 4. WSN performance in terms of number of packets received when  nodes have limited source of power     No. of packets  received using  Single-Flow  No. of packets  received using  Multi-Flows  Enhanced  delivery  rate  Power = 10 J 645 807 25%  Power = 30 J 1936 2335 21%  Power = 50 J 3226 4048 25%  Power = 75 J 4838 6074 26%  Power = 100 J 6451 8098 26%  Power = 200 J 12903 16196 26%  Power = 1000 J 64768 83194 28%  Table 4 shows a comparison between a single-flow and  multi-flows performance when each node has low source of  power. In this simulation, the sender is instructed to send  continuous stream of packets to receiver until the sender is not  able to transmit at all, either because most intermediate sensors  have died or the source itself has no enough power. When  limiting the source of power to a small value (less than 1000 J),  AdamRTP with multi-flows was able to receive more packets  than with a single-flow. Because AdamRTP is able to distribute  the traffic load over more sensors, so each intermediate sensor  in case of multi-flows sends fewer packets compared to a single-flow scenario, thus saving more power per node, i.e.

nodes with limited sources of power do not die quickly.

Consequently, the lifetime of the WSN is extended.



IV. RELATED WORK  Many approaches are available for sending real-time  multimedia over wired or wireless networks e.g. ad hoc  networks. These approaches are concerned mainly with number             1 flow 2 flows 3 flows 4 flows 5 flows  A v  g .

N  u m  b e r o  f P  k ts  r e c e iv  e d    Number of Flows  Average number of packets received            1 flow with  adaptation  1 flow  without  adaptation  3 flows with  adaptation  3 flows  without  adaptation  A v  g .

N  u m  b e r o  f P  a c k  e ts    r e c e iv  e d  Number of pkts received when using adaptations vs. no  adaptations     of methods such as modifying the coder, either by using  adaptation techniques [5] or by using Multi-Layer and Multiple  Description Coding techniques [6], or a combination of both  [7]. Other methods use a real-time transport protocol, e.g. RTP  [2], or routing protocol, e.g. SPEED [8]. Further proposals take  the Cross-layer approach e.g. FireFly [9]. There are many protocols that use a combination of these approaches to  facilitate sending real-time multimedia over wireless networks  and if possible WSNs. One protocol which is somewhat close  to AdamRTP is called (MRTP) which stands for Multi-flow  Real-time Transport Protocol for ad hoc networks [10]. It uses  a combination of an MDC and transport protocol techniques to  operate over ad-hoc networks. Another protocol called  Adaptive Multiple Description Coding for Internet Video [14]  that uses adaptation and MDC coder to help in sending video  over the Internet. In this section, MRTP is discussed.

The Multi-flow Real-time Transport Protocol for ad hoc  networks (MRTP) [10] is a transport protocol and is designed to allow applications to send real-time data over ad hoc  networks. It uses an MDC encoder to split a stream of data into  several flows, then sends each flow on a separate path. The  MRTP protocol is a session-oriented protocol. This means a  session needs to be established prior to any data transmission.

A three-way handshaking is initiated from the source node  (sender/receiver) using HelloSession and ACKHelloSession  messages. This gives both parties an opportunity to agree on  some parameters such as number of flows to be used. During  the session, some flows may be unavailable, due to node failure  or severe congestion. In this case, the receiver sends a DeleteFlow message to the sender. The sender in return deletes  the affected flow and redistributes the assigned remaining  packets to other active flows. When a new path is found, the  routing protocol informs MRTP about this new path.

Accordingly, a new flow can be added to the session by  initiating an AddFlow message. MRTP generates periodic QoS  reports using Sender Reports and Receiver Reports that carry  both per-flow and per-session statistics. When packets of  different flows arrive at the destination, the receiver stores  these packets in a buffer for reordering (according to sequence  number and timestamp in header).

AdamRTP looks similar to the MRTP. However, MRTP is designed for ad hoc networks, not WSNs, and a WSN has extra  new requirements that any new protocol should consider.

Furthermore, MRTP is a session-oriented protocol, but we  believe in multimedia streaming this is not necessary. Finally,  MRTP does not consider power consumption at all.



V. CONCLUSION  Real-time multimedia applications are resource hungry.

They require more computational and storage capabilities than  traditional network applications. In addition, they need more  bandwidth for transmission. Running this type of applications  over WSNs, which suffer from computational, memory, and power constrains is challenging.

Our goal is to send real-time multimedia over WSNs while  achieving good QoS and extending the lifetime of the network.

WSNs are usually densely deployed. This creates many paths  between any two sensors. We can utilize this feature and divide  a large multimedia file into smaller portions, then send each  small portion over a separate path, i.e. instead of transferring  the multimedia stream using few nodes, many intermediate  nodes are involved. We propose the Adaptive Multi-flows  Real-time Multimedia Transport Protocol for WSNs (AdamRTP), which divides one multimedia stream into  multiple flows, then sends each flow over a separate path, if  possible, to the destination. Compared to a single-flow  scenario, each intermediate node in the multi-flows scenario  sends fewer packets, thus saving more power per node. In  addition, AdamRTP employs some adaptation techniques that  act like congestion control. We assume that each sensor has a  fair size of internal cache. In the future, we hope that WSNs  with multimedia capabilities [15] are widely deployed.

Our simulation results show that AdamRTP enhances the  delivery, especially when the WSN is suffering from  congestion due to node failure or external source of traffic.

Also, it is able to reduce the power consumption per node and  deliver more packets if the nodes have limited power source,  thus extending the lifetime of the WSN.

