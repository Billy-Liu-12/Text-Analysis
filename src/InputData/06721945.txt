Enhancing the Efficiency in Mining Weighted Frequent Itemsets

Abstract?To further enhance the performance of finding weighted frequent itemsets, this work presents an effective upper- bound model for reducing unpromising candidates in mining process. To achieve this goal, a projection-based pruning strategy based on our previously proposed model is developed to gradually tighten the upper-bound value for each transaction.

The experimental results show that the proposed approach can achieve good performance in efficiency.

Keywords-Data mining; weighted data mining; weighted frequent itemset mining, upper-bound model.



I. INTRODUCTION Data mining techniques have widely applied to extract  useful rules or patterns in various practical applications, such as mobile data application and multimedia data applications. In the field of data mining, association-rule mining [1][2] is one of important issues due to the consideration of frequency relationship of items. However, the same importance in association-rule mining is assumed for all items in databases.

Thus, the actual significance of an itemset cannot be easily recognized by the association-rule mining techniques.

To handle this problem, Cai et al. then introduced a new issue, namely weighted frequent itemset mining [3]. In Cai et al.?s study [3], different weight values were assumed for items according to the importance of the items (e.g. the profits or costs of items). In addition, the weighted support of an itemset was the support value of the itemset multiplied by the summation of weight values of items in the itemset. Afterward, Yun et al. presented another average-weight concept [7], which was the sum of weights of items in an itemset divided by the number of items in that itemset, to evaluate the individual weight of an itemset. Different from Cai et al.?s weighted function [3], the different weights of an item in different conditions were permitted in Yun et al.?s study [7]. Besides, since the downward-closure property (abbreviated as DCP) was not satisfied in weighted frequent itemset mining [7], Yun et al.

developed an upper-bound model to avoid information loss in any weighed frequent itemset mining case. The main concept of the model [7] is that the maximum value of the weights of  all items in a database is used as the weight upper-bound value of each transaction to keep the DCP. However, since not all transactions in a database include the items with maximum weight values for all items, a large number of unpromising candidates are generated [7].

To speed up execution of finding weighted frequent itemsets, Lan et al. [5] developed an effective model named transaction-weight upper-bound model, in which the maximum value among weight values of items in a transaction is selected as the upper-bound of weight value of any subset in that transaction, to tighten upper-bounds of weighted values for itemsets in mining. However, the upper-bounds of weight values of transactions are still fixed under different itemset lengths in Lan et al.?s study [5]. To reduce number of unpromising candidates effectively, developing an improved upper-bound model to find weighted frequent itemsets is a critical task in the weighted frequent itemset mining problem.

In this study, we presents a projection-based weighted frequent itemset mining approach with an improved strategy (named PWAI) to speed up the execution efficiency in terms of finding weighted frequent itemsets in transactions. Based on our previously proposed model, a projection-based pruning strategy is developed to obtain more accurate upper-bounds of weighted values for itemsets in mining. The experimental results show the proposed algorithm achieves good performance in execution efficiency.

The rest of this paper is organized as follows. Some related works are briefly reviewed in Section 2. The problem statement and related definitions are given in Section 3. The proposed PWAI algorithm is described in Section 4. The experimental evaluation is shown in Section 5. Conclusions and suggestions for future work are given in Section 6.



II. RELATED WORKS In data mining, the association-rule mining techniques [1][2]  are frequently adopted to find useful rules or patterns in various applications, such as supermarket promotion application. But, traditional association-rule mining only considers the common   DOI    DOI 10.1109/SMC.2013.192    DOI 10.1109/SMC.2013.192     occurrence relationship of items in transactions, and the same significant is also assumed for all the items. Hence, the importance of items in a database may not be easily recognized.

However, in reality, the importance of items should be different according to various factors, such as profits and costs of the items. Hence, some items with high-important may not be discovered by using traditional association-rule mining techniques.

Due to this reason Cai et al. then proposed a new research topic, namely weighted frequent itemset mining [3], which considered not only the occurrence of items in a set of transactions but also the individual weight values of items in databases. Afterward, Yun et al. [7] also proposed another new average-weight function to evaluate the weight value of an itemset, which was the sum of weight values of items in an itemset divided by the number of items in that itemset [7].

Through the function, the significance for each itemset in a database could be recognized. However, there exists a big challenge, which downward-closure property in association- rule mining cannot be maintained with the average-weight function, in weighted frequent itemset mining. Hence, Yun et al. proposed a new model [7] to keep the property in weighted frequent itemset mining. The main concept of the model is that the maximum weight among all items in a database was regarded as the upper-bound of the weight of each transaction, and then the upper-bound of a transaction could be as the upper-bounds of weights for itemsets in that transaction.

However, although the model [7] can be used to reduce the search space of finding weighted frequent itemsets in comparison with a complete search space (e.g. a lattice), not all transactions included the items with the maximum weight value. Hence, Lan et al. subsequently presented a new upper- bound model, which the maximum value among weight values of items in a transaction is selected as the upper-bound of weight value of any subset in that transaction, to avoid overly overestimating the upper-bounds of weight values for itemsets in mining. However, the upper-bounds of weight values of transactions are still fixed under different itemset lengths.  As above mentioned, how to enhance performance of finding weighted frequent itemsets in terms of pruning unpromising candidates and speeding up efficiency is critical.



III. PROBLEM STATEMENT AND DEFINITIONS To clearly describe the problem of weighted frequent  itemset mining, a transaction database is then given in Table 1, in which each transaction consists of two features, the transaction identification (TID) and items purchased. In addition, there are eight items in the transactions, respectively denoted as A to H. The eight values including 0.30, 0.60, 0.45, 0.20, 0.40, 0.50, 0.15 and 0.95 are assumed for the weight values of the eight items.

Table 1: The five transactions for this example.

TID Transactions  Trans1 {ACDEF} Trans2 {BH}  Trans3 {BCE} Trans4 {ADEGH} Trans5 {ADEF}  In this study, an itemset X is a subset of items, X ? I, and I = {i1, i2, ..., im} is a set of items. A transaction database TDB = {Trans1, Trans2, ?, Transy, ?, Transz}, where Transy is the y- th transaction in TDB. Note that the predefined weight of an item i, wi, is in the range from 0 to 1. The weight (wX) of X in a transaction is the sum of the weights of all items in X divided by the number of items in X in a transaction. For example, w{AD} = (0.30 + 0.2) / 2 = 0.25.

Furthermore, the weighted support (wsX) of an itemset X in a transaction database TDB is the sum of the weights of X in transactions including X in TDB. For example in Table 1, since {AD} appears in the three transactions Trans1, Trans4 and Trans5. wsup{AD} = ((0.30 + 0.2) / 2)*3 = 0.75. Finally, let ? be a pre-defined minimum weighted support threshold. That is, an itemset X is called a weighted frequent itemset (abbreviated as WF) if wsupX ?. For example, when ? = 0.7, {AD} is a weighted frequent itemset.

However, the downward-closure property in traditional frequent itemset mining is not kept in weighted itemset mining.

To keep the downward-closure property, Lan et al.?s presented an upper-bound model to achieve this goal. The main concept is that the maximum weight value among items in a transaction is used as the upper-bounds of weights of that transaction. For example, in Table 1, the fifth transaction Trans5 only includes the four items, A, D, E and F, and their weight values are 0.30, 0.20, 0.40 and 0.50. Since the maximum weight value is the value of 0.5, the transaction- weight upper-bound twub5 of Trans5 is 0.5. Based on this concept, in Table 1, the weighted support upper-bound value of {AD} can be re-calculated as 0.50 + 0.95 + 0.50, which is 1.95. At last, an itemset X is called a weighted frequent upper- bound itemset (WFUB) if wsubX ?. For example, if ? = 0.7, then the itemset {AD} is a weighted frequent upper-bound itemset. However, in traditional model [6], the upper-bound of weight value of {AD} is 2.85 (= 3*0.95). Accordingly, our study adopts Lan et al.?s model [5] to develop a more accurate upper-bound model for reducing unpromising candidates and speeding up execution efficiency in the weighted frequent itemset mining problem.

Based on the definitions above, the problem to be solved in this work is to find all weighted frequent itemsets, whose weighted supports are larger than or equal to a pre-defined minimum weighted support threshold ? from a given transaction database, TDB. The details of the proposed upper- bound model and algorithm are then stated in the next section.



IV. PROPOSED ALGORITHM In this section, the tightening upper-bound strategy and the  filtering strategy for unpromising items are described below.

A. A Projection-based Pruning Strategy In this section, a projection-based pruning strategy for  mining weighted frequent itemsets is proposed to tighten the upper-bounds of transactions in the mining process. The main concept of the strategy is that although our previously proposed upper-bound model [5], could be used to avoid information loss in any weighted frequent itemset mining case, the maximum weight value among all items in a database as the upper-bound of weight value of each transaction in that database. However, the unpromising items in transactions can be removed from the transactions according to the items appearing in the set of weighted frequent upper-bound itemsets, and then the upper bounds of the transactions can be reduced to tighten the upper bounds of weights for itemsets.

B. The Proposed Mining algorithm, PWAI The execution procedure of the proposed projection-based  weighted itemset mining algorithm (named PWAI) is then stated below.

INPUT: A set of items, each with a predefined weight value; a transaction database TDB, in which each transaction includes a subset of sold items; a predefined minimum weighted support threshold ?.

OUTPUT: A final set of weighted frequent itemsets, WFs.

STEP 1: For each y-th transaction Transy in TDB, find the transaction-weight upper-bound twuby of Transy as:  twuby = max{wy1, wy2, ?, wyj}, where wyj is the weight wi of each j-th item i in Transy.

STEP 2: For each item i in TDB, do the following substeps.

(a) Find the weighted support count value wsubi of the  item i as: .twubwsub  TDBTrans^Transi yi  yy  ? ??  ?  (b) Find the weighted support wsi of the item i as:  .

|i|  w ws TDBTrans^Transi  yi  i yy  ? ???  STEP 3: For each item i in TDB, do the following substeps.

(a) If the weighted support upper-bound wsubi of i is  larger than or equal to the minimum weighted support threshold ?, put it in the set of weighted frequent upper-bound 1-itemsets, WFUB1.

(b) If the weighted support wsi of i is larger than or equal to the minimum weighted support threshold ?, put it in the set of weighted frequent 1-itemsets, WF1.

STEP 4: Gather the items appearing in the set of WFUB1, and put them in the set of possible items, PIr.

STEP 5: For each y-th transaction Transy in TDB, do the following substeps.

(a) Get each item i in Transy.

(b) Check whether the item i appears in PIr or not. If yes,  then keep the item i in the transaction Transy; otherwise, remove the item i from the transaction Transy.

(c) If the number of items kept in the modified transaction Transy is less than the value (= r+1), then remove the modified transaction Transy from TDB; otherwise, keep it in TDB.

(d) Find the transaction maximum weight tmwy of Transy in tdbX as:  tmwy = max{wy1, wy2, ?, wyj}, where wyj is the weight value wi of each j-th item i in Transy.

STEP 6: Process each itemset X in the set of WFUB1 in alphabetical order by the following substeps.

(a) Find the relevant transactions including X in TDB, and put the transactions in the set of projected transactions tdbX of X.

(b) Find all the weighted frequent itemsets with X as their prefix itemsets by the Finding-WF(X, tdbX, 1) procedure. Let the set of returned weighted frequent itemsets be WFX.

STEP 7: Output the final set of weighted frequent itemsets in all the WFX.

After STEP 7, all the weighted frequent itemsets are found by Finding-WF(x, tdbx, r) procedure, and the procedure is stated below.

The Finding-WF(X, tdbX, r) procedure: Input: A prefix r-itemset X and its corresponding projected  transactions tdbX.

Output: The weighted frequent itemsets with the prefix itemset  X.

PSTEP 1: Initialize the temporary itemset TIX table as an empty table, in which each tuple consists of three fields: itemset, weighted support upper-bound (twub) of the transaction, and the weighted support (ws) of the itemset.

PSTEP 2: For each y-th transaction Transy in tdbX, do the following substeps.

(a) Get each item i located after X in Transy.

(b) Generate the (r+1)-itemset X? consisting of the  prefix r-itemset X and i, and put the itemset X?, the transaction-weight upper-bound of Transy and the actual weight value of X? in the TIX table.

PSTEP 3: For each (r+1)-itemset X? in the TIX table, do the following substeps.

(a) If the weighted support upper-bound wsubX? of X? is larger than or equal to the minimum weighted support threshold ?, put it in the set of weighted frequent upper-bound (r+1)-itemsets with the prefix itemset X, WFUB(r+1), X.

(b) If the actual weighted support wsX? of X? is larger than or equal to the minimum weighted support     threshold ?, put it in the set of weighted frequent itemsets, WF(r+1), X.

PSTEP 4: Gather the items appearing in the set of WFUB(r+1), X of X, and put them in the set of possible items, PI(r+1), X.

PSTEP 5: Set r = r + 1, where r represents the number of items in the processed itemsets.

PSTEP 6: For each y-th transaction Transy in tdbX, do the following substeps.

(a) Check whether each item i in Transy appears in PIr, X or not. If yes, then keep the item i in Transy; other, remove the item i from Transy.

(b) If the number of items kept in the modified transaction Transy is less than the value (= r+1), remove the modified transaction Transy from tdbX; otherwise, keep it in tdbX.

(c) Calculate the new transaction maximum weight tmwy of Transy in tdbX? as:  tmwy = max{wy1, wy2, ?, wyj}, where wyj is the weight value wi of each j-th item i in Transy.

PSTEP 7: Process each (r+1)-itemset X? in WFUBr+1, X by the following substeps.

(a) Find the relevant transactions including X? from tdbX, and then put the transactions including X? in the set of projected transactions tdbX? of X?.

(b) Find all weighted frequent itemsets with X? as their prefix itemsets by the Finding-WF(X, tdbX, r+1) procedure, where x = X? and tdbX = tdbX?.

PSTEP 8: Return the weighted frequent itemsets in the set of WFx.



V. EXPERIMENTAL EVALUATION A series of experiments were conducted to compare the  performance of our currently proposed projection-based weighted itemset mining algorithm with the improved strategy (named PWAI), our previously proposed weighted itemset mining approach (named PWA) [5], and the traditional WFIM approach [7] with various parameter values. The mining algorithms were implemented in J2SDK 1.6.0.

To simulate the real-world transaction database, a simulation model was derived from that used for utility mining [6] to generate the datasets. Note that the profits of the items were normalized to the weights ranging from 0.0 to 1.0 in the weight table according to the maximum profit among all items.

In addition, the parameters used in the IBM data generator [4] were described as follows: T was the average length of items per transaction; I was the average length of maximal potentially frequent itemsets; N was the total number of different items; D was the total number of transactions.

Figure 1 showed the efficiency comparison of the three algorithms PWAI, PWA and WFIM for the T16I8N2KD200K dataset under various minimum weighted support thresholds, Min_WSup.

1,000  0.10% 0.08% 0.06% 0.04% 0.02%  E xe  cu tio  n Ti  m e(  se co  nd s)  Min_WSup: Minimum Weighted Support Threshold  T16I8N2KD200K dataset  PWAI  PWA  WFIM  Figure 1. Execution time of the three algorithms under different thresholds.

As shown in the figure, it was observed that the proposed PWAI algorithm executed faster than the other two algorithms, PWA and WFIM. The reason is that the PWAI algorithm adopted the two improved strategies to tighten more accurate upper-bounds of weighted supports for itemsets in mining.

Accordingly, the PWAI algorithm could avoid generating a large number of unpromising candidate itemsets when compared with the other algorithms.



VI. CONCLUSIONS In this study, we propose an effectively improved upper-  bound model to tighten upper-bounds of weight values of itemsets in mining. In particular, a projection-based pruning strategy is developed to further obtain more accurate upper- bounds of weight values for itemsets. In the experimental evaluation, the results show that the proposed PWAI algorithm has good performance in execution efficiency when compared to the other two algorithms, PWA and WFIM.

