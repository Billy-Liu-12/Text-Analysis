Partition-Based Approach for Fast Mining of Transitional Patterns

Abstract-Studying the dynamic behaviour of patterns whose frequency changes over time is of recent interest. Such patterns are named as transitional patterns [1] and were found only upon mining the frequent patterns in a transaction database. In this paper, a partition-based algorithm is proposed to find a variation of transitional patterns. Our approach do not require a set of frequent patterns mined over the database to initiate the process of finding transitional patterns and thus reduces the number of scans over the database. In [1] the range of T? was fixed, whereas we expressed it in terms of support so as it varies with the sizes of the databases and minimum pattern support value.

Keywords:- Data Mining, Frequent patterns, transitional patterns, significant milestones.



I. INTRODUCTION Frequent Pattern Mining is the crucial step in Association Rule Mining and also in other related Data Mining functionalities. It includes sequential pattern mining, structured pattern mining and correlation mining. Candidate set generation-and-test paradigm of Apriori kind algorithms, FP-tree based algorithms have influenced several researchers to contribute with innovative methods. In parallel, focus was also set on several kinds of frequent patterns including closed [15, 16], maximal [17], non-derivable [18], utility patterns [14] for non-redundancy and compactness of association rules useful for decision making. Considering temporal information, various algorithms proposed for mining temporal patterns including cyclic patterns [6], calendar-based patterns [5]. Time-stamps of the transactions are normally ignored in finding frequent patterns related to Association Rules. Earlier researchers treated all the transactions uniformly in a database. Recently, Wan and An [1] have introduced ?Transitional Patterns? which represent patterns whose frequency dramatically changes over time in a transaction database. Primarily they focused on discovering time points at which positive (or negative) transitional patterns increases (or decreases) their frequency significantly over time. Their study gave scope to disclose the dynamic behaviour of the frequent patterns as they considered the time-stamps of transactions in mining process. Applications of transitional patterns include tuning the marketing strategies in retail environments, analyzing the time points at which drugs cause the side effects in diagnosis, restructuring web links based on frequency of visiting the web pages. TP-Mine Algorithm [1] runs in two  stages. At the first stage, a traditional frequent mining algorithm is invoked to mine all frequent patterns and this stage demands at least two scans over the database. In the second stage, an additional scan over database identifies transitional patterns among the discovered frequent patterns along with transitions and significant ascending (descending) milestones in the transaction database.



II. CONTRIBUTIONS Contributions of this paper are as follows.

(i) Reducing the number of scans over huge databases is an objective in Data Mining processes. Our approach enumerates all the transitional patterns and their significant milestones with only two scans over the database. Unlike in [1], finding the set of all frequent itemsets in advance is not a pre-requisite for our process. Partition-based approach is used for optimal memory utilization. In the first scan, we adopt a strategy that collects a set of candidate itemsets for the second scan along with their p-support values. Out of these candidate itemsets, transitions, significant ascending (descending) milestones of frequent itemsets will be listed at the end of the second scan. Definitions of Transitions, significant milestones are presented in later sections.

(ii) Transitions occur at the very beginning and tail end of the database has been ignored by Wan and An [1] as such transitional patterns are sporadic. Range of such ignoring portions of the databases was fixed by them with the help of T?. However, we have defined T? in terms of User-defined minimum support value so as ignoring portions vary with sizes of the databases and also with support values. This avoids loosing non-sporadic patterns which may not happen in case fixed range is adopted.



III. RELATED WORK The frequent pattern mining was introduced by Agrawal and srikanth [2], and it has been studied by many researchers. As a result, many algorithms [3, 4] have been proposed for extracting the frequent patterns. The problem of association rule mining has been extended in several ways after its introduction; incremental mining [19], mining of generalized and quantitative rules [13], non-derivable itemset mining [18], utility mining [14], and mining of temporal association rules [15, 16 ].

Recently researchers are considering the time stamps into the transaction database, so that the dynamic nature of the   DOI 10.1109/UKSim.2012.29    DOI 10.1109/UKSim.2012.29    DOI 10.1109/UKSim.2012.29     mined patterns can be revealed by these methods. The itemsets whose supports increases significantly from one dataset to another are named as emerging patterns [12, 20] and are used to capture the emerging trends in time stamped documents, or useful contrasts between data classes. Bay and Pazzani [11] present the problem of mining contrast-sets, which are conjunctions of attribute-value pairs that have meaningfully different support levels across the contrasting groups. Many previous studies also consider the time stamps in the transaction database when mining the frequent patterns. Such studies include the mining of sequential patterns [7, 8, 9] and mining frequent episodes [10].

Temporal association rule is an association rule that holds in specific time intervals. There are several kinds of temporal association rules, including cyclic association rules (i.e., the association rule that occur periodically over time) [6], calendar based temporal association rules [5], etc.  Ann and Wan [1] have introduced the Transitional Patterns that represent patterns whose frequency dramatically changes over time in a transaction database. The transitional pattern captures the dynamic behaviour of the transactional database. They introduce the concept of significant milestones for each transitional pattern, which are specific time points at which the frequency of the pattern increases or decreases most significantly. They presented an algorithm named as TP-Mine algorithm which works in two stages.



IV. PRELIMINARY CONCEPTS As in Wan and An [1], we assume that the transactions in a transaction database D are ordered by their time-stamps, the position of a transaction t in D, denoted by ?(t) and the support of itemset X from the i?th transaction to the j?th transaction is denoted by sup(X,i...j). In addition to that the cover of an itemset X in D denoted by cov (X, D), is the set of transactions in D that supports itemset X. The following definitions in this section are taken from [1].

1. The i?th milestone of a pattern X in D is denoted by ?i(X), is the relative position (expressed in percentage) of the transaction t in D, t is the i?th transaction in cov(X, D).

2. The support of a pattern X before (after) its i?th milestone in D, denoted by supi-(X) (supi+(X)), is the ratio of i (cov(X) - i) to the position of transaction t in D, t is the i?th transaction in cov(X,D).

3. The transitional ratio of pattern X at its i?th milestone in D is denoted by trani(X), is the ratio of (Sup+i(X) ? Sup-i(X)) to the maximum value among the Sup+i(X) and Sup-i(X).

4. Transitional Pattern(TP): - A pattern X is a transitional pattern in D if there exists at least one milestone of X,  ?k(X) belongs to T?, such that: sup+k(X) ? ts, sup-k(X) ? ts and |trank(X) | ? tt .Where ts, tt are pattern support threshold and transitional pattern threshold. Moreover X is called the positive transitional pattern (PTP) when trank(X) > 0 and X is  called the negative transitional pattern (NTP) when trank(X) < 0.

5. Significant frequency ascending milestone (SFAM):- A milestone M, which is in the range of T? is the significant frequency ascending milestone for a positive transitional pattern X with respective to the time period T? with sup-M(X) ?ts, and if the transitional ratio of X at the mile stone M is greater than or equal to the transitional ratios of all other milestones of X which are in the range of T?.

6. Significant frequency descending milestone (SFDM):- A milestone M, which is in the range of T? is the significant frequency descending milestone for a negative transitional pattern X with respective to the time period T? with sup+M(X) ?ts, and if the transitional ratio of X at the mile stone M is greater than or equal to the transitional ratios of all other milestones of X which are in the range of T?.

7. The freq (Xr,n) denotes the number of milestones of pattern X from the r?th partition to the n?th partition.



V. PROPOSED APPROACH We proposed a two phase approach for extracting the frequent patterns, positive (negative) transitional patterns and their significant milestones. We scan the database once in the first phase and we extract the candidate itemsets in this phase. The second phase is used to discover the frequent patterns, transitional patterns and their significant milestones by scanning the database once again.

? p-support(x):- The p-support of an itemset X is the support of X computed based on transactions accumulated up to the current partition from its induction.

A.  Range of T? In order to obtain the reliable values for supi-(X) and supi+(X), the number of transactions before ?i(X) and after ?i(X) should not be too small. In [1] the range of T? was fixed, and as a result we lose the portions of the database which reveals the true transitions of frequent patterns. We have defined T? in terms of user-defined minimum support threshold, it considers all the milestones of a pattern existing in the transactions from u*s*|D|+1 transaction to the transaction |D|-(u*s*|D|)-1, where u is a user defined parameter and 0 < u <1.  As a result the ignoring portions of the database vary with sizes of the databases and also with support values. This has reduced the need of expert for setting the range of T?.

B. First Phase The partition based approach is used to accomplish the task of identifying the candidate itemsets in the database D, where the database D is logically divided into n non- overlapping partitions of P1, P2, P3 ... Pn.

Procedure:  Finding the candidate itemsets  Find Candidates (Database D, Support s) {  1. Partition D into n equal partitions of P1, P2, P3 ... Pn.

2. Load the database in to memory, partition-wise.

3. Scan the loaded partition in to the memory.

4. At the end of each partition decision is taken on an  itemset X in maintained list of candidates C, regarding either to keep it in the list or to remove from the list.

i. An itemset X is inducted into the list if it is newly  found in the current partition and it gains the minimum support in that partition.

ii. An itemset X that is already in the list is removed, if the p-support of the itemset X is less than minimum support threshold.

iii. Itemset X will be kept in the list with it?s p-support, if it?s p-support is greater than or equal to the minimum support threshold.

5. Return C.

} At the end of the first scan, list C contains a few itemsets with their p-support values and are considered as the potential globally-frequent candidates. The itemsets which carry the support count from the first partition itself are declared them as a frequent itemsets.

Clusters induced by candidate itemset X: - For each candidate itemset X, we can have two clusters of transactions D1(X) and D2(X) of D such that X is infrequent in the first cluster (i.e. first r-1 partitions) and X is frequent (i.e. last n-r+1 partitions).

Result-1:- Let D be database and partitioned into n equal size partitions having size |P|.  If s is minsup and r is the partition number at which a candidate X is inducted in to the list at the latest, then X is frequent in D, if (s*|D| - freq(Xr,n)) ? freq(X1,r-1).

Proof:- It is obvious that if (s*|D| - freq(Xr,n) )  > freq(X1,r-1)), then the itemset X is infrequent in the database D.

C. Second Phase Extraction of transitional patterns and their significant milestones in the second cluster is a straight forward one, but it is not the case in the first cluster. In the first cluster, to identify a pattern X as a transitional pattern and a mile stone i as a significant mile stone, we need to know the sup+i (X) of the pattern X. Thanks to the properties of a candidate itemset, where it divides the database into two clusters, and for any frequent itemset X, at any milestone i in the first cluster, the sup+i(X) is always greater than or equal to the minimum support, and is always greater than pattern support threshold. In the first cluster we try to identify the milestones which may become significant for a candidate itemset X. For  every candidate itemset X, at the beginning of the second cluster, we decide whether it is frequent or not and the milestone(s) which were suspected as a significant are really significant or not. Though, if it is not a significant we use this information to find whether it is transitional pattern or not.

D.  Significant Frequency-Descending (Ascending) Milestone:-  The milestones i and j (present in the transactions t1, t2 with time stamps u and v and t2 is in the k?th partition) are identified as candidates for the significant frequency- descending (ascending) milestones for a candidate itemset X in the first cluster, such that the time stamp of j is greater than the time stamp of  i. According to the properties of candidate itemset the sup+i(X) and sup+j(X) are always greater than the minimum support threshold. The sup-i(X) and sup(X, u...v) are to be considered for the identification of most probable candidate for the significant frequency- descending (ascending) milestones of a candidate itemset X.

Lemma-1:- The milestone i? lying in D1(X) is potential significant frequency descending milestone for itemset X if Sup-i (X) > s.

Proof: - According to the properties of candidate itemset, any candidate itemset X and at any mile stone i the sup+i(X) is always greater than or equal to the minimum support threshold, otherwise X will become infrequent in the database D. If the sup-i(X) is not greater than minimum support threshold, then X will not become a negative transitional pattern.

We formulated some claims with which one can prune out some milestones from considering them as candidates for the significant milestones. During the second scan, at the end of each partition, all related candidate frequent itemsets are considered for deciding their milestones if any, and sometimes for declaring as globally infrequent. At the end of the second scan the algorithm reports the frequent itemsets, transitional patterns and their significant milestones.

Let i and j (with i <j) be the two milestones of a pattern X with time-stamps u and v.

Claim-1:- The i?th milestone is a significant frequency descending milestone for X if it satisfies either of the following.

1. Sup(X, u+1?v) < s.

2. Sup(X, u+1?v) < Sup-i(X), Sup(X, u+1?v) > s  and Sup (X, u+1?v) ? (s*|D| -i) / (|D| - i).

Claim-2:- The j?th milestone is the significant frequency descending milestone for X, if Sup(X,u+1?v)  ? Sup-i(X).

Claim-3:- The j?th milestone is the significant frequency ascending milestone for X if it satisfies any one of the condition.

1. Sup-i (X) ? s and Sup-j (X) < s.

2. Sup-i(X) ? s, Sup-j (X) ? s and   Sup(X, u+1?v) ?  Sup-i (X).

3. Sup-i(X) < s, Sup-j(X) < s and    Sup(X, u+1?v) ? Sup-i (X).

Claim-4:- The i?th milestone is the significant frequency ascending milestone for X if Sup(X, u+1?v) ? mpsp and it satisfies any one of the condition.

1. Sup-i (X) < s and Sup-j (X) ? s.

2. Sup-i (X) ? s, Sup-j (X) ? s, Sup(X, u+1?v) >  Sup-i (X).

3. Sup-i (X) < s, Sup-j (X) < s and Sup(X, u+1?v) >  Sup-i (X).

Note:-Here mpsp is the maximum possible Sup+i (X) in D.

In the claim-1 and claim-4 the j?th milestone and in the claim-2 and claim-3 the i?th milestone can be ignored from the consideration of potential significant milestones.

Proof: - Here is a sketch of the proof referred to the claims mentioned above. Let w, x, y, z, and q are the sup+i (X), sup- i(X), sup+j(X),  sup-j(X) and sup(X,u+1...v). The milestone i (j) is the significant frequency descending (ascending) milestone if, xy > wz (wz>xy), since from the definitions of transitional ratio and significant ascending (descending) milestones. From the claim-1first condition, we have, y > w, since q is infrequent. From the lemma-1, we have, x > z.

From these two conclusions we can derive xy > wz. It proves the Claim-1's first condition. From the claim-3's second condition, we have, x ? z, since     q ? x. We have also, y > w, because i is a candidate for a significant frequency ascending milestone. From these two conclusions we can derive xy > wz. This proves the Claim-3's second condition. The remaining conditions of the claims follow the same procedure for to prove them correct. In the following we are presenting the FastTP-Mine algorithm.

E. Algorithm: Finding the transitional pattern.

FastTP-Mine (Database P1, P2...Pn, Support s, ts, tp) {  1. C=Find Candidates (D, s).

2. for all k 1 to n { 3.  for each t in Pk{ 4. for each subset e of t and if e in C{ 5. increment the support count of e; 6. if ?(t) in T? { 7. if t is in the first cluster of e and is a j?th milestone  of e in D{ 8. if  sup-j(e) ? ts{ 9. Find-probable-Milestone using the claims; 10. } 11. }else if it is in the second cluster and it is first  milestone of e in the second cluster{ 12. Resolve-Candidate-Milestones (e) //resolve all of  its candidate significant milestones of e 13. }Else if (sup+j(e) ? ts ){ 14. if tranj(e) ?+ tt {  15. Declare e as a positive transitional pattern if not already declared and test it for significant frequency ascending milestone.

16. }else if tranj(e)? -tt { 17. Declare e as a negative transitional pattern if not  already declared and test it for significant frequency descending milestone.

18. } 19. } 20.  } 21. } 22. } 23. Remove the infrequent itemsets and respective  candidate milestones.

24. }  } //end  In the above algorithm the step 9 uses the Claims mentioned above for deciding the most probable candidate for SAM or SDM, if they fail to decide then, then  this milestone is considered as candidate for both  SAM and SDM. The 23?rd step uses the Result-1 for removing the infrequent itemsets.

F. Procedure:  Resolve-Candidate-Milestones Resolve-Candidate-Milestones (itemset e) {  1. For each candidate milestones u of e{ 2. if  e is frequent{ 3. If (sup+u(e) ? ts { 4. If (tranu(e) ) ? +tt) { 5. Declare e as a positive transitional pattern and store  the milestone which gives maximum transitional ratio.

6. }else If (tranu(e) ) ? -tt) { 7. Declare e as a negative transitional pattern and store  the milestone which gives minimum transitional ratio.

8.  } 9. } 10. } 11. }  } //end  G. Database scans  The FastTP-Mine algorithm runs in only two scans and is the vast improvement over the TP-Mine algorithm in [1].



VI. EXPEREMENTAL RESULTS We tested our FastTP-Mine algorithm on our own synthesized database and summaries of the results shown in the following tables. The TABLE I show the characteristics of   the first synthesized database and its corresponding number of frequent patterns and transitional patterns shown in the TABLE II.

TABLE I.  DATABASE-1 CHARACTERISTICS  Database Number of items  Number of transactions  Partition size   Synthetic Database-1  125 16000 1000  TABLE II.  PATTERN GENERTED FROM DATABASE-1 Number of candidate itemsets  Number of frequent patterns  Number of PTPs  Number of NTP  8,654   695 32 61 Minsup=0.5%                    ts=0.15                                     tt=0.3   The TABLE-III shows the characteristics of   our second synthesized database and the number of frequent patterns and transitional patterns shown in the TABLE-IV.

TABLE III.  DATABASE-2 CHARACTERISTICS  Database Number of items  Number of transactions  Partition size   Synthetic Database-2  85 24000 4000  TABLE IV.  PATTERNS GENERATED FROM DATABAS -2  Number of candidate itemsets  Number of frequent patterns  Number of PTPs  Number of NTP  1986   569 41 26 Minsup=0.6                       ts=0.15                                    tt=0.3   The graph (Figure1) shows how the numbers of candidates are varying with increasing the partition size.

Figure I. Performance comparison between partition size and number of candidate itemsets

VII. CONCLUSIONS Fast TP-Mine algorithm is proposed to mine transitional patterns in less number of scans of the database compared to TP-Mine algorithm and with less computational time.

