WUN-MINER: A NEW METHOD FOR MINING  FREQUENT WEIGHTED UTILITY ITEMSETS

Abstract. In this paper, we propose the WUN-set (Weighted Utility Nodeset) structure, an extension of the Nodeset structure, to solve the problem of mining frequent weighted utility itemsets from a quantitative database. Firstly, some theorems are developed to compute quickly the weighted utility support of an itemset. An algorithm is then proposed for the fast mining frequent weighted utility itemsets. The experimental results on both sparse and dense databases show that the proposed method outperforms existing methods.

Keywords: Data mining, frequent weighted utility itemsets, WUN-set.



I. INTRODUCTION Mining frequent itemsets (FI) plays an important role in  data mining, and thus many algorithms have been proposed to solve this problem such as Apriori [1], FP-Growth [7], FP- Growth* [6], Eclat [26], dEclat [27], DBV-FI [21], Prepost [2], NSFI [23], FIN [3] and Prepost+ [4]. All these methods are carried out on binary databases, in which all items are treated uniformly. It is different from binary databases that quantitative databases have attributes such as quantity and profit of each item in transactions. For example, a customer buy 2 loaves of bread (4$ for each loaf) and 3 bottles of milk (1$ for each bottle) at a supermarket, the binary database reflects only items appearing in the transaction are bread and milk without regard to quantities or prices, by contrast, the quantitative database reflects all these factors. Quantitative dadabases (QDB) are often found in pratical applications and intelligent systems. There are many approaches for mining knowledge from QDB, such as mining high utility itemsets [12, 5, 14, 11, 10, 13], mining frequent weighed itemsets [17, 19, 24, 25, 20, 9, 15] and mining frequent weighted utility itemsets (FWUI) [8, 22, 16].

In recent studies, Vo et al. [22] proposed a MWIT-FWUI algorithm which adopted the IT-tree approach for mining FWUI, although this is rather quite time-consuming as the memory usage is not optimal. Nguyen et al. [16] proposed a MBiS-FWUI algorithm based on the MBiS structure, an improvement of DBV structure [21], which removed all 0-bits from bit-vector, keeping only 1-bits segments. MBiS-FWUI shows more efficiently than MWIT-FWUI on sparse databases. In this paper, we propose a method based on the WUN-set structure, an extension of Nodeset structure [3], to solve the problem of mining FWUI from QDB. First, we use the same definition of FWUI proposed by Khan et al. [8], the reason is that this approach satisfies the downward closure property. Then, the database is scanned and compressed on the WUN-tree, thereby extracting the WUN-sets of 1-itemsets registered on tree. The WUN-set of a 2-itemset is obtained by  considering the descendant-ancestor relationship between each pair of WUN-codes in WUN-sets of two corresponding 1- itemsets. The WUN-set of a k-itemset (k ? 3) is obtained from the intersection of two corresponding (k-1)-itemsets which has a linear complexity. Next some theorems are developed to compute quickly the weighted utility support of an itemset based on its WUN-set, and, in some cases, determine its value without computing the WUN-set. We use a set-enumeration tree [18] to optimize the searching process and remove branches which only contain unsatisfying itemsets. The experimental results on both sparse and dense databases show that the proposed method is more effective than existing methods.

The remainder of this paper is organized as follows.

Section 2 reviews the related works. Section 3 presents the WUN-set structure, concepts, definitions and related theorems.

Section 4 develops the WUN-Miner algorithm for mining FWUI. The experimental results on many different databases are shown in section 5, and then the conclusion and future research directions  are presented in section 6.



II. RELATED WORKS Khan et al. [8] proposed a framework for weighted utility  association rule mining (WUARM), in which the authors given two basic measures (transaction weighted utility - twu and weighted utility support - wus) for mining FWUI.

Vo et al. [22] proposed a MWIT-tree structure for mining FWUI. As it scans the database only once, this method is more effective than previous ones that adopt the Apriori approach.

However, the drawback of this method is that it needs a lot of memory to store tidsets.

Nguyen et al. [16] proposed a MBiS structure, an improvement of DBV structure, to mine FWUI. MBiS removes all 0-bits and only retains consecutive segments of 1- bits in bit-vetor representation of a tidset. MBiS is thus effective on sparse databases, but has no effect when working with dense databases.

Deng et al. [3] proposed a hybric approach using the Nodeset structure to represent binary databases and mine FI.

The method proposed by Deng et al. compresses the database into a tree called a POC-tree, then represents the database and mines FI using the Nodeset structure, which is extracted from the POC-tree. This approach has both the advantages of FP- tree [7] and IT-tree [26] approaches, which are the abilities to compress data on the tree and compute quickly the support using Nodesets intersection, and thus the hybrid approach is very efficient in mining FI [2, 23, 3, 4].



III. BASIC PRINCIPLES Definition 1. A QDB is a triple ?T, I, W?, where T = {t1,  t2,..., tm} is a set of quantitative transactions, I = {i1, i2, .., in} is a set of items, and W = {w1, w2, ?, wn} is a set of weights that correspond to the items in set I. Each transaction tk = {xk1, xk2, ?, xkn}, where xki is the number of products bought of item ith in transaction tk.

Example 1. Table 1 shows an example of QDB. There are a total of six transactions in set T = {t1, t2, t3, t4, t5, t6} and six items I = {A, B, C, D, E, F}, as shown in Table 1A. The set of weights W = {0.8, 0.1, 0.5, 0.9, 0.2, 0.3}, as shown in Table 1B. Transaction t1 = {2, 1, 0, 3, 4, 0} means that customer t1 buys two item A, one item B, three item D, four item E, and does not buy item C or F.

Table 1. An example of QDB A B  Transaction Database Item weight Transaction A B C D E F Item Weight  t1 2 1 0 3 4 0 A 0.8 t2 0 5 0 0 1 1 B 0.1 t3 1 3 0 0 0 3 C 0.5 t4 3 1 1 0 2 0 D 0.9 t5 1 1 2 1 2 0 E 0.2 t6 0 4 2 1 1 1 F 0.3  Definition 2. The transaction weighted utility (twu) of a transaction tk is defined as follows: ( ) = 	? ?	? ( )| ( )|   (1)  where:      - wj is the weight of item ij in transaction tk -  is the quantity of item ij in tk - S(tk) is the number of items in tk Example 2. According to the formula (1), the twu values of  transactions in Example 1 are calculated as shown in Table 2.

Table 2. The twu values of transaction in Table 1  Transaction Formula twu t1 (0.8 ? 2 + 0.1 + 0.9 ? 3 + 0.2 ?4) / 4  1.30 t2 (0.1 ? 5 + 0.2 + 0.3) / 3 0.33 t3 (0.8 + 0.1 ? 3 + 0.3 ? 3) / 3 0.67 t4 (0.8 ? 3 + 0.1 + 0.5 + 0.2 ? 2) / 4 0.85 t5 (0.8 + 0.1 + 0.5 ? 2 + 0.9 + 0.2 ? 2) / 5 0.64 t6 (0.1 ? 4 + 0.5 ? 2 + 0.9 + 0.2 + 0.3) / 5 0.56  Sum of twu values (sumtwu) 4.35  Definition 3. The weighted utility support (wus) of an itemset X is defined as follows: ( ) 	= 		? ( )? ( )? ( )?   (2)  where: t(X) is the set of transactions containing X.

Example 3. The wus values of itemset AB in Example 1 is  calculated using formula (2), as follows: ( ) = (1.30 + 0.67 + 0.85 + 0.64)/4.35	 ? 0.75 We use a threshold called minwus for mining FWUI. An  itemset which has wus values greater than or equal to minwus is called FWUI according to the minwus threshold. Mining FWUI from QDB is the problem of finding all FWUI which satisfy a given minwus threshold.

Definition 4. (WUN-tree) A WUN-tree is a tree consisting of one root labeled as ?null?, and a set of child nodes as the children of the root, where each child node is a tuple ?item-  name, child-list, pre, pos, weight?. item-name is the name of node, which is the name of the item representing the node.

child-list is a list of child nodes of the current node. pre is the order when traveling the tree towards top-down-left-to-right.

pos is the order when traveling the tree towards top-down- right-to-left. weight is the weight of the node, which is determined by the total twu values of the transactions passing that node.

Based on Definition 4, the algorithm for building a WUN- tree is shown in Algorithm 1.

Algorithm 1: WUN-tree construction Input: A QDB and a threshold minwus Output: WUN-tree, the frequent weighted utility 1-itemsets I1 Method name: Construction_WUN_Tree(QDB, minwus) 1.

2.

3.

4.

5.

6.

7.

8.

9.

10.

Scan QDB for the first time and calculate: twu values of the transactions, wus values of the 1-itemsets and sumtwu I1 = set of 1-FWUIs having wus	?	minwus Sort I1 in frequency descending order.

Scan QDB for the second time to build the WUN-tree: Create the root of a WUN-tree, Tr, and label it as "null" for each transaction t in QDB do P = set of items i (i	? 	 ?i?I1) are arranged in order of I1.

Call Insert_Tree(P, Tr) to insert P into the tree.

Scan WUN-tree to generate pre and pos values of each node.

Procedure Insert_Tree(P, Tr) 11.

12.

13.

14.

15.

16.

17.

18.

if P ? ? p1 is the first element of P Consider the child nodes belong to child-list of Tr if	? node N having N.name = p1.name then N.weight  += twu(P) else, create a new child node of Tr as N, where: N.weight = twu(P)  and N.name = p1.name Call recursive function Insert_Tree(P-p1, N)  Example 4. Consider QDB in Table 1 with minwus = 0.5.

After scanning QDB for the first time, we have I1 as shown in Table 3B, which are the 1-itemsets having wus values not smaller than minwus. The items in each transaction are removed if they don?t belong to I1, and the remaining items are arranged in descending order of wus values (Table 3A).

Applying Algorithm 1, a WUN-tree is built as shown in Figure 1. We find that the transactions t1 and t5 have the same prefixes (B, E, A, D) which are integrated into same branch of the tree. The WUN-tree thus represents the entire database with a high degree of data compression, and this means that the size of a WUN-tree is quite small compared to that of an IT-tree.

Table 3. QDB in Table 1 after applying minwus = 0.5 A  B  Sorted transaction database  I1 Transaction B E A D twu  Item wus  t1 1 4 2 3 1.30  B 1 t2 5 1 0 0 0.33  E 0.85 t3 3 0 1 0 0.67  A 0.80 t4 1 2 3 0 0.85  D 0.57 t5 1 2 1 1 0.64 t6 4 1 0 1 0.56  sumtwu 4.35  Definition 5. (WUN-codes of tree nodes) The WUN-code of a node in the WUN-tree is a triple of values (pre, pos, weight) of that node.

Example 5. Consider WUN-tree in Figure 1, node E having WUN-code (2, 3, 3.68) where pre = 2 is the order of node E when traveling the tree towards top-down-left-to-right, pos = 3   SMC_2016    001366      is the order when traveling the tree towards top-down-right-to- left, and weight = 3.68 is the sum of twu values of the transactions passing node E, that is t1, t2, t4, t5 and t6.

Figure 1. The WUN-tree of QDB in Table 3  Theorem 1 [2]. Given two nodes N1 and N2 which have WUN-codes C1(x1, y1, w1) and C2(x2, y2, w2), respectively. N1 is an ancestor of N2 if and only if x1 < x2 and y1 > y2.

Definition 6. (WUN-sets of items) Given a WUN-tree, the WUN-set (WS) of an item is a sequence of all the WUN-codes of nodes registering the item in the WUN-tree.

Example 6. Consider the WUN-tree in Figure 1, we have WUN-set of items E, A and D as follows:  WS(E) = {(2, 3, 3.68)} WS(A) = {(3, 1, 2.79), (6, 4, 0.67)} WS(D) = {(4, 0, 1.94), (5, 2, 0.56)} Note that, it is different with Nodeset  that the WUN-set of  a 1-itemset has one more value which is pos value. The pos value is used to determine quickly the descendant-ancestor relationship between two WUN-codes when building WUN- set of a 2-itemset.

Theorem 2. Given an item A, whose WUN-set is WS(A) = {(x , 	y , w ), (x , y ,w ), ? , (x , y ,w )}. The wus value of item A is calculated as follows:  ( ) = ?? ( )?  (3)  Proof. Assume that an item A is registered on n nodes in the WUN-tree. Let Ti be the set of transactions containing item A and register A on the node (xi, yi, wi). According to the way the WUN-tree is built, we have: = ? ( )?   (a)  Ti	?	Tj = ? with i	?	j (b) Let T(A) be the set of all transactions containing item A,  according to (b) we have: ( ) = ?   (c) According to formula (2), we have: ( ) = ? ( )? ( )? ( )?   (d) So, according to (a) and (c), we have: ? ( )? ( ) = 	? ? ( )? =	?  (e) Then, according to (d) and (e), we have: ( ) = ?? ( )? So, Theorem 2 is proven.

Definition 7. (WUN-sets of 2-itemsets) Given any two  items A1 and A2 such that A1 is before A2 according to the I1  ordering. The WUN-set of 2-itemset A2A1, denote as WS(A2A1), is a subset of A2?s WUN-set, which is defined as follows:  WS(A2A1) = {(prek, weightk)| ? a node registering A1 which is an ancestor of the node corresponding to (prek, weightk)}  Example 7. According to Example 6, we have WS(E) = {(2, 3 3.68)}, WS(A) = {(3, 1, 2.79), (6, 4, 0.67)} and WS(D) = {(4, 0, 1.94), (5, 2, 0.56)}. And as shown in Table 3B, item E is before A and A is before D according to the I1 ordering. We apply Definition 7 to compute WS(DA) as follows:  Scan all WUN-codes of WS(D).

With (4, 0, 1.94): Because node A(3, 1, 2.79) is an ancestor  of node D(4, 0, 1.94), so insert (4, 1.94) into WS(DA).

With (5, 2, 0.56): Because there isn?t any node A which is  an ancestor of node D(5, 2, 0.56), so don?t insert (5, 0.56) into WS(DA).

Finally, we have WS(DA) = {(4, 1.94)}.

Similarly, we have WS(DE) = {(4, 1.94), (5, 0.56)} Definition 8. (WUN-set of k-itemsets, k	?	3) Let XA1 and  XA2 be two (k-1)-itemsets with the same prefix X such that A1 is before A2 according to the I1 ordering. WS(XA1) and WS(XA2) are two WUN-sets associated with XA1 and XA2, respectively. The WUN-set associated with XA2A1 called WS(XA2A1) is defined as intersection of WS(XA1) and WS(XA2). That is, WS(XA2A1) = WS(XA1) ? WS(XA2).

Example 8. According to Example 7, we have WS(DA) = {(4, 1.94)} and WS(DE) = {(4, 1.94), (5, 0.56)}.

And according Definition 8 we have: WS(DAE) = WS(DA) ? WS(DE) = {(4, 1.94)} Theorem 3. Given a k-itemset X (k ? 2), and the WUN-set  of X is WS(X) = {( , ), ( , ), ? , ( , )} . The wus value of itemset X is calculated as follows:   ( ) = ?? ( )?   (4)  Proof. Let itemset X = AmAm-1...A1, where Ai is before Ai+1 in the order of I1, and let (xi, wi) be a WUN-code in the WUN- set of X, according to Definitions 7-8 we have the following conclusions:  (a) There must be a node registering Am having a WUN- code with the same (xi).

(b) wi is the total twu values of all transactions containing X and passing the sub-tree with the corresponding node registering Am as the root.

Ti is the set of transactions containing X and passing the sub-tree which has the root as Am.

After passing root Am each transaction of Ti then goes through the other nodes in the sequence Am-1Am-2...A2 until the end of A1. When passing nodes, the twu value of the transaction is added into the weight of nodes. Therefore, according to (b) we have: = ? ( )?   (c)  Let T(X) be the set of all transactions containing itemset X, according to (a) we have: ( ) = ?   (d)  According to formula (2), (c) and (d) we have: 	 ( ) = ? ( )? ( )? ( )? = ? ? ( )?? ( )? = ?? ( )? Theorem 3 is thus proven.

Null (0, 6)  B: 4.35 (1, 5)  E: 3.68 (2, 3)  A: 0.67 (6, 4)  A: 2.79 (3, 1)  D: 0.56 (5, 2)  D: 1.94 (4, 0)   SMC_2016    001367      Example 9. According to Example 7, we have: WS(DE) = {(4, 1.94), (5, 0.56)} So, we have wus(DE) = (1.94 + 0.56) / 4.35 ? 0.57.

Theorem 4. Given an itemset P and item i( 	 ? 	 ),  if ( ) 	= 	 ( ? { })  then for every itemset X  satisfies ( ? ) = ?	 ? ? , we have: ( ? ) =( ? ? { }).

Proof.

1. First, if  ( ) 	= 	 ( ? { })  it means that a  transaction containing P will also contain i.

We prove this as follows: According to Definition 3, due to ( ) 	=	 ( ? { }) so we have: ? ( )	? ( ) = ? ? ( ?{ })   (a) Without loss of generality, set ( ) 	= 	 	? 	 , where T1  is the set of the transactions containing both P and {i}, T2 is the set of the transactions containing P and not containing {i}.

Due to 1 ? 2 = ?, we have: ? ( )	? ( ) = ? ( )	? 1 + ? 	? 2  (b)  Because T1 is the set of the transactions containing both P and {i}, and according to (a), we have: ? ( )	? = ? ? ( ?{ }) = ? ( )	? ( )  (c)  Assume that there exists a transaction containing P but not containing {i}, so 2 ? ? and  ? 	? 2 > 0.

Then according to (b), we have: ? ( )	? ( ) > ? ( )	? 1   (d) Due to (c) conflicts with (d), so the assumption is wrong.

Such that there does not exist the transaction containing P that does not contain {i}. In other words, all the transactions containing P must also contain {i}.

2. Give a transaction t containing ( ? ), it means it must contain A and P. According to part 1 proven above, t containing P must also contain {i}. So we have: ? ( )	? ( ? ) = ? ? ( ? ?{ })  Thereby leading to: ( ? ) = ( ? ? { }).

So, Theorem 4 is proven.

Theorem 4 will be used to reduce the search space by  quick determining wus values of itemsets without implementing WUN-sets intersections.

Example 10. According to Example 6-7, we have: WS(D) = {(4, 0, 1.94), (5, 2, 0.56)} WS(DA) = {(4, 1.94)} WS(DE) = {(4, 1.94), (5, 0.56)} Since wus(D) = (1.94 + 0.56) / sumtwu = 2.5/4.35 =  wus(DE), we apply Theorem 4 to determine wus(DAE) = wus(DA) = 1.94/4.35 without identifying WS(DAE).



IV. THE ALGORITHM FOR FAST MINING FWUI  We use the set-enumeration tree [18] in order to simplify the mining FWUI process. For example, with QDB in Table 3 we have a set-enumeration tree like Figure 2. We note that when traveling the set-enumeration tree the prefixes of itemsets in a branch are the same. Therefore, in order to save memory, we don?t need to save all of the itemsets, and instead just saving the same prefix and the list of last items is enough.

For example, consider the tree in Figure 2, to present the class  of itemsets {DA, DE, DB} we need only save the prefix D and the list of last items {A, E, B}.

Figure 2. The set-enumeration tree of QDB in Table 3  Applying the definitions and theorems presented in the previous section, we propose the WUN-Miner algorithm for mining FWUI from QDB, as shown in Algorithm 2.

Algorithm 2: WUN-Miner algorithm Input: The weighted database QDB and a threhold minwus Output: FWUI, the set of all frequent weighted utility itemsets.

Method name: WUN-Miner_Algorithm(QDB, minwus) 1. Call Construction_WUN_Tree(QDB, minwus) to generate Tree and I1 2. Scan Tree to generate WUN-sets of items in I1 3. Let FWUI ?I1 4. Create WUS_2FWUI = float [ I1.size() ] [ I1.size() ] 5. Scan the WUN-tree by the pre-order traversal 6. for each node N registering item ix do 7. for each ancestor of N, Na, registering item iy do 8. _2 += N.weight 9. for x = I1.size downto 2 do 10. Pre2 = { ix } 11. L2 = ? 12. for y =x-1 downto 1 do 13. if _2 ? (minwus ? sumtwu ) then 14. L2 ? iy 15. FWUI ? ixiy 16. = 1-FWUI_Intersection( , ) 17. if |L2| >0 then 18. Call Find_FWUI(Pre2, L2, ?) 19. return FWUI Function 1-FWUI_Intersection (WS1, WS2) 20. WS3 = ? 21. x = 1 22. while x  |WS1| do 23. check = false 24. y = 1 25. while (y  |WS2|) and (check = false) do 26. if (WS1y.pre < WS2x.pre) and (WS1y.pos > WS2x.pos) then 27. check = true 28. y++ 29. if check = true then 30. WS3 ? { WS1x.pre, WS1x.weight } 31. x++ 32. return WS3 Procedure Find_FWUI(Prek, Lk, Sk) 33. Prenext = Prek 34. for i = Lk.size downto 2 do 35.  Prenext ? 	 i 36.  Lnext = ? 37.        Snext = Lk 38.  for j = i-1 downto 1 do 39.  WSij = WSi ? WSj 40.  if wus(WSij) ?minwus then 41.  if wus(WSij) = wus(WSi) then 42.  Snext ? 	 j   SMC_2016    001368      43.  if wus(WSij) = wus(WSi) then 44.  FWUI? {Prek ? {Li } ? { Lj } } 45.  Lnext?Lj 46.  if  Snext  ? ? then Find_FWUI_notWS(Prenext, Snext) 47.  if  Lnext  ? ? then Find_FWUI(Prenext, Lnext, Snext,) 48.  remove last item of Prenext 49. Prenext ?L1 50. if Sk ? ? then Find_FWUI_notWS(Prenext, Sk) Procedure Find_FWUI_notWS(Pre, S) 51. Childs = all subset of S 52. for each s	? Childs do FWUI ? {Pre ?	s}  The WUN-Miner algorithm works as follows: First, build WUN-tree and generate WUN-sets of 1-FWUIs. Next, generate WUN-sets of 2-FWUIs and then travel the set- enumeration tree and apply the WUN-sets intersection to determine the WUN-set of k-itemset (k ? 3) from the WUN- sets of two associated (k-1)-itemsets. In the process of computing the WUN-set, apply Theorem 3 and Theorem 4 to find and update the set of FWUI.



V. EXPERIMENTAL RESULTS All experiments presented in this section were performed  on a HP laptop with an Intel Core i5 2.5 GHz, and 8GBs of Ram, running on Windows 7 operating system, with the Visual C# 2012 programming language.

We made experiments on four databases as show in Table 4. In this, three databases Accidents, Connect and Retail were downloaded from http://fimi.cs.helsinki.fi/data/ and modified by adding a random value in the range of 1 to 10 for each item corresponding to its quantity in each transaction, and creating one table to store the weight values of items (random values in the range of 1 to 10). The remaining database Sale_Fact_Sync is from Foodmart2000 in SQL2000. We compared the WUN- Miner algorithm with the recent algorithms MWIT-FWUI [22] and MBiS-FWUI [16], with MWIT-FWUI being more effective with dense databases, and MBiS-FWUI more effective with sparse databases.

Table 4. Summary of the databases  Database Number of items Number of  transactions Average length of transactions Remark  Accidents 468 340,183 33.8 Modified Connect 130 67,557 43 Modified Retail 16,470 88,162 10.3 Modified  Sale_Fact_Sync 1,559 62,609 4.3  A. Comparison of running time  Figure 3. Runtime on Accident database  Figure 4. Runtime on Connect database  Figure 5. Runtime on Retail database  Figure 6. Runtime on Sale_Fact_Sync database  The experimental results in Figures 3-6 show that WUN-  Miner runs faster than MWIT-FWUI and MBiS-FWUI on all kinds of databases (dense and sparse).

B. Comparison of memory usage  Figure 7. Memory usage on Accident database  Figure 8. Memory usage on Connect database  Figure 9. Memory usage on Retail database  Figure 10. Memory usage on Sale_Fact_Sync database  Figures 7-10 show the memory usage of WUN-Miner compared to MWIT-FWUI and MBiS-FWUI when working with the experimental databases. It can be noticed that WUN-     90 80 70 60 45 35  Ti m e( s)  minwus(%)  WUN-Miner  MWIT-FWUI  MBiS-FWUI     96 94 92 90 85 80  Ti m e( s)  minwus(%)  WUN-Miner  MWIT-FWUI  MBiS-FWUI   2 0.8 0.4 0.2 0.08 0.04  Ti m e( s)  minwus(%)  WUN-Miner  MWIT-FWUI  MBiS-FWUI    0.04 0.02 0.01 0.008 0.006 0.004  Ti m e( s)  minwus(%)  WUN-Miner  MWIT-FWUI  MBiS-FWUI     90 80 70 60 45 35  M em  or y( Kb  )  minwus(%)  WUN-Miner  MWIT-FWUI  MBiS-FWUI      96 94 92 90 85 80  M em  or y( Kb  )  minwus(%)  WUN-Miner  MWIT-FWUI  MBiS-FWUI       2 0.8 0.4 0.2 0.08 0.04  M em  or y( Kb  )  minwus(%)  WUN-Miner  MWIT-FWUI  MBiS-FWUI      0.04 0.02 0.01 0.008 0.006 0.004  M em  or y( Kb  )  minwus(%)  WUN-Miner  MWIT-FWUI  MBiS-FWUI   SMC_2016    001369      Miner uses less memory than MWIT-FWUI and MBiS-FWUI on dense databases Accident and Connect. In contrast, for sparse database, such as Retail and Sale_Fact_Sync, WUN- Miner uses more memory than MBiS-FWUI. The reason is that the fragmentation of data on sparse databases leads to an inefficient compression of data on WUN-tree, especially with a very small threshold.



VI. CONCLUSIONS AND FUTURE WORK In this paper, we develop the WUN-Miner algorithm for  fast mining FWUI from QDB based on the WUN-set structure, an extension of Nodeset structure [3]. First we implement the compression and representation of data on the WUN-set structure while ensuring the downward closure property. Then some theorems are proposed for fast computing or determining immediately the wus values of itemsets, and thus mining FWUI by using the set-enumeration tree [18]. The experimental results on both sparse and dense databases show that the proposed algorithm is more efficient than existing methods of mining FWUI.

In the future work, we are going to improve and apply the Nodeset structure for mining data on the others types of databases, such as incremental database or hierachical database.

