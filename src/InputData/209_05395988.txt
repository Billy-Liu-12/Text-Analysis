CRYPPAR: An Efficient Framework for Privacy Preserving Association Rule Mining over

Abstract?Building a real system is one of the major challenges of privacy-preserving data mining (PPDM). In this paper, we propose CRYPPAR, a novel, full-fledged framework for privacy preserving association rule mining based on a cryptographic approach. We use secure scalar product protocols and public- key cryptosystems in CRYPPAR to efficiently mine association rules over vertically partitioned data. We also introduce a partial topology to lower communication cost as much as possible.

Empirical results show that the framework is efficient in privacy- preserving association rules and may become a general frame- work for PPDM systems.



I. INTRODUCTION  Association rules mining, along with classification and clustering, is a key data mining problem in real life. Data mining is conventionally performed with centralized data; i.e., only one party executes the algorithms on its database. Should the parties cooperate to mine a larger database, it could lead to more interesting and accurate results. For example, some hospitals have their own data of swine flu and want to look for symptoms and causes of the developing swine flu. Obviously, they will obtain better results if they collaborate to do the mining tasks on the whole data. Unfortunately, sharing private data such as names, ages, addresses of patients is against the law [7]. Apart from this reason, performing data mining over many parties? data sets did not come true until 2000 because most of the parties were not willing to disclose sensitive data.

Since the pioneer work in 2000 [2][14], there has been growing interest in privacy-preserving data mining (PPDM).

Generally, if several parties want to perform data mining and preserve data privacy, they can either send their data to a third trusted party or securely share data with one another. In real life, a third trusted party does not exist. Hence, all parties must work together using secure protocols to do the mining tasks. PPDM allows two or more parties to jointly perform data mining to achieve global results while keeping their data private.

There are two general approaches in PPDM up till now: randomization [2][3][6][16] and secure multiparty computation [10][11][14][17][19][20] approach. By adding noise to original data, randomization method hides sensitive data. Data mining  is performed on the modified data. After this, reconstruction is done to obtain results that are similar to those if original data were used. This method has been proved to be faster but less accurate and secure than the second approach. Cryp- tography method is based on secure multi-party computation [4][9], which uses a public key to encrypt data. Although this method is more secure and accurate, it demands much more computations involving encryption. We refer the reader to [1] for a more detailed survey on PPDM.

Although much work has been done on PPDM, including association rule mining, there is limited work on the practical aspects of PPDM systems. Goethals et al. [8] introduced a secure version to compute scalar product between two or more parties using public keys and shared portions. Each party holds a random number so that the sum of these numbers is equal to the scalar product. Based on Goethals et al.?s algorithm, Yang et al. [22] conducted experiments on secure scalar product.

Their results showed that computation time dominates the total running time. However, when data is pre-encrypted and saved to a text file which is read when a party wants to obtain the encrypted values of binary numbers, communication time amongst parties becomes a considerable factor. To the best of our knowledge, no work has been so far proposed to build a real framework for association rule mining based on the cryptographic approach.

In this paper, we introduce CRYPPAR (CRYptographic framework for Privacy Preserving Association Rule mining), a full-fledged framework for privacy preserving data mining association rule mining. This framework uses the secure multi- party computation approach; namely cryptography method, to securely perform the mining tasks.

This paper presents an efficient, secure method to perform association rule mining over vertically partitioned data. Our contributions are as follows:  ? CRYPPAR, a novel, full-fledged cryptography-based framework for privacy preserving association rule min- ing. CRYPPAR uses cryptography techniques to compute scalar products, which in turn, are used to compute the supports of frequent itemsets.

Algorithm 1 Privacy Preserving Frequent Itemset Mining in Vertically Partitioned Data.

Input: Party A and B hold private datasets respectively. Both parties agree on a pre-defined support threshold value.

Output: A set of frequent itemset.

1: L1 = {large 1-itemsets} 2: for (k = 2;Lk?1 ?= ?; k + +) do 3: Generate candidate itemsets Ck (apriori algorithm).

4: for all candidate c ? Ck do 5: if all the attributes in c are entirely at A or B then 6: Corresponding party independently calculates  c.count.

7: else 8: Let A have ? of the attributes and B have the  remaining m attributes.

9: Construct ?X on A?s side and ?Y on B?s side where  ?X = ??i=1 ?Ai and ?Y = ? m i=1  ?Bi 10: Compute c.count = ?X ? ?Y = ?ni=1xi ? yi 11: end if 12: Lk = Lk ? c | c.count ? minsup 13: end for 14: end for 15: Result =  ? k Lk  ? We conduct experimental analysis of association rule mining in a large, real-life data set.

? We propose a method to build the CRYPPAR framework which is efficient, applicable to real-life problems and may become the common procedure for constructing real privacy preserving data mining systems.

The rest of this paper is organized as follows. Preliminary work is reviewed in Section II. The CRYPPAR framework is proposed in Section III. Experimental results are presented in Section IV. Finally, conclusion and future work are discussed in Section V.



II. PRELIMINARIES  In this section, we review Privacy Preserving Frequent Itemset Mining algorithm over vertically partitioned data [18], Secure Scalar Product Protocol [8] and Paillier cryptosystem [15], which are core to our framework.

A. Privacy-Preserving Frequent Itemset Mining  Algorithm 1 illustrates the privacy preserving frequent item- set mining proposed by Vaidya and Clifton [18]. Naturally, the main part of a frequent itemset mining task is computing the supports of itemsets, which in turn, are computed using scalar product.

B. Secure Scalar Product  Secure Scalar Product, which has been studied in many papers [5], [18], is one of the most important secure build- ing blocks for PPDM. Goethals et al. [8] proved that  Algorithm 2 Secure Scalar Product for Two Parties  Input: Party A has input vector X = [x1, x2, . . . , xn]T and Party B has input vector Y = [y1, y2, . . . , yn]T .

Output: Parties A and Party B get outputs ra and rb respec- tively such that ra + rb.

1: Party A generates a private and public key pair (sk, pk).

2: Party A sends pk to Party B.

3: for i = 1 to n do 4: Party A sends Party B ci = Epk(xi).

5: end for 6: Party B computes w = ?ni=1c  yi i  7: Party B generates a random plaintext rb.

8: Party A sends to Party B w? = w ? Epk(?rb).

9: Party A computes ra = Dsk(w?) = X ? Y? rb.

many suggested algorithms are insecure and proposed a new cryptography-based algorithm to ensure privacy (Algorithm 2).

In Algorithm 2, E(x) is the encrypted value of plaintext x; D(c) is the decrypted value of ciphertext c. In Step 6, if a additive homomorphic cryptosystem is used, then:  D(w) = ?  xi ? yi (1) This is the dot product of X and Y .

We will use the Paillier cryptosystem, which has the addi- tive homomorphic property, to implement Goethals?s secure scalar product algorithm. The above algorithm is for two parties. It is easy to extend to a multi-party version. Goethals et al. have shown how to securely compute scalar product for multi-parties [8].

C. Public-key Cryptosystems  In this section, we discuss about existing work on public- key cryptosystems. We briefly review the Paillier cryptosystem.

This system is simple but efficient and can be easily imple- mented in the PPDM context. A good survey of public-key cryptosystems has been done by Koblitz and Menezes [12].

Paillier [15] proposed a simple probabilistic asymmetric algorithm for public key cryptography. The system includes key generation, encryption and decryption. Algorithm 3 illustrates how one is able to generate the public key of Paillier cryptosystems. The public (encryption) key is (n, g) and the private (decryption) key is (?, ?). The encryption phase is elaborated in Algorithm 4; the decryption phase is in Algorithm 5. More details are available in [15].

? Additive Homomorphic Property A notable feature of the Paillier cryptosystem is its additive  homomorphic property, which allows one to compute the ciphertext without knowing the plaintext. The detail is as follows.

The product of two ciphertexts decrypts to the sum of their corresponding plaintexts:  D((E(m1, r1)) ?E(m2, r2) mod n2) = (m1 +m2) mod n (2)     Algorithm 3 Key Generation  Input: Key length: ? bits Output: Public key and private key  1: Randomize two large prime numbers, ?/2 bits: p and q 2: Compute n = pq and ? =lcm(p? 1, q ? 1) 3: Select random integer g where g ? Z?n2 4: Ensure n divides the order of g by checking the existence  of the following modular multiplicative inverse:  ? = (L(g? mod n2))?1 mod n  where function L is defined as  L(u) = u? 1  n  5: Return public key pk = (n, g); private key pr = (?, ?)  Algorithm 4 Encryption  Input: Message m ? Zn and pk, pr Output: Ciphertext c ? Z?n2  1: Select random r where r ? Z?n2 2: Compute ciphertext as: c = gm ? rn mod n2  Algorithm 5 Decryption  Input: Ciphertext c ? Z?n2 and pk, pr Output: Plaintext m ? Zn  1: Compute message: m = L(c? mod n2) ? ? mod n  The product of a ciphertext with a plaintext raising g decrypts to the sum of their corresponding plaintexts:  D(E(m1, r1) ? gm2 mod n2) = (m1 + m2) mod n (3) An encrypted plaintext raised to the power of another plaintext decrypts to the product of the two plaintexts:  D(E(m1, r1)m2 mod n2) = (m1m2) mod n (4)  For this property, Paillier cryptosystem can be used in Goethals?s secure scalar product, which is the main algorithm in solving the association rule mining problem.



III. THE CRYPPAR FRAMEWORK  A. Data Model  Association rule mining strictly requires input to be binary data, which is not frequently seen in real-life data. Hence, the framework needs to have a utility to convert any data set, such as nominal data, to a binary data set. An example of input data to the framework is shown in Table I. In this scenario, Party 1 has two attributes: A1, A2; Party 2 has B1, B2; Party 3 has C1, C2.

Apart from the binary requirements, the input of all data must have the same length; i.e., the number of instances are equal because in this paper, we deal with vertically partitioned data.

TABLE I AN EXAMPLE OF PRIVATE DATA OF THREE PARTIES  TID A1 A2 B1 B2 C1 C2 T1 1 0 1 0 1 0 T2 1 1 1 1 0 0 T3 0 1 0 1 1 1 T4 1 0 1 0 1 1 T5 0 1 0 1 0 1  Algorithm 6 Partial Topology Generator for Association Rule Mining  Input: Itemset S.

Output: Partial topology T of parties relates to this item- set.

1: Add Party 1 into T and assign number ID of Party 1 to 1 2: for Each item I in S do 3: Get the Party P has attribute I 4: if P is not in T then 5: Add Party P into T and assign an party ID, T.size 6: end if 7: end for  Missing data values. If data values are missing, all corre- sponding values are assigned values of 0 when converting to binary.

B. The Partial Topology  The network is full connected. Each party is able to com- municate with any other party to exchange data. This section presents how one is able to efficiently create a partial topology to exchange data.

Definition 1 A Partial Topology of a given itemset is a set of parties. Every party has at least one item of that itemset.

Any party may communicate with any other party in the same partial topology.

This definition implies that given an itemset, there is one and only one partial topology. When an itemset becomes a frequent candidate, a partial topology is built by the first party and all related parties is marked by an ID: 1, 2, 3,... This topology is sent along with the data from Party 1 to Party 2, from Party 2 to Party 3,..., and finally from Party n to Party 1. Algorithm 6 shows the way to generate a partial topology according to a given itemset.

The above algorithm intuitively assures minimum commu- nication cost for the system as there are only transfers among parties that have at least one item in the candidate itemset.

When considering an itemset, the parties exchange data in a ring fashion; i.e., party i sends the data to party (i+1 mod n).

Figure 1 is an example of the partial topology for three parties.

In this situation, there are three parties in the partial topology.

The first party has item A, the second has B, the third has C.

They want to jointly compute the support of itemset ABC by applying Algorithm 2.

Fig. 1. A partial topology for three parties  Algorithm 7 Support Computation of an Itemset  Input: Itemset S and its partial topology T .

Output: Support of S.

1: Party 1 looks for its all items in S 2: Party 1 computes data values of its own sub-itemset 3: Party 1 encrypts the data and send to Party 2 (if have) 4: for Each Party i in T do 5: Receives data from Party i? 1.

6: Party i computes data values of its own sub-itemset 7: Computes the values according to Algorithm 2 8: Sends the results to the next Party according to the Party  ID 9: end for  10: Party 1 decrypts the results to get the support of S  C. Support Computation  When all the parties are ready, they start listening for data request on a specific port. Once the partial topology (of an itemset) is established, the first party (coordinator) starts the mining session for that itemset. According to Algorithm 7, the method in which they exchange data is shown in Figure 2, which elaborates the way to compute the support of an itemset of which items belong to three separate parties.

In Step 2 of Algorithm 7, the first party (coordinator) computes data values of its own sub-itemset. For example, refer to the data in Table I, if the framework wants to compute the support of itemset A1A2B1C1, Party 1 computes values of its own sub-itemset A1A2. In this case, the values are [0, 1, 0, 0, 0]. In Step 3, this vector is encrypted and sent to Party 2 according the Partial Topology. Party 2 computes values based on Algorithm 2 and sends values to Party 3.

Party 3 performs similar tasks. Finally, Party 1 receives the encrypted value and decrypts to obtain the support of itemset A1A2B1C1.

D. Rules Generator  Once the first party has the full set of frequent itemsets, it generates association rules subject to a confidence constraint,  Party 1 (Coordinator) Party 2 Party 3  encrypt private data listening  send encrypted data receive data and do relevant task  listening  send encrypted data receive data and do relevant task  listening  send encrypted data  decrypt data to get support  Fig. 2. Sequence diagram for computing support of an itemset related to three parties  Algorithm 8 Rules Generator  Input: A set of frequent itemset SET and confidence thresh- old conf Output: Set of Association Rules: SAR  1: for Each itemset S in SET do 2: Generate all possible sub-itemsets 3: Put all sub-itemsets and corresponding remainders to  HASH 4: for Each sub-itemset SUB and its reminder SUB in  HASH do 5: Calculate confidence of the rule: SUB ? SUB 6: if confidence ? conf then 7: Add the rule SUB ? SUB to SAR 8: end if 9: end for  10: end for  as shown in Algorithm 8. The idea is based on the Apriori property: If an itemset is frequent, then all its sub-itemsets are also frequent. Since all itemsets are contained in HASH with its supports, the task is to remove the corresponding sub- itemsets and compute the confidence for the rule.

E. Main Process  In our systems, there are two kind of parties. The first is the coordinator, which controls the entire process. The second is the other parties called clients. Their responsibilities are different. Hence, the main loops are also different. Algorithm 10 is for coordinator while Algorithm 9 is the way clients use to exchange data.

Each connection to the client or coordinator is for a candidate frequent itemset. According to Figure 2, computing the support of an itemset starts from the coordinator, running over all related parties (by using partial topology), and finally finishing at the coordinator.

Steps 3 and 8 in Algorithm 10 are for synchronization purpose. The coordinator waits until the current itemset is pro- cessed. This helps the system sequentially process candidate     Algorithm 9 Main Loop for Clients  1: Client starts server and listening 2: for Each coming connection do 3: Receive data 4: Do relevant tasks 5: Send data to the next party according to the partial  topology 6: Close connection and listening 7: end for  Algorithm 10 Main Loop for Coordinator  1: Client starts server and listening 2: for Each Itemset do 3: Set flag: thisItemSetDone? False 4: Generate Partial Topology 5: Send Data 6: Listening 7: Receive Data 8: Set flag: thisItemSetDone? True 9: Do relevant tasks  10: end for  itemsets.

F. Security Analysis  This framework is based on two major work: Paillier crytosystem and Goethals? secure scalar product, which has been proved secure [8][15]. Our framework does not disclose any information except for computation in Goethals? algorithm and Paillier?s encryption phase. All data are encrypted be- fore sending. Therefore, we can confidently confirm that our framework performs securely, or in other word, as secure as Goethals? algorithm.



IV. EXPERIMENTAL RESULTS  A. Experiment Setup  The experiments were conducted with three parties con- nected via LAN connection. We used Java on Windows en- vironment and TPC/IP model for communication. Each party has a Windows XP system with hardware configuration: Intel Core 2 Duo 2.33GHz and 2GB of memory.

We used the ?Adult dataset?, which is available at UCI repository [13]. First, we removed the continuous attributes, which cannot be converted to binary data to obtain the dataset consisting of 9 nominal attributes. Then the data are converted to binary before they are divided into three separate vertical parts corresponding to the three parties. The number of binary attributes for each party is shown in Table II. The ?Adult dataset? has 32,561 instances. We truncated it down to 10,000, 20,000, 30,000 instances to be used in our experiments.

The Apriori algorithm parameters are set as follows. Mini- mum support threshold (MST) and minimum confidence thresh- old (MCT) of rules are set to 0.5 and 0.8, respectively. Theoret- ically, the minimum support threshold influences the running  TABLE II THE NUMBER OF ATTRIBUTES OF THREE PARTIES  Party # Attributes 1 21 2 25 3 45  TABLE III TOP FIVE RULES OF THE FIRST 30,000 INSTANCES OF ?ADULT DATASET?  WITH MST = 0.5, MCT = 0.8  Rules Confidence race=White ? native-country=US 0.921 race=White, sex=Male ? native-country=US 0.920 class=?50K, race=White ? native-country=US 0.913 race=White, workclass=Private ? native-country=US 0.913 native-country=US, sex=Male ? race=White 0.906  time much more than the minimum confidence threshold as it determines the number of candidate frequent itemsets, of which the program must compute the supports.

We verified the correctness of the program by comparing the results of our experiments with the Weka toolkit, version 3.5 [21]. It showed that our CRYPPAR?s results are exactly the same as Weka using the same parameters and dataset. The top five association rules according to confidence ranking for 30,000 instances are shown in Table III.

B. Results  We conducted experiments with two changing parameters.

? The length of keys used to encrypted data: 256, 512, 1,024  bits.

? The data size: 10,000, 20,000, 30,000 instances.

We address the total running time, which is computed when  the first party starts mining until it obtains the final results (sets of association rules). The results are in Table IV and illustrated in Figure 3. With 256 bits key for the Paillier cryptosystem, it took around 3, 7, 10 minutes for the data size of 10,000, 20,000, 30,000 instances, respectively. With 1,024 bits key, it took hours to finish the tasks. However, these results are good enough with distributed systems, which often take days to run with the large datasets. To balance between security and running time, we recommend to use 512 bits key, which cost approximately 22, 45, 66 minutes with 10,000, 20,000, 30,000 instances, respectively. These results indicates that the CRYPPAR framework is efficient and applicable to real-life problems.



V. CONCLUSION AND FUTURE WORK  We have proposed CRYPPAR, a full-fledged framework for privacy preserving association rule mining based on cryp-  TABLE IV THE TOTAL RUNNING TIME WITH DIFFERENT KEY LENGTH AND DATA SIZE  (IN SECONDS)  Data size 256 bits 512 bits 1,024 bits 10,000 218 1,371 10,197 20,000 424 2,702 20,393 30,000 641 4,010 30,472     Fig. 3. Total running time with different key length and data size  tographic approach over vertically partitioned data. We also conducted empirical evaluation on CRYPPAR. The results indicated that the method of building it is efficient and may become a general way to do PPDM in real life.

The framework could be more effective in terms of running time if we implement some techniques such as pre-encrypted data values and caching results. As stated by Yang et al.

[22], applying pre-encrypted data values can save up to 90% and caching results [23] can speed up to 70% of the total running time. Also, paralleling the mining process, which helps coordinators not have to wait for other parties, is a promising way to reduce running time. Our future work will try to apply these efficient techniques in efforts to improve the CRYPPAR framework.

