

?AbstractIn this paper, we propose a two-phase fuzzy  mining approach based on a tree structure to discover fuzzy  frequent itemsets from a quantitative database. A simple tree  structure called the upper-bound fuzzy frequent-pattern tree  (abbreviated as UBFFP tree) is designed to help achieve the  purpose. The two-phase fuzzy mining approach can easily  derive the upper-bound fuzzy supports of itemsets through the  tree and prune unpromising itemsets in the first phase, and  then finds the actual frequent fuzzy itemsets in the second  phase. Experimental results also show the good performance of  the proposed approach.



I. INTRODUCTION  In the past, many algorithms for mining association rules  from transactions were proposed [1-3]. Most of the  approaches were based on the Apriori algorithm [1-2], which  generated and tested candidate itemsets level by level. This  processing way might, however, cause iterative database  scans and high computational costs. Han et al. thus proposed  the Frequent-Pattern-tree (FP-tree) structure for efficiently  mining association rules without generation of candidate  itemsets [9] to get the better performance.

Papadimitriou et al. proposed a tree structure called fuzzy  frequent pattern tree (abbreviated as FFPT) to mine fuzzy  association rules [15]. Lin et al. also proposed a fuzzy FP  tree [13] and a compressed fuzzy frequent pattern tree  (abbreviated as CFFP tree) [14] to mine fuzzy frequent  itemsets. Different sorting strategies were used in the two  approaches to construct tree structures.

In this paper, we propose a two-phase mining approach to  avoid the overhead of the attached arrays in the CFFP tree. A  simple tree structure called the upper-bound fuzzy  frequent-pattern tree (abbreviated as UBFFP tree) is  designed to help mine fuzzy frequent itemsets from a  quantitative database. Based on the concept, the  UBFFP-growth mining approach is proposed, which adopts  a two-phase approach to drive fuzzy frequent itemsets from  an UBFFP tree. Experimental results also show that the  proposed UBFFP tree has a better performance than the  C. W. Lin is with the Department of Computer Science and Information  Engineering, National Cheng Kung University, Tainan, 701, Taiwan, R.O.C.

(e-mail: p7895122@mail.ncku.edu.tw).

Tzung-Pei Hong is with the Department of Computer Science and    Information Engineering, National University of Kaohsiung, Kaohsiung,  811, Taiwan. He is also with the Department of Computer Science and  Engineering, National Sun Yat-sen University, Kaohsiung, 80424, Taiwan,  R.O.C. (corresponding author; phone: +886+7+5919191; fax:  +886+7+5919374; e-mail: tphong@nuk.edu.tw).

W. H. Lu is with the Department of Computer Science and Information  Engineering, National Cheng Kung University, Tainan, 701, Taiwan, R.O.C.

(e-mail: whlu@mail.ncku.edu.tw).

CFFP tree both in the execution time and the number of tree  nodes.



II. REVIEW OF RELATED WORKS  A. Mining Algorithms for Fuzzy Association Rules  In the past, Srikant et al. proposed a quantitative  association rule mining method to find association rules by  partitioning the quantitative database and transforming the  problem into binary one [17]. The fuzzy set theory is  concerned with quantifying and reasoning using natural  language. Chan et al. thus proposed an F-APACS algorithm  to mine fuzzy association rules [4]. Kuok et al. proposed a  fuzzy mining approach to handle numerical data in databases  and to derive fuzzy association rules [12]. Hong et al. then  proposed a fuzzy mining algorithm to mine fuzzy rules from  quantitative databases [10].

As to using a tree structure to fuzzy data mining,  Papadimitriou et al. proposed a tree structure called fuzzy  frequent pattern tree (abbreviated as FFPT) to mine fuzzy  association rules [15]. Lin et al. also proposed a fuzzy  FP-tree structure to mine fuzzy association rule [13]. In that  approach, the fuzzy regions in each transaction were sorted  in a descending order of their fuzzy values in that transaction.

Two transactions with the same fuzzy regions but different  orders were put into two different paths of the tree. They  then proposed a novel tree structure called the compressed  fuzzy frequent pattern tree (CFFP tree) [14] to merge the  branches with the same fuzzy regions but different orders.

Although the node number in the CFFP tree could be  significantly reduced, each node in the tree had to keep the  membership value of the fuzzy frequent 1-itemset within it  as well as the membership values of its super-itemsets in the  path. Some additional memory overloads were thus needed.

Some related researches about fuzzy mining are still in  progress [5-6, 16].

B. The FP-Growth Algorithm  Han et al. proposed the Frequent-Pattern-tree structure  (FP-tree) and the FP-growth algorithm for efficiently mining  frequent itemsets without generation of candidate itemsets  [9]. The mining algorithm consisted of two phases. The first  phase focused on constructing the FP-tree from a database,  and the second phase focused on deriving frequent patterns  from the FP-tree. The tree construction process was executed  tuple by tuple, from the first transaction to the last one. After  the FP tree was constructed from a database, the FP-growth  mining algorithm was then executed to find all frequent  itemsets [9]. A conditional FP tree was generated for each  frequent item, and the frequent itemsets with the processed  item could be recursively derived from the conditional  A Two-Phase Fuzzy Mining Approach  Chun-Wei Lin, Tzung-Pei Hong and Wen-Hsiang Lu  978-1-4244-8126-2/10/$26.00 2010 IEEE  FP-tree structure. Several other algorithms based on the  FP-tree structure have also been proposed [8, 11].



III. THE PROPOSED UBFFP CONSTRUCTION ALGORITHM  A. The UBFFP Tree Construction Algorithm  The proposed mining approach integrates the fuzzy-set  concepts, the FP-tree-like algorithm and the two-phase  processing way to efficiently derive fuzzy frequent itemsets  from quantitative transactions. It first constructs an UBFFP  tree from the given transactions and then uses the two-phase  UBFFP tree to mine frequent fuzzy itemsets from the tree.

The UBFFP tree construction algorithm is stated as follows.

The UBFFP tree construction algorithm:  INPUT: A quantitative database consisting of n  transactions and m items, a set of membership  functions, and a predefined minimum support  threshold s.

OUTPUT: A constructed UBFFP tree.

STEP 1: Transform the quantitative value vij of each item Ij  in the i-th transaction into a fuzzy set fij represented  as (fij1/Rj1 + fij2/Rj2 + + fijhj/Rjhj) using the given  membership functions, where hj is the number of  fuzzy regions for Ij, Rjl is the l-th fuzzy region of Ij,  jhl ??1 , and fijl is vijs fuzzy membership value  in region Rjl.

STEP 2: Calculate the scalar cardinality countjl of each    fuzzy region Rjl in all the transactions as:  ?  ?  ?  n  i  ijljl fcount   .

STEP 3: Find max-countj )(1 jl  h  l countMAX j?? for j = 1 to m,  where hj is the number of fuzzy regions for item Ij  and m is the number of items. Let max-Rj be the  region with max-countj for item Ij. It will then be  used to represent the fuzzy characteristic of item Ij  in the later mining process.

STEP 4: Check whether the value max-countj of a fuzzy  region max-Rj, j = 1 to m, is larger than or equal to  the predefined minimum count n*s. If a fuzzy  region max-Rj satisfies the above condition, put the  fuzzy region with its count in L1. That is:  L1 = {max-Rj | max-countj? n*s, 1? j?m}.

STEP 5: While executing the above steps, also find the  occurrence number o(max-Rj) of each fuzzy region  max-Rj in the quantitative database. It is used to  decide the item order later.

STEP 6: Build the Header_Table by keeping the fuzzy  regions in L1 in the descending order of their  occurrence numbers.

STEP 7: Remove the fuzzy regions of the items not existing  in L1 from the transactions of the transformed  database. Sort the remaining fuzzy regions in each  transaction according to the order of the fuzzy  regions in the Header_Table.

STEP 8: Initially set the root node of the UBFFP tree as  root.

STEP 9: Insert the transactions in the transformed database  into the UBFFP tree tuple by tuple by the  following substeps.

Substep 9-1: If a fuzzy region max-Rj in the  currently processed i-th transaction    has appeared at the corresponding  path of the UBFFP tree, add the  membership value of the region  max-Rj in the transaction to the node  with max-Rj;  Otherwise, add a new node with  max-Rj to the end of the  corresponding path and set the  membership value of the region  max-Rj in the currently processed i-th  transaction as the value in the node.

Substep 9-2: Insert a link from the node of max-Rj  in the last branch to the current node.

If there is no such a branch, insert a  link from the entry of max-Rj in the  Header_Table to the current node.

After STEP 9, the final UBFFP tree is built. In STEP 9, a  corresponding path is a path in the tree which corresponds to  the fuzzy regions to be processed in a transaction according  to the order of fuzzy regions appearing in the Header_Table.

B. An Example  Assume the quantitative database shown in Table I is used  as the example. It consists of 8 transactions and 5 items  denoted A to E. The number behind an item represents the  amount of the item purchased.

TABLE I  THE QUANTITATIVE DATABASE IN THE EXAMPLE  TID Items  1 A:5, C:10, D:2, E:9  2 A:8, B:2, C:3  3 B:3, C:9  4 A:5, B:3, C:10, E:3  5 A:7, C:9, D:3  6 B:2, C:8, D:3  7 A:5, B:2, C:5  8 A:3, C:10, D:2, E:2  Also assume the predefined minimum support threshold is  set at s = 30% and the fuzzy membership functions shown in  Figure 1 are used for all the items.

In this example, amounts are represented by three  linguistic terms as Low, Middle and High. Thus, three fuzzy  membership values are produced for each item according to    the predefined membership functions. Note that the  proposed approach also works when the membership  functions of the items are not the same and the function  numbers are arbitrarily given. The UBFFP tree is  constructed from the given transactions as follows.

0      1   6                   11 Amount  Low Middle High   Membership  Value  Fig. 1.  The membership functions used in the example.

The quantitative values of all the items in the transactions  are represented as fuzzy sets, which are shown in Table II.

TABLE II  THE FUZZY SETS TRANSFORMED FROM THE DATA IN TABLE I  TID Items   0.2 0.8 0.2 0.8 0.8 0.2 0.4 0.6  ,  ,  ,  )  . . . . . . . .A Low A Middle C Middle C High D Low D Middle E Middle E High  ?? ? ?   0.6 0.4 0.8 0.2 0.6 0.4,  ,  . . . . . .A Middle A High B Low B Middle C Low C Middle  ??   0.6 0.4 0.4 0.6,  . . . .B Low B Middle C Middle C High  ??  4 LowEMiddleEHighCMiddleCMiddleBLowBMiddleALowA .

6.0  .

4.0  .

8.0  .

2.0,  .

4.0  .

6.0,  .

8.0  ..

2.0  ?????   0.8 0.2 0.4 0.6 0.6 0.4  , ,  . . . . . .A Middle A High C Middle C High D Low D Middle  ??  6 LowDMiddleDHighCMiddleCMiddleBLowB .

6.0  .

4.0  .

4.0  .

6.0,  .

2.0  .

8.0  ????   0.2 0.8 0.8 0.2 0.2 0.8, ,  . . . . . .ALow A Middle B Low BMiddle C Low C Middle  ??   0.6 0.4 0.2 0.8 0.8 0.2 0.8 0.2, ,  ,  . . . . . . . .A Low AMiddle C Middle C High D Low D Middle E Low E Middle  ??  ?  Since the counts of (A.Middle), (B.Low), (C.High) and  (D.Low) are larger than 2.4, these four fuzzy regions are put  in the set of L1, which will be used to construct the UBFFP  tree later. The fuzzy regions in L1 are then sorted in the  descending order of their occurrence numbers and are put in  the Header_Table. The fuzzy regions not existing in L1 are  removed from the transactions from Table II. The remaining  fuzzy regions in each transaction are then sorted according to  the order in STEP 6. After this step, the updated transactions  are shown in Table III.

The root of the UBFFP tree is initially set as root. The    updated transactions in Table III are used to construct the  UBFFP tree tuple by tuple from the first transaction to the  last one. The resulting Header_Table and the constructed  UBFFP tree are shown in Figure 2.

Header_Table  Items Count  A.Middle 4.2  C.High 4.0  B.Low 3.6  D.Low 2.8  root  A.Middle  4.2  C.High  3.0  D.Low  2.2  B.Low  1.6  C.High  1.0  B.Low  1.4  D.Low  0.6  B.Low  0.6  Fig. 2.  The finally constructed UBFFP tree.



IV. THE PROPOSED UBFFP-GROWTH MINING ALGORITHM  After the UBFFP tree is constructed, the desired fuzzy  frequent itemsets can then be derived by the proposed  UBFFP-growth mining algorithm through the tree. It is  stated as follows.

TABLE III  THE UPDATED TRANSACTIONS AFTER STEP 7  TID Frequent fuzzy regions   0.8 0.8 0.8, ,  . . .A Middle C High D Low   0.6 0.8  ,    . .A Middle B Low   0.6 0.6,  . .C High B Low  4 LowBHighCMiddleA .

6.0,  .

8.0,  .

8.0   0.8 0.6 0.6, ,  . . .A Middle C High D Low  6 LowDLowBHighC .

6.0,  .

8.0,  .

4.0   0.8 0.8,  . .A Middle B Low   0.4 0.8 0.8  , ,  . . .A Middle C High D Low  A. The Mining Algorithm  The proposed UBFFP-growth mining algorithm processes  the fuzzy frequent 1-itemsets in the Header_Table one by  one and bottom-up. It is divided into two phases. In the first  phase, the approach first finds the upper-bound fuzzy  supports of itemsets through the tree using the minimum  operator for fuzzy union. In the second phase, the transferred  database is then re-scanned to find the actual values of the  remaining candidate fuzzy itemsets, and output the desired  ones to users. The UBFFP-growth mining algorithm is  described below.

The UBFFP-growth mining algorithm:  INPUT: The constructed UBFFP tree, its corresponding  Header_Table, the transferred database, and the  predefined minimum support threshold s.

OUTPUT: The fuzzy frequent itemsets.

STEP 1: Process the fuzzy regions in the Header_Table one  by one and bottom-up by the following steps. Let  the currently processed region is max-Rj.

STEP 2: Find all the nodes with the fuzzy region max-Rj in  the UBFFP tree through the links initially from the  Header_Table.

STEP 3: The super-itemsets in the path of the currently  processed node are thus traced to generate the  fuzzy k-itemsets recursively (k ? 2). Its  upper-bound value is thus set as the minimum  operator of the generated fuzzy regions. The  generated fuzzy itemsets are then against the  predefined minimum count to find the satisfied  fuzzy k-itemsets. The satisfied fuzzy k-itemsets are  used to generate fuzzy (k+1)-itemsets level-wise.

This iteration is then processed until no more fuzzy  itemsets are generated.

STEP 4: Sum the values of the same fuzzy itemsets  together.

STEP 5: If the summed value of a fuzzy itemset in STEP 4  is larger than or equal to the predefined minimum  count (n*s), add it to the set C.

STEP 6: Repeat STEPs 2 to 5 for another fuzzy region until  all the fuzzy regions in the Header_Table are  processed.

STEP 7: The transferred database in STEP 7 in the  construction part of the UBFFP tree is then  re-scanned to get its actual value of each candidate  fuzzy itemset in C against the predefined minimum  count. Output the satisfied candidate fuzzy  itemsets as the fuzzy frequent itemsets.

B. An Example  For the constructed UBFFP tree in Figure 2, the proposed  UBFFP-growth mining algorithm finds the fuzzy frequent  itemsets as follows.

The fuzzy regions in the Header_Table are processed one  by one and bottom-up. In this example, the fuzzy regions are  processed in the order of D.Low, B.Low, C.High and  A.Middle. The fuzzy region D.Low is first processed.

The nodes with the currently processed fuzzy region  D.Low in the UBFFP tree are found. The super-itemsets in  the paths of the processed nodes are then used to form the    candidate fuzzy itemsets recursively. The upper-bound  values of the same fuzzy itemsets are summed together. In  this case, there are two same fuzzy 2-itemsets of (C.High,  D.Low) and their upper-bound values are summed together  as 2.8. It is thus considered as the candidate fuzzy itemsets.

The above steps are repeated for another fuzzy region until  all the fuzzy regions in the Header_Table are processed.

The transferred database in Table III is then re-scanned to  find the actual fuzzy supports of the derived itemsets after  STEP 6. After that, the finally derived fuzzy frequent  itemsets are shown in Table IV.

TABLE IV  THE FINALLY DERIVED FUZZY FREQUENT ITEMSETS  1-itemsets  Itemset Fuzzy support  A.Middle 4.2  B.Low 3.6  C.High 4.0  D.Low 2.8  2-itemsets  Itemset Fuzzy support  (A.Middle, C.High) 2.6  (C.High, D.Low) 2.6

V. EXPERIMENTAL RESULTS  The experiments were performed in Java on an Intel Core  2 Duo PC with a 1.8G Hz processor and 2G main memory,  running the Microsoft Windows XP operating system. A real  dataset called mushroom was used in the experiments [7].

Random quantitative values from the range [1, 11] were  assigned to the items in the transactions in a uniform  distribution. The quantitative database was then transferred  into fuzzy regions by the predefined membership functions.

Two and three membership functions for each item were  tested, respectively. Figure 3 shows a comparison of the  execution time by the fuzzy FP-tree approach [13], the  compressed fuzzy frequent-pattern (CFFP) tree approach  [14] and the proposed two-phase approach on the UBFFP  tree when there were two membership functions for an item.

The execution time included the tree construction and the  mining. The minimum support thresholds were set from 43%  to 47%, with 1% increment each time.

Fig. 3.  The execution time of the three approaches for two fuzzy regions.

It is obvious from Figure 3 that the proposed two-phase  algorithm ran faster than the other two in different minimum  support thresholds. The numbers of tree nodes generated  from the three algorithms for two fuzzy regions are shown in  Figure 4, where the two lines for the CFFP tree and the  UBFFP tree are the same.

Fig. 4.  The numbers of tree nodes generated from the three approaches for  two fuzzy regions.

It could be seen from Figure 4 that the numbers of nodes  in the CFFP tree and in the UBFFP tree were the same and  less than those in the Fuzzy FP tree. This was because the  building of both the CFFP tree and the UBFFP tree followed  the descending occurrence frequencies of fuzzy regions, but  the construction of the fuzzy FP-tree followed the  descending membership values of fuzzy regions in each  transaction. In the fuzzy FP-tree approach, two transactions  with the same fuzzy regions but different orders were put  into two different paths of the tree. The fuzzy FP tree was  thus loose and huge. Besides, the UBFFP tree didnt need to  store the additional array in each tree node, but the CFFP  needed.



VI. CONCLUSION  In this paper, we have simplified the CFFP tree structure  to avoid storing the additional arrays when constructing the  tree. We have also proposed a two-phase fuzzy mining  algorithm to find fuzzy frequent itemsets based on the tree.

The approach can easily derive the upper-bound fuzzy  supports of itemsets through the tree and prune unpromising  itemsets in the first phase, and then finds the actual frequent  fuzzy itemsets in the second phase. Experimental results  have also shown that the proposed approach generates the  same number of tree nodes as the CFFP-tree algorithm, but  less than the fuzzy FP-tree algorithm. Besides, the proposed  approach also ran faster than the other two.

