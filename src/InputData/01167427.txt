AN INCREMENTAL OUTLIER FACTOR BASED  CLUSTERING ALGORITHM

Abstract: Although many clustering algorithms have been proposed,  seldom is fonwd on incremental databases. This paper introduces M outlier factor based clustering algorithm, OFCA, which can discover c l u s t e ~  with outlier factor parametem determined easily. An incremental clustering algorithm, IOFCA, is also presented to apply to periodically incremental euvironmenL  Key words: Clustering; Outlier factor; Clustering parameter; Incremental algorithm  1 Introduction  Clustering is a kind of task of data mining whose goal is to identify valid, novel, potentially useful, and ultimately understandable patterns in data. Clustering groups a data set to maximize the intra-class similarity and minimize the interclass similarity without a predefined class attribute.

Many databases are dynamic, i.e. many updates (insertion or deletion) occur. Unfortunately, there are few clustering algorithms applicable to deal with incremental databases, and to verify world work because of their parameters' problem. The problem of incrementally updating mined patterns on changes of the database, however, has just recently started to receive more investigation. Literature [l] and literature [2] propose efficient methods for incrementally modifying a set of association rules mined from a database. Literature [3] introduces generalization algorithms for incremental summarization in a data warehouse environment. Literature [4] proposes the fmt inatmental clustering algorithm in a data warehouse environment.

DBSCAN, like most clustering algorithms, is very sensitive to the user-defined parameters, and the more difficult thing for users is to determine the parameters. In order to resolve the problem, in this paper, we present a clustering algorithm based on DBSCAN "I, and an incremental one based incremental DBSCAN 14'. DBSCAN is an efficient clustering algorithm for metric databases.

Due to the density-based nature of DBSCAN, the insertion or deletion of an object affects the current clustering only in the neighborhd of this object.

The rest of this paper is organized as follows. We briefly introduce the clustering algorithm DBSCAN and  0-7803-7508-4/02/$17.00 e 0 0 2  IEEE  incremental DBSCAN in section 2. In section 3, we pn:sent an outlier factor based clustering a l g o r i t h m 4 F C A .  We introduce an incremental clustering algorithm-IOFCA based on OFCA in section 4. Section 5 concludes with a summary and some directions for future research.

2 Brief description and analysis of the algorithms DBSCAN and incremental- DBSCAN  The key idea of density-based clustering is that for each object of a cluster the neighborhood of a given radius (Eps) has to contain at least a minimum number of objects (MinF'ts), i.e. the cardinality of the neighborhood has to exceed some threshold.

We will introduce the two algorithms briefly and make a short analysis of it. Read [4] and [5] for a detailed presentation of the two algorithms.

The procedure of DBSCAN finding clusters is as follows.

DBSCAN searches for clusters by checking the Eps- neighborhood of each point in the database. If the Eos- neighborhood of a point p'contaios more than MinFts, a new cluster with p as a core object is created. DBSCAN then iteratively collects density-reachable objects directly from these core objects, which may involve the merge of a few density-reachable clusters. The process terminates when no'new points can be added to any cluster. If a spatial index is used, the computational complexity of DBSCAN is O(nlogn), where n is the number of database objects.

Otherwise, it is O(n*n)'61.,The algorithm is very sensitive to the user-defined parameters, and the parameters are difficult to determine. Slightly .different settings of the global parameters may lead to very different clusters of the data. For example, in the data set depicted in Figure 1, with different parameters, the cluster result may be A, B, C; or B, C; or only C. In this paper, we present a outlier factor based clustering algorithm-OFCA, which first finds the set of the neighbors of a non-outlier object, and then extends the cluster by finding all object whose outlier factor with respect to (w.r.t.) the set less than a'threshold. When no object can be added to any cluster, the procedure is over.

Since the outlier factor has a strait range, and easy to determine, OFCA is efficient and practicable. It can discovery arbitrary shaped clusters, and has strong ability of handling noise.

mailto:hnzhouyf@sina.com   With the update of databases, the mined patterns must be up to date. Due to the large size of the databases and the high time complexity of clustering algorithms, it is highly desirable to perform these updates incrementally. An incremental DBSCAN algorithm is already presented, but this algorithm is difficult to practise, for it is sensitive to parameters, and parameters are difficult to determine. .Then we present IOFCA based OFCA, and succeed in solving this problem.

3 OFCA-an outlier factor based clustering algorithm  3.1 The notions of cluster based outlier factor  We will first give some notions with respect to our algorithm.

Definition 1: (reachability density of an object p) pG C, OE C. The reacbability density of p with respect to set C, is defined as:  reach - dist, ( p ,  0)  IC1 is the cardinal number of set C.

Read [7] for a detailed presentation of define of'reach- dist(p.0).

Definition 2: (outlier factor of an object p) The outlier factor of p is defined as: p@i C, O E  C. Outlier factor of p with respect to set C, is defined as:  The define of Ird(o) is in [7] Definition 3: (outlier) pE D, thrl,, is positive real, if LOFk(p)>thrlof, then we say p is an outlier m e  define of LOF(o) is in [7]).

Definition 4: (reachability density reachable) Object p with respect to cluster C is reachability density reachable, if LOFk(p)<th?, and OFc(p)<thrlof.

Definition 5: (core set) N*(p)"' is the k-nearest neighbors set of non-outlier p. we can obtain Nk0(p) by deleting outliers form the set, then Nb(p) is the core set of cluster C which contains p.

Definition 6 (cluster) D is object database, Nk.(p) is core set of ,cluster C which contain p. first, C=Nko(p); cluster C with respect to k and thr,,, is a nou-empty subset of D satisfying the following conditions: qE D, if q w.r.t. k and thrIof is reachability density reachable form C, then C=[q) U C.

Definition 719': (SBN-path, set based nearest neighbor path)  A set based nearest path, or SBN-path, from p l  in G is a sequence (plrp2. ...,pn), such that for all l<=i<=n-l, pi+l is the nearest neighbor of set [PI ,.., pi] in {pi+l ,.... pn).

Imagine that a set initially contains object pI only. Then it goes into an iterative expansion process. In each iteration, it picks up its nearest neighbor among the remaining objects.

If its nearest neighbor is not unique, we can impose a pre- defined order among its neighbors to break tie. Thus an SBN-path is uniquely determined. An SBN-path indicates the order in.wbicb the nearest objects are presented.

3.2 Algorithm description . .  , .

i  . . b  I , ..

OFCA is a reachability density based clustering algorithm. The algorithm grows regions with sufficiently high reachability density into clusters by discarding the outliers and adding objects that are deemed to be the members of the'clusters, and can discover arbitrary shaped clusters in spatial databases with noise. It defines a cluster as a maximal set of reachability density reachable points.

Now, we show the process of OFCA finding clusters.

First, OFCA finds a core set of the cluster C which contains any non-outlier p, then finds all objects form the core set, when aU objects in data set D are marked as member of some cluster or outlier, the algorithm is over.

Cluster structure description is as follows: CLASS Cluster Class , .

( clusterID: SBN-path;  ......

I  Algorithm description is presented as follows: OFCA(SetOfPoint,k,thr~~~) fori fmm 1 to SetOfPointsize do  from the set point,=getNOP(i);//getNOP(i) can find a non-outlier object  CoreSet=getCoreSet(point,);// obtain the core set ExpandCluster(CoreSet,k,thr~of,clusterID);//expand a core  set ,obtain a cluster C end for End; //OFCA  procedure that is presented as follows: ExpandCluster(CoreSet,k,thrl~f,clusterID) For i=l to CoreSetsize do  from the CoreSet  Expandcluster procedure is the most important  Point,=getnearestPoint(CoreSet) //find nearest object  If LOFk(point,)<thrIof then //judge the point is or not an     outlier If OFc(pointJ<thriot then //judge the point is or not  reachability density reachable C = C u  {poinq);  clusterID= clusterID+l; //Mark cluster C; Else  return C; Else  clusterID =(NOISE); //mark the outlier O=O U [ pointJ;//place the outlier in the outlier set 0  Endfor clusterID= clusterJD+l; //mark cluster C; return C, End IExpandCluster  3.3 Performance evaluation  In proceeding, OFCA scans the database D, computes core set in the neighbors, and expands the clusters to form the Core Set to some near object. Its time complexity is 0 (n* (N+M)), n is the size of the database D. N close to k, is the number of neighbors of the object. M is close to N.

Thus, the time complexity of OFCA is close to that of DBSCAN.

Theorem 1??: the LOF value of point deep in cluster C is quite close to 1; the LOF value of point in &e bounds of cluster C is also close to 1, and has tightness in upper and lower bounds.

In DBSCAN, the parameters, Eps and MinPts, are difficult to determine, and there is a stmng dependent relationship between Eps and M i n k .  But OFCA is very different. Firstly, due to theorem 1, thrlof is easy to determine, and the value of tbrbr is often obtained in [1.3, 1.51, that known from [7] and [9]. Secondly, we can know the appropriate value range of k from [7]. in general, the range is [IO, 501. Finally, the dependent relationship between k and thriof is weak. When k changes, M F  value goes up and down, but would stabilize to some value in the upper and lower bound. Therefore, in OFCA, the parameters, k and thrIf, are easier to determine than the parameters of DBSCAN, Eps and M i n k .  Moreover, due to above parameters? characters and the algorithm process, OFCA is not so sensitive as DBSCAN for the change of parameters, and does not appear the situations of Figure 1.

4 IOFCA-n incremental algorithm of OFCA  Assuming we have got a set of clusters using OFCA.

. When new data is inserted or original data is deleted, we  must modify the existed clusters to reflect the changes. Let D be the inserted data to D, and D? be the deleted data from D. Since updates can be seen as a series of insertions and deletions, we only, consider insertions and deletions.

We present IOFCA based OFCA. just like containing incremental DBSCAN from .DBSCAN. The difference is that the skucture and procedure of our algorithm can handle the update easily, and our algorithm is very practicable.

The s t~c tu re  of the object of SBN-path in OFCA is as follows: CLASS object I clusterm; preobjectJ/ the before object (such as q) of object p in  predistance: //the distance between p and q afterobject;// the after object (such as q) of object p in  SBN-path  SBN-path  I 4.1 Insertion  ......

There are tbree cases considered creation of a new cluster, absorption of the object, mergence of some clusters into one cluster.

We have existing clusters: C&. .... Cn; D? is the ins,erted data set.

Fmcedure InsCluster(CSet. D?) //CSet point to the existing clusters; for i=l to D?size do  outlier if LOFk(di)&lof then / I  judge the point di is or not an  for j=l to n do if d; is only reachability density reachable from C,  then Cj=Cju Idi); /idi is absorbed in C,: OrderSBNpath(Cj): //obtain new SBN-path Return Cj;  if di is reachability density reachable from some  Cj=Cj, U Cj, U ... ; // mergence these clusters,. and  OrderSBNpath(C,j: // obtain new SBN-path Rehun C,;  different clusters CjI,Cjz, ... then clustered is the minimum clusterID  //otherwise, d; can compose new cluster with other  Q=QU 141: objects; place di in Q, use OFCA cluster over Q after all  Endfor  O=O U { dJ : //place di to outlier set 0 Else  Endfor End // procedure  4.2 Deletion  Three cases are considered: producing some outliers: splitting cluster: removing cluster.

Dennition 8: (follow set of object p)  In our SBN-path, if pi's preobject is p. we say pI is p?s follow; similar, PI have some follow objects, we say these objects are p?s follows. Thus, we can obtain the objects that follow p. the set of these objects, called follow set of object P.

From the idea and the structure of our algorithm, we can easily obtain the follow set of object p. Then, we can easily handle the deletion of the object. Using follow set make the three cases similar, we only introduce the case of splitting cluster: Procedure SplitCluster(C, p) getFollowSet(p):// get follow set ( p I , ~ .  ....pm), the set of the remain object in C is CR if (OF,, @~)>thrlr) and LOFdpl)&~,, then //PI w.r.1. CR is outlier, but p1 is not outlier, split cluster  C=CR //original set C is changed to CR, clusterID=clusterID;//clusterID is original clusterLD  Clustering the CoreSet with OFCA, clusterID=max(clusterID)+ 1 :  Produce outlier or remove the cluster:  CoreSet=FellowSet(p);  Else  Endif End // Pmcedure  The time complexity of IOFCA is at most O(m*N); m is the size of update data set, and N is the size of maximum cluster. Thus, IOFCA improves the efficiency greatly compared to OFCA. The parameters of IOFCA are easier to determine than incrementalDBSCAN, and the reason is the same as described in section 3.3.

5 Conclusions  Nowadays, clustering has been investigated as a primary data mining method for knowledge discovery in spatial databases. In this paper, we introduce an outlier factor based clustering algorithm 4 F C A  based DBSCAN.

Like DBSCAN, OFCA requires only a distance function and, therefore, it is applicable to any database containing data from a metric space. Due to the density-based nature of OFCA, the insertion of deletion of an object affects the current clustering only in a small neighborhood of this object. Thus, efficient algorithm is given for incremental insertions and deletions to a clustering. In order to be applicable in periodically incremental environment, we present an incremental clustering algorithm-IOFCA, handling updates practical. Based on the formal definition of clusters, IOFCA yields the same result as OFCA does.

Both OFCA and IOFCA have the follow strong points: strong ability of handling outlier. The process of clustering is also the process of finding outlier.

they can handle each situation of different clusters, and the bad case of DBSCAN, which is depicted in section 2 (Figure 1). would not appear.

C) The parameters of them are easier to determine than that of DBSCAN, and the algorithms are not so sensitive as DBSCAN to parameters.

Future work can include bulk update and improvement of  A)  B)  the efficiency of OFCA.

