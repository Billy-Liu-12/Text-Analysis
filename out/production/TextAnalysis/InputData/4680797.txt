JACK Intelligent Agent-based and User Preference

Abstract?With the rapid development of the Internet and the  worldwide popularity of the Web is growing exponentially.

Automation collaborative filtering (CF) is becoming efficient tool  to assist users with accurate information. We present multi-agent  model based on collaborative filtering system to find similar  users? interesting and choose JACK Intelligent Agents TM  to  design CF system. Meanwhile, a novel mining frequent pattern  algorithm, which is used to find users? interesting items and  deduce association rules, is presented. Compared with traditional  CF system based on frequent pattern mining algorithm, the novel  algorithm has higher recall and accuracy rate.

Keywords- collaborative filtering, Multi-agents system, JACK,  mining association rules, rating frequent pattern growth

I. INTRODUCTION  Since the web information overload, collaborative filtering (CF) is becoming the tool that assists users to find  information, which they are interested in. CF mechanism uses  the known users? preferences to predict unknown preferences  of a new user [1]. Some of the best-known representatives are  Amazon.com, CDNow.com and WiseWire.com. The traditional CF system is not suited to interacting with the dynamic and  distributed information environment. Information filtering  agents are adopted by collaborative filtering system [ ].

Intelligent agents can filter out accurate information after  users entering search query efficiently. Manos proposed a  novel prediction algorithm for recommendation agent, which  combines user-based and item-base similarity measures [3].

Michael presented a multi-agent system called Collaborative Spider, to collaborative filter search sessions [4].

A. Collaborative filtering model description  There are two classes of CF: user-based CF or item-  based CF [5]. There is a list of m users U={U1,U2,?,Um} and a list of n items I={I1,I2,?,In}. Each user has a rate vector R, where rk represents the user?s rating for item Ik, The similarity of user x and user y is computed by the cosine-based  similarity, which is present in ormula (1):  , ,  2 2  , ,  1 1  ( )( )  ( , )  ( ) ( )  n  xx j y j y j  n n  xx j y j y j j  r r r r  S x y  r r r r  =  = =  ? ? =  ? ?  (1)  The second step is to predict rating for the target item  among a set of similar users? interesting items using ormula  (2).

, ', ' '  ( , ) (( ) ( , ')) i  u avg u j u u U  Pre u j r k r r S u u ?  = + ? ? (2)  Where rx,j represents the rating of user x for item j. xr  is the average rating of user x over all items he had rated, Pre (u, j) means the prediction rating of target user u on item j. User u has the nearest neighbor user u?, Ui is the set of users, who rated item j, k is a normalizing factor such as the absolute values of the weights sum to unity.

B. Software agent  Software agents are autonomous, personalized, continuously running, driven by beliefs, desires and intentions  (BDI) [6]. Agents can work together to achieve a goal by  cooperating and interacting with each other, called multi-agent  systems (MAS). Agent Oriented Software Pty Ltd (AOS) has  built Jack Intelligent AgentsTM, a framework in Java for multi-  agent system development [7]. A given agent can be defined  in terms of its goals, knowledge and social capability. Jack  supplies a high performance to describe agent model by using  the BDI architecture.

C. Frequent pattern mining  Association rule mining (MAR) is searching for  interesting relationships between items by finding frequent  items. The proposed algorithms are Apriori and FP-growth  algorithm [8].The latter achieved higher efficiency. It also has  performance bottleneck, which creates conditional FP-tree  separately and recursively during the mining process, updates  of FP-tree requires two scans the data set, and the process constructing FP-tree only focus on the frequency of the item,  which is the key to information filtering is users? interesting.

With the number of users increasing, FP-growth algorithm  would generate a huge number of frequent items, most of  which may have nothing to do with users? interesting. The  constructing process may take too much time and space.

In this paper, a novel algorithm for constructing FP-tree  according to users? preference rating called rating frequent  pattern tree, RFP-tree, is proposed.



II. PREDICTION BY RATING FREQUENT PATTERN TREE  A. The construction of rating frequent pattern tree  Rating frequent pattern tree, RFP-tree, predicts non-  rating items by rating items; it can be used when known  preference is very small and strict time requirement. Let I be a  set of all items, I = {i1, i2 ,?, im}. Let R={r1,r2,?,rm}, rj (0,1), j=1,2,?,m. R is defined as the rating set for itemset I. rj is the rating of item ij, which is user?s preference for an item.

Definition 2.1 Let X be an itemset, X? I. The rating support of X is defined as  ( / )* j k  j k  i X i I  r r support(X) ? ?  which is  denoted Rsupport(X).

Definition 2.2 Let X is k-itemset. X is rating frequent  itemset iff Rsupport(X) Rminsupp.

Definition 2.3 Let X, Y be an itemset, X? I, Y? I, X?Y=?. X Y is the rating association rule  iff Rconfidence(X,Y)=Rminconf, Rsupport(X?Y)=Rminsupp.

Rconfidence(X,Y) is defined as Rsupport(X?Y)/Rsupport(X).

Rminsupp is the minimal rating support threshold.

A rating frequent item header table is associated with  each RFP-tree; each entry in the header table contains the  following fields: item-name, item-count, item-rating and node- link, where item-name denotes the represented item, item- count designates the number of transactions sharing a prefix path up to the node, item-rating designates the rating of the item, and the node-link refers to the next node in the RFP-tree with the same item-name. The root is labeled as ?null? and links to a set of item prefix sub-trees as its children. The  procedure for constructing the rating frequent pattern tree is presented as algorithm 1.

Algorithm 1 (The construction of RFP-tree)  Input: A transaction set D, the set of all items I, the rating set R and Rminsupp.

Output: the rating frequent pattern tree  Method:  a) Initialize the head node list with items in I.

b) Compute the value of item.Rsupport. Scan D to collect  the set of rating frequent items and add into rating frequent  items list F iff item.Rsupport Rminsupp. Sort F in Rsupport  descending order as L.

c) Create the root of an RFP-tree, RT, and label it as  ?null?, for each transaction in D do the following: Select the rating frequent items in L. Let the sorted rating frequent item list in transaction be [p|P], where p is the first element and P is the remaining list. Call insert_tree([p|P],RT).

Function insert_tree([p|P], RT){ If RT has a child N such that N.item_name =  p.item_name increment N?s count by 1; increment N?s rating count by N.item_rating; Else do {  create a new node N; N?s count=1; N?s rating count = N.item_rating; N?s parent link is linked to RT;  N?s node_link be linked to the nodes with the same item_name via the node_link;}  If p is nonempty then call insert_tree(p, N);}  Example: Let the transaction database, D, be Table  and Rminsupp = 10%. We can construct the RT of example  database as Figure .

TABLE I. A TRANSACTION DATABASE  TID Items: ratings  1 I1:1, I2:2  2 I1:1, I2:-1, I3:1, I4:0  3 I1:-1, I2:1, I4:1  4 I1:1, I2:1 ,I3:3, I4:2, I5:4, I6:6, I7:1  5 I2:1, I3:-2, I4:2, I5:4, I6:1, I7:1  6 I1:3, I2:4, I3:1, I4:5, I5:2, I6:2, I7:1  In CF systems, the scope of users rated the items is from  -5 to 5 points. If user i rates 5 on item I1, means he has interesting in I1, rate 0 means has no interesting, rate -5 means  very boring. The sum of rating on all items in Table is  j  k  i I  R ?  = .So we calculate the items? Rsupport:  I1. Rsupport=1 1 ( 1) 1 3 5* 0.11 37 6  + + ? + + =  I2. Rsupport= 2 ( 1) 1 1 1 4 6* 0.22 37 6  + ? + + + + =  I3. Rsupport=1 3 ( 2) 1 4* 0.05 37 6  + + ? + =  I4. Rsupport= 0 1 2 2 5 5* 0.23 37 6  + + + + =  I5. Rsupport= 4 4 5 3* 0.18 37 6  + + =  I6. Rsupport= 6 1 2 3* 0.12 37 6  + + =  I7. Rsupport=1 1 1 3* 0.04 37 6  + + =  Figure 1 RFP-tree of Example database  B. Ming rating frequent patterns from RFP-tree  Illustrated in the Figure 1, 5 is the count and 10 is the  rating of I4. The node I6 is the child of node I5, I6 ?.

I5  In RFP-tree, it means user might be more     interested in I6, when he is interested in I5. The path included  I5, I6 designates the user?s preference trend. Since I6 ?.

I5  and I6 is the child of node I5, I5  I6.

Definition 2.4 Let node child (IC)?s rating denotes CR, node father (IF)?s rating denotes FR in one path of RFP-tree. IF  IC, iff FR ?CR.

Definition 2.5 Let RNodeSupport denote rating support  of one node; it is used to construct RFP-Growth conditional  pattern base  node node  RNodeSupport=( rating/ count ) ? ?? ?  ,  RNodeSupport is ratio of sum of one node?s rating in the prefix sub-path set and its count.

The rating frequent patterns are generated in order. For  example, the rating frequent patterns of I1: {( I2:1,2), ( I4:2,1, I2:2,0), ( I4:3,9, I2:3,6, I5:3,4, I6:3,5)}. The rating of I4 is(1+9)/2=5, the rating of I2 is (2+0+6)/3=2.67.

RFP-Growth algorithm is described below.

Algorithm 2 (RFP-Growth: Mining entire rating frequent  itemsets)  Input: RT, and Rminsupp Output: the set of frequent patterns  Method: call RFP-Growth (RT, null)  Procedure RFP-Growth (RT, ?) { If tree contains single path P then  For each combination (denoted as ?) of the nodes in the path  generate pattern ??? with RNodeSupport = Rminsupp of node in ?;  Else do  For each item i in D, in the header of tree do  generate pattern ?=i?? with RNodeSupport = i.

RNodeSupport;  construct ??s conditional pattern-base and the??s conditional RFP-tree RTree ?;}  If RTree ??? then call RFP-Growth (RTree ?, ?) ;} The rating conditional pattern and the rating conditional  RFP-trees generated are summarized in Table .

In algorithm 1 and 2, the difference from the traditional  FP-tree are the computing method of support of X and the construction of each node that item-rating field added. We introduce the rating support, Rsupport and the rating support of one node RNodeSupport.



III. COLLABORATIVE FILTERING SYSTEM MODEL USING  RFP-GROWTH WITH JACK  We used Sarwar?s collaborative filtering system model to  build the CF system with RFP-Growth (RCFS) [9]. Figure 2 is  the structure of RCFS. The Interface Agent is the central  coordinator. When user enters his query, it will transmit the  task to other agents. And the Search Agent obtains results; the  Interface Agent would present them to users. The RCFS is  designed by using Jack 5.2 version. After user read the  recommending pages, he will rate the page; the rating point is feed back to the Interface Agent. RFP Agent manages to filter  information using user?s information and interesting  information with RFP-Growth algorithm. Search Agent  searches information and recommends to interface Agent.

Figure 2 the structure of the RCFS  A. Interface Agent  Interface Agent works interactive with users, builds  users? model according to users? search query. It collects user  information from user?s login, search history; browse history  and feedback information to user database. After user reading  web page, it modifies user model and stores user?s information, which is learned from other similar users using  learn mechanism [10], stores in user database and interest  database. User interesting rule is stored in acknowledge  database, which is deduced by collaborative filtering Agent  (RFP Agents).

B. Collaborative filtering Agents based on RFP-Growth, RFP Agents  Collaborative filtering Agents are based on RFP-Growth  (RFP Agent). Each one of them build a rating FP-tree,  represents users? interesting with similar preference.

Interesting items is used to build RFP-Tree by RFP  cooperation plan set, which is based on RFP-Growth  algorithm. RFP Agent stores association rules into rule  database. Figure 3 is the structure of RFP Agent.

RFP Agent actually is multi-agents team, as RCF Agents;  manage to collaborative users? interesting items. First of all, it  filters user?s interesting items using plan of RFP-Tree Init Agent. Second, constructs RFP-Tree using plan of RFP-Tree  Build Agent. Finally, finds users? interesting frequent pattern  rule using plan of RFP-Growth Agent. Method of plans is  included in respective even.

TABLE II. PATTERN-BASES AND THE CONDITIONAL RFP-TREE  C.  Search Agent  Search Agent manages search information according to the  rules in the user model and similar user model after RFP  Item Rating conditional pattern-base Rating conditional RFP-tree  I1 {( I2:1,2), ( I4:2,1, I2:2,0), ( I4:3,9,  I2:3,6, I5:3,4, I6:3,5)} {I4:5,5; I2:3,3;I5:3,4;I6:3,5}| I1  I6 {I4:5,10, I2:5,6, I5:3,4} {I4:5,10, I2:5,6, I5:3,4}| I6  I5 {I4:5,10, I2:5,6} {I4:5,10, I2:5,6}| I5  I2 {I4:5,10} {I4:5,10}| I2  I4 empty empty     Agent work. It chooses Top N keywords to search information  as the query keywords.

Figure 3 collaborative Filtering Agents in JACK Design Views

IV. EXPERIMENTAL RESULTS  We evaluate the performance based on the precision and  recall. RA denotes the article set that user is interested in according to users? rating. S denotes the article set that the CF system predicted and recommends to the user. The recall is  defined as the ratio of the number of articles correctly  predicted over the total number of user?s interested articles.

The precision is defined as the ratio of the number of articles  set that users actually are interested in over the total of the  number of articles set S recommended to the user.

S RA Recall  RA  ? = (3)  S RA Precision  S  ? =           (4)  The goal of the experiment is to find out the user?s  preference among the similar users set by the novel FP-  Growth algorithms, RFP-Growth. The experiment is using CF  system based on RFP-Growth (RCFS), a prototype system for  our research. We use Jiangsu University Digital Library capacity to nearly 3,400,000 words of 550 articles as a source of data for the prototype CF system to test. The two-third of  the users? preference set with 250 users is used as the training data set; the one-third of users with 125 users is used to be the test data set. We compared RCFS with the traditional  Collaborative Filtering Systems based FP-Growth (FPCFS).

We perform the experiment with different Top N values,  as the number of keywords. We evaluate N values are  corresponding to 6, 8, 10, and 12. We analyze the recall and precision, when Rminsupp in RCFS and minimal support in FPCFS are 20%, 30%, 40%, 50%, 60%. As shown in Figure 4(a), the recall of RCFS is highest while Rminsupp=40% and Top N = 8. And in Figure 4(b), the precision of RCFS is highest too.

(a)    (b)  Figure 4 the comparison of Recall and Precision between RCFS and FPCFS

V. CONCLUSION  In this paper, we present an effective method RFP-  Growth, to find frequent patterns in CF system. CF system  uses users? rating items to filter non-frequent items to alleviate  the scalability and novel frequent pattern growth algorithm to  alleviate the sparseness problems. And JACK Intelligent  AgentTM is chosen to design the collaborative filtering  systems. The experiment result shows that the novel algorithm  is more effective than the traditional CF system.

