

Abstract? In this paper, we present a Failure Prediction System (FPS) using a novel algorithm that extracts frequent anomalous  behaviors based on multi-scale trend analysis of multiple  network parameters. The proposed Correlation Analysis Across  Parameters algorithm (CAAP) utilizes multiple levels of time-  scale analysis to reveal the frequent anomalous behaviors. The  CAAP philosophy is that failures usually do not occur because of  change in a single parameter behavior; instead, a set of  interrelated parameters change their behaviors jointly and lead  to a particular failure. The proposed algorithm requires an  enhanced version of FABM algorithm which was presented by  the authors in a previous paper and was used to analyze each  parameter?s behavior individually. Moreover, the new version,  called FABMG algorithm, has the same polynomial  computational complexity of O(n2). The CAAP utilizes the data  mining techniques of association rules mining in order to reveal  the existed correlation relationships. Consequently, as found in  this work, this approach improves the quality of the FPS results  which was relying on individual parameter analysis only. One of  the strengths of CAAP is that it requires the FABMG output  only, i.e. it does not require rescanning the database in order to  produce the correlation results.

Index Terms?Frequent anomalous behaviors, failure  prediction, time-scale analysis, autonomic network management.



I. INTRODUCTION S telecommunications networks and Information  Technology (IT) infrastructure evolve over the time, it  becomes more complex and larger, and the need for  scalable fault management and prediction techniques becomes  more critical. Because of that, the autonomic network concept  has emerged to create self-managing and self-configuring  networks to overcome the rapidly growing complexity and to  enable their further scalability. Mining for frequent anomalous  behaviors is a vibrant research area. Researchers have  approached this problem by inferring the overall network  behavior through the use of network probes or by modeling  the behavior of the individual entities or nodes.

Early work in the area of fault detection was based on using  rule-based expert systems. In expert systems, a comprehensive  database containing the rules of behavior of the faulty system  is used to determine if a fault occurred [2], [3]. Rule-based  systems are too slow for real-time applications and are  dependent on prior knowledge about the fault conditions on  the network [4]. The identification of faults in this approach   *Electrical Engineering Department, Tafila Technical University, Tafila,  66110, P.O.Box 179, Jordan. E-mail:a.aljaafreh@ttu.edu.jo.

This work is partially funded by Cisco Systems.

depends on symptoms that are specific to a particular  manifestation of a fault [1].

In the literature, the fault detection problem is typically  approached using Finite-State Machine (FSM) modeling of  alarm sequences that occur during and prior to failure events.

A probabilistic finite state machine model is built for a known  network fault using historical data. State machines are then  designed with the intention of not just detecting an anomaly  but also possibly identifying and diagnosing the problem. The  sequence of alarms obtained from the different points in the  network is modeled as the states of a finite state machine. The  alarms are assumed to contain information such as device  addresses as well as the symptom and time of occurrence. The  transitions between the states are measured using prior events  [1], [5], [6], and [7].

Maxion and others [8], [9] proposed a new approach for  fault detection based on pattern matching. They describe  anomalies as deviations from normal behavior. This approach  attempts to deal with the variability in the network  environment. In this approach, online learning is used to build  a traffic profile for a given network. Traffic profiles are built  using symptom-specific feature vectors such as link  utilization, packet loss, and number of collisions. These  profiles are then categorized by time of day, day of week, and  special days, such as weekends and holidays. When newly  acquired data fails to fit within some confidence interval of the  developed profiles then an anomaly is declared [1].

In our previous research [12], we presented a novel  algorithm that exploits the syntactic pattern recognition  approach in order to extract frequent anomalous behaviors  based on multi-scale trend analysis of individual network  parameters. The proposed Frequent Anomalous Behavior  Mining (FABM) algorithm utilizes multiple levels of time-  scale analysis to reveal the frequent anomalous behaviors.

FABM is simple, has low order polynomial computational  complexity of O(n ). Finally, the empirical results showed that  by using FABM, an efficient prediction engine can be realized  with high true positive and true negative rates.

In this work, our objective is to improve the quality of  prediction by analyzing not only individual parameters, but  also multiple network-parameters.  Our philosophy is that  failures usually do not occur because of change in a single  parameter behavior; instead, a set of interrelated parameters  change their behaviors jointly and lead to a particular failure.

Based on that, we present a novel algorithm that extracts  frequent anomalous behaviors based on multi-scale trend  analysis of multiple network parameters. The proposed  Correlation Analysis Across Parameters algorithm (CAAP)  utilizes multiple levels of time-scale analysis to reveal the  Failure Prediction Based on Multi-Parameter Analysis in Support of  Autonomic Networks Hesham J. Abed, Ala Al-Fuqaha, Ahmad Aljaafreh  *   Computer Science Department  Western Michigan University  {hesham.j.abed, ala.al-fuqaha}@wmich.edu  A        frequent anomalous behaviors. The proposed algorithm  requires an enhanced version of FABM algorithm [12] which  was used to analyze each parameter?s behavior individually.

However, the new version, called FABMG algorithm, has the  same polynomial computational complexity of O(n ). The  CAAP utilizes the data mining techniques of association rules  mining in order to reveal the existed correlation relationships  among parameters. Consequently, the results presented in this  work demonstrate that this approach improves the quality of  prediction which was relying on individual parameter analysis  only. One of the strengths of CAAP is it requires the FABMG  output only, i.e. it does not require rescanning the database in  order to produce the correlation results.

The rest of this paper is organized as follows: Section II  describes the proposed FABMG algorithm with details about  its time complexity and correctness. Section III presents the  Correlation Analysis Across Parameters algorithm. Section IV  includes description of the proposed Failure Prediction System  FPS. And section V concludes our study and discusses  possible future extensions of this work.



II. Frequent Anomalous Behaviors Mining General  Algorithm  FABMG algorithm is an enhanced version of FABM  algorithm which we presented in [12] to extract frequent  anomalous behaviors based on individual parameter analysis.

The FABMG algorithm keeps track of each frequent  parameter?s behavior with respect to the Parameter Analysis  Window (PAW) that has the occurrence of that behavior.

Generally, this information supports the cross-parameter  correlation analysis implemented using the CAAP algorithm  which we present in the next section. The FABMG algorithm  has the same polynomial computational complexity of O(n )  as in FABM. The FABMG is described as follows:  FABMG Algorithm  Input: - Two dimensional matrix SB in which each row  represents a sequence of crest-trough pairs that lead to a  failure.

- min_support threshold Output: Behaviors table consists of two columns, PAWs set  and the frequent_behavior sequences  The Algorithm  1-  A PAW sequence number is assigned to each row in SB starting with 1.

2- All 1-item-sequences that have support >= min_support are found as follows:  temp_frequent_behaviors(1.. number_of_rows(SB)) = [];  for i = 1 to number_of_rows(SB)  for j = 1 to number_of_columns(SB)  match SB(i,j) against all other elements in different  rows of SB and find its support.

If the extracted support is ? min_support then  Append SB(i,j) to temp_frequent_behaviors(i)  Stop mining for the current item and pick new item;  else // when the extracted support < min_support  Append null C-T pair to temp_frequent_behaviors(i)  End if  ; End for j ; End for i  3- The result from step 2 is saved to the temp_frequent_behaviors matrix in which each row  represents a candidate frequent anomalous sequence. Each  sequence is indexed by the PAW number that has the  occurrence of that sequence. The elements of the  temp_frequent_behaviors matrix are sorted in descending  order based on the number of frequent items in each  sequence.

4- The following bottom-up technique is used to calculate the  support of each sequence in temp_frequent_behaviors based  on the subsequence rule presented in the previous section:  Start with sequence number 2 at the top of the sorted  temp_frequent_behaviors and find its support by  considering the sequences above it. If a particular sequence  is a subsequence of super sequence, then it adds the support  of the super sequence to its support and performs a union  operation between the PAW numbers of both sequences.

This process is repeated for all the sequences contained in  temp_frequent_behaviors.

5-The infrequent sequences having support < min_support are  pruned and the frequent_behaviors matrix is set to hold the  result after pruning.

End of Algorithm  The FABMG algorithm is based on the following  principles: It exploits the apriori principle for extracting the  frequent behaviors. Specifically, generating sequences in  step 2 is based on finding frequent individual 1-item  sequences. This helps in declaring candidate frequent  sequences which may include frequent subsequences inside  them. In addition, the monotone sorting of sequences in step  3 minimizes the time required for finding corresponding  support for each sequence. In general, the bottom-up  technique is based on the fact that the existence of p-item  sequences can be detected in k-items sequences iff k ? p.

The time complexity of the proposed FABMG algorithm  can be found based on the following:  -  Step 2 of the algorithm requires O (n2) matching process to extract the individual 1-item frequent subsequences where n  is the total number of subsequences.

-  In step 4, the worst case happens in two cases: first, when half of the total numbers of the generated sequences are  filled with frequent 1- itemsets while the other half contains  1-itemsets only; second, all of the generated sequences are  similar and filled with frequent 1-itemsets. The complexity  in those cases is O (n ) because, for instance, in the first  case each element in the 1-itemset needs to be matched  against the majority of the behaviors.

Therefore, the time complexity of FABMG is of O (n ).

The details of the FABMG algorithm can be explained  using an example as depicted in Figure 1. To simplify this  example, we represent each behavior by a symbol which  represents a crest-trough pair. In a real world scenario, each  subsequence should be represented with its trend values as a  crest-trough pair, where crest represents the highest top and  trough represents the lowest bottom of a behavior that lay  inside an analysis window. Subsequences are compared by  their trend values, not by their classes or clusters to find if they  match or not. The upper left table in Fig. 1 represents an input  of five sequences where each sequence is represented using 4  crest-trough pairs. Each row in the table denotes one sequence  while columns 2 through 5 denote 1-itemsets. The first column  stands for the PAW number of each sequence.  Suppose the  min_support threshold is set to 2, step 2 of the FABMG  algorithm will identify C, D, and A as frequent 1-itemsets.

Consequently, sequences <C D  >, <A  D  >, <D  >, and  <A C  D  > are candidate frequent sequences. In step 3, the  algorithm sorts each candidate sequence based on the number  of frequent items in each sequence and produces the output  depicted in table (a) of the figure. In table (a), each sequence  initially holds support value of 1 which represents the current  number of occurrences of the sequence. We deliberately leave  blanked columns to indicate the importance of the temporal  information within the pattern. Next, the bottom-up technique  is used to extract the support for each sequence. Starting with  sequence number 2, the <C D  > sequence has an occurrence  in the <A C  D  > sequence based on the subsequence rule.

Therefore, we add the support of <A C  D  > to <C  D  > and  append the PAW?s number of the first sequence to the PAW?s  numbers of <C D  >, results shown in table (b). In table (b),  the algorithm finds if that sequence has occurrenced in  <C D  > or <A  C  D  > starting with sequence <A  D  > in row  3. Finally, the algorithm finds the support for <D > in row 4  using all the sequences above it. The final result is shown in  table (d) which represents all the frequent sequences that have  support ? 2.

In the crest-trough matching algorithm in [12], the  match_ratio equation is calculated after finding the Total_diff  and the max_length. The algorithm returns 100% match when  the two lines that represent the given crest-trough pairs have  exactly the same values, while it returns a value less than 1 (or  a negative value) to indicate the degree of similarity between  the given pairs. The 0 matching ratio is an indicator that the  two pairs may have totally different trend directions. In this  paper, if two trends have a matching ratio ? 50%, we assume  the two trends are similar.



III. Correlation Analysis Across Parameters algorithm  (CAAP)  The proposed Correlation Analysis Across Parameters  algorithm (CAAP) utilizes analysis of multiple network-  parameters to reveal the relationships between frequent  anomalous behaviors. In the following, the CAAP steps are  described:  Correlation Analysis Across Parameters algorithm  (CAAP) Input: - for each parameter there is a two dimensional matrix  SB in which each row represents a sequence of crest-  trough pairs that lead to a failure.

- min_support threshold  Output: sets of correlated parameters S  The Algorithm:  1- for i  = 1 to number of parameters  for each parameter, call FABMG to get its behavior  table Ti ;  end for i  2- create the Parameters Occurrence Table (POT) which is a  two dimensional table where the rows represent the PAW  numbers and the columns represent the parameters. Each  element in the table has either 0 to indicate no occurrence or 1  to indicate an occurrence of a particular parameter. The table  is created as follows:  2.1  for each Ti , perform union operation between all the  sets that are included in the PAW number column and  let G hold the result.

2.2  for each PAW number in G, mark the corresponding  (PAW, parameter) in POT with 1 to indicate the  occurrence of parameter number i in a particular  PAW.

3- for r = 1 to the number of rows in POT  for j = 1 to the number of parameters in POT  if POT ( r, j ) == 1 then let S(r) = S(r) U Pj ;  end if ; end for j ;  end for r  4- call Association-Analysis mining algorithm  End of Algorithm  The CAAP algorithm starts by calling FABMG algorithm  for each parameter in order to get the frequent anomalous  sequences for each individual parameter. In step 2, CAAP  creates the Parameters Occurrence Table (POT) which is a two  dimensional table where the rows represent the PAW numbers  while the columns represent the parameters.

The details of the CAAP algorithm can be explained using  an example as depicted in Figure 2.

Table (a) in figure 2 illustrates an adjacency matrix that  represents the relationships between each parameter and the  PAW that has the occurrence of that parameter. That is, the  first column in table (a) represents P1 occurrence. It expresses  that P1 has an occurrence in PAW2, PAW3, PAW4, and  PAW5. In contrast, P1 does not have frequent occurrence in  PAW1. Each ZERO value in the table indicates no  relationship while ONE value indicates existence of a  relationship. Notice that table (a) of Fig. 2 can be generated  based on the FABMG analysis results for each parameter.

That is, the first column in table (a) of Fig. 2 is an  interpretation of table (e) in Fig. 1 when the results in figure 1  represent the analysis of parameter1 behavior. Table (b) of the  same figure is extracted from table (a). For each ONE value in  the same row, a set of interrelated parameters is created. That  Fig. 2: Illustration of the CAAP Algorithm  Fig. 1: Illustration of the FABMG Algorithm       is, the first set S1 includes P4 and P5. The number of sets in  table (b) is equal to the number of PAWs in table (a). After  creating the sets in table (b), a straightforward process that  leads to discover the association rules and their support is  plmeneted as shown in table (c). Table (c) can be generated by  using association rules mining algorithms that are used to  discover the rules from a given group of sets.



IV. Failure Prediction System (FPS)  This section presents a system for failure prediction based  on using the FABMG and CAAP algorithms. The FPS is  based on three major stages as shown in Figure 3:       ? Offline training and best scale determination: in this stage, the FPS system conducts training on the network  monitoring archive database. This stage starts by identifying  failure locations inside the DB then implements the  individual parameter analysis using the FABMG algorithm.

The result is called Individual Parameter Analysis Database  which is similar to the information depicted in Figure 1  table (e).  In order to determine the best time-scale, i.e. a  scale that produces best possible prediction results, a  repetitive implementation of each time-scale is considered  and the prediction quality is measured against the current  network monitoring reports. Figure 4 illustrates the Receiver  Operating Characteristics (ROC) curve [12], i.e the true  positives rate versus the false positives rate of the  predication system. Based on the figure, it is obvious that  scale size 25% * PAW provides the best results by having  true positive rate of 97.5% versus false positive rate of  18.7%. Notice that the prediction results in this stage also  help to determine if the chosen parts of the archive DB are  inclusive to represent most of the system failures with  satisfactory redundancy. Therefore, this stage is conducted  with human supervision because it may need to be repeated  with different/extended input.

? Implement CAAP algorithm: in this stage, the correlation across parameters analysis is conducted. The result is called  correlation-across-parameters-analysis database which  consists of a set of association rules and represents the  frequent occurrence of a number of parameters jointly as  shown in Figure 2 table (c).

? Online prediction: this stage takes the current network monitoring reports and predicts the next network?s status  based on the training information in the correlation-across-  parameters-analysis database. The use of multiple  parameters analysis improves the quality of prediction. This  improvement can be explained as follows:  If E1, E2, ?, En are set of events included in parameters  from 1 to n and F1, F2, ?, Fm are set of failures from 1 to m.

The causal relationship between the events and failures can  be represented as  P ( Ff  | Ea, Eb, ?, Ex )  > 0          (1)  and individually  P (Ff  | Ea ) > 0, P (Ff  | Eb ) > 0, ?., P (Ff  | Ec ) > 0  where 1? a,b,x ? n  and 1? f ? m That is Ea , Eb , ?, Ex  are jointly related and lead to Ff  failure and each individual event can lead to the same  failure. Notice that, Equation (1) also represents a single-  level Bayesian network where Ea, Eb, ?, Ex are the parents  and Ff is the child.

In equation (1), considering a larger number of  interrelated events leads to more accurate prediction of  failure Ff  . Our experimental results that are depicted in  Figure 5 show the relationship between the number of the  correlated parameters and the accuracy of prediction  expressed by the total number of true positive and true  negative predictions. Figure 5 demonstrates that considering  the interrelated parameters improves the quality of  prediction.

The following case study about network congestion is used  to clarify the benefits of the proposed approach. network  congestion occurs when incremental increases in network  offered load lead either to a small increase in network  throughput, or to an actual reduction in network throughput.

Typical ramifications include blocking of new connections,  queuing delays, or packet losses. Figure 6 represents n LANs  interconnected by two routers. The LANs on the left hand side  utilize router1 and the LANs on the right hand side utilize  router2.

A failure occurs when the throughput rate in router1 drops  down because of congestion. For example, a failure or  performance degradation condition can be generated when  Fig. 3: Illustration of the prediction system FPS  Fig. 4: ROC of prediction in five time-scales.

Fig. 5: The relationship between correlated parameters  and prediction accuracy.

router1 has a queue length that is more than 80% filled. Such a  condition can lead to overwhelm the router with traffic and  result in deteriorated QoS. The individual parameter analysis  in this case study show causal relationships between single  parameters and the failure as follows:  - High Offered Load on link W1 (HOL (W1)) ? failure  - HOL (W2) ? failure  - HOL (router2) ? failure  - Long Queue Buffer Length in router1 (LQBL (router1)) ?  failure    It is obvious that using the individual parameter analysis is  not sufficient to predict the failure accurately. The strongest  relationship exists between the failure and the LQBL event  because, by definition, LQBL is a symptom of the failure. But  LQBL occurrence does not always lead to the failure.

Therefore, considering more interrelated parameters lead to  improve the quality of prediction.  Using the multiple  parameter analysis presented in this paper, we get the  following results:  - HOL(W1) AND LQBL(router1) ? failure  - HOL(W2) AND LQBL(router1) ? failure  - HOL(W1) AND HOL(W2) ? failure  - HOL(W1) AND HOL(router2) ? failure  - HOL(W2) AND HOL(router2) ? failure  - HOL(router2) AND LQBL(router1) ? failure  - HOL(W1) AND HOL(W2) AND LQBL(router1) ? failure  - HOL(W1) AND HOL(router2) AND LQBL(router1) ?  failure  - HOL(W2) AND HOL(router2) AND LQBL(router1) ?  failure  - HOL(W1) AND HOL (W2) AND HOL(router2) AND  LQBL(router1) ? failure   In the last results, the failure can be predicted with strong  support when two or more of the antecedent events occur  jointly. The strongest support can be found when all the  antecedent events occur at the same time. Consequently, our  approach for online prediction starts by looking at the largest  number of antecedent parameters and checks their occurrence  in the current network activities. If such correlated parameters  are found, the FPS system generates an alarm indicating that a  failure condition is predicated.



V. Conclusion and Future Work  In this work, we utilize data mining techniques to query a  sequence of behaviors and extract rich information about  anomalous behaviors that can lead to failure conditions. In  addition to that, the proposed technique has been extended to  discover the correlation relationships that exist among  multiple parameters in order to improve the prediction  accuracy. The proposed prediction system (FPS) is based on  the FABMG and CAAP algorithms to discover the correlation  relationships by using association rules mining techniques.

The FPS provides more accurate predication results and at  the same time maintains the polynomial time complexity.

In the future, we plan to analyze the ability of the proposed  FPS to perform online learning. Furthermore, we plan to  utilize General Purpose Graphics Processing Units (GP-GPU)  based computing to implement the proposed system in a  parallel environment. This improves the response time of the  proposed system and makes the system more suitable for real-  time applications.



VI. References  [1] M. Thottan and C. Ji, ?Anomaly Detection in IP   No. 8, August 2003.

[2] T. D. Ndousse and T. Okuda, ?Computational intelligence  for distributed fault management in networks using fuzzy  cognitive maps,? in Proc. IEEE ICC, Dallas, TX, Jun. 1996,  pp. 1558?1562.

[3] L. Lewis, ?A case based reasoning approach to the  management of faults in communication networks,? in Proc.

IEEE INFOCOM, vol. 3, San Francisco, CA, Mar. 1993, pp.

1422?1429.

[4] A. S. Franceschi, L. F. Kormann, and C. B. Westphall,  ?Performance evaluation for proactive network management,?  in Proc. IEEE ICC, Dallas, TX, June 1996, pp. 22?26.

[5] I. Katzela and M. Schwarz, ?Schemes for fault  identification in communication networks,? IEEE/ACM Trans.

Networking, vol. 3, pp. 753?764, Dec. 1995.

[6] I. Rouvellou and G. Hart, ?Automatic alarm correlation  for fault identification,? in Proc. IEEE INFOCOM, Boston,  MA, Apr. 1995, pp. 553?561.

[7] A. Bouloutas, G. Hart, and M. Schwartz, ?On the design of  observers for failure detection of discrete event systems,? in  Network Management and Control. New York: Plenum, 1990.

[8] F. Feather and R. Maxion, ?Fault detection in an ethernet  network using anomaly signature matching,? in Proc. ACM  SIGCOMM, vol. 23, San Francisco, CA, Sept. 1993, pp. 279?  288.

[9] S. Papavassiliou, M. Pace, A. Zawadzki, and L. Ho,  ?Implementing enhanced network maintenance for transaction  access services: Tools and applications,? Proc. IEEE Int.

Contr. Conf., vol. 1, pp. 211?215, 2000.

[10] M. Thottan, ?Fault detection in IP networks,? Ph.D.

dissertation, Rensselaer Polytech. Inst., Troy, NY, 2000.

Under patent with RPI.

[11] H. Wang, D. Zhang, and K. G. Shin, ?Detecting syn  flooding attacks,? in Proc. IEEE INFOCOM, 2002.

[12] H. J. Abed, A. Al-Fuqaha, M. Guizani, and A. Rayes,  ?Failure Prediction Based on Multi-Scale Frequent  Anomalous Behavior Identification in Support of Autonomic  Networks,? IEEE Globecom 2010.

[13] J. Han and M. Kamber, ?Data Mining Concepts and  Techniques,? 2 nd  edition, Morgan Kaufmann Publishers 2006,  ISBN 10:1-55860-901-6.

[14] X. Gu and H. Wang, ?Online Anomaly Prediction for  Robust Cluster Systems,? in IEEE 25th International  Conference , 2009.

