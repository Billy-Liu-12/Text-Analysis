A Dynamic Description Logic-based Formalism for RBAC

Abstract?Applications in the open and dynamic environment become more intelligent and complicated. To secure these applications is a big challenge. RBAC model, as a de facto standard in access control field, is widely used in many applications. But the lack of dynamic and formal method to describe RBAC makes the model can?t completely adapt to the open and dynamic environment. To solve this problem, we introduce a three level RBAC model which unifies the administrative components, the administrative actions and the regular RBAC components, and also proposes a dynamic description logic, called DDLRBAC, to formalize the three level model. Based on the formal description of RBAC with DDLRBAC, an executable action decision algorithm to guarantee the dynamic consistency of systems is also presented.

Keywords-Role-Based Access Control; Action; Dynamic Description Logic

I. INTRODUCTION As applications become more sophisticated and  intelligent in open and dynamic environment, they require greater degrees of decision making and autonomy. A new challenge is to secure these applications in open, dynamic environments [1]. Because of policy-neutral and simplicity of administration, RBAC [2,3] has been regarded as one of the most suitable access control models and de facto standard to secure dynamic environment [4,5]. However, RBAC itself can?t adapt to completely the open and dynamic environment. Three problems occur in relating RBAC to dynamic environment.

The first issue is that there is no dynamic RBAC model that completely meets the need of the dynamic environment.

The security policy that is enforced is a consequence of the detailed configuration of various components of basic RBAC model [6]. In the open and dynamic environment, access control policies of applications are also dynamic, which makes the components of RBAC easy to change. The administration of RBAC can ensure that policies do not drift away from their original objectives. Therefore, we need a dynamic RBAC model to integrate the basic RBAC model with the administration model to not only protect dynamic applications, but also ensure the consistency of the changing configuration with security policies.  While, some widely- used RBAC model, such as RBAC96 [2], NIST RBAC [3], and most of other extended RBAC model, such as GTRBAC [4], cannot provide efficient authorization management for dynamic environment.

The second issue is that there is a limitation of expressive power for RBAC. The open, dynamic environment needs different partners or agents to collaborate and share information [7,8]. From the security aspect, if partners have different understanding with the sharing information, the new security problem will be produced. So we need a semantic-based, formal and shareable access control specification to be described over the heterogeneous domain data and improve the common understanding among participants who might not use the same information model.

However, RBAC model was originally designed for enterprise environment that handled homogeneous users and services, and the specification of the current RBAC is based on mathematical notation, which is burdensome in modeling a complex computing environment [7].

The third problem is to enable effective automation of various administrative actions related security activities. We need an approach to model and reason about the administrative actions as well as the authorization of such actions. The existing formal ways, such as graph-based formalism [9], only express the system?s consistency under the transformation of actions, with no consideration of the authorization, which is not complete to express such actions.

In order to solve the problems above, we propose a three level RBAC model that unifies the RBAC itself administration, the administration actions, and the basic RBAC model. To represent the RBAC model, we notice that Description logics (DLs) [10] can provide a formal method to describe RBAC and reasoning mechanism. However, traditional description logics can only describe static RBAC model, we need a dynamic description logic to represent the three level RBAC model. The dynamic description logic in this paper, which is called DDLRBAC, is proposed on the basis of description logic language ALC, dynamic logic, and action theory.



II. THREE- LEVEL RBAC MODEL The three level RBAC of this section is based on  RBAC96 model [2], which distinguishes regular roles and administrative roles, where the former is used to control the access to data and resources of system, and the latter is used to control the administration of RBAC itself. To describe the dynamic properties of RBAC, we assume that regular roles and permissions can be modified by administrative actions, while the administrative roles and permissions are relatively unchanged and static for we don?t consider the   DOI 10.1109/ICCIT.2009.29     administration of the administrative roles and permissions.

Thus we can define a basic RBAC model as follows:  Definition 1. Basic RBAC model, M1, is a 11-tuple (U,R,P,S,UA,PA,RH,user,roles,perms,Cons).

where U, R, P, and S is the set of users, regular roles, regular permissions, and user sessions, respectively; UA?U?R is user to role assignments (if (u,r)?UA, then u is the member of r); PA?P?R, permission to role assignments; RH?R?R, partial relations on the role hierarchy; user: S? U, mapping each session s to a user (unchanged with time); roles: S?2R, roles?(s)?{r:?r??r ((user(s),r')?UA)}; perms: S?2P, perms(s) = ?r?roles(s){p: ?r''?r((p,r'')? PA)}; Cons is a collection of constraints stipulating which values of the various components enumerated above are allowed or forbidden.

Administration of RBAC involves control over each of those regular components, so we define the administrative model as follows.

Definition 2. RBAC administrative model, M2, is a 11- tuple (AU,AR,AP,AS,AUA,APA,ARH,user?,roles?,perms?,Cons?),  where AU, AR, AP, AS is the set of administrative users, roles, permissions and administrative session, respectively (for the set of regular roles R and P, we have R?AR=? and P?AP=?); AUA?AU?AR, administration user to administration role assignment; APA?AP?AR, administration permission to administration role assignment; ARH?AR?AR, partial relations on the administration role hierarchy (we can also use ?); user?: AS?AU, mapping each session as to an administrator (unchangeable in a life time); roles?: AS?2AR, mapping each session as to the set roles?(as)?{ar: ?ar'?ar ((user(s),ar')?AUA)}; Each session as has the permission perms?(as) = ?ar?roles(as){ap: ?ar??? ar ((ap,ar??) ? APA) }; Cons? is a collection of constraints.

Remark: To clearly explain, we use the authority rules in ARBAC97 model as our administrative permissions, such as can_assign [6].

The whole RBAC model can be described as three levels: 1) The first level is administration level, including AU, AP, AR, ARH, APA, AUA and so on; 2) The second level is administrative action level, including all of the administrative actions, such as assign and revoke, and 3) the third level, basic RBAC component level, including U, R, P, UA, PA, RH, S, users, roles, perms and Cons, which can be changed by the second level.



III.  DYNAMIC DESCRIPTION LOGIC FOR RBAC Here we propose a dynamic description logic for RBAC,  called DDLRBAC, which is based on the basic description logic ALC and it?s extension [10,11] and each action a can be taken as a modality [a].

This section will introduce the syntax and semantics of DDLRBAC.

A.  Syntax of DDLRBAC The language of DDLRBAC L contains the following  symbols: object constants c0, c1,?; atomic object concepts A0, A1,?; object roles R0, R1,?; object concept constructors ?, ?, ?, ?; inclusion relation ?; atomic actions a0, a1,?; action roles Q0, Q1,?; logic connectors ?, ?; and, role constructors ?, ?.

Definition 3. Object concept C is defined as: C ::=A |? C | C1? C2 | ?R.C | [a]C,  where a is an action.

Definition 4. Object statement ?  is defined as:  ? ::= C(c) | R(c1,c2) | C1?C2 | R1?R2 | ?? | ?1??2 | [a]?3, where ?3 is a statement that contains no modalities.

Definition 5. For any action a, we have the following form of action rule:  ??[a]? where ? and ? are object statements, which stands for the precondition and effect of action a.

Definition 6. DDLRBAC knowledge base KB is a triple (TBox,ABox,RBox), where TBox is a set of non-atomic statement that contains no modalities; ABox is a set of atomic statements; RBox is a set of statements formed by ??[a]?, where ? and ? contain no modalities.

B. Semantics of DDLRBAC Definition 7. The semantic model of DDLRBAC, M is a  5-tuple (W, {Ra: a??}, ?, ?, I), where W is a set of possible worlds; for each a??, Ra?W?W is reachable relations on a,  and for any w?W, there is at most one w??W such that (w,w?)?Ra;  ? is a non-empty set; ? is a non-empty set, such that ???=?, and I is an interpretation, such that  for every constant symbol c, I(c)??; for each possible world w?W and atomic  concept A, I(A,w)??, satisfying that for any w??W with (w,w?)?Ra for some a??, I(A,w) ?I(A,w?) is finite, where ? is the symmetric difference, i.e., X ? Y=(X-Y) ? (Y-X), and I(A,w)-I(A,w?)={x??: x?I(A,w), x?I(A,w?)};  for each possible world w?W and role symbol R, I(R,w)??2, satisfying that for any w??W with (w,w?)?Ra for some a??, I(R,w) ? I(R,w?) is finite, where I(R,w)-I(R,w?)= {(x,y)??2: (x,y)?I(R,w), (x,y)?I(R,w?)};  for each atomic action role Q, I(Q)????.

Remark: In DDLRBAC, action a can only change parts  of RBAC components. For example, action assign assigns a role to a user, which can change the UA assignment. Thus we can take a RBAC state as a possible world, and explain the modality [a] in this possible world semantics: statement [a]? is true in a possible world, if and only if ? is true in     another possible world reachable from a, where the possible world is a RBAC state.

Definition 8. For a possible world w, the interpretation CI,w of an object concept C is defined as follows:  if C=A, CI,w=I(A,w); if C=?C1, CI,w=?-C1I,w; if C=C1?C2, CI,w=C1I,w?C2I,w; if C=?R.C1, CI,w={x??: ?y ((x,y)?R?y?C1I,w)}; if C = [a]C2, CI,w ={x??: ?w?((w,w?)?Ra ?  x?C2I,w?)}, Remark: The interpretation I(c) of constant symbol c is independent of possible worlds.

Definition 9. The truth-value M,w?? of an object statement ? at possible world w is defined as follows:  M, w?? iff I(c)?CI,w, if ?=C(c); M, w?? iff (I(c1),I(c2))?I(R,w), if ?=R(c1,c2); M, w?? iff C1I,w?C2I,w, if ?=C1?C2; M, w?? iff R1I,w?R2I,w, if ?=R1?R2; M, w?? iff M,w??1, if ?=??1; M, w?? iff M,w??1?M,w??2, if ?=?1??2; M, w?? iff ?w?((w,w?)?Ra ? M,w???3), if ? =  [a]?3.

For the limited space of the paper, the properties of  DDLRBAC will be discussed in another paper. In the next section, we will give a representation of RBAC in DDLRBAC.



IV. REPRESENTATION OF RBAC IN DDLRBAC We use a language for the description logic for RBAC,  which consists of three sub-languages: L0 for the administration specification; L1 for the description of administrative actions; and L2 for the description of basic RBAC state. Since there are many administrative actions, to simplify the description, we only consider action assign and revoke. Obviously, assign and revoke can only change the UA relation.

A. Administration of RBAC To every administrative model M2, since we don?t  consider the changing of administrative components, we can use the static part of DDLRBAC to describe the administration. The language L0 contains the following symbols:  constants: au (for each administrative user au?AU), ar (for each administrative role ar?AR), and ap (for each administrative permission ap?AP);  atomic concepts: U, AU, R, AR, P, AP, AS; atomic roles: AUA, APA, ARH, user?, roles?,  perms?, where: 1) U, AU, R, AR, P, AP and AS satisfy the following axioms (only parts of axioms listed here):  AU ? (U?R ?AR ?P ?AP ?AS) ??; AR ? (AU?U ?R ?P ?AP ?AS) ??; AP ? (U ?AU?R ?P ?AR ?AS) ??;  2) AUA, APA and ARH satisfy the following axioms: ?AUA.AR?AU; ?APA.AR?AP; ?ARH.AR?AR;  3) user?, roles? and perms? satisfy the following axioms, respectively:  ?user?.AU?AS; ?roles?.AR?AS; ?perms?.AP?AS.

Definition 10. Statement ?0 can be defined as follows:  ?0 ::= AU(au) | AR(ar) | AUA(au, ar) | ARH(ar, ar?) | AP(ap) | ??0 | ?01??02.

where ARH(ar, ar?) stands for ar ? ar?.

In the ARBAC97 model, administrative permissions are defined as can-authorities, such as can_assign. If we use the same way to define administrative permissions, we can use a concept Canassign to represent the kind of can_assign rule, to substitute AP. If we use c to stand for the rule can_assign(ar,t,r), where ar is a administrative role, t is a prerequisite condition, and r is the role to be assigned, then we can use the following statement to describe each administrative permission, for example, Canassign(c), assignBycan(c,ar), assignWithcan(c,r) and assignConcan(c,t) represent c is a can-authority, the administrative role that can execute the action is ar, the role to be assigned is r, and the prerequisite condition is t, respectively.

B.  RBAC administrative action description The language L1 of describing administrative actions  contains the following symbols: action constants: assign0, assign1,?, revoke0,  revoke1,?; atomic action roles: assignedBy, assignedTo,  assignedWith, revokedBy, revokedWith.

where assignedBy describes the executer of the assignment, assignedTo describes the user to be assigned to, assignedWith describes the role to be assigned, revokedBy describes the executer of the revocation, revokedWith describes the role to be revoked.

Definition 11. Statement ?1 in L1 can be defined as follows:  ?1 ::= assignedBy(assign, au) | assignedTo(assign, u) | assignedWith(assign, r) | revokedBy(revoke, au) | revokedWith(revoke, r) | ??1 | ?11??12.

where assign and revoke stand for actions.

C.  RBAC state description We will represent the dynamic behavior of RBAC by  the transformation of RBAC state. Then there is a RBAC state S corresponding to the basic RBAC model M1 at any instance. The language describing a state L2 contains the following symbols:  atomic concepts: U, R, P, S; constants: u (for each regular user u?U); r (for  each regular role r?R); p (for each regular     permission p?P); s (for each session s?S); atomic roles: PA, UA, RH, user, roles, perms,  where: 1) U, R, P and S satisfy the following axioms, respectively:  U ? (R ? P ?S) ??; R ? (U ?P ?S) ??; P ? (U ?R ?S) ??; S ? (U ?R ?P) ??;  2) UA, PA, RH satisfy the following axioms, respectively: ?UA.R?U; ?PA.R?P; ?RH.R?R;  3) user, roles and perms satisfy the following axioms: ?user.U?S; ?roles.R?S; ?perms.P?S;  Definition 12. Statement ?2 of L2 can be defined as: ?2 ::= U(u) | R(r) | P(p) | S(s) | UA(u, r)| PA(p, r) |  RH(r, r?) | user(s, u) | roles(s, r) | perms(s, p) |??2 | ?21??22.

where RH(r, r?) stands for r ? r?.

Every RBAC model contains some constraints, for example, the static separation of duties (SSD). Here we use mutuallyexclusive to represent the mutually exclusive relation between two roles, and SSD can be defined as:  Definition 13. For ?r1, r2?R, if (r1,r2)?mutuallyexclusive, then  1) ?u?U, if (u,r1)?UA, then (u,r2)?UA, or if (u,r2)?UA, then (u,r1)?UA, or  2) ?p?P, if (p,r1)?PA, then (p,r2)?PA, or if (p,r2)?PA, then (p,r1)?PA,  and we call this constraint as static separation of duties.

Thus, we can introduce a SSD axiom in KB2 as follows:  ?UA?.u??mutuallyexclusive.(?UA?.u) ??,          (*) where mutuallyexclusive is atomic role.

Remark: This axiom represents that for a user u, there is no mutually exclusive roles in u?s UA relation.

D. The decision algorithm of RBAC action executability To the whole RBAC knowledge base, we have the  following sub-knowledge bases: KB0, the knowledge base of administration,  including ?0 and axioms about atomic roles; KB1, the knowledge base of administrative  actions, including ?1; KB2, the knowledge base of RBAC state,  including ?2 and axioms; RBox, the action rule bases.

Remark: In definition 6, the knowledge base KB of DDLRBAC is a 3-tuple (ABox,TBox,RBox), and all of KB0, KB1, KB2 and RBox are parts of KB.

With the statements of the assignment action a, such as assignedBy(a,au), assignedTo(a,u) and assignedWith(a,r), we have the following assignment rule in RBox:  ?UA(u,r)?[a]UA(u,r), and with the statements of the revocation action b, such as revokedBy(b,au) and revokedWith(b,r), we have the  following revoking rules about weak revocation and strong revocation, respectively:  UA(u,r)?[b]?UA(u,r), RH(r,r?)??UA(u,r?) ?UA(u,r)?[b]?UA(u,r).

Definition 14. Given a knowledge base KB1 of action a, KB0 of RBAC administration, KB2 of basic RBAC state, if KB1 is compatible with KB2, then we say a is authorized.

We can further give a decision algorithm (see Fig. 1) to decide the feasibility of an action on the basis of Tableau algorithms [10].

Fig. 1 The decision algorithm  Remark: i) Different RBAC systems have different compatible conditions. Here we still take ARBAC97 model for example to explain it. For any assigning action a (in knowledge base, we use symbol a), KB1 is compatible with KB0, if : (1) if AU(au), AR(ar), AUA(au,ar)?KB0, U(u), R(r)?KB2, then assignedBy(a,au)?KB1??c  (Canassign(c)?KB0&assignBycan(c,ar)?KB0); assignedWith(a,r)?KB1 ? ?c(Canassign(c)?KB0 &  assignBycan(c,ar)?KB0 & assignWithcan(c,r)?KB0); assignedTo(a,u)?KB1??c(Canassign(c)?KB0&KB2?u  ?t), where c stands for a can-authority rule,  and u?t means u satisfies the prerequisite condition t?CR.

(2) if AU(au), AR(ar), AUA(au,ar)?KB0, U(u), R(r)?KB2,  then for any revoking action b (denoted as b in knowledge base), we have revokedBy(b,au)?KB1??c(Canrevoke(c)?KB0&revok  eBycan(c,ar)?KB0); revokedWith(b,r)?KB1??c(Canrevoke(c)?KB0&revo  keWithcan(c,r)?KB0).

ii) We assume that if there is a statement of form  ??[a]? in an RBox then there is no other statement of form ???[a]?? in RBox, where the reading of ??[a]? is that if ? is true then after executing action a, ? is true; and ?  Input: KB0, KB1 of action a, KB2, RBox; Output: KB2?; Step (1): Decide whether KB0 and KB1 are compatible.

If compatible, then execute step (2), or else, stop the algorithm; Step (2): Calculate [a]KB2. If RBox??, and ??[a]??RBox, repeatedly do the following steps until the RBox is empty: 1) If KB2??, then [a]KB2=(KB2\{?})?{?};  else, if KB2 ?? and KB2?{??} ??, then [a]KB2=KB2?{?}; 2) KB2?=[a]KB2; 3) RBox=RBox\{??[a]?}; Step (3): if KB2???, then the action a is not executable, algorithm is over; else, a is executable, output KB2?.

changes the truth-value of no other statements other than ? and ?.

Next, we will give some examples from [6] to represent how we can use the algorithm.

Example 1. (User-role assignment) Let Alice be a member of pso1, and Bob be a member of the regular role ed. Alice can assign Bob the role pe1, e1 and qe1. Suppose action a is the assignment of Alice assigning pe1 to Bob, then the whole knowledge base contains the following statements:  KB0: {AUA(Alice,pso1), Canassign(c), assignBycan(c, pso1), assignWithcan(c,pe1), assignConcan(c,ed)};  KB1: {assignedBy(a,Alice), assignedWith(a,pe1), assignedTo(a,Bob)};  KB2:  {UA(Bob,ed), U(Bob), R(pe1)}; RBox: {?UA(u,r)?[a]UA(u,r)}.

(1) Since KB0 and KB1 are compatible, a is authorized; (2) To the rule ?UA(u,r)?[a]UA(u,r), we have the  following rule by substituting u with Bob, and r with pe1: ?UA(Bob, pe1)?[a]UA(Bob, pe1);  (3) By calculating [a]KB2, we have KB2?={UA(Bob, ed), U(Bob), R(pe1), UA(Bob, pe1)}.

Therefore, after the assignment, the statement UA(Bob,pe1) can be added to KB2.



V. ANALYSIS AND COMPARISON OF THE REPRESENTATION OF RBAC  In this section, we will further discuss the conditions that support the decision algorithm, and compare the representation of DDLRBAC with other methods.

A. Analysis Before we get to the analysis, we will first show the  corresponding relation of KB2 with a basic RBAC state. Let S be a state of RBAC, relative model is M1=(U, R, S, P, UA, PA, RH, user, roles, perms, mutuallyexclusive), suppose there is a description logic language L2, the definition of transformation ? that transfers a consistent RBAC state to KB2 is as Table I.

TABLE I.  DEFINITION OF ?  Symbols, relations and constraints in S  The corresponding symbols in KB2  For each  u?U, r?R, s?S, p?P ?(u)=u, ?(r)=r, ?(s)=s, ?(p)=p, where u, r, s, p?L2  U, R, P ?(U)=U, ?(R)=R, ?(P)=P UA, PA, RH ?(UA)=UA, ?(PA)=PA, ?(RH)=RH user, roles ?(user)=user, ?(roles)=roles, mutuallyexclusive ?(mutuallyexclusive)=mutuallyexclusive u?U, s?S ?(u?U)=U(u), ?(s?S)=S(s) (u,r)?UA ?((u,r)?UA)=UA(u,r) r?roles(s) ?(r?roles(s))=roles(s,r) u?user(s) ?( u?user(s))=user(s,u) (r?,r)?mutuallyexclusive  ?((r?,r)?mutuallyexclusive) =  mutuallyexclusive(r?,r); To the statements ?, ?1?S, if ? = ??1  ?(??1)=??(?1)  ? = ?1??2 ?(?1??2)= ?(?1)? ?(?2)  ?= (roles(s)?{ r : ?r? ?r ((user(s),r? ) ?UA)})  ?(?)= roles ? (?(user??UA))?RH?  ?= (perms(s)={p: ?r?roles(s) ?r??r ((p,r? )?PA)})  ?(?)= perms??(roles??(RH??PA?))  Remark: We introduce only parts of the definition here.

Constraints are very important in RBAC to enforce various access control policies. Each RBAC system is consistent only if it meets its constraint conditions. The literature [12] listed some consistency rules about RBAC state. If the state is not consistent after executing an action, i.e. KB2???, this action is not executable, which can be decided by the decision algorithm. To show the effectiveness of the algorithm, we have the following theorem.

Theorem 1. For any RBAC state S and assignment or revocation action a, let [a]S be the new state after executing a, then there is the following relation:  ?([a]S) = [a]?(S), where ?(S) is a transformation from S to KB2.

Proof: (1) if a is an assigning action, i.e., administrator au assigns role r to a user u, let S is a state, and [a]S is another state, where all of the components of [a]S are the same with S, except that UA[a]S=UAS?{(u,r)}, where UA stands for the set of user-role assignment of u.

Let [a] stands for the modality of a. According to the definition of ?, ?(S) is a knowledge base of DDLRBAC.

According to the assigning rule ?UA(u,r)?[a]UA(u,r) , we have [a]?(S) = ?(S)?{UA(u,r)}, and ?([a]S) = ?(S)?{?((u,r))} =?(S)?{UA(u,r)} = [a]?(S)  (2) if a is a revoking action, i.e., administer au revokes r from u, let S be a state, and [b]S be another state, where all of the components of [b]S are the same with S, except that UA[b]S=UAS-{(u,r)}.

According to the revoking rule UA(u,r)?[a]?UA(u,r), we have  [a]?(S)=?(S)-{UA(u,r)}, and ?([a]S)=?(S)-{?((u,r))} =?(S)-{UA(u,r)} =[a]?(S).

Theorem 1 indicates that we can use representation of RBAC with DDL to analyze the dynamic consistency of RBAC and predict the executable of an administrative action: if KB2 is not consistent after execution, then the action can not be executed.

Example 2. Suppose pe1 and pe2 are mutually exclusive roles. Bob is a member of both pe1 and e1. Alice can also assign Bob the pe2. But if Bob is already a member of pe1, then the assignment action of assigning Bob the pe2 is not executable. Let b stands for the action of Alice assigning Bob?s pe2 membership. The whole process can be represented as follows:  KB0: {AUA(Alice, pso1), Canassign(c2), assignBycan(c2, pso1), assignWithcan(c2, pe2), assignConcan(c2, ed)};  KB1: {assignedBy(b, Alice), assignedWith(b, pe2), assignedTo(b, Bob)};  KB2: {UA(Bob, ed), UA(Bob, pe1), mutuallyexclusive(pe1, pe2)};  RBox: {?UA(Bob, pe2)?[b]UA(Bob, pe2)}.

Then we can add the UA(Bob, pe2) to KB2. If there is a SSD constraint axiom (*) in KB2, and obviously, UA(Bob, pe1) and UA(Bob, pe2) can?t hold at the same time in KB2, so this action is not executable.

B. Comparison  There are many description of dynamic aspect of RBAC, such as ARBAC97 [6] and NIST RBAC [3], and Koch?s graph formalism [9]. In this section, we will compare DDLRBAC with those representations.

The ARBAC97 model is authority-oriented, which consists of the can_actions, such as can_assign, can_revoke, etc., restricting the actions acting on the components of an RBAC state; The NIST RBAC model is action-oriented, which directly consists of a set of actions, such as AddActiveRole. The ARBAC97 model has the administrative roles and administrative permissions, as well as users, roles and permissions; the NSIT RBAC model has only the users, roles and permissions. The administrative part of ARBAC97 model is omitted in the NIST RBAC model. The three-level DDLRBAC model describes both the authorities and actions, so DDLRBAC has the features of both ARBAC97 and NIST RBAC. Koch?s graph-based formalism describes the state transformation of an action, which is also contained in DDLRBAC. We can compare these different representations in Table II.

TABLE II.   THE DIFFERENT REPRESENTATION OF ADMINISTRATION OF RBAC  Description ARBAC9  NIST RBAC  Graph formalism  DDLRBAC  Actions No Yes No Yes Action?s Authority  Yes No No Yes  Execution conditions  No Yes Yes Yes  Administrativ e mode  Yes, static  Yes, dynamic  Yes, dynamic  Yes, dynamic  Remark: We use ?Yes? or ?No? to describe whether the model has or has no such description.

Both Koch?s formalism and DDLRBAC consider the state  transformation. Koch?s method uses graph rule to change a RBAC state and guarantee the system?s consistency. And the graph rule can be changed by embodying the constraint rules before the graph rule can be used. Similar to Koch?s transformation, DDLRBAC has transformation rules, i.e., action rules. But the aim of DDLRBAC is different from that of graph formalism, for it tries to predict the action is executable or not by integrating the constraint rules into to the description of states. So in Koch?s way, the state of RBAC contains only some basic components, such as u, r, s, p, and their relations, without any constraints.

There are many other formal descriptions for RBAC, including description logic approaches [13]. Since most of these methods try to describe the basic RBAC model, which is obviously different from DDLRBAC, the comparison is omitted here.



VI. CONCLUSION The approach presented in this article proposes a  framework of describing the authorities, actions and basic RBAC model, and has the expressive power of both ARBAC97 and NIST RBAC. By integrating the constraints into the description of basic RBAC state, this approach can predict the actions? executability, which means the consistency properties of RBAC system can be guaranteed.

ACKNOWLEDGEMENTS This work is supported by the Natural Science Foundation (grant nos. 60273019, 60496326, 60573063, and 60573064), and the National 973 Programme (grants no.

2005CB321902).

