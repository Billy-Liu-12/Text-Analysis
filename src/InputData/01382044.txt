\

Abstract: An algorithm of mining database user query profdes of  transaction level is presented. The algorithm changes the computing method of the support and confidence in association rules mining by adding query structure and attribute relations to the computation. Since there is no causal relationship in the access of attributes in queries, the method is more appropriate to describe user query behaviors than itemsets used by association d e s .  The method can be used in database intrusion detection system to prevent database from illegal intrusions effectively. Realization, performance and application of the algorithm are discussed in the paper.

Keywords: Data mining; intrusion detection; user profde  1. Introduction  Traditional database security emphasizes user authentication and access control, which is a kind of prevention-centric security mechanism. There exist limitations in prevention-centric security mechanism.

Experience has shown that we cannot he completely successful in prevention problems. Hackers continually surprise us by finding new ways to break into or interfere with systems'']. Moreover, prevention- centric mechanisms are powerless against misbehaviors by legitimate users who perform functions for which they are authorized, especially for the system administrator. Also with the development of network, many network-based attacks, such as password sniffing and session hijacking, allow attackers to masquerade as a legitimate user. So it gets many attentions to find other protection mechanisms for database to remedy the limitations. Intrusion detection analyses system status and actions to find illegal accesses and malicious actions and can provide an effective method to reduce intrusion actions. Intrusion detection can supplement protection of database systems by rejecting the  future access of detected attackers and by providing useful hints on how to strengthen the defense. But the previous researches of intrusion detection mainly focus on network or host intrusion detection. Only a few researches are concerned with database intrusion detection [2d1. Database has data structure and semantics itself and the users have their unique behaviors. So database intrusion detection can make up the insufficiency of the network and host intrusion detection. .

There are mainly two categories of intrusion detection techniques: anomaly detection and signature recognition (misuse detection). Anomaly detection techniques detect an intrusion when the observed activities demonstrate a large deviation from the profiles of normal activities. Signature recognition techniques store patterns of intrusion signatures and compare those signatures with the observed activities for a match to detect an intrusion. In anomaly detection, one of the most important techniques is to find the user profiles. The paper presents an algorithm to mine user profiles based on user query frequent itemsets.

2.

2.1. Association Rules  User Query Frequent Itemsets Mining Algorithm  Definition 2.1 (Itemset). Let A be a set of attributes, and I be a set of values on A, called items. Any subset of I is called an itemset. The number of items in an itemset is called its length "I.

Definition 2.2 (association rule). Let D be a database with n attributes (columns). Define support(Xl as the percentage of transaction (records) in D that contains itemset X. An association rule is the expression X-Y, c, s.

Here X and Y are itemsets, and X n  Y= 6 .s=supprt(XU r) is the support of the rule, and c= support(XU Y)/support(x) is the confidence[".

0-7803-8403-2/04/$20.00 a2004 IEEE    Proceedings of the ?bird Intemational Conference on Machine Laming and Cybemetics, Shanghai, 26-29 August 2004  There are many association rules algorithm since the association rule was brought forth, of which the Apriori algorithm is the most famous. The association rules mining methods can find the rules effectively, which are causal and hidden in the large amount of the data. But in the access of attributes in database queries, there is no causal relationship so that it is difficult to use association rules.

2.2. Transaction-Level User Profiles  One big difference of database anomaly detection from OS or network anomaly detection is that application semantics are much more critical to the accuracy of intrusion detection. In many cases, application- semantics-independent detection methods for transactions, such as table access statistics, data file access statistics, session statistics and database schema semantics, are not enough to identify abnormal behaviors [?I. Application semantics and transaction statements have to be incorporated and evaluated. For example, a corrupted accoun&t raises salary of somebody by $30.000 instead of $3,000, which is the right number. The application- semantics-independent metrics will find nothing abnormal.

However, the amount of salary raise, namely $30,000, is so huge and clearly very suspicious. This kind of anomaly can only be captured when application semantics or transaction statements are used. The Database Language SQL (SQL) is a standard interface for accessing and manipulating relational databases. The mining algorithm of the paper is based on the SQL statements and tries to find user profiles of transaction level.

23. Transaction Fingerprints  There are fixed formats in many SQL queries i d applications with database services. Regularly, the SQL statements submitted to the database are typically generated by some server-side scripts/programs. These statements are generated in a predictable manner and this regularity gives rise to oppormnities to characterize valid transactions with some sort of signatures. For example, a SELECT statement of. an employee table query submitted by application X frequently is ?select number, name, age from employee where department=? sales? and age>20 and age<60?, but someday X submits a statement ?select number, name, age from employee where rank=? high? and age>20 and age<W. This SQL statement does not conform to the pattern of the SELWJT statement from X. It could be the result of a misuse. Because of the regularity of SQL statements, it is likely to derive signatures to help identify .illegitimate SQL statements.

The fingerprints method [?I uses regular expressions to represent variants of SQL statements that can result from a transaction. A fingerprint characterizes one set of SQL statements. For example, the fingerprint of the aforementioned SELECT statement can be ?%elect number, name, age from employee where department=? 1?? I* ? and age>[[:digit:]]+ and amt<[[:digit:]]+$?. The literal containing the value of department has been replaced with the regular expression ? [^?I* ?, which represents a quoted string. The numerical value of age is represented by the regular expression [[:digit:]]+, which represents an integer.

And finally, the whole expression begins with a A and ends with a $ to prevent any additional clauses from being injected into the statement.

2.4. User Query Frequent Itemsets Mining  Based on the concept of the association rules and fingerprints, the algorithm of the paper presents its query support function and confidence function.

2.4.1. Query Compact Function  Considering a given database schema R. attributes are close if they either belong to the same relation or can be related by exploiting (a sequence of) foreign key dependencies. And shorter the sequence of foreign key dependencies is, closer the attributes are. So we define query compact function in key dependencies.

Definition 2.4.1.1 (Relation Distance Function).

Assume a relation database schema R. Given two relations RI E R ,  R 2 E R ,  the relation distance between RI and Rz, denoted by RDisf (RI&). is defmed as  RDist(R1&)=Min( Ro&m(RI,R2)liEn] (1) where R o a c N u m ( R 1 ~ 2 )  computes the number of primary and foreign keys between two relations R I  and Rz by which they can be related, where function Min computes the minimum.

Relation distance function computes the minimal .distance between two relations. For example, in Figure 1, RDist(Salesman, Product)=4, RDist(Sa1esman. Worker)=6.

Definition 2.4.1.2 (Attribute Distance Function).

Assume a relation database schema R. Given two attributes A I E R , .  A ~ E R z  where R I ,  R , ? R ,  the attribute distance between A I  and A2 I denoted by AttrDist(A,,4) , is defined as  AttrDist(A,,4)=RDist(R1,R~)/Mm {RDist(Ri,Rj) I  Attribute distance of attributes is .  defined and normalized by relation distance that they belong to. The reason of the formula divided by Max(RDist(Ri,Rj)) is to normalize the result, soO<AttrDist(A,, 4) < l o  Definition 2.4.1.3 (Query Compact Function). Given a setofrandomattributesA=( A1,A2, .... A.] ,query compact function of A, denoted by Querycompact ( A  ), is defined as  QueryCompact ( A  ) =Max{AttrDist(Ai, A,) I Ai, A, E A 1. (3)  Query compact function computes the maximal attribute distance among a set of attributes. The more compact an attributes set is (smaller the result of query compact function is), the more probable the attributes will be referred together by a query.

2.4.2:Query Support Function  Ri, Rj E R ]  (2)  The contents of the SQL statements submitted to the database are often changed greatly. But the fingerprint of the SQL statements is fixed comparatively, especially to single user or role. For example, the fingerprint of a book search statement of a library is " %eiect title, author, publisher, ISBN from bookstore where title= ' [* ' I* '$ ".

The same user may search all kinds of titles of books but seldom search the same title iteratively. If we compute the support of the statement in the whole audit session, maybe many important statements also have small supports as same as the hivial statements. So we change the computing method of the support and use fingerprints as the computing body.

D e f ~ t i o n  2.4.2.1 (Query Support Function). Given one query Q and an.audit session Au in a relation database schema R, query support of Q in the audit session Au.

denoted by Supporf(Q), is defmed as  Supporf(Q)=IFingerprint(Q)~ul (4) where functionjingerprint(Q) r e m s  the fingerprint that Q matches. IFingerprint(Q)l returns the queries number that  line Learning and Cybemeucs, Shanghai, 26-29 August 2004  match the fmgerprint in Au, kul returns the number of all the items in Au. Audit session [3] is the way that audit data are aggregated. For instance, the data can be grouped according to users or roles adopted by the users.

p e r y  Support of Q is percent of the number of queries that matches the same fingerprint Q in the whole audit session. It shows the support degree of the fingerprint.

2.43. Query Confidence Function  Given one query Q and an audit session Au in a relation database schema R ,  two main factors can influence the confidence degree of the query Q. One is the confidence degree of the query Q in the fingerprint that it matches and another is the query compact of the Q. Higher the confidence values in fingerprint and smaller the query compact is, more confident the query is. So we change the confidence of the association according to following def~tion.

Defhtion 2.4.3.1 (Fingerprint Conjidence Function).

Given one query Q and an audit session Au' in a relation database schema R, fingerprint confidence of Q in the audit session Au, denoted by FingerconflQ) , is defmed as  FingemonflQ)= IQVlFingerprint (Q)l (6) where function FingerprinqQ) returns the fmgerprint that Q matches. IFingerprint(Q)l returns the queries number that match the fingerprint in Au, IQ1 returns the number of Q.

Fingerprint confidence of Q computes the important degree of Q in the fingerprint that Q matches.

Definition 2.4.3.2 (Query Confidence Function).

Given one query Q and an audit session Au in a relation database schema R, query confidence of Q in the audit session Au, denoted by ConflQ) , is defined as  conflQ) =Weighr(l-QueryCompnct(Q))+ (1-Weighr)*  where Weight is the weight between query compact and fingerprint confidence. Greater the value of Weight is, more important the query compact in query confidence and contrary ta  fmgerprint confidence. For normalization, we restrict OGWeight G l  and due to O<QueryCompact(Q) G1,OSFingerConflQ) S l ,  soOSConflQ) GI.

2A.4. User Query Frequent Itemsefs  FingerConflQ) (7)  We use the concept of query frequent itemsets to describe user query profiles. User query frequent itemsets are the queries that the return values of their support and confidence function exceed corresponding thresholds.

Definition 2.4.4.1 (Query Frequent Itemsets). Given a     query Q in an audit session Au, query Q is said to be a query frequent itemset in Au if  Support(Q) BsupThreshold.

Confidence(Q) 2 conThreshold.

supThreshold and conThreshold are user-defined parameters. Their values are within R[0,1]. supThreshold and conThreshold can he adjusted. If tighter monitoring is desired, SupThreshold and conrhreshold can be adjusted accordingly so that more selective frequent itemsets are discovered. Therefore only very typical user query behaviors are described in the profiles.

By adding query compact in query confidence function, the computing method of query frequent itemsets shows influence of fixed relations among attributes to user profiles and by using fingerprints in query support function, the method shows the influence of query structure to user profiles. Since there is no causal relationship in the access of attributes in queries, query frequent itemsets are more appropriate to describe user query bebaviors than itemsets used by association rules aforementioned  2.4.5. Algorithm  Inputs: an audit session Au in a relation database  Outputs: all the query frequent itemsets in Au.

Presumptive conditions: the items in Au have been  preprocessed and all the iterative items have been removed.

A counter is added to items for recording number of the items and to fingerprints for recording number of items that match the fingerprints. Function counteriX) retums the counter value of item or fingerprint X.

The algorithm to discover all query frequent itemsets in an audit session is divided into four steps.

Step 1: Read the item x in the audit session Au sequentially. Generate the fingerprintfof x.

Step 2: In the fingerprint set fs that includes all the generated fingerprints, if can find a fmgerprintf ' Efs that x matches , then counfer(f ' )=counte(f')+counte?(x). Else if f can he incorporated with a fingerprint f '  ?5, then incorporates f with f ' to f " and counter( f " )=counter (f' )+counter(x), adds f " to fs and removesf' fromfs, else addsftofs with counterv)=counter(x),.

Step 3: If not finishes reading the audit session yet then return to step 1, else scans thefs and summarizes the fingerprints and their counter.

Step 4: computes the support and confidence of every item in Au, and outputs the query frequent itemsets.

The Algorithm of generating fingerprint of step 1 can be found in [9]. Paper [6] provides a method of selective summarization of literals to summarize fingerprints. The  schema R.

method will replace a literal with a token only when the literal corresponds to a domain that carries no implicit meaning for operations and data sensitivity. If the range of values in the domain is very large (or unbounded), then it is unlikely that such value has an implicit meaning. To test if the domain is unbounded, the method tests the growth rate of the number of unique values for the attribute as the size of the sample increases. If the domain is unbounded, the growth rate will be constant.

@I where s is the number of the samples in the observation. On the other hand, if the domain contains only a few fixed constants, then the number of distinct values will be similar to the standard diminishing growth curve.

Number of distinct literals found= s  Number of distinct literals= No(l-e- '). [91 This behavior can be easily tested with many  statistical methods such as the non-parametric one-sample Komoglov-Smimov's D Statistics test (KS-test). Because of the paper length, we won't discuss this funher here.

2.4.6. Performance analysis of the algorithm  In step 1 and step 2, the algorithm scans the audit session Au sequentially and searches the fingerprints that have already been generated. If the search method of fingerprints is sequential, then the complexity is O h *  (t+l) /2, where n is the number of items in Au and 2 is the number of all the fingerprints. If fingerprints are organized according to some search trees such as sorted tree or B tree, the search complexity of fingerprints can be achieved quantity of logt. Then the complexity is O(n*log t)  In step 3, the algorithm scans the fs and summarizes the fingerprints, the complexity is O( t* f ) ,  where t is number of fingerprints and f is the average number of the conditions of the fingerprints.

In step 4, the complexity of computing support and confidence of query is O(n), where n is the number of items in Au.

3. Application nf the Query Frequent Itemsets  The query frequent itemsets can be the reference of user behaviors. The degree of the user query behaviors that deviate from the query frequent itemsets represents the normal degree of the user query behaviors. For example, we can compute attribute distance or tuple distance "O' between query frequent itemsets and the queries that are being submitted as a measure for deviating degree. In some situations such as in the intrusion of SQL injection'"', the computing method of query frequent itemset can be applied        directly to intrusion detection. SQL injection can inject or change the SQL statements to some forged statements. We use the sample Active Server Pages (ASP) ?login? page of [?I, which accesses a SQL Server database and attempts to authenticate access to some fictional application. The authentication SQL statement is  Var sql=?select * from users where usemame=? ? + ? ? ?. usemame + ? ? and password = ? ?+ password+  If the user specifies the following: Usemame: ? : drop table users - - Password: The SQL statement ?select * from users where  usemame=? ? : drop table users - -? will be executed. In Transact-SQL, the ?- -? character sequence is the ?single lime comment? sequence and the ?:? character denotes the end of one query. The ?- -? at the end of the username field is required in order for the query to terminated without error. After the statement is executed, the users table will be deleted and all the users can?t login in the database.

The attacker could log on as any user if using the following input:  Usemame: admin? - - The statement ?select * from users where usemame=  ? admin? - -? will be executed.

The attacker could log in as the fust user in the ?users?  table with the following input: Usemame: ? or  1=1 - - The statement ?select * from users where usemame= or 1=1 - -?will be executed.

The reason why the SQL injection can succeed is that  the application believes that the ?constant? row that the attacker specified was part of the recordset retrieved from the database. SQL injection can be solved partially by the methods such as input validation, length limit, string replacement and etc. But there are many limitations in all the methods [ll].  The mining algorithm of the paper can be applied to prevent SQL injection effectively and remedy the limitations of other methods. To the login statement, the algorithm can get the following fingerprint:  ?select \* from users where usemame? [?? I* ? and password=? [?? ]* ? $  To the injected SQL statements aforementioned, there aren?t any fingerprints that the statements can match, the query support and confidence of the statements is near zero ?and can raise serious alarms. The algorithm can also prevent other intrusions such as by obtaining information using error messages and express application semantics due to the using of regular expressions to represent the attribute area in fingerprint. For example, if we need that the length of password can?t be smaller than 5 and the password must  I ,  be number or character; a fingerprint as following can be gotten:  ?select \* from users where usemame=? [?? I* ? and password= ? [a-zA-ZO-9]{5, ] ? $  4. Conclusions  In this paper, we change the computing methods of support and confidence in association rules by using the concept of fingerprint and present an algorithm to find the user query frequent itemsets. The algorithm solves the problem that there is no. causal relationship in the access of attributes in queries so that it is difficult to use association rule by adding the key and foreign key relations of attributes and the fingerprints that represent the fixed structure of the queries to the computation of support and confidence of the query frequent itemsets. At last, the paper presents a performance analysis of the algorithm and its application in intrusion detection.

Acknowledgements  This paper is supported by the Aeronautics Science Foundations of China (No. 02F52033), and the Information Science and Technology Institute, Nanjing University of Aeronautics and Astronautics.

