Validation of Course Prerequisites Based on Student  Grade Using Fuzzy Association Rules

Abstract?One of the most valued approaches for identifying and assigning course prerequisites relies on statistical techniques. We propose a new statistical approach for validating prerequisites based on fuzzy association rules. Fuzzy association rules provide strong tools for mining quantitative data and representing dependencies between data. An experiment based on real student data from our department is conducted and some findings are reported.

Keywords-prerequisites validation, fuzzy theory, association rules

I.  INTRODUCTION Prerequisite courses are those that students are required to  fulfill before enrolling in subsequent courses. Prerequisite course are essential tools in the construction of curriculum for courses. However, inadequate prerequisites can unnecessarily limit students? access or lead to inadequate performance on target courses [1]. Two approaches are widely used to identify and assign prerequisites: qualitative and quantitative.

Qualitative approaches are based on the comparison of the skills and competences between the prerequisites and the target course. On the other hand, quantitative approaches are based on statistical techniques such as tests of means, correlation and regression studies [2][3]. The statistical techniques usually compare the target-course performance of students who did and who did not take the prerequisite course. In this paper, we also use a statistical approach, but do not separate students into two groups. Instead, we will compare all students? performance in both the prerequisite and the target course.

Recently, data mining techniques have become more popular and are now being frequently used in the field of education to better understand students, improve teaching quality, or make scientific management decision. A number of course recommender systems have been developed to help students make informed course selections. For example, RARE [4], a course Recommender system based on Association RulEs, which incorporates a data mining process with user ratings in course recommendation. It analyses the past behavior of students concerning their choices and discovers significant rules. These rules are then used to infer course recommendations. Course Recommender [5] system can predict useful courses for a particular students based on other students? ratings. Two factors are used for ratings: enjoyment and difficulty. The system compares the performance from several algorithms and suggests C4.5 as the  best algorithm for course recommendation. AACORN [6], Academic Advisor Course recommendation Engine, is a case- based reasoning system for recommending courses to graduate students. Based on the experience of past students, the system first retrieves the most similar student histories and then adapts a solution to the student.

Course recommendation systems are usually composed of two phases: an off-line phase, which builds a prediction model from previous course selections, and an on-line phase, which makes recommendations using the extracted information.

Course prerequisite validation can be viewed as a special case of course recommendations. However, the prediction model in prerequisite validation is used for prerequisite validations, not for course recommendations. Any prerequisite for a course shall not only be related to course content but also be validated as being necessary for success in such a course. Therefore, the validation procedure must ensure that a student who has not met the prerequisite is highly unlikely to obtain a satisfactory grade in the course.

The goal of this study is to extract the course prerequisites relationships using student grades and further compare these relationships against the pre-defined prerequisites. Association rules are an efficient and effective tool for extracting associations from a large set of data items. Association rules are traditionally performed on a data set with binary attributes.

To deal with the quantitative attributes such as student grade, we adopt the fuzzy approach to split the quantitative attributes into a number of linguistic terms. Details of the fuzzy association rules algorithm [7] are described in the next section.



II. FUZZY ASSOCIATION RULES Given a database },,,{ ntttT ?21= with attributes  },,,{ miiiI ?21= and each attribute ki is associated with several fuzzy sets },,,{ liiii kkkk fffF ?  21= , we want to find some interesting fuzzy association rules of the form  r : BYAX   is    then    is   If where X and Y are disjoint itemsets in the sense that they share no common attributes; A and B contain the fuzzy sets associated with the corresponding attributes in X and Y. Here, ?X is A? is called the antecedent of the rule and ?Y is B? is called and the consequent of the rule. Let Z be the union itemsets of X with Y and C the union fuzzy set of A with B. A      Figure 1.  Membership function of student grade  rule is interesting if it has enough support and a high confidence level. The fuzzy support value reflects not only the number of records supporting the itemset, but also their degree of support. The fuzzy confidence value measures the degree of support given by the records. The fuzzy support (FS) and fuzzy confidence (FC) for a rule r are defined as follows:  T  ztm rFS Tt Zz  ji z  Cc i j  j  k? ?? ? ?= ])[(  )(                (1)  ? ? ? ?  ? ? ?  ? ? ? =  Tt Xx ji x  Aa  Tt Zz ji z  Cc  i j  j  k  i j  j  k  xtm  ztm rFC  ])[(  ])[( )(              (2)  where j k  z cm () is the membership function in the fuzzy  term kc of item jz , and ][ ji zt represents the value of jz in  the thi record. Mining fuzzy association rules can be implemented in a similar way as traditional association mining [10]. The discovery of fuzzy association rules can be broken into the following two subproblems.

(1) Generate all itemsets that have fuzzy support greater than, or equal to, user specified minimum support. These itemsets are called frequent itemsets.

(2) Extract all fuzzy association rules that have minimum fuzzy confidence from the frequent itemsets.



III. MEMBERSHIP FUNCTION GENERATION To derive the membership functions for a quantitative  attribute, Fu et al. [7] adopted a mid-point strategy based on clustering techniques. First, the range of each quantitative attribute is partitioned into k clusters, and then the medoid of each partition is determined and used to define the required membership functions.

In our study, the quantitative attribute is the course grade which takes values in the range between 0 and 100. Since a course can be taught by many teachers and each teacher may adopt different criteria in determining the grade, different teachers can assign different grades for similar performances.

Thus, the same grade could mean different things for different courses and classes. We address this problem by adopting the percentile ranking approach. A percentile refers to the smallest score that a certain percentage of scores fall in. Each course grade is associated with fuzzy sets {high, medium, low}. The corresponding membership functions are manually defined by using the percentile points as shown in Fig. 1.

The percentile points are used as the mid-points of each fuzzy set. In each fuzzy set kp refers to the  thk percentile for the grade. For the fuzzy set low, the membership function is given by  ? ? ?  ?? ?  ?  <  ?  < ? ?  ?  = 40       0.1  )( p  pxif  xpif pp xp  pxif  xmlow           (3)  For the fuzzy set medium, the membership function is given by  ? ? ? ?  ?  ?? ? ?  ?  ?  ?  <? ? ?  <<  ?< ?  ? ?  =            pxif  pxpif pp xp  pxpif  pxpif pp  px pxif  xmmedium .)(               (4)  For the fuzzy set high, the membership function is given by  ? ? ?  ?? ?  ?  <  ?  < ?  ? ?  = 90        p  pxif  xpif pp  px pxif  xmhigh )(           (5)

IV. COURSE RELATIONSHIPS GENERATION In this section, we describe how to find the course  associations from a set of extracted fuzzy association rules. In our current study, we are only concerned with the one-to-one relationships. Given a course Y and its prerequisite X, the one- to-one association rules are of the form ?if X is {high, medium, low} then Y is {high, medium, low}.? There are a total of 9 candidate rules. Since each rule has different effects on the course associations, we divide the rules into two groups based on their contributions: positive and negative relationships. The positive relationship group consists of three cases: high => high, medium => medium, and low => low, while the negative relationship group contains another two cases: high => low and low => high. The rational behind this is based on the assumption that successful completion of prerequisite courses will have a positive impact on student performance in courses that require the prerequisite.

Two courses are expected to be highly related if they have a high positive (expected) correlation and a low negative (unexpected) correlation. Measures of the two correlations are defined as follows.

? ?  ?  ? ?  =  PRr  PRr  rFS  rFCrFS rindexectedexp  )(  ))()(( )(              (6)    ? ?  ?  ? ?  =  NRr  NRr  rFS  rFCrFS rindexectedunexp  )(  ))()(( )( ,          (7)  where PR and NR respectively represent the positive and the negative relationship sets. The significance of the course correlations is obtained by measuring the difference between the positive correlation and the negative correlation.

)()()( rindexectedexpunrindexectedexprcesignifican   ?=   (8)

V. EXPERIMENTAL RESULTS In this study, we use the student grade data of our  department from 2003 through 2007. It contains 24000 grades from 847 students for 56 courses. We have eliminated the courses with 20 students or less. A total of 38 prerequisite relationships are identified and assigned by the department subcommittees.

We compute the metrics for each of the predetermined prerequisite relationships from the student grades. Table I depicts the Top-5 most significant relationships. There is no surprise that four out of the five relationships are found because they represent a wide variety of programming-related courses. System Analysis and Design and Software Engineering are highly positively correlated for their similar course content and associated skills.

Although higher significance value indicates a higher correlation for the prerequisite relationship, it is more interesting and useful for finding negative relationships with lower significance values. Table II lists the three prerequisite relationships with a significance value of less than 0.2.

TABLE I.  TOP-5 MOST SIGNIFICANT PREQUISITES  Prerequisite Relationship Significance Expected Index  Unexpected Index  VB Programming => DB Programming  0.661 0.728 0.067  C++ Programming => Data Structure  0.643 0.674 0.031  C++ Programming => VB Programming  0.589 0.634 0.045  System Analysis & Design => Software Engineering  0.579 0.622 0.043  C++ Programming => Object-Oriented Programming  0.536 0.598 0.062  TABLE II.  THREE LEAST SIGNIFICANT PREREQUISITES  Prerequisite Relationship Significance Expected Index  Unexpected Index  Introduction to Computers => Unix Operating System  0.186 0.281 0.095  Introduction to Computers => Data Communications  0.179 0.280 0.101  System Analysis & Design => Information System Implementation  0.168 0.291 0.123    Even though Introduction to Computers is assigned as the prerequisite for both Unix Operating System and Data Communications, experimental results show that they are negatively correlated. We have reviewed the course contents and found that there was very little overlap content among these three courses. A further evaluation of the necessity of these two relationships is needed.

The most surprising result comes from the last relationship.

System Analysis and Design provides the theoretical basis for developing computer systems, which is essential for Information System Implementation. They are expected to be highly positively correlated, but the experiment gives an opposite result. The best possible explanation for the high negative correlation is that the differentiations in grading policies between them must have some effect. Since the Information System Implementation course is project-oriented and team-based, teachers often use different grading criteria and considerations from other regular courses.



VI. CONCLUSION This paper provides a post-evaluation for prerequisites  validation based on fuzzy association rules. It analyzes the student grades to determine their course performance. Each grade is converted into a set of linguistic terms from which a set of fuzzy association rules are formulized. These fuzzy association rules enable us to measure and validate the course prerequisite relationships. We have conducted an experiment on real data coming from our department and obtained some interesting findings.

The proposed method presents a quantitative approach for the prerequisite relationships. Since our current study does not yet consider the student background and course content, we plan to enhance the performance by taking these factors into consideration. We also plan to conduct an experimental comparison between the proposed method and other statistical approaches. We believe that the proposed approach can be easily revised for other applications such as course recommendation.

