Mining Association Rules with Composite Items *

Abstract Association rules can be used to  express relation-  ships between i t ems  of data. Mining associations rules is  to  analysis the data in a database to  discover ?interesting? rules. Existing algorithms for mining association rules require that a record in the database contain all the data i t ems  in a rule. This  requirement makes i t  d i f icul t  t o  discover certain useful rules an s o m e  applications. To solve the problem, this paper describes a n  algorithm f o r  min ing  association rules with composite i tems.  T h e  algorithm has the poten- tial t o  discover rules which cannot be discovered by existing algorithms.

1 Introduction Data mining has attracted much research in re-  cent years. The problem of mining association rules was introduced in [l]. Association rules can be used to express relationships between items of data. An association rule is an expression A? + Y, where X and Yare sets of items. X and Yare termed as i tem- sets. For a set of transactions, where each transac- tion is a set of items, the meaning of an association rule is that the transactions which contain the items in X tend to also contain the items in Y.

For an itemset, say X ,  the support of X ,  denoted as s (X) ,  is the number of transactions that contain all items in X .  Given a minimum support 6, an itemset X is large or is referred to as a large i temset  if s ( X )  2 6. The confidence of an association rule X * Y is w, i.e. the percentage of the transactions which contain X that  also contain Y. Rules are useful if their confidence is above a minimum confidence value specified by the users.

An example of such a rule might be that 90% of patients who cough and have chest pain are suffering from pneumonia. Here, the two symptoms, coughing and chest pain, are the items in X and, pneumonia is the item in Y. 90% is the confidence of the rule.

?This work is supported by Auckland University un-  der grant A18/XXXXX/SZ09O/F3414040, and by ESPRIT HPCN Project No 22693.

0-7803-4053-1/97/$10.00 @ 1997 JEEE  John A. Keane, Department of Computation,  UMIST, Manchester, UK.

The problem of mining association rules is to find all rules X * Y such that X U I? is a large itemset and the confidence of X 3 Y is above the minimum confidence.

Many algorithms have been developed for mining association rules [l, 2 , 3 , 4 ,  5, 61. In these algorithms, if a transaction supports an itemset, the transaction must contain all the items in the itemset. This re- quirement makes it difficult to discover certain useful rules in some applications.

For example, assume that a patients database contains the symptoms of the patients and the di- agnosis. The symptoms and the diagnosis are the items. A transaction in the database consists of a patient?s symptoms and the corresponding diagno- sis. The database is mined to discover the symptoms of diseases. Assume that:  a disease, say A ,  makes the patients either show symptom B or C,  the number of patients who show B (or C )  and are diagnosed as having A is smaller than the minimum support, and  the number of patients who either show B or C and are diagnosed as having A exceeds the minimum support.

From assumption (b), itemsets { A ,  B }  and { A ,  C} are not large. As a result, rules { B )  + { A }  and {C} 3 { A }  will not be generated. This is unsatis- factory. Ideally, the mining should be able to find a rule which indicates that, if a patient shows symp- tom B or C, then the patient is suffering from disease A .  Combining B and C to form a new item B v C. A record in the database contains B V C if the record contains either B or C. From assumption (c), it  can be seen that itemset { A ,  B V C} is large. As a result, rule { B  V C} * { A }  will be generated.

The algorithm in this paper allows itemsets to include composite items like B V C in the above ex- ample. A composite i t e m  consists of several items.

A transaction contains a composite item if the trans- action contains at least one of the items in the com- posite item. As a result, not only the rules involving simple items, e.g. {B, C} + {A}, can be discovered, it is also possible to discover the rules involving com- posite it,ems, e.g. {BVC} + {A}, {BVC, D} =+ {A} etc. Thus, the algorithm in this paper has the po- tential to discover rules which cannot be discovered by existing algorithms.

Mining association rules can be decomposed into two steps:  1. the database is scanned to find all large item- sets;  2. association rules are generated from these large itemsets.

The first step is expensive, as the database needs to be scanned. The second step is relatively easier [ 5 ] .  This paper concentrates on the first step: finding large itemsets.

The organisation of the paper is as follows: in $ 2 , the definition of composite items are given; the al- gorithms for finding large composite items and large itemsets are discussed in $3; conclusions are given in ?4.

2 Association Rules with Composite  Let I = {al, ..., am} be the set of literals called atomic items. A composite item is formed by com- bining several atomic items. The general form of a composite item is a1 V ... V a, where aj  E I for 1 5 j 5 n and ai # aj for z # j .  A database consists of transactions where each transaction is a set of atomic items. A transaction contains a com- posite item if the transaction contains at least one of the atomic items which form the composite item.

Atomic items and composite items will be referred to as items in general. An item is large if the num- ber of transactions containing the item exceeds the minimum support.

For a composite item consisting of i atomic items, e.g. alVa2V ... Vu,, the (i-1)-subitem of alVa2V ... Vai is a composite item formed by selecting i-1 atomic items from {aI,a2, ..., ai}. For example, A V B V C has three distinct 2-subitems. They are AV B ,  AV C and B V C.

An itemset is a set of items such that none of the items in the set have common items. For example, {A, BVC} is a valid itemset. However, {A, AVB, C V D,  C V D V E )  is not a valid itemset as:  (a) A and A V B have common item A, and  It ems  (b) C V D a n d C V D V E  1iavecommonitemCVD.

An association rule is an implication of the form X =+ Y where X, Y and X U Y are itemsets, X # O,Y # 0 and X n Y  = 0.

An itemset consisting of i items is called an i- itemset. The (i-I)-subset of an i-itemset is an (i- I)-itemset which is formed by selecting i-1 items from the z-itemset. An 2-itemset has i distinct (i- 1)-subsets. For example, a 3-itemset {A, B, C} has three 2-subsets, i.e. {A, B } ,  { A , C }  and {B,C}.

3 Algorithm for Finding Large Item- sets  Finding large itemsets can be carried out in two steps:  Step 1. Find all the large items and the large composite items1.

Step 2. Find all the large itemsets, i.e. the itemsets whose supports are greater than the minimum support.

At this step, each large composite item is treated as an independent item like the atomic items.

It is assumed that the users are only interested with the composite items generated from a set of atomic items. This set of atomic items will be pro- vided by the users.

For example, assume that:  (a) there are five atomic items A,  B, C, D and E, and  (b) the users are only interested in the composite items generated from items A,  B and C.

From A, Band C, four composite items, AVB, A V C, BVC and A V B V C ,  can be formed. At step 1, the database is scanned to find the large items. Assume that:  (a) the large composite items are A V B,  A V C and A V  B V C ,  and  (b) the large atomic items are A ,  D and E.

At step 2 ,  itemsets are formed using the large items, i.e. A , D , E , A v B , A V C  and A V B V C ; and, the database is scanned to find out which of  'An item (or a composite item) is large if the number of transactions containing the item (or composite item) exceeds minimum support.

these itemsets are large. The reason that, only the large atomic items and the large composite items are used in constructing itemsets is because all the items in a large itemset must be large [3].

3.1 Patient Database Example  A patient database is shown in Figure l(a).  The symptoms and diseases are the items. It is assumed that.:  A v B v C  (a) the minimum support is 3, and  (1)) the users are interested in the composite items generated from set { A ,  B ,  C}.

From { A ,  B ,  C}, four composite items, i.e. A V B V C,  A V  B ,  AV C and B v C are formed.

The database is mined to  find out the symptoms of the disease. First, the large composite items and the large atomic items are found. The large items found are shown in Figure l (b)  and (c). Then, the large atomic items in Figure l (c)  and the large com- posite items in Figure l (b )  are used to construct itemsets. According to  the definition in $2, X # 0 and Y # 0 in rule X 3 Y holds. Thus, only the large itemsets which contain more than one item can be used to generate rules. Figure l (d)  shows the large itemsets which will be used to  generate rules.

From Figure l (a) ,  i t  can be seen that symptom A or B or C indicates that  a patient suffers from dis- ease S. However, without using the composite items, i.e. A V B V C etc., S will not appear in any large itemsets. As a result, the symptoms of S cannot be discovered.

(a) Database  A V B B V C  A,  C, D S, T 1 A, :. D ! SST 1  (e) Large  Atomic  Items  {d )  Large 2- and 3-itemsets  3.2 Finding Large Items Finding large atomic items is easy. First a counter  is set up for each atomic item. Then, the database is scanned to check whether the atomic items are con- tained in the transactions, and the counters of the atomic items will be increased accordingly. When scanning is completed, the atomic items whose coun- ters are greater than the minimum support are recorded as large items.

Finding large composite items is more compli- cated. This is because the number of composite items generated from a set of atomic items might be very large. Therefore, i t  is not practical to gen- erate all composite items and find the large compos- ite items in a single database scan. Instead, large composite items are found in several database scans.

During each scan only a small set of composite items are checked.

The large composite items are found in several steps. At each step, first a candidate set is formed.

The set contains the composite items which might be large. Then, the database is scanned to  find out which items in the candidate set are large. Assume the large items found at the current step all consist of i atomic items. The (2-I)-subitems of the large items are used to form the candidate set of the next step.

When generating the candidate set, the following principle is used. If a transaction, say t, does not contain a composite item, say a1 v a2 v ... V a,, then, according to  the definition in 52, t does not contain any of a1,a2, ..., a,. As a result, t does not contain any composite items which are generated from the items in {al,a2, ..., a,}. This means that,  if a1 V a2 V ... V a,  is not a large item, then none of the composite items generated from {all a2, ..., a,} are large. Thus, the composite items generated from {al, a2: ..., a,} will not be included in the candidate set.

Initially the candidate set contains a single com- posite item which includes all the atomic items used to  construct the composite items. For example, as- sume {a1,u2,a3,a4} is the set of atomic items used to generate composite items. The item in the can- didate set of the first step is al V a2 V a3 V a4. As    discussed earlier, if a1 v a2 v a3 v 04 is not large, then none of the composite items generated from {aI,a2,a3,a4} are large. Thus, we can stop look- ing for large composite items after the first step.

If al v a2 v a3 v a4 is large, it is used to gen- erate the items in step 2?s candidate set. Each item in step 2?s candidate set is a 3-subitem of a1 V a2 V a3 v a4. Thus, step 2?s candidate set is {a1 v a2 v u3, a1 v a2 v a4, a1 v a3 v a4, a2 v a3 v a4}.

The database is scanned to find the large items from the set. Assume that the large items are a1 v a2 v a3 and a1 V a2 V a4. The 2-subitems of these two items form the candidate set of step 3. Thus, step 3?s can- didate set is {a l  v a2, al v a3, al v a4,  a2 v a3, a? v a4} .

AS a1 V a3 V a4 and a2 v a3 v a4 are not large, from the earlier discussion, a1 v a3, al v a4, a2 V a3 and a2 v a4 are not large. Hence, step 3?s candidate set is reduced to {al V a2). It can be seen that, by ob- serving the large items obtained at a step (e.g. step 2), it is possible to reduce the number of items in the candidate set of the next step (e.g. step 3).

The algorithm below is used to find all large com- posite items. Assume that A = { a l ,  a2, ..., ak> is the set of atomic items used to generate the composite items. CC, represents the candidate set of a step.

LC, denotes the set of large composite items found at a step.

1. CCk = {a1 v a? v ... V .I;} 2. for (i = k;CC, # 0 && i > l ; i  - -) do 3 .

4.

5.

6 .

7.

8.

9.

10.

11.

12.

13.

14.

15.

16.

1?7.

for each transaction t in the database do for each candidate c E CC, do  end f b r  -each if contaan(t, c) then c.count++ fi  end-for-each LC, = {c E CC, I c.count 2 mznzmum support} if z > 2 then  cc,-1 = 0 for each ca E LC, do  CC,-1 = CCz- l  U {sa I sa zs an (a-1)-subztem of cz}  end for -each for each c E CC,-I do  if -complete(c, LC,) then  fi CC,-I = CC,-I - { c }  end-for-each fi  18. end-for 19. LCI = U1 LCi  complete(a1 V ... V a,,  LC) let S = {a1 v ... V a, V a I a E A - { a l ,  ..., a,}}  if S C LC then return 1 else return 0 fi  The candidate set of the first step is given at line 1. The database is scanned in lines 3-7. contazn(t, c ) is a predicate which determines whether transaction t contains the composite item c. LC, contains all the large items found at the current step. A composite item is included in LC, if the support of the item is greater than the minimum support (line 8).

The candidate set of the next step, CC,-l, in- cludes all the (z-1)-subitems of the large items in LC, (lines 11-13). The items in candidate set CC,-, will be checked against the items in LC, to eliminate the items which are not large (lines 14-16). The elinii- nation is carried out according to complete (line 15).

The composite items in LC, have one more atomic item than the composite items in CC,-l. In com- plete, a composite item, say c,  in CC,-1 is extended to include one atomic item which is not in c. The ex- tended items have the same number of atomic items as the items in LC,. If all extended items are large (i.e. they are in L e 2 ) ,  then c remains in CC,-1.

Otherwise, c is not large. As a result, c is removed from (line 15). This is because, as described earlier, if the extended item, say c V a,  is not large, then none of c v a?s (z-1)-subsets are large. That  is, c is not large.

When the candidate set becomes empty or all the composite items have been checked (i.e. all the items containing more than one atomic item have been checked) (line a ) ,  all the large composite items have been found. The result is stored in set LCI which is the union of all the set of the large items found at each step (line 19).

For example, in the patient database shown in Figure l ( a ) ,  assume that:  (a) the minimum support is 4, and  (b) the set used to generate the composite items is { A ,  B ,  c, Dl.

The candidate set of step 1 is CC4 = { A  v B V C v D }  (line 1). It can be seen that the support of A V B V C V D i s 4 .  Thus, LC4={AVBVCVD} .

The 3-subitems of A V B v C v D are used to form CC3 (line 12). Hence, CC3 = {AV BVC, AV B V D ,  AVCV D ,  BVCV D }  In complete, AV B V C is extended with D t o  form a new item A v B V C V D .  As AV B V C V D is in LC4, A V B V C remains in CC3.

For the same reason, all the other items in CC3 also remain in CC3.

At step 2, LC3 is {AVBvD,BVCVD} .  CC2 is     formed by the 2-subitems of A v B v D  and BVCVD (line 12). Thus,  CC2 = {AV B , A  V D, B V C,B  V D}  In complete, A v B is extended with C and D respectively. Thus, for A V B in complete, S = { A V  B v C , A  V B V D } .  As A V B V C is not in LC3, A v B v C is not large. As a result, A V B cannot be large. Thus, A V B is removed from CC2.

Similarly, A v D and B v C are also removed from CC2. Hence, after checking against the items in LC3, CC2 is { B  V D}.

At. step 3, LC2 is { B  V D}. As all the composite items have been checked, the algorithm terminates.

Thus, LCI = LCq U LC3 U LC2  = ( A v B v C v D ,  A V B v  D ,  B V C v  D ,  B V D } .

3.3 Finding Large Itemsets  Once all the large items are found, a procedure based on the algorithm in (3) is used to  find large itemsets. Modifications to  [3] have been made to  ac- commodate composite items. In the algorithm here each large composite item is treated as an indepen- dent item like the large atomic items.

The algorithm finds the large itemsets in several steps. At each step, a candidate set is formed first.

The set contains the itemsets which might be large.

The candidate set is generated according to the large itemsets found at the pervious step. After the can- didate set is formed, the database is scanned to  find the large itemsets. Modifications to  the procedure in [3] have been made to  reduce the amount of com- putation required.

In the following, A is the set of all the atomic items; L k  is the set of large itemsets obtained at step k of the algorithm; C k  is the set of candidate large itemsets; and Ck is generated in procedure can- dzdate-gen.

20. L1 = {{a}  I a E A and a is a large atomic item}  U { { c a }  I ca E L C I } 21. for ( I ;  = 2; Lk-1 # 0;  I; + +) do 22. Ck =candidate-gen(Lk-l) 23.

24. CCt = 0 25.

26.

27.

28. fi 29. endfor-each 30.

for each transaction t in database do  for each itemset c E Ck do if t contains all the items in c then cct = cct U { c }  for each itemset c E CCt do c.count++  end-for-each 31. endfor-each 32.

33. endfor 34. answer= Uk Lk  L k  = { c  E Ck I c.count 2 m i n i m u m  support}  Initially the large itemsets are formed using the large items (line 20). The database is scanned in lines 23-31. Each transaction in the database is checked to see whether it supports the candidates in Ck. Set CCt contains all the itemsets being sup- ported by transaction t (lines 25-29). When scan- ning is completed, the itemsets whose support ex- ceed the minimum support become the large,item- sets (line 33). These large itemsets are used to gen- erate the candidate large itemset for the next step (line 22). At the end, the large itemsets found at different stages are joined together (line 34).

Procedure candidategen(lk-1) 35. S = {{SI, ..., si} I ( s j  E Lk-1 where 1 5 j 5 i)  and (Vsm,sn : 1 5 m < n 5 i.s, a n d  s, are different in two i t ems  and the two different i t ems  do n o t have common  atomic i t ems)  and (- 3 e  E S.{SI, ..., si} c e ) }  such that I B I= k where B = SI U s2 U ... U sk}  where B = S I  U s2 U ... U Sk  36. 5?? = {{SI ,..., sg} I {SI, ..., sk} E S  37. Ck = {{u~,. . . ,Q} I VU; : 15 i 5 k.a; E B  such that { s l ,  ..., s k }  E SI}  Procedure candidate-gen calculates the large itemset candidates according to  the large itemsets obtained at the previous step. Each candidate in set Ck is a k-itemset. If a k-itemset, say S, is large, then each of the (k-1)-subset of S should also be large [3].

If one of the (k-1)-subset of an k-itemset is not large, than the k-itemset is not large [3]. In candidate-gen, the large (k-1)-itemsets obtained at the previous step are checked to  see whether they are the (k-1)-subsets of some k-itemsets. A k-itemset becomes a candidate if all its (k-1)-subsets are large.

In candidate-gen, firstly several sets of itemsets are formed (line 35). Each set will be checked to see whether i t  contains all the (k-1)-subsets of a 12- itemset. The second conjunct in the condition on line 35 means all the itemsets in {SI, ..., si} are the (k-1)-subsets of a k-itemset. This is because each pair of the (k-1)-subsets of a k-itemset are different in two items. In addition, according to  the defini-     tion in $ 2 ,  each atomic item should appear in an itemset only once (e.g. {A V B ,A  v C} is not a valid itemset, as A appears twice). Thus, two dif- ferent items should not have common atomic items.

Condition ??- 3e E S.{SI, ..., s,} C e? in line 35 means the subset of any element in S should not be in S (e.g. if {{A, B}, {A, C}, {B, C}} is in S, then {{A. B}, { A ,  C } }  should not be in S).

Each k-itemset has k distinct (k-1)-subsets.

Hence, in S only the sets which contain exactly k itemsets need to be considered. These sets are used to form S? (line 3 6 ) .  If a set in S?, say ss, with k ele- ments (itemsets) has k distinct items (i.e. ] B I =  k in line 3G), then ss must contain all the (k-1)-subsets of a k-iteniset. As the itemsets in ss are from Lk-1, all the itemsets in ss are large. As a result, the k-itemset becomes a candidate (line 37) .

Here is an example showing how candzdate-gen works. Assume that L2 = { { A ,  B}, { A ,  B v C } ,  { A ,  01, {B v c, D ) ) .

From line 35, S = { { { A ,  B}, {A,D}}, {{A, B V C},  { A ,  01, { B  V Cl D}}}.

{{A,B},{A,BvC}}isnotinS,as B a n d B V C  { { A , D } , { B v C , D } }  i snot  in S, as {{A,D},  have B in common.

{BVC, D}} C { { A B V C } ,  { A ,  01, {BVC, D)} holds.

Each candidate in C, is a 3-itemset, i.e. each candi- date has three items. { { A ,  B } ,  {A, D}} only has two elements. Thus, {{A, B } ,  {A, D}} cannot contain all the 2-subsets of any Pitemset.

As a result. { { A ,  B}, {A, D}} will not be considered further.

As only {{A, B V C}, {A, D}, {B V C,  D } }  has three elements and contains three distinct items (i.e.

A ,  B v C and D), according to line 36,  S? = { { { A , B ~ C } , { A , ~ } , { B ~ C , ~ } ~ ~ Hence, from line 37, the candidate in C3 is {A, B V  The procedure generating the candidates in [3] consists of two phases. First, in the join phase, the large itemsets generated at the k-1 step are ?joined? together to form k-itemsets. Then, in the prune phase, the (k-1)-subsets of all the k-itemsets gen- erated at the join phase are calculated. If a (k-1)- subset of a k-itemset is not one of the large itemsets obtained at the previous step, then the k-itemset is removed from the candidate set.

In contrast, procedure candzdate-gen in this paper only adds a k-itemset to the candidate set if all the  C, 0).

(k-1)-subsets of the k-itemset are large. This avoids generating any k-itemset which will be deleted later.

Also, it does not need to calculate the (k-1)-subsets of any k-itemset. Thus, the scheme in this paper requires less computation than the one in [3].

4 Conclusions The algorithm in this paper allows large itemsets  to contain composite items. This enables certain useful rules to be discovered in some applications.

Other work has presented algorithms for mining association rules in the presence of taxonomies over the items [5,  GI. In those algorithms, a transaction is regarded as supporting the upper level of a hier- archy if the transaction supports at least one item which is at a lower level in the hierarchy. The algo- rithms require the users to provide taxonomies. If it is intended to investigate the possible relationships between some composite items, e.g. A V B , A  v C and B V C, and some atomic items, then either sev- eral taxonomies have to be provided or each pair of A,  B and C has to be placed under a hierarchy in a taxonomy.

In contrast, the algorithm in this paper does not require the users to provide a taxonomy. The users need only provide the set of atomic items in which they are interested. From this set the composite items will be generated by the algorithm automati- cally. Thus, the algorithm in this paper is both easier to use and more flexible.

