Modified RAAT (Reduced Apriori

Abstract- There are various algorithm for finding frequent itemsets one of them is the Association rule mining.

Association rule mining uses an algorithm called apriori to find frequent itemsets. But due to some limitations viz.

producing large number of candidate itemsets, which results in frequent database scanning while finding frequent itemsets. For solution of all these drawbacks, here new algorithm is introduced named, Modified RAAT (Reduced Apriori Algorithm using Tag). Modified RAAT is more efficient because it performs reduction in database scan time by using a special feature named Tag parameter, A Tag parameter includes three more parameters: minimum, maximum and total number of items in a particular transaction. One can conclude  the following by Comparing this Tag value with a transaction containing particular itemset, Mismatching of the parameters requires no further usage of that transaction. By counting the change in support parameter the Modified RAAT algorithm may also find various emerging patterns like JEP (jumping emerging pattern). The pattern whose support changes abruptly from zero to nonzero is classified as JEP. This concept is designed by using border-based approach to find most expressive JEP.

Keywords-  EP, JEP, Modified RAAT

I. INTRODUCTION  Association rule mining is one of the interesting areas of  Data Mining. Association rule mining finds the interesting or correlation relationship among a large set of data items.

E.g. The market basket problem assumes we have some large number of items e.g. ?bread? ,?butter?. Customer fills their market basket with some subset of the items n we get to know what items people buy together, even if we don?t know who they are. Marketers use this information to position items and control the way a typical customer traverses the store. For example in practical usage we can consider it as following:  A. Baskets = documents, items = words. Words appearing frequently together in documents may represent phrase or linked conception. And can be used for intelligence gathering.

B. Baskets = sentences; items= documents. Two documents with many of the same sentences could represent plagiarism or mirror sites on web.



II. CURRENT SYSTEM   A. Reduced Apriori Algorithm using Tag  (RAAT)  Algorithm: RAAT Enter: a database D, min-sup Output: all the frequent itemsets of the   database 1)  L1 = (frequent 1-Items); 2)  C2 = L1 ? L1; 3)  for all candidates c ? C2 do 4)   Ct = subset '(C2, t); 5)   for all candidates c ? Ct do 6)   c.count + +; 7)  end; 8)         L2 = (c ? C | c.count ? min-sup) 9)    end; 10)   for (k = 3; Lk-1; k + +) do begin 11)   Ck = apriori_gen (Lk-1); 12)    for all transactions t ? D Do begin 13)   Ct  = subset '(Ck, t); 14)     for all candidates c ? Ct  do 15)   c.count + +; 16)  end; 17)     Lk = (c ? C | c.count ? min-sup) 18)  end; 19)  Answer = Uk Lk;  Subset '(Ck, t) includes the following steps: a) for all candidate s ? Ck b) { c)   If (first item of s > = min)   ?   (last item of s <=max); d)   subset = subset + (s); e)  };     DOI 10.1109/ACE.2010.92

III. NEW APPROACH (EIRAAT)  Algorithm Apriori is one of the oldest and most versatile  algorithms of Frequent Pattern Mining (FPM). Its advantages and its moderate traverse of the search space pay off when mining very large databases. Proposed algorithm improves Apriori algorithm by the way of a decrease of pruning operations, which generates the candidate 2-itemsets by the apriori-gen operation.

Besides, it adopts the tag-counting method to calculate support quickly. So the bottleneck is overcome [9].

A. Proposed Algorithm Name: Modified RAAT(Reduced Apriori Algorithm  using Tag) for Efficiency Improvement with EP(emerging pattern)  and JEP(Jumping EP)  Input:    1) Minimum support threshold 2) Database.

Output: 1) Frequent Itemsets 2) Emerging pattern, jumping emerging pattern.

Notations: n = total number of items   within particular transaction  Steps: 1. Scan database and add the parameter (min_value, max_value, n) with each transaction.

2. for all transactions {  Count candidate frequent itemset compare items of itemset with the added parameter.

(a) If it doesn?t match then that transaction is not considered.

(b) If it does match then compare each and every item of itemset with each each and every item of particular transaction.

} 3. Prepare final table of candidate frequent itemset.

4. Find out test item/pattern by using MBDLLBORDER algorithm.[6] Repeat for all test item/pattern {  Find out subsets of particular test item and accordingly make classes.

Observe the change in support parameter from one class of data to another.

a) If there is a normal change in support then that test pattern is classified as EP (emerging pattern).

b) If there is an abrupt change in  support from zero to nonzero then that test pattern is classified as JEP (jumping emerging pattern).

}

IV. EXPERIMENTAL ANALYSIS   TABLE I THE COMPARISON OF THE RUNTIME AT DIFFERENT MINIMUM SUPPORT BETWEEN THE APRIORI ALGORITHM AND IMPROVED APRIORI ALGORITHM     No. Minimum Support  (%)  Execution Time (In Seconds)  Apriori Improved Apriori  1 5 12.47 12.31 2 10 12.23 12.07 3 15 12.46 12.33 4 20 12.43 12.43 5 25 12.50 12.49 6 30 12.57 12.27 7 35 12.51 12.30 8 40 12.51 12.42 9 45 12.48 12.26  10 50 12.52 12.39   test result  11.8 11.9  12.1 12.2 12.3 12.4 12.5 12.6 12.7  5 10 15 20 25 30 35 40 45 50  support count  ex ec  ut io  n tim  e  Apriori Improved Apriori   Fig. 1. The comparison of runtime at different minimum supports  between the original Apriori and the improved Apriori

V. CONCLUSION  Apriori and RAAT (Reduced Apriori Algorithm using  Tag) has the drawback of large number of candidate itemset generation. So as further improvement Modified RAAT (Reduced Apriori Algorithm using Tag) is proposed here. This algorithm is proposed to improve efficiency for more than 2-candidate itemsets by using modified Tag parameter. Modified tag parameter includes three arguments (minimum number, maximum number, total number of items) for particular transaction. With the decrease of minimum support to some content, the Improved Apriori algorithm tends to prevail; and with the further decrease of minimum support, the advantage of the Improved Apriori algorithm can be greatly enhanced.

