THE DATA MINING ALGORITHM ANALYSIS FOR PERSONALIZED SERVICE

Abstract?In recent years, the library service has become more and more to meet the requirements of customers personalized service. With the rapid development of computer technology, the use of data mining technology can effectively achieve the goal. in using data mining technology, realization of the algorithm is the key, there are some problems to realize the personalized service in the use of the classical algorithm -- Apriorio algorithm. Therefore, I will improve the classical algorithm in this article so that the improved algorithm can realise the individualized service of the library more efficient.

The main content of this paper is: Chapter 1: to introduce the library personalized service and understand their requirements. Chapter 2: to introduce the data mining and know it to understand why it can be used to realize the individualized service of the library. Chapter 3: to introduce Data Mining Algorithm for personalized service. To introduce the classical association rules algorithm--Apriori algorithm, through improving its insufficiency, we can use the improved algorithm to realise the personalized service more efficient.

Keywords-data mining; digital library; personalized service

I. INTRODUCTION (HEADING 1) Personalized service of the University Library is such  service where we use computer network technology in University Library in order to meet user needs to study and understand the user's interest, hobbies and habits, and so on.

So we service through the network media which is  the main channel. At present, the information resources of the University Library building must be to a personalized. Of course, personalized resources also need a personalized service to show. University Library, therefore, must strengthen its own but also understand the needs of the user's personality, to further improve the level of personalized service in order to maintain long-term development of the library. This service is not only able to meet the personalized needs of the user's library to enhance their quality of service also has a significant role in promoting and improving the reputation of the library.



II. PERSONALIZED LIBRARY SERVICES  A. The definition of personalized service The personalized service is a targeted way to achieve the  collection, sorting and classification, to provide users and recommend relevant information to meet the needs of users, according to the various channels of resources based on user settings. Generally speaking, personalized service to break the traditional passive mode can make full use of advantages in resources, and take the initiative to carry out the full range of services to meet the needs of individual users for the purpose.

B. Library personalized service?s requirements Personalized Service System, requires the ability to  effectively obtain real user lending data to fully understand the behavior of Library users to borrow. Then based on user interest in the initiative to provide the service user needs, it allows users to borrow efficiently, humanely, and satisfactorily.



III. INTRODUCTION TO DATA MINING  A. Data mining definition Data mining is a process in which from large data sets  (may be incomplete, noisy, uncertain, and a variety of storage form), we get the decision-making knowledge implicit and which people do not know in advance.

B. Application of data mining in the library Since data mining can dig out useful information from  large amounts of data. Imagine that we borrow for the user's data which is recorded. Through the mining of these large amounts of data, you can get more valuable information to understand user behavior and interest in these data. Used in personalized service, we can effectively guide the user behavior is faster, more comprehensive, more in-depth[1] .



IV. PERSONALIZED LIBRARY SERVICES Classical association rules algorithm Apriori has two  fatal defects. First, it may need to generate a large number of candidate itemsets; second, it may need to repeat the scan database, through pattern matching to check a large set of candidate ,which is especially true for mining long patterns.

DOI 10.1109/MINES.2012.220    DOI 10.1109/MINES.2012.220    DOI 10.1109/MINES.2012.220    DOI 10.1109/MINES.2012.220    DOI 10.1109/MINES.2012.220    DOI 10.1109/MINES.2012.220    DOI 10.1109/MINES.2012.220    DOI 10.1109/MINES.2012.220    DOI 10.1109/MINES.2012.220         For this problem, this defect is fatal, because in this title, the original data may exceed tens of thousands of lines of hundreds of thousands of lines, so designate the magnitude of the set of options will reach millions or tens . Such a calculation scale is not an ordinary project can bear.

In order to avoid the above defects, J.Han et in 2000 provide an association rules algorithm which does not generate the candidate frequent item sets.

A. FP-growth algorithm Frequent pattern growth It is the association rules algorithm J.Han in 2000  proposed, which does not generate candidate frequent item sets[2]. The algorithm directly compresses the transactional database into a frequent pattern tree, then through the tree generates association rules.

It is completely out of the traditional way of Apriori algorithm which must generate candidate item sets. It establishes the idea that does not generate the candidate item sets based on FP-tree structure, opening up new ideas for association rule mining.

1) FP-tree FP-tree is a special prefix tree, which is constituted of a  frequent item header table and prefix tree. The so-called prefix tree, is a storage data structure of the candidate item sets. Items? name identifies the branches of the tree, the tree nodes store suffix items ,and path identifies set of items.

2) FP-growth algorithm FP-growth algorithm is a mining algorithm based on  depth-first association rule.

The basic process is: First scan the entire transaction  database to generate 1 - frequent sets, and put them in descending order, excluding support the meter which is less than min_sup ,then  generate result set L; then make FP-tree differentiate into a number of conditions library, each library associates with frequency set which has a length of 1, then mining these conditional library [3]. When the amount of original data is very big , it can be combined with the method of division, so that each FP-tree can be placed in the main memory.

The first step: FP tree generated, generated picture shows(Figure 1.left):  Supporting the sort of frequent items is the key to this algorithm.

The second step: the segmentation of FP-tree subset: Shown above, for the projection database where p is the  prefix: According to the head pointer to the table to find the FP-tree[4] of the two p-node , search out the root node of the path of these two nodes to the tree node information (including support). And then accumulate the information of the path node support, remove the non-frequent items. The rest of the frequent items are in accordance with a method to build the FP-tree. Process as shown below(Figure 1.right):  B. Maximal frequent pattern algorithm based on FP-Tree On the basis of the FP-tree algorithm, this paper presents  an algorithm for mining maximal frequent patterns. With the classical FP-Tree algorithm, the proposed algorithm also needs to construct a frequent pattern tree [5].

To the issues raised in this article, we make the following provisions to construct the FP-Tree :  ? tree components: A root node (labeled empty) An item prefix sub tree collection (including all project  nodes) A frequent item header table ? The tree node components: A node uniquely identifies A node name (in this system call number) A support count A link pointer (Father, Son, before and after the node  pointer) The structure of the tree steps: To scan transaction database TDB once, collect frequent  item set F and their support. To list F in descending supporting order , then form the frequency list L.

Create the root node of the FP-Tree (marked as empty).

For the execution of each transaction Trans in the TDB: Select frequent items in the Trans and list in the order of sorting in accordance with the L. Set the after sorted frequent item table[6]  the [p | P] and P is the first item, and P is the table of the remaining elements. Call Insert_tree ([p | P, T]).

The procedure is as follows: If T has children N , to make N.ItemName = p.ItemName, then N count increased by 1; or create a new node N, set the count for the l, link to its parent node T, and by the structure of the node chain make link it to the nodes of the same Item name. If P is not empty, then recursively calls Insert_tree ([P, N]).

Constructed as above, frequent patterns retain all frequent patterns (frequent mode support, the order of frequent items, etc.) Therefore, we can find all the frequent patterns from frequent pattern tree, which of course includes maximal frequent patterns we needs.

1) Maximal frequent pattern mining based on FP-Tree algorithm [7]  Process parameters: frequent pattern tree FP-Tree; suffix frequent item set Postfix; minimum support MinSup: the initial value in maximal frequent pattern sets MPList Return value: maximal frequent pattern set MPList Procedure SearchMaxPattem(FPTree Postfix MPList MinSup) begin 1 if FPTree is Empty then Exit 2 if FPTree only contains a single path P then 3  begin 4. P generated Frequent patterns Mp, its support Mp.SupCount = the minimum support in P node; 5 produce candidate maximal frequent model M = Mp + Postfix, :/ / here the plus sign on behalf of Links         6. M's support M.SupCount = Mp.SupCount; 7. if  M does not belong to the frequent patterns in the MPList then 8. Save M in MPList : 9. End else begin 10. / / cycle according to the head table node support (from small to big) 11  for I: = FPTree.Headers.Count-1 down to 0do 12.  begin 13.    Hi = FPTree.Headers [I] ;/ / Get the item header table nodes 14.     Generate frequent item sets MH = Hi + Postfix,; 15.     MH.SupCount = the minimum nodes support in MH; 16.     Construct node Hi which conditional pattern base Ci, all conditional pattern tree CT to constructe Ci 17.     If CT is empty then 18   begin 19.       Generate candidated frequent pattern M = MH 20.      if M does not belong to the subset of frequent patterns in the MPList then, 21.         Save M to MPList ; 22.      End else begin 23.        SearchMaxPattem (CT, MH, MPList, MinSup) 24.    end; 25.   end; 26.  end; 27 end; Algorithm analysis:  According to the nature we know, frequent pattern tree FPTree save the information of all frequent patterns which subject to the conditions of minimum support [8].

Algorithm line 1 avoids a calculation error when frequent pattern tree is empty.

Line 2 to 9 deal with the situation when Postfix is a suffix frequent pattern tree it contains only a single path.

If FP-Tree contains only a single path, according to the inference 1 we can draw the conclution that M = Mp + Postfix, its support = Mp's support. If M belongs to subset of MPList, M is not maximal frequent patterns, discarding M.Otherwise M is added to the list of maximal frequent patterns MPList.

Line 10 to 29 deal with the problem where when Postfix as postfix the frequent patterns contains a branch of the multi-path[9].

If you have multiple paths in FP-Tree branch, we can excavate node Hi in FP-Tree according to the item table header. First construct conditional pattern base Ci of node Hi, then construct FP-Tree CT based on the conditional pattern base. According to Property 3 we know that the conditional pattern base of node Hi contains all the information of Hj as a suffix frequent pattern .So FP-Tree can excavate all maximal frequent patterns suffixed by the Hi. Then we get  line 11 to 16.

If the conditions of Hi FP-Tree is empty, this point may have the largest candidate frequent pattern M = Hi + Postfix, Line 20 ~ 2l parity. If M is a subset of mining maximal  frequent pattern list MPList, M is not maximal frequent patterns, otherwise make M join the MPList to save.

If the conditions of Hi FP-Tree is not empty, you can recursively call the function SeraehMaxPaaern to excavate (line 23).

Note that in Line 16 of the algorithm, we construct conditional pattern base and the corresponding conditional pattern tree. Here conditional pattern tree we structe is different from conditional pattern tree in the standard FP- Tree algorithm, the differences are the sort of item head table[10].

In the standard FP-Tree, the first table node order by the large to the small support. If support is the same, we order by the node name in the dictionary order. when the two nodes support the same, we need order by the number of its successor node. First we deal with the nodes with the more successor nodes, so we can avoid requent pattern is the superset.

This algorithm inherits the advantages of frequent pattern tree algorithm[9], it only twice scans database in the stage of constructing frequent pattern tree. It has a relatively small I / O cost. In the same time, during running it only produces a small number of candidate maximal frequent patterns, therefore, the computational efficiency is better than frequent pattern tree algorithm.



V. CONCLUSIONS With the rapid development of digital library  construction and network communication technology, it is difficult to have a larger space for development by simple passive information service model. Especially in the era of the digital library, it has failed to meet people's increasing demand. Characterized by interactive, professional, intelligent, personalized information service model has become in direction of the Digital Library Information Service. Digital Library Information Service Model introduce the personalized service, that will greatly enhance the quality of digital library services, information product competitiveness and efficiency in the use of resources[10].

We must accelerate the research and application of the digital library system of personalized service.

