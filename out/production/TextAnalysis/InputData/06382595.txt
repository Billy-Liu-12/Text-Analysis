Techniques for dynamic and diversified Relaxation in Constraint-Based  Recommender Systems

Abstract?Constraint-based recommenders support users in the identification of interesting items from large and potentially complex assortments. In cases where no recommendation could be found for a given set of requirements, such systems propose recommendations that indicate minimal sets of faulty requirements. Unfortunately, such recommendations are not diversified and do not include repair proposals which triggers a low degree of satisfaction and frequent repairs of recommendation sessions. This paper presents a dynamic and diversity relaxation approach that integrates the calculation of similarity requirements of customers and recommended products resulted in each atom of customer query and the cost of each atom of customer query.

The Algorithm DDnRelax returning ?at-least-n? products can be  efficiently solved  diversified preference of customer.

Keywords-Constraint-based recommender; query relaxation ; relaxation cost;

I. INTRODUCTION Knowledge-based recommender systems are interactive  software applications that support users in effective identification of interesting items from large and potentially complex product assortments[1].  Constraint- based recommender system is one of basic types of knowledge-based recommender systems.

In contrast to collaborative filtering [2] and content- based filtering approaches [3] , the main advantage of knowledge based recommender systems is that they incorporate explicit knowledge about the items and their properties as well as an explicit formulation of customer requirements. However, when the initial selection of items is based on such a query to the catalog, situations can easily arise, in which none of the products in the catalog fulfills all of the requirements. One basic approach to recover from such situations is to search for items that fulfill as many constraints as possible, which can be achieved by incrementally eliminating one or more constraints from the query (query relaxation) In [4]. This situation is called the no solution could be found dilemma [5]. A basic approach to tackle this challenge is an incremental  elimination of one or more constraints of the customer query.  Reiter [6] introduced the hitting set directed acyclic graph (HSDAG) which can be used to systematically identify and resolve conflict sets. Dietmar Jannach[7] proposed a technique for determining all maximal succeeding subqueries of a query in an efficient way which allows us to determine optimal or  preferred solutions within the limited time frames of interactive recommendation sessions.Junker proposed an algorithm QuickXplain [8] uses a divide and conquer approach to split the customer requirements and to identify the conflicting ones. Schubert, M proposed an algorithm FastXplain [9] exploits the structural properties of a database table derived from the product assortment and the customer requirements. This paper presents a dynamic and diversity relaxation approach that integrates the calculation of similarity requirements of customers and recommended products resulted in each atom of customer query and the cost of each atom of customer query. The Algorithm DDnRelax returning ?at-least-n? products can be efficiently solved diversified preference of customers.

The remainder of the paper is organized as follows: in Section 2 we introduce  a working example from the domain of tours. In Section 3 we demonstrate a approach of determining minimal relaxations and some concepts.  In Section 4 we demonstrate our approach and describe the DDnrelax algorithm in detail. Section 5 we conclude our paper and give an outlook on future work.



II. EXAMPLE We will illustrate the relaxation problem and our  approach with a simplified example from the domain of tours.

Our product database consists of the products P={p1, p2?p11} which are characterized by different properties as shown in Table 1.

Let us assume that the user's requirements can be ex- pressed with the following query to the database, which unfortunately fails given the set of available products.

,5mod:,:{ 21 starationaccmqcartransportqQ ??? }1800:,3:,4: 543 ??? priceqdurationsqnumofTAq  Query relaxation will now be viewed as the problem of finding a maximal succeeding subquery (XSS)[10] of Q in order to retrieve products that fulfill as many constraints as possible; the difference between the original query and an XSS is called a 'minimal relaxation'. The feasibility of those requirements can simply be checked by a relational query ? [Q]P where? [R] represents the selection criteria of the query. For example, ? [transport= airplane]P would result in the financial services {p1, p2,p6}.

DOI 10.1109/BCGIN.2012.153     TABLE 1  Product database of tours  a Num of TA is The number of tourist attractions.

Note that? [q1,q2,q3,q4,q5]P=?, no solution could be found for the set of requirements. In such situations customers ask for the recommendation of possible repairs which restore consistency between the requirements in Q and the underlying product assortment P. Knowledge-based approaches([7],[11] ,[12]) calculate ?minimal relaxation set? of faulty requirements which should be changed in order to find a solution. Note that the term 'relaxation' in the context of this work means eliminating parts of the query rather than asking the user to revise his constraints like We show how to extend those approaches by introducing an algorithm for the calculation of dynamic and diversity relaxation.



III. DETERMINING  MINIMAL RELAXATION The calculation of such minimal relaxations can be  based on the concepts of model-based diagnosis (MBD) [6]? the basis for the automated identification and repair of minimal sets of faulty requirements ([7],[13]).

Definition 1: (Valid relaxation - VR): If Q is a failing query and Q? is a succeeding subquery of Q, the set of atoms of Q which are not part of Q? is called a valid relaxation of Q.

Definition 2: (Minimal relaxation - MR): A valid relaxation R of a failing query Q is called minimal, if there exists no other valid relaxation R? of Q which is a subset of R.

Definition 3: (Partial query results - PQRS :) Let P= {p1, p2?pn} be the set of products in the catalog. Given a query Q consisting of atoms q1,q2, ..., qk, then PQRS(qi, P) is a function that describes the subset P?? P for which condition qi holds, i?{1, 2, ?, k}.

Lemma 1: Given a failing query Q and a non-empty product catalog P, a relaxation R for Q always exists.

PQRS can be represented as a matrix of zeros and ones .

The results for the PQRS for our example are illustrated in Table 1.

Definition 4: (Product-specific relaxation - PSX): Let Q be a query consisting of the atoms q1,q2, ..., qk, P the prod- uct catalog, and pi an element of P. PSX(Q, pi) is defined to be a function that returns the set of atoms qi from q1,q2, ..., qk that are not satisfied by product pi.

Lemma 2: The set of atoms returned by PSX(Q; pi) is also a valid relaxation for Q.

TABLE 2  PQRS matrix ID 1 2 3 4 5 6 7 8 9 10 11 q1 0 0 1 1 1 0 1 1 1 1 1 q2 0 0 0 0 1 1 1 1 0 1 1 q3 1 1 0 0 0 0 1 1 1 1 0 q4 1 1 0 0 0 0 0 0 0 0 0 q5 0 0 1 1 1 0 0 0 1 0 0  Definition 5: (Product-specific query - PSQ): Let Q be a query consisting of the atoms q1,q2, ..., qk, P the prod-uct catalog, and pi an element of P. PSQ(Q, pi) is defined to be a function that returns the set of atoms qi from q1,q2, ..., qk that are satisfied by product pi.

Each product pi, we can directly infer which of the subqueries causes pi to be filtered out, e.g., PSX(Q, p1) = {q1, q2}, PSQ(Q, p1) = {q3, q4, q5}, PSX(Q, p10) = {q4, q5}, PSQ(Q, p10) = {q1, q2, q3} and so forth.

The MinRelax algorithm for determining the complete set of minimal diagnoses has been introduced by Jannach [7]. This algorithm calculates, for each item pi P and the requirements in REQ, a corresponding product specific relaxation PSX. If the current PSX (Q, pi) is a superset of an already found relaxation, ignore it. If not, remember it and remove all those relaxations that were already found and for which the current PSX(Q, pi) is a subset. Algorithm MinRelax is sound and complete, i.e., it returns exactly all minimal relaxations for a failing query Q [7]. The results for the MR for our example are {MR1:{q2,q4}, MR2:{q3,q4}, MR3:{q4,q5}; MR4:{q1,,q2,q5}.

The performance of  MinRelax algorithm  is (n*(n + 1))/2 subset checks in the worst case, which can be conducted efficiently with in-memory bitset operations.



IV. DYNAMIC AND DIVERSITY RELAXATION After having identified the set of MR, we have to propose  relax actions for each of MRi MR, we have to identify possible adaptations to the existing set of requirements such that the user is able to find a solution. The number of relaxation actions could potentially become very large which makes the identification of acceptable relaxation actions a very tedious task for the user [14].

In order to systematically reduce the number of relax candidates we need to integrate dynamic concepts.

First we sort the MRi MR according to the sorting criteria . This sorting criterion can be similar to evaluation cost values of each MRi. the cost values are based on past interactions of all customers with the system. For each qi we  Id transport Accom- modation  Num of TAa  duration price  1 airplane 3 star 4 3 1900  2 airplane 4 star 4 3 2300  3 car 3 star 2 4 1000  4 car 4 star 2 4 1200  5 car 5 star 2 4 1400  6 airplane 5 star 6 4 3300  7 car 5 star 4 5 1950  8 car 5 star 4 5 2050  9 car 4 star 4 5 1600  10 car 5 star 4 5 2000  11 car 5 star 6 6 2600     sum up all occurrences of not selected relaxation of the past.

The cost is defined as:  cost (qi) = occurrence(qi)/all occurrences   (1) cost(MRi) qj MRi cost(qj)                  (2)  The initial of my algorithm, the algorithm assumes cost(qi) =1/k,where k is the number of atoms in Q. The recommendation system dynamically learns relaxation behavior of customers. According to our definition, the smallest cost value of MRi will be relaxed. In order to better define problems, we assumed cost(qi Q) = {0.1, 0.3, 0.1, 0.3, 0.2}. For our example we used cost values of MRi are shown in Table 3.The MR2 is relaxed, and p5 is recommended to customer.

In practical applications, it is sometimes not desirable just to present one single product to the user but rather have ?at least n? products in the proposal that could for instance be used for comparison purposes. Note that the relaxations computed with the algorithms described above only guarantee that at least one product will be in the result set.

Obviously, we can relax the MRi one by one according to cost value of MRi, until the number of products equal or more than n. For our example we used, if we assume n=3, MR2 and MR3,is relaxed, and p5, p7, p8, p10 are  satisfy. In this situation, we evaluate the similarity between the customer requirements Q and product pi measured by calculating the sim(Q, pi):  ? ? ? ?  ?? m  k ik  i kk kpq  k pQsim  )  )min()max( |][|  1(1),(           (3)  Where max(k) and min(k) respectively denotes the maximum value and minimum value in the domain of attribute k. Using (1) we can determine the n-nearest neighbors which are those n products with the highest similarity to qi Q. The results for the sim(Q, pi) for our example are illustrated in Table 4.

Table 3 cost values of MRi MR MR1 MR2 MR3 MR4 cost 0.6 0.4 0.5 0.6  Table 4  relaxation cost and sim(Q, pi) of qi ID Relaxation cost sim(Q, pi) 1 MR4 0.6 0.5913 2 MR4 0.6 0.6565 3 MR2+q2 0.7 0.5638 4 MR2+q2 0.7 0.6812 5 MR2 0.4 0.7986 6 MR2+q5 0.6 0.5029 7 MR3 0.5 0.8536 8 MR3 0.5 0.8449 9 MR1 0.6 0.7493 10 MR3 0.5 0.8493 11 MR2+q5 0.6 0.6304  According to the similarity between the customer requirements Q and product pi, p7, p8, p10 are  satisfy if n=3.

Note that this result is caused by only relaxing MR3. If the customer only have 3 days for tours, the result can?t satisfy to his(/her) requirement because the recommendation system can?t acquire complete preference information of him(/her). When we have the situation of unfulfillable user requirements, we aim at finding diversity relaxations in these requirements and recommend diversity products to the customer.

Algorithm DDnRelax starts with the initial list of PSQs, for each qi Q, searchs all PSQs that constrain qi and the products for those PSQs, according to sim(Q, pi) recommends products, according to cost(qi) determines the number of recommended products. The number of recommendations has to be more than |Q| for one recommendation for each qi. The details of algorithm DDnRelax as follow:  ALGORITHM:DDnRelax In: A query Q, a product catalog P, the number of  recommendations n (n>|Q|) Out: set of recommended product RP RP ?; forall pi P do  PSQi = Compute the product-specific query PSQ(Q, pi) Endfor forall qi Q do  Queryi = { pj | qi PSQj} if  | Queryi | > n  %check  n products that are the most similar to Q RP_tempi sim(Q, RP_qi ,n,) Ascending sort RP_tempi by similarity to Q  else RP_tempi  Queryi  Ascending sort RP_tempi by similarity to Q endif  Endfor Descending sort qi by cost(qi)  forall i=1 to |Q| do % assigns one recommended product for each qi that is the most similar to Q.

%ensure to no repeated recommended product.

RP_tempi = RP_tempi - RP  RP = RP sim(Q, RP_tempi ,1) %remove already recommended product RP_tempi = RP_temp - sim(Q, RP_tempi ,1)  endfor forall i=1 to |Q| do  %according to cost of qi assigns the number of recommended products for each qi ni=(n-|Q|)* cost(qi)/(cost(qi+1)+?+cost(q|Q|)) RP_tempi = RP_tempi - RP if  | RP_tempi | > ni  %the most ni similar to Q RP = RP sim(Q, RP_tempi ,ni,)     n=n- ni else RP = RP RP_tempi  n=n - | RP_tempi | endif  endfor For our example we used, the result of the algorithm are  illustrated in Table 5 if n=6.products {p1,p7,p5,p8,p10,p2} are recommended. The algorithm DDnRelax enable to recommendation products satisfying corresponding atom are most similar to Q. diversity recommendation enable to satisfy preferred requirements of customer. The function cost of qi enables the recommendation system dynamically to learn overall preferences of customers.



V. CONCLUSION AND FUTURE WORK We have presented new techniques and algorithms for  dynamic and diversity relaxation for constraints-based recommender systems that particularly aim at satisfying specific limits of customers. Through calculating the cost of qi and similarity PSQ of products in catalog and query of customer, the algorithm DDnRelax ensures recommended products in catalog are most similar customer requirements and satisfy indefinite preferences of customer. Our future work will include further research towards 'self-adapting' systems, where priorities and preferred relaxations can be learned from different sources of knowledge like past user behavior.

