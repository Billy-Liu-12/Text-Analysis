Classification Based on A Multi-Dimensional Probability

Abstract- With the rapid growth of the Internet, to make  sure of the computer security has been a crucial problem,  therefore, many techniques for Intrusion detection have been  proposed in order to detect network attacks efficiently. On  the other hand, data mining algorithms based on Genetic  Network P rogramming (GNP) have been proposed recently.

GNP is a graph-based evolutionary algorithm and can extract  many important class association rules by making use of the  distinguished representation ability of the graph structures.

In this paper, a probabilistic classification is proposed and  combined with the class association rule mining of GNP, and  applied to Network intrusion detection for the performance  evaluation. The proposed method creates a joint probability  density function of normal and intrusion accesses and use it to  efficiently classify new access data into normal, known intrusion  or unknown intrusion. It is clarified from the experimental  results that the proposed method shows high classification  accuracy compared to the method without probabilistic clas  sification.



I. INTRODUCTION  The Internet has been spread all over the world and  allowed accesses to everyone, so to keep the network security  has been an essential problem. One of the methods to find and  prevent network attacks is Intrusion Detection Systems (IDS)  [1]-[3] . Generally, IDS deals with two kinds of detection; one  is misuse detection and the other is anomaly detection. IDS  for misuse detection extracts patterns of normal and intrusion  accesses, and the new accesses which match the extracted  patterns are labeled as normal or intrusion. Thus, misuse  detection is good at detecting known access patterns with  high accuracy, but not good at detecting unknown patterns.

IDS for anomaly detection extracts normal access patterns  and the new accesses which deviate significantly from the  normal patterns are labeled as intrusion. So, anomaly detec  tion is good at detecting unknown/novel attacks. However,  the drawback of anomaly detection is that it might cause high  positive false rate (PFR), that is, normal accesses are labeled  as intrusion, because any new accesses which deviate from    previously learned normal patterns are regarded as attacks  even if they are actually normal accesses.

On the other hand, Genetic Network Programming (GNP)  [4 ]-[ 6] has been proposed as one of the evolutionary compu  tations. Originally, GNP is developed to deal with dynamic  environments efficiently based on its graph-type phenotype  representation, however, GNP has been also applied to data  mining [7], which extracts many important association rules  S. Mabu, W. Li, , N. Lu, Y. Wang and K. Hirasawa are with the Graduate  School of Informatiou, Production and Systems, Waseda University, Japan  (phone: +81 93 692 5261; email: hirasawa@waseda.jp ).

978-1-4244-8126-2/101$26.00 2010 IEEE  because the graph structure of GNP has distinguished rep  resentation abilities which contribute to create many rules.

For example, GNP can use necessary node functions only  and they are reused many times, which contributes to extract  many important rules. Then, GNP has been applied to IDS,  where misuse and anomaly detection are combined in order  to classify normal accesses, known attacks and unknown  attacks in a same framework [8], [9] . In this paper, a classifi  cation method which creates a multi-dimensional probability  density function and classifies data into known classes and  even an unknown class. For the performance evaluation in  IDS, two dimensional probability density function of normal  and intrusion patterns are created by examining the matching  degrees of the training data with the normal and intrusion  rules extracted by GNP. Then, new data are classified into  normal, known intrusion or unknown intrusion by the prob  ability density function.

The paper is organized as follows. Section II describes the  basic structure of GNP and its class association rule mining.

Section III describes the proposed method which generates a  probability density function and classifies new data into three  classes. The simulation results using KDD99CUP network  connection data [10], [11] are shown in Section IV, and the  conclusions are given in Section V.



II. CLASS ASSOCIATION RULE MINING OF GNP  In this section, a class association rule mining based on  GNP [12] is explained. Based on this method, many class  association rules are extracted from databases, then the joint  probability density function of normal and intrusion patterns  are generated.

A. Structure of GNP  GNP programs are represented by graph structures as  shown in Fig. 1. The phenotype expression of GNP is a  directed graph structure which is represented by the gene  structure. The graph structure consists of judgment nodes and  processing nodes. A Judgment node examines an attribute  of a tuple and returns a judgment result such as "Yes" or  "No". Then, the corresponding branch of the judgment node  is connected to the next node. Jl, h, . . .  , Jm (m is the  total number of judgment functions) shows the judgment  functions; in this paper, they show attributes to be examined  by the judgment nodes. Processing nodes, Pl, P2, . . .  , Pn  (n is the total number of processing functions), serve as  action/processing functions. In this paper, each processing  node has a function to determine the start position of rules  and calculate measurements such as support, confidence and  o judgment node  {J1, .. " J5} : judgment function  o processing node  {P1, .. " P.} : processing function  P. J.

/5 9 ? "4  , _____________ -/ ____________ ?-????!?I??--?-----------___________ _  nu:?:r 511 I 5 I 7 I 9 I nu:?:r 91 2 I 4 I 4 I-I  )  Genotype  Fig, I, Basic structure of GNP individual  x2 value. The program execution starts from Pl, then the  next node to be executed is determined according to the  connection between nodes and the judgment result of the  current activated node. The procedure of node transition is  explained in detail in 11-B.1.

Fig. 1 also describes the gene of a node in a GNP  individual. Each individual has the fixed number of nodes  with unique node number i (0--9, in Fig. 1). NTi represents  the node type such as 1 for judgment node and 2 for  processing node. I Di serves as an identification number of  the judgment or processing function, for example, NTi = 1  and 1Di = 2 represents node function h. Gil, Gi2 ... denote  the node numbers connected from node i. The total number  of nodes in an individual keeps the same every generation.

The fitness function of an individual is represented by    Fitness = 2..= [x2(r) + 10 (nante(r) - 1) + anew (r)] , ( 1)  rER  where, R is a set of extracted rules by the individual, X2 (r )  is a chi-square value of rule r ,  nante(r) is the number  of attributes included in the antecedent part of rule rand  anew (r) is represented as follows.

() { anew anew r = 0  if rule r is new  otherwise,  where anew is set at 150 in this paper.

(2)  The aim of GNP is not to create one good solution which  represents all the rules, but to extract many rules by all the  individuals cooperatively throughout the generations, so it is  quite important to create a large number of candidate rules. In  order to change the graph structures and extract more rules,  the following reproduction, crossover and mutation [4] are  carried out.

Reproduction: First, the best 113 individuals in terms of  the fitness are selected and reproduced three times to  prepare individuals for crossover and mutation.

Crossover: Two individuals are selected as parents from  the reproduced individuals. Note that these two indi  viduals will not be selected again as parents. Two new  / total number of tuples  N  Yes J3  ?'?"'"  b (A3=1) b(1)  ....

Fig, 2, Node transition to find class association rules  offspring are generated from two parents by exchanging  the genetic codes. In detail, each node number is se  lected as a crossover node number with the probability  of Pc, then the genes of the selected nodes are swapped  between two parents.

Mutation: One new individual is generated from one  original individual by the following operators.

1) Each connection gene Gil, Gi2 ... is selected with  the probability of P ml and changed to another  node number.

2) Each node function I Di is selected with the prob    ability of P m2 and changed to another one.

B. Class Association Rule Mining Using GNP  Let I = {Al' A2, . . .  , A I} be a set of attributes and each  tuple T is a set of attributes such that T <:;;; I. An association  rule is an implication of the form X =} Y ,  where X c I,  Y c I, and XnY = 0. X is called antecedent and Y is called  consequent of the rule. If the rate of tuples which contains X  in the database equals x, then we say that support(X) = x.

The rule X =} Y has a measure of its strength called con  fidence defined by support(X U Y)/support(X). Assume  support(X) = x, support(Y) = y, support(X U Y) = z  and the total number of tuples is N, then X2 of rule X =} Y  can be calculated by   N (z -xy) 2  X = --,-,--''----:-;--'--'---- --:-  xy(1 - x) (1 - y)  (3)  If X2 is higher than a cutoff value, we should reject the  assumption that X and Y are independent (3.84 at the 95%  significance level or 6.64 at the 99% significance level).

Let Ai be an attribute in a database with value 1 or 0, and  k be the class labels. Then, a class association rule can be  represented by  (Ap = 1) /\ ... /\ (Aq = 1) =} (G = k) k E {O, I},  as a special case of the association rule X =} Y with fixed  consequent C.

In this paper, class association rules satisfying X2 > X;'in'  support ?: SUPmin and confidence?: confmin are regarded  as important rules, where, X;'in, SUPmin and conf min are the  minimum X2, minimum support and minimum confidence,  respectively given in advance.

1) Representation of association rules by graph struc  tures: A judgment node in GNP has a role in checking  attribute values in tuples [7]. Candidate class association  rules are represented by the connections of judgment nodes.

An example of the representation is shown in Fig. 2. Pro  cessing node PI serves as the beginning of class association  rules. Al = 1, A2 = 1 and A3 = 1 denote the judgment  functions. If a tuple satisfies the condition of the judgment  function, Yes-side branch is selected and the condition of  the next judgment function is examined in order to find    longer rules. No-side is connected to processing node P2  to start examining other rules. Therefore, the branch from  the judgment node represents the antecedent part of class  association rules, while the fixed consequent part can be  predefined.

For example, the class association rules such as  (AI = 1) '* (C = 1),  (AI = 1) A (A2 = 1) '* (C = 1),  (AI = 1) A (A2 = 1) A (A3 = 1) '* (C = 1),  (AI = 1) '* (C = 0),  (AI = 1) A (A2 = 1) '* (C = 0),  (AI = 1) A (A2 = 1) A (A3 = 1) '* (C = 0) are examined  by the node transition in Fig. 2.

The detailed procedure of examining tuples is as follows.

The first tuple in the database is read and the node transition  starts from processing node Pl. Then, if Yes-side branch is  selected, the current node is transferred to the next judgment  node. If No-side branch is selected, the current node is  transferred to processing node P2 to find other rules. The  same procedure is repeated until the node transition started  from the last processing node Pn is finished. After examining  the first tuple in the database, the second tuple is read and  the node transition starts from processing node PI again.

Finally, all the tuples are examined by repeating the above  node transitions. Note that the number of judgment functions  (JI, Jz, ... ) equals the number of attributes (AI, A2, ... ) in  the database.

2) Calculation of measurements of association rules:  In Fig. 2, N is the total number of tuples. a, band c  are the numbers of tuples moving to Yes-side at judgment  nodes JI, Jz and h, respectively. a(l) ,  b(l) and c(l) are  the numbers of tuples in class 1 moving to Yes-side at  the judgment nodes, respectively. Actually, the processing  node from which the node transition starts saves the counted  numbers and calculates the measurements. For example, in  the case of the rule (AI = 1) '* (C = 1), the support  is a(l)/N and the confidence is a(l)/a. In the case of  (AI = 1) A (A2 = 1) A (A3 = 1) '* (C = 1), the  support is c(l)/N and the confidence is c(l)/c. X2 values  are also calculated by Eq. (3) using the above values. The  measurements of rules in other classes are also calculated  by the same procedure using other counters a(k) ,  b(k) and    c(k) ,  k E C.

The distinguished feature of GNP is reusability of nodes  based on the graph structure, so the nodes used in a certain  transition can be shared with other node transitions. As a  generation  Rule pool  'extracted ?Ies are storJ  in a rule pool  ? generation+1  Fig. 3. Flow of rule extraction and evolution  A'11 : LAND=1  A'12 : LAND=O  A'21 : ProtocoUype=tcp  A'22 : ProtocoUype=icmp  A'23 : ProtocoUype=udp  A'31 : Count>=threshold  A'32 : Count<threshold  Fig. 4. An Example of Sub-Attribute Utilization  result, many kinds of association rules can be extracted by  compact structures.

In addition, the extracted rules which satisfy the conditions  of the measurements are stored in an association rule pool  every generation. Therefore, as described before, the rule  extraction of GNP is carried out throughout the generations  in order to create the rule pool with sufficient rules. In other  words, the aim of GNP is not to create the optimal individual  which can extract good rules, but to extract many good rules  by making use of all the individuals in all the generations and  store the rules in the pool. Fig. 3 shows the whole procedure  of the rule extraction and evolution.

C. Sub-Attribute Utilization  There are various kinds of attributes in a network access  database such as discrete and continuous attributes. So, these  attributes need to be transformed in order for GNP to deal  with them efficiently.

We use a sub-attribute utilization mechanism in order to  keep the completeness of data information of binary, sym  bolic and continuous attributes. Binary attributes are divided  into two sub-attributes corresponding to judgment functions.

For example, the binary attribute AI(=land) is divided into  Ail (representing land= 1) and Ai2(representing land= 0).

The symbolic attribute is divided into several sub-attributes.

Fig. 4 shows a division example of three kinds of attributes.

Normal access  rule pool  rule1  rule2  rule3  access data d    Class 2  Intrusion access  rule pool  rule1  rule2  rule3  calculate m1(d)  (average of all Match1(d,r)  calculate m2(d)  (average of all Match2(d,r) )  r: a rule in a class  Fig. 5. How to calculate average matching degrees  Continuous attributes are divided into two sub-attributes (the  sub-attribute greater than or equal to a threshold and that  smaller than the threshold). The mean value J-li and standard  deviation (Ti of each continuous attribute Ai in the database  are calculated to obtain the initial threshold Bi selected  randomly from [J-li - (Ti, J-li + (Til. In addition, the initial  threshold Bi is evolved by mutation every generation in order  to find more association rules. The evolution of thresholds  is controlled by an additional mutation probability which is  set at 113 in this paper.



III. INTRUSION DETECTION WITH A  MULTI-DIMENSIONAL PROBABILITY DISTRIBUTION  A large number of rules of normal and intrusion accesses  can be extracted from the training database [ 10] by the class  association rule mining of GNP. Then, a classifier is built  based on the extracted rules, which classifies new data into  normal, known intrusion and unknown intrusion classes. The  features of the proposed probabilistic classification are as  follows. 1) Two dimensional probability density function is  built according to the matching degree of all the data with  the rules of normal and intrusions. The matching degree of  data with normal rules represents one dimension and that    with intrusion rules represents the other dimension. 2) It is  possible to classify data into the class which does not belong  to either class. 3) The classification accuracy can be improved  by adjusting weights on the probabilities of belonging to each  class.

A. Generating probability density function  Before introducing the probability density function, the  matching degree of data with a rule is defined as follows.

Nk(d, r) Matchk(d, r) =  Nk(r)  , (4)  where, N k(d, r) is the number of matched attributes of data d  with the antecedent part of rule r in class k (in this paper, k E  (a) A shape of a joint probability density function  o  Fig. 6.

0.2 0.4  ml(d)  matching degree with normal rules (X1)  (b) Contour of the function  An example of joint probability density function  P2(d)  {normal, intrusion}). Nk(r) is the number of attributes in  the antecedent part of rule r.

Then, the average matching degree of the data with all the  rules in class k is calculated as follows.

where, R k  shows a set of rules in class k. Fig. 5 shows how  to calculate the matching degrees of data with the extracted  rules and average matching degrees for a certain class.

Finally, a joint probability density function f(Xl, . . .  ,  Xk, . . .  , XK) can be created by the distribution of the average  matching degrees of all the training data d E Dtrain with the  rules r E R k  for all k E C, where C = {I, . . .  , k, . . .  , K}  is a set of suffixes of classes and Dtrain is a set of training  data. Fig. 6 (a) shows an example of the two dimensional  joint probability density function, where normal data gather  around the right side of the figure because the normal data  basically matches with normal rules and does not match  intrusion rules, and intrusion data gather around the left side  because the matching degree with intrusion rules is high  and that with normal rules is low. On the other hand, the  probability of the other area is low because there are few    accesses which satisfy both normal and intrusion rules or  neither rule. However, if a new data does not satisfy either  rule, it could be regarded as unknown intrusion.

B. Classification based on the probability density function  The probability Pk (d) that testing data d E Dtest (Dtest is  a set of testing data) belongs to class k, and the probability  Po (d) that the data does not belong to either class k are  calculated as follows.

Po 1 - z= Pk(d) (7)  kEC  Fig. 6 (b) shows the contour of the two dimensional  probability density function shown in Fig. 6 (a) and which  areas correspond to the probability of belonging to normal  class and intrusion class, respectively. In Fig. 6 (b), Xl  axis shows the matching degree with normal rules and X2-  axis shows that with intrusion rules. The probabilities of  belonging normal class k = 1, known intrusion class k = 2  and unknown intrusion class k = a are calculated by Eq. (6)  and (7) as follows.

Pl( d)  P2( d)  Po  11.0 1m1(d)  m2(d) 0  1m2 (d) 11.0  o ml(d)  f (Xl , X2) dx l dx 2  f (Xl , X2) dXl dx 2  1 - (Pl( d) + P2( d))  C. Modification of probability Pk (d)  (8)  (9)  (10)  In network intrusion detection, there is a trade-off between  positive false rate (PFR) and negative false rate (NFR). PFR  increases when normal accesses are labeled as intrusion,  and NFR increases when intrusion accesses are labeled as  normal. In order to realize the acceptable PFR and NFR,  the modification of the probability Pk (d) is introduced as  follows.

TABLE I  PARAMETERS SETTING OF GNP    Population Size 120  Generation 1000  Processing Node 10  Judgment Node 100  Crossover Rate 1/5  Mutation Rate Pm1 1/3  Mutation Rate Pm2 1/3  Wo = 2.0, Wl = 1.7 and W2 = 2.4  Normal  Unknown intrusion  f!N-OON  matching degree  with normal rules (mN(d) )  Fig. 7. Other classification scheme considering mean and standard deviation  of two one-dimensional probability density functions  data in the training data with normal rules, and those of  intrusion data with intrusion rules (M and (JJ). Then, the new  data is classified into normal, known intrusion and unknown  intrusion by the following conditions, where, mN(d) is an  average matching degree of testing data d with normal rules,  mJ(d) is that with intrusion rules, kN(= 2.5) and kJ(= 0.3)  are coefficients.

if mN(d) ?: /-LN - kN(JN then  else  if /-LN ?: /-LJ then d is normal  else d is known intrusion  if mJ(d) ?: /-LJ - kJ(JJ then d is known intrusion  else d is unknown intrusion  P(?

Wk?(? k  f-- wo Po (d) + 2:kEC WkPk(d)'  (11) The areas of normal, known intrusion and unknown in-  where, Wo , Wk (k E C) are weight parameters.



IV. SIMULATIONS  In this section, the detection ability of the proposed  method is evaluated by the intrusion detection simulations  using KDD99CUP [10] network connection database. The  parameters of GNP is shown in Table I. In addition, the  comparison with other classification (called conventional  method in this paper) which has been already proposed  in [9] is carried out. The conventional method uses mean  and standard deviation of the distributions of normal and    intrusion accesses, respectively, which is summarized as  follows. The conventional method calculates mean /-LN and  standard deviation (IN of the matching degrees of normal  trusion are shown in Fig. 7. The parameters have been  appropriately determined through the simulations.

A. Simulation results  The training data contains 5,000 normal access data and  5,000 intrusion access data including two kinds of attacks,  smurf and neptune. In KDD99Cup database, 41 attributes  are included, however, 165 sub-attributes are assigned to  the judgment functions in GNP after sub-attribute utilization  described in II-C. As a result of the evolution, 19,372 rules  including 1,786 normal rules and 17,586 intrusion rules are  extracted.

1) Simulation I: The testing data contains 501 normal  accesses and 499 intrusion accesses which are the same  intrusion types as the training data. The classification of both  TABLE II  TESTING RESULTS OF THE PROPOSED METHOD IN SIMULATION 1  Normal (T) Known (T) Unknown (T) Total  Normal (C) 481 2 18 501  Intrusion (C) 0 499 0 499  Total 481 501 18 1000  TABLE III  TESTING RESULTS OF THE CONVENTIONAL METHOD IN SIMULATION 1  Normal (T) Known (T) Unknown (T) Total  Normal (C) 474 26 1 501  Intrusion (C) 0 499 0 499  Total 474 525 1 1000  methods are based on the same normal rules and intrusion  rules, and the classification results of these methods are  shown in Table. II and III, respectively. Normal(T), Known  (T) and Unknown(T) indicate normal, known intrusion and  unknown intrusion which are labeled by each classifica  tion method, respectively, and Normal(C) are Known (C)  indicates correct labels of normal and known intrusion,  respevtively. So, in Table II for example, 481 normal accesses  out of 501 are labeled as normal, 2 are labeled as known  intrusion and 18 are labeled as unknown intrusion.

From the tables, detection rate DR, PFR, NFR and Accu  racy of the proposed method are calculated as  DR    PFR  NFR  Accuracy  (481 + (499 + 0))/1000 = 98.0%,  (2 + 18)/501 = 3.99%,  0/499 = 0.0%,  (481 + 499)/1000 = 98.0%,  and those of the conventional method are  DR  PFR  NFR  Accuracy  (474 + (499 + 0))/1000 = 97.3%,  (26 + 1)/501 = 5.39%,  0/499 = 0.0%,  (474 + 499)/1000 = 97.3%.

DR shows how much the normal data are labeled as normal  and the intrusion data are labeled as intrusion, and Accuracy  shows how much the data belonging to certain classes are  classified into the correct classes. The results show that the  proposed method classifies the testing data correctly with  better rate than the conventional method.

2) Simulation II: Next, the testing data contains 748 nor  mal accesses and 320 intrusion accesses including two kinds  of unknown intrusions (nmap and portsweep) in addition  to two kinds of known intrusions. The classification results  of the proposed method and the conventional method are  shown in Table. IV and V, respectively. Here, Unknown (C)  indicates the correct label of unknown intrusion.

TABLE IV  TESTING RESULTS OF THE PROPOSED METHOD IN SIMULATION II  Normal (T) Known (T) Unknown (T) Total  Normal (C) 727 1 20 748  known (C) 0 240 0 240  Unknown (C) 32 5 43 80  Total 759 246 63 1068  TABLE V  TESTING RESULTS OF THE CONVENTIONAL METHOD IN SIMULATION II  Normal (T) Known (T) Unknown (T) Total  Normal (C) 712 31 5 748  Known (C) 0 240 0 240  Unknown (C) 29 9 42 80    Total 741 280 47 1068  From the tables, DR, PFR and NFR of the proposed  method are calculated as  DR  PFR  NFR  Accuracy  (727 + 288)/1068 = 95.0%,  21/748 = 2.81%,  32/320 = 10.0%,  (727 + 240 + 43)/1068 = 94.6%,  and those of the conventional method are  DR  PFR  NFR  Accuracy  (712 + 291)/1068 = 93.9%,  36/748 = 4.81%,  29/320 = 9.06%,  (712 + 240 + 42)/1068 = 93.1%.

We can see that the proposed method also shows better  DR, PFR and Accuracy, however, NFR of the proposed  method is larger than that of the conventional method in  this simulation. Because this simulation deals with unknown  intrusion, NFR becomes higher, so how to determine the  weights on the probabilities of normal and intrusion accesses  is an important problem which is related to the trade-off  between PFR and NFR.



V. CONCLUSIONS  In this paper, a classification method with a multi  dimensional probability density function is proposed and ap  plied to the network intrusion detection problem to evaluate  its classification ability. The proposed method can classify  data based on the probabilities that the data belongs to  normal, known intrusion and unknown intrusion classes,  therefore, it becomes more flexible than the classification  method which divides the classes based only on the mean  and standard deviation of the distribution of each class.

Two kinds of simulations are carried out; one of them  deals with the testing dataset containing normal and known  intrusion accesses in order to confirm the detection ability for  known patterns; and the other one deals with that containing    unknown intrusion accesses in addition to normal and known  intrusion accesses. From the simulation results, it is clarified  that the proposed method shows higher detection rate and  lower positive false rate in both simulations. But, there is  a room for improvement of negative false rate by adjusting  weights on the probabilities depending on the problems and  also improvement of the classification as follows in the  future. We will consider the problems which have more than  two classes in order to confirm the general classification abil  ity of the proposed method. For example, a known intrusion  class can be divided into several classes corresponding to the  types of attacks. Then, high dimensional probability density  function can be created in order to improve the detection  accuracy.

