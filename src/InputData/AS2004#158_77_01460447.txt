<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">Proceedings  of the 2004 lEEE

Abstract-To provide intelligent personalized online services such as web recommendations, it is usually necessary to model users? web acces behavior. To achieve this, onc of the promising approaches is web usage mining, which mines web logs for user models and recommendations. Different from most web recommender systems that are mainly based on clustering and association rule mining, this paper proposes an intelligent web recommender systcm known a5 SWARS (Sequential Web Access- bascd Recommender System) that uses sequential access pattern mining. In the proposed system, CS-mine, an cffcient sequential pattern mining aIgorithm is used to identify frequent sequential web access patterns. The acces patterns are thcn stored in a compact trce structure, called Pattera-trce, which is then used for matching and generating web links for recommendations. In this paper, the proposed SWARS systcm is described, and its pcrformance is evaluated based on precision, satisfaction and applicability,

I. INTRODUCTION With the explosive growth of information available on the World Wide Web, it has become much more difficult to access relevant information from the Web. One possible approach to solve this problem is web personalization [ I ] .  To support this, it is usually necessary to model the past access behavior ol users on thc Web. The acquired knowledge can then be used for predicting the access behavior of a current user to support personalized services such as web search and browsing.

This research focuses on developing an intelligent recommender system to provide personalized web service for accessing related web pages more efficiently and effectively.

The goal of the intelligent recommender system is to determine which web pages are more likely to be accessed next by the current user i n  the near future.

? Various traditional techniques such as collaborative filtering [2,3] and hybrid content-based collaborative filtering approaches [4,5] have been developed for supporting web recommendations. However, such approaches suffer from a major drawback in  which most users surf websites anonymously via a proxy, and their identities are hidden and difficult to get. More recent techniques are based on web usage mining, which aims to discover interesting usage patterns derived from the data stored in web server logs or web browser logs. Promising web usage mining techniques 0-7803-8643-4/041$20.00 0 2004 lEEE such as association rule mining [6,7] and clustering [8,9] have been applied for web recommendations.

Different from the majority of the existing web recommendation techniques, we propose an intelligent web recommender system known as SWARS (Sequential Web Access-based Recommender System) that uses a sequential pattern mining technique, Unlike clustering and association rule mining, sequential pattern mining algorithms [ 10,11,12] also consider the sequential characteristic of access patterns, which is very suitable for predicting the next web pages. In addition. this paper aIso proposes a compact data model, called Pattem-tree, which stores the sequential web access patterns, and an efficient approach for user pattcrn matching and recommendation rules generation. Different evaluation    and recommendation rules generation. Different evaluation measures including precisian, satisfaction and applicability are proposed to measure the pcrformance of the recommender system.

The rest of this paper is organized as follows. Section I1 presents thc systcm architecture of SWARS. Section III disc uses  the performance evaluation and experimental results. Finally, Section IV concludes the paper.

11. SYSTEM ARCHITECTURE An overview of the architecture of the proposed SWARS system is given in Fig. 1. First, all users? web access activities of a website arc recorded by the WWW server of the website and stored into the Web Server Logs. Each user access record contains the client IP address, request time, requesfed URL, user ID, HTTP status code, etc. Users are treated as anonymous since the IP addresses are not mapped to any uscr- identifiable profile database. After obtaining the Web Server Logs, the Sequenriul Partern Mining component is applied to mine the user access sequences from the Web Server Logs.

Then, the Pattern-tree Construction component constructs the recommendation model or Puttem-tree from the mined sequential web access patterns: Both the sequential pattern mining and Pattern-tree construction processes are carried out off-line. The Pattern-tree can be updated or regenerated regularly to incorporate new access data.

When a user visits the website, the user?s HTTP requests in the current browsing session are recorded in order, and the current access sequence is constructed. Each user accessing the website can be identified using hisher IP address.

Matching the user?s current access sequence from the recommendation model of thc Pattern-tree, the Recuminendation Rules Generation component will generate recommcndation rules. From the recommendation rules, recommended or "related" links will bc dynamicaIly insened into the current requested page. An example browser display is shown in Fig. 2. The upper frame displays the original requested web page and the lower frame displays a list of recommended links.

MI4ine lining n 1 -  I U I OniirsRemmnmdation 1 1  1 Fig. I System architecture.

A. Sequential Pattern Mining ' Every single page access of a website can be recorded automatically in  the web logs by the web server. In general, each line of web logs (one access record) includes the following key information: date-timestamp, client IP address, user ID, requcsted URL, and HTTP status code. We define web logs to be a collection of sequences comprising web access events from each user during their corresponding session in timestamp ascending order. Preprocessing must be performed on the web logs prior to applying sequential pattern mining. The main data preprocessing techniques [133 used here include data cleaning, user identification, and session identification.

Let's define sequential pattern mining [ 111 as follows.

Given a sequence database where each sequence is a list of transactions ordered by transaction time with each transaction comprising a set of items, find all sequential patterns with a  user-specified minimum support, which is defined as the number of data sequences containing the pattern.

Lct E be a set o f  uniquc access events, which represents web resources accesscd by users, i.e. web pages, URLs, topics or categories. A web access sequence S = ele2 ... en (e, E E) for 1 I i I rl is an ordered collection (sequence) of access events, and IS1 = n is called the length of the web access sequence.

Note that it is not necessary that e, # ej for i # j in S, that is, item-repetitions are allowed. Suppose we have a set of web access sequences with the set of events, E = (a, 6, c, d, e,A. A sample web access sequence database is shown in Table I,    sample web access sequence database is shown in Table I, which contains four unique web access sequences.

TABLE 1. A SAMPLE DATABASE OF WEB ACCESS SEQUENCES.

Session ID n b d o c e a t r b c n c b a b f a e 4 a f b a c f c A web access sequence S' = eI 'e2'  ... elt is called a sub- sequence of web access sequence S = ele2.. .en. denoted as s' c S, if and only if there exists some i,, 1 I i l  &lt; iz &lt; .. . &lt; i, 5 n, such thatc,'=e,, for(1 S j l l ) .  ForS=elez  ...etet+l...e,,S,,lir = e1e2,..ek is called a prefix sequence of S, and SslflE = et+le1+2.. e, is called a sirfix sequence of S for 1 5 k 2 n.

Given a database of web access scquences WASDB = {SI,  Sz, ___, Sm} in which S, (1 5 i 5 m) is a web access sequence, and tWASDBl = m is called the length of the database. The supporr of web access sequence S i n  WASDR is the total number of unique web access sequences in  W A S ~ R  that contains S, as defined in the following equation: sup(S) = I { S, I S c 5, , S, E WAS,, } I .

Note that although access events can be repeated in a web access sequence, any web access sequence S can get a support of at most one from each web access sequence S,. A web access sequence S is called a sequential web access pattern, if sup(S) 2 MinSup, whcre MinScip is a given support threshold.

An access event e, E E is called a freguenr event, if sup(e,) L MinSup. Otherwise, it is called an infrequent event.

TABLE 11. SEQUENTIALWEB ACCESS PATTERNS WITH MINSUP =3 FROM THE SAMPLE DATABASE IN TABLE I.

a:4. bt4, c:3 ua:4. abr4. oc3.  bur4. bc:3 aac:3, aba;4, obcr3, bac:3 4 abact3 Let's consider the web access sequence database in Table I.

Suppose the support threshold MinSup = 3, then all the sequential web access patterns supported by at least three web access sequences are listed in Table 11. In this research, an efficient WAP-tree based algorithm, CS-mine [l 11, has been developed for mining sequential web access patterns. A detail discussion on the CS-mine algorithm and its performance can be found in [ 1 11.

B. Partern-tree Construction A Pattern-tree model is proposed for storing sequential web access patterns compactly, so that i t  can be used for matching with a uscr?s current access sequcnce and generating recommendation rules more efficiently in the Recornmendarion Rules Generation component. The Pattem- tree is based on the Trie 1141 data structure. The Trie is a tree- based data structure for storing strings in  ordcr to facilitate fast pattem matching. in  general, the set of sequential web access patterns can be treated as a set of strings over a finite aIphabet E (the set o f  unique access events). Every node of the Pattern- tree is labeled with a symbol (access event) from E and has a  corresponding support value. Sometimes, the edges of a Trie are labeled instead of the nodes, but nevertheless rerer to the same structure in  either case. Once the Pattem-tree is constructed, the original web access sequence database is no longer rcquired for subsequent processing.

To construct a Pattern-tree, we only need to have one scan of all thc sequential web access patterns. Fig. 3 gives the Pattern-tree Construction algorithm, which is based on Ihe set of sequential web access pattcms mined by the Sequentid Portern Mining componcnt using CS-mine.

~~ ~ Algorithm: Pattern-tree Construction Input: , SWAP - set of Sequential Web Access Patterns 7 -  Pattern-tree of SWAP output:    output: Method: I I :  Create an empty root node R for Pattem-tree T.

2: For each sequence S E SWAP, denoted as S = elez ... e,,, do a: Set cirrrenr-node point to R.

b: For i = 1 to n do, if current-nude has a child node labeled ei, use the maximum support between S and this child node as the support of ei and-set current-node point to e;.

else mate a new child node with the support of S, denoted as (ei:support of S), set current-node point to the new child nodc.

3: Return Pattern-tree T.

Fig, 3 The Psttcm-tree construction algorithm.

Example: The Pattem-tree of the sequential web access pattems given in  Table 11 is shown in Fig. 4. It is constructed as foIlows. First, create one virtual root node R. Then, insert the sequences n:4, b:4 and c:3 into the tree. It creates three new nodes (n:4), (b:4) and (c:3) (labeled as (event : supporr)) as the child nodes of R. Next, insert the sequences aa:4, ab:4, ac:3, ba:4 and bc:3 into the tree. Then, five branches ?(a:4) + (a:4)?, ? ( ~ 4 )  -+ (b:4)?, ?(a:4) --f (c:3)?, ?(b:4) -+ (a:4)? and ?(b:4) + (c:3)? are derived, in which arrows are used to point from parent nodes to children. When inserting ac:3, there has been a child node of R labeled (a:4), so this node is shared and the maximum value 4 is used as the support. The remaining insertion process can lje derived accordingly. From the Pattem-tree, all the sequential web access patterns can be visited by foHowing the path starting from the root node of the tree.

Wg. 4 The Pattem-tree derived from the sequentid web access patiems i n Table II.

Complexity analysis: Inserting a sequential web access pattem S into the Pattem-tree T requires two steps. The first step is to search the matching prefix sequence Sprefix of S in T, and the second step is to create a new path for the remaining non-matching suffix sequence SSlflx of S in T. Were we assume equal costs for matching an existing node and creating a new node. Thus, the totaI cost of inserting a sequcntial web acccss pattern S with length m is o(lS,,,l)+o(ls~~~~,r) = U(ISI) = U(?&gt;.

The complexity of constructing the entire Pattern-tree from scratch is equivalent to the cumulative cost of inserting a11 sequential web access patterns Si, S2, ..., S, with a total length n, which is O(IS,I)+O(ISzr) -t...+ O(IS,I) = O(n).

Actually, the true cost of matching or creating a trie node depends on how the trie is implemented. The Yattem-tree is implemented as a non-compact trie. If the storage is an important consideration, we can use a compact trie, which is also known as a patricia-trie, to implement the Pattem-tree model. As such, the complexity of constructing a patricia-trie based Pattern-tree will be a little different from the analysis  above.

lo  practice, web logs are not static since new updates are constantly being added. However, for web recommendation, we can assume it to be relatively static for a certain period of time. Therefore, the Pattem-tree needs to be updated or regenerated offline periodically, such as one week or 10 days.

The generated Pattern-tree can then be stored in a database or XML file.

C. Recommendarion Rules Generation The Recommendadion Rules Generation component searches for the best-matching access path in the Pattem-tree according to the user?s current access sequence. In general, the longer the user?s current access sequence is, the lower the possibility is of finding the matching path from the Pattem- tree. To increase the applicability of recommendation rules generation, the suffix sequences of the current access sequence will be considered when the matching path of the whole access sequence cannot be found. As such, we will search the matching path based on the same access sequence by removing the first item repeatedly till a matching path is    found or when no more item can be removed from the access sequence, In addition, the length of the longest path in the Pattern-tree is the depth of the Pattern-tree. The matching path will not exist when the length of the current access sequence is longer than the depth of the Pattern-tree. Therefore, some initial items can be removed to make the current access sequence shorter than the depth of the Pattem-tree before the sequence matching process begins.

Generally, the recommendation rules generated from shorter matching paths usually have lower accuracy. In order to improve the precision of recommendation rules generation, only web access sequence whose length is not less than a given threshold can be processed. In other words, the sequcnce matching process will be stopped i f  the length of the remaining access sequence is less than the threshold.

Suppose the current access sequence of a user is S = c ~ ~ a ~ . . . a , ,  the algorithm for generating recommendation rules for S, Recommendation Rules Generation, is given i n  Fig. 5.

Algorithm: Recommendation Rules Generation Input: T - Pattern-trce based on  a support threshold MirrSup S = ula2 ...arr - current access sequence of a user MinLength - minimum length of acccss sequence MnrLength - maximum length of access sequence. which should be less than the depth of the Pattern-tree Output: RR - recommendation rule of a set of ordered access events for S.

Method: I: Initialize RR = 0.

2: If IS1 &gt; MarLRngth then remove the first ISI-Mun;Lengih+I items 3: If IS1 &lt; MinLengrh then return RR, else set current-node point 4: For each item a, from the head of S to the end do from S.

to the root node R of 1'.

a: I f  current-node has a child node labeled a,, then set ciirrenf-node point to this child node.

b: Else remove the first item from S, and repeat from step 3.

5:  If current-node has child nodes, then insert these child nodes 6: Return RR.

into RR ordered by their supports.

Fig. 5 Algorithm for Kecommendation Rules Generation based on the Pattem- tree.

Example: Let's consider the Pattern-tree in Fig. 4. Suppose  the current access sequencc of a user is S = cab (infrequent events have been removed) and the length thresholds of web access sequence are MinLength = 2 and MaxLength = 4 (the depth of Pattern-tree in Fig. 4 is 5 ) .  The recommendation rules for S are generated as follows. The sequence matching process starts from the first sequence item c and the child nodes of the root of the Pattem-tree. We found a node ( ~ 3 )  that is pointed directly by the root, then the second sequence item a is scanned. But the node ( ~ 3 )  has no child node labeled a. The first item of S is then removed, and then S = ab. Because IS1 = 2 1 MinLength, the sequence matching process is repeated.

Now, the matching path (a:4) + (b:4) can be found in the Pattem-tree. The node (b:4) has two children, which are (a4) and ( ~ 3 ) .  Finally, the recommendation rules for the current access sequence S = cab are gencrated as {a, c ) ,  which are ordered by their support, Based on the recommendation rulcs, the corresponding web pages can be determined and recommended. In our approach, the top 5 items in thc recommendation rule set are used for recommendation.

Complexity analysis: The cost of looking up the current access sequence S of length m in a Pattern-trec T with MinLrngrh = Lmin and MaxLengrh = L,, i s  O(min(m, L,, )).

The maximum possible number of lookups is L,, - L,,,,,. This gives the total cost of matching S as O((L,,,, - Lmin)*min(m, L,, )). The complexity of recommendation rules gencrcrtion is thus where L,,, should be less than the depth of the    Pattem-tree.

111. PERFORMANCE EVALUATION A. Evaluation Measrrres Let S = ala z...aLak+,...n, be a web access sequence. For the prefix sequence Sprefir = 0 1 ~ 1 2  ... ok (k 2 MinLength), we generate a recommendation rule RR = { e , ,  e2, ..., e,] using the Pattern-tree, where all events are ordered by their support.

If clL+l E RR, we label the recommendation rule as correct, and otherwise incorrect.

I f  there exists a, E RR (k+l I i i k+l+m, m &gt; O ) ,  we deem the recommendation rule as m-srep snrisfucroly.

Othcrwise, we label it as m-step unsatisfactory.

Let R = ( R R I ,  RR2, ..., RR,} be a set of recommendation rules, where RR, (1 5 i 5 n) is a recommendation rule. IRI = n is the total numhcr of recommendation rules in R. We define the following measures.

Definition 1: Let R, be the subset of R that consists of all correct recommcndation rules. The overall web recommendation precision is defined as This precision measures how probable a user will access one of the recommended pages.

Definition 2: Let R,(m) be the subset of R that consists of all m-step satisfactory recommendation rules. The m-sfep satisfaction for web recommendation is defined as The m-step satisfaction is a very important evaluation measure for web recommendation. Actually, the next web page accessed by a user may not be the target page that the user wants. In many cases, a user has to access some intermediate pages before reaching the target page. Therefore, it is not appropriate if we only use the precision measure to evaluate a web recommender system. The m-step satisfaction gives the precision that the recommended pages will be accessed in the near future (within m steps). Clearly, the satisfaction and precision measures are equivalent for m = i .

In order to realistically evaluate our web recommender system, m has been set with an appropriate value m = 5 to indicate thal the recommended page should be accessed in  the near future.

Definition 3: Let R, be the subset of R that consists of all nonempty recommendation rules. The applicability of web recommendation is defined as As the Pattern-tree only stores web access sub-sequences accessed frequently by users (with a support of at least MinSirp), the recommendation rules generation approach is unable to find recommended pages if  the current access sequence does not include a frequent suffix sequence, i n which case the gencrated recommendation rule is empty.

Therefore, the applicability measure gives a rough idea of how often recommendations will be gencrated. Some parameters such as MinSup in the proposed approach can influence the applicability of web recommendation, Generally, the smaller the MinSup is, the more applicable thc web recommendation is.

But, this comes at the expense of increased sequential pattern mining and Pattern-tree construction cost.

B. Experimental Results Let WAS(MinLengrh) = (S , ,S , ,  ..., S,,] be [he set of weh access sequences, where each sequence has no ICSS than MinLengrh items, i.e., min(lSJ) 2 MinLength ( 1  5 i I n, MinLength &gt; 0). Given the support threshold MinSup, we construct thc Pattern-tree based on WAS(MinLength). Let WAS'(M~~~Le~gth+) = [SI '&amp;', ..., Sk'J (MuxSreps &gt; 0, which is the same as m in the definition of m-step satisfaction) be the set of testing sequences, which is separated from the set of sequences in  WAS(MinLPngth) that contains the training sequences.

The three main components of the proposed SWARS system, Sequential Pattern Mining, Partern-tree Construction and Recommendation Rules Generotion, were implemented in C++. All experiments were performed on a 1.6 GHz Intel Pentium 4 PC machine with 384 MB memory, running Microsoft Windows 2000 Professional. We used two datasets from Microsoft Anonymous Web Data (http:/kdd.ics.uci.edu/    from Microsoft Anonymous Web Data (http:/kdd.ics.uci.edu/ databases/msweb/msweb.html) for training and testing the proposed web recommender system. These two datasets consist of a collection of sessions with each session containing a sequence of web page references. The Microsoft Anonymous Web Data records the pages within www.microsoft.com that each user visited in  a one-week time frame during February 1998. The training sequence dataset has a total of 32.71 1 sessions, with each scssion containing from 1 up to 35 page references from a total of 294 pages.

Note that we only use the 22,7 17 valid web access sequences which have more than one item, i.e. M i n k n g t h  = 2. The test sequence dataset has a total of 5,000 sessions and includes 1,405 valid web access sequences (MinLmgth = 2 and MaxSteps = 5).

I 35 i g 25 g 20 F 15 B l o v E 0 I O  20 30 40 50 60 70 80 90 100 110 Support Threshold (a) 100% 80% 70% 60% +Precision 50% 40% 30% 20% 1 0% 90% + Sat isfaction 0% 1.. ' " j  ' ^*' ' ' ' ' ' I 1 0 10 20 30 40 50 60 70 80 90 ID0 I10 Support Threshold I tN Fig. 6 Scalability vs. Suppori thresholds.

In the first experiment, we measured the scalability of the Sequential Pattern Mining and Pattern-tree Construction processes with respect to different support thresholds. We used CS-mine [ 1 I ]  as the sequential pattern mining algorithm.

This experiment used the 22,717 web access sequences with different support thresholds (from 5 to 100). The experimental results are given in  Fig. 6(a), which shows that the runtime of this process increases sharply as the support threshold is reduced to less than 10. In the second experiment, the scalability of  the precision, satisfaction, and applicability measures of recommendation rules generation had been measured with respect to different support thresholds. This experiment used MinLengrh = 2 and MaxSteps = 5 with different support thresholds (from 5 to 100). The experimental results given in Fig. 6(b) show that as the support threshold is decreased, the precision and satisfaction remain relatively stable, whilst the applicability increascs sharply. Prom both experiments, we can conclude that better recommendations can be obtained with smaller support thresholds, at the expense of increased computational complexity for sequential web access pattern mining and maintaining a larger Pattem- tree. Balancing the trade-offs between complexity and applicability, we decided to use a support threshold value of 10 for subsequent experiments.

In the third experiment, we measured the scalability of the precision and satisfaction of recommendation rules generation with respect to different numbers of recommended pages. This    with respect to different numbers of recommended pages. This .

experimenr used M i n k n g t h  = 2 and MuxSteps = 5 with different numbers of recommended pages (from 1 to 10). The experimental results are given in Fig. 7. When the number of recommended pages increases, the precision and srrfisfncfion also increase. But, the increase is not significant after the number of recommended pages is more than 5.  Although the precision and sarisfaction can be further improved with more (e.g. 10) recommended pages, a long list of recommendcd pagcs will affect the normal browsing activity. As such, we have used 5 as the default number of recommended pages for our system.

I I 100% 90% 80% 70% 60% 50% 40% 30% 20% IO% 0 % ?  ? ? + + + ? 0 I 2  3 4 5 6 7 8 9 I O  II I The number of recommmended pages Hg. 7 Scalability vs. Number of recommended pages.

The last experiment measured the scalability of the  sarisfaction of recommendation rules gcneration with respect to different numbers of steps. This experiment used MinLRngrlx =?2  and MaxSteps = 5 with different numbers of steps (from 1 to 10). The experimental rcsults are given in  Fig.

8. When the number of steps becomes larger, the salisfaclion of recommendation web pages increases. However, the increase becomes insignificant as the number of steps exceeds 5. Therefore, we used a 5-step satisfaction for evaluating the performance of the web recommender system. The experimental results demonstrate that the proposed web recommendation approach is very effective for recommending related pages in the near future (within 5 steps).

102% 90% 80% 70% #% 50% 40% 30% IO% 0% 0 1 2 3 4 5 6 7 8 9 1 0 1 1 m-step Rg. 8 Scatability vs m-step satisfaction.

To summarize, using a support threshold of 10 and recommending only the top 5 pages, the 5-srep satisjich?on achieves a value of 87% and 68% for the corresponding applicability. In plain English, this means that on average, 7 out of I O  visited pages will carry recommendations, and almost 9 out of 10 recommended pages are likely to be visited within the next 5 ciicks.



IV. CONCLUSION In this paper, we have proposed an intelligent web recommender system known as SWARS based on sequential web access patterns. In the proposed system, the sequential pattern mining algorithm CS-mine is used to mine frequent sequential web access patterns. The mined patterns are stored in the Pattern-tree, which is then uscd for matching and generating web links for online recommendations. The proposed system has achieved good performance with high    proposed system has achieved good performance with high satisfaction and applicability.

