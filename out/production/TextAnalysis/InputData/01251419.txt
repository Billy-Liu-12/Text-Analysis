An Web Content Based Data Mining for Car Consumption Preference  in China

Abstract  This paper introduces an incremental FP-Growth approach for web content based data mining and its application in solving a real worldproblem. The problem is solved in the following ways. Firstly we obtain the semi-structured data from the web pages of Chinese car market and structure them and save them in local database. Secondly we use an incremental FP-Growth algorithm for mining association rules to discover Chinese consumers? car consumption preference. To find more general regularities, an attribute-oriented induction method is also utilized to find customer?s consumption preference among a range of car categories.

Experimental results have revealed some interesting consumption preferences that are useful for  the decision makers to make the policy to encourage and guide car consumption. Although the current data we used may not be the best representative ofthe actual market in practice, it is still good enough for the decision making purpose in terms of reflecting the real situation of car consumption preference under the two assumptions in the context.

1. Introduction  The majority of the research has been done so far in the area of data mining is mainly focused the studies on the theow and approaches of data mining, only a few have explored the real applications of data mining that can be seen from literatures. One of the bottlenecks is the difficulty of obtaining real-life data. With the explosive growth of information sources available on the World Wide Web, it has become increasingly significant for users to acquire knowledge from WWW. Web mining can be generally classified into content-based mining and usage-based mining. Content-based Web mining can he reclassified into two sub-categories: agent-based and database-based. Agent-based Web content mining includes intelligent search agent and information filter agent. Database-based Web content mining includes multilevel database and Web query system. Database-  based approach focuses on the techniques for organizing the semi-shuctured data into structured ones and save them into database for later data mining[Cooley, R. et al, 19991.

When the data for knowledge discovery are obtained from web pages by some ways then it become a dynamic data source because the web pages are usually unexpectedly updated. The mining algorithm designed for such a dynamic data source should be incremental for the purpose of efficiency. We present an incremental FP- Growth algorithm for mining association rules and apply it to a Chinese car market database. Car consumption is viewed as a new potential power to the growth of Chinese economy and has been paid a great attention by the Chinese govemment. Many car dealers release the car market information via Internet for the convenience of the customers to acquire the updated information. It is quite natural that the customers access to the web pages to find their favorite cars before they actually go to the market to purchase it. Therefore, it is safe to assume that the more a web page of introducing a type of car is accessed, the higher that model of car is preferred by customers. Thus we have the following two assumptions on which our research is based:  a) Generally a potential customer can obtain car market information via internet;  b) The more a web page of introducing a particular model of car is visited, the higher preference this type of car is given by the customers;  The semi-structured data retrieved from Web page are distributed by Chinese largest car market in URL: httn://www.cheshi.com.cn/. The web-based database includes various kinds of cars, from lower price cars to much higher ones, from Chinese cars from foreign cars.

The number of customers? daily access to a type of car ranges from less than one hundred to several thousands, which shows customers? different preference.

The remainder of this paper is arranged as fellows. In section 2 ,  the techniquc about retrieving semi-structured data on web page is introduced. In section 3, an  0-7803-8242-0/03/ $17.00 Q 2003 IEEE 235    incremental FP-Growth algorithm for mining association rules are introduced. An attribute-oriented induction is utilized to find some more general regularities, e.g.

customers? preference among different car categories in section 4. Some experimental results and analysis are given in section 5. Section 6 is the conclusions.

2. Data retrieval from web pages  In this section, we discuss how to retrieve the interesting data embedded in web pages, such as HTML pages, XML pages or text files. Reorganized the semi-structured data into more structured data is the first step of Web content- based mining. The popular method is to write a program called?Wrapper?[Kushmeri ck, N. e tal ,  1997, Ade 1 berg, B . ,  19981 to extract data from web page, and then store them in database  2.1 Preprocessing  The preprocessing includes: Input interesting URL and key words; Fetching the Web page; Trimming and normalizing the source file. In this phase, our input is interesting URL and key words, and the output is the wanted and normalized data block. Sometimes, a web page includes more than 100 data blocks, e.g.

http://newssina.com.cn.We usually focus on the interesting region (see Fig.2.1). For instance, we are interested with foreign exchange rate, so we can pick up the URL and some keywords, such as ?Sale Price?, ?Purchase Price?, etc.

The URL and keywords are viewed as parameters of the preprocessing function which retums the wanted HTML or XML source file. This raw data is then normalized to facilitate the next phase of processing. Note that most of the valuable data embedded between table pairs, so we can expurgate some senseless block, such as javascript block, head block, and convert all source to lowercase or uppercase, and then replace the continuous spaces with one blank character, which will improve the efficiency of extraction. Since some documents are irregularly written such as ASP and the HTML document, and only the interesting region of the web page is retrieved, a check function is needed to analyze the structure of the document and determine whether to fetch or skip the document to avoid disordering the hierarchy of the document. In this paper we present a method which does not need the integrity of html document, hut the wanted information should be within the fragment  2.2 Getting the wanted block  A module called hook is designed to identify the interesting region or wanted block from a normalized document. The hook algorithm is described as follows:  Algorithm: Hook  Input: keywords, a normalized document; Output: the interesting block; Begin  For i=to m llm is the number of keywords Calculating the frequency ni ,and position p i =(pil, pil, ...,p in) of ith keyword in the normalized document; if q = 1 then retum this table pair block; else find the minimum nk=min(ni).

for j=l to nk  Calculating the kth keyword?s table pair?s positions tbegin, rend, which must satisfy ibegin <pph<rend.

Test all other keywords? position; If one of these keywords has no position  with this region(tbegin, tend), continue next j, or if all of them bas at least one position in region(tbegin, tend), return this region as the wanted block.

Endfor Endfor  End  2.3 Generating structured data  Inside the wanted data block, we are mainly concemed the three kinds of tags: ?table?, ?tr? and ?td?. All other tags can be trimmed to obtain a skeleton of the data block.

These tags reflect the hierarchy of data. As an example, a hierarchy can be generated as follows:  <table> <tr  <td currency </td> <td buy </td> <td sale </td> </tr>  <td US$ </td> <td 826.47 </td> <td 828.95 </td> </tr>  </table>  Then we pick up the data between <td and Utd> pair, store them in a pre-defined structured array and save them in local database for data mining.

<tr  ......

3. An incremental FP-Growth algorithm  3.1 Problem description  FP-Growth has been known as a highly efficient algorithm due to its striking characteristics such as: using compact data structure, eliminating repeated database scan and basic counting as well as FP-tree building operation. FP-growth includes two-step process. In the   http://newssina.com.cn.We   first step, a FP-tree is created by scanning the database twice and I the second step the algorithm FP-Growth is used to mine iteratively the frequent patterns from the FP- tree in the bottom-up order.

In the real world, however, we can hardly apply a mining algorithm directly to an application without any modification. In a dynamic data environment where new data flow arrives unexpectedly, the present FP-Growth can not be used to directly mine association rules if it does not re-run every time the database is updated. The alternative is an incremental FP-Growth algorithm. Such dynamic data environments are easily found in the area of the web-content based data mining where the data for mining frequent patterns are usually retrieved by the wrapper program. Every time the web pages are updated, a new date set is retrieved and he appended into the database by the wrapper program.

The incremental FP-Growth approach can be described as fellows:  Let FTo be a FP-tree built by FP-Growth algorithm from data set Do at time to and a new data flow AD are retrieved from web page in the time interval At, the problem is how to update FTo to a new FP-tree FT, with data flow AD at time stamp t, = h+At so that FT, is exactly the same as that built from data set Do+AD.

We have known that in FP-Growth algorithm, a header table is created for keeping the each item?s frequency in database. So the first step for the incremental FP-Growth algorithm to do is to update this header table with the new coming data set AD. This can be done just by scanning data set AD one time and by resorting the items? frequency. And next the algorithm need to scan data set AD again to create an initial FP-Tree FT? so that we have two FP-trees in memory and the FT? is much smaller than FTo because its data set AD is much smaller. The next is to grow FP-Tree FT? by dismantling FTa:  a) Multi-traversing FP-Tree FTo to generate all the item sets and their frequencies. An itemset?s frequency is defined as the frequency of the terminal node in the itemset.

b) Dismantling FP-Tree FT, by deleting the sub- trees in which the frequencies of all nodes become zero; Growing FT-Trce FT? with the itemsets got from c) a);  Note that the new data set AD may cause such a problem. Such problem must be resolved before the mining process. For a given minimal support an item that is frequent in D may become infrequent in DuAD. On the other hand, an item which is infrequent in D may be highly frequent in AD. All the possible situations due to the new increased data set AD are described as follows:  An item is frequent in both D and AD, therefore it is frequent in DuAD.

An item is frequent in D but not frequent in AD, therefore it is either frequent or not in DuAD.

An item is not frequent in D but frequent in AD, therefore it is either frequent or not in DuAD.

An item is neither frequent in D nor in AD, therefore it is not freauent in DuAD.

Since the present FP-Growth can not deal with the last three cases, the header table in FP-Growth is modified to hold not only the frequent items but also some infrequent ones.

Definition 1. The marginal frequency of an item X in dynamic data environment is defined as:  where rx and rD represent the growth rates of item X and database D, respectively,  Note that the marginal frequency of an item reflects its growth trend in the dynamic database. Higher marginal frequency implies potentially higher frequency of an item in the dynamic database.

Definition 2. For a given marginal frequency threshold a, an item X is said to be potentially frequent if X,, sup 2 a.

Lemma 1 If item X is frequent in D then it must be frequent in DuAD if its marginal frequency X,,-sup>l.

Proof: let X,,,,and X,,p-o,,~ donate the supports of item X in D and DuAD respectively. Since X is frequent in D, that is, for a given minimal support threshold 6 we have X,,,D>6, then in the case that X,a,-sup>l which means X grow faster that D, we have X r u p _ ~ u ~ ~  >X,,,O, therefore X is frequent in DuAD. 0  We are highly concerned with whether the header table Ht rearranges its item frequency order due to the increment data set AD. In the cases that Ht keeps the same item order after AD is added into D, the update problem can be easily resolved simply by inserting each new item into the FP-Tree built from the previously accumulated database, and in this sense the conventional FP-Growth approach is incremental. But in the cases that Ht reorders its item order since the database D receives some new data, the previously created FP-Tree can not be simply updated by the same conducts because the tree by this way will have the different structure from that built from the total data set. The alternative is to build a new FP-tree with AD and then break up the previously built FP-Tree into frequent itemsets such that we can insert each frequent itemset into the new FP-Tree.

In this paper, the header table is updated based on both the minimal support threshold and the minimal marginal frequency threshold so that it holds not only the frequent items in database but also some infrequent but potentially frequent items.

3.2 Algorithm: Incremental FP-Growth Algorithm for Mining Association  Before we introduce the algorithm description of the incremental FP-Growth, we give a demonstration by a simple example. As we have discussed above, we focus on how to update the header table and then update the previously created FT-Tree with the new coming data.

With respect to updating the header table, we need scan the increment data set AD once and calculate each items' both frequency in DuAD and marginal frequency. If the header table does not rearrange its item order then each frequent item in AD is directly inserted into the FP-tree.

Otherwise a new FP-Tree FTA is built from AD and then the previously built FP-Tree FT,,,,, is broken up into frequent itemsets so that each of which is inserted into the new FP-Tree FTA.

Example 3.1 Suppose that the initial database D contains five transaction itemsets: (A,C,D, F),{A,C,D,F),(B,F},{A,B,C,F}and{A,C,F). After two scans of the transaction database, the FP-Tree FT,,,,, and the header table Ht are generated as shown in Figure 1,  IOI 4 ....... ............,  .....

D B  ..... .......................

Figurel. traversing a FP-Tree to get all the frequent itemsets  Suppose that a new data set AD=({D, C, B},(D, A, C),{F, C, E)) arrives, then the frequency and marginal frequency of each item are computed. The header table Ht is thus rearranged in the order of C:7, F:6, D:4, A:4,B:3 and E:l with respect to the given support threshold S=2 and the marginal frequency threshold o=l, In this case, a new FP-Tree FTA is constructed with AD and the updated Ht. (see figure 2)  We now extract frequent itemsets from FP-Tree FT,,,,,, by traversing it twice. After the first traverse we get itemsets (F, C, A, D),(  F, C, A, B)and (F, B}. Their frequencies in the database are 2, I and I ,  respectively, which are subtracted from the frequencies of the corresponding nodes in the tree. The tree becomes smaller by deleting the nodes whose frequency becomes zero. So node D and B are deleted from FT<,,,,J after the first traverse. The frequency of an itemset in the database is determined by the frequency of the terminal node in the path. The tree FT,,,, now contains only three nodes F:l, C:l and A:l in one the path, so the itemset {F, C, A) with frequency 1 is obtained by the second traverse. (See figure 1)  .........................

...... .........................................

Figure 2. FP-Tree FTA built with AD  Figure 3. a new FT-tree by merging FT, and FT,,,-,  The new created FP-Tree FTA continues to grow up by absorbing itemsets from FT,,,rcn,. Meanwhile the FP-Tree FT,,,,e,, is quickly contracting and completely disappeared when FTA ends its growth. We can prove that the tree FTA built by this method is exactly the same as that built from the total dataset DuAD if both the support threshold and the marginal frequency threshold are small enough.

Example 3.2 Suppose the database D and incremental one AD be the sizes of 1000 and 100 respectively. There are four items I,, 12. 13, I4 and their frequencies 56,48,21,36 respectively in the header table Ht. In the incremental data set AD, the four items 11, 12.13.

I4 occur 16, 28, 18 and 3 respectively. Assume that the given minimal support is 6 4 0  and the minimal marginal frequency is o=l.

We firstly calculate the marginal frequency of each item. The four marginal frequencies for 11, 12, 13, I4 are 2.587, 5.823, 6.207 and 0.833 respectively and each item?s frequency in DuAD is 11:72, 12:76, 13:39 and 1,:39.

The header table Hi then resort the four items in the new order of 12:76, I,:72, 13:39 ,14:39. I3 and I4 are infrequent both in D and D u m ,  but I3 is potentially frequent and thus kept in the header table Ht whereas I4 is deleted from Ht since it is neither frequent in D and nor infrequent in DuAD and nor potentially frequent.

Algorithm: Incremental FP-Grow fro Mining Association Rules Input: a FP-Tree FT,,,en,, a new arrived data set AD, min-supp and min-mar-frequency; Output: a group of frequent patterns and association rules; Begin  Scan AD once to update each item?s count in Ht; Calculate each item?s frequency in D u m ; Calculate each item?s marginal frequency; Re-sorting the header table Ht; Delete the items from Ht that are neither frequent and nor potentially frequent; If the order of items in Ht is rearranged then  Delete all the links between the header table and the FP-Tree FT,,,;  Create a new FP-Tree FTA from I AD 1 ; While ( FT,,,, has child nodes )  Depth-first traversing FT,,,, to get a set of itemsets IS;  For k=l to I IS I // for each itemset ISk in IS Rearrange the items in ISk according to  the order of items in the header table; Insert each item in ISk into FP-Tree  FTa as the child of current node; Update the frequency of the nodes in  FTA with the frequency of ISx ; Connect the new tree FTA to the  header table; Subtract the frequency of ISk from  of its each node in the path of FT,,,,,; Delete a node and its subtree If its  that  frequency becomes 0; End for  End while  Call FP-Growth (FT, ) ; Else // the order of the header table keeps as before  Fori= 1 to I A D Rearrange the order of items in ADi  For each item, in itemset ADi according to that of the header table;  Insert item, into FP-Tree FTcu,,cn, as a child of the current node;  Connect the new tree node to the header table;  Endfor j Endfor i Call FP-Growth (FT,,,,, ) ;  Endif End  3.3 Performance test  There is no report or accurate analysis so far on the complexity of FP-Growth. It is difficult to give an accurate expression of the time complexity of the above algorithm. We provide an estimation of the time complexity of the algorithm. Some experimental results about the performance of the above algorithm are provided in Figure 4. The data for performance test are retrieved from web pages so the database is dynamic. We are concerned with the efficiency of the algorithm when compared with then conventional FP-Growth and its effectiveness to the dynamic data environment. Since the convention FP-Growth algorithm always re-run to find all the frequent patterns when new data flow arrives, the first curse diagram in figure 4 shows that the conventional FP- Growth algorithm is less efficient than our extending one after the database becomes item-frequency-order stable.

extending FP-Growth vs. FP-Growth  time(seconds)  25 , m  ,- - . . . . . . . . . . . .

2500 5700 12000  3300 8000 17500  database size  FP-Growth  + FP-Growth     time consumption at different min-supports time(sec)  ,elsecl Time consumption compared with FP-Growth ' 50 '*   - FP-Growth  0.01 0.2 0.4 0.6 0.8 1 min-support(%)  mles mined at different mi-suppoN rule number   +sire:26000 -5 size:l775    0.01 0.2 0.4 0.6 0.8 1  min-supportp?)  Figure 4. Experimental results of performance test  4. Obtaining more general information  Many data mining approaches search for interesting information in database at low levels. That is, the language of the mined rules is composed of the terms occurring in the database itself. However, people sometimes expect to get some high levels of knowledge abstraction which give them a clearer expression of information ahout the database. Generating a less number of the final rules by inducing the discovered rules which are similar at low level can help people better understand the domain problem. In our application, we pay more attention to finding the difference of customers' preferences between Chinese cars and foreign cars, or  between expensive cars and inexpensive ones and etc.

than to finding the differences between each type of cars.

Generally, an attribute-oriented induction takes as a database relation and a concept hierarchy for each attributes. A concept hierarchy is a concept tree that forms a taxonomy of concepts ranging from a most general concept at the root to some representation of all attribute values at the leaves. A concept hierarchy is actually the representation of background knowledge and therefore is built with the support of domain experts. In a concept tree, a higher concept is formed by integrating the related lower concepts or attribute values into a symbol which may be highly abstract. In this paper, three concept hierarchies (see figure 5) are designed in our mining task. The continuous attribute price is discreted into 9 intervals and 5 higher level concepts are designed for concept induction. The attribute model-name is a category one and has a quite number of values which are classified into Chinese car and foreign car. The attribute daik-access is also a continuous one that is discreted into six intervals and is further generalized three concepts.

Our purpose focus on finding the difference of customers' preferences between Chinese cars and foreign cars, the expensive cars and inexpensive cars and etc..

mice  Figure 5. Concept hierarchies for the attributes price  I I  low-access mid-access high-access  <SO 50-100  Figure 6. Concept hierarchies for the attributes Access     hinese cars  Figure 7. Concept hierarchies for the attributes car-model  4. Applied to the Web-content based data mining  In this section, we present a real-world application of our approach. In applying it to the Chinese largest car market whose Web site is located at htto://www.cheshi.com.cn , we found some interesting results about Chinese car consumption preference. The data that are retrieved by a wrapper from the web pages contain 11 attributes among which the attributes: model-name, sub-category, price, pricing-date and daily-access are valuable to our mining task.

wramer  incremental FP-Growth  Figure 8. Frame of incremental FP-Growth applied to Web-content based data minine  The association rules in table 1-3 are mined when the database incrementally reaches the size of about 17750 instances. Table1 lists some rules that have strong association between the attributes prices, daily_access and model-name. The rules reflect the customers? higher preference to Chinese cars with price in the range of 100,000-200,000(RMB) than to those in other price ranges and Satana and Shenglong are the two major models that Chinese people prefer most. Table 2 shows that Chinese customers are most interested in foreign cars of moderate price ranging from 300,000 to 500,00O(RMB). The association between price and daily_access is shown in table 3 from which we can see  that inexpensive cars are highly associated with frequent daily access whereas expensive cars have strong relation with less daily access. But the cars with price under 50,00O(RMB) is an exception because they show no attraction to customers. Moderate price cars are moderately preferred by Chinese peoples.

Table I .  Preference to main models of Chinese cars Association rules Supp. Conf.

Price:l&20 A Access:100-500 - Santana 2.749 18.937 Price:IO-20~ Access: 50-100 Santana 7.489 53.415 PricclO-20 A Access: 100-500- Shenglong 16S75  Price:lO-20 A Access: 50.100 3 Shenglong Price:lO-20 A Access: 100-500 2 FAW 2.441 32.757  0.621 22.581 Pricc- lO A Access: 100-500 2 Xiali Priee:lO-20 A Access: 50-100 3 Citroen 0.272 4.483  0.313 11.389 Price:5-lO A Access: 100-500 a Changan  0.786 10.497 Price:IO-20 A Access: 100-500 2 Chew  0.130 4.264 Price:30-50 A Access: 50-100 2 Audi  Table 2. Preferences to main models of foreign cars Association rules Supp. Conf.

Price:30-~O~Access: 50-100 =, Toyota 0.426 13.953 Price:30-5O~Access: 50-100 3 Buick 0.414 13.566  Price:30-5O~Access: 50-100 j Nissan 0.278 9.109 Price:30-5O~Access: 50-100 3 Lexus o.102 3.295  0.012 0.388 Price:30-SO~Access: 50-100 =$ Benz 0.035 0.517 Access: 50-100 =$ BMW  Table 3. Association between price and access Association rules Supp. Conf.

Price: <5 =,Access: 100-500 0.898 1 1.428  Price: 5-10 =,Access: 100-500 2.749 83.937  Price: 10-20 3 Access: 100-500 7.489 53.415  Price: 20-30 = Access: 100-500 2.353 29.926 Price: 20-30 =, Access: 50-100 2.737 39.879  Price: 20-30 3 Access: <SO 8.884 13.519  Price: 30-50 =Access: 50-100 3.050 80.000  Price: 50-70 =, Access: 6 0  11.319 17.224  Price: 70-90 =, Access: <50 5.426 8.311  Price: 90-120 =,Access: < 50 1.608 2.446  Price: >I20 = Access: <50 2.994 4.416     Table 4. More general rules induced with min supp=l .O% Association rules Supp. (%) Conf.(%)  Price(% low) -Access (x, mid) 3.889 89.437  P?ce(x, low-mid.) a Aceess(x, mid) 18.648 92.875  Priee(r, mid.) * Access(x, mid) 13.718 87.097 Price(x, mid-high) =Access (x. low) 9.453 90.099  China_car (x ,?Yes?) -A~~~~~(~ ,  mid) 72.125 46.021  Foreign_car(x,?Yes?)aAccess(x, law) 26.389 89.882  Price(x,low_mid.)AChina_car(x,?Yes? 17.203 61.223 )=Access(x, mid.)  12.568 94.018 Price(x, mid.) A Foreigr_car(x, ?Yes?)  = Accessfx. low) . .  .

5.219 98.914 Priee(x.high)AF\Foreigr-~~~(~,?Y~~?~ 3  Access(x, low)  5. Conclusion  An incremental FP-Growth algorithm for mining association rules is proposed in this paper. It extends the FP-Growth algorithm to dynamic data environments. The web-content based data mining is a typical example of such kind dynamic environments. Both experimental results on performance testing and the real-world application have shown its high effectiveness. The web- content based application discovered some interesting results about Chinese customers? car consumption preference. This extended FP-Growth algorithm has demonstrated its great potential in discovering usual association rules from dynamic environments which placed the algorithm in a position to be a strong candidate as a good data mining tool among the other algorithms such as classification, clustering, sequential patterns mining, etc. The system is implemented with VC++ 6.0 under the platform of windows 98/2000 and has been put into practical use. One of the important issues which can be investigated in the future is the reliability of the discovered association rules.

