<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">Fuzzy  Subgroup Mining for Gene Associations

Abstract- When studying the therapeutic efficacy of potential new drugs, it would be much more efficient to use predictors in order to assess their toxicity before going into clinical trials.

One promising line of research has focused on the discovery of sets of candidate gene profiles to be used as toxicity indicators in future drug development. In particular genomic microarrays may be used to analyze the causality relationship between the administration of the drugs and the so called gene expmiou, a parameter typically used by biologists to measure its influence at gene level. l%is kind of experiments involves a high throughput analysis of noisy and particularly unreliable data, which makes the application of many data mining techniques very difficult.

In this paper we explore a fuzzy formulation of the a priori algorithm, a technique whose crisp version is commonly used to mine for subgroups in large datasets; the purpose is to extend the original method, already suitable to deal with large amount of data, in a way that naturally allows the user to deal with the intrinsic imprecision in the data.

The algorithm is tested on real data coming from experimental genomic data.



I. INTRODUCTION Genomic arrays are a powerful instrument of analysis for the experts in the field of drug toxicity research, since they provide them with a better global picture and allow them to analyze the interactions among thousands of genes simultaneously.

One important advantage when working with micromays is thus the high data throughput; on the other hand this implies the need of coupling their use with sophisticated data mining techniques in order to extract the information that is actually useful for the case at hand. Moreover, as in many other real world applications, the original data is usually not reliable enough, because of imprecisions in the measurements, noise or other causes inherent to the nature of the data itself.

In this paper we present a modification of the a priori algorithm, a well known method aimed at finding regularities in a series of data in order to discover co-occurring elements.

The very large amount of possible Combinations that need to he analyzed cannot be dealt with through exhaustive search, so obviously particular attention must be paid to the choice of the data structure used to store the information. Also, as already pointed out, the poor quality of the data cannot be ignored.

The fuzzy formulation of the a priori algorithm presented here addresses the laner point.

Section I1 introduces the basic concept of ?association rule? and Section I11 summarizes the original formulation of the a priori algorithm; Section IV then presents the fuzzy extension.

We discuss our results in Section V and finally in Section VI we conclude and discuss possible further extensions.

11. ASSOCIATION RULES The a priori algorithm belongs to a class of methods whose goal is to find regularities in a set of data in order to discover co-occurring elements and to generate a set of rules that can  be used for prediction [l], [2].

A field in which it may typically find applications is market basket analysis, where one wants to determine the items that customers buy together so that, knowing what products are already in the shopping cart, it may be possible to infer the presence of other products; such information is stored in the    presence of other products; such information is stored in the form of an association rule.

An association rule stores the attributes for a particular sample; in the case of market basket analysis, the customers represent the samples, and the items they bought are the re- spective attributes. In the standard formulation of the problem an association rule contains crisp information (either an item has been bought or not). The goal is, of course, the selection of interesting rules from the whole set, so some measure is required in order to attach a relevance value to each rule.

One of the quantities that are commonly considered is the so called support of the rule, that is the percentage of samples for which the rule applies. Usually a minimum support is specified, so that only the samples represented by those rules whose attributes satisfy at least the specified number of rules are selected (that is, we are interested in frequent subgroups of items.) Despite not being conceptually too challenging in principle, the task of rule selection presents obvious difficulties, since an exhaustive search through all the rules is practically unfeasible due to the very high number of possible combinations; what is needed is an effective way to store the elements and to process them.

0-7803-8376-1/04/$20.00 Copyright 2004 IEEE.

//Choose minimum required suppoi? B // Initialize variables n = 1 //fmntier counrer //Initialize firsr fmnrier FI = {(a.)llsumort((a.)) 2 U} // Build remaining fmnriers REPEAT // Expand each subgmu in previous fmntier VS := {(af,a;,. . . , a n - l ) }  E F,-I : // using elements f" the firsr fmnrier A = (a,il(a,) E FI A (indez(a;) 2 indez(a:- l ) ) Va E A : F, = F, U (Sa) f //clean n-fmntier F, = {s, E ~ ~ l l ~ ~ ~ ~ ~ ( ~ ~ )  &lt; Fn = Fn - Fn // Update fmmier counter n = n + l Fig. 1. A prefix Vee built using five attributes. The nodes represent the subgroups with their associated counters; when no pruning occurs. the tree grows until no more elemen&amp; can be added to a subgroup: the ordering of the attributes emu re^ that duplicate subgroups are avoided.

Many sophisticated algorithms for mining association rules exist in literature [2] and several modifications of the basic formulation of the problem have been proposed in an attempt to improve performance [7], or to consider different definitions for the constraints [5] and so on. We argue that an a prion- based approach combined with use of fuzzy logic may still prove effective, especially when dealing with unreliable data.

111. THE A PRIORI ALGORITHM In this paper we follow the implementation described in [3] and use a p r e f i  free as the main data structure.

The structure of this tree is sketched in Figure 1. Each node of the tree represents an association rule identified through its attributes; it also needs to contain a counter indicating the frequency of the rule in the original dataset in order to be able to assess whether the support constraint is satisfied or UNTIL (F, = {}) or (stop condition) Fig. 2. Pseudo-code describing the process of building the prefix tree whose index is greater than the those of the elements already present. Obviously the tree is greatly simplified by eliminating this redundancy.

No element added to a subgroup that does not satisfy the support constraint may possibly generate a frequent subgroup at any successive level thus justifying the early pruning of the tree. Since growing the tree may cause a combinatorial explosion, the pruning mechanism is meant to try and keep the    explosion, the pruning mechanism is meant to try and keep the memory consumption low since the frontiers deep in the tree will contain fewer and fewer elements to be further expanded.

This iterative process is repeated until it is no more possible to expand the last frontier or another stop condition is true, as may be the case if a maximum depth for the tree was specified.

Figure 1 shows an example of such prefix tree, with its typical highly unbalanced structure. In this example, the tree not.

implementation also affects the performance during the search appear in at least as many rules as by the chosen for frequent subgroups. The idea behind a pref i  free is that support; in other words, those elements will we do not need to store the complete information about a rule frontier.

at each node. Assuming that all nodes satisfy the constraint for the support in the tree at each depth level, no pruning will be required; nevertheless n attributes and it will also contain the counter. The whole are avoided, All subgroups can be easily retrieved from this rule can be easily reconstructed and this solution seems also a data SVUCture, natural implementation that facilitates later access to the data.

code in Figure 2, where we use the term "n-frontier" to indicate the collection of all subgroups containing n attributes.

The generic n-th iteration consists of two steps: at first all rules containing n attributes are generated; after that, the ones not satisfying the frequency requirement are pruned, thus generating a clean n-frontier. The rules of size n + 1 can be easily built by selecting one element at a time from the 1-frontier and adding it to one of the subgroups of size n.

Moreover, since for our purposes two subgroups are identical regardless of how the elements they contain are arranged, we can avoid testing unnecessary combinations if all the elements are assigned an identifier that defines an order on them.

Extending a subgroup will only be allowed with elements Storing the tree is expensive in terms Of and was built starting from five attributes that, by themselves, the More precisely* each Of the nodes at depth represents the last element in a rule describing a sample with the ordering of the attributes that repeated subgroups The tree is built incrementally as described by the pseudo- Iv. FUZZY SUBGROUP MINING The approach just outlined provides an efficient solution in terms of memory and time requirements. One limitation, though, is that in the original formulation the association rules are meant to represent crisp information (in the market basket analysis example, a customer either bought an item or not).

In many real world applications it is very unlikely that the original data is already accurate enough to he used as an input for the algorithm; for instance, when working with biological data it is mandatory to take into account some imprecision due to measurements or  just biological variability, so such crisp decision lines are inappropriate.

Moreover, the generation of the association rules themselves is an intrinsically imprecise task since a clearly cut decision // Chose minimum required suppor? 8 //Initialize variables n = 1 //frontier counter FOR all chosen f m y  thresholds pa, p i , .  . . , pk // Rebuild firsf fmntier using data obtained with current fuuy threshold FP' = {(a,)I!suwt'~((a,)) 2 5 ) // Build additzonal frontiers REPEAT // Expand each subgmup in previous frontier // (previousp;rier ma$ have been built during last nut) VS := { (a , ,az  ,..., F , - I : // using elements from the firsr frontier Va E A :  F, = F, U ( $ a ) //clean n-frontier F, = {S% E F&amp;llpport(SJ &lt;e} F, = F, - F, // Update frontier counter n = n + l    n = n + l UNTIL (F,, = {I) or (slop condition) ENDFOR A = {a,\\(a,) E FfX A (indm(a,) 2 indez(az-, )I Fig. 3.

several runs each using a different fuzzy threshold.

Pseudo-code describing the process of building the prefix tree in line is rarely available: on the contrary, it is often desirable to leave some freedom to the users, in terms of interaction with the algorithm.

A natural extension is thus the embedding of fuzzy logic [I31 in the algorithm itself by letting the attributes stored in the association rules represent a fuzzy degree of membership. Computing the support for each rule will require the choice of a threshold, which of course will influence the pruning of the prefix tree.

The choice of a fuzzy threshold obviously modifies the starting data; in particular a lower threshold may allow more elements to satisfy the constraint on the support and eventually larger subgroups to be discovered. Since in most cases the original data is imprecise, allowing this kind of flexibility may represent a great advantage.

The algorithm is described in the form of pseudo-code in Figure 3. Besides the additional loop introduced to consider one different fuzzy threshold at a time, the main difference with Figure 2 is in the construction of the first frontier. The notation F p  shows that it is now dependent on the fuzzy threshold, as already explained; in summary more elements are added to the first frontier and only the last frontier is considered as a source for subgroups to expand.

The underlying idea is that, by choosing a maximum allowed number of elements per subgroup, a minimum support and a fuzzy threshold for each iteration, the user is now able to tune the algorithm toward a subset of the whole search space where it is more likely to find useful subgroups.

The example in Figure 4 illustrates this point. Let us assume that after choosing a fuzzy threshold 0 ,  five attributes initially satisfy the support constraint (let them be a, b, c, d and f).

As previously mentioned, the attributes are ordered using an internal index.

In this first iteration, the tree is built as described earlier Fig. 4. The evolution of the prefix tree under two successive choices for the fuzzy threshold. In the bottom half, the dashed area represent the p m  of the tree that will be expanded, whereas the shadowed area will be "fmzen".

and for the sake of the example we assume that two of the discovered subgroups do not satisfy the requirements for the minimum support and are pruned from the tree, as shown in the upper part of Figure 4.

A successive run with a fuzzy threshold 1 &lt; o discovers another attribute (9) that now satisfies the constraint, moreover attribute e is reconsidered and accepted in the expanded first frontier because, thanks to the lower fuzzy threshold, it now satisfies the support constraint. This attribute is assigned a higher internal index and is appended at the end of the list of available attributes (this is indicated by e' in the lower part of Figure 4).

The tree may now continue to grow by expanding the subgroups found in the last frontier; however the process is slightly different than in the original formulation of the algorithm. The shadowed area in the figure shows a part of the tree that was generated by previous runs; the leaves of the tree contained in this area will not be expanded anymore; rather we ignore this part of the search tree and focus only on the last frontier.

Since we are arguably interested in finding larger subgroups this represents a trade-off that allows us to get a deeper insight into what was already found with a more restrictive constraint while keeping the tree small. Comparing the bottom half of Figure 4 with the top one, it is evident that we have succeeded in further expanding the tree (depth-wise) without having to consider possibly less interesting subgroups.

Obviously this technique poses a problem for the ordering    Obviously this technique poses a problem for the ordering of the elements, that we want to maintain homogeneous throughout different runs in order to keep the tree consistent.

Newly found elements will be assigned a higher intemal index so that the sorting will be consistent (as in the case of g in the example); we also need to take into account those elements whose support increases (and possibly now satisfies the constraint) because of the changed threshold (e?).

It is clear from this example that two main steps may be isolated in the process of building the prefix tree. Initially, a ?basic? set of subgroups satisfying the requirements is selected, which corresponds to narrowing the search space down to a particular region of interest. An initial conservative choice for the support helps in keeping the search tree small but may be too restrictive and overlook potential candidates.

By softening the fuzzy constraints this hard core will be ailowed to expand, adding larger subgroups to the initial set; newly found subgroups will still satisfy the original support requirement and will in a way represent a ?refinement? of the original solution.



V. EXPERIMENTS The research we are considering as the source of our data originated from a study conducted at VistaGen Therapeutics, Inc.; the purpose of this study is to investigate the possibility of using gene expression profiles as predictors for potential drug toxicity.

A. The data The data used in our experiments was generated using gene microarray technology [ 1 I]. Microarrays can be regarded as matrices in which each spot contains information ahout the amount of RNA for a particular sample; the number of spots per array is typically in the order of several thousands.

This kind of data has often presented a challenge to re- searcher in the field of data mining due to its characteristics of noisiness and unreliability, and many different approaches have been already documented in literature [41, [61, [SI, [IO].

For our purposes it is sufficient to say that, starting from the raw data, it is possible to generate a matrix of intensity values representing RNA expression profiles.

An experiment then consists in measuring the effects pro- duced by a particular drug in terms of variation in the gene expression levels; even though the actual biological path may remain partially unknown, the idea is that a relationships may be observed between the final effects (the gene expression  levels) and the cause (the administration of the drug).

Our experiments involved a set of nephrotoxic drugs tested on two selected kidney cell lines to produce an output con- sisting in the expression levels of about 8000 genes. Previous tests conducted in laboratories on human renal epithelial cells suggest that they show different sensitivities to different drugs, very much as observed in vivo. In particular the two cell lines considered here are two different areas of the kidney (the Proximal Straight Tubule, or PST, and the Collecting ?hhule, or CT), respectively the areas most and least sensitive to treatment.

The object of the present research are genes that are involved in the early response to the drugs, that is before acute TABLE I THE EXPERTS? DEFINITIONS FOR FOUR GROUPS OF INTEREST. THEY CAN BE EASILY TRANSLATED INTO FUZZY RULES.

I I I h g  5 A gnphrcal repre*enulion of Ihe furry groups defined m Table I The horden of the fully region, vary depending on b e  choice of Ihe Ihmhold toxicity manifests itself; in order to identify them, an appropri- ate concentration was selected for five target drugs: Cisplatin, Cyclosporin, Gentamycin, Tohramycin and Kanamycin.

The gene subgroup discovery process is complicated by the fact that the role of most genes is still unknown; indeed one of the aims of the biologists is to find groups of undocumented    the aims of the biologists is to find groups of undocumented genes in order to broaden their knowledge of the biological pathways that cause a drug to be toxic.

In a situation like this an exploratory analysis that allows the scientist to get some preliminary results in order to re- test, refine them and possibly validate them against existing literature is of much greater use than a static algorithm.

B. Mining for  predictors From previous studies it is already known to biologists that potentially interesting genes are the ones that show a differential response in the two considered cell lines (PST and CT), so they were asked to formalize a description of the expected targets in terms of groups of interest, which will then be used to define the association rules, or in other words to decide whether a gene is to be considered overall expressed or not for a certain drug.

The quantity that would be natural to consider for this purpose is the bare expression level for a given gene, but unfor- tunately this is usually not particularly useful per se, since it is influenced by too many factors, including intrinsic biological variability, which basically deteriorate the signdnoise ratio.

Biologists prefer to rely on a different quantity, the so called fold expression, which is defined as the ratio of the expression TABLE 11 EACH ROW SHOWS, FOR THE GIVEN THRESHOLD, HOW M A N Y  GENES WERE SELECTED, HOW M A N Y  GENES HAD THEIR SUPPORTCHANGED BECAUSE OF THE NEW FUZZY THRESHOLD A N 0  WHAT SUBGROUPS WERE DISCOVERED. FOR THE LAST COLUMN, THE NOTATION X(Y) INDICATES THAT Y SUBGROUPS WERE POUND CONTAINING X GENES. Gmup 1 Group 1 Threshold Found Changed Subgmups 8(1) 17(1) 0.8 44(C (FSTjold I CTf.ld) down AND Gmup 2 Thn-shold Found Changed Subgmups 0.9 6(1) 0.8 14 1 7(1) 2(1) 5(1)  levels of genes observed in the sample before (contml) and after (treatment) the drug is administered.

Table I presents four such groups as defined by the bi- ologists depending on the relative importance of the gene expression in the two cell lines. For instance, they argue that a decrease in the fold expression in the PST region coupled with a contemporary increase or stability in the CT region is a sign of drug toxicity (as represented by group I).

Even so, there is no criterion providing an all-purpose cutoff value to decide what values of fold expression correspond to the ?expressed? status. A 2-fold expression cut seemed a reasonable choice for the present data, even though a very large amount of genes would lie very close to either side of this crisp border.

As already pointed out, the binary perspective is probably too restrictive, so we reformulated the definitions of such groups in term of fuuy rules, which have the advantage of expressing in a better and more intuitive way the imprecise background knowledge provided by the expert.

When PST and CT are regarded as linguistic variables, the fuzzy property up corresponds to ?over-expressed? and the opposite holds for down. An unnoticeable modification in the value of the fold expression is indicated by no change.

The properties can be combined using the usual fuzzy opera- tors [9], [12].

A graphical representation of the fuzzy groups is given in Figure 5.

Table I1 presents the results produced by our algorithm in this case. For all the groups we required a minimum support Fig. 6. A graphical representation of the fuzzy gmups defined in Table Ill.

Both axes are in logarithmic scale; WO choices of the fuzy  threshold show how the boden vary.

how the boden vary.

of at least four of the drugs. We considered three runs with fuzzy thresholds o = 1.0, 1 = 0.9, 2 = 0.8 respectively.

Let us consider Group 1 as an example of the way the algorithm works. For 0 = 1.0, the largest subgroup found contains 17 genes; the total number of genes that, considered singularly, satisfy the constraint is 45. There are also several smaller subgroups that differ in at least one gene or for the drugs they cover (for instance, there are three subgroups containing six genes each).

1 = 0.9, we expand the first frontier to contain 43 new genes. Moreover, three genes that were previously excluded now meet the requirements for the support. This results in the discovery of a new subgroup containing 34 genes.

With 2 = 0.8, 48 more genes are allowed; the support is now high enough for six more genes and finally a subgroup of 44 genes is discovered.

Those results were examined by the biologists and com- pared to what is already known from literature; they then de- cided to modify the definition of the groups, while maintaining the basic idea, that is selecting genes whose expression levels are noticeably different in PST and CT.

In the new definition, only two larger groups were cou- When we lower the threshold to Genes of Interest TNF, LTBR, p21, Cytochmme P450, EZF3. GAP(DH), PDGFA, HSP, Interleukin, PIK3, STAT, Toll-like receptor. Uncoupling Protein Caspase 9, STAT, DEFCAP, Calpain 6, multiple HSP, GSTPI, IGW.

LTB,c-AMP, Cytochrome C CREB, CAPG, CDC, CDK, GADD45, EZF,COX, Cytochrome p450, EIF,FGF, HSP, HIE U, MAPK8, PPAR ARL2, ASB3, Calpain , CDC, CENPE, DEFCAP. Laminin, LTB,  Acetyltransferase, CAMP kinase, SRC phosphoprotein 2, Cytochrome C, Elongation factor B sidered, ideally corresponding to the two cases in which the influence in PST is qualitatively more relevant than in CI and vice versa. This new formulation takes into account not only the value of the fold-expression in PST or Cr, but their ratio as well, as is summarized in Table 111. A graphical interpretation is given in Figure 6.

Experiments analogous to the ones previously described were carried on using the new groups and we considered genes expressed in either of the two groups.

It is worth noting that in this case some of the resulting subgroups were considered relevant from the biological point of view, since they corresponded to groupings already known from literature.

Biologists defined a list of ?classes? that grouped some of the drugs according to their known mechanism of action and examined the suhgmups discovered by our algorithm that fell into one of those classes (that is, whose support matched one of the classes).

They noticed that some of the genes belonging to those subgroups had already been described in the literature and were known to be related to that particular mechanism of action, while other genes were a new addition. Those genes appeared to be related to particular drugs, responding to them and signaling their toxicity, thus representing good candidates as predictors for the respective drug class.

Table IV presents a selection of those genes together with the class they describe and the drugs that form this class.



VI. CONCLUSIONS The use of a fuzzified version of the a priori algorithm proved to be very promising for the application to genomic data mining.

The peculiar nature of the data, namely highly noisy hio- logical data, makes it very difficult to use traditional crisp data analysis tools; our approach, in addition, was considered very intuitive by the experts and allowed them to explore the data    intuitive by the experts and allowed them to explore the data and refine their hypotheses, in some cases confirming them, and to select a smaller sample of interesting candidates fmm the whole dataset.

The results found during the preliminary experiments de- scribed here are encouraging, since they are supported by existing literature and also offer new insights that open the way to further research.

Class DmT DNA damage Cisplahn Aminoglycosides Ge n tam y c i n Tobramycin, Kanamycin Calcium Kanamycin h2llSpoR Cyclosporin Ribosomal GentamyCin inhibitors Tobramycin Future work?will include more testing on larger datasets and will benefit from increased interaction between the experts in the two fields of data analysis and biology.

