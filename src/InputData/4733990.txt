An FUSP-Tree Maintenance Algorithm for Record Modification

Abstract   There are several algorithms proposed for maintaining the sequential patterns as records are inserted. In addition to record insertion, the pattern maintenance for record modification is also very important in the real-applications. In the past, we have proposed the fast updated sequential pattern tree (called FUSP tree) structure for handling record insertion. In this paper, we attempt to handle the maintenance of sequential patterns for record modification. We do the task by maintaining the FUSP tree and then generate the patterns whenever necessary. An FUSP-tree maintenance algorithm for record modification is thus proposed for reducing the execution time in reconstructing the tree. The proposed approach is expected to achieve a good trade-off between execution time and tree complexity.

1. Introduction   Data mining involves in applying specific algorithms to extract patterns or rules from databases.

It may provide great help to decision making.

Therefore, mining useful information and helpful knowledge from large databases has evolved into an important research area [1][2][3]. Among them, finding sequential patterns from temporal transaction databases is important since it allows modeling of customer behavior in business.

Mining sequential patterns was proposed by Agrawal et al. in 1995 [4] and is a non-trivial task. It attempts to find customer purchase sequences and to predict whether there is a high probability that when customers buy some products, they will buy some other products in later transactions. Transactions may be modified due to some reasons such as errors, so effectively and efficiently maintaining the mined sequential patterns when records are modified becomes an important task. An intuitive approach is to re-mine the entire modified database to get correct sequential  patterns. However, when the database is massive in size, this will require considerable computation time.

In the past, Lin and Lee proposed the FASTUP algorithm [10] to maintain sequential patterns. It mainly extended the FUP algorithm for association rules [5]. The approach worked well except when newly coming sequences are not frequent (large) in the original database. If this occurs frequently, the database has to be often rescanned and the performance of the FASTUP algorithm will correspondingly decrease.

Han et al. proposed the Frequent-Pattern-tree (FP- tree) structure for efficiently mining association rules without generation of candidate itemsets [7]. They showed the approach could have a better performance than the Apriori approach. Hong et al. then modified the FP-tree structure and designed the fast updated frequent pattern trees (FUFP-trees) [9] to efficiently handle newly inserted transactions for maintaining association rules based on the FUP concept [5].

Hong et al. proposed the pre-large concept to reduce the need of rescanning original databases for maintaining sequential patterns [8]. Cheng et al. further proposed the IncSpan (Incremental mining of sequential patterns) algorithm [6] for efficiently maintaining sequential patterns in a tree structure.

IncSpan, however, only handled appended transactions, in which the customer number was fixed. Lin et al.

thus proposed the FUSP-tree structure and maintenance algorithm for efficiently handling both appended transactions and new customers [11]. The advantage of the approach was when frequent items were not changed, the approach didn?t need to rescan the original database, but can get the results from the tree.

In this paper, we propose a maintenance algorithm based on the FUSP tree for efficiently handling modification of records. A fast updated frequent updated sequential pattern tree (FUSP-tree) structure is used, which will make the tree update become easier.

When records are modified from the database, the proposed algorithm will process them to maintain the   DOI 10.1109/ICDM.Workshops.2008.110    DOI 10.1109/ICDMW.2008.81     FUSP tree and the Header_Table. The proposed maintenance algorithm first partitions the items in modified transactions into four parts according to whether they are large or small in the original database and whether their item difference is positive or negative (including zero). Each part is then processed in its own way. The proposed approach can achieve a trade-off between execution time and tree complexity.

This approach may be especially efficient for mining the traversal paths from the web log since only one item exists in a large itemset. The structure is especially useful for this situation.

2. Review of Related Works  2.1. The Frequent Pattern Tree   The Frequent-Pattern-tree structure (FP-tree) was  proposed by Han et al. for efficiently mining association rules without generation of candidate itemsets [7]. The FP-tree mining algorithm consists of two phases. The first phase focuses on constructing the FP-tree from the database, and the second phase focuses on deriving frequent patterns from the FP-tree.

Three steps are involved in FP-tree construction.

The database is first scanned to find all items with their frequency. The items with their supports larger than a predefined minimum support are selected as large 1- itemsets (items). Next, the large items are sorted in descending frequency. At last, the database is scanned again to construct the FP-tree according to the sorted order of large items. The construction process is executed tuple by tuple, from the first transaction to the last one. After all transactions are processed, the FP- tree is completely constructed.

2.2. The Fast Updated Sequential Pattern Tree   Hong et al. proposed the FUSP-tree structure and incremental algorithms for handling appended or newly inserted transactions [11]. The concepts of the FUSP tree extended from both the FUFP tree [9] and the IncSpan tree [6]. A FUSP tree is shown in Figure 1, where only the frequent 1-sequences (with only one item) are kept. Like the IncSpan algorithm [5], the link between two connected nodes is marked by the symbol s (representing the sequence relation) if the sequence is only within the sequence relation in a sequence; otherwise, the link is marked by the symbol i, which indicates the sequence is within the itemset relation in a sequence. The sequence IDs are also kept in the last node of the corresponding branch which helps update the tree structure efficiently. In addition to the FUSP tree, the Header_Table is also kept to help find  appropriate items or sequences in the tree. It sorts the frequent 1-sequences initially in a descending order.

root  b: 7  c: 1  e: 1  a: 1 [c1]  s  s  i  s  e: 1  a: 1  i: 1 [c9]  s  s  s  i: 1  a: 1 [c6]  s  i  c: 4  e: 3 [c3, c5]  e: 1 [c8]  si  i  a: 1  s  a: 1 [c7]  c: 1  e: 1  s  i  i: 1  c: 1 [c4]  s  s  i: 1 [c2]  s  null null  null  null  null  null  null  null  Header_Table Sequence Frequency  b                   7 c                   7 e                   6 a                   5 i                    5  s  i: 1 [c10]  s  Figure 1: A FUSP tree  The construction process is executed tuple by tuple,  from the first customer sequence to the last one. After all the customer sequences are processed, the FUSP tree is completely constructed.

By taking the characteristics of the FUFP tree, the size of a customer sequence is reduced since only the frequent items are kept. It thus makes the FUSP tree compact. Besides, the complete customer sequences are kept in the FUSP tree to avoid and reduce rescanning the original database. When frequent items are not changed, the approach doesn?t need to rescan the original database, but can get the results from the tree. After the tree is maintained, the final frequent sequences can then be found by a recursive method from the tree. This approach may be especially efficient for mining the traversal paths from the web log since only one item exists in a large itemset. The structure is especially useful for this situation.

3. The Proposed FUSP-tree Maintenance Approach for Record Modification   Assume an FUSP tree has been built in advance from the original database. Considering an original database and some records to be modified, the following four cases in Figure 2 may arise, where the difference means the count difference of an item after and before the modification.

Since the 1-itemsets in Case 1 are large in the original database and have positive count difference, they will still be large after the database is updated.

Similarly, the 1-itemsets in Case 4 will still be small after the records are modified. Thus, Cases 1 and 4 will not affect the final large 1-itemsets. The 1-itemsets in Case 2 are large in the original database and have negative (or zero) count difference. Some existing large 1-itemsets may be removed after the database is modified. It is easily decided since the counts of the     original large 1-itemsets are kept in the Header_Table.

At last, the 1-itemsets in Case 3 are small in the original database and have positive count difference.

Some large items may thus be added. The original database must be rescanned for finding the original counts of these 1-itemsets.

Positive  Original database  Large 1-itemset  Small 1-itemset  Case 1 Case 2  Case 3          Case 4  Negative (zero) differencedifference  Original database  1-itemset difference   Figure 2. Four cases when records are modified from an existing database   The maintenance algorithm for record modification  is described below.

The proposed FUSP-tree maintenance algorithm for record modification: INPUT: An old database which contains d customer  sequences, its corresponding Header_Table which sorts the frequent 1-itemsets initially in a descending order, its corresponding FUSP tree, a support threshold S, and a set of t modified records.

OUTPUT: A new FUSP tree for the updated database.

STEP 1: Find all the 1-itemsets in the t modified  records. Donate them as the set of modified 1- itemsets, M.

STEP 2: Find the count difference (including zero) of each 1-itemset in M for the modified records.

STEP 3: Divide the 1-itemsets from M into four parts according to whether they are large or small in the original database and whether their count differences are positive or negative.

STEP 4: For each 1-itemset I in M which has positive count difference and is large in the original database (appearing in the Header_Table), do the following substeps (Case 1): Substep 4-1: Set the new count SU(I) of I in  the entire updated database as: SU(I) = SD(I) + SM(I),  where SD(I) is the count of I in the Header_Table (original database) and SM(I) is the count difference of I after and before record modification.

Substep 4-2: Update the count of I in the Header_Table as SU(I).

Substep 4-3: Put I in both the sets of Increase_Seqs and Decrease_ Seqs which will be further processed in STEP 7.

STEP 5: For each 1-itemset I in M which has negative (or zero) count difference and is large in the original database (appearing in the Header_Table), do the following substeps (Case 2): Substep 5-1: Set the new count SU(I) of I in  the entire updated database as: SU(I) = SD(I) + SM(I).

Substep 5-2: If SU(I) ?  d*Sup, I will be large after the database is updated; Update the count of I in the Header_Table as SU(I) and add I to both the sets of Increase_Seqs and Decrease_ Seqs.

Substep 5-3: If SU(I) < d*Sup, I will become small after the database is updated; Remove I from the Header_Table, connect each parent node of I directly to the corresponding child node of I, and remove I from the FUSP tree.

STEP 6: For each 1-itemset I in M which has positive count difference and is small in the original database (not appearing in the Header_Table), do the following substeps (Case 3): Substep 6-1: Rescan the original database to  calculate the count SD(I) of the 1- itemset I in the original database (before modification).

Substep 6-2: Set the new count SU(I) of I in the entire updated database as:  SU(I) = SD(I) + SM(I).

Substep 6-3: If SU(I) ?  d*Sup, I will be large  after the database is updated; Add the 1-itemset I in both the sets of Increase_Seqs and Rescan_Seqs.

STEP 7: For an updated record before modification with an item J existing in the set of Decrease_Seqs, find the corresponding branch of J in the FUSP tree for the record and subtract 1 from the count of the J node in the branch; if the count of the J node becomes zero after subtraction, remove node J from its corresponding branch and connect the parent node of J directly to the child node of J.

STEP 8: Sort the 1-itemsets in the Rescan_Seqs in a decreasing order of their updated counts.

STEP 9: Insert the 1-itemsets in the Rescan_Seqs to the end of the Header_Table according to the descending order of their counts.

STEP 10: For each record in the unmodified records with a 1-itemset J existing in Rescan_Seqs, if J has not been at the corresponding branch of the FUSP tree, insert J at the end of the branch and set its count as 1; Otherwise, add 1 to the count of the node J.

STEP 11: For the updated records after modification with a 1-itemset J existing in the Increase_Seqs, if J has not been at the corresponding branch of the FUSP tree, insert J at the end of the branch and set its counts as 1; Otherwise, add 1 to the count of the J node.

Note that in STEP 7, a corresponding branch is the  branch generated based on the frequent itemsets from a transaction and corresponding to the order of itemsets in the databases. After STEP 11, the final updated FUSP tree is formed by the maintenance algorithm for record modification. Based on the FUSP tree, the desired large sequences for the updated database can be determined by a recursive mining procedure, which is similar but much more complex than those proposed in [6][7].

4. An Example   In this session, an example is given to illustrate the  proposed algorithm for maintaining an FUSP tree when the records are modified. Table 1 shows a database to be used in the example. The database contains 10 transactions and 9 items, denoted a to i.

Table 1. The original customer sequences  Cust_ID Customer sequences 1 (a)(bi) 2 (ac)(ei) 3 (ac)(df) 4 (b)(cd)(e) 5 (a)(b)(e)(f) 6 (ac)(i) 7 (a)(b)(d)(ef) 8 (ac)(e)(fg) 9 (b)(d)(g) 10 (de)(g)(h)   Assume the support threshold is set at 50%. The  FUSP tree is then formed from the original customer sequences and the Header_Table. The results are shown in Figure 3.

{root}  b: 3 s  a: 7 s  c: 4 i  e: 2 s  d: 1 s  b: 2 s  c: 1 s  d: 1 i  e: 1 s  e: 1 s  d: 1 s  e: 1 s  d: 1 s  d: 1 s  e: 1 i  null  null null null  null  null null  Header_Table 1-itemset Frequency  a                        7 e                        6 b                        5 c                        5 d                        5   Figure 3. The Header_Table and the FUSP tree  constructed   Assume the last three records (with IDs 8 to 10) in the original database are modified as shown in Table 2.

Table 2. The three records after modification Cust_ID Customer sequences  8 (ac)(e)(f) 9 (bc)(fg)(i)  10 (ac)(fg)   The count difference of each 1-itemset in the modified records is calculated as shown in Table 3.

Table 3. The count difference of each  1-itemset in M 1-itemset Count  a 1 b 0 c 2 d -2 e -1 f 2 g -1 h 0 i 1   All the items in M are divided into four cases and  are then processed in four individual ways. The final results are shown in Figure 4.

5. Conclusions   In this paper, the maintenance algorithm for record  modification is proposed to efficiently and effectively maintain the sequential patterns. A FUSP-tree structure is used to make the tree update process become easier.

Header_Table 1-itemset Frequency  a                        8 e                        5 b                        5 c                        7 f                        6  {root}  b: 3 s  a: 8 s  c: 5 i  e: 2 s  b: 2  s  c: 1 s  e: 1 s  e: 2 s  null null  null null null  c: 1 i  f: 1 s  f: 2 s  f: 1 s  f: 1 i  Figure 4. The final result  When the records are modified, the proposed maintenance algorithm first partitions the 1-itemsets in the modified records into four parts according to whether they are large or small in the original database and have positive or negative count (or zero) difference.

Each part is then processed in its own way. The Header_Table and the FUSP tree are correspondingly updated whenever necessary. The obtained tree complexity may not be optimal because the frequency order of items may not be kept. The effect is expected small since large count difference seldom happens when the amount of modified records is not large. The execution time of the proposed approach can, however, be greatly improved. The proposed approach can thus achieve a good trade-off between execution time and tree complexity.

6. References  [1] R. Agrawal, T. Imielinksi and A. Swami, ?Mining  association rules between sets of items in large database,? The ACM SIGMOD Conference, pp. 207-216, Washington DC, USA, 1993.

[2] R. Agrawal, T. Imielinksi and A. Swami, ?Database on Knowledge and Data Engineering, Vol. 5, No. 6, pp.

914-925, 1993.

[3] R. Agrawal and R. Srikant, ?Fast algorithm for mining Large Data Bases, pp. 487-499, 1994.

[4] R. Agrawal and R. Srikant, ?Mining sequential patterns,? Engineering, pp. 3-14, 1995.

[5] D. W. Cheung, J. Han, V. T. Ng, and C. Y. Wong, ?Maintenance of discovered association rules in large databases: An incremental updating approach,? The Engineering, pp. 106-114, 1996.

[6] H. Cheng, X. Yan and J. Han, ?IncSpan: incremental mining of sequential patterns in large database,? The discovery and data mining, pp.527-532, 2004.

[7] J. Han, J. Pei and Y. Yin, ?Mining frequent patterns without candidate generation,? The 2000 ACM SIGMOD  12, 2000.

[8] T. P. Hong, C. Y. Wang and S. S. Tseng, ?Incremental data mining for sequential patterns using pre-large sequences,? The International Multiconference on Systemics, Cybernetics and Informatics, Vol. 14, pp. 543- 548, 2001.

[9] T. P. Hong, C. W. Lin and Y. L. Wu, ?Incrementally fast updated frequent pattern trees,? Expert Systems with Applications , Vol. 34, Issue 5, pp. 2424-2435, 2008.

[10] M. Y. Lin and S. Y. Lee, ?Incremental update on sequential patterns in large databases,? The Tenth IEEE Intelligence, pp. 24-31, 1998.

[11] C. W. Lin, T. P. Hong, Wen-Hsiang Lu and Wen-Yang Lin, ?An Incremental FUSP-Tree Maintenance Intelligent System  Design and Application, 2008.

