A Visualization Primitive for Multiway Relationships

Abstract?With the unprecedented wave of Big Data, the importance of information visualization is catching greater mo- mentum. Understanding the underlying relationships between constituent entities is a common task in every branch of science, and visualization of such relationships is a critical part of data analysis.

While the techniques for the visualization of binary rela- tionships are widespread, visualization techniques for ternary or higher relationships are lacking. In this paper, we propose a visualization primitive which is suitable for multiway rela- tionships. Its effectiveness is demonstrated in 3-D visualization.

Keywords-multiway relationship; visualization; frequent itemset;

I. INTRODUCTION  Augustus De Morgan said, ?When two objects, qualities, classes, or attributes, viewed together by the mind, are seen under some connexion, that connexion is called a relation.?  Scientific activities in any field involve the identification of subject matters or entities and the relationships between them. When the relationships of the constituent entities are understood, the mysteries of the pertaining system are unfolded to our comprehension. For example, the universal law of gravity tells how two point entities attract each other with a force. Likewise, all the mathematical formulas in sci- ence are expressions of relationships among the constituent entities. It is critical to understand these relationships to understand the full drama played by the entities.

Among the various degrees of relationships in terms of arity, the binary relationship is the most common. Binary relationships depict the relationship between two entities only, and numerous applications are found in many branches in science. Examples include the gravitation between two masses in physics, symbiotic organisms in biology, co- citation and co-authorship [7] in bibliographic coupling studies, spatial co-location in spatial data mining, frequent 2-itemsets in association mining, and friend relationship in social networks.

At the same time, we recognize the rise of the significance of multiway relationships where three or more entities are related simultaneously. For example, the authors of [8] identified two types of friendship from their study on Facebook. One type is the sympathy group which consist of approximately 15 close friends. The other type is the  Figure 1: Collaborative authors in scientific publication [7].

support clique of ?friends on whom you would depend for emotional/social support in times of crisis.? The size of the second group is approximately 5. When all the individuals in a support clique have mutual dependency one another, we say that the relationship is multiway and it may give critical information in a sociology or psychology study.

Entity relationships are commonly represented in a textual format using a data structure designed for the data. A classic example is a tuple notation which is widely used in the relational database model. Relationships are also represented graphically. Edges between vertices in a graph G = (V,E) is a classical example of this kind of representation, which has a dominant appearance in data/information visualization such as in social network analysis, web graph, and so forth.

The visualization of a binary relationship is conveniently and effectively done by drawing a line between the two related objects. In Figure 1, the binary coauthorship relation- ship between G. Barkerma and N. Moursseau is apparent. A drawback of this visualization is that the readers are prone to mistakingly derive the ternary relationship (Barkerma, Leeuw, Moursseau) from (Barkerma, Leeuw), (Barkerma, Moursseau) and (Leeuw, Moursseau).

In this paper, we propose a geometric primitive which is suitable for visualizing ternary or higher arity relationships in 3-D. A set of design goals are also discussed. The effectiveness of the proposed primitive is demonstrated with various real-world datasets as well as artificial datasets.

The remainder of this paper is organized as follows: In Section II, some selected related works are presented. We present a detailed discussion of the proposed visualization  2016 IEEE International Symposium on Multimedia  DOI 10.1109/ISM.2016.42     primitive with design goals in Section III. We conclude our presentation with a future plan in Section IV.



II. RELATED WORKS  The topic of our work is generally related to scientific visualization in which a global summary of data is often the primary interest. On the other hand, local details are also important in visual data exploration and mining to which our work is closely related. A review on visual data exploration and mining can be found in [2]. Undirected relationships be- tween entities are largely visualized as 2-D or 3-D matrices [6], [9] or undirected graphs [7], [3]. A number of different approaches exist, and they are conveniently categorized with respect to the layout of entities and visual cues representing relationships.

Difference in layout. Two types of entity layouts are commonly found in the literature and in practice.

1) Single set of entities: Only one set of entities is used in the visualization. The entities may be arranged along the circumference of a circle (Figure 2a), on a single linear axis (Figure 2b), or anywhere in the given plane (Figure 2c) to carry the same information.

2) Two sets of entities: This layout can be thought of as a matrix where one axis carries the full set of entities and another axis perpendicular to the other axis carries the same set of entities in the same ordering. This layout is extended often to capture the correlation between two variables. The layout may also be extended to a 3-D space to amplify the visual effect of the significance of relationships.

Difference in the representation of relationships.

1) Presence or absence of relationship: When the pres-  ence or absence of a relationship between two entities is what matters, connecting the two entities by an edge or a marker on a 2-D plot is sufficient. The three visualizations in Figure 2 and scatter plot-like visualizations belong to this category.

2) Significance of relationship: In contrast, Figure 1 shows the significance of a relationship using another visual cue such as thickness of edges, color or density of color, or height of object in a 3-D space.

As for the visualization techniques designed specifically for data mining, the authors of [9] chose to show cluster analysis results in a 3-D matrix such that the square grid of horizontal axes represent data objects and the vertical axis represents the similarity between the two corresponding objects. Visualization of geospatial point sets presented in [4] is inherently a similar 3-D matrix visualization since longitude and latitude values constitute X- and Y -axes.

We notice that these visualization techniques discussed above are designed for binary relationships and we are not aware of a technique suitable for multiway relationships at the time of this writing.



III. VISUALIZATION OF MULTIWAY RELATIONSHIPS  We now present a discussion on our strategy for the visualization of multiway relationships.

The heart of the visualization of n-ary relationships is to design a visualization primitive which is suitable for n-ary relationships. The primitive should not only be capable of rendering n-ary relationships accurately, but also guarantee that the rendering is exclusively for n-ary only, preventing it from being interpreted as any arity other than n.

A. Multiway Relationships as Hyperedges  In developing an effective 3-D metaphor for n-ary rela- tionships where n is a reasonably large integer value, we investigated several geometric shapes as options. In partic- ular, we have considered three approaches to hyperedge.

(a) A ternary and a 4-ary re- lationships with edges only.

(b) A ternary and a 4-ary relationships with edges and a covering surface.

Figure 3: Two hyperedge techniques for n-ary relationships.

The first approach is simply connecting the constituent entities to the center of the entities with n lines for n- ary relationships. An example of this approach is shown in Figure 3a. This approach is computationally efficient.

Also, each hyperedge is thin and occupies less pixels on the screen than the other approaches. Hence, it offers more visual information on the screen than the others. However, it presents a challenge to identify the correct connecting center of a relationship. When there are many relationships and the degrees of the relationships are diverse, the problem is augmented.

The next approach is to add a geometric surface to the hyperdge at the expense of incurring more computation and leaving less visual information space. In Figure 3b, we add to the edges a polygon which has k sides for k-ary tuples.

The advantage of this approach is that multiway relations can be identified quicker and easier with the aid of the polygon surface and that it is relatively easy to implement.

However, it has a considerable drawback: each hyperedge occupies a much larger area than the previous edge-only approach, leaving less amount of unoccupied pixels on the screen. Hypothetically, when the degree of a relationship is close to the maximum arity, it is possible that the single hyperedge would block nearly the entire visualization space     (a) Circular layout [5] (b) Kandinski layout [1] (c) Podevsef layout [1]  Figure 2: Various approaches to visualization of relationships using a single set of entities.

(although such high-degree relationships are not common in real-world datasets).

Between these two approaches, we take the second ap- proach, with a modification, mainly because of its strength to distinguish relationships and their arities.

The improvement that we made to the second hyperedge approach is two-fold: we use concave sides for the polygon surface to reduce the amount of pixels to use, and spherical edges are used that the proposed visualization primitive may be used in a 3-D visualization as well.

For an example of 3-ary hyperedge, we can employ a hyperbolic triangle that can be found in hyperbolic geom- etry. The characteristics of a hyperbolic triangles are well studied in a 2-D space. However, extending the theory of hyperbolic triangles to a higher dimensional geometric shape for the purpose of implementation requires substantially more effort. The novelty of our work in implementing spherical edges and accompanying concave-sided polygon surfaces is to use Bezier curves as discussed below.

B. Geometry of hyperedges As discussed earlier, the proposed hyperedge primitive has  edges (we call them ?legs?) and a cover in our 3-D metaphor.

A n-ary hyperedge has n legs plus a 3-D surface covering the midpoint of the legs to make it easier to identify the arity of the underlying relationship and to augment the 3- D look of the hyperedge. In designing and implementing such hyperedges, we ought to maximize the separation of hyperedges from each other for effective data analysis. We begin with the construction of legs.

Each n-ary relationship is first mapped to a n-ary hyper- edge of n legs, each of which is a quadratic Bezier curve standing vertically. A quadratic Bezier curve requires three control points to define. Given three control points p0, p1 and p2, the quadratic Bezier curve is defined as a function of t? [0,1]: B(t) = (1 ? t)2 ? p0 + 2t(1 ? t) ? p1 + t2 ? p2 where t denotes a curve segment.

Let I be a n-ary relationship whose constituent n entities, i1, . . ., in, are located on the circumference of a circle, and let pm be the middle point of the n objects representing the n entities on the x-z plane. Then, we can construct the hyperedge for the n-ary relationship as follows: First, take  i1 as p0 of the corresponding quadratic Bezier curve. We can compute the location of p2 such that p2 is the opposite point of p0 on the circle about pm. Furthermore, set the y-axis value (i.e., the height) of pm to the statistical significance value of I . Now we can create a quadratic Bezier curve using the three control points p0, pm and p2. Take the half of the curve on the p0 side as the component curve for i1. Repeat the steps to construct component Bezier curves for the other entities. The resulting n Bezier curves are joined at the peak point to yield a parabolic-shaped hyperedge whose height is scaled by the statistical significance of the corresponding n-ary relationship automatically. The hyperedge is further decorated with a concave-sided polygon cover over the peak point for visual clarity.

Figure 4a shows examples of hyperedges for 3- to 7-ary relationships. Hyperedges for 3-tuples are constructed from three Bezier curves with a cover at the joining point of each hyperedge as shown in the figure. The figure also illustrates that relationships of higher arity can also be constructed seamlessly using the same algorithm. Notice that each side of the polygon cover of a hyperedge is also a Bezier curve, the exact shape of which is determined by the locations of the control points.

The length of the uncovered portion of a leg by the cor- responding cover is about 50% of the leg length (measured from the bottom to the peak) in average. We found that this parameter yields good visual feedback, while not dominantly covering other hyperedges, when its value is about 80%.

C. Visual cues Visualization of relationships of arbitrary arities would be  challenging mainly due to the fact that the arity of relation- ships can vary widely and the number of relationships that are dealt in data warehouses or in big data can be very large.

Also, users may respond to the visual stimuli coming from a large number of visual primitives differently.

Visualization of relationships using multiple visual cues is generally more effective than using a single visual cue as long as they are used with consistency. In the proposed vi- sualization primitive for n-ary relationships, multiple visual cues are used to maximize the discriminative power of the metaphors: shape, color, illumination, height, and thickness.

(a) Hyperedges with spher- ical edges only.

(b) Hyperedges with spher- ical edges and polygons with straight sides.

(c) Hyperedges with spher- ical edges and polygons with convex sides.

(d) Hyperedges of random arity and statisti- cal significance.

Figure 4: Hyperedges for relationships of various arity.

Relative location: Since the peak point of each com- ponent Bezier curve of a hyperedge is a function of its associated control points, hyperedges tend to be spatially cohesive when hyperedges are rendered on the same screen.

For example, the four 6-ary and 7-ary relationships in Figure 4c form a clump. This tendency will increase toward the center of the screen as the arity of relationships increases (in other words, the distribution of the entities becomes more even on the base circle).

Color: The hue of the legs e representing a n-ary relationship is determined by the statistical significance of the relationship using the following formula: hue(e) = max?weight(e)  max where max is the maximum significance in the dataset and weight(e) is the statistical significance of the corresponding relationship. With this color scheme, the most significant edges are rendered in red and the least significant ones in blue, with yellow and green edges in between.

Illumination: Shading is a natural phenomenon to real 3-D objects under illumination. We add a pseudo-shading effect to hyperedges to augment their 3-D look by applying varying illumination rather than uniform illumination.

The edge illumination is defined as a function of t? [0,1] illumination(t) = ? (t?0.5)   0.52 + 1 where t denotes a curve segment.

The above formula guarantees a leg to be the brightest at the vertex point (i.e., peak point) and gradually darker toward both end points, as illustrated in Figure 4.



IV. CONCLUSION  A 3-D visual metaphor for n-ary relationships is presented in this paper. The proposed visualization primitive accu- rately conveys the arity of a relationship with its statistical significance using multiple visual cues. The entities are arranged along the circumference of a circle to resolve the potential positional and orientational visual bias inherent in a rectangular layout. Each n-ary relationship is modeled as a novel n-arity hyperedge. The metaphor is implemented as visual primitives of high quality and shows a good separation of different arities.

While the effectiveness of our model is generally demon- strated through a handful of experiments, we forewarn the reader that efficiency in terms of memory requirement could be a concern in comparison to 2-D multivariate visualization techniques as we render information as high quality 3-D objects. In the future, we will develop a 2-D version of the hyperedge which will be useful on printed media.

