An Algorithm of Dynamic Associate Rule Based on Sliding Windows

AbstractIt is well-known that the traditional association rules  with time cant be found out in many algorithms. First,  according to concept of dynamic association rules, this paper  analyzes the disadvantages of traditional association rules.

Then, the concepts of dynamic association rules based on  sliding windows and the definition of time vector  representation of dynamic association rules are put forward.

So, the dynamic association rules can measure out how  association rules change over time. Next, a kind of algorithm to  mine dynamic association rules on sliding window is proposed.

Finally, numerical experiments show that the proposed  algorithm is efficient for finding out dynamic association rules  with time.

Keywords- sliding windows; algorithm; dynamic association  rule; time vector

I.  INTRODUCTION  The association rule proposed by the Agrawal is an  important research field in data mining [1]. But, many  researches of association rules are not relate with time. In  1996, Cheung et al [2] proposed an algorithm of incremental  association rule mining, where association rules constantly  update with data change. However, they considered the time  applicability of association rules that is across the entire  database space. In fact, the association rules have certain  time-sensitive in a supermarket several years of historical  sales data. For example, for an association rule may be the  "customers to buy cigarettes will also buy gifts", we  carefully study to support this association rules data, then    we may find out that these data are heavily concentrated in a  few months before and after the Spring Festival, and in  peacetime is less support. If to use such a rule to guide the  usual daily sales will be moot in other time, the rules will  lose a strong guiding value. If we use incremental  association rules only updated data and still mine  association rules in the whole database transaction, It is  impossible to discover the dynamic time of association rules,  because these association rules do not relate to time.

To describe the nature of association rules which change  over time, Liu et al [3, 4] proposed a new approach to mine  association rules, by using the support vector SV and the  confidence vector CV to describe the dynamic nature of the  rules over time. Based on the SV and CV, many research  can fully use histogram analysis, time series analysis [3, 4],  and gray Markov model [5] and so on. Shen Bin et al [6]  redefined the dynamic association rule so that dynamic  association rules can more applicable to the time. However,  the dynamic association rule they proposed only simply  reflect the change of dynamic association rules over time.

But, they overlooked the association rules at time period  ends or the association rules which its time period is  relatively small. In order to overcome above drawbacks, this  paper propose a kind of dynamic association rules based on  slide windows, which the new definition of the dynamic  association rules, the time vector of dynamic association  rules and the two algorithms are given. We present a new  algorithm of dynamic association rules based on slide  windows and give its numerical experimental results.



II. SOME DEFINITIONS  Dynamic associate rule is a rule that could describe the  changes of its own specificity over time. Let a collection of  data items },,,{ 21 miiiI "= , an affair data set D be  collected during time period t, which it can be divided into  time series which are not intersecting. Let the time length be  n, that is to say, },,,{ 21 ntttt "= . According to the  division of t, the whole data set can be divided into n data  subset },,,{ 21 nDDDD "= , where the statistic in data  subset }),,2,1{( niDi "?  is collected during  ( {1,2, , })it i n= ? " . Let itemsets IT ? , X and Y be  itemsets, X ? I , Y ? I , and ?=?YX . Some  definitions are introduced as follows.

Definition 1 The support vector of dynamic association  rules (or itemsets X ? Y) is defined as the following form:  1 2[ ( ) , ( ) , , ( ) ],  . . ( ) ( ) / | |, {1,2, , }  V n  i i i  S s X Y s X Y s X Y  s t s X Y f X Y D i n  = ? ? ?

? = ? ?

"  " ,  where iYXf )( ?  is the frequency of X?Y appears in  iD  and || iD  is the transaction number in iD . The  support of itemsets X?Y is expressed as a support vector  united by support  from a series of subsets of the databases.

This is different from the ordinary association rules  large itemsets. Ordinary association rules only need to know  the entire database of large item sets, only a number, while   978-0-7695-4297-3/10 $26.00  2010 IEEE  DOI 10.1109/CIS.2010.18   the support of dynamic association rules is interpreted as a  vector.

Definition 2 The confidence vector of dynamic  association rule YX ?  is defined by  [ ( ) , ( ) , , ( ) ],  ( ) ( ) / ,  V i i n  i i i  C c X Y c X Y c X Y  c X Y s X Y sX  = ? ? ?

? = ?

"    where iYXs )( ?  is element i of itemsets X ?Y in VS ,  isX  is element i of itemsets X in VS . Confidence factor is  constituted by a series of confidence value in the subsets of  database.

Although the dynamic association rules can reflect    changes of the rules change with time, but there are still  some shortcomings.

(1) Dynamic association rules have a hard division into  the whole time, mining association rules after the division of  time. This will ignore the association rules at both ends of  the time period, can also not mine the emerging association  rules.

(2) After the division of time, association rules lose the  integrity of the whole time. For example, the association  rules should be valid at some time, but due to the time of  division, so that association rules effectively shorten the  time period.

Definition 3 Set DS is defined as a data flow sequence  by 1 2, , , ,ks s s< >" " , 1 2{ , , , , }k ms i i i= " " , where  ( 1,2, )ks k = "  is the attribute of transaction  ( 1,2 )mi m = " . The data flow DS is a series of section split  by time. Each section corresponds to a data stream  subsequence and each subsequence corresponds to an equal  time interval, such that a data segment as a basic window is  denoted by BW.

Definition 4 A sliding window SW is a continuous  sequence of basic window >< "" ,,,, 21 kBWBWBW  which accommodates the number of the basic window for a  fixed value k.

Definition 5 ),( ji tt  is expressed as a time period that  its start time is it  and end time is jt . The time period  ),( ji tt  is a window set time period that contains several  basic window. For the time window, let the number of basic  windows be m, if m is greater than or equal to the basic  windows number k, then time period ),( ji tt  is called a  large window, otherwise, ),( ji tt  is called a small window.

Definition 6 The support time vector of dynamic  association rule YX ?  (or itemsets X ?Y) has the  following form  )],(,),,[()( nmjiYXSV ttttT "=? ,  where ),( ji tt  ),( nm tt  is large window and itemsets X  ?Y is large itemsets in large window. The above equation  shows that only in ),( ji tt  ),( nm tt  the itemsets X ?Y is  large itemsets, other time period not large itemsets.

Definition 7 The confidence time vector of dynamic  association rule YX ?  is  )],(,),,[()( nmjiYXCV ttttT "=? ,    where ),( ji tt  ),( nm tt  is large window and YX ?  is  an association rule in large window. The above equation  shows that only in ),( ji tt  ),( nm tt  the association rule  YX ?  is valid, other time period not valid.



III. DYNAMIC ASSOCIATION RULES ALGORITHM  This section presents an algorithm to exploit the  dynamic association rules based on sliding windows. Before  the start of the algorithm we should first divide the database  into window and deicide the size of basic window and  sliding window. This division rule of sliding windows in  this paper is every day as a basic window, every 30 basic  window form a sliding window.

A. Algorithm  Let set sliding windows be SW, the window data sets be  DS which contains the total number of transactions |DS |,  updated windows data sets be DS ' which contains the total  number of transactions | DS' |. Lets be the minimum  support given by user, L be the frequent itemsets of window  data set DS and L ' be the frequent itemsets of the updated  window data set. The specific meaning of each symbol is  the following table:  TABLE I.  SYMBOL DEFINITIONS  Symbol Meaning  SW A window containing N  basic sliding window  |SW| The number of transaction in sliding windows  BWi The number i basic window  SW Sliding window minus the last basic window  remaining N-1 basic window  D i The local database of number i basic window  D The database after sliding window minus the  last basic window

X.sup The global support of itemsets X in one sliding  window SW

X.sup i The local support of itemsets X in number i  basic window  Cki The map of k-candidate itemsets in number i  basic window   Cki.sup The support of k- local candidate itemsets in  number i basic window  Ck The k- global candidate itemsets in sliding  window    Lki The map of k-large itemsets in number i basic  window  Lki.sup The support of k-global large itemsets in  number i basic window in sliding window  L? The support of large itemsets in sliding window  minus the support in the first basic window  LNew The large itemsets not belong to L? in new  basic window  Lk The k-global large itemsets in sliding window  This algorithm uses the sliding window ideology to  carry out window data to set up date. When to mine frequent  item sets, we need to do two steps. The first step is to get the  frequent itemsets in sliding window. The second step is to  get the support of frequent itemsets which in sliding  window in each basic window. As the window is moved  forward, it is removed the last side window, then to add a  new basic window. The algorithm is given as follows.

1. For the first sliding window.

(1) To label (1,2,, N) for each basic window in sliding  window.

(2) First, scan the each basic window BWi orderly in first  sliding window, write down the local support of 1-  candidate itemsets in each basic window. Then, merge  all the 1-candidate itemsets, and get the 1-global large  items 1L  in sliding window. Finally, get the support of  1-large itemsets in each basic window.

(3) For the k cycles (k>1), use large itemsets got in k-1  cycles to generate candidate itemsets  Ck=Apriori_gen(Ck-1). Scan each basic window data set  Di in sliding window to get the support Cki.sup of Ck in  each basic window, combine local support in each basic  window, and get the k-global large itemsets Lk in  sliding window, also note the support Lki.sup of Lk in  each basic window BWi.

(4) Merge large items, sliding window has been got the  global large items. Call large items time vector  generating function.

(5) Mine association rules, call association rules time  vector generating function.

2. Delete the last basic window.

(6) Remove the last basic window 1D , use large itemsets L  in sliding window to minus local large itemsets 1L    preserved in the last basic window, then can get large  itemsets ?L  in window SW-.

3. Forward to slide a basic window.

(7) Forward to slide a basic window BW?re-label for each  basic window in sliding window  (1,2,, N).

4. Mine association rules in new sliding window.

(8) Scan transaction DN  in basic window BWN, compute  the ?? LX  support. Let  |}|sup.|{ SWsXLXO SW <?=  ? ,  those  itemsets who appear in DN but not belong to  ?L , get the  local large itemsets NewL  in new basic window. For the  local large itemsets NewL  in new basic window ND ,  scan database ?D  of ?SW  and get the large itemsets  W which meet the sliding window minimum support.

Merge the above large itemsets WOL ?)( ?? ,  get  the large itemsets L  after sliding a basic window. Call  large items time vector generating function.

(9) Mine association rules, Call association rules time  vector generating function.

(10)  Return step (5).

The above algorithm is efficient, because we use a  similar method of incremental association rules, improve it  and just scan a small number of the data in database.

B. Algorithm complexity analysis  Let DS| be the number of the records in the whole  database, N be the number of the basic windows in the  whole database, k be the size of the basic window, and then  the average number of the records in each basic window be  | / |DS N .

When the algorithm under the worst situation, each basic  window because of sliding window function will be repeat  scanned many times. The times of the basic windows in the  first sliding window and sliding window may respectively  scan to be 1, 2, ..., k. The middle of the basic window may  scan k times repeated, which is equivalent to a basic window  repeat scan k(k+1)+k(N-2k) times. Loop termination  condition is to find out n-large itemsets, and the average  number of records of each basic window is | / |DS N . So, the  whole time complexity is approximately  ( ( ( 1) ( 2 )) | | / )O n k k k N k DS N+ + ? . In the best condition,    the new basic window has no new large itemsets, so the time  complexity is approximately  ( | | / ( ) | | / )O kn DS N N k n DS N+ ? , simplified as  ( | |)O n DS , this algorithm in the best condition time  complexity greatly reduced. The average time complexity of  the algorithm is ( ( ( 1) ( 2 )) | | / )O n k k k N k DS N+ + ?

+ ( | |)O n DS .



IV. NUMERICAL REUSLTS  By using the adventure works database: SQL  SERVER2005, we test the sales data to mine association  rules. After pretreatment, the same order number in a  shopping basket, we take one of the August 1, 2003 to July  31, 2004 analysis of data throughout the year, a total of  23,434 records.

The algorithm is implemented using PHP language,  experimental platform: CPU is a Pentium (R) Dual-Core   E5300 2.60GHz, memory is 2G, the operating system is  Windows XP.

Under the support of 0.04, confidence level of 0.6  conditions, the results are obtained with the time vector of  association rules as follows:  (871 870)  (872 870)  (880 870)  (930 921)  (929 921)  [(2003 8 1,2004 7 31)];  [(2003 8 1,2004 7 22)];  [(2003 8 1,2003 9 25)];  [(2003 8 1,2004 7 31)];  [(2003 8 7,2003 11 8),(2003 11 14,    CV  CV  CV  CV  CV  T  T  T  T    T  ?

?

?

?

?

= ? ? ? ?

= ? ? ? ?

= ? ? ? ?

= ? ? ? ?

= ? ? ? ? ? ?

(934 923)  (923 934)  2003 12 30),(2004 6 18,2004 7 31)];  [(2003 10 21,2004 7 31)];  [(2003 12 24,2004 2 19),  (2004 3 12,2004 5 21)]  CV  CV  T  T  ?

?

? ? ? ? ? ?

= ? ? ? ?

= ? ? ? ?

? ? ? ?

From the above formula, we can see that each  association rule in which time is effective, but some time is  invalid. For example, the associations rule 871? 870  throughout the period included on the database is valid. The  associations rule 923? 934 in the time period December  24, 2003 to February 19, 2004 and the time period March  12, 2004 to May 21, 2004 as these two time periods is  effective. The above association rules are graphically  represented in Figure 1 as follows.

2003-  8-1  2003-  8-31    2003-  9-30  2003-  10-30  2003-  11-29  2003-  12-29  2004-  1-28  2004-  2-27  2004-  3-28  2004-  4-27  2004-  5-27  2004-  6-26  2004-  7-26  2004-  8-25  871->870  872->870  880->870  930->921  929->921  934->923  923->934    Figure 1.  Time periods of association rule  To compare the algorithm execution time under the  different support for the association rule with time, the  result is shown in Figure 2. From the Figure 2, when the  algorithm is in a high support, efficiency is very high with  the increase of support. Particularly, when support is small,  the algorithm is much less efficient. This is because the  result of uneven distribution of the data. The adventure  works sales data in the database are distributed unevenly so  that some of the basic window data is very dense under the    low support. Hence, the algorithm will produce a large  number of large itemsets, resulting in reduced efficiency of  the algorithm. Therefore, the algorithm under the even data  distribution can achieve better results.

0.2 0.1 0.08 0.04  t/  s    Figure 2.  The algorithm execution time under the different support.



V. CONCLUSION  This paper studies the dynamic association rules with  time, based on the time vector to represent the dynamic  association rules. We propose an algorithm that can mine  the dynamic association rules. These dynamic association  rules include some practical significance in what time  period will appear on the association rules. The  numerical experiments show that the algorithm can  efficiently reduce the number of the scanning database  within the less execution time. In addition, there are some  limitations of the algorithm, such as some large itemsets  may be lost and sensitive to the change of support. These  problems are to study further.

