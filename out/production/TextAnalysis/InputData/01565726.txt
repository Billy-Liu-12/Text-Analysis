Blocking Anonymity Threats Raised by Frequent Itemset Mining

Abstract  In this paper we study when the disclosure of data min- ing results represents, per se, a threat to the anonymity of the individuals recorded in the analyzed database. The novelty of our approach is that we focus on an objective definition of privacy compliance of patterns without any reference to a preconceived knowledge of what is sensi- tive and what is not, on the basis of the rather intuitive and realistic constraint that the anonymity of individu- als should be guaranteed. In particular, the problem ad- dressed here arises from the possibility of inferring from the output of frequent itemset mining (i.e., a set of item- sets with support larger than a threshold ?), the exis- tence of patterns with very low support (smaller than an anonymity threshold k)[3]. In the following we develop a simple methodology to block such inference opportuni- ties by introducing distortion on the dangerous patterns.

1. Introduction  Consider a medical institution where the physicians collect, for research purposes, data about their pa- tients. Having unrestricted access to the data, they can perform real mining on all available information using traditional mining tools ? not necessarily the privacy preserving ones. This way they maximize the outcome of the knowledge discovery process, without any con- cern about privacy of the patients which are recorded in the data. But the anonymity of patients becomes a hot issue when the physicians want to share their discoveries (e.g., association rules holding in the data) with their scientific community. It is generally believed that data mining results do not violate the anonymity of the individuals recorded in the source database. In fact, data mining models and patterns, in order to en- sure a required statistical significance, represent a large number of individuals and thus conceal individual iden- tities: this is the case of the minimum support thresh- old in association rule mining. We have recently shown that the above belief is ill-founded [3].

Example 1 Consider the following association rule:  a1 ? a2 ? a3 ? a4 [sup = 80, conf = 98.7%] where sup and conf are the usual interestingness mea- sures of support and confidence as defined in [2]. Since the given rule holds for a number of individuals (80), which seems large enough to protect individual privacy, one could conclude that the given rule can be safely dis- closed. But, is this all the information contained in such a rule? Indeed, one can easily derive the support of the premise of the rule:  sup({a1, a2, a3}) = sup({a1, a2, a3, a4}) conf  ? 80 0.987  = 81.05  Given that the pattern a1?a2?a3?a4 holds for 80 indi- viduals, and that the pattern a1 ? a2 ? a3 holds for 81 in- dividuals, we can infer that in our database there is just one individual for which the pattern a1 ? a2 ? a3 ? ?a4 holds.

In [3] we say that the two itemsets {a1, a2, a3} and {a1, a2, a3, a4} represent an inference channel (a sim- ple one), for the pattern a1 ? a2 ? a3 ? ?a4.

By shifting the concept of k-anonymity [6] from data to patterns, we have formally characterized the notion of a threat to anonymity in the context of pattern dis- covery, and provided a methodology to efficiently and effectively identify such threats that might arise from the disclosure of a set of extracted patterns. In this pa- per we study a methodology to eliminate the threats to anonymity by introducing distortion on the danger- ous patterns in a controlled way, by measuring the ef- fects of the distortion.

2. Problem Definition  Definition 1 A binary database D = (I, T ) consists of a finite set of binary variables I = {i1, . . . , ip}, also known as items, and a finite multiset T = {t1, . . . , tn} of p-dimensional binary vectors ( transactions) record- ing the values of the items. A pattern for the variables in I is a propositional sentence built by AND (?), OR (?) and NOT (?) logical connectives, on variables in I. The domain of all possible patterns is denoted Pat(I).

D a b c d e f g h  t1 1 1 1 1 1 1 1 1 t2 1 1 1 1 1 0 1 0 t3 1 1 1 1 1 0 0 0 t4 1 1 1 1 1 1 1 0 t5 1 1 1 1 1 0 0 0 t6 1 1 1 1 1 0 0 0 t7 1 1 0 1 1 0 0 0 t8 1 0 0 0 1 1 1 0 t9 0 0 1 1 1 1 1 0 t10 0 0 1 1 1 0 0 0 t11 0 0 1 1 1 1 1 1 t12 1 1 0 0 0 1 1 0  Notation: patterns  supD(a ? f) = 11 supD(e ? (?b ? ?d)) = 4 supD(h ? ?b) = 1  Notation: itemsets  supD(abc) = 6 supD(abde) = 7 supD(cd) = 9  F(D, 8) = {??, 12?, ?a, 9?, ?b, 8?, ?c, 9?, ?d, 10?, ?e, 11?, ?ab, 8?, ?ae, 8?, ?cd, 9?, ?ce, 9?, ?de, 10?, ?cde, 9?}  (c)  Cl(D, 8) = {??, 12?, ?a, 9?, ?e, 11?, ?ab, 8?, ?ae, 8?, ?de, 10?, ?cde, 9?}  (d)  MCh(3, Cl(D, 8)) = {?Ccde? , 1?, ?Caba , 1?, ?Caea , 1?, ?Ccdee , 1?, ?Ccdede , 1?}  (a) (b) (e)  Figure 1. Example: (a) the binary database D; (b) different notation used for patterns and itemsets; the set of frequent (? = 8)(c), and of closed (d) itemsets ; (e) the set of maximal inference channels for k = 3.

Definition 2 Given a database D, a transaction t ? D and a pattern p, we write p(t) if t makes p true. The sup- port of p inD is given by the number of transactions which make p true: supD(p) = |{t ? D | p(t)}|.

Definition 3 The set of all itemsets 2I , is a pattern class consisting of all possible conjunctions of the form i1 ? i2 ? . . . ? im. Given a database D and a support threshold ?, the set of ?-frequent itemsets inD is denoted F(D, ?) = {?X, supD(X)? | X ? 2I ? supD(X) ? ?}.

The problem addressed in this paper is given by the possibility of inferring from the output of fre- quent itemset mining, i.e, F(D, ?), the existence of pat- terns with very low support, that represent a threat for the anonymity of the individuals about which they are true (Figure 1(b) shows the different nota- tion used for general patterns and for itemsets).

Definition 4 A set S of pairs ?X,n?, where X ? 2I and n ? N, and a database D are said to be ?-compatible if S ? F(D, ?). Given a pattern p we say that S |= sup(p) > x (respectively S |= sup(p) < x) if, for all databasesD ?-compatiblewithS, we have that supD(p) > x (respectively supD(p) < x).

In general [4], the support of a pattern p = i1 ? ? ? ? ? im??a1?? ? ???an can be inferred if we know the sup- port of itemsets I = {i1, . . . , im}, J = I ?{a1, . . . , an}, and every itemset X such that I ? X ? J .

supD(p) = ?  I?X?J (?1)|X\I|supD(X) (1)  The right-hand side of Equation (1) is denoted fJI (D).

Definition 5 Given a database D and two itemsets I ? J ? 2I , if 0 < fJI (D) < k, then the set of itemsets {X|I ? X ? J}is an inference channel. We denote such inference channel CJI and we write supD(CJI ) = fJI (D).

Example 2 ConsiderD inFigure 1, and suppose k = 3.

We have that supD(b??d??e) = f bdeb (D) = supD(b)? supD(bd) ? supD(be) + supD(bde) = 8 ? 7 ? 7 + 7 = 1.

Therefore, Cbdeb is an inference channel of support 1.

In [3] we have shown that, since a generic pattern p ? Pat(I) can be considered without loss of gener- ality in normal disjunctive form, we can conclude that all possible threats to anonymity are due to inference channels of the form CJI . However two cases can be dis- tinguished: (i) I and J are both frequent itemsets; (ii) J is not frequent. For lack of space we focus only on the first and most essential form of channels.

Definition 6 The set of all CJI holding in F(D, ?), to- gether with their supports, is denoted Ch(k,F(D, ?)) = {?CJI , fJI (D)? | ?J, supD(J)? ? F(D, ?)}.

In our previous paper [3], we have studied the prob- lem of how to detect the inference channels holding in a set of frequent itemsets that we want to disclose (i.e., computing Ch(k,F(D, ?))). In this paper we study how to transform (sanitize) the collection to remove the in- ference channels.

Problem 1 Given a collection of frequent item- sets F(D, ?), and the set of all its inference channels Ch(k,F(D, ?)), transform F(D, ?) in a collection of fre- quent itemsets Ok, which can be safely disclosed.

Ok is the output of our problem, and it must sat- isfy the following conditions: (i) Ch(k,Ok) = ?; (ii) ?D? : Ok = F(D?, ?).

The second condition constraints the output collec- tion of itemsets to be ?realistic?; i.e., to be compati- ble with at least a database. This requirement is due to the fact that disclosing an output which is not com- patible with any database could represent a threat. In fact, a malicious adversary could recognize that the set      of itemsets disclosed is not ?real?, and he could exploit this leak by reconstructing the missing patterns, start- ing from those ones present in the output. We call this kind of threat inverse mining attacks.

3. Avoiding Redundant Distortion  In this Section we show how, using a condensed rep- resentation of Ch(k,F(D, ?)), we can avoid redundant distortion when blocking inference channels. Consider the two inference channels ?Cacdad , 1? and ?Cabcdabd , 1? hold- ing in the database in Fig. 1(a): one is more specific than the other, but they both uniquely identify trans- action t7. It is easy to see that many other families of equivalent, and thus redundant, inference channels can be found. The theory of closed itemsets [5] can help us with this problem.

Definition 7 The set of frequent closed itemsets is Cl(D, ?) = {?X, supD(X)? ? F(D, ?)|?Y ? Xs.t.?Y, supD(X)? ? F(D, ?)}. An itemset I ? Cl(D, ?) is said to be maximal iff ?J ? I s.t. ?J, s? ? Cl(D, ?).

Analogously to what happens for the pattern class of itemsets, if we consider the pattern class of conjunc- tive patterns we can rely on the anti-monotonicity prop- erty of frequency.

Proposition 1 Given CJI and CLH we say that CJI ? CLH when I ? H and (J \ I) ? (L \ H). It holds that: CJI ? CLH ? ?D . fJI (D) ? fLH(D).

Definition 8 An inference channel CJI is said to be maximal w.r.t. D and ?, if ?H,L such that I ? H and (J \ I) ? (L \ H), fLH = 0. The set of maximal infer- ence channels is denoted MCh(k, Cl(D, ?)).

Proposition 2 CJI ? MCh(k, Cl(D, ?)) ? I ? Cl(D, ?)? J is maximal.

In [3] we have proved that from MCh(k, Cl(D, ?)) we can reconstruct every channel in Ch(k,F(D, ?)) and its support without accessing the database.

Proposition 3 Given ?CJI , fJI (D)? ? Ch(k,F(D, ?)), let M be any maximal itemset such that M ? J . The fol- lowing equation holds:  fJI (D) = ?  c(X)  fMc(X)(D) (2)  where c(I) ? c(X) ? M and c(X) ? (J \ I) = ?.

As the set of all closed frequent itemsets Cl(D, ?) con- tains all the information of F(D, ?) in a more compact representation, analogously the set MCh(k, Cl(D, ?)) represents, without redundancy, all the information in Ch(k,F(D, ?)). Removing the redundancy existing in Ch(k,F(D, ?)), we also implicitly avoid redundant san- itization, and thus we dramatically reduce the distor- tion needed to block all the inference channels. In fact,  to block an inference channel CJI ? Ch(k,F(D, ?)) we have two main options:  ? making the inference channel anonymous enough, i.e., forcing fJI (D) ? k;  ? making the inference channel disappear, i.e., forc- ing fJI (D) = 0.

The following two propositions show that, whichever option we choose, we can just block the channels in MCh(k, Cl(D, ?)), obtaining to block all the inference channels in Ch(k,F(D, ?)).

Proposition 4 Given a database D, consider a database D? s.t. ??CLH , fLH(D)? ? MCh(k, Cl(D, ?)) it holds that fLH(D?) ? k. Then from Proposition 1 it fol- lows that ??CJI , fJI (D)? ? Ch(k,F(D, ?)), fJI (D?) ? k.

Proposition 5 Given a database D, consider a database D? s.t. ??CLH , fLH(D)? ? MCh(k, Cl(D, ?)) it holds that fLH(D?) = 0. Then from Proposition 3 it fol- lows that ??CJI , fJI (D)? ? Ch(k,F(D, ?)), fJI (D?) = 0.

In the next Section we exploit the properties above to reduce the distortion needed to sanitize our output.

4. Suppressive Sanitization  The basic idea of Suppressive Sanitization is to hide inference channels, pushing their support to 0: this can be done by removing transactions t s.t. I ? t ? (J \ I) ? t = ?. Unfortunately, we can not simu- late such suppression of transactions simply by de- creasing the support of the itemset I by fJI for each CJI ? Ch(k,F(D, ?)), since we would lose database- compatibility due to the other items appearing in the dangerous transactions. Consider for instance a trans- action I ? {x, y, z}: removing it we reduce the support of I, but as uncontrolled side effect, we also reduce the support of the itemset I ? {x}. Therefore, in order to maintain database-compatibility, we must take into account these other items carefully. One na??ve way of achieving this is to really access the database, suppress the dangerous transactions, and reduce the support of all itemsets contained in the suppressed transactions accordingly. But this is not enough: while introducing distortion to block the ?real? inference channels hold- ing in F(D, ?), transforming it in Ok, we could pos- sibly create some new ?fake? inference channels (not existing in the original database and thus not violat- ing the anonymity of real individuals). We do not al- low this possibility: although fake, such inference chan- nels could be the starting point for a backward rea- soning of a malicious adversary, in other terms, could open the door to inverse mining attacks. The unique solution here is to perform again the detection algo- rithm [3], and if necessary, to block the novel inference      RETAIL  Support (%)  0,4 0,6 0,8 1,0 1,2  N um  be r  of T  ra ns  ac tio  ns          Suppressive k = 5 Suppressive k = 10 Suppressive k = 25 Suppressive k = 50  RETAIL  Support (%)  0,4 0,6 0,8 1,0 1,2  Ite m  se ts  d is  to rt  ed (  % )        Suppressive k = 5 Suppressive k = 10 Suppressive k = 25 Suppressive k = 50  RETAIL  Support (%)  0,4 0,6 0,8 1,0 1,2  A ve  ra ge  D is  to rt  io n  (% )  0,0  0,5  1,0  1,5  2,0  2,5  3,0  Suppressive k = 5 Suppressive k = 10 Suppressive k = 25 Suppressive k = 50  Figure 2. Distortion empirical evaluation.

channels found. Obviously, this process can make some frequent itemsets become infrequent.

Algorithm 1 implements the suppressive sanitization which access the database D on the basis of the infor- mation in MCh(k, Cl(D, ?)), and adjust Cl(D, ?) with the information found in D: the following pseudo-code outputs a sanitized version of Cl(D, ?) but nothing pre- vents us from disclosing a sanitized version of F(D, ?).

Example 3 Consider Cl(D, 8) and MCh(3, Cl(D, 8)) in Fig.1(d) and (e): we got 5 maximal channels ?Ccde? , 1?, ?Caba , 1?, ?Caea , 1?, ?Ccdee , 1?, ?Ccdede , 1? due to transactions t12, t8 and t7. The suppression of these 3 transactions reduces the support of some closed itemsets: at the end of the suppression phase (line 8 of Algorithm 1) we got that Cl(D, 8) = {??, 9?, ?a, 6?, ?e, 9?, ?ab, 6?, ?ae, 6?, ?de, 9?, ?cde, 9?}. Compacting Cl(D, 8) means to remove from it itemsets which, due to the transac- tions suppression, are no longer frequent or no longer closed (lines 9 ? 12), i.e., Cl(D, 8) = {?cde, 9?}. At this point Algorithm 1 invokes the detection algo- rithm (see [3]) to find out the maximal channels in the new Cl(D, 8), and if necessary, starts a new suppres- sion phase (in our example this is not the case).

The plots in Fig.2 report the following three mea- sures of distortion (recorded on the well-known retail dataset [1] for different values of ? and k):  1. Absolute number of transactions virtually sup- pressed.

2. The fraction of itemsets in F(D, ?) which have their support changed in Ok: | {?I, supD(I)? ? F(D, ?) | supOk(I) ?= supD(I)} |  |F(D, ?)| where supOk(I) = s if ?I, s? ? Ok; 0 otherwise.

3. The average distortion w.r.t. the original support of itemsets:  | F(D, ?) |  ?  I?F(D,?)  |supOk(I) ? supD(I)| supD(I)  Algorithm 1 Suppressive Sanitization Input: Cl(D, ?),MCh(k, Cl(D, ?)),D Output: Ok 1: whileMCh(k, Cl(D, ?)) ?= ? do 2: //Scan the database 3: for all t ? D do 4: if ??CJI , fJI ? ? MCh(k, Cl(D, ?)) s.t.

I ? t and (J \ I) ? t = ? then 5: //Transaction suppression 6: for all ?X, supD(X)? ? Cl(D, ?) s.t. X ? t do 7: supD(X) ? supD(X) ? 1; 8: //Compact Cl(D, ?) 9: for all ?X, s? ? Cl(D, ?) do  10: if ??Y, s? ? Cl(D, ?) s.t. Y ? X or s < ? then 11: Cl(D, ?) ? Cl(D, ?) \ ?X, s?; 12: detectMCh(k, Cl(D, ?)) in Cl(D, ?); 13: Ok ? Cl(D, ?);  Note that the last measure is really tough with item- sets which become infrequent during the sanitization process: for these itemsets we count a maximum dis- tortion of 1 (supOk(I) = 0). However, while the num- ber of itemsets distorted is usually very large, the aver- age distortion on itemsets is very low: this means that quite all itemsets are touched by the sanitization, but their supports are changed just a little.

