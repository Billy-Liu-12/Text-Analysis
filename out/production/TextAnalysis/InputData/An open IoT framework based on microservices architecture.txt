China Communications ? February 2017 154

Abstract: With the continuous development and evolvement of Internet of Things (IoT), monolithic application becomes much larger in scale and even more complex in structure.

This leads to poor scalability, extensibility and maintainability. In response to those challeng- es, microservice architecture has been intro- duced in the field of IoT application, due to its flexibility, lightweight and loose coupling.

However, the existing IoT framework of mi- croservice mainly focus on a specific domain, therefore, this greatly limits its application. In this paper, we propose a general microservice system framework for the IoT application, which is a better scalable, extendable and maintainable architecture. We introduce its system design and related microservices, and emphasize on core service and device commu- nication from service layer to physical layer. It has better capacity to support interoperability and accommodate heterogeneous objects. In addition, this framework can easily achieve more application integration such as automa- tion, intelligence, Geo service and Big Data.

Keywords: Internet of things; IoT; micro ser- vice; software architecture

I. INTRODUCTION  The term IoT (Internet of things) is not very  An Open IoT Framework Based on Microservices Architecture Long Sun*1, Yan Li2, Raheel Ahmed Memon3,4  1 College of Computer Science, Sichuan University, Chengdu 610064, China.

2 College of manufacturing Science and Engineering, Sichuan University, Chengdu 610064, China.

3 School of Computer Science, University of Engineering Science and Technology, Chengdu 610064, China 4 Department of Computer Science, Sukkur Institute of Business Administration, Sukkur, Sindh, Pakistan * The corresponding author  Received: Jun. 08,2016 Revised: Oct. 19. 2016 Editor: Mugen Peng  NETWORKS & SECURITY    China Communications ? February 2017155  programmers can enjoy the freedom of coding with simplified integration  In a nutshell, with the development of IoT technology, traditional architecture can?t meet the requirements of heterogeneous, interoper- able, customizable and scalable systems. To deal with above challenges, we put forward an open IoT framework by decomposing IoT system into microservices to perform different kinds of tasks. By using message driven and registry/discovery mechanism in core service, the framework can easily extend, evolve and integrate third party applications to support interoperability and scalability. Moreover, the system uses device plugins to shield the differ- ences of hardware facilities in order to support more heterogeneous platforms. In particular, as integrated with a series of microservices, the framework delivers strong mechanism for fusing heterogeneous data through hierarchical preprocessing mass sensors data.

The paper is organized as follows: Section 2 introduces the related research about the archi- tecture of monolithic and microservice of IoT application. Section 3 deals with the suggested microservice IoT system architecture. Section 4 presents how to implement the system and makes a comparison among the related IoT system. Finally, Section 5 presents a conclusion on the advantages and the limits of the micros- ervice IoT system, and the future work.



II. RELATED WORK  The previous research of IoT system mainly includes two categories: monolithic and mi- croservice architecture.

2.1 Monolithic architecture  In the monolithic architecture [1] software system is deployed as a single solution, in which functionally distinguishable aspects are all interwoven [2]. The natural advantages of monolithic architecture are module inde- pendent, uniform standards and technology stack. Many researches offer solutions from perspective of monolithic architecture. Earlier IoT studies mainly focus on hardware network  power and business process to quickly interact with the physical entities across the business domains, even across the organizations based on the processing and integrating of distribut- ed multisource sensing information. Because of the variety of business process, personal and physical entities involved, physical world continuously changes, IoT services are char- acterized by real time changes. It brings new technical challenges to IoT services such as: heterogeneity of hardware, network and operating system, interoperability between applications and services, fusion of massive heterogeneous data, scalability and continuous integration.

Heterogeneity of hardware, network and operating system. Available IoT devices (sensors and actuators) are vendors specific where the communication protocols and data exchange formats vary from device to device.

The complexity increases exponentially when simple devices are integrated to form a com- plex network and it is difficult to provide a unified solution for IoT application.

Interoperability between applications and services. In the IoT application, many actors comprising human and nonhuman objects and many systems are designed for specific appli- cations, adopting specific data standards and communication platforms. Different platforms lead to great inconvenience for achieving in- teroperability and mutual communication in IoT applications.

Fusion of massive heterogeneous data.

While data collected in the IoT generates bil- lion pieces of information with hundreds of data formats, it?s hard to classify vast amount of raw data by a complex module in traditional architecture, and it also easily leads to system overload if a large number of redundant data directly goes to the application layer.

Scalability and continuous integration. IoT aims to keep on growing all the time and it has generated a lot of complex code. Devel- opers with different technological skills often concern differently and everyone has their own limitations. So a good and independent architecture can offer a mechanism that the  In this paper, a generic comparison between two architectures has been discussed. Based on these foundations, the authors have pro- posed a microservice system framework for the IoT.

China Communications ? February 2017 156  be easily deployed and released internally to the production environment in isolation and the modification of services would not affect the whole system. Any applicable tools and languages can quickly realize a specific ser- vice. Compared with the traditional monolithic architecture, the microservice architecture has obvious advantages, such as complexity under control, independent deployment, more choic- es for technology stack and fault tolerance, which will facilitate the development of IoT applications on large scale.

Many researchers begin to provide IoT solution using microservice architecture. For example, Vresk and Tomislav [13] present a microservice based architecture focusing on connecting with heterogeneous devices, where the system confines to data model as- pect. Krylovskiy et al. [14] discusses how to apply microservice architecture to design a Smart City IoT platform. Bak et al [15] pres- ents three cloud microservices: contextual triggering microservice, visualization micros- ervice, and anomaly detection and root cause microservice, to accelerate and facilitate the development of context and location based applications. However, the above mentioned microservice IoT systems only consider a spe- cific application. Therefore, it is necessary to design a more generic and open framework in IoT system.



III. SYSTEM ARCHITECTURE  3.1 System design  The design of a new generation of IoT frame- work considers the integration and reusability of existing information service system with high cohesion and loose coupling in open and scalable platform design. The core idea of the design is adopting the concept of microservice architecture, based on the analyse of the exist- ing IoT system, reconstructing all the business functions of the system by decoupling them into independent and specific services. The design is using lightweight communication mechanism to interact between services with a  and low-level software technology [3]. For instance, Wireless Sensor Networks (WSN) [4] is a major approach of IoT, but it has lim- ited capacity and weak scalablity. To address these issues, some researches like ubiSOAP [5] WoT/SDN [6] focus on high-level IoT ap- plication programming, which uses standard middleware to implement a layered communi- cation. However, these systems are low reus- ability and portability. TinySOA [7], Servilla [8] and a series of typical Service Oriented Ar- chitectures (SOA) [9] have been applied in dif- ferent applica-tions. To improve the scalablity of SOA, an Event-Driven SOA (EDSOA) IoT technology [10] has also been put forward. In addition, OpenIoT [11] expands the concept of SOA, and implements Web of Things (WoT).

However, with the increasing of the sys- tem functions, the IoT becomes more and more complex in the distributed environment.

Monolithic architecture has some inevitable defects. First, the entire system is a united ap- plication; only multiple deployments can im- prove the system performance, while the over- loaded functions create bottleneck, which is a waste of computing resources. Second, in the case of the change and evolution of the sys- tem, a change in a function may affect other functions due to high dependencies. This also brings complexity for re-deployment, mainte- nance and continuous integration. Finally, the whole system uses a sole technology stack and development standards, which in turn limits the methods to solve the problem of physical heterogeneity.

2.2 Microservice architecture  To overcome the drawbacks of monolithic architecture, many researchers started to adopt microservice architecture [12]. Micro service architecture is a new system software design pattern. It suggests that a single large and complex application should be divided into small manageable groups, where each group deals with the related services. According to its specific business responsibilities, each mi- cro service is dedicated for a single business function. Therefore, independent services can    China Communications ? February 2017157  are wired together to provide a complete IoT platform. The design is consists of eight micro services and one core service coordinating with all, the microservices are as follows: Geo, Security, Tenant, Devices, Bigdata, Auto- mation, AI and Application. The system is not limited to these services; its design is fl exible which can be modifi ed or extended according to the applications requirements.

1. Geo Microservice: The service is de- signed for organize devices by spatial correla- tion in order that the events of the devices can be gathered into groups in this way, such as lo- cation-aware devices. A Geo service provides GIS layer to implement map API for render location data on it. The service provides REST API to invoke map UI library and renders a layer or creates a layer dynamically.

2. Security Microservice: The service pro- vides user/group/role management, authenti- cation and authorization, access control, single sign-on and federation, identity governance and administration. It also supports security monitoring, reporting and auditing. User cre- dentials are required for accessing the REST services. When performing create/update op- erations on entities, the access control policies of the authenticated user are stored to indicate which action can be performed by the user.

3. Tenant Microservice: Based on the mul- titenant design, the service provides support for multiple IoT applications by a single core service instance. An independent data store and processing pipeline is owned by each tenant, thus data and processing will not blended between tenants. Most components are also designed as multitenant enabled. This supports logic isolation of processing and data from different tenants.

4. Device Microservice: The device service manages various kinds of device plugins, and implements different communication proto- cols with low level hardware of how to collect data from sensors and execute command to actuators. This service provides interface for core service to invoke plugins callback. It uses metadata that contains extend context to specific device components. Based on speci-  minimal overload.

The proposed design uses a central service  named as core service to control and coordi- nate the other microservice in the system; it is also used to bootstraps one or more tenant engines, which handle most of the other pro- cessing logic. The system adopts REST design pattern to facilitate the access to object data and to support interoperability with other network. Core communication service encom- passes the communication with the objects nodes between the microservices and external networks. It is provided by a broker micro ser- vice to provide asynchronous communication.

In the development of the communication service, we adopt REST to communicate with client applications.

Apart from using REST interfaces to in- teract with microservices, the system also implements publish subscribe model to notify the clients about the interest events from their subscribed topics, where all the subscribed topics of a client would push the upcoming event notification on client side application.

From the core service broker, a client can subscribe multiple interest topics in order to receive notifi cations from multiple services.

Fig 1 shows the architecture of proposed microservice IoT system. The overall system is composed of different micro services that  Fig.1  The architecture of the proposed IoT framework  cmp System architecture  Devices actuator sensor  Core event process plugin management registry  Security audit SSO user manage  Application client UI mobile app SEO  Bigdata kairosDB MongoDB Redis  Automation CEP engine workflow  Tenant asset cloud  GEO service geoserver mapserver openlayers  AI data mining graph computing semantic web  20.23  Devices actuator sensor    China Communications ? February 2017 158  includes: (i) event management; (ii) plugin management; and (iii) resource discovery. The event manager is responsible for the commu- nication among microservices and devices.

Core service is completely based on events, any microservice interaction or any change in the environment will generate events. Events can be trapped by trigger when are published on channel. By defining in automation micro- service, each trigger is linked to one or more commands. From this architecture, it follows that the program behavior is not predetermined but is fully modificable at runtime, making it extremely fl exible and adaptable to any possi- ble use in building automation.

Core service is provided by the following components, depicted in Fig. 2: BusMsgLis- tener implements a series of bus listener routine which receives message from objects and sends it to its BusConsumer. Message- Subscriber subscribes/unsubscribes a message topic and registers on a channel. BusService provides convenience methods for sending or replying messages on a logic channel. Trigger is a kind of event fi lter. It listens to the events which subscribes through the channel. If the event satisfi es the conditions provided by the trigger, it will invoke BehaviorManager which translates a generic request, one or more logic commands, into a series of hardware com- mands to ObjAction. Then these commands will be sent to the corresponding actuator au- tomatically.

fications which contain device metadata and unique information like hardware identifica- tion, we can assign device plugins associated with physical objects. More details will be introduced in the following subsection.

5. Bigdata Microservice: The Bigdata service provides support for many kinds of scalable persistence to store data. It interacts with storage implementations by a consistent encapsulated API set. By this way, it is easy to add new storage technologies to the system.

When operating database, the system never di- rectly manipulates database. On the contrary, the system provides a set of CRUD API to perform data retrieving and storing.

6. Automation Microservice: The funda- mental function is processing events generated by various event sources, analyses them and notifies appropriate participants according to the user specified queries. It supports events fi ltering, joining, aggregation, grouping, win- dow function etc.

7. Artifical Intelligence Microservice: The AI service based on the IoT bigdata, provides a series of Artifi cial Intelligence tools includ- ing machine learning, data mining, graph computing, etc.

8. Application Microservice: This service provides components to support various client interaction interfaces, such as web UI, PC cli- ent or moblie app etc.

9. Core service. The core service provides support for data exchanging by message com- munication with the devices. The service uses broker to obtain/transform/preprocess mes- sages that produces by objects. Data can be obtained from many sources including COAP, AMQP, WebSockets, MQTT, socket connec- tions, etc. Commands can be sent to devices with various protocols such as MQTT, COAP, and other protocols. More details will be intro- duced in the following subsection.

3.2 Core microservice specifi cation  Core microservice is a very important microser- vice in this system, because we use it to handle all functions related to interacting with devices and related microservices. Its responsibilities Fig.2  Core microservice UML class diagram  class Core Service  BehaviorManger  Trigger  AutoDiscovery  ObjAction  JoinPlugin  BusMsgListener  MessageSubscriber  BusBroker BusService  MessageProducer  PluginsRepository Plugin    China Communications ? February 2017159  will be created accordingly as a part of sys- tem and will start to accept the new incoming events. In this system, each hardware device should have an only identifi cation in order to be individually addressable. When a device boot for the fi rst time, it connects to the core service network, a registration event will be triggered when establishing the connection with core service. Then the device micros- ervice retrieves corresponding plugins and registers it to core service, in response, core service sends a message to the device service indicating the registration result.

2. Devices events handling After successful registration, devices can  interchange various types of events to core service. These events may include: location updates, temperature, humidity and other data obtaining from the sensors, or alerts. Events are delivered to core service by means of plugins which provides a modular approach to support new functions for manipulating in- coming data.

3.Commands delivery Each hardware managed in a device service  has an associated hardware type specifi cation.

The specifi cation links to a list of executable commands corresponding to the devices. The commands and parameters can be modified by the administrative console or by REST calls. As the commands execute, a plugin will encode the commands in a predefi ned format and send them by specified protocol. Fig. 3 illustrates the work process of device service:  Symbols and means  DeviceId: the unique id of the hardware.

URI: the internet address of the device.

Metadata: the metadata which contains the  hardware device information.

Data: the data provided and consumed by  devices.

Topic: the topic of the Data.

Work process  1. Initialize and register the device a) Device microservice register (DeviceId,  URI) to PluginsRepository in Core service.

The plugin components mount bundles from external device microsevice which reg- isters in PluginsRepository at runtime. All the sensors and actuators supported in device mi- croservice are registered in PluginsRepository.

The resource discovery service is based on the Buservice and AutoDiscovery component.

This service is responsible for identifying new nodes in the network and loading the hardware triggers and commands mapping from the metadata retrieved in the device microservice through plugin component.

3.3 Device microservice  This system can manage many heterogeneous devices through extensible plugins. Sensor and actuator plugins are tiny software package which can handle low level device communi- cation and provide API to microservices. Each plugin is managed by device microservice and loaded and initialized automatically at sys- tem startup. The communication between the plugin and core microservice is automatically managed through message middleware. De- vice microservice mainly supports functions as following:  1. Devices registration.

Devices can be manually created by means  of API calls or by self-registration. The hard- ware provides a unique identification to the device service, and then a new device record  Fig.3  Device microservice sequence diagram  sd Device service  PluginsRepositoryPluginsRepositoryPlugin Device microservicemicroservice  application  Broker  1.

2.

3.

publish(topic, data)  subscribe (topic)  mount (DeviceId, URI)(DeviceId, URI)  publish(topic, data)  config (metadata)  search (DeviceId)  register (DeviceId, URI)(DeviceId, URI)  return(URI, metadata)  query (DeviceId)    China Communications ? February 2017 160  connecting to the framework and manipulating text messages.



IV. IMPLEMENTATION AND COMPARISON  In the development of this system, we use Docker and Kubernetes as microservice container. The core service is developed on J2EE platform and implemented using Jboss as application server and Resteasy for the creation of REST interface; Asynchronous communication is developed using ActiveMQ.

The security services are based on Jasig CAS component. Esper component is used for com- plex event processing (CEP) and event series analysis in automation service. In AI service, Apache Spark is adopted for data mining and graph computing. GEO service is developed on GeoServer and Openlayers components.

Apache Solr is used for SEO application. In Bigdata service, we adopt Redis for photo data storage, kairosDB for time series data storage, MongDB for document storage. As above mentioned, the system supports various kinds of hardware platforms, so it?s easy to develop the target software in hardware device system and related plugins in service side system.

Service API Implementation The system supports REST service which  indicates the CRUD operation by standard HTTP verbs as fig. 8.

We demonstrate some REST API call of device service as following:  Create a new device. The hardware needs a unique identification for addressing in sys- tem.

Request URI POST /iotmicservice/devices/ Request header (brief): { ?devicename? : ?temperature sensor? ?hardwareId? : ?57d99d89-caab-482a-  a0e9-a0a803eed3ba?, ?plugin? : ?com.plugins.devices.tempera-  ture?, } Add trigger for a Device. Measurements  2. Query device a) An application sends query to plugin  component by (DeviceId) .

b) Plugin component searches device plugin  registry information in PluginsRepository by (DeviceId).

c) PluginsRrepository returns config of the device (MetaData).

d) Based on the device metadata, plugin component mounts device plugin with (Devi- ceId, URI).

e) Plugin returns device (MetaData, URI) to application.

3. Communication among device and mi- croservice  a) Application begins to subscribe a (Topic) on event broker.

b) The device service publishes (Topic, Data).

c) When the data meets the specific topic, the application gets (Topic, Data).

3.4 Physical layer  As mentioned previously, the device service uses plugins to shield the differences of hard- ware platform and provides a uniform inter- face to core service, so the system can support various hardware device platforms, such as Arduino, Raspberry Pi, Andriod and a series of embedded OS. For quick and easy integrat- ing of those popular platforms, the proposed system provides the features as following: device identification, connection orientation, registering new devices, event processing and commands interface. This allows users to focus on building applications rather than struggling with infrastructure. The SDK main- tains an internal data structure to represent the environment, objects in it and their state.

Making this data available to external clients in a language independent way (XML, JSON, POJOs, ...), is just like that they can see the same environment map the user sees; as a de- veloper you can forget hardware level factors and related issues, and focus on the business process. From this, developers can develop applications in their favorite language, just    China Communications ? February 2017161  ?results? : [ { ?eventid? : ?239472398473?, ?eventType? : ?numerical?, ?hardwareId? : ?57d99d89-caab-482a-  a0e9-a0a803eed3ba?, ?value? : 55}] To show the benefits of the microservice  IoT system, we make the comparison of the current IoT systems in Table 2. From the com- parison we can see the benefits of this IoT sys- tem that includes more flexibility, scalability, maintainability. It fully supports continuous delivery and development technology.



V. CONCLUSION & FUTURE WORK  In this paper, we propose a new microservice IoT framework that has improved features than existing IoT system such as: monolithic and microserivce system. The proposed sys- tem provides a more generic microservice IoT architecture on a module approach, it is much better than existing approaches in terms of flexibility, scalability and platform indepen- dency. In addition, we have also introduced the functions of the key components and il- lustrated their applications. In the proposed microservice IoT framework, all IoT devices and objects are abstracted as resource plugin inside the system.

The allocation of microservices to devices works dynamically by interacting with core ser- vice, where the core service interacts with the device by using the related plugins, the device plugins can be mounted or unmounted dynami- cally, upgradation of the plugins is also possible without affecting the overall system, or even the whole module of a microservice can be freely replaced. Thus, the system not only pro- vides the best IoT service but also has a good support for the Web of Things and has stronger adaptability, scalability and interoperability.

For the practice of microservice architec- ture, there are still many problems to be stud- ied, such as cooperative transaction process- ing, network delay, faults in network, message serialization and other issues. Moreover, the application of microservice IoT in machine  like temperature, humidity, or locations etc.

can be added for a device trigger in a request.

Request URI POST /iotmicservice/devices/{hardwareId} Request header (brief): { ?hardwareId? : ?57d99d89-caab-482a-  a0e9-a0a803eed3ba?, ?temperature? : [ { ?eventDate? : ?2016-11-21?, ?value? : 65.0 } ], ?trigger? :?alarm? } List events of a device: According to the  given criteria, Lists all events that are assigned to the device.

Request URI GET /iotmicservice/device/{hardwareId}/  events  Table I  Microservice IoT framework REST APIs REST verb URI Parameter Specification  GET serviceUrl  /objects Lists resources  serviceUrl /objects/{Id}  Depends on object function Gets information about  an object  POST serviceUrl /objects/  hardwareId, device metadata Creates a new entity  serviceUrl /objects/{Id}  Measurement, logic, time, signal, etc.

affects some part of the system  PUT serviceUrl  /objects/{Id} Entity metadata  Updates the addressed entity  DELETE serviceUrl  /objects/{Id} Deletes the addressed  entity  Table II  Comparison results  Feature ubiSOAP Servilla TinySOA OpenIoT Proposed  framework  Heteroge- neity  Partially support  tinyos Only tinyos Support by  wrapper Support by  device plugin  Scalability Application  &sensor  Application &sensor  Small scale  Application &sensor  Small scale  Applica- tion  &sensor  Microservice &device  Large scale  Discovery device Device service  Device Service  Device service  Device service  CEP Not support Not support Not support Partially support  Full support  DevOps difficult difficult hard difficult easy    China Communications ? February 2017 162  teroperable IoT platform based on microser- vices,? in 2016 39th International Convention on Information and Communication Technology, Electronics and Microelectronics (MIPRO), 2016, pp. 1196?1201.

[14]  A. Krylovskiy, M. Jahn, and E. Patti, ?Designing a Smart City Internet of Things Platform with Microservice Architecture,? in 2015 3rd Interna- tional Conference on Future Internet of Things and Cloud, 2015, pp. 25?30.

[15]  P. Bak, R. Melamed, D. Moshkovich, Y. Nardi, H.

Ship, and A. Yaeli, ?Location and Context-Based Microservices for Mobile and Internet of Things Workloads,? in 2015 IEEE International Confer- ence on Mobile Services, 2015, pp. 1?8.

Biographies Long Sun, is currently pursuing the Ph.D. degree in software engineering at College of Computer Sci- ence, Sichuan University, Chengdu, China. received the B.S. degree in 1996 from Southwest University, Chongqing, China, and M.S. Degree in 2008 from University of Electronic Science and Technology, Chengdu, China. He get Software Architect qualifica- tion issued by The National Qualification Certificate of Computer and Software Technology Proficiency in 2011, he has served on several Natural Science Fund project of national and provincial, among which are the software architecture for the advanced manufac- turing technology and the trusted computer system evaluation, statistical natural language processing.

Yan Li, graduated with a B.Eng. in Mechanical Engi- neering from Sichuan University P. R. China in 1983 and received a M.Sc. degree from the same Universi- ty in 1986, and received his PhD from Liverpool John Moores University, U.K in 1996. He was a postdoctor- al research associate in Cardiff University from 1997 to 1998 and Cambridge University in 1999. In 1988 he was appointed as a lecturer and in 1991 he be- came an associate professor and in 1999 a professor in Sichuan University. His research interests include application of artificial intelligence techniques in in- dustry, creative product design technology and com- puter control of manufacturing systems.

Raheel Ahmed Memon, Currently Mr. Memon is pursuing his PhD in the school of Computer Science & Engineering at UESTC, Chengdu, China, in year 2012 he have received his Masters degree in Com- puter Engineering from Myongji University South Ko- rea. He is a also faculty member at Computer Science Department Sukkur Institute of Business Administra- tion in Sindh, Pakistan. His research interest includes: Internet of Things, Fault tolerant networking, Android Mobile computers and NAND Flash Memories  learning, search engine optimization and other distributed computing scenarios are also need- ed to be continuously explored and studied in future.

