<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">Modeling and  Language Support for the Management of

Abstract In our days knowledge extraction methods are able to produce artifacts (also called patterns) that concisely rep- resent data. Patterns are usually quite heterogeneous and require ad-hoc processing techniques. So far, little empha- sis has been posed on developing an overall integrated en- vironment for uniformly representing and querying dif- ferent types of patterns.Within the larger context of mod- elling, storing, and querying patterns, in this paper, we: (a) formally de?ne the logical foundations for the global setting of pattern management through a model that cov- ers data, patterns and their intermediate mappings; (b) present a pattern speci?cation language for pattern man- agement along with safety restrictions; and (c) intro- duce queries and query operators and identify interest- ing query classes.

1. Introduction Nowadays, we are experiencing a phenomenon of in- formation overload, which escalates beyond any of our traditional beliefs. As a recent survey states [13], the world produces between 1 and 2 exabytes of unique in- formation per year, 90% of which is digital and with a 50% annual growth rate. To deal with the vast amounts of collected data, we reduce the available data to knowl- edge artifacts (e.g., clusters, association rules) through data processing methods (pattern recognition, data ? This work was partially funded by the European Commission and the Hellenic Ministry of Education through EPEAEK II and the PANDA IST Thematic Network.

? School of Electrical and Computer Engineering, Nat?l Tech- nical Univ. of Athens, Zographou 157 73 Athens, Hellas, {mter,spiros}@dblab.ntua.gr ? Dept. of Computer Science, Univ. of Ioannina, Ioannina, Hel- las, pvassil@cs.uoi.gr ? CS Department, Purdue University, bertino@cs.purdue.edu ? Dept. of Computer and Information Science, Univ. of Genoa, Italy, {catania,maddalena}@disi.unige.it mining, knowledge extraction) that reduce their num- ber and size (so that they are manageable by humans), while preserving as much as possible from their hid- den/interesting/available information. Again, the vol- ume, diversity and complexity of these knowledge ar- tifacts make their management by a DBMS-like en- vironment imperative. In the remainder of this docu- ment, we will refer to all these knowledge artifacts as patterns.

So far, patterns have not been adequately treated as persistent objects that can be stored, retrieved and queried. Thus, the challenge of integration between pat- terns and data seems to be achievable by designing funda- mental approaches for providing database support to pat- ternmanagement. In particular, since patterns represent relevant knowledge, often very large in size, it is impor- tant that such knowledge is handled as ?rst-class citizen.

This means that patterns should be modelled, stored, pro- cessed, and queried, in a fashion analogous to data in traditional DBMSs.

To this end, our research is focused mainly towards providing a generic and extensible model for patterns, along with the necessary languages for their de?ni- tion and manipulation. In this context, there is al- ready a ?rst attempt towards a model for pattern man- agement [15], which is able to support di?erent forms of patterns (constraints, functions, etc.) as the new data types of the PBMS. In this paper, we provide formal foundations for the above issues by the follow-    formal foundations for the above issues by the follow- ing means: First, we formally de?ne the logical foun- dations for the global setting of PBMS management through a model that covers data, patterns, and inter- mediate mappings. Second, we discuss language issues in the context of pattern de?nition and management.

In particular, we present a pattern speci?cation calcu- lus that enables us to specify pattern semantics in a rich and concise way. Safety issues are also discussed in this context. Finally, we introduce queries and iden- tify interesting query classes for the problem. We in- troduce query operators for patterns and discuss their Management (SSDBM?04) 1099-3371/04 $ 20.00 ? 2004 IEEE usage and semantics.

The rest of this paper is organized as follows. In Sec- tion 2 we introduce the notion of Pattern-Base Man- agement system. Section 3 presents a generic model for the coexistence of data and patterns. In Section 4 we present the Pattern Speci?cation Language, that enables us to specify pattern semantics. In Section 5 we explain how patterns can be queried and introduce query classes and operators. In Section 6 we present related work. Finally, Section 7 o?ers conclusions and topics of future work. A long version of this work ap- pears in [18].

2. Patterns and Pattern-Base Manage- ment Systems (PBMS?s) Patterns can be regarded as artifacts, which describe (a subset of) raw data with similar properties and/or behavior, providing a compact and rich in semantics representation of data. There exists a data space (the space of raw data) and a pattern space. Patterns and data are related through many-to-many relationships.

Patterns can be managed by a Pattern-Base Man- agement System (PBMS) exactly as database records are managed by a database management system. In our setting, a PBMS can be envisaged as a system where: ? patterns are (semi-)automatically extracted from raw data and loaded in the PBMS; ? patterns are updated as new (existing) data are loaded into (deleted from or updated in) the raw database. These updates can be done in an ad-hoc, on-demand or periodical (batch) manner; ? users are enabled to de?ne the internal structure of the PBMS through an appropriate de?nition lan- guage; ? users are allowed to pose queries to and retrieve answers from the PBMS, with the results of these answers properly visualized and presented; ? an (approximate or exact) mapping between pat- terns and raw data is available whenever retrieval of raw data corresponding to patterns is needed.

The reference architecture for a PBMS is depicted in Fig. 1 and consists of three major layers of information organization. In the bottom of Fig. 1, we depict the data space consisting of data stores that contain raw data (forming thus, the Raw Data Layer). Raw data can be either managed by a DBMS or can be stored in  ?les, streams or any other physical mean that is man- aged outside a DBMS. At the top of Fig. 1, we de- pict the PBMS repository that corresponds to the pat- tern space and contains patterns. The PBMS repos- PatternsOf Experiment145 Ass. Rule MyClustersOnT ableEMP Class Layer    Class Layer Type Layer Patterns Layer Member of Instance of DB1 DB2 Flat file Data Mining Algorithms Pattern Recognition Algorithms Raw Data Layer Ass.

Rules Type Cluster Type Dec.

Trees Type Cyclical Cluster Type Ass. Rule n Ass. Rule DBSCANC luster 1 DBSCANC luster m DBSCANC luster 2 PBMS Intermediate Mappings Figure 1. Reference architecture for the Pattern- Base Management System itory is managed by the Pattern-Base Management System. Finally, in the middle of Fig. 1, we can ob- serve the intermediate mappings that relate patterns to their corresponding data, forming the Intermedi- ate Data Layer. Intermediate mappings facilitate the justi?cation of any knowledge inferred at the PBMS with respect to the raw data. The overall architecture is called Integrated Pattern-BaseManagementArchitec- ture, or simply Pattern Warehouse.

Next, we present a brief description of all the en- tities that appear in this abstract description of the PBMS: Intermediate Mappings Layer. Ideally, we would like this layer to be part of the PBMS, involving special- ized storage and indexing structures. In general, one can imagine that the intermediate mappings can be ei- ther precisely traced (e.g., through some form of join index between patterns and data) or imprecisely ap- proximated. In the latter case, one can employ di?er- ent variations of these approximations through data re- duction techniques (e.g., wavelets), summaries, or even on-line data mining algorithms. For practical purposes, though, the PBMS should be constructed in such a way Management (SSDBM?04) 1099-3371/04 $ 20.00 ? 2004 IEEE that it functions even if intermediate results are out of its control (which we would expect as the most possi- ble scenario in real-world scenarios), or even absent.

Pattern Layer. Patterns are compact and rich in se- mantics representations of raw data. In the general case, although not obligatorily, patterns are generated    case, although not obligatorily, patterns are generated through the application of knowledge extraction algo- rithms. In Fig. 1, two such algorithms have been ap- plied: an algorithm for the extraction of association rules and an algorithm for the extraction of cyclical clusters.

Type Layer. The PBMS Pattern Types describe the intentional de?nition, i.e., the syntax of the patterns.

Patterns of same type share similar characteristics, therefore Pattern Types play the role of data types in traditional DBMS?s or object types in OODBMS?s.

The type layer should be extensible to be able to in- corporate user-de?ned pattern types.

Class Layer. The PBMS classes are collections of patterns which share some semantic similarity. Pat- terns that are members of the same class are obliga- torily required to belong to the same type. Classes are used to create patterns with prede?ned semantics given by the designer; by doing so, the designer makes it eas- ier for the users to work on them in a meaningful way.

For example, a class may comprise patterns that re- sulted from the same experiments, like the association rules of Fig. 1.

3. Modeling Data and Patterns In this section, we will give the formal foundations for the treatment of data and patterns within the uni- fying framework of a pattern warehouse. First, we in- troduce the notions of data types, attributes and re- lations (in the usual relational sense). We exploit the de?nitions already given in [5] for this purpose. Then, we formally de?ne pattern types, pattern classes, pat- terns as well as the intermediate mappings. Finally, we de?ne pattern bases and pattern warehouses.

3.1. The Data Space In this section, we will deal with the formal de?ni- tion of the entities of the data space, i.e., data types, relations and databases. Practically, we start with the data model proposed by Abiteboul and Beeri in [5], and make some changes in the type de?nitions. This data model is a many-sorted model which facilitates the def- inition of complex values. Our minor changes focus on inserting names in the types de?nitions, so we can eas- ily access the inner components of complex types. In the data model, each constant and each variable is as- sociated with a type and each function and predicate with a signature. We start by introducing simple data types.

Data types are structured types that use domain names, set and tuple constructors and attributes. For reasons of space and simplicity, we focus our exam-  ples in the domains of integers and reals, throughout the rest of the paper.

De?nition 1 Data Types (or simply, types) are de- ?ned as follows [5]: ? If D? is a domain name and A is an attribute name then A : D? is an atomic type.

? IfT1, . . . , Tn are types andA,A1, . . . , An are distinct attribute names then A : [A1:T1, . . . , An:Tn] is also a type, called tuple type.

? If T is a type and A is an attribute name then A : {T} is also a type. We call these types set types.

For a k-ary predicate the signature is a k-tuple of types and for a k-ary function it is a k + 1-tuple of types.

The values of a speci?c type are de?ned the natural way. For atomic types, we assume an in?nite, countable set of values as their domain, which we call dom(T).

The domain of set types is de?ned as the powerset of the domain of the composing type. The domain of tu- ple types is de?ned as the product of their constituent types.

types.

Relations in our setting are considered to be sets of tuples de?ned over a certain composite data type. We model relations in the object-relational context and we make the following assumptions: ? For reasons of simplicity, we assume that relations are sets of tuples of the same type instead of just sets (in contrast with [5] which requires only that relations are sets).

? At least one of the tuple components, by default named RID, is atomic and all its values are unique.

Intuitively, we want each relation tuple to have a row identi?er, according to classical (object-) rela- tional terminology. This enables us to use just sets instead of bags. We consider RID to be an implicit attribute and we do not explicitly refer to it when we de?ne the data schema.

De?nition 2 ([5]) A database schema is a pair D?B = ?[D?1, . . . , D?k], [R?1:T1, . . . , R?n:Tn]?, where T1, . . . , Tn are set types involving only the domain names corresponding to the data types D?1, . . . , D?k and R?1, . . . , R?n are relation names.

Management (SSDBM?04) 1099-3371/04 $ 20.00 ? 2004 IEEE De?nition 3 ([5]) An instance of D?B, i.e., a database, is a structure DB = ?[D1, . . . , Dk], [R1, . . . , Rn]?, where Ri?s are relations and Di?s are do- mains.

We also refer to D?B as the database type, and to DB as the database value.

As we will see in the following, we need to be able to de?ne patterns over joins, projections and selections over database relations. To do that, we extend Def- inition 2 with a set of materialized views V1, . . . , Vm which are de?ned over relations R1, . . . , Rn using rela- tional algebra. We require that each tuple in a material- ized view has a unique identi?er called RID. Through- out the rest of the paper, we address views as relations, unless explicitly speci?ed otherwise.

3.2. The Pattern Space Now that we have de?ned the constructs found at the data space, we are ready to proceed with the def- inition of the entities belonging to the pattern space.

Therefore, we will introduce pattern types, which are  templates for the actual patterns and pattern classes which are groups of semantically similar patterns. The de?nition of a pattern base then comes straightfor- wardly.

Patterns as de?ned in [15] are compact, yet rich in semantics, representations of the raw data. This infor- mal principle is formally translated as a quintuple. We will intuitively de?ne these components here and give the de?nition right next.

? First, a pattern is uniquely identi?ed by a Pattern Id (PID).

? Second, a pattern has a structure: for example, an association rule comprises a head and a body, and a cyclical cluster comprises a center and a radius.

? Third, a pattern corresponds to some underlying data. The subset of the underlying data space that is represented by the pattern must be speci?ed, e.g., through the appropriate relation.

? Fourth, a pattern informs the user on its qual- ity, i.e., how closely does it approximate reality as compared to the underlying data, through a set of statistical measures. For example, an associa- tion rule is characterized by a con?dence and a support measure.

? Finally, a formula provides the richness in seman- tics for the pattern. The formula demonstrates a    tics for the pattern. The formula demonstrates a possibly simpli?ed form, of the relation between the data that are represented by the pattern and the pattern structure. In Section 4 we present a Pattern Speci?cation Language (PSL) in which the formula is expressed.

A Pattern Type represents the intentional descrip- tion of a pattern, pretty much like abstract data types do in the case of object-relational data. In other words, a pattern type acts as a template for the generation of patterns. Each pattern is an instance of a speci?c pat- tern type. There are four major components that a Pat- tern Type speci?es.

? First, the pattern type dictates the structure of its instances, through a structure schema. For exam- ple, it obliges association rules to comprise a head and a body.

? Moreover, a pattern type speci?es a data schema which dictates the schema of the underlying data which have produced the pattern type; practi- cally this is the schema of the relation which can be employed as the test-bed for pattern genera- tion/de?nition.

? Third, it dictates a measure schema, i.e., which set of statistical measures that quantify the quality of the approximation is employed by the instances of the pattern type.

? Finally, a template for the formula of the instances dictates the structure of the formula. The formula is a predicate bounding the DataSchema and the StructureSchema, expressed in the PSL.

De?nition 4 A Pattern Type is a quintuple [Name, StructureSchema, DataSchema, MeasureSchema, Formula] such that (a) Name is a unique identi- ?er among pattern types, (b) StructureSchema is a dis- tinct complex type (can be set, set of sets etc), (c) DataSchema is a relation type, (d) MeasureSchema is a tuple of atomic types and (e)Formula is a predicate ex- pressed in the PSL language over the StructureSchema and the DataSchema.

De?nition 5 A Pattern (Instance) p over a Pat- tern Type PT is a quintuple [PID, Structure, Data, Measure, Formula] such that (a) PID is a unique identi?er among all patterns of the same class, (b) Structure and Measure are valid values of the respec- tive schemata of PT , and (c) Data and formula are expressions in the PSL language, properly instantiat- ing the corresponding expressions of the pattern type PT .

Example 1 Let us now present an example of a pattern type Cluster that de?nes a cyclical cluster and an exam- ple of one of its instance.

Pattern Type Cluster Management (SSDBM?04) 1099-3371/04 $ 20.00 ? 2004 IEEE Name Cluster Structure Schema disk:[Center: [X:real, Y :real], Rad:real] Data Schema rel:{[A1:real, A2:real]} Measure Schema Precision:real Formula Schema (t.A1 ? disk.Center.X)2 + (t.A1 ?

disk.Center.Y )2 ? disk.Rad2 where t ? rel Pattern Instance CustomerCluster    Pattern Instance CustomerCluster Pid 337 Structure disk:[Center:[X:32, Y :90], Rad:12] Data customer:{[Age, Income]} Measure Precision: 0.91 Formula (t.Age?32)2+(t.Income?90)2 ? 122 where t ? customer Intuitively we can see that the formula requires that all data that belong to the relation customer must sat- isfy the predicate (t.Age ? 32)2 + (t.Income ? 90)2 ?

122. Precision in this case indicates that only 91% of them do.

In order to de?ne Pattern Types correctly, we need to be able to de?ne their DataSchema properly. Since a Pattern Type is a generic construct, not particularly bound to a speci?c data set, we employ a set of aux- iliary names, which are employed in the de?nition of the DataSchema of Pattern Types for the speci?ca- tion of generic relations and attributes.

Having said that, the instantiation procedure that generates patterns on the basis of Pattern Types, is straightforward. Assume that a certain Pattern Type PT is instantiated in a new pattern p. Then: ? The domains involved in the StructureSchema and the MeasureSchema of PT are instantiated by valid values in p.

? The auxiliary relation and attribute names in the DataSchema of PT are replaced by regu- lar relation and attribute names of an underlying database.

? Both the previous instantiations apply for the FormulaSchema, too: the attributes of the StructureSchema are instantiated to val- ues and the auxiliary names of the DataSchema  are replaced by regular names. All other vari- able names remain the same.

Having de?ned the data space and the pattern enti- ties, we are ready to de?ne the notions of Pattern Class and Pattern Pase (PB). A Pattern Class over a pattern type is a collection of semantically related patterns, which are instances of this particular pattern type. Pat- tern classes play the role of pattern placeholders, just like relations do for tuples in the relational model.

De?nition 6 A Pattern Class is a triplet [Name, PT , Extension] such that (a) Name is a unique identi?er among all classes, (b) PT is a pattern type and (c) Extension is a ?nite set of patterns with pattern type PT .

De?nition 7 A Pattern Base Schema de- ?ned over a database schema D?D is de?ned as P?B = ?[D?1, . . . , D?n], [P?C1:PT1, . . . , P?Cm:PTm]?, where PTi?s are pattern types involving the domains D?1, . . . , D?n and P?Ci?s are pattern class names.

De?nition 8 An instance of P?B, i.e., a pat- tern base, over a database DB is a structure PB = ?[PT1, . . . , PTk], [PC1, . . . , PCm]?, where PCi?s are pattern classes de?ned over pattern types PTi with patterns whose data range over the data in DB.

3.3. The Pattern Warehouse Having de?ned the data and the pattern space, we are ready to introduce the global framework, in the con- text of which data- and pattern-bases coexist. To this end, we formally de?ne the intermediate mappings be- tween data and patterns and the overall context of pat- terns, data and their mappings.

Each pattern corresponds to a set of underlying data whom it represents. At the same time, each record in the source database corresponds to a (possibly empty) set of patterns that abstractly represent it. We assume a mapping ? that relates patterns with their corre- sponding data. Through this mapping, we can capture    sponding data. Through this mapping, we can capture both the relationship between a pattern and its corre- sponding data and at the same time, the relationship of a record with its corresponding patterns.

For reasons of simplicity, we avoid de?ning the rela- tionship between data items and patterns at the level of individual relations and classes. Rather, we employ a generic representation, by introducing the union of all data items ? and the union of all patterns ?. Prac- tically, the existence of RID ?s and PID ?s allows us to perform this union.

De?nition 9 The active data space of all data items of a database instance DB = ?[D1, . . . , Dk], [R1, . . . , Rn]?, ?DB, is the union of all relations, i.e.,?DB =R1?? ? ??

Rn. The active pattern space of all patterns ? of a pat- tern base instance PB is the union of all pattern classes, i.e., ?PB = PC1 ? ? ? ? ? PCn.

De?nition 10 Given the active data- and pat- tern spaces?DB and?PB, an intermediate pattern-data Management (SSDBM?04) 1099-3371/04 $ 20.00 ? 2004 IEEE mapping ? over ?DB and ?PB is a total func- tion ? : ?DB ? ?PB ? {true, false}.We say that a data item d is represented by a pattern p and we write d ?? p or p ?? d i? ?(d, p) = true.

It should be obvious now that the formula of each pat- tern is an approximation of the mapping?. In principle, it is an issue of implementation and mostly adminis-  tration whether the intermediate mappings will be ex- plicitly saved (with the storage and maintenance cost that this incurs) or simply approximated by the pat- tern formula (with the respective approximation error).

In the sequel, we will demonstrate the usage of the for- mula as an approximation for the intermediate map- pings.

Now, we are ready to de?ne the notion of Pat- tern Warehouse which incorporates the underlying database (or source), the pattern bases and the inter- mediate mappings. Notice that although we separate patterns from data, we need the full environment in or- der to answer interesting queries, going all the way back to the data and to support interactive user ses- sions that navigate from the pattern to the data space and vice-versa.

De?nition 11 A Pattern Warehouse Schema is a pair ?D?B, P?B?, where D?B is a database schema and P?B is a pattern base schema.

De?nition 12 A Pattern Warehouse is an in- stance of a pattern warehouse schema de?ned as a triplet: ?DB,PB,??, where DB is a database in- stance, PB is a pattern base instance, and ? is an intermediate pattern-data mapping over DB and PB.

4. Pattern Speci?cation Language and Formula The pattern formula describes the relation between the patterns, which are described in the structure ?eld, and the raw data which are described in the source ?eld. It is evident that we need a common language to describe all these ?elds. Therefore, in this section, we present the Pattern Speci?cation Language (PSL), with particular focus on the following aspects: (a) lan- guage syntax, (b) the treatment of functions and pred- icates by PSL and (c) safety considerations.

Syntax. We chose as Pattern Speci?cation Language the complex value calculus, presented in [5] by Abite- boul and Beeri. This calculus is a many-sorted calcu- lus. The sorts are types as de?ned previously. Each con- stant and each variable is associated with a type and each function and predicate with a signature. The sig- nature of a k-ary predicate is a k-tuple of types. The    nature of a k-ary predicate is a k-tuple of types. The signature of a k-ary function is a k + 1-tuple of types, involving the types of the parameters and the result of the function. The set of terms of the language is the smallest set that contains the atomic constants and variables, and it is closed under the application of func- tions. Simple formulae consist of predicates applied to terms and formulae are combinations of atomic formu- lae through the combination of the connectives ?,?,?, and the quanti?ers ?,?.

Functions and Predicates. Functions and predicates are quite important in the PBMS setting, since the approximation of the data to patterns mapping, usu- ally needs complex functions to be expressed. Func- tions and predicates can possibly appear both in the formula ?eld and in queries, associating relation names with the pattern structure. We believe that having in- terpreted functions is the best approach for the PBMS, since we would like the formula to be informative to the user and we would like to be able to reason on it.

Safety andRangeRestriction. The formula is a predi- cate that we would ideally like to be true for all the data that are mapped to a pattern. Notice that the formula by itself does not contain a logical expression involv-  ing the pattern structure schema and the data schema, i.e., it is not a query on the relations of the raw data.

The formula is merely a predicate to be used in queries.

We would like for example to use it in queries that nav- igate between the data and the pattern space like the following: {x | fp(x) ? x ? R} where fp is a formula predicate and R is a relation ap- pearing in the Data component. We require that fp is de?ned in such a way that we can construct queries like the previous, which are ?safe?. Safety is considered in terms of domain independence. Still, we cannot adopt the classical notion of domain independence (which re- stricts values to the active domain of the database), since even the simple functions can create new values (not belonging to the domain of the database). There- fore, we should consider a broader sense of domain in- dependence similar to the one presented in [5, 17, 8], which allows the ?nite application of functions. For ex- ample, the n-depth domain independence as suggested in [5] considers domain independence with respect to the active domain closed under n application of func- tions. This includes the active domain and all the val- ues that can be produced by applying the database functions n times, where n some ?nite integer.

The easiest way to ensure safety in these terms is to range restrict all variables appearing in a query. To this end, we introduce the where keyword in the formula, which facilitates the mapping of the formula predicate free variables to the relation schema that appears in the DataSchema or Data component. More speci?- Management (SSDBM?04) 1099-3371/04 $ 20.00 ? 2004 IEEE cally, we require that there are no free variables in the fp that are not mapped to the relation of the Data com- ponent by the use of thewhere keyword. This restriction, guarantees that all the variables appearing in fp are ei- ther range restricted or that the system knows how to range restrict them to a ?nite set of values when fp is used in a query.

Now we can formally de?ne the well-formed formula for the pattern-type: De?nition 13 A pattern type formula is of the form: fp(dv, pv), where dv ? ds (1) where fp (formula predicate) is a PSL predicate, dv are variable names mapped by the where keyword to the rela-    variable names mapped by the where keyword to the rela- tion in DataSchema and pv are variable names that ap- pear in the StructureSchema.

At instantiation time pv is assigned values of the Structure component and dv is mapped to the rela- tion appearing in Data component. The de?nition for the pattern well-formed formula is now straightfor- ward: De?nition 14 A pattern formula is of the form: fp(dv), where dv ? ds (2) where fp (formula predicate) is a PSL predicate, dv are variablesmapped by thewhere keyword to the relation ap- pearing in Data component.

From the previous de?nitions the semantics of the where keyword become evident: we impose that the variables of the formula will take values from speci?c relations when the formula predicate is employed in queries.

Example 2 Let us consider the following formulas.

1. f(x) where x ? R(x) 2. f(g(x), y) where x ? R(x) In the ?rst formula variable x is mapped to R using the where keyword, thus the formula is well formed. Keep in mind that the formula predicate by itself is just the part f(x), which is not range restricted. The second formula is not well-formed since y is not mapped via where to any relation, or otherwise range restricted.

5. Querying the Pattern Warehouse We de?ne queries to be posed over the pattern ware- house and not individually over its data- or pattern- base components. Through this approach, we are able to sustain queries traversing from the pattern to the data space and vice-versa. At the same time, the con- sistency of the results is guaranteed by the pattern-data mapping ?.

De?nition 15 Let PW the set of all possible Pat- tern Warehouses. A query is a function with signature PW ? PW. Given a query q and a pattern ware- house pw = (DB,PB,?), with p?w = (D?B, P?B), q(pw) = (DB?, PB?,??), D?B? = ?[D?1, ...D?k], [R?1:T1]?, P?B? = ?[D?1, ..., D?m], [P?C1:PT1]?. We assume that ?tr, tp(tr ? R1 ? tp ? PC1)? ??(tr, tp).

Note that, similarly to the relational case, the re- sult of a query is always a pattern warehouse contain- ing just one relation and one pattern class. It is also im- portant to point out that, in practice, even if a query always involve both the data and pattern space, oper- ations over patterns are executed in isolation, locally at the PBMS. The reference to the underlying data is activated only on-demand (whenever the user speci?- cally requests so) and e?ciently enabled through the stored intermediate mappings or the formula approxi- mation.

5.1. Query operators In this section we introduce query operators that al- low basic queries over the the PW . Assuming that DB denotes the set of all possible database instances and PB the set of all possible pattern bases, we consider the following groups of operators: ? Database operators: they can be applied locally to the DBMS. op : DB ? DB. We denote the set of database operators with OD.

? Pattern base operators: they can be applied locally to the PBMS. op : PB ? PB. We denote the set of database operators with OP .

? Cross-over database operators: they involve evalu- ation on both the DBMS and the PBMS, the re- sult is a database. op : DB ? PB ? DB. We de- note the set of database operators with OCD.

? Cross-over pattern base operators: they involve evaluation on both the DBMS and the PBMS, the    evaluation on both the DBMS and the PBMS, the result is a pattern base. op : DB ? PB ? PB. We denote the set of database operators with OCP .

In the following, we present examples of the last three classes of operators (database operators coincide with usual relational operators). Before presenting such operators, we introduce some examples of predicates de?ned over patterns.

Management (SSDBM?04) 1099-3371/04 $ 20.00 ? 2004 IEEE 5.1.1. Pattern predicates We identify two main classes of atomic predicates: predicates over patterns and predicates over pattern components. From those  atomic predicates we can then construct complex pred- icates. In the following, we denote pattern components by using the dot notation. For example, the measure component of a pattern p is denoted by p.Measure.

Predicates over pattern components. They check prop- erties of speci?c pattern components. Let p1 and p2 be two patterns, possibly selected by some queries. The general form of a predicate over pattern components is t1?t2, where t1 and t2 are path expressions that must de?ne components of patterns p1 and p2, of compat- ible type and ? must be an operator, de?ned for the type of t1 and t2. For example, if t1 and t2 are inte- ger expressions, then ? can be a disequality operator (e.g. one of &lt;,&gt;). We consider the following special cases: ? If t1 and t2 are pattern data for patterns p1 and p2, then ? ? {=,?}. t1 = t2 is true if and only if ?x x ?? p1 ? x ?? p2 and t1 ? t2 is true if and only if ?x x ?? p1 ? x ?? p2.

? If t1 and t2 are pattern formulas for patterns p1 and p2, then ? ? {=, ?}. t1 = t2 is true if and only if t1 ? t2 and t1 ? t2 is true if and only if t1 logically implies t2.

Predicates over patterns. We consider the following set of predicates: ? Identity (=). Two patterns p1 and p2 are identical if they have the same PID, i.e. p1.P ID = p2.P ID.

? Shallow equality (=s). Two patterns p1 and p2 are shallow equal if their corresponding compo- nents (except for the PID component) are equal, i.e. p1.Structure = p2.Structure, p1.Source = p2.Source, p1.Measure = p2.Measure, and p1.formula = p2.formula. Note that, to check the equality for each component pair, the ba- sic equality operator for the speci?c component type is used.

? Deep equality (=d). Two patterns p1 and p2 are deep equal if their corresponding data are identi- cal, i.e., ?x x ?? p1 ? x ?? p2.

? Subsumption ( ?). A pattern p1 subsumes a pat- tern p2 (p1 ? p2) if they have the same struc- ture but p2 represents a smaller set of raw data, i.e. p1.Structure = p2.Structure, p1.Source ?

p2.Source and p1.formula ? p2.formula.

Complex predicates. They are de?ned by applying usual logical connectives to atomic predicates. Thus, if F1 and F2 are predicates, then F1 ? F2,F1 ? F2,?F1 are predicates. We make a closed world assumption, thus the calculation of ?F is always ?nite.

5.1.2. Pattern base operators OP In this subsec- tion, we introduce several operators de?ned over pat- terns. Some of them, like set-based operators, renaming and selection are quite close to their relational coun- terparts; nevertheless, some others, like join and pro- jection have signi?cant di?erences.

Set-based operators. Since classes are sets, usual opera- tors such as union, di?erence and intersection are de-    tors such as union, di?erence and intersection are de- ?ned for pairs of classes of the same pattern type.

Renaming. Similarly to the relational context, we con- sider a renaming operator ? that takes a class and a renaming function and changes the names of the pat- tern attributes according to the speci?ed function.

Projection. The projection operator allows one to re- duce the structure and the measures of the input pat- terns by projecting out some components. The new ex-  pression is obtained by projecting the formula de?n- ing the expression over the remaining attributes [12].

Note that no projection is de?ned over the data source, since in this case the structure and the measures would have to be recomputed.

Let c be a class of pattern type pt. Let ls be a non empty list of attributes appearing in pt.Structure and lm a list of attributes appearing in pt.Measure. Then, the projection operator is de?ned as follows: ?(ls,lm)(c) = {(id(), ?sls(s), d, ?mlm(m), ?ls?lm(f)) | ?p ? c, p = (pid, s, d,m, f)} In the previous de?nition, id() is a function return- ing new pids for patterns, ?mlm(m) is the usual relational projection of the measure component and ?sls(s) is de- ?ned as follows: (i) if s is a tuple type, then ?sls(s) is the usual relational projection; (ii) if s is a set type, then ?sls(s) is obtained by keeping the projected components and removing the rest from set elements. The last com- ponent ?ls?lm(f) is the new formula. This can only be computed in certain cases, when the theory over which the formula is constructed admits projection. This hap- pens for example for the polynomial constraint theory [12].

Selection. The selection operator allows one to select the patterns belonging to one class that satisfy a cer- tain predicate, involving any possible pattern compo- nent, chosen among the ones presented in Section 5.1.1.

Let c be a class of pattern type pt. Let pr be a predi- cate. Then, the selection operator is de?ned as follows: ?pr(c) = {p|p ? c ? pr(p) = true} Join. The join operation provides a way to combine patterns belonging to two di?erent classes according to a join predicate and a composition function speci- ?ed by the user.

Management (SSDBM?04) 1099-3371/04 $ 20.00 ? 2004 IEEE Let c1 and c2 be two classes over two pattern types pt1 and pt2. A join predicate F is any predicate de- ?ned over a component of patterns in c1 and a compo- nent of patterns in c2. A composition function c() for pattern types pt1 and pt2 is a 4-tuple of functions c = (cStructureSchema, cDataSchema, cMeasureSchema, cFormula), one for each pattern component. For example, func- tion cStructureSchema takes as input two structure values of the right type and returns a new struc- ture value, for a possible new pattern type, gen- erated by the join. Functions for the other pat- tern components are similarly de?ned. Given two patterns p1 = (pid1, s1, d1,m1, f1) ? c1 and p2 = (pid2, s2, d2,m2, f2) ? c2, c(p1, p2) is de- ?ned as the pattern p with the following compo- nents: Structure : cStructureSchema(s1, s2) Data : cDataSchema(d1, d2) Measure : cMeasureSchema(m1,m2) Formula : cformula(f1, f2).

The join of c1 and c2 with respect to the join pred- icate F and the composition function c, denoted by c1 ??F,c c2, is now de?ned as follows: c1 ??F,c c2 = {c(p1, p2)|p1 ? c1?p2 ? c2?F (p1, p2) = true}.

5.1.3. Cross-over database operators OCD Drill-Through. The drill-through operator allows one to    Drill-Through. The drill-through operator allows one to navigate from the pattern layer to the raw data layer.

Thus it takes as input a pattern class and it returns  a raw data set. More formally, let c be a class of pat- tern type pt and let d be an instance of the data schema ds of pt. Then, the drill-through operator is denoted by ?(c) and it is formally de?ned as follows: ?(c) = {d|?p, p ? c ? d ?? p} Data-covering. Given a pattern p and a dataset D, sometimes it is important to determine whether the pattern represents it or not. In other words, we wish to determine the subset S of D represented by p (p can also be selected by some query). To determine S, we use the formula as a query on the dataset. Let p be a pat- tern, possibly selected by using query language opera- tors, and D a dataset with schema (a1, ..., an), compat- ible with the source schema of p. The data-covering op- erator, denoted by ?d(p,D), returns a new dataset cor- responding to all tuples in D represented by p. More formally, ?d(p,D) = {t | t ? D, p.formula(t.a1, ..., t.an) = true} In the previous expression, t.ai denotes a spe- ci?c component of tuple t belonging to D and p.formula(t.a1, ..., t.an) is the formula predicate of p instantiated by replacing each variable correspond- ing to a pattern data component with values of the considered tuple t.

Note that, since the drill-though operator uses the intermediate mapping and the data covering operator uses the formula, the covering ?(p,D) of the data set D = ?(p) returned by the drill through operator, might not be equal to D. This is due to the approximating na- ture of the pattern formula.

5.1.4. Cross-over pattern base operators OCP Pattern-covering. Sometimes it can be useful to have an operator that, given a class of patterns and a dataset, returns all patterns in the class representing that dataset (a sort of inverse data-covering operation).

Let c be a pattern class and D a dataset with schema (a1, ..., an), compatible with the source schema of the c pattern type. The pattern-covering operator, denoted as ?p(c,D), returns a set of patterns corresponding to all patterns in c representing D. More formally: ?p(c,D) = {p | p ? c, ?t ? D p.formula(t.a1, ..., t.an) = true} Note that: ?p(c,D) = {p|p ? c, ?d(p,D) = D} 6. Related Work Although signi?cant e?ort has been invested in ex- tending database models to deal with patterns, no co- herent approach has been proposed and convincingly implemented for a generic model.

There exist several standardization e?orts for mod- eling patterns, like the Predictive Model Markup Language (PMML) [4], which is an XML-based mod- eling approach, the ISO SQL/MM standard [2], which is SQL-based, and the Common Warehouse Model (CWM) framework [1], which is a more generic model- ing e?ort. Also, the Java Data Mining API (JDMAPI) [3] addresses the need for a language-based man- agement of patterns. Although these approaches try to represent a wide range of data mining re- sult, the theoretical background of these frame- works is not clear. Most importantly, though, they do not provide a generic model capable of han- dling arbitrary cases of pattern types; on the contrary, only a given list of prede?ned pattern types is sup- ported.

To our knowledge, research has not dealt with the is- sue of pattern management per se, but, at best, with peripheral proximate problems. For example, the pa- per by Ganti et. al. [9] deals with the measurement    per by Ganti et. al. [9] deals with the measurement of similarity (or deviation, in the authors? vocabulary) between decision trees, frequent itemsets and clusters.

Although this is already a powerful approach, it is not generic enough for our purpose. The most relevant re- search e?ort in the literature, concerning pattern man- agement is found in the ?eld of inductive databases, Management (SSDBM?04) 1099-3371/04 $ 20.00 ? 2004 IEEE meant as databases that, in addition to data, also con- tain patterns [10], [7]. Our approach di?ers from the in- ductive database one mainly in two ways. Firstly, while only association rules and string patterns are usually considered there and no attempt is made towards a gen- eral pattern model, in our approach no prede?ned pat- tern types are considered and the main focus lies in devising a general and extensible model for patterns.

Secondly, di?erently from [10], we claim that the pecu- liarities of patterns in terms of structure and behavior, together with the characteristic of the expected work- load on them, call for a logical separation between the database and the pattern-base in order to ensure e?- cient handling of both raw data and patterns through dedicated management systems.

Finally, we remark that even if some languages have been proposed for pattern generation and retrieval [14, 11], they mainly deal with speci?c types of pat- terns (in general, association rules) and do not con- sider the more general problem of de?ning safe and su?ciently expressive language for querying heteroge- neous patterns.

7. Conclusions and Future Work In this paper we have dealt with the issue of mod- elling and managing patterns in a database-like setting.

Our approach is enabled through a Pattern-Base Man- agement System, enabling the storage, querying and management of interesting abstractions of data which we call patterns. In this paper, we have (a) formally de?ned the logical foundations for the global setting of PBMS management through a model that covers data, patterns and intermediate mappings and (b) discussed language issues for PBMS management. To this end we presented a pattern speci?cation language for pat- tern management along with safety constraints for its usage and introduced queries and query operators and identi?ed interesting query classes.

Several research issues remain open. First, it is an interesting topic to incorporate the notion of type and class hierarchies in the model [15]. Second, we have intentionally avoided a deep discussion of sta- tistical measures in this paper: it is more than a trivial task to de?ne a generic ontology of statisti- cal measures for any kind of patterns out of the var- ious methodologies that exist (general probabilities, Dempster-Schafer, Bayesian Networks, etc. [16]). Fi- nally, pattern-base management is not a mature tech- nology: as a recent survey shows [6], it is quite cum- bersome to leverage their functionality through object- relational technology and therefore, their design and engineering is an interesting topic of research.

