Intelligent System Development and  Integration for Cloud Computing

Abstract? Many ?big data? software systems are not interactive, automated, or run in a real-time mode. The true utility of cloud computing and ?big data systems? can be increased by providing an execution framework and control software that is native to cloud architectures and supports interactivity and time synchronization. In addition, a framework to integrate different artificial intelligence and machine learning algorithms is combined with the execution framework to create a powerful cloud computing system development platform.

Keywords?cloud computing; complex system representation; integration; conceptual graphs; synchronization

I. INTRODUCTION Current cloud computing application development and  systems integration suffer from the following problems:  ? Batch oriented ? the systems are not made to run interactively, or continuously.

? Brittle ? easily fail with slight perturbations to the information transacted  ? Difficult to maintain as systems are upgraded  ? Complicated to scale when additional information and constituent systems, are required  ? Cannot provide clear, concise implementations among diverse sub-system sets  The problems are unlikely to be solved without improvement in the underlying development environment and infrastructure.

A cloud application development and integration framework called CONDOR [1], address the challenges. CONDOR?s biologically inspired characteristics have the ability to:  ? Create complex, realistic, and scalable networks of component inter-relationships  ? Distribute autonomous controls and monitors  ? Implement complex webs of cause and effect  ? Dynamically alter the execution structure  ? Adapt and evolve the system  In addition, CONDOR addresses the challenges by fusing:  ? Advanced systems theory and practice  ? Advanced software development  ? Low-latency, high throughput, reliable, and robust computer communications  ? Sophisticated software integration, interoperability, and synchronization  Common approaches to complex system infrastructure, such as systems based on Microsoft?s .NET framework [5], process- based programming (e.g., systems utilizing threads, semaphores, and locks) [6][7][8], object request brokers [9][10][11], ERP infrastructure [12][13][14], and cluttered web-based technologies, [16] fail in one or more of the problem areas listed above. The tremendous number of constructs causes significant setbacks with most application development and integration methods. CONDOR (with a macro-based sub-language) easily represents and constructs these complex system capabilities.



II. ARCHITECTURE DESCRIPTION CONDOR is an object-oriented, event-based, high  performance execution system. CONDOR [1] provides high speed communications, which is central to its framework [2], and utilizes numerous messaging fabrics for inter-processor communication: shared memory, wireless, fiber optic, ATM, TCP, IP, and multicast (implemented in a variety of media).

Component Repository  Composability Automation  CASE Tool Environment User Defined System  Interface  User Defined Hardware Interface  Web Services API  (JNI, SOAP, OWL, etc.)  Shared Memory  Reliable Multicast TCP/IP  Reflective Memory  Security State Saving Core Programming  Distributed Object Mgmt  Std App Dev Interface  Synchronization Management  Event Management Services  Knowledge Representation Integration Meta-Data  Data Translation  Communication Services  Common Application Services  Intelligent Application Services  System Execution Services   Figure 1. CONDOR architecture layering   DOI 10.1109/CSCI.2014.95    DOI 10.1109/CSCI.2014.95    DOI 10.1109/CSCI.2014.95    DOI 10.1109/CSCI.2014.95     The Communications Services provide a variety of mechanisms linking clients to intelligent application services, or the hosting processors. Communications Services API (internal and external) is standardized for simplified integration [1]. An abstraction is then supported for unicast and multicast, and permits various implementations, and thus protocols, to work simultaneously.

State-Saving Framework and State-Saving Services support reliability, synchronization, fault-tolerance, and implementation of persistence services. The Core Programming Services provides Standard Template Library (STL) programming API, and utilizes the state-saving and persistence features.

Event Management Services (EMS) provide high- performance data structures to develop exceedingly complex, reliable, interactive intelligent applications more rapidly.

Synchronization Management Services, closely coupled with EMS, control synchronization and timing, which are essential for real-time intelligent applications interfacing with hardware [2].

Standard Application and Integration API (SAIA) expedites development of complex, robust intelligent applications by code generation macros and APIs. SAIS synchronizes components as the overall system executes, and scales to simultaneously execute large numbers of components (an interactive synchronization mechanism hides programming complexity).

Distributed Object Management Services and Data Translation Services provide location transparency and a powerful, yet easy to use, distributed object computing framework (e.g., the complexity in using different inter- processor communications).

The Metadata Infrastructure (MDI) provides:  ? A syntactic notation for relational associations  ? Logical constraints, consequences, and role-based behaviors entailed by the relationships  ? A system of primitive relational abstractions  ? Method to change abstractions into conceptual hierarchies  ? Means to compose and structure relationships into frameworks and architectures  CONDOR utilizes additional state of the art technologies in its architecture: Knowledge Execution Engine (KEE) and Knowledge Representation Integration Infrastructure (KRII) employ the lower layers for location transparency, and are based on conceptual graphs (CGs) [3].

CONDOR integrates hardware and software systems by extending CG technology in three dimensions.

1. Controls, executes, and integrates the entire system a. Embeds in hardware or software programs b. Links software and hardware components  2. Customizes concepts, relationships, and actors a. Accommodates new hardware, or software  components, without returning to original developers for new versions of graph systems  3. Controls execution of the KEE a. Each node maintains a truth value (belief  network theory) [4] to managed graph execution    CPU CPU  CPU CPU CPU  CPU  CPU  CPU  CPU CPU  CPU  CPU CPU CPU CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  User Application  Interface Services  Hardware Device  Interface Services  3D Visualization  Interface Services  WAN  Interface Services  Communication Speed  Slow  Medium  Fast  CPU CPU  CPU CPU CPU  CPU  CPU  CPU  CPU CPU  CPU  CPU CPU CPU CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  CPU CPU  User Application  Interface Services  Hardware Device  Interface Services  3D Visualization  Interface Services  WAN  Interface Services  Communication Speed  Slow  Medium  Fast   Figure 2. Sample CONDOR System Layout  Collectively, the extensions embodied in CONDOR signify precision in the art. All services adhere to the External Integration Framework, and easily integrate intelligent applications and WAN (Figure 2) [1].



III. INTELLIGENT SYSTEM DEVELOPMENT AND INTEGRATION The overhead costs of information flow between software  and hardware continue to increase. Systems integrators attempt to reduce the costs by repeating the information flow, hopeful to attain greater accuracy and to meet the timeframe of need. The attempts do not solve challenges indicative of increased complex systems, and have not been successful due to lack of the following:  ? Hardware compatibility  ? Communication protocols  ? Understanding transfer information  ? Well defined system interrelationships  ? Mapping for adequate neutral-format standards     ? Mutual acceptance of the communication purpose  ? Operational meaning in terminology  ? Advancement in the core development environment and infrastructure  CONDOR utilizes CGs [1] to integrate hardware and software systems. Visually, a CG mimics knowledge representation in common diagrams for discussions (using whiteboards, slides, or even table napkins). The diagrams, or drawings, are often text snippets (typically enclosed in squares or ovals) and lines (such as labels) connecting one snippet to another. Experts often use visual aids to quickly communicate complex details during brainstorming sessions (see Figure 3).

ConceptsConcepts ActorsActorsRelationshipsRelationships  CAT STAT LOCSIT MATCAT STAT LOCSIT MATMAT  A Cat sits on a matA Cat sits on a mat Une Chat assis sur une matte Une Chat assis sur une matte    Figure 3. Basic CG example  In CGs, text snippets (in a square) are called Concepts. The line connections are enhanced with ovals, called Relationships, containing additional text. Hence, representation of semantic relations, between various concepts, occurs in a manner consistent with common ?brainstorming pictures?. Actors (diamond shaped symbols) provide a method to encapsulate interfaces to hardware or software components, and indicate data or signal transforming activity is occurring.

Structurally, a CG provides the following advantages for representing and integrating complex systems:  ? Inherently hierarchical; permits operation at increased aggregated levels, when beneficial  ? Can decompose components to appropriate levels of detail, to meet requirements  ? Ability to conceptualize the entire system, or one specific concept  ? Capable of capturing any aspect of the system  Using CG?s, CONDOR simplifies hardware and software component integration; and simultaneously, concisely represents the entire system control logic.

Developers typically manage functional blocks with various data sending and receiving protocols. However, most developers lack standard approaches across the enterprises (usually one  method works as well as the next). Consequently, accurate prediction of time and cost is difficult. CONDOR provides an organized template for encapsulating functional blocks (hardware or software), which is easily mastered by integrator engineering staffs, thereby solving the prediction challenge.

CG Relationships have simple rules - one concept node must be connected by an incoming arc to a relationship; and one concept node must be connected by an outgoing arc.

Relationship nodes provide critical semantic structure to system descriptions, and frequently represent modifiers, qualifiers, and constraints.

Concept nodes may be connected to relationship nodes or actor nodes, but direct connections between concept nodes is not permitted. A concept node may have any number of incoming arcs or outgoing arcs, and represent a variety of system features.

Concepts may be components (or objects), or they may represent actions (or verbs). Relationships act as modifiers (adjectives and adverbs).

Actor nodes can have any number of incoming arcs from other nodes. However, they have only one outgoing arc. The outgoing arc may be connected to another actor node, or a concept node. Actor nodes provide the critical ability to encapsulate hardware or software components. Hence, actor nodes enable system integration.



IV. CONCEPTUAL GRAPHS AND THE KNOWLEDGE EXECUTION ENGINE  One of the purposes of the Knowledge Execution Engine (KEE) involves controlling the execution of a collection of hardware and software components, as a cohesive and robust system. Relationships have the simplest rules - one concept node must be connected by an incoming arc to a relationship; and one concept node must be connected by an outgoing arc.

Relationship nodes provide critical semantic structure to system descriptions. They frequently represent modifiers, qualifiers, and constraints.

Concept 1  Relationship 1  Relationship 1  Concept 2  Concepts or Other Actors  Actor 1  Actors or Relationships  Actors or Relationships  Concept 1  Concept  Concept or other Actors  Concept 1  Relationship 1  Actor 1  INVALID   Figure 4.  Conceptual Graph creation rules     The basic rules governing CG formation are shown in Figure 4.  Relationships have the simplest rules - one concept node must be connected by an incoming arc to a relationship; and one concept node must be connected by an outgoing arc.

Relationship nodes provide critical semantic structure to system descriptions.  They frequently represent modifiers, qualifiers, and constraints.

Concept nodes may be connected to relationship nodes or actor nodes, but direct connections between concept nodes is not permitted. A concept node may have any number of incoming arcs. Concept nodes may also have any number of outgoing arcs.

A valid CG for system integration must contain at least one input concept node and one output concept node. Concept nodes represent a variety of system features. Concepts may be components (or objects), or they may represent actions (or verbs). Relationships act as modifiers (adjectives and adverbs).

Concepts and relationships alone enable a wide range of expression through use of CGs.

Dividend: 9.0  Divisor: 4.0  Number: 144.0  Quotient: 2.0  Remainder: 1.0  SquareRoot: 12.0  Sum: 14.0  divide plus  sqrt Figure 5. Sample CG implementing a simple formula  Actor nodes can have any number of incoming arcs from other nodes. However, they have only one outgoing arc. The outgoing arc may be connected to another actor node, or a concept node. Actor nodes provide the critical ability to encapsulate hardware or software components. Hence, actor nodes enable system integration.

The ability to store and exchange data is central to user- defined actor, relationship, and concept nodes. Data storage and exchange is attained via transmittance of inputs to actors.

Transmission follows the direction of arrows in the CGs (shown in Figure 5).

The KEE employs a data structure, or collection of data structures, that represents a CG (as a software or hardware component). The CG representation minimally includes:  1. A collection of user-defined concept nodes 2. A collection of user-defined relationship nodes 3. A collection of user-defined actor nodes 4. A unique ID numbering scheme to identify every node,  regardless of type 5. A description of the connected nodes, and route of the  connection  6. A list of references to input concept nodes (those with no incoming arcs)  a. A valid CG must contain at least one input concept node  7. A list of references to the output concept nodes (those with no outgoing arcs)  a. A valid CG must contain at least one output concept node  8. A data structure that records the truth value of each node (those skilled in the art recognize this may be included in the node data structure)  The KEE reads standard CGIF files and parses it. The KEE includes the CG parser, as it accomplishes much more than standard CG parsers. The KEE?s CG parser must establish all connections between nodes (specified in the CG). The type information and unique ID tag permit the correct execution order of components.

The following sequence describes the typical use of the KEE:  1. The system is started 2. Each component in the system is initialized 3. Synchronization relationships are established 4. Inputs are read and loaded into system components 5. The CG associated with the system is initialized and  parsed 6. Each system component is associated with a CG  element using the unique ID tag (concept, relationship, actor)  7. Each component is registered in the correct collection mechanism for each type, using the unique ID tag  8. The system begins operating, with various evolution methods. For example:  9. A user inputs information, which changes the state of the system (either event-based, process-based, or simple update loop)  10. Regular update cycles occur for various system aspects 11. The system operation mechanism executes, and an  Execution Cycle operation for the CG is activated 12. Each time a system operation mechanism is activated,  step 4 is repeated To complete the KEE summary, the CG Execution Cycle  operation must be described. Recall that each node has a truth value ? a binary variable. When the system is initialized, the truth value for each node is set to false. Each node can be queried for current truth value. Truth values can be set to true, or reset to false.

When a node is executed, the appropriate software or hardware function is performed. Upon completion of the node?s software or hardware function, the truth value is queried. The truth value is manipulated during the execution of the software or hardware function. If the node is true, then an activation signal is appropriately sent to each node according to the current node?s outgoing arcs.

The first time through the CG execution, an Execution Cycle (EC) begins with execution of the input nodes. Input nodes typically read data values, or access databases, before execution is completed. Minimally, if a single input node executes and is true, the nodes connected by CG arcs are activated.

A case in which zero input nodes execute as true, the Execution Cycle is complete. The system control mechanism is notified that the CG Execution Cycle is complete. This is the simplest case, but the general concept is true in the opposite case. When there are no more nodes that can be activated, the Execution Cycle is complete; and the system control mechanism is notified. Hence, KEE has the ability to determine that no further nodes can be activated.

A CG can be viewed and analyzed in terms of graph theory, utilizing the rules of CG formation. The constraints on CG formation lead to directed graphs that allow the optimization of computation.

runs  Is a  generating  for  Responsible for  of Producing  A Machine  An Interpreter  Algorithm  An Interpretation  An Agent  A Graph A Behavior Figure 6. Sample conceptual graph showing a path  (outlined in red) contained within the graph  The execution of the graph is extremely efficient and straightforward. For customization purposes, several different techniques exist ? each maintains efficiency. The exact circumstances of system integration efforts may vary from one job to the next. Hence, different execution optimization methods may be employed; and each method is within scope of the KEE.

The subsequent description of the KEE?s preferred embodiments provides several optimization possibilities.

In general, a graph G consists of a set of nodes N, and a set of arcs A with a truth value associated with each graph element.

The truth values permit a single graph to encompass multiple execution paths/outcomes that are related (shown in Figure 6). If the arcs indicate a direction, as the graph in Figure 4 indicates, the graph is called a directed graph. As such, a CG is a directed graph. Furthermore, a CG has specific input and output nodes, called sources and sinks in general graph theory. Sources and  sinks are the starting point of outgoing arcs, and the terminal point of incoming arcs, respectively.

A path P is a set of nodes N and directed arcs A starting at an input node, terminating at an output node, and contains a sequence of internal nodes and arcs (Figure 5, highlighted in red). A finite number of paths exist in a given CG. Various techniques can be employed to compute the paths, and to store and utilize path information. Techniques used to store and access path information will vary from job to job, and are within the scope of the KEE.

A. First Order Predicate Calculus  The method in which the truth value is used to control graph execution allows the KEE to implement first order predicate calculus logic rules to control the system (a critical KEE point), as illustrated in Figure 7.

Dividend: 9  Divisor: 4  Number: 144  Quotient: 2  Remainder: 1  SquareRoot: 12  Sum: *s  divide plusplus  sqrt  IF ?r = 0IF ?r = 0  T  TT  T TT  TT  T  F   Figure 7. Use of truth values to control CG execution  Consequently, the KEE enables useful extensions of techniques, common to expert systems. Standard systems integration theory and techniques are incorporated in the design and control system. Clearly, KEE is a powerful tool in system control, and is advanced far beyond standard systems integration theory and techniques.

The KEE unites numerous disciplines in realization, and derives value from the union. The KEE provides a knowledge- based representation of the system to be integrated. Furthermore, the entire toolkit of advanced system theory is employed in a trouble-free, straightforward manner, which contrasts significantly from current complicated methods.

B. Adaptive and Dynamic Operation  Adaptive systems theory is an emerging science, central to automated, or ?smart?, systems. However, a major barrier, or problem, is associated with automated devices and systems.

Current systems are insufficient in providing complex and robust control mechanisms.

The KEE provides a solution to the barrier in advancement and proliferation of adaptive, automated systems. The KEE has the ability to dynamically change the structure system control logic and which components, including new ones, are currently being utilized. As such, KEE facilitates the implementation of adaptive systems.

The benefits obtained by using KEE are extended in several dimensions (for example, the ability to interactively and automatically control the system). System performance and     flexibility is achieved by utilizing several CGs at once to integrate and control a particularly complex system.

The ability to dynamically change the system control logic is central to the KEE?s enhanced flexibility. Typically, a system upgrade in which the control mechanism is altered requires the system to be restarted regularly (the equivalent of a ?reboot? to PC users). The KEE eliminates the need to restart.

KEE has the capability to: ? Execute multiple CGs ? Dynamically load a new CG simultaneous to system  execution ? Pause a CG execution ? Re-start a CG execution once it has been paused ? Stop a CG execution with no re-start Enabling a powerful set of tools to manage the complexity of  system integration solution analysis, design, and implementation will have a dramatic impact on the industries where system integration is a key function.



V. EXAMPLE: BUILDING AUTOMATION MANAGEMENT  To illustrate CONDOR?s concept of operation, consider the challenge in constructing a building automation management system. Managing the high tech buildings in an energy efficient manner, as well as satisfying the occupants, is a difficult and costly task without intelligent control systems. An intelligent building maximizes efficiency and energy resources, and minimizes costs. Effectual intelligence depends on the intelligent design. Minimally, the attributes an intelligent building should possess include:  ? Instant knowledge of occurrences inside and out  ? Assessment and resolution for the most convenient, comfortable, and productive environment  ? Immediate response to occupants' requests  The attributes indicate a need for various technology and management systems. Successful systems integration produces the intelligent building. Smart automation systems respond to external climate factors and conditions. Simultaneously, sensing, control, and monitoring of internal environment factors occur.

CONDOR provides:  ? Reduction of energy consumption and environmental pollution  ? Security for people, possessions, and environment  ? Increased processing efficiency and decreased time  ? Simple and clear processing features  ? Operations-oriented maintenance management of technical installations to reduce system downtime and decrease living costs  ? Historical and dynamic data processing, presentation, and analysis  To realize the above benefits, a powerful control and automation system, with varying levels of information processing (Figure 8), must be installed. In order to implement such a system, several sub-systems must be employed (shown in Figure 14).

A perfect integrated building automation system allows physical and functional access to all building systems.

Integration does not occur unless data communication among the various systems transpires in accordance with requirements.

For integration purposes, an analysis of information requirements is essential (i.e. safe access to the right information in the right way, at the right place).

Level 1 Information  management system  Level 2 Information processing And supervisory system  Level 3 Information processing/  Automation system  Level 4 Process field    Figure 8. Automation levels  Supervisory control systems are central to building energy management, and consist of hierarchically organized, functional control systems with separate intelligent automation units. The following aspects are required:  ? Each level must operate independently  ? Data interchange must be reduced to a minimum  ? Operational readiness of machinery must not be impaired by communication interchange breakdowns  A commanding supervisory system is based on distributed intelligence, in which outstations (controllers) are connected by a communication bus (network). The control system is configured into four hierarchical Information processing levels:  Information and Management Level ? Analyzes the systems operating status. Physical and technical data relating to the building, and emanating from the lower control and automation levels, are accessed in a condensed form and processed. Processing is achieved via miniature single board     computers (SBCs), employing web-browser interfaces that interface to all automation levels.

Supervisory Control Level ? Controls, monitors, and logs the processes within the entire building. Configures automation units, measurements, and control units at a level three and sets the parameters. Further functions include: data processing, data recording, and maintenance management of the technical installation?s energy management.

Automation Level ? Contains the distributed intelligence for mathematical and physical-based operation functions, as outstation multi-controllers. The distributed digital control (DDC) monitors and controls the critical statuses and processes within the building. The control system, which also provides programmable controller (pLC) functions, allows a logical link in the form of time or status elements. It optimizes performance and security of installations. The automation level consists of numerous DDC controller outstations. Each panel is fully programmable and autonomous in operation. The panels coordinate communication upwards to the central computer, horizontally to other outstations.

Field Level  ?  Contains the sensors and actuators which directly link to automation systems at level three. Most sensors and actuators are available solely as analogue units.

Communication with levels two and one is limited to level three.

Heating Air conditioning  Computers  Computer Accessories  Sanitary  Lighting  Waste- management  ElectricalAcoustics  Video/Security  Safety systems  Kitchen appliances  Entertainment Systems  Controls/ Remote Access  Ventilation  Home   Figure 9. Building sub-systems

VI. SUMMARY An approach has been presented for intelligent application  development and systems integration within the CONDOR architecture. The approach provides a low-cost, straightforward method for developing easy to use, yet complex consumer devices and systems. CONDOR employs advanced system  representation frameworks, flexible communications structures, intelligent application services (e.g. real-time control), complex synchronization relationships and constraints, data time tagging, checkpoint restart, dynamic system control, and persistence.

CONDOR also provides intelligent application developers and system integrators with a parallel and distributed computing capability that supports a wide variety of hardware hosting and integration.



VII. REFERENCES [1] Wallace, Jeffrey and Sara Kambouris, 2012. ?Automated Intelligent Instructional Monitoring Systems,? Proceeding of the 2012 Sciences, Las Vegas, NV, July 16-19.

[2] Wallace, Jeffrey, et. al, 2009. ?Ontology-based Software and Hardware System Integration and Intelligent Automation,? Proceedings of the World Multi-Conference on Systemics, Cybernetics and Informatics, International Institute of Informatics and Systemics, Orlando, FL, July 10-13.

[3] Peirce, C.S.: Collected Papers of Charles S. Peirce, Hartshorne, Weiss, and Burks (eds.), Harvard University Press, Cambridge, MA, 1932.

[4] Sowa, J.F., Knowledge Representation: Logical, Philosophical, and Computational Foundations. 2000, Paci?c Grove, CA: Brooks/Cole, pp.

xiv+594.

[5] Microsoft .NET Framework, http://msdn.microsoft.com/en- us/vstudio/aa496123  , Microsoft, Inc., 2014.

[6] Parallel Virtual Machine, http://www.csm.ornl.gov/pvm/pvm_building.html , Oak Ridge National Laboratory, 2005 [7] The ADAPTIVE Communication Environment, http://www.cs.wustl.edu/~schmidt/ACE.html , Washington University, 2011.

[8] POSIX Threads Programming, http://www.llnl.gov/computing/tutorials/pthreads/ , Lawrence Livermore National Laboratory, June 30, 2013.

[9] Real Time CORBA with TAO, http://www.cs.wustl.edu/~schmidt/TAO.html , Washington University, 2013.

[10] IBM Component Connector Overview,http://www.redbooks.ibm.com/abstracts/SG242022.html?Op en, IBM, Inc. June 19, 1998.

[11] ORBit2, http://www.gnome.org/projects/ORBit2/, GNOME Foundation, June 29, 2004.

[12] SAP Solutions, http://www.sap.com/solution.html, SAP AG, 2014.

[13] Oracle Enterprise Resource Planning, http://www.oracle.com/us/products/applications/enterprise-resource- planning/overview/index.html, Oracle, Inc. January 2014.

[14] Oracle Service-Oriented Architecture, http://www.oracle.com/us/products/middleware/soa/overview/index.ht ml, January 2014.

[15] About W3C: Technology, http://www.w3.org/Consortium/technology, W3C Consortium, June 2012.

