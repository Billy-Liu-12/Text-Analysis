Mining Association Rules in Temporal Databases *

Abstract Association rules are used to express ?interesting? re-  lationships between items of data in a standard enterprise database. In a temporal database, each tuple is given a start and an end time indicating the period during which the in- formation recorded in the tuple is valid. With a tempo- ral database, we may wish to discover relationships between items which satisfy certain timing constraints.

Existing algorithms for mining association rules cannot be applied to temporal databases directly. This is because, in the existing algorithms, if an itemset is supported by a tuple, the tuple must contain all the items in the itemset. For temporal databases, an itemset, e.g. { A , B } ,  is supported as long as all the items in { A , B }  are contained in a set of tuples which sat- isfy certain timing constraint (e.g. the duration of the tuples containing A and B overlap each other). In this paper, an al- gorithm for mining association rules in temporal databases is described. The algorithm allows (a) the itemsets to contain composite items, and (b) the timing constraint on the tuples to be specified by the users.

1 Introduction The problem of mining association rules was introduced  in [ I ] .  Association rules can be used to express relationships between items of data. An association rule is an expression X + Y ,  where X and Yare sets of items. X and Yare termed itemsets. For a set of tuples, where each tuple contains one or more items, the meaning of an association rule is that the tuples which contain the items in X tend to also contain the items in Y.

For an itemset, say X, the siipporf of X ,  denoted as s ( X ) , is the number of tuples that contain all items in X .  Given a i i i i i i i i iz i i i iz  siipporr 6, an itemset X is large or is referred to as a l a r p  iteritset if s ( X )  2 6. The corzfderzce of an association  . s ( X U Y )  . rule X =+ Y is .o, i.e. the percentage of the tuples which contain X that also contain Y. Rules are useful if their confi- dence is above a nzirairiturn corzfiderzce value specified by the users.

An example of such a rule might be that 90% of customers who buy video players also buy video tapes. Here, buying  *This work is supported by Auckland University under grant A I8/XXXXX/62090/F3414079, and by ESPRIT HPCN Project No 112693.

0-7803-4778-1 /98 $10.00 0 1998 IEEE 2803  John A. Keane Department of Computation  UMIST Manchester, UK  video players is the item in X ;  and, buying video tapes is the item in Y; 90% is the confidence of the rule. The problem of mining association rules is to find all rules X + Y such that X U  Y is a large itemset and the confidence of X + Y is above the minimum confidence.

Many algorithms have been developed for mining associ- ation rules [l,  2, 3, 4, 5 ,  61. In these algorithms, if a tuple supports an itemset, the tuple must contain all the items in the itemset. As explained in [8], this requirement makes it diffi- cult to discover certain useful rules in some applications.

In [8], the concept of composite items is introduced. A composite item consists of several items. A tuple contains a composite item if the tuple contains at least one of the items in the composite item. As a result, the algorithm in [8] has the potential to discover rules which cannot be discovered by other algorithms. However, the algorithm in [8] cannot be applied to temporal databases.

In a temporal database, each tuple is given a start and an end time indicating the period during which the tuple is valid [7]. Sometimes we might want to discover the relationships between some items or composite items recorded in the tu- ples which satisfy certain timing constraints. For example, in a patient database, each tuple contains a patient identifier, the disease contracted by the patient and the duration of the dis- ease (i.e. the start and the end time of the disease). Assume that we want to find out whether some diseases are likely to cause some other diseases, i.e. is there correlation? Assume that the patient database records that a patient suffers from dis- ease A and B ( A  and B are recorded in different tuples). If the duration of A and B overlap or intersect with each other, then A and B correlate. As each tuple only records one kind of dis- ease contracted by a patient, the existing algorithms cannot be used. This is because, in the existing algorithms, if an itemset is supported by a tuple, the tuple must contain all the items in the itemset.

In this paper, an algorithm for mining association rules in temporal databases is described. The algorithm allows (a) the itemsets to contain composite items, and (b) the timing con- straint on the tuples to be specified by the users.

Mining association rules can be decomposed into two steps:  1. all the tuples in the database are checked to find all large itemsets;    2. association rules are generated from these large itemsets.

The first step is expensive, as the database needs to be scanned. The second step is relatively easier [ 5 ] .  This paper concentrates on the first step: finding large itemsets.

The organisation of the paper is as follows: in $2, the terminology used is defined; the algorithms for finding large composite items and large itemsets in temporal databases are discussed in 53; conclusions are given in 94.

2 Terminology In a temporal database, each tuple has two attributes, start  and end, which indicate the time period during which the in- formation recorded in the tuple is valid. A tuple might also have many other attributes. It is assumed that, as well as start and end, each record has an attribute, person ID, and an attribute,,feature. The person ID attribute acts as a key to distinguish the entities on whose behalf the tuples are stored in  a database. The value stored in attribute featiire will be used when finding the relationship between the items. That is, the values of,feature are the items used for finding interesting rules.

Let I = { U ] ,  ..., a,} be the set of literals called atomic items. Each atomic item is a value stored in a tuple?s fea- tiire attribute. A composite item is formed by combining sev- eral atomic items. The general form of a composite item is cil V ... Vci,, where a, E I for 1 5 j 5 n and a, # a,j for i # j .

A tuple contains a composite item if the tuple contains one of the atomic items which form the composite item. Atomic items and composite items will be referred to as items in gen- eral. An item is large if the number of tuples containing the item exceeds the minimum support.

For a composite item consisting of i atomic items, e.g. a ]  V C L ~ V  ... Vu;, the (i-1)-subitemofal V a 2 V  ... Vn; is acomposite item formed by selecting 1-1 atomic items from {a? ,a2, ..., a;}.

For example, A V  BVC has three distinct 2-subitems. They are A V B,A V C and B V C.

An itemset is a set of items such that none of the items in the set have common items. For example, {A,B VC} is a valid itemset. However, {A,AVB,CVD,CVDVE} is not a valid itemset as:  (a) A and A V B have common item A, and (b) CVDandCVDVE havecommonitemCVD.

person ID 1 feature I start I end RI 1 1 I 5  A timing constraint specifies a condition in terms of the duration of the tuples in the database. According to the tim- ing constraint, the tuples in a databases are used to form sev- eral groups where the tuples in each group have the same per- s o n  ID. For example, for the tuples in Figure 1 (each tuple is  given a label for easy reference), a timing constraint ?the tu- ples whose duration intersect with each other? generates two groups, {RI,R2} and {R3,R4}. RI and R2, R3 and R4 are in the same group, because (a) they have the same person ID, and (b) their duration intersect with each other. RI and R3 are not in the same group, as they have different person ID. For the same reason, RI and R4, R2 and R3, R2 and R4 cannot be in the same group.

In a temporal database, let gl,g2, ...,gn be the groups of tuples which are formed by applying the timing constraint to the tuples in the database such that all the tuples in gi (where 1 5 i 5 n) have the same person ID. items(g;) (where 1 5 i 5 n)  denotes the set which records the value of the feu- lure attribute of each tuple in g;? . An itemset S is supported by g; if (a) all the atomic items in S are in items(g), and, (b) for each composite item in S, items(gi) contains at least one of the atomic items which form the composite item2. The reason for requiring all the tuples in a group have the same person ID is because a support to an itemset must come from one en- tity. For example, in Figure 1, assume that feature corresponds to disease name. If we want to determine whether disease C causes disease B (i.e. whether {B,C} is a large itemset), it is obvious that R2 and R3 cannot be grouped together to support {B,C}.  This is because B and C are associated with different people.

An association rule is an implication of the form X + Y whereX, Y and XUY are itemsets, X # 0, Y # 0 and X f ly  = 0.

An itemset consisting of i items is called an i-itemset. The (i-1)-subset of an i-itemset is an (i-1)-itemset which is formed by selecting i-1 items from the i-itemset. An i-itemset has i distinct (i-I)-subsets. For example, a 3-itemset {A,B, C} has three 2-subsets, i.e. {A,B},{A,C} and {B,C} .

3 Algorithms for Finding Large Itemsets Finding large itemsets can be carried out in two steps:  0 Step 1. Find all the large items and the large composite items.

0 Step 2. Find all the large itemsets, i.e. the itemsets whose supports are greater than the minimum support.

At this step, each large composite item is treated as an independent item like the atomic items.

It is assumed users are only interested in the composite items generated from a set of atomic items. This set of atomic items will be provided by the users.

For example, assume that:  (a) there are five atomic items A, B, C, D and E,  and (b) the users are only interested in the composite items gen-  erated from items A, B and C.

?For the example in Figure 1,  irems({RI,R2}) = {A,B} ,  and itenzs({R3,R4}) = {C,D} .

?For the example in Figure 1, { A , B }  is supported by group {Rl ,R2} .  {A,B,C} is neither supported by {RI ,R2}  norby {R3,R4}.

From A, B and C ,  four composite items, AV B,A UC.BV C and A V B V C ,  can be formed. At step I ,  the database is scanned to find the large items. Assume that:  (a) the large composite items areAVB,AVCandAVBVC, and  (b) the large atomic items are A, D and E  At step 2. ( i )  itemsets are formed using the large items, i.e. A,L) ,E,AVB,AVC and A V B V C ;  (ii) the tuples i n  the database are used to form groups according to the timing con- straint: and, ( i i i )  the database is scanned to find out which of these itemsets are large. The reason that only the large atomic items and the large composite items are used in constructing itemsets is because all the items in a large itemset must be large [31.

3.1 Example A patient database is shown in Figure 2(a). Each tuple  contains a patient identifier, the disease contracted by the pa- tient and the duration of the disease (i.e. the time that the diseases starts and the time when the disease is cured). For easy reference, each tuple is given a label. In the tuples, pu- iicrir ID corresponds to persort ID and diseuse corresponds to &itwe attribute as described earlier. Assume that the database is mined to discover if some diseases are likely to cause some other diseases. It is assumed that:  (a) the minimum support is 3.

(b) [lie users are interested in the composite items generated from set {A,B,C).

From {A,B,C},fourcompositeitems,i.e. AVBVC,AV /],A V C and 13 V C are formed.

(c) the timing constraint is ?the tiiples whose clmr-atiorz over- lop n,itli ench other?.

First, the large composite items and the large atomic items are found according to the definitions in $2. The large items found arc shown in Figure 2(b) and (c). Then, the large atomic items i n  Figure 2(c) and the large composite items in Figure 2(h) arc iised to construct itemsets. According to the defi- nition in  $2, X # 0 and Y # 0 in rule X 3 Y holds. Thus, only thc large itemsets which contain more than one item can he used to generate rules. As the items in an itemset cannot have common items. from Figure 2(b) and Figure 2(c), it can hc seen that the only itemset that needs to be considered is { B , A  VC}. According to the timing constraint, three groups are formed: {RI,R2}, {R3,R4)  and {RS ,Rb} .  All the groups support itcniset {B,A V C}. Thus, {B,A V C} will be used to generate rules.

(ul Database patient ID I disease I start I end  RI 1 1 1 3  (0)  Large Composite Items  A V B V C  A V C B V C  4  (c) Large Atomic Items I AtomicItem I SLID DO^^ 1  (d )  Laree Itemsets . .  - Itemsets I Support  { B , A V C }  1 3 Figure 2  3.2 Finding Large Items To find large atomic items is easy, a counter is set up for  each atomic item. Then, the database is scanned to check whether the atomic items are contained in the tuples, and the counters of the atomic items will be increased accordingly.

When scanning is completed, the atomic items whose counters are greater than the minimum support are recorded as large items,  Finding large composite items is more complicated. This is because the number of composite items generated from a set of atomic items might be very large. Therefore, it is not practical to generate all composite items and find the large composite items in a single database scan. Instead, large com- posite items are found in several database scans. During each scan only a small set of composite items are checked.

The large composite items are found in several steps. At each step, first a candidate set is formed. The set contains the composite items which might be large. The database is then scanned to find out which items in the candidate set are large.

Assume the large items found at the current step all consist of 1 atomic items. The (i-])-subitems of the large items are used to form the candidate set of the next step.

When generating the candidate set, the following principle is used. If a tuple, say t ,  does not contain a composite item, say ul Vu:! V. . .  Vu,,, then, according to thedefinition in 52, t does not contain any of al ,u2, ..., a,,. As a result, t does not contain any composite items which are generated from the items in { a ,  ,q, ..., un} .  This means that, if al V a2 V ... V a, is not a large item, then none of the composite items generated from     ( ( 1 1  ,m, ..., n,,} are large. Thus, the composite items generated from ( ( 1 1  ,CQ, ...,CL,,} will not be included in the candidate set.

Initially the candidate set contains a single composite item which includes all the atomic items used to construct the com- posite items. For example, assume { C I I  , c Q , L I ~ , ~ ~ }  is the set of atomic items used to generate composite items. The item in the candidate set of the first step is a1 V 0 2  V a3 V a4. As dis- cussed earlier, if (11 Vu:, V a3 V a 4  is not large, then none of the composite items generated from { a !  ,m,a3,n4} are large.

Thus, we can stop looking for large composite items after the first step. Ifal Vu2 V n ?  Vn4 is large, it is used to generate the items in step 2?s candidate set. Each item in step 2?s candidate set is a 3-subitem of nl V c12 V u j  V 4. Thus, step 2?s candi- date set is { N I  V 02 V a j  , CI V n 2  V 4, al V a 3  V 4, a:! V ai V Q}.

The database is scanned to find the large items from the set.

Assume that the large items are a] V ci2 V a 3  and ci1 V a2 V (14.

The 2-subitems of these two items form the candidate set of step 3. Thus, step 3?s candidate set is {q Vn2,al Va3,ai V 04, U? V (13 ,  n2 V 04) .  As nl V CL? V a4 and c12 V 03 V u4 are not large, from the earlier discussion, C I I  Va3,nl Vc14,~12 V A ~  and CQ V 04 are not large. Hence, step 3?s candidate set is reduced to { a !  V n 2 ) .  I t  can be seen that, by observing the large items obtained at a step (e.g. step 2), i t  is possible to reduce the number of items in the candidate set of the next step (e.g. step 3) .

The algorithm below is used to find all large composite items. Assume that A = { c q , q ,  ..., ak} is the set of atomic items used to generate the composite items. CC; represents the candidate set of a step. LC; denotes the set of large com- posite items found at a step.

I .  cc, = {?I V a2 v ... v ? k } 2. for ( i  = k;CCi # 0 && i > 1 ; i  - -) do 3 .

4.

5.

6.

7.

8.

9.

IO.

I I .

12.

13.

14.

IS.

16.

17.

for each tuple t In the database do for each candidate c E CC, do  end-for-each if co/7tni/i(t, e )  then c.comf++ fi  end-for-each  if 1 > 2 then LC, = { e  E cc, I c COLI/Zt 2 / 1ZZ/Z1 /?ZLII?1  support)  cc,_, = 0 for each ci E LC, do  CC,-l = CC,-l U { J U  I sa I S  ciiz (i-l)-s~ibitem of c l }  end-for-each for each c E CC,- 1 do if -complete( e, LC, ) then  fi 0 2 - 1  = CC,-] - { e }  end-for-each fi  18. end-for 19. LCI = U, LC,  let S = { U ]  V ... Vu,  V a  I U E A - {a!, ..., a,}} if S E LC then return 1 else return 0 fi  The candidate set of the first step is given at line 1. The database is scanned in lines 3-7. corztairz(t, c) is a predicate which determines whether tuple t contains the composite item e. LC; contains all the large items found at the current step. A composite item is included in LCj if the support of the item is greater than the minimum support (line 8).

The candidate set of the next step, CC;- 1, includes all the (i-1)-subitems of the large items in LC, (lines 11-13). The items in candidate set CCi-1 will be checked against the items in LC; to eliminate the items which are not large (lines 14-16).

The elimination is carried out according to complete (line 15).

The composite items in LCi have one more atomic item than the composite items in CCj-1. In complete, a composite item, say c, in CCj-1 is extended to include one atomic item which is not in e. The extended items have the same number of atomic items as the items in LCj. If all extended items are large (i.e. they are in LC;), then cremains in CCj- 1,  otherwise, c is not large. As a result, c is removed from CCi-1 (line 15).

This is because, as described earlier, if the extended item, say c V a, is not large, then none of c V a?s (i-I)-subsets are large, i.e. c is not large.

When the candidate set becomes empty or a11 the compos- ite items have been checked (i.e. all the items containing more than one atomic item have been checked) (line 2), all the large composite items have been found. The result is stored in set LCI which is the union of all the set of the large items found at each step (line 19).

For example, in the patient database shown in Figure l(a), assume that:  (a) the minimum support is 4, and  (b) the set used to generate the composite items is {A ,B,C} .

The candidate set of step 1 is CC3 = { A  V B V C }  (line I ) .

It can be seen that the support of A V B V C is 6. Thus, LC3 = { A  V B V C } .

The 2-subitems of A V B V C are used to form CC2 (line 12).

Hence, CC2= { A V B , A V C , B V C }  In complete, A V B is extended with C to form a new item A V B V C .  As A V  B V C  is in LC3, A V B V C  remains in CC2.

For the same reason, A V C and B V C also remain in CC2.

At step 2, LC2 is { A  V B ,  B V C } .  As all the composite items have been checked, the algorithm terminates. Thus, LCI = LC3 U LC2  3.3 Finding Large Itemsets = { A V  B V C , A  V B , B V C } .

Once all the large items are found, a procedure based on the algorithm in [8] is used to find large itemsets. In the algo- rithm here each large composite item is treated as an indepen- dent item like the large atomic items.

The algorithm finds the large itemsets in several steps. At each step, it candidate set is formed first. The set contains the itemsets which might be large. The candidate set is generated according to the large itemsets found at the pervious step. Af- ter the candidate set is formed, the database is scanned to find the large itemsets.

I n  the following. A is the set of all the atomic items; Lk is the sct of large itemsets obtained at step k of the algorithm; Ck is the set of candidate large itemsets; and Ck is generated in procedure cnrirlicl(ite_gerz.

20. L I  = { { O }  1 U t A and a is a large atomic item}  U {{.a} 1 CCI E LCI} 21. for (k=2;Lk-1 # 0 ; k + + )  do 22. Ck =cLirzclidcite_ger(Lk_l ) 23.

24. CC,< = 0 25.

26. if iric/iic/e(items(g), e)  then 21.

28. fi 29. endLtor-each 30. for each itemset c t CC, do  ('.COLl/?t+ + end-for-each  for each group g formed according to the timing constraint do  for each itemset c E Ck do  cc,q = cc, U {c}  3 1. end-for-each 32. Lk = { C  E Ck 1  c.co~irzt 2 rnirzirnurn s u p p - t } 33. end-for 34. answer= Uk Lk  Initially the large itemsets are formed using the large items (line 20). The database is scanned in lines 23-31. Each group formed according to the timing constraint is checked to see whether i t  supports the candidates in ck. irzclude(iterfzs(g), c) is a predicate which checks whether group g supports c. The predicate is true if and only if (a) all the atomic items in c are i n  items(g), and (b), for each of the composite item in c, iterris(g) contains at least one of the atomic items which form the composite item. Set CC, contains all the itemsets being supported by group g (lines 25-29). After all the groups have bccn chccked, the itemsets whose support exceed the mini- mum support become the large itemsets (line 32). These large itemsets are used to generate the candidate large itemset for the next step (line 22). At the end, the large itemsets found at different stases are joined together (line 34).

Procedure candidate-gerz calculates the large itemset can- didates according to the large itemsets obtained at the previous step. Each candidate in set Ck is a k-itemset. If a k-itemset, say S, is large, then each of the (k-])-subset of S should also be large [31. If one of the (k-I)-subset of an k-itemset is not large, than the k-itemset is not large [3]. In candidate-gerz, the large (k-])-itemsets obtained at the previous step are checked to see whether they are the (k-I)-subsets of some k-itemsets. A k-itemset becomes a candidate if all its (k-I)-subsets are large.

In candidate-gen, firstly several sets of itemsets are formed (line 35). Each set will be checked to see whether it con- tains all the (k-])-subsets of a k-itemset. The second con- junct in the condition on line 35 means all the itemsets in {SI ,...,s,} are the (k-I)-subsets of a k-itemset. This is be- cause each pair of the (k-])-subsets of a k-itemset are differ- ent in two items. In addition, according to the definition in 42, each atomic item should appear in an itemset only once (e.g. { A  V B , A  V C }  is not a valid itemset, asA appears twice).

Thus, two different items should not have common atomic items. Condition "- 3e E S.{sl, ..., s l }  C e" in line 35 means the subset of any element in S should not be in S (e.g. if { { A , B } , { A , C } , { B , C } }  is in S, then { { A , B } , { A , C } }  should not be in S).

Each k-itemset has k distinct (k-])-subsets. Hence, in S only the sets which contain exactly k itemsets need to be con- sidered. These sets are used to form S' (line 36). If a set in S', say ss, with k elements (itemsets) has k distinct items (i.e.

I B (= k in line 36), then ss must contain all the (k-])-subsets of a k-itemset. As the itemsets in ss are from Lk-1, all the itemsets in ss are large. As a result, the k-itemset becomes a candidate (line 37).

Here is an example showing how candidate-gen works.

Assume that  From line 35, L2 = {{A$} ,  { A , B V C } ,  { A , D ) ,  { B V C , D l ) .

S = { { { A ,  B ) ,  { A ,  D>>> { { A ,  B v C}, { A ,  01, { B  v Cl W } } .

{{All?} ,  { A , B  V C } }  is not in S, as B and BVC have B in  { { A , D } , { B V C , D } }  is not i n s ,  as { { A , D } , common.

{ B  V C , D } }  c { { A , B  V C } ,  { A , D } ,  { B  V C , D } }  holds.

Each candidate in C3 is a 3-itemset, i.e. each candidate has three items. { { A , B } , { A , D } }  only has two elements. Thus, { { A , B } , { A , D } }  cannot contain all the 2-subsets of any 3- itemset.

As a result, { { A , B } ,  { A , D } }  will not be considered further.

As only { { A , B V C } , { A , D } , { B V C , D } }  has three elements     and contains three distinct items (i.e. A,BVC and D), accord- ing 10 line 36.

Hence. from line 37, the candidate in  Ci is { A , B V C , D } .

4 Conclusions This paper describes an algorithm for mining association  rules in temporal databases. The algorithm allows the user to specify the timing constraint which describes the relationships amongst the tuples in terms of time. According to the timing constraint, the tuples in a database are used to form several groups. Then, each of the groups is checked to see whether they support the itemsets which might be large. The algorithm in  this paper allows large itemsets to contain composite items.

Thus, as i n  [8], the algorithm has the potential to discover more useful rules than the other algorithms.

