Frequent Pattern Discovery from a Single Graph with Quantitative Itemsets

Abstract?In this paper, we focus on a single graph whose vertices contain a set of quantitative attributes. Several net- works can be naturally represented in this complex graph. An example is a social network whose vertex corresponds to a person with some quantitative items such as age, salary and so on. Although it can be expected that this kind of data will increase rapidly, most of current graph mining algorithms do not handle these complex graphs directly. Motivated by the above background, by effectively combining techniques of graph mining and quantitative itemset mining, we developed an algorithm named FAG-gSpan for finding frequent patterns from a graph with quantitative itemsets.

Keywords-graph mining; quantitative itemsets;

I. INTRODUCTION  Recently, as a general data structure, graphs have become increasingly important in modeling sophisticated structure.

In usual cases, a vertex in a graph contain only a label.

However, the label is not always sufficient to represent more richer information. So, it is natural to consider a graph having complex vertices. In this paper, we focus on a single graph whose vertices have a set of quantitative attributes. A typical example of such graphs is a social network (Figure 1 (a)). A social network can be naturally represented in a single graph whose edges correspond to some human relationship and whose vertices correspond to the person with some attributes such as age, salary and so on. Other example is a communication network. In the network, each vertex represents a communication device and each edge represents an actual communication between two devices.

The role of a communication device (vertex) in a network can be guessed by measuring its properties such as centrality [1], because such measure represents importance of a vertex in a network in a certain aspect. Several properties of vertices have been proposed [1]. So, by assigning several properties to a vertex at a time, a graph whose vertices have a set of quantitative attributes can be constructed easily.

In addition, if a dynamic graph, i.e. a sequence of graphs (Figure 1 (b)), is considered, a graph whose vertex has a series of importance can be constructed by assigning a set of properties of vertices in each graph to a vertex in the last one. Compared with data mining from a simple labeled graph, we can expect to find more valuable knowledge and patterns by using these complex graphs. Several methods for  Figure 1. Examples of network data  mining frequently occurring subgraphs have been already proposed to extract useful knowledge in a single graph [4], [6], [9], [13]. However, because these methods are designed for handling labeled graphs, no method can deal with a graph having quantitative itemsets directly.

Motivated by the above background, in this paper, we pro- pose a novel algorithm FAG-gSpan to discover characteristic subgraphs in a graph whose vertices have various quanti- tative items. FAG-gSpan discovers a set of characteristic subgraphs by effectively combining following techniques: (1) gSpan [14] for the enumeration of frequent subgraph patterns, (2) QFIMiner [11] for discovering a set of frequent quantitative itemsets in vertices of graph patterns, and (3) a canonical representation of graphs with quantitative itemsets to avoid the duplicated enumerations.

The rest of this paper is organized as follows. In Section II, some basic notations will be introduced. In Section III, an algorithm FAG-gSpan is proposed and explained in detail.

Preliminary experimental results are reported in Section

IV. After describing related work in Section V, finally we conclude this paper in Section VI.



II. PRELIMINARIES  In this section, according to the previous studies [4], [11], [14], we give some formal definitions which are related to a graph data and graph patterns whose vertices have a quantitative itemset (a set of numerical attributes).

A. A Labeled Graph with Quantitative Itemsets  A quantitative item has a form ?p : [f, t]? where p is an attribute name and [f, t] is its interval. Then, a set of m   DOI 10.1109/ICDMW.2009.11    DOI 10.1109/ICDMW.2009.11     quantitative items {?p1 : [f1, t1]?, . . . , ?pm : [fm, tm]?} is defined as a quantitative itemset of m-attributes [11].

A labeled graph G = (VG, EG, lG) on a set of labels L consists of a set of vertices VG, a set of edges EG ? VG?VG and a labeling function lG : VG ? EG ? L that maps each element of a graph to an alphabet in L. A labeled graph with quantitative itemsets G = (VG, EG, lG, aG) on a set of labels L and a set of quantitative items A is an extended labeled graph of s(G) = (VG, EG, lG) in which a quantitative itemset is assigned to each vertex by a function aG : VG ? pow(A). Here, s(G) denotes a labeled graph obtained by removing all quantitative itemsets in the vertices. The term pow(A) represents the power set of A.

B. Frequent Graph Patterns with Quantitative Itemsets  Given two quantitative items x = ?px : [fx, tx]? and y = ?py : [fy, ty]?, we say that x is supported by y and denote it x ? y if px = py?fx ? fy?ty ? tx. That is to say, x ? y holds if both items have the same attributes and the range of item y is within the range of item x. In addition, for two quantitative itemsets X and Y , we say X is supported by Y , denoted as X ? Y , if ?x ? X[?y ? Y x ? y] holds. Given two graphs with quantitative itemsets P1 = (VP1 , EP1 , lP1 , aP1) and P2 = (VP2 , EP2 , lP2 , aP2), P1 is defined as a subgraph of P2, denoted as P1 ? P2, if there exists an injective function f : VP1 ? VP2 which satisfies the following conditions: (1)?v ? VP1 [ lP1(v) = lP2(f(v)) ], (2)?v ? VP1 [ aP1(v) ? aP2(f(v)) ],and (3)?(u, v) ? EP1 [lP1(u, v) = lP2(f(u), f(v)) ]. Note that two graphs P1 and P2 are isomorphic if and only if both P1 ? P2 and P2 ? P1 hold. Given two graphs with quantitative itemsets P and G, if P is a subgraph of G, then P is regarded as a pattern with respect to G. We assume some total order ( < ) of vertices in a pattern P . Given P , G and an function f satisfying the conditions (1)-(3) above, a list of vertices in G corresponding to ones in P o = [v1, v2, ? ? ? , v|VP |](vi ? VG, vi = f(ui), ui ? VP , ui < ui+1) is defined as an occurrence of P in G. The i-th element in o is denoted as o(i). All the occurrences of P in G is denoted as ?PG.

The support value of a pattern P in G is defined as follows:  supG(P ) = min 1?i?|VP |  ??{o(i)|o ? ?PG} ?? /|VG|.

In other words, the support value of P is the minimum number of unique vertices o(i) in o ? ?PG among every vertex ui in P . This definition is a simple extension of that for a single labeled graph [4]. It satisfies the anti-monotone property with respect to the specialization (P ? Q ? supG(P ) ? supG(Q) ).

In this paper, given a data graph G and a minimum support threshold ?, we consider the problem of finding frequent graph patterns with quantitative itemsets (FAG in short) in G.



III. MINING FREQUENT GRAPH PATTERNS WITH QUANTITATIVE ITEMSETS  In this section, we introduce (1) the enumeration strategy for labeled graph patterns, (2) the definition of dense clusters in quantitative itemsets, and (3) a canonical form of a graph pattern with quantitative itemsets. After that, we propose an algorithm named FAG-gSpan for mining FAG. While the details will be described later, FAG-gSpan first constructs the labeled graph patterns and the graph patterns with quantitative itemsets will be obtained by assigning a dense cluster to each vertex.

A. Enumeration of Labeled Graph Patterns  We take advantage of frequent subgraph mining algo- rithm gSpan [14] which uses the rightmost extension and the canonical form of graph patterns. Although gSpan is designed for the pattern mining from a set of graphs, it can be easily applied to the case of a single graph by some slight modifications on the support computation. In gSpan, all possible subgraph patterns will be enumerated by repeatedly applying the rightmost extension [14] to the patterns of one vertex. On the other hand, the concept of canonical form of a subgraph is employed. The duplicated enumeration of isomorphic graphs can be avoided by terminating the extension of the non-canonical patterns.

B. Dense Clusters  An algorithm QFIMiner [11] has been developed for mining frequent quantitative itemsets. Suppose a dataset D of transactions of quantitative itemsets. For a transaction T ? D and a quantitative attribute p, a set of neighborhoods of T with respect to p is defined as a set  N?p(T ) = {T ? ? D|Distp(T, T ?) ? ?p} where Distp(T, T ?) is the distance between T and T ? on p and ?p denotes a threshold given by the user. Given another threshold MinPts, if |N?p(T )| ? MinPts holds, T is called a core transaction on p. If each transaction T in D is connected to a core transaction on p, we say that D is a density-connected set on p, and denote it as dense(D, p). As similar, a set of transactions CS ? D is called a density-connected set on a set of attributes S, denoted as dense(CS , S), if CS is dense on each attribute in S. Formally, dense(CS , S) holds if ?p ? S [dense(CS , p)] holds. A density-connected set dense(CS , S) is called a dense cluster if there exists no attribute set S? such that S ? S? and dense(CS , S?) holds. A dense cluster CS corresponds to the following quantitative itemset.

?? ??pi : [fi, ti]?  ?????? pi ? S, fi = min{f | ?pi : [f, t]? ? T ? CS}, ti = max{t | ?pi : [f, t]? ? T ? CS}  ?? ?     Figure 2. An example of the search space in discovering graph patterns with quantitative itemsets  C. A Canonical Form of a Graph Pattern with Quantitative Itemsets  As similar to the case of labeled graphs, there exists some isomorphic graphs of a given graph pattern with quantitative itemsets. Because these graphs represent the same meaning, it is sufficient to consider only the representatives, i.e. the graphs of having the canonical forms. The canonical form among the isomorphic graphs will be determined based on the total order derived by the quantitative itemsets in the vertices.

First, the order between two quantitative items x = ?px : [fx, tx]? and y = ?py : [fy, ty]? is defined as follows:  1) A quantitative item having the earlier ?attribute name? in the lexicographic order is smaller than the other.

2) If the attribute names of these items are identical (px = py), a quantitative item having the smaller ?starting range?(fx and fy) is smaller than the other.

3) If both of the attribute names and the starting ranges are the same, a quantitative item having the smaller ?ending range?(tx and ty) is smaller than the other.

4) If none of the above conditions is satisfied, then both items are the same.

Next, given two quantitative itemsets X = {x1, ? ? ? , x|X|} and Y = {y1, ? ? ? , y|Y |}, we introduce the order relation as follows.

1) If |X| < |Y |, then X is smaller than Y .

2) If there exists a number j satisfying the condition such  that ?i(1 ? i ? j ? 1)[xi = yi] and xj < yj , i.e. the items between 1 and j ? 1 are the same between X and Y , and the jth quantitative item of X is smaller than that of Y , then X is smaller than Y .

3) If ?i(1 ? i ? |X| = |Y |)[xi = yi] holds, i.e. ith quantitative item of X is the same as that of Y for all i, then both itemsets are the same.

4) If none of the above conditions is satisfied, then Y is smaller than X .

For two isomorphic graphs with quantitative itemsets P1 and P2, A1 = [a11, ? ? ? , a|VP1 |1 ] and A2 = [a12, ? ? ? , a|VP2 |2 ] are the lists of items in vertices in P1 and P2, respectively. We  assume that each element in the list is arranged in the visiting order of vertices in the depth-first traversal. The total order between P1 and P2 are defined as follows:  1) If there exists j satisfying the condition such that ?i(1 ? i ? j ? 1)[ai1 = ai2] and aj1 < aj2, i.e. the jth quantitative itemset of P1 is smaller than that of P2 and the itemsets between 1 and j?1 are the same, then P1 is smaller than P2.

2) If ?i(1 ? i ? |VP1 | = |VP2 |)[ai1 = ai2] holds, then both P1 and P2 are the same.

3) Otherwise, P2 is smaller than P1.

Based on the above preparations, a graph with quantitative itemsets P is defined as a canonical form among the isomor- phic graphs, if P is minimum among the isomorphic graphs (P = min {Q | P ? Q,Q ? P}) and its graph structure without quantitative itemsets, S(P ), is the canonical with respect to the labeled graphs [2].

D. FAG-gSpan  A pattern mining algorithm FAG-gSpan for FAG is pro- posed in this subsection. FAG-gSpan is the combination of two algorithms: (1) gSpan for the enumeration of labeled graph patterns (without quantitative itemsets in the vertices) and (2) QFIMiner for generating quantitative itemsets (maxi- mal dense clusters) to be assigned to the vertices. The pseudo code of FAG-gSpan is shown in Figure 3. In this pseudo code, G, ? and L denote a data graph, a minimum support threshold, and a set of labels, respectively.

Given a pattern of labeled graph p, the enumeration of new patterns of labeled graphs p? will be done by applying the rightmost extension(RME(p,L) in line 7 of gSpan). In addition, if a pattern p is not a canonical form (?isCanG(p) in line 1) or it is not frequent (supG(p) < ?), then the specializations of p will be avoided. These are the same as what gSpan does. A set S of graph patterns with quantitative itemsets will be generated by assigning quantitative itemsets, i.e. maximal dense clusters, obtained by QFIMiner [11] to each vertex in p (line 2). If the candidate pattern s? ? S is canonical (isCanA(s?) in line 5) and frequent (supG(s?) ? ?), then s? is reported as FAG (line 6).

Algorithm FAG-gSpan(G, ?, L) 1: for each p ? L 2: FAG-Enum(p, G, ?, L)  Subroutine FAG-Enum(p, G, ?, L) 1: if ?isCanG(p) ? supG(p) < ? then return 2: S := QFI({A(o) | o ? ?pG}) 3: if S = ? then return 4: for each s? ? S 5: if isCanA(s?) ? supG(s?) ? ? then 6: output s?  7: P := RME(p,L) 8: for each p? ? P 9: FAG-Enum(p?, G, ?, L)  Figure 3. Pseudo code of FAG-gSpan  An example of discovering graph patterns with quantita- tive itemsets is shown in Figure 2. We assume that a labeled graph pattern P1 is given to FAG-Enum. In line 7, P2 and P3 can be enumerated by applying the rightmost extension to P1. The expansions of P2 are pruned since P2 is not a canonical form (?isCanG(p) in line 1). By iterating FAG- Enum to P3 by one time, P5 will be enumerated. In line 2, a set of candidates of FAG S1 can be generated by assigning the quantitative itemsets to P5. If the isomorphic graphs with quantitative itemsets are generated such as S13 and S14 in S1, only a canonical graph is selected (in line 5).

Thus, in this example, only S13 will be reported. On the other hand, by adding one edge and a new vertex to P3, P4 can be enumerated. If no FAGs are generated from P4, the expansions of P4 are pruned (in line 3).

The assignment of quantitative itemsets to the vertices will be done in the function QFI({A(o) | o ? ?pG}). For a list of quantitative itemsets ? ?  a(v1) = {?p11 : [f11 , t11]?, ? ? ? , ?pm11 : [fm11 , tm11 ]?}, ? ? ? ,  a(vn) = {?p1n : [f1n, t1n]?, ? ? ? , ?pmnn : [fmnn , tmnn ]?}  ? ?  which corresponds to a list of vertices o = [v1, ? ? ? , vn] ? ?pG, we define a set of vertices A(o) as follows:??  ? ?1 ? p11 : [f11 , t11]?, ? ? ? , ?1 ? pm11 : [fm11 , tm11 ]?,  ? ? ? , ?n ? p1n : [f1n, t1n]?, ? ? ? , ?n ? pmnn : [fmnn , tmnn ]?  ?? ?  In other words, a list of vertices will be converted to A(o) by replacing the attribute name ?pji ? with ?k?pji ? where k is the order of vertices in p obtained by the depth-first traversal.

After the conversion, by extracting the dense clusters in {A(o) | o ? ?pG} and assigning the quantitative itemsets to the labeled graph p, the graph pattern with quantitative itemsets will be generated from a labeled graph p. To obtain the quantitative itemsets in a vertex, FAG-gSpan employs  Table I DATASETS USED IN THE EXPERIMENTS  data D1 D2 D3 |V |: # of vertices 122 76 78 |E|: # of edges 176 125 111  Figure 4. Examples of extracted patterns  QFIMiner [11], one of the most effective quantitative itemset miners.



IV. EXPERIMENTAL RESULTS  In order to assess the effectiveness of the proposed algorithm, we implement FAG-gSpan in Java and conduct several kinds of preliminary experiments by using the com- munication data of haggle [12] on a PC (CPU:Intel(R) Core2Duo, 3.16GHz) with 4GByte of main memory running Windows XP. The communication data can be represented as a dynamic graphs as shown in Figure 1 by regarding each communication device as a vertex and the communication between devices within a certain time frame as an edge.

We prepare three datasets shown in Table I by changing the length of each time frame.

A. Assessment of Effectiveness of FAG-gSpan  In the first experiments, we focus on the last graph in a dynamic graph, and assign two kinds of centralities [1] to each vertex. In other words, each vertex consists of two quantitative items which represent the centralities of the vertex. In the experiments, while changing ? and ?p, the execution time (in second), the number of discovered pat- terns, and the number of candidate patterns were measured.

The parameter MinPts was set to 3.

The experimental results are shown in Table II. As ? decreases, the execution time, the number of discovered patterns and the number of candidates increase. In case of ? = 0.15, the numbers of obtained patterns in ?p = 0.1 are less than those in ?p = 0.05 even if the former generates more candidates. We believe that this is because, in case of ?p = 0.05, more detailed ranges were assigned and less frequent quantitative itemsets were obtained.

In the second experiments, the effects of the number of quantitative items in each vertex will be assessed. We also     Table II EXPERIMENTAL RESULTS 1  ?p ? time pattern candidate D1 D2 D3 D1 D2 D3 D1 D2 D3  0.15 0.3 <0.1 <0.1 0.3 0 1 3 0 <0.1 <0.1 0.1 0.5 0.4 3.7 3 2 4 0.3 0.3 5.5  0.3 0 0.1 <0.1 0 1 3 0 <0.1 <0.1 0.05 0.15 0.2 0.3 1.2 4 4 18 <0.1 0.2 1.3  0.1 82,547.2 37.5 116.3 531 38 310 1,021.5 13.9 159.1  ?p: permissible range on attribute p. ?: minimum support threshold. time: execution time[second].

pattern: number of discovered patterns. candidate: number of candidate patterns (in thousand).

use the last graph in a dynamic graph. To each vertex in the last graph, we assign a set of values of the centralities in the past. In other words, each vertex in the last graph has a set of quantitative items, each of which corresponds to its centrality of a certain time frame. In the experiments, we set MinPts = 3, ? = 0.15 and ?p = 0.05, and we measure the performance of FAG-gSpan while changing the number of quantitative items (|A|) in each vertex. The experimental results are shown in Table III. As the number of attributes increases, the number of discovered patterns also increases.

Moreover, the numbers of candidates are extremely larger than those of discovered patterns.

Some examples of extracted patterns are shown in Figure 4. In this figure, P1 might represent a set of strongly related devices within a time frame because P1 has a closed loop and its vertices have same quantitative itemsets. P2 might be related to some temporal changes in a dynamic graph because two vertices in P2 have some quantitative items for different time frames. From these results, we can confirm that FAG-gSpan is able to discover the complex patterns which cannot be obtained by the conventional algorithms.

B. Comparison of Several Mining Strategies with FAG- gSpan  While FAG-gSpan obtains quantitative itemsets after the structure of patterns (labeled graphs) is determined, one may consider that it is sufficient to prepare quantitative itemset patterns as preprocessing and to use them regardless of patterns. So, we prepare following three strategies for obtaining quantitative itemsets in FAG and compare them with FAG-gSpan.

(1) ?preprocessing?: A set of maximally frequent quanti- tative itemset patterns is generated by using all vertices in a graph as preprocessing. Only patterns in this set will be used.

(2) ?refineMinMax?: A set of quantitative itemset patterns in ?preprocessing? is used. After the assignment of quantita- tive itemset patterns in the set obtained by ?preprocessing? to each vertex in a labeled graph pattern, the range of intervals are adjusted by using the minimum and maximum values in  its occurrences.

(3) ?re-clustering?: This is similar to ?refineMinMax?, but  the clustering will be conducted by using the occurrences.

We conduct experiments by using the graph data D3 with  MinPts = 3, ? = 0.15 and ?p = 0.05. The experimental results are shown in Table IV.

FAG-gSpan required the most execution time, because it has to conduct clustering several times. On the other hand, only few number of patterns were obtained by ?preprocessing?, ?refineMinMax? and ?re-clustering?. This shows that these strategies fail to extract many characteristic patterns. The experimental results of the ?preprocessing? and ?refineMinMax? are the same in Table IV. But the extracted patterns are different. The number of patterns of ?re-clustering? is less than that of ?preprocessing? because dense clusters may not exist in the extracted itemsets patterns by ?preprocessing?. Thus, the clustering has to be conducted each time a graph pattern is obtained. From the discussion above, FAG-gSpan is useful to extract the characteristic patterns sufficiently.



V. RELATED WORK  Several algorithms for graph mining have been proposed [7], [8], [9], [14]. However, since most of these algorithms do not take the internal information of vertices into account, they will fail to discover some characteristic patterns which will be found by FAG-gSpan. On the other hand, several advanced algorithms have been proposed [5], [10] which discover some complex patterns from graphs whose ver- tices consists of itemsets. DAG-Miner [5] extracts frequent patterns from directed acyclic graphs in which each vertex has an itemset. CoPaM [10] is an algorithm for mining the maximal cohesive patterns, which are the integration of the concepts of dense subgraphs and the subspace clusters in a feature space. While these algorithms deal with the graphs whose vertices contain an itemset, to the best of the authors knowledge, FAG-gSpan is the first algorithm which can handle the graphs with quantitative itemsets directly.

Table III EXPERIMENTAL RESULTS 2  |A| time[sec] pattern candidate D1 D2 D3 D1 D2 D3 D1 D2 D3  2 0.2 0.3 1.2 4 4 18 <0.1 0.2 1.3 4 0.8 1.6 210.7 10 8 22 0.6 2.5 90.0 6 1.1 4.5 256.7 25 15 85 1.5 7.5 11.7 8 1.0 5.6 470.6 37 26 145 1.4 9.8 146.3  10 2.0 16.8 3,057.6 60 50 790 3.4 25.9 454.9  |A|: number of attributes in each vertex of the graph.

time: execution time[second].

pattern: number of discovered patterns.

candidate: number of generating patterns (in thousand).

Table IV EXPERIMENTAL RESULTS 3  |A| time[sec] pattern W1 W2 W3 W4 W1 W2 W3 W4  2 1.2 0 0 0 18 0 0 0 4 210.7 0 0 0.1 22 2 2 1 6 256.7 <0.1 <0.1 0.2 85 5 5 3 8 470.6 <0.1 <0.1 0.2 145 5 5 3  10 3,057.6 <0.1 <0.1 0.2 790 14 14 13  |A|: number of attributes in each vertex of the graph.

time: execution time[second].

pattern: number of discovered patterns.

W1: FAG-gSpan. W2: ?preprocessing?.

W3: ?refineMinMax?. W4: ?re-clustering?.



VI. CONCLUSION AND FUTURE WORK  In this paper, we discuss the problem of mining frequent patterns of graphs with quantitative itemsets. To solve this problem, we develop a novel algorithm FAG-gSpan by com- bining the techniques of the enumeration of graph patterns and those of mining quantitative itemsets.

For future work, the theoretical analysis of the proposed algorithm and further experiments with large-scale datasets are necessary. In addition, since FAG-gSpan uses the graph miner and the clustering of quantitative itemsets separately, we try to investigate some different combinations of other kinds of graph miners and itemset miners. The application of the proposed framework to the dynamic graphs [3] is one of the other promising research directions.

