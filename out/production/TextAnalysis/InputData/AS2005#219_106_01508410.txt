Applications of an Web Information Mining Model to Data Mining and Information Retrieval Tasks

Abstract  We have developed a model to mine information in appli- cations involving graph analysis. We demonstrate the model characteristics using a Web warehouse, where nodes rep- resent Web pages and edges represent hyperlinks. In this paper we apply the model to data mining and information retrieval tasks. Related to data mining, we present views for clustering Web nodes and for finding frequent itemsets for association rule mining. Related to information retrieval, we present views for performing a simple query, for clus- tering the query results and an attempt to improve the qual- ity of the ranking. The use of the model with these pur- poses demonstrates its modularity, flexibility, applicability and broadness in graph problems.

1 Introduction  The Web is a collection of semistructured documents.

Most of them are HTML documents, whose tags give us some meta information about pieces of the document. A particular data warehouse whose data is the Web is known as a Web warehouse. In this paper we present several appli- cations of a model to mine information in a Web warehouse, involving data mining tasks as clustering and association rules, and information retrieval tasks as ranking and result clustering.

There are three distinct data types in the Web: semistruc- tured multimedia content, hyperlink (or just link) structure and usage data in the form of Web logs [7]. We model these three data types as objects that represent some view of the Web warehouse, manipulated by a formal algebra with dis- tinct operators.

2 The Model  The information mining model used is based on the ob- ject oriented paradigm. Objects are instances of classes and incorporate sets of elements. The classes Node and Relation are subclasses of the superclass Super Node. As instances, the objects physical pages and physical links represent, re- spectively, all the Web pages and links among pages in a given web warehouse crawled. The objects are modified by operations performed on their elements. An object is always a set of elements.

A relation node represents an edge of a graph, that may be directed. In spite that most applications demand graphs such that each edge connects two nodes, the model supports hypergraphs [3]. In this case, other attributes apart from start and end are required to store the other nodes involved in each hyperedge. In this paper we often refer to elements of the classes Node and Relation by just node(s) and rela- tion(s), respectively.

The operations are functions that modify the object char- acteristics, generating a new object or returning a value. We identify by primitive operations the operations that are im- portant to the model and that cannot be implemented by us- ing other existing operations. The primitive operators are summarized in Table 1. A view is a query performed by a sequence of operators and objects, where the operators are applied to input objects or to objects returned by other operators. Dynamic operations are views with generic in- put objects and parameters, normally useful in other views.

Objects returned by views can be materialized or not, de- pending on time and space costs and on the application.

Materialized objects can be used in any other view as in- put objects. Details of the model can be found in [2]. The operators are explained by using examples in the following sections.

Proceedings of the 16th International Workshop on Database and Expert Systems Applications (DEXA?05)     Table 1. Summary of primitive operators.

Operator Parameters Description  Select value select only tuples that satisfy a condition.

top-k return only a given number of tuples  from the top ranking.

Project normal chosen attribute(s) are returned.

relation all the relations in the hypergraph are returned.

Merge union return all the tuples that occur in any object involved.

intersection return only the tuples that occur in both objects.

difference return the difference of the tuples.

Join objects like operator Join in relational algebra.

bags convert a bag to a set adding a new attribute: quantity .

non-directed eliminate the direction of the relations, by eliminating one of the relations with values start and end inverted.

disjoin separate items that are arrays. Every array element generates a new tuple.

Order increasing sort the tuples in increasing order.

decreasing sort the tuples in decreasing order.

Add fixed a given node is the start or end node.

Relation cross- a relation is inserted among every pair  product of nodes.

same a relation is inserted among every pair attribute of nodes with the same attribute value,  for a given attribute.

The operator may be used with every parameter for classes node and relation.

Link co-citation Add new relations according to one of Distance bibliographic the options. A new attribute distance  coupling is added to store the distance among distance-k nodes. It is recursive, but it is also transitivity possible to perform partial link distance.

Connected connected identify the connected components.

Nodes strongly identify the strongly connected comp.

spanning identify the minimum spanning tree.

tree It works by deleting edges of the graph.

A new attribute subgraph is added.

Singular pagerank Return an object of the class node, Value authority with one more attribute according to the Decomp. hub Pagerank, authority or hub measures.

Content relation compare a given textual attribute of the Similarity start and end nodes of every relation.

query calculate the similarity of a given query and a textual attribute.

Calculus if binary: calculate the sum , difference, multiplication or division .

if unary: a mathematical , statistical or user - defined function is applied. It is also used to count the number of tuples.

Some operations may be applied to non numerical attributes.

3 Applications Related to Data Mining  3.1 Clustering  The first view, Cluster Nodes, groups nodes according to the presence of a relation ? a very simple but useful heuristic  for Web graph applications (non-labeled graph). The appli- cation of Cluster Nodes to one object of the class relation results in an object belonging to the class node, with the ad- dition of the attribute subgraph. This new attribute stores the cluster number which each node belongs to. Figure 1 shows the view Cluster Nodes as a dynamic operator, for future use in other views. It means that the input of the view is generic, that is other objects belonging to the class relation in the place of, for example, only a physical pages object. It also means that some internal attributes may be variables, like the attribute quantity of the operator Select in Figure 1.

In figures that represent views and dynamic operators we use boxes to represent objects and arrows to represent an op- eration. The object linked from an arrow is an input for the current operation. The object which an arrow links is the output of that operation. The internal object labels repre- sent the history of operators applied to objects in the view.

For example, an object has a label ORN.CN if the operator ?Connected Nodes? (CN ) was applied to the input object of the view, and later the operator ?Relation to Node? (RN ) was applied. The label of an operation represents the oper- ator used and its parameters. An arrow with a dashed line do not represent an operation. It means that the input ob- ject stores a constant value that is used as a parameter in an operator. It occurs in Figures 2, 3 and 6.

Figure 1. The dynamic operator Cluster Nodes.

The dynamic operator works as follows. Initially the op- erator Connected Nodes is applied to an object of the class relation. The strongly connected components are identified by inserting a new attribute subgraph to store the subgraph number which the relation belongs to. Next, a dynamic op- erator Relation to Node is used to convert the object from the class relation to the class node. The conversion consists of considering every node in the start and end nodes of the input object as a node in the output object. The parame- ter Union means that the object ORN.CN contains all the nodes existing in the attributes start and end from the input object OCN . The parameter subgraph indicates that the at-   Proceedings of the 16th International Workshop on Database and Expert Systems Applications (DEXA?05)     tribute subgraph is kept in the resulting operator ORN.CN .

Details on the dynamic operator Relation to Node can be found in [2].

Next, Join is used with the option bags. Thus, ob- ject OJo.RN.CN contains the same elements than object ORN.CN , but without replication of tuples and with a new attribute quantity, to store the number of identical tuples (for every distinct tuple) in the previous object ORN.CN .

Select is used to consider only the clusters with a minimal number of nodes (the constant user-defined quant), what might be important in Web warehouse. At the end the nodes are ordered by the attribute subgraph, just to keep the ele- ments of each cluster together. Note that the object returned contains the list of node numbers and the subgraph number which the nodes belong to. Most views that use this op- erator may need to merge this result with an object of the class node, returning the names or other information of the clustered nodes.

It is possible to use the dynamic operator just presented to cluster nodes in labeled graphs. The simplest way might be to perform the operator Select before the operator Cluster Nodes, eliminating edges that do not reach a given thresh- old. The second view is a more sophisticated solution for la- beled graph partitioning. Some algorithms for clustering on labeled graphs use the minimum spanning tree and thresh- olds to eliminate edges [4]. The mean average of all the edges weights, or functions involving this statistical mea- sure are often used as threshold. Figure 2 shows the view Improved Cluster.

Figure 2. The view Improved Cluster.

The view Improved Cluster is explained in the follow- ing. Initially the mean average for the attribute weight is calculated and stored as a constant value in the object OmeanAverage. By the operator Connected Nodes, only the edges belonging to the minimum spanning trees are main- tained. The object OCN has a new attribute subgraph, that identifies the subgraph number which each edge belongs to, since various minimum spanning trees can be generated. In the next step, Select is used to exclude edges that have the weight less than the mean average. Now the minimal span-  ning trees are partitioned. The operator Connected Nodes is applied again to rearrange the new subgraphs, associating a new subgraph number to every subgraph. Relation to Node returns the list of nodes and its subgraph number.

3.2 Association Analysis  Association analysis is the discovery of association rules showing attribute-value conditions that occur frequently to- gether in a given set of data. In Data mining a set of items is referred to as an itemset. If an itemset satisfies a minimum support1, then it is a frequent itemset. Association rules are mined from large databases by a two-step process: find all frequent itemsets, according to a pre-determined minimum support count; and generate strong association rules from frequent itemsets, satisfying minimum confidence [5]. The second step is the easiest of the two.

We present in this section a view based on the Apriori al- gorithm [1] for mining frequent itemsets for boolean associ- ation rules. Every interaction is a two-step process, consist- ing of joining and pruning actions. The list of candidate k- itemsets (itemsets with k elements) is generated by joining the previous elements of (k? 1)-itemsets. In the prune step the database is scanned to verify which candidate k-itemset may be frequent. The view for mining frequent itemsets is shown in Figure 3. The basic idea is that items are consid- ered nodes of hypergraphs, and itemsets are relations (hy- peredges). Every new interaction uses a graph with edges connecting a greater number of nodes. Thus, if we are inter- ested in the frequent 4-itemsets, we recover the hyperedges that link four nodes.

The view Frequent Itemsets shown in Figure 3 is ex- plained below. Initially, id and list attributes (tags) are pro- jected. The Join operator, with the option disjoin, is used to separate the elements of the list, where each item gen- erates a tuple. For example, applying Join(disjoin) to the tuple {1; (a, b, c)} results in the tuples {1; a}, {1; b} and {1; c}. The attributes itemId and item , added by the op- erator Join, are projected to the object Oid?nameList. This object is required to recover the item name (attribute item), since next objects of the view do not have this information.

The operator Add Relation is applied with the option same attribute, where every pair of nodes with the same id becomes a relation. It works similarly to a cross-product of the object with itself, except that Add Relation crosses only tuples with the same value in the attribute itemId. For ex- ample, if we have the tuples {1; a}, {1; b}, {2; c}, {2; d} and {2; e}, the application of the operator Add Relation with the option same attribute results in the non-directed relations a?b, c?d, c?e and d?e. The object OAR.Jo.Pr  1 An itemset satisfies minimum support if the occurrence frequency of the itemset is greater than or equal to the product of the pre-determined minimum support and the total number of transactions in the database.

Proceedings of the 16th International Workshop on Database and Expert Systems Applications (DEXA?05)     Figure 3. The view Frequent Itemsets.

contains, for every list considered in the input node object (object of the class node), relations among every pair of items of every list.

The object OAR.Jo.Pr contains the candidate 2-itemsets.

The relation attributes (the list of nodes linked by hyper- edges) are projected. In the first interaction only two nodes are linked (the graph is not an hypergraph yet). Next, dupli- cated edges are eliminated and counted by the operator Join.

The operator Join has a different function for the Apriori join step. Join adds to the object OJo.Pr.AR.Jo.Pr the at- tribute quantity, that is used to verify if the itemset reaches the minimal support min-sup*tuplesNum, in the opera- tor Select. Operator Calculus is used to count the number of tuples tuplesNum.

Operator Join is used to recover the names of the fre- quent 2-itemsets, returned into the object Itemsets bolded in the figure, that is the output of the view Frequent Itemsets.

A new interaction begins by merging the current frequent itemsets with the object OAR.Jo.Pr , just for recovering the list identifiers. In the first interaction just presented the operator Add Relation had been applied outside the loop.

Since it is required for adding more nodes to each relation, it must be applied now inside the loop.

4 Applications Related to Information Re- trieval  We present in this section three examples of applications related to information retrieval: a dynamic operator for per- forming a simple query and views for clustering the query results and an attempt to improve the quality of the rank- ing. The two views use the dynamic operator Simple Query,  shown in Figure 4.

Figure 4. The dynamic operator Simple Query.

Initially, in the right side of Figure 4, a query is per- formed using the similarity measure TF-IDF ? term fre- quency and inverse document frequency [6]. In the left side, the Pagerank is calculated by the operator Singular Value Decomposition. Object OPhyLinks?with?Pagerank has a new attribute, pagerank. By means of the operator Calculus, the Pagerank value of top ranking documents are summed to the similarity calculated using TF-IDF. The vari- able maxPages is used twice. In the first time, it is used to calculate the number of pages that are selected for sum- ming the similarity value with the Pagerank value. At the end, the variable maxPages is used to limit the number of pages returned.

4.1 Clustering Query Results  We present a view that aims to improve the presentation of the results of a search engine, based on the idea of clus- tering the results returned. It is an attempt to disambiguate the query, by grouping the documents returned. We hope that each cluster is related to the meaning of the ambiguous query, when it is ambiguous. Note that we are not debat- ing if this is a good strategy to the disambiguation problem, that is not important at this moment. We are interested in showing the application of the model to an information re- trieval task. It is possible to change the view and obtain bet- ter results, or yet to propose another view that implements another strategy for the same problem.

The view Cluster Results is shown in Figure 5. Initially, the query is processed using the dynamic operator Simple Query. The parameter maxPages has the value 50. Add Relation with the option cross product inserts a relation among every document pair in the top fifty documents re- turned in the query. Now we have a graph where each node is connected to every other node. The texts of every doc- ument pair are compared using the TF-IDF measure. The   Proceedings of the 16th International Workshop on Database and Expert Systems Applications (DEXA?05)     dynamic operator Improved Cluster is used to partition the graph, returning the clusters.

Figure 5. The view Cluster Results.

4.2 Ranking Improvement Using Related Items  Now we attempt to improve the ranking of a search en- gine, by privileging documents that have other terms related to the query terms. Again, we are not debating if this is a good strategy for improving the ranking. We are just pre- senting an alternative. The view Change Ranking is shown in Figure 6. The first part of the figure (the top five objects) aims to identify the items that are related to the query term.

For simplification, we are considering queries with only one term. The dynamic operator Frequent Itemset is used and object Oitems has the list of terms related to the query terms.

In the other part of the figure, que query is processed using the dynamic operator Simple Query. The related items are compared to the top-50 documents returned in the query, using operator Content Similarity. The similarities for the query and for the related items are summed. The operator Order returns the new ranking.

Figure 6. The view Change Ranking.

5 Conclusions  This paper has presented succinctly a model to mine in- formation in graph applications. The focus of the paper has been the use of the model on applications related to data mining and information retrieval. By defining some views, we tried to address important tasks in these two areas, as finding frequent itemsets and improving the quality of the ranking in a query.

The examples demonstrated some important character- istics of the model as: modularity, since a view can be converted in a dynamic operator and used in other views; flexibility, since we can have distinct views to solve the same problem, and we can adjust internal parameters for the views; broadness, since many new views were created without changing the model and the operators; and the ap- plicability of the model for graph problems and problems that can be converted into graph problems.

