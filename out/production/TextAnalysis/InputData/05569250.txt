

Abstract?Based on FP-tree algorithm, this article introduced the method of multi-thread processing and a Multi-Threaded Paralleled frequent item-set mining Algorithm?MTPA was proposed .It has been applied to an enterprise human resources management system. Through the experiments of paralleled mining by using increasing multi-thread processing, it has been proved that MTPA which on the condition of multi-core processors can improve the efficiency of frequent item-set mining effectively.

Keywords-frequent item-set; FP-tree; paralled data mining;multi-thread;MTPA,human recourses management(HRM)

I.  INTRODUCTION Parallel Data Mining particularly in parallel frequent item  sets mining has become a research hot spot at present.

Scientists and scholars have put forward the CD (Count Distribution) algorithm [1], PDM (Parallel Data Mining) [2] algorithm, DD (Data Distribution) [3] algorithm and FDM (Fast Distributed Mining of association rules) [4] algorithm etc. The proposal of these algorithms is based on distributed processors of the parallel mode [5][6][7] and the Apriori [8] algorithm. Each of the processor has its own exclusive memory and disk space and communicates with each other through the network of internal connections.

Studies have shown that, before the generation of frequent itemsets with Apriori algorithm, the database who has the large width will produces a large number of candidate sets and the result of I / O overhead due to the repeated scans the transaction database which cannot be underestimated; FP-tree algorithm, does not require generate a large number of candidate sets, the main information to the database in the form of FP tree stored in memory. And although a number of scans could reduce database I / O overhead, but for large-scale database which has more level and items, by the increasing depth of FP-tree could lead to increased excavation time overhead.

This paper presents a parallel data mining algorithm of multi-thread which has been called MTPA algorithm and applied in the human resource management. The Results show that the algorithm can effectively improve the CPU utilization  especially for the effect of multi-core CPU, thereby increasing the efficiency of frequent itemsets mining.



II. MTPA ALGORITHM  A. Princeple of MTPA MTPA algorithm brings the ideology of multi-threaded into  frequent itemsets mining and based on the FP-growth algorithm to generate the FP tree. During the process of frequent itemsets mining, the FP-tree is decomposed to FP sub-tree group, then distribute to more than one thread to generate frequent itemsets with the hash method. At last by the union of each frequent itemsets mining results to get the final frequent itemsets.

B. Description  of MTPA 1) The strategys of hash allocation.

Due to hardware limitations, with the increasing of sub-tree FP generated in the process, the counts of thread will encounter a "bottleneck" problem. Therefore, the allocation strategy of FP group of sub-trees has been used the hash function as formula (1) of the following text.

Set the FP tree T is decomposed into sub-tree FP group, the maximum number of threads which the system allows is m, and Hash function is:  Hash (Ti) = Ti% m    (1)  Example: FP sub-tree group is (T1, T2, T3, T4, T5), m which the maximum number of threads equals 3, then the distribution of each thread as shown below:  TABLE I.  THE ALLOCATION OF THREAD    Thread Thread_01 Thread_02 Thread_03 FP sub-tree T1?T4 T2?T5 T3  2) The process of hash allocation.

FP tree partition number of the sub-tree group is related with the number of items. Then compose those FP-sub trees  This work is supported by Program for New Century Excellent Talents in University of Ministry of Education (NCET-08-0660), Open Fund Item of Key Laboratory of Spatial Data Mining & Information Sharing of Ministry of Education (200807), Sponsored by Program for Science & Technology Innovation Talents in Universities of Henan Province(2008HASTIT012), Science and Technology key projects of Henan Province(0624220081) and Science and Technology key projects of Zhen Zhou(064SGDG25127-9). Moreover, this project is a part of PH.D. Programs Foundation Research Projects of Henan University of Technology     together which have the same item at the end of each sub-tree.

The following examples describe the process of FP tree segmentation.

Based transaction database as shown in table ?, the minimum support is 33% and the minimum support count is 3, the maximum number of threads is 3 (which are thread_01 to thread_03). According to the generating of FP-growth algorithm, the results are shown in Figure 1. On the basis of the data items and FP tree nodes chain, the FP-tree will be split into five sub-FP groups, respectively as shown in Figure 2 to 6.

TABLE II.  AN EXAMPLE OF TRANSACTION DATABASE  TID List of Item T10 {a, b, d, e} T20 {b, c, d} T30 {a ,b, d ,e} T40 {a, c, d, e} T50 {b, c, d, e} T60 {b, d, e} T70 {c, d} T80 {a, b, c} T90 {a, d, e}  T100 {b, d}   Item Counts of support  degree  link of  node  d 9  b 7  e 6  a 5  c 5  Figure 1.  The FP tree of transaction database  Item Counts of  support degree  Link of  node  d 9  Figure 2.  The  sub-tree FP1 of transaction database  Item Counts of  support degree Link of node  b 7  Figure 3.  The  sub-tree FP2 of transaction database  The constitute of each sub-frequent item sets tree: which is get on the path of reaching the item ID of various sub-trees , namely the suffixes of various frequent item sets generated by sub-tree are each sub-tree item ID. On various sub-branches of a tree path, the support degree count (using the theorem: monotonicity property) is the weight of sub-leafy node of the sub tree. The sub tree FP1 generated by the frequent item sets  are: d: 9 and the sub-tree FP2-generated by frequent item sets are: db: 6, b: 7.

Figure 4.  The  sub-tree FP3 of transaction database  Item Counts of  support degree  Link of  node  a 5    Figure 5.  The  sub-tree FP4 of transaction database  The sub-tree FP3 generated by the frequent item sets which having ?e? as the suffix, are: dbe: 4; be: 4; de: 6, e: 6 . They are getting from the left sub-tree branches of the path ?de?: 4 and the right branch of the path ?de?: 2. At last, generated by the sub-tree FP4 frequent item sets are  which having ?a? as suffix): dea: 4, da: 4, ba: 3, ca: 4, a: 5 and the sub-tree FP5 has generated frequent item sets which having c as suffix : dc: 4, bc: 3, c: 5.

Item Counts of  support degree  Link of  node  c 5  Figure 6.  The  sub-tree FP5 of transaction database  According to Hash allocation strategy, the sub-tree FP1 and FP4 are assigned to the thread Thread_01,then FP2 and FP5 are assigned to the thread Thread_02, at last FP4 is assigned to the thread Thread_03. Eventually, the mining results of frequent item sets and the counts of support degree for the transaction database shown in table ? are : d: 9, b: 7, e: 6, a: 5, c: 5; db: 6, de: 6, be: 4, dc: 4, bc: 3; dbe: 4.

3) The algorithm of MTPA  1: struct item_table_node //The structure of table node 2: {string key_id; //Item set  Item Counts of  support degree Link of node  e 6     3: int support_level1; //The counts of support degrees, support_level1 4: represents the count of 1-itemsets  5: item_table_node *next; // the pointer of link table suffix key-id  6 :}; 7:item_table_node **Thread; 8: void MTPA (item_table_node, *Thread_FPTree, *head, int  Thread_max) 9://head is the front pointer of FP tree, and Thread_max is the  maximum of thread 10 :{ int m=Tread_max; 11: i=0; 12: Sub_FP_Generate (FP_tree) 13 :{p=FP_tree_branch (i); 14: while (head! =NULL) 15 :{ if (p->next! =NULL) 16 :{ Generate ? -FP-tree (); 17: s->next=p; 18: s=s->next; // the link of full path 19:Sub_FP_Genearte (p); 20 :} 21: else //The argotic of single path ?then the next path 22 :{ i=i+1; 23: sub_FP_Generate (head->next); 24 :} 25 :} 26://Hash allocation strategy 27: for (i=1; i<=n; i++) 28 :{ j=i % m; 29://Distribute FP(i) to Thread(j) and set the frequent item sets 30:generated as  (u1?u2......un)} 31:// The final frequent item sets is U equals u1?u2?.... ?un 32 :}    C. Related Property and Theorem Monotonicity Property [9]: That is, the support for an  itemsets never exceeds the support for its subsets.

Let I be a set of items, and J = 2I be the power set of I.

A  measure  f  is monotone (or upward closed) if  , : ( ) ( ) ( )X Y J X Y f X f Y? ? ? ? ?   (2), which means that if X is a subset of Y, then f (X)  must not exceed f (Y);On the other hand,f is anti- monotone (or downward closed) if  , : ( ) ( ) ( )X Y J X Y f Y f X? ? ? ? ?   (3),  This means that if X is a subset of Y, then f(Y) must  not exceed f(X).

The variation of frequent itemsets:That is , the FP sub-tree generated by the frequent item sets will not produce double counting.

Set the FP tree is distributed to many FP sub-trees ,those  are {FP1,FP2,FP3,??,FPn},and the frequent itemsets which generated by sub-tree let 1 2, , ......... n? ? ?  as suffix , each frequent item-set is different .

Demonstrate:  Set the sub-path of 1 2 3{ , , ,......, }nFP FP FP FP  is 111 1 , 1 ;{ . . . . . . }r? ? ? 221 2, 1 ; 1 , ;  { ...... } .........{ ...... } nr n n r n  ? ? ? ? ? ? , the frequent item-sets are produced by sub-tree are 1 2, ,...., nu u u . Of it 1 2, ,......, n? ? ?  is the leafy node. Then  , 1, 11 1 1 1 1 {{ ...... }i j i r j ru ? ? ? ? ? ?? ? 1 1} U? = , and the similarly, , ,1 1{{ ...... }k kk ki kj i r j ru ? ? ? ? ? ?? ?  ,1}k k k nU? ? ?= . Through the process of generating of FP tree, it can be getting ?1??2?????n=??U1?U2????Un=??u1?u2????un =? , so the variation of frequent item sets is correct.



III. PERFORMANCE EVALUATION Performance environment for this article: Pentium 4D  2.0GHz CPU Dual Core, 1024MB Memory, Window XP operating system, SQL Server 2000 database platform. The algorithm is programming by the language of C #. NET and applied to an enterprise's human resources management system. Table ?  shows some of the frequent item sets mining results  in the limitation of minimum support of 15%.

FP-Growth algorithm has been used to testify and ensure the accuracy of the data mining results and consistency. Figure 7 respectively shows in the environment of the dual-core and single core (CMOS in the shield a CPU), the time performance comparison by using the different amount of threads with MTPA (The count of records of the test database is 300).

TABLE III.  SOME  FREQUENT  ITEMSETS OF  HRM DATAMING IN AN ENTERPRISE  Signed:|Nationality:Han|Height:150-160|Age:20-23|Sex:female| 5 33.16%  Signed:|Weight:45-55|Nationality:Han|Education:Technical Secondary School |Sex:female|  5 33.13%  Signed:|Weight:45-55|Height:150-160|Education:Technical  Secondary School |Sex:female| 5 33.13%  Signed:|Weight:45-55|Age:20-23|Education:Technical Secondary  School |Sex:female| 5 33.13%  Signed:|Nationality:Han|Height:150-160|Education:Technical  Secondary School |Sex:female| 5 33.13%  Signed:|Nationality:Han|Age:20-23|Education:Technical  Secondary School |Sex:female| 5 33.13%  Signed:|Height:150-160|Age:20-23|Education:Technical Secondary School |Sex:female|  5 33.13%  Sex:female|Position:Sales Representative |Height:160-  170|Nationality:Hui|Signed:Trainee| 5 19.18%  Sex:female|Position:Sales Representative |Height:160- 170|Nationality:Hui|Nationality:Hui|  5 17.42%  Sex:female|Position:Sales Representative |Height:160-  170|Nationality:Hui|Age:22-24| 5 16.23%  Signed:|Sex:female|Height:160- 5 16.06%  Signed:|Sex:female|Position:Sales Representative |Nationality:Hui|Nationality:Hui|  5 15.05%  Weight:45-55|Nationality:Han|Height:150-160|Age:20-23| 4 34.11%  Sex:female|Position:Sales Representative |Height:160-  170|Nationality:Hui| 4 34.11%  Weight:45-55|Nationality:Han|Height:150- 160|Education:Technical Secondary School |  4 33.94%  Signed:|Weight:45-55|Nationality:Han|Age:20-23| 4 33.85%         0.00  1.00  2.00  3.00  4.00  5.00   Figure 7.  The comparison of time performance of MTPA  The results showed that: The time performance of MTPA Algorithm under the condition of dual-core processor can upgrade faster than single-core processor performance. But at the moment of the maximum utilization of CPU, there exist ?bottlenecks? of multithread, so the algorithm time-efficient improvements and the thread are not entirely proportional to the total number of cases increases. With the increasing of threads, the gradual increase in the rate of time efficiency tends to ease up, which will be the direction of the further studies.



IV. CONCLUDING REMARKS  MTPA presented in this paper in the FP algorithm is based on the algorithm has been taking the ideology of the of multi-threaded in the parallel frequent item set mining process, at the same time, through Hash allocation strategy for defining the number of threads to ensure the reasonable distribution.

