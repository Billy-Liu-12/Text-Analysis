ICSSE 2011

Abstract?In this paper, we propose a data mining algorithm for deriving fuzzy temporal association rules. It first transforms each quantitative value into a fuzzy set using the given membership functions. Meanwhile, item lifespans are collected and recorded in a temporal information table during the transformation process. The algorithm then calculates the scalar cardinality of each linguistic term of each item. The mining process based on fuzzy counts and item lifespans is then performed to find fuzzy temporal association rules. Experiments on a simulation dataset are also made to show the effectiveness and the efficiency of the proposed approach.

Keywords?fuzzy set, fuzzy data mining, fuzzy temporal association rule, item lifespan.



I. INTRODUCTION Data mining is commonly used for inducing association  rules from transaction data. An association rule is an expression X Y, where X and Y are a set of items. It means in the set of transactions, if all the items in X exist in a transaction, then Y is also in the transaction with a high probability [1, 2]. Most previous studies focused on binary-valued transaction data.

Transactions in real-world applications, however, usually consist of quantitative values. Besides, each item has its publication data. It means that each item has its lifespan. Thus, designing a sophisticated data-mining algorithm able to deal with various types of data presents a challenge to workers in this research field.

Fuzzy set theory has been used more and more frequently in intelligent systems because of its simplicity and similarity to human reasoning [5, 7, 15]. Several fuzzy data mining algorithms for inducing rules from given sets of data have been designed and used to good effect with specific domains [3, 6, 8, 14]. Chan et al. proposed an F-APACS algorithm to mine fuzzy association rules [3]. Kuok et al. proposed a fuzzy mining approach to handle numerical data in databases and derived fuzzy association rules [8]. At nearly the same time, Hong et al.

proposed a fuzzy mining algorithm to mine fuzzy rules from quantitative transaction data [6]. Yue et al. then extended the above concept to find fuzzy association rules with weighted items from transaction data [14].

However, those fuzzy data mining approaches didn?t take item lifespan into consideration. Although Lee proposed two algorithms for discovering fuzzy temporal association rules and fuzzy periodic association rules by using fuzzy calendar algebra [11], lifespan of each item still didn?t be considered. In this paper, we thus propose a mining algorithm for deriving fuzzy temporal association rules from given temporal transaction database. It first transforms each quantitative value into fuzzy sets using the given membership functions. During the transformation process, the lifespan of item is collected and recorded in temporal information table. The algorithm then calculates the scalar cardinality of each linguistic term of each item. The mining process based on fuzzy counts is then performed to find fuzzy temporal association rules.

Experiments on a simulation dataset were also made to show the effectiveness and efficiency of the proposed approach.



II. PROBLEM STATEMENT AND DEFINITIONS Since new products are added to market continuously, it is  reasonable to take time factor of items into consideration. In other words, each item in transaction thus has its own lifespan.

According to [4], the temporal item, temporal transaction database and temporal support are defined as follows:  Definition 1. (Temporal item). Let P = <p1, p2, ?, pn> be a sequence of continuous time periods such that each period is a particular time granularity, e.g., day, week, month, year, etc.

? 1 ? i ? j ? n, pi occurs before pj, denoted as pi ? pj. A temporal item x is an item with its starting period, denoted as S(x). The starting period of a temporal itemset X is then S(X) = max ({S(x)}), where x ? X. The set of temporal items is denoted as I s.t. ? x ? I, S(x) ? pn.

Definition 2. (Temporal Transaction Database). A temporal transaction T is a subset of I, which means T ? I.

The occurring period of T is denoted as O(T). Then, D = {T | p1 ? O(T) ? pn} is a temporal transaction database on I over P.

Definition 3. (Temporal Support). Let D be a temporal transaction database on I over P. Let X be a set of temporal items. The temporal support of X with respect to the subset of D from the period pi, denoted as TSup(X, pi), is defined as:       ICSSE 2011  |},)(|{| |},)(,|{|),(  DTpTOT DTpTOTXT  pXTSup i  i i ??  ???= ,  Then the temporal support of X, denoted as TSup(X), can be computed as TSup(X, S(X)). That is, the temporal support of an itemset X is the ratio of the number of transactions that contain temporal itemsets X to the total number of transactions that occur from S(X).

From above definitions, we can find that many previous studies focused on handling binary-valued data have been proposed. Transaction data, however, are usually quantitative values. We thus define temporal quantitative item and temporal quantitative transaction database by extending definition 1 and 2, respectively. The definitions are shown as follows.

Definition 4. (Temporal Quantitative item) Let P = <p1, p2, ?, pn> be a sequence of continuous time periods such that each period is a particular time granularity, e.g., day, week, month, year, etc. ? 1 ? i ? j ? n, pi occurs before pj, denoted as pi ? pj. A temporal quantitative item x? consists of a temporal item x and a quantitative value v, denoted as (x, v), where v is a positive real number R. In other words, the temporal item is a special case of temporal quantitative item. The starting period of a temporal quantitative item x? , denoted as S(x?), is the same as temporal item x, which is S(x). In the same ways, the starting period of a temporal quantitative itemset X? is S(X) = max ({S(x)}), where x ? X. The set of temporal quantitative items is denoted as I? s.t. ? x? ? I?, S(x) ? pn.

Definition 5. (Temporal Quantitative Transaction Database). A temporal quantitative transaction T? is a subset of I?, which means T? ? I?. The occurring period of T? is denoted as O(T?). Then, D? = {T? | p1 ? O(T?) ? pn} is a temporal quantitative transaction database on I? over P.

For example, Table 1 is a temporal quantitative transaction database with five temporal quantitative transactions over two periods, P = {P1, P2}. The time granularity used in this example is day. There are five temporal items. That is I = {A, B, C, D, E}. Each temporal quantitative item has its own starting period, e.g., S(A) = 1 and S(A, D) = 2. Each temporal quantitative transaction also has its own starting period, e.g., the starting period O(T?) of the 4th transaction is 2.

Table 1: The five temporal quantitative transactions Period TID Items  P1 (Aug-5) Trans1 (A, 5), (C,4); Trans2 (A, 3), (B,2); Trans3 (C,4);  P2 (Aug-6) Trans4 (A, 3), (B, 2), (D,4); Trans5 (A, 3), (B, 5), (D,4), (E,2);  Besides, since fuzzy theory is also commonly used to deal with quantitative values, in this paper, we thus utilize fuzzy theory to transform quantitative values into a more friendly representation such that we can easily understand. Assumer a given set of membership functions, a quantitative value vj(t), which is the quantitative value of temporal item x (= Ij) in transaction T?(i), can be transformed into a fuzzy set represented  as ( ) ( )  +++ l  l  j  i j  j  i j  j  i j  R  f  R  f  R  f ....

)( , where Rjk is the k-th fuzzy region  (linguistic term) of temporal item Ij, fj(i) is vj(i)?s membership value in region jkR , and l ( = |Ij|) is the number of fuzzy regions for Ij. Then, we define the fuzzy temporal support of a fuzzy region and fuzzy temporal confidence as follows:  Definition 6. (Fuzzy temporal Support). A fuzzy temporal support of a fuzzy region Rjk of a temporal item x (= Ij) is defined as follows:  tFuzzySupportjk = countjk / |{T? | O(T?) ? S(Ij), T? ? D?} |,  where countjk is the scalar cardinality of the fuzzy region Rjk, which is the summation of membership values fjk(i). In other words, the fuzzy temporal support of a fuzzy region of a temporal item is the ratio of its scalar cardinality to the number of transactions that occur from the starting period of temporal item x.

Let s is a temporal q-itemset with items (s1, s2, ?, sq), q ? 2. Similarity, a fuzzy temporal support of fuzzy regions Rs of a temporal itemset X (= s) is defined as:  tFuzzySupports = counts / |{T? | O(T?) ? S(s), T? ? D?} |,  where counts is the scalar cardinality of the fuzzy regions Rs, which is the summation of membership values fs(i). Note that if the minimum operator is used for the intersection, the membership value is calculated as:  ( )i s  r  j  i s j  fMinf   )( +  = = .

Thus, the fuzzy temporal support of fuzzy regions of a temporal itemset X is the ratio of its scalar cardinality to the number of transactions that occur from the starting period of temporal item X.

Definition 7. (Fuzzy temporal Confidence). Let s is a temporal large q-itemset with items (s1, s2, ?, sq), q ? 2. Then, fuzzy temporal confidence of a fuzzy temporal association rule, which denoted as s1???sk-1?sk+1???sq sk, is defined as follows:  tFuzzyConf(s1???sk-1?sk+1???sq sk) =  )...,,...,,(s  s  ,1,121 qkk ssss orttFuzzySupp  orttFuzzySupp  +?  .

In this paper, given a temporal quantitative transaction database, a set of membership functions, and pre-defined parameters whose are a minimum fuzzy temporal support ?, a minimum fuzzy temporal confidence value ?, we attempt to design an algorithm for mining fuzzy temporal association rules from the temporal quantitative transaction database.

ICSSE 2011

III. REIVIEW OF RELATED MINING APPROACHES The goal of data mining is to discover important  associations among items such that the presence of some items in a transaction will imply the presence of some other items. To achieve this purpose, Agrawal and his co-workers proposed several mining algorithms based on the concept of large itemsets to find association rules in transaction data [1, 2].

In fuzzy data mining approaches, Chan et al. proposed F- APACS algorithm to mine fuzzy association rules [3]. They first transformed quantitative attribute values into linguistic terms and then used the adjusted difference analysis to find interesting associations among attributes. Kuok et al. proposed a fuzzy mining approach to handle numerical data in databases and derived fuzzy association rules [8]. At nearly the same time, Hong et al. proposed a fuzzy mining algorithm to mine fuzzy rules from quantitative transaction data [6]. Basically, these fuzzy mining algorithms first used membership functions to transform each quantitative value into a fuzzy set in linguistic terms and then used a fuzzy mining process to find fuzzy association rules. Yue et al. then extended the above concept to find fuzzy association rules with weighted items from transaction data [14]. They adopted Kohonen self- organized mapping to derive fuzzy sets for numerical attributes. In addition, Lee et al. proposed a mining algorithm which used multiple minimum supports to mine fuzzy association rules [9]. They assumed that items had different minimum supports and the minimum support for an itemset was set as the maximum of the minimum supports of the items contained in the itemset. Under the constraint, the characteristic of level-by-level processing was kept, such that the original Apriori algorithm could easily be extended to finding large itemsets.

In temporal data mining, Chen et al. first proposed an algorithm, namely Progressive-Partition-Miner (PPM), for mining general temporal association rules from population database [10], where the publication database is a set of transactions. And, each item in the database contains its own exhibition period. Then, Chen et al. extends PPM algorithm and proposed Standing for Segmented Progressive Filter (SPF) for items with different exhibition periods [12]. Based on Chen?s approach [10, 12], Chen et al. then proposed a mining approach for deriving temporal indirect associations [4].

As to fuzzy temporal data mining, since fuzzy calendar algebra helps users to describe temporal requirements in fuzzy temporal calendars easily, Lee proposed two temporal patterns that are fuzzy temporal association rules and fuzzy periodic association rules based on fuzzy calendar algebra [11]. Based on Lee?s approach, Zhuo et al. introduced a relativity-based interest measure value for mining fuzzy calendar-based temporal association rules [13].



IV. THE PROPOSED MINING ALGORITHM In this section, we will describe the proposed mining  algorithm, namely Fuzzy temporal Association Rule Mining approach (called FTARM), for deriving fuzzy temporal association rules from the given temporal databases. The details of the proposed mining algorithm are stated as follows.

The proposed FTARM algorithm: INPUT: A body of n temporal quantitative transactions, each item in transaction has its own lifespan, a set of membership functions, a predefined minimum support threshold ?, a predefined minimum confidence threshold ?.

OUTPUT: A set of fuzzy temporal association rules.

Step 1: Do the following substeps to transform temporal  quantitative transactions in each time period pt, t = 1 to h, into fuzzy representations and collect items? lifespans:  SubSetp 1.1: Transform the quantitative value vj(i) of each transaction datum D(i) for each temporal item Ij in time period pt, where i = 1 to n, j = 1 to m, into a  fuzzy set fj(i) represented as ( ) ( )  +++ l  l  j  i j  j  i j  j  i j  R f  R f  R f  ....

)(  using the given membership functions, where Rjk is the k-th fuzzy region (linguistic term) of item Ij, fj(i) is vj(i)?s fuzzy membership value in region jkR , and l ( = |Ij|) is the number of fuzzy regions for Ij.

SubStep 1.2: Record number of temporal transactions in time period pt, denoted as |pt|, and the starting period of each temporal item, denoted as S(Ij), into a Temporal Information table, denoted as TI table.

Each item in transaction thus has its own lifetime.

Step 2: Calculate the scalar cardinality of each fuzzy region (linguistic term) Rjk in the temporal transaction data:  ( )  = =  n  i  i jkjk fcount   .

Step 3: Calculate the fuzzy temporal support of each fuzzy region countjk according to the starting period of temporal item S(Ij) as follows:  tFuzzySupportjk = countjk / ( =  h  ISt t  j  p )(  || )  Step 4: Check whether the fuzzy temporal support of each fuzzy region is larger than or equal to the predefined minimum support value ?. If Rjk satisfies the above condition, put it in the set of large 1-itemsets( 1L ) .

That is:  L1 = {Rjk | tFuzzySupportjk ? ?, 1 ? j ? m and 1? k ? l }  Step 5: If 1L  is not null, then do the next step; otherwise, do Step 11.

Step 6: Set r = 1, where r is used to represent the number of temporal items in the current itemsets to be processed.

Step 7: Join the large itemsets Lr to generate the candidate set Cr+1 in a way similar to that in the apriori algorithm except that two regions (linguistic terms) belonging to the same item cannot simultaneously exist in an itemset in Cr+1. Restated, the algorithm first joins Lr and Lr under the condition that r-1 items in the two itemsets are the same and the other one is different. It then keeps in Cr+1 the itemsets which have all their     ICSSE 2011  sub-itemsets of r items existing in Lr and do not have any two items Rjp and Rjq (p ? q) of the same attribute Rj.

Step 8: Do the following substeps for each newly formed (r+1)-itemset s with temporal items ( )121 ...,,, +rsss in Cr+1:  SubStep 8.1: Calculate the fuzzy value of each transaction data )(iD  in s as ( ) ( ) ( )is  i s  i s  i s r  ffff  ...)( +  ???= , where )(i  s j f is the membership value of )(iD in region  sj. If the minimum operator is used for the intersection, then:  ( )i s  r  j  i s j  fMinf   )( +  = = .

SubStep 8.2: Calculate the count of s in the transactions as:  counts = =  n  i  i sf   )( .

SubStep 8.3: Calculate the fuzzy temporal support of each fuzzy region Rjk according to the maximal starting period of temporal (r+1)-itemsets as follows:  tFuzzySupports = counts / ( +=  h  sSsSsSt t  r  p ))(),(),(max( 121  || )  SubStep 8.4: If tFuzzySupports is larger than or equal to the predefined minimum support value ? , put s in Lr+1.

Step 9: IF Lr+1 is null, then do the next step; otherwise, set r = r + 1 and repeat Steps 7 and 8.

Step 10: Construct fuzzy temporal association rules for each large q-itemset s with items (s1, s2, ?, sq), q ? 2, using the following substeps:  SubStep 10.1: Form each possible association rule as follows:  s1???sk-1?sk+1???sq, k=1 to q.

SubStep 10.2: Calculate the confidence values of all  association rules using:   ????  = +?  = n  i  i qs  i ks  i ks  i s  n  i  i s  ffff  f   )()(  )(  )(   )(  )...,...( .

Step 11: Output the fuzzy temporal association rules with confidence values larger than or equal to the predefined confidence threshold ?.



V. EXPERIMENTAL RESULTS In this section, experiments made to show the performance  of the proposed approach are described. They were implemented in C++ on a personal computer with AMD Athlon(tm) 64X2 Dual Core Processor 4800+ 2.5GHz and  3GB RAM. 64 items and 10,000 transactions were used in the experiments. In this experiment, we assume that all items have the same membership functions, and are shown in Figure 2.

Figure 2: The memnership functions used in the experiments  The experiment was first made to show the comparison results in terms of execution times between the proposed approach (TFARM) and the previous approach (FAR) [6]. The execution times along with different minimum supports are shown in Figure 3.

Figure 3: The execution times of the proposed approach and the previous approach.

From Figure 3, it is easily to observe that the execution times of both approaches are increasing when the minimum supports are decreasing. Additionally, the execution time of the proposed approach needs only a little more than the previous approach. The experiments were then made to show the difference of the number rules with different minimum supports. The results are shown in Figure 4.

Figure 4: The difference of number of rules between the propsoed approach the previous approach.

ICSSE 2011  From Figure 4, we can know that the number of rules derived by proposed approach is larger than the previous approach, especially when the minimum supports are set at small values. In other words, these results mean that there are actually more information (useful rules) can be derived by using TFARM. Thus, the proposed approach is effective and efficient.



VI. CONCLUSION AND FUTURE WORKS n this paper, we take item lifespan into consideration and  have proposed a fuzzy temporal mining algorithm for mining fuzzy temporal association rules. The proposed approach first transforms each quantitative value into a fuzzy set using the given membership functions. Meanwhile, item lifespans are collected and recorded in temporal information table during the transformation process. Apriori-like concept is then utilized to derive fuzzy temporal association rules. Experiments on a simulation dataset also show the proposed approach can actually derive extra fuzzy rules.

The main contribution of this paper is that since the lifespan of each item are considered, the proposed approach can find more information inside the given transaction database. In the future, we will extend the proposed approach for solving more complexity problems.

