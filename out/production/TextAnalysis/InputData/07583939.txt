IEEE Sponsored World Conference on Futuristic Trends in Research and Innovation for Social Welfare (WCFTR?16)

Abstract? Finding interesting patterns in the database is an important research area in the field of data mining. Association Rule Mining (ARM) finds the items that go together. It finds out the association between items. Frequent Itemset Mining (FIM) finds out the itemset that occur frequently in the database. But this approach misses out the profit and the quantity of item purchased. This is addressed in High Utility Itemset Mining (HUIM). HUIM find the profit generating itemset in the database. Many algorithms have been proposed in this field in the recent years. This paper focuses on reviewing the existing state of art algorithms to create a path for the future research in the area of high utility itemset mining.

Index Terms? Utility Mining, Frequent Itemset, High Utility Itemset Mining, Candidate Pruning, Transaction Weighted Utilization.Component

I. INTRODUCTION Frequent pattern mining is the key area in the data mining  concept which reveals the interesting pattern in the large database. Frequent pattern discovers the itemset  frequently occurs in a dataset and this information can be used in variety of applications such as market dataset analysis, Indexing and retrievals, detection of software bug, web link analysis etc.

Frequent pattern mining considers only whether an item is present or not in a transaction. It reveals the pattern which appears more than the user specified support count. In real life, the merchant are interested in selling the itemset which generate more profits, but the frequent pattern mining generates only frequent itemset without considering quantity of the item sold or the profit of the item. Even though frequent itemset mining discovers crucial frequent patterns, it leaves the profit and quantity of the item is the disadvantage. To address this issue weighted association rule mining has been developed. It tries to find the association of itemset in a database by considering the profit/weight of the itemset. This weighted association rule mining (WARM) tries to explore the frequent patterns considering the profit [22]. Some of the frequent patterns which are missed in frequent itemset mining (FIM) due to its high weights are included in WARM. Many algorithms have been proposed [5] [23] [24] in WARM.

WARM considers the profit of the item. In real world, for decision making the user wants to know the total profit earned by an item or itemset. For this it needs to take into account the quantity of the item purchased. The profit of an item considers the profit of single item and the number of item purchased.

To address these, utility mining has been introduced utility mining considers both the profit and the number of items purchased. In this the utility of an itemset is calculated as the product of the profit of the item and the number of item purchased.  Utility mining considers both the importance of an item in the database (i.e.) profit or external utility and the importance of an item in the transaction (i.e.) quantity or internal utility of an item. An item is said to be high utility item if the sum of the utility of the item in the database is greater than the user specified minimum threshold, otherwise it is low utility item. High utility pattern mining is a major research area in recent years and many researches are carried in different areas of high utility mining (HUI) which includes sequence high utility mining, lossless representation of HUI, incremental HUI etc.

High utility itemset mining is much difficult compared to the frequent itemset mining. Frequent itemset mining  follows the download closure property, if K- itemset is generated, K+1 itemset can be generated by considering only K-itemset or in other words K+1 itemset will contain only the itemset present in the K-itemset. This downward closure property is not satisfied, if k-itemset is low utility itemset K+1 can be High utility itemset and vice versa. Both the monotonic and anti- monotonic property is not supported by high utility itemset.

This issue is addressed by the over estimation method [25].

This method generates huge amount of candidate set. Based on TWDC [24] proposed two phase model algorithm to mine HUI in two phase. To reduce the second scan of the data base HUI Miner [17] has been proposed.HUI Miner reduces the scan of the database by introducing the utility structure but it includes the costly join operations. This cost of join operation is reduced by introducing the EUCS structure in FHM algorithm [7]. This paper reviews the Two phase algorithm [14], HUI miner and FHM state of art algorithm proposed for mining High Utility itemset.



II. PROBLEM DEFINITION In this section various definitions used in high utility  itemset mining are introduced.

Let I be a set of distinct items I = {x1,x2,x3,?.xn}. Let IS be  and itemset such that IS  I. Let D be a transaction database which contains set of transaction D= { T1,T2,T3,?.Tn}. Each transaction contains an unique identifier Tid. Each item in the transaction xi in the transaction has a quantity or internal utility     IEEE Sponsored World Conference on Futuristic Trends in Research and Innovation for Social Welfare (WCFTR?16)  IU(Tid, xi) associated with it. Each item in the database xi is associated with a profit or external utility EU(xi). For example consider a transaction database TABLE I:  TABLE I.  TRANSACTION DATATABASE TID TRANSACTIONS  1 (A:2),(B:1),(D:2) 2 (B:2),(C:1) 3 (A:1),(B:2),(C:3) 4 (B:1),(C:1),(D:2)    TABLE II.  EXTERNAL UTILITY TABLE Item Profit  A 5 B 4 C 2 D 3  TABLE III.  TRANSACTION UTILTIY TABLE TID Profit  1 20 2 10 3 19 4 12   DEFINITION 1: (Utility of an item in transaction).

The utility of an item ij in Td   is denoted as u(ij, Td), which is defined as:  u(ij, Td) = q(ij, Td) * p(ij)  (1) in which q(ij, Td) is the quantity of an itemset ij  in Td, and  p(ij) is the profit of an itemset ij. From the running example, in table I,the utility of(A) in TID(=1) is calculated as:  u(A,T1)=q(A, T1)*p(A) u(A, T1)=5*2=10.

DEFINITION  2: (Utility of an itemset in transaction).The  utility of an itemset X in transaction    is denoted as u(X,Td),which can be defined as:  u( ) =  (2)  From the running example the utility of itemset AB is u(AB, T1) = u(A, T1)+ u(B, T1 )  = q(A, T1)*p(A)+ q(B, T1)*p(B) =(5*2)+(1*4)  =10+4 =14.

DEFINITION  3:(High utility itemset, HUI). An itemset X  is a high-utility itemset(HUI) in database D if its utility in D is no less than minimum utility count as:  (3)  In table 1 and 3, Let the minimum utility threshold =6 Utility of (C) is calculated as: u(C) =u(C,T2)+ u(C,T3)+ u(C,T4)  =2+6+2 =10>6 Hence C is a high utility itemset.

DEFINITION 4: (Transaction-Weighted utility of an  itemset).  The Transaction-Weighted utility of an itemset X is the sum of all transaction utility TU(Td) containing itemset X in D,which is defined as:   (4)  TWU (AB) = 20+19 = 39.



III.  VARIOUS ALGORITHMS FOR HIGH UTILITY ITEMSET MINING (HUIM)  A. Two Phase Algorithm This algorithm runs in two phase. The algorithm utilizes the  downward closure property, of transaction weighted utilization itemset. If  k+1 itemset is high transaction weighted utility itemset, only weighted utilization itemset.

This property also states that the super set of low transaction weighted utility itemset is also a low transaction weighted utility itemset. By this property this algorithm reduces the number of candidate set. In order to find the high utility itemset from the high transaction weighted utility itemset. If  Transaction weighted high utility itemset (TWHUI) be the high transaction weighted utility itemset and HUI be the high utility itemset then HUI  TWHUI.

In phase 1 of this algorithm, the database is scanned once; during the scan the transaction weighted utility of each transaction is calculated. The candidate which has transaction weighted utilization value greater than minimum threshold is only taken in account. This limits the search space of this algorithm. For larger database this reduces search space shows better performance than MEU.

In phase 2 of this algorithm, the database is scanned once again to find the high utility itemset. From the high transaction weighted utilization of itemsets .When user defined minimum threshold is large , then the high transaction weighted utilization of itemset is small. Experiments evaluation shows that, this algorithm shows better performance than previous MEU and it is evident in larger databases. This paper show the important path of utilizing the downward closure property of high transaction weighted utilization of itemset.

B. HUI Miner HUI miner algorithm mines the high utility itemset in a  single phase. It uses a depth first search approach.HUI miner uses a new data structure utility list. The utility list is generated for each item whose TWU   minutil is generated by scanning the database.

The utility list of an item X consists of triples for each transaction the item X participants. The triples contains a transaction id (tid) the utility of item X in the transaction    IEEE Sponsored World Conference on Futuristic Trends in Research and Innovation for Social Welfare (WCFTR?16)  (utility),the utility of items that are present after the item X in the total order of in that item transaction remains utility.

The high utility itemset are mined from the utility list constructed on the property, if sum of itemutility of an itemset X  minutilty then X is a high utility itemset. Since the itemutility is utility of itemset the sum of itemutility represents the utility of itemset in the database.

The single high utility items are generated based on the above property. To check whether super set of an item found in a high utility item it uses the property, sum of itemutililty and remailutility is less than the given minimum utility than all the extension of X in the total order will be low utility itemset. This algorithm calculates the sum of itemutility and remainutility,if it is greater than minutility,it adds for each item extension y >x in their total order as the extension, by recursion it finds out whether each extension is a HUI.

C. FHM Algorithm FHM addresses the issue of costly join in the HUI miner.

The HUI Miner does not follow the property on sum of itemutility and remainutility. HUI miner scans the database only once but it does the join operation to find the utility of the database. FHM reduces the join operation by using the property of itemutility and remainutility.

1) Poperty: Sum of itemutility  Let IS be an itemset. If the sum of itemutility value of an IS in the utility list of an itemset is larger than the user specified minutility then it is an high utility itemset otherwise it is not high utility itemset.

2) Poperty: Sum of itemutility and remainutility Let IS be an itemset. Tge US can be expanded by adding an  item x to IS such that x > I for item I in IS. If the sum of itemutility and remainutility values of item x in the utility list is less than the user specified minutility then all the expansion of x are not high utility itemsets.

FHM algorithm uses these properties to reduce the costly join operation performed in the HUI miner. The FHM introduced a new structure called Estimated Coutility Occurrence Structure (EUCS) to maintain the transaction Weighted Utilization (TWU) for every pair of items. The algorithm scans the dataset twice. During the first scan of the dataset, it calculates the TWU of each item. During the second scan it checks only the item which has TWU greater than minutility and it reorders the items in the transactions based on the TWU of items. The EUCS structure is built as hashmap for every pair of itemset such that TWU(x,y)=z. The hashmap is built for every pair of itemset such that z  0. The utility list for each item is built, which each node contains  the transaction id in which item participates, itemutility and remainutility in the transaction. To find the expansion of item it explores the built single item utility list by adding each item present in search space recursively using the search procedure.

This algorithm uses coocurrence based pruning which uses the EUCS structure. For expansion of an itemset x, it checks all the item y such that y > x, it checks the EUCS hashmap value z for xy if z   minutility then y is added to the extension, if not  all the items which is present after y in the total order is not checked for expansion. This algorithm improves the execution speed of the HUI miner by eliminating the expansion of itemset.



IV. EXPERIMENTAL RESULTS All the algorithms are implemented in Java API, in a  computer system of  1 GB RAM. Real databases foomart and chess are used for comparision. The running time of the each algorithm is calculated in using time command in Java. The size of foodmart database has 4141 transactions and 1559 items. The minmum utility value is varied from 5000 to 25000 in foodmart database to find the execution time. Fig1 and Fig 2 shows that the FHM algorithm performs better compared to HUI miner and Two phase algorithm. The performance is much better when more candidate itemset is generated.

Fig. 1.  Execution Time in foodmart dataset  The size of chess database is 591KB with 3136 transactions and 75 items. In chess data set the minimum utility value is varied from 650000 to 70000 to study the performance of the algoirhms. FHM algorithm performs better in terms of execution time.

The memory usage is measured in JAVA API by varying the minimum utility from 5000 to 25000 in the foodmart dataset. From Fig 3 it can be seen that HUI Miner has low memory utilization. When more number of candidate set are generated the memory usage by FHM is high and linearly decreases with the increase of minimum utility value. The minimum utility value is varied from 650000 to 700000 to record the memory used.In Fig 4. FHM has high memory utilization.

IEEE Sponsored World Conference on Futuristic Trends in Research and Innovation for Social Welfare (WCFTR?16)   Fig. 2.  Execution Time in chess    Fig. 3.  Memory Usage in foodmart    Fig. 4.  Memory Usage in chess    Fig. 5.  Candidate Count generated in foodmart    Fig. 6.  Candidate Count generated in chess  The candidate count generated in algorithm for mining the high utility itemset is measured. For example in Fig 5. the candidate count generated by Two Phase Miner is less compred to the other algorithm. HUI Miner has high candidate generation with less minimum utility and sharply decreases when the minimum utility increases. The HUI miner performs better when minimum utility value is higher. FHM algorithm show linear decrease in candidate count when increasing the minimum utility. Fig 6 shows the candidate set generated in the chess dataset. HUI Miner has low candidate itemset generated.



V. CONCLUSION AND FUTURE WORK From the experiments done we can observe that FHM  miner performs better in terms of execution speed but has high memory utilization and candidate set generation. HUI Miner has less candidate set generation and better memory utilization.

The number of candidate set generation is important to              IEEE Sponsored World Conference on Futuristic Trends in Research and Innovation for Social Welfare (WCFTR?16)  improve the performance of the algorithm. Two phase algorithm does not save the utility of the itemset computed but the FHM and HUI miner computes and saves the utility of each itemset and the values are discarded after the computation of high utility itemsets. These calculated values can be stored for the computation of high utility itemsets whenever there is an insertion and modification in the database thereby decreasing the repetitive computation. Future research can be carried by utilizing the computed utility of itemset in insertion and modification transaction database. Tree based algorithm can be devised with better memory utilization and execution speed.

