Proceedings ofthe 2003 Systems and Information Engineering Design Symposium  Matthew H. Jones, Barbara E. Tawney, and X Preston White, Jr,, e&.

ABSTRACT  Frequent itemsets mining plays an essential role in data mining, but it often generates a large number of redundant itemsets that reduce the efficiency of the mining task. Fre- quent closed itemsets are subset of frequent itemsets, but they contain all information of fiequent itemsets. The most existing methods of frequent closed itemset mining are ap- riori-based. The efficiency of those methods is limited to the repeated database scan and the candidate set genera- tion. This paper proposes a graph-based algorithm for &- ing frequent closed itemsets called GFCG (Graph-based Frequent Closed itemset Generation). The new algorithm constructs an association graph to represent the frequent relationship between items, and recursively generates fre- quent closed itemset based on that graph. It scans the data- base for only two times, and avoids candidate set genera- tion. GFCG outperforms apriori-based algorithm in experiment study and shows good performance both in speed and scale up properties.

1 INTRODUCTION  Frequent itemsets mining plays an essential role in mining associations rules (RAgrawl 1994; Brin 1997; H. Mannila 1997), partial periodicity (J.Han 1999), episodes (H.Mannila 1997) and many other important data mining areas.

Let I={&, i,...i,} be the set of items, D-=(Tl, T2...Tn} be the transaction database, T, (it[l  ... n]) be a record of transaction, it consisted of items from I. Let S be an item- set, S={ii i ?0. The support of S, recorded as szrpp (A?), is the rate of the transactions that contain itemset S. If the support of S is not less than the minimum support thresh- 014 S is called frequent itemset.

However, it is well lmown that mining task often gener- ates large number of frequent itemsets, which reduces the efficiency of association rules mining or other tasks  Instead of mining the complete set of frequent itemsets, we can mine the frequent closed itemsets. The frequent closed itemsets contain all infomation of frequent itemset and have the same power as frequent itemsets. It WiLl lirgely reduce the number of redundant itemset and in- crease the efficiency of mining task.

For example, suppose a database contains only the same two transaction, Tl=(il i2  ... i lm} and T2={il i2 ... ilao}.

The minimum support threshold is 2, 2Im-1 fiequent item- sets will be generated. They are ?til), { i z } ,  ..., {ilw}, { i l i2} ,  (is ilm}, ..., { i l  i2 ... ilw}?. But the only one frequent closed itemset will be generated. It is ?{il i, _.. ilw}?.

Delinition 1: SI and S, are two itemsets, SI&, SI is cov- ered by S, if and only if any transaction that contains SI also contains S,, recorded as SIilSz.

Lemmal: let SI, S,, S3 be itemsets, if SlPS2and S 2 S 3 ,  then SIOS3.

Rational: Let transaction f contains SI, For SIPS2, t also contains S2, for &Os,, so f also contains S3. From definition 1, SIOS,.

Definition 2: S is a itemset, if there does not exist itemset S?, SOS?, i.e., S not covered by any itemset, then S is a closed itemset, if the support of S is not less than the minimum support threshold, then S is a frequent closed itemset.

Lemma 2: S is a frequent itemset, but not closed Then there exists a frequent closed itemset S?, Sils?.

Rational: S is not closed, from definition 2, there exists an itemset SI, SE!S1. If SI is a closed itemset, then from supp (Sl)=supp (9, SI is a frequent closed itemset. If S, is not closed for the same reason, there exists an itemset Szr SIB     Li, Zhai, and Jin  Sz. Since the length of itemsets is limited, we can find itemset S,, S,.,OS,. from lemma 1, SOS,.

Lemma 3: S is a frequent itemset, and then S is a frequent closed itemset if and only if S is not covered by any other frequent closed itemset.

Rational: (1)s is a frequent closed itemset, and then S is not covered by any itemsets. So it is not covered by any frequent closed itemsets.

(2)s is a frequent itemset. If S is not closed, from lemma 2, there must exists a frequent closed itemset that cover it.

That contlct to the condition.

When the concept of frequent closed itemset is intro- duced the mining task is substantially reduced. The num- ber of the frequent itemsets generated in that example is 2Iw-1, but the number of frequent closed itemset is 1. That frequent closed itemset is { il i2 . . . ilw} and it contains all information of frequent itemset. So the frequent closed itemset mining is very important to association rules min- ing or some other tasks.

The most method for the fiequent closed itemsets min- ing are apriori-based such as A-close (Nicolas Pasquier 1999). The efficiencies of those methods are limited to the bottleneck of repeated database scan and the candidate set generation.

This paper studies the efficient mining of frequent closed itemsets in large databases, and proposes a new al- gorithm, called GFCG. Nicolas Pasquier propose an Apri- ori-based mining algorithm, called A-close (Nicolas Pas- quia  1999). Algorithm A-close is taken as comparison in this paper. From the performance study, the new algorithm shows good performance both in speed and scale up prop e.

2 TIIE FREQUENT CLOSED ITEMSET MINING ALGOFUTHM GFCG.

2.1 The construction of graph.

The algorithm GFCG adopts the structure of bit-vector.

Every frequent item has a corresponding bit-vector. The number of bits in each bit-vector equals to the number of transactions in the database. The GFCG scans the database for the first time to find the frequent items, and initiates a bit-vector for every frequent item. AU bits in bit-vector are set to 0. Then the algorithm scans the database for the sec- ond time. At this time the GFCG algorithm sets every bit in bit-vector. If one frequent item appears in kth transaction, then the kth bit of its bit-vector was set to 1. Then the GFCG algorithm does not scan the database anymore.

The notation of bit-vector corresponding to the frequent item i is BV,. The number of 1s in BV, equals to the sup- port of i.

For example, considering the database in table I, each record is a <TID, itemset> pair, where the TID records the identifier of the corresponding transaction, and the itemset records the items purchased in that transaction.

Table 1 : A database of Transaction Itemset r,  2 4 5 400 1 3 5  1 4 5  Let the minimum support threshold be 2. The fie- quent items in the database are items 1,2 ,3 ,4 ,  5 .  The corresponding bit-vectors are BV1=(O1O1 l), BV2=( 10 loo), BV3={ 01 OlO}, BV,=( 1010 l), BV5=(101 11).

Property 1: The support of the itemsetni, iz ... iLOis the number of 1 s in BV,,ABV,~A.. . ABV,~ , where the notation ?A? is the logical AND operation.

When the bit-vectors have been initiated, it is not nec- essary to scan the database anymore. In the graph construc- tion phase, GFCG algorithm constructs an association paph to indicate the relationships between frequent items.

For the association graph, if the number of 1s in BV,dV, ( i > j according to an order L of frequent items) is not less than the minimum support threshold, a directed edge from item i to item j is constructed, which is recorded as i 3 j .

The edge between i, j means the itemset { i, j }  is a frequent 2-itemset. Let the order be L={1,2,3,4,5}, the association graph for the above example is shown in figure 1, and the frequent 2-items are { 1,3}, {1,5}, {2,4}, {2,5}, {4,5}.

BVI (01011)  *:-!::l) BV*(10100) BV3=(01010)  Figure 1: The Association Graph     Li, Zhai,  2.2 The generation of frequent closed itemsets.

When the graph has been constructed, the frequent closed itemsets can be mined recursively based on the bit-vectors and the association graph. The following lemmas are pro- posed.

Lemma 4: { il iz . . . ik) is a Sequent itemset. If there is no association edge starting from item ik to item 21, then {il iz .. . ik u} can't be frequent itemset.

proomBecause there is no association edge starting Som item ik to item 21, {ik, u)  is not frequent itemset. From the property of apriori, any itemset that contains infkequent itemset can't be fiequent itemset. So { i 2 i 2  ... iku} can't be frequent itemset.

According to lemma 4, if we want to extend the fre quent k-itemset {il, i2 . . .  6) to frequent (k+l)-itemset, we only need to check those items that at the end of edge start- ing from item &.  Let 11 be one of such item and the number of 1s in B V , l ~  BVa A...A BV,r A BV,, is not less than minimum support threshold, then (il i, ... ik uf is also a fiequent itemset. Take the database in table 1 as example.

12 4) is a Sequent itemset, and there is directed edge start- ing from item 4 to item 5. We check the number of 1s in BVIz .I 5)=BVZ~BV~BVS.  The number of 1 s in BVfz I 5 )  is 2, not less than the minimum support threshold, so ( 2  4 5 ) is a frequent itemset.

Definition 3: L is an order of fiequent items. AU the items in frequent itemsets are sorted according to the order L. f ={il i, .._ ik} is a fiequent itemset. Then the set of frequent itemset  Si{s I s={il,  i, ,..., i k } u ( i l ,  jz,.. ., j l } ,  i, >jm, I<m<k ,  1 < n < l }  (1)  is called tbe cluster of itemsets that have the same prefix$ S''={S 1 s={il, iz, ..., ik}U(i}, i,>j,l<rn<k} (2)  is called the extended itemset cluster off: Obviously S,'Es, hold.

Lemma 5: I={ i&,  ..., ik} is a set of frequent items. All the frequent itemsets, S, can be represented as  s=s#Ius12u.. .US,% (3) wbere the S,k is the cluster of itemsets that have the same prefix ik.

ProoE Since the items in each frequent itemset are sorted according to order L, then all frequent itemsets can be clas- sified according to the 6rst item. Each class can be repre- sented as S,, &I.

Lemma 6:  f= {il iz . . . 4) is a frequent itemset. S, can be represented as  S'US~,,,~, u < in, 1 i n < k (4)  and Jin  ProoE Same as the proof of lemma 5, S, can be classified according to the item that follows the f immediately, u<i,, 15 n < k.

According to lemma 5 and lemma 6, we can 6nd out all of the frequent itemsets recursively.

Lemma 7: Sl={iliZ ... ik} is a frequent itemset. support of SI is SI. S2={il iz ... ik u} is a frequent itemset. support of S, is 6. If &=Q, then S1=(il iz ... ik} can't be frequent closed itemset.

Proof: Let P=(pl,p2, ...,pa} bethe set oftransactionsthat contains S,, @{SI, qz ,___, qD} be the set of transactions that contains S,. Since the transactions that contain ,!?,must contain SI, Q d ,  Q<& hold. For Q=& we have P=Q. That is to say any transaction that contains SI must contains Sz.

From the deIinition of frequent closed itemset, {il iZ.. . ik} can't be frequent closed itemset.

Based on the above discussions, the GFCG algorithm is described in the following programs.

AlgorithmOGFCG InputOdatabase D, Support thre8hold minsup outputOAl1 of the frequent closed itemset C GFCGI D, minsup, C) (C = 4; F = 4; F = CreateFreWentItemS (D , F, minsup) ; CreateBitvectOr ID, F) CreateGraph(F1 for all items i E F MineSamePrefixFreq lii), B V ~  , i.count, C); )  CreateFrequentItemS (D , F , minsup) [ / / N  is number of transactions F = 4; f o r (  j=1; j i N  ; j + t )  ( for all items i in jth transaction 1 i.cOunt ++: ) F=(i I i is an item and i.COUnt >minsupJ;  'CreateBitVector(D, F)  for all items i in F  for( j-1: jrN : j++) 1  (  allocate BV, and set all bit in BV5 to 0;  for all items i in jth transaction ( set the jth bit of BV, to 1 ) I  CreateGraph IF) let L be an order of the items in F; for all frequent items i S F for all frequent i t e m  j E F  i > j  if (number of 1 in BV, nBV, ) I m i n s u p  then i.link.add(j); //create edge i-j )  //BV, is the bit vector of I //nsvp is the support Of I MinesamePrefixFreq( I, BV,, naYpp, C)     Li, Zhai, and Jin  BOO5 COvered=FALSE;  f o r  all j, jsi.link ( T =  I ?(j) ; BV,?=BV, Bvl ;  let nneuauPp he the number Of 1s i n  BVr,i  let i be the last item in itemset I ;  if (nn.x,upe L minsup) ( if nn-supp = nsnm 1 ( covered =TRUE : 1 MineSamePrefixFreq(7, BVI?, nneurvpp, C) ;  ) if (coveced=FALSE 1  i f  ( I is not covered by f, f < C  1 C ? i C U I  ;   The pnrpose of using the parameter BVI and nW in function MineSamePrefixFreq is to acquire the bit-vector and the support of itemset Z?s extension conveniently. Us- ing the two parameters, we can avoid generating bit-vector and support of new itemset from the beginning.

From lemma 5 and lemma 6, we know that GFCG al- gorithm can finds out all frequent closed itemsets through the method of MineSamePrefixFreq. Let the order of the frequent closed itemsets be found out be L. Z={i, i2 . . .  6 )  is the frequent itemset current find, Sbefmis the set of itemset before Z in L, Sa, is the set of itemsets after Z in L.

Lemma 8: Let S; be the extended itemset cluster of Z, then there does not exist frequent itemset I that covers Z, P E  Si, if and only if, there does not exist PI that covers Z, P ? E  Sa, Proof : (1)From the way that GFCG finds frequent itemsets, we have the relationship S t a h .

(2)If th&e exists a kquent closed itemset PIES.~~ , I? covers Z, then PIES,, Sf is the cluster of itemsets that have the same prefix Z. Let P?={it i2  ... i k  1 ~ 0 ? 1  j ,  ... j l } , then P={i l  i2. . .  ik j ,  )covers Ztoo, rd;. That conflict to the fact that there does not exist frequent itemset P that covers Z, F E Si.

Lemma 9: Algorithm GFCG can finds out all frequent closed itemsets.

PrwfOFrom the lemma 3, itemset Z is a frequent closed itemset if and only if Z not covered by any other frequent closed itemset. That means Z is neither covered by any fre- quent closed itemset in S,,., nor covered by any frequent closed itemset in Sa- From lemma 8, if Z is not covered by any itemset of extended itemset cluster of Z, we can say Z is not covered by any frequent closed itemset in In function MineSamePrefixFreq?s 3th step, we set the vari- able ?coveres? to FALSE. in loth step, if Z is covered by any itemset of the extended itemset cluster of I, then set the variable ?covered? to TRUE. Z can?t be frequent closed itemset. equals to the current set of frequent closed  itemsets C that have been found out. If we can confirm that Z not covered by any itemset of C, Z is frequent closed itemset. From the discussion above, GFCG can finds out all the frequent closed itemset.

3. EXPERIMENT EVALUATION AND PERFORM- ANCE STUDY  In this section, we present a performance comparison be- tween the GFCG algorithtn and the Apriori-based algo- rithm A-close. AU of the experiments are performed on 300MHz PC machine with 12s megabytes main memory, nmning on Microsoft Windows Me. AU the programs are ulitten in Microsofti Visual C++6.0. The data set used for performance study include one real data set and two syn- thetic data sets. The real data set is the Traditional Chinese Medicine (TChQ database, which has 1378 prescription records, each prescription has several drugs. The synthetic data sets are generated using the procedure described in (R.Agrawl 1994). The parameters of the synthetic data sets are described in table 1. We first test the speed property of the two algorithms on the real and synthetic data set by changing the minimum support threshold The results of the experiments are shown in figure 2 ,3  and 4. Then we test the scale up property of the two algorithms by fixing the minimum support threshold to specified value, I%, and changing the size of the data set. The results of the experi- ments are shown in figure 5.

From the above mentioned performance study, we can see that GFCG algorithm has good performance both in speed and scale-up property.

The good performance of GFCG comes from the fol- lowing reasons. Firstly, GFCG adopts d e  technique of bit- vector, which substantially compresses the information of the transaction database. Secondly, the construction of as- sociation graph makes the algorithm avoid candidate set generation. The generation of new fiequent closed itemset can be guided by the association graph efficiently. Fur- thermore, by the construction of graph, the times of data- base scan are substantially reduced. Only twice database scans are needed. Finally, the concept of extended itemset cluster also reduces the search space when judge weather one frequent itemset is closed.

Table 2: The Parameter of s thetic data set Parameter T10.14.D5K T20.16.DlOK  Total item 1000 1000 Number of transaction 5K 1 OK  W] Avera e len 4. CONCLUSION  For the task of mining frequent closed itemset, this paper proposes a graph-based algorithm named GFCG. The new algorithm adopts the technique of bit-vector, and constructs an association graph to represent the frequent relationships  \ 22    Li, Zhai, and Jin  between Sequent items. The GFCG generates Sequent closed itemset based on that association graph. GFCG also introduces the concept of extended itemset cluster, which largely reduces the search space. The experiment evalua- tion and performance study on real data set and synthetic data set show that the new algorithm outperforms aprimi- based algorithm and has good performance both in speed and scale up property.

Figure 2: Performance study on TCM database  Figure 3: Performance study on T20.16.DIOK data set  Figure 4: Performance study on T10.14.DSKdata set  s." .,;,... 4 ''.. , , , , , , 1  1 2  3 4 5 6 7 8 s 10  Il"mb.rd*..nmlon Ili,  Figure 5: Scales up property study  REFERENCE  RAgrawl and R.Srikant. Fast Algorithm for Mining Association Rules. In Proc 1994 Int. ConJ Veiy Large Data Base, In VLDB'94, page 487-499, Santiago, Chile, September 1994.

S. Brin, R. Motwani, and C. Silverstein. Beyond market basket: Generalizing association rules to correlations.

In SIGMOD'97, page 265-276,1997  H. Mannila, H. Toivonen, and A. I. Verkamo. Efficient al- gorithms for discovering association rules. In Proc.

. AAA1'94 Warbhop Knowledge Discovery in Database (KDD'94), pages 181-192, Seattle, WA July 1994.

J.Hm, G.Dong, and Y.Yin. Efficient mining of partial pe- riodic patterns in time series database. In Proc. 1999 int.ConJ Data Engineering (ICDE '99), pages 106- 115, Sydney. Australia, April 1999.

H.Mannila, H Toivonen, and A. 1. Verkamo. Discovery of frequent episodes in event sequences. Data Mining and Knowledge Discovery, page 259-289, 1997.

