Implementation of Fuzzy Control for Surface Platforms in A Computer  Generated Forces Toolkit

Abstract   Realistic models and realistic control is vital to reach a sufficient fidelity in military simulation projects including surface platforms. In this study, a fuzzy logic controller (FLC) is implemented in conjunction with environment models and platform motion models possessing high-fidelity. The former one considers waves, current, wind, season, day and night while the latter trusts on complex motion equations, including the effect of hydrodynamic force-moments and their high performance is proved by comparison with real cruise data. The FLC is optimized with a recently introduced method, namely Big Bang-Big Crunch algorithm. After all, the controllers are integrated to the component architecture of VR-Forces, which is a commercial framework for developing Computer Generated Forces (CGF) applications.

1. Introduction   To reach a sufficient fidelity for a training military simulation including surface platforms, the need of realistic models and realistic control is vital. In our study, we used an environmental model and platform motion models with high-fidelity. The mathematical surface platform model introduced in [1] is used to develop the FLC and PD controllers. The former one considers waves, current, wind, season, day and night while the latter trusts on complex motion equations, including the effect of hydrodynamic force-moments and their high performance is proved by comparison with real cruise data. To reach our purpose, a realistic control model is necessary as well, which is the main focus of our study.

In this work, ?controller? is actually a simulation of quartermaster of the platform. That is to say, the design objective is not optimizing an autopilot. So, a fuzzy logic controller (FLC) capable of simulating human  expert behavior seems to be a proper choice. FLCs are widely used for that purpose in the literature [3, 4].

One can model the controller by simply writing down the linguistic rules that also direct a human operator.

Besides modeling a controller close to human (operator) nature, fuzzy logic (FL) is also applied for auto-steering purposes. Some applications show that FLC performance is already superior in both course changing and course keeping duties than classical PID [3, 4, 5, 6, 8, 9]. FLCs outperform classical PIDs especially for changing environmental conditions, where online tuning of PID control parameters are needed [5, 6, 8].

A flexible fuzzy logic library (FLL) is implemented in the C++ programming language, which is used to construct the optimized FLCs. The controllers are integrated to the component architecture of VR-Forces, which is a commercial framework for developing Computer Generated Forces (CGF) applications [10].

The rest of the paper is divided into 6 sections. In Section 2, surface platform motion model is given. In section 3 and 4, architecture and optimization of FLC is detailed and simulation results are given. Section 5 is dedicated to implementation of FLL. Integration of the library with the ship model is in Section 6. Finally possible extensions and conclusions are given in Section 7.

2. The Surface Platform Motion Model  2.1. Surface Platform Motion Equations   The motion of surface platforms in 6 Degree of Freedom is considered since six independent coordinates are necessary to determine the position and orientation of a rigid body. The description of degree of freedom and the respective notation are shown in Table 1. [11].

CIMCA 2008,  IAWTIC 2008,  and ISE 2008  DOI 10.1109/CIMCA.2008.175     Table 1. Degree of Freedom Description and Notation DOF 1 2 3 4 5 6 Description Surge Sway Heave Roll Pitch Yaw Axis x y z x y z Forces and moments  X Y Z K M N  Linear and angular veloc.

u v w p q r  Positions and Euler angles  x y z ?   Two coordinate frames are necessary to define the  motion of surface platforms. (Figure 1)    Figure 1. Coordinate System   The moving coordinate frame X0 Y0 Z0 is fixed to the vehicle and is called the body-fixed reference frame. The origin O of this frame is usually chosen to coincide with the center of gravity (CG) of the surface platform. The motion of the body-fixed frame is described relative to an inertial reference frame X Y Z.

[12,13]  Representing the motion equations in the Cartesian system of coordinates and defining xG, yG and zG as the position of the ship?s CG, the well known motion equations of a rigid body are giving by the following [13]  Surge: 2 2[ ( ) ( ) ( )]G G GX m u qw rv x q r y pq r z rp q= + ? + + + ? + + (  1) Sway:  2 2[ ( ) ( ) ( )]G G GY m v ru pw y r p z qr p x qp r= + ? ? + + ? + + (2)  Heave: 2 2[ ( ) ( ) ( )]G G GZ m w pv qu z p q x rp q y rq p= + ? ? + + ? + +  (3) Roll:  ( ) [ ( ) ( )]X Z y G GK I p I I qr m y w pv qu z u ru pw= + ? + + ? ? + ? (4)  Pitch: ( ) [ ( ) ( )]y x Z G GM I q I I rp m z u qw rv x w pv qu= + ? + + ? ? + ?  (5) Yaw:  ( ) [ ( ) ( )]Z y x G GN I r I I pq m x v ru pw y u qw rv= + ? + + ? ? + ?  (6)  2.2. Simplifying Assumptions   Simplifying assumptions used in this study are following [14]:  ? The rotational velocity and acceleration about the y-axis are zero (q, q ).

? The translational velocity and acceleration in the z direction are zero. (w, w = 0).

? The origin of the fixed body is the center of gravity (CG) and this point is the center of motion.

? The vertical center of gravity, (VCG), is on the centerline and symmetrical (yG=0)   2.3. Simplified Motion Equations   Applying simplifying assumptions to the general surface platform motion equations, the following simplified equations of motion are obtained Surge:       2[ ]G GX m u rv x r z rp= ? ? +                (8)  Sway:        [ ]G GY m v ru z p x r= + ? +                     (9)  Roll: ( )]X GK I p mz u ru= ? +                       (10)  Yaw: ( )Z GN I r mx v ru= + +                         (11)  2.4. Nonlinear Equations of Motion   A nonlinear maneuvering model is obtained by combining equations of hydrodynamic forces and moments [1] and the environmental disturbance with 4 DOF simplified equations of motion. To simplify the analysis even further, equations are converted to a non- dimensional form [15]. All the equations are in the non-dimensional form, denoted by the symbol ( ).

2 2   ( ) (1 ) ( )  sin  vr vv rr  RX N  X X u t T J X v r X v X r  X c F??? ?  ? ? ? ? ? ? ? ? ? ? ?= + ? + + +  ? ? ? ?+ + (21)     3 3 2  2 2 2 2 2  (1 ) cos  v r p vvv rrr vvr  vrr vv v rr r  H N  Y Yv Y r Y p Y Y v Y r Y v r  Y v r Y v Y v Y r Y r  a F  ?  ? ?? ? ??  ?  ? ? ? ?  ?  ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?= + + + + + +  ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?+ + + + +  ? ?+ +  (22)  3 3 2  2 2 2 2 2  (1 ) cos  v r p vvv rrr vvr  vrr vv v rr r  H R N  K Kv K r K p K K v K r K v r  K vr K v K v K r K r  a z F  ?  ? ?? ? ??  ?  ? ? ? ?  ?  ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?= + + + + + +  ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?+ + + + +  ? ? ?? +  (23)  3 3  2 2 2 2  2 2 ( ) cos  v r p vvv rrr  vvr vrr vv v  rr r R H H N  N N v N r N p N N v N r  N v r N v r N v N v  N r N r x a x F  ?  ? ??  ? ??  ?  ? ?  ? ? ?  ? ? ? ? ? ? ? ? ? ? ? ? ?= + + + + +  ? ? ? ? ? ? ? ? ? ? ? ?+ + + +  ? ? ? ? ? ? ? ? ? ?+ + + +  (24)   3. Architecture of the FLC   Quartermaster controls the heading and the speed of  vessels by two actuators, the rudder angle and the shaft speed respectively. The latter two are the outputs of our FLCs. We preferred to use FLCs derived from classical controllers, as in many applications in literature [3, 5, 6] to exploit both the advantages of fuzzy logic and classical control. As a result, the error between the desired and the actual heading and speed are used as controller inputs with their integrals and derivatives.

Overall control system model is multi-input-multi- output (MIMO) FLC with four inputs and two outputs.

But two different FLCs for controlling each output parameters are easier to design and optimize, still with sufficient performance. As a result we have built a multi-input-single-output (MISO) PD type FLC for controlling the direction and a MISO PI type FLC for controlling the speed of the vessel. The closed loop (simulink) model of the heading control is introduced in Figure 2. (The model for the speed control is analogous and therefore omitted) The MATLAB Function in Figure 2 simulates the cruise process by using a physical model with high fidelity. In course control, there is no much noise or sharp characteristics and we took advantage of anticipatory nature of derivative term in the controller. On the other hand, speed control is affected by course alterations (disturbance). That is why a PI-FLC is implemented.

PID-FLC is not implemented to improve algorithm run-time.

Figure 2. Simulink Model of the Fuzzy heading  controller   The universe of discourse is chosen to be [-1, 1] interval. The physical inputs and outputs are scaled to this range through scaling factors.

Scaling factors can be divided into two groups as input scaling factors (ISFs) and output scaling factors (OSFs). ISFs normalize the real world inputs to the range MFs are defined. OSF is used to change the normalized control effort to its practical value. The relation between real and normalized values of the parameters can be simply given as:   . .

*  ( ) ( )* ( ) ( )*  FLC e  FLC FLCFLC FLC de  FLC FLC o  e e k  e e e e k u u u u k  =  ? = ? ? = ?    where FLCe  and .

( )FLC FLCe e?  are the normalized parameters entering FLC controller, ( )FLC FLCu u?  is the normalized FLC output; e, e?  and  u? are respective actual outputs, and ek  dek , ok  are the error scaling factor, change of error scaling factor and the control effort change scaling factor respectively.

There is no general rule for scaling factor selection in FLCs. It is a global optimization problem which is quite tedious most of the time. In the specific problem at hand, we searched the three parameters by utilizing Big Bang ? Big Crunch (BB-BC) optimization algorithm. BB-BC, proposed by Erol and Eksin [2] is a global optimization method that relies on nature inspired heuristics, namely, the Big Bang ? Big Crunch Theory. The algorithm generates random points in the     Big Bang phase and shrinks those points to a single representative point via a center of mass or minimal cost approach in the Big Crunch phase. It is reported to be capable of quick convergence even in long, narrow parabolic shaped flat valleys or in the existence of several local minima. By using the method, we sampled some reference courses (in the physically allowable range), and found corresponding scaling factors in relatively short time.

The inputs and the outputs are defined by seven linguistic variables over the specified range, namely, NL (negative large), NM (negative medium), NS (negative small), Z (zero), PS (positive small), PM (positive medium), PL (positive large). For input representation we used symmetric triangles (except the membership functions (MFs) at the two extreme ends) with equal base and %50 overlap with the neighboring MF (Figure 3). The rule base for FLC has the most unbiased symmetric structure and consists of 49 rules.

(Table 2)   Table 2. The rule base for Fuzzy Logic heading and  speed contollers   e/e NL NM NS Z PS PM PL PL Z PS PM PL PL PL PL PM NS Z PS PM PL PL PL PS NM NS Z PS PM PL PL Z NL NM NS Z PS PM PL NS NL NL NM NS Z PS PM NM NL NL NL NM NS Z PS NL NL NL NL NL NM NS Z   For output representation we preferred singleton  MFs to decrease computational complexity. Figure 3 shows the MFs for the inputs and the outputs of FLCs used.

? (e and ?e)  (e and ?e)  ? (? u)  ? u   Figure 3. The input and output membership functions for  the Fuzzy Logic heading and speed controllers   4. Simulation Results   Figure 4 and Figure 5 show the change of heading of the ship with respect to time for two extreme cases.

The Fuzzy Logic heading controller is compared with manually tuned PD controller in which classical Ziegler-Nichols method is utilized as a starting parameter set. In both cases, the initial heading angle is considered as zero. In the first case (Figure 4) the initial shaft speed of the vessel is at maximum level (240 rpm) and the ship is forced to a 5? (small) rotation, while in the second case the initial shaft speed is 70 rpm (resulting a slow speed value of about 5 knots) and the desired rotation is 180? (maximum possible change). The result obtained by the Fuzzy controller is represented by solid lines, while the dashed lines are the results of the classical PD controller.

0 50 100 150 200 250 300 350 400 450 500 -1          time/[sec]  he ad  in g  an gl  e/ [?  ]   Figure 4. Change of heading of the ship in time, controlled by a Fuzzy Logic and a classical PD controller (dashed line)  in a high speed-small rotation case  0 100 200 300 400 500 600 700 800 900 1000 -50       he ad  in g  an gl  e/ [?  ]  time/[sec]   Figure 5. Change of heading of the ship in time, controlled     by a Fuzzy Logic and a classical PD controller (dashed line) in a low speed-large rotation case   Results show that in both extreme cases, the  designed fuzzy logic rotation controller is superior to classical PD control even in auto steering only. So it actually seems to be a good choice to use fuzzy logic for simulating quartermaster behavior, since FLC?s are also superior for designing expert systems to simulate human operators.

Results also approve our choice of using two MISO fuzzy controllers for controlling speed and heading distinctly. Change in speed doesn?t have a considerable effect on heading control.

5. Implementation of FLL   A generic FLL has been implemented in C++ language for FLC. Configuration parameters for the library such as input and output numbers, rules and for each input and output; name, type and attributes of membership are kept in a XML file. In order to configure different type of rules, rule schemes are defined first and then rules are configured with these schemes. A part of configuration file is shown in Figure 5.

<Counts> <Input>2</Input> <Output>1</Output> <RuleNumber>21</RuleNumber> </Counts> <IOs> <IO> <type>Input</type> <name>error</name> <membershipType>triangle</membershipType> <membershipPartCount>7</membershipPartCount > <start>-1</start> <finish>1</finish> <triangles> <triangle>1;-1;-0.75;-0.5</triangle> ...

</triangles> ...

</IOs> <RuleSchemes> <RuleScheme> <Schemeid>1</Schemeid> <IO>error</IO> <IO>and</IO> <IO>errordot</IO> <IO>controloutput</IO> </RuleScheme> ...

</RuleSchemes>  <Rules> <Rule>1;1;1;1</Rule>  <Rule>1;2;1;1</Rule> ...

</Rules>  Figure 5. A part of FFL configuration file   6. Integration of FLL to Ship Model  In this study, VR-Forces framework has been  utilized for implementing the CGF and GUI applications. The CGF engine is responsible for the simulation of the entities by the aid of the VR-Forces component architecture.  In this architecture, there are three types of components: namely controllers, actuators and sensors. Controllers receive information about the tasks assigned to entities by the user via the GUI. They also control the motion of the entities by supplying the required parameters (heading, speed, etc) in order to fully realize the task.  There are different controllers each of which are specialized for a certain kind of task. Actuators obtain the necessary parameters from the controllers and realize the entity actions such as entity motion, etc.

GUI application, also called front-end, supplies communication between user and CGF engine. User enters commands for the scenario preparation, run control, etc. The user commands for building a scenario can be adding and deleting entities, assigning tasks to entities such as move along a given route, move to a specific point, move towards a given bearing. Whenever a task command is inputted from GUI, a data interaction in the form of a VR-Forces message is sent to CGF engine.

The motion model for the ship has been developed as a VR-Forces independent software module and has been integrated to the actuator component as a composite object.  Similarly, FLL has been embedded in VR-Forces heading, speed and depth controller components. An example task is handled as follows; the task controller which is responsible for adjusting the heading for the current command receives the point or bearing to head for. In each simulation frame time, the heading controller supplies FLL with desired heading along with the derivative of successive heading values. After that, FLL calculates the rudder angle for the ship movement. This rudder angle is taken by the actuator and sent to the ship motion module to calculate the next position of the ship under consideration. These steps are repeated until the task is accomplished.

7. Conclusion and Future Works       In this work a simulation model is given from scratch: The high fidelity ship model is given with the motion dynamics and a fuzzy logic controller designed to mimic captain control strategy. In the search for the scaling factors, where there is a lack of systematic method, recently introduced fast convergence-proven big bang-big crunch optimization method is utilized.

The whole design is integrated to the component architecture of VR-Forces, which is a framework for developing Computer Generated Forces (CGF) applications.

The system response is influenced by the environmental condition and maneuver characteristics (i.e. turning amount, speeding up start and end points vs.) although we have designed our control to cover all influences, a more specified design can upgrade the performance in each different case. To provide this a supervisor FLC controller can be designed to choose specific control strategy/controller/parameter set.

Also, the fuzzy controller might be converted into a simpler controller interpolating over the control surface, which would further decrease computational complexity and the difference of the results would be negligible, thanks to the smooth structure of the control surface.

8. References  [1] Haklidir, M., Aldogan, D., Tasdelen, I., High Fidelity Modeling and Simulation of Surface Platforms in a Computer Generated Forces Toolkit, The Society for Modeling & Simulation International [SCS] 2008 Summer Computer Simulation Conference (SCSC'08), Edinburgh, Scotland, 16- 19 June 2008.

[2] O. K. Erol, . Eksin, ?A new optimization method: Big Bang?Big Crunch?, Advances in Engineering Software vol.

37, 2006, pp. 106?111.

[3] Roland Stelzer, Tobias Proll, and Robert I. John, ?Fuzzy Logic Control System for Autonomous Sailboats?, Fuzzy Systems Conference, Fuzz-IEEE 2007, 2007, pp 1-6.

[4] Songtao Zhang, Guang Ren, ?Backstepping Approach to Ship Steering Autopilot based on Fuzzy Adaptive Control?, Proceedings of the 6th World Congress on Intelligent Control and Automation, 2006.

[5] Minh-Duc Le, Si-Hiep Nguyen, Lan-Anh Nguyen, ?Study on a new and effective fuzzy PID ship autopilot? Artif Life Robotics, 8:197?201, 2004.

[6] Rajani K. Mudi and Nikhil R. Pal, ?A Robust Self- Tuning Scheme for PI- and PD-Type Fuzzy Controllers?,  [7] Hakk  Murat Gen?, brahim Eksin, M?jde G?zelkaya, Engin Ye il, ?A rule-base modification for time delay systems?, ASC 2006, The 10th IASTED International  Conference on Artificial Intelligence and Soft Computing, Palma de Mallorca, Spain.

[8] Wang Minghui, Yu Yongquan, Zeng Bi, ?Ship Steering System Based on Fuzzy Control Using Real-Time Tuning Algorithm?, Proceedings of the Third International Conference on Information Technology and Applications (ICITA?05).

[9] Minghui Wang , Yongquan Yu, Bi Zeng, ?Ship Steering System Based on Fuzzy Control Using Real-Time Tuning Algorithm?, Proceedings of the Third International Conference on Information Technology and Applications (ICITA'05) Vol. 2, 2005, pp. 577 ? 580.

[10] VR-Forces Developer?s Guide. Mak Technologies.

[11] SNAME(1950), The Society of Naval Architects and Marine Engineers. Nomenclature for treating the motion of submerged body through a fluid, Technical Research Bulletin No. 1-5.

[12] Sicuro, D. L. L., Physically Based Modeling And Simulation Of A Ship In Open Water 3-D Virtual Environment, Master Thesis, Naval Postgraduate School, Monterey, California, 2003.

[13] Fossen, T. I., Guidance and Control of Ocean Vehicles, John Wiley & Sons, 1994.

[14] Logsdon, M., ?Coupled Roll and Directional Stability Characteristics of Surface Ships,? Master?s Thesis, Naval Postgraduate School, Monterey, CA, June 1992.

[15] Son, K. H. and Nomoto, K., On the Coupled Motion of Steering and Rolling of a High Speed Container Ship, Naval Architect of Ocean Engineering, Vol. 20, 1982, pp. 73-83.

