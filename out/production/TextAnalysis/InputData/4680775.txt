ARCA: An Algorithm for Mining Association Rules based Concept Lattice

Abstract?Association rule discovery is one of kernel tasks of data mining. Concept lattice, induced from a binary relation between objects and features, is a very useful formal analysis tool.

It represents the unification of concept intension and extension.

It reflects the association between objects and features, and the relationship of generalization and specialization among concepts.

There is a one-to-one correspondence between concept intensions and closed frequent itemsets. This paper presents an efficient algorithm for mining association rules based concept lattice called Arca (Association Rule based Concept lAttice). Arca algorithm uses concept-matrix to build a part of concept lattice, in which the intension of every concept be put into one-to-one correspondence with a closed frequent itemset. Then all association rules are discovered by 4 operators which are defined in this paper performed on these concepts.

Index Terms?Concept lattice, rank of matrix, formal concept analysis.



I. INTRODUCTION  Association rule mining from a transaction database has been a very active research area since the publication of the Apriori algorithm [1]. Several improvements to the basic algorithm and many new approaches [2]?[10] have been proposed during the last decade. With the development of research, Association rule discovery is one of kernel tasks of data mining.

Formal Concept Analysis (FCA) was developed by Pro.

Wille in 1982 [11]. Concept Lattice, the core data structure in Formal Concept Analysis, has been widely in machine learning, data mining and knowledge discovery, etc. Every node of concept lattice is a formal concept consisting of extent and intent. Concept lattice embodies the relations between extension and intension. Here is a one-to-one correspondence between concept intensions and closed frequent itemsets.

There are various algorithms [12]?[16] of association rule mining using concept lattice. However, These algorithms need to build a complete concept lattice. Based on CMCG algorithm [17], this paper presents an algorithm Arca of association rule mining using a part of concept lattice.

The paper is organized as follows. Section 2 recalls basic definitions of association rule and concept lattice. Section 3 discusses Arca algorithm and four operator. Section 4 gives an experimental evaluation on the time spent of Arca algorithm and Apriori algorithm. Section 5 concludes the paper.



II. THE DEFINES OF ASSOCIATION RULE AND CONCEPT LATTICE  Let I = {i1, i2, . . . , im} be a set of m items.Let (T ) = {t1, t2, . . . , tn}, the task-relevant data, be a set of database transactions where each transaction t is a set of items such that t ? I . Each transaction is associated with an identifier, called TID. Each transaction t consists of a set of items I from I .

If |I| = k, then I is called a k ? itemset. A transaction t is said to contain I if and only if I ? t. An association rule is an implication of ten form I1 ? I2, where I1, I2 ? I and I1 ? I2 = ?. The rule I1 ? I2 holds in the transaction set T with support s, where s is the percentage of transactions in T that contain I1 ? I2 (i.e., both I1 and I2). This is taken to be the probability, P (I1?I2). The rule I1 ? I2 has confidence c in the transaction set T if c is the percentage of transactions in T containing I1 that also contain I2. This is taken to be the conditional probability, P (I2|I1). That is,  support(I1 ? I2) = P (I1 ? I2) (1)  confidence(I1 ? I2) = P (I2|I1) (2) Given the user defined minimum support minsupp and mini- mum confidence minconf thresholds. If the support of I ? t itemset I be greater or equal to minsupp, I is called a frequentitemset.

Example 2.1: For T = {A,B,C,D,E},I = {A,B,C,D,E}, Table I represents a transaction database.

Definition 2.1: A data mining context is a triple:D = (T ,I ,R), where I and T are two sets, and R is a relation between I and T . T = {t1, t2, . . . , tn}, each ti(i ? n) is     TABLE I A TRANSACTION DATABASE  TID Iterms  1 A CD  2 BC E  3 ABC E  4 B E  5 ABC E  TABLE II A TRANSACTION DATABASE  A B C D E  1 1 0 1 1 0  2 0 1 1 0 1  3 1 1 1 0 1  4 0 1 0 0 1  5 1 1 1 0 1  Fig. 1. A context-matrix of the data mining context showed in TableII  called an object. I = {i1, i2, . . . , im} , each ij(j ? m) is called an attribute.

In a data mining context D = (T ,I ,R), if (t, i) ? R, we say that the attribute i is an attribute of the object t, or that t verifies i. In this paper, (t, i) ? R is denoted by 1, and (t, i) /? (R) is denoted by 0. Thus, a data mining context can be represented by a matrix only with 0 and 1. We say that the matrix is the context-matrix of D .

Example 2.2: Table II represents a data mining context corresponding with the transaction database showed in Table I.

Example 2.3: Fig 1 a context-matrix of the data mining context showed in Table II.

Definition 2.2: Let D = (T ,I ,R) be a data mining context. We define a function f(T ) that produces the set of their common attributes for every set T ? T of objects to know which attributes from I are common to these entire objects: f(T ) = {i ? I |?t ? T , (t, i) ? R}  Dually, we define Y for subset of attributes I ? I , g(I) denotes the set consisting of those objects in T that have all the attributes from I : g(I) = {t ? T |?i ? I , (t, i) ? R}.

Let h(I) = f(g(I)).

These two functions are used to determine a formal concept.

Definition 2.3: Let D = (T ,I ,R) be a data mining  context. A pair (T, I) is called a formal concept of D , for short, a concept, if and only if T ? T , I ? I , f(T ) = I and g(I) = T . T is called extent, I is called intent.

Definition 2.4: Let D = (T ,I ,R) be a data mining  Fig. 2. A Concept lattice for the context of TableII  context. The set of all concepts of D is denoted by B(D), C1 = (T1, I1) and C2 = (T2, I2) are two concepts in B(D). An partial ordering relation (?) is defined on B(D) by: C1 < C2 ? T1 ? T2 or C1 < C2 ? I1 ? I2  We say that C2 is called a superconcept of C1 and C1 is called a subconcept of C2. B(D) and the partial ordering relation (?) form a compete lattice called the concept lattice of D and denoted by L(D).

Example 2.4: Fig 2 a concept lattice for the context of Table II.

Definition 2.5: Let D = (T ,I ,R) be a data mining context. C1 and C2 are two concepts in B(D). If C1 < C2 and there is no concept C3 in B(D) fulfilling C1 < C3 < C2, C1 is called a lower neighbor of C2 , denoted by C1 ? C2, and C2 is called a upper neighbors of C1.

The set of all lower neighbors of a given concept is a subset of the set consisting of all subconcepts of it.

Definition 2.6: Let I ? I be a set of items from D = (T ,I ,R). The support count of the itemset I in D is:  support(I) = |g(I)| |T | (3)  Definition 2.7: Let I ? I be a set of items from D = (T ,I ,R). If support(I)minsupp, I is called a frequent itemset.

Definition 2.8: Let D = (T ,I ,R) be a data mining context. For given a item i ? I , if the count of 1s in the corresponding column of the item i in the concept-matrix of D is n we say that the rank of item i in concept-matrix of D is n, denoted by r(i) = n. If m = max{r(i)|i ? I }, we say that the rank of the data mining contgext D is m.

Definition 2.9: Let D = (T ,I ,R) be a data mining context. The concept-matrix of C = (T, I) is the matrix consisting of these rows what are the corresponding rows of the each element t in set T in context-matrix of D .

Example 2.5: Fig 3 represents the concept-matrix of con- cept (135, AC).

Fig. 3. The concept-matrix of concept (135, AC)  Definition 2.10: Let D = (T ,I ,R) be a data mining context. C = (T, I) is a concept in B(D). If the count of 1s in the corresponding column of the item i in the concept-matrix of C is n, we say that the rank of item i in concept-matrix of concept C is n, denoted by RC(i) = n.

If m = max{RC(i)|i ? I , i /? I}, we say that the rank of concept C is m.

Property 2.1: The count of objects of subconcept of con- cept C is equal or lesser than m.

Definition 2.11: Let D = (T ,I ,R) be a data mining con- text. C = (T, I) is a concept in B(D).Given subset I1 ? I , gC(I1) denotes the set consisting of those transactions in T that have all the itemsets from I : gC(I1) = {t ? T |?i ? I1, (t, i) ? R}  Definition 2.12: Let D = (T ,I ,R) be a data mining context. C = (T, I) is a concept in B(D).If |T | ? |T | ? minsupp. C is called a frequent concept.

Property 2.2: If C = (T, I) is a frequent concept, I is a frequent itemset.

Proof: |T | ? |T | ?minsupp, so |T ||T | ? minsupp. And T = g(I), so |g(I)||T | ? minsupp. Then I is a frequent itemset.

Theorem 2.1: Let D = (T ,I ,R) be a data mining context. C = (T, I) is a concept in B(D). The rank of concept C is m. For ?i ? {i|RC(i) = m, i ? I }, C1 = (gC(i), f(gC(i))). Then C1 is a lower neighbor of C.

Proof: By Definition 2.10 And Definition 2.11, we have |gC(i)| = m. Suppose there exist C2 = (T2, I2), where C1 ? C2. We can obtain m = |gC(i)| < |T2| < |T |. By Property 2.1, we have |T2| ? m. This result contradicts with m < |T2|.

Then C1 is a lower neighbor of C.

Theorem 2.2: Let D = (T ,I ,R) be a data mining context. C = (T, I) is a concept in B(D). The rank of concept C is m. C1 = (gC(i1), f(gC(i1))) is a subconcept of C, where i1 ? I and RC(i1) = m1 > 0. For ?C2 ? {C2 = (T2, I2)|C2 < C,m1 < |T2|}, there NOT exist gC(i1) ? T2.

Then C1 is a lower neighbor of C.

Proof: Suppose there exist C3 = (T3, I3), where C1 < C3 < C, We have m1 = |g(i1) ? T | < |T3| < |T |, it implies that C3 ? {C2 = (T2, I2)|C2 < C,m1 < |T2|}, and NOT gC(i1) ? I3. On the other hand C1 < C3 < C implies that gC(i1) ? I3. This result contradicts with NOT gC(i1) ? I3.

Then C1 is a lower neighbor of C.

Definition 2.13: An association rule is an implication be- tween itemsets of the form r : I1 ? I2, where I1, I2 ? I and I1 ? I2 = ?. I1 is called the antecedent of r and I2 is called the consequent of r. Below, we define the support and  Fig. 4. A concept lattice while minsupp = 0.4  TABLE III BASIC ASSOCIATION RULES FROM FIG 4 WITH minconf = 0.5  basic association rule minimum support  ? ? BE 4/5 ? ? C 4/5  BE ? C 3/4 C ? BE 3/4 C ? A 3/4  BCE ? A 2/3 AC ? BE 2/3  confidence of an association r:  support(r) = |g(I1 ? I2)| |T | (4)  confidence(r) = support(I1 ? I2)  support(I1) = |g(I1 ? I2)| |g(I1)| (5)  Mining association rules is to find all rules r, where support(r) ? minsupp and confidendce(r) ? minconf .



III. ARCA ALGORITHM  When a concept lattice is built, each concept C = (T, I) holds |T | ? minsupp.

Example 3.1: Fig 4 represents a concept lattice while minsupp = 0.4.

Definition 3.1: Let D = (T ,I ,R) be a data mining context. C1 = (T1, I1) and C2 = (T2, I2) are two concepts in B(D) and C1 ? C2. If |T1||T2| ? minconf , the rule r : I2 ? I1 ? I2 is called a basic association rules. The minimum support of r is defined as |T1||T2| .

Basic association rules can be mined from concept lattice.

Example 3.2: Table III represents basic association rules  from Fig 4 with minconf = 0.5.

Definition 3.2: Let r1 ? I1 ? I2, r2 ? I3 ? I4, the mini-  mum supports of r1 and r2 are conf1 and conf2, respectively.

If I1 ? I2 = I3, The operator ?+? can be implemented on r1 and r2. r1 + r2 ? I1 ? I4. The minimum support of I1 ? I4 is defined as conf12 = conf1 ? conf2. Let r3 ? I4 ? I5 and its minimum supports is conf3. If I1 ? I2 = I3 and I3 ? I4 = I5, the operator ?+? can be implemented on r1, r2 and r3. r1 + r2 + r3 ? I1 ? I6 and its minimum support     TABLE IV THE RESULT OF PERFORMING ?+? AND ??? ON BASIC ASSOCIATION RULES  IN TABLE III.

Basic rules The result of ?+? The result of ??? ? ? C ? ? BCE  BE ? A BE ? AC ? ? A ? ? ABCE ? ? BE ? ? BE C ? A C ? ABE C ? A C ? ABCE ? ? A ? ? AC  C ? BE C ? ABE ? ? BE ? ? ABCE  is conf123 = conf1 ? conf2 ? conf3. The operator ?+? can be defined among n rules by same way.

Definition 3.3: Let r1 ? I1 ? I2, r2 ? I3 ? I4, the minimum supports of r1 and r2 are conf1 and conf2, respec- tively. If I1 ? I2 = I3, The operator ??? can be implemented on r1 and r2. r1 ? r2 ? I1 ? I2 ? I4. The minimum support of I1 ? I2 ? I4 is defined as conf12 = conf1 ? conf2.

Let r3 ? I4 ? I5 and its minimum supports is conf3. If I1 ? I2 = I3 and I3 ? I4 = I5, the operator ??? can be implemented on r1, r2 and r3. r1?r2?r3 ? I1 ? I2?I4?I6 and its minimum support is conf123 = conf1?conf2?conf3.

The operator ??? can be defined among n rules by same way.

Let?s examine how to perform ?+? and ??? on basic associ- ation rules in Table III Using the following example.

Example 3.3: Since BE, the union of the antecedent and consequent of rule , be not equal to the antecedent of rule  , the operators ?+? and ??? cannot be implemented on rule and rule . The antecedent of rule be equal to BE. Therefore, the operators ?+? and ??? cannot be implemented on rule and rule .

+ ? ? ? C (6) ? ? ? ? BCE (7)  Every basic association rule after rule is check whether the operators ?+? and ??? can be implemented on rule and itself.

and not. yes. Therefore, we can obtain:  + ? BE ? A (8) + + ? ? ? A (9) ? ? BE ? AC (10)  ? ? ? ? ? ABCE (11) Table IV represents the result of performing ?+? and ??? on basic association rules in Table III.

Definition 3.4: Let r1 ? I1 ? I2. The result of performing operator right move is a set of association rules {I ?1 ? I2 ? I ??1 |I ?1 ? I ??1 = ?, I ?1 ? I ??1 = I1, I ?1 ?=, I ??1 ?= ?, g(I1) ? g(I ?1)}  Definition 3.5: Let r1 ? I1 ? I2. The result of performing operator decompose is a set of association rule {I1 ? I ?2|I ?2 ?= ?, I ?2 ? I2}  All association rules which confidence be less than 1 are mining out by performing four operators on basic association rules. The pseudo codes are given by Algorithm 1.

Algorithm 1 GenBasicRules(D ,minsupp,minconf ) Require: Input: minimum support minsupp, minimum con-  fidence minconf and data mining context D = (T ,I ,R) Ensure: Output: a set of basic association rules BasicRules  Initialize a queue Queue BasicRules? ? Queue.EnQueue((T , ?)) while Queue ?= ? do  C = Queue.DeQueue for all C1 such that C1 ? SUBNODES ? (C) do  if (|Extent(C1)|/|Extent(C)|) ? minconf then if C1 /? Queue then  Queue.EnQueue(C1) end if generate a rule r : Intent(C)? Intent(C1) BasicRules? BasicRules ? r  end if end for  end while return BasicRules  Algorithm 2 SUBNODES*(C,D ,minsupp)) Require: Input: given a concept C = (T, I), minimum  support minsupp, and data mining context D = (T ,I ,R) Ensure: Output:a set subnodes of concepts which extent?s  count be greater or equal to minsupp subnodes? ? M ? the concept matrix of concept C compute the rank of every attribute in M m? the rank of concept C while m ? minsupp do  S ?the set of attributes which ranks equal to m while S ?= ? do  I1 ? the set consisting of a attribute a from S and these attributes from S which corresponding columns are same as column of a in M S ? S ? I1 T1 ? gC(I1) I1 ? I ? I1 if ?C2 = (T2, I2) ? subnodes, such that NOT T1 ? T ? T2 then  subnodes? subnodes ? (T1, I1) end if  end while m? m? 1  end while return subnodes  Algorithm 1 is to generate basic association rules by build a concept lattice called function SUBNODES* The pseudo codes of this function are given by Algorithm 2.

Fig. 5. Running time of algorithms with minconf = 0.01

IV. EVALUATION  In order to evaluate, we implement Algorithm Arca and Algorithm Aprior by Visual C++ and STL. The data set, gen- erated randomly by IBM dataset generator, have 1000 items and 10000 transactions. The result shows that the performance of Arca is as four times higher as Aprior on average. Fig 5 represents Running time of algorithms versus lattice size with minconf = 0.01.



V. CONCLUSION  Now, there are many algorithms of mining association rules. There is a one-to-one correspondence between concept intensions and closed frequent itemsets. Concept lattice is a good tool for mining association rules.

