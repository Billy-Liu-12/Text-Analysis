2011 Cross Strait Quad-Regional Radio Science and Wireless Technology Conference

Abstract-In this paper, a new efficient incremental updating  algorithm for mining association rules (ATLUP) is proposed,  which resolves the problem of updating the association rules when increasing transaction database without changing the minimum support and minimum confidence. Main features of this algorithm are that: frequent item sets of new transaction database are produced by AprioriTidList algorithm, and candidate itemsets are classified and pruned in effective ways.

Therefore, the time of scanning former and new database is reduced to once, efficiency of updating association rules is  improved. Experimental result shows the feasibility and effectiveness of this algorithm.

Keywordst; Association rule; AprioriTidList algorithm; ATLUP algorithm

I. INTRODUCTION  The association rule mining is the very important research topic in data mining field. At present, the research works on association rules are motivated by an extensive range of application areas, such as market strategy, additional postal delivery, medical treatment to care, the analysis of fmancial security, the error check of telecommunication and insurance industry. These databases that are applied to win are all very and huge, and usually update change. Therefore, efficient algorithm was urgently required to update and vindicate rules of already dug out.

Incremental updating algorithm for mining association rules solves the main problem is that when the database is changed or user-specified minimum support and minimum confidence are changed, how to efficiently mine the association rules. The core of the algorithm is how to use mining association rules have been to produce new association rules and delete ineffectual association rules. majority of incremental updating algorithms are the betterments that takes Apriori algorithm [1] as nucleus to carry on currently with excellent turn . For example, some literature [2] Ease of Use Maintenance of Discovered Association Rules in Large Databases: An Incremental Updating Technique (FUP), some literature[3] A General Incremental Technique for Maintaining Discovered Association Rules (FUP2), some literature[4] An incremental updating algorithm for association rules (SFUA), some literature[5]An improved maintenance algorithm for association rules (EFUP), some literature [ 6]An improved   incremental updating algorithm for association rules (PFUP) and some literature[7]An efficient incremental updating algorithm for mining association rules (TMFUP). But this kind of algorithm has two spots to be insufficient: First, the number of candidate itemsets which produced is very big, moreover majority of these candidate itemsets are non-frequent itemsets.

Second, the former and new database need to be scanned many times. Therefore the algorithm efficiency is affected.

The efficiency of incremental updating algorithm lies in take advantage of becoming minor candidate for election the item gather or less time scanning database. Owing to this, an efficient incremental updating algorithm A TLUP based on FUP and SFUA algorithm proposed to increase the efficiency of updating correlation rule.



II. DEFINITION AND PROPOSITION  Let DB be a former transaction database, s be the minimum support, IDBI be the number of transactions in DB, xi(i:S; IDBI) is a transaction in DB, X= {xl,x2, .. .  ,xu}( u:S; IDBI) be a set of transactions, called itemset, s x IDBI be the minimum support number of DB, LDB be the set of frequent itemsets in DB,

X.countDB be the support number of itemset X in DB. For each itemset X of LDB, then

X.count DB ;::: sx I DB I (1) Let db be a new transaction database, Idbl be the number of  transactions in db, Ldb be the set of frequent itemsets in db, X.countdb present the support number of itemset X in db.

Incremental updating algorithm for association rules is to fmd the set LDB+db of frequent itemsets in updated transaction database DB U db.

Let m be the number of maximum frequent itemset's items in database DB U db, X.countDB+db be the support number of itemset X in database DB U db, For each itemset X of LDB+db, then

X.count DB+db ;::: s X ij DB I + I db I) (2)  July 26-30, 2011    There are some defmitions and propositions that will be used in this paper.

Definition 1: If the number of items in the itemset X is k, then X is k -itemset.

Proposition 1: If an itemset X is non-frequent itemset, then superset of X is non-frequent itemset too.

Proposition 2: Let X be an itemset, if X E LDB, and X E Ldb too, then X E LDB+db.

Proposition 3: Let X be an itemset, If X e LDB, X e Ldb too, then X e LDB+db.

Proposition 4: When database D is divided into some parts, if an itemset X of D is a frequent itemset, then X is a frequent itemset of one of these parts at least.



III. CHARACTERISTICS OF DIFFERENT INCREMENTAL UPDATING ALGORITHMS  A. Apriori Algorithm  Apriori algorithms adopt iterative method to discovering frequent itemsets, the algorithm starts from frequent 1-itemsets until all maximum frequent itemsets are discovered. Apriori algorithms consists of two major procedures: the join procedure and the prune procedure. The join procedure combines two frequent k-itemsets, which have the same (k-I)? prefix to generate a (k+1)-itemsets as a new preliminary candidate. Following the join procedure, the prune procedure is used to remove from the preliminary candidate set all itemsets whose some k-subset is not a frequent itemset. The hugeous calculation and complicated transaction process are required during the two procedures. So the mining efficiency of the Apriori algorithms is very unsatisfactory when transaction database is very large.

B. FUP Algorithm  FUP algorithm is a kind of classic algorithm that resolves incremental updating problem. In FUP algorithm, the method of producing frequent itemsets and Apriori algorithm is same, also adopts iterative method to discovering frequent itemsets.

What is different, in FUP algorithm, formerly mined frequent itemsets are used to obtain new frequent itemsets in database DB U db, so the time of spending in computation support number of new frequent itemsets is reduced, efficiency of FUP algorithm is enhanced. But when new database db is very large, updating efficiency of FUP algorithm is very low. There are two main reasons that effect the updating efficiency of FUP algorithm, on the one hand, LDB+db(k-I) that is the set of frequent (k-l)-itemsets in database DB U db is used to generate Cdbk that is the set of candidate k-itemsets in database db, therefore itemsets in Cdbk are very much, and a lot of among them aren't frequent itemesets, even don't appear in database db. On the other hand, the time of scanning database DB U db is m+ I, In the ordinary circumstances, the number of transactions in former database DB is very large, So efficiency of updating association rules is very unsatisfactory.

c. SFUA Algorithm  SFUA algorithm is different from FUP algorithm in the method generating frequent itemsets. It directly uses the apriori-gen function in the Apriori algorithm to generate the set Ldb of frequent itemsets in database db, and takes advantage of Proposition 2 to divide frequent itemsets of database DB U db into three parts. The One part are frequent itemsets of database DB and database db, the second part are frequent itemsets of database db, but are non-frequent itemsets of database DB, the third part are frequent itemsets of database DB, but are non? frequent itemsets of database db. Therefore for SFUA, the time of scanning former database is decreased to one, efficiency of updating association rules is more higher than FUP, but the time of scanning new database db is m+ I. So efficiency of updating association rules is obviously unsatisfactory when new database content is very large.



IV. ATLUP ALGORITHM  A new efficient incremental updating algorithm A TLUP is proposed to resolve the scarcity that aims at FUP, SFUA algorithm.

A. Optimum Strategies  In A TLUP algorithm, three optimum strategies are adopted to resolve the scarcity that aims at FUP, SFUA algorithm.

1) Optimum strategy 1: When new database db is appended, some new transactions are presented that don't exist in former database DB, the support number of frequent itemset containing new transactions in the renewal database DB U db will be equal that in new database db, so we can judge this part of itemsets whether is frequent itemsets of the database DB U db when database db isn't scanned. Therefore this part of frequent itemsets will been divide from the whole, and the time of scanning database DB will be reduced.

Let LDB+db be the set of frequent itemsets in database DB U db, according to the proposition 4, LDB+db is subset of LDB U Ldb. Therefore we take LDB U Ldb as candidate itemsets of database DB U db. According to the optimum strategy 1 and SFUA algorithm, LDB U Ldb is divided into five parts as follows.

a) L ": It is the intersection of LOB and Ldb, namely L"=LoBnLdb.

b) LNDB: Each itemset of LNDB is frequent itemsets in database DB, but some transactions of LNDB don't exist in database db. So LNDB directly been obtained through scanning 1- itemsets in database db and LOB-L".

c) L DB: Each itemset of L'OB is frequent itemset in database DB, but it is non-frequent itemset in database db. So L'OB directly been obtained through scanning LOB-L" and LNOB, namely L'OB=LoB-L"-LNDB.

d) LNdb: Each itemset of LNdb is frequent itemsets in database db, but some transactions of LNdb don't exist in database DB. So LNdb directly been obtained through scanning 1- itemsets in database DB and Ldb-L".

e) L'db: Each itemset of L'db is frequent itemset in database db, but it is non-frequent itemset in database DB. So L'db directly been obtained through scanning Ldb-L" and LNdb, namely L'db=Ldb-L"-LNdb.

2) Optimum strategy 2: In ATLUP algorithm, AprioriTidList algorithm[8] is used to generate the set Ldb of frequent itemsets in database db.

AprioriTidList algorithm is improved algorithm of Apriori algorithm. The algorithm for each candidate itemset defmes a structure called tidlist. Let X.tidlist represent tidlist of itemset X, X.tidlist contains transaction's TID by these to be composed.

l-itemsets's tidlist may obtain through scanning transaction database, candidate k-itemsets's tidlist may be produced by its two (k-l)-itemsets's tidlists striving for occurring together to obtain. This algorithm only needs scan transaction database one time, the main operation is intersection operation, therefore, AprioriTidList algorithm is very efficient than the Apriori algorithm.

3) Optimum strategy 3: If X is a K-itemsets of L'OB, then

X.tidlist can be obtain by intersecting all 1- itemset's tidlist of X in database db. Let X.COun?b represent the support number of X in database db, then X.COun?b is equal to the length of

X.tidlist (X.tidlist contains transaction number). Because using intersection operation of item's tidlist to replace scanning database db, the time of scanning database db is reduced, algorithm efficiency is enhanced.

B. Algorithm Details  In this section, we will frrst present the A TLUP algorithm step by step. In general, A TLUP algorithm consists of seven steps as following:  (l) Running AprioriTidList algorithm to obtain the set Ldb and l-itemset's tidlist of database db.

(2) Obtaining the intersection L" through scanning LOB and Ldb, and joining L" to the set LOB+db'  (3) Obtaining the set LNDB through scanning 1- itemsets of db and LOB-L". For each itemset X of LNDB, if X.COuntOB+db =

X.countOB and meet formula (2), joining X to LOB+db and deleting X from LNDB , otherwise deleting X and X's superset from LNDB.

(4) Obtaining the set L'OB through scanning LOB-L" and LNDB. For each itemset X of L'OB' let X={i"i2, ??? ,ik  },

X.tidlist={i  J }.tidllistn {h}.tidlistn ...  n {?}.tidlist, X.COun?b=

IX.tidlistl , if X.COuntOB+X.COun?b<S X (IDBI+ldbl), then deleting X and X's superset from L'OB' otherwise joining X to LOB+db and deleting X from L'OB.

(5) Obtaining the set LNdb through scanning 1- itemsets of DB and Ldb-L". For each itemset X of LNdb, if X.cOuntOB+db =

X.COuntdb and meet formula (2), joining X to LOB+db and deleting X from LNdb, otherwise deleting X and X's superset from LNdb .

(6) Obtaining the set L'db through scanning Ldb-L" and LNdb.

For each itemset X of L'db, obtaining X.COuntOB trough scanning database DB. If X.COuntOB+ X.COun?b < s x (lDBI+ldbl),   deleting X and X's superset from L'db, otherwise joining X to LOB+db and deleting X from L'db.

(7) Returning the set LOB+db of frequent itemsets in updated transaction database DB U db.



V. PERFORMANCE ANALYSIS OF ALGORITHM  A. Qualitative Analysis  1) Space complexity analysis: In FUP algorithm, iterative method is adopted to discovering frequent itemsets, let LOB+db(k?J) be the set of frequent (k-l)-itemsets in database DB Udb, Cdbk be the set of candidate k-itemsets in database db,  LOB+db(k?J) is used to generate Cdbk? In SFUA algorithm, the apriori-gen function in the Apriori algorithm is used to generate the set Ldb of frequent itemsets in database db. In A TLUP algorithm, AprioriTidList algorithm is used to generate the set Ldb of frequent itemsets in database db.

Therefore, when these algorithms are ran, A TLUP algorithm needing computer memory space is least.

2) Time complexity analysis: When these algorithm are ran to generate the set LOB+db of frequent itemsets in updated transaction database DB U db. For FUP algorithm, the time of scanning database DB is m+ 1 and the time of scanning database db is 1. For SFUA algorithm, the time of scanning database DB is 1 and the time of scanning database db is m+ 1.

For ATLUP algorithm, the time of scanning database DB is 1 and the time of scanning database db is 1. Therefore, efficiency of ATLUP algorithm is very higher than FUP and SFUA algorithm.

B. Experimen Analysis  In order to appraise the performance of A TLUP algorithm, we conducted an experiment for FUP algorithm, SFUA algorithm and A TLUP algorithm. These algorithms were implemented in Visual C++6.0 and tested it on Windows XP Professional platform. The test database is generated synthetically by an algorithm that is designed by then IBM Quest project. Generating five test databases as follows: Tl0I4DI00KdlK, Tl0I4DI00KdSK, Tl0I4D 100Kdl OK, TlOI4DI00Kd15K and Tl0I4DI00Kd20K. Some parameters will be used in the synthetic data generation procedure, these parameters we follow as table I and parameter values as table II.

TABLE!. DESCRIPTION OF PARAMETER  parameter description  ITI the averages size of itemsets  III the average size of maximum frequent itemsets  IDI the number of transactions in former database DB  Idl the number of transactions in new database db  ILl The number of potential maximum frequent itemsets  N The number of items    ITI  III  Idl  ILl N  TABLE II.

parameter  PARAMETERS VALUE OF TESTED DATASET  value   lOOK  IK,5K,IOK,15K,20K    Remark, lK=IOOO.

The Number of Transaction in New Database db Ck)  Figurel. Testing result on five database  Figure. 1 presents the experimental result on five databases.

FUP/ATLUP represents FUP algorithm and ATLUP algorithm execution time ratio and SFUA/ATLUP represents SFUA algorithm and ATLUP algorithm execution time ratio. The result shows the perfonnance of A TLUP algorithm is much better than FUP and SFUA algorithm. Moreover, the better the perfonnance efficiency of A TLUP algorithm is, the larger the number of transactions in new database db is. It is because the larger the number of transactions in new database db is, the larger the time of scanning new database db with FUP and SFUA algorithm are, but the times of scanning new database db with A TLUP algorithm is one, besides the perfonnance of AprioriTidList algorithm is much better than Apriori algorithm.



VI. CONCLUSIONS  The paper presents a new efficient incremental updating algorithm(A TLUP), which discovers the set Ldb of frequent itemsets in new database db by AprioriTidList algorithm, and uses intersection operation of item's tidlist to replace scanning database db, therefore, the time of scanning database db and the number of candidate itemsets are reduced. In addition, According to the optimum strategy 1 and SFUA algorithm, candidate itemsets LOB U Ldb are divided into five parts.

Therefore the time of producing candidate itemsets is reduced and the efficiency of updating association rules is improved.

