2010 2nd International Asia Conference on Informatics in Control, Automation and Robotics

AbstractThe first step of detecting relating rule is a process at  the cost of much system resource, so the total performance of  detecting relating rule is determined by this step. The main goal  of existing algorithms at present is focused on the efficiency of  this step. DHP and PHP are included in those algorithms and  these two algorithms are the transmutations of Apriori algorithm  to improve its validity. PHP is developed based on DHP and it  saves the CPU running time of DHP effectively. It is useful in  improving the efficiency of detecting relating rule in commercial  database by developing PHP algorithms to reduce the CPU  calculating time.

Index TermsData digging, PHP algorithm, Improved

I. ASSOCIATION RULES MINING  Association rules mining is the common way of data mining,  we can find abundances interesting associations or relations f  the data.

There are two steps of association rules mining: the first  step is to find all the sets of item that they can have a minimum  support count, we can call those sets as itemset, and then we  define those itemsets that have minimum support as frequent  itemset. The set include k sets is so called k-item,. The second  step is to generate association rules from frequent itemset. We  can find out all the none null subset s of frequent itemset l, if  support_count(l)/support_count(s)>=min_conf, then we get the  rule s?(l-s). support count is the frequency of itemset appeared.



II. PHP ALGORITHM BASED ON ASSOCIATION RULES  PHP algorithm is improved from Apriori algorithm and  DHP algorithm. As for some shortcoming of DHP, PHP did    some improvement of Apriori algorithm. In DHP algorithm,  different candidate sets maybe in the same bucket because of  the same Hash value, then the minimum support count will be  no more than those bucket counts, but support count of  candidate itemset in the bucket maybe no more than the  minimum support count. These candidate itemset are so called  false positive sets. Because of these false positive sets, it is  very necessary to scan database support count and delete those  false positive sets, afterwerds we can find the real frequent  itemset. So in PHP algorithm, we have to define a bigger Hash  list to map those candidates to variable buckets. each defined  candidate has its own bucket count , no false positives exist,  then the process will be improved by discount Hash list  itemset count.

In other way, it can be efficient by pruning the database in  PHP algorithm. Before we generate candidate k-itemset of  each affair of database, we should delete those false positive of  the affair, if there is no false positive, then delete the affair, so  database will be getting less., then candidate by affair will be  much less. In this way we can have more efficient when the  database is much bigger and frequent itemset is much less.

Then before the candidate k-itemset of affair  add to Hash, we  should check all k-1 subset is frequent or not, if it satisfy the  condition, candidate k-itemset will be possibley frequent, and  then put them into Hash list. This is previous pruning, in this  way we can control the size of Hash list.



III. THE IMPROVEMENT OF PHP ALGORITHM  In PHUUP algorithm, when candidate k-itemset add into  Hash, the item in the set will add into database Dk  corresponding field, and make sure there is no repetition of  field of the affair, the unit of the affair is field. In our  improved algorithm, we add candidate Hash k-itemset to Dk  correspond affair. So it unnecessary to reset k-itemset when  pruning k-itemset of affair, at same time the amount of k-  itemset will be cut down considerably. After pruning for k-  itemset of the affair, when generate k+1-itemset from k-  itemset, we can still use the connection way of Apriori  algorithm to reduce the amount of k+1-itemset and not lose  the frequent itemsets. We know that if k-itemset of an affair  lose k+1-itemset when connect with them{i1, i2,, ik+1},  obviously all the fields of this itemset include in the affair, so  k+1 itemset is frequent, so the subset {i1, i2,, ik-1,ik} and {i1,    i2,, ik-1,ik+1} mast be frequent, and include in frequent k-  itemset of this affair, link these two subset we can get {i1,  i2,, ik+1  Improved algorithm core pseudocode as follow:  }, there is no frequent itemset will be lost.

For each transaction t?Dk-1  //w is k-1 itemsets in t  do begin  if ? w| w? Fk-1 //trims the itemsets that are not frequent  from the transaction  else  then skip t;  ???  2010 2nd International Asia Conference on Informatics in Control, Automation and Robotics  978-1-4244-5194-4/10/$26.00 2010 IEEE                                                                  CAR 2010  The Improvement of PHP Algorithm for Association  Rules  Yang Huansong  Hangzhou Institute of Service Engineering  Hangzhou Normal University  Hangzhou, Zhejiang, P.R.China  hzjyhs@163.com  Qin Suntao  Information School  Zhejiang University of finance and economics  Hangzhou , Zhejiang, P.R.China  hzqst@126.com  AbstractThe first step of detecting relating rule is a process at  the cost of much system resource, so the total performance of  detecting relating rule is determined by this step. The main goal  of existing algorithms at present is focused on the efficiency of  this step. DHP and PHP are included in those algorithms and  these two algorithms are the transmutations of Apriori algorithm  to improve its validity. PHP is developed based on DHP and it  saves the CPU running time of DHP effectively. It is useful in  improving the efficiency of detecting relating rule in commercial  database by developing PHP algorithms to reduce the CPU  calculating time.

Index TermsData digging, PHP algorithm, Improved

I. ASSOCIATION RULES MINING  Association rules mining is the common way of data mining,  we can find abundances interesting associations or relations f    the data.

There are two steps of association rules mining: the first  step is to find all the sets of item that they can have a minimum  support count, we can call those sets as itemset, and then we  define those itemsets that have minimum support as frequent  itemset. The set include k sets is so called k-item,. The second  step is to generate association rules from frequent itemset. We  can find out all the none null subset s of frequent itemset l, if  support_count(l)/support_count(s)>=min_conf, then we get the  rule s?(l-s). support count is the frequency of itemset appeared.



II. PHP ALGORITHM BASED ON ASSOCIATION RULES  PHP algorithm is improved from Apriori algorithm and  DHP algorithm. As for some shortcoming of DHP, PHP did  some improvement of Apriori algorithm. In DHP algorithm,  different candidate sets maybe in the same bucket because of  the same Hash value, then the minimum support count will be  no more than those bucket counts, but support count of  candidate itemset in the bucket maybe no more than the  minimum support count. These candidate itemset are so called  false positive sets. Because of these false positive sets, it is  very necessary to scan database support count and delete those  false positive sets, afterwerds we can find the real frequent  itemset. So in PHP algorithm, we have to define a bigger Hash  list to map those candidates to variable buckets. each defined  candidate has its own bucket count , no false positives exist,  then the process will be improved by discount Hash list  itemset count.

In other way, it can be efficient by pruning the database in  PHP algorithm. Before we generate candidate k-itemset of  each affair of database, we should delete those false positive of  the affair, if there is no false positive, then delete the affair, so  database will be getting less., then candidate by affair will be  much less. In this way we can have more efficient when the  database is much bigger and frequent itemset is much less.

Then before the candidate k-itemset of affair  add to Hash, we  should check all k-1 subset is frequent or not, if it satisfy the  condition, candidate k-itemset will be possibley frequent, and  then put them into Hash list. This is previous pruning, in this  way we can control the size of Hash list.



III. THE IMPROVEMENT OF PHP ALGORITHM  In PHUUP algorithm, when candidate k-itemset add into  Hash, the item in the set will add into database Dk    corresponding field, and make sure there is no repetition of  field of the affair, the unit of the affair is field. In our  improved algorithm, we add candidate Hash k-itemset to Dk  correspond affair. So it unnecessary to reset k-itemset when  pruning k-itemset of affair, at same time the amount of k-  itemset will be cut down considerably. After pruning for k-  itemset of the affair, when generate k+1-itemset from k-  itemset, we can still use the connection way of Apriori  algorithm to reduce the amount of k+1-itemset and not lose  the frequent itemsets. We know that if k-itemset of an affair  lose k+1-itemset when connect with them{i1, i2,, ik+1},  obviously all the fields of this itemset include in the affair, so  k+1 itemset is frequent, so the subset {i1, i2,, ik-1,ik} and {i1,  i2,, ik-1,ik+1} mast be frequent, and include in frequent k-  itemset of this affair, link these two subset we can get {i1,  i2,, ik+1  Improved algorithm core pseudocode as follow:  }, there is no frequent itemset will be lost.

For each transaction t?Dk-1  //w is k-1 itemsets in t  do begin  if ? w| w? Fk-1 //trims the itemsets that are not frequent  from the transaction  else  then skip t;  ???  itemsets=);  for each y? { Tk-1  Tk-1} do  // Tk-1 is all frequent  k-1-itemsets in t. Tk-1  //  Tk-1 is a natural join of Tk-1 and Tk-1 on the first k-2  items.

if? ?z| z=k-1 subset of y ? ?Hk-1.hassupport(z)  then Hk.add(y);  itemsets=itemsets? y;  end  Dk= Dk? t   //such that t contains itemsets only in the  set itemsets  End  Hk.prune(min_sup);    //gets Fk

IV. TEST CONTRAST    The test data are sale data from a real company. There are  5581 affairs and 1559 different fields, in Fig.1 the data  structure of improved PHP algorithm, candidates k-itemset  Hash are in database Dk  Fig.1 the structure of database Dk of improved PHP algorithm  :  The structure of the node customer_id is:  struct tid  {  short customerid;  struct tid *next;  struct dbitemset* pdbitemset;  };  The structure of item:  struct dbitemset  {  short *pitem;  struct dbitemset *next;  };  In the structure of dbitemset, pitem is point the field or item  of fixed size array. For put out the itemset from array, should  know the length k of the itemset , and take out k items  combinations from array to gain a itemset. The size of tha  array should be proper to fill the itemset, not too much nodes  there, to save the memory size. The main program of  candidate k-itemset ot database Dk is as follow:  newdbitemset=new dbitemset;  pnewitemarray=new short[SIZEOFPITEMARRAY];  ptempitem=pkitemset; // pkitemset point to the list of  candidate k-itemset  *pnewitemarray=ptempitem->productid;     //product ID is  the item of candidate k-itemset  newdbitemset->pitem=pnewitemarray;  newdbitemset->next=NULL;  thisnewdbitemset=newdbitemset;  cofnewitemarray=1;  ptempitem=ptempitem->next;  while(ptempitem!=NULL)  {  if(cofnewitemarray<SIZEOFP  ITEMARRAY)  {    pnewitemarray++;  *pnewitemarray=ptempitem-  >productid;  ptempitem=ptempitem->next;  cofnewitemarray=cofnewitemarray+1;  }  else  {  newdbitemset=new dbitemset;  item  item  ..

customer_id  customer_id  customer_id  ^  item  item  ..

..

^  item  item  ..

item  item  ..

item  item  ..

^  item  item  ..

???  itemsets=);  for each y? { Tk-1  Tk-1} do  // Tk-1 is all frequent  k-1-itemsets in t. Tk-1  //  Tk-1 is a natural join of Tk-1 and Tk-1 on the first k-2  items.

if? ?z| z=k-1 subset of y ? ?Hk-1.hassupport(z)  then Hk.add(y);  itemsets=itemsets? y;  end  Dk= Dk? t   //such that t contains itemsets only in the  set itemsets  End  Hk.prune(min_sup);    //gets Fk

IV. TEST CONTRAST  The test data are sale data from a real company. There are  5581 affairs and 1559 different fields, in Fig.1 the data  structure of improved PHP algorithm, candidates k-itemset  Hash are in database Dk  Fig.1 the structure of database Dk of improved PHP algorithm  :  The structure of the node customer_id is:  struct tid  {  short customerid;  struct tid *next;  struct dbitemset* pdbitemset;  };  The structure of item:  struct dbitemset  {  short *pitem;  struct dbitemset *next;  };  In the structure of dbitemset, pitem is point the field or item  of fixed size array. For put out the itemset from array, should  know the length k of the itemset , and take out k items  combinations from array to gain a itemset. The size of tha  array should be proper to fill the itemset, not too much nodes  there, to save the memory size. The main program of  candidate k-itemset ot database Dk is as follow:  newdbitemset=new dbitemset;  pnewitemarray=new short[SIZEOFPITEMARRAY];  ptempitem=pkitemset; // pkitemset point to the list of  candidate k-itemset  *pnewitemarray=ptempitem->productid;     //product ID is  the item of candidate k-itemset  newdbitemset->pitem=pnewitemarray;    newdbitemset->next=NULL;  thisnewdbitemset=newdbitemset;  cofnewitemarray=1;  ptempitem=ptempitem->next;  while(ptempitem!=NULL)  {  if(cofnewitemarray<SIZEOFP  ITEMARRAY)  {  pnewitemarray++;  *pnewitemarray=ptempitem-  >productid;  ptempitem=ptempitem->next;  cofnewitemarray=cofnewitemarray+1;  }  else  {  newdbitemset=new dbitemset;  item  item  ..

customer_id  customer_id  customer_id  ^  item  item  ..

..

^  item  item  ..

item  item  ..

item  item  ..

^  item  item    ..

???  pnewitemarray=new  short[SIZEOFPITEMARRAY];  *pnewitemarray=ptempitem-  >productid;  newdbitemset->pitem=pnewitemarray;  newdbitemset->next=NULL;  thisnewdbitemset->next=newdbitemset;  thisnewdbitemset=newdbitemset;  cofnewitemarray=1;  ptempitem=ptempitem->next;  }  }  The test result is as Tab.?

TABLE 1  ITEMSETS IN DIFFERENT MINIMUM SUPPORT COUNT  The  minimu  m  support  count  | F1 | F| 2 | F| 3 |  F  |   |  F  | 5  Frequent  set  |  7 1559 406 0 0 0 1965  6 1559 1960 0 0 0 3519  5 1559 8605 8 0 0 10172  4 1559 34172 129 1   2 35876  It can get the same frequent activities that PHP algorithm  and improved PHP algorithm, in Tab.2 we can find that there  is inverse ratio between frequent activity and minimum  support count, when the minimum support counts decrease,    frequent activities increase, just as the real world. The cost of  CPU time compared as Fig.2 of these two algorithms:      57 53 52          4 5 6 7  Minimum Support Count  T  i  m  e  (  s  e  c  o  n  d  s  )  PHP  Improved  Fig.2 the compare CPU time cost of PHP and improved PHP  From Fig.2, as support count decreasing, the CPU running  time of these two algorithms gets increasing, but the PHP is  much speeder than the other, especially when count in 6. so  wen know the more frequent itemsets and their items, the more  efficient of the algorithm.



V. THE APPLICATION  After we got the frequent itemset by the improved PHP  algorithm, we can generate the strong associate rule that  satisfied minimum support and minimum confidence. The    confidence can be computed by :  Confidence(A ? B) = P(A | B) = support_count(A ? B)/  support_count(A)  Support_count(A ? B) is the affair contain item A ? B,  support_count(A) is number of affairs of itemset A.

And then we can use confidence threshold strengthen the  association, we use improved PHP algorithm dig X company  2002 year sale data, minimum support is 5, 3-itemset, they are  {83,549,915}, {485,558,1290}, {454,1097,1546},  {83,549,982}, {631,980,1490}, {454,1103,1546},  {810,1026,1469}, {360,830,1036}, and their none null subset,  as for frequent 3-item {83,549,915}, we can get:  83 ? 549? 915,      confidence = 5/9 = 56%  83 ? 915? 549,      confidence = 5/5 = 100%  915 ? 549? 83,      confidence = 5/5 = 100%  83? 915 ? 549,      confidence = 5/50 = 10%  549? 83 ? 915,      confidence = 5/78 = 6%  915? 83 ? 549,      confidence = 5/73= 7%  If the minimum confidence threshold is 80%, only if  83 ? 915 ? 549and 915 ? 549 ? 83 can generate strong  associate rules, after these rules, we can not only arrange the  shelf of related goods in pairs or groups, but also combine  those goods that have most consumers, promote the consumer  the pretermission goods. For example, the stronger associate  rule 83 ? 915? 549, from the database field product, we know  product_id corresponding product_name, this stronger rule is  pillow ? pillow clothe ? bedsheet , if there is someone  bought pillow and pillow clothe, then promote good  bedsheet is an efficient way of sale.



VI. CONCLUSION  We put Hash candidates k-itemset into affair of Dk, that is  itemset include in affair, so CPU running time decreased,  improved PHP algorithm is more efficiency, we can use this  improved PHP algorithm in commercial database digging and  other wide usages.

