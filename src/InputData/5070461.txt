New Approach for Sensitive Association Rule Hiding

Abstract   A new sensitive rule hiding algorithm, including two  processes of weak association transaction adding and strong association transaction removing, is presented based on the devotion degree of transactions to the discovered association rules. The approach and algorithm are stated in detail aiming to hide simple rules, including two types of single rule and composed rule.

Four item modification methods are designed for the updating of selected weak association transactions. Only a small number of transactions are required in updating to keep the original features in the mined dataset. When the modification factor is set above 0.05, the hiding rate can be reached to 100%, and the side effects of the lost rules and new created rules are very small with rate less than 10%. Finally, after the hiding detection to the new database, the robustness to the support attack is satisfying with suitable hiding rate.

1. Introduction   Association rule mining is one of the important  problems in the data mining domain. With the fast demands through the network data sharing and distribution, users hope to make deeper analysis to get more valuable information. However, the information security problem also rises in data mining. People don?t like exposing their private data, especially in commercial, physical and insurance fields. Therefore, it becomes a key problem in data mining for people to share data and discover useful information based on private data preserved or hiding.

Today, it is still difficult in association rule hiding to get robust and efficient performance. Yucel [1] uses Unknowns (mark ?) to represent the useful data of items.

The approach shows some extent effects and simple implementation. However, it only can suitable for a few items in database. Meanwhile, Vassilios [2] proposes item-deleting approach. As the inference demand in the association rule, if one or more items including many results are deleted, the result will become false, and then the inference will be false. This approach is also easily  carried out. However, when there are many rules mined from the database, an item as the result in one rule is often acted as the condition of other rules. If the item is deleted, many effective rules will be rejected. On the other hand, the contents of items cannot be deleted if they are restrictive demanded and checked in many areas.

Therefore, this method will only find a small application.

Guanling [3] states methods of inverting the value of BOOL item, but it only suitable for BOOL items. Data cleaning is always for special use. Oliveira [4] adopts data cleaning technology to prevent sensitive knowledge. It can be well done for some discovered rules, while false in general use. Besides, there is no literature report in hiding detection or attack on the data mining. It seems that few suitable approaches have been proposed with features of both high hiding rate and little side effects. There are rare reports or publications on the robustness to the rule hiding detection.

Therefore, considering the different devoting degrees of each transaction in the mined rules, a new rule hiding algorithm, called transaction adding and removing (TAR), is constructed and implemented with powerful rule hiding effects [6]. It can hide all the corresponding rules including the designed hiding rule. In the paper, it aims to hide each single association rule without the corresponding rules.

2. Description of new approach   As defined in [6], the weak association transaction  (WAT) means one transaction with weak devotion to the mined rules, and the strong association transaction (SAT) means one transaction with strong devotion to the mined rules. Each transaction t has its item set I(t) with number N(t). Given the threshold Lw as the maximum item number, the transaction t belongs to WAT if N(t) ?Lw.

Also given the threshold Ls as the minimum item number, the transaction t belongs to SAT if N(t) ?Ls.

Apparently, when the transactions of WAT are added into the database, it will decrease the support of one association rule. On the other hand, if the transactions of SAT are removed from the database, the support will also become smaller. The added number and the removed number should be same to maintain the total number of  2008 International Workshop on Education Technology and Training & 2008 International Workshop on Geoscience and Remote Sensing  DOI 10.1109/ETTandGRS.2008.379   2008 International Workshop on Education Technology and Training & 2008 International Workshop on Geoscience and Remote Sensing  DOI 10.1109/ETTandGRS.2008.379     database constantly.  The composed approach is called TAR approach [6]. The added transactions are modified WATs, and the removed are SATs. The TAR approach is described in Figure 1. After the appointed rule is hidden successfully, the database will be discovered again with the same support and confidence. Different values of support or confidence are applied to verify the rule hiding robustness.

3. Design of TAR algorithm   Given Cm as the minimum confidence threshold and Sm  as the minimum support threshold, the association rule set, described as ( ) { ( ) | 1, 2,..., ( )}S R R i i N R= = , will be discovered from the database D. Two kinds of typical rules are considered for single rule hiding. One is the simple rule, and the other is the composed rule with different numbers of conditions. For example, with the support 10% and confidence 80%, many association rules will be mined from a sample database with 10000 transactions. Then, one simple rule with one condition as (hours=half-time) ? (salary<=50K) can be selected, while a rule of ((hours=half-time)?(race=White) ? salary<=50K) belongs to a composed rule with two conditions.

3.1. The updating number of transactions   In order to assure the hiding degree and robustness, the  number of WAT adding or SAT removing, marked as Ntar, should be controlled through a modification factor. The factor ? has following contribution:  | |tarN D?= ?  (1)  Considering the complete hiding situation, when the updating number Ns is operated into the database, the support of the sensitive rule can be decreased as:  | | | |  | | | |  s m  s m  X Y N S D  N X Y S D  ? <  ? > ? ?  ?  ?   (2)  Owing to sN  must be integer, then we have:  | | | | 1s mN X Y S D? ? ? +? ?? ??  (3)  From the view of confidence for rule hiding, when the updating number cN  is carried out to the database D, the confidence of the sensitive rule can be decreased as following:   | |  | | | | | |  c m  c m  X Y N C X  N X Y C X  ? <  ? > ? ?  ?  ?   (4)  Owing to sN  must be integer, there will be:  | | | | 1c mN X Y C X? ? ? +? ?? ??  (5)  The final minimum number of transaction updating is then calculated as follows:  { }min ,tar s cN N N=  (6)    3.2. Description of TAR Algorithm  The TAR algorithm is described as following: Algorithm: TAR for association rule hiding Input: original dataset D with item set I and the number of I as N(I), Cm, Sm, discovered rule set S(R), rule to be hidden Rhid, Lw=0, and modification factor ?.

Output: modified dataset D?.

Procedures: (1) Search for all related rules including Rhid from  S(R) to form a hiding rule set S(Rhid), Rhid ?S(Rhid);  Database Rule mining Rule analysis S(Ihid) extracting  SAT removing SAT selecting SAT searching  WAT modifying WAT selecting WAT searching  modified WAT adding  Hiding performance analysis  Figure 1  Description of TAR approach       (2) Create item set S(Ihid) and item content set S(CIhid) from S(Rhid);  (3) Compute tarN  as Equation (1); (4) Get the number of S(CIhid), marked as Ls; (5) Find the WATs which item contents are appeared  Lw at most in the S(CIhid); (6) Compute the number of WATs as Nw; (7) If (Nw=0)?(Nw< tarN ), let Lw++, and turn to  (5). Otherwise, go on.

(8) Select the WAT tw(i) randomly to make N(Iw)=  tarN , where {tw(i)?Iw | i=0,1,?, tarN }.

(9) Compute the existence number of each item  content S(CI)={nci(i,j)|i=1,2,?,N(I); j?1}; (10) Find the most frequent item content by  max(nci), marked as maxCI with item number maxItem;  (11) By an item modifying approach, modify the maxCI of maxItem to update tw(i) to tw?(i) (i=0,1,?, tarN ) in the selected WATs.

(12) Adding the modified WATs tw?(i) (i=0,1,?, tarN ) into D to form a new dataset D?.

(13) Find the SATs which item contents are appeared Ls at least in the S(CIhid);  (14) Compute the number of SATs as Ns; (15) If (Ns=0)?(Ns< tarN ), let Ls--, and turn to (13).

Otherwise, go on.

(16) Select the SAT ts(j) randomly to make N(Is)=  tarN , where {ts(j)?Is| j =0,1,?, tarN }.

(17) Remove ts(j) (j=0,1,?, tarN ) from D?. As a  result, a modified dataset D? is obtained.

As the example described before, a small set of  S(Ihid)={salary, hours} can be drawn from the simple rules, and the item content set S(CIhid) is obtained as:  S(CIhid)={salary<=50K, hours=half-time}   3.3. Design of WAT Adding Process  The process of SAT removing shows easy and simple.

However, the WAT adding process is more complicated.

Given different Lw, one can get different WAT set. A smaller set of WAT is more helpful for adding process and less computing cost but poorer rule hiding effects.

Next, how many item contents in one transaction should be modified? Considering the robustness demand of TAR approach, the number of updated items cannot be more than half of the total number of item set. A very small number of updated contents will be very helpful in knowledge hiding detection. For this reason, only one sensitive item is chosen for substituting.

For the item modifying, four substitution methods are designed for the sensitive items:  (1) Null substitution: let the item value be NULL to  substitute the previous value. This approach indicates that the processing WAT looks like a transaction filled incompletely. It sounds reasonable and maybe suitable for some selected data type items. Let a null value to represent the original value;  (2) Unknown substitution: as stated in part 1, one can mark Unknown to substitute the sensitive item contents.

(3) Data substitution: if it is data type, the process becomes complicated. If the item j in I has m different values, that is {I(j).value(k)| k=0,1,?m}.

Then, if weakSet[i].Item[j]=I(j).value(a), let weakSet[i].Item[j] = I(j).value(t), t?a, and I(j).value(t) ? S(CIhid)  As a special case, if the data type is BOOL, it can be reversed directly. For example, the previous TRUE can be changed to FALSE easily.

Here, a new solution to modify the item content is presented as following:  (4) Direct usage: add the selected transactions of WAT to the updating dataset. That will bring two same transactions in the database.

The modified result must be checked to avoid the duplication of WAT in database.

After the selected transactions of WAT are modified successfully, they will be added into the initial dataset to form a new one for rule re-mining or hiding detection.

When the ? gets bigger, the transaction updating operation performs longer time and the hiding effects becomes much better, but the rule hiding robustness may get poorer gradually. Therefore, a suitable value of ? will be found through experimental analysis.

4. Experimental results   To measure the effectiveness of the algorithms, a  database downloaded from the Internet is applied as text format. It consists of more than 45000 transactions with 14 different items. The example stated in part 3 is also drawn from the database. The support is set to 20% and the confidence is kept in 80%. The association rules are discovered through the Apriori algorithm. The algorithm is implemented in C# programming to become a kind of software prototype with functions of rule mining and hiding.

Before running experiments, the performance measure methods are considered to focus on the hiding effect for restricted rules. Three kinds of rates, called Rule Hiding Rate (RHR), Rule Lost Rate (RLR) and Rule Created Rate (RCR), are proposed and applied in the performance measures [6].

Finally, the effects of support attack with lower value than that in rule hiding process is considered to verify the algorithm.

4.1. Experiments on single rule hiding   Four typical rules are chosen for single rule hiding, as shown in Table 1. The first rule is a simple rule, and the other three are composed rules. The test results for the first and second rule hiding are shown in Figure 2 and 3.

When the updating number of transaction reaches to 300, the hiding rate can be 100% with small side effects less than 10% of RLR and RCR.

Table 1  Selected fours rules  No Selected rules  1 (education-num=10) ?(education=Some-college) 2 (salary>50K)?(race=White)? (sex=Male) 3 (education-num=10) ?(education=Some-college)  ?(gain=none) ? (salary<=50K) 4 (age=middle-aged) ?(hours=full-time)  ?(workclass=Private) ?(loss=none) ? (gain=none)        1 2 3 4 5 6 modification number (102)  (% )  RHR  RLR  RCR   Figure 2  Rule 1 hiding performance         1 2 3 4 5 modification number (102)  (% )  RHR  RLR  RCR   Figure 3  Rule 2 hiding performance   For the other two rule hiding, the side effects are less  than 1.5 when the selected rules are successfully hidden, as shown in Table 2 and 3. When the updating number is only 25, the RHR can be reached to 100%.

4.2. Item modification comparison   As stated in 3.3, there are four item updating methods  for their contents. As an example, the fourth rule in 4.3 is chosen to compare their effects. When the modification  number is set to 25, the experimental result is shown in Table 4. The former three methods show similar hiding ability in side effect generation. And the last one has best effect nearly to 0. Certainly, the data substitution method gets more transparent.

Table 2  Results of Rule 3  Updating number  RHR(%) RLR(%) RCR(%)  10 0 0.34 0 25 100 1.27 0 50 100 6.09 5  100 100 2.47 1 150 100 3.27 1   Table 3  Results of Rule 4  Updating number  RHR(%) RLR(%) RCR(%)  10 0 0.76 0 25 100 0.89 0 50 100 4.25 3  100 100 6.89 5   Table 4  Method comparison Methods RLR(%) RCR(%)  Null  4.26 3.9 Unknows 5.03 3.6  Data 5.03 3.6 Direct use 0.89 0   4.3. Robustness to knowledge hiding attacks   After the selected association rule is hidden in the  dataset, someone will discover association rules again with different supports. It will be answered clearly about the robustness of the TAR approach to knowledge hiding detection. If one knows the scheme as the TAR approach, can one recover the hidden rules by reducing mS simply?

Suppose the support threshold is dropped from mS to ' mS ,  and the updating number will be changed to 'sN  in the rule hiding process in order to maintain the hiding effect as follows:  ' '| | | | 1s mN X Y S D? ?? ? ? +? ??  (7)  Then, the added number of transaction modification, supN , can be calculated as:  '  '( ) | | s sup s  sup m m  N N N  N S S D  + ?  ? ?? ? ? ?? ?   (8)     Therefore, the actual updating number of transaction against the support attack must be modified as:  '| | | | ( ) | | 1st m m mN X Y S D S S D? ?? ? ? + ? ? +? ?? ? ? ??  (9)  Similarly for the attack of confidence, suppose the confidence threshold is dropped from mC to  ' mC , and the  updating number will be changed to 'cN  in the rule hiding process in order to maintain the hiding effect as follows:  ' '| | | | 1c mN X Y C X? ?? ? ? +? ?? (10)  Then, the added number of transaction modification, conN , can be calculated as:  '  '( ) | | c con c  cup m m  N N N  N C C X  + ?  ? ?? ? ? ?? ?   (11)  Therefore, the actual updating number of transaction against the confidence attack must be modified as:  '| | | | ( ) | | 1ct m m mN X Y C X C C X? ?? ? ? + ? ? +? ?? ? ? ??  (12)  Finally, the suitable number of transaction modification against the attacks of support and confidence will be described as following:  { }min ,at st ctN N N=  (13)  As an instance, one association rule below is selected to verify the robustness on support attack:  sex=Male ? hours=overtime In the experiment, the RHR can be always reached to  100% for the rule hiding when the value of ? is set more than 0.05. Then, the same hiding rule, with support 20% and dataset of 10000 transactions, are chosen in data mining process here. The value of ? is set from 0.04 to 0.07 for different hiding effects. After hiding operation with TAR approach, the rules are retrieved again by Apriori algorithm under different supports from 5 to 25, as shown in Figure 4.

5 10 15 20 25 30 support (%)  RH R  (% )  0.04 0.05 0.06 0.07   Figure 4  Support attack to the hidden rule   The hiding effects are satisfying. For each kind of  hiding condition, the detection results are similar under different supports. For example, given ? of 0.06, when  the support is set below 20% in rule detection, the RHR will decrease to 81.8% and then maintain the value. When the value of ? is set more than 0.07, the RHR can always keep as 100% on lower supports in detection process. The detection results show that the TAR approach has strong robustness to different support attacking, especially when the value of ? is set enough large.

5. Conclusions   Based on the transaction devoting degrees to the  discovered rules, a new association rule hiding algorithm, called TAR approach, is proposed and implemented with powerful hiding effects. The approach can be also for many kinds of simple rule hiding with different conditions. Only a small number of transactions are required in updating the discovered dataset. Through the modification factor ? to control the updating number of transactions, a suitable value more than 0.05 is obtained to maintain the hiding rate to 100%. Besides, the robustness to the support attack is very exciting owing to the RHR can be maintained to a suitable value. When the modification factor is set more than 0.07, the RHR can be always up to 100%. Therefore, the TAR approach shows more robust and secure than the referenced methods.

Acknowledgement   This work is supported by the Scientific Development  Plan Project of Beijing Education Committee (KM200510017006) and the Funding Project for Academic Human Resources Development in Institutions of Higher Learning under the Jurisdiction of Beijing Municipality.

