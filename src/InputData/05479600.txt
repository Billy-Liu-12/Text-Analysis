An Effective Algorithm for Mining Quantitative Associations Based on Subspace

Abstract-Algorithms for mining Boolean association rules have  been well studied and documented, but they cannot deal with  quantitative data directly. In this paper, a novel algorithm  MQAR (Mining Quantitative Association Rules based on dense  grid) which uses tree structure DGFP-tree to cluster dense  subspaces is proposed, which transforms mining quantitative  association rules into finding dense regions. MQAR not only can  solve the conflict between minimum support problem and  minimum confidence problem, but also can find the interesting  quantitative association rules which may be missed by previous  algorithms. Experimental results show that MQAR can  efficiently find quantitative association rules.

Keywords: data mining, quantitative association rules, DGFP  tree, subspace clustering  1. INTRODUCTION  Data mining has been defined as "The nontrivial extraction  of implicit, previously unknown, and potentially useful  information from data" [1J. Association rule, which describes  correlations of data items in large numbers of data, is a manner  of expressing knowledge. It was first presented by R.Agrawal  in 1993[2J. Then, more and more scholars began to research on  association rule . Several efficient algorithms[3J for mining  boolean association rules have been published .In all, the  problem of mining Boolean association rules has been  extensively researched and is welJ understood, on both the  algorithmic and conceptual levels. In practice, many, if not  most, databases contain much quantitative data and are not  limited to boolean items only.

Srikant and Agrawal proposed an algorithm which is an  adaptation of the apriori algorithm for mining quantitative  association rules in 1996[4J, which partitions each quantitative  attribute into consecutive intervals using equi-depth bins. Then  adjacent intervals may be combined to form new intervals in a  controlJed manner. From these intervals, frequent item sets will    then be identified. Association rules wilJ be generated  accordingly. The problem with this approach is that the number  of possible interval. Combinations grow exponentialJy as the  number of quantitative attributes increases, and it is not easy to  extend the algorithm to higher-dimensional cases. Besides, the  set of rules generated may consist of redundant rules.

There are other approaches that solve some special eases of  mining quantitative association rules [5-7J. For examples, [5,6]  only alJow one quantitative attribute to appear on the right  hand side of the association rule while [7] can only discover  rules with two quantitative attributes on the left-hand side of  the rule.

978-1-4244-5161-611 0/$26.00 20 1 0 IEEE   Zhang Feng  Dept. of Computer  Xi' an University of Science and Technology  Xi' an 710054, China  zhangfengfeng517@163.com  In this paper, a novel algorithm MQAR is proposed, which  is easy to get rid of the noise and redundant rules by  transforming the problem into finding regions with enough  density and then map these dense regions to quantitative  association rules. Also, MQAR proposed a new density and  grid-based cluster algorithm which clusters database by finding  dense subspaces in DGFP-tree and it can deal with higher  dimensional database with scalable performance.

The rest of the paper is organized as folJows. Some  preliminary definitions wiIJ be given in Section I and Section 2.

Section 3 wilJ describe the algorithm MQAR. Section 4 shows  the experimental results and the analysis of our method.

Section 5 concludes the paper and the future work is given.



II. PROBLEM DESCRIPTIONS  A. Quantitative Association Rules  Now, we give a formal statement of the problem of mining  Quantitative Association Rules and introduce some definitions.

We use a simple method to treat categorical and  quantitative attributes uniformly. For categorical attributes, the  values of the attribute are mapped to a set of consecutive  integers. For quantitative attributes that are not partitioned into  intervals, the values are mapped to consecutive integers .These  mappings let us treat a database record as a set of (attribute,    integer value) pairs, without loss of generality.

Now, let I = { i), ib ... , im} be a set of literals, calJed  attributes. Let P denote the set of positive integers. Let Iv  denote the set I X P. A pair (x, v) denotes the attribute as, with  the associated value v. Let IR denote the set{ <x, I, u> E I X P X  P I I ? u, if x is quantitative; l=u ,if x is categorical }. Thus, a  triple { x, I, u} E IR denotes either a quantitative attribute x with  a value in the interval [I, u] , or a categorical attribute x with a  value I . We will refer to this triple as an item. For any X E IR,  let attribute(X) denote the set { xl<x, I, u> E X}.

A quantitative association rule is an implication of the  form X=}Y where XEI, YEI, xnY=0, and no item in Y is  an ancestor of any item in X. The rule X=} Y holds in the  transaction set Y with confidence c if c% of transactions in D  that support X also support Y. The rule X=}Y has support s in  the transaction set D if s% of transactions in D support XU Y.

Given a set of records D, the problem of mining  quantitative association rules is to find all quantitative  association rules that have support and confidence greater than  the user-specified minimum support (calJed min_sup) and  minimum confidence (calJed min _ conf ) respectively.

B. Problem Decomposition  Divide the data space S into non-overlapping rectangular  units by partitioning each quantitative attribute into ? intervals  of equal length, ? is an input parameter.

Map all database transactions into a high-dimensional  space S, which is partitioned into units, sort units by density  and create a DOFP-tree to hold dense cells in the space which  has density higher than the minimum density threshold. In this  step, ceIl is represented by intervals and then inserts the  intervals into DOFP-tree as items.

Mine dense subspaces in the DOFP-tree which contains  information of database transactions to find dense subspaces. In  this step, we use bit set object, without generating conditional  FP-Trees and can utility bit operation to simplify the candidate  set generation and the support count [9].

Based on dense subspaces, we identify the dense subspace  in S, find connected cells to form clusters, and then generate  association rules by the clustering result without redundant  association rules. The general idea is that if, say, ABC and AB  are frequent item sets, then we can determine if the rule  AB=>C holds by computing the ratio conf    support(ABC)/support(AB). If coni>s, then the rule holds.

C. Definition  Let A={A),A2, ... ,Ad} be a set of bounded[8], totally  ordered domain and S= AjxA2x, ... ,xAd be a d-dimensional  numerical space, in which A),A2, ... ,Ad are attributes  (dimensions) of S. The input is a set of d-dimensional records.

The space S is partitioned into a grid of non-overlapping  rectangular units. The units are obtained by partitioning every  dimension into intervals of equal length in div, which is given  as an input parameter. A cell, c, is the intersection of one  interval from each dimension, having a form { C),Cz, ... ,Cd}  where Cj=[lj,uj) is the interval in the partitioning of Aj. A  record r=(r), ... ,r2) is contained in the cell c, if Ij:O; rj:O;uj, for all  Cj. A cell c is dense if the fraction of the total data points  contained in the cell is greater than a user-defined threshold.

We define p as the threshold, which is transaction of the total  number of records present in the dataset.

In this paper, we use a new form to identify grid cells. For  example , cell u ={uj,Uz;",lid} is represented by u = { (I, uj ),(2,  uz), ... ,( d, Ud)}, in which 1,2 .. ,d represents d-dimensional  numerical space ; Uj,U2,"',lid is the interval in the partitioning of  S.

For the database D in TABLE I, map transaction  databases into S, sort cells in density descending order, and  identify D in new form of intervals (TABLE 2).

In this paper, a novel subspace clustering algorithm based  on searching DOFP-tree is proposed, which inserts the dense  cell in the database space S into DOFP-tree as a path from root  to leaf node. It is suitable for mining quantitative association  rules. It first generates the maximal frequent intervals by bit  object operations [9] which can utility bit operation to simplify  the candidate set generation and support count.

l76  TABLE!. DATABASE D  Ko Age Salary Carnum Ko Age Salary Carnum  01 33 11500 2 05 35 11050 1  02 22 3000 0 06 34 12000 2  03 28 7650 1 07 25 7800 0  04 37 12000 1 08 29 8950 1  TABLE II. HISTOGRAM H' AND NEW FORM  Unit density Unit density  (0,0,0)    (0,1,0)  (1,1,1)  (2,2,2)  (2,2,1)       {(1,0),(2,0),(3,0) }  {(I ,0),(2, 1 ),(3,0)}  {(I, 1),(2, 1 ),(3,1)}  {(I ,2),(2,2),(3,2)}  {(I ,2),(2,2),(3, I)}

III. ALOORITHM MQAR  A. Process of Mining Quantitative Association rules       Map transaction databases into S, sort cells in density  descending order. Delete cell whose density is lower than  minimum density threshold. Put all dense cells in histogram H.

Identify the cell in the form of intervals and transform  histogram H to histogram H'.

Scan H', create frequent-interval list which contains  three domains: interval-no, interval-name, interval-link.

Interval-no identifies the position value in list in order to  use bit object and its operation in the process of finding dense  cell; interval-name denoted as(i,j), i represents the ith attribute,  j represents the jth interval of attribute i ;interval-link, which  points to the first node in DOFP-tree carrying the same  interval-name. The frequency of each frequent-interval in  frequent-interval list is larger than minimum support threshold,  which is an input parameter; the frequent-intervals in frequent  interval list are sorted in frequency descending order.

Scan H' again, for every cell in H', frequent intervals in  every cell are listed in frequency descending order. Oet all bit  objects of each cell in D; insert each cell in H' in the form of  bit objects into DOFP-tree; From the BDO tree construction  process, we can see that one need exactly two scans of H: The    first collects the set of frequent interval items and the second  constructs the DOFP-tree. Every dense unit in H' is inserting  into the DOFP-tree as a path from root to leaf node; the  support information of dense units is saved in the last node in  the unit path.

Mine density subspaces in DOFP-tree to find dense  subspaces. According to the result above, generate dense  regions for quantitative association rules in the form of DNF  expressions that are minimized for ease of comprehension.

The node in the DGFP-tree contains four fields: interval  no, count, parent-link and brother-link. interval-no registers  the interval index in high density interval list, which is called  bit object; count registers the data number of cells which  represented by the portion of the path reaching this node ;  parent-link links to the parent node of current node ;node-link  links to the next node in the DGFP-tree carrying the same  interval-no.

The construction of DGFP-tree is similar to FP-tree  [3] .For the given database D, the corresponding DGFP-tree is  shown in Figure 1).

L  Item- Item-lin name  (1,2) --, .. -  (2,2) .....

(3,1) -.-.--  (2,1)  ---  (1,0) ..... -  (3,0)  ?

-  '-  -  (1,1)  " ...

(3,2) .-_. -  Figure I DGFP-tree  B. Search DGFP-tree for dense Subspaces  Algorithm: MQAR (Mining Quantitative Association Rules  based on dense grid)  Input: database D, density threshold e ,  the number of  intervals in each dimension    Output: expression of quantitative association rules in DNF  MQAR (D,?, )  {  liS can database D and Create H ;  CreateDGFP-tree(D, ? );/ICreate DGFP-tree;  DG-growth(DGFP-tree, ? );IISearch high density  subspaces DG whose density is more than ? ;  Cluster(DG, ? );llconnect high density subspaces which  are neighbors;  { i = 0;  }  While(DGi NULL)  { cluster_no = 0; Iiset cluster_no = 0;  }  do{  i++;  neighbor = Findneighbor(DGD;  IISearch all neighbors of DGi  NewDG = NewDG neighbor;  delete neighbor from DG  }while(DGi has no neighbor)  cluster _ no++;  Cluster (DG, ?)   CreateDNF(NewDG); lithe result in the form of NDF  is quantitative association rules;  }  For the given database D, we can find the quantitative  association rules as follows with algorithm MQAR. Previous  algorithm may miss the rule <Age: 22 ... 27>=><Numcars: 0>,  which contains partial attributes.

TABLE III QUANTITATIVE ASSOCIATION RULES IN D  Rules  <Age:22 .. 27>=><Numcars:0>  <Age:32 .. 37>and<Salary:9000 .. 12000>=><Numcars:2>  <Age:27 .. 32>and<Salary:6000 .. 9000>=><Numcars: 1 .. 2>

IV. EXPERIMENTAL RESULTS  We conduct all experiments on 1.80G Hz Intel(R)  Pentium(R) Dual CPU E2160 with 768MB of memory,  running at Windows XP SP2. The code of MQAR algorithm  was complied in Microsoft Visual C++ 6.0. To evaluate the  effectiveness of MQAR, we applied it to the Statlog (Shuttle)    data set maintained at the UCI Machine Learning Repository.

The shuttle dataset has 43,500 transactions and contains 9  attributes all of which are numerical. The first one being time.

The last column is the class which has been coded as follows:  1 Rad Flow 2 Fpv Close 3 Fpv Open 4 High  5 Bypass 6 Bpv Close 7 Bpv Open  For shuttle data set, each dimension is divided into 6,  minimum support is 0.008, and the result is as follows:  (1) [-1522.3, 126.7] /\ [447.0, 745.0] /\ [-54.5, 1240.3]  /\ [-84,124] /\ [-345.5, 4152.3] /\ [3, 79.5] /\ [-4l.5,  166.2] /\ [-45, 59.32] ? Rad Flow support = 75.87%  (3) [-587.571, 823.571] /\ [63.86,85.146] /\ [-  609.42,500.44] /\ [-9.71,79.43] /\ [-2273.14,  1582.15] /\ [17.57,39.43] /\ [3,92] /\ [-0.57, 88.29] ? High  support = 14.03%  (2) [-1522.3, 126.7] /\ [596.0, 745.0] /\ [-54.54,  1240.3] /\ [20, 124] /\ [-44.51, 59.32] /\ [-45, 59.32]  ? Bypass support = 10.08%  To estimate MQAR's efficiency, each dimension in shuttle  data set is divided into 7. When the data size changes (1 ten  thousands, 2 ten thousands, 3 ten thousands, 4 ten thousands, 5  ten thousands, 6 ten thousands records), the result is shown in  Figure 2. From the figure, we can conclude that the execution  times change in linear with the size of database.

MQAR  ,  "  ?-    ?

/"    /  -  ..

,  "  TransactionNo(lOOOO)  Figure 2 Runtime of MQAR  The advantages of MQAR are shown as follows: (1)  DGFP-tree compress the database effectively and don' t need  to scan database many times;(2) H' saves the support    information of each grid units and save the time of calculating  the support information of each grid;(3) don' t generate lots of  candidate units (4) the new form is used to identifY grid units  which makes the finding of neighbor units effective.

v. CONCLUSIONS  In this paper, we introduce a novel algorithm called  MQAR, which employs DGFP-tree to mine quantitative  association rules by searching dense subspaces in DGFP-tree.

The algorithm avoids the conflict between minimum support  problem and minimum confidence problem, and can find the   interesting quantitative association rules which may be missed  by previous algorithms. Experimental result shows that  MQAR can efficiently find quantitative association rules.

