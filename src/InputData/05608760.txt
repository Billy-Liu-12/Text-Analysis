Metrics Calculation for Deployment Process

Abstract? collecting software engineering data is difficult process since it involves calculation on various parameters such as development, testing, integration, quality assurance and deployment activity. This excerpt discusses the metric calculations for the deployment process .People that are the part of a project need to collect, maintain and update relevant data from different development processes. Due to such a complexity of processes, big project do need a dedicated system administrator especially in installation environment, during a project release, when the time and effort calculation of deployment process is required. To avoid such huge manual intervention and to have an automated system, we need some specific formula, to calculate time for deployment and allow development teams to collect data which is useful and time- saving for both practitioners and researchers in an efficient manner.

Keywords?deployment, metrics, Acceptance testing, deployment effort

I.  INTRODUCTION Software deployment is a series of activities that make a  system or an application available to a user or to some other system. The deployment process comprises of several interrelated activities with possible transitions between them.

Some of the deployment activities are as [1]:  A. Release Release means that after the completion of all the  activities during development process, product is ready to be shipped to the production site. This involves informing the stakeholders that the application is available for use.

B. Installation Every activity needs some commands to be executed for  its proper installation and to have it up and running. For certain projects which have been available for a long period and require a backward compatibility, the installation is required for all the versions of it.

C. Downtime If any kind of updates is required in the system firstly it  needs to be brought down for certain period, known as downtime, then only updates can be maintained. After the process it is needed to be completed.

D. Adapt It is the activity to adapt to the changes those are made  in the previous step. Both the customer?s and programmer?s needs to be adapt to the new environment. This requires a handover-takeover between the developers, the testers and the users of the application.

E. Upgrade It is the process that replaces all the earlier versions and  accommodates all the changes that are made into the new version. The process has some enhancements and/or upgrade patches.

F. Uninstall/Rollback It is a process when we revert the entire application to the  earlier version of it. This might also refer to removing certain parts of a project that are not working or no longer required.

This strategy is known as rollback strategy.

G.  Retire Software is known to be retiring when it becomes  obsolete and used for the long time. This process requires informing the stakeholders and bringing down the application.

V2-46C978-1-4244-8666-3/10/$26.00      2010 IEEE         Figure 1.  Deployment Process

II. PURPOSE OF DEPLOYMENT PROCESS In the deployment process, we analyze and characterize  the challenges and issues of software deployment, develop a Specific formulation method for characterizing existing difficulties. Primary factors that characterize the maturity here are process coverage; process changeability; inter- process coordination; and site, product, and deployment policy abstraction. Finally, we provide a variety of deployment methods, which provide an assessment of them against current difficulties in installation of products.

Measures are valuable information in all engineering disciplines in order to evaluate the status of a project and to predict the quality of the final product. Unfortunately, that does not apply to the software engineering area because the relationships among measures, processes, and products are not well known. Predictions are usually difficult, domain dependant, and affected by a relevant error. Researchers in this area are facing a number of difficulties interfering with their main goal. Most of these difficulties deal with technology evolution and changes of user requirements.

The purpose of deployment process is to successfully make product releases and to deliver and release the software to its users. It includes a wide range of activities including producing external releases, packaging and business application, distributing, installing and providing assistance to users. Although deployment activities are mostly dependent on the transition phase and needs to be ready at the end of the development phase.



III. TECHNOLOGY EVOLUTION Evolution of languages  Evolution of development tools  Evolution of the metrics collection tools  A.  Evolution of languages Standard languages, such as C, are not likely to change  but others, like Java and the different versions of C++ are subject to change quite often.. In addition, development tools are evolving and in particular, their libraries to support extensions are subject to major changes. For this reason, in order to support the new libraries and the new features, developers have to rewrite the plug-ins for collecting process metrics.  Besides, tools for metrics collection are research tools that are subject to frequent changes due to bug fixes and improvements generated by the research advancements in the area. These tools are nowadays highly used and are very commonly used in today?s era. During deployment process the main factors that main user requirements changes deal with:  ? Data collection in a specific environment; ? Customized data reports.

Since data collection is implemented in very different  organizations, they are using a wide set of development tools and languages. Moreover, local area networks can be configured in very different ways, increasing the complexity of the metrics transfer to a centralized server.

In addition, users are requesting different data analysis requiring the collection of different data sets. This means that data collection tools have to include enhancement in order to collect more and more data.

B.  Evolution of development tools Standard tools are also introduced which makes the work  easier without any more and more complexities. This saves the time of the user as it deploys automatically with the help of the tool. Emerging trends in the technologies really leads it to reduce efforts.

C.  Evolution of the metrics collection tools For the needs of developing efficient software evolution  of metrics tools are really important. This is discussed further in the next topic below.



IV. METRICS COLLECTION ACTIVITY The metrics collection activity is important in software  development for several reasons. Some of them are the following [8]:  ? Creation of a knowledge base regarding the actual software process in order to make reliable estimates in future projects.

? Tracing the actual status of the project in order to identify possible quality issues and schedule slippages.

? Each software metric has multiple definitions and ambiguous counting rules and the result of metrics problems is due to lack of solid empirical data on software costs, schedules, quality, effort and other tangible matters.

? To minimize the potential risks associated with deploying enterprise software packages,   V2-47        organizations should carefully evaluate the methods and practices that will be utilized during implementation.

? A comprehensive knowledge of the technology required as part of the selected software solution is a critical consideration when assembling the deployment team.

? A standard deployment approach can ensure a consistent experience during implementation for all types of software across the IT environment. This can help both deployment staff and IT staff approach the implementation in a more holistic manner, creating a uniform approach throughout the deployment process.

? Applying a strict sequential order to the deployment process from beginning to end can help identify and eliminate potential issues that can arise later in the deployment process.

? A critical aspect of a successful software implementation always ensures that the technology used under deployment is directly attached to the business process that it supports. Any difference between technology and business processes could lead to significant factors during implementation.

According to above points we need to have specific rules or formulas by which we easily calculate execution time as well as effort and time at deployment process but before they can guarantee a successful installation, producers must be able to determine what components are available at a given site, as well as the configuration of those components [7].



V. METRICS METHODS Few of methods are discussed below, can be different  techniques that are used in deployment in order to calculate cost and effort that is required:  These methods include system and configuration description, package and installation construction, update delivery, and small level network management capabilities also these methods technology has a particularly strong relationship to software deployment is content delivery.

A. First (can be chosen while working on smaller projects).

This is based on estimated test effort as per the industry  standard which is taken as 10% of total development efforts (Man Days). This standard used in many company as well as programming language. In this method we must know the total development effort. First of all, development effort is to be calculated than only we can use this method. And the calculation of development effort is not an much easier task but can be calculated in different number of ways.

B.  Second Deployment Effort = QA + UAT + PROD  Making sure that all these pieces get deployed on the correct machines and in the correct order can feel like a daunting task, especially if you need to repeat it for each environment. Keep in mind that each environment may have  a different number of database servers, application server, HTTP server, etc.

QA (Quality assurance) = system testing + integration testing + checking Environment issue + Configuration testing. UAT (User acceptance test)   = no of Key user + no of test plans + defect tracking & reporting Prod = NUC/Person month                    // no. of use cases  NUC = (USE CASES) * [(100 - %REUSE)/100]  OR Prod = lines of code produced / cumulative    manpower used to produce code  OR  TABLE I.  VALUES OF PROD  DEVELOPER  EXPERIENC  E/CAPABILI  TY  VERY  LOW  LOW  NORMAL HIG  H  V HIGH  PROD 4 7 13 25 50  Here effort calculation is based on Quality assurance, User acceptance test and prod all factors are very important in deployment calculation factor.

System Testing: System testing of software or hardware is testing conducted on a complete, integrated system to evaluate the system's compliance with its specified requirements. System testing falls within the scope of black box testing, and as such, should require no knowledge of the inner design of the code or logic.

Integration testing: Integration testing is the phase in software testing in which individual software modules are combined and tested as a group. It occurs after unit testing and before system testing. Integration testing takes as its input modules that have been unit tested, groups them in larger aggregates, applies tests defined in an integration test plan to those aggregates, and delivers as its output the integrated system ready for system testing.

Checking Environment issue: in which must be know the exactly what are the environment phases or condition.

How they impact on this process.

Configuration testing: it checks the environment of particular condition. What are various types of hardware and software?s the problems facing and how they resolve.

User acceptance test: (UAT) is a process to obtain confirmation by a preferably the owner or client of the object under test, through trial or review, that a system meets mutually agreed-upon requirements. UAT is one of the final stages of a project and often occurs before a client or customer accepts the new system.

All the factors of UAT are dependent of deployment time.

No of user, some time user in this time is not important but all relevant as well as at pick time is very important factor.

Number of test plan that is depending on how to evaluate.

We also measure defect tracking & reporting time because at time of deployment this things also create a major role. Prod   V2-48        divided in three calculation methods in which we calculate it by  ? No of uses cases person month ? Line of code calculated with manpower produced  code.

? Developer experience and capability.

The entire factors help to calculate deployment, with the  help of we easily deploy of software package. Effort calculation is requiring to how much person require. When any organization knows how much person are required they should easily know cost factor calculation as well.

C. Third It is basically based on experience. In this process we  strongly need at least person whose experience on deployment. Procedure or steps of deployment takes time, each of code copy to execution and acceptance testing to documentation.

Deployment Effort = Execution time of application +  Installation   Time on server (code copy+ code run) + Documentation time+ time taken by   + accepting testing.

Execution time of application: Application required how much time to execution with all its effect in proper way. If any problem happens with this process calculate time and care full about future.

Installation time on server: Installation time on server means at time when code or package copy and code run calculate. When we know the total time easily process to calculate deploys effort.

Documentation time: Documentation time for all the help purpose and for easygoing process. This time calculation we person required total time of the written work and no of person required for.

Acceptance testing: Acceptance test is a process to obtain confirmation by a preferably the client of the object under test, through trial or review, that a system meets mutually agreed-upon requirements. Acceptance is one of the final stages of a project and often occurs before a client or customer accepts the new system. Above all the factors are based on experience.

Software deployment is not a single process as install, but rather it is a collection of interrelated processes that are performed after a software system has been developed and made available to consumers.

This paper gives some idea about the deployment procedure and factors, which must be follow and few methods by which deployment effort can easily calculated.

All this methods give specific and standard formulation. In all, testing is very important phase, where lots of time and cost can be saved. Deployment is last step of any development process after that only maintaining of such activity requires. Effort requires in deployment process is calculated in person per hour that is a very important for further plan and cost perspective.

