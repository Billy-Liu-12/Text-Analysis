Keywords: access control policy generation, reputation  evaluation, trust management, XACML, association rule.

Abstract  In view of existing access control mechanisms having coarse granularity and being lack of dynamic adaptabil- ity in cross-domain open environment with a lot of strange entities, an access control policy generation ap- proach from reputation evaluation up to trust manage- ment is proposed. This approach can generate fine- grained authorization policies automatically and dynam- ically according to entities? behaviour features and con- text attributes, which is achieved by integrating reputa- tion evaluation and trust management in an original data mining based way. Such integration makes the approach surpass the limitations of existing integration models, in which reputation evaluation is only subjectively taken as an extension to trust management without overcom- ing the pre-set policies? limited ability to adapt to dy- namic environment. The reputation evaluation combines cloud model and Bayesian networks, which can repre- sent and evaluate the uncertainty of trust more accurate- ly and efficiently. Then the association relationships between entities? attributes and their reputation are ex- tracted from reputation evaluation results. Finally, these relationships will be transformed into attribute based access control policies. Simulation results show that the entities? behaviour features can be automatically mapped into access control policies which can better adapt to cross-domain dynamic environment.

1 Introduction  Appropriate authorizations and access control is a key problem faced by new distributed web applications such as Cloud Computing and Internet of things. These ap- plications involve a great number of strange entities or agents, for which the traditional identity based authori- zation is unsuitable. Such identity based authorization is ideal for closed and static environment. In last few years, a lot of researchers have been studying the secure access in open environment from the aspect of building trust relationships among entities dynamically. Trust is the subjective opinion on an entity?s future behaviour given by another entity. Trust is uncertain and transitive, which makes trust based authorization more suitable for  open and dynamic environment involving a lot of strangers.

There are two different major approaches for establish- ing trust among interacting entities in distributed sys- tems: reputation evaluation and trust management. Rep- utation evaluation focuses on subjectivity and non- rationality and estimates trust levels in a relative way.

Reputation evaluation uses mathematical formula or models which take recommendations from familiar enti- ties and their own experiences as input to compute trust values automatically. By contrast, trust management represents and process trust relationships in a binary (complete trust or complete distrust) and rational way.

Trust management uses security credentials issued by third parties and local security policies to verify if an access is permitted through strong logical analysis.

Trust management is essentially a kind of attribute- based access control model, which makes authorizations decisions based on subjects? attributes, objects? attrib- utes and context attributes. So trust management is suit- able for cross-domain authorization in distributed appli- cations. RT [1] and dRBAC [2] are representative trust management systems. However, trust management is too exact to describe trust levels and some authorization policies like ?satisfied enough?. So some ?soft? mecha- nisms are needed to achieve the balance between securi- ty and ease of access, and to meet the needs of personal- ized fine-grained access control. If we combine reputa- tion evaluation and trust management, provable and ?soft? access control suitable for applications in dynam- ic open environment can be provided.

The integration of reputation evaluation and trust man- agement is not well studied, only few approaches were proposed [3-6]. These approaches can be divided into two categories: taking reputation evaluation results as parameters of trust management policies; transforming original reputation evaluation information into creden- tials. Bonatti et al. import results of reputation evalua- tion via HERMES-like predicates in a modular way, take reputation thresholds as constraints of trust man- agement policies, and then use policy language PROTUNE to formalize reputation and credentials[3].

Li et al. use reputation as parameters of RT roles [4].

Martinelli et al. encode reputation evaluation results  AN APPROACH FOR CROSS-DOMAIN ACCESS CONTROL POLICY GENERATION FROM REPUTATION EVALUATION  TO TRUST MANAGEMENT Y. Wang1, Z.Y. Liu1, C.Z. Hu1, X.L. Zhao1, J.F. Xue1, and L.X. Wei1   1School of Software, Beijing Institute of Technology, Beijing, China wangyong@bit.edu.cn, zhenyanliu@bit.edu.cn, chzhoo@bit.edu.cn,  zhaoxl@bit.edu.cn, xuejf@bit.edu.cn, longxingwei@gmail.com     from J?sang model [5] as RT credentials, then transform into Crypto-CCS reasoning rules [6].

In summary, all the existing integration approaches es- sentially use trust management as the core, and take reputation evaluation as an extension. These approaches are not fundamental solutions to the problem, because the pre-set policies will limit the ability to adapt to dy- namic environment and it is difficult to dynamically define fine-grained policies which can reflect users? behaviour characteristics.

A dynamic trust based access control policy generation approach is proposed in this paper. Our approach gener- ates policies according to entities? behaviour and con- text attributes dynamically in a semi-automatically way.

Our approach combines reputation evaluation and trust management through data mining, other than ad-hoc ways used by existing proposals. So the new approach should have better self-adaptation to cross-domain envi- ronment.

The remainder of the paper is organized as follows. Sec- tion 2 gives an overview of the four components of our approach and then describes the details of each part. The prototype system implementation and simulation are presented in Section 3. Section 4 concludes the paper and presents directions for improvements.

2. Trust Based Cross-domain Access control Policy Generation Approach  Our approach consists of four components or steps: Firstly, build a reputation evaluation model, and imple- ment uncertain reputation evaluation according to relat- ed interactive entities? ratings.

Secondly, extract association rules between entities? reputation and entities? attributes, resource attributes, behaviour attributes, and environment attributes, from reputation evaluation results.

Thirdly, generate attribute based access control policies from the association rules obtained in the above step, and then use eXtensible Access Control Markup Lan- guage (XACML) [7] to describe these policies.

Finally, translate the general access control policies generated in the above step into policies used by specif- ic systems.

The implementation details of the four components are described in following sections respectively.

2.1 Uncertain Reputation Evaluation The uncertainty of reputation is mainly reflected in ran- domness and fuzziness. Our previous research work [8] shows that combining cloud model [9] and Bayesian networks can represent and evaluate the uncertainty of trust more accurately and efficiently.

Reputation Cloud. The cloud model can synthetically describe the randomness and fuzziness of concepts and implement the uncertain transformation between a quali- tative concept and its quantitative instantiations. We use cloud to represent reputation, called reputation cloud.

Reputation T is a qualitative concept defined over uni- verse of discourse U = [0, n], n is any positive integer.

Because reputation is evaluated from ratings from raters, any rating r U can be regarded as a random instantia- tion of T. In real rating systems, it?s common to rate ser- vice quality using discrete satisfactory levels (lev- el1,?,leveln). Each level represents the extent to which an agent is satisfied with the interaction, in which level1 means ?extremely unsatisfied? and leveln means ?ex- tremely satisfied?. A rating r can be any integer in set I = {1, 2? n}, obviously, UI . Besides of cloud drops, we can also describe the overall quantitative property of T by three numerical characteristics: Expectation Ex, Entropy En, and Hyper-entropy He. Expectation Ex is the mathematical expectation of the cloud drops belong- ing to a concept in the universal. Entropy En represents the uncertainty measurement of a qualitative concept. It is determined by both the randomness and the fuzziness of the concept. In one aspect, as the measurement of randomness, En re ects the dispersing extent of the cloud drops and in the other aspect, it is also the meas- urement of fuzziness, representing the scope of the uni- verse that can be accepted by the concept. Hyper-entropy He is the uncertain degree of En.

Next, we will describe briefly how to compute Ex, En, and He.

Reputation Evaluation. We use a Bayesian network to calculate Ex, which takes all cloud drops r together with the context information as evidences. Reputation is the root node, and each type of context information corre- sponds to a leaf, and the expectation of the root node is Ex. We consider m types of context information, and use ( {1, 2, , })  iij C i m  to represent the jth value of con-  text type i, then the context information of an interaction can be represented as a tuple C 1 21 2( , , , )mj j mjC C C .

Given the ratings, the reputation evaluation process, that is the calculation algorithm of numerical characteristics (i.e., Ex, En, He) can be described as in Fig. 1.

Rating Accuracy Evaluation. Besides the reputation evaluation discussed in the above section which focuses on entities? interaction behaviour, entities? rating accura- cy is also important, especially when reliable recom- menders are needed to evaluate an unfamiliar entity?s behaviour reputation.

For each rater entity, reliable recommenders should have similar opinions on the ratee entity?s behaviour reputation, i.e., the similarity between their reputation clouds/tuples given to same ratees (These clouds are evaluated using only ratings from specific raters.) is high. Similarity between two clouds can be computed    using cosine distance between their parameter tuples.

From the aspect of a rater, another rater?s rating accura- cy can be estimated using the average similarity of repu- tation clouds for all ratees rated by both raters.

2.2 Association Rules Mining from Reputation Evaluation Results According to the above reputation evaluation results, association rules can be extracted to reflect the relation- ships between entities? behaviour reputation and enti- ties? attributes, resource attributes, behaviour attributes, and environment attributes. Then for each reputation association rule, we calculate the rating accuracy of related rater entities, and mine the relationship between reliable raters? attributes and ratees? attributes, resource attributes, behaviour attributes, and environment attrib- utes.

Behaviour Reputation Association Rules Mining.

Behaviour reputation association rules are mined using an Apriori based classification association rules mining algorithm. Items have the format of (attribute, value).

Non-classified items include ratee entities? attributes, resource attributes, behaviour attributes, and environ- ment attributes. Classified item is reputation level. Rep- utation level is determined by Ex, En and He. The larger is Ex and the smaller are En and He, the higher is repu- tation level.

The value range of all reputation clouds? Ex in the sys- tem is divided equally into m-1 parts, related boundary values are denoted as X1, X2?,Xm, the average value of all reputation clouds? sums of En and He is denoted as Y, then when Xm-1<Ex<=Xm, and En+He<=Y, the reputation level is m, and when Xm-1<Ex<= Xm, and En+He>Y, the reputation level is m-1.

The behaviour reputation association rules have the fol- lowing format: Rule ID: (ratee entity attribute name, ratee entity attrib- ute value, resource attribute name, resource attribute value), (behaviour attribute name, behaviour attribute value), (environment attribute name, environment at- tribute value)  reputation level Additional attribute names and values can be added based on the actual situation.

Rating Accuracy Association Rules Mining. For each generated behaviour reputation association rule, we can find reliable entities who can give accurate rat- ing to the entities described by the rule. Reliable entities should have two features: (1) familiar with the ratee entity enough, if and only if the number of entities rated by a rater is no smaller than the average number of enti- ties rated by entities covered by the rule; (2) Its rating accuracy is high, i.e., the similarities of its ratee entities? reputation tuples is larger than a threshold.

According to the rating accuracy evaluation results, one entity can find the most reliable recommenders, and can also extract association rules from ratings given by these reliable recommenders. Accuracy association rules are mined using the Apriori based classification association rules mining algorithm too. Items have the format of (attribute, value). Non-classified item is rater entities? attributes. Classified item is the reputation association rule ID, which corresponds to a set of ratee entities? attributes, environment attributes and reputation level.

The rating accuracy association rules have the following format: Rule ID: (rater attribute name1, rater attribute value1, rater attribute name2, rater attribute value2)  Reputa- tion Association Rule ID  2.3 General Trust Based Access Control Policies Generation  From the aspect of an entity, it can not only set policies which directly authorize for familiar entities, but it can also authorize unfamiliar entities indirectly through del- egation policies which involve recommenders. The be- haviour reputation association rules and rating accuracy association rules generated above correspond to two  Input: The set of ratings (cloud drops) R Output: Reputation cloud?s three parameters Ex, En, He  Step1: Initialize all the CPTs to be uniform distribution; Step2: Update Bayesian networks using ratings from R:  a) i = 1; b) Read in a rating ri from R and related context  information C; c) If needed, do time decay process by updating  the CPT of root node ?Reputation? as Equation (1), (2) and (3):  )3(  )2(  1Re  Re  (1)1Re    En  k(m)  k)(m  k)(  e mm  levelputationkP levelputationP  n levelputationP    In which, P(m) (m 0) is the probability adopted in the mth decay round,  is the decay factor, En is the current Entropy.

d) Use rating ri as a new case to update the CPTs; e) i = i +1                                                   (4) f) Repeat steps bb) to ee) until read in all ratings.

Step3: Infer the probability that an entity?s behaviour is on levelk in each different context C (i.e., ClevelTrustP k , k {1, 2,?, n});  Step4: Calculate Ex in each different context C as the expectation of node ?Reputation? in context C using Equation (5): kClevelReputationPEx  n  k k )(   (5)  Step5: Calculate En in each different context C as Equa- tion (6): 2,1  iExr  i En  i  j ij  (6)  Step6: Calculate He in each different context C as Equa- tion (7): 3,11  1 1 iEn  i En  i He  i  j  i  k kj  (7)  Fig. 1  Reputation Evaluation Algorithm.

categories of policies. One category describes which entities are permitted or refused to access which re- sources in what environment, the other category de- scribes which entities can recommend which entities to access which resources in what environment.

In order to make good use of behaviour reputation and rating evaluation results in access control, we transform them into access control policies in general form, which are expressed in XACMLv3.0 (eXtensible Access Con-  trol Markup Language Version 3.0).

Each behaviour reputation association rule and related rating accuracy association rules can be transformed to a policy set. According to the syntax of XACML v3.0 Administration and Delegation Profile Version 1.0 [10], each policy set consists of two policies with delegation relationship, and the attribute match in <Target> field describes the items of the association rules. The struc- ture of the policy set is shown in Fig.2.

<Policy Set> PolicySetId=?IndirectAuthPolicySet1?  <Policy> PolicyId= ?Policy1? MaxDelegationDepth=?1?  <Target>  <Match>  Category=?urn:oasis:names:tc:xacml:3.0:attribute- category:delegated:urn:oasis:names:tc:xacml:1.0:subject-category:access-subject?  Recommender_Entity_Attribute_Name1= recommender_entity_attribute_value1  Resource_Attribute_Name1= resource_attribute_value1  <Match>  Category=?urn:oasis:names:tc:xacml:3.0:attribute- category:delegated:urn:oasis:names:tc:xacml:1.0:subject-category:action?  Action_Attribute_Name1= action_attribute_value1  <Match>  Category=?urn:oasis:names:tc:xacml:3.0:attribute- category:delegated:urn:oasis:names:tc:xacml:1.0:subject-category:environment? Environment_Attribute_Name1= environment_attribute_value1  <Rule> RuleId=?Rule1? Effect=?Permit/Deny?  <Policy> PolicyId= ?Policy2? ??  Category=?urn:oasis:names:tc:xacml:3.0:attribute-category:delegate?  Category=?urn:oasis:names:tc:xacml:3.0:attribute- category:delegated:urn:oasis:names:tc:xacml:1.0:subject-category:resource?  <Match>  Recommended_Entity_Attribute_Name1= recommended_entity_attribute_value1  <Match>  Fig. 2 Structure of Policy1 in indirect authorization policy set.

The first policy (Policy1) is issued by resource owners to delegate to reliable rater entities the right to recom- mend good entities, which is a trusted administrative policy. The first <Match> element with urn:oasis:names:tc:xacml:3.0:attribute- category:delegate category in the policy target is used to describe reliable recommender. Other <Match> ele- ments with urn:oasis:names:tc:xacml:3.0:attribute- category:delegated:<anyURI> categories are used for constraining the specific right of recommendation which expressed as recommended entities? attributes (their category is urn:oasis:names:tc:xacml:3.0:attribute- catego- ry:delegated:urn:oasis:names:tc:xacml:1.0:subject- category:access-subject), resource attributes (their cate- gory is urn:oasis:names:tc:xacml:3.0:attribute- catego- ry:delegated:urn:oasis:names:tc:xacml:3.0:attribute- category:resource), behaviour attributes (their category is urn:oasis:names:tc:xacml:3.0:attribute- catego- ry:delegated:urn:oasis:names:tc:xacml:3.0:attribute- category:action) and environment attributes (their cate- gory is urn:oasis:names:tc:xacml:3.0:attribute- catego- ry:delegated:urn:oasis:names:tc:xacml:3.0:attribute- category:environment). In order to avoid delegated rec- ommender entities to delegate the recommendation rights further to other entities, the policy defines the maximum depth for delegation, i.e. MaxDelega- tionDepth=?1?.

The second policy (Policy2) is issued by delegated rec- ommender entities to authorize some entities to access original delegators? resources. The structure of Policy2 is shown in Fig.3. The <PolicyIssuer> element indicates the recommender entity, which equals to the value of attribute urn:oasis:names:tc:xacml:3.0:attribute- category:delegate in Policy1?s <Target> element. This reflects the delegation relationship between the two pol- icies. Its <Target> element expresses the recommended entities? attributes (their category is urn:oasis:names:tc:xacml:1.0:subject-category:access- subject), resource attributes (their category is urn:oasis:names:tc:xacml:3.0:attribute- category:resource), behaviour attributes (their category is urn:oasis:names:tc:xacml:3.0:attribute- category:action) and environment attributes (their cate- gory is urn:oasis:names:tc:xacml:3.0:attribute- category:environment).

2.4 Translation from General Access Control Poli- cies to Specific Trust Management Policies Specific trust management system defines its own poli- cy syntax, and there is no uniform format. So the gen- eral access control policies generated in the above sec- tion need to be translated into specific trust management policies. The first category policies should be translated to direct authorization policies or credentials, and the second category policies correspond to delegation ones.

In order to illustrate the translation process, we take typical trust management system dRBAC[2] as an ex- ample. dRBAC combines the advantages of role-based access control and trust management systems to create a system that offers both administrative ease and a decen- tralized, scalable implementation. dRBAC represents permissions for controlled actions in terms of roles.

Roles are defined within the name space of a responsi- ble entity. These permissions can be transitively dele- gated to other roles within the same or other namespac- es. dRBAC uses delegations to authorize a principal to act in a given role. At a higher level, the format of a delegation is [Subject  Object]Issuer, where Subject is a role or an entity, Object is a role, and Issuer is an enti- ty. The arrow ? ? can be read as ?has the permissions of?.

For the first category of general policies (direct authori- zation policy), the related delegations have the format: [Ratee_Entity  ResourceOwner.role]ResourceOwner, where role is the permission for some actions on some resources of the delegation issuer. Role?s privileges can be retrieved from general policies? action constraints, resource constraints, and environment constraints in its <Target> element.

For the second category of general policies (indirect authorization policy set), each policy set can be repre- sented by the following two delegations: (1) [Recommender_Entity  ResourceOwn-  er.role?]ResourceOwner, (2) [Recommended_Entity  ResourceOwn-  er.role]Recommender_Entity.

A resource owner uses the first delegation to authorize a recommender entity with the privilege to directly dele- gate the Resource owner?s role (ResourceOwner.role).

Then the recommender entity issues the second delega- tion to grant a recommended entity the rights of Re- sourceOwner.role.

Since dRBAC doesn?t provide format or syntax for spe- cific roles? privileges, applications should make up the blank.

3. Prototype System Implementation and Sim- ulation  3.1 Prototype System Overview A prototype system is implemented to show a possible deployment of our approach and the simulation on it is used to show its feasibility.

The prototype system consists of 4 components: reputa- tion evaluation, trust relationship mining, general access control policy generation and trust management policy transformation. The four components run in sequence, in which, the output of the previous component is used as the input of the next component.

For the reputation evaluation component, the input con- sists of original ratings information and related parame- ters which include the number and names of attributes, the number of values of each attribute, and the number of rating levels. The attributes include ratee entity?s attributes, resource attributes, action attributes, and en- vironment attributes. The output of the component is entities? behaviour reputation under different context (corresponds to different resource attributes, action at- tributes, and environment attributes).

For the trust relationship mining component, the input parameters include rater ID and rating accuracy thresh- old. The output of the component is behaviour reputa- tion association rules, which have context information  (attributes) as the premise part and have reputation val- ue as the consequent part.

For the general access control policy generation compo- nent, the input parameters include rater ID and behav- iour reputation threshold (i.e., trusted entities? reputa- tion value is larger than the threshold). The component also uses behaviour reputation evaluation results, repu- tation association rules, and rating accuracy evaluation results to generate XACML policies.

For the trust management policy transformation compo- nent, the general access control policies in XACML are transformed into dRBAC delegations.

<Policy> PolicyId= ?Policy2?  <PolicyIssuer>  <Attribute>  Recommender_Entity_Attribute_Name1= recommender_entity_attribute_value1  Recommended_Entity_Attribute_Name1= recommended_entity_attribute_value1  <Match>  Category=?urn:oasis:names:tc:xacml:3.0:attribute-category: resource? Resource_Attribute_Name1= resource_attribute_value1  <Match>  Category=?urn:oasis:names:tc:xacml:3.0:attribute-category: action?  Action_Attribute_Name1= action_attribute_value1  <Match>  Category=?urn:oasis:names:tc:xacml:3.0:attribute-category:environment? Environment_Attribute_Name1= environment_attribute_value1  <Rule> RuleId=?Rule2? Effect=?Permit/Deny?  <Target>  <Match>  Category=?urn:oasis:names:tc:xacml:1.0:attribute-category:access-subject?  Fig. 3 Structure of Policy2 in indirect authorization policy set.

3.2 Simulation  Simulation Setting. There are 3 rating levels, denoted as level1, level2, and level3. The behaviour of an entity is determined by a behaviour probability tuple (p1, p2, p3), in which, p1, p2, and p3 are the probability of enti- ty?s service level (rating level) being level1, level2, and level3. The behaviour reputation threshold is 2.5 and the rating accuracy threshold is 0.75. Other parameters that related to attributes are list in Table 1.

Attributes category  Number of attributes  Names of attributes, number of values   Entity?s attributes 3   entityID,   1  entityAttribute1,  3 entityAttribute2,  2  Resource attributes Action attributes Environment attrib- utes   resoucreAttribute1,  2 actionAttribute1,  2  environmentAttribute1,  2   Table 1: Attributes Related Parameters.

The format of the original ratings is as follows: (Rater ID, Ratee ID, rateeAttribute1, rateeAttrib- ute2, resoucreAttribute1, actionAttribute1, environmen- tAttribute1, rating).

The combination of the values of the four attributes cat- egories makes up a context, so there are 48 possible context types in our simulation scenario. Since entities usually change their behaviour with context, we can use behaviour probability tuples in different context to de- scribe entities? behaviour patterns, and the following is an example: rateeAttr1_value3, rateeAttr2_value1, resouce- Attr1_value2, actionAttr1_value1, environmen- tAttr1_value2, (0.9, 0.05, 0.05).

Original ratings are generated in the following scenario.

There are 100 entities, 60 of which belong to group A and 40 belong to group B. The overall service level of group A is higher than group B.

The simulation is divided into 100 rounds and about 25 rounds for each situation. In each round, each entity selects a service provider entity that has the largest Ex and smaller En He according to the reputation evalua- tion algorithm (see Fig.1). In order to simulate the dy- namic nature of entity behaviour, the probability tuples are changed randomly and slightly by increasing 0.01 or decreasing 0.01.after every 10 rounds. So the entities fade all the CPTs each time after learning every 10 cas- es, and then incorporate the latest cases. There are 40% unfair raters, who give unfair ratings to interactive enti- ties, in other words, they are unreliable raters.

Simulation Results. According to the behaviour repu- tation evaluations results, we generate 15 behaviour reputation association rules and 5 rating accuracy asso-  ciation rules. In order to save space, two rules are given here as an example: (1) ReputationRule1: (entityAttribute1, value3), (re-  sourceAttribute1, value2), (actionAttribute1, val- ue1), (environmentAttribute1, value2)  level3  (2) RatingRule1: (entityID, value15), (entityAttribute1, value3), (entityAttribute2, value1)  Reputa- tionRule1  Then these two rules are transformed to a XACML pol- icy set and further transformed to two related dRBAC delegations as follows: (1) [entityID_value15  resourceAttrib-  ute1_value2.actionAttribute1_value1?] resourceAt- tribute1_value2  (2) [entityAttribute1_value3  resourceAttrib- ute1_value2.actionAttribute1_value1] en- tityID_value15  4. Conclusion  An approach for attribute-based access control policy generation from trust relationship is proposed in this paper. The approach has the following features:  In contrast to current trust management systems? pre-set policies, our approach uses reputation evaluations to understand entities behaviour features and then uses association rules mining algorithms to extract trust management policies.

Our approach uses standard access control policy lan- guage XACML to describe generated policies, which makes it easy to transform these policies to other format and to integrate seamlessly with the access control mechanisms in the existing legacy systems.

Our future work will focus on deploy our approach in real systems, such as online social networks.

