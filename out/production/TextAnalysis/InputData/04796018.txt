Detection based on per-flow Packet Count and Entropy

Abstract  Portscanning is a common activity of considerable impor- tance. It is often used by computer attackers to characterize hosts or networks which they are considering hostile activity against. Thus it is useful for system administrators and other network defenders to detect portscans as possible preliminaries to a more serious attack. Thus it is of con- siderable interest to attackers to determine whether or not the defenders of a network are portscanning it regularly.

A major difficulty with detecting these portscans on a high-speed monitoring point is that the traffic volume on high speed links can be tens of gigabits per second and can contain millions of flow and high volume of traffic. This data set is sometimes too large for us. Fortunately, sampling is a typical solution for this problem. So it is usually to employ a sampling method to reduce the data set first. There have been many alternative sampling methods. In this paper, we use a simple and appropriate sampling technique for portscan detection, which we call threshold sampling. It can select large prior to small ones. Meanwhile, it can control the resources consumed by adjusting the threshold. When portscans happen in a network, the attacker always sends flows with only one packet. We hope to pick out these flows applying threshold sampling. We need to select the small prior to big ones. we compute the reciprocal of each attribute as the new attribute. In a word, we employ a mapping from the old attribute to the new one. Then we can employ the sampling. With the reduced data set, we can detect ports scanners more easily and quickly. This is a good preparation for detecting portscan. What?s more, we introduce a new way to identify ports scanners. As the host which scan large number of different destination IP addresses and ports is probably a ports scanners, we can compute the entropy of each host, which reflect the distribution of its destination IP addresses and ports. The experimental results show that datum from the sample also can tell which hosts are port scanners accurately. We will see that the attackers? entropy for destination IP address is bigger than others clearly.

1. Introduction  Portscanning is a common activity of considerable impor- tance. It is often used by computer attackers to characterize hosts or networks which they are considering hostile activity against. Thus it is useful for system administrators and other network defenders to detect portscans as possible preliminaries to a more serious attack. It is also widely used by network defenders to understand and find vulnerabilities in their own networks. Thus it is of considerable interest to attackers to determine whether or not the defenders of a network are portscanning it regularly. A portscan is defined as more than N distinct probes within M seconds from a single source. Portscans is a common class of non-volume based anomalies, which are associated with worm/virus propagation.

In order to detect portscan, there exist several algorithms, which fall into two general approaches: target-specific and traffic profiling. In detail, there are (a) Threshold Random Walk (TRW) [11], (b) Time Access Pattern Scheme (TAPS) [12], and (c) Entropy-based behavior modeling proposed recently [13]. These algorithms are evaluated in [14], and we will see that all of the three algorithms are somewhat complicated. What?s more, they require large memory and CPU processing, although not each destination IP address and destination port are recorded for analyzing. All of the algorithms above employ a simple random sampling as a preprocessing procedure. In some degree, the sample can not represent the whole effectively. In this paper, we use a simple and appropriate sampling technique for detecting portscan, which we call threshold sampling. In other words, we employ a sampling approach as a preprocessing procedure for further analyses.

A port scan is a series of messages sent by someone attempting to break into a computer to learn which computer network services, each associated with a ?well-known? port number, the computer provides. Port scanning, a favorite approach of computer cracker, gives the assailant an idea where to probe for weaknesses. Essentially, a port scan consists of sending a message to each port, one at a time.

The kind of response received indicates whether the port is used and can therefore be probed for weakness. Ports scans include several types, such as vanilla, Strobe, Stealth scan   DOI 10.1109/ICECT.2009.97     and so on. The most common type of portscan footprint at present is a horizontal scan. By this, we mean that an attacker has an exploit for a particular service, and is interested in finding any hosts that expose that service. Thus she scans the port of interest on all IP addresses in some range of interest. Another type is vertical scans. This is where an attacker scans some or all ports on a single host.

Here the rationale is that the attacker is interested in this particular host, and wishes to characterize the services on it, perhaps with a view to find which exploit to attempt, or to find a suitable exploit via her network of contacts and resources.

A wide variety of heuristics for portscan detection have been proposed, all involving some combination of sampling, hashing, and counting(see [2] and section 2 for a survey).

However, only several solutions have clean bounds on the amount of space necessary to produce good approximate lists of the most frequent items. Xenofontas Dimitropoulos et al. [3] proposed to focus flow accounting on heavy- hitter flows in order to deal with the scalability problems of accounting for all flows. Keys et al. [4] described algorithms that compute, at streaming rates, sources or destinations of many flows.

The algorithms mentioned above focus on flows. In this paper, we will present a new approach for detecting portscan.

In detail, we will find the hosts with the least packets. As ports scanners usually send one or two packets to form a flow. Unfortunately we did not find any sampling method which focus on the small ones but not the big ones. On the contrary, we know that threshold sampling is a method which addressed big objects and pay less attention to small ones. Obviously, the effect is contrary. So we compute the reciprocal of each attribute as the new attribute. In a word, we employ a mapping from the old attribute to the new one. Then the following procedures are the same with that of threshold sampling. That?s, first select the targets above the threshold, and then perform an aggregate function over an attribute. Ultimately, sort the aggregate result on disk.

In other words, we filter the data set with a threshold. On the basis of this reduced data set, we still can aggregate the targets and finally find the N IP addresses with largest entropy. And the ports scanners are included in these IP addresses.

The first step can be called threshold sampling, by which we only have to analyze less data, but can learn more infor- mation about the data set. Threshold sampling is suitable for a huge set, which has a large number of variances. Firstly, we need to compute the value of threshold. Secondly, we can get the probability according to the threshold. Finally, we can sample according to the probability.

Threshold sampling is a biased sampling, the main ad- vantage of which is that it addressed big objects but never neglect small ones. Therefore, if we want to distinguish the IP address that makes an unusually high number of distinct  connections within a given time, we can use threshold sampling to get the more important targets. Further more, we can get ports scanners finally.

The rest of the paper is organized as follows. Section 2 discusses some related approaches about portscanning and sampling. Section 3 presents two algorithms of threshold sampling for portscan detection and the meaning of sampling and renormalization. Section 4 presents our experimental results, and section 5 presents conclusion.

2. Related Work  A number of papers have proposed algorithms for related problems in network traffic analysis. The goal of these researches is to develop approaches that extract essential characteristics of network traffic streams passing through routers, especially estimates of the heaviest users, which may represent portscanners, subject to a limited amount of memory about previously seen flows.

Several portscan detection techniques have been proposed in literature. Snort [15] is a flexible rule language that issues alerts based on user-defined connection patterns and rates.

Hence we view Snort as more of a system rather than technique. SPICE [16] is a complex off-line technique based on Bayesian analysis that can detect stealthy portscans. The focus of this paper, however, is on two ?on-line? portscan detection techniques: TRW [11] (Threshold Random Walk) and TAPS [12] (Time Access Pattern Scheme), which can process traffic in real-time to identify portscans and have been shown to be highly effective. In addition, in [17] an evaluation of an entropy-based portscan detection technique are proposed.

There are many alternative sampling methods A self- adaptive packet sampling method is presented in [8], which can adjust the sampling rate according to the required error range. In [9] there are detailed introductions about the control. Sample and Hold has already been discussed in [5]. Although it is not possible to construct an unbiased usage estimator from the measurements produced by this method, its accuracy is similar to that of the present method.

However, unlike the present work, this method would re- quire modification of routers. A review of these and other sampling methods used or proposed for passive Internet measurement can be found in [10].

In this paper, for detecting portscan we will use a sampling method, which controls the sampling rate is to dynamically adjust the sampling threshold z in order to match the rate of selection of flow reports to a target. In section 3 we will introduce this sampling in detail. When z is increased, fewer reports are sampled, while when z is decreases, more reports are sampled. A multiplicative control scheme to adjust z has been considered in [1].It also shows that the number and average length of flows     may be inferred even when some flows are not sampled, and compute the distribution of flow lengths.

3. Algorithms of Threshold Sampling for portscan detection  Our goal is to find ports scanners. As the data set is too large, we reduce data volume by threshold sampling. We expect that heavy hitters in the reduced data are that of the original data. So we first have to understand what threshold sampling is. It can be described as follows. Consider a set of n sizes {xi}i=1,...,n prior to sampling. Initially we can think of this set either as the sizes of all objects, or as the set sizes of objects of a particular key. P (x) is the probability of the object with the size of x .z is the threshold. Then,  p(x) = {  1, if x ? z 0, if x < z .

How to compute the threshold is the key point. Only one threshold can make us estimate some statistics unbiased.

Consider the case the target mean sample volume M is less than n, the total number of objects from which to be sampled. N? =  ? i ?i is the total number of samples  obtained using the sampling function pz . Now the expected number of samples Nz = EN?z =  ? i pz(xi) clearly is a  non-increasing function of z, and indeed we show below that there exists a unique z? for which Nz? = M . So the z? is the right threshold.

We now propose two efficient algorithms to find a thresh- old for sampling. After the execution of the sampling, heavy hitters can be found on the basis of the sampling result. The two algorithms both are based on sampling from the set of source-destination pairs. We first propose a Conservative Algorithm, based on the basic iteration defined in the flowing Theorem. We then present a more complex algorithm, called Root Finding Algorithm, which uses a limited recursion to speed up convergence when N? > M . This assumes the requisite storage and processing cycles are available.

3.1. Conservative Algorithm  Theorem 1 [4]Assume that xi > 0 for all i = 1, . . . , n that n > M , and that z1 > 0. Define g(z) = zNz/M and set zk+1 = g(zk), k ? N .

(i) g(z) is concave and the equation g(z) = z has a unique positive solution z? .

(ii) k 7? zk is monotonic, and limk?? zk = z?.

(iii) k 7? Nzk is monotonic, and limk??Nzk = M .

Based on the theorem, we can infer the following is the conservative algorithm.

zk+1 = zk max{N? (k)zk , 1}  M (1)  We illustrate the form of g and convergence of the sequence {zn} in Figure 1. As show in equation 1, every time we compute the value of z we have to scan the total set.

So it takes much time and resource during the recursive course. Fortunately, there is another algorithm to speed up convergence?Root finding algorithm.

Figure 1. Iteration with g: with sequence {zn} converging to z? from below  3.2. Root Finding Algorithm  Root Finding Algorithm is used to find the root of equation Nz = M . For X?z =<,>,?,?,= define X?z = {x ? X|x ? z}.Given fixed set of sizes X = {x1, . . . , xn} and a target volume M , we can find the right z to pick out about M objects for further analyse.

Let Nz(X) = ( ?  X?z)/z + |X>z|. That is, Nz is our expected number of samples from X with threshold z. Our goal is to find z? = Z(X, M) such that Nz?(X) = M . We note that Nz?(X) = |X| for z ? minX , and that Nz(X) is strictly decreasing for z ? minX . Thus, z? is uniquely defined assuming M < |X|.

The basic idea is to pick some value z and compare Nz with M . If Nz = M we are done. If Nz < M , we know z > z? and if Nz > M , we know z < z?, we wish to recurse on X < z. If z < z?, we wish to recurse on X > z.

Duffield et al.[4]define Nz(X, B) = B/z + Nz(X) Also, define z? = Z(X, B, M) such that Nz?(XB) = M . Then Nz(X, 0) = Nz(X) and Z(X, 0,M) = Z(X, M). Note that if B > 0, Nz(X, B) is strictly decreasing for all z > 0, and hence z? is always unique. So we firstly have to suppose that either B > 0 or M < |X|.

Lemma 1[4]: If Nz(X, B) < M ,  Z(X, B, M) = Z(X<z, B, M ? |X?z|) Lemma 2[4]: If Nz(X, B) > M ,  Z(X, B, M) = Z(X<z, B + ?  Xx?z,M)     The above lemmas immediately imply that the following recursive algorithm correctly determines Z(X, B, M) when B > 0 or M < |X|.

Algorithm Z(X, B, M)[4]: Assume that B > 0 or M < |X|.

1) IF X = ?, return B/M .

2) Pick a random z ? X ,  a)If Nz(X, B) = M , return z.

b)If Nz(X, B) < M , return Z(X<z, B, M ? |X?z|).

c)If Nz(X, B) > M , return Z(X<z, B +  ? Xx?z,M)  As stated above, The Conservative Algorithm is based on the basic iteration defined in Theorem 1. The Root Finding Algorithm can speed up convergence when N? > M . In some degree, the latter is an improving algorithm of the former. Section 4 will presents our experimental results of root finding algorithm.

4. Entropy-based Scan Detection  Entropy-based techniques are motivated by the observa- tion that a majority of anomalous and interesting events induce a change in the distribution of traffic communication pattern, which can be captured by the sample entropy. We will explain in detail how sample entropy is computed and applied to portscan detection. Let X be a discrete random variable that is observed N times and takes values from the set {xi} of cardinality M . Let ni denote the number of times it takes value xi during the observation window. The sample entropy is then defined as:  H(X) = ? M?  i=1  p(xi) log2 p(xi),  Where N = ?M  i=1 ni, and p(xi) = ni/N stands for the sample probability of X = xi. Note that ? H(X) ? log2M .

H(X) = 0 if X always takes the same value and H(X) = log2 M if X is uniformly distributed, i.e., p(xi) = 1/M , i = 1, . . . , M . For traffic analysis purposes, X represents the number of flows with a particular traffic feature, or di- mension. Four typical ?dimensions? are the number of flows for a given source IP address (SrcIP), destionation IP address (DstIP), source port number (SrcPORT), and destination port number (DstPORT), respectively. The Relative Uncertainty (RU) is then defined as:  RU(X) = H(X)  Hmax(X) = ??Mi=1 p(xi) log2 p(xi)  log2 |M | RU is actually a relative entropy and normalizes the degree of uniformity of the distribution. This is because 0 ? RU(X) ? 1, with RU(X) = 0 if X takes a single value, and RU(X) = 1 if X has a uniform distribution over the sample space.

5. Experimental Results  We implemented root finding algorithm for finding the host which launch a portscan. Actually, the data produced by the large installed base of Netflow has recorded frequency of each contact in other form. That?s the packet number of each flow. Therefore, the sampled attribute was the packet number of each flow, which was got from the data of Netflow. In this experiment, we analyzed the actual Netflow reports, which were captured on a 300Mbs link on the connection point of a university campus to the Internet on the 7th of May 2008.

On that day, the host 192.168.2.48 launched portscan on the network segment from 136.56.45.53 to 136.56.44.86. We now review the whole process. Firstly, we employ threshold to select the typical flow. Second, we compute the entropy of each source IP address. Third, we sort the values of entropies to find ports scanners. We find that the host with large value of entropies is probably a port scanner. In this experiment, if we can find out the host 192.168.2.48 rightly, that means our approach is effective. We compute the entropies of each IP from the sample. And table 1 show that the results are exactly what we expect. As this portscan only scan only one port, the entropy of 192.168.2.48 for destination port is zero.

However, entropy for destination IP address is bigger than others clearly.

IP RU of port(des) RU of IP(des) 192.168.140.14 1.362845199 7.763616679 192.168.137.1 1.077875667 7.315554527 192.168.2.48 0 6.193149604 172.16.143.1 4.480420510 6.182974856 172.21.137.156 4.641020213 6.139337622 192.168.21.17 5.168705252 5.564100356 192.168.80.132 5.266353407 5.505689038 172.16.64.246 6.049228862 5.315450516 172.21.138.111 4.910392014 5.242436297  Table 1. entropies of sampled IP addresses  6. Conclusion  We have presented an efficient algorithm for identifying ports scanners. As the data volume was often too large, we select part of data to present the original data. In a word, we have a threshold sampling to get a reduced data set.

The sampling approach can control the resources consumed by adjusting the threshold. Obviously, the effect of this sampling is just contrary to what we expect. As we want to select host with least packets. So we compute the reciprocal of each attribute as the new attribute. In a word, we employ a mapping from the old attribute to the new one. Then the following procedures are the same with that of threshold sampling. Finally, compute each IP address?s entropy based on its destination IP addresses and destination ports. Based on the result we got, we will identify ports scanners easily.

That?s, this sampling method are suitable for detecting port scanners, as their entropies are much larger than the usual hosts.

