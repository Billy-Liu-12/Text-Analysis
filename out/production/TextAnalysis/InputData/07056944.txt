Parallel and Distributed Approach for Incremental

Abstract: Due to large amounts of records and dimensions are  increasing in available databases, pattern mining is a challenging  problem in data mining research. Good number of parallel and  distributed algorithms has been proposed to mine frequent itemsets  based on support threshold of itemset. But, regularity of itemset is  more essential than frequency of itemset in bank transactions,  network transactions and sensor data, etc. Closed itemset has  gained lot of attention than frequent itemset mining in recent data  mining research. Based on these considerations we propose a novel  approach parallel and distributed method for incremental mining  of closed regular patterns using vertical data format. Our proposed  method is capable of generating local models (each node has its  own database summary) as well as global model of closed regular  patterns (node has the summary of whole data base). This ability  permits our approach to generate high contrast closed regular  itemsets, which allows examining how the data is subjective at  different nodes.

Keywords: regular pattern, closed pattern, parallel and distributed  method, vertical format, closed regular pattern.



I. INTRODUCTION  Mining large databases is a challenging problem in data mining and knowledge discovery research due to large datasets coming from big domains such as e-commerce, network traffic analysis, etc. In such domains databases are updated with new data regularly. To address this problem many researchers have been proposed incremental techniques [1] to mine user interesting patterns. These algorithms are used previously mined information with fresh data to compute new set of frequent patterns. Frequent pattern mining is a core mining task in data mining research considers frequency threshold of itemset. These frequent pattern mining algorithms assume the data as centralized, memory resident and static.

However, in real world data mining methods require to handle large databases in which these assumptions are no longer valid.

Regularity of itemset is required more than frequency of itemset and let us assumes at some point we have to compute user required patterns. Tanbeer et.al [2] proposed an algorithm to discover regular patterns based on temporal regularity of pattern in transactional database. The authors constructed a   highly compact tree structure RP tree with support descending order and a pattern growth approach to mine regular patterns in static databases. A pattern is said to be regular pattern if its regularity is less than or equal to user specified maximum regularity threshold. The significance of occurrence behavior of item can be considered in a wide range of real world applications. G.Vijay Kumar et. al [3] proposed an algorithm to mine regular patterns in transactional databases using vertical data format.

However the size of the data set is so large and rate of being updating of datasets also high, so that existing incremental algorithms may be ineffective by themselves. Hence to mine large datasets with dynamic changes we must require high performance computing techniques. Furthermore the data base may be distributed in parallel over multiple sites, being updated at each site with different rates, which requires the use of parallel and distributed mining techniques.

Recently we proposed one parallel and distributed mmmg technique [4] to mine closed regular patterns in large databases. Now we extend this algorithm by implementing incremental mining technique at each local site using vertical format. In this paper we propose an effective parallel and distributed algorithm for mining incremental closed regular patterns on large databases. Our main contributions are

I. A parallel and distributed algorithm based on incremental approach which is used to update datasets at each local site.

2. This algorithm reduces the communication cost among processors.

3. A novel interactive approach for computing closed regular patterns.

4. Experimentation and validation on real and synthetic datasets.

The rest of this paper is organized as follows. Section II describes related work in the fields of regular, closed, incremental and parallel and distributed data mining. Section III specifies the problem statement which we address in this    paper. Section IV describes our proposed algorithm. Section V presents experimental results and fmally we conclude with annotations in section VI.



II. RELATED WORK  Recently Tanbeer et.al [5] introduced a new problem to mine regular patterns in transactional database which follows regularity of data item in their occurrence behavior. They proposed an algorithm called RP-tree algorithm and the construction process of RP-tree is similar to construction process of FP-tree construction technique, in which RP-tree maintains transaction ids at each node than support count maintenance in FP-tree. In this process it uses two database scans. With the first database scan it creates a header table called regular table which stores its regularity and support values of items. In the second scan RP -tree is constructed based on previously R-table for regular item sets. Tanbeer et.al [6] proposed a novel algorithm based on tree structure called PP-tree( parallel pattern tree) to mine frequent patterns in large databases.

Hua-Fu Li et.al [7] proposed an algorithm called Newmoment to mine closed frequent itemsets in data streams using transaction sensitive sliding window. In this algorithm they used effective bit representation of items with single pass itemsets. Chun-Wei Lin et.al [8] proposed an incremental mining algorithm to mine high utility itemsets to handling different measures such as profits, costs according to user interest. This algorithm used the basic concept of fast-update approach which is mainly designed for association rule mining. These items are partitioned according to high transaction-weighted utilization item sets in the original database and each part is executed by its own procedure.

Osmar et.al [9] proposed a parallel algorithm LFPT(multiple local frequent patterns) for parallel mining of frequent patterns based on FP-growth algorithm by having two data base scans by eliminating the candidate items need. MLFPT approach implemented in two stages: In the first stage parallel frequent pattern trees are constructed and mining process will proceed on these constructed trees in the second stage.

Mining closed item sets has been gained lot of attention in present days than traditional frequent mining techniques.

Shengnan Cong et.al[lO] proposed algorithm called Par-CSP to accomplish parallel mining of sequential patterns on distributed memory systems. In this process they adopt the divide and conquer method to minimize the inter process communication overhead and also use selective sampling technique to address load imbalance problem. Mafruz Zaman et.al [11] proposed an algorithm called ODAM (Optimized Distributed Association Rule Mining) algorithm to minimize communication cost.

In this paper we used vertical data format to mine closed regular items in parallel and distributed environment of large databases. The advantage of vertical data format [12] [13] is require only one database scan, and Non regular items are pruned in this format only. This format uses simple operations like union, intersection, deletion etc.



III. PROBLEM DEFINITION  In this section we describe the concepts of period of item, regular pattern mining, closed regular pattern mining, incremental database and also define the problem to obtain complete set of incremental closed regular patterns in parallel and distributed environment.

Let I={iJ,i2,i3, . . . .  im} be a set of items. A set X = { iJ,i2,i3, . . . .  in } !; I, where j :s k and j, k E [1, n] is called a pattern or an item set and T = (tid, X) where T is a transaction in database DB, tid is unique transaction identifier and X is a pattern. The size of the database DB is noted as m = IDBI, transaction set T over the database DB is denoted as T={tl,t2,t3, ..... tm}.

Defmition I(Period of item X)  Assume t/ and tj+lx are two consecutive transactions in database at one processor. The period of item x can be defined as number of transactions between tj x and tj+lX, px = tj+lx - t{ we consider the flfst transaction is tfirst which is null transaction i.e tflfst =0 and last transaction is tlast which is last transaction of the database at one processor. Period of item X can be defined as the number of times item X appears in different transactions.

Definition 2 (Regularity of X) If regularity of X is less than or equal to user given regularity threshold then item X is said to be regular itemset.

Definition 3 (Closed Regular Itemset) Assume X = {XI,X2,X3, . . . .  x,,} be a set of regular item sets and Y = {y"Y2,Y3, . .  ??Yn} be other set of regular itemsets, where X !; Y that is X is subset of Y and Y is super set of X, Support count of Y must not be greater than support count of X then X is called closed regular item set.

Definition 4 (Incremental database) Let the original transactional database be DB and db+ is the set of p number of added transactions to DB. The updated database is represented as UDB which is combination of DB and added transactions db+, i.e (DBUdb+). In UDB flfst transaction tfirst=tO+p and transaction tlast=tn-I+p is the last transaction in the updated database.

Defmition 5 (Parallel and Distributed Closed Regular Pattern)    Assume DS = {P"P2, P3, ...... Pn} be a number of partitions in parallel and homogeneous distributed system. The database DB is divided into n number of equal partitions as db" db2, db3, ....... ,dbn. and each partition dbj is assigned to each individual processor Pj. Let regularity of item X is represented as reglX) in dbj and support count of item X is represented as suplX) in dbj. We describe reglX) and suplX) as global regularity threshold and global support count of item X in dbj.

reg(X) and sup(X) are global regularity threshold and global support count of item X in database DB respectively. Let A is user given minimum regularity threshold and 0 is user given minimum support count. We accumulate all reglX) and suplX) from each processor to fmd global regularity reg(X) and global support count sup(X) respectively. Closed regular pattern X is mined which satisfies user given global regularity and global minimum support.



IV. INC-PDCRP METHOD  In this section we describe our proposed Inc-PDCRP method to mine incremental closed regular patterns in parallel and distributed environment. We consider distributed environment which contains different locations where each location contains resources like processor, memory, etc. Consider the large database and divide this database into small number of partitions equal in size, non-overlapping partitions in order to distribute for n number of nodes. Each node contains one database partition with updated transactions. When new transactions are arrived then p numbers of transactions are distributed equally among nodes for maintaining load balancing among nodes. We consider the instance database [14] in the process of mining incremental closed regular patterns in the parallel and distributed environment on large databases.

Our Inc -PDCRP method is implemented in two levels. In the first level regularity and support threshold of itemset is calculated at every node parallel. When new transactions are arrived then p numbers of transactions are added to the original databases at each node. Each node will process equally specified number of transactions by maintaining load balancing of transactions at each node.

Level 1 Procedure  Input: Incremental database Output: Set of regular patterns at each node with support threshold.

Procedure: l. For m =1 to n nodes 2. For each p 3. Consider Transactions in DB 4. Arrange itemsets in vertical format 5. Let Xj !:; I for k-itemset 6. P\ = 0 for all Xj  7. For each Xj 8. calculate period of Xj 9. P\ = P\+, - P\ lO. Reg(xj) = max(P\) 11. Repeat 12. If reg(xj) <= A 13. Xj is regular item set 14. Else 15. Delete 16. Find support count of each Xj i.esup(xj) 17. Until k item sets 18. Add P no of transactions to the DB 19. Repeat steps 4 to 16 20. End for 2l. End for  TABLE 1: Sample incremental database  Tid Transactions at rrransactions N' ?tN2  1 a, b, c, d ?, c, d, e  2 a, b ?, c, d  3 a, c, d, e ?, d, e DB  4 b, d, e ?, b, c, d, e  5 a, c, d, e ?, c, d, e  6 b, c, d , d  7 a, d, e ?, c, d  8 , d , b, a  9 a, b, e ?, c  10 ct, b, c ?,c, e  ----- ---- ----- ----- ---- ----- ------ ----- ------  In level 1 procedure regular itemsets are find at each node according to user given maximum threshold value and also maintained support count of each itemset. Table 1 represents incremental databases at different nodes. In this example the transactions 1 to 7 are considered as original database and 8th transactions onwards are considered as incremental database.

TABLE 2: Transactions at 2 nodes  Transaction No at Item set node ?ransaction No at node  N1 N2  a 1, 2,3,5, 7 ?, 3,4,5  b 1, 2,4,6 1,4,7  c 1,3,5,6 1, 2,4,5,6, 7  d 1,3,4,5,6, 7 1, 2,3,4,5,6, 7  e 3,4,5,7 1,3,4,5  Table2 represents item sets appeared at different transactions of two different nodes. The item set < b > is appeared in transactions < 1, 2,4,6 > and < 1,4, 7 > respectively at nodes  N' and N2. Table 3 specifies local pX values and reg values at two nodes which is depicted from [4].

Item set  a  b  c  d  e  pX atN'  1, 1, 1, 12,2 1, 1,2,3, 1, 2, 3, 1, 1 1, 2, 1, 1, 1, 1  TABLE 3  Local pX and Reg values at two nodes  Reg pX atN2 atN'  2 12, 1, 1, 2, 2  3 1,3,3  3 1, 1,2, 1, 1, 1  2 1, 1, 1, 1, 1, 1, 1  ?, 1, 1, 2 3 1,2, 1, 1,2  Reg Max(reg atN2 N',reg  N2) 2 2  3 3  2 3  1 2  2 3  Itemset < b> contains their periodicity values <1, 1, 1, 2, 2 > at node N ' and < 1, 3, 3 > values at node N2.Consider max(reg N', reg N2) as final regularity value of corresponding item set.

Level II Procedure  Input: Incremental DB with Regular item sets, 8= 10 (supcount) Output: complete set of closed-regular patterns.

1. Let Xi !:;; I is a regular k-item set 2. Let Xj !:;; I is regular k + m item set  3. m=I,2,3 ........ n 4. Xi!:;; Xj for all i <= j 5. Find Sup(Xi), sup-count of Xi 6. Find Sup(Xj), sup-count of Xj 7. If Sup (Xi) > Sup (Xj) 8. Xi is closed-regular item set 9. Else 10. Xi is not closed-regular item set  In level II procedure support counts of itemsets are calculated and compare support count of item set with its sub item sets.

Support count of item set is not less than support count of sub item set then these item sets are mined.

TABLE4: Support counts of itemsets at N1 and N2  Itemset Sup at Node Sup at Node ?(Sup N1 N2 N1,Sup N2)  a 5 4 9  b 4 3 7  c 4 6 10  d 6 7 13  e 4 4 8  Consider the minimum support count for closed item checking is =10 and maximum regularity A =2. From the table 4 item sets < c > and < d > are closed itemsets which are having support count more than or equal to minimum support count .

In similar fashion we mined two item sets, three item sets and so on. From table 3 the item sets < a >, < d > are regular itemsets whose regularity is less than or equal to minimum regularity thresholdA. From these item set < d > is closed regular item set which satisfies local regularity threshold and global support threshold. We continue this process for remaining item sets also.

In this method regularity is considered at local nodes and support count is considered globally. Inter process communication is not required among processors in this parallel and distributed environment of incremental databases.

Hence it reduces the 110 cost and it requires only one scan of database.



V. EXPERIMENT AL RESULTS  In this section we describe the experimental results. We implement this method on real and synthetic data sets (which are been collected from the web site http://cvs.buu.ac.th/miningldatasets/synthesis _data! and UCI machine learning repository from university of California? Irvine, CA) which are usually used in frequent pattern mining.

In this process every horizontal database is converted into vertical format at every node and every node maintained equal number of transactions without having inter process communication among processors.

We have written code in java with system configuration of 2.66 GHz CPU with 2 GB main memory on windows XP.

Every processor has complete access to set of transactions and data is distributed among processors without inter process communication among them. We did experiment on synthetic data set Tl014D100K which contains lOOK transactions with 870 items and average transaction length is 10.10. We mentioned results in figure 1 with different reg( ) and sup( ) values.

o   ?g=6, sup =8  4 6 8  Fig. I: Execution time on TlOI4DIOOK.



VI. CONCLUSION  In this paper we introduced new approach to mine closed regular item sets on incremental databases with parallel and distributed environment. In this approach we used vertical data format to hold transactions of item sets which requires only one data base scan. This method mines complete set of closed regular item sets based on local regularity threshold and global support threshold which has no inter process communication and minimizes 110 cost among processors. From this approach we conclude that parallel environment is best suitable to mine large data bases and incremental data bases.

