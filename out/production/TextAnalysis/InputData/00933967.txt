Discovery of fuzzy sequential patterns for fuzzy partitions  in quantitative attributes

Abstract In this papel; we propose the F U G  Grids Based  Sequential Pattems @ z i n g  Algorithm (FGBSPMA) to generate all fuuy sequential pattems from relational database. In FGBSPMA, each quantitative attribute is viewed as a linguistic variable, and can be divided into many candidate I-dim fuzzy grids. FGBSPMA is consisted of two phases: one is to generate all the large 1 -fuzzy sequences, the other is to generate all the fuzzy sequential pattems.

FGBSPMA is a eficiently fuzzy sequential pattems mining algorithm, because FGBSPMA scans database only once and applies proper operations on rows of tables to generate large fuuy sequences and fuzzy sequential pattems. An example is given to illustrate a detailed process for mining the fuuy sequential pattems from a specij7ed relation. From this example, we can show efficiency and usefulness of FGBSPMA.

Keywords: Data mining; Database; Fuzzy sequential pattems; Fuzzy partitions; Knowledge acquisition  1. Introduction Data mining can extract interesting patterns from existing  databases and ease the knowledge acquisition bottleneck in building expert systems (Hong et al., 2000). Knowledge acquisition can be easily achieved for users by checking the patterns discovered from databases. Association rule is an important type of knowledge representation. Agrawal et al.

(1993) had firstly proposed a method to find the association rules. Later, Agrawal et al. (1995) also proposed the Apriori algorithm However, other than association rules, the sequential pattern is another important type of knowledge representation. Some algorithms for -mining sequential patterns were proposed by Agrawal & Srikant (1995). A sequential pattern is a sequence which is not contained in another sequence. A sequence is an ordered list of itemsets (Agrawal & Srikant, 1995). On the other hand, mining sequential pattems from large database in supply chain was discussed by Chen et al. (2000).

Since fuzzy knowledge representation can facilitate interaction of the expert system and the users (Zimmermann, 1991), we consider that fuzzy sequential pattems described by the natural language are helpful for us to build a prototype fuzzy knowledge base. In this paper, a efficiently fuzzy sequential patterns mining algorithm - Fuzzy Grids Based Sequential Patterns Mining Algorithm (FGBSPMA) is proposed. FGBSPMA is consisted of two phases: one is to generate all the large 1-fuzzy sequences, the other is to generate all the fuzzy sequential patterns. The concepts of the  fuzzy partitions are incorporated into mining sequential patterns. For the proposed algorithm, only quantitative attributes are divided into many fuzzy partitions.

FGBSPMA is a efficiently fuzzy sequential patterns mining algorithm, because FGBSPMA scans database only once and applies proper operations on rows of tables to generate large fuzzy sequences and fuzzy sequential patterns.

2. Fuzzy partitions Notations used in this paper are first stated as follows  the number of fuzzy partitions in a linguistic variable; the length of a fuzzy sequence; the degree of a given relation, where d I 1; i,-th linguistic term of K fuzzy partitions defined in quantitative attribute n,, 1 I i, 2 K;  the membership function of ;  the total number of customers the number of consecutive transactions ordered by transaction-time for customer r; total number of large fuzzy grids; p-th transaction corresponding to customer r, where t'", = ( t t;)  , t;: ,. . ., t(') ), 1 I r I n,  and 1 5 p  I q; j-th large fuzzy grid, where 1 Ij 5 p.

Pd  To divide each quantitative attribute into many fuzzy partitions have been widely used in pattern recognition and fuzzy inference. Various results of research have been proposed, such as application to pattern classification in Ishibuchi et al. (1992, 1995), and fuzzy rules generated in Wang and Mendel (1992). Some methods of feature space partitions were also discussed by Sun (1994) and Bezdek (1 98 1).

These assumptions cannot make any changes of steps of FGBSPMA. Fuzzy sets was proposed by Zadeh (1965). Zadeh (1975, 1976) also proposed the concepts of a linguistic variable and its applications to approximate reasoning. A linguistic variable is a variable whose values are linguistic words or sentences in a natural language (Chen and Jong, 1997).

1 4 4  0-7695-1165-1101 $10.00 0 2001 IEEE  http://iim.nctu.edu   Fig. l.K=2forx,. Fig. 2. K = 3  forx,.

1 .b  Fig. 3. K =  4forx,,,  that is both convex and normal (Chen and Jong, 1997; Zimmermann, 1991,1996).

A quantitative attribute can be divided into K fuzzy partitions (K = 2, 3, 4, ...). Suppose that x,,, is divided into many fuzzy partitions. We describe K=2, K=3 and K=4 in Fig.

1, Fig. 2 and Fig. 3, respectively. We try to use a linguistic terms set { AZim } to stand for a candidate 1-dim fuzzy grid.

The notation of linguistic terms set can be used to stand for any I-dim fuzzy grid (I 2 1). Therefore, the set operations (for example, union operations) can be applied to any two fuzzy grids. /Lzim (x )  can be defined as follows  bK = (ma - mi)/(K - 1) (3)  where ma is the maximal value of attribute domain, and mi is the minial value. If x, is ?Purchase amounts of Product m?, then AZi, (or simply represented as ? )  is a linguistic term and can be described in a sentence:  Agl : x,,, is small, and below ma/(K-1) (4) AZK : x, is large, and above [ma - mu/(K-1)] (5) Api,  : x, is close to (im- 1) x [mu - ma/(K-1)], and between  to i,,, x [ma - ma/(K-111, 1 < i, < K (i, - 2) x [ma - ma/(K-l)]  (6)  However, if x,,, is ?Age?, then ?young? or ?old? should be more suitable words, other than ?large? or ?small?. If we divide both x1 and x2 into three fuzzy partitions, then a feature space is divided into 3 x 3 2-dim fuzzy grids which are shown in Fig. 4. For the shaded 2-dim fuzzy shown in Fig. 4, we use a linguistic terms set ( &,Il, A$,\ } to represent it.?  0.0 1.0 1.0  0.0  Fig. 4. Both athibutes XI and xz are divided into three fuzzy partitions.

The next important job for us is how to use these candidate 1-dim fuzzy grids to generate large fuzzy sequences and fuzzy sequential pattems. Therefore, we propose the model for generating fuzzy sequential patterns described in following section.

3. Model for generating fuzzy sequential patterns  After all candidate 1-dim fuzzy grids being generated, we need to determine how to find all large fuzzy sequences and fuzzy sequential patterns. In this section, we will introduce concept of large fuzzy sequence in detail. The model for generating fuzzy sequential pattems is described in Fig. 5. We can see that fuzzy sequential patterns are generated by two phases of the proposed algorithm. Large 1-fuzzy grids and fuzzy sequential pattems are generated by phase I and phase II, respectively. Before mining fuzzy sequential pattems, the database is sorted with customer identification number (customer-id) as the major key and transaction-time as the minor key.

A specifid e a s e  Phase1 I I I I I I User-specifid  minimalfuzzy support I I I  I  I  I-fuzzy sequences I  r - - - - -  I - - - - - - - - - - - - - - PhaseIZ  Generating all Iarge k-furzy I I I I  Fig. 5. The model for generating fuzzy sequential patterns.

For simplicity, we assume that each quantitative attribute x,,, is divided into K fuzzy partitions. Now, given a candidate  I-dim (ZI 4 fuzzy grid { A&, , AFi2 ,..., A$$/-, 1, the degree which t$) belongs to this fuzzy grid can be  computed as p$,il ( tg) )e /L2ii, ( t:: ) a . .  . /L;:,-, ( tx!, 1.

p;,,, (t$: ). To check this fuzzy grid to be large or not, we  define its fuzzy support FS{ , Agi,  ,..., ,  A& } as following:  If FS{ A2,jl, AFi, ,..., AS;l-l , AS,,, 1 is larger than or equal to user-specified minimal fuzzy support (min FS), then  { A2,i,, A z i ,  ,..., A$;:,-, , AZ,,, 1 is a large l-dim fuzzy grid. Each large fuzzy grid LJ corresponds to a large 1-fuzzy sequence d,>.

Based on dJ>, the next step for us is to find all large k-fuzzy sequences (2 5 k 5 p>. A fuzzy sequence is an ordered list of large fuzzy grids such as 4 1 ,  &, L+ or 6, I+, L1>.

Hence, we must define the fuzzy support to find the large fuzzy sequences. The fuzzy support of a k-fuzzy sequence is the average degree of total customers who support this sequence. Here, we take d1, L2 ,..., Lk> to be an example to compute its fuzzy support. Since there are C;r different  combinations ( tg)  , t:) ,. . ., t z )  ) (1 I SI < sz < . . . < Sk I ocr) ordered by transaction-time but may be not continuous from p r  tuples, the degree Deg4.1, &,..., L p r  which a customer r supports a k-fuzzy sequence d1, &, ..., L p  is described as follows  where Lk( t(,.,)) represents the degree which tuple t x )  belongs to Lk. Therefore, the fuzzy support of <L1, & ,..., Lp is described as follows  n FSd1,  L2 ,..., Lk> = I: Degdl ,  L2 ,..., L$, /n (9) If FSd1, & ,..., Lk> 2 min FS, then dl, &, ... , Lk> is a  r=l  large k-fuzzy sequence. Finally, the fuzzy sequential patterns are generated from the large fuzzy sequences. Note that, a fuzzy sequence d1, G, . . . , Lzl> is contained in another fuzzy sequence 4 1 ,  &, ..., Lz2>, if there exist integers 1 I j l  < j 2 < ... < j q  such that L1 c Ljl, LZ c L12, .... , LZ1 E LjT For example, <{ A T  ? ), { A T w t 1  }> is contained in <I A T ?  } , { APl?OdUCt 2.2 1 9 A T  1, { A F w t l  A r  }>, since { A Y w t  ? ) E { A24pd?? ? } and I 2,2 ? } E { A Y ?  , A T  }. However, <{ A T  ? }, { A Y  )> is not contained in <( A Y  ?, A T  }>. The former represents small amounts of product 1 and large amounts of product 2 being bought one after the other, while the latter represents small amounts of product 1 and large amounts of product 2 being bought together. A fuzzy sequential pattern is just a large fuzzy sequence which is not contained in any other large fuzzy sequence. We give a simple example to illustrate how we generate the large I-fuzzy sequences.

Example 1.

As showed in Fig. 6, the quantitative amibute xl:  ?Purchase amounts of Product 1? was divided into three fuzzy pastitions. These three fuzzy partitions are described as following: A$;l (or A F w t  I ) :  Purchase amounts of Product 1 is small,  AR2 (or A F  ?): Purchase amounts of Product 1 is close  AB (or A Y  ): Purchase amounts of Product 1 is large,  We assume that there are two customers and each customer owns six transactions for buying product 1. The database is sorted with customer-id as the major key and transaction-time as the minor key. The degrees which (1  I r I 2, 1 I p I 6) belong to A$;, , A$;z and A$!3 have been shown in Table 1. We can easily compute the fuzzy support of these three candidate 1-dim fuzzy grid.

and below 30  to 30, and between 0 to 60  and above 30  Fig 6 .  Attribute ?Purchase amount of Product 1? is h ided  into three fuzzy partitions.

Table 1. The degrees which $1 (15 r S 2, a1 = 6, = 6)  belong to A ~ S ,  and A$f3.

1 46    M ! l  A B  A B  t ( r )  0.95 0.05 0.00  t y  0.00 0.90 0.20  t p  0.40 0.55 0.00  t p  0.10 1 .oo 0.00  2;? 0.90 0.10 0.00  t p? 0.00 0.80 0.25 tp, 0.30 0.65 0.00  ti2) 0.65 0.40 0.00  f y  0.00 0.10 0.90  0.00 0.20 0.70 6  ( 2 )  0.00 0.95 0.10 t4  t $2) 0.00 0.05 0.95  FS{ A$;l 1 = c { Sup [ ,U;:l ( t:,) )I 1 12 = 0.925 (10) FS ( 1 = c ( Sup Pg:2 (tg) 11 1 12 = 0.975 (11) FSI A?3 1 = c { Sup [P;:3 (tr,) 111 12 = 0.925 If the minimal fuzzy confidence specified by users is 0.90, then [ } are the large 1-dim fuzzy  grid. That is, three large 1-fuzzy sequences <( )>,  <{ &,I2 }> and <{ A?3 }> are generated.

Apparently, we need to propose a efficiently mining  algorithm, FGBSPMA, to generate fuzzy sequential pattems.

This is just the main subject introduced in following section.

r=l p   r=l p   (12) r=l p  }, { A$!2 } and [  4. Fuzzy grids based sequential patterns mining  In this section, we begin to introduce the Fuzzy grids based sequential pattems mining algorithm (FGBSPMA) in detail. FGBSPMA is a two phase algorithm. Before FGBSPMA being given, we give some necessary descriptions in following.

Phase I. Generate all large 1-fuzzy sequences  following substructures:  algorithm  Table FGTTFS is used in phase I and consisted of the  (a). Fuzzy Grids table (FG): FG is a two-valued matrix and used in phase I. In FG, each row represents a fuzzy grid, while each column represents a linguistic term A$im. By using FG, we can easily know which fuzzy grid is generated and which linguistic terms are contained in this fuzzy grid.

(b). Transaction table 0: each column represents a tuple (transaction) fgl, while each element records the membership degree which belongs to the corresponding fuzzy grid.

(c). Column FS: which stores the fuzzy support  An initially table FGTTFS is shown as Table 2 to be an example. The first column and first row of Table 2 is auxiliary for us and do not exist in real implementation. From Table 2, we can see that there are two tuples ti?) and ti1) corresponding to customer 1, and two quantitative attributes x1 and x2 in a given relation. Each attribute is divided into two fuzzy partitions.

Initially, each element of FG is assigned to 0 or 1. Thus, we can apply the boolean operations on FG[u] = (FG[u,l], FG[u,2], FG[u,3], FG[u,4]) and FG[v] = (FG[v,l], FG[v,2], FG[v3], FG[v,4]). For example, if we apply OR operation on FG[u] = (1,0,0,0) and FG[v] = (O,O,l,O), then a temporary string rl = (1,0, I ,  0) which corresponds to a candidate 2-dim fuzzy grid { A:;, , } is generated. However, any two linguistic terms defined in the same attribute cannot be contained in a candidate 1-dim fuzzy grid (1 2 2). Therefore, rl = (l,l,O,O) or (O,O,l,l) are all invalid. To solve this problem, we implement a one-dimensional array Group of Fuzzy Grids (GFG) described in Table 3. From GFG, we can easily distinguish which linguistic terms corresponding to the same product. Each index of GFG corresponds to a linguistic term, and linguistic terms corresponding to the same attribute must be set to the same integer number. Since GFG[lI = GFG[21 = 1, invalid rl = (l,l,O,O) is generated by applying OR operation to FG[u] = (1,0,0,0) and FG[v] = (O,I,O,O). This job of inspection is only executed for generating candidate 2-dim fuzzy grids. Generally, a candidate I-dim fuzzy grid is derived by joining two large (Z-1)-dim fuzzy grids, and these two grids share (1-2) linguistic terms. At the end of phase I, all large 1-fuzzy sequences will be generated with total number p.

On the other hand, we implement a one-dimensional array Group of Customer Transactions (GCT) for computing the fuzzy support of each fuzzy sequence. GCT is implemented for phase 11. From GCT, we can easily know which transactions correspond to a specified customer. A exemplar GCT is described in Table 4. In Table 4, GCT[l] = 1 stands for the tuples (transactions) corresponding to customer 1 start from first column of TT. Since the number of tuples corresponding to customer 1 is two, the length of any large fuzzy sequence is at most two.

Phase 11. Generate all fuzzy sequential patterns Table FSEFS is used in phase I1 and mainly consisted of  the Fuzzy Sequences table (FSE): FSE is a integer matrix and each row represents a fuzzy sequence, while each column represents a large fuzzy grid. FSE can make we easily know which fuzzy sequence is generated and which large fuzzy grids are contained in this sequence. Note that, FSE is a p x p table.

At the beginning of phase 11, we assume that the table FSEFS is generated as Table 5. From Table 5, we can see that four large 1-fuzzy sequences are generated. If we apply  corresponding to the fuzzy grid in FG.

1 47    addition operation on FSE[u] = (FSE[u,l], FSE[u,2], FSE[u,3], FSE[u,4]) and FSE[v] = (FSE[v,l], FSE[v,2], FSEiv31, FSEivPI), then a temporary string r3 = (r31, r32, r33, rw) is heuristically generated as following  ( u j +  1, if vj< uj  Table 2. An initial table FGTTFS is given for an example.

Fuzzy  FG TT Suppor t  A$tl A$f2 A$$ A;?z #) t p  FS  Table 3. A one-dimensional array GFG (Group of Fuzzy Grids).

Index 111 121 131 141 1 1 2 3  Table 4. A one-dimensional array GCT (Group of Customer Transactions) for Table 'IT.

Index [l]  Table 5. An exemplar table FSEFS is given.

FSE Fuzzy Support  >  { A$f I 0 0 1  For example, if we apply addition operation on FSE[u] = (1, 0, 0, 0) and FSE[v] = (0, 1, 0, 0), then r3 = (2, 1, 0, 0) corresponding to a candidate 2-fuzzy sequence <{ A$;l }, { A$!, }> is generated. We can see that the large fuzzy grid corresponding to the largest number in r3is the first item (first occurrence) of this sequence, the large fuzzy grid corresponding to the next-to-the-largest number in r3 is the second item (second occurrence) of this sequence, and so on.

Note that, if r3correspons to a candidate k-fuzzy sequence, then it must contain 1, 2 ,..., k; otherihise, it is invalid. For example, r3 = (0, 0, 2, 3) is invalid, and can be discarded.

Generally, a candidate k-fuzzy sequence is derived by joining two large (k-1)-fuzzy sequences, and these two sequences share (k-2) large fuzzy grids. Now, we describe the detailed steps of FGBSPMA in the following.

Algorithm: Fuuy grids based sequential patterns mining algorithm (FGBSPMA) Input: A specified database. The minimal fuzzy support is specified by users.

Output: Phase I: Generate all large 1-fuzzy sequences (large  fuzzy grids) Phase 11: Generate all fuzzy sequential pattems  Method:  Phase I. Generate all large 1-fuzzy sequences Step 1. Generate fuzzy partitions for all quantitative  attributes Step 2. Scan database once and then construct the  initial table FGTTFS ,GFG and GCT Step 3. Finding all large 1-dim fuzzy grids  Set Z = 1. We eliminate the rows of initial FGTTFS corresponding to the candidate 1-dim fuzzy grids which are not large, i.e., these grids' fuzzy supports- computed by (15) does not exceed the user-specified minimal fuzzy support. Assume currently total number of large 1 -dim fuzzy grids is p.

Step 4. Generating all large 2-dim fuzzy grids ( I  2 2) 4-1. Set 1 + 1 to 1. If there is no or only one (Z-1)-dim  fuzzy grid, then go to Step 5.

Repeat 4-2. Select unpaired FG[u] and FG[v] corresponding to large (Z-1)-dim fuzzy grids.

4-3. We apply logic OR operation on FG[u] and FG[v] to generate a temporary string rl which corresponding to a candidate I-dim fuzzy grid c. By running Step 4-3-1 for 1 = 2 and 4-3-2 for 1 > 2, we can check whether c is "valid" or not.

4-3-1. According to 1?s in rl, we can retrieve all corresponding value from GFG. If any two values retrieved from GFG are the same, then we discard c and skip Step 4-3-3 and 4-3-4. That is, c is invalid.

4-3-2. If the sum of the former (1 - 2) bits of rl?is not equal to (E - 2), then we discard c and skip Step 4-3-3 and 4-3-4. That is, c is invalid.

4-3-3. We apply multiplication operation on ?IT[u] and m[v]  to generate a temporary string r2 and compute the fuzzy supportfs of c by (15).

4-3-4. Iffs is larger than the minimal fuzzy support, then set p + 1 to p, add rl to table FG[m, r2 to table TT[m andfs to column FS[B; otherwise, discard c.

Until all FG[u] and FG[v] (U < v) corresponding to large (E-1)-dim fuzzy grids have been paired.

Step 5. Is any large 1-dim fuzzy grid generated?

If yes, then repeat by going to Step 4, else construct FSEFS, set 1 to k, and continue to execute phase 11.

We can find that the final FGTTFS only stores large fuzzy grids.

5. Discussions and analysis Since fuzzy knowledge representation can facilitate  interaction of the expert system and the users (Zmmermann, 1991), we consider that fuzzy sequential patterns described by the natural language are helpful for us to build a prototype fuzzy knowledge base. Therefore, mining the fuzzy sequential patterns from the database is necessary. In this paper, we propose the Fuzzy Grids Based Sequential Patterns Mining Algorithm (FGBSPMA). FGBSPMA is consisted of two phases: Phase I. Generate all large fuzzy grids Phase It. Generate all fuzzy sequential patterns  On the other hand, the meaning of the fuzzy terms of a quantitative attribute x, can be changed by the linguistic hedge (Chen and Jong, 1997; Zimmermann, 1991, 1996) such as ?very? or ?more or less?. For example,  ( A$?, )? = more or less AZi, = ( (15)  The membership functions of (Azi,  >? and ( AZin 1?? can and be stated as respectively. Therefore, there are three different linguistic terms defined in each partition, such as AZim,  ?very  ? and ?more or less &pi, ?. Finally, there are 3K  [ Goti, (x)I2 and [ ,UZim (x)] In ,  Phase II. Generate all f u w  sequentialpatterns Step 1. Generating all large k-fuzzy sequences (2 I k I  1-1. Set k + 1 to k. If there is no or only one (k-1)-fuzzy sequence, then go to Step 2.

p>  Repeat 1-2. Select unpaired FSE[u] and FSE[v] corresponding to large (k-1)-fuzzy sequences.

However, if the former (k - 2) numbers are different or former (p  - k + 1) numbers are all equal to zero, then we discard this combination and skip Step 1-3, 1-4 and 1-5.

1-3. We apply (21) on FSE[u] and FSE[v] to generate a temporary string r3 corresponding to a candidate k-fuzzy sequence s?.

1-4. We apply (17) on TT[u] and TT[v] to generate FS(s?).

1-5. If FS(s?) is larger than user-specified minimal fuzzy support, then add r3 to table FSE and FS(s?) to column FS; otherwise, discard s?.

A T  }, { A F  }> to be an example  different linguistic terms defined in the quantitative attribute x,. These extensions for defining the linguistic terms by linguistic hedge in the quantitative attributes will make the fuzzy sequential patterns mined from the given relation more friendly and more flexible to the users. We use an example to illustrate how to generate the large 1-fuzzy sequences after employing these extensions.

On the other hand, the number of fuzzy partitions defined in each quantitative attribute need not to be equal to K. For example, ?Age? can be divided into three fuzzy subsets, and ?Income? can be divided into four fuzzy subsets. Moreover, we consider that each quantitative attribute can be divided to K = 3,4,5, ... simultaneously, as a result, some more useful sequential patterns may be mined from database. We also do not restrict the shapes of the membership functions defined in the quantitative attributes. We can use different types of the membership functions such as triangular or trapezoid functions for the fuzzy subsets. The adjustment of the membership functions by learning from examples had been proposed (Lin & Lee, 1991; Jang, 1992). Therefore, the membership functions of linguistic terms of the fuzzy association rules should be refined by learning from specified input and its desired output.

6. Conclusions In this paper, we propose FGBSPMA to generate all  fuzzy sequential patterns from relational database.

FGBSPMA is a efficiently fuzzy sequential patterns mining algorithm, because FGBSPMA scans database only once and applies proper operations on rows of tables to generate large fuzzy sequences and fuzzy sequential patterns. An example     is given to illustrate a detailed process for mining the fuzzy sequential pattems from a specified relation. From this example, we can show efficiency and usefulness of FGBSPMA.

