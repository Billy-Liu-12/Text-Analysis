Mining Application Repository to Recommend XML Configuration Snippets

Abstract?Framework-based applications controlled by XML  configuration files are quite popularly used in current  commercial applications. However, most of these frameworks  are complex or not well documented, which poses a great  challenge for programmers to correctly utilize them. To  overcome these difficulties, we propose a new tool to  recommend XML configuration snippets automatically  through mining tree patterns and pattern associations from the  application repository with the aim of assisting the  programmer to generate proper XML configurations during  the production phase. In this demo, we showcase this tool by  presenting the major techniques behind the tool and the typical  usage scenarios of our tool.

Keywords -XML; code reuse ; code generation

I. INTOTRODUCTION  In today?s software development, developers often utilize XML based frameworks to simplify implementation or make the programs structural. Developers in general need to develop XML configuration files and client code to build framework-based programs. See Figure 1 as an example. To implement the typical login logic by Struts [5] (one widely used framework to implement MVC in Java Web Applications), the programmer needs to build the XML configuration (Figure 1.b) and the client code (Figure 1.a). It is usually the case that programmers improperly input the elements, attributes or attribute vales by mistake while the IDE gives no prompt messages. These facts lead to incorrect and inefficient usage of these frameworks.

Automatic XML configuration snippets recommendation is one of promising solutions through generating reusable XML substructure, sub elements/attributes combination, or element/attribute values. However, most of previous academic works [1, 2] only focus on recommending language-level sample code through simple association rule, sequence patterns, etc. The open source/commercial industrial tools like, Eclipse XML Editor [6], can?t recommend XML snippets based on the application context.

Automatic XML configuration snippets recommendation for framework-based programming now is possible due to the availability of (1) massive framework-based application repositories on Web or in the SDK CDROM of the framework tutorial books and (2) well-developed XML data mining techniques [3, 4].  By customizing these mining techniques, we propose a tool named XMLSnippet, which mines closed frequent tree patterns and their associations to automatically recommend reusable XML snippets through Type Query (TQ, recommendation of the fundamental content of an empty XML document for one framework),  Structure Query (SQ, XML substructure recommendation according to the position of the current cursor in the XML document.), and Context Query (CQ, recommendation of context-sensitive attribute/element values).



II. IMPLEMENTATION OF XMLSNIPPET    Figure 2 Overview of XMLSnippet  The architecture of XMLSnippet is shown in Figure 2, consisting of three major phases: pre-processing, offline mining and online query. In phase 1, application repository is first preprocessed into 2 parts: XML repository and client code repository. In phase 2, the tool mines XML repository and syntax trees of client code repository to generate Frequent Tree Patterns (FTP, denoting the hidden structural rule in the XML configuration files) and Syntax Tree Patterns (STP, representing the commonly used code structures). After that, associations between FTP and STP are built. The cores of XMLSnippet, closed frequent tree mining and association mining between FTP and STP, distinguish our tool from other code recommendation tools that leverages simple association rules [1], or sequential patterns [2]. The third phase provides online assistance.

Figure 1 Sample code for configuration  Posters and Informal Tool Demonstrations       A. Closed Frequent Tree Pattern Mining  By mining closed frequent tree patterns from XML configuration files, we can support TQ and SQ. All XML documents are modeled by trees as [3] does. Let D be a database of XML trees. For a given pattern t, we say t occurs  in a XML tree s?D if t is a subtree of s. By traditional transaction-setting mining [4], the support of a pattern t in  the database D is defined as the number of XML tree s?D such that t is a subtree of s. A pattern t is called frequent if its support is greater than or equal to a minimum support specified by a user. We leverage the closed frequent tree mining algorithm proposed in [3] to extract the informative frequently used tree patterns hidden in XML repository, where all the subtrees of the frequent closed trees are FTP.

The algorithm is also applied on syntax trees of client code repository to generate STP.

B. Association Mining between FTP and STP  By building the association between STP and FTP, we can support CQ. We found that most of the attribute values are from regarding terms of client code with certain code structure (STP). These attribute values bridge the logic controlled by XML configuration fragment (FTP) to client code. In Figure 1.a, such attribute values are identified and highlighted. For example, ?action? in Login.jsp shares the same value with corresponding element ?path? in Struct- config.xml. To extract appropriate attribute values from client code, we need to mine association between FTP and STP. Then, CQ can be answered.

An association rule X ? Y with confidence c[4] on transaction set means that if a transaction contains X, it contains Y with probability of c. Let T be the set of transactions in the form of (S, F), where S is an instance of a STP and F is an instance of a FTP. S and F can be paired if and only if they share at least one common item. Let I(S) be the pattern of an instance S. Then, for a pair of STP and FTP, denoted by SP and FP, we define the confidence of association rule SP.u?  TP.v by the following equation:  },).(|{  }....,).(,).(,|{ )..(  TtSPStIt  vFtuStFPFtISPStITtt vFPuSPConfidence  ?=  ====?  =?    Here, the confidence is the proportion of transactions whose SP instance has a syntax node u sharing the same value with an attribute node v of its FP instance among all transactions with SP instances. For those with higher confidence than a threshold specified by user, there is an association from a syntax node u of SP to an attribute node v in FP.

Figure 3.  An example of STP?FTP association    As Figure 3 shows, b.action?a.path and c.class?a.type are two associations, where a, b and c are three patterns. That is to say, if b exists in client code, there is high confidence that there is an FTP instance a in the configuration file and its path value should equal to value of b.action. The same rule holds for c.class?a.type.  Hence, if the programmer raises request in the edit point of the attribute ?type? in Figure 1.b, the candidates including ?LoginAction? are supposed to be presented.

C. Online Query  As mentioned above, there are three major classes of atomic queries to return XML snippets to assist coding: TQ, SQ, and CQ. Once the hotkey is triggered, the prefix tree of the XML Doc under editing is fed to subtree query processing to find matched FTPs. At the editing point, TQ will return the fundamental XML structure of the framework to fill the empty XML Doc; CQ will return snippets generated from an appropriate FTP with the same subtree of XML doc context. On the other hand, when an attribute value is expected, the tool will leverage the context syntax tree (CST) to generate candidate values extracted from corresponding client codes by association mining.



III. SUMMARY AND FUTURE WORK  In this paper, we describe the key techniques of a XML snippet recommendation tool:  XMLSnippet. We have also implemented the tool as an Eclipse Plug-in and demonstrated (http://gdm.fudan.edu.cn/attach/XMLSnippet/XMLSnippetDemo.wmv) that the tool could recommend reusable XML snippets to help programmers configure XML files when building framework-based applications.  In the future, we plan to build an online version of XMLSnippet.

