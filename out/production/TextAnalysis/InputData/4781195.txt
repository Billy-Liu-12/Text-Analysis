Fast and Memory Efficient Mining of High Utility Itemsets in Data Streams

Abstract   Efficient mining of high utility itemsets has become one  of the most interesting data mining tasks with broad  applications. In this paper, we proposed two efficient  one-pass algorithms, MHUI-BIT and MHUI-TID, for  mining high utility itemsets from data streams within a  transaction-sensitive sliding window. Two effective  representations of item information and an extended  lexicographical tree-based summary data structure are  developed to improve the efficiency of mining high utility  itemsets. Experimental results show that the proposed  algorithms outperform than the existing algorithms for  mining high utility itemsets from data streams.

1. Introduction   Association rule mining (ARM) has been widely  studied over the last decade. ARM model treats all items  in a large database by only considering whether an item  appeared in a transaction or not. The count of an itemset  is not a sufficient indicator of interestingness. It only  reflects the number of transactions in a large database that  contains the itemset. However, it does not reveal the  utility of an itemset. The utility can be measured in terms  of cost, profit or other expressions of user preferences.

Moreover, frequent itemsets may only contribute a small  portion of the overall profit, whereas non-frequent  itemsets may contribute a large portion of profit.

Therefore, a new model of ARM, i.e., utility mining  model [5], is proposed to address the limitation of  traditional ARM. Based on the utility mining model,  utility is a measure of how useful or profitable an itemset  X is. The utility of an itemset X, i.e., u(X), is the sum of  the utilities of itemset X in all the transactions containing

X. An itemset X is called a high utility itemset if and only  if u(X) ?  min_utility, where min_utility is a user-defined  minimum utility threshold. Therefore, the goal of utility  mining is to find a set of high utility itemsets from a large  transaction database.

Formal definition of utility mining, a theoretical model,  called MEU, and a unified framework were proposed by  Yao et al. [10, 13]. In this work, the utility is defined as  the combination of utility information in each transaction  and additional resources. An efficient utility mining  algorithm, called Two-Phase, was proposed by Liu et al.

[11]. The basic idea of Two-Phase algorithm is based on  the MEU. But Two-Phase algorithm not only can prune  down the number of candidate itemsets, but also can find  a complete set of high utility itemsets.

A data stream is an infinite sequence of data  elements continuously arrived at a rapid rate [2, 4].

Frequent pattern mining is one of interesting problems  of mining data streams [3, 6, 7, 8, 9]. However, less  work were proposed for mining high utility itemsets  from data streams. Tseng et al. [12] proposed the first method, called THUI-Mine, for mining temporal high  utility itemsets from data streams. In the framework of  THUI-Mine, a database is divided into a sequence of  partitions. In the first scan of database, THUI-Mine  employs a filtering threshold in each partition to generate  a progressive set of itemsets. Then, it uses database  reduction method to generate a set of candidate k-itemsets,  where k ? 2. Finally, it needs one more scan over the  database to find a set of high utility itemsets from these  candidate k-itemsets. There are two problems of THUI-  Mine algorithm: a lot of false candidate itemsets and huge  memory requirement. Therefore, in this paper, we propose  two efficient algorithms for mining high utility itemsets  from data streams. Experiments show that the proposed  algorithms outperform the THUI-Mine algorithm.

The remainder of this paper is organized as follows.

The problem is defined in Section 2. The proposed  algorithms are described in Section 3. Section 4 discusses  the experimental results. Finally, we conclude the work in  Section 5.

2. Preliminaries 2.1. Problem Definition  Let I = {i1, i2, ?, in} be a set of n distinct literals called  items. An itemset is a non-empty set of items. An itemset  X = (i1, i2, ?, ik) with k items is referred to as k-itemset,   DOI 10.1109/ICDM.2008.107    DOI 10.1109/ICDM.2008.107     and the value k is called the length of X, and ij ? I for j =  1, ?, n. A transaction T = <TID, (i1, i2, ?, ik)> consists  of a transaction identifier (TID) and a set of items (i1,  i2, ?, ik), where ij ? I, j = 1, 2, ?, k. A data stream DS =  {T1, T2, ?, Tm} is an infinite sequence of transactions,  where m is the TID of latest incoming transaction. The  transaction-sensitive sliding window (TransSW) of DS  is a window that slides forward for every transaction [8].

The window at each slide has a fixed number, w, of  transactions, and w is the size of the TransSW. Hence,  current transaction-sensitive sliding window  CurTransSW (or TransSWN????w+1) = [TN?w + 1, TN?w + 2 , ?, TN], where the index (N?w + 1) is the window identifier of current TransSW.

Example 1 An example data stream DS, as shown in  Figure 1, is composed of four consecutive TransSWs, i.e.,  TransSW1=[T1, T2, ?, T9], TransSW2 = [T2, T3, ?, T10],  TransSW3=[T3, T4, ?, T11] and TransSW4= [T4, T5, ?,  T12], when the window size, i.e., w = 9, is given.

In the typical framework of frequent itemsets mining,  the quantity of item purchased of each transaction is 1 or  0.  However, in the framework of high utility itemsets  mining, the quantity of item purchased is an arbitrary  number. The quantity is called local transaction utility  (LTU). The LTU, denoted as o(ip, Tq), represents the  quantity of item ip in the transaction Tq. For example, o(a,  T3) = 12 and o(c, T1) = 26 in Figure 1.

The external utility (EU), i.e., profit, of an item ip,  denoted as u(ip) is the value associated with item ip in the  utility table. For example, u(a) = 3, u(b) = 10 and u(c) = 1.

The utility of an item ip in transaction Tq,  denoted as  u(ip, Tq), is defined as o(ip, Tq)???? u(ip). For example, the utility of item a in transaction T3 is 36, i.e., u(a, T3) = o(a,  T3) ? u(a) = 12 ? 3 = 36. The utility of an itemset X in transaction Tq, denoted as u(X, Tq), is defined  as ? ?Xi  qp  p  Tiu ),( , where X = (i1, i2, ?, ik) is a k-itemset  and X ? Tq. For example, the utility of 2-itemset (ce) in  transaction T1 is 31, i.e., u(ce, T1) = u(c, T1) + u(e, T1) =  26 ? 1 + 1 ? 5 = 31, and utility of 3-itemset (abe) in  transaction T6 is 48, i.e., u(abe, T6) = u(a, T6) + u(b, T6) +  u(e, T6) = 1 ? 3 + 4 ? 10 + 1 ? 5 = 48.

The utility of an itemset X in TransSW, denoted as  u(X) = ? ??? qq TXDT  qTXu ),( , is the sum of the utilities of X in  all the transactions of TransSW containing X as a subset.

For example, the utility of 2-itemset (bd) in TransSW is  146, i.e., u(bd) = u(bd, T2) + u(bd, T4) + u(bd, T8) = 66 +  52 + 28 = 146, when the size of TransSW is 9.

An itemset X is called a high utility itemset if and only  if u(X) ? min_utility. For example, 2-itemset (bd) is a high  utility itemset in TransSW1 since u(bd) = 146 ?  min_utility if min_utility is 120 in TransSW1.

Problem Statement Given a data stream DS, the size  w of a transaction-sensitive sliding window TransSW, and  a user-defined minimal utility threshold min_utility, the  task of this paper is to mine the set of high utility itemsets  efficiently from current sliding window.

Figure 1: An example data stream and its utility table  2.2 TWDC-Property  In the framework of Boolean frequent itemset mining  algorithms [1, 3, 6, 7], downward closure property, i.e.,  if an itemset is frequent then all its subsets must be  frequent, is usually used to mine all frequent itemsets  from a large database. However, the downward closure  property can not be used for mining high utility itemsets.

For example, the utility of 1-itemset (d) is 72 in  TransSW1, i.e., u(d) = 72, in Figure 1. It is a low utility  itemset but its superset 2-itemset (bd) is a high utility  itemset since u(bd) = 146 > min_utility if min_utility is  120. Hence, we need new properties to mine high utility  itemsets.

In this section, a property, called Transaction  Weighted Downward Closure Property (TWDC-  Property) [12], is used in our proposed algorithms to  mine the set of high utility itemsets in streaming  transactions with a transaction-sensitive sliding window.

Definition 1 The transaction utility of the transaction  Tq, denoted as tu(Tq), is the sum of the utilities of all  items in Tq. For example, tu(T1) = u(c, T1) + u(e, T1) =  26*1+1*5 = 31. For example, the transaction utility of  each transaction in the example data stream of Figure 1 is  given in Figure 3.

Definition 2 The transaction-weighted utilization of  an itemset X, denoted as twu(X), is the sum of the  transaction utilities of all transactions containing X. For  example, in TransSW1 of Figure 1, the transaction-  weighted utilization of 2-itemset (bd) is 146, i.e., twu(bd)  = tu(T2) + tu(T4) + tu(T8) = 66 + 52 + 28 = 146.

Definition 3 An itemset X is called a high transaction-  weighted utilization itemset (HTU-itemset) if and only  if twu(X) ? min_utility, where min_utility is a user-defined  minimum utility threshold. For example, if min_utility is  120, the 2-itemset (bd) is a high transaction-weighted  utilization itemset since twu(bd) is 146 in TransSW1 of  Figure 1.

Property 1 (Transaction-Weighted Downward  Closure Property) Let X be a k-itemset and Y be a (k-1)-     itemset such that Y ? X. If X is a high transaction-  weighted utilization itemset, Y is also a high transaction-  weighted utilization itemset.

For example, let min_utility is 120 in TransSW1 of  Figure 1, since 3-itemset (abe) is a high transaction-  weighted utilization itemset, its subsets, i.e., (a), (b), (e),  (ab), (ae), (be), are also high transaction-weighted  utilization itemsets.

3. Efficient Mining of High Utility Itemsets  In this section, two algorithms, MHUI-BIT and MHUI-  TID, are proposed to mine a set of high utility itemsets  from data streams. The proposed algorithms consist of  two major components, i.e., item information (discussed  in Section 3.1) and a lexicographical tree-based summary  data structure based on item information (discussed in  Section 3.2).

3.1 Bitvector and TIDlist Representations  The first major component of proposed algorithms is  item information, i.e., effective representations of items.

Two effective representations of item information, i.e.,  Bitvector and TIDlist, are developed and used in the  proposed methods to restrict the number of candidates  and to reduce the processing time and memory usage  needed. In this paper, we proposed two algorithms to  mine the set of high utility itemsets based on Bitvector  and TIDlist, respectively. Note that the first proposed  algorithm based on the Bitvector representation is called  MHUI-BIT (Mining High Utility Itemsets based on  BITvector). Moreover, based on TIDlist representation,  the second proposed method is called MHUI-TID  (Mining High Utility Itemsets based on TIDlist).

Definition 4 For each item x in the current transaction-  sensitive sliding window TransSW, a bit-sequence with w  bits, denoted as Bitvector(x), is constructed. The  construction process of Bitvector is described as follows.

If the item x is in the i-th transaction of current TransSW,  the i-th bit of Bitvector(x) is set to be 1; Otherwise, the  bit is set to be 0.

Definition 5 For each item x in the current transaction-  sensitive sliding window TransSW, a sorted list with at  least w values, denoted as TIDlist(x), is constructed. The  construction process of TIDlist is described as follows. If  the item x is in the i-th transaction of current TransSW,  the value i is stored in the TIDlist(x).

For example, the representations of Bitvector and  TIDlist of each item of TransSW1 and TransSW2 are  given in Figure 2. From this figure, we can find that item  (a) appears in transactions T3, T6, T8, and T9 of TransSW1.

Hence, the Bitvector of item (a), i.e., Bitvector(a), and  the TIDlist of item (a), i.e., TIDlist(a), are <001001011>  and {3, 6, 8, 9} in TransSW1, respectively. Furthermore,  Bitvector(a) and TIDlist(a) within TransSW2 are  <010010110> and {2, 5, 7, 8}, respectively.

Both algorithms are composed of three phases, i.e.,  window initialization phase, window sliding phase, and  high utility itemsets generation phase. These phases are  discussed from Section 3.2 to Section 3.4, respectively.

Figure 2: Bitvector and TIDlist of items  TID Transaction Utility TID Transaction Utility  T1 31 T7 105  T2 66 T8 37  T3 42 T9 53  T4 52 T10 62  T5 22 T11 42  T6 48 T12 21  Figure 3: Transaction utility of each transaction of Example 1  3.2 Window Initialization Phase  The first phase is window initialization phase. The  phase is activated while the number of transactions  generated so far in a data stream is less than or equal to a  user-defined sliding window size w. In this phase, the  item information, i.e., Bitvector and TIDlist, and  transaction utility of each transaction within a current  sliding window are generated.

For example, the representations of Bitvector and  TIDlist of Example 1 are given in Figure 2 and the table  of transaction utility of each transaction within sliding  windows, TransSW1 and TransSW2, is shown in Figure 3.

While the sliding window is full, the proposed  lexicographical tree-based summary data structure, called  LexTree-2HTU (lexicographical tree with 2-HTU-  itemsets), based on item information is constructed. The  procedure of building the LexTree-2HTU is described as  follows.

First, a set of high transaction-weighted utilization 1-  itemsets (1-HTU-itemsets) is generated by using item  information and the transaction utility table. Then, a set of  candidate 2-itemsets, i.e., C2, are generated by combining  the set of 1-HTU-itemsets. As each candidate is generated,  its corresponding transaction-weighted utility is  determined immediately by using item-information and  the transaction utility table. Finally, 1-HTU-itemsets and  2-HTU-itemsets whose transaction-weighted utility are  greater than or equal to the minimum utility are  maintained in the proposed summary data structure  LexTree-2HTU.

Note that in the MHUI-TID algorithm, the TIDlist of a  candidate k-itemset is generated by joining the TIDlists of  the two (k-1)-itemsets, where k ? 2 and the set of two (k-  1)-itemsets is a subset of this k-itemset. In MHUI-BIT     algorithm, the Bitvector of the two (k-1)-itemsets is  generated by performing bitwise AND operation on the  Bitvectors of the two (k-1)-itemsets.

For example, five items, a, b, c, d and e, are 1-HTU-  itemsets in the window TransSW1 of Example 1. First,  four candidate 2-itemsets {ab, ac, ad, ae} are generated  from 1-HTU-itemset a. In the framework of MHUI-TID  algorithm, the TIDlist(ab) in TransSW1 is {6, 8, 9} which  is generated by intersecting TIDlist(a) = {3, 6, 8, 9} and  TIDlist(b) = {2, 4, 6, 7, 8, 9}. In the framework of MHUI-  BIT algorithm, the Bitvector(ab) in TransSW1 is  <000001011> and is generated by performing bitwise  AND operation on Bitvector(a) = <001001011> and  Bitvector(b) = <010101111>.

Next, the transaction-weighted utility of candidate 2-  itemset ab, i.e., twu(ab), can be obtained by summarizing  the corresponding transaction utilities. Hence, twu(ab) =  tu(T6) + tu(T8) + tu(T9) from the transaction utility table as  shown in Figure 3. Other candidates {ac, ad, ae} are  verified in the same way. Finally, two 2-HTU-itemsets,  i.e., (ab) and (ae), are maintained in the LexTree-2HTU  with prefix a as shown in Figure 4. We use the same  process to construct the sub-trees with prefixes b, c, d,  and e. The result of LexTree-2HTU of TransSW1 is given  in Figure 5.

Figure 4: LexTree-2HTU after inserting all candidate 2-itemsets with  a prefix item a    Figure 5: LexTree-2HTU after inserting all candidates of TransSW1  3.3 Window Sliding Phase  The second phase of mining high utility itemsets, i.e.,  window sliding phase, is activated while the window is  full and a new transaction arrives. In this phase, two  operations are performed. The first operation is to update  the item-information. The second one is to update the  summary data structure LexTree-2HTU. Two operations  are described as follows.

3.3.1 Update Item Information  In the framework of MHUI-TID algorithm, all TIDlists  of items are sliding. The sliding means that the value of  TIDlist is decreased by the number of dropped  transactions. After sliding, new transactions are added.

Hence, the TIDlists of items appeared in the new  transaction are needed updated. For example, when  window slides from TransSW1 to TransSW2, the oldest  transaction T1 is deleted and new incoming transaction T10  is added in the sliding window. At this time, the TIDlists  of items in T1 and T10 are updated. For instance, the  TIDlists of items c and e of T1 are changed from {1, 5, 8,  9} to {4, 7, 8} and from {1, 5, 6, 7, 8, 9} to {4, 5, 6, 7, 8},  respectively.

In MHUI-BIT algorithm, all Bitvectors of items are  updated by performing bitwise AND operation for  window sliding. For example, when window slides from  TransSW1 to TransSW2, the oldest transaction T1 is  deleted and new incoming transaction T10 is added in the  sliding window. At this time, the Bitvectors of items in T1  and T10 are updated. For instance, the Bitvectors of items  c and e of T1 are changed from <100010011> to  <000100110> and from <100011111> to <000111110>,  respectively.

After updating item-information, we need to classify  the items recorded in the dropped transaction and new  incoming transaction into three types, i.e., DeleteItem,  InsertItem and IntersecItem, for updating the proposed  summary data structure LexTree-2HTU efficiently. The  set of items in the dropped transaction is called  DeleteItems. The set of items in the new incoming  transaction is celled InsertItems. The set of items not  only in the dropped transaction but also in the new  incoming transaction is called IntersecItems. For  example, item e is DeleteItem, item b is InsertItem, and  item c is IntersecItem in Example 1.

3.3.2 Update LexTree-2HTU  The updating process of LexTree-2HTU is composed  of three operations as described as follows.

(a) Item is a DeleteItem: Since the item is only in the oldest (dropped) transaction, the transaction-weighted  utilities of its child nodes are less than or equal to that of  previous window. That means its child nodes may be 2-  HTU-itemsets in previous sliding window but are not 2-  HTU-itemsets in the current sliding window. In this case,  we check the child nodes of this item with its item-  information based on different proposed algorithms and  prune these child nodes while their transaction-weighted  utilities are less than the user-defined minimum utility.

For example, since there are no potential candidate 2-  itemsets generated from the item e (item e is a leaf node  in this case) in previous sliding window, no itemsets need  to be checked in the current LexTree-2HTU.

(b) Item is an InsertItem: Since the item is only in the  new incoming transaction, the transaction-weighted  utilities of its child nodes are greater than or equal to that  of previous window. That means its child nodes may be  not 2-HTU-itemsets in previous sliding window but may  be 2-HTU-itemsets in the current sliding window. New  candidate itemsets are generated from this new incoming  transaction and their transaction-weighted utilities are     verified. If these new itemsets are high transaction-  weighted utilization itemsets (HTU-itemsets), we insert  these HTU-itemsets into the LexTree-2HTU immediately.

For example, item b is an InsertItem in Example 1. In  the new incoming transaction T10, only one candidate 2-  itemsets (bc) is generated from item b, i.e., with prefix b.

After verifying the transaction-weighted utility of  candidate 2-itemset (bc), i.e., twu(bc) = tu(T8) + tu(T9) +  tu(T10) = 152 ?120 (minimum utility), itemset (bc) is inserted into the LexTree-2HTU as a branch with a prefix  item b as shown in Figure 5. Note that the existing child  nodes of item b, i.e., (bd) and (be), are not necessary to  check their transaction-weighted utilities, since the  transaction-weighted utilities of itemsets (bd) and (be) are  greater than the user-specified minimum utility and at  least the same values as that of previous window. The  result is given in Figure 6.

(c) Item is an IntersecItem: Since the item is not only  in the dropped transaction but also in the new incoming  transaction, original 2-HTU-itemset may be not a 2-HTU-  itemset in current sliding window and vice versa. In this  case, we check the transaction-weighted utilities of  existing nodes appeared in the new incoming transaction  to decide whether or not they need to be deleted from the  LexTree-2HTU. Moreover, in order to decide whether or  not new candidate itemsets are need to be inserted into the  LexTree-2HTU, we also check the transaction-weighted  utilities of these new candidates generated from the new  transaction.

For example, item c is an IntersecItem in Example 1  since it appears in transactions T1 = {(c: 26), (e: 1)} and  T10 = {(b: 6), (c: 2)}. In this case, only one existing node,  i.e., (ce), needs to be checked and no new candidate 2-  itemsets need to be checked. After deleting the transaction  T1, the transaction-weighted utility of 2-HTU-itemset (ce),  i.e., twu(ce), changes from 143 to 112. The new  transaction-weighted utility of itemset (ce) is less than the  user-defined minimum utility, i.e., 120. Hence, the node  (ce) is deleted from the current LexTree-2HTU. The result  is shown in Figure 7.

Figure 6: Updated LexTree-2HTU after processing the items in  DeleteItem and InsertItem of Example 1    Figure 7: Updated LexTree-2HTU after processing the items in  DeleteItem, InsertItem and IntersecItem of Example 1    Figure 8: Patterns generated after first and second scan of sliding  window for TransSW1 and TransSW2 of Example 1  3.4 High Utility Itemsets Generation Phase  The phase of generating high utility itemsets is usually  performed periodically or when it is needed. In this phase,  the proposed algorithms use level-wise method to  generate a set of candidate k-HTU-itemsets, Ck, from the  previous pre-known (k-1)-HTU-itemsets, where k ? 2.

After that, we can immediately find the set of k-HTU-  itemsets by using the item-information (Bitvector of  MHUI-BIT algorithm and TIDlist of MHUI-TID  algorithm). The candidate-generation-testing process  stops when no candidates are generated.

For example, let the user-defined minimum utility is  120, an itemset X is a high utility if and only if u(X) ? 120.

There are five 2-HTU-itemsets generated in TransSW1 of  Example 1. But only one candidate 3-itemset (abe) is  generated by combining three 2-HTU-itemsets, i.e., (ab),  (ae) and (be). After that, in MHUI-TID algorithm,  TIDlist(abe) = {6, 7, 8} by joining TIDlist(ab) and  TIDlist(ae). Hence, twu(abe) = tu(T6) + tu(T7) + tu(T8) =  138 ? 120. Therefore, itemset (abe) is a 3-HTU-itemset.

Note that in MHUI-BIT algorithm, Bitvector(abe) =  <000010110> by performing bitwise AND on Bitvector(ab)  and Bitvector(ae). Because no more new candidates are  generated, the candidate-generation-testing process stops.

After all candidate HTU-itemsets are generated, one more  scan of sliding window is needed to find high utility itemsets  of TransSW1. The result of high utility itemsets generated  after first and second scan over each sliding window is  shown in Figure 8.

4. Performance Evaluation  All the programs are implemented in C++ STL and  compiled with Visual C++.NET compiler. All the  programs are performed on AMD Athlon(tm) 64  Processor 3000+ 1.8GHz with 1GB memory and running  on Windows XP system. All testing data was generated by  the synthetic data generator provided by Agrawal et al in  [1]. However, the IBM generator only generates the  quantity of 0 or 1 for each item in a transaction. In order  to adapt the databases into the scenario of utility mining,  the quantity of each item and the utility of each item are  randomly generated. In these experiments, the quantity of  each item in each transaction, Qip,, are generated  randomly, ranging from 1 to 5. The utility of each item,  Uip,, stored in the utility table is synthetically created by     assigning a utility value to each item randomly, ranging  from 1 to 1,000. Observed from real world databases that  most items are in the low profit range, the utility value  generated using a log normal distribution, as is similar to  the model used in the THUI-Mine algorithm [12].

T15I10D100K T20I15D100K T30I20D100K  Datasets  E x ec  u ti o n t im  e (s  ec .)  THUI-Mine MHUI-BIT MHUI-TID   Figure 9: Execution time of algorithms MHUI-BIT, MHUI-TID, and  THUI-Mine under various datasets   Figure 10: Comparisons of the number of candidates    Three datasets, T15I10D100K, T20I15D100K and  T30I20D100K, are used to compare the experimental  results of these methods in Figure 9. The window size is  fixed to 30,000. The partition size is fixed to 10,000. The  minimum utility threshold is fixed to 1%. From this figure,  we can see that THUI-Mine only runs successfully in the  dataset T15I10D100K. However, the execution time of  THUI-Mine can not be drawn in this picture since it needs  much more execution time.  From this figure, we can find  that the relation of execution time needed is ?MHUI-TID  << MHUI-BIT << THUI-Mine?.

The comparison of the number of candidates  generated after 1 st scan is given in Figure 10. From this  figure, we can find that our algorithm generates less  candidate itemsets than that of THUI-Mine. Hence, the  proposed algorithms are memory efficient algorithms  for mining high utility itemsets from data streams.

5. Conclusions  Mining of high utility itemsets is one of the most  interesting research problems of data mining. In this paper,  we proposed two efficient one-pass algorithms for mining  a set of high utility itemsets form a transactional data  stream. Experiments show that the proposed algorithms  are efficient one-pass mining methods and outperform the  existing algorithms for mining high utility itemsets from  data streams. Future work includes mining top-k high  utility itemsets from data streams and mining high utility  itemsets from data streams with constraints.

Acknowledgements  The research is supported by National Science Council of  R.O.C. under grant no. NSC96-2218-E-424-001- and  NSC 95-2221-E-009-069-MY3.

