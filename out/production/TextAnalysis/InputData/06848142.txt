Enabling Efficient Access Control with Dynamic Policy Updating for Big Data in the Cloud

Abstract?Due to the high volume and velocity of big data, it is an effective option to store big data in the cloud, because the cloud has capabilities of storing big data and processing high volume of user access requests. Attribute-Based Encryption (ABE) is a promising technique to ensure the end-to-end security of big data in the cloud. However, the policy updating has always been a challenging issue when ABE is used to construct access control schemes. A trivial implementation is to let data owners retrieve the data and re-encrypt it under the new access policy, and then send it back to the cloud. This method incurs a high communication overhead and heavy computation burden on data owners. In this paper, we propose a novel scheme that enabling efficient access control with dynamic policy updating for big data in the cloud. We focus on developing an outsourced policy updating method for ABE systems. Our method can avoid the transmission of encrypted data and minimize the computation work of data owners, by making use of the previously encrypted data with old access policies. Moreover, we also design policy updating algorithms for different types of access policies. The analysis show that our scheme is correct, complete, secure and efficient.

Index Terms?Access Control, Policy Updating, ABE, Big Data, Cloud

I. INTRODUCTION  Big data refers to high volume, high velocity, and/or high variety information assets that require new forms of processing to enable enhanced decision making, insight discovery and process optimization. Due to its high volume and complexity, it becomes difficult to process big data using on-hand database management tools. An effective option is to store big data in the cloud, as the cloud has capabilities of storing big data and processing high volume of user access requests in an efficient way. When hosting big data into the cloud, the data security becomes a major concern as the cloud servers cannot be fully trusted by data owners.

Attribute-Based Encryption (ABE) [1]?[5] has emerged as a promising technique to ensure the end-to-end data security in cloud storage system. It allows data owners to define the access policy and encrypt the data under the policy, such that only users whose attributes satisfying the access policies can decrypt the data. When more and more organizations and enterprises outsource the data into the cloud, the policy updating becomes a significant issue as the data access policies  ?This work was supported by RGC HK [Project No. CityU 114112], NSF China [Grant No. U1301256] and NSF US [Grant No. CNS-1262277].

may be dynamically and frequently changed by data owners.

However, this policy updating issue has not been considered in existing attribute-based access control schemes [6]?[8].

The policy updating is a difficult issue in attribute-based ac- cess control systems, because once the data owner outsourced the data into the cloud, it would not keep a copy in local systems. When the data owner wants to change the access policy, it has to transfer the data back to the local site from the cloud, re-encrypt the data under the new access policy, and then move it back to the cloud server. By doing so, it incurs a high communication overhead and heavy computation burden on data owners. This motivates us to develop a new method to outsource the policy updating to the cloud server.

The grand challenge of outsourcing the policy updating to the cloud is to guarantee the following requirements:  1) Correctness: Users who possess sufficient attributes should still be able to decrypt the data encrypted under new access policy by running the original decryption algorithm.

2) Completeness: The policy updating method should be able to update any type of access policy.

3) Security: The policy updating should not break the security of the access control system or introduce any new security problems.

The policy updating problem has been discussed in key- policy structure [1] and ciphertext-policy structure [9]. How- ever, these methods cannot satisfy the completeness require- ment, because they can only delegate key/ciphertext with a new access policy that should be more restrictive than the previous policy. Furthermore, they cannot satisfy the security requirement either. For example, when a new attribute is added into a threshold gate and the threshold gate is changed from (t,n) to a (t + 1,n+ 1), both methods will set the share of the new attribute to be 0. In this case, users who only holds t attributes (excluding the new attribute) can satisfy the new (t +1,n+1)-gate.

In this paper, we focus on solving the policy updating prob- lem in ABE systems, and propose an efficient outsourced pol- icy updating method. Instead of retrieving and re-encrypting the data, data owners only send a policy updating query to the cloud server, and the cloud server can update the policy of the encrypted data without decrypting it. Our scheme can not only satisfy all the above requirements, but also avoid the  IEEE INFOCOM 2014 - IEEE Conference on Computer Communications      transfer of encrypted data back and forth and minimize the computation work of the data owner by making full use of the previously encrypted data with the old access policies in the cloud.

The contributions of this paper include: 1) We formulate the policy updating problem in ABE  sytems and develop a new method to outsource the policy updating to the server.

2) We propose an expressive and efficient data access control scheme for big data, which enables efficient dynamic policy updating.

3) We design policy updating algorithms for different types of access policies, e.g., Boolean Formulas, LSSS Struc- ture and Access Tree.

The remaining of this paper is organized as follows. In Section II, we defines the system model, the framework and the security model. Section III describes an attribute-based access control scheme for big data based on an adapted mutli-authority CP-ABE method in [5]. Section IV proposes some policy updating algorithms for different types of access policies. In Section V, we give a comprehensive analysis of our scheme in terms of correctness, completeness, security and performance. The related work is given in Section VI. Finally, this paper is summarized in Section VII. In Appendix A, we give the definition of access structures in ABE systems, and then introduce two types of access structures that are well used in constructing ABE schemes.



II. SYSTEM AND SECURITY MODEL  A. System Model  We consider a cloud storage system with multiple author- ities, as shown in Fig.1. The system model consists of the following entities: authorities (AA), cloud server (server), data owners (owners) and data consumers (users).

Authority. Every authority is independent with each other and is responsible for managing attributes of users in its domain. It also generates a secret/public key pair for each attributes in its domain, and generates a secret key for each user according to their attributes.

Server. The cloud server stores the data of data owners and provides data access service to users. The server is also responsible for updating ciphertexts from old access policies to new access policies.

Owner. The data owners define the access policies and encrypt the data under the policies before hosting them in the cloud. They also ask the server to update the access policies of the encrypted data stored in the cloud.

User. Each user is assigned with a global user identity and can freely get the ciphertexts from the server. The user can decrypt the ciphertext, only when the its attributes satisfy the access policy defined in the ciphertext.

B. Framework  To meet all the requirements of policy updating, we define the framework of our access control scheme as follows.

Fig. 1. System Model  Definition 1 (Framework). Our dynamic policy access con- trol scheme is a collection of the following algorithms: GlobalSetup, AuthoritySetup, SKeyGen, Encrypt, Decrypt, UKeyGen and CTUpdate.

? GlobalSetup(? )?GP. The global setup algorithm takes no input other than the implicit security parameter ? . It outputs global parameters GP for the system.

? AuthoritySetup(GP,AID) ? (SK,PK). The authority setup algorithm is run by each authority AID with GP and the authority identity AID as inputs and produce its secret/public key pair (SKAID,PKAID).

? SKeyGen(GID,GP,SGID,AID,SKAID)? SKGID,AID. Each authority AID runs the secret key generation algorithm to generate a secret key SKGID,AID for user GID. It takes as inputs the global identity GID, the global parameters, a set of attributes SGID,AID that issued by this authority AID and the secret key SKAID of this authority. It outputs a secret key SKGID,AID for this user GID.

? Encrypt({PK},GP,m,A) ? CT. The encryption algo- rithm takes as inputs a set of public keys {PK} for relevant authorities, the global parameters, the message m and an access policy A. It outputs a ciphertext CT.

? Decrypt(CT,GP,{SKGID,AID})? m. The decryption al- gorithm takes as inputs the ciphertext, the global parame- ters and a collection of secret keys from relevant author- ities for user GID. It outputs the message m when the user?s attributes satisfy the access policy corresponding to the ciphertext. Otherwise, decryption fails.

? UKeyGen({PK},EnInfo(m),A,A?) ? UKm. The update key generation algorithm is run by the data owner. It takes as inputs the relevant public keys, the encryption information EnInfo(m) of the message m, the previous access policy A and the new access policy A?. It outputs the update key UKm of m that is used to update the ciphertext CT from the previous access policy to the new one.

? CTUpdate(CT,UKm) ? CT?. The ciphertext updating algorithm is run by the cloud server. It takes as inputs the previous ciphertext CT and the update key UKm. It  IEEE INFOCOM 2014 - IEEE Conference on Computer Communications      outputs a new ciphertext CT? corresponding to the new access policy A?.

C. Security Model  The cloud server is assumed to be semi-trusted (curious-but- honest), it is curious about the data it stored and the messages it received, but it will update the ciphertext correctly for data owners. We also assume that the server may send the owners? data to the users who do not have access permission. The data owners are assumed to be fully trusted. The users are assumed to be dishonest, i.e., they may collude to access unauthorized data. The authorities can be corrupted or compromised by the attackers. We assume that the adversaries can corrupt author- ities only statically, but key queries can be made adaptively.

We now describe the security model for our system by the following game between a challenger and an adversary:  Setup. The global setup algorithm is run. The adversary specifies a set S?A ? SA of corrupted authorities. The challenger generates the pairs of public key and the secret key by running the authority setup algorithm. For uncorrupted authorities in SA ? S?A, the challenger sends only the public keys to the adversary. For corrupted authorities in S?A, the challenger sends both the public keys and secret keys to the adversary.

Phase 1. The adversary makes secret key queries by sub- mitting pairs (GID,SGID,AID) to the challenger, where GID is an identity and SGID,AID is a set of attributes belonging to an uncorrupted authority AID. The challenger gives the corresponding secret keys SKGID,AID to the adversary.

Challenge. The adversary submits two equal length mes- sages m0 and m1. In addition, the adversary gives a set of challenge access structure {(M?1 ,??1 ), ? ? ? ,(M?q ,??q )} which must satisfy the constraint that the adversary cannot ask for a set of keys that allow decryption, in combination with any keys that can obtained from corrupted authorities. The challenger then flips a random coin b, and encrypts mb under all access structures {(M?1 ,??1 ), ? ? ? ,(M?q ,??q )}. Then, the ciphertext {CT?1, ? ? ? ,CT?q} are given to the adversary.

Phase 2. The adversary may query more secret keys, as long as they do not violate the constraints on the challenge access structures. The adversary can also makes update key queries by submitting the pair (M?i ,??i ),(M?j ,??j ), the simulator returns the update key UKmb to the adversary.

Guess. The adversary outputs a guess b? of b.

The advantage of an adversary A in this game is defined as  Pr[b? = b]? 1 .

Definition 2. Our scheme is secure against static corruption of authorities if all polynomial time adversaries have at most a negligible advantage in the above security game.



III. ATTRIBUTE-BASED ACCESS CONTROL WITH DYNAMIC POLICY UPDATING FOR BIG DATA  We construct our dynamic-policy access control scheme based on an adapted CP-ABE method in [5]. Our scheme consists of five phases: System Initialization, Key Generation, Data Encryption, Data Decryption and Policy Updating.

A. System Initialization  The system initialization includes the global setup and the authority setup.

1) Global Setup: In the global setup, two multiplicative groups G and GT are chosen with the same prime order p and the bilinear map e :G?G?GT between them. A random oracle H maps global identities GID to elements of G. Let g be a generator of G, the global parameters is set to be  GP= ( p, g, H )  2) Authority Setup: Each authority AID runs the authority setup algorithm to generate its secret/public key pair. Let SAID denote the set of all the attributes managed by the authority AID. For each attribute x ? SAID, the authority chooses two random exponents ?x,?x ? Zp and publishes its public key as  PKAID = { e(g,g)?x , g?x }?x?SAID .

It keeps SKAID = {?x,?x}?x?SAID .

B. Key Generation  To generate the secret key for user GID, each authority AID will first assign a set of attributes SGID,AID to this user. Then, it runs the secret key generation algorithm to generate a set of secret keys as  SKGID,AID = {Kx,GID = g?x H(GID)?x}?x?SGID,AID .

C. Data Encryption  The owner first encrypts the data m by running the en- cryption algorithm Encrypt. The algorithm takes as inputs a set of public keys {PK} for relevant authorities, the global parameters, the data m and an n? l access matrix M with ? mapping its rows to attributes. It chooses a random encryption exponent s ?Zp and a random vector ?v = (s,y2, ? ? ? ,yl) ?Zlp, where y2, ? ? ? ,yl are used to share the encryption exponent s.

For i = 1 to n, it computes ?i = Mi ??v, where Mi is the vector corresponding to the i-th row of M. It also chooses a random vector ?w?Zlp with 0 as its first entry and computes wi =Mi ??w.

For each row i of M, it chooses a random ri ?Zp and computes the ciphertext as  CT= ( C = m ? e(g,g)s, ?i = 1 to n : C1,i = e(g,g)?i e(g,g)??(i)ri ,  C2,i = gri , C3,i = g ??(i)rigwi ).

Then, the encryption information EnInfo(m) of the data m con- tains all the random numbers ri, i.e., EnInfo(m) = {r1, ? ? ? ,rn}.

D. Data Decryption  To decrypt a ciphertext, the user first obtains H(GID) from the random oracle. If the user has the secret keys {K?(i),GID} for a subset of rows i of M such that (1,0, . . . ,0) is in the span of these rows, then the user proceeds as follows. For each such i, the user computes  C1,i ? e(H(GID),C3,i) e(K?(i),GID,C2,i)  = e(g,g)?i e(H(GID),g)wi .

IEEE INFOCOM 2014 - IEEE Conference on Computer Communications      The user then chooses constants ci ? Zp such that ?i ciMi = (1,0, . . . ,0) and computes  ? i  ( e(g,g)?i e(H(GID),g)wi  )ci = e(g,g)s.

We recall that ?i = Mi ? ?v and wi = Mi ? ?w, where ?v ? (1,0, . . . ,0) = s and ?w ? (1,0, . . . ,0) = 0. The data can then be decrypted as  m =C/e(g,g)s.

E. Policy Updating  To update the access policy of the encrypted data in the cloud, we delegate the ciphertext update from the data owner to the cloud server, such that the heavy communication overhead of the data retrieval can be eliminated and the computation cost on data owners can also be reduced.

When the data owner wants to update the ciphertext from the previous access policy A to the new access policy A?, it first generates an update key UKm by running the update key generation algorithm UKGen and then owner sends the update key UKm to the cloud server. Upon receiving the update key from the data owner, the cloud server will run the ciphertext updating algorithm CTUpdate to update the ciphertext from the previous access policy A to the new one A?.

However, the update key generation algorithm UKGen and the ciphertext updating algorithm CTUpdate are related to the relationship between the previous access policy A and the new access policy A?. For different types of updating operation, we have different design of UKGen and CTUpdate, which will be described in detail in the next section.



IV. DYNAMIC POLICY UPDATING  In this section, we first design the policy updating algo- rithms for monotonic boolean formulas. Then, we present the algorithms to update LSSS structures. Finally, we consider the general threshold access tree structures by designing the algorithms of updating a threshold gate.

A. Updating a Boolean Formula  Access policies with monotonic boolean formulas can be represented as the simplest threshold access trees, where the non-leaf nodes are AND and OR gates, and the leaf nodes correspond to attributes. The monotonic boolean formulas can be easily converted to LSSS structure, as the number of leaf nodes in the access tree is the same as the number of rows in the corresponding LSSS matrix. As shown in Fig. 2, there are four basic operations: Attr2OR, Attr2AND, AttrRmOR and AttrRmAND.

1) Converting an attribute to an OR gate (Attr2OR): This Attr2OR operation involves converting an existing attribute x j( j ? [1,n]) to an OR gate (x j ? xn+1) by adding a new attribute xn+1. In this case, the new attribute xn+1 plays the same role as the attribute x j in the new access policy.

Therefore, we can easily construct the ciphertext component Cn+1 = (C1,n+1,C2,n+1,C3,n+1) for the new attribute xn+1 from the component Cj corresponding to the existing attribute x j.

Fig. 2. Operations of Boolean Formula  To achieve this Attr2OR operation on data m, the update key generation algorithm UKGen takes the encryption information EnInfo(m) of the data m and the public keys. It chooses random am,rn+1 ?Zp and generates the update key as  UKm = ( am, UK1,m = e(g,g)?xn+1 rn+1  e(g,g)?x j r jam ,  UK2,m = grn+1?r j , UK3,m = g?xn+1 rn+1  g?x j r jam )  Then, the data owner will send the tuple (Attr2OR, UKm) to the server and ask the server to update the ciphertext CT corresponding to m. The ciphertext updating algorithm CTUpdate constructs the new ciphertext component Cxn+1 as follows.

C1,n+1 = (C1, j)am ?UK1,m = e(g,g)?n+1 ? e(g,g)?xn+1 rn+1 ; C2,n+1 =C2, j ?UK2,m = grn+1 ; C3,n+1 = (C3, j)am ?UK3,m = g?xn+1 rn+1 ?gwn+1 ,  where ?n+1 = am ?? j and wn+1 = am ?w j.

2) Converting an attribute to an AND gate (Attr2AND):  This Attr2AND operation involves converting an existing attribute x j( j ? [1,n]) to an AND gate (x j ? xn+1) by adding a new attribute xn+1. In this case, the combination of the new attribute xn+1 and the attribute x j in the new access policy plays the same role as the attribute x j in the previous policy.

Therefore, we can modify the previous ciphertext component Cj corresponding to x j into a new version C?j, and construct the new ciphertext component Cn+1 = (C1,n+1,C2,n+1,C3,n+1) for the new attribute xn+1.

To achieve this Attr2AND operation on data m, the update key generation algorithm UKGen takes the encryption infor- mation EnInfo(m) of the data m and the public keys as inputs.

It chooses random am,? ?,w?,rn+1 ?Zp, such that ? ?j = ? j +? ? and ?n+1 = am ?? ?, as well as w?j = w j +w? and wn+1 = am ?w?.

Then, the update key can be generated as  UKm = ( UK1,m = e(g,g)? ? , UK2,m = gw  ? , Cn+1 ),  where the new ciphertext component Cn+1 is constructed as  Cn+1 = ( C1,n+1 = e(g,g)?n+1 ? e(g,g)?xn+1 rn+1 , C2,n+1 = grn+1 , C3,n+1 = g  ?xn+1 rn+1 ?gwn+1 ) Then, the data owner will send the tuple (Attr2AND, UKm) to the server and ask the server to update the ciphertext CT corresponding to m. The server first adds the new ciphertext  IEEE INFOCOM 2014 - IEEE Conference on Computer Communications      component Cn+1 to the ciphertext CT , and then runs the ci- phertext updating algorithm CTUpdate to update the previous ciphertext component Cj to the new version C?j as  C?j = ( C ? 1, j =C1, j ?UK1,m = e(g,g)?  ? j ? e(g,g)?x j r j ,  C?2, j =C2, j, C ? 3, j =C3, j ?UK2,m = g?x j rn+1 ?gw  ? j ).

3) Removing an attribute from an OR gate (AttrRmOR): To remove an attribute x j from an OR gate, the data owner can simply send a tuple (AttrRM, m, j), where ?( j) = x j to ask the server to delete the corresponding ciphertext component Cj in the ciphertext.

4) Removing an attribute from an AND gate (AttrRmAND): To remove an attribute from an AND gate, all the shares should be re-randomized, such that the correctness requirement can be satisfied. This can be easily achieved by using the method of converting a (t, t)-gate to a (t ?1, t)-gate which will be described later.

B. Updating a LSSS Structure  Access policies can also be expressed in LSSS structure as in our access control scheme. To convert a LSSS structure (M,?) to a new LSSS structure (M?,? ?), it is too costly to choose a new encryption secret s? and re-encrypt the data under the new access policy. In order to save the communication cost and the computation cost on data owners, in our method, we do not change the encryption secret s, such that we can make full use of the previous ciphertext encrypted under the old policy (M,?).

To enable the data owner to re-randomize the encryption secret s, the encryption information EnInfo(m) of the data m should also contain two random vectors ?v and ?w, and the public key of each attribute x is known to the data owner as (g?x ,g?x). The data owner will run the update key generation algorithm to construct the update keys and send them to the cloud server. Upon receiving the update keys, the cloud server will run the ciphertext update algorithm to update ciphertext from the previous access policy to the new policy. The update key algorithm and the ciphertext update algorithm are designed as follows.

1) Update Key Generation: The update key generation al- gorithm UKGen takes as inputs the public keys, the encryption information of data m, and the previous access policy (M,?) and the new one (M?,? ?). Suppose the new access policy is described as an n? ? l? access matrix M? with ? ? mapping its rows to attributes. Since the mapping functions ? and ? ? are non-injective, we let num?(i),M and num?(i),M? denote the number of attribute ?(i) in M and M? respectively.

It first calls the policy comparing algorithm PolicyCompare to compare the new access policy (M?,? ?) with the pre- vious one (M,?), and outputs three sets of row indexes I1,M? , I2,M? , I3,M? of M?. Both I1,M? and I2,M? denote the set of indexes j such that ? ?( j) exists in M. But the total number of index j in I1,M? will not exceed the total number of attribute ?(i)(?(i) = ? ?( j)) in M. If num? ?( j),M? ? num? ?( j),M , those exceeding num? ?( j),M? ? num? ?( j),M indexes j will be put in  Algorithm 1 PolicyCompare Input: new policy (M?,? ?) with l? ? k? matrix Input: previous policy (M,?) with l ? k matrix Output: I1,M? , I2,M? , I3,M? ? three subsets of row indexes in  M? 1: IM ? index set of rows in M 2: for j = 1 to l? do 3: if ? ?( j) in M then 4: if IM! = ? & ?i ? IM s.t. ?(i) == ? ?( j) then 5: add ( j, i) into I1,M? 6: delete i from IM 7: else 8: find any i ? [1, l] s.t. ?(i) == ? ?( j) 9: add ( j, i) into I2,M?  10: end if 11: else 12: add ( j,0) into I3,M? 13: end if 14: end for  I2,M? . I3,M? denotes the set of indexes j such that ? ?( j) does not exist in M, i.e., ? ?( j) is a new attribute.

The algorithm first constructs two new random vectors: ?v? ? Zl?p with s as its first entry and ?w? ? Zl  ? p with 0 as its  first entry. It then computes ?i = Mi ??v and wi = Mi ??w, where Mi is the vector corresponding to the i-th row of M. It also computes ? ?i = M?i ??v?, and w?j = M?j ??w?, where M?j is the vector corresponding to the j-th row of M. Let IM = {1, ? ? ? , l} be the index set of the rows of M.

For each j ? [1, l?], if ( j, i) ? I1,M?(Type1), the algorithm generates the update key component as  UK j,i,m = ( UK (1) j,i,m = g  ? ?j??i , UK(2)j,i,m = g w?j?wi )  and set r?j = ri.

If ( j, i)? I2,M?(Type2), the algorithm chooses random num-  bers r?j,a j ?Zp and generates the update key component as  UK j,i,m = ( a j, UK (1) j,i,m = g  ? ?j?a j?i , UK(2)j,i,m = g w?j?a jwi ).

If ( j, i)? I3,M?(Type3), the algorithm chooses a random r?j ? Zp and generates the update key component as  UK j,i,m = ( UK (1) j,i,m = g  ? ?j ?g?? ?( j)r?j , UK(2)j,i,m = gr ? j ,  UK (3) j,i,m = g  ??(i)r?j gw ? j ).

The update key UKm is constructed as  UKm = ( (Type1, {UK j,i,m}( j,i)?I1,M? ), (Type2, {UK j,i,m}( j,i)?I2,M? ), (Type3, {UK j,i,m}( j,i)?I3,M? ) ).

Then, the data owner sends the update key UKm to the cloud server.

2) Ciphertext Update: Upon receiving the update key UKm, for each j ? [1, l?] , the server runs the ciphertext updating al-  IEEE INFOCOM 2014 - IEEE Conference on Computer Communications      Fig. 3. Updating a (t,n)-gate to a (t ?,n?)-gate  gorithm to compute each ciphertext component C?j as follows.

If Type1( j ? I1,M?), the ciphertext component C?j is com-  puted as  C?j = ( C ? 1, j =C1,i ? e(g,UK(1)j,i,m) = e(g,g)?  ? j ? e(g,g)?? ?( j)r?j ,  C?2, j =C2,i, C ? 3, j =C3,i ?UK(2)j,i,m = g?? ?( j)r  ? j ?gw?j ),  where r?j = ri.

If Type2( j ? I2,M?), the ciphertext component C?j is com-  puted as  C?j = ( C ? 1, j = (C1,i)  a j ? e(g,UK(1)j,i,m) = e(g,g)? ? j ? e(g,g)?? ?( j)r?j ,  C?2, j = (C2,i) a j = gr  ? j ,  C?3, j = (C3,i) a j ?UK(2)j,i,m = g?? ?( j)r  ? j ?gw?j ),  where r?j = a jri.

If Type3( j ? I3,M?), the ciphertext component C?j is com-  puted as  C?j = ( C ? 1, j = e(g,UK  (1) j,i,m) = e(g,g)  ? ?j ? e(g,g)?? ?( j)r?j , C?2, j = UK  (2) j,i,m, C  ? 3, j = UK  (3) j,i,m = g  ?? ?( j)r?j ?gw?j ).

The new ciphertext CT? can be constructed as  CT? = (m ? e(g,g)s, C?j ? j ? [1, l?]).

As we can see, in our method, all the pairing computations are moved to the cloud server, while the data owner only does the minimum computation.

C. Updating a Threshold Gate  The problem of updating a threshold gate from (t,n)-gate to (t ?,n?)-gate has been discussed in key-policy structure [1] and ciphertext-policy structure [9]. However, the existing methods would introduce a security problem in the new threshold gate.

For example, when increasing the threshold value from t to t + 1, existing methods will set the t + 1 share ?t+1 of the secret s to be 0, such that the secret s can be reconstructed by using t +1 shares as ?t+1i=1 ?i = ?  t i=1 ?i +?t+1 = s+0 = s.

In this case, any t shares are still be able to reconstruct the secret, which should not be allowed in a (t +1,n)-gate.

To solve the security problem, instead of setting the value of new share to be 0, our method is to re-randomize the secret s under the new policy (t ?,n?)-gate, as shown in Fig. 3. The data owner first transforms the threshold gate into LSSS structure by running the policy converting algorithm Threshold2LSSS,  Algorithm 2 DNF2LSSS Input: A ? an access structure A Input: s ? the secret to be shared Output: M ? Monotone Span Program  1: let sss be DNF2SSS(s,A); 2: let M be SSS2MSP(s,sss); 3: return s, M;  i.e., transforming (t,n)-gate and (t ?,n?)-gate to (M,?) and (M?,? ?) respectively. Then, we can apply the above algorithms to update the LSSS structure (M,?) to the new one (M?,? ?).

To convert a threshold gate to LSSS structure, the algorithm Threshold2LSSS first converts the threshold gate into DNF boolean formulas, and then converts the DNF boolean formu- las into LSSS structure by calling the algorithm DNF2LSSS.

For example, a (2,3)-gate on attributes A, B, C can be simply represented as (A?B)? (B?C)? (A?C).

The algorithm DNF2LSSS used to change DNF boolean for- mulas to LSSS structures is a combination of two algorithms: .

? DNF2SSS. The algorithm is adapted from [10] and used to construct a Secret Sharing Scheme from monotone DNF boolean formula.

? SSS2MSP: The algorithm is adapted from [11] and used to convert Secret Sharing Scheme into Monotone Span Program (LSSS Structure).

When converting (t,n)-gate to (M,?), we can derive the size of the access matrix M as m? l, where m = n ?Ct?1n?1 and l = (t ?1) ?Ctn +1.



V. ANALYSIS OF OUR SCHEME In this section, we give the analysis of our scheme to show  that it can satisfy all the three requirements we defined. Then, we also give the performance analysis of our scheme.

Algorithm 3 DNF2SSS Input: An ? a node n from an access structure A Input: s ? the secret to be shared Output: {s1, ? ? ? ,sl} ? a set of shares  1: IM ? index set of rows in M; 2: if Node Type = OR then 3: for each child c of An do 4: DNF2SSS(s, c); ? pass the s to child nodes 5: end for 6: end if 7: if Node Type = AND then 8: let gate have t inputs; 9: select r1, ? ? ? ,rt?1 ?R Zp;  10: for all ri do 11: DNF2SSS(ri, ith child of An); 12: end for 13: let rt = s? r1 ??? ?? rt?1 (mod p); 14: DNF2SSS(ri, tth child of An); 15: end if  IEEE INFOCOM 2014 - IEEE Conference on Computer Communications      Algorithm 4 SSS2MSP Input: {?Vi} ? Set of piece vectors for each attribute Attri Input: s ? the secret to be shared Output: M ? Monotone Span Program  1: let ?Z be a vector and set ?Z(0) = s; 2: let M be a matrix; 3: let ? be a labelling function; 4: for all Attri do 5: for each piece vector ?Vi for Attri; do 6: apppend each random value in ?Vi to ?Z; 7: construct the position vector ?vi for Attri; 8: append ?vi to M; 9: let ?(Mvi) to Attri;  10: end for 11: end for 12: pad M with the same row size; 13: return (?Z,M,?);  A. Correctness Proof  Theorem 1. Our access control scheme is still correct after the policy updating.

Proof: We prove the correctness for each operation in our scheme as follows.

? LSSS Structure/Threshold Gate Updating: The secret s is re-randomized under the new access policy, such that the correctness is guaranteed by the secret sharing scheme.

? Attr2OR: Suppose c j is the coefficient chosen for x j during the decryption. We can simply get the coefficient cn+1 = c j/am for xn+1 when the new attribute xn+1 is chosen instead of x j during the decryption.

? Attr2AND: Suppose c j is the coefficient chosen for x j during the decryption under the previous access policy.

To decrypt the ciphertext under the new access policy, we still choose c j as the coefficient for x j and set the coefficient cn+1 =? c jam for xn+1.

? AttrRmOR: This operation will not affect the coefficient choices of the remaining attributes in the OR gate.

? AttrRmAND: The same as threshold gate updating.

B. Completeness Proof  Theorem 2. Our scheme is complete for updating any types of access policies.

Proof: The proposed policy updating method is designed based on access policies with LSSS structures, i.e., it can convert any (M,?) LSSS structure to a new one (M?,? ?).

For any access tree policy, which is constructed with several threshold gates and a set of attributes, we have proposed an operation to update a threshold gate to any other threshold gate by converting the threshold gates into LSSS structure. Thus, our scheme can also update any access tree policy. Considering the boolean formula is a special access tree only with AND and OR gates, we propose a more efficient method to update the  policy with boolean formulas. Any new boolean formulas can be derived from the previous boolean formulas by iteratively doing the operations Attr2AND, Attr2OR, AttrRmAND and AttrRmOR. Therefore, our proposed operations are complete for updating any access policies.

C. Security Proof  Our access control scheme is constructed on prime order groups, because the group operations on prime order groups are much faster than the ones on composite order groups. In this section, we will prove that our dynamic policy access control scheme is secure in the generic bilinear group model [2], [12], [13] and random oracle model [14]. However, our scheme can also be easily extended to be provable secure in the random oracle model by using groups with composite orders.

Theorem 3. Our scheme is secure in the generic bilinear group model and random oracle model, if no polynomial time adversary can get non-negligible advantage in the security game defined in Section II-C.

Proof: Our access control scheme is constructed based on the CP-ABE method with primer group order (CP-ABE- Primer) in [5], which is proved to be secure under generic bilinear group model and random oracle model. At an intuitive level, this means that if there are any vulnerabilities in the scheme, then these vulnerabilities must exploit specific math- ematical properties of elliptic curve groups or cryptographic hash functions used when instantiating the scheme. Let A be an adversary who can break our scheme with non-negligible advantage. and we will construct an A? such that it can break the CP-ABE-Primer scheme in [5] with non-negligible advantage.

Different with the security game in [5], in our se- curity game, the adversary returns a tuple of poli- cies {(M?1 ,??1 ), ? ? ? ,(M?q ,??q )} together with two messages (m0,m1), and the adversary receives an encryption of Mb under each of these policies. Moreover, our security game also allows the update key query for the challenging messages (m0,m1) between two access policies (M?i ,??i ) and (M?j ,??j ).

A? initializes the CP-ABE-Primer security game and for- wards the public key PK to A. To simulate the key generation oracle of A, A? queries its key generation oracle for all x ? S to respond to a SK(GID,S) query. The simulation of challenge ciphertext of A is the same with the one of A?.

Now, we prove that the update key query in our secu- rity game will not increase the advantage of A?. Consider- ing two update key queries UK(m0,(M?i ,??i ),(M?j ,??j )) and UK(m1,(M?i ,??i ),(M?j ,??j )), the update key generation oracle returns the same update keys which do not involve with the challenge data, if we consider the encryption random numbers are the same in encrypting m0 and m1 (this is because only one challenge message is chosen by the simulator by tossing a coin in the security game). Therefore, the update key will not reveal any information on the chosen challenging message.

This completes the proof.

IEEE INFOCOM 2014 - IEEE Conference on Computer Communications      TABLE I SIZE OF UPDATE KEY  Operation Attr2OR Attr2AND Type1 Type2 Type3 Size(UK) 4|p| 5|p| 2|p| 3|p| 3|p|  D. Performance Analysis  In our method, the data owner only needs to send the update keys to the cloud server, instead of the whole encrypted big data. Therefore, our method can significantly reduce the communication cost during the policy updating. Suppose |p| is the element size in the G,GT ,Zp. Table I shows the size of update keys in our scheme. We can see that Type1 operation incurs the smallest size of update keys. When updating an access policy to a new one, the most common operations are Type1 operations, such that our scheme incurs a small communication cost.

Compared with Sahai, Seyalioglu and Waters?s Scheme (SSW?s scheme) [9], our scheme makes full use of the previous ciphertexts encrypted under the old access structure. That is if an attribute in the new access policy has ever appeared in the previous access policy, the new ciphertext component of this attribute can be derived from the previous ciphertext component with the update key. The data owner only needs to compute ciphertext components for new attributes. Moreover, in our scheme, we also delegate all the pairing operations to the server, such that the workload of the data owner can be further reduced.

We also simulate the operation time for each type of opera- tion, including Attr2OR, Attr2AND for Boolean Formulas Up- dating and Type1, Type2, Type3 for LSSS Structure/Threshold Gates Updating, as described in Fig. 4. The simulation is run on a Linux system with an Intel Core 2 Duo CPU at 3.16GHz and 4.00GB RAM. The code uses the Pairing-Based Cryptography library version 0.5.12 to simulate the access control schemes. We use a symmetric elliptic curve ?-curve, where the base field size is 512-bit and the embedding degree is 2. The ?-curve has a 160-bit group order, which means p is a 160-bit length prime. All the simulation results are the mean of 20 trials. From Fig. 4, we can see that Type1 operations incurs less computation cost on data owners, as well as less total computation cost. We know that the Type1 operation is the most common operation when converting an access policy to a new one. Therefore, our scheme can minimize the workload of data owners, as well as the one of cloud servers.



VI. RELATED WORK  Recently, some attribute-based access control schemes [6]? [8] were proposed to ensure the data confidentiality in the cloud. It allows data owners to define an access structure on attributes and encrypt the data under this access structure, such that data owners can define the attributes that the user needs to possess in order to decrypt the ciphertext. However, the policy updating becomes a difficult issue when applying ABE methods to construct access control schemes, because once data owner outsource the data into cloud, they won?t store in  Fig. 4. Comparison of Computation Cost for Different Operations  local systems. To change the access policies of encrypted data in the cloud, a trivial method is to let data owners retrieve the data and re-encrypt it under the new access policy, and then send it back to the cloud server. But this method will incur a high communication overhead and heavy computation burden on data owners.

In [1], the authors proposed a Key-Policy Attribute-Based Encryption method and discussed on how to change the policies on keys. In [9], the authors also proposed a ciphertext delegation method to update the policy of ciphertext. However, these methods cannot satisfy the completeness requirement, because they can only delegate key/ciphertext with a new access policy which is more restrictive than the previous pol- icy. Furthermore, they cannot satisfy the security requirement either. For example, when a new attribute is added into a threshold gate and the threshold gate is changed from (t,n) to a (t+1,n+1), both of their methods will set the share of the new attribute to be 0. In this case, users who only holds t attributes (excluding the new attribute) can satisfy new (t+1,n+1)-gate.

Thus, a new outsourced policy updating method is desired for ABE systems.



VII. CONCLUSION  In this paper, we investigated the policy updating problem in ABE systems and formulated some challenging requirements of this problem. We developed an efficient method to outsource the policy updating to the cloud server, which can satisfy all the requirements. We also proposed an expressive attribute- based access control scheme for big data in the cloud, which enables efficient dynamic policy updating. Furthermore, we designed policy updating algorithms for different types of access policies. We also analyzed our scheme in terms of cor- rectness, completeness, security and performance. Although the policy updating algorithms were designed based on Lewko and Waters? scheme, our ideas and methods of outsourced policy updating can also be applied to other ABE systems.

