Store SVG Document in ORDBMS

Abstract?Because of big SVG document storing spatial data in WebGis, The searching by attribute is low efficiency and need the high quality hardware in the client. In order to solve the two problems, by making use of the rules mapping DTD of SVG document to relation schema extended for being fitted for SVG document, we complete storing SVG document in Object- relational database. Finally, we realized management of the spatial data by tag document to by Objected Relational database and achieved the expected results.

Keywords-SVG; Algorithm; Schema mapping; DTD; DTD Graph; Object-relational  database

I.  INTRODUCTION SVG(Scalable Vector Graphic) built upon XML and used  for publishing graph and image in Web Was recommended by W3C(World Wide Web Consortium) in September 2001, and was expected to meet the need of web-developer that drawing the graph and painting the image is dynamic, scalable and platform irrelevant. Applying SVG in WebGIS[1], now WebGIS based on SVG document storing graph and image data have realized navigation? panning, layer control and searching by attribute in electronic map[2]. Because spatial data applied in GIS often are big data set, even some are magnanimous[3], in the process of publishing geography information by SVG document we find the storing spatial data SVG document is very large and the large document result in low efficiency of search by attribute and the need of high quality hardware in client. Considering the progress of ORDBMS in data management in recent years, In order to solve above problem, we proposed storing SVG document in ORDBMS and realize management of spatial data by SVG document to by ORDBMS[4].

According to the above problem and considering the progress of management for spatial data of the ORDBMS, such as POSTGIS[5] and Oracle9i, we extend the algorithm of mapping the XML document DTD to OR schema, store SVG document in ORDBMS, and succeed in realizing the transformation from the management of spatial data by SVG document to by ORDBMS. So, the method not only can reduce the space, but also can improve the efficiency of managing spatial data.



II. RELATED WORK Considering SVG is based on XML, some approaches or  technologies of storing XML in ORDBMS proposed and  discussed in recent years can be utilized when addressing storing SVG documents in ORDBMS.

Object-Relational database management System (ORDBMS) products have all the advantages of RDBMS, furthermore, it has more expressive type system than RDBMS, and supply a number of functions of processing the spatial data.

The high performance of ORDBMS in spatial data management supply the security of successful solving the problem resulting from large SVG document and is the main impetus we storing the SVG document in ORDBMS.

Alexander Adam[6] suggested building a SVG platform used for processing the data retrieving from database. In this method of publishing GIS information, the cost of constructing platform is too high.

Ref[7] proposed constructing a spatial database platform storing the SVG document. This approach also need build a new platform and can?t make full use of the development of ORDBMS, so, still have a lot of drawbacks.

To sum up, it is feasible to solve the problem resulted from large SVG document by storing the SVG document in ORDBMS. Of course, we should emphasize the SVG document in this paper is used for storing spatial data rather than the general graph and image data.



III. THE FEATURE AND OGANIZATION OF SPATIAL DATA  Because the SVG document in this paper is used for storing spatial data and the data structure of spatial data is complex, we should know how to classify, describe and organize the geographic objects. In general, according to its geometry, the geographic objects are divided into five categories: point, line, polygon, annotation and raster[8]. The organization of spatial data is same type of entity tiered.

In order to illustrate the organizational and expressive model of spatial GIS data in SVG, taking into account the limited length of paper, we give an example of releasing geographical data based on SVG document basically including five spatial data types. The SVG document appears in following program code.  Although we have omitted most of the coordinates of spatial points, the structure of the SVG document is full of reservations and clear. The geographical data published by the SVG document rendered on the client shows As shown in Figure1.

DOI 10.1109/CSSE.2008.387    DOI 10.1109/CSSE.2008.387     <?xml version="1.0" encoding="utf-8"?> <svg  width="300.5" height="351.5" viewBox="" overflow="visible" >  <symbol id="New_Symbol" viewBox="-5.125 -4.75 10.25 9.5" > <g> <path fill="#DF0018" d="M0.125,4.75,? "/>  </g> </symbol> <g id="area">  <pathid="path1" fill="#8FFF00" d="M208.5,"/> ???.

</g> <g id="point" >  <use id="use1" xlink:href="#New_Symbol"  width="10.25" height="9.5" x="-5.125" y="-4.75" />  ??? </g> <g id="line">  <path  id="path3" fill="none" stroke="#FF2400" stroke-width="3" d="M167.5,166,??,14l-7,17"/>  </g> <g id="text">  <text id="XMLID_1" x="162.5" y="133" >city1</text> </g>  </svg>      Figure1 The result of svg document rendering on client

IV. MAPPING DTD GRAPH TO OR SCHEMA In the process of storing large SVG document to OR  database, firstly by mapping the DTD of the SVG into OR Database schema get the corresponding OR schema, then generates corresponding SQL insert statements with the data reading from the SVG document by DOM interface, lastly, with SQL insert statements store the data in corresponding table in the OR schema.

A. DTD And DTD Graph Document Type Descriptors(DTDS) describes the overall  structure of tag document and are like a schema of OR database. Because SVG is based on XML, SVG document have its DTD [9]. The DTD of SVG document is created at the same time the SVG document do and is saved in head files, of course, instead, also can be gotten by XML parser [10]. A DTD specifies the structure of a SVG element by specifying the names of its sub-elements and attributes. Sub-element structure is specified using the operators ?*?(set with zero or more elements), ?+?(set with one or more elements), ???(optional) and ?|?(or). There is a special attribute Id, which can occur  once for each element. The Id attribute uniquely identifies an element within a SVG document and can be referenced through an IDREF field in another element. Figure2 shows a DTD specification. The SVG document in Section3 conforms to this DTD.

Figure2 The SVG Document?s DTD  A DTD graph represents the structure of a DTD. Its nodes are elements, attributes and operators in the DTD. Each element appear as many times as they appear in the DTD. The DTD graph corresponding to the DTD in Figure2 is given in Figure3.

Figure3 DTD graph of svg document  B. The OR Schema Generation Algorithm Traditionally, relational schemas have been derived from  a data model such as the Entity-Relationship model. This translation is straightforward, because there is a clear separation between entities and their attributes. Each entity and its attributes are mapped to a relation. when converting a SVG DTD to relations, It is tempting to map each element in the DTD to a relation and map the attributes of the element to attributes of the relation. However, there is no correspondence between elements and attributes of DTD and entities and attributes of the ER-model. Taking an example of node g in the Figure3, It has five child nodes: Id, path, use, text, symbol. In five nodes, excepting Id, others are all not attributes, because they appear in the form of tag in the SVG document. Now, in the process of mapping DTD graph into OR schema, we should     know which node is mapped into independent table and which attributes. In order to solve the problem, we extend the Hybrid method [11] mapping the DTD of XML into Relational database schema, get the new rules of mapping the DTD of SVG document into OR schema. The rules as follows[12]:  1) relations are created for all elements in the DTD graph whose nodes have an in-degree greater than one.

2) Elements nodes with an in-degree of zero are also made separate relations.

3) Elements below ?*? node are made into separate relations.

4) Each element node x that is a separate relation inlines all the nodes y that are reachable from it such that the path from x to y does not contain a node that is to be made a separate relation.

5) When one element quotes more than one element node that are created independent relations, in order to let the getting OR schema has less redundant degree, we use several relations between the tag element and the quoted elements to represent this single relation.

6) If one element node is CDATA or PCDATA,we add a new attribute of the same name to the element node in order to store the data expressed by the element node.

According to the above rules, we extend the XML mapping algorithm proposed in Ref[13] to map SVG DTD into OR schema. The mapping process consists of two phases. The first phase is to generate the DTD graph based on the given DTD document, and then in the second phase the corresponding Object-relational schema is created on the basis of the generated DTD graph. Alg1[13] is the pseudo-codes of our improved mapping algorithm. Here, the code line 1~8 are for DTD graph creation, and code line 9~12 are for OR schema generation. We use the ProcessNode( code line 13~35) to process the nodes. Applying the above mapping rules and algorithm to the example SVG DTD in section4, we have the resulted OR schema in Figure4. From the Figure4, we get eight relation tables. Among them, Table svg is for storing the basic information of SVG document; Table symbol is for storing the user-defined reusable symbols; In order to get a low redundant OR schema, we divided table g into four tables: g_text, g_path, g_symbol, g_use. Using the four tables, we record the relation between the layers and the data in the layer; table use is for storing the cited symbol from the table symbol; table path is for storing spatial data. It needs to be emphasized that the type of the spatial data in the OR is geometry. The geometry in the ORDBMS (POSTGIS) is abstract data type and can include other spatial data type (such as point, polygon, line), the same as tag path can express any spatial data type (the attribute d of tag path with one pair of spatial coordinates indicates point type; the attribute d having a series of pairs of spatial coordinates and being at the end without character ?z? indicates line type, otherwise indicates polygon type). Of course, we can use tag line, polygon and point to store spatial data in the SVG document. In this case, by mapping rules and algorithm, we can easily get the corresponding table line, polygon and point.

There is no detail description of the above circumstances, because the given example in this paper store spatial data by tag path.

Algorithm1  Mapping SVG DTD to OR schema  INPUT?DTD of SVG document  OUTPUT: the mapped OR schema  1?create the tree of DTD  marked as DTDT =( TV , TE )  2?for each Tv ? TV do  3?create the corresponding node Gv ? GV ? 4?for each Te ? TE do 5?create the corresponding edge Ge ? GE ? 6?for each TVa ? reference as other  element g do 7?create the corresponding edge e =( a , g )? GE ? 8? ( )GGDTD EVG ,= 9?traverse DTDG  10?for GVv ? , in-degree and parent node recorded as  )(deg vin  and ( )vparent  respectively 11?for each )(deg vin ==0 or  ( )vparent ==* GVv ? 12?ProcessNode( v )? 13?Procedure ProcessNode( v ) 14? childv =the set of child nodes of v 15?the number of  *  recorded as starnumb( childv )  16?if starnumb( childv )<=1  then  17?for each chv ? childv   do  18?if chv ==* then  19? temv =getchild( chv )?get the child node of chv ;  20? temv work as IDREF column;  21?else if chv ? childv  and chv !=*  22? chv work as attribute column;  23: endfor  24?create a relationship with the corresponding node v ; 25?endif  26?if starnumb( childv ).>=2 then  27?for each chv ? childv  ? chv ==* do  28? temv =getchild( chv )?get the child node of chv  ;  29? temv work as IDREF column;  30?if chv ? childv and chv !=* then  31: chv work as attribute column;  32: endif  33?create a relationship with the corresponding node v ; 34?endfor  35?endif        Figure4 OR Schema

V. STORING SVG DOCUMENTS INTO OBJECT- RELATIONAL DATABASE  To store a SVG document in OR database, our storing method, at first, traverses the DOM tree of the SVG document and then create the corresponding SQL constructors of the given data.  Alg2[14] depicts the process of storing SVG document in database. Applying Alg2 to the example SVG document in section3, we have the resulted storage shown in Figure5. Among them, the attribute column d of table path is type of geometry. Of course, If we express the spatial objects by tag line, polygon not by tag path, we will store the spatial objects by the corresponding type in the OR database. From the Figure5 we have achieved expected results.

Algorithm2  Storing SVG document to database  INPUT ?a SVG document dS ?  OUTPUT ?a number of tables storing dS ?s data ; 1?create the document tree of dS , documentT =( TV , TE )  2?v =the root node of documentT ? 3? vc = StroeNode( v )? 4?use vc to store its data into the corresponding table? 5:  6?function StoreNode( v ?a node in TV ) 7? childv = the set of child node of v ; 8?let C be a set of constructors of childv ;  9?C ={ ic = StoreNode( iv ) and iv ? childv } 10: create the constructor vc of the node v  Cc ?? ; 11?if  v is mapped to reference then  12?use vc to store vc ?s data into corresponding table;  13?create constructor refc for the reference ;  14? vc = refc ;  15?endif  16?return vc ;   Table:g_path  Table:g_use  Table:g_text gId pathId gId useId gId textId text star Path0 point use1 text Xml1 City1 ? ? ? ? ? ? ?   Table:g_symbol  Table:use gId symbolId useId href width height sym New_symbol use1 #new_symbol 10.25 9.5 ? ? ? ? ? ?  Table:svg    Table:symbol gId width height overflow symbolId gId ViewBox star 315 351 visible New_Symbol star ? ? ? ? ? ? ? ?  Table:path pathId fill stroke d path0 #DF0018 #FF2400 Coordinates ?? ?? ?? ??  Figure5. SVG document stored in OR schema

VI. THE PROTYPE AND EXPERIMENTAL RESULTS For demonstrating the effectiveness of the proposed method  and algorithms in this paper, we have implemented a prototype for SVG storing in ORDBMS based on dot net, uDig and POSTGIS [15]. The architecture of the prototype system is shown in Figure6. The prototype consists of six major components.

Figure6 Prototype architecture  ? uDig is the user-friendly graphical interface of the POSTGIS in the client and used for displaying and rendering the spatial data in the POSTGIS .

? Webserver process the data in server by client?s request, then back the result to the client .

? ORDBMS is actually the POSTGIS in this paper , which provided the basic facilities for Object-relational data management and operation.

? Sql data loader store the input SVG document in ORDBMS based on the given OR schema generated by Table Generator.

? Table Generator creates the OR schema based on the mapping rules and the SVG DTD graph, it does the second part work of Alg1.

? DTD Graph Generator produces the DTD graph according to the input SVG document. It performs the first part work of Alg1.

We conduct some preliminary experiments to evaluate the performance of the proposed approach with a group of SVG document of different sizes from 0.2MB to 12MB, the experimental results are shown in Figure7 and Figure8. Figure7 shows the elapsed times of query processing over SVG document directly and in Object-relational database, from which we can see that by storing SVG document into ORDBMS with our approach, the query processing efficiency can be improved obviously. Figure8 shows the comparison of occupied disk space between in SVG document directly and in object-relational database. For all the tested documents, needs of disk space in SVG document is more than in ORDBMS, which is an expected result.

0.00  1.00  2.00  3.00  4.00  5.00  6.00  7.00             Test doc.size?KB?  Ti m  e co  st ?  se c? in document  in database   Figure7Searching time cost in database vs. in document      sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9 sd1  Test doc.NO  sp ac  e co  st.

siz  e? K  B? in document  in database   Figure8 Space cost size in document vs. in database   Our prototype enables 1) to create an object-relational  schema according to a given SVG DTD by using the mapping rules, and 2) to store any valid SVG document in relations of the corresponding Object-relational schema, and 3) to process spatial and non-spatial queries over the stored SVG document.



VII. CONCLUSION   We basically resolve the low efficiency of search by attribute and the need of high quality hardware in client by storing SVG document in OR database.  Of course, there are still some problems needed to do a closer study:  1) On the premise of getting right OR schema , how to improve the mapping rules and algorithm in order to get optimum OR schema.

2) In this paper, we don?t do research  on drawing spatial geography objects using Bezier curve.

