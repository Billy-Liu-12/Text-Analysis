Extracting Temporal Behavior Patterns of Mobile User

Abstract   Finding prevalent mobile user patterns in large amount of data has been one of the major problems in the area of mobile data mining. Particularly, the algorithms of discovering frequent user?s behavior patterns in the mobile agent system have been studied extensively in recent years. The key feature in most of these algorithms is that they use a location log dataset with user?s requested services. In this case, some problems occur because they do not consider that mobile user?s behavior patterns are dynamically variable as time passes. In this paper, we propose a novel data mining method based on temporal mobile access patterns that can efficiently discover mobile user?s behavior patterns. An advantage of our method compactly stores user?s behavior patterns according to location log dataset and requested services in memory.

Thus, even the information datasets require large shared memory when they store, our approach still provides faster access and consume less memory than existing techniques.

1. Introduction   The rapid expansion of ubiquitous mobile computing technology has created an unprecedented opportunity to gather and extract information from   This research was supported by the MKE(Ministry  of Knowledge Economy), Korea, under the ITRC(Information Technology Research Center) support program supervised by the IITA(Institute of Information Technology Advancement) (IITA-2008- C1090-0801-0028).

mobile agent systems [3]. And ubiquitous mobile computing also offers various kinds of dynamic services to the user with versatile devices at anytime and anywhere. In ubiquitous environment intelligent mobile agents are mandated to communicate with users and it is enabled by capturing interesting user?s behavior patterns. Further, how services and access methods can be provided to user in ubiquitous mobile computing environment is critical problems recently.

Therefore, effective modeling the behavior patterns of user in mobile agent systems is becoming very important. Effective modeling the behavior pattern of user benefits not only the users in smart access by caching or prefetching [1][6] but also the mobile service providers in financial profit like advertising [7].

In the ubiquitous mobile computing environments, the mobile users may request diverse kinds of services and applications by mobile devices from arbitrary location at any time via on networks. Obviously, the behavior patterns, in which the location and the service are inherently coexistent with temporal associate rule [16], of mobile user becomes more complex than that of the traditional mobile agent systems. To assist the user get interested information on time is one of the promising applications, especially in mobile agent systems. This paper is aimed at modeling how to build mobile user?s behavior pattern with a temporal association rule [4][13] in mobile agent systems. The mobile agent system consists of semi-structure data like XML data. Temporal association rules can be used to decide the next likely user?s request services based on significant dynamic correlations. In the past, sequential association rule [11][17] have been used to capture the co-occurrence of user?s sequential movement pattern in mobile web systems domains.

Episodes were designed to capture significant patterns form sequence of events. However, these models were   DOI 10.1109/NCM.2008.192     not designed for the user?s temporal movement patterns in mobile agent systems. And the deficiency of existed studies is that they considered only one of the characteristics, i.e. location associated with requested services. Obviously, both movement and location or service requested with the temporal association rule should be considered simultaneously in order to discover complete information of user behavior patterns when the user request services. As a result, it remains an open question how to discover the mobile user?s interesting movement behavior patterns by temporal mobile access patterns based on temporal association rule for user and services provider.

In the ubiquitous mobile computing environment, a novel data structure and method have been needed in order to achieve communication, transmission and interchange of information and for mobile user, the mobile user wish to get interesting services at real time with the current location by the mobile devices. To this end, we propose a novel data structure called Temporal Mobile Access Patterns (T-Map), and a novel mining method based on a given the novel data structure which is temporal mobile access patterns for discovering the behavior patterns such that suitable services can be predicted and recommended to user.

The novel data mining method is proposed for efficiently discovering the user?s behavior patterns with temporal association rule which are composed of the user?s movement access pattern with requested services data sets and location information.

The main contribution of our approach is to extract correctly and efficiently user?s behavior patterns as time passed. In additional, the contributions of the novel data mining method, T-Map, is useful for decision support system and match-making of web service as well as service discovery in intelligent ubiquitous middleware for user?s request information and context-awareness information.

The remainder of this paper is organized as follows.

In Section 2, we briefly review some related research.

Section 3 describes the system architecture in details.

Section 4 explores the problem formulation. In Section 5, we describe the proposed method and the underlying data structures. The conclusions and future directions are given in Section 6.

2. Related research   Efficient algorithms for finding frequent itemsets or sequences in very large itemsets or temporal data sets have been one of the key success stories of data mining research. One of the early computationally efficient algorithms was Apriori (Agrawal and Srikant, 1994), which finds frequent itemsets of length l based on  previously generated (l-1)-length frequent itemsets.

The GSP (Srikant and Agrawal, 1996) algorithm extended the Apriori like level-wise mining method to find frequent patterns in sequential databases. The mining sequential patterns (Agrawal and Srikan, 1995; Agrawal et al., 1996) proposed to find frequent patterns. The frequent patterns without candidate generation algorithm (Han and Pei et al., 2000) has been developed that significantly reduce the complexity of finding frequent patterns. And the frequent pattern growth algorithm (Han et al., 2000) that combines projection with the use of the frequent pattern tree data structure to compactly store in memory the itemssets of the original database. The basic ideas in this method were recently used to develop a similar algorithm for finding sequential patterns (Pei et al., 2001). In Han et al. (2002) and Frequent pattern tree (FP-tree) based algorithm called TFP was introduced for finding top-k frequent closed patterns of length no less than a given value. TFP dose not input a predefined minimum support. Instead, starting from 0, the minimum support is raised based on candidates top-k frequent closed patterns found so far. Similar to LPMiner, TFP is effective for finding long frequent itemsets. Furthermore, TFP allows users to input the number of patterns to be discovered rather than less intuitive minimum support. One drawback with TFP is that any patterns shorter than a given minimum length are never discovered, which might not be appropriate for some applications. An entirely different approach for finding frequent itemsets and sequences are the equivalence class-based algorithms Eclat (Zaki, 2006) and SPADE (Zaki, 2001) that break the large search space of frequent patterns into small and independent chunks and use a vertial database format that allows them to determine the frequency by computing set intersections. However, these methods did not consider temporal data sets so that they cannot be applied directly for providing efficient service to user in mobile agent systems.

The problem of finding prevalent mobile user pattern has been studied in recent years. The temporal data mining method has been researched for extracting useful knowledge from temporal data sets [2][9][14][19]. Temporal data mining is concerned with data mining of large sequential data sets [18]. By sequential data, we mean data that is ordered with respect to some index. For example, time series constitute a popular class of sequential data, where records are indexed by time. Time series analysis has quite a long history. Techniques for statistical modeling and spectral analysis of real or complex- valued time series have been in use for more than fifty years (Box et al., 1994; Chatfield 1996). Weather forecasting, financial or stock market prediction and     automatic process control have been some of the oldest and most studied applications of such time series analysis (Box et al., 1994). Time series matching and classification have received much attention since the days speech recognition research saw heightened activity (Juang and Rabiner 1993; O?Shaughnessy 2000). These applications saw the advent of an increased role for machine learning techniques like Hidden Markov Models and time-delay neural networks in time series analysis. The research of related temporal association rule has been studied for cyclic association (B Ozden, S Ramaswamy, and A Silberschatz, 1998) and temporal pattern with association rule by calendric association methods (X chen, I petrounias and H Heathfield, 1998). The problem of finding frequent patterns in mobile agent systems has been extended to that of finding frqeunt user behavior patterns in mobile web systems (Vincet S. Tseng, and Kawuu W. Lin. 2005) More recently, the survey of temporal data mining has presented by Srivatsan Laxman and P S Sastry in 2006 [15].

However, they did not consider temporal association rule in mobile agent systems. As a result, it remains an open question how to construct the best association rule based on sequential and temporal association rules for mobile users.

3. System Architecture  In this Section, we propose the system architecture for  the proposed data mining mechanisms. Before going into the details, the intelligent middleware system architecture associated with mining mechanisms and the data mining mechanisms are recapped briefly.

3.1. Intelligent middleware platform with mining module  In [8] J. Paik et al. improved intelligent middleware  platform, CALM with the actual usage of mining algorithm, esp. XML mining. To the purpose, they developed the auxiliary albeit import module, context data mining module, whose goal is to find important but implicit context information for accurate decision- making.

In this paper, we adopt their module for extraction  user?s behavior patterns and modify the algorithm to reflect our method. Figure 1 presents how the original module for decision making has been altered. The left side of the figure depicts a simplified ubiquitous middleware structure in functional blocks for context- awareness. From the figure we can see that context factors are monitored, aggregated, interpreted, and  finally both stored into storages and provided for the learning and inference module.

Figure 1.  Bird?s eyes view of middleware platform and its mining module.

The learning and inference module plays an absolutely key role in the middleware by deducing new and relevant information to application and user from various sources of context data. The aim of the module is to support the process of decision making for the adaptation at the middleware. However, the accuracy of learning and inference module can be degraded by the flood of useless   and most of all, hidden context information. Therefore, the context data mining module is added an auxiliary module. This module is used to extract the mobile user?s access pattern with time-related. Moreover, the auxiliary module is provided request-information to user at real time associated with middleware.

3.2 System architecture for temporal mobile access pattern  In this subsection, we represent the system  architecture associated with the context data mining module in details for mining temporal mobile access pattern. It is conducted to extract mobile user?s useful access patterns with time-related. Figure 2 describes the data mining system architecture for temporal mobile access pattern mining mechanisms. The work- flow of the system is divided two phases. This systems form that the logs for users' movement and users' service requests associated with temporal association can be stored in different databases. The first phase of system architecture, Data integration phase, is to collect and integrate users' logs into one dataset for efficient access and the temporary user information     like current location to manage requests from subscribers. For this phase, the attributes related to user's temporary service requests will be extracted from the dispersed log files and joined to from an integrated log file by using the user's service identifier as the key. Mining phase is deployed novel data mining method to discover the frequently temporal mobile access patterns (T-Map) from the integrated log dataset. Consequently, the best recommended results are returned associated with temporally user's access pattern to the mobile agent. The mobile agent system is supported by both movement and service requests pattern of users with proper time information, which makes the system powerful and accurate.

Figure 2.  System architecture for temporal mobile access pattern mining mechanisms  4. Problem Formulation   In this section, we give the formal definition to extract user?s mobile access pattern with temporal association rule. The temporal database typically stores relational data with include time-related attributes.

These attributes include (a) timestamp(s) of access patterns which one of the attributes has different semantics. We consider two sets L and S with timestamps t, namely location data sets, services data sets, respectively. For each element l in L and each element s in S, we form an ordered pair f=(l, s). Let F be the set of all ordered pairs and it is denoted as F = L x S = {all pairs of (l : s)t | l ? L and s ? S}    Two element 1t and st are taken as the first and second element of f, respectively. Two ordered pairs (l1, s1)t  and (l2, s2) t are equivalent iff l1t= l2t and s1t= s2t.

Let T= ? ? = =  ? ?  ?  ?  ? ?  ?  ?n  i  t n  j j  i  f 1 1  be a temporal moving  sequence of an ordered pair f with length equal to n, where fj represents the user?s location and requested services data sets at time ti. Note that even if the timestamp ti is occurred the same as user access pattern, the ascending order of elements of access pattern is sorted by sequence as time passed. Considering only the ordered pairs fj in T, we define the pattern Tp = <((f1) (f2)?(fn))t> as a temporal mobile access pattern (T-Map). Given a database D= {Tp1, Tp2, ?, Tpn} that contains n access patterns. The support of pattern Tp is defined as   Sup(Tp) = n njiandTTTiTTiT p  j ppp  j pp |},1,|{| ?????  An access pattern pT  is called a frequent temporal mobile access pattern if Sup(Tp) is greater than a minimum support threshold (min_sup).

5. Mining of Temporal Mobile Access Patterns   In this section, we first describe the predefined timestamps and an integrated log. And then, we propose the data mining method, namely T-Map-Mine.

The input to the T-Map-Mine algorithm is the log of temporal mobile access patterns, which is contained by integrating both of location and requested service data sets as time goes by.

5.1. Predefined Timestamps and an Integrated log   In this subsection, we present predefined timestamps and integrated log data sets  5.1.1. Predefined Timestamps. The predefined timestamps as illustrated in Table 1. For the simplicity, we set the time interval every four hours. The timestamp T1 is gathered user?s occurrence access patterns from 06:01 to 10:00. T2 is also got user?s occurrence access patterns form 10:01 to 14:00. T3, T4, T5 and T6 are collected use?s occurrence access patterns as well from 14:01 to18:00, 18:01 to 22:00, 22:01 to 02:00 and 02:01 to 06:00, respectively.

Table 1. Predefined timestamps Ti   Timestamps Time Interval  T1 06:00 ~ 10:00  T2 10:00 ~ 14:00  T3 14:00 ~ 18:00  T4 18:00 ~ 22:00  T5 22:00 ~ 02:00  T6 02:00 ~ 06:00   Based on the set f and Table 1, the table of temporal mobile access patterns, is generated time T.

5.1.2. Integrated log data sets. We construct the T, temporal mobile access patterns, as shown in Table 2.

To insert the first access patterns of user ID 100 into the table, the following process is constructing the temporal mobile access pattern (T): i) the mobile user?s current location information and service request into the integrated log as time goes by. And then, the user?s location information as time passed is compared another user?s location log to find the same as current location information which occurred the same time in history movement log data sets. The same as current location information is extracted in history movement log data set. ii) The service request log is stored mobile user?s current request service information. Then, the request service is also compared another user?s requested service information to find the same as requested service which occurred the same time in history service request log. And then, the same as request service information is extracted location and request service information is integrated as shown Table 2, and the integrated log which location and request service is stored in the integrated database.

Therefore, we can discover the location based service as time goes by. Table 2 shows the completed T table (Temporal mobile access pattern table). To insert the access patterns of user ID 101, 102 and 103 are also constructed the same as above way.

Table 2. An integrated log   UID Timestamp Access pattern  T1 < A:1, B:2, C:5, D:8 > T2 < A:1, D:1, E:2 >  T3 < A:2, B:2, E:1 > T4 < C:4, F:2 > T5 < C:2, B:2 > T6 < A:2, B:2, E:1 >   T1 < A:1, B:3, C:5, D:8 > T2 < B:1, D:1 > T3 < C:1, E:3 > T4 < C:4, E:3 > T5 < B:2, D:1 > T6 < A:2, B:2, E:1 >   T1 < A:3, B:6, C:8, D:7 > T2 < B:2, C:6, D:7 > T3 < A:2, B:3, E:2 > T4 < E:3, G:7 > T5 < E:1, D:2 > T6 < A:1, D:1, E:2 >   5.2. Proposed data mining method: T-Map- Mine  In this subsection, we propose the data mining method  called T-Map-Mine. Our T-Map-Mine algorithm consists of the following two phases; (?) construction of T-Map-Tree, and (?) mining of temporal mobile access patterns. In the following, we describe the T- Map-Mine algorithm in details.

5.2.1. T-Map-Tree Construction. For the purpose of discovering the frequent T-Map efficiently, it is required to construct a T-Map-Tree in advance. The purpose of constructing T-Map-Tree is to aggregate the access patterns into the memory in a compact form so that the mining of frequent patterns can be done efficiently.

The T-Map-Tree is consisted of a header table and  aggregating the access pattern trees into the memory in a compact form. The scan of the database is the same as Apriori [12], which derives the set of frequent access patterns and their support counts (frequencies).

Compared with breadth-first algorithms such as Apriori and its variants, which may need as many physical database scan as the length of the longest pattern. However, the T-Map method just needs one physical database scan when the constructing of header table as shown (b) of figure 3. Let the minimum support count be 2. Given the access patterns as listed in Table 2, the set of frequent access patterns is sorted in the order of access patterns as time passed Table 3 shows the header table of T-Map-Tree.

Table 3.  The header table of T-Map-tree      Location Infomation support  A 9 B 10 C 8 D 9 E 10   We construct the T-Map-Tree as shown in Figure 3.

The T-Map-Tree is constructed as follows: A node tale in T-Map-Tree is maintained to record the first- occurrence address and total count for distinct labels.

First, create the root of the tree, labeled with ?null or {}?. The access patterns in each integration log data sets are processed in header table order and a branch is created for each integration log data sets. Take the first access pattern as example, the movement sequence ?UID 100: A, B, C, D? would first be extracted from < A:1, B:2, C:5, D:8 > and be inserted into the T-Map- Tree. The count of each node label traversed by the sequence will be increased by 1. To facilitate tree traversal, a location log header table is built so that each log points to its occurrences in the tree via a chain of node-links. At the tail node of this sequence in T- Map-Tree, we construct a Requested Services Tree (RST) on it. Therefore, each tail node in each sequence will have an RST on itself. The RST also has the header table contains node level. And then, we extract the requested services sequence <1, 2, 5, 8> from < A:1, B:2, C:5, D:8 > and insert it into the corresponding RST, as shown in Figure 3.

(a) One database scan       (b) Frequent location log    Figure 3. The T-Map-Tree constructed for the log data sets in Table 2  5.2.2. T-Map-Mine  Mining of the T-Map is completely constructing as  shown Figure 5. And the constructing of T-Map method is as follows in detail. Let?s first consider <A, B, C, D> which is the tail node?s label is D3 in the T- Map-Tree. Then, the sequence of <A, B, C, D> where <A> is linked as a child of the root, <B> is linked to <A, C> is linked to <B> and <B, D> is linked to <C>, and D is linked to <C>. Then, we consider the <A, B, D> and <A, D, E> which tail node?s label is E4 and E2, respectively. <A, B, D> and <A, D, E> would result in a branch where <A> is linked to the root. However, this branch would share a common prefix, <A>, with the existing path <A, B, C, D>, and the support count is increased by 1. The completing of above log data sets is shown Figure 4. The RST tree is then constructed header table and trees. The header table of RST includes levels and timestamps. The RST Tree consists of requested services log according to location log. For example, we consider that the requested services log data sets <1, 2, 5, 8> from <A:1, B:2, C:5, D:8> which is UID 100 in Table 2. The requested log <1, 2, 5, 8> is inserted into the RST Tree. The count of each node label traversed by the sequence will be  A 9 B 10 C 8 D 9 E 10 F 1 G 1  A 9 B 10 C 8 D 9 E 10     increased by 1. Suppose that the only the patterns with count greater than or equal to 2 are qualified as discovered result. By scanning the node structure in Figure 3, we find that all of the labels in the structure satisfy the minimum support. As shown in Figure 4, we arbitrarily select a label D from the satisfied labels as the prefix pattern and choose the RST Tree whose movement sequence contains label D. We gain the frequent user?s behavior pattern <D:8>, <C:1> and <1:2> in timestamp T1. And we can also extract frequent sequence pattern <5:1, 8:1>. For the movement sequence contains label E, we discover the frequent pattern <A:2>, <B:2> and <E:1> in T3 and T6, respectively. And frequent sequence patterns <A:2, B:2, E:1> occur in T3 and T6. However, even the movement sequence label E is statistically frequent pattern, it is not actual frequent pattern. Because the <A:2, B:2, E:1> has occurred only one pattern in T2 and T6, respectively.

Figure 4. For example part of log data sets  Mining of the T-Map is completely constructing for  above example as shown Figure 5. As a result of the Mining of T-Map While the timestamps T1, T3 and T6 has occurred <A:1, B:2, C:5, D:8>, <A:2, B:2, E:1> and <A:2, B:2, E:1> in regular sequence, respectively.

Figure 5. Part of the T-Map discovering example  6. Conclusion   In this paper, we proposed the novel data mining method called temporal mobile access patterns that could efficiently discover mobile user's temporal behavior patterns associated with location and request services. Furthermore, we presented the novel data structure with temporal mobile access patterns called T-Map-Tree. The advantage of our method has been compactly stored the use's behavior pattern in memory.

Thus, even the log data sets consume much memory when the information data sets are storing, they are still the fastest method and consume less memory than existing methods due to using the compact data structure form, T-Map, into the memory. Our technique works especially well for context-awareness data sets in mobile agent systems. Moreover, our technique may apply the health care system, mobile web system, match-making and decision support system, etc.

For the future work, we will apply T-Map more real datasets and evaluate its performance.

