Couple Satellite Sensor Web Service with WRF  Model for Weather Decision Service

Abstract? Nowadays, the Sensor Web provides a new way for sensor planning and observation service, whereas, how to couple diverse satellite observations with specified forecast model for weather support decision service under Sensor Web environment is a big challenge. This paper proposes a new framework for put data assimilation into a forecast model. The framework is realized based on the Sensor Web Enablement (SWE), Business Process Execution Language (BPEL) and Web Processing Service (WPS) under the Service Oriented Architecture (SOA) and Open Geospatial Consortium (OGC) standard. The framework contains four main Service components: Sensor Observation Service (SOS), Sensor Alert Service (SAS), Web Notice Service (WNS) and WPS. All the services are chained with BPEL and could be automatically executed. The processing framework is distributed, interoperable, plug-and-play and automatically.

Keywords-Sensor Web, Decision Support Service, Satellite, Weather, Model

I. INTRODUCTION In everyday life, weather forecast is one of the most  common and important decision support systems. However, current Weather Decision Support System [1] has many problems, which occurs integrating large data volume from satellite sensors with different observational constraints and lacking real time disastrous weather forecasting from sensors observations to information publish.

The sensor web is a group of interoperable web services which all comply with a specific set of sensor behaviors and interfaces specifications [2]. The Open Geospatial Consortium (OGC) Sensor Web Enablement (SWE) includes three information models: Sensor Model Language (SensorML) [3], Observation and Measurements (O&M) [4, 5] and Transducer Markup Language (TML) [6], and four service implementation specifications: Sensor Planning Service (SPS) [7], Sensor Observation Service (SOS) [8], Sensor Alert Service (SAS) [9], and Web Notification Service (WNS) [10]. When they work together, it is possible to use Web services to discover, access, and control sensors. Sensor Web facilitates the live link between sensors and information. Therefore, this study adopted the Sensor Web technology to put data assimilation into a forecast model through using BPEL engine to integrate sensor  web service in the Service Oriented Architecture (SOA) and OGC standards.

Weather Research and Forecasting (WRF) model is chosen as Weather Decision Support System in the framework [11].

The WRF is a next-generation mesoscale forecast model and assimilation system that will upgrade both the understanding and the prediction of mesoscale precipitation systems and will promote closer ties between the research and operational forecasting communities. The model incorporate advanced numeric and data assimilation techniques, a multiple relocatable nesting capability, and improved physics, particularly for treatment of convection and mesoscale precipitation.  It is intended for a wide range of applications, from idealized research to operational forecasting, with priority emphasis on horizontal grids of 1?10 kilometers.

In this paper, Section II specifies the requirements of data service, processing services, BPEL workflow and processing method for the data assimilation. Section III designs the framework of prototype system. Section IV presents and discusses the implementations. The last section gives a conclusions and points out the future directions.



II. DATA ASSIMILATION REQUIREMENTS  A. Sensor Web Enablement The OGC SWE standards framework provides implement  specifications for interfaces, protocols and encodings.

Integration of these services can create a platform to register, discover and access anonymous and heterogeneous sensors distributed all over the world through internet [12].

Sensor web enablement services implemented for the Weather Decision Service prototype system include SOS and WNS. SOS provides an API for managing deployed sensors and retrieving sensor data and specifically ?observation? data [8]. It enables the client to request, filter and retrieve observations and sensor system information from the database.

WNS provides an API for asynchronous delivery of messages.

A simple WNS provides the capability to notify a user and/or service that a specific event occurred [10].

B. Web Processing Service  1Supported by grants from the Chinese 863 program (No.2007AA12Z230, PI: Dr. Nengcheng Chen), National Nature Science Foundation of China (NSFC) program (No.40721001, PI: Dr. Jianya Gong), and the LIEMARS Shenzhen R&D project (No.SY200806260042A and CXB200903090023A).

The Web Processing Service (WPS) [13] specification describes a mechanism by which geoprocessing may be performed on remote servers which using XML for communication through the Internet. The WPS specification was developed for offering any kind of GIS processing functionality by a standardized interface use any language and platform independent. According to the specification, there are three mandatory operations performed by a WPS, namely GetCapabilities, DescribeProcess and Execute.

? GetCapabilities: returns a brief service metadata document describing the resources of the specific server implementation, and gives a short description of each process offered by the WPS instance.

? DescribeProcess: returns a detailed description of a process including its required input- (including the allowed formats) and output-parameter.

? Execute: finally run the offered process.

These operations can be requested by a client and performed by a WPS server implementation.

C. BPEL Workflow The Business Process Execution Language (BPEL) is an  XML-based language for creating business process workflows and orchestrating XML-based web services [14]. The resulting BPEL application supports a SOA paradigm by leveraging web computing standards to deliver an application that is the business process. In a BPEL process, every piece of data is in XML format. This includes the messages passed to and from the BPEL process, the messages exchanged with external services, and all variables. We define the types for these messages and variables with the XML schema, in the Web Services Description Language (WSDL) file for the BPEL process itself or in the WSDL files for the web services that a BPEL process invokes. The WSDL defines the input and output messages for a BPEL process, the supported client interface and operations, and other features. This functionality enables a BPEL process to be registered and called as a web service.

D. WRF-Var The Variational Data Assimilation (WRF-Var) is a newly  developed variation data assimilation system, which is a unified variation data assimilation system built within the software framework of the WRF model, used for application in both research and operational environments [15]. The basic interface is fully consistent with the WRF model. The WRF- Var system requires three input files to run: a) A WRF first guess input format file output from either WPS/real (cold-start) or WRF (warm-start), b) Observations (in ASCII format or PREBUFR), and c) A background error statistics file (containing background error covariance currently calculated via the NMC-method), using ?gen_be? utility of WRF-Var. To run the WRF-Var system includes the following steps [16].

1) Setup frame: Reads grid dimensions from ?namelist.input? file and then initialize tile, memory, patch dimensions, etc.

2) Read namelist: Reads WRF-Var data assimilation options from ?namelist.3dvar? file and perform consistency checks between Namelist options.

3) Setup background: The background field is read in.

4) Setup background errors: Components of the background error are read in.

5) Setup observations: Observations and metadata are read in.

6) Calculate innovation vector: Calculates ?model equivalent? B of observation O through interpolation and change of variable and then Computes observation minus first guess (O-B) value.

7) Minimize cost function: A cost function (as in (1)) is defined to measure the difference between the model and observations. Through iterative solution of this cost-function, an ?optimal? estimate is obtained.

1 11 1( ) ( ) ( ) ( ) ( ) 2 2  T T b b o oJ x x x B x x y y O y y  ? ?= ? ? + ? ? (1)  Where:  x is a vector of analysis,  xb is a vector of background (first-guess),  B is the background error covariance matrix,  y0 is a vector of observation,  y is a vector of model-derived observation transformed by the observation operator H (y=H(x)),  E is the observational error covariance matrix,  F is the representativeness error covariance matrix.

8) Compute analysis: Once WRF-VAR has found a converged control variable, convert to model space analysis increments and performs consistency checks.

9) Compute diagnostics: Compute O-B, O-A statistics for all observation types and variables and compute A-B statistics for all model variables and levels. Then Statistics include minimum, maximum, mean and standard deviation.

10) Output analysis: Both analysis and analysis increments are output.

11) Tidy up: Dynamically allocated memory is deallocate and summary run-time data output.



III. ARCHITECTURE FRAMEWORK In order to achieve the goal of automatic coupling atellite  Sensor Web service with WRF model for weather decision service, the system must be interoperable with SOS, WPS, and WNS. The different services can exchange data via a common set of standard information models using the same standard protocols. At the same time, the system must be flexibility to meet the diverse services requirement. The design of the system must provide the loosely architecture, satisfy the requirement of diverse services requirement and deployment.

A. System Architecture To satisfy the above goals, SOA has been adopted for the  prototype system. As shown in Figure 1, sensor data will be served through standard OGC SOS. The data assimilation and processing algorithms are published as WPS. The result of forecast model will be sent to users through WNS. By defining WDSL description for these services, they can be easily chained and executed through BEPL Engines. The system includes three layers: data layer, business layer, and presentation layer.

Figure 1. Service-oriented architecture of forecast system  The data layer includes the sensors observation data. In the system, the data includes NOAA-18 observation data, JMA T213 (Japan Meteorological Agency T213), GTS (Global Telecommunication System) and GFS (Global Forecast System). The NOAA-18 satellite mostly data includes atmospheric temperature data and the data can be served by SOS; The JMA T213, GTS and GFS are download from internet and use to first guess.

The business Layer consists of a BPEL engine, SOS implementation, WNS implementation and WPS implementation. A uniform WSDL service description is used to expose the service, bindings, port types and operations about SOS and WPS. BEPL Engines is used to achieve service orchestration and executed. All these services follow OGC standard.

The presentation layer is the client of the system. The presentation layer consists of components with which users can access, view, and manipulate sensor observation data or data assimilation result.

B. Service Components The weather forecast model need heterogeneous data  volume from various sensors. By reason of most data volume cannot direct access; the prototype system must be flexibility to meet the diverse sensor observation data. SOS allows the client to select any random number of the observation variables available from the data source, and to subset the data by spatial and temporal range. So using SOS, the sensor data and observation data can be accessed, retrieved and downloaded by respectively using the operations DescribeSensor, GetCapabilities and GetObservation.

The data assimilation was made using WRF-Var system and the weather forecast model was made using WRF model.

WRF-Var system and WRF model are available as executables,  which can run the command in a terminal window. To enable them in the Web environment and support interoperation, they are encapsulated and managed as a geospatial process in the WPS. All the services are chained with BPEL and can be automatically executed.



IV. IMPLEMENTATIONS This section details some of the service implementation:  sensor observation service, processing services, WSDL and BPEL workflows.

A. Sensor Observation Service The observation data of NOAA-18 are to be served through  SOS server. The NOAA-18 satellite is described by Sensor Model Language (SML), the satellite observation data is stored in PostGIS database which is hosted at the SWE-WHU server and encoded in Observations and Measurements (O&M).

1) Sensor model The SensorModel tool is used to create the satellite sensor  model [16]. The tool uses the C# language and .NET Framework 3.5 design and implementation. The main function of the tool is to provide visual modeling method by Sensor Model Language.

NOAA-18 platform is build up based on the SensorModel tool. The main information is the metadata about the satellite and the file information, such as satellite orbit information, sensor information, scanner type, and so on. NOAA-18 satellite include the Advanced Very High Resolution Radiometer/3 (AVHRR/3), High Resolution Infrared Radiation Sounder (HIRS/4), Advanced Microwave Sounding Unit A (AMSU-A), Microwave Humidity Sounder (MHS), Solar Backscatter Ultraviolet Radiometer/2 (SBUV-2), Space Environment Monitor/2 (SEM/2), and an Advanced Data Collection System (ADCS). We describe each sensor as a component saving in a unique XML file, so there are seven components to describe the physical sensor in the NOAA-18 platform. Figure 2 shows part of the NOAA model. This part describes mostly parameters characteristics of AVHRR sensor, including number of channels, IFOV, full scan period, swath width, and so on. The record ?Number of channels? means the AVHRR sensor has six spectral channels.

Figure 2. AVHRR sensor description by SML  2) Observation  encoding The sensor data, which is converted from its native format  to O&M, is easy to deliver as either ASCII or binary      attachment and in order to increase data interoperability. For example, as shown in the figure 3, the atmospheric temperature data, which obtain from NOAA-18 AVHRR sensor, is encoded by O&M. The time is between ?2010-03-12T03:52:00EDT? and ?2010-03-15T02:52:00EDT?. The observation has seventy-two records. For the ?2010-03-12T03:52:00EDT, 53? record, the time of measurement is ?2010-03- 12T03:52:00EDT?, EDT means the USA Eastern Daylight Time, and the atmospheric temperature is 53F.

Figure 3. Sample of AVHRR sensor observation data  3) Sensor observation service At last NOAA_18_SOS is developed based on J2EE. The  SOS implements three operations: GetCapabilities, DescribeSensor, and GetObservation. The GetCapabilities operation can obtain SOS capability file. The DescribeSensor operation can get NOAA_18_SOS sensor information which describe by SensorML. The GetObservation operation can receive NOAA_18 sensor observation data which encoded in O&M and stored in PostGIS database.

B. Processing Service As a geospatial process, it has a description for its inputs  and outputs. The description can be retrieved through standard operation DescribeProcess. For example, the description for the WPS_WRF3DVar process can be retrieved by using the following HTTP GET request.

http://swe.whu.edu.cn:9000/WPS/WebProcessingService?R equest=DescribeProcess&Service=WPS&identifier=cn.edu.wh u.swe.wps.algorithms.WRF3DVar  As shown in Figure 4, from the response result, the WRF3DVar process need three input parameters include the background field (Grib format), Background Errors (Grib format), and Observations (ASCII format). The output is assimilation result (Grib format). The result can be converted to binary format using the wrftograds tools and then be visualizing using grads tools.

Figure 4. The response result of DescribeProcess  C. Defining the WSDLs for SOS and WPS The WSDL is an XML-based language that provides a  model for describing Web services [17]. The WSDL defines services as collections of network endpoints, or ports. The abstract definitions of ports and messages are separated from their concrete use or instance, such as ?how? and ?where? that functionality is offered. As a rule, a WSDL instance is divided into four parts: Operations, Prototypes, Bindings, and Services.

In the forecast use case, we have defined the WSDL for SOS and WPS, and set up services such as NOAA SOS, MODIS SOS, WRFVAR WPS and WRF WPS.

Figure 5 shows the components of the SOS WSDL:  two kinds of Prototypes (HTTP Get and Post), three mandatory operations (GetCapabilities, DescribeSensor, and GetObservation), two kinds of bindings (SOS_HTTP_POST_Binding and SOS_HTTP_GET_Binding) and NOAA_18_SOS Service components.

Figure 5. SOS WSDL  Figure 6 shows the components of the WPS WSDL. The WPS WSDL has two transportation port types (HTTP GET and POST), three mandatory operations (GetCapabilities, DescribeProcess, and Execute), two kinds of bindings (WPS_HTTP_POST_Binding and WPS_HTTP_GET_Binding) and two WPS Service components (WPS_WRFVAR and WPS_WRF).

Figure 6. WPS WSDL  D. BPEL Workflow The workflow technology is used in order to achieve  interoperable automation processing framework. With visual BPEL designer tools Oracle JDeveloper BPEL designer, the      concrete BPEL workflow was described and created. It enables enterprises to orchestrate and execute Web services and business processes. A BPEL script file and an unbound WSDL file are generated using the designer tools.

For the forecast model, the overall workflow sequence has four steps. As shown in Figure 7, first, all the data required to start the forecast model need to be retrieved from SOS, and fed into a pre-processing service to complete the data format normalization. Second, a data assimilation service organizes the data and observations into the simulation model. Third, the forecast model is started. Fourth, the outputs are retrieved, the result sends through a notification service.

The BPEL engine acts as a client; the four partner links represent the SOS, WPS_WRFVAR, WPS_WRF and WNS; after one web service finishes its work, it will call-back invoking the engine so the next step of the workflow can be directed by the engine. In the figure 7, the orange squares represent the assigning activity, the blue circle squares receive the input, and the blue squares are actual partners or component Web services operations. The first blue squares represent the SOS invoke. This step invokes a SOS to get the observation data. The SOS provides atmospheric temperature data from NOAA-18 AVHRR sensor. After the data acquisition is completed, the second blue squares represent the WPS_WRFVAR can be invoked. The assimilation algorithm is encapsulated as WPS. The assimilation result and Namelist file are supply to forecast algorithm. The third blue squares represent the WPS_WRF invoke. This step invokes WRF model, which is encapsulated as WPS, to compute forecast result from the assimilation result. After finish compute, the fourth blue squares invoke WNS service to send a notification.

Figure 7. Weather forecast workflow

V. CONCLUSIONS AND OUTLOOK This prototype system study represents SWE in a useful  application. By applying SWE to forecast model for weather support decision service, this paper demonstrate the usefulness and feasibility of a more timely and efficient satellite data access and process. The prototype framework is distributed, interoperable, plug-and-play and automatically. The next step is to study how to development of abstract model workflow to support the flexibility and reliability of composite service and how to implement multi-satellite sensors near real-time data assimilation in service level.

