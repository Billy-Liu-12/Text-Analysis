<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">Proceedqs of

Abstract: Both item-assmiations and nser-associations mined from the rating table can be used to make personalized recommendation for the am-" user in de-based recommend technique. Mining user-associations is the key for the recommendation based on user-associations. In tbis paper, we find that the cnrrent user not only can be used to constrain the rule form in user-assnciations mining profeps, but also can be used to partition the rating table into two parts in order to accelerate user-associations mining. It is first proved that user-wmiations about the current user mined from the wbole rating table are contained in those mined only fmm the data set that contain the am-" user's rating. Then, a user-assochtion mining frame based on twostage connt called TSCF is pruposed. TSCF frame can be implemented by using existing algorithm for mining association rules. And an algorithm TSCF-CL for mining user-associations is implemented by using the concept lattice. Lmt the performance comparison with ASARM algorithm shows that TSCF-CL can reach better time capacity.

Keywords: User-Association; Concept Lattice 1. introduction Recommender system; Association Rule; It is the concemed problem to make personalized recommendation for users in &amp;commerce. The system that can make personalized recommendation for users is recommender system I". Recommender system first collects all users' rating information about kinds of recourses to form the data set (rating table), and then makes recommendation for the current user by using the recommend techniques. The ty ical recommend techniques are Content-based Filtering lZRand Collaborative Filtering (in brief, CF)'3,'J'. With data mining's developping association rule mining has been applied in recommender system recently, so that Rule-based recommend techniq~e'~.~' is formed. Rule-based recommends technique makes recommendation by using both item-associations and user-associations which are association rules mined from the rating table.

Rule-based recommend technique usually adopts Apriori algorithm and its variants to mine association rules.

Fn developed a rule-based recommender system SurfLen's', which uses Apriori algorithm to make web page recommendation for users online. Sanvar. etc proposed a Top-N L91 algorithm which first selected the users that are the most similar to the current user, and then mined association rules on these users in order to increase the efficiency of recommendations. But Lin found it was not efficient to apply most of the existing association rule mining algorithms designed for the basket data '" in recommender system because lots of association rules mined by these algorithms are indifferent to the current user.

So Lin proposed an adaptive-support algorithm ASARM [" to mine association rule for recommender system, which still adopted the Apriori-based CBA-RG algorithm  ASARM's efficiency is increased with using the current user to limit the association rule's form.

In recommender system based on user-associations the common interest of the users in the condition of a user-association is suggested to the current user in the conclusion. In our research, we find that the current user    conclusion. In our research, we find that the current user not only can be used to constrain the rule form in user-associations mining process,but also can he used to partition the rating table into two parts before the mining process in order to accelerate user-assocjations mining .

This paper fmt proposes a user-association mining frame called TSCF based on two-stage count, which can be implemented by existing association rule mining algorithms.

Then by using the concept lattice, we implement a user-association mining algorithm TSCF-CL based on TSCF. The paper is organized as following: a user-association mining frame TSCF based on two-stage count is given in section 2. In section 3 the TSCF-CL algorithm is introduced. In section 4, the performance of TSCF-CL algorithm is tested and compared with ASARM.

Finally we summarize the whole paper.

&amp;7803-8403-2/04/320.00 @Ow IEEE 26-29 August 2004 , .

2. A User-Assodatinn Mining Frame based nu Two-Stage Count rows. For example, if the current user is Ut in tablel, then D1 is 111, Iz, 1 3 . 4 .  k, b. I101 ancl D2 is Ik.$, 191 2.1. Assoeiatinn Rule Association rule mining is designed for basket data analysis. Let I is an itemset, D is a set of transactions, and each transaction T in D is such an item set that TcI. An association rule R is such a rule A+B that A d ,  B d  and AnS=0.  A is the condition of R, noted Condition(R), B is the conclusion of R, noted Conclusion(R). For an itemset Xd, X s  support in D is the ratio between the number of transactions containing X and IDI. IF X's support is not less than the minimal support threshold MinSup defined by the user, then X is a frequent itemset. Association rule mining discoveries all association rules satisfying MinSup and the Tablel. A Rating Table minimal confidence threshold MinConf defined by the user.

Without considering MinSup and MmConf (i,e. Let RuleltemSet(R) = Condition(R)vConclusion(R) MinSup=l/lDI, MinConfSJ) constraint, let ARSu@) is represent itemset of the rule R. R s condition-support-count transactions that contain in -D. R's used-associations about U mined from DI. in D,noted ConditionSupCountDO~ , is the number of the user-associations about U d e d  from D. and ARSdDI) is ~~ I ~~ ~~ ~ r&amp;support-count in D,noted RuleSupCountD(R), is the number of the transactions that contain RuleItemSet(R) in D. R s  support in D,noted Sup,,(R), is the ratio between RuleSupCountD(R) andlDI. R s  confidence in D, noted Confn(R), is the ratio between RuleSupCountD(R) and CnnrlitinnSimCniint,(R &gt;~ Lemma1 ARSu(D) = ARSu(DI) Proof: ARSU(Dl)MSU(D) is evident because of D1 E reduction to absurdity. Randomly select a user-association R from ARSu(D) about U and assume RB ARSU(DI), then D. SO only ARS"@)EARSu(DI) has to be proved by r -- ----I,\- -1. - .._ - there is in D2 at least one row in which the column of Uis 2.2. The User-Association Mining Frame TSCF based nn Two-stage Count Recommender system first collects all users' rating information about kinds of recourse to form the data set (rating table). The rating table is usually expressed by a table, in which the value in the ith row and the jth column is the rating that the jth user remarks on the ith resource. If the value is 1 it means that the jth user likes the ith resource, or else it means no rating about the ith resource. For example in Tablel there are 6 users who express their rating about 10 resources. Here, the rating table corresponds to the transactions in association rule mining.

In recommender system based on user-associations.

given the current user U, all association rules such nU,+U    given the current user U, all association rules such nU,+U (called as a user-association about U. where U. and U are 1. This is conflicting ..with the definition of D2. So ARSu@)I;ARsu(Dl).

Lemma2 VRE ARSu(D), RUkSUpCOUntD(R)= RUkSupCOUntDl(R) Emma1 and lemma2 show that without MinSup and MmConf constraint,not only user-associations about U mined from D1 are the same as those mined from D, but also the support count of the same user-association is the same. In e-commerce, the items bought by one user is a little part of all resources in the whole website. So in general D1 is far smaller than D.

With considering MinSup and MinConf cons t+&amp; let ARSu(D, MmSup, MinConf) is user-associations about U satisfying MinSup and MinConf mined from D and ARSU(DI, MinSup, MmConf) is user-associations about U satisfying MinSup and MinCouf mined from DI.

different users in the system, and U,#U) must be found first in D, then the common interest of the users in the condition of the user-association is suggested to the current user in the conclusion. Partition the rating table D into ~1 and ~2 by the current user, where D1 is composed ofthe rows in D, which the U column is 1 and D2 is composed of the other Themml ARSu(D, MinSup, MinConf)c ARSU(DI, MinSuP, MinConf) F"0f: Given MinSup and MinConf,ARSu@, MinSup, Miconf)  and ARSu@l, MinSup, MinConf) can be computed in S W W .  In the first stage, We Compute ARSU(D )and ARSu(DI) without considering MinSup and i 26-29 August 2004 MinConf constraint, and we have ARSu(D)=ARS,(DI).

Then in the second stage ARSU(D )and ARSu@l)are filtered by MinSup and MinConf constraint to generate ARSU(D, MinSup, MinConf) and ARSu(D1, MinSup, MinConf). Randomly select a user-association RE ARSu@) (also REARSU@I)), then: SupD(R)=RuleSupCounto(R)nDI, Su~l(R)=RuleSu~oun~l(R)/lDll , Confo(R)=RuleSupCoun~(R)/ConditionSupCount~~), ConfDl (R)=RuleSupCountol(R)/ConditionSupCount,), According to lemd, IDI&gt;IDlI and ConditionSupCounto(R)~onditionSupCountDl (R), so Supn(R) 5 sup~,(R),  Confo(R) 5 ConfDl(R). When ARSu@) and ARSU(DI) are filtered by MinSup and MinConf, user-associations filtered out of ARSu(D) are not always filtered out of ARSU(DI), but those filtered out of ARSdDl) are always filtered out of ARSu(D). So ARSU(D MinSup, MinConf)c ARSU(D1, MinSup, MinConf).

Deduction1 VRcARSu(D), Sub(R)= SupDI(R)*(IDII/IDI), Confo(R)= Confol(R)* (ConditionSupCounbl(R) /ConditionSupCoun Dl (R)), Deduction2 Whether considering MinSup and MmConf constraint or not, user-associations about U mined from D are subset of those mined only from D1.

Themml and its deductions show whether considering MinSup and MinConf constraint or not, user-associations about U mined from D are contained in those mined only from DI. It means that user-associations about U will not be lost when we mine user-associations,about U only from DI, and for the same user-association, its support in D can be computed by using its support in D1. As a result we can filter ARSu(DI) by using MmSup constraint. But we can?t use MinConf constraint in D1 because the confidence of a user-issociation mined from D1 must be updated with the condition-support-count of the user-association in D2. In the whole, user-associations about the curcent user can be obtained from D based on two-stage count: in the fmt stage called as the support-count-stage aU user-associations about    called as the support-count-stage aU user-associations about the current user in D1 are computed without considering MinSup and MinConf constraint; in the second stage called as confidence-count-stage, D2 will be scanned to compute condition-support-count of each (frequent) user-association mined from the fYst stage, so that we can get the confidence of each user-association. This is the user-association mining frame TSCF based on two-stage count. Because in e-commerce, D1 is usually far smaller than D, TSCF will work efficiently.

3. TSCF-CL Algorithm TSCF frame c&amp; be implemented by using existing algorithms for mining association rules. By using concept lattice we implemented the user-association mining algorithm TSCF-CL. Because in recommendation domain, the rules with low support maybe the most personalized ones, TSCF-CL algorithm generates all user-associations without considering MinSup (Le, MinSup=l/lDI.

3.1. ConceptLattice , Given a set of instances E, a set of features E? and a binary relation R between E and E?, there exists a unique concept lattice corresponding to R. Each element of the concept lattice is a pair, called as a concept, noted (Y, X), which is composed of a set YEP (E). called as the extent of the concept, and a set XE P (E?), called as the intent of the concept, P (A) represents the power set of A [ ? I ] .  Each pair in the concept lattice must be complete as defined in the following.

A pair (Y, X) from P (E) and P (E?) is complete with respect to R if and only if the two following propelties are sa tis fi ed : (1) X=f CY) where f CY) =(e?cE?IVesY,eRe?) (2) Y=g ( X )  where g (XI  =(esE IVe?sX,e?ReJ Notice: f(0)=E?, g(0)=E. Only maximally extended pairs are kept in the concept lattice. There is a partial order between the pairs in the concept lattice. Given Hl=(YI,XI) and HZ=(Y2,X2), if X l d 2  then HI&lt; H2. ,we call HI is the father of H2. When we mine user-associations by using the concept lattice, X in the pair (Y, X) is the users in the condition of a user-association. Because the conclusion of all user-associations about the current user U is U, an element of the concept lattice corresponds to a user-association about the cument user. Association rules mining only concerns the support count of an itemset, so IYI is often used to represent Y, where IYI is the cardinal of Y.

3.2. TSCF-CL Algorithm Description TSCF-CL algorithm is based on the incremental concept lattice construction 15?. The element in the concept lattice is extended to the structure as fig. 1.

Given the current user U,Condset stores the condition of a user-association about U Because the conclusion of all user-associations about U is U,the condition is full enough to represent each user-association. SC stores the support-count of a user-association in D1 in the first stage.

CC stores the support-count of Condset in D2 in the second 26-29 August 2004 Algorithm TSCF-CL 'nput: a rating table D,U,NinConf, RuleNum.

output: user-associations for Uc 1. Partion(D,U, D1, D2) //partition D into DI and D2 2. LC {&lt;O,O,"&gt;, &lt;O,O,-&gt;] //initial the concept lattice 3. For each  TED^ Do //support count 4. SupNumCount(L,T) 5.  EndFor 6. For each TsD2 Do //confidence count 7. ConfNumCount(L,T) 9. RuleSetcSelectRule(L, MinConf, RuleNum.) . EndFor    . EndFor Figure2 TSCF-CL Algorithm stage, which then is used to compute the confidence of the user-association. The confidence of the user-association is SC/(SC+CC). TSCF-CL algorithm in Fig.2 returns a certain amount of user-associations that can make recommendation for the current user. The support-count sub algorithm SupNumCoun in fig.3 constructs the incremental concept lattice based on D1 in.the fmt stage, and updates SC of each element. The sub algorithm confidence-count ConfNumCoun is similar to SupNumCount, but counts on DZ, not D1. In the second stage, ConfNumCoun constructs the concept lattice based on D2, and updates the CC of each element. The sub algorithm SelectRule generates all user-associations about U from the concept lattice, and judges which one can be used to make recommendation for U, then returns them. In TSCF-CL algorithm, the following two kinds of user-associations can not be returned for the current user U: @user-associations whose confidence are less than MinConf; @user-associations whose confidence are 100% because it means the current user has shown the same interest as the common interest of the users in the condition. The detail of ConfNumCount sub algorithm and SelectRule sub algorithm are. not given here.

SubAlgorithm SupNumCount Input: a transaction T, concept lattict L 1. For element N in L (N n T # 0  ) in ascending order of 2.

3. Else meet+X(N) n T  ' 4.

5 .

6. Condset (M) +meet.

7.

8. Else SC(N) t SC(N')+l 9. EndIf EndIf 10. EndFor output: L Condset(N)'s length Do If Condset (N) ET Then SC(N) = SC(N)+l If no Condset (")=meet in L Then Insert a new element M to L.

SC(M) c SC(N)+l. CC(M)= 0.

Figure3 Sub Algorithm SupNumCount 4. TSCF-CL Performance Test . Figure1 the extended element in concept lattice 33. Incredible Elements Because TSCF-CL begins the confidence-count-stage until the support-count-stage is completed and one element of the concept lattice corresponds to one user-association about U,it is possible to avoid generating user-associations whose confidence are less than MmConf by not generating such elements whose SC/(SC+CC) are less than MmConf. We called them as incredible elements.

Assume an element N hms incredible after dealing with a transaction in the concept lattice construction. According to the incremental construction of the concept lattice, in scanning D2 SC of N will not change and CC of N will be not decreased, so SC/(SC+CC) of both the element N itself and the elements generated from N are sure to be less than MmConf. It shows that the elements generated from incredible elements are also incredible ones. TSCF-CL algorithm can reach better performance by not generating incredible elements.

Proceedings of the Third Intemational Conference on Machine Larning and Cybernetics, Shangnai, 26-29 August 2004 test, the executing process of both ASARM and TSCF-CL for 5 users are overtime and the process for other 10 users is shown in fig5 Under the same user amount, TSCF-CL runs overtime only for few users. but ASARh4 runs ovenime for many user. The performance comparison with ASARM algorithm shows TSCF-CL algorithm is faster than ASARM algorithm and reaches better time capacity.

0 ..... - mrmmeASAIu.1 ma Tnne(WC4 ;"* e...... * 7 ; p... $... . .  . .  . . . . .  . .  . . . . .  . .  . . . . .

. . . . . .  . . . .

1 . -  * .  . .  I .  . .  . .   . .  r I . .  . . .  . . .  ..: i i  . .  . -  . .  . .  . .  . +  .  . .  . .  . .  I  . .  ..  ..

. .  . .  . .  . .  . .  . .  . .  .. .. .. ..

. .  I I :  . i  . .  . ,  . .

I *  . .  . .  . .  I  . .  .. I. ?: . .  ..

c 1 Conclusion The paper proposed a user-association mining frame _ _  - - based on two-stage count called TSCF and by using concept lattice we implemented a user-association mining algorithm TSCF-CL designed for recommendation. The contributions of the paper are: f a t ,  TSCF frame not only uses the current user to constrain the rule form, but also partitions the rating table in mining process, so that the efficiency of mining user-associations is increased. Second, TSCF frame can be implemented by using existing algorithms for mining association rules. Third, TSCF-CL algorithm is implemented by using the incremental concept lanice, which can reach better time capacity.

Acknowledgements This paper is supported by NSFC of China (project number: 60373098, 60173006). '863' Project of China (project number: 2003AA118020) and Project of JiLin Province (20020303-2).

