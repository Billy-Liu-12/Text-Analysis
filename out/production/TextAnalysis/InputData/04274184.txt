Systems, Man, and Cybernetics October 8-11, 2006, Taipei, Taiwan

Abstract Mining generalized association rules has been recognized as a very important topic in data mining. Earlier work on mining generalized association rules ignores the fact that the taxonomy of items would be changed while new transactions are continuously added into the database. In our previous paper, we have proposed a method to solve this problem with uniform minimum support; however, a uniform minimum support assumption would obstruct the discovery of associations on some high value or new items that are more interesting but much less supported than general trends. In this paper, we examine this problem and propose a novel algorithm, called MMA_ITTE, which can incrementally update the discovered generalized association rules with multiple minimum supports when the taxonomy of items is evolved with incremental transactions. Experimental results show that our algorithm can maintain its performance even in large amounts of incremental transactions and high degree of taxonomy evolution, and is faster than applying the contemporary generalized association mining algorithms to the whole updated database.



I. INTRODUCTION  M ining association rules from large databases ofbusiness data, such as transaction records, is a popular topic in  the area of data mining [1][2]. An association rule is an expression of the formX=> Y, where Xand Yare sets of items.

Such a rule reveals that transactions in the database containing items in Xtend to also contain items in Y, and the probability, measured as the fraction of transactions that containX also contain Y, is called the confidence of the rule.

The support of the rule is the fraction of the transactions that contain all items in both X and Y. The problem of mining association rules is to discover all association rules that satisfy support and confidence constraints.

In many applications, there are explicit or implicit taxonomy over the items, so it may be more useful to find associations at different levels of the taxonomy than only at the primitive concept level [8][15]. For example, consider the taxonomy of items in Fig. 1, it is likely that the association rule,  Ming-Cheng Tseng is with the Institute of Infornation Engineering, I-Shou University, Kaohsiung 840, Taiwan (e-mail: clark.tseng(msa.hinet.net)  Wen-Yang Lin is with the Dept. of Comp. Sci. & Info. Eng., National University of Kaohsiung, Kaohsiung 811, Taiwan (e-mail: wylinCanuk.edu.tw)  Rong Jeng is with the Department of Information Management, I-Shou University, Kaohsiung 840, Taiwan (e-mail: reng(isu.edu.tw)  Systemax V z> HP LaserJet (sup = 20%, conf= 100%), does not hold when the minimum support is set to 30%, but the following association rule may be valid,  Desktop PC => HP LaserJet.

PC PDA HP LaserJet  / \4 / \4 Desktop PC IBM TP MITAC Mio ACER N  Sony VAIO Systemax V  Fig. 1. Example of taxonomy.

Previous work on mining generalized association rules assumed that the taxonomy are static, ignoring the fact that the taxonomy may change as time passes while new transactions are continuously added into the original database.

In our previous study, we have proposed a method to solve this problem with the uniform support constraint. However, a uniform support constraint would hinder the discovery of associations on some high value or new items that are very useful information but much less supported. Under these circumstances, how to discover the generalized association rules with multiple minimum supports under incremental transactions and taxonomy evolution effectively becomes a critical task. In this paper, we examine this problem and propose an algorithm called MMA ITTE (Maintenance of generalized Multi-supported Association rules under Incremental Transactions and Taxonomy Evolution) which reuses frequent itemsets and is capable of effectively reducing the number of candidate sets and database rescanning, and so can update the generalized association rules efficiently. Experimental results show that our algorithm is faster than applying the contemporary generalized association mining algorithms to the whole updated database.

The remaining of this paper is organized as follows. We discuss previous work in Section 2, and describe the problem in Section 3. In Section 4, we propose MMA ITTE algorithm and give an example in Section 5. In Section 6, we evaluate the performance of the proposed MMA_ITTE algorithm.

Finally, we conclude the work of this paper in Section 7

II. PREVIOUS WORK The problem of updating association rules incrementally  was first addressed by Cheung et al [4], whose work was     later be extended to incorporate the situations of deletion and modification [6]. Since then, a number of techniques have been proposed to improve the efficiency of incremental mining algorithm [9][11][14][16]. But all of them were confined to mining associations among primitive items. The problem of mining association rules in the presence of taxonomy information was first introduced in [8] and [15], independently. Cheung et al. [5] were the first to consider the problem of maintaining generalized (multi-level) association rules. Another form of association rule model with multiple minimum supports was proposed in [10]. Their method allowed users to specify different minimum supports to different items and could find rules involving both frequent and rare items. However, their model considers no taxonomy at all, and hence fails to find generalized association rules.

We then extended this problem model to that of incorporated the taxonomy of items [17]. In [7], Han and Fu explored the refinement of concept hierarchies for knowledge discovery in databases and proposed an approach for dynamic generation.

In [ 18], Tseng and Lin proposed an approach for the maintenance of generalized association rules under transaction update and taxonomy revolution with a uniform support constraint.



III. PROBLEM STATEMENT  A. Problem Description Consider the situation when new transactions in db are  added to DB and the taxonomy T is changed into a new one T*. Let ED * and ed* denote the extended version of the original database DB and incremental database db, respectively, by adding the generalized items in T* to each transaction. Further, let UE* be the updated extended database containing ED* and ed*, i.e., UE* = ED* + ed*. The problem of updating LED when new transactions db are added to DB and Tis changed into T* is equivalent to finding the set of frequent itemsets in UE*, denoted as LUE*.

For illustration of our proposed approaches, consider the original database with item taxonomy in Fig. 2. Suppose that primitive item "Sony VAIO" and generalized item "PC" are deleted from the "PC" group, and new primitive item "Gateway GE " is inserted into its top generalized item "MC".

Fig. 3 shows the new item taxonomy and an incremental database to be updated to the original database.

B. Situationsfor Taxonomy Evolution According to our observation [18], there are four basic  types of item updates that will cause taxonomy evolution: item insertion, item deletion, item renaming and item reclassification.

Type 1: Item Insertion. The strategies to handle this type  of update operation are different, depending on whether an inserted item is primitive or generalized. When the new inserted item is primitive, we do not have to process it until an incremental database update containing that item indeed  occurs. This is because the new item does not appear in the original database, neither in the discovered associations.

However, if the new item is a generalization, then the insertion will affect the discovered associations since a new generalization often incurs some item reclassification.

(37) PC (25) PDA HIP LaserJet (40)  %//\ /\ (22) Desktop PC IBM TP MITAC Mio ACER N  (20) (15) (15) % ( ): ms  (15) Sony VAIO Systemax V (20)  Original Database (DB)  , - I  4 Sony VAIO, IBM TP 5 IBM TP, HP LaserJet 6 Systemax V 7 HP LaserJet 8 HP LaserJet  Fig. 2. Example of original database DB with old item taxonomy.

(22) Desktop PC  Gateway GE Systemax V  (10) (20)  (30) MC HP LaserJet (40)  IBM TP PDA (25) ( ):Ms  (20) / \  (15) MITAC Mio ACERN (15)  Incremental Database ( db) TID Items Purchased 9 Gateway GE, HP LaserJet 10 HP LaserJet  Fig. 3. Example of incremental database db with new item taxonomy.

Type 2: Item Deletion. Unlike the case of item insertion, the deletion of a primitive item from the taxonomy would incur inconsistence problem. In other words, if there is no transaction update to delete the occurrence of that item, then the refined item taxonomy will not conform to the updated database. To simplify the problem, we assume that outdated items will not be of interest, and the update ofthe taxonomy is always consistent with the transaction update to the database.

Additionally, the removal of a generalization may also lead to item reclassification. So we always have to deal with the situation caused by item deletion.

Type 3: Item Renaming. When items are renamed, we do  not have to process the database; we just replace the frequent itemsets with new names.

Type 4: Item Reclassification. This is the most profound  operation among the four types of taxonomy evolutions.

Once an item, primitive or generalized, is reclassified into another category, all of its generalized items in the old and new taxonomy are affected.

TID Items Purchased 1 Systemax V 2 IBM TP, HP LaserJet  Systemax V, MITAC Mio, ACER N, HP LaserJet3

IV. THE PROPOSED METHOD  A. Algorithm Basics In order to find generalized multi-supported association  rules, now we introduce the following notation to facilitate the discussion: I, J denote the set of primitive items and the set of generalized items in T, respectively, and I*, J* represent the counterparts in T*.

Definition 1. Let ms(a) denote the minimum support of an item a in Iu J. An itemset A = {al, a2, ..., ak}, where a Ea Iu J, isfrequent if the support ofA is larger than or equal to the lowest value ofminimum support of items in A, i.e., sup(A) .

min ai EA MS(ai).

Therefore, the frequent itemset must be no less than the lowest value of minimum support of items in the itemset. In T*, we use I* u J* instead of I u J to generate association rules.

Let a k-itemset denote an itemset with k items. The basic process of our mining multi-supported association rules under incremental transaction update and taxonomy evolution follows the level-wise approach used by most Apriori-like algorithms. However, the well-known Apriori pruning technique based on the concept of downward closure does not work for multiple support specification. To solve this problem, we have adopted the sorted closure property [10] in our previous work for maintenance of generalized association rules with multiple minimum supports [17].

Hereafter, to distinguish from the traditional itemset, a sorted k-itemset denoted as (a,, a2, ..., ak) is used.

Lemma 1. If a sorted k-itemset (a,, a2, ..., ak), fork .2 and  ms(al) < ms(a2) < ... < ms(ak), is frequent, then all of its sorted subsets with k-1 items are frequent, except the subset (a2, a3, ..., ak).

Lemma 2. For k= 2, the procedure apriori-gen(LI) fails to  generate all candidate 2-itemsets in C2.

Therefore, generating all candidate 2-itemsets C2 is from  the frontier set F [ 17].

Lemma 3. For k > 3, any k-itemset A = (a,, a2, ..., ak)  generated by procedure apriori-gen(Lk-1) can be pruned if there exists one (k-1) subset ofA, say (aj1, ai2, ..., aik_l), such that (ai,, ai2, ..., aik I) o Lk1, and ail = a, or ms(ail) = ms(ai2).

For more details, please refer to [17].

In mining generalized association rules, a straightforward  method to update the discovered generalized frequent itemsets would be to run any of the algorithms for finding generalized frequent itemsets, such as MMS Cumulate and MMS_Stratify [17], on the updated extended database UE*.

This simple way, however, does not utilize the discovered frequent itemsets and ignores the fact that scanning the whole updated database would be avoided. Instead, a better approach is to, within the set of discovered frequent itemsets LED, differentiate the itemsets that are unaffected with respect to the taxonomy evolution from the others, and then utilize them to avoid unnecessary computation in the course of  incremental update. To this end, we first have to identify the unaffected items whose supports does not change with respect to the taxonomy evolution, and then use them to identify the unaffected itemsets.

Definition 2. An item in T is called an unaffected item if its support does not change with respect to the taxonomy evolution.

Lemma 4. Consider a primitive item a in TUT*. Then  (a) countED*(a) = countED(a) if a a I rnJ*, and (b) countED*(a) = 0 if a I*- I, where countED*(a) and countED(a) denote the support count of item a in ED * and ED, respectively.

Lemma 5. Consider a generalized item g in Th. Then  countED*(g) = countED(g) if desr*(g) = des7g), where desT*(g) and des1g) denote the sets of descendant primitive items ofg in T* and T, respectively.

In summary, Lemmas 4 and 5 state that an item is unaffected by the taxonomy evolution if it is a primitive item before and after the taxonomy evolution, or it is a generalized item whose descendant set of primitive items remains the same.

Definition 3. An itemset A in ED* is called an unaffected itemset if its support does not change with respect to the taxonomy evolution.

Lemma 6. Consider an itemset A in ED*. Then  (a) countED*(A) = countED(A) if A contains unaffected items only;  (b) countuE*(A) = 0 if A contains at least one item a, for a GI -1*.

Now that we have clarified how to identify the unaffected itemsets, we will further show how to utilize this information to alleviate the overhead in updating the supports of itemsets.

Consider a candidate itemset A generated during the mining process. We observe that there are five different cases for the support count ofA in the whole updated database UE*.

(1) If A is an unaffected itemset and is frequent in ED and  ed*, then it is also frequent in the updated extended database UE*.

(2) IfA is an unaffected itemset and is infrequent in ED and ed*, then it is also infrequent in UE*.

(3) IfA is an unaffected itemset and is in ED but infrequent in ed*, then a simple calculation can determine whether A is frequent or not in UE*.

(4) If A is an unaffected infrequent itemset in ED but is frequent in ed*, then it is an undetermined itemset in UE*, i.e., it may be either frequent or infrequent.

(5) If A is an affected frequent itemset and is frequent or infrequent in bothED and ed*, then it is an undetermined itemset in UE*.

These five cases are summarized in Table 1. Note that only Cases 4 and 5 require an additional scan ofED* to determine the support count ofA in UE*. In Case 4, after scanning ed* and comparing with ms(A[1]), where ms(A[1]) denotes the smallest ms(ai) in ai eA, ifA is frequent in ed*, A may become frequent in UE*. Then we need to rescan ED* to determine     the support counts of A. For Case 5, since A is an affected itemset, its support count could be changed in ED *. Therefore, we need to further scan ED* to decide whether it is frequent or not.

For Cases 1 to 3, there is no need to further scan ED* to determine the support count of an itemset A. That is, we have utilized the information ofunaffected itemsets and discovered frequent itemsets to avoid such a database scan. Furthermore, the identification of itemsets satisfying Case 2 provides another opportunity for candidate pruning.

TABLE 1. FIVE CASES ARISING FROM THE UPDATED EXTENDED INCREMENTAL DATABASE AND TAXONOMY EVOLUTION.

T-> T* LED ed* UE* Action Case  freq. freq. no 1 infreq. ? compare sup uE*(A) with ms(A[ 1]) 3  unaffected - _____ - ______________ freq. ? scan ED* 4  infreq. infreq. no 2  affected E, S freq., infreq. ? scan ED* 5  Input: (1) DB: original database; (2) db: incremental database; (3) ms: multiple minimum support setting; (4) T: old item taxonomy; (5) T*: new item taxonomy; (6) LD: set of original frequent itemsets.

Output: LUE set ofnew frequent itemsets with respect to T* and ed*.

Steps: 1. Identify affected items; 2. k= 1; 3.

4.

5.

6.

7.

8.

9.

10.

11.

12.

13.

repeat if k =1 then generate Cl from T*; else if k =2 then generate C2 from the frontier set F;  else Ck= apriori-gen( Lk-E ); Delete any candidate in Ck that consists of an item and its ancestor; Load original frequent k-itemsets LED;  k  Divide Ck into three subsets: Cx, Cy and Cz; for each AE Cx do /* Cases I & 3 */  Assign countED. (A) COUn,tEO(A); Scan ed* to count counted (A) for each itemset A in Ck;  Led= {A IAcCk and sup d.(A) > ms(A[l])};  B. Algorithm MMA_ITTE Based on the aforementioned concepts, we propose an  algorithm, called MMA ITTE, to accomplish this task. The main process of the algorithm is presented as follows.

First, let candidate 1-itemsets Cl be the set of items in the new item taxonomy T*, i.e., all items in T* are candidate 1-itemsets. Next, we identify the affected items. Then load the original frequent 1-itemsets LED and divide C1 into three independent subsets: Cx, Cy and Cz, where Cx consists of unaffected k-itemsets in LED, and Cy comprises unaffected  k-itemsets not in LED, and Cz contains affected k -itemsets.

Cx is used for Cases 1 and 3, Cy for Cases 2 and 4, and Cz for Case 5. Next, scan ed* to get the support counts of itemsets in C1. For each 1-itemset in Cx, accumulate its support count in ed* and ED*, and compare supports of those 1-itemsets satisfying with Case 3 with ms and get frequent 1-itemsets for  LijE For the set Cy, only frequent 1-itemsets in ed* need to rescan ED * due to Case 4, and after getting the support counts in ED*, accumulate the support counts for each 1-itemset in ed* and ED *, compare each 1 -itemset supports with ms(A [ 1 ]) and get frequent 1-itemsets for LuE . For Cz, scan ed* and ED*, compare its support of each 1-itemset with ms(A[1]), and get frequent 1-itemsets for LJE After getting all frequent 1-itemsets in UE*, the algorithm continues to generate candidate 2-itemsets C2 from the frontier set F and invokes to generate for candidate k-itemsets Ck from LuE' for k > 3 and processes the same procedure for generating LluE until no frequent k-itemsets LuE is created. The MMA ITTE algorithm is shown in Fig. 4.

14- Delete any candidate A from Cy ifA X Ltd; /* Case 2 */ 15. Scan ED * to count countED. (A) for each itemset A in Cy and Cz; /*  Cases 4 & 5 */ 16. Calculate countuE. (A) = countED. (A) + counted' (A) for each  itemset A in Ck; 17. LLk" {A IA eCk and supUE.(A) ms(A[])}; 18. until Lk 0 19. LUE = UkLE;  Fig. 4. Algorithm MMA_ITTE.



V. AN EXAMPLE OFMMA ITTE ALGORITHM  Consider the example in Fig. 2 and 3. To simplify the illustration, we use item "A" to stand for "PC", "B" for "Desktop PC", "C" for "Sony VAIO", "D" for "IBM TP", "E" for "Systemax V", "F" for "PDA", "G" for "MITAC Mio", "H" for "ACER N", "I" for "HP LaserJet", "J" for "MC", and "K" for "Gateway GE " in the item taxonomy. The resulting figure is shown in Fig. 5.

First, let candidate 1-itemsets Cl be the set of items in the new item taxonomy T*, i.e., all items in T* are candidate 1-itemsets. Second, load the original frequent 1-itemsets LED and divide C1 into three subsets: Cx, Cy and Cz, where Cx {D, E, I}, Cy= {F, G, H} and Cz= {B, K, J}. Next, scan ed* for Cl and scan ED * for Cy and Cz. Calculate the support count of each 1-itemset in C1, and generate the frontier set F = {K, G, H, D, E, B, F, J, 1}. After comparing the supports of each 1-itemset with the corresponding ms, the set of new  frequent 1-itemsets LIJE is {B, D, E, I, J, K}.

After generating LuE , we use the frontier set F to generate candidate 2-itemsets C2, obtaining C2 = {KG, KH, KD, KE, KF, KJ, KI, DE, DB, DI, EJ, El, BJ, BI, JI}. After loading the original frequent 2-itemsets L4ED , divide C2 into     three subsets: Cx- {DJ}, Cy= {DE, EI} and Cz= {KG, KH, KD, KE, KF, KJ, KI, DB, EJ, BJ, BI, Jl}. Note that {KG}, {KH}, {KD}, {KE}, {KF}, {KJ} and {KI} are not scanned in ED * since they contain a new item "K" that does not exist in ED *; {KB}, {DJ} and {EB} are deleted due to the existence of item-ancestor relationship. Next, scan ed* for C2 and detenrine the frequent itemsets in ed*. According to Case 2, prune {DE} in Cy since it is infrequent in ed*. Then scan ED* for Cy and Cz. Calculate the support count for each 2-itemset in C2 and generate -UE= {DJ, JI, KI}. Finally, we use  L UE to generate candidate 3-itemsets C3 and apply the same  procedure to generate Lf Finally, we obtain empty set.

(37) A (.25) F I 140)  (22)B (20)D G(1S) H(15)  (15) C (20) E  Original Extended Database (ED)  TID   Primitive Items  E D, I  E, G, H, I C, D D, I E  Generalized Items  A, B A  A, B, F A, B A  A, B  (22) B (30) J I (40)  (io)K (20) E D (20) F (25)  e):ms (15)G H (15)  Updated Extended Database ( ED*)  TID   Primitive Items  E D, I  E, G, H, I C, D D,I  BE I|  Generalized Items  B J  B, F, J J J B  Original Extended Incremental Updated Extended Incremental Database (eed) Database (ed*)  TID |Primitive |Generalized TID Primitive Generalized] Items ItemsItm Ies  | T9[K<I| |jj|9 |K jI |jBj l  Fig. 5. Example of incremental database and taxonomy evolution.



VI. EXPERIMENTS  In order to examine the performance of MMA ITTE, we conduct experiments to compare its performance with that of applying generalized association mining algorithms, including MMS Cumulate and MMS_Stratify, to the whole updated database. Synthetic datasets generated by the IBM data generator [2] were used in the experiments. The parameter settings for synthetic data are shown in Table 2.

The comparisons were evaluated from different aspects: minimum support, incremental transaction size and the percentage of affected items, i.e., the ratio of affected items to total items. We also adopted two different support counting strategies for the implementation of each algorithm: one with the horizontal counting [1][2][3][12] and the other with the vertical intersection counting [13][19]. For the horizontal counting, the algorithms are denoted as MMS Cumulate(H), MMS_Stratify(H) and MMA_ITTE (H) while for the vertical intersection counting, the algorithms are denoted as MMS_Cumulate(V), MMS_Stratify(V) and MMA_ITTE(V).

All experiments were performed on an Intel Pentium-IV 2.80GHz with 2GB RAM, running on Windows 2000.

TABLE 2. PARAMETER SETTINGS.

Parameter Default value lDBI Number of original transactions 177,783 dhl Number of incremental transactions 40,000 Iti - Average size of transactions 16 N Number of items 231 R Number of groups 30 I Number of levels 3 F Fanout 5  Varying Minimum Support: We first compare the performance of the three algorithms with varying minimum supports at 40,000 incremental transactions with constant affected item percent 1.4%. We use the following formula [10] to generate multiple minimum supports for each item a:  ms(a)= suPDB(a), axsupDB(a)>k k, otherwise  where k= 0.4.

The experimental results are shown in Fig. 6. As shown in  the figure, MMA ITTE(V) performs 45% better than MMS_Cumulate(V) at a= 0.2. Besides, all vertical counting based algorithms are better than their horizontal counterparts.

At a = 0.6, the number of frequent itemsets becomes smaller; therefore, that makes almost the same performance.

Q) C)  C)  B 4B   log   _--MMS Cumulate(V) --MMS Cumulate(H)j I-*- MMS Stranfy(V) :1- MMS Stratify(H) -- MMR ITTE(V) I -MMR ITTE(H)  0.1 0.2 0.3 0.4 0.5 0.6  a  Fig. 6. Performance comparison with different a for ms.

Varying Transaction Sizes: We then compare the three algorithms under varying transaction sizes with a = 0.3 for ms and constant affected item percent of 1.4%. As the results shown in Fig. 7, the running time of all algorithms increases in proportional to the incremental size. Furthermore, MMA ITTE(H) outperforms MMS_Cumulate(H) and MMS Stratify(H) significantly, and similarly MMA_ITTE(V) beats MMS_Cumulate(V) and MMS Stratify(V).

Varying Affected Item Percent: We finally compare the three algorithms under varying affected item percent with a = 0.3 for ms and 40,000 incremental transactions. The     affected items are randomly chosen, to undergo reclassification. The results are depicted in Fig. 8. As shown in the figure, the advantage of our MMA ITTE algorithm decreases as the affected item percent increases because the number of candidate sets required scanning the original database increase.

10000 -  10ooo  -'---MMS Cumulate(V) -_----MMS Cumulate(H) --MMS Stratify(V) MMS Stratify(H)  IK. MMR ITTE(V) I- MMR ITTE(H)   ,'A log  .E 100 a  2 4 6 8 10 12 14 16  Number of incremental transctions (x 10,000)  Fig. 7. Performance comparison with different incremental sizes.

Q c.) (A  a)E  - rw -   log = A -_ I  I 0 _-MMS Cumulate(V) -&.- MMS Stratify(V) --MMR ITTE(V)  MMS Cumulate(H)| i MMS Stratify(H) I MMR ITTE(H)  0 2 4 6 8 10 12  Affected item percent %  Fig. 8. Performance comparison with different affected item percent.



VII. CONCLUSIONS  In this paper, we have investigated the problem ofupdating generalized association rules with non-uniform minimum supports when new transactions are inserted into the database, and the taxonomy of items is evolved over time. We also have presented a novel algorithm, MMA ITTE, for updating generalized multi-supported frequent itemsets. Experimental results on synthetic data show that the MMA_ITTE algorithm is more efficient than applying the contemporary generalized association mining algorithms to the whole updated database.

In the future, we will extend the problem of updating generalized association rule to a more general model to solve the problem that the multiple minimum supports are updated.

[2] R. Agrawal, and R. Srikant, "Fast Algorithms for Mining Association Rules," in Proc. 20th Intl. Conf. Very Large Data Bases, 1994, pp.

487-499.

[3] S. Brin, R. Motwani, J.D. Ullman and S. Tsur, "Dynamic Itemset Counting and Implication Rules for Market Basket Data," SIGMOD Record, Vol. 26, 1997, pp..255-264.

[4] D.W. Cheung, J. Han, V.T. Ng, and C.Y. Wong, "Maintenance of Discovered Association Rules in Large Databases: An Incremental Update Technique," in Proc. 1996 Int. Conf Data Engineering, 1996, pp. 106-114.

[5] D.W. Cheung, V.T. Ng and B.W. Tam, "Maintenance of Discovered Knowledge: A case in Multi-level Association Rules," in Proc. 1996 Int.

Conf Knowledge Discovery and Data Mining, 1996, pp. 307-310.

[6] D.W. Cheung, S.D. Lee and B. Kao, "A General Incremental Technique for Maintaining Discovered Association Rules," in Proc. DASFAA '97, 1997, pp. 185-194.

[7] J. Han and Y. Fu, "Dynamic Generation and Refinement of Concept Hierarchies for Knowledge Discovery in Databases," in Proc. AAAI '94 Workshop on Knowledge Discovery in Databases, 1994, pp. 157-168.

[8] J. Han and Y. Fu, "Discovery of Multiple-level Association Rules from Large Databases," in Proc. 21st Intl. Conf: Very Large Data Bases, Zurich, Switzerland, 1995, pp. 420-431.

[9] T.P. Hong, C.Y. Wang and Y.H. Tao, "Incremental Data Mining Based on Two Support Thresholds," in Proc. 4 Int. Conf: Knowledge-Based Intelligent Engineering Systems and Allied Technologies, 2000, pp.

436-439.

[10] B. Liu, W. Hsu and Y. Ma, "Mining Association Rules with Multiple Minimum Supports," in Proc. 5th Intl. Conf: Knowledge Discovery and Data Mining, 1999, pp. 337-341.

[11] K.K. Ng and W. Lam, "Updating of Association Rules Dynamically," in Proc. 1999 Int. Symp. Database Applications in Non-Traditional Environments, 2000, pp. 84-91.

[12] J.S. Park, M.S. Chen and P.S. Yu, "An Effective Hash-based Algorithm for Mining Association Rules," in Proc. 1995ACMSIGMOD Intl. Conf on Management ofData, San Jose, CA, USA, 1995, pp. 175-186.

[13] A. Savasere, E. Omiecinski and S. Navathe, "An Efficient Algorithm for Mining Association Rules in Large Databases," in Proc. 21st Intl.

Conf Very Large Data Bases, 1995, pp. 432-444.

[14] N.L. Sarda and N.V. Srinivas, "An Adaptive Algorithm for Incremental Mining of Association Rules," in Proc. 9th Int. Workshop on Database and Expert Systems Applications, 1998, pp. 240-245.

[15] R. Srikant and R. Agrawal, "Mining Generalized Association Rules," in Proc. 21st Int. Conf: Very Large Data Bases, 1995, pp. 407-419.

[16] S. Thomas, S. Bodagala, K. Isabti and S. Ranka, "An Efficient Algorithm for the Incremental Updation of Association Rules in Large Databases," in Proc. 3rd Int. Conf Knowledge Discovery and Data Mining, 1997, pp. 263-266.

[17] M.C. Tseng and W.Y. Lin, "Maintenance of Generalized Association Rules with Multiple Minimum Supports," Intelligent Data Analysis, Vol. 8, 2004, pp. 417-436.

[18] M.C. Tseng, W.Y. Lin and R. Jeng, "Maintenance of Generalized Association Rules under Transaction Update and Taxonomy Evolution," in Proc. Intl. Conf: on Data Warehousing and Knowledge Discovery, 2005, pp. 336 -345.

[19] M.J. Zaki, "Scalable Algorithms for Association Mining," IEEE Transactions on Knowledge and Data Engineering, Vol. 12, No. 2, 2000, pp. 372-390.

