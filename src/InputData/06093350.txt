An effective algorithm for mining association rules based on   Imperialist Competitive Algorithm

Abstract?Association rule mining is one of the most applicable techniques in data mining, which includes two stages. The first is to find the frequent itemsets; the second is to use them to generate association rules. A lot of algorithms have been introduced for discovering these rules. Most of the previous algorithms mine occurrence rules, which are not interesting and readable for the users. In this paper, we propose a new efficient algorithm for exploring high-quality association rules by improving the imperialist competitive algorithm. The proposed method mine interesting and understandable association rules without relying upon the minimum support and the minimum confidence thresholds in only single run. The algorithm is evaluated with several experiments, and the results indicate the efficiency of our method.

Association Rules;  Imperialist Competitive Algorithm; Evolutionary Algorithm.



I.  INTRODUCTION Association rule (AR) mining is one of the most  important tasks in data mining and indicates the relationships between attributes of records in a database [6]. Usually, ARs are shown in the form of A=>C in which A is antecedent itemsets of the rule and C is consequent itemset of the rule.

Two measures of support and confidence are introduced for evaluating ARs. These are calculated from (1) and (2) equations, respectively [6].

TotalRcordCACASupport /)()( ?==>             (1)  )(/)()( ASUPCASUPCAConfidence ?==>         (2)  So far, many algorithms proposed for discovering ARs are based on Agrawal, Apriori [1], SETM [7], AIS [1], DIC [4] and other methods. However, these algorithms have their limitations. They have to mine ARs in two stages separately.

In these methods, rules with high occurrence in database are considered as the best rules, whereas most of these rules can easily be predicted by the users. Therefore, they are not interesting. Also, they mine occurrence rules with a large number of attributes, which are not understandable for the user. Hence, the user will never use them. In these methods, two parameters, minimum support and minimum confidence thresholds, are always determined by the decision-maker or through trial-and-error; and hence, these algorithms lack both objectiveness and efficiency [7].

In recent years, in addition to common methods, some evolutionary algorithms have been used with multi-objective functions. Evolutionary algorithms such as genetic, ant  colony, simulated annealing and particle swarm optimization have been used for mining ARs. The idea of using genetic algorithm for extracting frequent itmesets has been applied [8]. In [11], has been extracted ARs based on the genetic algorithm. In [3], a method of exploring frequent itemsets has been proposed by combining PSO with Ant algorithm.

But it can discover only frequent itemsets such as the GAR algorithm in [8]. In [9] simulated annealing algorithm has been used to develop a multi-objective rule mining method.

But there is no study this uses imperialist competitive algorithm (ICA) [2] for mining ARs. In this paper, we proposed an effective algorithm based on the ICA algorithm for discovering the best rules according to predetermined objectives. This method not requires to appointment minimum support and the minimum confidence. Also, it extracts ARs in once executed while previous methods mine ARs in two stages.

The rest of this paper is organized as follows. Section II briefly introduces the imperialist competitive algorithm, Section III describes the proposed algorithms in detail, then the experiments and analyzing the results will be discussed in Section IV. Finally, conclusion and future works will be presented in Section V.



II. IMPERIALIST COMPETITIVE ALGORITHM (ICA) Imperialist competitive algorithm is a socio-politically  motivated global search strategy that has recently been introduced for solving different optimization problems [2].

ICA starts with an initial population. Each individual of the population is called a country in which some having the least cost are establish as imperialist and rest form the colonies of these imperialists. The division of all the colonies of initial countries is based upon the power of the imperialist. The colonies in each of the empire start moving towards their imperialist, based on assimilation policy. The total power of an empire is defined by the imperialist?s power and percentage of the colonies? power. Then the imperialist competition begins. All empires try to take the colonies of other empires under their control. The imperialistic competition will gradually result in an increase in the power of powerful empires and a decrease in the power of weaker empires. This results in the collapse of weak empires. Fig. 1 shows a general schema of this part of the process.

Figure 1.  The more powerful an empire is, the more likely it will possess  the weakest colony of the weakest empire [2].

Finally, these processes will successfully cause all the countries to converge to a situation in which there exist only one empire in the world and all the other countries are colonies of that empire and they have the same position and power as the imperialist.



III. MINICA ALGORITHM In this work, imperialist competitive algorithm which is  one of the new evolutionary algorithms is applied to explore interesting association rules from transactional databases.

This evolutionary algorithm which has been introduced as a method based on minimum value-finding, in this paper with minimal changes, was changed into a searcher of maximum value.

Figure 2.  MINICA algorithm.

The following of this section are some important parts of the proposed algorithm in this paper, which are explained: countries encoding, assimilation policy and deviational behaviors, fitness function, and finally the last part of the section explains the pseudo-code of the algorithm proposed in this study which we called MINICA. Also, Fig. 2 shows the pseudo-code of this algorithm.

A. countries encoding In this paper, each country represents a rule and each  rule contains of a series of decision variables which represent the status of every item in the rule. According to Fig. 3 in the proposed algorithm, every country has n decision variables in lieu of n items in any dataset.

Figure 3.  Countries encoding.

This means that the ith variable which is known as ESi indicates the status of ith item and can take values between 0 and 1. In this way, if 0.00  ESi 0.33, the ith attribute is in the antecedent of the rule and if 0.33<ESi 0.66, this attribute is in the consequence of the rule and if 0.66<ESi 1, it means the lack of ith attribute in the rule.

B. Modeling the assimilation policy and the deviational behaviors  Moving colonies toward the relevant imperialist is motivation of the assimilation policy. This means that one of the weaker individuals can move toward the better individual. This causes the colonies to be like the relevant imperialist. In the proposed method for modeling the assimilation policy for mining ARs problem, randomly some attributes of each imperialist is copied in to relevant colonies that is explained in Fig. 4. For each selected attributes in the imperialist, if it has been in the antecedence part of the rule, now it must be created a real random number between 0 and 0.33 for the same attribute in the colony. Then, this random number is replacement in to related attribute value.

Figure 4.  Assimilation policy.

Similarly, if selected attributes in the imperialist has been in the consequence part of the rule, now it must be created a real random number between 0.33 and 0.66 for the same attribute in the colony and if it has not been in the rule, now it must be created a real random number between 0.66 and 1 for the same attribute in the colony.

Moreover, the imperialist were seriously following the assimilation policy, the events didn?t happen according to their policy. Here, some colonies of an empire have deviated. We model colony deviation in the following manner: for each colony of an empire, a real random number is created. If the colony has the probability of being selected, the position of some attributes in the rule is changed, which has a great effect on the support, confidence and fitness value of that rule. This is done with the aim of moving the position of empires colonies to the global optimized solution. It should be noticed that in all procedures of the algorithm, after any changes in the dimensions of any individual in the population, its rule validity will be measured. That rule which has at least one attribute in the antecedent of the rule and one in the consequence of the rule is valid.

C. Fitness function The fitness function provided in this study is in (3):    MaxField idNumberFiel  D CASup  CSup CASup  ASup CASupifit  )(  ] ||  )(1].[ )(  )(].[ )(  )([)(    ?  ? +????= (3)  Since the mining association rule is a task that extracts some hidden information, it must discover those rules that have a comparatively less occurrence in the entire database which are more interesting for the users; discovering such rules is more difficult. For classification rules, measure like information gain, can be useful. But it is not efficient for evaluating the ARs. Therefore, interestingness measure in [5] is used in the fitness function according to the first parameter. In this parameter |D| is the total number of records in the database. This relation has three parts: [Sup(A?C)/Sup(A)] indicates the probability of creating the rule depending on the antecedent part; [Sup(A?C)/Sup(C)] shows the probability of creating rule depending on the antecedent part. In fact most of these are interesting rules in which the rate of acquired information is approximately the same in both antecedent and consequent parts of the rule. In this parameter the support count of the rule antecedent and the support count of the rule consequent are used. In the third part of this parameter, those rules which have a very high support count and high frequency will be less interesting, because such rules are easily predictable by the users. The second parameter is used for number of attributes in rule and it rewards the shorter rules with a smaller number of attributes. Numberfield(i) returns the number of attributes that exist in country i. This term is to lead to  shorter rules. In result, readability and comprehensibility of rules that are important in data mining are increased. Larger rules are more likely to contain redundant information.

It should be noted that ?1 and ?2 will be specified by the percent of user interests and one might increase or decrease the effects of parameters of the fitness function. It means that they do not need to assign for each database in spite of some thresholds such as minimum support and minimum confidence.

D. Description of MINICA algorithm As it was shown in Fig. 2, the algorithm is run as times  as MaxRun. Moreover, each run includes a number of generations. At the beginning of the algorithm, the DiscoveredBestRules set is empty. At the first iteration of algorithm, each country is initialized randomly as a rule.

Then, it selects nIMP of the best countries as imperialists. In such a way, the initial empires are created. The colonies in each of the empire start to move toward their imperialist based on assimilation policy. But some colonies show behaviors contrary to what the imperialist has expected according to section III part B. Then, if the fitness of an empire?s best colony is more than its imperialist, their positions will be exchanged by ExchangePosition() function. Then, the empire, with the most likelihood gives the weakest colony of the weakest empires. If an empire loses all of its colonies, it will collapse and its imperialist will, as a colony, be allocated to the winner empire in the previous step. In such a way, collapse mechanism is done. If the number of empires in a generation becomes 1, the algorithm will be stopped and this procedure will be repeated according to the MaxGen threshold.



IV. IMPLEMENTATION AND EXPERIMENTAL RESULTS MINICA algorithm was implemented and executed on a  PC with Intel Dual-Core 2.1 GHz operator on a 2GB Ram.

The setting of the used parameters is shown in Table I.

Weighted coefficients ?1 and ?2 that have been used in fitness function were selected as 2 and 0.2, respectively. Be reminded these coefficients are specified by the percent of user interests. Hence, they do not need to re-initialize for each database.

TABLE I.  USED PARAMETER VALUES FOR MINICA.

Our method was executed and evaluated on four real  datasets: Balance scale, Nursery, Car Evaluation, Basket- Market. For doing examinations we used the basket-market dataset existing in Clementine 12.0 tool [10] and three datasets in UCI at http://www.ics.uci.edu/~mlearn. The specifications of datasets used are given in Table II. All attributes in datasets are categorical except Basket-Market     dataset; therefore we converted them into the Boolean datasets. It means that every attribute with any amount is considered as an item. The specifications of datasets used from UCI.

TABLE II.  THE SPECIFICATIONS OF DATASETS.

The basket-market dataset includes 11 binary attributes and it has the least attributes in this work.  Nursery dataset has the most records over than 10000 examples and also, it has the more attributes than the rest of the dataset. Fig. 5 shows a demonstration of the results gained in from our own tool on the basket-market dataset.

Figure 5.  A demonstration of the results of performing MINICA on the  basket-market dataset.

In the proposed method, we generalized the ICA for mining ARs problem. According to the section III part B, we extended the modeling of the assimilation policy and the deviational behavior of colonies in the ICA for this purpose.

Figures 6 and 7 illustrate the MINICA convergence on two of the datasets. This experiment was done with 50 replications. So, we calculated the average of the results. In these figures, the lines show the fitness of the best imperialist,  lines show the fitness average of all imperialist and  lines show the fitness of the worst imperialists in each generation. As it is seen, the proposed method has well performance with least error. Also the  difference between the best and worst fitness average in figures is appropriate.

Figure 6.  Convergence of the algorithm on the Car Evaluation dataset.

Figure 7.  Convergence of the algorithm on the Nursery dataset.

The next experiments are evaluating the efficiency and usefulness of the algorithm provided in this study.

Therefore, we compare it with the method of mining association rules based on the genetic algorithm in [5].

TABLE III.  USED PARAMETER VALUES FOR GENETIC ALGORITHM IN [5].

The initial setting of this algorithm?s parameters is given in Table III.

Figure 8.  Convergence rate on the Car Evaluation dataset.

Figures 8 and 9 depict the convergence of the MINICA algorithm in compared with the proposed algorithm in [5].

A cording to these figures, the proposed algorithm based on the ICA has better performance with least error with respect to the algorithm based on the GA for mining ARs problem.

Also, it able to reaches the optimal solution and it converges faster. But it has more computations. In the ICA, individuals have more interacted with each other and thus the algorithm is more likely to discover global solution.

Figure 9.  Convergence rate on the Nursery dataset.

The last test results in this paper have shown in Table IV, which is about the comparison of mean results obtained from MINICA and the genetic algorithm proposed in [5] with our fitness function. The mean number of best different mined rule, the mean number of attributes contained in the rules and the mean of the support, confidence and cosine value of these rules are shown in this table. The cosine measure can be used for evaluating the interestingness of the ARs. According to this table, the proposed algorithm which is based on the imperialist competitive algorithm has better results compared to the association rules mining method in [5]. MINICA discovered rules with appropriate support and  confidence value compared to proposed method based on GA. In addition the user?s comprehension of these rules and the rules interestingness for the user are acceptable; also the number of attributes obtained from this method is smaller.

As mentioned, larger rules are more likely to contain redundant information. The results of all experiments in this work means that the algorithm of mining association rules based on the ICA is more capable of discovering global solutions in comparison with the mining ARs based on the genetic algorithm.



V. CONCLUSION AND FUTURE WORKS In this paper, an effective algorithm based on ICA has  been proposed to explore interesting and readable ARs that called MINICA. We improved modeling the assimilation policy and the deviational behaviors in ICA for problem of mining ARs. Then, we have carried out several tests to evaluate our method behavior in different real datasets. The results show the appropriate success of this method in comparison with the method of mining rules by the use of the genetic algorithm. Also, our method is more capable of discovering global solutions. Contrary to the techniques used as usual, comprehensible and interesting ARs have directly been mined without generating frequent itemsets and without relying upon the minimum support and the minimum confidence thresholds which are hard to determine for each database. Moreover, this method is very flexible on changing fitness function, so user can define any normal objective in fitness function with support, confidence and etc and obtains his/her interesting rules.

The proposed method can able to mine ARs from transactional datasets. So, generalization of the MINICA algorithm is suggested for mining numerical and categorical rules as a future works. Moreover, considering that only positive rules discovered in this method, discovering both positive and negative rules is suggested.

TABLE IV.  COMPARISONS OF THE RESULTS WITH THE PROPOSED METHOD IN [5].

