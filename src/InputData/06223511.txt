

Abstract?One important issue in the sequential pattern mining is to discover frequent sequential patterns in a sequence database.

The order of times is the focus of the previous works. However, there is seldom discussion on the time interval between successive items in patterns before. With the time interval to make decision, sequential pattern is better than which with the order of items. In this paper, we propose an algorithm called integrated sequential pattern mining with fuzzy time intervals (ISPFTI). The main idea of ISPFTI algorithm is to use the a priori-like method to mine the frequent sequential patterns of sequence database and use fuzzy theory to mine the time interval between frequent sequences.

Firstly, find the candidate sequential patterns.  Then, the frequent sequential patterns are found with the minimum fuzzy support. In the step of finding frequent sequential patterns, use the fuzzy number to find each time cluster by computing its fuzzy support. And the results are the frequent fuzzy time sequential patterns. Finally, the experimental result verifies that result of our proposed ISPFTI algorithm performs the excellence of which only with the fuzzy sequential patterns mining or fixed time interval.

Keywords-Fuzzy number; Sequential Pattern; Itemsets; Minimum Suppor; Time Interval

I.  INTRODUCTION There are many important implementation issues  associated with data mining, such as Human interaction, over- fitting, outliers, interpretation of results, visualization of results, etc. The sequential pattern mining is one of the most important ones. Sequential pattern mining is to mine the frequently occurred patterns related to the order of items in a sequence database. Up to now, many sequential pattern mining algorithms have been proposed [1, 2,3,4, 5, 6, 7]. Although the order of the frequent item is known, the time between the items is not. Recently, one new issue is to find sequential patterns extended with time intervals. So, the example of a sequential pattern with time intervals may be ?A customer who, bought a digital camera six weeks ago, is likely to buy a new memory stick in two weeks?.

The first mining sequential pattern algorithm ? AprioriAll[2] algorithm is proposed by R.Agrawal in the mid 1990s, which discovers patterns that occur frequently in a sequence database. The large sequence property of the  algorithm is ?All subsequences of a frequent sequence are also frequent?.

In SPFTI algorithm [1], it mines the sequential patterns with fuzzy time intervals. Both fuzzy supports of the divided sub-sequential patterns sometime will be smaller than the minimum support when the fuzzy support of the sequential pattern is not larger than twice of the minimum support. Then the candidate large sequential pattern can not be the large sequential pattern.

The main idea of our proposed ISPFTI is to utilize the A priori-like method to mine the large sequential patterns of sequence database. Firstly, find the candidate sequential patterns.  And the large sequential patterns are found by checking support of each candidate sequential pattern with the minimum support. When the length of sequential patterns is larger than or equal to two, define the fuzzy number to each time cluster to compute the fuzzy support, and then mining the sequential patterns with fuzzy time intervals. Finally, the original large sequential patterns are also included in the result of ISPFTI algorithm.



II. PROBLEM DEFINITION AND ALGORITHM To find the time information between successive itemsets is  more efficiently than only the order of itemsets. In this paper, the time interval is not determined in the beginning, but decided by the large sequential patterns using fuzzy set theory.

A. problem definition The data sequence is represented as an order of itemsets,  each is attached to a transaction. Then definitions of sequential pattern with fuzzy time intervals are defined as followed.

? Definition 1. A sequence s is represented as  ( ) ( ) ( ){ } { }n1jmm2211 s,..,sI wheret,I,..,t,I,t,I ? , Ij and si are itemsets and tj standards for the time at which Ij occurs.

? Definition 2. A transaction is represented by ),ItItI kmkjki (),..,,(),,(sid, t , where sid is the  identifier of this transaction and { }nmji ss ,..,I,..,I,I 1?I  is a sequence.

? Definition 3. |S}s)(sid,|s){(sid,|sup(s) ?= The itemset s is frequent in S, sequence database, if the percentage of transactions in S containing s is greater than or equal to the user-specified minimum support (called min_sup).

? Definition 4. The time cluster between itemsets a and b is ( ) ( ) ( ){ }kkba ntntntT ,,...,,,, 2211, = , where ti is time interval between a and b , ni is count of sequence (a, b), 1).-(k1,..,i,1ii =< +tt  If the maximum difference is between time intervals it and 1i+t , then baT ,  will be  divided into two sets,  ( ) ( ) ( ){ }ii11i1, ,...,,,, ntntttT ba = and ( ) ( ) ( ){ }kkba ntntttT ,...,,,, 1i1ik1i, +++ = .

? Definition 5. Let ( ) ( ) ( ){ }mm2211 t,I,..,t,I,t,I=s  be a sequence and  rr1,-r1-r1,21 fs,,fs,..,,fs ??=fs  be a fuzzy time-interval  sequence, where n ? r ? 1 and rfsfs ,..,1 are itemsets happened in the same time.

? Definition 6. The fuzzy support of time interval (ti, tj) between itemsets a and b is  [ ]( ) N  nttt ttfsup p  pp? =  ? ==  j  i jiba,  jiba,ba,  ,.., ),(  ? ? , Where N is  total number of transactions.

If min_supttfsup ?),( jiba, , then time cluster  ( )ji, , ttT ba is preserved.

B. ISPFTI algorithm In SPFTI algorithm it will lose the sub-sequential patterns  whose fuzzy supports are smaller than the minimum support when the fuzzy support of the sequential pattern is not larger than twice of the minimum support. Then we propose the integrated sequential pattern mining with fuzzy time-intervals, ISPFTI algorithm. The procedure of ISPFTI algorithm is shown in the following steps.

? Step1: Find all frequent 1-sequences, L1.

In the beginning, builds the sequence database. And calculates the support of all itemsets, if the support is equal to or greater than minimum support (min_sup), it?s a frequent itemset and also a frequent 1- sequence. The set of all 1-sequence is called L1.

? Step 2: Determine frequent 2-sequences, L2.

Generate candidate 2-sequences, C2, by joining L1 and L1. If the support of any 2-sequence in C2 is equal to or greater than minimum support, it?s a frequent 2-sequence. The set of frequent 2-sequences is called L2.

? Step 3: Find frequent fuzzy time 2-sequences, L?2.

For each 2-sequence,? sa , sb ?  of L2, does the following operations to find the time-clusters of each frequent 2-sequence in figure.1.

3.1) Record all time-intervals in increasing order with their  frequencies.

3.2) divide each time interval of 2-sequence into clusters with similar time-intervals.

if the differences of all successive time-intervals are equal, then the 2-sequence is a non-dividable cluster else divide the 2-sequence into 2 time-clusters  3.3) define the trapezoid fuzzy number to each obtained cluster.

3.4) compute the fuzzy support for each obtained cluster.

Figure.1 operations to find the time-clusters   ? Step 3.1: Record all time-intervals in increasing order  with their frequencies.

The time interval is represented as  ( ) ( ) ( ){ }kkba ntntntT ,,...,,,, 2211, = , where 1).-(k1,..,i,1ii =< +tt Step 3.2: divide each time interval of 2-sequence into clusters with similar time-intervals.

If the differences of all successive time-intervals are equal, then the time cluster is a non-dividable one and preserved. Otherwise, if the differences are not equal, we can find the maximum difference between them, and divide the time cluster into two clusters. For example, a time cluster,  ( ) ( ) ( ) ( ){ }kkba ntntntntT ,...,,,,,...,,, 1i1iii11, ++= , if the maximum difference is between time intervals  it  and  1i +t , then baT ,  will be divided into two sets,  ( ) ( ) ( ){ }ii11i1, ,...,,,, ntntttT ba = and ( ) ( ) ( ){ }kkba ntntttT ,...,,,, 1i1ik1i, +++ = . Then, define the  trapezoid fuzzy number to each obtained cluster. And calculate fuzzy support, fsup, for each time cluster. If the fuzzy support of a time cluster is equal to or greater than the minimum support, this time cluster is accepted and reserved.

? Step 4: Determine the clusters to be preserved.

The function of fuzzy support for time cluster:  [ ]( ) N  nttt ttfsup p  pp? =  ? =  i  i1ba,  i1ba,  ,.., ),(  ? (1)  , Where N is total number of records.

If min_supttfsup ?),( i1ba, , then ( )i1, , ttT ba is preserved. Otherwise, the cluster is deleted. For the fuzzy supports of two time-clusters,  ( )i1, , ttT ba and ( )k1i, , ttT ba + , divided by the maximum difference, if both are less than the minimum support, then the partition is ignored, combining back into the original time cluster, ( )k1, , ttT ba . And continue step 3 and step 4 for further partition.

? Step 5: Determine L?2, the set of frequent fuzzy time 2-sequences.

For each obtained fuzzy support ba,?  of time cluster < a, b > in frequent 2-sequence, L2, a frequent fuzzy     time 2-sequence <sa, ?a,b, sb>is generated by joining with 2-sequences. The set of all frequent fuzzy time 2-sequences is called L?2.

? Step 6: For k ? 2, find L?k+1.

At first, use the a priori-like method to mine the large  sequential patterns of sequence database. And use fuzzy time theory to find the frequent fuzzy time sequential patterns. The operation is shown in the following in figure.2.

6.1) Generate C?k+1 by joining L?k and L?k.

6.2) Compute fsup of each sequence in C?k+1.

6.3)Generate frequent fuzzy time (k+1)-sequences  Figure.2 operation to find L?k+1   Next, generate C?k+1 by joining L?k and L?k. For example, one L?3 <s1, ? 1,2, s2, ? 2,3, s3> is generated by two L?2 , <s1, ?1,2, s2>and  <s2, ?2,3, s3>. The fuzzy support of one (k+1)-sequence Sk+1 is:  N  ),min( )(S  N  1k s,ss,s  1k  1k2k1? =  +  +  = fsupfsup  fsup                 (2)  If fsup ?  min_sup, then this sequence is frequent. The set of frequent fuzzy time k-sequences is called L?k.

C.  Experiment In this paper, the example of sequence database is shown as Table.1. Id is the number of a record. A sequence is represented as ( ) ( ) ( ){ } { }n1jmm2211 s,..,sI wheret,I,..,t,I,t,I ? ,Ij and si are itemsets and tj standards for the time at which Ij occurs. The minimum support threshold(min_sup) is 0.3.

Table.1: Sequence database ID Sequence 01 (s5,8),(s4,15),(s6,20) 02 (s1,2),(s3,7),(s2,11),(s6,18) 03 (s2,3),(s1,4),(s3,7),(s6,16),(s7,19) 04 (s1,2),(s2,8),(s6,10),(s7,15) 05 (s5,4),(s6,16),(s1,20),(s3,24) 06 (s7,7),(s1,13),(s5,18),(s2,25),(s6,28) 07 (s5,4),(s1,8),(s3,12),(s6,16),(s7,20) 08 (s1,3),(s5,6),(s2,9),(s4,18),(s6,20) 09 (s2,5),(s1,10),(s3,15),(s6,20),(s7,25) 10 (s6,2),(s7,8),(s5,12),(s2,17)    Calculate the support of all itemsets, if the support is equal to or greater than min_sup, then it?s a frequent itemset or a frequent 1-sequence. All itemsets and their supports are shown in table.2. The set of frequent 1-sequence is L1. In this database, L1={ }765321 s,s,s,s,s,s .

Table.2 Itemsets and supports  (min_sup = 0.3)  Itemset support Itemset support  s1 0.8 s5 0.6 s2 0.7 s6 1 s3 0.5 s7 0.6 s4* 0.2  *Sup(s4)=0.2 < 0.3 (=min_sup), so s4 isn?t a frequent itemset.

Generate candidate C2 by joining L1 and L1, and find the support for each candidate 2-sequence, shown in the table.3.

Table.3 the set of candidate 2-sequences, C2, and their supports  C2 support C2 support C2 support <s1,s2> 0.4 <s3,s1> 0 <s6,s1> 0.1 <s1,s3> 0.5 <s3,s2> 0.1 <s6,s2> 0.1 <s1,s5> 0.2 <s3,s5> 0 <s6,s3> 0.1 <s1,s6> 0.7 <s3,s6> 0.4 <s6,s5> 0.1 <s1,s7> 0.4 <s3,s7> 0.3 <s6,s7> 0.5 <s2,s1> 0.2 <s5,s1> 0.2 <s7,s1> 0.1 <s2,s3> 0.2 <s5,s2> 0.3 <s7,s2> 0.2 <s2,s5> 0 <s5,s3> 0.2 <s7,s3> 0 <s2,s6> 0.6 <s5,s6> 0.5 <s7,s5> 0.2 <s2,s7> 0.3 <s5,s7> 0.1 <s7,s6> 0.1  All the candidate 2-sequences with support equal to or greater than minimum support, min_sup = 0.3, are members of the set of frequent 2-sequences, L2, shown in table.4.

Table.4 the set of frequent 2-sequences, L2  <s1,s2> <s2,s6> <s5,s2> <s1,s3> <s2,s7> <s5,s6> <s1,s6> <s3,s6> <s6,s7> <s1,s7> <s3,s7>   In table.5, for each frequent 2-sequence, the time  clusters of frequent 2-sequences and their frequencies are shown in increasing order of itemsets ID.

Table.5: Time clusters of frequent 2-sequences and their frequencies  L2 Time clusters <s1,s2> T1,2={(6,2),(9,1),(12,1)} <s1,s3> T1,3={(3,1),(4,2),(5,2)} <s1,s6> T1,6={(8,2),(10,1),(12,1),(16,2),(17,1)} <s1,s7> T1,7={(12,1),(13,1),(15,2)} <s2,s6> T2,6={(2,1),(3,1),(7,1),(11,1),(13,1),(15,1)} <s2,s7> T2,7={(7,1),(16,1),(20,1)} <s3,s6> T3,6={(4,1),(5,1),(9,1),(11,1)} <s3,s7> T3,7={(8,1),(10,1),(12,1)} <s5,s2> T5,2={(3,1),(5,1),(7,1)} <s5,s6> T5,6={(10,1),(12,3),(14,1)} <s6,s7> T6,7={(3,1),(4,1),(5,2),(6,1)}   Next, find the maximum difference between all the time  intervals of each time cluster, and divide the cluster into two candidate time clusters by using divisive hierarchical clustering. Then, calculate fsup for each candidate time cluster and find its fuzzy number. For example,     T1,6={(8,2),(10,1),(12,1),(16,2),(17,1)}. The fuzzy supports are calculated.

T11,6={(8,2),(10,1),(12,1)} ?11,6=(8,8,12,17) T21,6={(16,2),(17,1)} ?21,6=(8,16,17,17)   Figure.3 fuzzy membership functions for time-interval  0.44  1020.2111121(8,12)fsup1,6 = ?+?+?+?+?=  0.375  112110.510.2520(16,17)fsup1,6 = ?+?+?+?+?=  The set of time clusters of frequent 2-sequences and their fuzzy supports is shown in table.6.

Table.6: Time clusters of frequent 2-sequences and their fuzzy supports  Time clusters fuzzy number fsup  T1,2={(6,2),(9,1),(12,1)} ?1,2=(6,6,12,12) 0.4  T1,3={(3,1),(4,2),(5,2)} ?1,3=(3,3,5,5) 0.5  T1,6  T11,6={(8,2),(10,1),(12,1)}  T21,6={(16,2),(17,1)}  ?1,6=(8,8,17,17)  ?11,6=(8,8,12,17)  ?21,6=(8,16,17,17)  0.7  0.44  0.375  T1,7={(12,1),(13,1),(15,2)} ?1,7=(12,12,15,15) 0.4  T2,6  T12,6={(2,1),(3,1),(7,1)}  T22,6={(11,1),(13,1),(15,1)}  ?2,6=(2,2,15,15) ?12,6=(2,2,7,15)  ?22,6=(2,11,15,15)  0.6  0.375  0.367  T2,7  T12,7={(7,1) }  T22,7={ (16,1), (20,1)}  ?2,7=(7,7,20,20)  ?12,7=(7,7,16,20)  ?22,7=(7,16,20,20)  0.3  0.131  0.244  T3,6={(4,1),(5,1),(9,1),(11,1)} ?3,6=(4,4,11,11) 0.4  T3,7={(8,1),(10,1),(12,1)} ?3,7=(8,8,12,12) 0.3  T5,2={(3,1),(5,1),(7,1)} ?5,2=(3,3,7,7) 0.3  T5,6={(10,1),(12,3),(14,1)} ?5,6=(10,10,14,14) 0.5  T6,7={(3,1),(4,1),(5,2),(6,1)} ?6,7=(3,3,6,6) 0.5  If the fsup of a candidate time cluster is equal to or  greater than min_sup, then the candidate time cluster is accepted and reserved. The set of frequent 2-sequences, whose time cluster are accepted, and their fuzzy numbers are shown in table.7.

Table.7: Accepted frequent 2-sequences and their fuzzy numbers  L2 fuzzy number L2 fuzzy number <s1,s2> ?1,2=(6,6,12,12) <s2,s7> ?2,7=(7,7,20,20) <s1,s3> ?1,3=(3,3,5,5) <s3,s6> ?3,6=(4,4,11,11) <s1,s6> ?11,6=(8,8,12,17)  ?21,6=(8,16,17,17) <s3,s7> ?3,7=(8,8,12,12) <s5,s2> ?5,2=(3,3,7,7)  <s1,s7> ?1,7=(12,12,15,15) <s5,s6> ?5,6=(10,10,14,14) <s2,s6> ?12,6=(2,2,7,15)  ?22,6=(2,11,15,15) <s6,s7> ?6,7=(3,3,6,6)   For each accepted frequent 2-sequence in L2, joining with the fuzzy time, it become a fuzzy time frequent 2- sequence. The set of all fuzzy time frequent 2-sequences is called L?2.

Table.8: The set of fuzzy time frequent 2-sequences, L?2.

<s1, ?1,2, s2> <s2, ?12,6, s6> <s5, ?5,2, s2> <s1, ?1,3, s3> <s2, ?22,6, s6> <s5, ?5,6, s6> <s1, ?11,6, s6> <s2, ?2,7, s7> <s6, ?6,7, s7> <s1, ?21,6, s6> <s3, ?3,6, s6> <s1, ?1,7, s7> <s3, ?3,7, s7>    For k ? 2, find L?k+1 by joining L?k with L?k, so join L?2 with L?2 to generate C?3. And calculate all their fsup, shown in table.9. Then find candidate fuzzy-time frequent 3-sequences, shown in table.10.

Table.9: Candidate fuzzy-time 3-sequences, C?3  C?3 fsup C?3 fsup <s1, ?1,2, s2, ?12,6, s6> 0.275 <s1, ?21,6, s6, ?6,7, s7> 0.125 <s1, ?1,2, s2, ?22,6, s6> 0.256 <s2, ?12,6, s6, ?6,7, s7> 0.2 <s1, ?1,2, s2, ?2,6, s6>* 0.4 <s2, ?22,6, s6, ?6,7, s7> 0.2 <s1, ?1,2, s2, ?2,7, s7> 0.1 <s2, ?2,6, s6, ?6,7, s7>* 0.3 <s1, ?1,3, s3, ?3,6, s6> 0.4 <s3, ?3,6, s6, ?6,7, s7> 0.3 <s1, ?1,3, s3, ?3,7, s7> 0.3 <s5, ?5,2, s2, ?2,7, s7> 0 <s1, ?11,6, s6, ?6,7, s7> 0.4 <s5, ?5,6, s6, ?6,7, s7> 0.1   Table.10: fuzzy-time frequent 3-sequences, L?3  <s1, ?1,2, s2, ?2,6, s6> <s1, ?11,6, s6, ?6,7, s7> <s1, ?1,3, s3, ?3,6, s6> <s2, ?2,6, s6, ?6,7, s7> <s1, ?1,3, s3, ?3,7, s7> <s3, ?3,6, s6, ?6,7, s7>  Then, join L?3 and L?3 to generate C?4. C?4={<s1, ?  1,3, s3, ?3,6, s6,?6,7, s7>}, fsup=(<s1, ?1,3, s3, ?3,6, s6,? 6,7, s7>) =0.3. So, L?4 = C?4. And C?5 will be an empty set, so stop here. The longest fuzzy-time frequent sequence is <s1,?1,3,s3,?3,6,s6,?6,7,s7>.



III. DISCUSSION The whole fuzzy-time frequent sequences are shown in  table.11. Not only are the sequences in the table, but also all     subsequences of them fuzzy-time frequent. For example, <s1, ? 1,3, s3, ? 3,6, s6,? 6,7, s7>is fuzzy-time frequent, all its subsequences{<s1, ?1,3, s3, ?3,6, s6 >, < s1, ?1,3, s3,?3,7, s7>, < s3, ?3,6, s6,?6,7, s7>, <s1, ?1,3, s3 >,<s1,?1,6, s6 >, < s1, ?1,7, s7 >,<s3, ?3,6, s6 >,<s3, ?3,7, s7 >, < s6,?6,7, s7>} are also fuzzy-time frequent. But in SPFTI, only the subsequences{<s1, ?1,3, s3, ?3,6, s6 > < s3, ?3,6, s6,?6,7, s7>, <s1, ?1,3, s3 >,<s3, ?3,6, s6 >, < s6,?6,7, s7>} are fuzzy-time frequent.

Table.11: Fuzzy-time frequent sequences of ISPFTI  <s1, ?21,6, s6> <s5, ?5,6, s6>  <s2, ?2,7, s7> <s1, ?1,2, s2, ?2,6, s6>  <s5, ?5,2, s2> <s2, ?2,6, s6, ?6,7, s7>  <s1, ?1,3, s3, ?3,6, s6,?6,7, s7>  Table.12:  Fuzzy-time frequent sequences of SPFTI  <s1, ?1,2, s2> <s2, ?2,7, s7> <s1, ?21,6, s6> <s5, ?5,2, s2> <s2, ?12,6, s6> <s5, ?5,6, s6> <s2, ?22,6, s6> <s1, ?11,6, s6, ?6,7, s7>  <s1, ?1,3, s3, ?3,6, s6,?6,7, s7> Table.13: the set of fuzzy time frequent sequences by using FTI-Apriori algorithm   <s1, S, s3> <s2, S, s6> < s6, S, s7> <s1, M, s6> <s2, M, s6> <s1, M, s7> <s5, M, s6>  The sequence database in table.1 is also used FTI- Apriori algorithm to find the frequent sequences,?=0.3, the fuzzy membership functions for time-interval is shown in figure.5; the set of frequent sequences is shown in table.13, subset of our proposed fuzzy frequent sequences. Compare to table.12 and table.13, the set of fuzzy time frequent sequences by using ISPFTI contains more useful sequences and actual time intervals than the set of SPFTI and FTI-Apriori frequent sequences.

Figure.5 fuzzy membership function in FTI-Apriori  According to Table.7, L?2, a sequence <s5, ?5,2, s2>, whose fuzzy number of time interval between s5 and s2 is ?5,2 = (3,3,7,7). It is means that, for the fuzzy-time frequent sequence <s5, ?5,2, s2>, the time interval is about 3 to 7 days.

In L?3, for a sequence <s1, ?1,3, s3, ?3,6, s6>, whose time interval between s1 and s3, ? 1,3=(3,3,5,5), is about  3~5days. The time between s3 and s6, ? 3,6=(4,4,11,11), is about 4 to 11 days. So, the time interval among <s1, , s3, , s6> is?1,3+?3,6 = (3+4,3+4,5+11,5+11) = (7,7,16,16), about 7~16 days. And for sequence <s1, ?1,2, s2, ?12,6, s6>, whose time interval between s1 and s2 is about 6~12days. The time between s2 and s6, ?12,6=(2,2,7,15), is about 2 to 7 days. So, the time interval among <s1, s2, s6> is ? 1,2+ ? 12,6 = (6+2,6+2,12+7,12+15) = (8,8,19,27), about 8~19 days.

So, it proves that our approach certainly is a good way to find all the order of itemsets, and the time intervals between successive itemsets.



IV.  CONCLUSIONS Conventional sequential pattern mining could reveal the  order of itemsets. Using the information, after the previous purchase was made we can know the next purchase will happen in the future. But the time interval between successive items in the pattern is not determined. And some new fuzzy time-interval sequential patterns can only represent the particular time intervals with the fixed linguistic terms, such as Long, Middle, and Short.

In this paper, we propose the new algorithm, integrated sequential pattern mining with fuzzy time intervals (ISPFTI), which makes important contribution to support the fuzzy ranges of time interval of sequential patterns.  We use both hierarchical clustering technique and represent the time- interval between itemsets as several trapezoid fuzzy numbers.

We also discuss its details to compare with FTI-Apriori and SPFTI algorithm. From the present results obtained, the approach shows us not only the order of successive itemsets, but also the fuzzy ranges of time intervals, which is a more flexible way than the FTI-Apriori algorithms.

