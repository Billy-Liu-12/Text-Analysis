Association Rule Algorithms for Logical Equality Relationships

Abstract The association rule has become one of the  most important techniques in data mining. New algorithms must be developed in order to apply it to more areas. This paper proposes association rule algorithms for logical equality relationships, modified from the original Apriori and FP- Growth algorithms. Logical equality is defined as true?true (1?1) or false?false (0?0) associations. This special relationship commonly occurs in the real world, such as the linkage in the stock markets and customer loyalty for a certain product.

1. Introduction  Since Agrawal et al. proposed the concept of association rule in 1993 and its Apriori algorithm in 1994, it has become one of the most important techniques of data mining [1, 2]. Known as basket analysis, it was first applied to making marketing decisions in retailing stores and soon, researchers began to apply it to other industries, especially in medical, banking, telecommunication and website navigation analysis. The association rule, however, is still a new data mining method. In order to apply it to other usages, the existing algorithms must be modified and expanded. Hence, to discover advanced algorithms for more applications is one of the most important tasks for association rule researchers [3].

The Apriori algorithm and other association rule algorithms look for significant patterns in coexistences or the relationship between their antecedents and consequents. The true?true (1?1) relationship is indeed essential, but the other logical comparisons, such as 1?0, 0?1 and 0?0 are sometimes equally important. Hence, in addition to the normal ?positive? association rule, researchers have proposed new ?negative? association rule algorithms [4]. Although negative association rules provide more selections for researchers, it can only support ?one? of the any four  logical choices. Some researches may consider a combination of the above conditions. For instance, to search for links in stock market indexes, one should consider both up and down conditions at the same time.

On the other hand, to measure the exclusive OR conditions (1?0 and 0?1) together in customer transactions, customer loyalty for a certain product can be revealed successfully.

The purpose of this article is to propose new algorithms for logical equality relationships. Logical equality is defined as true if and only if the logical comparison statement (1?1 or 0?0) is true. It is equivalent to the XNOR gate in the logic circuit design.

Section 2 of this article includes procedures and difficulties encountered while implementing the logical equality association rule by the traditional Apriori algorithm. Then, the new Apriori and FP-Growth algorithms which support logical equality are proposed in sections 3 and 4. Research discussion, limitations and conclusions are listed at the end of this article.

2. Implementing research by using original Apriori algorithm  In the summer of 2007, the explosive sub-prime mortgage financial crisis caused the international stock market to spiral downward abruptly. This event caught my attention and evoked my desire to study the links in the international stock market. The research of stock market linkage is used to diversify stock investments [5]. Almost all researchers use regression and time series as their methods. Since the association rule is a method that can be used to find out the relationships between variables, the Apriori algorithm should be excellent for this type of stock market linkage research.

By performing the algorithm twice, once for prices moving up and the other for those moving down, the separate results can then be extracted. During this process, some important discoveries were found, as pointed out below:  ? Two forms of input data must be created, one for mining the upward linkages and the other for   DOI 10.1109/CIT.2008.Workshops.116     mining the downwards. It takes twice the capacity to store all necessary research input data information.

? Then, perform the algorithm twice. However, when a minimum support threshold is used, the individual minimum support value is very difficult to define. If losing information is not allowed, a minimum support of ?zero? must be used for the execution. This results in a tremendous waste of time and space resources.

? It will take additional efforts to combine two sets of results, especially if the results are of a substantial size. First, the found itemsets should be sorted, and the same pattern itemsets must be added up together, resulting in the insignificant ones being removed when their minimum support thresholds are not met.

? Once the large itemsets are found, calculating significant patterns of antecedents and consequents by minimum confidence value requires nontrivial SQL or other programming skills.

From the list of difficulties above, it is clear that creating new algorithms is necessary to perform logical equality or other similar association research.

3. New algorithm modified from Apriori algorithm  The Apriori algorithm is a great discovery for data mining and the association rule. By reducing insignificant candidate itemsets, it successfully increases processing speed and reduces the usage of space. Because of it, processing billions of store transactions become possible. When modifying the Apriori algorithm for the purpose of logical equality, the pseudo codes look very similar to the original one except the statement in bold in the following list is processed differently.

Procedure Main: L[1] = find_frequent_1-itemsets(D) for (k==2; L[k-1]!=null; k++)  C[k]=apriori_gen (L[K-1], min_sup); for each transaction t in D // scan D for count  C[t] = subset (C[k], t); // generate the subset of t that are candidates for each candidate c in C[t]  c.count++; L[k] = { c in C[k] and c.count >= min_sup }  return L = Union of L[k]  Procedure apriori_gen(L[k-1], min_sup) for each itemset l[1] in L[k-1]  for each itemset l[2] in L[k-1] if (l[1](1)==l[2](1) && l[1](2)==l[2](2) && ? &&l[1](k-2)==l[2](k-2) && l[1](k-1)!=l[2](k-1) then  c=l[1] join l[2] // join step; generate candidates if has_infrequent_subset (c, L[k-1])  delete c; // prune step; remove unfruitful candidate else add c to C[k]  return C[k]  While scanning the database, the original algorithm simply scans for the (1?1) situation. The new algorithm searches for the existence of either (1?1) or (0?0) relationships. The technical terminologies?  support, confidence and lift value of the logical equality association rule?are defined as below. The symbol A(1) denotes when the value of A is 1.

? ? ??  BA Support nsTransactioTotal ofNumber  B(0))(A(0) OR B(1))(A(1) ofNumber ??  ? ? ??  BA C1 A(1) ofNumber  ) B(1)(A(1) ofNumber ?     ? ? ??  BA C0 A(0) ofNumber  ) B(0)(A(0) ofNumber ?  ? ???  BA Confidence ? ? ? ?  BA C0 BA C1 ???  ? ? ? ? BSupport  BAConfidenceB)Lift(A ???  For calculation of confidence value, an average method is shown above. In the case of a huge difference between the frequencies of A(1) and A(0),  the weighted method is recommended for more reasonable results.

Table 1 Split every transaction into two forms of transactions Sample Items  Positive Items Negative Items ACD ACD BE BCE BCE AD ABCE ABCE D BE BE ACD  The above Table 1 shows an example transaction database. There are four sample items. The logical equality association rule looks for both positive and negative items. Hence, the four sample items now become eight items. The following diagram (Diagram 1)  demonstrates the procedures from the modified Apriori algorithm for logical equality relations. The minimum support is assumed to be 40%, or 1.6 transactions. Any candidate itemset with support value less than 1.6 will be treated as insignificant.

Diagram 1 Candidate and Large Itemsets of modified Apriori Algorithm for logical equality     4. New algorithm modified from FP- Growth algorithm  For the sake of improving processing efficiency, the FP-Growth algorithm was proposed in 2000 [6]. The FP-Growth is implemented by a relatively complicated tree format with a link list and/or hash table structure.

The most valuable advantage of the FP-Growth is it only scans the entire database twice. Normally the size of the database is quite huge, so this algorithm can tremendously reduce overall processing time. To write programs for the FP-Growth algorithm is much more difficult than doing so for Apriori. In order to implement the tree and list structure, programmers must have excellent pointer, hash calculation [7] and memory programming skills.

The first FP-Growth algorithm scan of the database is used for counting the frequency of independent variables. By arrange them from the most recurrent to the least, the tree structure can be maintained in the most efficient or condensed format. Since the logical equality performs both formats of every transaction, this step can be redundant because the advantage will be equaled out. Hence, no first scan is recommended unless the average item counts on one side (positive or negative) is much greater than those on the other.

Next, insert both forms of the transactions into the FP-Growth tree structure. This process is exactly the same as the normal FP-Growth algorithm except the count is actually recording both positive and negative transactions. The following diagram (Diagram 2) demonstrates the final FP-Growth tree structure after inserting the same previously used example transactions.

Diagram 2 The final tree structure of the modified FP-Growth algorithm  5. Research Discussion and Limitation  Table 2 shows two cases with different percentages of two variables. The graphical representations are also demonstrated on Diagram 3. While using the regular association rule on both cases, the results will be the same: both contain 30% overlapping areas. But when we applied our logical equality algorithm to both cases,  the result of case 1 is 40%, but the result of case 2 is 100%. This tells us that even though the overlapping areas are the same, the structures of both cases are quite different. When we apply these cases to the linkages of international stock markets, the linkage of case 2 is 100%, or perfectly interdependent. On the other hand, the linkage of case 1 is only 40%; this tells us that the two markets do not have a close relationship.

Table 2 Two cases with different logical distributions Logical Comparison Case 1 Case 2  (1?1) 30 % 30 % (1?0) 30 % 0 % (0?1) 30 % 0 % (0?0) 10 % 70 %    Case 1 Case 2   Diagram 3 Graphical Charts for case 1 and 2   This article discusses logical equality association  rule algorithms. The algorithm for the other two logical comparisons, exclusive or (XOR, 1?0 and 0?1) are not included and will be an excellent research idea for a future study. Of course, a general algorithm which can be executed for any combination of logical comparisons will be an even better idea.

Association rules for logical equality relationships can be used in many areas, including the previously mentioned stock market linkage and customer loyalty.

Applied to the temperature changes of various cities around the world, researchers can find cities with similar temperature patterns. Of course, the time series  concept should be taken into consideration, because the algorithm should be smart enough to compare the data with x days of delays automatically. That is another excellent idea for us to continue to develop on.

Acknowledgements  This research was funded by the National Science Council, Taiwan, Republic of China, under contract No.

NSC 96-2416-H-032-003-MY2.

