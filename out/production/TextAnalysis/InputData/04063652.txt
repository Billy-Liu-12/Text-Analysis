Discovering Association Patterns in Large Spatio-temporal Databases

Abstract   Over the past few years, a considerable number of studies have been made on market basket analysis.

Market basket analysis is a useful method for discovering customer purchasing patterns by extracting association from stores? transaction databases. In many business of today, customer transactions can be made in many different geographical locations round the clock, especially after e-business have become prevalent. The traditional methods that consider only the association rules of an individual location or all locations as a whole are not suitable for such a multi-location environment.

We design a novel and efficient algorithm for mining spatio-temporal association rules which have multi-level time and location granularities, in spatio-temporal databases. Experimental results have shown that our methods are efficient and we can find spatio-temporal association rules satisfactorily.

1. Introduction   The traditional methods for mining association rules can discover knowledge about inter-relationship among different objects. However, the methods search transactions for knowledge without individually looking at the spatial and temporal domains in the database. In our daily life, people located at different places will plan for their activities based on different seasons, weekly cycle or different festivals of the places where they are. Hence, if the nature of different time intervals at different places is taken into consideration, we should be able to discover more interested association rules.

Different decision makers at different corporal levels may have different demands for rules interpretation from different level of time and place. That is, different granularities of time-and-place will have different knowledge for different executives. In order to meet the different demands of those involved in strategic and tactical decision making, we need to find the rules in every possible combination of time and place. In the cause of finding the rules in a general context (the context here means the pair of time-and place), we use calendar- map schema in this study to allow the rules or data to be handled at varying levels of abstractions. Hence, the  method we proposed in this paper not only can discover association rules correctly in a multi-location environment,  but also can represent the rules in different granularities of time-and-place, which can satisfy different decision making with different demands.

This paper is outlined as follows. In Section 2, we will give a brief review of the previous works in spatio- temporal data mining. In Section 3, we will formally describe the main problem that will be addressed and define all the other terminology used in this paper. In Section 4, we will explain our proposed solution to the problems defined in Section 3. In Section 5, experiments with the proposed algorithms on synthetic databases will be described. Some possible future work will be discussed in Section 6. Finally, we will conclude in Section 7.

2. Related Work   There have only been a few attempts to extend data mining for spatio-temporal data. Although several of these techniques from the temporal and the spatial data mining field can be adopted for the task of spatio- temporal data mining, with the exception of a few [2][4], there has been little work on the combination of the two.

However, two directions can be identified: firstly, the incorporation of time into spatial data mining systems, and secondly, the incorporation of space into temporal data mining systems [3].

3. Problem Description   We consider a spatio-temporal database D containing transactions records from multiple locations over different time periods. Our objectives are to extract association rules from the database precisely. For the sake of convenience in presentation, the cardinal of the set, say ?, is denoted by | ? |. Let I = {i1, i2, ?, in   } be the set of  product items included in D, where ik  is the identifier for  the kth item. Let X be a set of items in I. We refer to X as a k-itemset if | X | = k. Furthermore, each transaction Tranj  in D is a subset of I and is attached with a timestamp tv and location identifier pw   to indicate the time and location  when and where the transaction occurs.

3.1. Calendar-map Patterns  0-7695-2702-7/06 $20.00  ? 2006     Since every transaction in the database D has a  location identifier pw and a timestamp tv, we denote the combination of location identifiers and timestamps with calendar-map schema in this paper in explaining our algorithms. A calendar-map schema is a relational schema S = (Ta : Ma, Ta-1 : Ma-l, ?, T1 : M1) with a valid constraint. Each attribute T, is a granularity name like country, province, city, year, month and week. Each domain M, is a finite subset of positive integers (for temporal granularity) or strings (for spatial granularity).

The constraint valid is a Boolean function on Ma ? Ma- l ?  ??M1, specifying which combinations of the values in Ma ? Ma-l ?  ? ? M1 are ?valid?. The purpose is to exclude the combinations that we are not interested in or that do not correspond to any space-time intervals.

Given a calendar-map schema S = (Ta : Ma, Ta-1 : Ma- l, ?, T1 : M1), a calendar-map pattern on S is a tuple of the form <ta, ta-1, ?, t1>, where each t, is in M, or the wild-card symbol *. For example, given the calendar-map schema (country, province, week, day, hour), the calendar-map pattern (USA, Florida, *, 1, 10) means ?the 10th hour on the first day (i.e., Monday) of every week in Florida of USA?.

For a given calendar-map schema (Ta, Ta-1, ?, T1), a calendar-map pattern <ta, ta-1, ?, t1> covers another calendar-map pattern <ta?, ta-1?, ?, t1?> if and only if for each i, 1 ? i ? a, either ti = ?*? or ti=ti?. For the sake of presentation, we call a calendar-map pattern with k wild- card symbols a k-star calendar-map pattern (denoted fk).

In addition, we call a calendar-map pattern with no wild- card symbol a basic space-time interval if the combination is ?valid?.

3.2. Mining Spatio-temporal Association Rules   The problem addressed in this paper is to find, from spatio-temporal databases, spatio-temporal association rules which holds in the calendar-map schema specified by users. Mining spatio-temporal association rules in the database D is to discover every association rule, which holds in an enough number of time intervals and locations given by the corresponding calendar-map patterns. An association rule with respect to a time interval, Ti, and a location Sj, is an implication of the form    YX ji ST ,  ?   where X ? I, Y ? I, and X ? Y = ?. Let |Pi,j(Z)| be the number of transactions containing itemset Z in partition Pi,j uniquely identified by Ti and Sj. The association rule  YX ji ST ,  ?  is said to have support s% in the partition Pi,j if   %)( ,, sPYXP jiji ?=? ,   where |Pi,j| denotes the number of transactions in partition  Pi,j. For an association rule YX ji ST ,  ? , let   % )(  )(  ,  , c  XP  YXP  ji  ji =  ? ,   The rule is said to hold in Pi,j with confidence c%. For a given pair of confidence and support thresholds, c% and s%, and a given pair of time interval and location (Ti, Sj), association rules in (Ti, Sj) are those which have confidence and support in Pi,j greater than or equal to the support and confidence thresholds, respectively.

Assume that |Ti| sub-time intervals are covered by Ti and |Sj| sub-locations are covered by Sj. If an association rule holds in at least m ? |Ti| ? |Sj| combinations of locations covered by Sj and time intervals covered by Ti, where m is a user-defined match ratio threshold (0 < m ? 1), it is said to be a spatio-temporal association rule that holds in Ti and Sj.

4. The Proposed Approaches   In Section 4.1, we propose a way to extend Apriori, the most well-known association rule mining algorithm, to mine spatio-temporal association rules that we have defined in Section 3. We call the extended algorithm Spatio-temporal Apriori. In Section 4.2, we propose our new algorithm to mine the kind of spatio-temporal association rules. Compared with Spatio-temporal Apriori, our method is faster and consumes less memory, because it scans the database at most twice.

4.1. Spatio-temporal Apriori   We propose an Apriori-like method, as one of the feasible methods to find large itemsets in different calendar-map patterns, which meet the minimum support threshold defined by users. We name the calendar-map patterns, in which the large itemsets are found, frequent calendar-map patterns. We call the entire algorithm Spatio-temporal Apriori, which is an extension of Apriori.

Spatio-temporal Apriori also uses the Apriori_gen subroutine to find large itemsets in each basic space-time interval. Firstly, it finds all large 1-itemsets in each basic space-time interval. Then, for each basic space-time interval, it rolls up the counts of the large 1-itemsets to that in those calendar-map patterns, which cover the basic space-time intervals.

At last, after the first scanning of the whole database, the algorithm computes the match ratio of each 1-itemsets in each n-star calendar-map patterns, which is equal to the  0-7695-2702-7/06 $20.00  ? 2006    number of (n-1)-star calendar-map patterns covered by the n-star calendar-map pattern containing the 1-itemsets.

The algorithm will keep those 1-itemsets with match ratios larger than or equal to the user-defined match ratio threshold. The kept 1-itemsets and their corresponding n- star calendar-map patterns are therefore large 1-itemsets and frequent calendar-map patterns.

From the second pass on, we will manipulate each basic space-time interval in 3 steps in every pass: 1) Generate candidate itemsets from the large itemsets found in the previous pass. 2) Compute the support of the candidate itemsets in the basic space-time interval. 3) Use the count of large itemsets to update that in the n-star calendar-map patterns that cover the basic space-time interval. We repeat the 3 steps until no more large itemsets can be discovered in any calendar-map patterns.

Spatio-temporal Apriori can have a lot of weaknesses in term of performance and efficiency. Firstly, as in Apriori, a long database scanning time may be needed, especially for large datasets. The number of database scans needed also depends on the maximum allowed length of large itemsets. Secondly, to generate candidate itemsets in each basic space-time interval, the algorithm have to keep track of all the large itemsets found in the previous pass. The large itemsets can be very large, especially when there are a large number of basic time intervals and locations. Thirdly, in scanning database, the algorithm needs to keep and update the count of itemsets in the whole hierarchy of calendar-map patterns. This can be costly in term of processor and memory utilization.

With a view to achieving better performance, we design a new algorithm for mining spatio-temporal association rules, which will be detailed in Section 4.2.

4.2. Our Method   In a common situation, an association rule is generated from a large itemset with at least two items. In Apriori- like methods, if we compare the number of candidate itemsets with that of large itemsets found, we can induce that the largest number of redundant candidates are often candidates of 2-itemset. Moreover, relatively speakingly, the lower the support threshold, the more the number of redundant candidates of 2-itemset. Based on the observation, our algorithm directly starts searching for large 2-itemset instead of generating candidates of 2- itemset from large 1-itemsets and then looking for large 2-itemsets within the candidates.

Roughly, our method for discovering spatio-temporal association rules can be divided into three phases. They are 1) discovery of frequent 2-itemsets along with their 1- star candidate calendar-map patterns, 2) generation of candidate itemsets along with all their k-star candidate calendar-map patterns, and 3) discovery of frequent itemsets along with their frequent calendar-map patterns.

In phase 1, we are to discover all frequent 2-itemsets L2  in the dataset D composed of a set of partitions {Pi}, where a partition Pi is uniquely identified by a basic space-time interval Ti. A frequent 2-itemset l2 ? L2 discovered will then be stored with a set of 1-star candidate calendar-map patterns {l2.

iv }, where each  l2.

iv  covers the basic space-time interval Ti, in which l2 is  discovered. l2.V1 is a set of all the 1-star candidate calendar-map patterns of l2, such that l2.

iv  ? l2.V1 ?  L2.V1. Note that L2 and L2.V1 are empty initially. In the partition P1, every frequent 2-itemset is found out and inserted into L2. For each itemset l2 inserted into L2, the set of 1-star candidate calendar-map patterns covering T1 is kept in l2.V1. The repeating count of l2 in each l2.

iv  is  set to 1. In the rest of the partitions, P2, ..., Pn, discovery of frequent 2-itemsets along with their 1-star candidate calendar-map patterns is iterated partition by partition.

Frequent 2-itemsets in a partition Pi, where 2 ? i ? n, are computed with three different cases. In case 1, a frequent 2-itemset, l2, is not currently in L2, and therefore it is inserted into L2. Also, {l2.

iv }, a set of 1-star candidate  calendar-map patterns covering Ti is kept in l2.V1. The repeating count of l2 in each l2.

iv  is set to 1. In case 2, the  frequent 2-itemset, l2, is already in L2, but a new 1-star calendar-map pattern, l2. 1iv , with respect to the current  partition is found. In this case, l2. 1iv  is inserted into l2.V  and l2?s repeating count in l2. 1iv  is set to 1. In case 3, the frequent 2-itemset, l2, is already in L2, and all the corresponding 1-star calendar-map patterns, {l2. 1iv }, covering Ti has already been in l2.V1. In this case, we increase l2?s repeating count in all the {l2. 1iv } by 1.

In phase 2, we aggregate all other k-star candidate calendar-map patterns of itemsets in L2 from 1-star candidate calendar-map patterns. For an itemset l2 in L2, its repeating counts in the 1-star candidate calendar-map patterns, l2. 1jv ?s, have been derived from phase 1, and thus its repeating counts in 2-star candidate calendar-map patterns, l2. 2jv ?s, can be easily obtained. Similarly, its repeating counts in 3-star candidate calendar-map patterns, l2. 3jv ?s, can be aggregated from that in l2. 2jv ?s, and so on.

Instead of directly generating all k-star candidate calendar-map patlerns in phase l, our method generates and scans only 1-star candidate calendar-map patterns in the first scan of the database. Therefore, a smaller number of candidate calendar-map patterns are generated and counted in the process of scanning database. Once all candidate calendar-map patterns of itemsets in L2 are derived, candidate itemsets Ck, for k ? 3, along with their  0-7695-2702-7/06 $20.00  ? 2006    candidate calendar-map patterns can further be generated.

Note that two kinds of candidates are generated in this phase, i.e., the candidates of frequent itemsets (candidate itemsets for short), and the candidates of frequent calendar-map patterns (candidate calendar-map patterns for short). The set of candidate k-itemsets, i.e., Ck of k ? 3, are generxted as follows:    ? ? ?  >? =?  = ?? 3 if  3 if   kCC kLL  C kk  k ,   where * is the JOINT operation given in [1].

Let the set of candidate calendar-map patterns, VI,  where I is a candidate itemset, be   ?? 1 1  ).( ? ?  = k j  k jI vIV ,   Intuitively, the candidate calendar-map patterns of an  itemset 3kI  in C3 can be derived by intersecting the candidate calendar-map patterns of itemsets which are the subsets of 3kI  in L2 as below:    ? })|({ 3223 kjII IIVV jk ??= ,  However, by utilizing I?s repeating counts in VI, ?I ?  L2, we can find the minimal set of candidate calendar-map patterns for each itemset in C3. From the Equation above, it is clear that the repeating count of a candidate calendar- map pattern of an itemset 3kI  in C3, countv kI ?3 , will never  be larger than any countv jI  ?2 , 32 kj II ?? . Hence, the  maximal value of countv kI  ?3 , countv kI  ?3? , can be obtained  by   })|min({? 3223 kjII IIcountvcountv jk ???=? ,   Furthermore, for each 3kI , 3kIv  is removed if  )(? 33 kk II  vmcountv ??? . Finally, the candidate calendar-map  patterns of Ck, k ? 4, are obtained by   ? })|({ 111 lkljII IIVV ljk ??= ?? , for l ? 4.

In the final phase, to discover the frequent patterns  from candidates, all candidate itemsets along with their candidate calendar-map patterns are counted in the database in one shot. Note that a candidate itemset is only  scanned in the space-time intervals covered by its candidate calendar-map patterns. Our algorithm reduces the database access time by limiting the number of database scanning time to at most twice. It makes use of the concept hierarchy of spatial and temporal domain to reduce the number of candidates that need to be searched in scanning database.

5. Experiments   In this section, we perform a simulation study to empirically compare the runtime and number of generated patterns of the proposed methods. The proposed algorithms are implemented and tested with the following hardware and software configuration:   (1) Operation system: Windows XP (2) Hardware: Pentium 3.0G CPU, 1024M main memory (3) Tool: Java 2 Standard Edition Version 1.4.2  5.1. Experiment 1   We use four different sets of synthetic data, (L=10;Fl=3;D=6M), (L=10;Fl=4;D=6M), (L=10;Fl=5;D=6M), and (L=10;Fl=6;D=6M), to generate around 1000 transactions for each basic space-time intervals. D is Number of Transactions. Fl is Average length of maximum potentially frequent itemsets. L is Average Length of Transactions. We also apply different support thresholds, 0.06, 0.07, 0.08, 0.09 and 0.1, to investigate how the performance of the two methods, i.e.

our proposed new method and Spatio-temporal Apriori, will vary with different support thresholds. The match ratio threshold is defined to be 0.8 in this experiment.

Table 1 contains the numbers of frequent calendar-map patterns and frequent patterns, as well as the maximum length of the frequent itemsets, found in the four sets of data with the two methods and the five different support thresholds. Figure 1 shows a plot of runtime time of the two methods with the 4 datasets against the different support thresholds.

In analyzing Table 1 and Figure 1, we discover that when the maximum length of frequent itemsets becomes larger, if the number of candidate calendar-map patterns increases, then the runtime of Spatio-temporal Apriori will increase tremendously. When the maximum length of frequent itemsets becomes smaller, if the number of candidate calendar-map patterns increases, then the runtime of Spatio-temporal Apriori will increase but the increase tends to be slower. Our explanation is that when the maximum length of frequent itemsets becomes larger, Spatio-temporal Apriori has to scan the database for more times. Even worst, when there are more candidate calendar-map patterns that have to be checked in each scanning of database, the adverse influence on execution runtime will become more apparent. Our method, on the  0-7695-2702-7/06 $20.00  ? 2006    other hand, will scan the database at most twice, so the impact of the maximum length of frequent items is less apparent. The impact of an increase in the number of candidate calendar-map patterns is also not as vigorous as that in applying Spatio-temporal Apriori. Hence, our method has better performance in term of execution runtime compared with Spatio-temporal Apriori.

0.06 0.07 0.08 0.09 0.1  Support Threshold  E xe  cu ti o n  T im  e ('0   se c)  Spatio-temporal Apriori L=10;Fl=3;D=6M  Spatio-temporal Apriori L=10;Fl=4;D=6M  Spatio-temporal Apriori L=10;Fl=5;D=6M  Spatio-temporal Apriori L=10;Fl=6;D=6M  Our Method L=10;Fl=3;D=6M  Our Method L=10;Fl=4;D=6M  Our Method L=10;Fl=5;D=6M  Our Method L=10;Fl=6;D=6M   Fig. 1. Experiment 1: Comparison of execution time between Spatio-temporal Apriori and our method.

5.2. Experiment 2   We use another four data sets of different sizes in this  experiment. They are (L=10;Fl=4;D=4M), (L=10;Fl=4;D=6M), (L=10;Fl=4;D=8M) and (L=10;Fl=4;D=10M). On average, there are 1000 transactions in each basic space-time interval. We apply different support thresholds, 0.06, 0.07, 0.08, 0.09 and 0.1 respectively, to investigate the differences of the two methods in runtime with data sets of different sizes. The match ratio threshold defined in this experiment is 0.8.

Figure 2 is, under the data sets of four different sizes, how the performance of the two methods will change with different support thresholds. The dotted lines are the runtime of Spatio-temporal Apriori whereas the solid line is that of our proposed new method. Figure 3 is, under the different support thresholds, the number of candidate itemsets and the discovered frequent itemsets from the four data sets with the two methods. Figure 4 is, under the different support thresholds, the number of candidate calendar-map patterns and the discovered frequent calendar-map patterns from the four data sets with the two methods. Before the experiment, we know that the number of scanning times in Spatio-temporal Apriori  depends on the allowed maximum length of frequent itemsets. From the figures, we can see that when the sizes of data sets become larger, Spatio-temporal Apriori, which relatively needs more number of scanning times, has runtime increasing in phase with the sizes of the data sets. What is more, the phenonemun is more apparent when the support threshold becomes smaller. This is because, with a smaller support threshold, there are more candidates that need to be checked in each scanning.

From Figure 2, we can deduce that our method outperforms Spatio-temporal Apriori in term of execution runtime with all the data sets of different sizes.

0.06 0.07 0.08 0.09 0.1  Support Threshold  E xe  cu ti o n  T im  e ('  s  ec )  Spatio-temporal Apriori L=10;Fl=4;D=10M  Spatio-temporal Apriori L=10;Fl=4;D=8M  Spatio-temporal Apriori L=10;Fl=4;D=6M  Spatio-temporal Apriori L=10;Fl=4;D=4M  Our Method L=10;Fl=4;D=10M  Our Method L=10;Fl=4;D=8M  Our Method L=10;Fl=4;D=6M  Our Method L=10;Fl=4;D=4M   Fig. 2. Experiment 2: Comparison of execution time between Spatio-temporal Apriori and our method.

Fig. 3. Experiment 2: Average number of candidate  itemsets and frequent itemsets found by Spatio-temporal Apriori and our method.

0.06 0.07 0.08 0.09 1.0 Support Threshold  Average Number of Candidate Itemsets  Candidate Itemsets of Spatio-temporal Apriori  Candidate Itemsets of Our Method  Discovered Frequent Itemsets  0-7695-2702-7/06 $20.00  ? 2006    Table 1. Experiment 1: The numbers of candidate and frequent calendar-map patterns as well as the maximum length of generated frequent itemsets by Spatio-temporal Apriori and our method.

Support threshold  0.06 0.07 0.08 0.09 0.1 Spatio-temporal Apriori 65422 40122 28344 22476 15887 Candidate Calendar-map  patterns of Our Method 72987 46112 29987 24929 17842 Discovered frequent calendar-map patterns 64849 39591 28068 22212 14731  L=10;F l  =3;D =6M  Maximal length of frequent itemsets 7 6 6 5 5 Spatio-temporal Apriori 205891 133929 73778 48733 29274 Candidate calendar-map  patterns of Our Method 212939 174211 89913 55207 34686 Discovered frequent calendar-map patterns 198446 128493 71426 46619 27754  L=10;F l  =4;D =6M  Maximal length of frequent itemsets 8 8 8 6 6 Spatio-temporal Apriori 56021 45431 34217 18193 6151 Candidate calendar-map  patterns of Our Method 55463 46087 36559 25584 9424 Discovered frequent calendar-map patterns 52944 43429 31733 16547 5408  L=10;F l  =5;D =6M  Maximal length of frequent itemsets 6 6 6 6 6 Spatio-temporal Apriori 180694 122017 48051 9785 1323 Candidate calendar-map  patterns of Our Method 192268 138011 83421 21125 2411 Discovered frequent calendar-map patterns 162645 105671 42126 8972 1072  L=10;F l  =6;D =6M  Maximal length of frequent itemsets 9 8 8 6 4    0.5   1.5   2.5  0.06 0.07 0.08 0.09 0.1  Support Threshold  A v er  ag e  N um  be r  o f  C al  en d ar  -m ap  P at  te rn  s ('  0)  Candidate Itemsets of Spatio-temporal Apriori  Candidate Itemsets of Our Method  Discovered Frequent Itemsets   Fig. 4. Experiment 2: Average number of candidate and  frequent calendar-map patterns found by Spatio-temporal Apriori and our method.

6. Future Work   First, we would like to explore other meaningful semantics of spatio-temporal association rules and extend our techniques to solve the corresponding data mining problems. Second, we would like to consider spatio- temporal patterns in data mining problems other than association rule mining, such as clustering. Third, mining spatio-temporal patterns involves investigating not only large itemset space and pattern space, but also a large amount of data collected in a long history. It is thus crucial to develop parallel or distributed algorithms for large scale data mining. It would also be interesting to devise online incremental algorithms for this problem.

7. Conclusions   This work presented a new approach to solve the association rule mining problem handling the spatial and temporal dimension, i.e., the problem of spatio-temporal association rule mining. We have proposed an algorithm  to discover spatio-temporal association rules that appear over any time intervals and locations in a spatio-temporal database. Existing algorithms fail to mine quite evident spatio-temporal association rules, which justifies the need of a new approach. We have also proposed a way to extend Apriori, the most well-known association rule mining algorithm, to mine spatio-temporal association rules. Experimental results have shown that our proposed new method is more efficient than the Apriori-like approach. An explanation of the experiment results is that the number of database scanning time in Apriori-like approaches increases with the maximum allowed length of frequent itemsets but our method scans the target database at most twice.

8. References  [1] Agrawal, R. and Srikant, R. (1994) ?Fast Algorithms for Mining Association Rules,? in Proc. of the 20th Int?l Conf. on Very Large Data Bases, Santiago, Chile, pp.

487?499.

[2] Hadjieleftheriou, M., Kollios, G., Gunopulos, D., and Tsotras, V. J. (2003) ?On-Line Discovery of Dense Areas in Spatio-temporal Databases,? in Proc. of SSTD?03, pp.

306?324.

[3] Roddick, J. F. and Spiliopoulou, M. (1999) ?A Bibliography of Temporal, Spatial and Spatio-Temporal Data Mining Research,? in SIGKDD Explorations 1(1), pp. 34?38.

[4] Tsoukatos, I. and Gunopulos, D. (2001) ?Efficient Mining of Spatiotemporal Patterns,? in Proc. of SSTD?01, pp.425?442.

