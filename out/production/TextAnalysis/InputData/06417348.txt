A Compositional Trust Model for Predicting the Trust Value of Software System QoS Properties

Abstract?Trust of a software system (i.e., the degree of confidence that a system conforms to its specification) can be defined in terms the composition of trust values for each individual software component (or service) used in the creation of that software system and their interaction patterns. This paper therefore presents the different composition patterns, and the common associations between various quality-of-service (QoS) properties of the composed system for the identified composition patterns. It also presents composition rules for deriving systemic trust values for each composition pattern. Lastly, results from applying the composition patterns to a case study show our trust composition model can predict trust of a composed system with 55%?70% uncertainty that increases with system complexity.

Keywords-system properties, trust, system composition, enter- prise DRE system

I. INTRODUCTION  The emergence of Service-Oriented Architecture (SOA) [18] enables software artifacts (or core ?business- logic?) to be autonomous (i.e, independently designed, developed, and executed) and provide domain-specific functionality based on its published specifications. SOAs also allow system developers to discover and compose a set of software artifacts called services to form new systems.

From the perspective of trust (i.e., the degree of confidence that a system conforms to its specification), one main draw- back of this SOA-based approach is that software services guarantee a level of trust (i.e., the degree of confidence that a service conforms to its specification) in isolation, but there is no guarantee about the composed systems level of trust [21].

There exists several prevalent trust models [7], [10], [20], [21], but these models focus on assessing trust at runtime and not at system composition time?an integral step in SOAs.

Unfortunately, this makes evaluating and understanding the trust of the composed system before runtime a costly and time- consuming effort, if possible.

Because of the shortcomings of existing models, it is impor- tant to understand and evaluate trust of the composed software system before runtime with the goal of developing trusted sys- tems from the beginning. With this in mind, this paper presents a trust composition model that allows system developers to predict the trust value of a system that is composed from  This work is funded in part by the Air Force Research Lab (AFRL) via the Security and Software Engineering Research Center (S2ERC).

individual software services. The main contributions of this paper are as follows:  ? We identify composition operators for common QoS properties and common interaction patterns;  ? We define mappings of trust operators to common compo- sition operators, which helps evaluate the trust value of software service quality-of-service (QoS) properties for different composition patterns; and  ? We empirically validate the proposed compositional trust model using a case study.

The result of the case study shows the trust of a composed system can be quantitatively predicted using the proposed composition operators. The predicted results include a degree of uncertainty ranging from 55% to 70%, which is shown to increase as the system get more complex.

Paper organization. The remainder of this paper is or- ganized as follows: Section II discusses the proposed trust composition model, Section III presents the application of our model in a case study in detail; Section IV compares of our composition model against the current, state-of-the-art trust models; and Section V presents concluding remarks and lessons learned.



II. THE COMPOSITIONAL TRUST MODEL  A. Interaction Patterns of Properties  Trust of a composed system can be evaluated by aggregating the trust of functional and quality-of-service (QoS) properties (e.g., response time, availability, and confidentiality) that the system is expected to hold. A single property of a system can either be a boolean assertion (e.g., confidentiality) or a key- value pair (e.g., response time). The trust value of a single property can be derived based on trust values for the corre- sponding property from each the individual service involved in the composition. The composition of the individual service properties to create the systemic value, however, depends on the nature of the property and the interaction pattern (i.e., how the services interact with each other) of the software services in the composition.

QoS is known to be a N-dimensional space [14], but in this paper we focus on the following QoS properties of software systems: response time (i.e., the length of time it take a client to send a request to a server, and receive a response for the   DOI 10.1109/ICCSE.2012.89     originating request; availability (i.e., the percentage of the duration that the service is alive since initial deployment); authentication (i.e., confirmation/ rejection of an external entity?s identify that is trying to access a secure part of the system; authorization (i.e., the ability to access a resource in the environment); confidentiality (i.e., the ability to ensure that information does not reach parties that are not privy to the information); and integrity (i.e., the measure of completeness and correctness of the actions and data). It is worth noting that our approach is not limited to these QoS properties.

As for the common interaction patterns, this paper discusses the following, which are originally defined by Hwang et al. [8]:  ? Sequence ? Sequence is when the output of a software service becomes the input of another software service. For example, a firewall service is the first service in sequence that authenticates requests to access services behind (or after) the firewall service.

? Split/Join ? Split/join is when many services shares the input from one preceding service and emit the output to one common, succeeding service. For example, two independent calculations of mathematic equation can be divided into two parallel services, and join them to do the combined calculations.

? Exclusive Choice ? Exclusive choice is when one service from a set of services non-deterministically selected and invoked. For example, a load balancing service uses exclusive choice when selecting a service from a set of nearly identical services to obtain a higher availability of the composed system.

? Discriminator ? Discriminator is when a service is selected from a set of services that provide the same functional behavior, but different QoS properties. This pattern is different from the exclusive choice pattern above in that here the selection is done based on a deterministic criteria. For example, selecting the weather software service that provides the best response time from all the available weather software services.

? Loop ? Loop is when an output of a service is feedback as the input of the same service based on some condition.

For example, selecting a weather service from a set of services on the first iteration, and using the result of the current iteration to select the same, or a different weather service on subsequent iterations.

? Gateway ? Gateway is a when a service resides between two other services, and orchestrates communication be- tween the two other services. For example, if there are two services that provide heterogeneous interfaces (e.g., CORBA and SOAP), then the gateway is used to enable the communication between either service.

B. Trust Operators and Representations  We formally define trust of a service as TS = (B,D,U) where B is belief that the service conforms to its specification, D is disbelief that the service conforms to its specification, and U is uncertainty that the evidences are incomplete or unavail- able to decide the conformance of a service to its specification.

We call this the BDU-model and is based on the subjective- logic trust model proposed by Josang et al. [9]. We selected this model as the foundation of our trust compositional model because it captures the uncertainty aspect of the trust, and provides formal operators to evaluate and compose subjective trust values.

Josang et al. also proposes a set of operators on multi- ple subjective-logic expressions that includes traditional logic operators (e.g., conjunction, disjunction, and negation) and operators specific to the belief theory (e.g., consensus and recommendation). For completeness, we include below the definition of operators originally defined by Josang et al. [9] that are used throughout the remainder of this paper. In the list below, the term ?agent? is used to represent stakeholders in trust relationships. An agent?s A trust of a proposition or another agent?s recommendation p is denoted as TAp ?< bAp , d  A p , u  A p >. When only one agent evaluates trust, trust is  represented as Tp ?< bp, dp, up >.

? Conjunction (?B,D,U ). Given Tp and Tq , then  Tp?q ?< bp?q, dp?q, up?q > where,  bp?q = bp ? bq dp?q = dp + dq ? dp ? dq up?q = bp ? uq + up ? bq + up ? uq  ? Disjunction (?B,D,U ). Given Tp and Tq , then Tp?q ?< bp?q, dp?q, up?q >  where,  bp?q = bp + bq ? bp ? bq dp?q = dp ? dq up?q = dp ? uq + up ? dq + up ? uq  ? Recommendation (?B,D,U ). Given agents A and B, TAB , and TBp , then  TABp ?< bABp , dABp , uABp > where,  bABp = b A p ? bBp  dABp = b A p ? dBp  uABp = d A B + u  A B + b  A B ? uBp  C. Trust of Properties in a Composition  As discussed earlier, we define trust of a service to be the degree of confidence that service conforms to its specification.

Although there are broader definitions of trust [20], we use this definition as our focus in this paper is to evaluate trust during the construction of distributed systems. Following this definition, trust of a service is evaluated by measuring the degree of the compliance. Furthermore, trust of a composition depends on the properties of its individual services and their interconnection patterns.

It is therefore important to identify the types of relationships that exist between properties of the composed system and the individual services. In the BDU-model, we identify such     relationships and the corresponding trust operators for predict- ing the trust of the composition from the trust of individual services. More specifically, the trust about a property P of a service S defined as  T (PS) ?< B(PS), D(PS), U(PS) > (1) If the service S is composed of individual services  S1, S2, . . . Sn, then property P of the service S is evaluated as a function of P for the individual services. This function is called the composition operator OPPS and is defined as:  OPPS : {Ps1 , Ps2 , ..., Psn} ? PS (2) As shown in Equation 2, OPPS depends on P and the interaction pattern between individual services.

The trust of a property P in the service S depends on OPPS and is defined by the trust composition operator OPT (PS) where  OPT (PS) : {OPPS , T (Ps1), . . . , T (Psn)} ? T (PS) (3) D. Trust Composition Operators  Existential operator. If OPPS = ?, then the composed system will have property P , if there exists a service Si that satisfies property P . Likewise, the corresponding trust operator for this composition is the disjunction operator. For example, availability (in the discriminator pattern) illustrates usage of the existential operator because when one service as the availability property, then the composed system also has the availability property.

Universal operator. If OPPS = ?, then the composed system will have property P , if all its services hold property P .

Likewise, the corresponding trust operator for this composition is the conjunction operator. For example, confidentiality (in the sequence pattern) illustrates usage of the universal operator because all services in the composed system must have the confidentiality property for the composed system to have the confidentiality property.

Min/Max operator. If OPPS = min(x) or OPPS = max(x), then the value of property P of the composed system is the minimum or maximum value, respectively, of property P out of all services used in the composition. For example, response time (in the discriminator pattern) illustrates usage of the minimum operator because the response time of the composed system is equal to the minimum response time of the participating services. Similarly, response time (in the split/join pattern) illustrates usage of the maximum operator because the response time of the composed system is equal to the maximum response time of the participating services.

If the property P is a boolean assertion, then the minimum (or maximum) operator is equivalent to the universal operator.

In this situation, T (PS) = ?(B,D,U) (or T (PS) = ?(B,D,U)).

If the property is not a boolean assertion (i.e., a key-value pair such as response time), then T (PS) must rely on distributions of the different values for P .

For example, response time is a key-value pair property and example values can be 10 msec?the mean value for the  distribution of observed response times. Assuming that two separate services (i.e., S1 and S2) exhibit the response time distributions above, then the trust value for P of the composed system can be calculated by using probability theory and the corresponding minimum (or maximum) operator to join each service?s probability distribution [19]. The resulting joined probability distribution is then used to calculate the trust of P for the composed system.

Addition operator. If OPPS = ?  , then the value of property P for the composed service system is the sum of the property P for all services used in the composition. For example, response time (in the sequence pattern) illustrates usage of the addition operator because the response time of a composed system is equal to the sum of the response times of the participating services (assuming that each services is running on its own host and there is no competition for CPU resources on the host).

If P is a binary assertion, then the addition operator is equivalent to the existential operator (see above). In this situation, T (PS) = ?(B,D,U). If P is not a boolean assertion (i.e., a key-value pair such as response time), then T (PS) must rely on distributions of the different values for P . For example, response time is a key-value pair property and an example value can be 10 msec?the mean value for the distribution of observed response times. Assuming that two separate services (i.e., S1 and S2) exhibit the response time distributions above, then the trust value for P of the composed system can be calculated by using probability theory and the corresponding addition operator to join each service?s probability distribution [3]. The resulting joined probability distribution is then used to calculate the trust of P for the composed system.

Multiplication operator. If OPPS = ?  , then the value of property P for the composed system is the product of property P for each service used in the composition. For example, availability (in the sequence pattern) illustrates usage of the multiplication operator because the availability of a composed system is equal to the multiplication of the availabilities of the participating services.

If P is a boolean assertion, then the multiplication operator is equivalent to the universal operator (see above) because both produce the same results. In this situation, T (PS) = ?(B,D,U).

If the property is not a boolean assertion (i.e., a key-value pair such as response time), then T (PS) must rely on distributions of the different values for P .

For example, response time is a key-value pair property and example values can be 10 msec?the mean value for the distribution of observed response times. Assuming that two separate services (i.e., S1 and S2) exhibit the response time distributions above, then the trust value for P of the composed system can be calculated by using probability theory and the corresponding multiplication operator to join each service?s probability distribution [19]. The resulting joined probability distribution is then used to calculate the trust of P for the composed system.

Multiplier operator. If OPPS = multiplier, then the     value of property P for the composed system (PS) is equal to the multiplication of the property that participate in the composition (Ps) with some constant multiplier n. We denote this as PS = n ? Ps. For example, response time (in the loop pattern) illustrates usage of the multiplier operator because the response time of a composed system in loop pattern is equal to the response time of the participating service multiplied by the number of loops.

The application of the multiplier operator is equal to ap- plying the addition operator to a service n times. The trust operator corresponding to the multiplier operator is therefore equivalent to applying trust operator corresponding to the addition operator n times. For example, if the response time of a service is 15ms and is composed in a loop pattern of 10 iterations, then the response time of the composed service is 150 msec (assuming that there is no competition for CPU resources on the host in each iteration). If the trust of the participating service is very high, then the trust of the composed system can be obtained by applying the conjunction operator on the on the trust of the participating service n times.

Exponent Operator. If OPPS = exponent, then the value of property P for the composed system (PS) will be equal to the exponential value of the property that participate in the composition Ps with some constant exponent n. We denote this as PS = Psn. For example, availability (in the loop pattern) illustrates usage of the exponent operator because the availability of a composed system in loop pattern is equal to exponentiation of the availability of the participating service where the exponent is number of loops.

The application of exponent operator is equal to applying multiplication operator for to a service a constant number of times. The trust operator corresponding to the exponent operator is therefore equivalent to applying the trust operator corresponding to the multiplication operator a constant number of times.

Non-deterministic operator. If OPPS = ND, then the value of property P for the composed system equals the value of P for the non-deterministically selected service. As shown in Equation 4, the application of composition operator for a set of services will give an expected value for P equal to the probability that the individual service is selected.

PS = (w1 ? Ps1) + (w2 ? Ps2) + . . .+ (wn ? Psn) (4) For example, availability (in the exclusive choice pattern) illustrates usage of the non-deterministic operator because the availability of a composed system in exclusive choice is equal to the availability of a non-deterministically selected service.

The trust composition operator corresponding to the non- deterministic composition operator is found by applying both the recommendation operator ? and disjunction operator ?. As shown in Equation 5, the probabilities of individual service Si being selected is expressed as a subjective logic expression Wi where Wi is the weight that service Si to be selected considering uncertainty also as a factor.

T (PS) = (W1 ? T (Ps1)) ? (W2 ? T (Ps2))? . . . ? (Wn ? T (Psn)) (5)  Generative operator. If OPPS is the generative operator, then the composed system will have the value of property P if the condition in the context (denoted as ?) of the composition is met?even if services do not have property P . For example, the confidentiality property (in the split/join pattern) illustrates usage of the generative operator because by splitting user data flow at different levels (e.g., authorized users and non-authorized users) the control and the data can be made confidential. Here the generative condition xi is the whether the communications of participating services are separated (without any back-channels). Lastly, the trust composition operator corresponding to the generative operator is equal to the trust that the generative condition xi for the satified participating services.

Select operator. The select operator is a transformational composition operator that has to be combined with an- other composition operator. We denote the select operator as OPPS [criteria] where criteria is a condition that a subset of the participating services must satisfy. When the select op- erator is present, the relevant composition operator is applied only on the participating services that meet the given criteria.

For example, authentication (in the discriminator) pattern illus- trates usage of the select operator because the authentication of the composed system is equal to the authentication provided by the participating services with minimum response time. The subset of available services can be selected using the criteria ?services having minimum response time?.

When the select operator is applied to property P with a composition operator OPPS , the trust of P in the composed system is evaluated by applying the trust operator of the related composition operator on the set of services within the composition that hold the criteria. For example, the trust of the authentication of a composed system in discriminator pattern is calculated by applying the conjunction operator (trust operator corresponding to the universal operator) for the trust of selected services with minimum response times. Lastly, the trust operator is denoted as OPT (PS)[criteria].

E. Mapping Composition Operators for Properties and Inter- action Patterns  The composition operators and trust operators depend on the interaction pattern between individual services in the system composition and the of the property under evaluation. For example, evaluating the response time of a system using services that exhibit the sequence interaction pattern requires using the addition operator. Table I provides an overview of composition operators for common QoS properties with common interaction patterns.

As shown in Table I, the universal operator is the composi- tion operator for the confidentiality and integrity QoS property is the irrespective of the observed interaction pattern. This is because Mclean et al. [11] showed that these properties are preserved only when all the participating services have the separability property, which is the ability to ensure that there are no interactions allowed between users at different authorization levels. To preserve authorization and authenti-     TABLE I THE COMPOSITION OPERATORS FOR DIFFERENT QOS PROPERTIES AND EACH INTERACTION PATTERN.

Response Time Availability Authentication Confidentiality Integrity Authorization Sequence Addition Multiplication Universal Universal Universal Universal Parallel Split/Join Maximum Multiplication Universal Universal/Generative Universal/Generative Universal Exclusive choice Nondeterministic Nondeterministic Universal Universal Universal Universal Discriminator (minimum response time)  Minimum Existential Universal [services with minimum re- sponse time]  Universal Universal Universal [services with minimum re- sponse time]  Loop Multiplier Exponent Universal Universal Universal Universal Gateway Addition Multiplication Universal[gateway  service] Universal Universal Universal[gateway  service]  cation, however, all the participating services need not have the corresponding property. For example, proxy services [13] are used to add authorization and authentication properties to existing systems that do not contain them, and broker authenticators are used when client and servers do not share a trust relationship [12]. In such cases, the authorization and authentication property values of the composed system depend only on the corresponding property values of the proxy and broker services.

F. Effect of Environment on Composition Operators Our current discussion assumes that the composition op-  erators depend only on the property under evaluation and the interaction pattern of the composition. The effect of the execution environment, however, is an important factor that must be considered when evaluating trust values of the composed system, and its services. For example, if the runtime environment (e.g., the operating system) is not trustworthy, the fully trusted services that execute within the environment will not function as expected. Any trust composition model there- fore must be able to integrate trust of the runtime environment.

Building on Equation 2, we denote a service sx running in an environment e as sex, and the property P of the service that runs on the environment e as Psex . The composition operator for e is denoted as OP ePS , as shown in Equation 6:  OP ePS : {P es1 , P es2 , . . . , P esn} ? P eS . (6) In most situations, we can capture the environment?s effect  on the composed system as service that participates in the composition. We denote the environment as a service as Pse .

For example, the network that host a set of services can be represented as a service, and network delay and network bandwidth at the network service?s QoS properties. We can then reuse the environment independent composition operator to evaluate properties of the composition using the following equation:  OPPS : {Ps1 , Ps2 , . . . , Psn , Pse} ? P eS Similarly, we can extend Equation 3 to evaluate the trust of  the composition while integrating the as follows:  OPT (PS) : {OPPS , T (Ps1), T (Ps2), ..., T (Psn), T (Pse)} ? T (P eS) (7)  As shown in Equation 7, the trust of a property in the com- posed system is evaluated based on the trust of the property  in the participating services and the environment T (Pse). For example, if there are two services with response times 15 msec each, and the overall network delay of the system is 5 msec, then the response time of the composed system can be calculated by considering the network as another service with the response time of 5 msec. The resulting response time therefore would be 35 msec (assuming that each services is running on its own host and there is no competition for CPU resources on the host).



III. CASE STUDY: INDOOR OBJECT TRACKING SYSTEM  This section discusses how we applied the trust composition operators introduced in Section II to an indoor object track- ing system [15] to conceptually validate the proposed trust composition model.

A. Overview of the Indoor Tracking System  The indoor object tracking system is a system that tracks the position of objects using a set of heterogeneous sensors. It is also a SOA that is composed from the following services:  ? Sensor services. Sensor services represent physical sen- sors that identify the location of the objects in the environment, such as a laboratory or office. Examples of sensor services include, but is not limited to: camera services, wireless network signal tracking services, and Radio Frequency Identification (RFID) services.

? Fusion service. The fusion service fuses the outputs of multiple heterogeneous sensor services and outputs a more accurate position of the tracked object based on the aggregation of information obtained from each sensor service.

? Discovery service. The discovery service selects the most appropriate sensor and fusion services that matches the user?s functional and QoS requirements. In this case study, the discovery service selects the two sensor ser- vices that most accurately tracks objects while maintain- ing a low response time.

For the indoor tracking system, we are concerned with evalu- ating the following QoS properties:  ? Response time (RT). Response time is how long it takes to system to return the position of the tracked object.

Because the object?s position can change over time, it is important that response time be low as low as possible to ensure the obtained position is up-to-date.

Fig. 1. Illustration of the indoor tracking system setup.

? Error of tracked position. Error of tracked position is the distance between the actual object position and the position provided by the tracking system. The error should be as low as possible to increase the indoor object tracking system?s accuracy.

Lastly, while evaluating the QoS properties above, we assume the environment (i.e., the network, the devices, and operating system) is a fully trusted service. This means that we exclude the environment in our compositional trust model, but does not mean we cannot include the environment if necessary.

For example, if the environment?s network has a lot of jitter (i.e., the specified response time of the network is not trustworthy), then the network?s trust should also be included when evaluating trust of the composed system.

We selected this case study, because not only it contains distributed heterogeneous components, but also it has strict QoS requirements in the form of response time and accuracy.

B. Experimental Setup  Figure 1 shows the experimental setup of the indoor tracking system. As shown in this figure, three camera sensors track an object that is migrated between ten different predefined positions within the view range of the each camera. As the object is tracked, we measure the response time and error of each individual service and the composed system (i.e., the indoor tracking system). At each position, we measure 50 samples of response time and error of the tracked position.

We then calculate the uncertainty of each measured QoS property using the ratio of number of failures to provide the object?s location (e.g., not recognizing the object) to the number occurrences the service (individually or included in a composition) is invoked throughout its execution lifetime.

Similarly, the belief and disbelief values of the QoS proper- ties are calculated using the ratio of the number of occurrences that the reading adheres to a specified threshold value for the corresponding property to the number of occurrences the reading does not adhere to the threshold value. This calculation is based on past experience, and is considered ?seeding? the composition model. For example, the response time of the sensor2 was below 15ms in 304 readings, higher than 15ms in 46 readings, and the sensor was unable to recognize the object in 150 readings. Using the above concept, the trust  TABLE II SPECIFICATION OF RESPONSE TIME AND TRUST OF SERVICES  Service Response time Trust < B,D,U > Sensor1 (s1) 15ms < 0.59, 0.01, 0.40 > Sensor2 (s2) 15ms < 0.608, 0.092, 0.3 > Sensor3 (s3) 15ms < 0.328, 0.072, 0.6 > Fusion Service (s4) 4ms < 0.616, 0.084, 0.3 > Discovery Service (s0) 20ms < 0.623, 0.077, 0.3 > Environment (s5) 3ms < 1, 0, 0 > Composed system (S) 42ms < 0.58, 0.12, 0.3 >  TABLE III SPECIFICATION OF PROPERTIES AND TRUST OF SERVICES  Service Error Trust < B,D,U > Sensor1 (s1) 190cm < 0.600, 0, 0.400 > Sensor2 (s2) 190cm < 0.60, 0.10, 0.30 > Sensor3 (s3) 190cm < 0.398, 0.002, 0.60 > Fusion Service (s4) Correction ratio:  0.842 < 0.614, 0.086, 0.3 >  Discovery Service (s0) N/A N/A Environment (s5) N/A N/A Composed system (S) 160cm < 0.53, 0.17, 0.3 >  of the specified response time of the sensor2 (i.e. 15ms) is < 0.608, 0.092, 0.3 >. The specifications of QoS properties and trust values based on our past experience with the indoor track system are shown in the Table II and Table III.

Lastly, Figure 2 shows the complete service interaction diagram of the indoor object tracking system. As shown in this figure, the discovery service selects two of the most appropriate sensors according to accuracy and response time requirements, which are referred as non-deterministically se- lect sensor services. These services then track the object in parallel (referred to as composed sensor service) and provide the tracking result to the fusion service. Lastly, the fusion service outputs the tracked position to the client through the environment service, which is negligible in our experiments.

C. Experimental Results  As mentioned Section III-A, response time and error of tracked position are calculated by following a composing  ???????	?? ???????	?? ???????	??   ????????????? ??   ????????????????	??   ???????? ??????  ?????????????? ??????  ???????  ???????????? ?  !

" #  $  " %% #  &?????'???? ??? (  )??*?????'????????? ??????????????	?+?? "  )??*?????'????????? ??????????????	?+?? %  ,?'????????????? ???????	??? -  Fig. 2. Interaction patterns for the indoor object tracking system.

pattern of sensor, discovery, and fusion services. The non- deterministically selected sensor services (sx1, sx2) are com- posed of three sensor services (s1, s2, s3) using the exclusive choice pattern. When the composition operator and the trust composition operator related to the exclusive choice pattern are applied, the following composed property value and the corresponding trust values are obtained for each property:  Composed response time:  Rtsx1 = w1 ?Rts1 + w2 ?Rts2 + w3 ?Rts3 = 13 ? 15 + 13 ? 15 + 13 ? 15 = 15ms  Trust of composed response time:  T (Rtsx1) =< 0.554, 0.123, 0.433 >  Composed error:  Ersx1 = w1.Ers1 + w2.Ers2 + w3.Ers3 = 13 ? 190 + 13 ? 190 + 13 ? 190 = 190cm  Trust of composed error:  T (Ersx1) =< 0.566, 0.001, 0.433 >  In the equations above, we have assumed each camera service will be selected with equal probability (i.e., 13 ). Similarly, the property value and the trust value of the second non- deterministically selected sensor service Psx2 can be calcu- lated.

Composed sensor service s6 is composed of two non- deterministically selected sensor services (i.e., sx1 and sx2) using the split/join pattern. The properties of the sensor composed service are evaluated as shown in the following equations:  Composed response time:  Rts6 = max(Rtsx1 , Rtsx2) = max(15, 15) = 15ms  Trust of composed response time:  T (Rts6) =< 0.319, 0.014, 0.667 >  Composed error:  Ers6 = average(Ersx1 , Ersx2) = average(190, 190) = 190cm  Trust of composed error:  T (Ers6) =< 0.57, 0, 0.43 >  Finally, the object tracking system S is composed of discov- ery service s0, the composed sensor service s6, fusion service s4, and the environment s5 using the sequence pattern. The properties of the object tracking system are evaluated as shown in the following equations:  Composed response time:  RtS = Rts0 +Rts6 +Rts4 +Rts5 = 20 + 15 + 4 + 3 = 42ms  TABLE IV PREDICTED AND ACTUAL VALUES OF PROPERTIES AND TRUST  Trust of Property Predicted Actual Trust of RT < 0.263, 0.0, 0.737 > < 0.58, 0.12, 0.30 > Trust of Error < 0.422, 0.012, 0.566 > < 0.53, 0.17, 0.30 > Normalized Trust of RT  < 0.632, 0.368, 0 > < 0.73, 0.27, 0 >  Normalized Trust of Error  < 0.806, 0.194, 0 > < 0.705, 0.295, 0 >  Trust of composed response time:  T (RtS) =< 0.263, 0.000, 0.737 >  Composed error:  ErS = Ers6 .Ers4 = 190 ? 0.842 = 160cm  Trust of composed error:  T (ErS) =< 0.422, 0.012, 0.566 >  Lastly, the summary of the predicted and the actual trust values of the properties is shown in the table IV. As shown in this table, the predicted trust value of the proposed model is not mathematically equal to the actual trust value obtained from executing the composed system empirically. It shows comparatively very high uncertainty associated with the pre- dicted trust value. This is because the calculation process of the predicted trust value accumulates the uncertainty factor with the use of more mathematical operations. However, if the uncertainty is divided between the belief and disbelief with equal weights (indicated as normalized trust values in Table IV), then the predicted and actual trust value become comparable. The predicted trust value therefore conforms to the actual trust value obtained from empirical evaluations while presenting more uncertainty over the predicted results.



IV. RELATED WORKS  Hwang et al. [8] present composition operators for common QoS attributes and primitive interaction patterns. However, they are not estimating the trust associated with the composi- tion. In contrast, this paper provides trust operators associated with each of the composition operators for common QoS and primitive interaction patterns.

Alagar et al. [1] propose a formal approach for trustworthy composition considering safety, security and time factors.

Their composition model requires the participating compo- nents to be fully trustworthy. However, as it is common to use untrustworthy components in a composition (specially when third party libraries are required), it is important that the composition model be more flexible to include the use of untrustworthy components in the composition. In contrast, our model proposes composition operators that can be applied on components with different levels of trustworthiness.

Buford et al. [2] propose the idea of composition trust binding (i.e., a policy for composition) to integrate trusted systems among pervasive devices. However, such a model     restricts the composition only among a predefined set of services, which has a lower applicability in todays pervasive computing because of the dynamic nature of the services.

Our model assumes the presence of autonomous evaluation of individual services, and derives the trustworthiness of the composed system at the integration time based on various composition operators.

Sherchan et al. [16] present a trust ontology that identifies different types of trust (including composite trust and propa- gated trust) and their relationships in a service oriented system.

However, they do not provide a concrete model on assessing the composite trust, which is the main intention of our work.

Mclean el al. [11] and many others [17], [22] have pro- posed formal models for the composition of information flow security properties. Their work shows to preserve security properties in a composition, all the participating services should hold at least the separability property. In our work, we extend these models to evaluate trustworthiness of the composition of security properties.

Charpentier et al. [4], [5] present a model for reasoning out a composition of universal and existential composition opera- tors. In our work, we use these composition operators to find the corresponding trust operators in evaluating trustworthiness of the composition.

All the above mentioned models do not address the problem of assessing trust on the service compositions based on trust of autonomous individual services and formal trust operators.

Therefore our work contributes to the state of the art of trusted DRE systems research by presenting a formal model to predict trust of DRE systems.



V. CONCLUDING REMARKS  Trust is an important aspect of software systems that must be evaluated. As software systems become composed more from loosely coupled services, it is becoming harder to evaluate trust values of the composed system. This paper therefore proposed a trust composition model that facilitates evaluating trust of a system composed from independent services. The trust composition model is defined using composition oper- ators that are founded on subjective logic. Our experience applying our trust composition model to the indoor tracking system case study highlighted the following lessons learned and future research directions:  ? Probability theory-based operators. For key-value QoS properties, e.g., response time and availability, standard subjective logic operators can not be used directly as a trust operator. Instead, it is recommended that such QoS properties use operators based on probability theory.

? Prove trustworthiness of systems. Our current research efforts focused on validating trust of composed systems.

This is one aspect of the verification and validation (V&V) process for software systems. Future research includes extending our effort to support weakest pre- condition calculus [6]. We believe this will allow us to prove, to the extent feasible, trust values of composed  systems using subjective logic operators, and support the verification aspect of V&V for software systems.

? Generalize the trust model. We expect to incorporate a broader definition of trust in to our model, and validate it using case studies from more domains with different QoS properties.

