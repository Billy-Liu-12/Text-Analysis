USING CONSTRAINT TECHNOLOGY TO MINE FREQUENT ITEMSETS

Abstract: Constnant-based mining is introduced to efficiently sift  the useful itemsets or rules through a large number of mined ones. Two large classes of constraint-based frequent itemsets mining (monotone constraint and,succinct constraint) have been investigated. However, the problem of frequent itemsets mining with Tough Constraint has not been solved just because the complexity of the constraint. In this paper, against this problem, we propose a TCA algorithm (Tough Constraint-based frequent itemsets mining Algorithm) which uses the order as the preprocess to sdve the problem. The principle of the algorithm is to push the Tough Constraint deeply inside the candidate generation-and-test approach such as Apriori. We also extend it to the multi-constriant case. We conclude that we can improve the speed and efficiency in testing the candidate itemsets through pre-calculating the corresponding conditions under the multi-constraint.

Keywords:  Tough Constraint Data Mining; Association Rules; frequent itemsets;  1 Introduction  Data mining is to efficiently discover interesting rules from large collections of data. The problem of mining association rules [ 1,2,3] has been the subject of numerous studies.

The standard frame of mining association rules is S-C (Support-Confidence). Firstly, we have to find the frequent itemsets whose support is above the preset min-support.

. Secondly, we calculate the interestingness ratio of the rule such as confidence. If the ratio is above the preset threshold, the rule is what we want to find. After determining the frequent itemsets, the solution to calculating the interestingness ratio is rather straightforward. So we focus on how to find the frequent itemsets efficiently.

However, frequent pattern mining often generates a very large number of frequent itemsets and rules. We have to sift through them to find the rules we are interested in.

This is a complicated and difficult work.

Recently, some researchers have proposed the frequent itemsets mining with constraint [4]. Using the constraint,  we can put our focus on the part of the database where we are interested in and find the useful rules.

There are also researchers [5] who studied how to combine the two approaches. However, to the best of our knowledge, the problem: combining one of the complex constraint---Tough Constraint with frequent itemsets mining has not been studied.

In this paper, we show how to combine the Tough Constraint and frequent itemsets mining deeply into Apriori-style TCA Algorithm. We also extend it to multi-constraint case.

In section 2, we introduce the Tough Constraint. In section 3, we propose the TCA Algorithm. In section 4, we study how to extend it to multi-constriants case and Section 5 is a short conclusion.

2 Tough Constaint  The constraint what we are often used can be sorted into three kinds through the assemble function: Distributive such as count, mount, max, min; Algebraic such as average, standard-deviation; Holistic such as median, mode.

From the property, the constraint can also be classified into three kinds: Monotone include monotone and Anti-monotone, Succinct and Neither monotone nor succinct(Tough Constraint).

In paper [5], the researchers have already studied the frequent itemset mining with monotone and succinct constraint. However toward the Tough Constraint, he proposes to convert it to weaker constraint. It cannot solve the problem completely.

In paper [6] the researchers have brought forward the notion: Convertible Constraint. They convert the Tough Constraint to monotone and succinct constraint through ordering the data at first. Let us introduce the concept of prefix. E.g., a is the prefix of ad and ad is the prefix of adg.

Suppose we have the items <a,d,g,sj,l> and set a=30, d=10, g=15, s=O, j=20, 1=5, choose avg ( S )  25 as the Tough Constraint. We can easily find the constraint is Tough if the items are placed in this order. But if we re-order the items in descendent order, the Tough Constraint has been  0-7803-7865-2/03/$17.00 02003 IEEE  mailto:E-MAIL:jialei7829@hotmail.com mailto:prq44@hotmail.com mailto:lyygx@sohu.com   converted to monotone constraint with the anti-monotone property. So we conclude that after careful pre-process such as re-order the items, Tough Constraint can be converted to monotone constraint.

There have been many algorithms developed for fast mining of frequent pattems, which can be classified into two categories. The first category is candidate generation-and-test approach such as Apriori. The second category is pattern-growth methods such as FP-tree [7]. In this paper, we will study how to use the algorithms?belong to the first category to solve the problem of mining frequent itemsets with Tough Constraint.

-30 - -   Transaction ID  3 Using the generation-and-test approach to mine frequent itemsets with Tough Constraint  Items in transaction  a,b,c,d,f b,c,d,f,g,h The classical generation-and-test approach is Apriori  Algorithm. When we use it to mine frequent itemsets with Tough Constraint, we have two choice. Firstly, we can use the original Apriori Algorithm to mine the frequent itemsets, then use the constraint as post-process. The other is to push the Tough Constraint deeply into the Apriori Algorithm(Figure1). The Select process in the figure is to test the candidate itemsets with the minSup, the Filter process is to filter them according to the Tough  db,target=O Q new=Generate( I -item seed,db),Select and filter(new  t I seed=Combine()  I bQ seed=Select(seed),target+=filter(seed)+new @ --77 return target  Figure 1  Constriants. Beacause the Apriori algorithm satisfies the anti-monotone property, if we can convert the Tough Constraint to the constraint have the same property, it can  combine with the Apriori Algorithm efficiently. Using the first choice, we will mine a lot of unuseful frequent itemsets before the filter process. In order to decrease the Waste ratio and increase the efficiency, we choose the second one in this paper.

Table 1  Suppose we have an array of items: I={a,b,c,d,e,f,g,h} and transaction databases (Table 2). We assume the min-Sup=2 and set the number to the item (Table 1). .

Table 3  I 1-level ordered I freq-Items Transaction I I in tr-saction I  After ordering the items in value-descending order and test it with the min-Sup, we get the table 3. Suppose the Tough Constraint is avg ( S 1 L 25. After the order we find it has been converted to the monotone constraint with the anti-monotone property.

Level- 1 : The candidate 1-itemset satisfies min-Sup is a, f, g, d,  b, c, e, After the Tough Constraint(avg ( S  1 2 25) test, we conclude the frequent itemsets satisfy the constraint at level-1 is are a and f.

Level-2: According the Apriori Algorithm and the property of  the constraint, af must be the frequent itemsets. We also have to add the intersection of the frequent itemsets and the unfrequent itemsets at the previous level. Although g, d, b, c and e are not frequent itemset at level-1, the intersection between them and a or f may be the frequent one at level-2.

After generating the intersection, we can use the anti-monotone property when we test them with the      constraint.

Through the select process, we find the satisfying  itemsets are ag, ad, ab, ac, ae, fg, fd, fb, fc and fe. Then we filter from them according to the Tough Constraint. We find ag and ad satisfy the constraint, but ab doesn't. So we don't need to consider ac and ae, they cannot be frequent one according the anti-monotone property. We also find fg satisfies and fd doesn't, so we stop the generation.

We conclude the frequent itemsets satisfy the minSup and constraint at level-2 are af, ad and fg.

Level-3: According to the method we propose when we find the  frequent itemsets at level-2, we can find afd is what we want to find.

Finally, we elicit the frequent itemsets in table 3 which satisfy the pre-set minSup and Tough Constraint are a, f, af, ad, fg and afd.

This idea can also be used on the Tough Constraint that can be converted to monotone constraint.

Thus we propose the TCA Algorithm (Tough Constraint based Apriori Algorithm).

Input: T[ l](After order), Min-Sup, Tough Constraint.

Output: frequent itemsets.

TCA Algorithm:  1 ) L l  ={large 1-itemsets};  2 ) ~  1 = { L1 n Constraint 1 ; 3) L 1 = L 1 -L1; 4)T[2]=get_filtered(T[ 11, a ); 5)for(k=2;Lk-l# 4 ;k++) 6) Ck'=apriori_gen(Lk- 1);  Ck"=(Lk-1) n ( fi ); Ck=Ck'+Ck";  -  - - _  -  forall transactions t E T[2] Ct=subset(Ck,t);  c.count++; - forall candidates c E Ct do  end 14) end 15) Sk={c? Cklc.count2MinSup); 16) if(Tough Constraint has anti-monotone  17) Lk=test Sk according to the anti-monotone  18) if(Tough Constraint has monotone property after order)  19) Lk=test Sk according to the monotone property;  20)end  property after order)  property;  Answer= U kLk;  : h e  Learning and Cybernetics, Xi'an, 2-5 November 2003  4 Mining frequent itemsets under multi-constraint  Comparing with the single-constraint, the difficulty of mining frequent itemsts under multi-constraint is the complexity of the constraint. In single-constraint, after pre-process such as reorder, we can make full use of the anti-monotone or monotone property. However, under multi-constraint, we have to analyze the property of the constraint at first. In this paper, we focus on the property of the constraint. We want to explore under which conditions the multi-constraint also have the anti-monotone or monotone property, then they can be pushed deeply in the apriori-style algorithm.

In order not to lose the universality and to be simple, we study the two-constraint at first. Take into consideration of the particularity of the Tough constraint, we suppose one of the constraint belong to it.

Note that what we are considering is a constraint function composed by two constraint, not just two single constraint. Just because if we face two single constraint, we can test it step by step.

Definition: I are the symbol of all itemsets under ascend order.

A() and B() are two constraint. One of them is a Tough  constraint. After ordering, A(I) and B(1) may be both in ascendent or descendent order under the constraint. Also maybe one is ascend order; the other in descend order.

@ is a operator including 11+1',11-11,11 x "," + 'I, etc.(We study the four kinds of operators in this paper.)  So we have the function A(I)@ B(1). We have the following questions:  Q1: If A(1) and B(1) are both in ascendent order, @ is II I 1 1 1 _ 1 1 1 1  + ,  A(I) @ B(1) has the anti-monotone or monotone property?

42: If A(1) and B(1) are both in descendent order, @ is lI+ll 11-11 I 1  A(1) @ B(1) has the anti-monotone or monotone property?

43: If one of A(1) and B(I) is in descendent order, the other is in ascendent order, @  , will the function A(1) @ B(I) has the 11 llor I1  + II anti-monotone or monotone property?

We suppose A(1) and B(1) are both positive.

According to Q 1 : Because A(1) and B(I) are both in ascendent order,'  when @ is "+ I1  or " x ", A(1) @ B(I) must be in ascendent order. So we focus on the conditions when @ is "-". The 'I + I' case can be solved in the same way.

, x I' or It + 'I, will the function  x I' or " + 'I, will the function 9 7  is 11+11,11-'1,  when 0 is "-"      We choose l/avg() and l/max() as the constraint.

Obviously, l/avg() is a Tough constraint and l/max() is not.

We study the function: l/avg()-l/max().

The general function is: Xl+Xj+X(n+l)  -1/X(n+l)) Ak  (llfl+*~Xn-l/Xi)-(l/ Ak  (1) when i=j=l,Ak=2: The function=  + x(n + l) - l /X (n  + 1)) X1+ Xn (1 / - - 1 / Xn) - (1 / 2 2  - (X(n -t 1) -Xi$(2Xfln + 1) - (Xl  + Xn)(Xl +X(n + 1)) - Xqn+l)(Xr+Xn)(Xl+X(n+l))  .: (X(n+ 1 )-Xn)>O,denominator>O  .. The function >O if (X1)/'2 + XlXn  I Xn - X1 X ( n  + 1) >  10 otherwise (2) when i=j>l,Ak=k; The function=  (X(n+l) -X4[M@+l) -(XI +Xi+X@@l+Xi+X(n +1))] Xd@+l)@ +Xi+X#Jl+Xi+X(n +1))  *: (X(n+ 1)-Xn)>O,denominator>O :. The function >O if  AXnX(n + 1) - (X1+ Xi + Xn)(Xl +Xi) X1+ Xi + Xn X ( n  + 1) <  6 0  otherwise (3) when j>i>l,Ak=k; The function=  Xl+xj+X(n+l) -1/X(n+l)) k  According to numerator: [Xl +X2+( 1 -A)Xn]X,+I"2+[AXn(Xj-Xi)-Xn(X 1 +X2+  if Xl+X2+(1-A)Xn>O: (1) A>O, we get two solutions tl,t2(tl<t2).

when X,+,<tl or X,+,>t2; The function>O when t 1 5 Xn+l 5 t2; The function I O  Xn)(X 1 +Xj)]X,+, -Xn(Xl +Xj)(X 1 +X2+Xn)  (2) A =O, we get one solution t3.

The b c t i o n  2 0 (3) A <O, we get no solution.

Just because the nomerator is a concave function, the  if Xl+X2+(1-A)Xn=O: The function >O if Xn+l> Xn(Xl+Xj)(Xl+X2+Xn)/AXn(Xj-Xi) -Xn(Xl +X2+Xn)(Xl+Xj) SO otherwise if X 1 +X2+( 1 -A)Xn<O : (1) A>O, we get two solutions tl,t2(tl<t2).

when X,+]<tl or X,+l>t2; The function<O when tl  _< Xn+l 5 t2; (2) A =O, we get one solution t3.

The function 5 0 (3) A <O, we get no solution.

Just because the nomerator is a convex function, the  Using the same method, we can solve 4 2  and 43.

Through the analysis, we can conclude that: When the function>O, A(1) @ B(1) is in' descendent  order. We can push it deeply into the Apriori-style algorithm because it follows the anti-monotone property.

When the function<O, A(1) @ B(1) is in ascendent order. We can push it deeply into the Apriori-style algorithm because it follows the monotone property.

The complexity of the calculation is high under multi-constraint. In the above example, we educe concave function, convex function and high order function when we calculate the Xn+]. We can deduct that the complexity of calculation will improve in Exponent.

In general, we know the constraint function in advance.

So we can calculate the condition when the function has the anti-monotone or monotone property. It will not only push the constraint deeply into the Apriori-style algorithm but also improve the speed and efficiency when we test the candidate frequent itemsets.

function>O  The function 2 0  functions 0  5 Conclusion  It is a complicated and difficult work to sift the useful knowledge through a very large number of frequent itemsets and rules. So we introduce to mine the frequent itemsets with constraint. It will help us to focus our eyes on the part of the databases where we are interested in. Some researchers have studied the frequent itemsets mining with monotone and succinct constraint. However toward the Tough Constraint, they haven't solved it completely. In this paper, we use the TCA Algorithm to solve this problem. We      also pay attention to how to extend the mining process to multi-constraint case. We conclude that, through pre-calculating the corresponding conditions under the multi-constraint, we can improve the speed and efficiency in testing the candidate itemsets.

'References  AGRAWAL, R., IMIELINSKI, T., and SWAMI, A.

(1993): Mining association rules between sets of items in large databases. SIGMOD 93,pp 207-216 AGRAWAL, R., and SRIKANT, R. (1994): Fast algorithms for mining association rules. VLDB 94,pp  HAN, J., and FU, Y. (1995): Discovery of multiple-level association rules from large databases.

SRIKANT, R., W, Q., and AGRAWAL, R.(1997): Mining association rules with item constraint. In Proc.

1997 Int. Conf. Knowledge Discovery and Data mining (KDD'97), pages67-73, NewBeach, CA, 1997.

NG, R., LAKSHMANAN, L.V.S., HAN, J., and PANG, A. (1998): Exploratory mining and pruning optimizations of constrained associations rules. In Proc. 1998 ACM-SIGMOD Int. Conf. Management of Data. (SIGMODPS), pages 13-24,Seattle, WA, 1998.

PEI, J., HAN, J., and LAKSHMANAN, L.V.S.(2001): Mining frequent itemsets with convertible constraint.

