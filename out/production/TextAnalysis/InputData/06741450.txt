Efficient Social Graph Augmentation Schemes for a Peer to Peer Social Networking Service

Abstract?For the last several years, it has been a popular research issue to develop an efficient peer to peer social net- working service to protect privacy. One of the main problem in a p2p based SNS is that the data may not be available due to the failure of peers. To alleviate this problem , [1] uses many common neighbors between two neighboring nodes so that the data availability can increase. One critical issue is that the data availability depends on the size of common neighbors. In this paper, we propose three graph augmentation schemes to make the number of common neighbors of every link satisfy the given target size, thus the target availability.



I. INTRODUCTION Peer to peer based social networking services are gaining  interest due to its scalability and privacy protection for the last several years [2], [3]. However, the idea of maintaining data in peers incurs the data unavailability. Basically, the data stored in other peers may not be available due to failures or offline of the peers which have the data. One such system is proposed in [1].

[1] proposes a data storing and search mechanism that is  quite scalable and easy to implement. Basically, the data is stored at the data originator and the intended data recipients, which are the one-hop neighbors of the data originator. If a neighbor is offline when the data is created, the neighbor should contact the data originator or the neighbors of the data originator to get the data. In [1], this process has been simplified so that each neighbor just contacts its own one-hop neighbors to get the data because the recipient?s neighbors are likely to be the neighbors of the data originator. In this situation, the number of common neighbors between two neighboring nodes is a very critical factor. Actually, [1] shows that the availability, Pav , can be represented as (1).

Pav(x ? y) = 1? ( E(Y )  E(X) + E(Y ) )|N(x)?N(y)| (1)  where N(x) and N(y) are the neighbors of nodes x and y respectively, and E(X) is the expected online duration and E(Y ) is the expected offline duration. [1] analyzes a social graph obtained from a real social network and find that many neighboring links does not have enough common  *This research was supported by Seoul Creative Human Development Program (HM120006) and by Basic Science Research Program through the National Research Foundation of Korea(NRF) funded by the Ministry of Education, Science and Technology(NRF-2013R1A1A2007113). Sanghwan Lee is the corresponding author.

x y  a  b  c d  e f  g  h  i  Fig. 1. Social graph augmentation for a social link x and y  neighbors, thus Pav is unacceptable. In this paper, we propose three heuristic augmentation algorithms that make the number of common neighbors of each link be larger than a given threshold. We also show the performance evaluation in terms of the number of added links while satisfying the threshold.



II. GRAPH AUGMENTATION SCHEMES  In this section, we describe the graph augmentation problem in detail and propose three different heuristic augmentation algorithms. Let us consider an example in Fig. 1. Nodes x and y are adjacent and have three common neighbors c, d, and e. In the augmentation problem, with a given minimum common size, Cmin, for the number of common neighbors, we want to minimize the number of newly added links while satisfying Cmin common neighbors for every original link.

Suppose we set Cmin = 5. In Fig. 1, the number of common neighbors between x and y is 3. Thus, we need to add two more common neighbors, for example, b and f .

To add common neighbors, thus links, we first need to find  candidate nodes for the common neighbors. In our proposed algorithms, we consider the neighbors of x and y except the original common neighbors as the candidates. In Fig. 1, nodes a, b, g, h, and i are the candidates. It should be noted that the original common neighbors, c, d, and e are not included in the candidate set. The reason why we choose the candidate like this is because with one addition link we can increase the number of common neighbors by one. Otherwise, if the new common neighbor is a node that is not a neighbor of either x or y, we need to add two links to increase one common neighbor.

After getting the candidate set, we need to select the needed  number of new common neighbors. In this paper, we consider three different heuristics for the selection : Minimum (in the order of increasing degree), Random (randomly), and Maximum (in the order of decreasing degree). The intuition               0  10  20  30  40  50  A dd  ed L  in ks  (x  )  Mininum Cmn Size  Minimum Random  Maximum  Fig. 2. Number of added links over Minimum Common Size, Cmin  behind the Minimum heuristic is that the nodes with small degree may have many links with the number of common neighbors below Cmin. Thus, we can increase the number of common neighbors of those links at the same time by adding a link to the node. Similarly the intuition behind the Maximum heuristic is that the nodes with large degree have many links, which means that it is likely that many of the links have less than Cmin common neighbors. Thus, we can increase the number of common neighbors of those links at the same time. The Random heuristic is like in the middle of the two extremes. The basic framework of the augmentation algorithms is described in Algo. 1.

Algorithm 1 Augment(x, y, Cmin) 1: Scmn ? common neighbors of nodes x and y 2: n ? Cmin - |Scmn| 3: Scd ? Candidates of node x and y 4: if n ? |Scd| then 5: Select n nodes from Scd with heuristics 6: else 7: Select all the nodes in Scd and n? |Scd| other nodes

III. PERFORMANCE EVALUATION AND CONCLUSION  In this section, we show the performance of our proposed algorithms. To evaluate the performance, we use the social graph used in [1], which is borrowed from Okurt SNS. The data set contains 80,492 nodes and 5,899,881 links. First, we compute the number of links to be added to satisfy Cmin criteria. We vary Cmin from 10 to 50. Fig. 2 shows the number of newly added links. As Cmin increases, the number of added links also increases, which is quite expected. It should be noted that the Maximum heuristic adds least number of links. This is conjectured that the nodes of large degree may have many links that have less than Cmin common neighbors. Actually, the number of added links are quite large compared to the number of original links (about 6 million).

Similarly, the common sizes increase linearly as Cmin  increases as can be seen in Fig. 3, which shows the 10th, 50th, 90th percentile, and average common sizes. Thus, we may need to add a large number of links to increase the common sizes. However, what we really care is the availability, Pav.

0  10  20  30  40  50  C om  m on  S iz  e  Minimum Cmn Size  Minimum Random  Maximum  Fig. 3. Distribution of common sizes over Cmin   0.2  0.4  0.6  0.8   0  10  20  30  40  50 P  av  Minimum Cmn Size  Minimum Random  Maximum  Fig. 4. Distribution of Pavs over Cmin  Fig. 4 shows the distribution (min, median, max, average) of Pavs as Cmin varies with E(X) = 20 minutes and E(Y ) = 523 minutes. Pav increases quickly with the increase of Cmin and then saturates, which means that we only need to increase Cmin by small amount so that only small number of new links are added. For example, with Cmin = 20, we can achieve about Pav = 0.9, which means that less than 5 ? 106 new links are to be added. In short, with relatively small number of new links, we can achieve high availability.

In conclusion, in this paper, we propose three social graph  augmentation algorithms for a peer to peer social network service and show the performance of the three algorithms which use different heuristics for the selection of new common neighbors. In the future, we plan to investigate algorithms considering other factors such as transmission load and the online duration.

