978-1-4244-9008-0/10/$26.00 2010 IEEE   38

Abstract Due to the widespread computerization and  affordable storage facilities, there exists enormous amount of  information in databases belonging to different enterprises. The  ultimate intent of this massive data collection is the utilization of  this to achieve competitive benefits, by determining formerly  unidentified patterns in data that can direct the process of  decision making. Data mining, the core step of Knowledge  Discovery in Databases (KDD) is the process of applying  computational techniques that, under acceptable computational  efficiency limitations, produce a particular enumeration of  patterns. Data mining tasks can be classified in to two categories.

Descriptive mining and Predictive mining. Association Rule  mining (ARM), Clustering and sequential pattern mining are  some of the descriptive mining. The main advantages of  Association rules are simplicity, intuitiveness and freedom from  model-based assumptions. In this paper, an extensive survey  of  Association rule in regard to temporal databases and utilities  are done. The proposed algorithm is able to mine temporal  association rules based on utilities by adapting the support with  relevant to the time periods and utility. An approach of mining  UTARM is designed and the efficiency of the method is discussed.

Keywords- Data mining; utility; temporal mining; Descriptive  mining;Predictive mining; Association rule mining.



I. INTRODUCTION    A great deal of attention has been received by the  association rule mining task since its introduction in 1993 by  Agarwal et al [5]. Now also, mining of such rules is a most  prevalent pattern-discovery technique in KDD [1][2]and[3]  The task of finding collection of statistically related data  attributes in the original data is known as Association Rule  Mining. Extracting interesting correlations, frequent patterns,  associations or casual structures between sets of items in the  transaction databases or other repositories is the objective of  ARM. Association rule is produced in two steps. First, all  frequent itemsets in a database are extracted utilizing a  minimum support. The second step creates rules using frequent  itemsets and minimum confidence constraints. Association rule  mining are extensively used in several fields, for example  telecommunication networks, market and risk management,  inventory control and more [4]. The concept of Temporal  Association Rules (TAR) which includes time expressions into  association rules to handle the time series for solving the  problem is introduced in [7]. A normal temporal association  rule is said to be frequent within its Maximum Common  exhibition Period (MCP) if and only if its support and  confidence are greater than the required minimum support  threshold and minimum confidence respectively[7],[9]. The  association rules known as Temporal Association rules (TAR)  are applicable during specific time periods [6][8][10]. The  inclusion of constraints in the rule mining practical applications  where utility mining [12][13][14] is likely to be helpful. The  objective of utility mining is to discover high utility itemsets  which are attributable to a considerable portion of the total  utility[11].

In this paper, we have proposed a novel algorithm,  UTARM (Utility Based Temporal Association Rule Mining),  which includes the concept of utility mining and temporal  association rule mining. The basic idea of UTARM is to  partition the transaction database according to the time periods  ( e.g week, month, quarter and year ) and then sequentially  mine the association rules from each partition. Each partition  has different utility table, which contains a set of numerical  values reflecting the profit of an item.



II. PROBLEM DESCRIPTION  In this paper, we have presented an efficient algorithm for  mining of utility based temporal association rules by    combining both temporal and utility attributes. The mining of  utility based temporal association rules is described as follows  with some basic definitions.

The input database D has a set of partitions, D  ={P1,P2,Pn} where each partition have a set of transactions  T={T1,T2,T3.,Ts} and has a set of item X ={x1,x2,.,xn}. Each  item in the partition Pk contains different utility values.

A. Definitions used in the proposed method  Definition 1. The  FUsupport ( (Frequent Utility) of an item xi in  a partition Pk is computed as follows:  FU support ( xi, Pk ) = a / b  , a and b are calculated as follows:    a =  f ( xi , Pk ) * Eu( xi , Pk )  *  ?    Iu ( xi ,Tq )                      (1)  Tq?Pk  b = NPk                                                                                                                              (2)       f ( xi , Pk ) is the occurrence frequency of item  xi in all  transactions of   Pk .

NPk is the total number of transactions in the partition  database Pk .

Eu( xi , Pk )  is the External utility of item xi in the  partition  Pk`  Iu(xi,Tq)  is internal utility of  the item item xi in the  partition  Pk`  Definition 2. FUsupport of an  itemset  X, denoted as  FUsupport(X,Pk) = c/d where c and d are computed as follows :  c = f ( X, Pk ) * ?   (  Eu ( xi,Pk )  *     ?    Iu( xi,Tq )  )           (3)                      xi?Pk  xi?X,Tq? Pk  d= NPk                                                                                                                                   (4)    Definition 3. The FUsupport ( Frequent  Temporal Utility) of an  itemset  is defined as the sum of all frequent utility support  values of the itemset in the partition period  t  to  n, where t  is  the starting partition and  n is the last partition of the itemset.

n  FTUsupport (Xt,n) = ?    FUsupport (X,Pk)                                    (5)  k=t    Definition 4. An itemset  X t ,n  is said to be a  FTU itemset  when the  FTUsupport of  an itemset value is larger than the    min_FTUsupport.

Definition 5. The support of an rule  ( X ? Y) t, n  is computed  as :          P (X ?  Y)/ NPt,n  NPt,n  is the number of transactions in the partition period  t  to  n .

Definition 6. The confidence of the rule  ( X ? Y) t, n  is  defined as,  conf( X ? Y) t, n  =FTUsupport( X ? Y) t, n  / FTUsupport( X )t,n     (6)    Definition 7. A rule ( X ? Y) t, n  is said to be utility based  temporal association rule if and only if  :  FTUsupport ( X ? Y ) t, n  ? min_FTUsupport                                              (7)  conf(( X ? Y ) t, n  ? minconf                                                                              (8)  B. Proposed method UTARM  Let D be a transaction database containing a set of  transactions where each item has different time granularities.

The database D includes n number of partitions based on the  time periods, , D = {P1,P2,Pn}. For each partition, we have  a different utility table UT < I, U >, which ensures that the  utility value of every item is changed in accordance with time.

Our algorithm directly generates the candidate 2-itemsets  instead of candidate 1-itemsets in traditional ARM to reduce  the size of the candidate itemsets, thus fully utilizing the scan  reduction. This feature of our algorithm efficiently reduces the  CPU time and memory space required and also increases the  performance of UTARM  C. Outline of  UTARM  Input - The Utility table, min_FTUsupport , minconf and  Partitioned database D = },...,,,{ 321 nPPPP  Output - UTARM rules    Procedure  1) Generate all possible candidate 2-itemsets from  partition (P1).

2) Mining of FTU 2-itemsets from (P1).

3) Generating candidate 2-itemsets from partition (P2)  and mining of FTU 2-itemsets (P1+P2).

4) Mining of FTU 2-itemsets (P1+P2+P3+.+Pn)  5) Generate all FTU 1-itemsets from FTU 2-itemsets and  mining of all FTU k-itemsets ( K ? 2)    6) Generate association rules using FTU itemsets.

D. Steps in the Algorithm  1) Generate all possible candidate 2-itemsets from  partition 1.

Example: Let D be a sample database given in the Fig.1  and the utility table correspondingly to the sample database is  given in Table 1. The input database is partitioned in three  partition P1,P2 and P3 by means of month granularity time  period. Assume min_FTUsupport = 82 and minconf =  1. From the  partition P1, all  possible candidate 2-itemsets such as :{(1,2),  (1,3), (1,4), (1,5),(1,6), (2,3), (2,4), (2,4), (2,5), (2,6), (3,4),  (3,5),(3,6),(4,5),(4,6),(5,6)  } are generated.

2) Mining of FTU 2-itemsets from  P1  Example: Consider a two-itemset {2,3}. External utility of  items {2} and {3} in partition  P 1  are 10 and 8 which are  obtained from the utility table. The internal utility value of  items are obtained by  computing  ?    Iu( {2},Tq)  =  12       and  Tq ? P1    ?    Iu( {3},Tq)  =  16  Tq ? P1  respectively. Then, the utility value of an itemset {2,3} is  U(2,3) = (12*10) + (16*8) = 248 and the frequency of itemset  {2,3} is  f  ( { 2, 3 } , P1 )  =  2, so that ,  the frequent utility  support of itemset {2,3} is  FTUsupport(2,3) = (2*248)/4 = 124.

Figure 1.  Sample Database     Since  124 > min_FTUsupport  The itemset {2,3} is an FTU 2-    itemset.

The same procedure is repeated for all other candidate 2-  itemsets. Finally the itemsets whose  FTU support  values falling  below  min_FTUsupport    are removed and the selected itemsets  are considered as FTU 2-itemsets of partition 1.

TABLE I.  UTILITY TABLE                  3) Generating candidate 2-itemsets from partition P2 and  mining of FTU 2-itemsets (P1 + P2).

Example: The partition P2 is taken into account and the  candidate 2-itemsets in partition P2  are generated. For each  candidate 2-itemsets, FTUsupport values are computed based on  the procedure described in the previous step. In addition, the  candidate 2-itemsets that are satisfying min_FTUsupport  in the  previous step may or may not be a FTU 2-itemsets in a current  partition P2. It is identified by jointly computing its occurrence  frequency value and also its utility values in partition P1 + P2 .

Then, the candidate 2-itemsets whose FTUsupport values  greater than min_FTUsupport are selected as FTU 2-itemsets in  both partitions P1 + P2 .The itemsets that are obtained from  the previous partition to the current partition are called as  ?-  type  candidate itemsets and the newly generated candidate  itemsets in the current partition P2 is called as ?-type candidate  itemsets.

From the sample database, FTUsupport    of ?-type  itemset  (2,3) is calculated as itemset is computed as 84.5. Similarly,  FTUsupport for all itemsets in ?-type  and ?-type are calculated.

The itemsets are filtered based on the min_FTUsupport. From  the sample database the itemsets {(2,3),(3,5)} are selected for  the next step.

4) Mining of FTU 2-itemsets (P1 + P2 +....+Pn)  Example : In this step the partition P 3 s considered and all    FTU 2-itemsets are  computed based on the previous step. The  above process is repeated until all the partition Pn is processed  to mine only those FTU 2-itemsets. In step the itemsets  {(2,6),(3,6)} are selected for the next partition.

5)  Generate all FTU 1-itemsets from FTU 2-itemsets  Example : In this step, the resultant FTU 2- itemsets are  used for generating the candidate 1-itemsets. In our sample  database, we have generated the candidate1-itemsets { 23,3 ,  63,3,33,3,63,3} from FTU 2-itemsets  {(2,6)3,3,(3,6)3,3} and the  redundant sub-itemset  (63,3 ) is eliminated to provide the  candidate 1-itemsets as {23,3 , 63,3,33,3}. Then , FTUsupport  values of these sub-itemsets are calculated by scanning the  database. Here, the sub-itemset  33,3 is removed since its  FTUsupport  is less than the min_FTUsupport value.

6) Mining of all FTU k-itemsets ( K ? 2 ).

Example: The FTU 3 itemsets are generated by  combining the FTU 2itemsets in accordance with the time  property. Then, the occurrence frequency and also the utility  support values of the FTU 3-itesets are calculated by scanning  the database. The generated candidate 3itemsets, whose  FTU-support is greater than min_FTUsupport    are termed as  FTU 3-itemsets. By using these procedures FTU K-itemsets  (K >3) are mined from the database.

In this example the candidate 3-itemset (2,3,6)3,3 is  generated by combing the FTU 2-itemsets (2,6)3,3 and (3,6)3,3 .

Then the corresponding FTUsupport value of candidate 3  itemsets are computed and also the FTU 3-itemsets are  selected based on the  min_FTUsupport  value.

7)  Generate association rules using FTU itemsets.

Example : In this step, we have generated utility oriented  temporal association rules using all FTU itemsets in the form  of ( X ? Y) t, n .The rule is said to be temporal utility oriented  association rules only if the confidence of the rule ( X ? Y) t, n  satisfies the minconf value.Considering the FTU itemset  (2,3,6)3,3 , the possible rules such as, (2?3,6)3,3, (3?2,6)3,3,  (6?2,3)3,3, (3,6?2)3,3, (2,6?3)3,3,(2,3?6)3,3 are generated  and the confidence of those rules are computed based on the  Definition 6. Based on minconf  the following rules, (2?6)3,3  ,(6?3)3,3,(3,6?2)3,3  are selected as utility oriented temporal  association rules in Table 2.

TABLE II.  UTILITY ORIENTED TEMPORAL ASSOCIATION RULES  Rules Confidence    (2?6)3,3  (6?2)3,3  (2?3,6)3,3  (3,6?2)3,3  2.28  1.78  0.98  1.35

III. EXPERIMENTAL RESULTS  The experimental results of the UTARM algorithm for  mining of utility oriented temporal association rules are  explained in this section.  The Proposed UTARM algorithm  has been implemented using JAVA (jdk 1.6).  For  experimenting , we have used T10I4D100K dataset[15],which  is widely accepted synthetic data generated using existing  tools.

T10I4D100K : This dataset contains 100,000 transactions  and 870 distinct items. T10I4100K denotes the average size of  transactions(T), Average size of maximal potentially large  itemsets(I) and the number of transactions(D). In our case, the  dataset should have number of partitions, which contain a set  of transactions and every item presented should have quantity  and profit. So, preprocessing is done, i.e., we divide the input  database into partitions. For each partition we used a random  number generator to generate random numbers, which mimic  the quantity of an item sold for each transaction. Also, for  each item in the partition, we have assigned random number  that specifies the profit vale. From the database, we have  partitions  Items  P1 P2 P3              -  -       -        Rules Confidence  (2?6)3,3  (6?2)3,3  (3,6?2)3,3  2.28  1.78  1.35     considered only 10,000 transactions to generate utility  oriented temporal association rules and 5 partitions are used  each with 200 transactions. The input database is given to the  proposed algorithm for mining utility oriented association  rules. For various support and confidence values, the rules are  generated and the results are given in Table 3 and Fig.2.

From the Table III we conclude that number of rules  generated is proportional to the support and confidence values.

These two measures filters the number of rules generated as  that of min_FTUsupport  and minconf plays  an important role for  generating utility oriented temporal association rules.

TABLE III.  RULES TABLE  Number of Rules  Min_conf Min_FTUsupport  =300  Min_FTUsuppor    t =400  Min_FTUsuppor  t =500  0.5  0.6  0.7  0.8  0.9

IV. CONCLUSION AND FUTURE WORK  We have presented an efficient algorithm for mining of  utility oriented temporal association rule. The proposed work  is extended from traditional ARM by incorporating the    temporal and utility factor for mining significant association  rules. The proposed algorithm mines FTU itemsets from the  database using the support computed by utility along with time  constraints and finally, the utility oriented temporal  association rules are generated. The experimentation is carried  out on publication database and the experimental results  proved that the proposed algorithm effectively discovers the  utility oriented temporal association rules. The above  algorithm can be extended for incremental mining.

