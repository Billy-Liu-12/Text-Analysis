<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">Fuzzy  Calendar Algebra and Its Applications to Data Mining

Abstract Temporal expressions are widely used in our daily life.

Calendar algebra has been studied for years to provide a formal speci?cation for constructing temporal expres- sions. However, temporal requirements speci?ed by hu- man beings tend to be ill-de?ned or uncertain. To deal with such kind of uncertain information, we propose the fuzzy calendar algebra which allows users to describe de- sired temporal expressions easily and naturally. The op- erations provided re?ect the way in which people reason about temporal requirements in daily life. By using the fuzzy calendar algebra, users can de?ne complicated cal- endars with multiple time granularities in which di?er- ent time intervals can have di?erent weights according to their matching degrees to the speci?ed calendar. This can help users to discover the knowledge in the time in- tervals that are of interest to them. We show the useful- ness of the algebra by incorporating it with an incremen- tal data miner to mine fuzzy temporal association rules from temporal databases.

1. Introduction E?orts to construct and reason about temporal ex- pressions have been conducted for a long time and have become an important topic in the areas of temporal databases, problem solving, natural language under- standing, and data mining. Calendar algebra has been studied for years to provide a formal speci?cation for constructing temporal expressions in terms of closely related granularities (e.g., day, month, year) that are organized into calendars (e.g., 3 February, 1978). Key elements, especially expressiveness, e?ectiveness, and compactness, have been investigated for calendar alge- bra. For expressiveness, the class of calendars repre- sented in the formalism should be large enough to be of practical use. As for e?ectiveness, algorithms to rea- son about di?erent time granularities should be pro- vided in the framework. In particular, an e?ective so- lution should be provided to the problem of equiva- lence and classi?cation which concern the identity of two calendar representations and the containment of one calendar to another, respectively. Finally, tempo- ral expressions should be described as compact as pos- sible.

The research of calendar algebra can be roughly cat- egorized into two directions, the generation of tempo- ral granularities [4, 6, 11, 5, 8, 9, 15] and the de?nition of operations for constructing calendars [7, 20, 16, 14].

Various operations have been de?ned to allow users to capture the characteristics of calendars naturally and expressively. Soo et al. proposed the uniform represen- tation of calendar systems and tried to incorporate the idea into SQL2 [18]. A mechanism supporting the de?- nition of calendars and a query language for them were developed. Three kinds of data types, event, interval, and span, are de?ned in the query language. In [7],  another calendar system that supports calendars in a database system with extensible relational and active features was proposed. A language was developed to support the speci?cation of a calendar, and operations like dicing and slicing were de?ned for creating desired time intervals. Other operations, such as merge, select,    time intervals. Other operations, such as merge, select, and extract, were also proposed in [20]. Features about calendar operations were also studied. Ramaswamy et al. [16] used calendar algebra to select interesting time periods in which knowledge could be discovered. Three operations, always, sometimes, and temporal, were in- troduced to specify queries in the object-oriented con- text in [14]. These operations are to be used to eval- uate a proposition or answer questions, e.g., whether an event always/sometimes occurs in a time period, or when a certain event holds. However, temporal require- ments speci?ed by human beings tend to be ill-de?ned or uncertain. To deal with such kind of uncertain infor- mation, we borrow the fuzzy set theory [19] and pro- pose the fuzzy calendar algebra to allow users to de- scribe desired temporal expressions easily and natu- Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME?04) 1530-1311/04 $20.00 ? 2004 IEEE rally in terms of fuzzy calendars.

Five operations, and, or, not, xor, and sub, are provided to help users construct and manipulate com- plicated fuzzy calendars. These operations re?ect the way in which people reason about temporal require- ments in daily life. By using the fuzzy calendar alge- bra, users can de?ne complicated calendars with multi- ple time granularities in which di?erent time intervals can have di?erent weights according to their matching degrees to the speci?ed calendar. This can help users to discover the knowledge in the time intervals that are of interest to them. We show the usefulness of the alge- bra by incorporating it with an incremental data miner to mine fuzzy temporal association rules from temporal databases. Firstly, the transactions of the database are divided into a sequence of partitions. Then the weight of each partition is inferred, denoting the matching de- gree of the corresponding time period to the fuzzy cal- endar speci?ed in the user?s queries. Temporal patterns in the divided time periods of di?erent matching de- grees are then e?ciently produced, and the number of database scans can be e?ectively reduced. Experimen- tal results have shown that this approach of ?nding fuzzy temporal association rules is very e?ective.

The rest of the paper is organized as follows. In Sec- tion 2, the fuzzy calendar algebra, together with the construction of fuzzy calendars, is described. Opera- tions for the fuzzy calendar algebra are de?ned. A for- mal description about fuzzy temporal association rules is given and the process of discovering fuzzy temporal association rules from temporal databases is described in Section 3. Simulation results are presented in Sec- tion 4. Finally, a conclusion is given in Section 5.

2. Fuzzy Calendar Algebra A calendar is, in general, a structured collection of time intervals. Operations such as during, overlaps, meets, etc., have been proposed for users to construct their own calendars [16]. However, it is hard or even im- possible for users to provide a crisp description about their desired calendars. To formulate human reason- ing into the process of knowledge discovery, fuzzy the-  ory is adopted for the construction of calendars in this section. Fuzzy concepts and operations are introduced to help users express their desired calendars easily and conveniently.

2.1. Basic Fuzzy Calendars To construct a calendar, the hierarchy of time gran- ularity, e.g. week, month, and year, has to be deter- mined to handle descriptions of multiple time granu- (a) (b) (c) Figure 1. Basic fuzzy calendars associated with    Figure 1. Basic fuzzy calendars associated with the time granularity of (a) week, (b) month, and (c) year.

larities [10]. For each time granularity, fuzzy sets which describe the distribution of all the time intervals in the time granularity can be speci?ed. Each fuzzy descrip- tion of a time granularity, e.g., in the middle of a year, at the very beginning of a month, or at the end of a week, etc., forms a basic fuzzy calendar.

De?nition 1 A basic fuzzy calendar, A, characterizes a fuzzy proposition about the collection of time intervals in a time granularity U , described by a membership func- tion ?A where ?A : Ti ? [0, 1] for every time interval Ti ? U . The function value ?A(Ti) indicates the matching degree of Ti to A.

Some example basic fuzzy calendars are shown in Fig- ure 1. Usually, the shapes and the number of fuzzy sets describing a time granularity are arbitrarily speci?ed by the user. Hedges such as very and more or less can also be used. With such fuzzy descriptions about time, users don?t have to know the exact boundaries between interesting and non-interesting time intervals. Further- more, the time intervals which are more important can have a larger membership degree and will contribute a bigger in?uence, which is intuitively desirable. Fuzzy calendars can also be used to describe crisp time in- tervals. For example, Wednesday and May can be de- scribed by fuzzy calendars with singletons, as shown in Figure 2. Temporal relations such as before and after Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME?04) 1530-1311/04 $20.00 ? 2004 IEEE (a) (b) Figure 2. Singletons describing crisp time inter- vals, (a) Wednesday and (b) May, respectively.

(a) (b) Figure 3. Membership functions describing the years (a) before and (b) after year 2000, respec- tively.

can also be represented by setting membership func- tions to be step functions, as shown in Figure 3.

2.2. Operations on Fuzzy Calendars In real life, complicated temporal expressions, such as on the weekends and at the end of a year, are re- quired and it is important for users to easily describe these temporal requirements. We provide ?ve opera- tions, and, or, not, xor, and sub, to help users to construct complex fuzzy calendars based on basic fuzzy calendars.

De?nition 2 A fuzzy calendar is de?ned recursively as follows: 1. A basic fuzzy calendar is a fuzzy calendar.

2. Let A and B be two fuzzy calendars. Then A and B, A or B, not A, A xor B, and A sub B are also  fuzzy calendars.

The semantics of these operations are described below.

De?nition 3 LetA andB be fuzzy calendars withmem- bership functions ?A and ?B, respectively.

1. A and B denotes A?B, with the resulting member- ship function ?A?B de?ned by ?A?B ? ?A ? ?B. (1) 2. A or B denotes A?B, with the resulting member- ship function ?A?B de?ned by ?A?B ? ?A + ?B ? ?A ? ?B. (2) 3. not A denotes the complement of A, A?, and the re- sulting membership function ?A? is de?ned by ?A? ? 1? ?A. (3) 4. A xor B denotes the symmetric di?erence of A and B, A ? B, with the resulting membership function    ?A?B de?ned by ?A?B ? ?A ? (1? ?B)2 + ?B ? (1 ? ?A)2 +?A ? ?B ? (1 ? ?A ? ?B). (4) 5. A sub B denotes the subtraction of calendar B from calendar A, A?B, and ?A?B ? ?A ? ?A ? ?B (5) is the resulting membership function.

Note that we use the algebraic sum and product, re- spectively, for the de?nitions of or and and, instead of max and min that are usually used. The main reason is that max and min are not satisfactory in some situa- tions. For instance, when we take the and of two fuzzy sets, we want the larger fuzzy set to have a larger im- pact on the result. But if we use the min operation, the larger fuzzy set will have no impact at all. Simi- larly, the smaller fuzzy set will have no impact on the result if max is chosen as the operation for or.

Consider Figure 1. Let the basic fuzzy calendars be- gin of a week, middle of a week, end of a week, begin of a month, middle of a month, end of a month, begin of a year, middle of a year, and end of a year be represented by bw, mw, ew, bm, mm, em, by, my, and ey, with mem- bership functions ?bw, ?mw, ?ew, ?bm, ?mm, ?em, ?by, ?my and ?ey , respectively. Then the complex fuzzy cal- endar c1 which is ((in the middle of a month and at the end of a year) or (at the end of a week and at the begin- ning of a year)) can be described by the following mem- bership function: ?c1 = (?mm?ey) + (?ew?by) ?(?mm?ey)?(?ew?by). (6) Let c2 be the fuzzy calendar ((not at the end of a year) and (in the middle of a year, but not at the end of a month)). Then it can be described by ?c2 = (?e?y)?(?my?em). (7) Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME?04) 1530-1311/04 $20.00 ? 2004 IEEE Finally, the fuzzy calendar c3 which is (at the begin- ning or end of a month, but not simultaneously) can be described by ?c3 = ?bm?em (8) with the xor operation.

To calculate the matching degree of a time period, T , to a certain fuzzy calendar, A, we transform A to a fuzzy proposition of the following form The date is in A. (9) Then the matching degree is computed as ?A(T ). For example, referring to Figure 1, the matching degree of the time period T = 2003/09/20 (Sat.) to the fuzzy  calendar c1 of Eq.(6) is computed as ?c1(T ) = (?mm(20)? ?ey(9)) + (?ew(6)? ?by(9)) ?((?mm(20) ? ?ey(9))? (?ew(6)? ?by(9))) = (0.2 ? 0.67) + (1.0? 0.0) ? ((0.2? 0.67) ?(1.0? 0.0)) = 0.13. (10) 3. Application in Knowledge Discovery We show how fuzzy calendar algebra can be used to help discover knowledge from temporal databases. We assume that all the transactions are placed in order in a temporal database. By incorporating fuzzy calendar algebra with a data miner, called PWM, an interest- ing type of knowledge, called fuzzy temporal associa- tion rules, can be e?ciently discovered from temporal databases. The fuzzy temporal association rules dis- covered should have weighted support and con?dence greater than the user-speci?ed minimum support and con?dence, respectively.

3.1. Fuzzy Temporal Association Rules Let I = {i1, i2, ..., im} be a set of items. Let D be a temporal database of transactions where each transac- tion t is associated with an identi?er TID, a time infor-    tion t is associated with an identi?er TID, a time infor- mation tt indicating the time when the transaction oc- curred, and a set of items tc such that tc ? I. Let D be divided into a sequence of n partitions, P1, P2, . . . , and Pn, each Pi containing a set of transactions occur- ring in the corresponding time period Ti with the dura- tion being that of the smallest time granularity. Min- ing fuzzy temporal association rules in a database is to discover interesting patterns from the partitions di- vided in D, with corresponding time periods weighted by their matching degrees to the queried fuzzy calen- dar. The fuzzy temporal association rules discovered should have weighted support and con?dence greater than the user-speci?ed support and con?dence thresh- olds, respectively.

Let FC be the speci?ed fuzzy calendar, and wi be the matching degree, or weight, of the time period Ti corresponding to partition Pi in the database D, where wi is calculated as in Eq.(10). For a given item- set I ? I, a transaction t is said to contain I if and only if I ? tc. Let |Pi(I)| be the number of transactions con- taining itemset I in partition Pi. The weighted count of an itemset I in D, denoted ?D(I), is de?ned to be ?D(I) = n?

k=1 (|Pk(I)| ? wk). (11) We say that an itemset I is frequent, with respect to a support threshold of s% if ?D(I) ? [ n?

k=1 (|Pk| ? wk)]?s% (12) where |Pk| denotes the number of transactions in parti- tion Pk. The term [ ?n k=1(|Pk| ? wk)]?s% is called the weighted count threshold of D. A fuzzy temporal asso- ciation rule with respect to a fuzzy calendar, FC, is an implication of the form X ?FC Y (13) where X ? I, Y ? I, and X ? Y = ?. As usual [1], X and Y are required to be non-empty and a rule thus contains at least two items. The association rule X?FCY is said to have weighted support s% in the  database D if ?D(X?Y ) = [ n?

k=1 (|Pk| ? wk)]?s%. (14) For an association rule X?FCY , let ?D(X?Y )/?D(X) = c%. (15) The rule is said to hold in D with weighted con?dence c%.

For a given pair of con?dence and support thresh- olds, c% and s%, and a given fuzzy calendar FC, the problem of mining fuzzy temporal association rules from the database D is to ?nd out all the associa- tion rules that have weighted con?dence and support greater than or equal to c% and s%, respecitvely. As usual, two subproblems are involved. The ?rst subprob- lem is to ?nd, with respect to FC, all frequent itemsets in D. The second subproblem is, from the set of fre- quent itemsets, to ?nd out all the association rules that have a weighted con?dence value greater than or equal Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME?04) 1530-1311/04 $20.00 ? 2004 IEEE to c%. Given a frequent itemset I, associated rules re- lated to I are constructed as follows. Let I be decom- posed into X and Y such that X?Y = I and X?Y = ?.

posed into X and Y such that X?Y = I and X?Y = ?.

X?FCY is an association rule if ?D(I)/?D(X) ? c%.

Since the solution to the second subproblem is straight- forward [1], major research e?orts have been spent on the ?rst subproblem, i.e., ?nding frequent itemsets.

Therefore, our research mainly focuses on the ?rst sub- problem. Given the support threshold s%, our mining system ?nds out the set L = { X |X ? I??D(X) ? [ n?

k=1 (|Pk| ? wk)]?s% } (16) from the temporal database D. For convenience, an itemset that contains exactly k items is called a k- itemset. The set of frequent k-itemsets is commonly denoted by Lk. Note that the fuzzy temporal associa- tion rules de?ned above are identical to traditional as- sociation rules if the weights of all the time periods in D are set to the same value.

3.2. Mining Fuzzy Temporal Association Rules In mining a time-variant database, traditional min- ing methods treat transactions in di?erent time peri- ods individually and process them with the same pro- cedure without fully considering the time-variant char- acteristics of the items and transactions. Consequently, some interesting rules may not be discovered. We pro- vide a method to remedy this disadvantage. The fuzzy calendar algebra is used to describe desired temporal requirements, and then PWM (Progressive Weighted Miner) [13] is adopted to discover fuzzy temporal asso- ciation rules from a database.

In general, a database is too large to be held in main memory. Thus, the data mining techniques applied to very large databases have to be highly scalable for e?- cient execution. By partitioning a transaction database  into n partitions, P1, P2, . . . , Pn, PWM employs a pro- gressive ?ltering scheme to generate the set of candi- date itemsets for the database. One partition is con- sidered at a time, and the cumulated information dis- covered in previous partitions, including a progressive candidate set of 2-itemsets, C2, their partial occur- rence counts, and the corresponding partial supports required, is carried over along to the subsequent parti- tions. When all the partitions have been processed, the set of candidate itemsets, C, for the database can be obtained.

For each frequent itemset I, there must exist some partition Pk, 1 ? k ? n, such that I is frequent from partition Pk to Pn. Suppose E is a candidate 2-itemset Partition Date TID Items 1 A,C,D,E,F P1 2003/09/15 2 B,D,F (Mon.) 3 A,D,E 4 A,B,D,E,F D P2 2003/09/16 5 A,B,C,E,F (Tue.) 6 B,F 7 A,D,E,F P3 2003/09/17 8 A,B,D,F (Wed.) 9 A,D,F Table 1. A transaction database.

from Pk to Pt, 1 ? k ? t ? n. Let the current parti- tion be Pt+1. If we detect that E is not frequent from Pk to Pt+1, then E can be deleted from C2. If E is in- deed frequent, it must be frequent in some later parti- tion Pk? , k? &gt; k, and we can add it to C2 again with starting partition being Pk? . Therefore, after each par- tition, Pi, is processed, new partial frequent 2-itemsets    tition, Pi, is processed, new partial frequent 2-itemsets may be added into C2, with their starting partition and partial counts being recorded. Furthermore, the old itemsets in C2 are checked if they are continually frequent from its starting partition to Pi. If a candi- date 2-itemset is no longer partially frequent, this item- set is removed from C2. After all partitions have been processed, the set of candidate 2-itemsets, C2, which is close to the set of frequent 2-itemsets, is obtained.

Based on C2, all candidate k-itemsets, k &gt;= 3, are generated. Finally, one database scan is applied to cal- culate the supports of all candidate itemsets and fre- quent itemsets are determined. Fuzzy temporal associ- ation rules can then be formed from the discovered fre- quent itemsets.

3.3. An Example We give an example for illustration. Consider the database D, shown in Table 1, which contains 9 trans- actions and is segmented into three partitions, P1, P2, and P3, each containing 3 transactions. Let the sup- port and con?dence thresholds be 40% and 75%, re- spectively. Assume that the queried fuzzy calendar is the fuzzy calendar c1 given in Section 2, i.e., c1 repre- sents ((in themiddle of amonth and at the end of a year) or (at the end of a week and at the beginning of a year)).

The membership function of c1 is shown in Eq.(6). As- sume that ?mm, ?ey, ?ew , and ?by are the membership functions shown in Figure 1.

Firstly, we calculate the weights w1, w2, and w3 for partitions P1, P2, and P3, respectively. The time inter- val T1 of P1 is 2003/09/15 (Mon.). The membership degrees of T1 with respect to ?mm, ?ey, ?ew , and ?by Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME?04)  1530-1311/04 $20.00 ? 2004 IEEE P1 itemset start count AD 1 1.34 AE 1 1.34 DE 1 1.34 DF 1 1.34 Table 2. Candidate 2-itemsets generated from partition P1.

are ?mm(15) = 1.0, ?ey(9) = 0.67, ?ew(1) = 0.0, and ?by(9) = 0.0, respectively. Therefore, w1 becomes w1 = ?mm(15)ey(9) + ?ew(1)by(9) ?((?mm(15)ey(9))?(?ew(1)by(9))) = (1.0?0.67) + (0.0?0.0) ? ((1.0?0.67) ?(0.0?0.0)) = 0.67.

Similarly, we have T2 of P2 being 2003/09/16 (Tue.) and T3 of P3 being 2003/09/17 (Wed.), and w2 = ?mm(16)ey(9) + ?ew(2)by(9) ?((?mm(16)ey(9))?(?ew(2)by(9))) = (1.0?0.67) + (0.0?0.0) ? ((1.0?0.67) ?(0.0?0.0)) = 0.67.

w3 = ?mm(17)ey(9) + ?ew(3)by(9) ?((?mm(17)ey(9))?(?ew(3)by(9))) = (0.8?0.67) + (0.0?0.0) ? ((0.8?0.67) ?(0.0?0.0)) = 0.536.

Now we generate candidate 2-itemsets C2 for D par- tition by partition.

? Processing of P1. The weighted count threshold for P1 is 0.4?3?0.67 = 0.804. The accumula- tive weighted count threshold for P1 is also 0.804.

Among all the possible combinations of 2-itemsets in P1, only AD, AE, DE, and DF have accumu- lative weighted counts greater than or equal to 0.804. Therefore, these 2-itemsets, together with their accumulative weighted counts (count) and starting partitions (start), are recorded as shown    starting partitions (start), are recorded as shown in Table 2.

? Processing of P2. The weighted count threshold for P2 is m2 = 0.4?3?0.67 = 0.804. The accumu- lative weighted count threshold from partition P1 to partition P2 is 0.804 + 0.804 = 1.608. We ?nd that 5 new 2-itemsets, AB, AF , BE, BF , and EF in P2 have weighted counts greater than m2, so they are added to C2. Furthermore, the old item- sets AD, AE, DE, and DF have their accumu- lative weighted counts greater than 1.608. There- fore, they are retained in C2. The information kept after processing P2 is shown in the left part of Ta- ble 3.

P2 P3 itemset start count itemset start count AB 2 1.34 AB 2 1.87 AD 1 2.01 AD 1 3.61 AE 1 2.68 AE 1 3.21 AF 2 1.34 AF 2 2.94 BE 2 1.34 BF 2 2.54 BF 2 2.01 DE 1 2.54 DE 1 2.01 DF 1 3.61 DF 1 2.01 EF 2 1.87 EF 2 1.34 Table 3. Candidate 2-itemsets generated after scanning partition P2 and P3, respectively.

? Processing of P3. The weighted count threshold for P3 is 0.4?3?0.536 = 0.643. All new 2-itemsets  generated in P3 have weighted counts less than 0.643. The itemsets generated in P1 all have ac- cumulative weighted counts greater than 2.25 and the itemsets generated in P2, except BE, have ac- cumulative weighted counts greater than 1.45, so they are retained in C2 and BE is deleted from C2. The resulting candidate 2-itemsets after pro- cessing P3 are shown in the right part of Table 3.

Therefore, we have C2 = {AB,AD,AE,AF,BF,DE,DF,EF}, C3 = {ABF,ADE,ADF,AEF,DEF}, C4 = {ADEF}, Ck = ?, k ? 5.

By scanning D once, we have the sets of frequent k- itemsets, Lk, k ? 2, of D along with their counts to be L2 = {(AD, 3.61), (AE, 3.21), (AF, 3.61), (BF, 3.21), (DE, 2.54), (DF, 3.61), (EF, 2.54)}, L3 = {(ADE, 2.54), (ADF, 2.94), (AEF, 2.54)}, Lk = ?, k ? 4, and L = L2?L3. The association rules can then be obtained from the frequent itemsets in L.

4. Experimental Results In this section, experimental results obtained with a PC with AMD Athlon XP CPU and 1.0G memory are presented.

4.1. Experiment 1 In this experiment, we compare our fuzzy calendar algebra with the calendar algebra proposed in [16]. The Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME?04) 1530-1311/04 $20.00 ? 2004 IEEE Figure 4. Performance comparison between the calendar algebra and our fuzzy calendar algebra with a simple calendar.

calendar algebra de?nes operators such as dicing, slic- ing, and ?atten to construct complex calendars. The time intervals are obtained from a speci?ed calendar and the calendric association rules are discovered in these time intervals. For a complex calendar, the cal- endar algebra decomposes the calendar into basic ones,    endar algebra decomposes the calendar into basic ones, and then the time intervals of each basic calendar are separately searched. This approach is not e?cient since one time interval may be searched with several di?er- ent basic calendars. On the contrary, our fuzzy calen- dar algebra checks each time interval only once and can easily ?nd out all the time intervals in a given cal- endar. Repetitive and unnecessary searches in a time interval can be avoided, and the performance is im- proved.

We use 1825 time intervals collected in 5 years, with each time interval representing one day in a year. The execution time for ?nding out the desired time inter- vals by the calendar algebra and the fuzzy calendar algebra, respectively, is shown in Figure 4. The calen- dar algebra searches each time interval twice while the fuzzy calendar algebra searches each time interval only once, and thus we can clearly see that our method is more e?cient in interpreting calendars. For more com- plicated calendars, i.e., containing more basic calen- dars, our fuzzy calendar algebra performs even better, as shown in Figure 5.

4.2. Experiment 2 In this experiment, we?d like to show the e?ective-  ness of our strategy for mining fuzzy temporal pat- terns. The number of candidates and frequent itemsets discovered are reported. The execution time for dis- covering the itemsets is also presented. The dataset, Figure 5. Performance comparison between the calendar algebra and our fuzzy calendar algebra with complicated calendars.

support number of number of threshold candidate itemsets frequent itemsets 0.02 1889 1167 0.03 1043 796 0.04 911 633 0.05 635 512 0.06 327 243 0.07 245 182 0.08 179 115 Table 4. TheNumber of candidates and frequent itemsets discovered.

T 10.I4.D100K.C10%, containing synthetic data [1] is used, where T is the mean size of a transaction, I is the mean size of potential maximal frequent itemsets, D is the number of transactions in units of K, i.e., 1000, and C is the correlation between items in terms of percentage. The dataset is partitioned into 200 par- titions and there are 500 transactions in each parti- tion. To infer from these partitions with our fuzzy cal- endar algebra, we assume the ?rst partition being the time interval of 2003/01/01, the second partition be- ing of 2003/01/02, . . . , and so on. The calendar we are interested in is the one given in Eq.(6). The num- ber of candidates and frequent itemsets discovered are given in Table 4 and the execution time for discover- ing these itemsets is shown in Figure 6. From Table 4 and Figure 6, proper numbers of frequent itemsets can be discovered in acceptable time with our method.

5. Conclusion We have presented the fuzzy calendar algebra which supports fuzzy queries on calendars. Fuzzy calendars Proceedings of the 11th International Symposium on Temporal Representation and Reasoning (TIME?04) 1530-1311/04 $20.00 ? 2004 IEEE Figure 6. Execution time with di?erent support thresholds.

are natural and easy for use in the sense that they cap- ture the way in which human beings reason with time requirements. To accommodate temporal expressions with multiple time granularities, ?ve operations, and,    with multiple time granularities, ?ve operations, and, or, not, xor, and sub, are introduced.

We have shown the usefulness of the fuzzy calendar algebra by incorporating it with PWM to mine fuzzy temporal association rules from temporal databases.

Firstly, the transactions of the database are divided into a sequence of partitions. Then the weight of each partition is inferred, denoting the matching degree of the corresponding time period to the fuzzy calendar speci?ed in the user?s queries. Temporal patterns in the divided time periods of di?erent matching degrees are then e?ciently produced, and the number of database scans can be e?ectively reduced. Experimental results have shown that this approach of ?nding fuzzy tempo- ral association rules is very e?ective.

