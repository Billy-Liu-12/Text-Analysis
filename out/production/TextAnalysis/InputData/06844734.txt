The Need of a Hybrid Storage Approach for IoT in PaaS Cloud Federation

Abstract?Monitoring activities over many different types of sensors are very challenging to support advanced services for Internet of Things (IoT) and its future. However, one of the major issues is the explosion of the amount of heterogeneous information that has to be stored and processed, thus causing the well known Big Data problem. Some Cloud strategies have been investigated to offer IoT-oriented services, but they do not specifically address solutions for Big Data management. In this paper, we present a two-layer architecture based on a hybrid storage system able to support a Platform as a Service (PaaS) federated Cloud scenario.

The proposed architecture combines the benefits of both storage approaches. In particular, it allows us on one hand to extend SQL-like legacy systems, and on the other hand to manage Big Data through an XML-like, non-SQL distributed storage system according to a Cloud federation approach.

Keywords-cloud computing, federation, PaaS, IoT, Big Data, monitoring, sensor network.



I. INTRODUCTION  Cloud computing represents a very flexible technology that can efficiently support Internet of Things (IoT) due to its ability in offering huge amount of resources and efficient communication services for transferring flows of terabyte between data centers [1]. IoT enables seamless communication flows between heterogeneous devices, hiding the complexity of the physical infrastructures and communication services.

However, in such a scenario, a huge amount of data flows across routers and computers, and needs to be stored and processed. Thus, the research community is showing great interest in developing new Cloud platforms to integrate sens- ing activities in many application scenarios, such as smart cities [2], healthcare [3], homeland security [4] and so on.

Emerging Big Data solutions deal with storage strategies based on innovative NO-SQL database (DB) systems, such as Sedna, Cassandra, Apache HBase, MongoDB, and so on.

Nevertheless, most of the existing information systems are based on SQL-like DBs. On one hand, it is too hard imagining that existing providers would turn their SQL-like systems into NO-SQL ones in a short time. On the other hand, SQL- like DBs used for internal purposes by Cloud providers can yet efficiently manage their local monitoring infrastructures.

Hence, we think that legacy systems should be adapted and exploited according to new service models. For these reasons, in this paper, we propose a two-layer hybrid architecture based on both SQL-like and NO-SQL, XML-like technologies to provide a scalable, efficient and elastic sensing service.

New business opportunities also arise from federated envi- ronments, where several Cloud providers join to share their resources. Through federation, they can offer theoretically un- limited sensing capabilities limiting costs for physical infras- tructures. Our solution decouples the local and the federated management of sensing resources. Specifically, Cloud offers a Platform as a Service (PaaS) to store and access client data using a SQL-like DB. At the same time, they can share over the PaaS Cloud federation a portion of their data, using a distributed NO-SQL, XML-like storage system. In this way, the PaaS Cloud federation enables Cloud providers to collect and expose data coming from several heterogeneous sensing infrastructures with a good degree of efficiency, granularity, and reliability. In particular, the proposed solution has been designed to address three main issues: 1) how to build a data provisioning service across federated Clouds; 2) how to store Big Data; 3) how to provide heterogeneous sensing data to Cloud clients through seamless services.

The behavior of the whole system is based on a data- centric approach, which allows to simplify asynchronous com- munications between monitoring environments and end-users.

To represents heterogeneous monitoring devices and data, we refer the Sensor Web Enablement (SWE) specifications defined by the Open Geospatial Consortium [5]. SWE defines data encodings and Web services to store and access sensor- related data. It is a widely adopted standard and has been also combined with new emerging standard, such as the W3C Semantic Sensor Network ontology.

The paper is organized as follows. In Section II, we dis- cuss related works. Benefits of Cloud federation in IoT are discussed in Section III. Section IV introduces the Big Data problem in typical IoT scenarios. The two-layer architecture enabling Big Data management in PaaS Cloud federation is discussed in Section V. Conclusions and future works are summarized in Section VI.



II. RELATED WORKS  New Cloud systems interacting with sensors in IoT are recently appearing in literature. In [6], the authors highlight a much more detailed Platform as a Service architecture called CloudThings. It represents a collection of Cloud services offered by the IT market (i.e., Facebook, GAE, ...), smart devices and embedded systems(i.e., Wiring, Sun SPOT, mbed, Arduino) and Cloud applications (Heroku, Paraimpu, ...). The   DOI 10.1109/WAINA.2014.162    DOI 10.1109/WAINA.2014.162     implementation shows all adopted solutions tailored for Smart Home scenarios, a real use case deployed in Oulu Finnish city.

Another high level platform is reported in [7]. The presented framework is able to integrate Wireless Sensor Networks with Cloud Computing.

Cloud Computing is also becoming the basis for Big Data needs. At the Infastructure as a Service (IaaS) level, Big Data can leverage storage capabilities of Clouds, as well as it can exploit computation power of virtual infrastructures.

Such an example is given in [8], where Hadoop is instantiated into VMs and optimized for Big Data processing. Another example of Big Data processing in the Cloud is presented in [9], where the computation framework called Sailfish is proposed to improve the disk performance for large scale Map- Reduce computations. In [10], the authors face up the Big Data problem in e-health scenarios looking at non-SQL DBs as key solution toward the full development of IoT, and, specifically, they investigate on how to shift towards the Web of Things.

The problem to find an abstraction on sensing data represen- tation was also identified from [11], where authors analyzed the concepts of proximity, adjacency or containment. They even provided a global model with a dynamic interoperability disregarding how the global view should be accomplished.

Their decision-maker is able to process a huge amount of incoming data, but it is not clear how such capabilities are practically addressed (i.e. scalability problems). In [12], it is presented an extension of the Ubiquitous Sensor Networks framework that leverage SWE along with the SIP protocol [13]. However, one of the main problems of the SIP protocol is related to network constrains.

Differently from [14], [15], we think that very innovative and efficient services can arise from the integration of many Cloud providers interested in gathering, managing and pro- cessing monitored data coming from sensing devices in a federated environment.



III. RESOURCE MANAGEMENT IN A CLOUD FEDERATION  Federation is based on the concept that if a Cloud provider requires external resources, it asks for them to other providers, so that the resources belonging to a Cloud can logically be included in another Cloud. This form of resource sharing aims to extend services and improve performance of each Cloud, without conditioning its business.

According to the NIST formalization [16], Cloud services are offered at three different service levels: Software as a Service (SaaS), Platform as a Service (PaaS) and Infrastructure as a Service (IaaS). Cloud federation can be accomplished on each of these service level. According to the nature of the federation, resources can take different forms. For example, considering an IaaS federation, a shared resource can be a Virtual Machine (VM), considering a PaaS federation a shared resource can be sensing data of a virtual sensor network in an IoT environment, and considering a SaaS, a shared resource can be an application accessible over the web.

Regarding the PaaS federation for IoT purposes, sharing data means that Cloud providers are able to extend their  services, offering a more rich set of information, since they can include data gathered from sensing environments managed by other providers. In particular, taking part in the federation implies share all or just a portion of sensing data. Considering a scenario including different heterogeneous legacy systems each one using a SQL-like database, a possible approach for the achievement of a PaaS Cloud federation consists in using a distributed XML-like NO-SQL distributed database on which each provider shares a total or partial view of the data stored in its local SQL-like database. In this way, a global XML- like NO-SQL distributed database would enable the Cloud federation to address the Big Data problem.

Since each Cloud provider can manage heterogeneous sens- ing data, the PaaS Cloud federation has to abstract and uniform data under a common global format. In order to fulfill such a goal the Sensor Web Enablement (SWE) standard defined by the Open Geospatial Consortium (OGC)[5] is strategic.

In fact, the OGC-SWE framework specifically faces sensing devices and enables web-based discovery, exchanging, and processing of sensor observations. Services and encodings presented in the SWE methods are decoupled from any par- ticular deployment scenario. Within the SWE framework, the development of a set of XML-like languages and Web service interface specifications have been defined. In particular, in the perspective of Cloud federation for IoT-oriented services, information abstraction must be performed considering the following standards:  ? O&M (Observation and Measurements): models and XML schema for encoding observations and measure- ments from a sensing environment.

? SensorML: models and XML schemas for describing sensors systems and processes; it provides the informa- tion required for sensor discovery, sensor observations localization, processing of low-level sensor observations and listing of taskable properties.



IV. BIG DATA IN IOT In order to explain why we refer to the Big Data problem  when we discuss sensing activities in federated Cloud for IoT, we discuss two typical IoT scenarios ( i.e., intrusion detection in smart cities and smart metering for power consumption management), presenting the evolution of new smart devices for sensing[17] and analyzing the of data they produce.

? Intrusion detection. Enforcing security is becoming cru- cial for all world-wide Governments, Public Institutions and also private companies, which are strongly work- ing for implementing new solutions to improve what is commonly referred as Homeland Security (HS) [4].

Assessing and planning for risks can be done employing surveillance technologies in order to increase effective- ness in the response to future, forthcoming, and present risks [18]. Let assume that a City Council decides to install several surveillance cameras in strategic public targets to monitor suspicious activities. For example, we can consider a deployment of about 1000 cameras all around the city. Common cameras are featured by RGB     sensors with a resolution of 640 x 480 pixels. They might continuously record videos that will be stored in dedicated datacenters owned by the city government.

However, cameras can optimize the necessary storage size recording their acquisition only whenever they detects movements. According to [19], in one year, 1000 cameras need about 13,68PB of storage unit size.

? Smart metering. A recent survey [20] shows that US public facility providers are strongly interested in adopt- ing Smart Grids for smart management of the Electric- ity facility for several reasons: reduction in restoration time, analytics-based decision making, reduction in peak demand, increased visibility and control, customer satis- faction in changing pattern based on end-users demand, energy efficiency and so on. Similarly, other type of public facilities (e.g., water, gas, network connection, ...) can benefit a lot from smart metering systems. These requirements impose a realtime analysis of data in short time ranges (e.g., 1-5 minutes). Summarizing, for each measurement we need roughly 4,200 bytes. If we assume a sensing time interval of one minute, over 50.000 build- ings (roughly estimate for a city with 200.000 citizens), in one-year we need to store about 353,61TB of data.

The proposed analysis concerns only the smart meter for electricity facility. If we extend the service to other fa- cilities (water, gas, network connection,...), each building needs three/four Smart Meters and we the amount of data to store is about one or more PBs.

If we consider different cites, each one acting as an indepen- dent Cloud provider and controlled by a central government, we can easily understand how much sensitive is the Big Data problem.



V. TWO-LAYER ARCHITECTURE FOR BIG DATA STORAGE IN PAAS CLOUD FEDERATION  In this Section, we discuss a new solution for Big Data management in PaaS Cloud federation. We assume that each Cloud exploit SQL-like DBs for internal management of data and services. This assumption is very realistic, considering the wide diffusion of SQL-like technologies. Our solution allows providers to both benefit of SQL-like advantages in terms of flexibility and to develop efficient services without divesting their legacy systems. In order to stimulate the cooperation among Clouds, each provider stores all or a portion of data even in a Global XML-like, non-SQL distributed storage system, which is accessible from all the Clouds belonging to the federation.

As shown in Figure 1, such a strategy implies a two-layer hierarchy of storage. Typically, considering legacy systems, each Cloud provider acting in IoT gathers data coming from several sensor networks and store them in its own local SQL-like DB. This management is generally performed by a Database Agent (DBAgent). Clients can access data mak- ing specific queries to the local SQL-like DB through the DBAgent. SQL-like DB allows small/medium Cloud providers to manipulate data in an easy way and to benefit of high  performance and flexibility in information retrieval. In our two-layer architecture, the DBAgent is also responsible to store a total or partial view of gathered sensed data in a Global XML-like NO-SQL distributed database (Global DB) that is spread over all the federated Cloud providers. Such a Global DB must be accessible from other Cloud providers and clients.

The Global DB needs to be highly scalable and to support an efficient retrieval of data. XPath and XQuery capabilities make the behavior of the Global DB SQL oriented. This allows to easily retrieves information from the DB, formatting data according to the XML-like semantic of the SensorML and O&M specification into the SWE standard.

According to federation agreements and Cloud policies for data management, data are not roughly pushed on the Global DB, but they can be filtered (e.g., at specific time interval or geographical areas) and/or manipulated (e.g., aggregated data, differential values, ...) before making them available, accord- ing to specific agreements among federated Cloud providers.

Such filtering and manipulation processes guarantee flexibility in data management inside each Cloud provider and reduces the amount of data available in the federation. Since the Global DB collects data coming from all the Cloud providers, it has to be designed to store Big Data with NO-SQL solutions. The proposed two-layer architecture improves the scalability of the data access service, since it decouples intra-domain activities from the inter-domain ones. The cost of a higher complexity of the architecture is balanced by its great flexibility.

As shown in Figure 2, in order to enable the PaaS federation, each Cloud system must include five components: a Middle- ware, a Sensor Observation Service (SOS) Agent, a local DB, a Sensor Alert Service (SAS) Agent, and a Web Service. The DBAgent functionalities presented above are accomplished combining the features of these five elements. The Middleware can be whatever system adopted to administrate the Cloud provider.

The SOS Agent gathers sensing data from several sen- sor networks through a sync mechanism. It implements the functionalities of the SWE-SOS, which specifies both the XML-like language and interface for requesting, filtering, and retrieving observations and sensor system information. It pro- vides a way to integrate data from heterogeneous monitoring systems in a standard format accessible from Cloud providers by using a language and XML schemes for describing sensors systems and processes, according to the SensorML standard, and models and XML schema for encoding observations and measurements from a sensor network, according the Observa- tions and Measurements (O&M) standard. According to the SWE standard, the SOS Agent can be a software module independent from the legacy system. It is responsible to store sensed data in the local SQL-like DB (optionally) and to forward sensed data for both event-based and on-demand interactions.

To make reliable and flexible the services offered by the Cloud federation, the two-layer architecute must enable clients to gather and deliver sensed data according to two approaches: on-demand interaction and event-based interactions. Figure 2     Fig. 1. Hierarchical storage system for IoT in Cloud federation.

shows how these two types of interaction work according to the two-layer architecture. The on-demand interaction allows clients to access sensed data when required, typically by means of web service queries. The event-based interaction is supported by the SAS Agent and provides sensed data to the client according to a publish-subscribe model. Data can be classified in Subscription Offerings according to different features, such as type of observation, covered area, monitoring device and so on. Each type of Subscription Offering is identified through an Offering Identifier (OfferingID), which univocally describe a specific type of observation. The main concept of OfferingID is introduced by the SWE specifications and the management of such identifiers is out of the scope of this paper. Using one or both the two approaches to access sensing data in the PaaS Cloud federation depends on the specific use case. On one hand, the event-based interaction allows to gather near real-time data whenever a particular event occurs in the environment (that is in the sensing infrastructure).

It can be useful for real-time added value services, for example for land monitoring purposes. On the other hand, a Global DB distributed across all the federated Cloud providers, allows to store huge amount of data for long time. thus, the on- demand interactions can be useful for tracking the history of a particular event or for statistical analysis. We discuss client interactions in detail in the next sections.

The whole architecture also includes the Global DB and a Message Oriented Middleware (MOM). The MOM allows to interconnect federated Clouds building up a communication system based on message exchange. Further details on MOM functionalities are discussed in the next sections.

A. On-Demand Interaction  In case of on-demand interaction, the SOSAgent forwards sensed data to the middleware of the Cloud provider. The middleware stores sensed information in the Global DB that is distributed across all the Cloud providers belonging to the federation. As previously discussed, the Global DB has to be based on an XML-like, non-SQL distributed database. To this regards, possible solutions include Sedna, Cassandra, Apache HBase, MongoDB, and so on. For this reason, the queries must be accomplished by means of XPATH/XQUERY, typically used to navigate and to retrieve data through elements and attributes in XML documents.

Clients can access these data using a web service, e.g., REST-based. In particular, users can query the Global DB us- ing a web service software client interacting with a web service using the Application Program Interfaces (APIs) exposed by the Cloud provider.

B. Event-Based Interaction  In case of event-based interaction, the SOS Agent for- wards sensed data directly to the MOM using an Instant Massaging Protocol (IMP), e.g., the Extensible Messaging and Presence Protocol (XMPP). No middleware pre-processing on data is necessary because the SWE compliant algorithms format observations as XML data, and XMPP natively support XML. This allows to reduce the overhead of the system. The MOM is distributed across all the Cloud providers joining the federation. In this way, the sensed data coming from different Cloud providers can be shared with both clients and other Cloud providers. Sensed data are delivered to clients by means     Fig. 2. On-demand and event-based interactions.

of the SAS Agent according to a publish-subscribe model. In particular, a user subscribes an OfferingID and access data over the Multi User Chat (MUC) that is created for the specific OfferingID.

XMPP offers several benefits to set up event-based in- teraction in a PaaS Cloud federation. It is able to offer: decentralization (i.e., no central master server should exist) in a way similar to a p2p communication system for granting fault- tolerance and scalability when new clients join the system; flexibility to maintain system interoperability; security based on the use of channel encryption. All these features are guaranteed in the current implementation by means of the employment of the Ejabberd XMPP server [21]. Ejabberd is an instant messaging server, licensed under GPLv2 (i.e., free and open source), written in Erlang/OTP. Moreover, Ejabberd is crossplatform, fault-tolerant, clusterable and modular. Even though XMPP uses a client/server model there is not a central authoritative server. As anyone may run its own XMPP server on its own domain, it is the interconnection among these servers which makes up the XMPP network. Each component  on the network has a unique Jabber ID (JID). To avoid requiring a central server to maintain a list of IDs, the JID is structured like an email address with a user name and a domain name for the server in which that user resides, separated by an at sign (@). Cloud providers, univocally defined by JIDs, make agreements and participate to the distributed management of the federation into assigned chat-rooms. Moreover, since XMPP can work on HTTP (on TCP port 80) there is not problem for inter-domain communication, even though Cloud providers are behind Network Address Translators (NATs) or firewalls.



VI. CONCLUSIONS AND FUTURE WORKS  In this paper, we presented a two-layer Cloud storage architecture for IoT purposes, which aims to extend resource availability of each Cloud by means of a PaaS federation. It offers data gathered from several heterogeneous monitoring infrastructures to IoT clients in a uniform way, by exploiting data abstraction functionalities according to the SWE standard.

To address the Big Data problem, the proposed architecture     allows to benefit of both SQL-like and non-SQL DB solutions.

It guarantees high stability and efficiency (proper of a SQL- like DB) for the management of information inside a Cloud.

At the same time, a distributed non-SQL DB gives world-wide extension to the system. Moreover, we discussed two possible types of interaction with Cloud clients, i.e., event-based and on-demand. In future works, we plain to experience both event-based and on-demand interactions using a real testbed using the CLEVER middleware [22] with sensing extensions and SEDNA as XML-like, non-SQL database for Big Data storage.

