

Abstract?NASA has not undertaken development of a large human spaceflight system since the design of the Space Shuttle System.  While recent events have refocused human space flight with the goal of sending humans to Mars, the effort to synthesize a new human space flight architecture has been ongoing for the past five years.  With a beginning as NASA?s ?Space Transportation Architecture Study? (STAS), through the final Orbital Space Plane (OSP) Program, the goals of human space flight have been evolving.

The fast pace of the program required a system where evolving mission needs and current design detail could be reconciled in real time.  Human operations and mission requirements had to be the driving force behind the system design.  A systems engineering tool was needed to tie the requirements to the operations, functions, and design.

The OSP Systems Engineering team methodology was based on a modified C4ISR ?system of systems? engineering framework.  This framework places equal emphasis on operations, functionality, and technology, in contrast to a more classical systems engineering approach which emphasizes system functions and hardware based on constraints.  This was coupled with architectures based on modular functionality rather than point designs.  When the customer significantly changed the architecture requirements, the design responded by variations in functional allocation and performance.  These changes in the architecture may or may not have impacted the design of hardware elements.  However, in most cases, the operations of the architecture did not change. By designing the  architecture to be responsive to the operational needs, the hardware elements were robust and were only minimally impacted by changes in requirements.

The tool selected to tie this methodology together was a systems engineering database, CORETM by ViTech Corporation, which allows for definition of system engineering elements by the user. Orbital defined, modified, and enforced a C4ISR systems engineering framework available within the tool.  Operational and functional models were developed and tied to architecture requirements. The human operations and functions that an element had to perform were associated within the database.

Requirements were derived primarily in consideration of functions and operations and then allocated to hardware and human elements. When customer mission requirements changed, a quick assessment of design impact could be performed.  When the allocated functionality of an element changed or its operational use changed, the requirements associated with those aspects moved with the function or operation.

Neither a systems engineering methodology nor a tool alone can succeed.  The right tool needs to be present to enforce a consistent methodology.  This methodology and implementation presented is a novel approach to supporting evolving large-scale architectures with a requirements management system and top level system performance analysis tool.

TABLE OF CONTENTS  1. INTRODUCTION......................................................2 2. ORBITAL SPACE PLANE PROGRAM OVERVIEW ...2 3. OSP ARCHITECTURE OVERVIEW.........................2 4. SYSTEMS ENGINEERING PROCESS ........................4 5. IMPLEMENTATION.................................................5 6. CONCLUSION .......................................................12 7. REFERENCES .......................................................12 8. ACKNOWLEDGEMENTS .......................................12 9. BIOGRAPHY .........................................................12  1. INTRODUCTION  When the OSP program was initiated, there was a push to accelerate the definition of the system architecture while the mission needs were still in flux.  This was primarily driven by the need for the U.S. to provide crew rescue capability for the International Space Station (ISS) by 2008.  This forced a situation where mission needs and system design were evolving in tandem.  It was necessary to provide consistency between the mission needs and design while allowing the mission needs to evolve.

This objective was approached in a two-fold manner. The first challenge was to develop a methodology where system operations as well as mission requirements drive system design.  The second challenge was to implement the methodology in a systems engineering tool which tied together requirements management, functional modeling, and operations modeling.

2. ORBITAL SPACE PLANE PROGRAM OVERVIEW  The OSP program was managed by the NASA Marshall Space Flight Center and was the culmination of a six year effort to advance U.S. human spaceflight capability.  At its inception, the program was known as the Space Transportation Architecture Study (STAS).  Through several STAS phases, the requirements evolved and were refined as both government and contractor communities studied the various technical challenges.  The scope of the effort ranged from space platform servicing to human transportation to the International Space Station (ISS) to logistics operations.  The goals of the program were defined by sets of Design Reference Missions (DRMs) which outlined the requirements for various architecture missions.

In 2000, STAS evolved into the Space Launch Initiative (SLI).  The goal of SLI was to refine preliminary architecture concepts and to define key technologies that would be necessary to bring the next generation human spaceflight system to fruition.  At this point, it was envisioned that a reusable launch system would transport both humans and cargo, as well as perform servicing and  other logistics operations in Low Earth Orbit (LEO).

During the SLI program, it became clear that separation of crew and cargo was essential to the safety of the crew and to reduction of cargo transportation costs.

In 2003 the goal of the program was refocused to only support the crew transfer and rescue needs of the ISS and the program was later renamed Orbital Space Plane (OSP).

The reusable launch portion of the architecture was dropped, and OSP was slated to launch aboard an expendable launch vehicle.  During this phase, the importance of human safety was driven home by the Columbia accident and a highly reliable abort system became imperative to the program.

In 2004, the OSP program was cancelled in favor of the presidential directive to design a Crew Exploration Vehicle (CEV).  The CEV program challenges the focused approach of the final OSP and promotes a ?spiral? development that incrementally enhances capability until the goal of a human mission to Mars is realized.

The nature of the OSP program and its precursors demanded a robust systems engineering process and implementation that could keep up with the evolution of the requirements and the variations in programmatics.  The future CEV program will build upon knowledge gained during the STAS, SLI, and OSP programs.

3. OSP ARCHITECTURE OVERVIEW  The OSP Architecture evolved over the course of several years.  During the SLI and early OSP period, Orbital?s architecture included a space plane known as the Blended Lifting Body (BLB).  Figure 1 below shows the BLB during launch.  This vehicle served as the crew transport and rescue vehicle for the ISS and had an integrated launch  abort system.

Figure 1 ? OSP on a Delta IV Launch Vehicle     The BLB variant of the OSP vehicle was launched on an expendable launch vehicle (ELV) into an ISS transfer orbit.

From there, it was capable of performing phasing operations and proximity operations, as well as autonomous docking with ISS.  Upon completion of its mission, the BLB could de-orbit under its own power and perform a runway landing.  In the event of an emergency at ISS, the BLB served as a Crew Rescue Vehicle (CRV) and was capable of supporting injured or ill crew members during de-orbit and landing.

As the program progressed, Orbital took on the role of ISS integration.  During this time a mating adapter (MA) for the OSP vehicle to ISS was defined.  The need for and definition of the ISSMA was a direct result and use of the systems engineering process developed for the OSP program.  The modeling process that is described in this paper drove out the need for the ISSMA.

While design of the BLB was an interesting and challenging issue, it was the simpler part of the systems engineering process.  The OSP system had to be integrated with many existing systems.  These included, but were not limited to,  multiple ELV launch vehicles, the Air Force range, existing NASA processing facilities, and current and future communications networks.  A sample mission is outlined in Figure 2.

A typical mission would begin at the bottom of the figure as the OSP vehicle rolls out from its processing facility.  Since the requirement was to launch on multiple launch vehicles, the OSP vehicle could move to either the Delta or Atlas launch pads.  Continuing clockwise, after launch the OSP vehicle would maintain communication with both space and ground assets using direct and indirect links.  In the event of an aborted launch, the OSP vehicle could return to earth using emergency systems.  After nominal flight operations and re-entry, the OSP vehicle would return to its processing facility to be readied for its next mission.

The number of external interfaces to the OSP system drove the need for a rigorous and structured approach to meeting the mission needs while interface definition was still evolving.  The problem defined involved a ?System of Systems? modeling approach.

Figure 2 ? OSP Mission Overview  As the OSP program evolved, the mission requirements evolved as well.  The evolution went beyond a refinement of existing requirements to the point of brand new requirements which drove the design of the entire system. In response to the new requirements, the OSP architecture changed to a capsule based OSP vehicle with an expendable launch abort system.  The systems engineering process allowed for a smooth change in the design process with minimal impacts to the operational and functional model of the system.

4. SYSTEMS ENGINEERING PROCESS  System of Systems  The OSP system was driven by the external interfaces to the program.  When these interfaces are complex and static the problem is difficult.  With complex dynamic interfaces the problem becomes even more difficult, and an operational framework becomes a crucial aspect of the design.

Traditional design approaches of less complex systems might be able to simply define external interfaces and use them as design constraints.  However, the OSP system had to integrate with several large and operationally complex systems.  System interfaces changed throughout each mission and the entire lifetime of the OSP system.

Integrating the OSP operations into these systems with minimal disruption was essential.  The OSP mission operations also ran in parallel to ground  processing due to the multiple, reusable airframes, adding further complexity.  The interfaces to the OSP system are shown in Figure 3 below.  This dynamic definition of interfaces drives the process to a ?system of systems? view.

The challenge was to understand the operations of existing systems so that the OSP system would integrate and support continuing operations.

While there were many systems with which the OSP system interfaced, the primary systems that drove the OSP system were the ISS, the ELV, and human integration.  Human integration can be defined as interfacing with a human system.  In particular, the spacecraft crew was defined as an external system.  The complexity and dynamic nature of these particular interfaces drove almost every aspect of the system design.  As the operations of each external system varied, the OSP system operations and capabilities had to respond in kind.  Orbital chose to model the OSP vehicle interface dynamics using a states & modes approach.  A state was defined as a unique set of boundary conditions within which certain modes of functionality were required.

The complexity of operations modeling demanded a rigorous framework in which the systems engineering process could reside.  The framework would need to take into account external and internal operations, the functionality needed to perform various missions, and would have to respond to dynamic and volatile system requirements.

OSP System   Spacecraft   Launch Vehicle   ISS Mating Adapter   Ground Segment     Figure 3 ? OSP System Interfaces  C4ISR Overview  The Department of Defense (DoD) Architecture Framework (DoDAF) provides guidance for developing and describing architectures for Systems of Systems. [1]  The DoDAF is an evolution of the concepts introduced in the Command, Control, Communications, Computers, Intelligence, Surveillance, and Reconnaissance (C4ISR) Architecture Framework.  This framework defines the three views presented in Figure 4 of an architecture and their interrelationships:  Operational View, System View, and Technical Standards View.

Figure 4 ? C4ISR Architecture Framework Views  The Operational View is a description of the operational activities, operational elements, and information exchange within the architecture.  The System View is a functional description of the architecture which defines the system elements and resources.  The Technical Standards View provides standards and guidelines for the system capabilities as well as addresses new technology development.  The three interrelated views are necessary to fully describe a ?System of Systems?.

C4ISR Systems Engineering Process  Based on the C4ISR framework, a systems engineering process was established for the OSP program that allowed the system operations as well as the mission requirements to drive the system design.  The system operations were identified in terms of how the OSP system would be used and how it interfaced/integrated into the existing Human Space Flight Program.  The main emphasis was placed on the human interactions. The functionality of the system was then primarily driven by the identified operations.  How the system was being used defined the functions of the physical hardware elements.  Technologies and technology development influenced the system operations and functionality.

One of the unique challenges for the development was modeling the man-machine interface.  As presented earlier,  the OSP spacecraft crew were not in fact considered a part of the system.  They were the operators of one segment of the system.  Both human rating guidelines as well as human integration standards had to be considered.  Modeling the crew as an interface to the system allowed the dynamic, operational aspects of human operations to be captured as a part of system operations.

5. IMPLEMENTATION  This section describes the implementation of the C4ISR methodology in a systems engineering tool in order to tie together requirements management with operational modeling, functional modeling, and technologies.

CORE Overview  The tool selected to tie this methodology together was a systems engineering database, CORETM by Vitech Corporation.  The tool served as an integral part of the systems engineering process.

The C4ISR CORE methodology was developed for the OSP program to support specific products and viewpoints necessary to support the systems engineering process.  The products included Design Capture and Traceability, Specification Generation, Operations and Simulation Analysis, and Technology Integration.  Figure 5 (next page) depicts the overall use of the CORE database.  The originating requirements, which included mission requirements, design requirements, environmental conditions, as well as guidelines and standards, served as inputs to the database.  These inputs captured the customers objectives.  The database was then used to model the system through different views; the physical elements, a functional view, an operational view, an interface view, and a verification view.  The models were then used to generate outputs such as design documentation and to make system assessments.

C4ISR Schema Details  A modified C4ISR schema was developed for this application, which allowed for the traditional functional views as well as the operational views of the system to be captured within the database.  Using the C4ISR framework as a guideline, an interpretation of the database elements was established in order to develop a schema which would allow for a ?systems of systems? engineering approach.

The classes and relationships necessary to capture this information were defined to support this specific CORE application for the OSP program as shown in Figure 6.  The classes and relationships were primarily organized into three main categories consistent with the C4ISR framework: System/Component Classes, Operational Classes, and     Derived Requirements Classes.  The System/Component Classes defined the physical hardware elements of the system, the physical interfaces of the system, and the functions performed by the physical     Figure 5 ? CORE Database Overview  hardware elements.  The Operational Classes defined the operational elements of the system, the operational interfaces, and the operational activities including human interaction.  The Derived Requirements Classes defined the derived requirements based on the originating requirements.

These derived requirements were then tied directly to the functional and operational models through either performance indices or constraints.  Performance indices either indicated how well a function or an operational activity needed to be performed.  Constraints either constrained the physical hardware elements or operational elements.

Figure 6 ? CORE Element Classes  CORE Models  Using the previously discussed systems engineering process and CORE schema, the OSP system was defined and modeled within the CORE database.  This included the development and integration of an operational model, system model, and technologies, as well as requirements management.

Operational Models  Given the mission goal to support the crew transfer and rescue needs of ISS, heavy emphasis was placed on operations.  During the early phases of the program, the operational activities, both flight and ground, that the system needed to perform in order to meet the mission objectives were identified. These high-level operational activities were then further decomposed and addressed at a lower level.  For example, the approach that was taken to further identify flight operations was to look closely at the operations the spacecraft would need to perform.  This was accomplished by identifying the Spacecraft State & Mode along with the Transition Diagrams (See Figure 7 and Figure 8 next page).

Operational ClassesSystem / Component  Classes Derived Requirement  Classes Link  Function  Component/ System  Perf. Index.

Constraint  constra ins  Operational Element  Need Line Operational Information  Operational Activity  Originating Requirement  exhibited by / exh ibits  Annotation  traces to  / from  Design Decision  Item  implemented by / in  Mission  accomp lished  by  Design Documentation: Specifications  ? System ? Segment  ? Element ?Subsystem  ? Assembly Each Specification Includes:  ? Performance Requirements ? Physical Characteristics  ? Mass, Envelope, . . .

? Environments ? Interfaces  ? RTM ? Verification Requirements ? Verification Cross Reference Matrix  Design Model  Completeness Assessments Flow Down and Impact  Design Verification ? Verification  Requirements  ? Verification Events  ? Verification Procedures  Design Verification ? Verification  Requirements  ? Verification Events  ? Verification Procedures  Originating Requirements  ? Design Requirements  ? Mission Requirements  ? Environmental Specifications  ? General Interface Specifications  ? Product Assurance Requirements  ? Technology: Design Handbooks, Product, Process, Material, Standards . .

Te le, Co ax fro m BT X- to O nS tn  Te le, Co ax fro m BT X- to O nS tn  Tele, Coax from H ybri d Fltr.

Telemetr y,  Coax from BT X-2 to Omni/Er th  Tele, Coax from BT X-1 to Omni/Erth  Telemetr y,  from H ybri d  Telemetr y,  Wavegui de to Z enith H orn  Command, C oax fr om Or bit H orn  Telemetr y,  Wavegui de to Earth H orn  Command, C oax fr om Omni/H orn C oupl er 1  Command, C oax fr om Dipl exer  Command, C oax fr om Omni/H orn C oupl er 2  Command, Waveg uide fr om Earth H orn  Command, Waveg uide fr om Z eni th Hor n  Command, C oax fr om Omni  Command, C oax fr om Coupler  4.3.2.3.3  Command Recei ver  Component  4.3.2.3.4  Command Recei ver  Component  4.3.2.3.8  Omni Antenna  Component 4.3.2.3.10  RX Er th/Znth Coupler  Component  4.3.2.3.6  Hybrid Fl tr Omni/Ear th XT  Component  4.3.2.3.14  TX C oupler  Component  4.3.2.3.15  TX Earth F aci ng Horn  Component  4.3.2.3.16  TX Z enith Wi de Beam H orn  Component  4.3.2.3.12  RX Wide Beam Earth H orn  Component  4.3.2.3.13  RX Wide Beam Zeni th H or n  Component  4.3.2.3.11  RX Omni/H orn Coupler  Component  4.3.2.3.1  Beacon Transmitter  Component  4.3.2.3.5  Diplexer (CT&R)  Component  Coax and Waveg uide  Component  4.3.2.3.7  Hybrid Fl tr Stat'n /Zenith XT  Component  4.3.2.3.9  On-Station H orn  Component  4.3.2.3.2  Beacon Transmitter  Component  Te le, Co ax fro m BT X- to O nS tn  Te le, Co ax fro m BT X- to O nS tn  Tele, Coax from H ybri d Fltr.

Telemetr y,  Coax from BT X-2 to Omni/Er th  Tele, Coax from BT X-1 to Omni/Erth  Telemetr y,  from H ybri d  Telemetr y,  Wavegui de to Z enith H orn  Command, C oax fr om Or bit H orn  Telemetr y,  Wavegui de to Earth H orn  Command, C oax fr om Omni/H orn C oupl er 1  Command, C oax fr om Dipl exer  Command, C oax fr om Omni/H orn C oupl er 2  Command, Waveg uide fr om Earth H orn  Command, Waveg uide fr om Z eni th Hor n  Command, C oax fr om Omni  Command, C oax fr om Coupler  4.3.2.3.3  Command Recei ver  Component  4.3.2.3.4  Command Recei ver  Component  4.3.2.3.8  Omni Antenna  Component 4.3.2.3.10  RX Er th/Znth Coupler  Component  4.3.2.3.6  Hybrid Fl tr Omni/Ear th XT  Component  4.3.2.3.14  TX C oupler  Component  4.3.2.3.15  TX Earth F aci ng Horn  Component  4.3.2.3.16  TX Z enith Wi de Beam H orn  Component  4.3.2.3.12  RX Wide Beam Earth H orn  Component  4.3.2.3.13  RX Wide Beam Zeni th H or n  Component  4.3.2.3.11  RX Omni/H orn Coupler  Component  4.3.2.3.1  Beacon Transmitter  Component  4.3.2.3.5  Diplexer (CT&R)  Component  Coax and Waveg uide  Component  4.3.2.3.7  Hybrid Fl tr Stat'n /Zenith XT  Component  4.3.2.3.9  On-Station H orn  Component  4.3.2.3.2  Beacon Transmitter  Component  4.3.2.3 TC&R  Component  4.3.2.3.1 Beacon  Transmit ter 1 Component  4.3.2.3.2 Beacon  Transmit ter 2 Component  4.3.2.3.3 Command Recei ver 1  Component  4.3.2.3.4 Command Recei ver 2  Component  4.3.2.3.5 Diplexer (CT&R)  Component  4.3.2.3.6 Hybrid Fl tr  Omni/Ear th XT Component  4.3.2.3.7 Hybrid Fl tr  Stat'n /Zenith XT Component  4.3.2.3.8 Omni Antenna  Component  4.3.2.3.9 On-Station H orn  Component  4.3.2.3.10 RX Er th/Znth  Coupler Component  4.3.2.3.11 RX Omni/H orn  Coupler Component  4.3.2.3.12 RX Wide Beam  Earth H orn Component  4.3.2.3.13 RX Wide Beam  Zeni th H or n Component  4.3.2.3.14 TX C oupler  Component  4.3.2.3.15 TX Earth  Facing H orn Component  4.3.2.3.16 TX Z enith Wi de  Beam H orn Component  Coax and Waveg uide Component  Command, Coax from C.. .

Link  Command, Coax from Dip...

Link  Command, Coax from O...

Link  Command, Coax from O...

Link  Command, Coax from O...

Link  Command, Waveg uide f ...

Link  Command, Waveg uide f ...

Link  Tele, Coax from BTX- 1 to.. .

Link  Tele, Coax from BTX- 1 to.. .

Link  Tele, Coax from BTX- 2 to.. .

Link  Tele, Coax from H ybrid Fl tr.

Link  Telemetr y, Coax from BT ...

Link  Telemetr y,  from Hybrid Link  Telemetr y, Waveg uide to. ..

Link  Telemetr y, Waveg uide to. ..

Link  4.3.2.3 TC&R  Component  4.3.2.3.1 Beacon  Transmit ter 1 Component  4.3.2.3.2 Beacon  Transmit ter 2 Component  4.3.2.3.3 Command Recei ver 1 Component  4.3.2.3.4 Command Recei ver 2  Component  4.3.2.3.5 Diplexer (CT&R)  Component  4.3.2.3.6 Hybrid Fl tr  Omni/Ear th XT Component  4.3.2.3.7 Hybrid Fl tr  Stat'n /Zenith XT Component  4.3.2.3.8 Omni Antenna  Component  4.3.2.3.9 On-Station H orn  Component  4.3.2.3.10 RX Er th/Znth  Coupler Component  4.3.2.3.11 RX Omni/H orn  Coupler Component  4.3.2.3.12 RX Wide Beam  Earth H orn Component  4.3.2.3.13 RX Wide Beam  Zeni th H or n Component  4.3.2.3.14  TX C oupler  Component  4.3.2.3.15 TX Earth  Facing H orn Component  4.3.2.3.16 TX Z enith Wi de  Beam H orn Component  Coax and Waveg uide Component  Command, Coax from C.. .

Link  Command, Coax from Dip...

Link  Command, Coax from O...

Link  Command, Coax from O...

Link  Command, Coax from O...

Link  Command, Waveg uide f ...

Link  Command, Waveg uide f ...

Link  Tele, Coax from BTX- 1 to.. .

Link  Tele, Coax from BTX- 1 to.. .

Link  Tele, Coax from BTX- 2 to.. .

Link  Tele, Coax from H ybrid Fl tr.

Link  Telemetr y, Coax from BT ...

Link  Telemetr y,  from Hybrid Link  Telemetr y, Waveg uide to. ..

Link  Telemetr y, Waveg uide to. ..

Link  AND  9.1  Space Envir onments  9.2  Ground Envir onments  9.3 Perfor m Gr ound  Station Functions  9.4 Perfm' Broadcas t  Station Functions  9.6 Perfor m  Customer Functions  9.5 Perfor m Space  Vehicle Functions  AND  Inertial Fr ame  Earth R adiati on  Sol ar Radi ation  Magnetic Fi eld  Cosmic Radi ati on  Ground Envir on.

Space Vehicle Telemetr y  Ground Commands Broadcas t  Downli nk Broadcas t Uplink  AND  9.1  Space Envir onments  9.2  Ground Envir onments  9.3 Perfor m Gr ound  Station Functions  9.4 Perfm' Broadcas t  Station Functions  9.6 Perfor m  Customer Functions  9.5 Perfor m Space  Vehicle Functions  AND  Inertial Fr ame  Earth R adiati on  Sol ar Radi ation  Magnetic Fi eld  Cosmic Radi ati on  Ground Envir on.

Space Vehicle Telemetr y  Ground Commands Broadcas t  Downli nk Broadcas t Uplink  Functional O  perational P  hysical E  lem ent  Interface N  eed  InputInput verification  OutputOutput  OutputOutput  Simulation Assessment  Cost, Throughput, Interface Traffic  OutputOutput     Figure 7 ? Spacecraft State Transition Diagram  The Spacecraft State Transition diagram depicts the unique states that exist, based on unique configurations and/or unique boundary conditions. These states and transition activities were in essence the operational activities that needed to be performed by the system. Referring back to Figure 1, you can see a cartoon representation of the mission that parallels the states presented here.  Starting at the bottom of Figure 7, the spacecraft is in the ?S/C Integrated LV State?.  This state exists during un-crewed joint operations with the launch vehicle, before the vehicle is on the pad. Once the joint stack is integrated to the pad, the spacecraft moves to a new state.  The change in boundary conditions, specifically the addition of the pad as an interface source, forces a state change for the spacecraft.

Note that while a nominal mission would proceed clockwise through the state transition diagram, opportunities exist to step back through the flow if conditions require.  The arrows indicate the only ways by which the spacecraft can change state.  Addition of crew members is a major state change to the spacecraft.  Recall  that the crew is modeled as an external interface to the system.  Therefore, with the addition of crew, a major external interface is exercised.  The conditions indicated along the state transition arrows dictate events that occur and define state transitions.  Of interest in the center of the state transition diagram is the ?S/C Crew Escape State?.

This is the only state that is not part of a nominal mission.

During spacecraft operations, initiation of the crew escape system creates a unique configuration of the spacecraft, and therefore presents a new spacecraft state.  Mission abort does not necessarily require crew escape, and may follow the nominal states, though at an expedited pace.

While states were defined by changes in boundary conditions of the spacecraft, modes are defined by a grouping of the functionality of the spacecraft. The operational modes within the ?ISS Operations State? (refer back to Figure 7) are presented in Figure 8.  Each mode within a state represents a set of functions that are enabled, while further implying that certain functions are disabled.

For instance, while in the ?ISS Rendezvous Mode?, the function of actuating docking mechanisms might be disabled, and the firing of RCS thruster enabled. However, in the ?ISS Dock Mode?, the firing of RCS thrusters is inhibited, while docking actuation is available. On the left side of Figure 8 are the modes from which entrance to the state is allowed.  Note that since there is more than one state from which you can enter the ?ISS Operations State?, the entrance modes called out may not all be in the same state.

Similarly, the exit modes on the right hand side of the diagram lead to modes in different states.

The spacecraft states and transition activities were then modeled as operational flows in CORE as shown in Figure 9 (next page). The operational activities and their logical sequence are consistent with the Spacecraft State Transition Diagram shown above in Figure 7.  The operational model also identified the operational elements, which are tied to the physical hardware elements of the system that perform the operational activities.

Figure 8 ? Spacecraft Operational Modes  ISS Rendezvous Mode  ISS Proximity Operations Mode  ISS Dock Mode  State Entrance State Exit  S/C ISS Operations State From: Orbit Maneuver  Mode  To: Orbit Maneuver  Mode  From: ISS Checkout  Mode  To: ISS Checkout  Mode  ISS Undock Mode  ISS Safe Haven Mode  ISS Emergency Departure Mode  From: S/C Powered Up  Mode To: S/C  Powered Up Mode     Figure 9 ? Spacecraft Operational Flow  Functional Models  After addressing the operational activities that the OSP system needed to perform, the functional models of the OSP system were developed consistent with the system engineering process discussed above.  The first step was to identify the physical hardware elements of the OSP system as prescribed by NASA.  The physical hardware elements of the OSP system were captured in CORE through component decomposition and represented as the product breakdown structure shown in Figure 10.

Figure 10 ? Product Breakdown Structure of OSP System  The OSP system functional models were developed by identifying the system functions based on the mission goals and operations that the system needed to perform.  These functions were then allocated to the prescribed physical hardware elements of the system. As requirements and the system architecture evolved, the system functionality was  re-allocated to different physical hardware elements.  In addition, the functional models also captured the physical interfaces between the OSP system, both internally and externally.

Interface Definition  The CORE database also modeled and captured the interface complexity that existed for the OSP system.  In the database a functional interface was represented as a collection of links that existed between physical hardware elements and an operational interface was represented as a collection of need-lines that existed between operational elements.  The links/need-lines were further defined by either  performance indices or constraints.

Internal and external functional interfaces were modeled within the CORE database by looking at different layers of the system physical hierarchy.  For example the interfaces between the OSP system and external systems were modeled as shown below in Figure 11, which depicts the interfaces that exist between the ISS Mating Adapter and ISS.  Internal functional interfaces were also modeled by looking at the interfaces that exist within the OSP System's physical product breakdown structure.  For example, Figure 12 shows the internal interfaces that exist within the OSP System between the  ISS Mating Adapter (ISSMA) and the Spacecraft.   For clarity, these figures only include the single directional links from the ISS Mating Adapter to ISS and from the ISS Mating Adapter to the Spacecraft respectively.

kill  kill continue to Earth Return  continue to ISS Operations  continue to On-Orbit Operations 0.5  continue to ISS Attached Operations 0.5  OSP.OA.1.1.1 Spacecraft  Prelaunch Ground Processing  OSP.OA.1.1.2 Operate S/C Integrated to  Launch Vehicle  OSP.OA.1.1.3 Operate  Spacecraft Un-Crewed On-Pad  AND  OSP.OA.1.1.4 Operate  Spacecraft Crewed On-Pad  OSP.OA.1.1.5  Spacecraft Launch LP  OSP.OA.1.1.6 Spacecraft On-Orbit  Operations  LP  OSP.OA.1.1.7  Spacecraft ISS Operations  OSP.OA.1.1.8 Spacecraft ISS  Attached Operations  LE  OR LP  LE  OR LP  OSP.OA.1.1.9  Spacecraft Crew Escape  AND  0.0  1.0OSP.OA.1.1.10  Spacecraft Earth Return  OSP.OA.1.1.11  Spacecraft Recovery  OSP.OA.1.1.12  Spacecraft Post Recovery Ground  Processing  OR OSP.OA.1.1.13  Spacecraft Storage  OR  Continued to Part B  Continued From Part A  Part A  Part B   OSP System   Spacecraft   Launch Vehicle   ISS Mating Adapter   Ground Segment     M at  in g  A da  pt er  to IS  S B  on di  ng  M at  in g  A da  pt er  to IS  S F  un ct  io na  l L in  k  M at  in g  A da  pt er  to IS  S T  he rm  al  M at  in g  A da  pt er  to IS  S C  om m  an d  an d  Te le  m et  ry L  in k  M at  in g  A da  pt er  to IS  S M  ax C  ur re  nt R  at in  g  M at  in g  A da  pt er  to IS  S V  ib ra  tio ns  M at  in g  A da  pt er  to IS  S B  er th  in g  Lo ad  s  M at  in g  A da  pt er  to IS  S   P C  S L  in k  M at  in g  A da  pt er  to IS  S R  M S  P ow  er D  at a  G ra  pp le  F ix  tu re  (P D  G F)  L in  k  M at  in g  A da  pt er  to IS  S IH  M  M at  in g  A da  pt er  to IS  S E  le ct  ro m  ag ne  tic In  te rfe  re nc  e  M at  in g  A da  pt er  to IS  S C  ur re  nt R  et ur  n  M at  in g  A da  pt er  to IS  S In  st ru  m en  ta tio  n  M at  in g  A da  pt er  to IS  S S  ho ck  M at  in g  A da  pt er  to IS  S A  co us  tic L  oa ds  M at  in g  A da  pt er  to IS  S P  re ss  ur e  Lo ad  s  M at  in g  A da  pt er  to IS  S S  tru ct  ur al  L in  k  M at  in g  A da  pt er  to IS  S F  lu id  L in  k  M at  in g  A da  pt er  to IS  S P  ow er  L oa  d C  on st  ra in  ts  M at  in g  A da  pt er  to IS  S C  ur re  nt L  im iti  ng  M at  in g  A da  pt er  to IS  S C  ab le  a nd  W ire  D es  ig n  M at  in g  A da  pt er  to IS  S O  n- O  rb it  Lo ad  s  M at  in g  A da  pt er  to IS  S W  ire /C  on ne  ct or  S iz  in g  M at  in g  A da  pt er  to IS  S M  ec ha  ni ca  l L in  k  M at  in g  A da  pt er  to IS  S E  le ct  ro m  ag ne  tic C  om pa  tib ili  ty  M at  in g  A da  pt er  to IS  S V  id eo  S ig  na ls  M at  in g  A da  pt er  to IS  S G  ro un  di ng  M at  in g  A da  pt er  to IS  S C  on tro  l A tm  os ph  er e  M at  in g  A da  pt er  to IS  S A  ud io  S ig  na ls  M at  in g  A da  pt er  to IS  S   In te  rfa ce  B us  es  M at  in g  A da  pt er  to IS  S O  pt ic  al P  FM N  TS C  S yn  c an  d C  on tro  l  M at  in g  A da  pt er  to IS  S M  at in  g/ D  em at  in g  P ow  er Is  ol at  io n  M at  in g  A da  pt er  to IS  S B  er th  in g  M ec  ha ni  sm L  in k  International Space Station (ISS)   ISS Mating Adapter    Figure 11 ? External Interface Diagram: ISS Mating Adapter  to ISS  M at  in g  Ad ap  te r t  o Sp  ac ec  ra ft  Po w  er L  in k  M at  in g  Ad ap  te r t  o Sp  ac ec  ra ft  Fl ui  d Li  nk  M at  in g  Ad ap  te r t  o Sp  ac ec  ra ft  C om  m an  d an  d Te  le m  et ry  L in  k  M at  in g  Ad ap  te r t  o Sp  ac ec  ra ft  D oc  ki ng  /A tta  ch m  en t M  ec ha  ni sm  (s )  M at  in g  Ad ap  te r t  o Sp  ac ec  ra ft   In te  rfa ce  B us  es  M at  in g  Ad ap  te r t  o Sp  ac ec  ra ft   D at  a Ex  ch an  ge  M at  in g  Ad ap  te r t  o Sp  ac ec  ra ft  St ru  ct ur  al L  in k   Spacecraft   ISS  Mating Adapter    Figure 12 ? Internal Interface Diagram: ISS Mating Adapter  to Spacecraft  Technologies  Due to the short development time frame of the OSP program, NASA required that the system not require any  new technology development.  Therefore the OSP system had to meet the mission objectives using only existing technologies.  These existing technologies were introduced into the CORE modeling database as requirement constraints on the OSP system.

Requirements Management  Requirements management was performed within the CORE database to track and perform requirements flow- down as well as tie the requirements together with the operational models, functional models, and technologies.

Requirements told either how well the system needed to perform, set constraints on the system, or defined the interfaces.  In the CORE database, all requirements appeared as either performance indices or constraints.

The customer objectives were introduced into the CORE database as originating requirements.  These originating requirements included mission requirements, design requirements, environmental conditions, guidelines, and standards.  Originating requirements were then traced to OSP System Level requirements.  The OSP System Level requirements defined the performance indices and constraints at the system level.  These performance indices and constraints were then flowed down and decomposed into lower level performance indices and constraints at the segment level, element level, and component level.  This supported the development of the system and segment performance specifications and requirements traceability matrix.

All of the requirements captured in CORE were directly tied to either the operational model, functional model, or technologies.  If the requirement was a performance requirement, it was tied to either the operational or functional model through a performance index.  The performance index indicated how well the function or operation needed to be accomplished. The function or operation in turn was tied back to the hardware elements of the OSP system.  For example, the requirement for two days of contingency operations by the spacecraft while not mated to ISS was represented as a performance index exhibited by the ?Spacecraft On-Orbit Operations? activity previously shown in Figure 9. The ?Spacecraft On-Orbit Operations? activity was in turn performed by the Spacecraft hardware element. If the requirement set a constraint on the system, it was depicted as a constraint on either an operational element or hardware element in CORE.  For example, the requirement that the spacecraft shall have an operational service life of thirty years was captured in CORE as a constraint on the Spacecraft hardware element. If the requirement defined an interface, it appeared as either a performance index or constraint on a link.  For example, the requirement that the mechanical interface between the ISS Mating Adapter and Spacecraft shall be the Low Impact Docking System (LIDS) was a constraint that was placed on     the ?Mating Adapter to Spacecraft Docking/Attachment Mechanism(s)? link previously identified in Figure 12.

One of the challenges for the requirements management process was capturing the man-machine interfaces.  This specific challenge was to develop and implement a methodology that allowed operational requirements to drive the physical hardware design.  In CORE, this was accomplished by allowing performance indices tied to the operational model to decompose into performance indices related to the operational model as well as the functional model.

6. CONCLUSION  A robust systems engineering process is required for a large scale program with many interfaces.  The processes and implementation presented in this paper are ideal when faced with a rapidly changing requirements environment and dynamic interfaces.   Traditional acquisition of systems revolves around a rigid set of design-to requirements.   As recent history has shown, operationally based acquisition is on the rise.  This means that requirements are more likely to be in flux further into the program.

The C4ISR methodology and implementation presented in this paper provide a robust system engineering process for a large scale program with many interfaces.  In particular, the dynamic interfaces and the integration of human interfaces were handled through the development of segment states and modes.  The state transitions were driven by system operations.  This operations based systems engineering is necessary to understand large, complex systems.

The process was implemented using the CORE systems engineering tool.  A flexible tool such as CORE was required to build the custom schema required for this unique program.  The capability to rigorously define the dynamic interfaces as well as decompose those interfaces was required to capture the dynamics of operationally driven systems.  Functional and physical models responded to these operations. This implementation in CORE allowed for a ?Systems of Systems? view to be modeled within the same database as requirements management.

The demise of the OSP and precursor programs cut short the full implementation of this process.  Given time, states, modes, and then operational and functional models would have been built for all segments of the system.  In addition, the end to end traceability from operational requirements to component design requirements would have provided a robust platform for system verification.

While human spaceflight is a unique problem, the issue of ?systems of systems? integration is present in many fields.

When this is coupled with human integration, the need for  an operations approach is multiplied.  Determining how to operate a system after it is functionally and physically designed results in delays and cost escalation.  An approach that takes into account human interaction and operations at the outset is more likely to result in a system that succeeds throughout the program lifecycle.

7. REFERENCES  [1] DoD Architecture Framework Working Group, ?DoD Architecture Framework Version 1.0? August 30, 2003.

8. ACKNOWLEDGEMENTS  The primary development effort of the C4ISR CORE methodology as implemented on the OSP program was completed by Michael Wood, Orbital Sciences Corporation, and Marge Dyer, Vitech Corporation.

9. BIOGRAPHY  Staci N. Merida is a Principal Engineer in the Advanced Programs Group at Orbital Sciences Corporation.  She has over six years of systems engineering experience at Orbital Sciences Corporation, Lockheed Martin Corporation, and  Massachusetts Institute of Technology.  Past projects include: Orbital Space Plane Program, GEO Communications Satellite Programs, and the Wide Area Surveillance Projectile. Staci is a graduate of the Massachusetts Institute of Technology holding both an S.B.

and S.M. in Aeronautics and Astronautics.

Rahul A. Saha is a Principal Engineer in the Advanced Programs Group at Orbital Sciences Corporation. He has over ten years of systems engineering experience at Orbital Sciences Corporation, Georgia Institute of Technology and Massachusetts  Institute of Technology.  Most recently, he served as the Systems Engineering Manager for the Orbital Space Plane Program.  Past projects include The CTRV Program, NASA?s Space Transportation Architecture Studies, the X- 34 Hypersonic Reusable Launch Vehicle Program, and The Taurus Launch Vehicle Program.  Rahul holds an M.S. In Aerospace Engineering from Georgia Tech, and an S.B. in Aeronautics and Astronautics from the Massachusetts Institute of Technology.

