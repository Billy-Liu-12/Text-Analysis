MiRABIT: A New Algorithm for Mining Association Rules

Abstract  Mining a sales transaction database is a very expensive task in terms of the processing time.  Depending on the business branch of the company some characteristics of the database are different.  The algorithms currently used for mining association rules optimize this task for databases with supermarket characteristics.  The MiRABIT algorithm that is presented in this work optimizes the mining task for databases with clothing store characteristics.  Comparative tests demonstrate the efficiency of the proposed algorithm in relation to the standard algorithm Apriori in a clothing store database.

Keywords: association rules, data mining, clothing store.

1 Introduction  Nowadays, lots of organizations interact with their clients through computers.  These interactions are stored in a database.  A record in this database typically consists of the  transaction number, the transaction date and the set of items bought in that transaction [1].  Given a sales transaction database, mining association rules is a way to find sets of items that tend to occur together in a transaction, i.e. the significative relationships, from the algorithm point of view, among items such as that the presence of some items in a transaction implies the presence of other items in the same transaction.

Association rules aim to understand the client behavior.

The statement in the form "c% of clients that purchase the item A also purchases the item B" consists in a association rule.

1.1 The theoretical problem  The formal statement of the mining association rules problem was first presented by [3].

Let I = {i1, i2, i3, ..., im} be a set of binary attributes, called items.  Let  D = {T1, T2, T3, ..., Tm} be a set of transactions, where each transaction T is a set of items such that T  ?  I.  Each transaction T is represented as a binary vector, with an element t[k]=1 if T contains the item ik, and t[k]=0, otherwise.  There is exactly one tuple in the database to each transaction.  Considering X  as a subset of I, a transaction T contains X if, for all items ik in X, t[k]=1. Similarly, being Y a subset of I, a transaction T contains Y if for all items ik in Y, t[k]=1.

An association rule consists in an implication of the form  X => Y, where X ? I, Y ? I and X ? Y = ?, i.e. X is a set of some items in I, and Y is a set of some items in I that are not present in X.  The support s of an itemset X is the number of transactions in which the X itemset occurs as a subset.  The support of the rule X => Y is given as s(X?Y).

The rule X => Y is satisfied in the set of transactions T with confidence factor 0 ? c ? 1, if at least c% of transactions in T that satisfy X also satisfy Y.  The notation X => Y | c specifies that the rule X => Y  has confidence factor of c. More precisely, the confidence factor is given as s(X?Y) / s(X).

Given the set of transactions T, it is necessary to generate all rules that satisfy certain additional constraints of two different forms[2]: ? Syntactic constraints: these constraints involve  restrictions on the items that can appear in a rule.

? Support constraints: these constraints involve  restrictions on the number of transactions in T that support a rule.

These constraints are applied to optimize the time and     the number of generated rules.

The problem of mining association rules can be  decomposed in two steps: ? Find all large itemsets.  A large itemset is a set of  items that has support above a certain threshold, called minsup. This step is computationally expensive and I/O intensive.

? Generate high confidence rules. In this step all rules that have a confidence factor above a certain threshold, called minconf are generated. This step is relatively straightforward.

If the itemset X is large then every subset of X will  also be large. If the itemset X is not large then every set that contains X will also be not large. All rules derived from X satisfies the support constraints if X satisfies the support constraints.

1.2 Related Works  The Apriori algorithm presented by [3] is the most used algorithm for mining association rules.   The Apriori algorithm makes several passes over the database and uses a procedure called apriori-gen for candidates itemset generation.  In this procedure the large itemsets in the previous pass are combined to generate the candidates itemsets for the actual pass.  After Apriori, several algorithms for mining association rules have been proposed in the literature using other techniques to solve this problem.

One technique used is minimize the I/O by decrease the passes number.  The Partition algorithm presented by [5] minimizes I/O by scanning the database only twice.  It partitions the database into small chunks which can be handled in memory. In the first pass it generates the set of all potentially large itemsets (any itemset locally large in a partition) and in the second pass their global support is obtained.  Others algorithms like Eclat, MaxEclat, Clique e MaxClique proposed by [6] scan database only once, generating all large itemsets.  They make a clusterization process before the candidates itemsets generation and counting. Other way to minimize the I/O is using database sampling, in this case some transactions are selected by sampling to be analised.

2 Influence of the database characteristics on the mining process  It?s a fact that the characteristics of the analyzed activity branch have influence on the process of mining association rules [8].

In this work, there is a comparisson between a typical clothing store database against a typical supermarket database, focusing the distribution of items per transacion.

)LJXUH ? ? $ W\SLFDO VXSHUPDUNHW GDWDEDVH  In the considered supermarket database, in one month, occured 2,449 transactions involving 34,375 items.  This results in an average of items per transaction of 14.03.  The largest transaction contains 281 items.

Figure 1 presents the distribution of items per transaction of this supermarket database.

In the considered clothing store database, in one month, occured 2,266 transactions involving 4,380 items.

This results in an average of items per transaction  of 1.93.  The largest transaction contains 19 items.  Figure 1 presents the distribution of items per transaction of this clothing store database.

)LJXUH ? ? $ W\SLFDO FORWKLQJ VWRUH GDWDEDVH  These distinct databases characteristics should be considered  in the design of an appropriate algorithm for mining a specific database. These differences affect widely decisively the algorithm performance.

Distribution of items per transaction      1 3 5 7 9 11 13 15 17 19  Items in transaction amount  T ra  ns ac  tio ns  a m  ou nt  Distribution of items per transaction   1 30 59 88 11       Items in transaction amount  T ra  ns ac  tio ns  a m  ou nt     These results show that a supermarket database has an average of items per transaction much larger than a clothing store database.

3 Discovering large itemsets  The first step for the solving of the problem of mining association rules, which consists in discovering large itemsets, it is the most complex and expensive step.  [6] explains that the task of discovering large itemsets is I/O intensive being a great concern in mining association rules process.  [7] says that given m items, there are 2m  itemsets, however only a small fraction of the whole space consists of large itemsets.  In a cloting store database this fraction is much smaller than that in a supermarket database, because the average of items per transaction is smaller.

In the sequence, two algorithms to mining association rules will be analysed: Apriori, that is the most used in this task, and MiRABIT, that is introduced by this work.

In this analysis we are considering only the discovery of large itemsets, because the rules generation is done in the same manner in both algorithms.

3.1 Apriori algorithm  The Apriori algorithm was proposed by [2] and is the most used algorithm to discover association rules.

Apriori makes multiple passes over the sales transaction database.  In the first pass, the individual items support is counted.  The items that have support greater than or equal to the minimum support is considered large items.

In the subsequent passes, given k as the number of the current pass,  the large itemsets in the previous pass (k - 1) is grouped in sets with k items; these sets are called candidates itemsets.  The support of these candidates itemsets is counted, and, if the support is greater than or equal to the minimum support this itemset is considered large.  This process continues until the large itemsets in the pass be an empty set.

Like a time optimization method, this algorithm supposes that if X ? ? Y , and X is not large, than Y is not large too.  Therefore in a new pass over the database, the algorithm don?t count all itemsets, but just the candidates itemsets selected in the previous pass.  This method results in a decrease of the algorithm execution time.

After the second pass, where k is greater than or equal to 2, the algorithm executes two steps: in the first step the large itemset Lk-1 found in the (k-1) pass is used to generate the candidates itemset Ck using the Apriori - Gen function; in the second step the database is scanned  and the candidates itemsets Ck support are counted.

Figure 3 presents the Apriori algorithm pseudocode.

)LJXUH ? ? $SULRUL $OJRULWKP SVHXGRFRGH >?@  3.2 MiRABIT Algorithm  The MiRABIT acronymous signifies Minera??o de Regras de Associa??o em Bancos de Dados com Baixa M?dia de Itens por Transa??o or mining association rules in databases with low average of itens per transaction.  The MiRABIT Algorithm is optimized to databases with low average of items in transaction [4].

This algorithm makes multiple passes over the database.

In the first pass is counted the individual items support.

The items that have a support  greater than or equal to the minimum support are considered large items. In the second pass, at each transaction, its items are grouped in sets of two items.  At each set with two item, is verified if its subset is large; if not, this set support is not counted, otherwise this set support is counted, and so on to next passes.   At the end of  each pass, the sets of candidates with support greater than or equal to the minimum support is considered large itemsets.  The process iterates until the large itemsets have just one element or be an empty set.

The candidates itemsets generation turns critical in a clothing store database because the ratio large itemsets/candidates itemsets is smaller than this ratio in a supermarket database.  Because this, we observed that is more efficient to generate the candidates itemsets in each transaction than generate the candidates itemsets in the beginning of the each pass.  MiRABIT algorithm makes several I/O operations at each transaction, but this overhead is more efficient than creating a big set of candidates itemsets like Apriori does. Figure 4 presents the MiRABIT algorithm pseudocode.

The MiRABIT algorithm generates the same large itemset as the Apriori algorithm does, however, MiRABIT generates a smaller candidates itemsets than Apriori, as shown in table 1.

L1 = {large 1-itemsets}; for (k=2; Lk-1 ? ?; k++) do begin Ck = apriori_gen(Lk-1);  // New candidates forall transactions t ? D do begin Ct = subset(Ck, t);   //Candidates contained in t forall candidates c ? Ct do c.count++; end Lk = {c ? Ck | c.count ? minsup}; end     )LJXUH ? ? 0L5$%,7 $OJRULWKP SVHXGRFRGH  4 Comparing the performance of MiRABIT and Apriori  To analyse the relative performance of the MiRABIT and Apriori algorithms, we used a real clothing store database.   In this analysis a one-month sale cycle was considered.  In this cycle the database stored 2265 transactions and 4380 items.

Figure 5 demonstrates the relative performance of these algoritms.  Four experiments were carried out accomplished using the same database with different minimum support factors.

)LJXUH ? ? 5HODWLYH SHUIRUPDQFH  The main difference between MiRABIT and Apriori is related to the generation of candidates itemsets. The set of large itemsets is the same in both algorithms.  If the minimum support increases, the generated candidates itemsets decreases, and this causes the performance difference decreases too.

7DEOH ?? 7LPH FRPSDULVVRQ EHWZHHQ $SULRUL DQG  0L5$%,7 DOJRULWKPV  Time (seconds)Minimum support Apriori MiRABIT  2 130 50 3 49 34 4 30 24 5 28 20  7DEOH ?? ,WHPVHWV FRPSDULVRQ EHWZHHQ $SULRUL DQG  0L5$%,7 $OJRULWKPV  Candidates itemsets generated  Minimum support  Apriori MiRABIT  Frequent itemsets  2 648707 2509 959 3 107594 1419 485 4 39344 830 285 5 17582 545 192  Table 1 and table 2 show the results obtained with MiRABIT and Apriori algorithms.  The table 1 demonstrates the efficiency of MiRABIT in terms of processing time. The table 2 demonstrates clearly that the number of candidates itemsets generated is the reason of MiRABIT superior efficiency.

5 Conclusions  In this paper we discuss that depending on the business branch of the company some characteristics of the database are different.  The average of items per transaction is a very important database characteristic which should be considered in the choice of an appropriate algorithm for mining association rules.

The MiRABIT algorithm, which is presented here, is optimized to find association rules in databases with low average of items per transaction. It is demonstrated the experimental results that compares the MiRABIT algorithm and the Apriori algorithm in a clothing store database.  In these experiments the MiRABIT algorithm had a better performance than Apriori algorithm.

