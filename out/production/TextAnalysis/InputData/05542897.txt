Privacy-Preserving Distributed Association Rule Mining Based on the Secret Sharing Technique

Abstract?Due to privacy law and motivation of business interests, privacy is concerned and has become an important issue in data mining. This paper explores the issue of privacy- preserving distributed association rule mining in vertically partitioned data among multiple parties, and proposes a collusion-resistant algorithm of distributed association rule mining based on the Shamir?s secret sharing technique, which prevents effectively the collusive behaviors and conducts the computations across the parties without compromising their data privacy. Additionally, analyses with regard to the security, efficiency and correctness of the proposed algorithm are given.

Keywords? association rule mining; privacy; security; secret sharing.



I. INTRODUCTION  Privacy-preserving data mining (PPDM) has been studied extensively and applied widely. In this paper, we are particu- larly interested in the mining of association rule in a scenario where the data is vertically distributed among different parties.

To mine the association rule, these parties need to collaborate with each other so that they can jointly mine the data and produce results that interest all of them. However, Due to privacy law and motivation of business interests, the parties may not trust any other parties and do not want to reveal her own portion of the data, although realizing that combining their data has some mutual benefit.

Secure Multi-party Computation (SMC) technique, intro- duced by [17], is an important approach to achieve privacy- preserving data mining, and privacy preserving protocols or algorithms are designed based on cryptographic techniques and secure multi-party computations for PPDM ([12], [15], [16]). However, most of these privacy preserving data mining algorithms were based on the assumption of a semi-honest environment, where the participating parties always follow the  This work was supported by the Key Project of Chinese Ministry of Education (No109016), the Beijing Natural Science Foundation (No 4082028), the National Natural Science Foundation of China (No 60970143), and the Central University of Finance and Economics 2009 Graduate Research Innovation Fund.

protocol and never try to collude. As mentioned in previous works on privacy-preserving distributed mining [11], it is rational for distributed data mining that the participants are assumed to be semi-honest, but the collusion of parties for gain additional benefits can not be avoided. Reference [9] showed the participants have a tendency to collude by using a game theoretic framework and conducting equilibrium-analyses of existing PPDM algorithms. So there has been a tendency for privacy preserving data mining to devise the collusion resistant protocols or algorithms, and recent research have addressed this issue([4], [5], [8], [9]). Reference [4] firstly pro- posed an approach to conduct privacy preserving decision tree classification based on the Shamir?s secret sharing technique.

In this paper, we provide a secure and efficient distributed association rule mining algorithm based on the Shamir?s secret sharing technique [14] instead of decision tree classification.

The major contributions of this paper are as follows:  (1) We present a new and efficient solution to distributed association rule in vertically partitioned data.

(2) We provide a secure algorithm of the distributed associ- ation rule mining, which can prevent effectively the collusion of parties by employing the Shamir?s secret sharing technique, and discuss the algorithm with regard to its security, efficiency and correctness.

The rest of the paper is organized as follows: Section 2 present an overview of the related work. Subsequently, Section 3 present the technical preliminaries. We then present the definition of the distributed mining of association rule and the secure algorithm in Section 4. Finally, we present the conclusion and future work in Section 5.



II. RELATED WORK  In privacy-preserving data mining, many methods were proposed to preserve the privacy of the data.

Data perturbation technique, first proposed in [3], rep- resents one common approach in privacy preserving data mining, where the original (private) dataset is perturbed and the result is released for data analysis. Data perturbation     includes a wide variety of techniques as follows: additive, multiplicative, matrix multiplicative, k-anonymization, micro- aggregation, categorical data perturbation, data swapping, data shuffling etc[10]. Typically, there exists a trade-off of ?pri- vacy/accuracy? in data mining. On one hand, perturbation must not allow the original data records to be adequately recovered, on the other hand, it must allow ?patterns? in the original data to be mined. For example, [13] applied data perturbation to conduct association rule mining.

Secure Multi-party Computation (SMC) technique, pro- posed in [17], is an alternative approach to achieve privacy- preserving data mining, and has been proved that there is a secure multi-party computation solution for any polynomial function [6]. This approach, though appealing in its general- ity and simplicity, is highly impractical for large data sets.

Based on the idea of secure multiparty computation, privacy- oriented protocols were designed for the privacy-preserving collaborative data mining. For example, [15] presented the component scalar product protocol for privacy-preserving as- sociation rule mining over vertically partitioned data in the case of two parties; Reference [18] proposed a homomorphic cryptographic approach to tackle collaborative association rule mining among multiple parties; [16] proposed a efficient and practical protocol for privacy-preserving association rule mining based on identity-based cryptography, which has an additional advantage that no public key certificate is needed.

Game theory now has been applied to privacy preserving data mining and is a relatively new area of research. For ex- ample, Reference [9]argued that large-scale multi-party PPDM can be thought of as a game where each participant tries to maximize its benefit by optimally choosing the strategies during the entire PPDM process, and proposed a cheap-talk based protocol to implement a punishment mechanism to offer a more robust process.



III. TECHNICAL PRELIMINARIES  A. Shamir?s secret sharing technique  Shamir?s secret sharing method[14] allows a dealer D to distribute a secret value among n peers, such that the knowl- edge of any peers is required to reconstruct the secret. The method is described in Algorithm 1.

Algorithm 1:( Shamir?s secret sharing algorithm) Require: Secret value vs, P : Set of parties P1, P2, ? ? ? , Pn to distribute the shares, k : Number of shares required to reconstruct the secret.

1: Select a random polynomialq(x) = ak?1xk?1 + ? ? ? +  a1x 1 + vs, where ak?1 ?= 0, q(0) = vs .

2: Choose n publicly known distinct random values x1, x2, ? ? ? , xn such that xi ?= 0.

3: Compute the share of each peer pi, where sharei = q(xi).

4: for i = 1 to n do 5: Send sharei to peer pi.

6: end for.

Shamir?s method is theoretically secure, in order to construct  the secret value vs , at least k shares are required to determine  the random polynomial q(x) of degree k?1 , so the complete knowledge of up to k?1 peers does not reveal any information about the secret.

B. The Definition of the Association rule mining  The association rule mining can be defined as follows [1]: let I = {i1, i2, ? ? ? , im} be a set of items, DB be a set of transactions, where each transaction T is an itemset such that T ? I . An itemset X with k items called k-itemset. Given an itemset X ? I , a transaction T contains X if and only if X ? T , An association rule is an implication of the form X ? Y where X ? I, Y ? I and X ? Y = ?. The rule X ? Y has support s in the transaction database DB if s% of transactions in DB contain X ? Y . The association rule hold in the transaction database DB with confidence c if c% of transactions in DB that contain X also contains Y .

The problem of mining association rule is to find all rules whose support and confidence are higher than certain user specified minimum (namely thresholds) support and confi- dence. With this framework, we consider mining Boolean association rule, the absence or presence of an attribute is represented as 0 or 1, so transactions are strings of 0 and 1.



IV. PRIVACY-PRESERVING DISTRIBUTED MINING OF ASSOCIATION RULE IN VERTICALLY PARTITIONED DATA  A. Problem Definition  In this paper, we consider the distributed mining of asso- ciation rule, that is, the mining environment is distributed.

Let us assume that a transaction database DB is vertical partitioned among n parties (namely P1, P2, ? ? ? , Pn ), where DB = DB1 ? DB2 ? ? ? ? ? DBn, DBi ? DBj = ?, for ?i, j ? n,DBi resides at party Pi(1 ? i ? n). This means (1) all the data sets contain the same number of transactions, let N denote the total number of transactions for each data set.

(2) The identities of the jth (for j ? [1, N ] ) transaction in all the data sets are the same ( the assumptions can be achieved by pre-processing the data sets DB1, DB2, ? ? ? , DBn , and such a pre-processing does not require one party to send her data set to other parties).

Now all parties want to conduct distributed association rule mining on the concatenation of their data sets, in which no party is willing to disclose its raw data set to others because of the concern about their data privacy, so we formulate the following privacy-preserving distributed association rule mining problem in vertically partitioned data:  Problem Definition: Party P1, P2, ? ? ? , Pn have private data set DB1, DB2, ? ? ? , DBn respectively, and DBi ? DBj = ?, for ?i, j ? n. The data set DB1, DB2, ? ? ? , DBn forms a database DB, namely DB = DB1 ? DB2 ? ? ? ? ? DBn, which is actually the concatenation of DB1, DB2, ? ? ? , DBn, Let N denote the total number of transactions for each data set, the n parties want to conduct association rule mining on DB = DB1 ?DB2 ? ? ? ? ?DBn and to find the association rules with support and confidence being greater than the given thresholds.

During the mining of association rule, we assume all parties follow the protocol, and the object of the paper is to propose a protocol of distributed association rule mining in vertically partitioned data based on the Shamir?s secret sharing technique[14]. The protocol can prevent effectively the collu- sive behaviors and conduct the computations across the parties without compromising their data privacy. Simultaneously, the security of the protocol refers to semantic security [7].

B. Distributed Association rule mining Algorithm  In order to learn association rules, one must compute confidence and support of a given candidate itemset. Given the values of the attributes are 1 or 0, to find out whether a particular itemset is frequent, we only count the number of records (denote c.count) where the values for all the attributes in the itemset are 1, if c.count ? Ns%,then the candidate itemset is the frequent itemset. The following is the algorithm to find frequent itemsets:  1. L1 = {large 1-itemset} 2. for (k = 2; Lk?1 ?= ?; k ++) 3. Ck = apriori-gen (Lk?1) 4. for all candidates c ? Ck do begin 5. if all the attributes in c are entirely the same party  that party independently compute c.count 6. else  collaboratively compute c.count (We will show how to compute it in Section 4.3.)  7. end 8. Lk = Lk ? {c|c.count ? minsup} 9. end 10. Return L = ?kLk.

In step 3, the function Ck =apriori-gen (Lk?1) can generate  the set of candidate itemsets Ck, which is discussed in [2].

Given the counts and frequent itemsets, we can compute all association rules with support ? minsup.

In the procedure of association rule mining, step 1 , 3 , 6 and 8 require sharing information. In step 3 and 8, we use merely attribute names, in step 1, to compute large 1-itemset, each party elects her own attributes that contribute to large 1- itemset, where only one attribute forms a 1-itemset, there is no computation involving attributes of other parties. Therefore, data disclosure across parties is not necessary. At the same time, since the final result L = ?kLk is known to all parties, step 1 , 3 and 8 reveal no extra information to either party.

However, to compute c.count in step 6, a computation accessing attributes belonging to different parties is necessary.

How to conduct these computations across parties without compromising each party?s data privacy is the challenge we are faced with. If all the attributes belong to the same party, then c.count, which refers to the frequency counts for candidates, can be computed by this party. If the attributes belong to different parties, they may first construct vectors for their own attributes. For example, for some candidate itemset, party Pi have attributes a1, a2, ? ? ? , ap, then party Pi can construct vector Ai, the jth element denote Aij =  ?p k=1 ak in vector  Ai. Subsequently, they apply our secure protocol to obtain c.count, which will be discussed in Section 4.3.

C. Privacy-Preserving Algorithm to Collaboratively Compute c.count  The fact that the distributed parties jointly compute c.count without revealing their raw data to each other presents a great challenge. In this section, we show how to privately compute c.count based on Shamir?s secret sharing algorithm [14] and the privacy preserving summation of secrets [4] in the case of multiple parties without revealing the secret values to others.

Without loss of generality, assuming party Pi has a private vector Ai, i ? [1, n], and we use Aij to denote the jth element in vector Ai, the value of Aij is the attribute value of the Pi in the jth transaction of the database. Given that the absence or presence of an attribute is represented as 0 or 1, the value of Aij is equal to 0 or 1, for example Ai = (1, 0, 1, 1, ? ? ? , 0)T .

Firstly, parties P1, P2, ? ? ? , Pn determine the degree k(k ? n?1) of a polynomial respectively that is going to be used in Shamir?s secret sharing. They also agree on m ? n publicly known distinct random values X = (x1, x2, ? ? ? , xm). For the sake of simplicity and without loss of generality, we will assume k = n? 1 and m = n. So for arbitrary transaction j in database DB, each party Pi chooses a random polynomial qi(x) of degree k and qi(0) = Aij , then computes the share of each party Pt including itself as share(Aij , Pt) = qi(xt), t = 1, 2, ? ? ? , n. At the end, every party Pi sends out the shares such that share(Aij , Pt) is sent to party Pt.

Secondly, each party Pi gets the shares q1(xi), q2(xi), ? ? ? , qn(xi) from other parties and adds up all the shares S(xi) = q1(xi) + q2(xi) + ? ? ? ,+qn(xi), then sends this intermediate result to all parties.

Thirdly, each party Pi can compute the sum of secret values Aij using the results received during the second phase.

Note that each party Pi uses a random polynomial with degree k = n ? 1 and constant term Aij , and therefore the sum of all these polynomials results in another polynomial S(x) = q1(x) + q2(x) + ? ? ? ,+qn(x) of degree k with the constant term equal to the sum of all secret values Aij .

The results computed during the second computation phase correspond to the values of S(x) at points x1, x2, ? ? ? , xn. So each party Pi will have line equations: ? ???????????  ???????????  bn?1xn?11 + bn?2x n?2 1 + ? ? ?+ b1x1 +  n?  i=1  Aij = S(x1)  bn?1xn?12 + bn?2x n?2 2 + ? ? ?+ b1x2 +  n?  i=1  Aij = S(x2)  ? ? ? ? ? ? bn?1xn?1n + bn?2x  n?2 n + ? ? ?+ b1xn +  n?  i=1  Aij = S(xn)  (1)  Through solving the above equations, we can determine all the coefficients of S(x). Since the constant term of S(x) is equal to  ?n i=1 Aij , each party will learn the sum of all secret  values, but not the individual ones.

Fourthly, party Pi acquires the sum ?n  i=1 Aij of secret values, if the  ?n i=1 Aij = n, it means the values of  P1, P2, ? ? ? , Pn in transaction j of database are all 1, so the transaction j supports the association rule, then let mj = 1, otherwise mj = 0.

At last, continuing for all transactions, each party Pi ac- quires mj = 1or0, and computes c.count =  ?N j=1 mj .

So assuming all parties follow the algorithm and do the computations honestly, we summarize the whole process in Algorithm 3.

Algorithm 3: Privacy-Preserving Algorithm to Collabo- ratively Compute c.count  Require: P : Set of parties P1, P2, ? ? ? , Pn.

Aij : Secret value of Pi, X: A set of n publicly known random values  x1, x2, ? ? ? , xn.

k: Degree of the random polynomial k = n? 1 .

1: For each transaction j = 1 to N do 2: For each party Pi, (i = 1, 2, ? ? ? , n) do 3: Select a random polynomial qi(x) = an?1xn?1 +  ? ? ?+ a1x1 +Aij 4: Compute the share of each party Pt, where  share(Aij , Pt) = qi(xt)  5: For t = 1to n do 6: Send share(Aij , Pt) to party Pt 7: Receive the shares share(Aij , Pt) from every  party Pt.

8: Compute S(xi) = q1(xi) + q2(xi) + ? ? ? ,+qn(xi) 9: For t = 1 to n do 10: Send S(xi) to party Pt 11: Receive the results S(xi) from every party Pt.

12: Solve the set of equations to find the sum  ?n i=1 Aij  of secret values.

13: If the  ?n i=1 Aij = n, let mj = 1, otherwise mj = 0.

14: Each party computes c.count = ?N  j=1 mj .

Example: Assume that there are 4 parties P1, P2, P3, P4  with secret values A1j = 1, A2j = 0, A3j = 1, A4j = 1 respectively for arbitrary transaction j in database DB, and that they want to decide whether the transaction j supports the association rule without revealing their values to each other.

At first, they decide on a polynomial degree k = 3 and m = 4 publicly known distinct random values X = (2, 3, 5, 6).

Each party Pi then chooses a random polynomial qi(x) of degree k = 3 whose constant term is the secret value Aij .

P1 picks q1(x) = x3 + 3x2 + 2x + 1 and computes the shares for other parties such that the share of party Pt, share(A1j , Pt) = q1(xt), where xtis the tth element of X .

Thus the shares computed by P1 are as follows:  share(A1j , P1) = q1(2) = 25,  share(A1j , P2) = q1(3) = 61  share(A1j , P3) = q1(5) = 211,  share(A1j , P4) = q1(6) = 337  Similarly, other parties P2, P3, P4 pick random polynomials  q2(x) = x 3 + x2 + 6x+ 0,  q3(x) = x 3 + 2x2 + 0x+ 1,  q4(x) = 2x 3 + x2 + 3x+ 1  and compute the shares for other parties . The following gives the shares of all other parties.

q2(2) = 24, q2(3) = 54, q2(5) = 180, q2(6) = 288  q3(2) = 19, q3(3) = 49, q3(5) = 181, q3(6) = 295  q4(2) = 27, q4(3) = 73, q4(5) = 291, q4(6) = 487  During the second phase, each party adds up all the shares received from other parties and then sends this result to all other parties. That is, party Pi computes S(xi) = q1(xi) + q2(xi) + q3(xi) + q4(xi) and sends to all other parties.

At the third computation phase, each party Pi will have the 4 values of polynomial S(x) = q1(x)+q2(x)+q3(x)+q4(x) = b3x  3 + b2x 2 + b1x + b at X = (2, 3, 5, 6) with the constant  term equal to the sum of all secret values. So each party Pi can get liner equations:  ? ???  ???  8b3 + 4b2 + 2b1 + b = 95 27b3 + 9b2 + 3b1 + b = 237 125b3 + 25b2 + 5b1 + b = 863 216b3 + 36b2 + 6b1 + b = 1407  (2)  and get b = 3 through solving the above liner equations, so?4 i=1 Aij = b = 3.

Because the ?4  i=1 Aij = b = 3, it means the values of P1, P2, P3, P4 in transaction j of database DB are not all 1, so the transaction j does not support the association rule, then let mj = 0.

D. Analysis of the Privacy-Preserving Algorithm to Collabo- ratively Compute c.count  1) Correctness Analysis: Assuming party Pi has a private vector Ai, so for arbitrary transaction j in database DB, party Pi has a private value Aij , according algorithm 3, the sum  ?n i=1 Aij of secret values is the constant term of the  sum polynomial S(x) = q1(x) + q2(x) + ? ? ? ,+qn(x) , so we need to solve the liner equations (1), noting there are n unknown coefficients and n equations, and that the determinant of coefficient  D =  ? ? ? ? ? ? ? ? ?  xn?11 x n?2 1 ? ? ? x1 1  xn?12 x n?2 2 ? ? ? x2 1  ...

... ? ? ? ... ...

xn?1n x n?2 n ? ? ? xn 1  ? ? ? ? ? ? ? ? ?  (3)  is the Vandermonde determinant. When D = ?  1?j?i?n(xi? xj) ?= 0, that is xi ?= xj , the equations has a unique solution, and each party Pi can solve the set of equations and determine the value of  ?n i=1 Aij , however it cannot  determine the secret values of the other parties since the individual polynomial coefficients selected by other parties     are not known to Pi. If A1j , A2j , ? ? ? , Anj are all equal to 1, that is  ?n i=1 Aij = n, this means the transaction has  the whole attributes and supports the association rule, we let mj = 1. Otherwise, if some attributes of A1j , A2j , ? ? ? , Anj are not equal to 1, that is,  ?n i=1 Aij ?= n, this means the  transaction has not the whole attributes and does not support the association rules, we let mj = 0. To compute the number of transactions which support the association rule, we only count the number of mj = 1, then c.count =  ?N j=1 mj ,  so the algorithm 3 can compute c.count correctly under the condition of all parties doing the computations honestly during the mining of association rules.

2) Complexity Analysis: Assuming there are N transactions and n parties, the communication cost is from step 5, 6 and step 9, 10 of algorithm 3, so the communication cost of algorithm 3 is 2Nn(n? 1).

The following contribute to the computational cost of each transaction: (1) the generation of the random polynomial qi(x), i = 1, 2, ? ? ? , n from step 3; (2) the total number of n2 computations on the share of each party from step 4; (3) the total number of n(n ? 1) additions from step 8; (4) the computational cost of solving the set of equations to find the sum  ?n i=1 Aij of secret values from step 12; (5)the  computational cost of letting mj = 1 or 0 according the sum?n i=1 Aij from step 13.

Compared to the other techniques, such as commutative  encryption and secure multi-party computations, the algorithm proposed by our paper does not have to add to computation and communication cost, but our algorithm can prevent effectively the collusive behaviors and conduct the computations across the parties without compromising their data privacy, so our algorithm is efficient and practical.

3) Security Analysis: Proposition 1: Algorithm 3 is seman- tically secure [7] for the network attackers.

Proof: The network attackers listening to the network traffic of the parties cannot learn any useful information, such as the private values or the sum of those values, expect for all the shares and the intermediate values. However, these values cannot be used to determine the coefficients of the sum polynomial and each party?s secretly random polynomial without knowing random values x1, x2, ? ? ? , xn by which the intermediate results are calculated, and the shares and the intermediate values can not be used to infer whether the transaction supports the association rule.

Proposition 2: Algorithm 3 is semantically secure and can prevent effectively the collusive behaviors from the collabora- tive parties under the condition of the number of the collusive parties t < n? 1.

Proof: Firstly, algorithm 3 is semantically secure for the collaborative parties. Compared with the network attackers, the collaborative parties know random values x1, x2, ? ? ? , xn.

At algorithm 3, Pi computes the value of its polynomial at n points as shares, and then keeps one of these shares for itself and sends the remaining n ? 1 shares to other parties, so if the collaborative party gets all other parties? shares and intermediate values through listening to the network traffic  of the parties, except for the value of the corresponding sum polynomial at n different points, he can get, for example, the value of that party P ,i s secretly random polynomial at n ? 1 different point x1, ? ? ? , xi?1, xi+1, ? ? ? , xn. And because the degree of each party P ,i s secretly random polynomial is k = n ? 1 and each party P ,i s secretly random polynomial has n unkown coefficients, in order to compute the coefficients of the corresponding party P ,i s secretly random polynomial and get the party P ,i s private value, the value at n different points is needed, so party P ,i s private value can not be achieved.

Secondly, algorithm 3 can prevent effectively the collusive behaviors for the collaborative parties under the condition of the number of the collusive parties t < n ? 1. If there are n?1 parties collude, for example, P2, ? ? ? , Pn, they can get the value s(x1) of sum polynomial at x1 and q1(x2), ? ? ? , q1(xn) which is the value of party P ,1s secretly random polynomial at n ? 1 different points x2, ? ? ? , xn. Noting that S(xi) = q1(xi) + q2(xi) + ? ? ? + qn(xi), they can compute q1(xi) = S(xi)?q2(xi)?? ? ??qn(xi), then can conclude the party P ,1s private value through solving the following liner equations: ? ???  ???  an?1xn?11 + an?2x n?2 1 + ? ? ?+ a1x1 +A1j = q(x1)  an?1xn?12 + an?2x n?2 2 + ? ? ?+ a1x2 +A1j = q(x2)  ? ? ? ? ? ? an?1xn?1n + an?2x  n?2 n + ? ? ?+ a1xn +A1j = q(xn)  (4)  In a word, the algorithm is semantically secure and can prevent effectively the collusive behaviors.



V. CONCLUSION  The issue of privacy preserving distributed association rule mining is concerned by this paper. In particular, based on the Shamir?s secret sharing technique, the study focuses on how multiple parties can conduct distributed association rule mining in their joint database of the vertically partitioned private data, in which we propose a collusion-resistant al- gorithm, which computes whether one transaction supports the association rule in order to find the frequent itemsets. In- depth analysis of correctness, complexity and security about our algorithm is given, and the result shows that the algorithm is efficient, practical and secure.

However, our algorithm should be used with care in practice in that the algorithm is designed for the model in which all parties follow the algorithm and conduct computation honestly, where collusive behaviors will be deterred effectively due to the collusion resistant features. In some practical scenarios, where participants may deviate from the algorithm, therefore, techniques like zero-knowledge proofs should be employed to prevent malicious behavior; yet, this generic approach might be rather inefficient and add considerable overhead to each step of the algorithm. So finding an efficient algorithm designed for adversary model in privacy-preserving distributed association rule mining is our future research focus.

