

Abstract: In this paper, in order to reduce the times of scanning  database when presented algorithms compute support of candidate frequent itemsets, in order to improve the method of computing support of candidate frequent itemsets, and in order to further improve the efficiency of algorithm, based on up search strategy of Apriori, we propose an algorithm of association rules mining based on sequence number. The algorithm would use the method of binary Boolean calculation to generate candidate frequent itemsets of binary form, and gain support of candidate frequent itemsets by computing Sequence Number Degree (SND), which is gained through computing these Sequence Number (SN) of all these items contained by candidate frequent itemsets. The algorithm only need scan once all these transactions in database to indeed improve the efficiency of algorithm. The experiment indicates the efficiency of this algorithm is faster and more efficient than presented algorithms.

Keywords: Data mining; Association rules; Sequence number;  Binary; Up search  1. Introduction  As we all know, association rules mining algorithm, such as, Apriori [1], mainly wants to solve two key problems: one is how to reduce the number of candidate frequent itemsets and the times of scanning database, the other is how to easily generate candidate frequent itemsets and compute fast the support of candidate frequent itemsets. In order to solve the first problem, some algorithms were presented, such as Max-Miner [2], Pincer-Search [3], DMFI [6] and DMFIA [7]. And then, in order to solve the second problem, some algorithms based on binary were presented, such as B_Apriori [8] and B_ARDSM [9]. The kind of algorithm computes support by binary logic operation to improve efficiency. However, the two algorithms need repeatedly scan all these transactions of database when computing support of candidate frequent itemsets, and so their efficiency would be badly influenced. Hence, in order  to reduce the times of scanning database when presented algorithms compute support of candidate frequent itemsets, in order to improve the method of computing support of candidate frequent itemsets, and in order to further improve the efficiency of algorithm, based on up search strategy of Apriori, this paper proposes an algorithm of association rules mining based on sequence number, denoted by ARNBSN, which only need scan once all these transactions at the time of computing support. The experiment indicates the efficiency of this algorithm is faster and more efficient than presented algorithms, such as, B_Apriori and B_ARDSM.

2. Basic notions  Let I= {i1, i2 ? im} be a set of items, if ik (ik? I), let T= {i1?i2???im} (Tk ? I) be a subset of items, called a Transactions. For example, let Tk= {i1, i2, i3, i4} be a subset of items, called a transaction. And then let D= {T1, T2?Tn}, let Tk ? I, (k=1?n) be a set of transactions, called Transaction Database (TD).

2.1. Basic notions  Definition 1 Sequence Number (SN), it is a group of numbers, here, these numbers may be repeated, and each number is called a sub-Item of sequence number.

For example, let SN= {23, 45, 67, 126, 78, 65, and 111} be a sequence number, thereinto, 67 is called a sub-Item of SN.

Definition 2 Sub Item Degree (SID), it is an integer, which is equal to the number of ?1? contained by binary code of sub-Item.

For example, let 45 be a sub-Item, and then SID (45) = SID (101101)2=4.

Definition 3 Sequence Number Degree (SND), it is an integer, which is equal to the sum of items? SID contained by SN.

For example, let SN = {23, 45, 67, 126, 78, 65, and 111} be a sequence number, and SND = SID (23) + SID (45) + SID (67) + SID (126) + SID (78) + SID (65) + SID (111) = 3 + 4 + 3 + 6 + 4 + 2 + 6 = 28.

Definition 4 Binary Transaction (BT), a transaction is expressed as binary, binary transaction of transaction T is expressed as BT=(b1 b2?bm), bk? [0,1], k=1?m, if ik? Ti, and then bk=1, otherwise bk=0 ,the order of binary digits is as same as items which have been fixed.

Example, let I = {1, 2, 3, 4, 5, 6} be a set of items, if a transaction is expressed as Ti = {2, 3, 5, 6}, and then BTi = (011011)2.

Definition 5 Binary Transaction Length (BTL), which is an integer, the value of which is equal to the number of digital ?1? that is contained by binary transaction.

Example, if BT = (101011)2, and then BTL = 4.

2.2. The key technology of mining algorithm  The algorithm mainly has two key technologies. One is the technology of generating candidate frequent itemsets; the other is the technology of computing support of candidate frequent itemsets.

1. The method of generating candidate frequent itemsets  The algorithm use binary Boolean calculation to generate (k+1)-candidate frequent itemsets of binary form by k-binary frequent itemsets, it adopts up search strategy which is similar to Apriori. The course of generating candidate is expressed as follows:  There are five frequent itemsets, the length of which is 3, and they may generate some candidate frequent itemsets, the length of which is 4.

Frequent itemsets: FBT1 = (010101), FBT2 = (011100), FBT3 = (000111); FBT4 = (001101), FBT5 = (111000); Candidate frequent itemsets: C1 = FBT1?FBT2=(011101)2; C2 = FBT1?FBT3=(001111)2; C* = FBT1?FBT4=(011101)2;(Duplication) C* = FBT1?FBT5=(111101)2;(Redundancy) C* = FBT2?FBT3=(011111)2;(Redundancy) C* = FBT2?FBT4=(011101)2;(Duplication) C* = FBT2?FBT5=(011101)2;(Duplication) C* = FBT3?FBT4=(001111)2;(Duplication) C* = FBT3?FBT5=(111111)2;(Redundancy) C* = FBT4?FBT5=(111101)2;(Redundancy) 2. The improved method of computing support of  candidate frequent itemsets The method of computing support is expressed as  follows: Step1: Turning traditional transaction into Binary  Transaction according to definition 4.

Step2: Aiming to each item of database, its  corresponding Binary code is turned into Sequence Number in fragment according to definition 1. Every fragment has the same binary digit.

Step3: Aiming each candidate frequent itemsets, we knew that each item contained by candidate has own Sequence Number, and then we will use Boolean calculation compute these Sequence Numbers in turn, and finally the result is new Sequence Number.

Step4: Computing Sequence Number Degree of the new Sequence Number according to definition 3. The Sequence Number Degree is equal to support of candidate frequent itemsets.

For example, there are ten transactions in database.

The course of computing support is expressed as follows:  Step1: Turning traditional transaction into Binary Transaction.

T1: {b, c, d, e, f},     BT1 = (011111)2; T2: {a, c, d, e, f},     BT2 = (101111)2; T3: {a, d, e, f},       BT3 = (100111)2; T4: {a, b, c, d, f},     BT4 = (111101)2; T5: {a, b, e, f},       BT5 = (110011)2; T6: {c, d, e, f},       BT6 = (001111)2; T7: {a, b, d, f},       BT7 = (110101)2; T8: {b, c, d, e,},      BT8 = (011110)2; T9: {a, b, c, e, f},     BT9 = (111011)2; T10: {d, e, f},        BT10 = (000111)2; Setp2: Computing Sequence Number of each sub-Item  in database is expressed as table 1.

Table 1. Computing Sequence Number  No. a b c d e f BT1 0 1 1 1 1 1 BT2 1 0 1 1 1 1 BT3 1 0 0 1 1 1 BT4 1 1 1 1 0 1 BT5 1 1 0 0 1 1  Item1 15 19 26 30 29 31 BT6 0 0 1 1 1 1 BT7 1 1 0 1 0 1 BT8 0 1 1 1 1 0 BT9 1 1 1 0 1 1 BT10 0 0 0 1 1 1 Item2 10 14 22 29 23 27  SN {15,10} {19, 14}  {26, 22}  {30, 29}  {29, 23}  {31, 27}   Step3: Computing 1-frequent Binary Transaction:  1-candidate frequent itemsets:      C1= {a}, BT = (100000)2: Support (C1) = SND {15, 10} =4+2=6; C2= {b}, BT = (010000)2: Support (C2) = SND {19, 14} =3+3=6; C3= {c}, BT = (001000)2: Support (C3) = SND {26, 22} =3+3=6; C4= {d}, BT = (000100)2: Support (C3) = SND {30, 29} =4+4=8; C5= {e}, BT = (000010)2: Support (C5) = SND {29, 23} =4+4=8; C6= {e}, BT = (000010)2: Support (C6) = SND {31, 27} =5+4=9; Min-support=70%.

1-frequent item: {d, e, f}.

Step4: Computing 2-frequent Binary Transaction:  2-candidate frequent itemsets: C1-{d, e}, BT = (000110)2: Support (C1) = SND (SN4?SN5)  = SND ({30?29, 29?23}) =6; C2-{d, f}, BT = (0000101)2: Support (C2) = SND (SN4?SN6)  = SND ({30?31, 29?27}) =7; C3-{e, f}, BT = (0000011)2: Support (C3) = SND (SN5?SN6) = SND ({29?31, 23?27}) =7;  2-frequent item: {df, ef}.

Step5: Computing 3-frequent Binary Transaction:  3-candidate frequent itemsets: C1-{d, e, f}, BT = (000111)2: Support (C1) = SND (SN4?SN5?SN6) = SND ({30?29?31, 29?23?27}) =5; Step6: Ending algorithm and gaining frequent Binary  Transaction (0000101)2 and (0000011)2.

2.3. The process of mining algorithm  Let I= {i1, i2?im} be a set of items, each ik has been changed into Boolean quantity. The process of association rules mining algorithm is expressed as follows:  Step1: We will turn traditional transaction into Binary Transaction according to definition 4.

Step2: And then we will turn all Binary Transactions into Sequence Number according to definition 1 and the chapter 2.2.

Step3: Searching all k-frequent itemsets from 1 to m.

Firstly, computing support of l-candidate frequent itemsets and gaining l-frequent itemsets. Second, we will use l-frequent itemsets to generate (l+1)-candidate frequent itemsets.

Step4: Repeated executing step3 until l+1= m.

Step5: Generating association rules according to frequent itemsets and min-confidence.

Step6: Gaining normal association rules.

2.4. Program of computing support of candidate  The program of computing support is expressed as follows:  Data [,]: saving Sequence Number which are turned by traditional database.

Line: the number of sub-Items contained by Sequence Number.

Row: the number of Sequence Number contained by Data [,], that is, the number of items attribute in database.

Candidate: candidate frequent itemsets to compute support.

Support (int Line, int Row, int [,] Data, int Candidate) (1)  int i = 0, j = 0, support = 0, exit = 0; (2)  int [] Set = new int[Line]; (3)  i = 0; (4)  while ((i < Row) && (exit == 0)) (5)  { (6)     if ((Candidate & 1) == 1) (7)     { (8)        exit = 1; (9)        for (j = 0; j < Line; j++) (10)       { (11)         Set[j] = Data [j, i]; (12)       } (13)     } (14)     else (15)      { (16)         Candidate = Candidate >> 1; (17)         i++; (18)      } (19)   } (20)   j = i; (21)   while ((j < Row) && (Candidate != 0)) (22)   { (23)       if ((Candidate & 1) == 1) (24)       { (25)         for (i = 0; i < Line; i++) (26)         { (27)           Set[i] = Set[i] & Data[i, j]; (28)         } (29)       } (30)       Candidate = Candidate >> 1; (31)       j++; (32)    } (33)   for (i = 0; i < Line; i++) (34)   {      (35)     support = support + SID(Set[i]); (36)   } (37)  Return support;  3. Comparing capability of these algorithms  Aiming to B_Apriori represented by reference [8] and B_ARDSM represented by reference [9], this paper proposes an algorithm of association rules mining based on sequence number (ARNBSN). We compare the method of computing support used by these algorithms which are expressed as follows:  B_Apriori: The algorithm generates candidate frequent itemsets which contain the number of items from fewness to many. However, the algorithm use traditional method to compute support of candidate, namely, it need scan once database when computing once support, and so there are many times of scanning database in the course of mining association rules, the efficiency of algorithm would be affected because of this.

B_ARDSM: Generating candidate frequent digital transaction DTL of which is from maximum and minimum to middle. The algorithm is suitable for mining general database where frequent item sets aren?t confined, but the method of computing support is the same as B_Apriori, the algorithm scans once database when computing support.

But it need scan all these transaction several times, and so the efficiency of algorithm still isn?t fast and efficient.

ARNBSN: The way of generating candidate frequent itemsets used by the algorithm is similar to B_Apriori, but the method of computing support is computing Sequence Number Degree, the algorithm only need scan once all these transactions and use Boolean calculation to compute this Sequence Numbers Degree. The efficiency of algorithm is improved efficiently; it is faster and more efficient than B_Apriori and B_ARDSM.

Now we use result of experiment to testify above analyses. We use three mining algorithms to generate frequent itemsets from these transactions, their Binary Transactions are expresses as digital from 1 to 4095, there are 12 items attribute in database, i.e. m=12, N=4095.

Our experimental circumstances are expressed as follow: Intel(R) Celeron(R) M CPU 420 ? 1.60 GHz, 1.24G, language of the procedure is Visual C# 2005.NET, OS is Windows XP Professional.

The result of three algorithms generating frequent itemsets is expressed as figure 1 and 2, here is absolute support. As the support of frequent itemsets changes, the executed time of B_Apriori and ARNBSN is expressed as figure 3. As the support of frequent itemsets changes, the executed time of B_ARDSM and ARNBSN is expressed as  figure 4.

According to the result of experiment, we can draw a  conclusion expressed as follows: The efficiency of ARNBSN is faster and more  efficient than B_Apriori and B_ARDSM when mining association rules.

Figure 1. The result of experiment two algorithms      Figure 2. The result of experiment two algorithms         24 12 4.9 2.4 1.2 0.9 0.48 0.24  min-support(%)  R un  t im  e( M il  li s ec  on d)  B_Apriori  ARNBSN     Figure 3. Comparing runtime of B_Apriori and ARNBSN         24 12 4.9 2.4 1.2 0.9 0.48 0.24  min-support(%)  R u n t i m e(  M i l l is  e c o n d)  B_ARDSM  ARNBSN     Figure 4. Comparing runtime of B_ARDSM and ARNBSN      4. Conclusions  In this paper, we propose an algorithm of association rules mining based on sequence number (ARNBSN), which only need scan once all these transactions at the course of mining association rules. The experiment indicates the efficiency of this algorithm is faster and more efficient than presented algorithms, such as, B_Apriori and B_ARDSM.

