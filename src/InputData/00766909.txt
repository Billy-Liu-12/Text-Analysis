A Data Mining Framework for Building Intrusion Detection Models?

Abstract  There is often the need to update an installed Intrusion Detection System (IDS) due to new attack methods or up- graded computing environments. Since many current IDSs are constructed by manual encoding of expert knowledge, changes to IDSs are expensive and slow. In this paper, we describe a data mining framework for adaptively building Intrusion Detection (ID) models. The central idea is to uti- lize auditing programs to extract an extensive set of fea- tures that describe each network connection or host ses- sion, and apply data mining programs to learn rules that accurately capture the behavior of intrusions and normal activities. These rules can then be used for misuse detec- tion and anomaly detection. New detection models are in- corporated into an existing IDS through a meta-learning (or co-operative learning) process, which produces a meta detection model that combines evidence from multiple mod- els. We discuss the strengths of our data mining pro- grams, namely, classification, meta-learning, association rules, and frequent episodes. We report our results of ap- plying these programs to the extensively gathered network audit data for the 1998 DARPA Intrusion Detection Evalu- ation Program.

1 Introduction  As network-based computer systems play increasingly vital roles in modern society, they have become the target of intrusions by our enemies and criminals. In addition to intrusion prevention techniques, such as user authentication (e.g. using passwords or biometrics), avoiding program- ming errors, and information protection (e.g., encryption), intrusion detection is often used as another wall to protect  ?This research is supported in part by grants from DARPA (F30602- 96-1-0311) and NSF (IRI-96-32225 and CDA-96-25374).

computer systems.

Intrusion detection techniques can be categorized into  anomaly detection and misuse detection. Anomaly detec- tion systems, for example, IDES [14], flag observed ac- tivities that deviate significantly from the established nor- mal usage profiles as anomalies (i.e., possible intrusions).

Misuse detection systems, for example, IDIOT [9] and STAT [5], use patterns of well-known attacks or weak spots of the system to match and identify known intrusion, pat- terns or signatures.

While accuracy is the essential requirement of an IDS, its extensibility and adaptability are also critical in today?s net- work computing environment. There are multiple ?penetra- tion points? for intrusions to take place in a network system.

For example, at the network level carefully crafted ?mali- cious? IP packets can crash a victim host; at the host level, vulnerabilities in system software can be exploited to yield an illegal root shell. Since activities at different penetration points are normally recorded in different audit data sources, an IDS often needs to be extended to incorporate additional modules that specialize on certain components (e.g., hosts, subnets, etc.) of the network systems. The large traffic vol- ume in security related mailing lists and Web sites suggest that new system security holes and intrusion methods are continuously being discovered. Therefore it is imperative that IDSs be updated frequently and timely.

Currently building an effective IDS is an enormous knowledge engineering task. System builders rely on their intuition and experience to select the statistical measures for anomaly detection [13]. Experts first analyze and categorize attack scenarios and system vulnerabilities, and hand-code the corresponding rules and patterns for misuse detection.

Because of the manual and ad hoc nature of the develop- ment process, current IDSs have limited extensibility and adaptability. Many IDSs only handle one particular audit data source, and their updates are expensive and slow.

Some of the recent research and commercial IDSs have started to provide built-in mechanisms for customization    and extension. For example, both Bro [18] and NFR [6] filter network traffic streams into a series of events, and ex- ecute scripts, e.g., Bro policy scripts and NFR?s N-Codes, that contain site-specific event handlers, i.e., intrusion de- tection and handling rules. The system administration per- sonnel at each installation site must now assume the roles of both security experts and IDS builders because they are responsible for writing the correct event handling functions.

Our first-hand experience with both Bro and NFR show that while these systems provide great flexibility, writing the scripts involves a lot of effort, in addition to learning the scripting languages. For example, there is no means to ?de- bug? the scripts. These systems also handle a fixed set of network traffic event types. On a few occasions we were forced to make changes to the source code of the original IDS to handle new event types.

Our research aims to develop a more systematic and au- tomated approach in building IDSs. We are developing a set of tools that can be applied to a variety of audit data sources to generate intrusion detection models. We take a data-centric point of view and consider intrusion detection as a data analysis process. Anomaly detection is about find- ing the normal usage patterns from the audit data, whereas misuse detection is about encoding and matching the in- trusion patterns using the audit data. The central theme of our approach is to apply data mining programs to the exten- sively gathered audit data to compute models that accurately capture the actual behavior (i.e., patterns) of intrusions and normal activities. This automatic approach eliminates the need to manually analyze and encode intrusion patterns, as well as the guesswork in selecting statistical measures for normal usage profiles. More importantly, the same data mining tools can be applied to multiple streams of evidence, each from a detection module that specializes on a specific type(s) of intrusion or a specific component (e.g., a mission- critical host) of the network system, to learn the combined detection model that considers all the available evidence.

Thus our framework facilitates the construction of adaptive IDSs.

The rest of the paper is organized as follows. Section 2 outlines the main components of our framework. Section 3 briefly describes several data mining programs, and dis- cusses how they can be applied to discover frequent intru- sion and normal activity patterns, which are the basis for building misuse detection models and user anomaly detec- tion models. Section 4 describes how to construct tempo- ral and statistical features using the frequent patterns mined from audit data. Section 5 reports the results of our ex- periments on building intrusion detection models using the audit data from the DARPA evaluation program. Section 6 discusses related research projects. Section 7 outlines our future research plans.

2 A Systematic Framework  A basic premise for intrusion detection is that when au- dit mechanisms are enabled to record system events, dis- tinct evidence of legitimate activities and intrusions will be manifested in the audit data. Because of the sheer volume of audit data, both in the amount of audit records and in the number of system features (fields of the audit records), efficient and intelligent data analysis tools are required to discover the behavior of system activities.

Data mining generally refers to the process of extracting descriptive models from large stores of data [4]. The re- cent rapid development in data mining has made available a wide variety of algorithms, drawn from the fields of statis- tics, pattern recognition, machine learning, and databases.

Several types of algorithms are particularly useful for min- ing audit data:  Classification: maps a data item into one of several pre- defined categories. These algorithms normally output ?classifiers?, for example, in the form of decision trees or rules. An ideal application in intrusion detection will be to gather sufficient ?normal? and ?abnormal? audit data for a user or a program, then apply a clas- sification algorithm to learn a classifier that can label or predict new unseen audit data as belonging to the normal class or the abnormal class;  Link analysis: determines relations between fields in the database records. Correlations of system features in audit data, for example, the correlation between com- mand and argument in the shell command history data of a user, can serve as the basis for constructing normal usage profiles. A programmer, for example, may have ?emacs? highly associated with ?C? files;  Sequence analysis: models sequential patterns. These al- gorithms can discover what time-based sequence of audit events are frequently occurring together. These frequent event patterns provide guidelines for incorpo- rating temporal statistical measures into intrusion de- tection models. For example, patterns from audit data containing network-based denial-of-service (DOS) at- tacks suggest that several per-host and per-service measures should be included.

We are developing a framework, first proposed in [11], of applying data mining techniques to build intrusion de- tection models. This framework consists of programs for learning classifiers and meta-classification [2], association rules [1] for link analysis, frequent episodes [16] for se- quence analysis, and a support environment that enables system builders to interactively and iteratively drive the pro- cess of constructing and evaluating detection models. The     end product are concise and intuitive rules that can detect intrusions, and can be easily inspected and edited by secu- rity experts when needed.

In our approach, the learned rules replace the manually encoded intrusion patterns and profiles, and system features and measures are selected by considering the statistical pat- terns computed from the audit data. Meta-learning is used to learn the correlation of intrusion evidence from multiple detection models, and produce a combined detection mod- els.

It is very important to point out that our framework does not eliminate the need to pre-process and analyze raw audit data, e.g., tcpdump [7] and BSM [22] output. In fact, to build intrusion detection models for network systems, our data mining programs use pre-processed audit data where each record corresponds to a high level event, e.g., a network connection or host session. Each record normally includes an extensive set of features that describe the characteristics of the event, for example, the duration of a connection, the number of bytes transfered, etc.

While analyzing and summarizing raw audit data is an essential task for an IDS, we argue that generic utilities should first be developed by network and operating system experts, and made available to all IDSs as the lowest level building blocks. Bro and NFR can be regarded as examples of such robust and free utilities, as they both perform IP packet filtering and reassembling, and allow event handlers to output summarized connection records. Our framework assumes such building blocks are available when construct- ing IDSs.

3 Mining Audit Data  In this section we describe our data mining algorithms, and illustrate how to apply these algorithms to generate de- tection models from audit data. Here audit data refers to pre-processed timestamped audit records, each with a num- ber of features (i.e., fields).

3.1 Classification  Intrusion detection can be thought of as a classification problem: we wish to classify each audit record into one of a discrete set of possible categories, normal or a particular kind of intrusion.

Given a set of records, where one of the features is the class label (i.e., the concept), classification algorithms can compute a model that uses the most discriminating feature values to describe each concept. For example, consider the telnet connection records shown in Table 1. Here, hot is the count of access to system directories, creation and execution of programs, etc, compromised is the count of file/path  ?not found? errors, and ?Jump to? instructions, etc. RIP- PER [3], a classification rule learning program, generates rules for classifying the telnet connections are displayed in Table 2.

Here we see that RIPPER indeed selects the unique fea- ture values in identifying the intrusions. These rules can be first inspected and edited by security experts, and then be incorporated into misuse detection systems.

The accuracy of a classification model depends directly on the set of features provided in the training data. For ex- ample, if the features hot, compromised and root shell were removed from the records in Table 1, RIPPER would not be able to produce accurate rules to identify buffer overflow connections. In [11] we showed that due to the temporal nature of network events, especially certain in- trusions such as probing (e.g., port-scan, ping-sweep, etc.) and denial-of-service (e.g., ping-of-death, teardrop, etc.), adding per-host and per-service temporal statistics resulted in significant improvement in the accuracy of the classifica- tion models. Thus, selecting the right set of system features is a critical step when formulating the classification tasks.

Our strategy is to first mine the frequent sequential patterns from the network audit data, and then use these patterns as guidelines to select and construct temporal statistical fea- tures. Section 3.3 discusses this process in greater detail.

3.1.1 Meta-Classification  There are several important reasons for combining multi- ple detection models. First, in order to avoid becoming a performance bottleneck and an easy target of ?subversion?, an IDS should consist of multiple cooperative lightweight subsystems that each monitor a separate part (e.g., access point) of the entire network environment. For example, an IDS that inspects the full data contents of each IP packet and keeps track of all opened connections may run out of mem- ory (i.e., buffers) during a DOS attack (e.g., SYN flood) and cease to function. On the other hand, a more lightweight IDS that only inspects the header of each IP packet can de- tect only those intrusions that are targeted to the network protocols, and not those that try to exploit the hosts (e.g., guess password, buffer overflow, etc.). A solution is to have one relatively lightweight system on the gateway that checks only the packet headers, and several host-based sys- tems that monitor the activities on the mission-critical hosts.

A ?global? detection system can then combine the evidence from these subsystems and take appropriate actions.

We believe that the best way to make intrusion detection models adaptive is by combining existing models with new models that are trained on new intrusion data or new nor- mal data (e.g., audit data from a new network component), instead of restarting the entire model building process using the aggregate of the archived audit data and new data.

label service flag hot failed logins compromised root shell su duration ...

normal telnet SF 0 0 0 0 0 10.2 ...

normal telnet SF 0 0 0 3 1 2.1 ...

guess telnet SF 0 6 0 0 0 26.2 ...

normal telnet SF 0 0 0 0 0 126.2 ...

overflow telnet SF 3 0 2 1 0 92.5 ...

normal telnet SF 0 0 0 0 0 2.1 ...

guess telnet SF 0 5 0 0 0 13.9 ...

overflow telnet SF 3 0 2 1 0 92.5 ...

normal telnet SF 0 0 0 0 0 1248 ...

... ... ... ... ... ... ... ... ... ...

Table 1. Telnet Records  RIPPER rule Meaning guess :- failed logins >= 5. If number of failed logins is greater than 5, then this telnet con-  nection is ?guess?, a guessing password attack.

overflow :- hot = 3, compromised = 2, root shell = 1.

If the number of hot indicators is 3, the number of compromised conditions is 2, and a root shell is obtained, then this telnet con- nection is a buffer overflow attack.

. . . . . .

normal :- true. If none of the above, then this connection is ?normal?.

Table 2. Example RIPPER Rules from Telnet Records  We use Meta-learning [2] as a mechanism to induc- tively learn the correlation of predictions by a number of base detection models (i.e., classifiers). The resulting meta- classifier thus combines the detection power of all the base detection models. This approach has been extensively stud- ied [21] and empirically evaluated in a related domain of fraud detection and has been shown to be an effective and scalable approach.

3.2 Association Rules  There is empirical evidence that program executions and user activities exhibit frequent correlations among system features. For example, certain privileged programs only ac- cess certain system files in specific directories [8], program- mers edit and compile C files frequently, etc. These consis- tent behavior patterns should be included in normal usage profiles.

The goal of mining association rules is to derive multi- feature (attribute) correlations from a database table. Given a set of records, where each record is a set of items, support(X) is defined as the percentage of records that contain item set X . An association rule is an expression X ? Y, [c, s] [1]. Here X and Y are item sets, and X ? Y = ?, s = support(X ? Y ) is the support of the rule, and c = support(X?Y )support(X) is the confidence.

Table 3 shows the shell input commands during one tel- net session by a secretary. Here we keep only the file-  time hostname command arg1 arg2 am pascal mkdir dir1 am pascal cd dir1 am pascal vi tex am pascal tex vi am pascal mail fredd am pascal subject progress am pascal vi tex am pascal vi tex am pascal mail williamf am pascal subject progress  ... ... ... ...

am pascal vi tex am pascal latex tex am pascal dvips dvi -o ... ... ... ... ...

am pascal logout  Table 3. Shell Command Records  name extensions, remove the (input) contents of mail bodies and files, and use ?am? to represent all the morning times- tamps. Not all associations are relevant in analyzing pro- gram or user behavior (for example, hostname = pascal ? arg1 = tex).

We utilized the ?schema? level information about the au- dit records to direct the pattern mining process. Observe that certain features are essential in describing the data,     while others provide only ?auxiliary information?. For ex- ample, in shell command data, since the combination of the exact time and command uniquely identifies each record, command is an essential feature; likewise, in network con- nection data, the combination of the features timestamp, source and destination hosts, source port, and service (des- tination port) uniquely identifies a connection record. Thus, they can be the essential features. We argue that the ?rel- evant? association rules should describe patterns related to the essential features.

We call these essential features(s) axis features when they are used as a form of item constraint. We restrict the association rules to only output rules that include axis at- tribute values. In practice, we need not designate all essen- tial features as the axis features. For example, some net- work analysis tasks require statistics about various network services while others may require the patterns related to the hosts. We can use service as the axis feature to compute the association rules that describe the patterns related to the services of the connections. In the case of shell command records, we use command as the axis feature.

Table 4 shows some example association rules from the shell command data in Table 3. Each of these association rules conveys information about the user?s behavior. The rules mined from each telnet/login session (of the same user) can be merged into an aggregate rule set to form the user?s normal profile. Section 5.3 details our experiments of using association rules for anomaly detection.

3.3 Frequent Episodes  There is often the need to study the frequent sequential patterns of network events in order to understand the nature of many attacks. We use frequent episodes to represent the sequential audit record patterns.

Given a set of timestamped event records, where each record is a set of items, an interval [t1, t2] is the sequence of event records that starts from timestamp t1 and ends at t2. The width of the interval is defined as t2 ? t1. Let X be a set of items, an interval is a minimal occurrence of X if it contains X and none of its proper sub-intervals contains X . Define support(X) as the ratio between the number of minimum occurrences that contain X and the total number of event records. A frequent episode rule is the expression X,Y ? Z, [c, s, w] [15]. Here X , Y and Z are item sets, and they together form an episode. s = support(X?Y ?Z) is the support of the rule, and c = support(X?Y ?Z)support(X?Y ) is the confidence. The width of each of the occurrences must be less than w.

We introduced several extentions to the original frequent episodes algorithm. Our extended algorithm computes fre- quent sequential patterns in two phases. First, it finds the frequent associations using the axis features(s) as previ-  ously described. Then it generates the frequent serial pat- terns from these associations. Thus, our approach combines the associations among features and the sequential patterns among the records into a single rule.

Another interesting schema-level fact about audit records is that some essential features can be the references of other features. These reference features normally carry information about some ?subject?, and other features de- scribe the ?actions? that refer to the same ?subject?. For example, if we want to study the sequential patterns of con- nections to the same destination host, then dst host is the ?subject? and service is the action. In this case, we can designate dst host as the reference feature. When forming an episode, our program tests the condition that, within the episode?s minimal occurrences, the event records covered by its constituent item sets have the same reference feature value.

4 Feature Construction  We use the mined frequent episodes from network con- nection records as guidelines to construct temporal statisti- cal features for building classification models.

Raw tcpdump output are first summarized into network connection records using pre-processing programs, where each record has a set of ?intrinsic? features. For example, the duration, service, src host and dst host (source and destination hosts), src port (source port), src bytes and dst bytes (number of data bytes), a flag indicating normal or error status according to the protocols, etc., are intrinsic features of a single connection. Table 5 shows examples of connection records. Note that these ?intrinsic? features are for general network analysis purposes, and not specific to intrusion detection.

We apply the frequent episodes program to both nor- mal connection data and intrusion data, and compare the resulting patterns to find the ?intrusion only? patterns. The details of the pattern comparison algorithm is described in [12]. Briefly, since the number of patterns may be very large and there are rarely exactly matched patterns from two data sets, this heuristic algorithm considers two episodes related to two different sets of axis features as more different, and outputs (the user-specified) top percentage of the most ?in- trusion only? patterns.

As an example, consider the syn flood attack records shown in Table 5. Here the attacker used many spoofed source addresses to send a lot of S0 connections (i.e., only the first SYN packet is sent) to a port (e.g., http) of the vic- tim host in a very short time span (e.g., all in timestamp 1.1). Table 6 shows the top intrusion only pattern, pro- duced using service as the axis feature and dst host as the reference feature.

Each of these intrusion patterns is used as a guideline     Association rule Meaning command = vi ? time = am, hostname = pascal, arg1 = tex, [1.0, 0.28]  When using vi to edit a file, the user is always (i.e. 100% of the time) editing a tex file, in the morning, and at host pascal; and 28% of the command data has this pattern.

command = subject ? time = am, hostname = pascal, arg1 = progress, [1.0, 0.11]  The subject of the user?s email is always ((i.e. 100% of the time) about ?progress?, in the morning, and at host pascal; and 11% of the command data has this pattern.

Table 4. Example Association Rules from Shell Command Data  timestamp duration service src host dst host src bytes dst bytes flag ...

1.1 0 http spoofed 1 victim 0 0 S0 ...

1.1 0 http spoofed 2 victim 0 0 S0 ...

1.1 0 http spoofed 3 victim 0 0 S0 ...

1.1 0 http spoofed 4 victim 0 0 S0 ...

1.1 0 http spoofed 5 victim 0 0 S0 ...

1.1 0 http spoofed 6 victim 0 0 S0 ...

1.1 0 http spoofed 7 victim 0 0 S0 ...

... ... ... ... ... ... ... ... ...

10.1 2 ftp A B 200 300 SF ...

12.3 1 smtp B D 250 300 SF ...

13.4 60 telnet A D 200 12100 SF ...

13.7 1 smtp B C 200 300 SF ...

15.2 1 http D A 200 0 REJ ...

... ... ... ... ... ... ... ... ...

Table 5. Network Connection Records  for adding additional features into the connection records to build better classification models. We use the follow- ing automatic procedure for parsing a frequent episode and constructing features:  ? Assume F0 (e.g., dst host) is used as the reference feature, and the width of the episode is w seconds.

? Add the following features that examine only the con- nections in the past w seconds that share the same value in F0 as the current feature:  ? A count of these connections;  ? Let F1 be service, src dst or dst host other than F0. If the same F1 value (e.g., ?http?) is in all the item sets of the episode, add a percent- age of connections that share the same F1 value as the current connection; otherwise, add a per- centage of different values of F1.

? Let V2 be a value (e.g., ?S0?) of a featureF2 (e.g., flag) other than F0 and F1. If V2 is in all the item sets of the episode, add a percentage of con- nections that have the same V2; otherwise, if F2 is a numerical feature, add an average of the F2 values.

This ?syn flood? pattern results in the following addi- tional features: a count of connections to the same dst host in the past 2 seconds, and among these connections, a per- centage of those that have the same service, and percentage of those that have the ?S0? flag.

An open problem here is how to decide the right time window value w. We mine sequential patterns using differ- entw values, for example, from 0.1 to 20 with an increment of 1, and plot the number of patterns generated at each run.

Our experience show that this plot tends to stabilize after the initial sharp jump. We call the smallest w in the stable region w0. In [11], we reported experiments of using dif- ferent w values to calculate temporal statistical features for classification models. Our results showed the plot of accu- racy of the classifier also stabilizes afterw ? w0 and tend to taper off. Intuitively, a requirement for a good window size is that its set of sequential patterns is stable, that is, suffi- cient patterns are captured and noise is small. We therefore use w0 for adding temporal statistical features.

In order to construct the appropriate features to detect an intrusion, we need to select the right axis and reference features to generate the most distinguishing and useful in- trusion patterns. This could be a bottleneck in building ef- fective models since it requires empirical evaluation. We have implemented a feature construction system, described     Frequent episode Meaning (service = http, flag = S0, dst host = victim), (service = http, flag = S0, dst host = victim) ? (service = http, flag = S0, dst host = victim) [0.93, 0.03, 2]  93% of the time, after two http connections with S0 flag are made to host victim, within 2 seconds from the first of these two, the third similar connection is made, and this pattern occurs in 3% of the data  Table 6. Example Intrusion Pattern  in [12], to support the iterative procedure of pattern min- ing and comparison, feature construction from patterns, and model building and evaluation. In each iteration, we choose a different data mining strategy regarding the choices of axis and reference features. These choices are limited among the ?essential? features (see Section 3.2), that is, service, dst host, src dst, or src port. Since intrusions are gen- erally targeted to some victim host(s) in the network, the system starts with service and dst host.

5 Experiments  We participated in the DARPA Intrusion Detection Eval- uation Program, prepared and managed by MIT Lincoln Labs. The objective of this study was to survey and eval- uate the state of the art in research in intrusion detection.

A standard set of extensively gathered audit data, which in- cludes a wide variety of intrusions simulated in a military network environment, is provided by DARPA. Each partici- pating site was required to build intrusion detection models or tweak their existing system parameters using the training data, and send the results (i.e., detected intrusions) on the test data back to DARPA for performance evaluation. We report our experience here.

5.1 The DARPA data  We were provided with about 4 gigabytes of compressed tcpdump data of 7 weeks of network traffic. This data can be processed into about 5 million of connection records of about 100 bytes each. The data contains content (i.e., the data portion) of every packet transmitted between hosts inside and outside a simulated military base. BSM audit data from one UNIX Solaris host for some network sessions were also provided.

Four main categories of attacks were simulated, they are:  ? DOS, denial-of-service, for example, ping-of-death, teardrop, smurf, syn flood, etc.,  ? R2L, unauthorized access from a remote machine, for example, guessing password,  ? U2R, unauthorized access to local superuser privileges  by a local unprivileged user, for example, various of buffer overflow attacks,  ? PROBING, surveillance and probing, for example, port-scan, ping-sweep, etc.

In addition, there were anomalous user behavior such as ?a manager becomes (i.e., behaves like) a system adminis- trator?.

5.1.1 Data Pre-processing  We used Bro as the packet filtering and reassembling en- gine. We extended Bro to handle ICMP packets, and made changes to its packet fragment inspection modules since it crashed when processing data that contains teardrop or ping-of-death attacks.

We implemented a Bro ?connection finished? event han- dler to output a summarized record for each connection.

Each connection record includes these ?intrinsic? features: its time, duration, service, src host, dsthost, src port, wrong fragment (fragmentation error, e.g., fragment size is not multiple of 8 bytes, or the offsets are overlapped, etc.), flag (how the connection is established and terminated).

We used Bro event handlers to examine the telnet ses- sions, and extract the shell commands of the users. We fur- ther pre-processed the shell commands by replacing times- tamps with am, pm, and nt (for night), and eliminated the input (i.e., contents) of edit and sendmail commands, and kept only the filename extensions. Table 3 shows exam- ples of the processed command data. These shell command records were used for user anomaly detection, to be dis- cussed in Section 5.3.

5.2 Misuse Detection  The training data from DARPA includes ?list files? that identify the timestamp, source host and port, destination host and port, and the name of each attack. We used this information to select intrusion data to perform pattern min- ing and feature construction, and to label each connection record with ?normal? or an attack type to create training data for building classification models.

Since the amount of audit data is huge, for example, some days have several millions of connection records due     to the nasty DOS attacks, we did not aggregate all the con- nection records into a single training data set. Instead, we extracted all the connection records that fall within a sur- rounding time window of plus and minus 5 minutes of the whole duration of each attack to create a data set for each at- tack type. We also randomly extracted sequences of normal connections records to create the normal data set.

5.2.1 Manual and Automatic Feature Construction  Following the feature construction approach described in Section 4, for each attack type, e.g., syn flood, port-scan, etc., we performed pattern mining and comparison using its intrusion data set and the normal data set. We con- structed appropriate features according to the intrusion only patterns. Here we summarize the temporal and statistical features automatically constructed by our system:  ? The ?same host? feature that examine only the connec- tions in the past 2 seconds that have the same destina- tion host as the current connection:  ? the count of such connections, the percentage of connections that have the same service as the cur- rent one, the percentage of different services, the percentage of the S0 flag, and the percentage of the REJ (i.e., rejected connection) flag;  ? The ?same service? features that examine only the con- nections in the past 2 seconds that have the same ser- vice as the current connection:  ? the count of such connections, the percentage of different destination hosts, the percentage of the S0 flag, and the percentage of the REJ flag.

We call these the (time-based) ?traffic? features for con- nection records. There are several ?slow? PROBING at- tacks that scan the hosts (or ports) using a much larger time interval than 2 seconds, for example, one in every minute.

As a result, these attacks did not produce intrusion only pat- terns with the time window of 2 seconds. We sorted these connection records by the destination hosts, and applied the same pattern mining and feature construction process. In stead of using a time window of 2 seconds, we now used a ?connection? window of 100 connections, and constructed a mirror set of ?host-based traffic? features as the (time- based) ?traffic? features.

We discovered that unlike most of the DOS and PROB- ING attacks, the R2L and U2R attacks don?t have any ?in- trusion only? frequent patterns. This is because most of the DOS and PROBING attacks involve sending a lot of con- nections to some host(s) in a very short period of time, and therefore can have frequent sequential patterns that are dif- ferent from the normal traffic. The R2L and U2R attacks  are embedded in the data portions of the packets and nor- mally involve only a single connection. Therefore, it is un- likely that they can have any unique frequent traffic patterns.

In other words, our automatic feature construction process failed to produce any features for these attacks.

After studying the outcome of this mining process, we focussed our attention to the content of the connections. In the Bro event handlers, we added functions that inspect data exchanges of interactive TCP connections (e.g., telnet, ftp, smtp, etc.). These functions assign values to a set of ?con- tent? features to indicate whether the data contents suggest suspicious behavior. These features are: number of failed logins, successfully logged in or not, whether logged in as root, whether a root shell is obtained, whether a su com- mand is attempted and succeeded, number of access to ac- cess control files (e.g., ?/etc/passwd?, ?.rhosts?), number of compromised states on the destination host (e.g., file/path ?not found? errors, and ?Jump to? instructions, etc.), num- ber of hot indicators, (e.g., access to system directories, cre- ation, and execution of programs, etc.), and number of out- bound connections during a ftp session. Our approach here is to include an extensive set of indicators, and then let clas- sification programs decide which minimal set of discrimi- nating features should be used to identify intrusions.

5.2.2 Detection Models  It is evident that different categories of intrusions require different sets of constructed features in order to be detected.

We therefore built classification models using different fea- ture sets:  ? The ?traffic? model: each connection record contains the ?intrinsic? and the ?traffic? features. Table 7 shows some example labeled connection records. The resul- tant RIPPER classifier detects the DOS and PROBING attacks. Table 8 shows some example RIPPER rules.

? The host-based ?traffic? model: each connection record contains the ?intrinsic? and the host-based ?traf- fic? features. The resultant RIPPER classifiers detect the slow PROBING attacks.

? The ?content? model: each connection record contains the ?intrinsic? and the ?content? features. Table 1 shows some example labeled connection records. The resultant RIPPER classifier detects the R2L and U2R attacks. Table 2 shows some example RIPPER rules.

These classification models each specialize to a certain type of intrusion. We then constructed a meta-level clas- sifier to combine these detection models. Each meta-level training record consists of four features, the three predic- tions each from one of the base models, plus the true class label (i.e., ?normal? and an attack type). RIPPER was then     label service flag host count srv count host REJ % host diff srv % duration ...

normal ecr i SF 1 1 0 1 0 ...

smurf ecr i SF 350 350 0 0 0 ...

satan user-level REJ 231 1 85% 89% 0 ...

normal http SF 1 0 0 1 3 ...

... ... ... ... ... ... ... ... ...

Table 7. Example ?Traffic? Connection Records  RIPPER rule Meaning smurf :- service=ecr i, host count ? 5, host srv count? 5.

If the service is icmp echo request, and for the past 2 seconds, the number of connections that have the same destination host as the current one is at least 5, and the number of connections that have the same service as the current one is at least 5, then this is a smurf attack (a DOS attack).

satan :- host REJ % ? 83%, host diff srv % ? 87%.

If for the connections in the past 2 seconds that have same the destination host as the current connection, the percentage of re- jected connections are at least 83%, and the percentage of differ- ent services is at least 87%, then this is a satan attack (a PROB- ING attack).

Table 8. Example RIPPER Rules for DOS and PROBING attacks  applied to learn the rules that combine the evidence from the ?traffic?, host-based ?traffic?, and ?content? classifiers to make a (final) prediction on a connection. The result- ing meta-level rules basically use the predictions from the ?content? model to detect R2L and U2R attacks, and the combination of ?traffic? and host-based ?traffic? models to detect the DOS and (fast and slow) PROBING attacks. That is, the meta-classifier predicts a connection as an attack of R2L or U2R whenever the ?content? model does so; and an attack of DOS or PROBING whenever the ?traffic? model does so, or whenever the ?traffic? model predicts ?normal? but the host-based model predicts a PROBING attack.

Model # of features # of rules # of features in records in rules  content 22 55 11 traffic 20 26 4+9 host traffic 14 8 1+5  Table 9. Model Complexities  Table 9 summarizes the complexity of the base models in terms of the number of features in a connection record, the number of RIPPER rules produced, and the number of distinct features actually used in the rules. The numbers in bold, for example, 9, indicate the number of automatically constructed temporal and statistical features being used in the RIPPER rules. We see that for both the ?traffic? and host-based ?traffic? models, our feature construction pro- cess contribute the majority of the features. We should  point out that not all features in the connection records were selected by RIPPER. This is because RIPPER, like most classification algorithms, has a built-in ?feature selection? process to select the most discriminating and generalizable features according to their statistical significance and per- formance (e.g., in a hold-out test dataset that simulates the ?unseen/future? data). Because of the large amount of audit data, a human expert is not able to manually gather and test various statistics, and thus tend to do a poor job in select- ing the features. As a result, hand crafted ?signature? rules tend to be very specific to a small intrusion data set. Al- ternative classification algorithms that compute underlying probability distributions may indeed require all features be evaluated in their resultant models. A crucial issue here is the tradeoff between model accuracy and model cost. The RIPPER output indicates that some features are irrelevant and hence we need not compute these at run-time, thus re- ducing the cost of detection. This is the subject matter of our ongoing research.

5.2.3 Results  We report the performance of our detection models as eval- uated by MIT Lincoln Labs. We trained our intrusion detec- tion models, i.e., the base models and the meta-level clas- sifier, using the 7 weeks of labeled data, and used them to make predictions on the 2 weeks of unlabeled test data (i.e., we were not told which connection is an attack). The test data contains a total of 38 attack types, with 14 types in test data only (i.e., our models were not trained with instances             0 0.05 0.1 0.15 0.2  D et  ec tio  n R  at e  False Alarm Rate  Columbia Group1 Group2 Group3  (a) DOS             0 0.05 0.1 0.15 0.2  D et  ec tio  n R  at e  False Alarm Rate  Columbia Group1 Group2 Group3  (b) PROBING           0 0.05 0.1 0.15 0.2  D et  ec tio  n R  at e  False Alarm Rate  Columbia U2R Group3 U2R Group3 R2L Group1 R2L  Columbia R2L  (c) U2R and R2L          0 0.05 0.1 0.15 0.2  D et  ec tio  n R  at e  False Alarm Rate  Columbia Group1 Group3  (d) Overall  Figure 1. ROC Curves on Detection Rates and False Alarm Rates  of these attack types).

Figure 1 shows the ROC curves of the detection models by attack categories as well as on all intrusions. In each of these ROC plots, the x-axis is the false alarm rate, calcu- lated as the percentage of normal connections classified as an intrusion; the y-axis is the detection rate, calculated as the percentage of intrusions detected. A data point in the upper left corner corresponds to optimal performance, i.e., high detection rate with low false alarm rate. We compare here our models with other participants (denoted as Group 1 through 3) in the DARPA evaluation program. (The tested systems produced binary output, hence, the ROC?s are not continuous. These plots are duplicated from the presentation slides of a report given by Lincoln Labs in a DARPA PI meeting. The slides can be viewed on line via http://www.cs.columbia.edu/?sal/JAM/PROJECT/MIT/mit- index.html). These participating groups used knowledge engineering approaches to build their intrusion detection  models. We can see from the figure that our detection model has the best overall performance, and in all but one attack category, our model is one of the best two. However, it is also clear that all models performed very poorly on R2L attacks. For all intrusions, an overall detection rate of below 70% is hardly satisfactory in a mission critical environment.

Category Old New DOS 79.9 24.3 PROBING 97.0 96.7 U2R 75.0 81.8 R2L 60.0 5.9 Overall 80.2 37.7  Table 10. Comparing Detection Rates (in %) on Old and New Attacks     Although our models were intended for misuse detec- tion, we had hoped that the features we constructed would be general enough so that the models can detect new vari- ations of the known intrusions. Table 10 compares the de- tection rates of old intrusions and new intrusions. Here new intrusions refer to those that did not have corresponding in- stances in the training data. We see that our models were able to detect a large percentage of new PROBING and U2R attacks, but not as effective for new DOS and R2L attacks.

5.2.4 Discussion  PROBING attacks have relatively limited variance because they all involve making connections to a large number of hosts or ports in a given time frame. Likewise, the outcome of all U2R attacks is that a root shell is obtained without legitimate means, e.g., login as root, su to root, etc. Thus, for these two categories of attacks, given some representa- tive instances in the training data, our data mining system was able to construct features that capture their general be- havior patterns. As a result, our detection models can detect a high percentage of old and new PROBING and U2R at- tacks. On the other hand, DOS and R2L have a wide variety of behavior because they exploit the weaknesses of a large number of different network or system services. The fea- tures constructed based on the available attack instances are very specialized to the known attack types. Our detection models therefore missed a large number of new DOS and R2L attacks.

The results here are not entirely surprising since our models are misuse detection models. We need to use anomaly detection models on network traffic or system pro- grams to guard against the new and diversified attacks.

Anomaly detection is much more challenging than misuse detection. For example, we need to first decide whether we should build normal profile for each network service or a group of services, and for each host or a groups of hosts.

The feature construction process will likely to be more com- plex since unlike a relatively small number of ?intrusion only? patterns, normal network traffic can have a large num- ber of variations. Network anomaly detection is an impor- tant problem and an active area of research.

5.3 User Anomaly Detection  ?Insiders? misusing their privileges can be hard to detect since they don?t normally need to break-in, and IDSs and security personnel tend to focus on guarding outside attacks.

Insider problems are some of the most vexing problems for security personnel. (Indeed, who checks the checkers, i.e., the person to whom the IDS reports?)  It is often very difficult to classify a single event by a user as normal or abnormal because the unpredictable nature of  most people. A user?s actions during a login session needs to be studied as a whole to determine whether he or she is behaving normally. Our initial exploratory approach is to mine the frequent patterns from user command data, and merge or add the patterns into an aggregate set to form the normal usage profile of a user. A new pattern can be merged with an old pattern if they have the same left-hand-sides and right-hand-sides, their support values are within a 5% of each other, and their confidence values are also within 5% of each other.

To analyze a user login session, we mine the frequent patterns from the sequence of commands during this ses- sion. This new pattern set is compared with the profile pat- tern set and a similarity score is assigned. Assume that the new set has n patterns and among them, there are m pat- terns that have ?matches? (i.e., rules that they can be merged with) in the profile pattern set, then the similarity score is simply mn . Obviously, a higher similarity score means a higher likelihood that the user?s behavior agrees with his or her historical profile.

User Normal Activities sysadm logs in as root, cats the pass-  word file, and runs commands such as top.

programmer1 writes public domain C code, use a vi editor, compiles the C code, reads and sends mail, and executes unix commands.

programmer2 a similar user profile, but works in afternoons and evenings.

secretary edits latex files, runs latex, reads mail, and sends mail.

manager1 reads and sends mail manager2 reads mail.

Table 11. User Descriptions  The DARPA data also includes user anomaly data to evaluate anomaly detection systems. Table 11 describes the consistent behavior of the 6 users for anomaly analy- sis. Note that since we were the only group that performed anomaly detection on the test data, Lincoln Labs did not evaluate our results. We report our experiments on the train- ing data here.

We apply our frequent episode algorithms to the com- mand data from each login session (of the same user), with command as the axis feature and w = 5 (i.e., we look for patterns within the range of 5 consecutive commands), to mine the frequent sequential patterns on the associations among user commands, their arguments, time segments, and hosts. We treat the first 4 weeks as a data gathering pe- riod, during which we simply merge the patterns into each user?s profiles. Each user has 3 profiles, one for the ac-     User Anomaly Description programmer2 logs in from beta secretary logs in at night sysadm logs in from jupiter programmer1 becomes a secretary secretary becomes a manager programmer1 logs in at night sysadm becomes a programmer manager1 becomes a sysadm manager2 logs in from pluto  Table 12. User Anomaly Description  User Normal Anomaly programmer2 (0.58, 0.79) 0.00 secretary (?,?) 0.00 sysadm (0.84, 0.95) 0.00 programmer1 (0.31, 1.00) 0.04 secretary (0.41, 0.98) 0.17 programmer1 (?,?) 0.00 sysadm (0.64, 0.95) 0.00 manager1 (0.57, 1.00) 0.00 manager2 (1.00, 1.00) 0.00  Table 13. Similarity with User?s Own Profile  tivities of each time segment (am, pm, and nt). We treat the 5th week as the training period, during which we com- pare the patterns from each session to the profile of the time segment. We record the normal range of the similar- ity scores during this week. The data in the 6th week has some user anomalies, as described in Table 12. For each of the anomalous sessions, we compare its patterns against the original user?s profile, and then compare the resulting sim- ilarity score against the recorded normal range of the same time segment. In Table 13, the column labeled ?Normal? is the range of similarity of each user against his or her own profile as recorded during the 5th week. A ? here means that the user did not login during the time segment in the 5th week. The column ?Anomaly? is the similarity measure of the anomalous session described Table 12. We see that all anomalous sessions can be clearly detected since their sim- ilarity scores are much smaller than the normal range. For example, when the sysadm becomes programmer (see Table 12), his/her patterns have zero matches with the sysadm?s profile, while for the whole 5th week, the pm similarity scores are in the range of 0.64 to 0.95. Unfortunately, for- mal evaluation statistics are not available to determine the error rates of this approach. However, this initial test indi- cates a path worthy of future study.

6 Related Work  Network intrusion detection has been an on-going re- search area [17]. More recent systems, e.g. Bro [18], NFR [6], and EMERALD [19] all made extensibility their primary design goals. Our research focuses on automatic methods for constructing intrusion detection models. The meta-learning mechanism is designed to automate the ex- tention process of IDSs. We share the same views discussed in [20] that an IDS should be built using standard compo- nents. We believe that the operating system and network- ing community should be responsible for building a robust ?Event? box.

In [10], algorithms for analyzing user shell commands and detecting anomalies were discussed. The basic idea is to first collapse the multi-column shell commands into a sin- gle stream of strings, and then string matching techniques and consideration of ?concept drift? are used to build and update user profiles. We believe that our extended frequent episodes algorithm is a superior approach because it consid- ers both the association among commands and arguments, and the frequent sequential patterns of such associations.

7 Conclusions and Future Directions  In this paper, we outline a data mining framework for constructing intrusion detection models. The key idea is to apply data mining programs to audit data to compute misuse and anomaly detection models, according to the observed behavior in the data. To facilitate adaptability and extensi- bility, we propose the use of meta-learning as a means to construct a combined model that incorporate evidence from multiple (lightweight) base models. This mechanism makes it feasible to introduce new ID components in an existing IDS possibly without significant re-engineering.

We extend the basic association rules and frequent episodes algorithms to accommodate the special require- ments in analyzing audit data. Our experiments show that the frequent patterns mined from audit data can be used as reliable user anomaly detection models, and as guidelines for selecting temporal statistical features to build effective classification models. Results from the 1998 DARPA Intru- sion Detection Evaluation Program showed our detection models performed as well as the best systems built using the manual knowledge engineering approaches.

Our future work includes developing network anomaly detection strategies, and devising a mechanical procedure to translate our automatically learned detection rules into modules for real-time IDSs. A preliminary project in col- laboration with NFR has just started.

8 Acknowledgments  We wish to thank our colleagues at Columbia University, Chris Park, Wei Fan, and Andreas Prodromidis, for their help and encouragement.

