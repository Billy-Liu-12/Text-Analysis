Indexing Positively Constructed Formulas

Abstract - The calculus of positively constructed formulas (PCF) is a first-order formalism that has many features useful for solving problems of dynamic systems control. For investigation of this formalism, analysis of logical inference of formulas is used. The logical inference consist of many PCF. The analysis of big amount of formulas require special operations: search of formulas, search by template, unification search etc. Usually for solving these problems the indexing methods are used. For indexing terms as a tree-like structures the methods of indexing such as path indexing, substitution tree indexing, discrimination tree indexing etc., are used. This methods well used in many logical systems.

Since PCF, like a term, have a tree-like structure, the generalization of indexing methods to the PCF indexing is possible. In this paper, we consider this problem. The modification of indexing methods and experiments concerning the analysis of logical inferences (big sets of PCF) are presented.



I. INTRODUCTION Automated theorem proving (ATP) is one of the  developing areas of artificial intelligence (AI), which is based on methods of mathematical logic (proof theory) and realized in computer programs to automatically search for logical inference. ATP is the most formalized direction of automation of deductive constructions, and automated reasoning. One of the actual applications of the ATP development is searching for open mathematical problem solution, such as described in [1].

The most state-of-art systems of ATP, such as the Otter, Vampire, EQP, E, and others are based on the well-known resolution method and its modifications. The algorithms used in the implementations of these ATP systems are suitable for other computer-oriented calculi automation.

A logical formalism of knowledge representation and processing, which is based on the positive logical calculus formalism of positively constructed formulas (PCF) [5], is described briefly in the paper. This calculus has a much greater heuristic conversation possibilities of the original logically formalized knowledge than the clause language of resolution method [2]. The possibilities allow one to develop specialized modifications of the default strategies to reflect structural and semantic properties of the formalized knowledge.

The PCF formalism was applied in [3] for improvement of a system for automatic synthesis of theorems ?VLF-1? (Vector Lyapunov's Functions) by means of implementation of first-order logical equation solver. In [4]  intuitionistic fragments of the calculus was used for problem solving.



II. THE CALCULUS OF POSITIVELY CONSTRUCTED FORMULAS  A. Language and calculus The PCF calculus JF is a triple < ??, ????, ? >,  where LF is the PCF language, ???? is the only axiom schema and ? is the unique inference rule of JF.

Let us denote the set of all conjuncts as Con and assume that a conjunct is either a finite set of usual atoms of a first- order language, or False, where False satisfies the property ? ? ? ?? for any A ? ??? . The empty conjunct is denoted by True. It is clear that if ? ? ??? then ? ?? ?? = ? ??. Atoms of any conjunct (except True and False) may contain variables, constants and function symbols.

Definition 1. Let ?? be a set of variables (possible empty set) and A be a conjunct. Well-formed formulas of the PCF language are defined as follows:  An expression ???: ? is a ?-formula; an expression ???: ? is a ?-formula.

Let ??, ? , ?? be a ?-formulas, then ?-formula is a  formula of the following form: ???: ?(??, ? , ??).

Let ??, ? , ?? be a ?-formulas, then ?-formula is a  formula of the following form: ???: ?(??, ? , ??).

An expression is a well-formed PCF if it is constructed  based on above Definition 1 rules only.

The variable from ?? are bound by a corresponding quantifiers, and these variables are called ?-variables and ?-variables correspondingly.

Let us define a semantic of PCFs by a common semantics of a corresponding first-order formula (FOF) in the classical first-order logic (FOL).

Definition 2. Let ? = {??, ? , ??} be a conjunct and ?? = {??, ? , ??} be a set of variables. By ?& we denote ??& ? &?? and ? ??& = ?????, ?!"?& = #$%? (propositional constants). By ?'*' we denote an image of PCF formula F in the FOL.

If ? = ???: ? then ?'*' = ??? ? ???(?&). If ? =???: ? then ?'*' = ??? ? ???(?&).

If  ? = ???: ?(??, ? , ??) then  ?'*' = ??? ? ??? +?&&(??'*'& ? &??'*')-.

The research was supported by Irkutsk State University, grant No  2012-01-02; 2012-01-01; by Federal Framework Program ?Scientific and Teaching Staff of Innovative Russia for 2012-2013" State Contract ? 14.?37.21.0365;  ??????? ???????	?????? ???????????????     If  ? = ???: ?(??, ? , ??) then ?'*' = ??? ? ??? +?& ? (??'*' ? ? ? ??'*')-.

Any PCF can be obviously represented by a tree structure. Each node of that tree has the following form ???: ? or ???: ?. Therefore, for readability we will represent PCF as tree, as well as we will use the corresponding terminology: node, branch, root, leaf, etc.

If a PCF F roots from the ?: ?!"? node and each leaf of F is a ?-node then F is called a PCF in the canonical form. It is clear, that any PCF F can be converted to the canonical form by the following transformations:  1. If F is not canonical ?-formula then ?: ?!"?(?: ?!"?(?) is PCF rooted from the ?: ?!"?.

2. If F is ?-formula then ?: ?!"?(?) is PCF rooted  from the ?: ?!"?.

3. If F has leaf ???: ? then the node ?: ? ?? can be  added as child of this leaf.

In the sequel, only PCFs in the canonical form are considered.

The axiom schema ???? of the PCF calculus JF has the following form:  ?: ?!"? +????: ? ??1?3?4, ? , ????: ? ??1?3 ?4- In the PCF calculus to prove F we attempt to refute its  negation, that?s why the axioms are identical to false. Thus, an inference process in the PCF calculus is a refutation process.

Definition 3. Let us assume that a question ?56: ? to a base ???: 7 has an answer ? if and only if ? is a substitution 56 ? 9;and ?? ? 7, where 9;is Herbrand universum based on variables from ??, constants and function symbols that occur in corresponding base subformula.

Definition 4. If a PCF F has the structure ?: ?!"?(???: (7(?), ?), where ? is a list of other base subformulas, and ? is a list of question subformulas, that contains a question subformula ?56: ?1?AB?: ?B(?D)4BE?,?6666, then a formula ?? is an application result of the unary inference rule ? to the question ?56: ? with an answer ? and ?? = ?: ?!"?1??? ? AB?: 7 ? ?B?(? ? ?B?)BE?,?6666, ?4.

After appropriate renaming some bound variables inside each subformula the expression ?? will satisfy the well-formed PCF requirements.

Any finite sequence of PCFs F,??, ?F?, ? , ???, where ??? ? ??G?, is called a refutation of F in the PCF calculus.

A question with ?: ? ?? consequent node is called goal question.



III. INDEXING  A. Term Indexing In information technologies, the problem of speed  increase of searching the data is often solved with the  indexation, which is a quite popular technique in relational databases. In our case, the main object for indexing is the general term, which is a tree-like structure, so, the methods for indexation of relational databases is not applicable.

Term indexation was researched quite well, as a practical use in ATP system, and from theoretical point of view. There are many papers, related to this theme [6, 7, 9]. The methods described in these papers allows to efficiently finding such terms, which satisfies the specified criteria: if the term is equal to query term; if the term is instantiation; if the term is a generalization or it is a unification. For developed prover we need the described operations and, because in base subformulas there are mainly ground terms, we choose to use the well-known path-indexing technique [6].

We describe path indexing method as in [6]. For every symbol in term the list of paths are created. Path ? is a sequence of alternating symbols and numbers, where the number define the position of symbol among the children nodes. For example, the atom A(e,f(f(x,k),y),m) is A, A1e, A2f, A2f1f, A2f1f1x, A2f1f2k, A2f2y, A3m. I.e. for every symbol, there is a corresponding path from root to this symbol in tree representation of general term. You can see more details on Fig 1. Every path contain the pointer to the corresponding term, i.e. the term, for which we build the path. The paths stored in sorted form.

For example, we have A(a,f(x,b)) and the set of atoms {A(a,f(c,b)), A(a,f(b,e)),A(a,f(k,b)), A(b,f(e,b))}.

Figure 1. Tree representation of term  Every atom, which is a ground instance for specified, contains in paths the list of the following paths: A1a, A2f2b. Therefore, for ground instance search of specified atom we need to find the intersection of the sets of atoms (to which the paths is pointing). In particular, the path A1a points to set {A(a,f(c,b)), A(a,f(b,e)),A(a,f(k,b))}, and A2f2b to {A(a,f(c,b)), A(a,f(k,b)), A(b,f(e,b))}.

The intersection of these sets is a set {A(a,f(c,b)),A(a,f(k,b))}, and it is a set of instances for atom A(a,f(x,b))  The methods of term indexing is quite popular for ATP systems. They are used in almost every implementation.

B. Formulas indexing Proving of big formulas can be processed in several  stages storing the intermediate results on hard drives. The logical inference can be represented as a chain of formulas.

To analyze described situations we need to check formulas for specified properties. Because PCF, as a term, has a tree structure, one can use the described above methods of path     indexing. However, in this case the term indexation need to be modified, because in case of term indexation the path is clearly defined, and in case of PCF (indexation) the number of children nodes is stored and for the symbol there is a corresponding described characteristic of PCF node (type quantifier). In our prover, we use the following features: type of quantifier, size of conjunct, lexical representation of one of terms of conjunct.

Consider the following PCF:  ?: #$%? ?  H ?: ?(?) ? ??: ?(?) ? ?: ??????: 7(?) ?  I??: 7(?)?(?) ? ?: J(?, ?)?5: J(5, ?) ? ?: ????? In case we are characterize every node as quantifiers,  the tree representation is on following Fig. 2.

Figure 2. Nodes are quantifiers  In case we are characterize every node as a length of conjuncts, the tree representation is on following Fig. 3.

Figure 3. Nodes are length of conjuncts  Therefore, as a characteristic for the node can be any, for example, we can use lexicographical representation.



IV. EXPERIMENTS For the testing purposes, we use the problems from  TPTP library [8]. This library de facto is a standard for testing the ATP systems. It contains the thousands of problems divided by rating of problem, domain of problem etc. Some problems was not solved yet. Every solution is logical inference (chain of formulas). For some problems, for example COM008+1.p, the length of logical inference is 33551 steps (i.e. chain of formulas is 33551 formulas length). All this formulas was indexed and the searching was produced. We have conduct experiments on 1000 problems. This is a first-order logic problems without equality. The length of logical inference for solved (800) problems is from 1 to ~50000 steps.

On the Figure 4, the results of testing of searching formulas are presented. We have used the searching without indexation (just a straightforward search) and searching with implemented indexation. X-axis is an  amount of formulas in logical inference (i.e. length of formulas chain). Y-axis is a time of search in seconds.

As we see from Figure 4 the growth of searching time on problems with small number of logical inference steps is not much different from with indexing and without indexing methods. The greater the number of formulas in logical inference the greater the difference between methods. Hence, the application of formulas indexing is justified on long (from ~5000 steps) logical inference.

Formulas indexing as in Figure 2 allows search the formulas by given formula structure. And formulas indexing on Figure 3 allow search the formulas by given conjuncts length.

Figure 4. Comparison chart

V. CON?LUSION In this paper, the PCF indexing is presented. As a basis  of this indexing we take the well-known term indexing method ? path-indexing [6]. We have tested the speed of search of formulas with indexing and without. Indexing allows to quickly analyzing the logical inference, and one can use this possibility for developing new knowledge about given problems. Because the PCF calculus is not well-researched and well-known, considered approach will provide the possibility to deeper investigation of the PCF calculus.

