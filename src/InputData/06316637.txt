A New Share Frequent Itemsets Mining using  Incremental BitTable Knowledge

Abstract- The share measure has been proposed as an important measure for mining association rules. The value of share itemsets provides useful information such as total profits and total customer purchased quantities associated with itemsets in database. The share-frequent itemsets mining problems become a very important research issue in data mining. Existing share-frequent itemsets mining algorithms are based on static database so knowledge must be rebuilded when the minimum share threshold is changed or database is modified either appended or updated. This paper proposes a novel BitTable knowledge for incremental and interactive share-frequent itemsets mining in multiple minimum share thresholds without rebuilding BitTable knowledge.  It is effective for incremental and interactive mining to take advantage of the previous BitTable knowledge and the previous mining results.



I.  INTRODUCTION  Association rules mining is one of an important research topics in data mining.  It aims for finding relationship between data in a large database.  In addition, association rules mining is widely employed; for example, in cross marketing [4], new product development [5], personal services, and credit approval assessment for e-business [6], etc.  The process of discovering all the association rules [7] comprises of two steps: 1) discovering all frequent itemsets that satisfying a minimum support threshold, and 2) Creating of all rules from discovered frequent itemsets that meet the confidence threshold. Most of the researchers are interested in solving problems on creating frequent itemsets because it is costly, and consumes high resources.

Suppose we want to determine purchasing model from purchasing database. Advantages of hidden data association include consideration of product location on shelves.  If the hidden data relation is known, the product that customers mostly purchase together can be located nearby.  Each product is called item, and itemset is group of products that customers mostly purchase together in one transaction.  The support of the itemsets indicates how importance of itemsets of transaction in database [1].  However, this support is only considered number of transactions that the itemsets are purchased.  The purchasing quantity is not analysed.  Hence, this value cannot identify total costs and profits of itemsets [8].  In 1997, [9] proposed a share- confidence framework that considers quantitative analysis which would be more benefit.

Presently, many algorithms for finding share-frequent itemsets have been developed including [8]-[12].  However, those  algorithms do not support a ?build once mine many? concept.

Previous research works were developed for finding one time share-frequent itemsets from a set of database.  This is not efficient as the process of knowledge creation and data mining must be performed for every value of minimum share and this is occurred when the database is modified as well.  Therefore, interactive share-frequent itemsets finding is required.  This is because practically users request for share-frequent itemsets at several minimum shares and can be explored more quickly.

This motivates researchers in seeking for a mechanism to collect data without changing the minimum share value.

Knowledge could be modifiable and share-frequent itemsets finding could be done in interactive manner.  This paper; hence, proposes a mechanism for data collection by using a BitTable knowledge that allows data to be modified without re-building the table.



II.   BASIC DEFINITIONS  In this section, the terms used for describing share-frequent itemsets mining are defined as follows [13].

Definition 1. DB ={T1,T2,..,Tn} is a database of transaction Ti where Ti is a set of items.

Example 1. We use the same example of database which was used in [13]. Let the Table I be a DB. It consists of eight transactions: T1, T2, T3, T4, T5, T6, T7 and T8 with eight items: a, b, c, d, e, f, g and h.

Definition 2. The measure value mv(ip,Tq) represents the quantity of item ip in transaction Tq.

Example 2. From Table 1, the quantity of item A in transaction T8 is 4. Therefore, mv(A,T8) = 4.

TABLE I EXAMPLE OF AN INCREMENTAL TRANSACTION DATABASE  WITH COUNTING TID Transaction Count  Initital DB T1 T2 T3 T4 T5  {A,B,C,D,E,G,H} {F,H} {B,C,D} {C,E} {B,D}  {1,1,1,1,1,1,1} {4,3} {4,3,3} {4,1} {3,2}  DB+ T6 T7 T8  {B,C,D} {B,C,D,E} {A,F,G}  {3,2,1} {3,4,1,2} {4,1,1}     Definition 3. The total measure value of DB, TMV(DB), is the quantity of all transaction in database:  ?? ??  ? qpq Ti  qp DBT  TimvDBTMV ),()(  (1)  Example 3. From Table 1, TMV(DB) = 56.

Definition 4. The itemset measure value of an itemset X  in transaction Tq, imv(X,Tq), is a total measure value of all items belonging to X where X = is a k-itemset, X?{i1,i2,...,in}, and 1?k?n :  ? ?  ? Xi  qpq p  TimvTXimv ),(),(    (2)  Example 4. From Table 1, imv(A,T8) = mv(A,T8) = 4 and imv(AF,T8) = mv(A,T8)+ mv(F,T8) = 4+1 = 5.

Definition 5. The local measure value of an itemset X of all transactions in DBX, DBX is a set of transaction containing itemset X, is a total itemset measure value of itemset X in DBX:   ?? ??  ? Xi  qp  DBT pxq  TiimvXlmv ),()(  (3)  Example 5. From Table 1, lmv(bc) = imv(bc,T1)+ imv(bc,T3)+ imv(bc,T6)+ imv(bc,T7) = (1+1)+(4+3)+(3+2)+(3+4) = 21.

Definition 6. The share value of an itemset X, SH(X), is a ratio of local measure value of X to the total measure value of DB:   )( )()(  DBTMV XlmvXSH ?   (4)  Example 6. From Table 1, SH(bc) = lmv(bc)/TMV(DB) = 21/56 = 0.375.

Definition 7. The itemset X is share-frequent if SH(X) ? min_share where min_share is a minimum share threshold.

Example 7. From Table 1, suppose min_ share = 0.20, we can say that ?bc? is a share-frequent itemset since SH(bc) = 0.375.



III. RELATED WORK  The problem of finding frequent itemsets is to completely discover frequent itemsets in transactional database satisfying a minimum support threshold defined by users. AIS algorithm was the first algorithm that generates all frequent itemsets which was proposed in 1993 [1]. The downward closure property [2] is to prune any subsets that are not in frequency then all of its super frequents must be infrequent.  The Apriori algorithm used this property to prune infrequent itemsets but it suffers from the level-wise candidate generation-and-test problem and needs several database scans. The FP-growth algorithm [3] solved the problem of candidate generation-and-test by using a tree-based called FP-Tree.  It needs two-times database scans to find frequent itemsets according to given minimum threshold by users.

Discovering mentions above support measure considers only the binary occurrences (0/1), i.e., either absent or present of the  items in one transaction. In reality, A length of transaction is about purchasing a full basket. Customers usually do not buy one item for one piece. In 1997, Carter et. al. have firstly introduced the share-confidence model to discover useful knowledge about numerical attributes associated with items in a transaction [12]. This numerical attribute reflects all the profits, costs of the items and associates to the transaction items.  The downward closure property cannot be used for finding share- frequent itemsets, but some algorithms use this property such as the ZP [10], and ZSP [8]. These algorithms are very time- consuming and do not work efficient in larger databases. Other algorithms have been proposed to mine share-frequent itemsets but it cannot discover all share-frequent itemsets, such as SIP [10], CAC [11] and IAB [8]. Later, the Fast Share Measure (ShFSM) algorithm [12] proposes to improve the previous algorithms by using the level closure property. However, ShFSM wastes computational times on the join and the prune steps of candidate generation in each pass, and generates too many useless candidates. The Direct Candidates Generation (DCG)[18] was proposed. The DCG algorithm outperforms the ShFSM by generating candidated itemsets without pruning and joining steps in each iteration. The DCG can maintain the downward closure property by using the local measure value (Definition 3). The number of candidate is generated when the DCG is less than the ShFSM but the DCG suffers from the level-wise candidate generation-and-test problems and needs several database scans.

The algorithms mentioned above were mostly designed for finding share-frequent itemsets at one minimum share value on one static database.  Once the minimum share or the data in database is changed the data structuring process must be re done.  The adaptive BitTable knowledge; therefore, is presented.

In addition, interactive querying share-frequent itemsets enables users to employ by themselves.



IV.   OUR APPROACH  Our approach employs an incremental BitTable Structure as an incremental knowledge. We propose to effectively mine share- frequent itemsets from the knowledge. Our mining results are ready for querying share-frequent itemsets using SQL.

A.  Constructing the BitTable Knowledge BitTable is a set of binary whose each bit represents an item  [17]. ?1? or ?0? represents either present or absent as already discussed in [13] and [14].  This paper treats a BitTable knowledge as a set of integer where each integer represents quantity of an item. For example, transaction T3 as shown in Table I, we store 4, 3, and 3 to item B, C, and D, respectively.

The BitTable is constructed once and it is not rebuild when data is modified.

The BitTable contains all information of all transactions in a database.  Its construction requires only a single data scan. Each     transaction is loaded into the algorithm.  After that, each item in transaction is read.  Two temporally variables are defined.  The first one is for keeping value of each item, and the second one is for its quantity. When all items in transaction are read, two temporally variables are employed to construct an insert statement, and the command will be executed and then be kept in the BitTable.  This process is repeated for all transaction.

With this algorithm, data can be modified.  For data modification, it starts with ascendant sorting items in the BitTable.  After that, each transaction is loaded and each item is read.  As data appending process, temporally variables are defined.  The first variable is for introducing a query statement to filter transaction that contains same items.  Then, modified transaction is compared to the filtered transaction.  If the modified transaction is found, an update statement is introduced for modifying data in the BitTable.

Input: Transactions of type DB, DB+, and DBu //DBu is an update transaction Output: BitTable Procedure: 1 For each transaction 2     For each item i 3          tmp_i[] = i, tmp_qty[] = qty //Keep the item and quantity of item in temporary variable as titled tmp_i and tmp_qty respectively.

4     End For 5     If (transaction type is DB or DB+) 6         The SQL insert statement is constructed from the tmp_i and tmp_qty then execute SQL insert statement respectively.

7     End If Else 8       The tmp_i is arranged by lexicography 9      The SQL query statement is constructed with the tmp_i for filtering  transaction then SQL query statement is executed and its kept into Result Set(RS) respectively 10        For each transaction t ?RS 11             For each item k ? t 12  The SQL update statement is constructed from  tmp_i and tmpnew_qty then SQL update statement is executed on BitTable.

13             End For 14        End For 16 End else 17 End For  Fig. 1. The construction of BitTable Knowledge   TABLE II THE BITTABLE KNOWLEDGE IS CONSTRUCTED AFTER SCAN  DATABASE ONCE TId\Item A B C D E F G H  1 1 1 1 1 1 1 1 1 2 0 0 0 0 0 4 0 3 3 0 4 3 3 0 0 0 0  4 0 0 4 0 1 0 0 0 5 0 3 0 2 0 0 0 0 6 0 3 2 1 0 0 0 0 7 0 3 4 1 2 0 0 0 8 4 0 0 0 0 1 1 0  B.   Finding Share-Frequent Itemsets In this subsection, we present an algorithm for finding share-  frequent itemsets. It has objective to discover value of share- frequent itemset either it is greater than zero using the definition mention in section II. Then, the share-frequent itemsets is collected to the ShareItemset Table. We describe the algorithm in Fig. 2 as below.

The process starts with determination of TMV. In step 2, we determine all possible itemsets as non-empty elements of power set of set all items in BitTable. For each itemset obtained from step 2, we calculate its share value. An itemset with share value greater than 0 is inserted into ShareItemset Table. Example of information in ShareItemset Table is as shown in Table III.

Input: BitTable Output: ShareItemset Table Procedure: 1 Determine TMV 2 Determine all possible itemsets 3 For each itemset 4 Determine LMV 5      SH = LMV/TMV 6 IF SH > 0 7            Insert itemset, LMV and SH to ShareItemset Table 8      End IF 9  End For  Fig. 2. Algorithm for finding the share-frequent itemset and then insert to ShareItemset Table.

Table III  THE EXAMPLE OF THE SHAREITEMSET TABLE AFTER THE SECOND PROCESS DONE.

Id Itemset LMV value Share value 1 a,f 16 0.239 2 a,g 15 0.224 3 b 14 0.209 4 b,c 21 0.313 5 b,d 22 0.328 6 b,c,e 12 0.179 7 b,c,d 27 0.403 8 c 17 0.254 9 c,d 16 0.239  10 c,e 19 0.284 11 e,g 8 0.119 12 e,f 9 0.134   C. Querying the Share frequent Itemsets  From subsection B., the ShareItemset Table is tabulated.  From this table, the share-frequent itemsets can be queried by SQL.

From data in Table III, if users need to find share-frequent itemset at minimum share of 0.20, the executed command is as follows.

?Select Itemset from ShareItemset where share >= 0.20?  The value of minimum share (0.20) can be modified to meet users? requirement.  Table IV and V illustrates the results.

Table IV THE RESULT OF SHARE-FREQUENT ITEMSET IS PASSED MINIMUM  SHARE AT 0.20 Id Itemset Share value 1 a,f 0.239 2 a,g 0.224 3 b 0.209 4 b,c 0.313 5 b,d 0.328 6 b,c,d 0.403 7 c 0.254 8 c,d 0.239 9 c,e 0.284  Table V THE RESULT OF SHARE-FREQUENT ITEMSET IS PASSED MINIMUM  SHARE AT 0.25 Id Itemset Share value 1 a,f 0.239 2 b,c 0.313 3 b,d 0.328 4 b,c,d 0.403 5 c 0.254 6 c,e 0.284

V. ANALYSIS AND DISCUSSION  In this section, we discuss the time complexity of proposed algorithms. We summarize the notation used in the best-case and the worst-case for our proposed algorithm as shown in Table VI.

Our proposed BitTable construction algorithm can construct the BitTable knowledge with O(mn) time complexity. For updating, the time complexity is O(mnpq).

To determine all share-frequents itemsets with share values greater than 0 using Algorithm 2, we need to test 2m-1 itemsets.

Therefore, the time complexity of Algorithm 2 is O(2m).



VI.   CONCLUSIONS AND FUTURE WORK  Existing algorithms of share-frequent itemsets mining are developed for the static dataset and they have to rebuild their knowledge and mine the share-frequent itemsets every time when minimum share is changed or the dataset is modified.  In this paper, we propose an efficient BitTable knowledge that can capture the incremental data very efficiently so it will append and mine only for a new transaction. It considerably reduces mining time by using previous BitTable knowledge and mining results. One can use SQL for querying share-frequent itemsets at his/her minimum share values, without new mining. For the future work, we will improve time complexity for finding share- frequent itemsets and process for updating the BitTable knowledge.

