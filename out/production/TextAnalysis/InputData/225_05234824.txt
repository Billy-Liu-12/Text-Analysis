Frequent Itemsets Mining Using Vertical Index List

Abstract? In this paper, I propose a new approach to mine all frequent itemsets that performs database scanning only once to construct data structure. This structure uses the conceptual of vertical data layout to contain transaction data. The changing of minimal support is not effected by the data structure and rescan of database is not required. The proposed algorithm has the ability to find frequent itemsets without generation of candidate itemsets. It obtains complete and correct frequent itemsets. The examples of all definitions and correctness proving are provided.

Keywords-Data minin; Association rule mining; Frequent itemsets mining; Vertical data layout; Algorithm.



I. INTRODUCTION  Frequent itemsets mining is a useful step for discovering the interesting associations between items which is hidden in large database. The uncovered associations between items can be represented in the form of association rule or sets of frequent items. The classic application is market basket analysis which is the analysis how the items purchased by customers are associated. The association rule mining is wildly applied in many research fields such as decision support, financial forecasts, bioinformatics, web mining, etc. Moreover, it helps in data classification, clustering and others data mining task as well.

The first algorithm to generate all frequent itemsets was the AIS algorithm which was introduced by Agrawal et al. in [1]. Later, the algorithm was improved and renamed by Agrawal et al., called the Apriori algorithm which is proposed in [2]. The Apriori principle is ?If an itemsets is frequent, then all of its subsets must also be frequent? [3]. The Apriori algorithm uses a level-wise and breadth-first search approach for generating association rule. It uses the support-based pruning to control the exponential growth of candidate itemsets.  However, the algorithms based on generated and tested candidate itemsets have  two major problems. First, the multiple scans especially when dealing with the database with a lot of long itemsets will increase the I/O load and time consuming. Next, the generation of huge candidate sets and calculation of their support will consume a lot of CUP time.

The FP-growth algorithm is the most popular method which is developed by Han J. et al in [4, 5].

The FP-growth algorithm mines frequent itemsets without generating candidate sets and scans database only twice. The FP-growth performs depth-first search approach in the search space. It encodes the data set using a compact data structure called FP-tree and extracts frequent pattern directly from this prefix tree.

There are many approaches that have been proposed to extend and improve this algorithm. Jian Pei et al.

introduced H-mine algorithm by using array-based and trie-based data structure [6]. The Patricia Mine algorithm was proposed in [7] that compressed Patricia trie to store the data sets. The FPgrowt* algorithm reduced the FP-tree traversal time by using array technique [8]. I have been proposed the SFI-mine algorithm in [9]. This algorithm constructs pattern-base by using a new method which is different from pattern- base in FP-growth and mines frequent itemsets with a new combination method without recursive construction of conditional FP-tree. However, most of the FP-tree algorithm base has the following drawbacks. First, mining of frequent itemset from the FP-tree, it generates huge of conditional FP-tree and takes a lot of time and space. Last, when the changing of minimal support, this algorithm may restart and scan database twice.

The Apriori and FP-growth algorithm mine frequent itemsets by using the data representation in the format of the horizontal data layout. Another mining can also be used the vertical data layout.

Many researches used this type of layout. Eclat algorithm was proposed in [10] to generate all frequent itemsets in a depth-first search and used the join step from the Apriori property, since no candidate itemse _____________________________     can be found. In [11], they proposed a data structure, called LIB-graph to contain data when database is scanned. This method mines frequent patterns by using recursive conditional FP-tree same as the FP-growth algorithm.

I propose a new approach to mine all frequent itemsets that performs database scanning only once to construct data structure. This structure uses the conceptual of vertical data layout to contain transaction data, called Vertical Index List or VIL. I obtain 1- frequent itemsets and store in the Sorted List or SL. I mine frequent itemsets from the VIL by ordering of the items in the SL. The proposed algorithm has the ability to mine frequent itemsets without generation of candidate itemsets. The changing of minimal support threshold is not effected by the VIL and rescanning of database is not required. The proposed algorithm employs more efficiency of searching technique.

This paper is organized as follows. In section 2, the basic concept is presented. The propose VIL, SL and SL-mine are illustrated in section 3. An illustrate example is given in section 4. The correctness proving is shown in section 5. Finally, the conclusion is addressed in section 6.



II. THE BASIC CONCEPT  Definition 1 (Transaction database) Let   be a database of transaction  where  is a set of items.

Example 1. I use an example database which was used in [5]. Let the TABLE I is a DB. It consists of five transactions such as , labeled as Transaction in the table, and seventeen items such as a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p and s.

TABLE I. A TRANSACTION DATABASE Transaction Items  f,a,c,d,g,i,m,p a,b,c,f,l,m,o b,f,h,j,o b,c,k,s,p a,f,c,e,l,p,m,n   Definition 2 (Support) The support of an item , denoted by , is the number of transactions containing .

Definition 3 (Minimum support threshold) The minimum support or minsup is the threshold defined by the user for selection of frequent items.

Definition 4 (Frequent itemsets and infrequent itemsets) An item x is called frequent item if minsup, otherwise it is called infrequent item. I denote the set of  all frequent items by  and the set of all infrequent items by .



III. THE APPROACH  In this section, I present a new data structure that performs database scanning only one time to contain transaction data, called Vertical Index List or VIL. The original VIL can reuse many times when minsup is changed. After that, I propose a new algorithm to mine frequent itemsets, called SL-mine. The SL-mine mines frequent itemsets from VIL by using the control order of processing from the SL. The results of mining by using the proposed algorithm are still obtaining complete and correct frequent itemsets.

A. The Vertical Index List In this subsection, I give a definition, an example and the algorithm1 for illustration of how to make VIL.

The VIL has the following properties:  (1) The VIL is constructed from scan DB once.

(2) The original VIL can support every minsup  threshold. Therefore it does not need to rescan the DB when minsup threshold is changed.

TABLE II. THE VIL AFTER SCAN DB ONCE  Items    support         Transactions a 3 b 3 c 4 d 2 e 1 f 4 g 1 h 1 i 1 j 1 k 1 l 2 m 3 n 1 o 2 p 3 s 1  Definition 5 (Vertical Index List) The Vertical Index List or VIL is the structure consisting of item set, support of each element in the item set and the set of all transactions.

Example 2. I  use an example database DB in TABLE

I. The DB is scanned once to create the VIL. I first create all the item set to the table of VIL and define all supports as zero.

The first transaction is and consists of itemset <f,a,c,d,g,i,m,p>. The  will be inserted into corresponding item name ordering by sequential of    itemset. Therefore, the will be the first inserted at the transaction of item <f> and increase support of item <f> with 1. The second examined item is <a>, we insert at Item <a> and increase support of item <a> with 1. Next, we examine item <c>, we subsequently  insert  at Item <c> and increase support of item with 1, then, the remaining items (d, g, i, m and p) in  can be done in the same way. The remaining transactions ( ) in DB can also be done in the same way. I  present the insertion of all transaction in TABLE II.

Algorithm 1 (Vertical-Index-List Construction) Input: A transaction database DB and a minsup threshold.

Output: Vertical-Index-List, VIL Method: The VIL is constructed as follows.

1 Begin 2  scan the transaction database DB once.

3  create all items and define all supp(xi)= 0 to VIL.

4  For each transaction iT in DB 5    For each ix in iT do 6      insertTID of xi toTID-set which corresponding 7       with ix 8      count supp(xi) 9    End //For 10 End //For 11 End //Begin  Figure 1. The construction of vertical index list algorithm  B. The Mining of Frequent Itemsets by Using the SL- mine In this subsection, I present a new algorithm that has the ability to mine frequent itemsets without generation of candidate itemsets. The proposed algorithm employs more efficiency of searching technique. The SL has the following properties:  (1) The SL are 1-frequent.

(2) The SL is sorted by ascending of support.

(3) The SL will be update by using original VIL if  minsup is changed.

I give the definitions, the examples and the algorithms for illustrative of how to make SL and mine frequent itemsets.

TABLE III. THE TABLE OF THE SL Items Support a 3 b 3 m 3 p 3 c 4 f 4     Definition 6 (Sorted-List) The Sorted List or SL is the structure consisting of itemset and support which is selected any item and support from VIL if supp(item) ?minsup.

Example 3. Let us examine the process of construction the SL by starting from sorting TABLE II with ascending sort of support. For this an example, the user defines minsup equal 3. I select any item in the VIL which supp(item) ?minsup and contain selected to the SL, as seen in TABLE III.

Algorithm 2 (Sorted-List Construction) Input: Vertical-Index-List, VIL Output: Sort-List, SL Method: The SL is construction as follows.

1 Begin 2     For each xi in the VIL 3       select supp(xi) ?minsup to the SL 4     End //For 5 End //Begin  Figure 2. The algorithm of the construction of the VIL.

Definition 7: (PreFrequent Itemsets) The prefrequent itemsets, , is the set of the combined items between the set A and the set B at k- level; where k = 2,3,4,?,n. The set A and the set B are the set of transactions in the VIL. .

? ?  The will be the  frequent itemsets at k-level, , iff and only if   .

The SL-mine algorithm consists of the following steps as shown in Figure 3. In brief, there are six major steps.

Step 1. Combination of the item in the VIL by using  the control order in the SL.

Step 2. Calculation the  at k-level; where k = 2.

Step 3. If  Then store  to and perform to the next step Else perform step 5.

Step 4. At k-level; where k > 2.

Repeat calculate the  by checking support then store to Until meet the depth path of each which is subset of .

Step 5. Perform step 2 until   in the SL is equal to  Step 6. Union all  and store the output in FS.

Algorithm 3 (SL-Mine: Mining frequent itemsets with VIL by using the items in SL) Input: Vertical-Index-List VIL, Sort-List SL Output: The Complete set of frequent itemsets FS.

Method: call SL-mine 1 Procedure SL-mine(SL,VIL, x) 2 Begin 3  For each ix in the SL 4     While the first item in SL <> the last item Do 5       combine items in the VIL by using the control 6         order of the  items in the SL 7       calculate support of all combine items )(  kxPF 8       If support ?)(  kxPF  minsup Then 9          // checking k-frequent itemset; where 2=k 10        store items to kFS  11        // checking k-frequent itemset; where 2>k 12        call CkHighLevel 13     End //If 14   End // While 15 End // For 16 //union all k-frequent itemsets to FS 17 Result kFSFS ?= 18End // Begin  19 Procedure CkHighLevel (  kxPF ) 20 Begin 21   For each  kxPF 22     calculate support of all items corresponding to 23         the path of level that higher than two 24     ixx xPFPF kk ?=+1  25      If supp ? +  )( 1kx  PF minsup Then  26        store items to kFS 27      End // If 28     End // For 29  Return all kFS 30 End // Begin  Figure 3. The algorithm of the SL-mine.



IV. AN ILLUSTRATIVE EXAMPLE   In this section, I illustrate the details of the mining of frequent itemsets process based on definitions and algorithms in previous sections.

Example 7. In this example, let minsup be 3 and according to TABLE II, TABLE III and Algorithm 3 in Figure 3. The algorithm starts to examine the first item at the SL. The steps are presented as follow: (Step 1.1) Starting the first item in TABLE III, it is an item <a> and the following item is an item <b>.

Seeking out at item <a> and <b> at the TABLE II and testing by using an operation of intersection between <a> and <b>. I get <ab:1>. Stop checking all of the depth paths of <ab> because <ab> is FS , so its subset must be FS .

(Step 1.2) Examining item <a> and <m> in TABLE III. Seeking out at item <a> and <m> in TABLE II. I get the 2-frequent itemset, <am:3>.

Therefore, I test another items all its depth path, as seen in the following step.

(Step 1.2.1) Seeking out at item <p> in TABLE II.

The testing of <am> and <p> , and getting the FS , <amp:2>. Therefore, stop checking the deep path of <amp>.

(Step 1.2.2) Seeking out at item <c> in TABLE II.

The result of testing the items in this path is the 3- frequent itemset, <amc:3>. Therefore, I continue to examine the depth path of <amc>, as seen in the following step.

(Step 1.2.2.1) Seeking out at item <f> in TABLE II.

The testing of <amc> and <f> is the 4-frequent itemset, <amcf:3>. The item <f> is the last item of 1- frequent itemsets, so the algorithm stops the operation in this path.

(Step 1.2.3) Seeking out at item <f> in TABLE

II.The testing of <am> and <f> is the 3-frequent itemsets, <amf:3>. The item <f> is the last item of 1- frequent itemsets, so the algorithm stops the operation in this path.

(Step 1.3) Examining the item <a> and <p> in TABLE III. Seeking out at item <a> and <p> at TABLE II and getting the FS , <ap:2>. Therefore, stop checking all of the depth paths of <ap> because all of its subsets must be FS .

(Step 1.4) Testing the item <a> and <c> in TABLE

III. Seeking out at item <a> and <c> at TABLE II and getting the the 2-frequent itemset, <ac:3>. Therefore, I continue to test another items all its depth path, as seen in the following step.

(Step 1.4.1) Seeking out at item <f> in TABLE

II.The result of testing the items is the 3-frequent itemset, <amf:3>. The item <f> is the last item of 1- frequent itemsets, so the algorithm stops the operation in this path.

(Step 1.5) Testing the item <a> and <f> in TABLE

III. Seeking out at item <a> and <f> at TABLE II and getting the the 2-frequent itemset, <af:3>. The item <f> is the last item of 1-frequent itemsets, so the algorithm stops an operation in this path.

The remaining items (b, m, p, c and f) in the SL can be done in the same way. After all the items are done, I present all k-frequent itemsets in TABLE IV, I present all  FS that separates by k-level in TABLE V.

TABLE IV. All FREQUENT ITEMSETS WHICH SEPARATE BY SEQUENTIAL OF PROCESSING.

Items Frequent Itemsets a {<am>,<amc>,<amcf>,<amf>,<ac>,<acf>,<af>} b {} m {<mc>,<mcf>,<mf>} p {<pc>} c {<cf>}   TABLE V. All FREQUENT ITEMSETS WHICH SEPARATE BY SEQUENTIAL OF THE K-LEVEL.

k-Level Frequent Itemsets 2 {<am>, <ac>, <af>, <mc>, <mf>, <pc>, <cf>} 3 {<amc>, <amf>, <acf>, <mcf>} 4 {<amcf>}

V. THE CORRECTNESS  In the following theorem, I present that the proposed algorithm can mine all frequent itemsets completely and correctly.

Theorem 1. The all frequent itemsets that obtained by the SL-mine algorithm are both complete and correct.

Proof.  According to the definitions in the section 2 and section 3.

; where k = 2,3,4,?,n.

, so  In the same way, ; where k = 2,3,4,?,n.

, so   The conclusion is Therefore,

VI. CONCLUSION    I have presented a new data structure that performs database scanning once to construct data structure, called VIL. Moreover, a new algorithm to mine frequent itemsets, named SL-mine algorithm. I illustrate the detail of new definitions, examples and algorithms of the approach. The SL-mine is developed by mining of frequent itemsets from VIL which using the control order of processing from SL. The proposed algorithm has the ability to find frequent itemsets without generation of candidate itemsets. The results of this method are still obtaining complete and correct frequent itemsets. I conclude by giving examples and proving correctness.

ACKNOWLEDGEMENT  I appreciate Tawesak Tanwandee, M.D. for his help in proof reading of this paper.

