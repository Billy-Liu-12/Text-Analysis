Content-based Retrieval and Data Mining of a Skin Cancer  Image Database

Abstract Skin cancer is the most common type of cancer in the United State. A large, shared skin cancer image database on the Internet will be quite valuable to the medical professionals and consumers. In this paper, a skin cancer image database is created using a three-tier system: a client application implemented in Java applets, a web server, and a backend database server.

JDBC-ODBC is used for the web server to communicate with the database server. Various browsing and content-based retrieval methods are supported for the skin cancer image database through web-based graphic user interfaces. A data mining algorithm for finding association rules between different features of the skin cancer images is also implemented.

Key words: data mining, association rules, Web database, multimedia, skin cancer images.

1. Introduction Each year, about a million people in the United States learn that they have skin cancer. According to current estimates, 40 to 50 percent of Americans who live to age 65 will have skin cancer at least once [l]. Skin cancer information on the Internet will benefit the skin cancer research and thus greatly benefit a lot of people.

The skin cancer database created in this project has been designed to be accessible through the Internet. This is consistent with mainstream technology and makes i t  relatively easy for people to browse, query, visualize images, and get data mining results.

A three-tier architecture is used in this project. It involves the front-end layer, a client application in Java applets accessible to a web browser; the second layer, which is a web server; and the third layer, which is a backend database server. The Java applet communicates with the web server application via Internet. The web server communicates with the database server through the Internet and JDBC-ODBC driver. All user needs to have are a connection to the Internet and a Java enabled browser.

Application libraries are downloaded at runtime. The browser is playing the role of a graphic user interface (CUI) and the execution environment. The browser is a client of the web server.

The local operating system does not matter much.

2. Database Design An automatic segmentation method for the images of skin tumors is developed in [2]. This method first reduces a color image into an intensity image and then finds an approximate segmentation by intensity thresholding. Finally, it refines the segmentation using image edges.

One table is designed for this skin cancer database to store the features of the tumors. Besides the tumor features, some other attributes are added into the table. These include record number as a primary key of this table, patient id number, the date that the image was taken, the image id number to identify the image, and the image file name.

Image file names are stored in the database instead of image file themselves. Although images can be stored in the database as BLOB type, our approach is more flexible because image files can be stored elsewhere, like on a multimedia server. A DBMS can be easily integrated with multimedia servers. One advantage is that i t  is easy to integrate multimedia files with existing databases. Another advantage is that other non-database applications can access those multimedia files without going through the database. While performing browsing or content- based retrieval, Java applets will try to find and display the images using their file names stored in the database.

The skin cancer database can be used for medical information retrieval, expert diagnosis, and medical pattern discovery.

2.1 Image Feature Definitions Irregularity is associated with skin malignancies, including malignant melanoma, but it  remains undefined up to now, other than with some subjective terms, such as jagged, notched, not smooth, or not round. One common way to measure irregularity (0 is  [=pz 4z4  wherep and A are the perimeter and area, respectively [3].

Asymmetry is determined about the near-axis of symmetry by comparing absolute area differences to the total area of the tumor shape [4].

Entropy a feature which measures the randomness of gray-level distribution. It is defined as  0-7695-1062-0/01 $10.00 0 2001 IEEE    P[i, J ]  is the gray-level co-occurrence matrix. It is defined by first specifying a displacement vector d = (dx, dy) and counting all pairs of pixels separated by d having gray levels i and J .  Entropy is highest when all entries in P[i, j ]  are equal [ 1 I].

Energy is defined as  1 1  Homogeneity is defined as  Inertia is defined as z(i-j)2~[i.jl t61  1 1  3. Database Browsing and Retrieval 3.1 Architecture This project is implemented in a three-tier architecture. The applets run in browser is the front layer, the web server is the middle layer and the backend database server is the third layer.

JDBC-ODBC is used for the communication between web server and database server.

The Java Database Connectivity (JDBC) provides a set of API objects and methods to interact with the underlying database. It issues SQL statements to request information from local data sources or remote databases. It is the layer between the low level database connection and the high level application interface.

When a JDBC driver does not exist for a specific application, JDBC can access an ODBC driver through the JDBC-ODBC bridge. So now JDBC has the capability to access almost all databases as ODBC drivers are widely available.

3.2 Database Browsing  The interface for the database browsing is shown in Figure 1.

The goal of this interface design was to make it clear and easy to browse. The records are displayed in a form format instead of a table format.

When the applet is executed, the first record in the database is displayed. The feature values in the record except the color values are displayed in separate text fields with their feature names. The values of average RGB, dominant RGB, average HIS, and dominant HIS are displayed in the same text field, respectively. The corresponding image is also displayed at the upper right comer. The record number is displayed at the upper left comer of the features' frame.

The displayed record is referred to as the current record. To browse the database sequentially, two buttons are introduced.

The "Previous" button is used for locating the record before the current record in the database while the "Next" button is used for locating the record after the current record.

The combo box beside the two buttons is for displaying records randomly. All the record numbers in the database are included in this combo box. The user can jump to any record by choosing the record number.

Figure 1. The interface for database browsing  3.3 Database Retrieval Users can retrieve images by their content, i.e. by specifying the attribute values or by using a synthesized color.

1 )  Query by Content Users can retrieve the records according to any attribute. As shown in Figure 2, all attributes are listed to be available for selection. In Figure 2 ,  eleven attributes are selected. The "Clear" button will reset all the check boxes to their unselected state so that a new retrieval can begin. The "Back" button will bring the user back to the first query interface.

After the user selects some attributes and the "Next" button is pressed, a new interface is displayed as shown in Figure 3. Only those selected attributes are displayed with two text boxes for each. The user can specify a value range for each attribute by filling the boundary values in the corresponding text boxes.

Figure 2 .  The interface for content-based retrieval     Although each attribute has two'text boxes so that the user can do range queries, exact queries are also possible. If the user wants to do exact query, only the "From" box, the left one of the two boxes, needs to be filled.

Figure 3. The interface for specifying the values of selected attributes  The query result is displayed as shown in Figure 4. The records are displayed in a table format instead of a form format. This is because all these records meet the search conditions, and table format is convenient for comparison and is easy to display arbitrary number of rows. The record numbers of all the result records are stored in the combo box beside the image. The user can display any of the result records' images by selecting the record number in the combo box.

The bottom part is for similarity-based search queries. All image feature attributes are listed in the list box. All record numbers of the result records are in the combo box right to the attribute list box. The left combo box contains the numbers from 5 to 95 with an interval of 5.

The user can retrieve any records that are similar to a record contained in the result table above. The similarity between two records is measured by their relative differences in one or more of their attributes values.

2) Query by Color As shown in Figure 5 ,  users can specify the color component values using three sliders. A color window displays the specified color to the user. The real RGB values of the color displayed in the color window are the sliders' values multiplied by 255. In order to be consistent with the RGB values in the database, fraction numbers are displayed beside each slider. The "Percent" slider allows the user to specify a query range. Assume a user selects a R value x, and a percentage value y, then the query will look for records whose R value is in the range of [x (1-y), x (1 +Y)l.

Figure 5 .  Query by color  Query Result  Figure 6. Result of a query by color  Figure 4. Result of a retrieval query     4. Data Mining Data mining, which is also referred to as knowledge discovery in databases, means a process of nontrivial extraction of implicit, previously unknown and potentially useful information from databases [7]. It is an emerging research area, whose goal is to extract significant patterns or interesting rules from databases.

Data mining can be broadly classified into three categories: Classification (Clustering)---finding rules that partition the database into finite, disjoint, and previously known (unknown) classes. Sequences---extracting commonly occurring sequences in ordered data. Association rules (a form of summarization)--- find the set of most commonly occurring groupings of items [7].

In this project, mining association rules in a skin cancer database has been implemented.

4.1 Association Rule  The formal statement of finding association rule is introduced in [8]. It can be described as follows:  Let I = {il, i2, ... , im) be a set of literal, called items. Let D be a set of transactions, where each transaction Tis  a set of items such that T c I .  Note that the quantities of items bought in a transaction are not considered, meaning that each item is a binary variable representing if an item was bought. Each transaction is associated with an identifier, called TID. Let X be a set of items.

A transaction T is said to contain X if and only if X c T. An association rule is an implication of the form X a Y ,  where X c I ,  Y c I and X n Y = 0. The rule X Y holds in D with confidence c if c% of transactions in D that contain X also contain Y. The rule X a Y has support s in D if s% of transactions in D contain X U Y.  A set of items is called an itemset, and an itemset with k items is called a k-itemset.

The data mining task for association rules can be broken into two steps:  Discover the frequent itemsets, also called large itemsets, that have transaction support above the pre-determined minimum support.

Use the frequent itemsets to generate the association rules for the database.

Data Preparation Since each attribute has a value in every record in the skin cancer database, association rules are based on which attribute value ranges frequently appear together in the database.

There are a few methods to partition each attribute value range.

"Equal-population'' partitioning is used in our implementation.

Equal-population means the total value range is divided into a certain number of intervals, such that almost same number of records are in each interval regardless of the size of the interval.

For example, assume that there are twenty records, and attribute A has a value range of 1 to 100. If the range needs to be partitioned into five intervals, they can be 1 to 35, 36 to 48, 49 to 52, 53 to 73, and 74 to 100, if each of these intervals has four records.

In the skin cancer database, the number of intervals is decided by the user while the minimum and the maximum number of intervals are predefined. The number of intervals is selected for each attribute independently. The number of intervals for different attributes may be different since they have different value domains.

Each attribute value is replaced by the corresponding interval number. Such an operation is called discretization. After the intervals are determined, selected attributes are discretized. To keep the original database intact, a new table is created for each selected attributes for discretization.

4.3 Find Frequent Itemsets  Assume table T is the target table, and association rules among attributes AI, A?, ... , A, in T are interesting to the user. The primary key in T is Record-No. n new tables t l ,  t2, ... , t, are created with the original table T intact. Record-No and AI columns are inserted into t l ,  Record-No and Az columns are inserted into tzr ... , and Record-No and A, columns are inserted into t,. AI, Az, ... , and A, values are then discretized in the new tables according to the user's specifications.

Sort and join operations are used as in the SETM algorithm 191 to find all the frequent itemsets as follows:  1) Find frequent I-itemsets. For k = 1 to n, sort to group the records in table t k  based on their Ak values. Remove those records whose Ak values don't have the minimum support in tk. So tk contains only frequent values of Ak.

Join t l  with tz based on the Record-No.

Sort to group the records in the result of Step 2 based on the values of AI and A2. Find frequent 2-itemsets of (AI, A?) values whose supports are higher than the minimum support. Remove the records whose (Al ,  A?) values don't have the minimum support.

2)  3)  f o r k = 2 t o n - 1  4) Join the table with frequent k-itemsets of (AI, A?, ... , Ak) values with table tk+I on Record-No. to generate a table with (Record-No, AI,  Az, ... , Ak, Ak+I) attributes.

Sort to group the records in the result of Step 4 based on (Al, A?, ... , Ak, Ak+]) values. Threshold the result according to the minimum support to get frequent (k+l)-itemsets of (A1, A*, ... , Akr Ak+l) values.

5 )  End of for-loop.

In this algorithm, we don't need to join t l  and t2 tables first. An optimal way is to join two smallest tables containing frequent 1- itemsets first. Then join the result with the third smallest table, and so on, until all the tables are joined.

4.4 Generate Association Rules  The next step is to use the frequent itemsets to generate the desired association rules. Suppose that f is a frequent itemset,     then for each non-empty subset a off,  whether the association rule a 3 If - a )  holds or.inot is determined by computing the confidence = supportv)/support(a). If confidence 2 minimum confidence, then the rule holds. a is called the ascendant of the rule and I f -  a )  is called the consequent of the rule.

The candidate ascendant are all possible subsets of the frequent itemset, whose length are from 1 to the length of the frequent itemset minus 1, and the corresponding candidate consequents are those left in the frequent itemset.

4.5 Example of Mining 'Association Rules  For this specific project, the end users are assumed to be doctors, specialists, or anyone interested in skin cancer, who have knowledge about skin'cancer and know what kind of associations they are looking for. Therefore, to find association rules among which attributes is totally dependent on the end user. The interface is designed such that user can find association rules among any combination of the attributes.

In the interface, every attribute in the target table is listed as shown in Figure 7. Except the "Malignant?" attribute, a list box is used to select the number of intervals to discretize the attribute values. The user can select a value between 1 and 10 for the number of intervals. Different attributes can be discretized with different number of intervals. The attribute "Malignant" in the table has only three values: "malignant", "benign", and "pre- malignant", so there is no need to discretize it. Two sliders allow the user to determine the minimum support and the minimum confidence.

After the user specifies hidher requirements and clicks the "Mining" button, the program begins. Valid association rules are displayed to the user as shown in Figure 7.

Mining Skin Cancer Database  Boundary-Irregularity (1.0791 to 1.1707) -> Malignant? ( pre-malignant )  Boundary-Irregularity (1.1707 to 1.708 1 ) -> Malignant? ( malignant )  Asymmetry (0.0999 to 0.1467) -> Malignant? ( benign )  Asymmetry (0.2318 to 0.3857) -> Malignant? ( malignant )  From the rules above, we can observe that high boundary irregularity or high asymmetry of the tumor is associated with malignant. This coincides with the experts' experience.

5. Summary In this project, we developed a web-based data browsing and content-based retrieval system for a skin cancer database. Users can query the database by any combination of the feature attribute values, or by synthesized image colors. Range queries, exact match queries, and similarity-based queries are allowed based on any image feature.

Another contribution of this project is the implementation of an association rule mining algorithm, which was originally developed for mining transaction databases. Users can find association rules between different skin cancer feature values, which can be every useful for skin cancer diagnosis and study.

