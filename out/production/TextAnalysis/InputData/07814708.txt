Itemset Mining with Penalties

Abstract?We introduce a preferences-based itemset min- ing framework. Preferences are encoded by a penalty function over the transactions in a database. We define an itemset mining problem where we associate to each transaction a penalty value. This problem consists in generating the frequent itemsets with a maximum penalty threshold. We then provide a propositional satisfiability based encoding. We extend the previous problem with a penalty function over items, where we use two maximum penalty thresholds, over the transactions and over the items. In this setting, computing the optimum itemsets corresponds to computing Pareto front.

The experimental evaluation on real world data shows the feasibility of our approach.

Keywords-Itemset mining; Preferences; Modeling.



I. Introduction Mining frequent itemsets is an essential problem in data mining and knowledge discovery. Since the first article [1] on association rules and itemset mining, the huge number of works, challenges, datasets and projects show the actual interest in this problem (see [6] for a recent survey).

Numerous efficient algorithms have been developed for mining frequent itemsets (e.g. [7]). However, the number of interesting patterns may be significant and redundant. Traditional models are based on the hypothesis that all the items are equally important. In practice, items and transactions might have more or less importance.

In order to deal with this shortcoming, existing models have been extended. More precisely, weighted frequent itemset mining problem has been proposed and inten- sively studied (e.g. [5], [8]). In these models, a weight is associated with each item representing its interest. Most of the contributions on weighted frequent itemset mining consider weighted items only. The weight of a transaction is usually derived by aggregating the weights of the items it contains. This is the motivation to define a weighted support allowing to satisfy the anti-monotonicity property usually violated in this setting. However, in real world applications, the importance of a given transaction can not be expressed as a function of the weight of the items.

To the best of our knowledge, there is no pattern mining model integrating weighted transactions or combining in a single framework both weighted transactions and items.

Our goal in this paper is to exploit the cross- fertilization between data mining, preference representa- tion and propositional satisfiability (SAT). Our objective is to propose a logical framework dealing with preferences in itemset mining problems. To this end, penalty logic [3] is clearly a model of choice. Interestingly enough, penalty logic is a compact preference representation language. It has as input a set of preferences over partial descriptions of objects and return a preference relation over the set of objects. More precisely, penalty logic is a weighed logic which it associates to each formula of a knowledge base a weight representing the price to pay if the formula is violated. Outcomes are then rank-ordered w.r.t. the weights associated with violated formulas. Making the parallel with our problem, the weights associated to transactions and items can also be seen as penalties. Indeed, if an itemset (resp. item) does not belong to a given transaction (resp.

itemset) then a price must be paid. This clearly fits our proposed framework, where the penalties are attached to the formulas encoding the itemset mining problem.



II. Background A. Itemset Mining: Let I be a set of items. A trans- action is a couple (tid, I) where tid is the transaction identifier and I is an itemset, i.e., I ? I. A transaction database is a finite set of transactions over I where the attribute tid refers to a unique itemset. We say that a transaction (tid, I) supports an itemset J if J ? I .

The cover of an itemset I in D is: C(I,D) = {(tid, J) ? D | I ? J}. Its support is defined as: S(I,D) =| C(I,D) |.

Let D be a transaction database over I and ? a quorum. The frequent itemset mining problem consists in computing the set FIM(D, ?) = {I ? I | S(I,D) ? ?}.

DEFINITION 1. (CLOSED FREQUENT ITEMSET) Let I an   DOI 10.1109/ICTAI.2016.145    DOI 10.1109/ICTAI.2016.145    DOI 10.1109/ICTAI.2016.145     Tid Itemset Age Penalty Value 1 ABCD 35 2 2 ABEF 50 1 3 ABC 39 2 4 ACDF 25 3 5 G 53 1 6 D 15 5 7 DG 38 2  Table I A WEIGHTED TRANSACTION DATABASE D.

itemset s.t. S(I,D) ? 1. The itemset I is closed if, for all itemset J ? I with I ? J , S(J,D) < S(I,D).

B. Penalty Logic and Preferences: Knowledge repre- sentation research witnesses a huge literature on compact preference representation languages. We focus on penalty logic. It is used to deal with inconsistent knowledge and preferences. Penalty logic can also be used as a logical language for expressing discrete optimization problems.

In penalty logic [3], user?s preferences are graded and represented by means of a finite set of weighted propo- sitional logic formulas of the form: N = {(?i, ai) | i = 1, ? ? ? , n}. For each pair (?i, ai) inN , ?i is a propositional formula representing a user?s preference and ai is an integer representing how is important the satisfaction of ?i. More specifically, the weight ai represents the penalty of falsifying the preference formula ?i. The greater is ai, the less satisfactory is an outcome falsifying ?i. In order to evaluate the outcomes, we look for preference formulas in N that they falsify. The penalty degree of an outcome w.r.t. N , denoted by P(?,N ), is the sum of the weights of the preference formulas falsified by that outcome. Given a penalty distribution (or function) P , the preference relation over the set of outcomes ? induced by N is defined by ??, ?? ? ?, ? ? ?? iff P(?,N ) ? P(??,N ), where ? ? ?? stands for ?? is at least as preferred as ?.



III. Penalty-Based Preferences on Transactions A weighted transaction is a triple (tid, I, w) where tid is the transaction identifier, I is an itemset, and w a non- negative integer (penalty of the transaction). The value w represents the penalty associated with an extracted knowledge when it does not fulfill the transaction.

A weighted transaction database (WTD) is a finite set of weighted transactions where the attribute tid refers to a unique itemset and unique penalty value. A transaction (tid, I, w) supports an itemset J if J ? I . The notions of cover (C(I,D)) and support (S(I,D)) of an itemset I in a WTD D are defined in the same way as for FIM.

DEFINITION 2. (GLOBAL PENALTY) Let D be a WTD  and I an itemset. The global penalty of I in D is:  P(I,D) = ?  (tid,J,w)?D,I ??J w =  ?  (tid,J,w)?D\C(I,D) w  with P(I,D) = 0 when D\C(I,D) = ?.

EXAMPLE 1. Consider the example of a library. Each transaction represents the books bought by a customer.

The goal is to extract frequent sold itemsets, i.e., subsets of books, with a preference for purchases achieved by younger buyers. We associate a penalty with each transac- tion corresponding to the importance given to the age of the buyer. Table I resumes a set of transactions where we associate a penalty value to each age interval (e.g. 5 to age < 18 and 4 to 18 ? age < 25). In this database, we have S(ABC,D) = |{1, 3}| = 2 and P(ABC,D) = 12.

The closed frequent itemsets with the quorum equal to 2 are: A, D, G, AB, AC, AF , ABC and ACD.

In order to consider penalty values in itemset mining, we define the penalty frequent itemset mining problem (PFIM for short) by using a maximum penalty threshold ? with a minimum support threshold ?. This problem con- sists in computing the following set: PFIM(D, ?, ?) = {I ? I | I ? FIM(D, ?),P(I,D) ? ?}.

It is well-known that FIM problem satisfies the anti- monotonicity property. It is also satisfied by PFIM: PROPOSITION 3.1. [Anti-monotonicity] If I ? J and J ? PFIM(D, ?, ?) then I ? PFIM(D, ?, ?).

We denote PCFIM(D, ?, ?) the subset of all closed itemsets in PFIM(D, ?, ?).

We define a preference relation ? over the itemsets in a WTD D as follows: I ? J (J is at least as preferred as I) iff P(I,D) ? P(J,D). I ? J when both I ? J and J ? I hold. Therefore ? is a total preorder over I.

DEFINITION 3. (TOP FREQUENT ITEMSET) A top fre- quent itemset in D is an element of FIM(D, ?) that is maximal w.r.t. ?, i.e., for all J ? FIM(D, ?), J ? I .

An Apriori-like algorithm can be easily defined for PFIM problem. It proceeds by a level-wise search of the elements of PFIM(D, ?, ?). Namely, it first computes the elements of PFIM(D, ?, ?) of size one.

Then, assuming the elements of PFIM(D, ?, ?) of size n known, it computes a set of candidate patterns of size n+1 so that I is a candidate if and only if all its subsets are in PFIM(D, ?, ?). This procedure is iterated until no more candidate pattern is found.

A. Encoding PCFIM into Boolean SAT Problem: We consider the conjunctive normal form (CNF) repre- sentation for the propositional formulas. A CNF formula ? is a conjunction (?) of clauses, where a clause is a     disjunction (?) of literals. A literal is a positive (p) or negated (?p) propositional variable. We denote V ar(?) the set of propositional variables occurring in ?.

A Boolean interpretation B of a formula ? is a function which associates a value B(p) ? {0, 1} to the variables p ? V ar(?). It is extended to the CNF formulae as usual. A model of a formula ? is a Boolean interpretation B such that B(?) = 1. We note M(?) the set of models of ?. SAT problem consists in deciding if a given formula admits a model or not.

Let D = {(tid0, J0, w0), . . . , (tidn?1, Jn?1, wn?1)} be a WTD, ? a minimum support threshold and ? a maxi- mum penalty threshold. We now describe our encoding of PCFIM(D, ?, ?) into SAT. To this end, for each item a (resp. weighted transaction t), we introduce a propositional variable pa (resp. qt). The variables pa, for a ? I, allow us to encode the candidate itemset I , i.e., pa = true iff a ? I , and the variables qt allow us to encode the transactions covering the candidate itemset, i.e., qt = true with t = (tid, J, w) iff I ? J .

We first introduce a constraint in order not to consider the empty itemsets: ?  a?I pa (3.1)  The second constraint allows to capture all the weighted transactions in which the candidate itemset appears:  n?1?  i=0  (?qti ? ?  a?I\Ji pa)  with ti = (tidi, Ji, wi)  (3.2)  By the following constraint, we force the candidate itemset to be closed:  ?  a?I (  n?1?  i=0  qti ? a ? Ji)? pa with ti = (tidi, Ji, wi) (3.3)  We introduce a constraint allowing to consider only the itemsets having a support greater than or equal to ?:  ?  ti?D qti ? ? (3.4)  The following constraint allows to consider the itemsets having penalty values smaller than or equal to ?:  ?  ti?D wi ? ?qti ? ? (3.5)  We define the SAT-based encoding of PCFIM as the CNF formula ??,?D obtained from the constraints (3.1) to (3.5). The models of ??,?D correspond to itemsets I ? PCFIM(D, ?, ?). The SAT encoding of PFIM, can be obtained from ??,?D by removing (3.3).

B. Computing Top Penalty Closed Frequent Itemsets: In this section, we describe our encoding of the prob-  lem of computing the set of top penalty closed frequent itemsets (Top-PCFIM for short) into MinCostSAT [2].

In MinCostSAT, we search for models with minimal cost, where the cost of a model is defined as the sum of the costs of the variables assigned to true.

DEFINITION 4. (MinCostSAT) Let ? be a CNF formula and f a cost function that associates a non-negative cost to each variable in V ar(?). Given (?, f), MinCostSAT is the problem of finding a model B for ? that minimizes the objective function: F(B) = ?x?V ar(?) f(x)? B(x).

Computing the top penalty closed frequent itemsets in a WTD D corresponds to the following MinCostSAT problem Pmcs: Minimize F(B), subject to B ? M(?), where ? is (3.1) ? (3.2) ? (3.3) ? (3.4), and f is defined as follows: (i) for all a ? I, f(pa) = 0; and (ii) for all t = (tid, I, w) ? D, f(qt) = w.

The itemsets that correspond to the solutions of Pmcs are all the top penalty closed frequent itemsets w.r.t. ?.



IV. Penalties on Items and Transactions To associate penalties to items, a weighted transaction over I is defined as a triple (tid,WI , w) where tid is its transaction identifier, w is its associated penalty value and WI is a set of pairs ?a, f(a)? such that a is an item and f is a function associating to each item a non-negative integer representing its associated penalty value. We denote by I(WI) the set {a|?a, f(a)? ?WI}. In this section, we consider a weighted transaction database as a finite set of such weighted transactions. The notions of cover (C(I,D)) and support (S(I,D)) of an itemset I in a weighted transaction database D are defined in the same way as in Section II. Moreover, the penalty value associated to I is defined as a pair P(I,D) = ?Pt(I,D), Pi(I,D)? where  Pt(I,D) = ?  (tid,WI ,w)?D\C(I(WI),D) w,  Pi(I,D) = ?  a/?I f(a).

In this context, the penalty notion allows us to define two preference relations on itemsets. The first relation, denoted ?t, is defined by using the penalty values associ- ated to the transactions (Pt(I,D)) in the same way as ? (Section III). The second relation, denoted ?i, is defined as follows: I ?i J if and only if Pi(I,D) ? Pi(J,D).

Let D be a transaction database over I with penalty values on items and transactions, ? a minimum sup- port threshold, ? a maximum penalty threshold on transactions and ?? a maximum penalty threshold on items. The problem Bi-PFIM (Bi for Bi-objective)     is defined as computing the following set of itemsets: Bi ? PFIM(D, ?, ?, ??) = {I ? I | S(I,D) ? ?, Pt(I,D) ? ?, Pi(I,D) ? ??}.

By adding penalty values on items, the anti- monotonicity property does not hold. Indeed, if I ? J , Pi(I,D) can be greater than Pi(J,D) and consequently than ??. To maintain the anti-monotoniicity property, we need to extend the property with an additional condition on the penalty value of the itemset (Pi(I,D)).

PROPOSITION 4.1. If I ? J , J ? Bi ? PFIM(D, ?, ?, ??) and Pi(I,D) ? ??, then I ? Bi? PFIM(D, ?, ?, ??).

DEFINITION 5. (PARETO OPTIMUM) A Pareto optimum penalty frequent itemset in D with penally values on transactions and items, is an element I of FIM(D, ?) where, for all J ? FIM(D, ?), if I ?i J (resp. I ?t J) then J ?t I (resp. J ?i I).

Mining Pareto optimum penalty frequent itemsets is related to the skypattern w.r.t. the relations ?i and ?t [4].

For instance consider the weighted transaction database in Table II. The closed frequent itemsets with the  tid itemset Penalty  1 (A, 2), (B, 2), (C, 1), (D, 1) 2 2 (A, 2), (B, 2), (E, 0), (F, 0) 1 3 (A, 2), (B, 2), (C, 1) 2 4 (A, 2), (C, 1), (D, 1), (F, 0) 3 5 (G, 0) 1 6 (D, 1) 5 7 (D, 1), (G, 0) 2  Table II TRANSACTION DATABASE D WITH WEIGHTED ITEMS.

minimal support threshold equal to 2 are: A, D, G, AB, AC, AF , ABC and ACD. The Pareto optimum penalty closed frequent itemsets are: D, A, AC and ACD.

A. Encoding Bi?PCFIM as a Bi-objective Cost SAT Problem: We describe two encodings of the problem of computing the set of Pareto optimum penalty closed frequent itemsets. We first introduce a formulation while considering two maximum penalty thresholds ? (on trans- actions) and ?? (on items). Then we introduce a bi- objective cost satisfiability formulation, allowing us to overcome the use of these two threshold parameters.

A SAT-based encoding of Bi?PCFIM(D, ?, ?, ??) into a formula ? is obtained by adding to the formula (3.1)?(3.2)?(3.3)?(3.4)?(3.5) the following constraint:  ?  a?I f(a)? ?pa ? ?? (4.6)  The models of ? correspond to itemsets  I ? Bi ? PCFIM(D, ?, ?, ??). Let us note that Bi ? PCFIM(D, ?, ?, ??) is a generalization of PCFIM(D, ?, ?) if we fix the maximum penalty threshold on items to ?? =  ? a?I f(a).

To avoid the use of the two penalty threshold param- eters ? and ??, we introduce an encoding of the problem of computing the set of Pareto optimal penalty closed frequent itemsets as a bi-objective cost SAT problem.

DEFINITION 6. (BI-OBJECTIVE COSTSAT) Let ? be a CNF formula, R = {P,Q} a partition of V ar(?), f (resp. g) a cost function that associates a non-negative cost to each variable in P (resp. Q). Given (?, R, f, g), Bi-objective CostSAT is the problem of finding a model B of ? that minimizes the following two objective functions:  (i) F(B) = ?  x?P f(x)?B(x), (ii) G(B) =  ?  x?Q g(x)?B(x)  Computing the pareto optimal closed frequent itemsets in a transaction database D with penalty values on transac- tions and items corresponds to the following Bi-objective CostSAT problem PBi?cs: minimize [F(B),G(B)], subject to B ? M(?), where ? is the CNF formula corre- sponding to the constraints (3.1), (3.2), (3.3) and (3.4), P = {pa|a ? I}, Q = {qt|t = (tid,WI , w) ? D}, f and g are defined as follows: for all a ? I, f(pa) = wa; and for all t = (tid,WI , w) ? D, g(qt) = w.



V. Experiments We perform three kinds of experiments. First, we con- sider the problem PCFIM(D, ?, ?, ??) where ?? =?  a?I f(a), i.e., penalty values are associated to trans- actions only. Secondly, we set ? to  ? (tid,I,w)?D w, i.e.,  penalty values are associated to items. Finally, we consider Bi ? PCFIM(D, ?, ?, ??), where penalty values are as- sociated to both transactions and items. Then, we compute the Pareto optimum closed frequent itemsets.

For our experiments, we implemented the enumeration algorithm on the top of the state-of-the-art SAT solver MiniSAT 2.2 1. A penalty value of the current partial interpretation is maintained. When this value exceeds the penalty threshold, we backtrack chronologically. Each time a model is found, we add a no-good restricted to the variables of the corresponding pattern. We considered a variety of datasets taken from the FIMI repository 2 and CP4IM 3. For each instance, and for both transactions and items, we associate a penalty value between 1 and 10.

All the experiments were done on Intel Xeon quad-core machines with 32GB of RAM running at 2.66 Ghz. For each instance, we used a timeout of 1 hour of CPU time.

1MiniSAT: http://minisat.se/ 2FIMI: http://fimi.ua.ac.be/data/ 3CP4IM: http://dtai.cs.kuleuven.be/CP4IM/datasets/     0e+00  1e+05  2e+05  3e+05  4e+05  5e+05  6e+05  7e+05  8e+05  0  10  20  30  40  50  60  70  80  90  100  #P at  te rn  s  % Penalty  chess australian-credit  german-credit mushroom          0  10  20  30  40  50  60  70  80  90  100  tim e  (s ec  on ds  )  % Penality  chess australian-credit  german-credit mushroom  0e+00  5e+04  1e+05  2e+05  2e+05  2e+05  0  10  20  30  40  50  60  70  80  90  100  #P at  te rn  s  % Penalty  chess australian-credit  german-credit mushroom  a. # patterns: Penalties on transactions b. Time: Penalties on items c. # patterns: Penalties on items Figure 1. Results Highlights  As all the instances present a similar behavior, we present those obtained on a representative sample of instances.

In Figure 1.a, we show the results obtained on PCFIM(D, ?, ?, ??) where ?? = ?a?I f(a). The x- axis represents the penalty percentage (% Penalty), i.e., x% of  ? (tid,I,w)?D w. % Penalty is varied from 0 to  100% by step of 5%. The y-axis represents the number of models (patterns). On all considered instances, we observe the same behavior. The curves present an exponential behavior. As we can see, a slight variation of the penalty threshold leads to blowup in terms of the number of patterns. On mushroom instance, the number of patterns increases from 8925 to 221525 by varying %Penalty from 95% to 100%. Clearly, the penalty threshold seems to be critical. The Figure 1.b shows that the set of patterns can be computed in a reasonable amount of CPU time (in seconds). For example on the australian? credit, 743226 patterns are generated in 404 seconds.

The results of our second experiments are highlighted in Figure 1.c. Considering penalties on items instead on transactions, we observe a similar behavior.

Finally, in Table III we report the number of Pareto optimal penalty closed frequent itemsets for a sample of dataset. For the first three cases, the frequency threshold ? is set to one. For the three last data, we do not obtain a complete set of penalty closed frequent itemsets under the time limit of 1 hour. For this reason, we set the frequency threshold to higher values. To obtain such Pareto optimal patterns, we used a naive approach. In a first step, we compute all the patterns (PCFIM), then we generate the Pareto optimal patterns (PO-PCFIM) using a domination test. In Table III, we give the total number of PCFIM (#PCFIM), the number of Pareto optimal ones (#PO- PCFIM), and the CPU time (time) in seconds needed to compute the PO-PCFIM from the PCFIM ones. We note that the number of Pareto patterns is of manageable size.



VI. Conclusion The contribution of this paper is twofold. Firstly, we pro- pose a framework for dealing with preferences in itemset  instance ? #PCFIM #PO-PCFIM time (s) soybean 1 31760 39 3.5 mushroom 1 221525 59 233.27 primary-tumor 1 87231 60 5.38 tic-tac-toe 1 42712 40 9.5 zoo 1 1 4568 57 0.1 australian-credit 200 230358 35 65.25 german-credit 200 196598 43 84.21 chess 2000 68968 37 43.93  Table III # PARETO OPTIMAL PENALTY CLOSED FREQUENT ITEMSETS  mining. Preferences are first represented using a penalty function over the transactions. Then, we extend this frame- work with a penalty function over the items. Secondly, we provide SAT-based encodings for the proposed itemset mining problems with preferences.

