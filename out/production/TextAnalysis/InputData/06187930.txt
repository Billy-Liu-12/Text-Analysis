Mining Accurate Top-K Frequent Closed Itemset  from Data Streams

Abstract?Frequent Closed Itemset mining on data streams is of great significance. Though a minimum support threshold is assumed to be available in classical mining, it is hard to determine it in data streams. Hence, it is more reasonable to ask users to set a bound on the result size. Therefore, a real-time single-pass algorithm, called Top-k frequent closed itemsets and a new way of updating the minimum support were proposed for mining top-K closed itemsets from data streams efficiently. A novel algorithm, called Can(T), is developed for mining the essential candidate of closed itemsets generated so far.

Experimental results show that the proposed the algorithm in this paper is an efficient method for mining top-K frequent itemsets from data streams.

Keywords- data streams; closed frequent itemsets; top-K

I. INTRODUCTION In data streams large quantities of data and potential  unlimited data are generated by dynamic environment.

Different from the traditional data sets, data streams is fast changing with the time, massive and potentially infinite. Due to these characteristics, therefore researchers are concerned on the analysis when data stream changes; especially they are interest in the relative high-level trends and deviations and so on. In short, the data mining in data stream is a rapidly evolving field, so the mining in data stream in a dynamic environment will allow people to quickly get accurate and useful information.

The traditional data mining is on the relative static database.

Since the introduction of association rules which Agrawal has presented, the study of frequent itemsets has been greatly researched. In 1993 Agrawal has proposed the algorithm Apriori, The most important part of mining association rules is how to mine frequent itemsets. Then closed frequent itemsets which are the compact form frequent itemsets have also been greatly studied. Pasquier[1] proposed the concept of closed frequent itemsets, which are also called closed frequent patterns.

After the association rules and the closed frequent itemset have been proposed, a lot of researchers studied frequent itemset. Literature [1] designed a frequent closed itemsets mining algorithm, which is denoted as A-Close; Pei proposed a recursive algorithm CLOSET [2] and constructed the conditional FP-Tree; Zaki put forward the algorithm CHARM [3] which has the best performance of existing algorithms. In  addition, the DCI_Closed [4], BIDE [5] and so many classical algorithm on mining closed frequent itemset.

Data streams mining FCI can save plenty time and space.

Manknu proposed an algorithm Lossy counting [6] on the current transaction of the entire data streams which can mine approximate frequent itemset. Giannella, Jiawei Han and so on proposed an algorithm FP-stream [7] which is to mine approximate frequent itemsets at any time intervals. Huafu Li gave the Dsm-MFI [8] algorithm, which is used to maximal frequent itemsets in recently time by SFI-forest data structure to store a summary of the current data model. Relative to the limited memory space, the mining of closed frequent itemsets is better met the needs of users and also satisfied the reality.

The algorithm Moment [9] used the data structure CET to store all the information of all itemsets in the data stream.

According to the changes in sliding window Moment updates the four different itemsets in real time of the data structure CET, but the shortage of it is that the items? historical information is not saved in the structure. The algorithm A- moment [10] which is an improved algorithm of the Moment, but it still used the CET structure and it take an approximate technique to improve the efficiency of data mining algorithms.

Literature [11] is the first time to give the mining algorithms of Top-k in which Tops-Tree data structure is used to mine itemsets.  Literature [12] used the way of closed itemset lattice to mine Top-k frequent closed itemsets. Due to the user in the data stream can not be accurately set the minimum support threshold, the algorithms has been proposed. The experiment results also show that the algorithm TKC-DS is better than other algorithms at present.



II. PROBLEM DEFINITION Definition 1: A transaction data stream TDS={T1, T2 ,  T3 , ?, TN }, is an unbounded sequence of transactions, where N is TID of latest incoming transaction TN .

Definition 2: SW= [TN-w+1 , TN-w+2 , ?, TN ] is called as a transaction-sensitive sliding window that slides forward for every incoming transaction, where N is TID of latest incoming transaction and w is the size of SW.

Definition 3: The support X, denoted as sup(X), is the number of transactions of SW containing X as a subset.

Definition 4: An itemset X is called a frequent closed itemset (FCI) [1], the itemset is frequent first, and if there exists   DOI 10.1109/ICCSEE.2012.263     no itemset X0 such that X0 is a proper superset of X and every transaction containing X also contains X0.

Definition 5: A closed itemset X is called a top-K closed itemset [12] if there are no more than (K-1) closed itemsets whose support is higher than that of X.

The closed itemset lattice which was used to storage the itemset in current window.

The following table describes the five transactions in the sliding window. The structure of lattice will be introduced in the following passage. In this section, the proposed data structure we used the closed itemset lattice (CIL) which has already proposed in algorithm TKC-DS. And it was defined and the constructing process of the CIL is introduced as follows.

TABLE I.  AN EXPAMPLE DATA STREAMS  TID Transaction  T1 cd  T2 ab  T3 abc  T4 abc  T5 bc A closed itemset lattice (CIL) is composed of four  substructures: a list of bit-vectors of items (BV-list), a set of closed itemset tree (CI-tree), a list of supports of closed itemsets (S-list), and a hash table of closed itemsets (HTC).

In CI-tree(i), besides the root node, the other nodes are consisting of root node and its right sibling which do bitwise and operation. So we can obtain the child node of the current root node. In the BV-list the single itemset and each node in CI-tree (i) we will store it into an array, which is stored in the form of matrix. According to the numerical calculation of the matrix each row we can obtain the support count of itemset.

When any of the support count of node is zero in the CI-tree(i), the algorithm deletes it from the closed itemsets tree, and don?t carry out its siblings? operations. Because a superset of an itemset with the support is zero is certainly not frequent itemset.



III. MINING TOP-K FREQUENT CLOSED ITEMSETS FROM DATASTREAMS  A. The component of the Top-k FCI In this section, the components of the Top-K-FCI algorithm  will be introduced as follows:  1) The basic damped sliding window. The data in data streams is potentially infinite and it changes dynamically.

Therefore the data processing in data streams is continuous, so the algorithm used the mechanism of sliding window.

This paper is based on the sliding window, and divided sliding window into b basic windows BW. Also the algorithm gives them a damped factor ? for each window, the value of ? is (0, 1], if the value is 1 then the basic damped window is changed to the general basic sliding window. The basic  damped window (BW- ? ) can be described as follows. A window on the current window when the phase of extracting the patterns, the summary of the basic structure in a basic damped sliding window to other windows, namely the following description of the information in closed itemset lattice must be multiplied by the factor ? , the support counts of current patterns to the previous basic window is updated after the calculation of factor.

2) Support improved method. To set the weights for each item in the transaction database, this paper called it as the weighted support count. Given the itemset I = (i1,i2,?in), the corresponding weight of the each itemset is set to (w1,w2,?,wn). The weight of them are set by the user which expressed the importance of itemsets ij , 0?wj ?1 (j = (1,2,? n)).

After setting the weights of each itemset, record the support count about closed itemsets after the arrival in the basic damped sliding window. Then all the closed itemset in closed lattice structure are stored in a hash table with the key as support. Given the i-th window has n-closed itemsets, from 1 to n closed itemsets the support recorded as sup1 , sup2 , ?, supn , and then we can obtain the weighted count:  )1()sup(sup ? ? ?  ? ? ? ?  ? = ?  ji ji wX  So the minimum support count in i-th window is:  )2(/)sup()sup(  nji nj  j ? ? ?  ?  ? ? ?  ?  ? ? ?  ? ? ?  = ? =  =    And then the next coming window?s min-sup is:  )3(/)sup()1sup(min  iji nj  j ? ? ?  ?  ? ? ?  ?  ? ? ?  ? ? ?  =+ ? =  =    3) Generate the candidate itemset. This paper proposes a new method of candidate itemsets generation Can-(T), which greatly reduces the space and memory requirements, and the method of generating candidates has more accurate results, and also can avoid the problem of data bumps. Can-(T) algorithm is showed as follows.

Can-(T) Algorithm:  Input: A transaction;  Output: a set of candidate closed itemset;  Method  Begin:  There are already a CIL with SWi, the set subset (Td) is generated by the delete transaction Td;  for each node dj Tn ?  if (sup(nj)< minsup(i+1))  delete nj from Td;  The set Cad-FCI= subset (Td);     )(__ dd TBFCICadFCICad ??=  endif  endfor  end  B. The framework of the Top-k-FCI To mine the top-k closed frequent itemset in data stream,  the paper used the follow three steps to describe the algorithm Top-k-FCI.

(1) delete an old transaction  (2) add a new transaction Tn  (3) output the top-k closed frequent itemset.

Step (1) and (2) are similar to the algorithm TKC-DS, but we used the proposed way of updating the minimum support and the algorithm of giving the candidate itemsets to improve the accuracy about the results. Step (3) output the results of the user requested, because the set of FCI was stored in HTC which was always in memory, this step is the same to the algorithm in TKC-DS  1) Delete old transaction algorithm. When the sliding window removes an old transaction in Td, the first step is make the entire bit vector in the BV-list right shift one bit. The most left one is moved out, according to the basic size of the window that the length l of the transaction, then all the vectors in the bit vector list, the most right bit is set to 0 on. Assume the length of sliding window is 4. When the delete transaction T1 (cd), the entire bit vector should be left shift one bit. That is a: 0111 into 1110, b: 0111 into 1110, c: 1011 into 0110, d: 1000 into 0000. Also the CI-num (a) is 2, CCI-boundary (b) is 0; because itemsets a and b are not in the transaction T1 (cd), Therefore they are not be processed. CI-num (c) is 1, CCI- boundary (c) is 1, due to CI- num (c)?CCI-boundary (c), the algorithm have to update all children in the transaction and minus their support count. In the figure above there is no such node, therefore the items c and d can not be processed.

Del-Old-T Algorithm:  Input: A generated CIL of the current window;  Output: a new CIL after the delete of the transaction Td;  Method  Begin:  All the bit-vector of the BV-list are left shifted by one bit ,and fill them with the value 0;  For each item Xi of Td do  if(CI-num(Xi)?CCI-boundary (Xi)then  for each nj Td  sup(nj)= Sup(nj)-1;  if(Sup(nj)=0)  delete the node nj from CI-tree(Xi);  delete the nj from HTC?  elseif(Sup(nj)?minsup(SWi+1))  update the key of the node nj in HTC;  endif  endfor  else generate all the candidate FCI of the transaction Td by the algorithm Gen-FCI;  for each FCI Y in the set of Cad-FCI or the subset of the transaction Td  if Y with the prefix of Xi  sup(Y)= sup(Y)-1;  if(sup(Y)=0 or sup(Y)<minsup(SWi+1))  delete Y from the CI-tree(Xi);  delete Y from the HTC;  elseif(sup(Y)?minsup(SWi+1))  update the key of Y in HTC;  endif  endif  endfor  end  2) Add new transaction algorithm. With the arrival of a data stream, add a transaction on the Top-k-FCI basic damped BW- ? sliding window. The closed frequent itemset in the HTC should be updated with the changing of the lattice CIL along adding a new transaction. The previous itemsets which are non-frequent itemsets may become frequent closed itemsets; and the frequent itemsets FCIs in the HTC, the support of them will increase too. The key values will change and then modify the closed itemsets tree. The algorithm is as follows:  Add-New-T Algorithm:  Input: A generated CIL of the current window;  Output: a new CIL after add the new transaction Tn;  Method  Begin:  Cad(add) =subset(T n)?Bd-(Tn)  for each item Xi in Tn  for each itemset Y in Cad-(add)  if Y with the prefix of Xi  if(HTC-check(Y)=false&& sup(Xi)?minsup(i))  insert Y into CI-tree(Xi);  insert Y to the table HTC;     update the Y?s Bit-vector;  CI-num(Xi)= CI-num(Xi)+1;  update the subset of the new FCI Y;  else  sup(Y)= sup(Y)+1;  update the bit-vector of Y;  update the key of Y in HTC;  update the subset of the new FCI Y;  end if  endfor  endfor  end  In the algorithm about the Del-Old-T algorithm and the Add-New-T algorithm we only insert our new way of updating support count and the candidate itemset in the algorithm which has already existed.

3) The output (HTC) algorithm. The output of top-k frequent closed itemsets is the last step of Top-k-FCI algorithm, according to a given value of K. HTC recorded all the closed itemsets FCI, and the key value is the support count which stored in ascends order. Therefore the algorithm only has to check the number of FCI in the output set. So the algorithm output (HTC) is same to the algorithm which has already existed in TKC-DS.



IV. EXPERIMENTS The simulation of the experimental data generated by the  program that randomly generated user access transaction streams. This is used to evaluate the performance of the proposed algorithm. Experimental environment is Windows XP and Microsoft Visual C++ 6.0.

With the increase number of the windows in the data set, Top-k-FCI algorithm maintains the structure of CIL will consume the longer processing time. Updating the CIL structure will also need great memory space when delete and insert a transaction.

The figure 1 shows the accuracy of mining results with the proposed algorithm Top-k-FCI. We give the results of Top-k- FCI algorithm and the TKC-DS algorithm?s performance. We can find that in the same size window, the proposed Top-k-FCI algorithm generate more itemset, to some extent it showed that the itemset we output has the lager support count than the TKC-DS.

Figure 1.  The number fo FCI in the data stream

V. CONCLUSIONS In this paper, top-K frequent closed itemsets of data  streams algorithm is proposed. An effective algorithm about candidate itemset is developed, and the way of updating the minimum support itself has also avoided the random which should given before. Experiments show that the proposed algorithm is an efficient approach for finding top-K frequent closed itemsets from a basic damped data stream sliding window.

