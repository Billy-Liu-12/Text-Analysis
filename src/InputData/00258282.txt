A Rule-Based Analyzer with Temporal Reasoning For  Communication Protocols*

Abstract With data networks growing and serving less sophisti- cated users, there is a need for tools which facilitate or automate diagnosis of network failures. In this paper we describe a rule-based system for analyzing commu- nication rotocols. This system employs an architecture which d w s  the diagnostic knowledge for a particular protocol to be separate from the reasoning mechanism.

The protocol-specific knowledge is held in a structure we refer to as the Protocol Diagnostic Model, or PDM, and consists of a set of associations between patterns and actions. A diagnosis of a network failure can be made by recognizin certain symptoms from observed proto- col events. Tfese symptoms are detected by matching representations of the temporal relationships between observed events against the patterns in the PDM.

1 Introduction Well-implemented protocols allow quick transfer of data across computer networks. This requires the receiver and transmitter operate in coordinated fashion, follow- ing closely the same set of protocol specifications. When recurrent or intermittent failures occur and can not be isolated through any independent test of network com- ponents, the bit streams travelling over network links may be analyzed. This analysis involves tapping into a link with a protocol analyzer. To understand the out- put of the protocol analyzer and to  explain a failure the technician or engineer using the equipment must possess knowledge about how diagnoses can be inferred from the observable data.

The procedure described above works well for main- taining small networks and/or networks running well specified and well understood protocols. However, for networks operating over a geographically distributed area or running protocols which are not as well specified or understood, better tools are needed to control main- tenance costs. An example of a network fitting these two characteristics is the emerging Integrated Services Digital Network (ISDN). Ongoing trials have shown the hardware to  be highly reliable; the difficulties have been with failure, or unexpected operation, of the protocols 131. In this paper we describe a rule-based system us- ing a general purpose architecture for knowledge-based protocol diagnosis. Note that future references to the   *This work was sponsored by the United States Air Force, Air Force Systems Command, Rome Laboratory, G r i l k Air Force Base, NY 13441-5700 through the Uxuversity of Dayton, Research Institute, 300 College Park, Dayton, OH 45469-0001.

?architecture? mean the ?general purpose architecture for knowledge-based protocol diagnosis?. By ?general pur- pose? we mean a generic kernel operating on protocol- specific diagnostic knowled e.

Up to this time there %ave been two general a p proaches to  the problem of diagnosis [9].

Diagnosis from Arst principles. This involves a  model, usually represented by a lo ?c system (e.g.

first order logic, temporal lo ?c, etcrdescribing the components of a system. If &ervations of the sys- tem contradict its expected behavior based on the model, one or more components of the system are suspected of failin Examples of this type of a p proach are seen iny5, 91.

This involves capturing the knowledge of techni- cians experienced with the operation of a system or procedure of interest. The knowled e is coded into production rules which simulate t8e associa, tions made by the expert. Examples of this type of approach are the MYCIN [2] and Mud [7] systems.

There are other deepreasoning systems which are re- lated to the first approach. Sembugamoorthy and Chan- drasekaran [lo] describe a compiler which generates a diagnostic rule-based system from the functional repre- sentation of a device or system. For this architecture, we purposely choose not to  make any assumptions about the implementation of the protocols. Like De Jong [4], we would like to represent the deep knowled e, the pro- tocol specifications, along with the shallow Pknowledge, the heuristic associations. However, instead of repre- senting this knowledge as rules, our method represents the protocol specifications and heuristic knowledge as a set of data elements. These data elements comprise the Protocol Diagnostic Model.

Diagnosis based on heuristic knowledge.

2 System Overview This system would operate as an adjunct to a single  node in a network, meaning the dia nostic reasoning is centralized to that node. Such a fesign could have several centralized diagnostic agents each serving a por- tion of the network. A node being served by a diagnos- tic agent, upon observiikg some error, should deliver a protocol report to the agent. It is then the diagnosing agent?s responsibility to collect reports from the other nodes i t  serves. Note that the architecture we are out- lining in this paper is for a centralized diagnosing agent, and it is assumed that a single diagnosing agent has ac- cess to the protocol reports of any node it needs.

The three major aspects of this architecture are:  20.2.1.

CH2981-919110000-0396 $1 .OO 0 1991 IEEE MILCOM ?91    Working Memory  Inference Engine (Flow of Reasoning) Knowledge Base  Fact Sets  Failure  Diagnostic  (3) (2) (B)  Stage  Rule Sets  Control for Stage 1  Control for Stage 2  Diagnosis Rules  Diagnosis  Figure 1: High Level Architecture  1 .  the processing of the observed data (protocol re- ports) which involves deriving a set of possible fail- ure scenarios consistent with the observations;  2. the representation of the protocol-specific diagnos- tic information which we will refer to as the Pro- tocol Diagnostic Model (PDM); and  3. the reasoning mechanism which involves matching each derived scenario against the PDM to generate symptoms, and the use of symptoms to support particular diagnoses.

Figure 1 shows a high-level view of the architecture.

An agent running under this architecture would begin an analysis with four modules: fact set (3) and rule sets A) (B , and (C). Protocol records would be col- lecte6, tiandated into event facts, and loaded into work- ing memory by a separate local process. This gives fact set (1). In the first stage of reasoning the failure scenar- ios are derived from the event facts producing fact set (2).  In the second stage the symptoms are generated for each failure scenario producing fact set (4 In the third  Protocol-specific knowledge is in the PDM and in the diagnosis rules. Rule sets (A and (B) and the inference  A protocol running on a node executes a sequence of events. These events can be described in terms of the manipulation of a few basic objects. The common fea- tures of protocols upon which this architecture is based are message, primitive, timer and state. The names for these objects are based on the Specification and De- scription Language (SDL) used in CCITT standards documents [6].

Message Messages hold the information which is passed between peer protocols a t  communicating nodes.

Pr imit ive Primitives represent the exchange of infor- mation with local processes which are controlling and/or monitoring a protocol.

stage the diagnoses are generated from t h. e symptoms.

engine are protocol-indepen d ent.

T i m e r  Timers control the timing constraints under which a protocol operates.

State At any point in time a protocol is in a ?state?. As the protocol runs, i t  advances through a sequence of states acting as a finite state automaton.

Each of the four objects defined above has failure modes. The goal of our diagnosis is to explain a recog- nized fault in terms of the failure modes, placing blame on the node which originated the failure. A vital con- sideration is how the failure conditions are recognized.

It can not be assumed that a protocol would be able to flag its own error. More likely, the failure would pro- duce noticeable side effects at the originating node or at other nodes in the network. Diagnosis is triggered by a recognizable fault indicator which is in all likelihood a side effect of previous protocol failure(s). Fault in- dicators include time-outs, reception of an unexpected message, or reception of an unrecognizable message.

3 Representation of Protocol Records  In this architecture we consider a protocol report to consist of a list of records; each record describes an event which occurred while a protocol was running. Al- though this architecture does not depend upon a partic- ular format for the records, we will discuss how records could be organized. A record may consist of named slots with the number of slots dependent upon the type of event being described. As part of the internal representation, events are categorized into nine types: receive-message, transmit-message, primitive-accepted, primitive-sent, state-transition, start-timer, stoptimer, time-out, and procedure-call. These nine types cover the operations on the four protocol objects: message, timer, primitive, and state.

Each record should include a time stamp, normally in the last slot of a record, indicating the time of execution  20.2.2.

and F,"" = 0 otherwise. Then (for X > 0) levels at exactly the same levels at which they cause in- terference to  transmissions. The justification of these as- sumptions is strongly dependent on specifics of the physi- cal implementation of the waveform employed and receiver characteristics. Relaxation of these assumptions and sensi- tivity analyses are left as an area for future research. Pro- nioe [5] has -,,,,ided a more characterization of  (3)  interference procese.

we assume that the ambient noise is stationary, and define  ax P(FF" = 1lX) = 1 - ( 1  - 5) .

we now characterize the  the&&pects in his work. = Probability of symbol error due to background noise.

a statistically independent fashion.

We assume that a time-stationary jammer is present,  and jams J of the q frequency bins. The jammer reaelects which bins are jammed fast enough to  prevent the user network from being able to  avoid them, but slow enough to  make partial symbol overlaps negligible. For example, we may assume that the jammer selects a new jam band each slot. We define  e,, = Probability of symbol error due to  jamming.

Since we assume that the jammer is stationary in the sense that J is constant, we have = J / q .

We also define  dure We now proceed to  derive the backlog estimation algorithm that uses the assumed feedback and an a priori estimate of the interference level. We denote  PI = a priori estimate of PI.

As was indicated earlier, the system is assumed to o p erate in a slotted fashion. AN packets consist of L symbols, so that each slot comprises L symbol intervals. Monitoring takes place whenever the user either has no packet pending or is deferring transmission in accordance with the ALOHA protocol. Every user updates his backlog estimate once per slot. Since the svstem oDeration is stochasticallv stationarv  h  during a given slot, the feedback samples (monitored at a PI = Probability of symbol error due to  external interference, symbol level) ,-an be accumulated over each slot (a  "suf-  ficient statis&'). We denote If" as the total number of symbol interval/fiquency bin samples that have usom* thing" detected in them in a given slot, so that  where "external interference" is either background noise or jamming. We have that  (4) L H" = y F t .  and  U -.

c=1 Denote K l  = 1 as the event that the fh symbol trans-  note the event that the fh symbol interval/frequency bin  mitted by a user is corrupted by either ambient noise or jamming, and K i  = 0 otherwise. Similarly, let Ff = 1 de- E(H"O"1X) = LP(Ff = 1lX) = L [ 1 -  (1 - : ) a x ( l  -PI ) ] ,  I^\  monitored by an idle user detects either ambient noise or y where the latter equality holds because the Ft are identi- cally distributed for each I (in the same slot). jamming, and Ff = 0 otherwise. We have that  P(Kf  = 1) = P(Ff = 1) = P I .  (5)  The effects of either multiple access or external inter- ference are combined as follows. Let Kc = 1 denote the event that the fh symbol transmitted by a user was un- successful, and Kc = 0 otherwise. Then  P(Kt = 1lX) = 1 - [l - P(KyalX)] [ l  - P ( K f ( X ) ] = 1 - (1 - : )a (x - l ) ( l  - P I ) .  (6)  Similarly, let Ft = 1 denote the event that the fth symbol interval/frequency bin monitored yielded "something," and Fc = 0 if it yielded "nothing." Then  We begin the backlog update procedure derivation by first estimating the number of users that must have trans- mitted given that Hmon hits out of L were detected. We form our heuristic estimate of X by first equating the given empirical statistic H" with the expected value as indi- cated by equatizn (9) above, with PI replaced by the a priori estimate PI:  (10) Q  H" = L[1- ( 1  - - )ax ( l  -E)].

The estimate for X is then obtained by solving this equa- tion for X in terms of the given feedback H", obtaining  . ( 1 1 ) ..

X =  In ( 1  - H""/L) -In (1 - A)  In(1- f ) P(Fc = 1lX) = 1 - [ l  - P ( F . O I X ) ] [ l  - P(FfIX)]  Next, we estimate the number of succe8ses out of the  2 that transmitted. If one of the transmitted symbols is selected a t  random, its chance of failing is estimated as  1 X = l - ( l - i )  ( l - P 1 ) .  (7)  The assumptions implicit in the above formulas are that the monitor detects multiaccess, noise and jamming  20.2.3.

A  The mean number of erasures in one of the X transmit- ted packets is taken to  be a binomial lc i t r ibuted ran- dom variable with parameters L and PKs1 ,X.  We assume that an extended Reed-Solomon code with k information symbols is used, and that perfect side information is avail- able. Therefore, the probability that a packet succeeds is the probability that the number of erasures is no more than L - k .  We also approximate the success probabilities of dif- ferent packets in the same slot (conditioned on X) as being kdependent. Therefore, the expected number of successes, S, is  s?  = S(2 )  = 2 P ( Y  < L - k ) ,  (13) where Y is binomially distributed with parameters L and PK=l,x.  If L is large, Y can be approximated as a Gaussian r.v., so that  - s??@(F), (14)  wherc: e(.) is the standard Gaussian cumulative prob- ability distribution function, p = LPK=I,x, and U =  P K = I , x ( ~  - PK=I,x). (Since precision is not needed in the update algorithm, a simple approximation may be used for e(.) in implementing the backlog estimation pro- cedure.)  is updated by a d e g the expected number of new packets to transmit (N - B)A and subtracting the estimated number of successes:  h  h A  Finally, the backlog estimate  B?;;; = [g+(N - 6 ) A  - gIt, where [.It denotes max(., 0).

Some minor comments for implementation of this esti- mation algorithm follow. First, if X = 0 then we would still expect to detect energy due only to the interference, caus- ing a mean number of detections E(H?lX = 0) = LPr.

We should theEfore first test whether khe feedbackAHmo? is less than LPI,  and if so, estimate X = 0 and S = 0.

Also, thFe  is small range of values of H? that can result in 0 < X < 1, and this can cause problems when 2 - 1 ?:us+ as an exponent. In this case, we should estimate X = S = 1. Finally, for large values of H? it is possible to obtaiz overly large estimates for X; we should always ensure X 5 N. In particular, the unlikely case H??? = L will cause numerical problems (viz., ln(0)) if not tested for.

The above procedure specifies the backlog update pro- cedure for users while they are idle. However, the back- log estimate must also be updated when either the user is transmitting a packet or receiving a packet. In our stud- ies, we have made the common assumption that feedback regarding the success of a transmitted packet is obtained immediately at the end of the transmission. Also, we have assumed that there is no conflict due to multiple transmit- ters simultaneously sending data to the same receiver or due to  half-duplex operation. In essence, we have assumed that receiver resources do not present a significant bottle- neck. It is intuitive that the action taken by a user that receives a packet should be similar to the action taken by a  user that just transmitted a packet (and obtained immedi- ate feedback as to  its success). The simple backlog update policy that we have incorporated into our simulation is:  1. If the packet was successful, then it is likely that all X packets were spxssful._The value of X ispt imated to  be B times B + (N - B)A, where B = @ ( B )  is com- puted so as to  cause X = G if t_here are sufficiently many users with packets (i.e., B is large enough), where G is the desired number of transmissions per SE ThEefore, the-backlog estimate is updated as Bt+1 = [Br + ( N  - &)A - GIt.

2. If the packet was unsuccessful, then i t  is likely that all X packets were unsuccessful. Following SimilarJgic h as above, tk backlog estimate is updated as Bt+l = Bt +(N - &)A.

This concludes the derivation of the backlog estimate  algorithm. The above backlog estimate algorithm can now be coupled with the dynamic control algorithm that was developed in earlier work [2].



IV. Numerical Results In this section we present performance results that were ob- tained from our simulation model. The backlog estimation algorithm derived in the previous section was modeled in the simulation, and utilized together with dynamic control procedures of (21. Fully distributed control is employed; since each user perceives the environment differently be- cause each user is using a different CDMA code, the users will typically have somewhat different backlog estimates.

We have fully validated the simulation model by com- paring its results under ?genie? or static control assump tions with those of a mathematical analytical model [2,3].

In addition, rigorous software engineering discipline was adhered to, with numerous validation tests performed with each increment in its development. In the interest of clar- ity and brevity, we do not present these comparison test results; the simulation essentially always agreed very well with the analytical model. In the following, we limit the simulation results to  the practicable scheme as described in the previous section; these are identified as ?real? results.

Some analytical results are provided for the ?genie? model and are identified accordingly.

We assume that the network consists of N = 250 users, q = 100 frequency bins are used, packets have a length of L = 64 symbols, and Delayed First Transmission (DFT) slotted ALOHA is employed.

Figure 1 presents a comparison of throughput perfor- mance for ?genie? and ?real? schemes. Steady state nor- malized information throughput s is plotted versus the ar- rival rate while in the thinking state per user. The normal- ized throughput s is the mean number of successful trans- missions per slot divided by the number of frequency bins q (100) and multiplied by the code rate k / L  ( L  = 64; recall k is the number of information symbols per R-S codeword).

The arrival rate q is the inverse of the mean time spent in the ?thinking? state by a user and equals q = A / ( l  - A).

Three dynamic control cases are considered, based upon  20.2.4.

AnM nt.*rMta h mwnp M. p u u u  AnM mto whlb In tmnking slaw pw uau  Figure 1: Steady state throughput a versus arrival rate 9, ?genie? and real cases.

Figure 3: Figure 3. Steady state mean backlog E ( B )  versus arrival rate 9, ?genie? and real cases.

f 0 4  _ _ o.bi 03 1? - -  1 AnM rUowhlk h h l rWq a? p u r r  Figure 2: Steady state mean number of transmission per slot E ( X )  versus arrival rate 9, ?genie? and real cases.

the simple control function given by equation (15): G = 50 and k = 19, G = 25 and k = 32, and G = 75 and k = 11.

We see that the periormance of the feasible (?real?) con- trol system is very close to  that of the ?genie? model over wide ranges of parameters. This is the first indicator that tells us that the advantages of dynamic control (stability and robustness) are truly obtainable. Also, since we can- not do better than the ?genie? model, this tells us that it is not worthwhile expending effort in enhancing the backlog update procedure with greater precision.

Figures 2 and 3 provide additional steady state per- formance characterization for the same cases as Figure 1.

Figure 2 illustrates the mean number of transmissions per slot (which should equal G when there is sufficient load on the network), while Figure 3 presents the mean back- log. Again, we see that ?real? and ?genie? models perform similarly.

Figure 4 illustrates steady state throughput perfor- mance in the presence of jamming. The G value is assumed to be fixed, as well as the number of information symbols per packet k. Three cases were run: k = 13 and G = 42.2 (optimal if J = 40), k = 17 and G = 43.3 (optimal if J = 20), and k = 22 and G = 42.1 (optimal if J = 0).

Each of these was run for ?genie? and ?real? cases, where as usual in the ?genie? case the backlog was known to all users. In the ?real? cases, t hehc ldog  upddate was based upon feedback and the use of PI, where PI was fixed at .4, .2 and 0 for the three cases respectively. Therefore, these results indicate the relative insensitivity to a priori knowledge of the interference level.

0.041   Numtm ol Junmocl B h  J  Figure 4: Throughput 8 versus number of jammed bins J for ?genie? and ?real? cases.

The remaining figures investigate the performance in the presence of a time-varying arrival rate. These illus- trate the transient behavior when sudden changes in sys- tem characteristicn occur, and also provide an indication as to the benefit of devising additional algorithms for tracking such time-varying coarse-grain parameters.

We incorporated a Markov-modulated arrival process into our simulation model. (This waa also included in the analytical model but time prevented us from exercising it.) A slowly time-varying two-state Markov chain alternated between states independently of the other system behavior.

The arrival rate of all users in the thinking state would take on one of two values according to  the value of the back- ground Markov chain. In the results presented below, we let the arrival rates for the two states be 9 = 1/9 (corre- sponding to A = .l) and 9 = 00 (corresponding to A = l), so that the arrival rates alternated between rather extreme values. These were intentionally selected so as to  exagger- ate the performance impacts.

The simulation model also was made to have a ?semi- genie? model selectable, in which the genie would tell the users when the arrival rate changed but nothing else. In the ?real? case there was no such genie, and a constant a priori estimate of the arrival rate  Figure 5 illustrates the performance obtained for the ?semi-genie? model. This shows the true backlog and the estimated backlog as a function of time, measured in slots.

The estimated backlog values were averaged over all users for each time slot. We see that the estimate is quite good, and both the true and estimated backlog react quickly to  was used.

20.2.5.

Figure 5: True and mean estimated backlog versus time,t) = $ alternating between 1/9 and 00 (?semi-genie?).

Figure 6: True and mean estimated backlog versus time, t) = .I36 ..

transients. The normalized information throughput for this run was s = .0558.

Figure 6 shows a similar plot but where no genie in- formation is provided. The a priori estimEte of the arrival rate is taken to  be the constant 6 = .163 (A = .14). We see that for this value of 6, the backlog is apparently over- and under-estimated roughly equally. The normalized through- put that resulted from this run was .0388, or about 70% of that achieved with the semi-genie model.

Figure 7 shows the true and es2mated backlog pro- cesses for the case when ? = 1.86 (A = .65). Although the backlog is poorly estimated during the intervals of low arrival rates, the resulting normalized throughput obtained was ,0415, which is somewhat better (about 74% of semi- genie) than that achieved for the case of Figure 6. We ran simulations for the entire spectrum of values for 6, and generally found little sensitivity to the value selected. We conclude that, for the case considered, some benefit may be possible by devising algorithms for tracking the gross arrival rate, but this benefit is not major. (Recall the ex- aggerated arrival rate extremes.) Given that a constant value is used, it is not especially sensitive the value se- lected. We emphasize that these conclusions may or may not be extendable for all parameter settings, and further analysis should be made for specific network designs.

?1  Figure 7: R u e  and mean estimated backlog versus time, ?= 1.86

V. Conclusions In this paper we have developed implementable dynamic transmission control procedures for single-hop slotted ALOHA networks using frequency-hopped spread spec- trum. These control procedures are based on backlog es- timates, and a backlog estimation algorithm that operates in the presence of multiuser interference, ambient noise, and jamming was derived. The backlog process is esti- mated by sensing activity on the receiver-based code while the user is not transmitting (half-duplex operation is as- sumed), 80 that minimal (if any) additional hardware is required. Performance was derived by simulation, and nu- merical examples show that the feasible system operates at nearly the same level of performance as the ?genie? model.

These results demonstrate that considerable robustness is achievable.



VI. References 1.

2.

3.

4.

5.

L. P. Clare and A. R. K. Sastry, ?The effects of slot- ting, burstiness, and jamming in frequency-hopped random access systems,? IEEE MILCOM?89 Conf Rec., Boston, MA, October 15-18, 1989, pp 154-160.

L. P. Clare, J. E. Baker, and A. R. K. Sastry, ?A performance comparison of control policies for slot- ted ALOHA frequency-hopped multiple access sys- tems,?? IEEE MILCOM?SO Conf Rec., Monterey, CA, September 30 - October 3, 1990, pp. 608-614.

L. P. Clare and J. E. Baker, ?The effects of jam- ming on control policies for frequency-hopped slotted ALOHA,? Proc. IEEE GLOBECOM?SO, San Diego, CA, December 2-5, 1990, pp. 1132-1138.

B. Hajek, ?Recursive retransmission control - A p plication to a frequency-hopped spread-spectrum sys- tem,? Proc. I$h Conf. Infor. Sciences and Systems, Princeton University, March 1982, pp. 116-120.

N. Pronios, ?On the stability of spread-spectrum networks, with decentralized recursive retransmission control, under jamming,? Proc. INFOCOM?SO, San Francisco, CA, June 5-7, 1990, pp. 588-594.

20.2.6.

