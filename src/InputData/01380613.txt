.-.

Abstract: Since many current IDSs are constructed by manual  encoding of expert knowledge, updating of IDSs are expensive and slow. It .is very dear that the frequent patterns mined from audit data can be nsed as reliable intrusion detection models. In this paper, we propose efficiently parallel methods to extract an extensive set of features that descrihe each network connection and learn frequent patterns that accurately caphue.the behavior of intrusions and normal activities, which areemploied to faditate model construction and incremental updates.

Keywords: Intrusion Detection; frequent patterns; Updating  1. Introduction  Securi& of network system is becoming increasingly important as more and more sensitive information is being  , .  stored and manipulated online. Intrusion- detection systems(IDSs) has thus become a critical technology to help protecting these systems. Most IDSs are based on hand-crafted signatures that are developed by manual encoding of expert knowledge. These systems match activity on the system being monitored to known signatures of attacks. The major problem with this zpproach is that these IDSs fail to generalize to detect new attacks or attacks without known signatures. Recently, there has been an increased interest in data mining-based approaches to building detection .models for IDSs. These models generalize from both known attacks and normal behavior in order to detect.unknown attacks.

Several effective data mining techniques for detecting intrusions have been developed. However, successful data miniig techniques are. themselves not enough to create deployable IDSs. There .are multiple "penetration points" for intrusions to take place in a network system. Therefore it is imperative ba t  IDSs be updated frequently and timely. While the accuracy is the  ' essential requirement of IDS, its extensibility and  adaptability are also critical in today's network computing environment. At first, data mining-based IDSs tend to be inefficient during both training and evaluation. This prevents them from being able to process audit data and detect intrusions in real time. Also, these systems require large amounts of training datas and are significantly more complex than traditional systems. Therefore, parallel algorithms are required and a viable solution.

2. Related Works  There is empirical evidence that program executions and user activities exhibit frequent correlations among system features. The goal of mining association rules is to derive correlations from a database table. Association rule mining has become one of the core data mining tasks and has attracted tremendous interest among researchers and practitioners. In recent years, several algorithms have been proposed in the literature to address the problem of mining association rules. One of the key algorithms, Apriori algorithm is the foundation of most known algorithms whether sequential or parallel. There are various methods to improve Apriori performance. Apriori-like algorithms iteratively obtain candidate itemsets of size @+I) from frequent itemsets of size k. Each iteration requires a scan of the original database. It is costly and inefficient to rep ted ly  scan the database and check a large set of candidate for their occurrence frequencies. Recently, an FP-tree based frequent pattems mining'" method developed by Han achieved high efficiency, compared with Apriori"] and TreeProjection'" algorithms. It avoids iterative candidate generations. This algorithm creates a relatively compact tree-structure that alleviates the multi-scan problem and improves the candidate itemset generation.

The algorithm requires only two full U0 scans for the dataset. In spite of the significance of the association rule mining and in particular the generation of frequent itemsets, few advances have been made on parallelizing association rule mining algorithms. Most of the work on parallelizing  0-7803-8403-2/04/$20.00 a004 IEEE i 80  mailto:wahh0912@163.com    timestamp duration service src-host dst-host 1.1 IO telnet A B 2.0 2 ftP C B 2.3 1 smtp B D  association. rules mining on Shared-memory Multi- Processor (SMP) architecture. was based on apriori-like algorithms. These methods not only require repeated scans of the dataset, they also generate extremely large numbers of candidate sets. These methods do reduce resource requirements, but do not adequately address real-time development of rules and data update.

3. The Parallel Algorithm  It is clear that certain features are essential in describing the data, while others provide only ?auxiliary information?. Consider the audit data of network connection shown in Table 1. The combination of the features timestamp, source and destination hosts, source port, and service uniquely identifies a connection record.

Thus, they can be the essential features. We argue that the ?relevant? association rules should describe patterns related to the essential features. We call these essential features axis features when they are used a form of item constraint.

src-bytes dst-hytes flag . ~ 100 2000 SF ...

200 300 SF ...

250 300 SF ...

We restrict the association rules to only output rules that include axis attribute values. In practice, we need not to designate all essential features as the.axis features. For example, some network analysis tasks require statistics ahout various network services while others may require the patterns related to the hosts. We can use service as the axis feature to compute the association rules that describe the patterns related to the services of the connections.

Another interesting characteristic of system audit data is that some essential features can be references of other features. These reference features normally cany information about some ?subject?, and other features describe the ?actions? that refer to the same ?subject?. For example, if ,we want to study the sequential patterns of connections to the same destination host, then dst-host is the ?subject? and service is the action. In this case, we can designate &-host as the reference feature.

3.4 1 IO I telnet I A I D  I 200 1 12000 1 SF 1 ...

3.7 I 1  I smtp I B I C  I 200 I 300 I SF I ...

5.2 1 1  I http I D ] A  I 200 I 0 I REI I ...

In order to construct the appropriate features to detect an intrusion, we need to select the right a i s  and reference features to generate the most distinguishing and useful intrusion panerns. Rather than looking for all possible association, we are looking for specific ones that contain axis and reference features. The problem then becomes how to efficiently identify the records that are relevant to our requirements and then idedfy association rules that target out current data requirements. We do not to consider data and rules that do not meet the current data requirements.

Another way is parallel method. Thus, we combine the above two methods and design a new structure to store all of the essential information of the transaction data that is compact. Moreover, the intermediate structure can be updatable easily when new data becomes available. New data would simple be scanned once and added to the structure by simple modification of the previous one.

The algorithms assume a shared-nothing architecture, where each of N processors has a private memory and a private disk. The processors are connected by communication network.

Algorithm 1 construction of chains for each processor This algorithm uses chain to store the essential  information of the transaction data that is compact. The construction of chains works as follows:  1. Scan the transaction database OB?, create a chain for each transaction Tin  DE  2. Sort chains by numerical order 3. Sort the list, merge identical chains and update  counts Algorithm 2 Parallel Mining Algorithm  This algorithm works as follows: 1. Merge all chains of each processor and get global  chains.

2. Decide which items will be used or whether to filter  for those that contain a i s  and reference features.

3. Create a temporary list of chains that contain the  required and frequent items.

4. Assign chains contains a certain item for each  processor, each processor P mines frequent panem.

. .

Transaction Item TI II ,I2,  I5 T2 12.14 T3 12, I3 T4 II .I2.  I4 T5 11.13 T6 12, I3 T7 11, I3  4. An Example algorithm for frequent patterns and have proposed a new structure to store all of the essential information of the transaction data that is compact. Moreover, the intemediad structure can be uDdatable easilv when new data becomes  Let the transaction database DB be Table 2 and 5=2.

Processor  Po  P' .

T8 T9  II,12,13, I5 pz I1,I2, I3  available. New data would simply be scanned once and added to the structure by simple modification of &e previous one.

