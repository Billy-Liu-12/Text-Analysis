Quantitative association rules mining algorithm based  on matrix

Abstract?How to improve the efficiency of discovering the frequent item sets is a major  problem in mining association rules. This paper analysised the idea and performance of the general quantitative association rules algorithm ,and put forward a quantitative association rules mining algorithm based on matrix, the new algorithm firstly transformed quantitative database into boolean matrix ,then used boolean "and" operation to generate frequent item sets on matrix vector .It effectively solved the bottleneck of Apriori algorithm which iteratively produced frequent item sets in the general quantitative association rules algorithm . The results of experiments and analysis showed that the new algorithm effectively improved the efficiency of mining quantitative association rules  Keywords-Data mining; Quantitative association rules; frequent item set; Apriori algorithm; Boolean Matrix

I. INTRODUCTION In recent decade years ? data mining technology has  absorbed many of the latest achievements of research disciplines, such as database technology, artificial intelligence, machine learning, statistics, and so on, and have formed a unique branch of the study. The purpose of data mining is to discover the valid, novel, potentially valuable knowledge hidden behind in the data. Mining association rules is an important issue in data mining, which discovers the potential relationships between the rules in a database. It was first introduced by Agrawal et al in [1] (1993),used to deal with transactional database, and then extended to used in the relational database and data warehousing, it was widely used in market basket analysis, storage planning, analysis of commodity advertising mail, bank fraud screening, diagnosis of the cause, climate changing, and OLAP analysis, etc. However, in relational databases or data warehouses often contain non- discrete numerical attributes (such as temperature, precipitation). For numeric data, there is a gap between boolean association rules, in approaches, techniques and difficulty that is a new challenge to the traditional methods of data mining (the framework of the rules, Agrawal found). Boolean association rules algorithm was more mature, there were many algorithms such as Apriori algorithm, AprioriTid, DHP(Park et al  proposed),FP-tree algorithm(Han Jiawei proposed), but there are less literatures about quantitative association rules.

At present, most quantitative association rules mining mainly through improving the relatively mature boolean  association rules algorithm to solve quantitative association rules issues. Majority literatures [2-4] adviced that quantitative association rules problem were firstly transformed into boolean association rules, and then used Apriori algorithm to get the valuable association rules, a typical algorithm was MAQA algorithm [4].



II. RELATIONAL THEORIES  A.  Boolean association rules Let I = (i1, i2, ..., in)be a set of n binary attributes called  items, Let D be a set of transactions called database. Each transaction T in D has a unique transaction ID and contains a subset of the items in I ,that is T?I .If some items set X is from I, there is X?T, said T support X. Boolean association rules can be expressed as the implicate form of X?Y. In which X?I?Y?I and X?Y=?. If there is s% transactions support X?Y, said the rule X?Y has support s%. If transactions which support X has c% support Y at the same time in D, said the rule X?Y in D, has confidence c%. The problem of discovering boolean association rules is to discover association rules from the transactions in a given set D, which have meet the minimum support (MinSup) and (MinConf).

B. Quantitative association rules Quantitative association rules have some different from  boolean association rules. The  items set of quantitative association rules has become into Ir =I?Q?Q, that is,  Ir={(x,l, u)|x?I, l?Q, u?Q, l?u,l?x?u}, (x,l,u)?Ir, denote that the attributes x values between l and u. l is a attributes set, Q is a positive integer set. For any X? Ir ,attribute(X)={x|(x,l,u)?X}. If?(x ,l, u)?X ,?( x,v)?T,and there is l?v?u, said that transaction T(T?D) in support of X(X ?Ir). Quantitative association rules can be expressed as the implicate form of X ? Y, in which X ? Ir ,Y ? Ir, and attribute(X)?attribute(Y)=?. If there is s% transactions in D in support of X?Y, and there is c% of transact- ions support X also support Y, then the degree of support and confidence  of the association rules, respectively, is s% and c%, mining quantitative association rules is the process to find all association rules which satisfy the minimum support and the minimum confidence

III. THE STEP OF THE GENERAL QUANTITATIVE ASSOCIATION RULES MINING ALGORITHM  It?s one of the effective ways to deal with quantitative association rules by using the theories of boolean association rules algorithm, such as support, confidence, frequent item sets to mine quantitative association rules. At present, the typical quantitative association rules mining algorithms mainly have MAQA.

MAQA algorithm [4] summarized as follows:  Step 1 for the quantitative attribute A, value range is [l, r].

If the attributes is numerical attribute, then use clustering algorithm CP (Clustering for Partitioning) to determine the division of quantitative attribute; if the attribute is category attribute, then generalize and partition.

Step 2 Mapped the partition sections [lk, rk] or attribute value into list pattern <A, k>, and then mapped to boolean attribute Am, all such items constitute the attributes sets.

Step 3 Find all valuable items from item, to constitute frequent item set; valuable item is whose appear times in the transactions more than a given value min_sup.

Step 4 Search iteratively for two combinational items whose support more than the given threshold from  the frequent item sets , and then add the combination items into frequent item sets; if there are in the adjacent section of the same attribute ,then do further.

Step 5 using the frequent item sets to generate association rules. For example: if ABCD and AB are frequent item sets, the rule AB?CD whether or not be established by determined to the result of calculating the confidence conf = supp(ABCD)/supp (AB) ,if it is more than the minimum confidence ,then established the rule. In which, supp (X) denote that the support of X.

Step 6  Output the valuable association rules  The above algorithm, Step 2 and Step 5 is very simple and intuitive, Step 3 using the Apriori algorithm mentioned previously .Apriori algorithm expressed as following.

1) Find out all the items whose support more than MinSup from items I, and constitute 1- frequent item set L1  2) For (k = 2, L2 ? ?, k + +) DO Begin  Ck=Appriori_gen (Lk-1) //generated k-candidate             item set through the k-1 frequent item set  For all transactions t?D DO Begin  Ct = subset (Ck, t); / / Ct for all t  contain candidate set elements For all candidates c belonging to Ct, Do  c.count + +;  End Lk = (c ?Ck | c.count ? MinSup.count)  L = ?Lk  Apriori algorithm used layer-by-layer iteratively search method, that is, generate (k +1) ? candidate item sets through the k-frequent item sets. It has two fatal performance bottlenecks: 1) repeatedly scanning transaction database, it requires a lot of I/O load; 2) there may have a large set of candidates, the k-candidate set Ck generated by Lk-1, the number of the candidate sets grew by exponential growth, for example, 104 1-frequent item sets is likely to have generate close to 107 2- candidate sets. Such a large set of candidate is a challenge to time and main memory space. Because of its bad performance, the following algorithm use matrix algorithm to generate frequent item sets.



IV. QUANTITATIVE ASSOCIATION RULE MINING ALGORITHM BASED ON MATRIX  Before describe the algorithm, some defines, properties first gave here and their proof have gave in literature  Define 1 k-dimension support: any k bit vector (the elements of the same row) out of the transactions matrix (boolean matrix) Am*n take "and" operation, the count of computing result "1" , be as this k-dimensional vector support .

In accordance with the definition of k-dimensional  support , the property 1 will be got.

Property 1 In boolean matrix Am*n , if any row item Ai degrees (the number of the including "1") is less than k, while computing k-dimensional support, Ai is not necessary to participate in "and" operation.

Inference 1 Different values item sets of the same attributes is not necessary to participate in the "and" operation in the transactions matrix which changed from a quantitative database (As in a transaction Ti ,an attribute can only be for a value, with the different values sets of  the same attributes to participate in the "and" operation , the results will be as a "0")  Property 2 If the K-item set X = (i1, i2 , ..., ik) there is a j? X, let|LK-1(j)|<k-1, then X is not the frequent item sets. Which |LK-1(j)| denote a collection LK-1 of (k-1)-frequent item sets contains the number of  j.

Property 3 The K-frequent item sets LK, if |LK|<k+1,then the largest number of frequent item sets will be k in the transactions database  mined. Which , |LK| denote the number of the K-frequent item sets.

The description of Matrix-based quantitative association rules algorithm.

Step 1 Using fuzzy clustering method to partition the quantitative attributes. For the quantitative database contains m quantitative attributes, the quantitative attribute i is divided into ki partitions (1 ? i ? m).

Step 2 Using the language field theory to generalize and delaminate the quantitative attributes .The ki partitions of quantitative attribute i will be generalized into ki concepts based on the language field theory.

Step 3 Generated the frequent item sets (based-on the matrix algorithm)    1) Scan the database, initialize the matrix M. Statistics for each 1-itemset?s support ,count and record the ID in which the item sets be, delete non-frequent 1-itemsets and transactions which don?t contain 1-frequent set, then change the database into a transactions matrix which only  contains 1-frequent item sets and transactions which contain 1-frequent item sets. Let the database include n transactions and m quantitative attributes. If have obtained k 1-frequent item set by statistics.

Let I=[I1,I2,...,Ik], m transactions which include 1- frequent item sets ,D = (Ti, Tj, ..., Th, ...).(i<j<?<h<?) I and D will be in alphabetical  order of the dictionary to establish a transactions matrix Mm*q (q = k +1), with m rows, k+1 columns, according to the ID of 1-frequent set in, if Ij contained in the ith transaction  (1 ? j ? k, 1 ? i ? m) then Aij = 1, otherwise, Aij = 0, Aiq denotes the number of items which included in the ith transaction  for (i=1;i?m;i++) {item_count=0; for(j=1;j?k;k++) If(Ijin the ith transaction) { Aij=1; item_count++; } Else Aij=0; Aiq=item_count; }  2) reduce the transactions matrix  Based on Property 2, computing |LK-1(j)|, which j ?I'= (? B|B ?LK-1), k>2, that is, computing the frequencies of all the items in LK-1, finding those items whose frequency less than k- 1. Recorded as I "= (i|i?|LK-1(i)|<k-1), delete the columns of the transactions matrix where the items in I".

Recalculate the value of the final column element of the matrix, the value of the final column element is the number of ?1?in the row which the columns element in. According to Property 1, delete the rows whose value of the final column element is less than k (k>2).

3) Computing K-item frequent set  When k> 1, if the column number of the transactions matrix is p(k<p, k<m, m is the number of transactions attributes), on the k-dimensional combination of the pre- (p-1)columns of transactions matrix(from Inference 1 know, the different values of the same attributes no need participate in combination at the same time), computing k-dimensional support for every k- dimensional combination ,if  k-dimensional support is not less than the min_supp ,then the items of k-dimensional combination is  K-item frequent set.

Int Suppcount(A,d)  {Supp=0;  for(t=1;t<d;t++)  {YZ=1;  for(j=1;j?k;j++)  {YZ=YZ&A[t][ j];  if(YZ==0) break;  }  Supp=Supp+YZ;  }  Return  Supp;  }  4) Repeated the implementation of 2),3), until |LK|<k+1.

Step 4 Generated association rules from frequent item sets

V.  THE RESULTS OF EXAMPLES AND ALGORITHM ANALYSIS  A. The results of examples Assuming the database has four quantitative attributes a , b ,  c , d .After generalized, respectively ,valued((a0,a1,a2), (b0,b1,b2),(c0,c1,c2), (d0,d1,d2),as shown in table 1  TABLE I.  DATABASE D  a b c d  T1 T2 T3 T4 T5  a0 a1 a1 a2 a1  b1 b2 b0 b1 b1  c2 c0 c1 c0 c0  d0 d2 d0 d1 d2  Table 1 is a database, let the support of transactions min_count = 2, scan the database D statistics the appears times and the ID of each 1-itemset in the database .Get{a0:1,(T1)} {a1:3,(T2,T3,T5)}, {a2:1,(T4)},{ b0:1(T3)},{ b1:3, T1,T4,T5)}, {b2:1(T2)},{c0:3,(T2,T4,T5)}{c1:1,(T3)},{c2:1,(T1)},{d0:2,(T1,T3 )}{d1:1,(T4)},{d2:2,(T2,T5)} .Because a0, a2, b0, b2, d1 occurs times less than 2, they are not frequent  1 ? item sets, delete them, as a result of all transactions contains 1 - frequent sets in D, so we no need to delete transactions. In this case, 1-frequent sets can be got as a1, b1, c0, d0, d2.Sort the 1- frequent sets and transactions ID in the dictionary sort order. Change the database into the transactions matrix that only contains 1- frequent set and transactions, as shown in table ?.

TABLE II.     TRANSACTIONS MATRIx  a1 b1 c0 d0 d2  T1 0 1 0 1 0 2  T2 1 0 1 0 1 3  T3 1 0 0 1 0 2  T4 0 1 1 0 0 2  T5 1 1 1 0 1 4    Scan Table 2, computing 2 - frequent item sets .any two columns of different attributes to do "and" operation, computing 2-dimensional support according with definition 1, if the 2-dimensional support is not less than the minimum number, then the corresponding 2 - items is 2-frequent sets.

From Table 2 , can get 2-frequent sets as L2= ((a1,co), (a1,d2), (b1,co), (c0,d2)).According to 2- frequent sets and Property 2, tailor Table 2. As a result of L2(b1)= 1<2, L2(d0)=0<2, the matrix can be deleted columns b1, d0 ,and recalculate the value of a final column of the matrix, if the value of final column is less than 3,then the row  will be deleted .got the transactions matrix shown in Table ? .

TABLE III.  TRANSACTIONS MATRIX AFTER TAILORING  a1 c0 d2  T2 1 1 1 3  T5 1 1 1 3  According to Table ?, computing 3-frequent sets as L3 =(a1,c0,d2), as|L3|<4, the maximum frequent set is 3-frequent item sets, the  algorithm end.

B. Algorithm Analysis MAQA algorithm firstly changed the quantitative attributes  into boolean attributes, so an attribute should be converted into a number of boolean attributes, the dimensions of the database will rapidly grow and become less efficient, and then use the Apriori algorithm to mine association rules, it needs to repeatedly scan the database. However the algorithm using matrix algorithm, only scan database one time to get 1 -item frequent sets, delete non-frequent 1- item sets and the transactions which do not  contain 1-frequent sets, directly use of 1-frequent sets and transactions contain 1-frequent set, to build transactions matrix. So that can save the storage space.

The Subsequent operation directly do on the transactions matrix, k-item frequent sets generated through the k- dimensional support of transactions matrix ,no need do the connection of (k-1)- frequent sets, nor need to tailor k-item candidate sets and do pattern-matching operation. The simulation results, as follows Figure 1 and Figure 2

VI. . CONCLUSION In this paper, the matrix algorithm is an efficient  quantitative association rules mining algorithm, it only needs to scan database one time, do not need to generate candidate sets, but directly generate frequent item sets from the 1 ? frequent sets using boolean "and" operation on the transactions matrix.

This algorithm performs faster than MAQA algorithm, and  using smaller space. It can improve the efficiency of mining quantitative association rules, and has a good feasibility.

