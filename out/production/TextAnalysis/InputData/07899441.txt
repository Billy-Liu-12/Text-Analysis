Automatic Configuration of Smart City Applications for User-Centric Decision Support

Abstract?Smart city applications in the Big Data era require not only techniques dedicated to dynamicity handling, but also the ability to take into account contextual information, user preferences and requirements, and real-time events to provide optimal solutions and automatic configuration for the end user.

In this paper, we present a specific functionality in the design and implementation of a declarative decision support compo- nent that exploits contextual information, user preferences and requirements to automatically provide optimal configurations of smart city applications. The key property of user-centricity of our approach is achieved by enabling users to declaratively specify constraints and preferences on the solutions provided by the smart city application through the Decision Support component, and automatically map these constraints and preferences to provide optimal responses targeting user needs. We showcase the effectiveness and flexibility of our solution in two real usecase scenarios: a multimodal travel planner and a mobile parking application. All the components and algorithms described in this paper have been defined and implemented as part of the Smart City Framework CityPulse 1.



I. INTRODUCTION  Smart city applications require Internet of Things (IoT) dis- covery and matchmaking techniques dedicated to dynamicity handling. Information taken into account during the match- making process originates from diverse data sources including: data streams, city services, the user?s social context, situational awareness (e.g., user location), preferences and application configurations. The exponential growth in the availability of information from numerous data sources raises several diffi- culties in implementing, sustaining, and optimizing operations and interactions among different city departments and services [7]. There is a strong need for smart city application tools which support easy development of smart applications.

The state-of-the-art for smart city frameworks has ma- jor focus on existing smart city platforms and the existing works are mainly in four key areas: (i) data acquisition (ii) semantic interoperability, (iii) real-time data analysis and event detection, and (iv) smart city application development support. Among the existing frameworks such as PLAY [9],  1www.ict-citypulse.eu  iCore [4], and STAR-CITY [5], CityPulse [8] is the only framework supporting all four previously mentioned features.

In additional to data acquisition and semantic interoperability, the CityPulse framework provides a complete set of domain independent real-time data analytics tools such as data feder- ation, data aggregation, event detection, quality analysis and decision support. The application development is supported through a set of APIs provided by CityPulse. In this paper, we focus on the decision making process, which is designed and implemented within CityPulse framework.

The Decision Support component in CityPusle supports the complex reasoning capabilities that are required in var- ious smart city applications such as non-monotonic, non- deterministic, and recursive reasoning. This component rep- resents higher-level intelligence, strongly connects to user application layer, and acts as a flexible interplay between user-centric factors and dynamic aspects of the changing environment within the city. Factors such as user interests and reputation requirements are also considered in the decision support process. The exploitation of such factors along with richer user profiles has a great potential for providing more personalised decision support, and greatly improve user expe- rience when interacting with smart city applications. Although elicitation and usage of user profiles is optional, motivated by their potential we included explicit aspects of user profiles in the decision support process which are automatically encoded and used to configure the way the decision support process works. These aspects include not only user location but also user preferences and constraints on the solutions provided, as well as dynamic correlations between contextual activities and their dependencies with city events for a particular user in specific application scenarios.

The ability to continuously characterize the correlation between city events and user activities is used to dynamically filter events that are relevant for a particular user at a specific time so that Decision Support can be instructed to find new so- lutions whenever needed. This functionality has been specified and implemented in a component called Contextual Filtering [8]. In the proposed characterisation, events, user activities and     Decision Support  User Application  Knowledge Base  External Modules  External Information  Reasoning Request  Background Knowledge  Answers  Fig. 1. Decision Support I/O  their dependencies are modelled using Linked Data and open vocabularies in order to provide a lightweight, interoperable and well-established foundation for decision support.

In this paper we focus on user-centricity and describe how user requirements in terms of preferences and constraints can be explicitly specified and mapped into a representation that is independent from the specific application.

In the remainder of this paper we will present the design principles for our Decision Support component in Section II, formalise our declarative specification of user requirements and their automatic representation as logical rules in Section III, and the implementation of our scenarios in Section IV. We then conclude with some final remarks in Section V.



II. USER-CENTRIC DECISION SUPPORT  The Decision Support component is responsible for higher- level intelligence, which can utilize user contextual informa- tion, background knowledge, and real-time events to deduce intelligent conclusion in real-time. This component is also capable of acquiring the analyzing additional information sources related to user contextual patterns, users? application usage behaviour, and self-defined preferences (while using a smart city application) to provide optimal configuration for smart city applications and enable these applications to generate reactive application logic within deployed smart city applications. Figure 1 represents a general information flow and interactions of Decision Support with other external components.

As an initial step to start the information processing, Decision Support receives following input: (i) a reasoning request from the application interface which includes user related functional and non-functional parameters, constraints, and preferences, (ii) background knowledge, which is domain dependent information available for reasoning and application logic strictly tied to the given scenario, and (iii) external information sources, which is any relevant information col- lected through external components required for that specific scenario. After processing all related input information as men- tioned above, Decision Support generates a set of scenario- driven solutions, which are guaranteed to be optimal and satisfying all requirement and preferences specified by the individual user.

In real world scenarios, the reasoning module has to deal with issues related to incomplete and contradictory informa- tion, diverse and un-realiable input data, and most importantly user defined constrained and preferences are not explicitly input by the end user. In order to better support the provision  of optimal decisions, the reasoning module must have abil- ity to expressively deduce information from the information collected through internal and external modules additional to the user defined input. We achieved this expressivity within Decision Support by opting to use a declarative non-monotonic logic reasoning approach based on Answer Set Programming (ASP) [6]. All input information of Decision Support is mapped into ASP-format rules. Decision Support combines mapped rules with already existent domain-dependent rules, to design an application logic for the provision of optimal solutions to the users. Figure 2 depicts a system sequence diagram of Decision Support to showcase all interactions and processing steps involved in this component. In what follows, we briefly elaborate each and every information processing step of the Decision Support component.

? Request Handler receives a ReasoningRequest as an input from the application containing user preferences and requirements. Whenever a new reasoning request is arrived, a new instance of Decision Support is initiated.

This ReasoningRequest is interpreted as the Interprete- dRequest and used to initiate the DS Manger.

? Request Re-writer automatically generates the logic rules required for the specific reasoning request that is received from DS Manager, the detailed process of automated mapping and rules generated is presented in Section III.

After receiving the rules from Request Rewriter, the DS Manager asks CoreEngine to perform the reasoning by sending InterpretedRequest and Rules as parameters.

? CoreEngine is a component that executes the ASP solver (in our current implementation, we use Clingo4 [3] as the ASP solver) using the EmbASP framework2 which is able to invoke the ASP solver and to collect Answer Sets as plain Java objects. The ASP solver starts by collecting:  ? ExternalInformation refers to additional information collected through external modules, which can vary depending on the scenario. For example, in the Travel Planner scenario (see Section IV), the possible routes from starting point to ending point or the latest city events can be considered as ExternalInforma- tion. Decision Support directly interacts with external modules within the ASP program, using a technique called the ?external atoms?. By using this technique, the ASP reasoner is able to invoke the external modules interactively, only on need basis and can also re-use derived answers for other reasoning tasks.

This feature offers a very powerful ability on-demand composition of reasoning tasks to provide solutions.

? BackgroundKnowledge is static information contain- ing important facts and rules related to a particular domain and stored internally for reasoning tasks. For example, in the Parking Space scenario (see Section IV), the locations of the parking spaces are part of background knowledge.

2https://www.mat.unical.it/calimeri/projects/embasp/     Request Handler  Reasoning Request  Request Rewriter  DS Manager  Knowledge Base  getBackgroundKnowledge (SPARQLquery)  BackgroundKnowledge  Rules  Core Engine  performReasoning (InterpretedRequest, Rules)  External Modules  getExternal Information  (Some Data) External  Information  Answers  getRules (InterpretedRequest)  startDSS (InterpretedRequest)  The order of invocation of other modules is unknown and depends on the logic rules.

Answers  Answers  reason (LogicRules)  AnswerSets  ASP solver  Fig. 2. Decision Support sequence diagram  ? The ASP Solver combines ExternalInformation, Back- groundKnowedgle, and Rules to compute the optimal answers (in the form of AnswerSets) satisfying users? defined constraints and preferences.

? EmbASP Framework processes AnswerSets and the op- timal selected Answers (as objects) are sent to the CoreEngine and then back to the user application for visualization.

The actual deduction process for generating solutions to the decision support task required by the application is performed by combining background knowledge, external information, user preferences & constraints and scenario-dependent rules.

The fully declarative nature of the ASP framework used in the implementation of the Decision Support component capabilities makes it possible to combine these rules and knowledge facts in a straightforward way, and enables full exploitation of the expressive power of ASP inference for constraint checking and preference-based deduction. This very same declarative feature is likely to simplify the extension of Decision Support provided within the CityPulse framework and to reuse for other decision support tasks.



III. USER-CENTRIC DECISION SUPPORT REQUEST: SPECIFICATION AND MAPPING  Preference-driven and constraint-based reasoning provides a powerful mechanism where user-centricity is a key feature, and enables to find an optimal match between the needs, pref- erences of citizens, available data streams and city services.

This section describes the specification of a reasoning request.

We focus on user preferences & constraints and their automatic mapping into declarative deduction rules. These rules are then used in the decision support process for solution optimization.

In what follows we will detail each element of the Reason- ing Request and define the automatic mapping or translation into deduction rules used by the Decision Support compo- nent. Such translation is defined in a general way so that independently of the Functional Details defined as strings and values, an automatic declarative rule-based specification can be obtained, which is seamlessly combined with the rules in the Decision Support module used by a specific application.

As illustrated in Figure 3, the Reasoning Request consists of: ? Type (T ) determines the reasoning task required by the  application. This is used directly by Decision Support to perform the correct task using the reasoning engine, and needs to be identified among a set of available options at design time by the application developer. Such options have been defined for the implemented scenarios.

Customization and extension of available types will be possible via APIs.

? User Reference is an identifier of the user that made the request. Such reference is meant to be a unique identifier related to user credentials that will be used in the final integration activities in order to manage user logins and instances of the CityPulse framework in different cities.

? Functional Details represent the actual criteria for the reasoning task required by the user (i.e. constraints and preferences for solution optimization). Functional Details includes Functional Parameters, Functional Constraints, and Functional Preferences.

We shall focus now on the specification of each of the aspects included in Functional Details, and illustrate how they are automatically mapped and translated into logical deduction rules.

A. Functional Parameters  A Functional Parameter defines a mandatory information for the Reasoning Request (for instance the ?ending point? in a travel planner scenario). A set of Functional Parameters (?) is composed by a finite set (of cardinality n?) of indi- vidual Functional Parameter (?i;?i ? ? ?i ? [1;n?]). Each Functional Parameter (?i) is composed of: ? Functional Parameter Name (N?i ) ? Functional Parameter Value (V?i )  i.e. ?i = ?N?i , V?i?.

The Functional Parameter Name (N?i ) is a string taken from  a fixed set of strings (?T,N?i ) and the Functional Parameter Value (V?i ) is specific for each scenario.

The set of Functional Parameters (?) is translated as the concatenation of the translations of each Functional Parameter (?i) that composes it. Each Functional Parameter (?i = ?N?i , V?i?) is translated as:  parameter(N?i , V?i).

The Functional Parameter Value can be a single value or a set of possible values. When the Functional Parameter Value is a set (e.g. expressed as enumeration of possible values), it is translated into several of the above facts, one for each item in the set.

B. Functional Constraints  A Functional Constraint defines a numerical restriction about a specific aspect of the Reasoning Request. This restric- tion is ?strict? and needs to be fulfilled by each of the answers (otherwise referred to as solutions) offered to the user. A set     Fig. 3. Representation of Reasoning Request  of Functional Constraints (?) is composed by a finite set (of cardinality n?) of individual Functional Constraint (?i; ?i ? ? ?i ? [1;n?]).

Each Functional Constraint (?i) is composed of: ? Functional Constraint Name (N?i ) ? Functional Constraint Operator (O?i ) ? Functional Constraint Value (V?)  i.e. ?i = ?N?i , O?i , V??.

The Functional Constraint Name is a string taken from a  fixed set of strings (?T,N?i ) and the Functional Constraint Operator is an arithmetic operator taken from a fixed set (?O?i = {=, 6=, >,<,?,?}). For each Functional Constraint Operator (O?i ) we denote with O?i its complementary opera- tor. The Functional Constraint Value V? is an integer number.

The Functional Constraints (?) is translated as the concate- nation of the translations of each Functional Constraint (?i) that composes it. Each Functional Constraint is translated as: ? The ?real? constraint:  ? violatedC(N?i).

? A rule to derive if it is violated:  violatedC(N?i)? valueOf(N?i , AV ), AV O?iV?i .

where AV is an ASP variable.

C. Functional Preferences  A Functional Preference defines a ?soft? constraint or prior- ity among the verification of specific aspect of the Reasoning Request. This restriction is ?weak? and should be optimized by the Decision Support component in order to provide the optimal or most preferred answers to the user.

A set of Functional Preferences (?) is composed by a finite set (of cardinality n?) of individual Functional Preference (?i;?i ? ? ?i ? [1;n?]). Each Functional Preference (?i) is composed of: ? Functional Preference Order (O?i ).

? Functional Preference Operation (Opt?i )  ? Functional Constraint Name (N?i ) is defined in III-B.

i.e. ?i = ?O?i , Opt?i , N?i?.

The Functional Preference Order (O?i ) is an integer ? [1;n?] and the Functional Preference Operation (Opt?i ) is an optimization operator taken from a fixed set (?Opt?i = {minimize,maximize}). The Functional Constraint Name (N?i ) is defined in III-B.

The Functional Preferences (?) is translated as the concate- nation of the translations of each Functional Preference (?i) that composes it. Each Functional Preference is translated as:  #Opt?i{AV@O?i : valueOf(N?i , AV )}.

To allow more flexibility in the logic program each Functional Preference (?i) could be also translated as (in addition to the previous translation):  preference(O?i , Opt?i , N?i).



IV. USECASE SCENARIOS  In order to demonstrate how Decision Support can be used to develop applications for smart cities and citizens, we have implemented two context-aware usecases using the live data from the city of Aarhus, Denmark: a Travel Planner app and a Parking Planner app . In this section, we present the Reasoning Request, logic rules automatically generated from the Reasoning Request, scenario-dependent rules, and External Modules used in the decision support process.

A. Travel Planner Scenario  Tony needs to travel from home to work. Different means of transportation are generally available to him and include walking, biking, car, and public transport. Transportation can be optimized to Tony?s preferred travel time, convenience, total cost, environmental impacts, and personal health. Factors that impact this optimization include the conditions of the different transportation modes, including but not limited to road, weather, maintenance works, traffic intensity, people density, pollution, air quality, irregularities in traffic schedules, road tolls, seating availability, accidents, availability of city     bikes. Tony will be presented with his ideal route and will be able to select each leg of the journey based on concurrent and projected aggregated conditions. Recalculation of his chosen route(s) can happen if conditions or preferences change, and the provided solution will adapt to any detour of own choice.

In order to provide optimal travel-planning solutions to Tony, Decision Support allows him to provide his multi- dimensional requirements and preferences such as air quality, traffic conditions, ect. The Reasoning Request for this scenario has the following main fields: ? Type: indicating what decision support module of the  Smart City Framework is to be used for this application (?TRAVEL-PLANNER? in this case).

? User Reference: indicating the unique userId.

? Functional Details: specifying possible values of user?s  requirements and preferences. Tables I, II, and III show concrete possible values of Functional Parameters, Func- tional Constraints, and Functional Preferences respec- tively.

TABLE I EXAMPLE OF FUNCTIONAL PARAMETERS FOR THE TRAVEL PLANNER  SCENARIO  Functional Parameters Name Value Type Value  Starting Point STARTING POINT Coordinate 56.1788812169403910.153993614949286  Ending Point ENDING POINT Coordinate 56.1518318788324810.154508599080145 Starting Time/Date STARTING DATETIME Date 2017-01-10T18:25:43.511Z Transportation Type TRANSPORTATION TYPE Enum {CAR, WALK, BICYCLE}  TABLE II EXAMPLE OF FUNCTIONAL CONSTRAINTS FOR THE TRAVEL PLANNER  SCENARIO  Functional Constraints Name Operator Value Type Value Travel time less than X TRAVEL TIME 6 Duration 15 Distance less than X DISTANCE 6 Number 1000 Pollution amount less than X POLLUTION 6 Number 13,5  TABLE III EXAMPLE OF FUNCTIONAL PREFERENCES FOR THE TRAVEL PLANNER  SCENARIO  Functional Preferences Order Operation Name Travel time 1 MINIMIZE TRAVEL TIME Distance 2 MINIMIZE DISTANCE Pollution 3 MINIMIZE POLLUTION  The concrete reasoning request is automatically mapped into ASP rules (see example rules 1-8 in Listing 1) in which: Functional Parameters are translated as simple logic facts (rules 1-2); Functional Constraints (rules 3-4) are translated as strong constraints, which reduce the solution space by eliminating answers that are violating any of those constraints.

Functional Preferences are translated as optimize statements (rules 5-8), which rank the solutions to provide only those that are qualitatively better with respect to the optimization statements used. Those rules are combined with the specific scenario-driven rules for the Travel Planner Decision Support module (rules 9-13) for reasoning3. The Decision Support  3A full set of rules is available at https://github.com/CityPulse/Decision- Support-and-Contextual-Filtering/tree/master/res/dss  component collects all possible routes from the Geo-spatial Database Infrastructure (GDI) component [8] as well as the last snapshot of values of relevant functional properties for those routes which can be produced dynamically by the Data Federation component [2], [1], [8] or retrieved from the Knowledge Base (rules 10-12).

The External Modules used for this scenario are: ? GDI, which enables calculation of different distance  measures and allows enhanced information interpolation to increase reliability. Furthermore, an enhanced routing system enables multidimensional weighting on path, e.g., depending on distance, duration, pollution, events or combined metrics. Thereby, it is possible to avoid certain areas or block partial routes for specific applications.

? Data Federation, which is responsible for processing the application request for IoT streams and automatically discover the most relevant data streams after catering for individual requirements and preferences for a particular user request. It is also responsible for automatically inte- grating heterogeneous data streams and perform complex event processing over the integrated stream.

Both the GDI and the Data Federation components are part of the CityPulse framework. Their implementation are available at https://github.com/CityPulse.

1 . p a r a m e t e r ( ? ENDING POINT? , ? 1 0 . 1 5 9 1 8 6 4 5 6 . 1 4 8 1 1 5 6 ? ) .

2 . p a r a m e t e r ( ? STARTING POINT ? , ? 1 0 . 1 1 6 9 1 9 5 6 . 2 2 6 1 4 4 ? ) .

3 . :? v i o l a t e d C o n s t r a i n t ( ?POLLUTION? ) .

4 . v i o l a t e d C o n s t r a i n t ( ?POLLUTION? ) :? va lueOf ( ?POLLUTION? ,  AV) , 135 < AV.

5 . # min imize{AV@1 : va lueOf ( ? TIME? , AV) } .

6 . p r e f e r e n c e ( 1 , ? MINIMIZE ? , ?TIME ? ) .

7 . # min imize{AV@2 : va lueOf ( ?DISTANCE? , AV)} 8 . p r e f e r e n c e ( 2 , ? MINIMIZE ? , ?DISTANCE? ) .

9 . i n p u t g e t r o u t e s ( SP , EP , V, 5 ) :? p a r a m e t e r ( ?  STARTING POINT ? , SP ) , p a r a m e t e r ( ? ENDING POINT? , EP ) , r o u t e c o s t M o d e (V) .

1 0 . r o u t e ( @ g e t r o u t e s ( SP , EP , V, N) ) :? i n p u t g e t r o u t e s ( SP , EP , V, N) .

1 1 . r o u t e d a t a ( @ g e t r o u t e s d a t a ( SP , EP , V, N) ) :? i n p u t g e t r o u t e s ( SP , EP , V, N) .

1 2 . m a x p o l l u t i o n ( @ge t max po l lu t i on ( RouteID ) ) :? s e l e c t e d ( RouteID ) .

1 3 . 1 <= { s e l e c t e d ( RouteID ) : r o u t e ( ( RouteID , , ) )} <= 1 .

Listing 1. A snapshot of logic rules for Travel Planner scenario  B. Parking Planner Scenario  Frank is having a hard time finding a public parking space.

The city is increasingly reducing the amount of parking spaces per unit (e.g. apartments), and the difficulty of finding a parking space means Frank has to drive around for a long time looking for parking spots. This is very time consuming for him and results in negative environmental impact (pollution, noise).

By using multiple input sources of information the application can provide Frank with a certain degree of probability of finding a parking spot in different locations, thus reducing the driving time (and related CO2 emissions). By knowing the number of cars on the road at any time, the application can help Frank avoiding congested hot spots by being rerouted towards different paths to even out the distribution.

Decision Support aims to provide optimal available parking slots nearby Frank?s point of interest while taking into account     TABLE IV EXAMPLE OF FUNCTIONAL PARAMETERS FOR THE PARKING PLANNER  SCENARIO  Functional Parameters Name Value Type Value  Starting Point STARTING POINT Coordinate 56.1788812169403910.153993614949286  Point Of Interest POINT OF INTEREST Coordinate 56.1518318788324810.154508599080145 Starting Time/Date STARTING DATETIME Date 2017-01-10T18:25:43.511Z Distance Range DISTANCE RANGE Number 1000 Time Of Stay TIME OF STAY Duration 100  TABLE V EXAMPLE OF FUNCTIONAL CONSTRAINTS FOR THE PARKING PLANNER  SCENARIO  Functional Constraints Name Operator Value Type Value Walking distance less than X DISTANCE 6 Number 1000 Cost less than X COST 6 Number 50  his constraints and preferences. The Reasoning Request for this scenario has the following main fields: ? Type: indicating what decision support module is to be  used for this application (?PARKING-SPACE? in this case).

? User Reference: indicating the unique userId.

? Functional Details: specifying possible values of user?s  requirements and preferences. Tables IV, V, and VI show concrete possible values of Functional Parameters, Functional Constraints, and Functional Preferences re- spectively.

1 . p a r a m e t e r ( ?DISTANCE RANGE? , 1 0 0 0 ) .

2 . p a r a m e t e r ( ? POINT OF INTEREST ? , ? 1 0 . 1 1 6 9 1 9 5 6 . 2 2 6 1 4 4 ? ) .

3 . :? v i o l a t e d C o n s t r a i n t ( ?COST? ) .

4 . v i o l a t e d C o n s t r a i n t ( ?COST? ) :? va lueOf ( ?COST? , AV) , 100 <  AV.

5 . p r e f e r e n c e ( 1 , ? MINIMIZE ? , ?DISTANCE? ) .

6 . # min imize{AV@1 : va lueOf ( ?DISTANCE? , AV) } .

7 . p r e f e r e n c e ( 2 , ? MINIMIZE ? , ?COST? ) .

8 . # min imize{AV@2 : va lueOf ( ?COST? , AV) } .

9 . p a r k i n g s p a c e ( @ g e t p a r k i n g s p a c e s ( POI , DR) ) :? p a r a m e t e r  ( ? POINT OF INTEREST ? , POI ) , p a r a m e t e r ( ?DISTANCE RANGE? , DR) .

1 0 . a v a i l a b i l i t y ( @ g e t a v a i l a b i l i t y ( Pa rk ing ID ) ) :? s e l e c t e d ( Pa rk ing ID ) .

1 1 . t o t a l c o s t ( @ g e t t o t a l c o s t ( Park ingID , ToS ) ) :? s e l e c t e d ( Pa rk ing ID ) , p a r a m e t e r ( ? TIME OF STAY? , ToS ) .

1 2 . 1 <= { s e l e c t e d ( Pa rk ing ID ) : p a r k i n g s p a c e ( ( Park ingID , P o s i t i o n , D i s t a n c e ) )} <= 1 .

1 3 . d i s t a n c e ( D i s t a n c e ) :? s e l e c t e d ( Pa rk ing ID ) , p a r k i n g s p a c e ( ( Park ingID , P o s i t i o n , D i s t a n c e ) ) .

Listing 2. A snapshot of logic rules for Parking Planner scenario  Similar to the Travel Planner scenario, the concrete rea- soning request is automatically mapped into ASP rules (see example rules 1-8 in Listing 2), and combined with the specific scenario-driven rules for the Parking Decision Support module (rules 9-13). The Decision Support component collects all possible parking slots with their cost from the Knowledge Base (these parking slots are in ?DISTANCE RANGE? which is checked by resorting to the GDI component) as well as the last snapshot of availability of parking slots which can be produced dynamically by the Data Federation component (rules 9-11).

Similarly to the Travel Planner scenario, the External Modules used for this scenario are GDI and Data Federation.

TABLE VI EXAMPLE OF FUNCTIONAL PREFERENCES FOR THE PARKING PLANNER  SCENARIO  Functional Preferences Order Operation Name Walking Distance 1 MINIMIZE DISTANCE Cost 2 MINIMIZE COST

V. CONCLUSION In this paper, we describe how we designed and imple-  mented a user-centric declarative Decision Support component by leveraging the expressivity and fully declarative nature of ASP. To achieve this, we define a representation method that allows a user to specify constraints and preferences, and we propose an automatic mapping to convert user requests into logical rules. In order to demonstrate the efficiency in term of reusability and declarativity of this approach, we show- case the implementation of the Decision Support component for two smart city applications: the Travel Planner and the Parking Planner applications. Our rule-based Decision Support component can be used in various application scenarios by: (i) identifying values of the parameters to be constrained or optimized in the Reasoning Request, (ii) describing the domain-specific rules for the decision task (or using existing reasoning modules available in the CityPulse Framework), (iii) plugging in the proper External Modules to compute subtasks when needed for scalability. As a result of our proposal, we can achieve user-centricity in the Decision Support process in order to provide optimal solutions that better target user needs.

