Self-optimization Rule-chain Mining Based on Potential Association Rule  Directed Graph

Abstract   This paper presents an ACO-based (Ant Colony  Optimization) mining algorithm aiming to discover longer rule-chains directly. Firstly, a potential association rule directed graph (PAGraph) is created, in which, the dynamic heuristics is used to record participant-intensity of edge. Secondly, making use of ant?s positive feedback, pheromone on edge that ants passed is adjusted by heuristics so that it could make paths, which have longer rule-chains, have higher selection probability. Meanwhile, a bitwise-AND operation is introduced to compute rule?s confidence easily. Finally, the experimental results show the proposed method can sufficiently capture longer rule- chains and it also confirms the robustness of the algorithm.

1. Introduction   To finding out hidden relationships in a large transaction database, Association Rule Mining (ARM) is studied. Recently, some graph-based ARM methods are proposed and more effective than traditional algorithm based on Apriori[1], FP-tree[2]. For example, DLG algorithm uses an association graph to generate all large item sets [3,4]. The depth-first traversal algorithm is proposed by Burdick in which a vertical bitmap is used to store projection of item [5].

And a fast mining algorithm based on prefix-general- linked-list is proposed by Yang & Sun [6]. All of them effectively reduce database scanning times. However, with the introduction of graph data structure, ?new complexity? is readily brought as it costs additional time and space.

In this paper, a novel and robust mining algorithm is presented to discover rule-chains efficiently. Firstly, a  potential association rule directed graph (PAGraph) is created, in which each node is corresponding to a frequent item, and each edge is a possible association rule. Then, an improved ant colony optimization algorithm (ACO) is provided to mine rule-chains, as well as a dynamic heuristics is defined to indicate participant-intensity of edge, a vertical-bitmap-based bitwise-AND operation is used to compute rule?s support and rule?s confidence.

This paper is organized as follows: PAGraph design procedure is given in Section 2 as a preliminary work.

The rule-chains mining algorithm is given in detail in Section 3. Section 4 gives experimental results and Section 5 concludes the paper and points out the directions of future work.

2. PAGraph design   There is a transaction database, TD= {<tid, items >}  and TN is the number of transactions, where <tid, items> is a transaction, tid is the transaction identifier, and items is items involved in the transaction.

Definition 1. (ItemBits). ItemBits is a bit vector about an item, its length is the number of transactions, if i-th bit is ?1?, it means the item appears in the i-th transaction, otherwise ?0?, means not in i-th transaction.

Definition 2.  (1-FIs). 1-FIs is called Frequent Item Set, 1-FIs = { Ii=<IID,ItemBits> | Sup(Ii)>=MinSup, i=1?N}, Ii  is the Frequent Item and N is the number of Frequent Items, where IID is the item identifier, ItemBits describes the item distribution in TD, Sup(Ii) is the item support and MinSup is a threshold called the minimum item support.

Definition 3. (FI-Bitmap). FI-Bitmap consists of all ItemBits in 1-FIs and is called frequent item-bitmap. It is a bit matrix, denoted as: FI-Bitmap= (ItemBits) N?1.

Definition 4. (PAGraph). PAGraph=<V,E> is called potential association rule directed graph, where V=1-  2008 International Symposium on Computational Intelligence and Design  DOI 10.1109/ISCID.2008.17   2008 International Symposium on Computational Intelligence and Design  DOI 10.1109/ISCID.2008.17     FIs= {I1, I2?IN}, and Ii is also called item-node; E= {e=<Ii, Ij>| ? Ii, Ij?V }, each edge represents the relationship between items and it may be a rule.

By scanning TD once, the FI-Bitmap and PAGraph can be built easily, meanwhile, in order to judge whether a rule-chain is in PAGraph, several formulas are used:  TN count  ISup i )ItemBits(  )( i=                         (1)  Sup(Ii? Ij) = TN  count )ItemBitsItemBits( ji ?      (2)  Conf(Ii? Ij) = )(  )ItemBitsItemBits( ji iItemBitscount  count ?       (3)  where Ii, Ij?1-FIs, Sup(Ii? Ij) is the rule?s support and Conf(Ii ? Ij) is the rule?s confidence.

count(ItemBits) is the frequency of the item and can be computed by easily taking count of ?1? in its ItemBits.

Thus, Sup(Ii) is considered the probability of the item.

Let MinSup and MinConf be the minimum rule support and the minimum rule confidence, we have the following definitions of rule and rule-chain.

Definition 5. (rule). In PAGraph, if the edge from Ii to Ij is a rule, it should satisfy:  Sup(Ii? Ij) ?MinSup ? Conf(Ii? Ij) ?MinConf .

Definition 6. (rule-chain).  Rule-chain consists of a  series of rules. Supposed P=< Ik1, Ik2? IkN, Ik1 > is a path traversing all item-nodes, R=<Ikm? Ikn> is a segment of the path, m,n=1?N, then, if R is a rule- chain, it should satisfy:  1) For each edge e ?R, e is a rule.

2) <Ikm-1, Ikm> and <Ikn, Ikn+1> are not rules.

We let Length(R) be the length of the rule-chain,  which is the number of rules in the chain. And if each edge of P is a rule, P is called circular rule-chain and its length is N.

3. ACO-based SRMining model   In PAGraph, an ACO-based self-optimization rule-  chain mining algorithm (SRMining) is proposed. The main difference between traditional ACO [7] and SRMining is: the former aims to search for a best route, while the latter tries to mine many optimal path segments, namely rule-chains.

In SRMining, pheromone suggests the possibility of an edge being part of rule-chains. It will be enhanced with ants moving by accumulating heuristics, and make path, which have longer rule-chains, have higher selection probability. All of this works by an iterative process of ant?s positive feedback. Supposed pathk=< Ik1, Ik2? IkN, Ik1 > is a path traversing all item-nodes by the ant k, and R=<Im? In> is a rule-chain in pathk,   3.1. Dynamic heuristics   Let lr = Length(R)/N be the relative length of the  rule-chain and ?ij be heuristics of edge <Ii, Ij>, ?ij is calculated as follows:  ??  ? ? ?  >?<=  >?<=  ??  ? ? ?  =+  =  RIIif N  RLengthlr  RIIiflr where  lrtt  ji  ji  ijij  ij  ,)(  ,0   )4( }),(max{)1(  0)0(  ?? ?    ?ij is initialized to 0 and increased with more paths being found. It indicates Current Participant Intensity of an Edge to Rule-chains (Edge Intensity), which is denoted as the relative length of the present largest rule-chain covering this edge. For example, when ?ij=0, edge <Ii, Ij> is found in a rule-chain of path1 and length of the rule-chain is 4, so ?ij=4/N. Then <Ii, Ij> is involved in another rule-chain of path2 and length of it is 3. Since 3/N<?ij, ?ij is as of old. And then, <Ii, Ij> is found again in a rule-chain of path3 and length of it is 5.

Since 5/N>?ij, ?ij is updated as 5/N.

3.2. Pheromone update   Definition 4. (Path Intensity). Path Intensity of pathk,  denoted as PIk, is calculated as:  ? >?<  = kji pathII  ijk ttPI ,  )()( ?         (5)  PIk is the sum of Edge Intensity in pathk. So, it can be seen that the larger intensity the path has, the higher possibility of its edge being part of a long rule-chain there will be. In t-th iteration, supposed m ants get m paths, rij (rij ? m) paths pass the edge <Ii, Ij>, ??ij is the incremental pheromone of <Ii, Ij>, then, the pheromone of <Ii, Ij>, denoted as ?ij, can be updated by the formula:  ij  r  1k kij  /r)PI (  )()1(  0)0(  ij  ? =  =?  ??  ? ? ?  ?+=+  =  ?  ??? ?  where  tt ijijij  ij  (6)  Obviously, the pheromone on <Ii, Ij> don?t need to be updated if rij=0. This can reduce the workload for global pheromone update. In additional, for the introduction of dynamic heuristics, there is no need of the evaporation rate. The heuristics of an edge will be 0 all the time, if the edge is not a rule. Though these edges doesn?t contribute to Path Intensity, they may play the role of connecting rule-chains which would be lost if these edges? pheromone was evaporated.

3.3. SRMining algorithm   Supposed tabuk is the tabu list of ant k. The ant k  located item-node i selects an edge between item-node i and item-node j according to the probability:  ? ? ?  ?? ?  ? ?  = ? ?  otherwise  tabuj tt  tt  tP k  tabuq iqiq  ijij  k ij  k   )()( )()(  )( ?? ??  ?? ??  (7)  where parameters ? and ? specify the importance of pheromone and heuristics. Pheromone tells ant how important the edge is in the past, while heuristics represents intensity of the edge involving in a longer rule-chain. Thus, SRMining algorithm is described as: Input:    FI-Bitmap Output: (?ij) N*N, (?ij) N*N, where i, j =1...N SRMining () { (?ij) N*N=0, (?ij) N*N=0;     // initialization for t=1? tmax do { for k=1?m do {i=random()%N; tabuk= {Ii}; pathk=<Ii> ;} for s=1? N do         // seek paths with for k=1?m do {    // longer rule-chains select the item-node j to be visited next with probability )(tPkij  given by formula (7)  pathk=pathk+<Ij>;  tabuk=tabuk?{Ij}; } for k=1?m do                // Print rule-chains for each rule-chain R?pathk do if(Length(R)>0) then PrintRuleChain(); UpdateHeuristics (); UpdatePheromone (); } }   4. Results and discussion   The Experiment is designed into two parts, the  result analysis and the comparison with FP-growth and DLG. Algorithms and data generators are programmed in JAVA on a PC with 1300MHz/ 512M.

4.1. Result analysis   Experimental datasets used are generated by data  generator, which is modified from the source file of IBM synthetic data generator of Linux version [8]. Its parameters include:  D is the number of transactions.

T is the average number of items in a transaction.

C is a integer array to store {MinSup, MinConf,  c1?cn}, where ci is the number of i-length rule-chains.

For example, D10KT10C{20%,50%, 100, 70, 50, 20, 10} is a dataset that consists of 10K transactions, 10 items in each transaction averagely and based on MinSup=20%, MinConf=50%, there are 100 1-length rule-chains, similarly, 70 2-length, 50 3-length, 20 4- length and 10 5-length rule-chains.

Table 1 gives ten continuous running results on dataset upwards, in which, Num is the number of rule- chains discovered, Acc is the accumulative mining rate, Average Acc is average accumulative mining rate, Amr is average mining rate, and parameters of the algorithm are set as ?=1, ?=1, m=1000 and tmax=20.

1 2 3 4 5 6 7 8 9 10 the running times  t he  n u mb  er o  f ru  le - ch  ai ns  Length=1 Length=2 Length=3 Length=4 Length=5     The result shows that, after running for several  times, the union of result can cover all rule-chains even thought short rule-chains mining rate is slightly less than that of long rule-chains in a running for the introduction of Path Intensity. Fig. 1 shows the same effect. On the other hand, from these experiments we also see the typical ACO performance characteristics, such as robust, self-adaptive, and positive feedback.

Fig. 1 the number of rule-chains discovered in ten running results  Table 1. Ten continuous running results  # length=1 length=2 length=3 length=4 length=5 Average  Acc Num Acc Num Acc Num Acc Num Acc Num Acc  1 98 98% 69 99% 50 100% 20 100% 10 100% 99.3%  2 95 98% 68 99% 48 100% 19 100% 10 100% 99.4%  3 100 100% 70 100% 50 100% 20 100% 10 100% 100%  4 99 100% 69 100% 50 100% 20 100% 10 100% 100%  5 97 100% 69 100% 49 100% 20 100% 10 100% 100%  6 95 100% 68 100% 49 100% 20 100% 10 100% 100%  7 99 100% 68 100% 50 100% 20 100% 10 100% 100%  8 82 100% 62 100% 45 100% 18 100% 9 100% 100%  9 99 100% 70 100% 50 100% 20 100% 10 100% 100%  10 98 100% 68 100% 49 100% 19 100% 10 100% 100%  Amr  96%  97%  98%  98%  99%     4.2. Comparison with FP-growth and DLG  Similarly, experimental datasets is generated by the  data generator whose parameters D is the number of transactions, T is the average number of items in a transaction and I is the number of whole items. Fig. 2 gives the result of SRMining, FP-growth and DLG on dataset D10KT10I1K under different MinSup. Since SRMining aims to discover longer rule-chains, here we use it to mine 1-length rule-chains. Let MinConf= 20%, ?=1, ?=1, tmax=20 and let m is one third of the number of frequent items in 1-FIs.

5% 10% 20% 40% 60% 80%  the minimum rule support  ru nn  in g  ti me  FP-growth  DLG  SRMining     Result shows that SRMining is better than other two  algorithms. The reason is that it scans database only once and its time complexity is only decided by scale of PAGraph. Especially, when scale of 1-FIs is small changes, its running time is stable approximately.

5. Conclusions and future work   By mining rule-chains, we can gain logics between  multi items. This algorithm is more intelligent as this process is robust because results can?t be affected by a few ants? fault. By analyzing paths with higher Path Intensity, we can also get the following information:  1) If there are only several short rule-chains in a path, it means many pheromones are focused on those short rule-chains, in which the edges may be covered by other rule-chains that lead to the pheromones being promoted. Consequently, one-to-many rules must exist.

The solution is to analyze cross points of these paths to search one-to-many rules.

2) If there are several mid-length rule-chains in a path, it means these rule-chains are relative independent. And if a longer rule-chain is existent in it, under most circumstances, the rule-chain may include some rules that interest user.

The future work should be done on the improvement of parameters of SRMining, such as ?, ? and evaporation rate (is 0), and we believe this will have our model work more efficiently.

Acknowledgements   This work was supported by the National High  Technology Research and Development Program, China(No.2007AA01Z188); the National Natural Science Foundation, China(No.60773073); the Tianjin Natural Science Foundation, China (No. 043600511).

