Towards an Optimal Algorithm for Recognizing Laman Graphs

Abstract A graph with vertices and edges is a Laman  graph, or equivalently a generically minimally rigid graph, if = 2 3 and every induced subset of vertices spans at most 2 3 edges. Laman graphs play a fundamental role in rigidity theory. We discuss the Veri cation problem: Given a graph with ver- tices, decide if it is Laman. We present an algorithm that recognizes Laman graphs in ( ( ) + log ) time, where ( ) is the best time to extract two edge disjoint spanning trees from a graph with vertices and 2 2 edges, or decide no such trees exist. So far, it is known that ( ) is ( 3 2 log )  1. Introduction  Generically minimally rigid graphs in the plane, also known as Laman graphs, are fundamental to rigidity theory [12, 5]. A graph with vertices and edges is a Laman graph if = 2 3 and every induced subset of vertices spans at most 2 3 edges.

Laman graphs have an inductive construction [5]: start with an edge for = 2 and, at each step, add a new vertex in one of the following two ways: (I) at- tach a new vertex via two edges to two existing vertices, or (II) delete an edge and connect a new vertex to both endpoints of that edge plus one other existing vertex.

These steps are called vertex addition (Henneberg I, in- sertion of type I) and edge splitting (Henneberg II, inser- tion of type II) respectively, and the result of each step is a Laman graph. A Henneberg sequence for graph is a sequence of vertex additions and edge splittings required to construct . The reverse operations for vertex addi- tion and edge splitting are called Henneberg deletion I and Hennberg deletion II, respectively. The sequence of such operations that completely decomposes is called  The authors would like to thank Ileana Streinu for organizing the 2005 and 2006 Barbados workshops, partially supported by NSF.

This work would not have been possible without participation in those workshops.

?Daescu?s research is supported in part by NSF award CCF-  0635013.

a reverse Henneberg sequence.

In this paper we consider recognizing Laman  graphs. Speci cally, we address the Veri cation prob- lem: Given a graph G with vertices, decide if it is Laman.

Most existing veri cation algorithms take quadratic time in the number of input vertices to recognize Laman graphs [8, 2]. A very elegant and simple algorithm is the pebble game algorithm, rst proposed by Jacobs and Hendrickson [6], and generalized later on by Streinu, Lee, and Theran in a number of papers [13, 7, 14, 4].

The pebble game algorithm solves the veri cation prob- lem in ( 2) time.

Recski [11] and Lovasz and Yemini [9] proved that a graph = ( ) is Laman if and only if, for each edge , the multigraph { } is the union of two edge disjoint spanning trees. In the remaining of this section we assume an edge of has been doubled and denotes the resulting graph.

A known subquadratic time algorithm is  due to Gabow and Westermann [3] and requires ( 3 2 log ) time. They solve this problem in two steps: (1) Find a 2-forest of (two edge disjoint spanning trees), which is done in ( 3 2 log ) time, and (2) Test if a data structure computed in step (1), called top clump, is empty: this is done in ( log ) time. Thus, step (2) is coupled with step (1), in the sense that if two edge disjoint spanning trees are given to step (2), computed by some arbitrary method, then step (2) should be changed and could require asymptotically larger time. Very recently, it was suggested to us that a method presented in [14] can be adapted to speed up the top clump test to ( ) time, assuming the data structures computed in step (1) are available.

A different veri cation algorithm was proposed re- cently by Bereg [2]. The method in [2] performs a step- by-step decomposition of , aiming to construct a hier- archical decomposition of , called a red-black hier- archy (RBH). It is proven in [2] that is a Laman graph if and only if it admits a RBH. The RBH construction in [2] has three steps: (1) Find two edge disjoint span- ning trees, by some method (Bereg uses an ( 2) time      algorithm to obtain the trees, but he could have used the algorithm in [3], for ( 3 2 log ) time); (2) Con- struct a red-black hierarchy, which is done in ( 2) time1 and (3) Certify the hierarchy, which is done in ( ) time. Since steps (2) and (3) do not depend on  how step (1) is performed, Bereg?s method decouples the computation of the two edge disjoint spanning trees in step (1) from the rest of the computation.

Our Results. We present an ( ( ) + log ) time veri cation algorithm based on the following simple ob- servation: from Corollary 4 in [2], it is not necessary to actually construct to decide is Laman; we only need to decide whether a RBH decomposition exists for . Thus, steps (2) and (3) above from Bereg?s algo- rithm become: (2) use the two spanning trees to decide whether admits a RBH decomposition.

Our algorithm has two steps: (1) Compute two edge disjoint spanning trees by the best possible method. We use the algorithm in [3] since this is the best we know (if, say, a simple ( log ) time algorithm is discov- ered for this part, we will use that one). This step takes ( 3 2 log ) time. (2) Given two edge dis- joint spanning trees for , we give a simple solution for deciding whether admits a RBH decomposition, that uses depth- rst search and segment trees only, and takes ( log ) time. This step is independent of how step (1) is done. At the end of step (2) we know if is Laman or not. Moreover, we also show that the RBH can be actually constructed in ( log ) time using a two steps procedure that is simple and easy to implement.

Thus, our algorithm decouples step (1) from step (2), to take advantage of future improvements on step (1), and solves the second step of the veri cation in ( log ) time instead of ( 2) time.

2. Red-black hierarchies  Red-black hierarchies (RBH) are introduced in [2] as follows. A hierarchy ( ) for a given graph ( ), | | = , is a graph ( ), =  ( ). is a set of edges forming a rooted tree. The function : ( ), de nes a one- to-one correspondence between the vertices of and the leaves of the tree, denoted as ( ). The function : ( ) ? ( ) maps an edge ( ) of  to the edge ( ) = ( 1( ) 2( )) of (called cross edge), so that 1( ) and 2( ) are ancestors, but not common ancestors, of ( ) and ( ), respec- tively.

A RBH is a hierarchy ( ) satisfying the following conditions: (1) The root of the tree has ex-  1An improved, ( log ) time solution, has recently been posted at [1].

d e  k  l  g  f n o  q  m  p  eadd  a  b  c  j  i  h  Figure 1: A graph = { }.

actly two children (root rule); (2) A vertex is the only child of its parent if and only if it is a leaf (leaf rule); (3) For any cross edge its endpoints have the same grand- parent but different parents in the tree (cross-edge rule); (4) Cross edges connect all grandchildren of a vertex and form a tree (tree rule).

Given , the construction of the RBH in [2] has two major phases. First, a copy of an edge of , , is added to and two edge-disjoint spanning trees, (called red tree) and (called black tree), are com- puted for = { } using a known method (if no such trees exist, then is not Laman and we stop).

A graph and its two edge disjoint spanning trees are shown in Figure 1. Second, a decomposition of is performed and a characterizing hierarchy = ( ) is constructed in correspondence with the steps of the decomposition. We describe this decomposition [2] be- low.

Suppose and let ( ) = . In the rst step, a root , corresponding to , is created in and is colored red. In the second step, the edge  is removed from and two nodes corresponding to the resulting black trees 0 and 1 are made children of in and are colored black.

Then, an iterative procedure is performed to con- struct . At the end of step 1, edges of one color form a spanning forest = { 0 } of = { 0 }, where are connected sub- graphs of , and each element of is a spanning tree of its connected subgraph . When restricted to these subgraphs, edges of the other color form a set  = {{ 0 0 0 0} { 0 }}. Each element of is a forest spanning its respective con- nected subgraph . The trees are ?linked? together in only with edges of color . There are +1 vertices of color at the last level of , each corresponding to a tree from . At the beginning of the -th step, all edges of color crossing the multi-cut de ned by      e q ka i jb h g c d  c d  a q k mnj  l f  i  a i h b l g e f p o n m q k  h g f n m o p  p o  p  p o n m  m o p  o p  b a i l q k j c d  nghkql  m o  ab i j f  e  Figure 2: at the end of step = 8 that completes the decomposition of .

are found and deleted from . At this point, con- sists of  P =0 | | connected subgraphs, and the trees  of color are the spanning trees of their respective subgraphs. For each vertex of corresponding to a tree from , + 1 vertices of color correspond- ing to the trees from are created in as children of . A cross edge is added between two vertices and at this now lowest level if the corresponding trees  and were previously in the same connected compo- nent and got separated at step 1 by removing an edge of color between them. Addition of cross edges to completes the -th step of the decomposition. At step + 1, these actions are repeated for the swapped colors.

When at some step a cut of color is to be found and some connected component does not have such cut, a vertex corresponding to a tree of color that spans is created in and the decomposition stops for .

The decomposition of ends when it has ended for all connected components.

The resulting graph characterizing the decompo- sition of the graph in Figure 1 is shown in Figure 2. The entire decomposition process is given in appendix.

After is constructed, a check of whether satis es the de nition of the RBH is performed. If the answer is positive, is a RBH and the corre- sponding graph is a Laman graph. The method in [2] takes ( 2) time to construct the decomposition- characterizing graph and ( ) time to verify that it satis es the de nition of the RBH.

3. A suf cient condition  We show that if all edges are removed from dur- ing the decomposition process, the graph constructed from the decomposition is always a RBH and thus is a Laman graph.

Vertices of correspond to spanning trees of con- nected subgraphs of . Anything marked by the sub- script in what follows refers to . ( ) denotes the connected subgraph of vertex . ( ) denotes the set of vertices of ( ). ( ) denotes a tree spanning ( ). ( ) denotes the set of vertices of spanned  by the tree .

We rst prove that the four RBH rules introduced  earlier always hold for the decomposition-characterizing graph of any graph = , if the edge set of  can be partitioned into two edge-disjoint spanning trees. Let ( ) denote the color associated with node (red or black). If = ( ) is red then is black and vice versa.

Root rule. At the very rst step, is empty and a node of color , corresponding to the spanning tree that does not contain the added edge , is created  in . The node is the root of . Then, is deleted from the other tree , which creates exactly two trees of color in and exactly two nodes of color in that are children of , corresponding to these two trees.

Thus, the root rule always holds.

Leaf rule. We rst prove that if a vertex is the only child of its parent then is a leaf. If a vertex is the only child of its parent, the connected subgraph ( ( )) could not be split any further during decomposition and ( ) = ( ( )). At the step when was created, the decomposition process has stopped for ( ): there was just one tree of color  ( ) in ( ( )) and just one tree of color ( ) (otherwise ( ( )) would have been  partitioned further and would have siblings). Hence, the vertex corresponding to ( ) is a leaf in .

Next, we prove that a leaf vertex cannot have any siblings. Suppose there is a vertex having 1 children and at least one of them is a leaf. The vertex corresponds to a connected subgraph spanned by a  tree of color = ( ) and a spanning forest of trees of color . Each of its children corresponds to a connected subgraph , = 1 2 , spanned by a tree of color and a forest of color (possibly contain- ing only one tree). If this spanning forest contains more than one tree, there are edges of color in connecting the trees of the spanning forest. At the next step of the decomposition these edges will be deleted, the spanning tree of color will split into at least two different trees and corresponding vertices will be created in as chil-      dren of . Hence, cannot be a leaf vertex. If the spanning forest of ( ) contains just one tree then a vertex corresponding to that tree, of color , is created in as a child of and again, cannot be a leaf vertex.

This argument holds for every child of , contradicting the assumption that at least one child of is a leaf.

Cross-edge rule. A cross edge is added between any two vertices and at step if their correspond- ing vertex sets ( ) and ( ) previously belonged to one connected subgraph and got separated at step 1 by removing the edge between them. At level  2 of there is always a vertex that corresponds to . The vertices at the same level of correspond  to connected subgraphs that are disjoint subgraphs of .

Hence, no other vertex at level 2 of can correspond to a connected subgraph containing ( ), ( ), their subsets, or the union of their subsets. The vertex corre- sponding to the connected subgraph is a common grandparent of and .

Again, according to the construction rules, parents of and in correspond to different connected subgraphs, so and have different parents.

Tree rule. If edges are removed from the tree spanning the vertex set ( ) corresponding to some  vertex of , +1 new trees result from and +1 nodes are created as grandchildren of in . For each edge deleted from , a cross edge is added between the vertices corresponding to the two sub-trees of that were connected by . Each grandchild of gets a cross edge incident to it. There are + 1 grandchildren of and edges connecting them. The cross edges form a tree spanning all the grandchildren of .

We have shown that red-black hierarchy rules hold for any . Then, we only need to check if satis es the general de nition of a hierarchy.

Lemma 3.1. If all edges are removed from during the decomposition process then the characterizing graph of satis es the de nition of hierarchy.

Proof. The edges of are the union of the edges of the rooted tree and the cross edges.

There is a cross edge = ( ) in for each edge = ( ) of : The edge is deleted from when it crosses the cut separating from ; according to the construction rules, a cross edge is then added be- tween the vertices of corresponding to the connected components of and at the current step.

There is one-to-one correspondence between the leaves of and the vertices of : Since the graph split- ting procedure continues until all edges are removed, each vertex of is eventually disconnected from the rest of the graph by deleting an edge of some color .

A vertex corresponding to a tree of color spanning  the connected subgraph = { } is then created in . Since cannot be split further, the decomposition  stops for and becomes a leaf vertex of . Also, there is no leaf vertex in that does not correspond to a vertex of . Suppose there exists such a vertex in .

Then, it corresponds to a tree spanning a connected sub- graph , with | | 1. This means that contains edges that were not deleted during the decomposition of , a contradiction.

The endpoints of are ancestors of ( ) and ( ),  respectively, but they are not their common ancestors: recall that ( ) and ( ) are the leaf vertices of cor- responding to vertices and of . The vertex corresponds to some connected component ( ). The vertices of that are descendants of correspond to connected components over the subsets of ( ). The leaf vertices of that correspond to vertices in ( ) are the descendants of in . Since ( ), is an ancestor of ( ). Similarly, is an ances-  tor of ( ). The vertices and are connected by a cross edge corresponding to two disjoint connected sub- graphs. Therefore, cannot be an ancestor of ( ), and the end vertices of are not common ancestors of ( ) and ( ). 2  Lemma 3.2. If has edges left at the end of the decom- position process, the characterizing graph of does not satisfy the de nition of hierarchy.

Proof. If there are non-deleted edges of when the decomposition stops, then there are no corresponding edges for them in . In addition, we do not have a one-to-one map from to ( ): some leaves of correspond to connected subgraphs containing several vertices. 2  Thus, building is not required for certifying Laman graphs: just decompose based on the rules in [2] and check if has edges left when the decom- position ends.

4. The decomposition algorithm  We have shown that building is not required for verifying that is a Laman graphs. It is suf cient to perform the decomposition of according to the rules from [2] and then check whether there are edges left in . The decomposition algorithm has some no- table features. At each step edges of only one color are deleted. The groups of red and black edges are deleted in turns. At each step, except the rst and the last ones, at least one edge is deleted from (some edges may never be deleted). Thus, the edges of can be grouped so that edges of one group are deleted from at the same step. The decomposition process provides a natu-      ral order on these groups. We denote this ordering as = ( 2 3 ), where the index of corre-  sponds to the step at which the edges of the group are deleted.

Instead of , we use to characterize the graph decomposition. Our main goal now is to speed up the decomposition algorithm from [2] using the following simple observation: deletion of any edge = ( ) from its tree (of color ( )), where is a parent of in a DFS ordering of the tree of color ( ), always forms two trees such that one of them is rooted at and all nodes in that tree are descendants of .

We slightly modify the graph decomposition algo- rithm from [2]. The edges to be deleted at the next step are identi ed at the end of the preceding step andmarked for deletion. At the rst step, is marked for deletion (and no other action is performed). Each iterative step in consists of removing the marked edges of some color and identifying and marking the edges crossing the  cuts of the opposite color that appear after removing the marked edges. We also note that once the original graph has split into several connected subgraphs, the de- composition proceeds independently on each subgraph, and the problem of nding the edges to be deleted at the subsequent step can be viewed as several independent subproblems, each on a distinct connected subgraph.

Consider the graph and its two edge disjoint spanning trees and , rooted at vertices and , respectively. Let ( ) be the depth- rst search  traversal of starting at and using only edges of color , where is either red or black. We assign each vertex of two DFS order numbers, one from  ( ) and another one from ( ). New edges are never added to the trees, so the numbers never change. For any edge of color , it is always possible to establish the parent-child relationship of its endpoints by looking at their DFS numbers for color . Whenever an edge is mentioned in this text as a vertex pair, the rst vertex is always the parent of the second vertex in  ( ( )).

When an edge = ( ) of color is deleted from  a tree rooted at some and spanning a connected subgraph , two trees emerge: rooted at and rooted at . Only the vertices of are descendants of in DFS(c). The ancestor/descendant relationship can be established in the ( ) tree by looking at the discovery and nish times ( [?] and [?], respectively) of the vertices.

Lemma 4.1. An edge ( ) of color crosses the cut ( ( ) ( )) induced by the deletion of the edge ( ) of color if and only if one of its endpoints is a descendant of and the other one is not, i.e., exactly one of its endpoints discovery times is in = [ [ ] [ ]].

Proof. If [ ] 6 and [ ] , then and , so clearly crosses the cut. A symmetric argument  applies if [ ] and [ ] 6 .

If [ ] 6 and [ ] 6 , neither nor are in ,  so both endpoints of are in and does not cross the cut. If [ ] and [ ] , both endpoints of are in and does not cross the cut. 2  From Lemma 4.1 it follows that if we associate an interval [ [ ] [ ]] with every edge of color , the in- tervals corresponding to the edges crossing the cut have exactly one endpoint in .

We identify such intervals using a segment tree data structure enhanced with two lists at each internal node, one sorted by the start time of the intervals stored at the node and one sorted by their nish time. A segment tree [10] is a balanced binary search tree that stores a set of intervals with endpoints from a nite set of abscissae (intervals corresponding to edges of color , for exam- ple). Each of its nodes has an interval ( ) associated with it and stores a list of input intervals intersecting ( ). Binary search in a segment tree allows to report the intervals containing a query point.

In our case, the endpoints of the intervals are integer numbers, so an interval containing a point ? , for any 0 1, contains the point as well. First, we nd the intervals with one endpoint before [ ] and the other endpoint in by querying for intervals containing the point [ ] . Second, we nd the intervals with one endpoint in and the other endpoint after [ ] by querying for intervals containing the point [ ] + .

To ensure that each returned interval has an end- point in we augment the standard segment tree by stor- ing two sorted lists at each node, instead of just one list.

With each node , we store a list ( ) of inter- vals that intersect ( ) that is sorted by the nish time of the intervals in non-decreasing order; similarly, the list stores the same intervals sorted by their start- ing time in non-increasing order. We give both queries above an additional parameter: [ ] for the rst one and [ ] for the second one. The rst query only looks at  the lists and reports the intervals that have their right endpoint no greater than [ ]. The second query only looks at the lists and reports the intervals that have their starting point no earlier than [ ]. Thus, this data structure allows us to return intervals with exactly one endpoint in . Each query with an edge (interval ) takes (log + ) time, where is the number of in- tervals (crossing edges) reported. To avoid reporting an interval more than once, the interval is deleted from the segment tree (including the sorted lists associated with the nodes that store it) when it is returned by a query.

This can be easily done in (log ) time. Having two segment trees, one for the red intervals [ [ ] [ ]]      of the black edges and the another one for the black in- tervals [ [ ] [ ]] of the red edges, allows to ef ciently identify edges of the cuts at each step of the decomposition.

Lemma 4.2. The decomposition of can be done in ( log ) time.

Theorem 4.3. Given a graph with vertices and edges deciding whether is a Laman graph or not can be done in ( ( )+ log ) time, where ( ) is the time to extract two edge disjoint spanning trees from or decide no such trees exist.

Proof. We can check that = 2 3 in ( ) time.

Finding two edge disjoint spanning trees or deciding no such trees exist takes ( ) time. The best known al- gorithm so far gives ( ) = ( 3 2 log ) time [3].

The decomposition takes ( log ) time: ( log ) for the segment trees, ( log ) to answer all queries, and ( ) to check if has any edges left at the end of the decomposition. 2  5. The reconstruction algorithm  The order in which edges are deleted from during the decomposition determines the structure of the corre- sponding red-black hierarchy , so given , one can un- ambiguously construct in top-down fashion accord- ing to the rules from [2]. The vertices of correspond to subtrees of and , and there is a vertex in for each distinct sub-tree (of or ) that appeared dur- ing the decomposition of . In the original approach, to construct the -th level of , one has to know the span- ning sub-trees at step 2 of the decomposition and to gure out what trees appear after removal of edges at the beginning of step . It takes ( ) time to nd the emerging trees.

We consider the decomposition process in reverse order (i.e. start from red and black disjoint trees and add edges to them until two spanning trees are formed), and take advantage of the fact that it is faster to union the disjoint sets into larger sets than to partition the trees into disjoint sub-trees. As a result, the proposed bottom- up construction method is faster and produces the same graph as the top-down approach.

The last group of = ( 2 3 ) contains edges of some color deleted at the very last step of the decomposition. Each endpoint of edges of corre- sponds to a subtree of of color spanning only the vertex . A leaf node = ( ) is added to the -th level of for each such vertex . Only one leaf ver- tex is created for the endpoint shared by multiple edges from . For every edge ( ) of a corresponding cross edge ( ) = ( ( ) ( )) is added to . For  p  o p  o  p o  Figure 3: after considering edges of 8 = {( )}.

m o p  m  p  o p  m o  p o  Figure 4: after considering edges of 8 and 7 = {( ) ( )}.

every leaf vertex ( ) of , its parent should be at level 1 of , corresponding to a subtree in that is of  color and spans only the vertex . Such parent ver- tex = ( ( )) is added to level 1 of along with a tree edge connecting and ( ) (we call this the parent creation rule). The vertices of con- nected by a cross edge have the same grandparent. For every cross edge tree formed at the -th level, a ver- tex is added to level 2 of , as well as a tree edge connecting and , for every . We have completed level of as well as added some elements to the two upper levels. See Figure 3 and Figure 4 for an illustration.

At the -th iterative step for each cross edge ( ) of of color two vertices and on the -th level of are identi ed. They correspond to trees in of color that contained and respectively at the -th step of the decomposition. If for some endpoint of an edge from does not exist on the -th level of , a new vertex should be created at the -th level and a parent for it should be added following the parent creation rule.

Then the cross edge corresponding to ( ) is added to between and . After all edges of are consid-  ered, all cross-edges of the -th level of are in place.

For each cross edge tree formed at the -th level of      , a node is added to level 2 of . That grandparent node becomes a parent of the parents of the vertices of spanned by the cross-edge tree . At this time the  -th level of is complete and levels 1 and 2 of are partially constructed. Repeating these steps for all , 2, yields the RBH .

Lemma 5.1. Given two edge-disjoint spanning trees for , a red-black hierarchy for , if it exists, can be con-  structed in ( log ) time.

