REAL-TIME FEATURE EXTRACTION FOR HIGH SPEED NETWORKS

ABSTRACT  With the onset of Gigabit networks, current generation net- working components will soon be insufficient for numerous reasons: most notably because existing methods cannot sup- port high performance demands. Feature extraction (or flow monitoring), an essential component in anomaly detection, summarizes network behavior from a packet stream. This information is fed into intrusion detection methods such as association rule mining, outlier analysis, and classification algorithms in order to characterize network behavior. How- ever, current feature extraction methods based on per-flow analysis are expensive, not scalable, and thus prohibitive for large-scale networks. In this paper, we propose an accu- rate and scalable Feature Extraction Module (FEM) based on sketches. We present the details of the FEM design on an FPGA and show that using FPGAs we can achieve sig- nificantly better performance compared to existing software and ASIC implementations. Specifically, the optimal FEM configuration achieves 21.25 Gbps throughput and 97.61% accuracy.

1. INTRODUCTION  Traditionally, intrusion detection techniques fall into two categories: signature (or misuse) detection or anomaly de- tection. Signature detection looks to find well-known pat- terns of attacks and intrusions by searching for pre-classified signatures either in network traffic or data patterns. Since general-purpose processors (i.e., software implementations) cannot meet the required performance limitations, numerous projects have investigated dedicated hardware (including re- configurable hardware) for such tasks [1, 2, 3, 4, 5].

Anomaly detection, which is designed to capture behav- ior that deviates from the norm, is the counterpart to signa- ture detection. These systems ?predict? anomalous behav- ior. Hence, they can detect new/unknown intrusions. How- ever, they suffer from false alarms (false positives) and also not sounding alarms when attacks do occur (false negatives) [6]. Since the number of new attacks is increasing and varia- tions of old attacks are more prevalent, next generation IDSs  must employ anomaly detection.

Regardless of the underlying algorithm, the first step in  anomaly detection is the real-time network feature extrac- tion. Due to the complexity of gathering detailed informa- tion in high speed links, existing techniques only monitor a small amount of features in a packet stream, limiting their effectiveness. Feature extraction mines more information than is readily available at the packet level. Besides the packet payload, a single packet does not offer much infor- mation. Yet by processing a series of packets, one can mine for additional characteristics of the network activity between hosts. Our architecture allows for characterization of a sud- den increase network activity. This information is needed for anomaly detection algorithms such as rule mining, clas- sification, and outlier detection.

In this paper, we propose a Feature Extraction Module (FEM). FEM accurately characterizes network behavior and always provides an up-to-date view of the network environ- ment. Depending on the application utilizing this informa- tion (e.g., rule mining, classification), different properties get monitored in the network. As we will describe in the following sections, our architecture can be easily configured to gather such different types of information. By utilizing the reconfigurable capabilities of FPGAs, these changes can be effectively performed. Because of such configuration and high performance requirements, FPGAs are an ideal imple- mentation medium for their reconfigurability and inherent parallelism. Our simulation results prove the sketch data structure a viable alternative to expensive per-flow methods.

In addition, our FEM implementation requires a constant amount of memory and achieves a guaranteed performance level, important characteristics for networking hardware de- sign.

This paper is organized as follows. Section 2 presents a background of feature extraction measures and an introduc- tion the types of attacks plaguing many networks. Section 3 presents the FEM architecture and its components. Section 4 demonstrates the applicability of our architecture. Simula- tions and FPGA implementation are diagrammed in Section 5. Then related work is shown in Section 6 with conclusions     in Section 7.

2. BACKGROUND  Our architecture is a necessary precursor for online anomaly detection. Although FEM can be configured to gather in- formation for any anomaly detection scheme, in this paper we focus on detecting two of the most popular network at- tacks: denial-of-service (DoS) attacks and port scanning, a mechanism in worm propagation. A majority of DoS attacks are SYN floods, which send connection requests faster than a machine can process them. The well-known TCP 3-way handshake is below. sends a SYN segment with client?s ISN (Initial Initially, the attacker creates a random source IP for each packet with the SYN flag set to request a new connec- tion. The victim responds with a packet having the SYN and ACK flags set and then waits for a confirmation packet, which will never arrive. Typically connection tables wait a period of time before dropping the entry. In this time, the victim is bombarded with SYN requests and the table fills up. As a result, the victim refuses any additional connection requests even if they are legitimate. Typical SYN flood be- havior involves a large amount of packets with the SYN flag set directed at a victim.

Port scanning, on the other hand, is probably the most common and versatile type of intrusion mechanism. For ex- ample, with worm propagation, in order to distribute copies of itself, the worm must find other hosts vulnerable to it.

Worms may target a specific host or search for any number of hosts. We classify three well-known port scan methods: vertical scan, horizontal scan, and block scan [7][8]. Hori- zontal scans are the most common, scanning a range of IPs on a particular port. The port number is often unique as it reflects the susceptibility the worm is exploiting. Verti- cal scans target a specific host and search for open ports on that host. The third scan type, block scan, is a combination of horizontal and vertical scans for different ports and ma- chines. Fortunately, port scanning requires a real source IP address instead of a spoofed one. Therefore, it is possible to track port scan behavior from the source IP address.

3. FEM ARCHITECTURE  In this section, we introduce the feature extraction mod- ule (FEM), which characterizes network behavior within an interval of time or specified interval of connections. Net- work behavior represented by the FEM sufficiently reflects the current state of the network. Thus, real-time profile of the network is always available for processing with intrusion detection schemes such as data mining, outlier analysis, sta- tistical methods, etc [9].

The architecture?s data storage component models the idea of sketches [10], which are used in data stream mod-  elling for summarizing large amounts of information requir- ing a small constant amount of memory. Sketches are a probabilistic summary technique for analyzing large network streams without keeping per-flow state that make vector pro- jections onto other sketches to infer additional information.

Our case study will show how the relationships between sketches aid in inferring additional network characteristics that are not explicitly monitored. To achieve fast execution and to achieve effective adaptation, we implement our archi- tecture on an FPGA. The regular structure of sketches maps well onto an FPGA. We exploit the inherent parallelism in the sketch to increase throughput and obtain significant link speeds.

It is possible to model anomalous behavior associated with two general types of intrusions: time-based and connection- based. Time-based attacks cause an increase in network ac- tivity in a period of time, referred to as ?bursty attacks.? SYN floods are an example, where connection tables are flooded in a period of time disabling the victim machine to service new connection requests. Connection-based attacks do not have a recognizable temporal aspect. They are some- times referred to as ?pulsing zombie attacks.? Port scans may release connection requests in the span of seconds or days. Therefore, intrusion detection methods focusing on large volumes of network activity are ineffective. Our archi- tecture can capture both connection and time-based statis- tics.

3.1. FEM Functions  There are two main functions supported by the FEM:  UPDATE (k, v) to change the value in the sketch, ESTIMATE (k) to correctly retrieve a value from the sketch  Both functions take in a key k, which is input to H hash functions in the feature sketch. The key k, in this case, is any combination of the 5-tuple fields present in TCP/IP packet headers: source IP, destination IP, source port, destination port, protocol. The 6-bit flag field, also in a packet header, assists the control logic for intelligent hashing of the 5-tuple fields depending on what network characteristics are ana- lyzed.

3.2. Architecture  Figure 1 highlights our architecture, consisting of a compre- hensive feature controller (FC), hash functions (HF), feature sketch (FS), and a data aggregate (DA). The FEM architec- ture provides a fast, scalable, and accurate platform from which important network characteristics can be monitored and tracked in real-time. FEM can be configured to monitor a plethora of network characteristics by using the semantics of the TCP/IP protocol. Also, FEM requires a small memory     Feature Sketch (FS) H x K  Fig. 1. Feature Extraction Module with one Feature Sketch  footprint while maintaining a high level of accuracy, making it an attractive alternative to expensive per-flow methods.

The feature controller (FC) coordinates the inputs to the hash functions using the flags of a packet header. The recon- figurable aspects of FPGAs make reprogramming possible to monitor a variety of network statistics. Our case study in Section 4 focuses on open connection requests originating from or incoming to hosts by utilizing the SYN and ACK flags. Other possible statistics include the number of live connections, the flow size of active connections, amount of service-related traffic, or connection based statistics such the number of connections for specific services on a host. These measures would utilize the PSH (push), RST (reset), FIN (finish), and URG (urgent) flags.

For instance, a feature sketch monitoring web traffic at a particular host would use the source IP and destination port fields. Port 80 is designated as the port for http. Other destination ports such as 20 or 21 are designated for FTP traffic and 23 for telnet services. However, each FS moni- tors only one network characteristic. By using multiple FSs along with the relationships between FSs, we can infer ad- ditional network behavior information.

The feature sketch (FS) is an application of sketches used for data stream modeling. It uses a constant amount of memory and has constant per-record update and recon- struction cost. Each row in the FS is accessed in parallel with different hash functions. This favors FPGAs versus ex- pensive per-flow methods. An FS contains H rows each of length K. When H?1, the accuracy of ESTIMATE queries improves. Section 5 presents the accuracy results.

This increased accuracy is achieved by addressing each row in the FS with a different hash function (HF). This way, the distribution of information varies for each row. We chose the Jenkins Hash for its speed and provable scatter proper- ties. It is implemented in various Linux kernels as a com- ponent to the IPtables connection tracking module [11][12].

With an FPGA, all hash functions are computed in paral- lel. Also, by pipelining the Jenkins Hash, FEM can accept a packet on every clock cycle, thus increasing throughput.

Lastly, the data aggregate (DA) component takes H val- ues and estimates the actual value for a query. Using statisti- cal estimation techniques, we show that ESTIMATE queries to the FS are accurate. The heuristic we implement to esti- mate the value of a query takes the minimum of the H values  in the FS. The minimum value suffers the least from colli- sions. Other estimation techniques are plausible [9], but we found the minimum estimate usually gives the best results and the least hardware complexity. Minimum comparisons are performed in parallel such that this module is not on the critical path of FEM.

4. CASE STUDY: EDGE ROUTER  In this section, we present an application of FEM at the router level for characterizing network behavior. Figure 3 is a simple diagram of network traffic occurring at any two nodes A and B. Node A represents outgoing traffic. The figure depicts different types of incoming traffic to node B through different ports. Port scans and SYN floods access any range of ports.

A  B Network B  Fig. 2. Case Study Example  If the FEM is placed at the host level, for example at A, the architecture is simple. Each node is aware of its lo- cation when processing network packets so the feature con- troller FC easily preserves connection ordering. However, when placing FEM at a router, additional logic is needed to preserve connection ordering. For example, when A and B communicate with each other, the source IP/port and desti- nation IP/port fields in a packet are not consistent with the particular node which started the connection.

This case study illustrates how to apply FEM to monitor network activity usually associated with SYN flood and port scans from a router?s perspective. Each FEM consists of a number of FSs. For each FS, the key is denoted K and the feature value is denoted V. The source IP is designated SIP, destination IP DIP, source port SPORT, destination port DPORT, and protocol, PROTO. The flags applicable for this case study are the SYN and ACK flags. We want to track the behavior associated with these two attacks.

First, it is known that SYN flood traffic is directed at a (DIP, DPORT) combination. Port scans are more flexible and use any combination of (DIP, DPORT). With an array of FSs, network behavior can be characterized for any given window of packets in a network stream. To monitor the be- haviors of port scans and SYN floods, we propose the setup in Figure 4.

Four FSs are accessed and updated in parallel with a stream of packets. Each FS monitors a different network     Fig. 3. Case Study Example  characteristic. Our architecture favors FPGA implementa- tion since the feature controller can be reprogrammed and easily placed back into the network without any modifica- tion to the core architecture. Section 5.2 details the FPGA implementation and performance of a FEM module with one FS. Because multiple FSs are accessed in parallel, the width of the FEM has a minor impact on performance.

FS1 aids in SYN flood detection by monitoring the num- ber of un-serviced SYN requests for specific services. When a machine services SYN requests, it responds with a packet having the SYN and ACK flags set. For a SYN packet, a count value is incremented. For a SYN/ACK response the count is decremented. By placing FS1 at an edge router, connection ordering relative to the DIP is easily preserved by checking the flags in the packet. All connections in FS1 are candidates for SYN floods and we denote this set SYN- FLOODset.

FS2 is monitors hosts with a large number of partially completed SYN requests. This activity indicates vertical scans or SYN floods. Notice FS2 is a superset of FS1. FS2 contains all types of traffic at a particular IP. By querying both FSs with ESTIMATE, we can approximate the percent- age of types of traffic at any DIP. Removing SYNFLOODset from FS2 leaves candidates for vertical scans, VSCANset.

FS3 observes the traffic from any SIP that causes incom- plete SYN requests. This measure includes vertical, hori- zontal, and block scans. To differentiate this activity, FSN is implemented to oversee the amount of traffic between any two hosts.

For a SIP ? FSN, if there is a DIP ? V SCANset and FS3 returns a value greater than a threshold (pre-determined by other intrusion detection algorithms), we claim SIPx is ver- tically scanning DIPx. If not, SIPx may be horizontally or block scanning on the network. Using both FS3 and FSN , we are able characterize additional network behavior.

The main difference between each FS is how the FC co- ordinates addressing each FS. As described, the flags SYN and ACK are used to intelligent configure each FEM. Nonethe- less our architecture is general enough to measure other net- work characteristics. Using SYN/FIN relationships for open- ing and closing network connections, it is possible keep an FS updated with traffic flow sizes.

FEM can be employed at both the edge routers or on spe- cific hosts. Our example contains extra logic for router im- plementation (connection ordering). Host implementation would actually be simpler because the perspective of net-  work traffic is narrower.

5. RESULTS  5.1. Simulations  In this section, we investigate the accuracy of using fea- ture sketches by testing different FS sizes. There are no known benchmarks specifically compiled for feature extrac- tion, so we arbitrarily chose six days of traces from the 1999 DARPA Intrusion Detection Evaluation [13]. Half of the traces contain labeled attacks and the other half do not.

Nonetheless, FS should accurately represent the network en- vironment.

We simulate a FS (K=(SIP, DIP, DPORT, SPORT), K=(SYN- SYN/ACK)). Our test on the FS is more intensive because more connections are simultaneously tracked. By virtue of design, FS is constantly updating; so we stream in 24 hours of network activity and query the FS afterwards to compare the FS estimate with exact per-flow results.

H=1  H=2  H=4  H=8  1024 2048 4096 8192 16384 32768  Fig. 4. K(FS row length) vs. Accuracy  Figure 4 presents the accuracy of using a FS. H repre- sents the number of rows in the FS and K represents the size of each row. The accuracy is measured as the percentage of precisely estimated flows (i.e., where the estimated value is equal to the actual value) out of all flows in the DARPA traces. The results of all six days are averaged together. For multiple hash function results (H ? 1), we use the Jenkins Hash with different seed values.

H K Accuracy 1 16384 97.4238% 2 8192 97.9699% 4 4096 97.6100% 8 2048 95.6835%  Table 1. Constant Total K = 16384 entries  When keeping K constant and increasing H, the accu- racy also improves. For example, with H=1, K=2048, the accuracy is 84.3%. With H=2, K=1024, the accuracy in- creases to 87.8%. The 3.4% difference equates to 5586 more     precisely estimated flows of the total 164,276 flows. How- ever, in most cases increasing K boosts accuracy more than increasing H. This is attributed to hash function limitations, such as poor scattering or lack of variability between differ- ent hash functions, or unavoidable collisions in small row size K (ex. H=8, K=1024)).

Table 1 represents an example of this behavior. The ac- curacy improves when increasing the number of rows until H=8, at which point the small K value limits the accuracy.

Overall, however, the FS data structure ably satisfies accu- racy demands. In Section 5.2, we investigate how increasing H changes throughput and FPGA performance.

H=1  H=2  H=4  H=8  1024 2048 4096 8192 16384 32768  Fig. 5. K (FS row length) vs. Average Deviation  Figure 5 reports another measure of the effectiveness of feature sketches, the average deviation of estimations from exact per-flow results. Clearly, increasing H improves esti- mation of, in this case, SYN-SYN/ACK values. This trend persists for other network behavior measures. As in Figure 5, the gap between H=1 and H=2 is the largest. It shows that our datasets result in mostly 2 collisions. This fact fa- vors more balanced FS configurations versus a one row FS where collisions adversely affect the accuracy.

5.2. FPGA Implemenation  FEM was implemented on a Xilinx VirtexII xc2v1000 chip.

This member of the Virtex II family contains 5120 slices and 40 16Kb Block RAM modules. We used Synplify Pro 7.2.1 for logic synthesis and the Xilinx ISE 5.2i suite for placement and routing. For our hash function, the Jenkins Hash was extensively pipelined to operate at 270.6 MHz.

Table 2 contains the performance and area metrics for FEM implemented for edge routers. The performance re- sults are similar for host-level implementation since the added logic in the feature controller (FC) is not on the critical path of the FEM. We test configurations for H=1, 2, and 4. Through- put, clock frequency, and slices are reported for three overall row sizes K=8192, 16384, and 32768. The throughput value is calculated from the 5-tuple data source IP, destination IP, source port, destination port, protocol and the 6-bit flag field used to configure the FC.

It is clear that for a given total memory size, increasing  H K slices Freq(MHz) Throughput(Gbps) 1 8192 628 167.5 18.42 2 4096 1263 202.6 22.29 4 2048 2543 216.6 23.82 1 16384 634 169.3 18.62 2 8192 1265 190.1 20.99 4 4096 2543 193.2 21.25 1 32768 643 113.6 12.50 2 16384 1274 135.4 14.89 4 8192 2543 152.3 16.76  Table 2. Feature Sketch Place-and-Route  H increases throughput because it reduces the memory size and hence reduces the access times. Similarly, for a constant H, reducing the total memory amount (K) also increases the throughput. Among the simulated configurations, the best throughput of 23.81 Gbps is achieved for H=4 and K=2048.

However, note that this configuration has a relatively low accuracy of 94.1%. Hence, when one considers the ?accu- racy * throughput? product, the best configuration is H=4 and K=4096, which can extract information at 21.25 Gbps.

Note that the increase in number of slices is mostly a re- sult of using multiple hash functions in parallel. Replicating the hash functions allows higher throughput and frequency at the expense of area. If there are area constraints, how- ever, one could use one hash function implementation for multiple FS rows, providing the values to each of them at consecutive cycles. This would result in decreased through- put but also reduced area requirement. Since the Jenkins Hash is pipelined, mapping a hash function to multiple rows would not introduce long extra delays.

In conclusion, the simulations show that feature sketches are effective data structures for network behavior characteri- zation. The simulation results demonstrate the gains in accu- racy and estimation ability of feature sketches. FPGAs take advantage of multiple FS rows to satisfy Gigabit throughput demands. Consequently feature sketches, the main compo- nents of FEM, are attractive data structures for FPGAs to exploit parallelism.

6. RELATED WORK  Many networking applications have found their way into hardware implementations [6]. With link speeds increasing and the multitude of network applications, future solutions place a premium on both performance and flexibility. FP- GAs qualify for both these requirements. Current generation of FPGAs can operate at speeds ranging from 50 MHz to 250 MHz and have capacity on par with large ASIC designs.

For example, FPGAs have been used in developing plat- forms for experimentation of active networks [14] for ser- vices such as detection of Denial-of-Service (DoS) attacks,     real-time load balancing for e-commerce servers, real-time network based speed recognition servers for v-commerce, etc. Also, high speed front-end filters and security manage- ment applications for ATM firewalls have found their way onto FPGAs to reduce performance penalties at the IP level [15].

As for flow monitors, TCP/IP Splitter [5] has been im- plemented as part of the FPX (Field-Programmable Port Ex- tender) project to perform flow classification, checksums, and packet routing. However, this implementation is lim- ited to 3 Gbps monitoring. In our previous work, we im- plemented a flow size monitor similar to FEM [7]. How- ever, the design was not updateable when connections were completed. This limitation prevented achieving an accurate representation of the network. In this paper, we modify the architecture for update information, which increases the ac- curacy by almost an order of magnitude for comparable con- figurations. Other studies [16] agree that per-flow methods will not suffice and propose both intelligent algorithms and multistage filters using multistage hash tables to increase ac- curacy over Cisco?s NetFlow (which uses sampling to char- acterize network traffic).

Jupiter T-Series routers also implement a propriety flow monitoring mechanism. Although the router runs at 10 Gbps link speeds, the monitoring is limited to 250K packets per second for each physical interface card. It is also limited in the maximum number of flows (400K) and flow creation rate (12K new sessions per second). Before these dedicated hardware solutions, flow monitoring tools had been imple- mented in software, such as HTTPDUMP.

7. CONCLUSIONS  Real-time feature extraction is a core component for any in- trusion detection system that claims to be truly real-time.

Signature detection can be done live, but live anomaly detec- tion requires a comprehensive picture of the network envi- ronment. Our feature extraction module provides this func- tionality using feature sketches, which map well onto recon- figurable hardware. We took advantage of pipelining and in- herent parallelism in FPGAs to increase throughput. Many network behavior parameters can be monitored using our architecture by making small modifications to the design.

These characteristics include flow size, number of open con- nections, number of un-serviced connection requests, etc.

The novelty of our design lies in modifying a single FS row into multiple FS rows to increase the accuracy up to 97.61%, reduce the estimation error to an average of 0.0365 packets, and achieve throughputs up to 21.25 Gbps for a 16K entry FEM.

8. REFERENCES  [1] J. W. L. Sarang Dharmapurikar, Michael Attig, ?Design and implementation of a string matching system for network in- trusion detection using fpga-based bloom filters,? 2004.

[2] Z. K. Baker and V. K. Prasanna, ?Time and Area Efficient Pattern Matching on FPGAs,? in The Twelfth Annual ACM International Symposium on Field-Programmable Gate Ar- rays (FPGA ?04), 2004.

[3] Z. Baker and V. Prasanna, ?Time and area efficient pattern matching on fpgas,? in FPGA ?04, 2001.

[4] B. L. Hutchings, R. Franklin, and D. Carver, ?Assisting net- work intrusion detection with reconfigurable hardware,? in IEEE FCCM?02, 2002.

[5] David V. Schuehler, John W. Lockwood, ?Tcp splitter: A tcp/ip flow monitor in reconfigurable hardware,? in Hot In- terconnects 10 (HotI-10), 2002.

[6] Vinod Yegneswaran, Paul Barford, and Johannes Ullrich, ?In- ternet intrusions: Global characteristics and prevalence,? in ACM SIGMETRICS, 2003.

[7] V. K. Aleksander Lazarevic, Levent Ertoz, A. Ozgur, and J. Srivastava, ?A comparative study of anomaly detection schemes in network intrusion detection,? in 3rd SIAM Con- ference on Data Mining, May 2003.

[8] S. Staniford, J. A. Hoagland, and J. M. McAlerney, ?Practi- cal automated detection of stealthy portscans,? in Journal of Computer Security, 2002.

[9] B. Krishnamurthy, S. Sen, Y. Zhang, and Y. Chen , ?Sketch based change detection: methods, evaluation, and applica- tions,? in ACM SIGCOMM IMC, 2003.

[10] S. Muthukrishnan, ?Data streams: Algo- rithms and applications,? 2003. [Online]. Available: http://www.cs.rutgers.edu/muthu/stream-1-1.ps  [11] B. Jenkins, ?Jenkins, hash functions and block ciphers,? 2005. [Online]. Available: http://www.burtleburtle.net/bob/hash/index.html  [12] N. Firewalling, ?Nat and packet mangling for linux 2.4.? [Online]. Available: http://www.netfilter.org/  [13] M. L. Laboratory, ?Darpa intrusion detection evaluation.? [Online]. Available: http://www.ll.mit.edu/IST/ideval/  [14] Dollas, A. et al, ?Architecture and applications of plato, a reconfigurable active network platform,? in The 9th Annual IEEE Symposium on Field-Programmable Custom Comput- ing Machines (FCCM?01), 1999.

[15] McHenry, J. T., P. W. Dowd, F. A. Pellegrino, T. M. Carrozzi, and W. B. Cocks, ?An fpga-based coprocessor for atm fire- walls,? in IEEE Symposium on FCCM, April 1997.

[16] Estan, C., and Varghese, G, ?New directions in traffic mea- surement and accounting,? in ACM SIGCOMM 2002 Confer- ence on Applications, Technologies, Architectures, and Pro- tocols for Computer Communication, 2002.

