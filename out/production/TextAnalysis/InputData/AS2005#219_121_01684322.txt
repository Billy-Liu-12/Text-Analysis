EPOSee- A Tool For Visualizing Software Evolution

Abstract  Software archives are a rich source of information about the development process of a software system. Us- ing data mining techniques rules can be extracted from these archives. Rules can either be association rules which means that software items have been changed to- gether with a certain probability or sequence rules which means items have been changed one after the other The change frequency(support) as well as the change probabil- ity(confidence) ofa given rule are both metrics usedfor vi- sualizing the strength ofa rule. EPOSeel is a tool designed to interactively explore these kinds ofrules. To this end we extended standard visualization techniques for association and sequence rules to also show the hierarchical order of items. Clusters and outliers in the resulting visualizations provide interesting insights into the relation between the temporal development of a system and its static structure.

1 Introduction  Software archives contain the many versions of a soft- ware system produced throughout its lifetime typically us- ing configuration management tools like CVS(Concurrent Versioning System), Subversion or Bitkeeper. Analyzing the source code of these versions, as well as documenta- tion and other meta-information can reveal regularities and anomalies in the development process. EPOSee provides the following visulalizations to interactively explore mining rules extracted from software archives:  Visualization of Binary(2-ary)Association Rules: Pix- elmap (overview, context), Support Graph (force-directed, polar layout), 3D Bar Chart (of selected association rules, focus), Rule Detail Window (of selected rule, focus)  Visualization of n-ary Association Rules: Association Rule Matrix (overview, context), Bar Charts (for support and confidence), Rule Detail Window (of selected rule, fo- cus), Item Legend Window  'Evolution Patterns Of Software Visualization Tool  Visualization of Sequence Rules: Parallel Coordinates View (overview, context), Decision Tree (overview, con- text), 3D Branch View(of selected sequence rules, focus), Rule Detail Window (of selected rule, focus)  Histogram (distribution of confidence and support)  2 Working with EPOSee  Typically the visual data-mining process works as fol- lows: first an overview of the rule set is provided, here in- teresting visual patterns like clusters can be detected by the user. Next she can inspect the rules of a visual pattern by selecting the rules involved and viewing them in a zoomed display (for example in the 3D view). Additionally, filters allow her to constrain the set of rules that are shown at all.

Histograms give an overview of the support and confidence distribution of all rules in the given dataset. Histograms also give a possibility to bound the dataset by support and con- fidence intervals. Last but not least, she can select single rules which are shown in detail then. This conforms to Ben Shneiderman's visualization mantra: "Overview first, zoom and filter, details on demand.

In the following we will explain how EPOSee integrates the different views for binary association rules, n-ary asso- ciation rules and sequence rules and how the visualizations interact with each other. Figure 1 shows our tool in the bi- nary association-rule mode. Modes for new rule type can easily be added and integrated in the visualization tool.

The screenshot presented in Figure 1 consists of three windows. The left window shows the pixelmap, which is a two dimensional representation of the given textual data.

A color coded pixel stands for the frequency, that two soft- ware items have been checked into the CVS repository to- gether. The more red a pixel, the higher is this frequency.

After computing the frequency values for all pairs of soft- ware items, we get a two dimensional array with integer val- ues, which can be visualized as a pixelmap. Software items can be directories, files, classes, inner classes or methods.

For example someone could be interested in what classes have been checked into the repository very frequently and which classes have not. In the pixelmap we use a special     Figure 1. EPOSee in the binary association rule mode  sorting ofthe axes which places items ofthe same hierarchy level close to each other. We expect that items in the same hierarchy level should be changed more often than items which are not in the same hierachy level. This phenomenon should become visible by red squares along the diagonale of the pixelmap. As shown in the left window in Figure 1, this is actually the case for this software project.

In the case of our class example this means that two classes in the same directory are much more frequently changed together than two classes from two different direc- tories. We call items which are changed very frequently and do not correspond to the same hierarchy level an outlier. If a software system has lots of outliers the developer should possibly think ofrestructuring the whole system. This could reduce outliers but also could cause other ones to occur.

Pixelmaps can be very large and an overview of the whole dataset is therefore often not possible. For this rea- son the user can scroll the pixelmap and select an interesting rectangular area. This area can be zoomed in by showing it as a three dimensional bar chart diagram. An example bar chart can be seen in the right window of Figure 1. Here two metrics can be visualized. The color of each bar shows the confidence of the rule and the height represents its support.

The window in the middle ofFigure 1 shows the support- graph view. Each node refers to an item of the data set. The color coding corresponds to the hierarchy level an item is placed. A coupling between two items is represented by an edge from one node to the other. A force-directed layout of the support graph is responsible for the visual structure of this graph, that can also be used to detect clusters and outliers in the data set.

Filtering allows to reduce the data set. This is usually done by selecting an interval for the support and confidence values in the histogram view. Thus filtering is typically used to only show strong dependencies. There is also a textual filtering function which can be used if someone is only in- terested in items which have a certain text string in their descriptions or which belong to a certain hierarchy level.

All views have a detail on demand function, i.e., the user can select an item to get additional information about it.

So she can interactively explore the data set and look for details whenever she wants to. The detailed information given in the pixelmap and 3D bar chart view consists of the item pair which was chosen by the user as well as the support and confidence values for the selected rule shown in the text fields at the bottom of the frame or as a tooltip.

When the user selects a node in the support graph view, the tool will show information about the hierarchy level the item is located in, as well as a list of all items connected to the node.

Selecting an item in the 3D bar chart view can be very difficult because one interesting bar can be hidden by other ones. For this reason we have an integrated crosshairs func- tion which makes a selection much easier. The crosshairs is indicated by the green bars in the 3D bar chart view of Figure 1. The crossing point is represented in yellow.

If the user selects a rule in one visualization and after- wards switches to another visualization, the same rule is marked in both visualizations making it easier to examine the context of a rule. Finally, no color coding scheme is equally well suited for all data sets. So the tool allows the use to switch between different color coding schemes.

