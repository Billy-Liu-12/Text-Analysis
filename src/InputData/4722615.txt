Mining Double-Connective Association  Rules from Multiple Tables of Relational

Abstract--Single-dimensional association rule and  multidimensional association rule in conventional  association rule mining are single-connective  association rules, because they have only one connective:  ?. In this paper, based on mutually-inversistic logic, an  algorithm for double-connective association rule mining  is proposed, mining the association rule in the form of  student(Sno)?-1 course(Cno)/?-1 study(Sno, Cno), read  ?for all students Sno, there exists course Cno such that  Sno study Cno?, where ?-1 and /?-1 are connectives, Sno  is the primary key of the table transformed from the  entity Student, Cno is the primary key of the table  transformed from the entity Course, (Sno, Cno) is the  primary key of the table transformed from the binary  relationship Study. A three-table relational database  naturally embraces double-connective association rules.

Keywords--mutually-inversistic logic, double-connective  association rule, relational database, multiple tables, data  mining

I.   INTRODUCTION  In data mining [1], a single-dimensional association rule is in the form of buys(X, ?computer?) ?buys(X, ?financial_management_software?), where there is only one connective: ?. It is a single-connective association rule. A multidimensional association rule is in the form of age(X, ?30?39?) ?income(X, ?42K?48K?) ?buys(X, ?high_resolution_TV?). Classical logic [2]  deems that ? and ? are all connectives, so in the multidimensional association rule in question, there are two connectives. Mutually-inversistic logic [3,4] deems that ?, ?, ? are compounders, used from simpler facts to form a more complex fact; ?-1  (mutually inverse implication, in mutually-inversistic logic, universal quantifier is not introduced, man(x) ?-1 mortal(x) corresponds to ?x(man(x) ?mortal(x)) in classical logic), /?-1 (mutually inverse conjunction, in mutually-inversistic logic, existential quantifier is not introduced, even_number(x) /?-1 prime_number(x) corresponds to ?x(even_number(x)?prime_number(x)) in classical logic) are connectives, representing the connection of two facts. From the viewpoint of mutually-inversistic logic, a multidimensional association rule is still a single-connective association rule, having only one connective: ?. Single-connective association rule mining can only mines the association between frequent item sets. It cannot mine the association between the primary keys of a database.

Database [5] query can query quantitative information such as ?thirty-five students study the course of Principle of Database?, but it cannot query qualitative information such as ?many students study some courses?. Some query information are predeterminate, so that SQL statements can be written for them. But some information are not perdeterminate, it cannot be queried.

In order to remedy the deficits of both   DOI 10.1109/CSSE.2008.559    DOI 10.1109/CSSE.2008.559     single-connective association rule mining and database query, this paper proposes double-connective association rule mining. A double-connective association rule is in the form of p?(x)?1 q?(y) ?2 r?(x, y), where p?(x) and q?(y) are unary predicates, r?(x, y) is a binary predicate, ?1 and ?2 are connectives ?-1 or /?-1 . For example, course(Cno) /?-1 {student(Sno) ?-1 study(Sno, Cno)} is a double-connective association rule, meaning that there exists a course Cno such that for all students Sno, Sno study Cno. Another example is teacher(Tno) ?-1 course(Cno) /?-1 teach(Tno, Cno), meaning that for all teachers Tno there exists a course Cno such that Tno teach Cno.

In relational databases, some tables are transformed from entities in ER diagram, we call such tables the entity table. Other tables are transformed from binary relationships in ER diagram, we call such tables binary relationship table. We take the primary keys of two entity tables (they are bound to have a primary attribute each) as the unary predicate p?(x) and q?(y), take the primary key of the binary relationship table (it is bound to have two primary attributes) as the binary predicate r?(x, y), obtain a double-connective association rule. This is to say, a relational database naturally embraces double-connective association rules. The algorithm for mining double-connective association rule is divided into three levels. The top level is table determination algorithm that is to determine which tables embrace the double-connective association rule. The middle level is attribute determination algorithm that is to determine which attributes embrace the double-connective association rule. The bottom level is connective determination algorithm that is to determine ?1 and ?2 in p?(x)?1 q?(y) ?2 r?(x, y) are /?-1 or ?-1 respectively.

The rest of this paper is organized as follows: Section 2 gives a relational database of Study and Teaching, Section 3 gives the table determination algorithm, Section 4 gives the attribute determination algorithm, Section 5 gives the connective determination algorithm, Section 6 is the concluding  remarks.



II.DATABASE OF STUDY AND TEACHING The database of Study and Teaching is shown in  Fig. 1.

Observing Fig. 1, we see that the primary key  Sno of Table 0, the primary key Cno of Table 1, the primary key <Sno, Cno> of Table 2 form the double-connective association rule student(Sno) ?1 course(Cno) ?2 study(Sno, Cno). Likewise, the primary key Tno of Table3, the primary key Cno of Table 1, the primary key <Tno, Cno> of Table 4 form the double-connective association rule teacher(Tno) ?1 course(Cno) ?2 teach(Tno, Cno). The following sections are to mine these rules. Take student(Sno) ?1 course(Cno) ?2 study(Sno, Cno) as an example, the table determination algorithm in Section 3 will determine that take Table 0 and Table 1 as the entity tables, take Table 2 as the binary relationship table, we can mine the rule. The attribute determination algorithm in Section 4 will determine that the attribute 1 in both Table 0 and Table 1, the attributes 1 and 2 in Table 2 embrace the rule. The connective determination algorithm in Section 5 will determine whether ?1 and ?2  in student(Sno) ?1 course(Cno) ?2 study(Sno, Cno) are /?-1 or  ?-1 respectively.



III. TABLE DETERMINATION ALGORITHM  The table determination algorithm is shown in Fig. 2, where R denotes the serial number of the binary relationship table, E1 denotes the serial number of the first entity table, E2 denotes the serial number of the second entity table,0 through N-1 denote Tables 0 through N-1, N denotes the number of tables.

The table determination algorithm uses brutal force method, i.e. for every three tables, it tries to find a double-connective association rule.

Table 0    Student table                      Table 1    Course table  Sno Sname Sage      Cno Cname Credit  S1 Yong Li 20  C1 Database 3  S2 Chen Liu 19  C2 Mathematical Analysis 4  S3 Min Wang 18  C3 General Physics 2  S4 Yan Zhang 19  C4 Control Theory 3  S5 Ping Zhou 20     Table 2    Study table                          Table 3    Teacher table        Fig.1  The database of Study and Teaching  Sno Cno Grade  S1 C1 92  S1 C2 85  S2 C1 88  S2 C3 90  S3 C1 80  S4 C2 76  S5 C1 93  S5 C4 70  Tno Tname Work Load  T1 San Zhang 7  T2 Si Li 8  T3 Wu Wang 0  Tno Cno Textbook  T1 C1 Principle of Database  T1 C2 Higher Mathematics  T2 C2 Calculus  T2 C3 University Physics  T2 C4 Industrial Automation  Table 4    Teaching table     Fig.2  Table determination algorithm  Start  R=0,E1=1,E2=2  R=N?  E1=?R-1?mod N  E2= R?  Call the attribute  determination  algorithm  E2=?E2+1?mod N  End  E1=?E1+1?mod N  E2=?E1+1?mod N  R=R+1  E1=?R+1?mod N  E2=?E1+1?mod N  Y N  Y N  Y N                                                                                             Start  e1=1, e2=1, r1=1, r2=2  e1?L?  e2?M?  r1?N-l?  r2?N?  (e1 and r1) and (e2 and r2) have the same name?  e1, e2, r1, r2  entity  integrity check  Check passed?  Call connective  determination algorithm  (e1 and r2) and (e2 and r1) have the same name?  e1, e2, r1, r2  entity  integrity check  Check passed?  Call connective  determination algorithm  r2 = r2+1  End  r1 = r1+1  r2 = r1+1  e2 = e2+1  r1 =1 r2=1  e1 = e1+1  e2 =1 r1=1  r2=2  N  N  N  N  Y  Y  Y  Y  Y  Y  Y  Y  N  N  N  N  Fig.3  Attribute determination algorithm     As to the database Fig. 1, when mining student(Sno) ?1 course(Cno) ?2 study(Sno, Cno), the three tables the table determination algorithm determines are:  R=0, E1 =1, E2 =2 (i.e. R equals Table 0, E1 equals Table 1, E2 equals Table 2)  R=0, E1 =1, E2 =3 R=0, E1 =1, E2 =4  R=0, E1 =2, E2 =3 R=0, E1 =2, E2 =4 R=0, E1 =3, E2 =4 R=1, E1 =2, E2 =3 ??????? R=4, E1 =2, E2 =3.



IV. ATTRIBUTE DETERMINATION ALGORITHM  The attribute determination algorithm is shown in Fig. 3, where e1 and e2 are the serial numbers of the current attributes of Tables E1 and E2 respectively, r1 and r2 are the serial numbers of the first and the second attribute of the current attribute pair of Table R, L, M, N are the number of attributes of Tables E1 , E2 and R respectively.

The attribute determination algorithm uses brutal force method, i.e. for every two pairs of attributes, it tries to find a double-connective association rule. If it finds that e1 and r1 have the same attribute name and e2 and r2 have the same attribute name or that e1 and r2 have the same attribute name and e2 and r1 have the same attribute name, then it goes on entity integrity check for each attribute. If the check passes, then these attributes indeed embrace a double-connective association rule.

For student(Sno) ?1 course(Cno) ?2 study(Sno, Cno), the first two pairs of attributes the algorithm determines embraces it.



V. CONNECTIVE DETERMINATION ALGORITHM  We take student(Sno) ?1 course(Cno) ?2 study(Sno, Cno) as an example to study the connective determination algorithm. Let ?1 and ?2 be /?-1 or ?-1 respectively, and exchange the positions of  student(Sno) ?1  and course(Cno) ?2 , we obtain 8 double-connective association rules:  DCAR1: student(Sno) ?-1 course(Cno) ?-1 study(Sno, Cno)  DCAR2: course(Cno) /?-1 {student(Sno) ?-1 study(Sno, Cno)}  DCAR3: student(Sno) ?-1 course(Cno) /?-1 study(Sno, Cno)  DCAR4: student(Sno) /?-1 {course(Cno) ?-1 study(Sno, Cno)}  DCAR5: course(Cno) ?-1 student(Sno) /?-1 study(Sno, Cno)  DCAR6: student(Sno) /?-1 course(Cno) /?-1 study(Sno, Cno)  DCAR7: course(Cno) ?-1 student(Sno) ?-1 study(Sno, Cno)  DCAR8: course(Cno) /?-1 student(Sno) /?-1 study(Sno, Cno) Because DCAR7 is equivalent with DCAR1, DCAR8 is equivalent with DCAR6, we only study DCAR1 through DCAR6.

?-1 denotes ?for all?. This requirement is too strong, we lower its requirement by setting certainty factors cf1 and cf2  (they are percentages) for ?1 and ?2 respectively. If the percentage is no less than the certainty factor, then ?-1 holds, denoting ?for many?.

If the percentage is less than the certainty factor but greater than 0, then /?-1 holds, denoting ?there are some?.

Since the attribute determination algorithm has determined that the attribute Sno in Table 0, the attribute Cno in Table 1, and the attributes <Sno, Cno> in Table 2 embrace the double-connective association rule student(Sno) ?1 course(Cno) ?2 study(Sno, Cno), the connective determination algorithm make the relational matrix shown in Fig. 4 according to the binary relationship table of Table 2.

C1 C2 C3 C4 S1   T  T  F  F S2   T  F  T  F S3   T  F  F  F S4   F  T  F  F S5   T  F  F  T  Fig. 4 The relational matrix made from Table 2  Fig. 4 is made like this: Table 2 has the tuple  <S1, C1>, then at the cross of the row S1 and the column C1, a T is filled; Table 2 does not have tuple <S1, C3>, then at the cross of the row S1 and the column C3, a F is filled.

Suppose the cardinality of student(Sno) is M, in this example 5, i.e. S1 to S5; the cardinality of course(Cno) is N, in this example 4, i.e. C1 to C4.

The algorithms for DCAR1 through DCAR6 are as follows:  The algorithm for DCAR1: If in Fig. 4 there is M*cf1 rows, N*cf2 columns  submatrix, in which all elements are Ts, then DCAR1 holds.

The algorithm for DCAR2: If in Fig. 4 there is at least one column, in  which there are at least M*cf1 Ts, then DCAR2 holds.

The algorithm for DCAR3: If in Fig. 4 at least M*cf1 rows have Ts, then  DCAR3 holds.

The algorithm for DCAR4: If in Fig. 4 there is at least one row, in which  there are at least N*cf2 Ts, then DCAR4 holds.

The algorithm for DCAR5: If in Fig. 4 at least N*cf2 columns have Ts, then  DCAR5 holds.

The algorithm for DCAR6:     DCAR6     DCAR3                   DCAR5      DCAR2                 DCAR4   DCAR1  Fig. 5 The complement lattice formed by DCAR1 through DCAR6       Fig.6  Connective determination algorithm  Start  Call DCAR1 algorithm  DCAR1 holds?  Call DCAR2 algorithm Output DCAR1,2,3,4,5,6  End DCAR2 holds?  Output DCAR2,3,6 Call DCAR3 algorithm  DCAR3 holds?  Output DCAR3,6  Call DCAR4 algorithm  DCAR4 holds?  Call DCAR5 algorithm Output DCAR4,5,6  End DCAR5 holds?  Call DCAR6 algorithm Output DCAR5,6  End DCAR6 holds?  Output DCAR6  End  Error  Y N  N Y  Y N  N Y  Y N  N Y     If in Fig. 4 there is at least one T, then DCAR6 holds.

DCAR1 through DCAR6 forms a complement lattice shown in Fig. 5.

In Fig. 5, the lower rule implies the upper rule.

That is, if DCARj is reachable from DCARi via an ascending path, and DCARi holds, then DCARj holds.

Because DCAR1 through DCAR6 satisfies Fig.

5, their algorithms can be merged into one algorithm, called connective determination algorithm, shown in Fig. 6.

Suppose cf1 =80%, cf2 =75%. In Fig. 4, for the column of C1, there are M*cf1 =5*80%=4 elements whose values are T (namely, S1, S2, S3, S5).

Therefore, DCAR2: course(Cno) /?-1 {student(Sno) ?-1 study(Sno, Cno)} holds. From Fig. 5, we know that DCAR3 and DCAR6 also hold. In Fig. 4, there are at least N*cf2 =4*75%=3 columns which have value T (namely, in the column of C1 there is S1, in the column of C2 there is S1, in the column of C3 there is S2, in the column of C4 there is S5), therefore DCAR5: course(Cno) ?-1 student(Sno) /?-1 study(Sno, Cno).



VI. CONCLUDING REMARKS (1) Double-connective association rule mining  is different from single-connective association rule mining. The former mines the association among the primary keys of the two entity tables and the primary key of the binary relationship table. The latter mines the association between frequent item sets.

(2) Fig. 4 is different from data cubes in data warehouses. The elements in Fig. 4 are T or F. The elements in the data cubes are data.

(3) The differences between double-connective  association rule and database query are that, first, the query information in databases are predeterminate, while the information to be mined by double-connective association rule is not predeterminate, it is implied. Secondly, database query needs to write SQL statements, while double-connective association rule mining is automatic. Thirdly, the information obtained by database query is quantitative, while the information obtained by double-connective association rule mining is qualitative such as ?for many?, ?there are some?.

