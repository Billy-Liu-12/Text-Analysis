Hilbert-curve based Cryptographic Transformation  Scheme for Protecting Data Privacy on Outsourced

Abstract? The study on spatial database outsourcing has been spotlighted with the development of cloud computing.

Therefore, researches for protecting location data privacy in outsourced database have been studied. However, the existing spatial transformation schemes are vulnerable to na?ve attack models. The existing cryptographic transformation scheme provides high data privacy, but it causes the high query processing cost. To solve these problems, in this paper we propose a Hilbert-curve based cryptographic transformation scheme to protect data privacy and to improve the efficiency of the query processing in outsourced databases. The proposed scheme reduces the communication cost for query processing since we perform a local clustering based on the order of Hilbert-curve. Finally, we show from performance analysis that the proposed scheme outperforms the existing scheme.

Keywords- Database outsourcing; Data Privacy; Spatial Data Cryptographic Scheme; Hilbert-curve

I. INTRODUCTION With the development of the cloud computing, researches  on outsourced database have been studied. In outsourced databases, a data owner outsources to a service provider data, hardware, and software as well as their management in order to focus on his/her core business area. The service provider manages the resources and allows authorized users to access the outsourced database for issuing queries. Outsourced database has an advantage that it allows the data owner to easily manage the data with low cost even though they lack the experience related to IT services.

Meanwhile, location-based services (LBSs) have been popular with the rapid spread of mobile devices equipped with GPS. LBSs include navigation system, friend finder, etc.

However, traditional LBS system with single server cannot handle a large number of spatial data. As the number of spatial data increases, more storage and much computational cost are required to manage it. Thus, a single server with limited resources shows low performance for handing a large number of spatial data. Therefore, the needs for outsourcing a spatial database to a cloud system are increasing.

However, when the data owner outsources the original spatial database, some privacy threats occur. This is because  the spatial data contains the private information of the data owner. Another reason is that an authorized user needs to send queries with his/her exact location. If the location information has been disclosed to an attacker or a service provider abuses the information on malicious purpose, they can find places where users have frequently visited and dates when they have done. In this case, the visit pattern and life- style of individuals can be revealed.

To solve this problem, researches on protecting data privacy of the outsourced spatial databases in the cloud system have been studied. The existing methods fall into two categories: spatial transformation scheme and encryption scheme. First, there are several spatial transformation schemes [1-7] which perturb original data into the other data.

However, these methods are vulnerable to na?ve attack models because they use simple transformation equation to convert data. For example, an attacker can get to know the transformation equation with some pairs of original data and its corresponding transformed data. Yiu et al. [7] proposed a HSD* transformation scheme which utilizes both a data distribution transformation based on a kD-tree and an error injection based on a secure hash function like SHA-512. By modifying the property of the original dataset, HSD* can preserve the data privacy from the na?ve attack models.

However, HSD* has a problem that the relative positions of original data points are quite similar to those of transformed data points. As a result, the attacker can approximately find the location of their adjacent data points from the revealed data points.

Secondly, encryption schemes solve the problems of spatial transformation schemes by encrypting the original data points. There are two famous encryption schemes for outsourced databases. First, Khoshgozaran et al. [8] proposed a grid-based spatial data cryptographic scheme. In this scheme, a data owner encrypts the spatial data points of each grid cell by using a digital signature algorithm (DSA) [9]. Next, Yiu et al. [7] proposed a cryptographic transformation scheme (CRT) which encrypts each node of constructed R-tree by using AES (Advanced Encryption Standard) [10] algorithm. However, these schemes have a high query processing cost. In case of CRT scheme, the  *corresponding author     communication cost for query processing increases as the depth of R-tree is increased. This is a big problem as LBSs deal with the huge amount of spatial data.

To solve these problems, in this paper we propose a Hilbert-curve based cryptographic transformation scheme (HCT) for preserving data privacy of the outsourced spatial databases in the cloud system. In our method, we design Hilbert aggregation index instead of using a tree structure in order to enhance the efficiency of the query processing.  The proposed method minimizes the size of communication message by performing local data grouping based on Hilbert- curve order [11].

The rest of the paper is organized as follows. In section II, we introduce the existing methods for spatial data privacy preservation, especially in the outsourced spatial databases.

Section III presents overall system architecture and details of our Hilbert-curve based cryptographic transformation scheme. In section IV, we propose a range query processing algorithm in encrypted spatial databases. In section V, we compare the performance of our proposed method with that of the existing method. Finally, we conclude this paper with future work in section VI.



II. RELATED WORK In this section, we first review spatial data privacy  preservation schemes in LBSs where original spatial databases are published to a service provider. Then, we describe existing spatial transformations schemes and encryption schemes for spatial data privacy preservation in outsourced databases.

A. Location Privacy in LBSs In LBSs, a mobile user issues spatial queries which are  processed by a service provider. However, the user does not want to reveal his/her exact location information to the service provider. This is because if an attacker or malicious LBS provider abuses this information, the user's private information like lifestyle and disease can be disclosed. To protect the user?s location privacy, there exist several schemes which blur the location of the user by using the k- anonymity property. Mokbel et al. [12] proposed the New Casper scheme which creates a cloaking area by using a grid-based data structure. Cloaking area satisfies the k- anonymity property by including not only the user who requests the query, but also the k-1 other users nearby him/her. Lee et al. [13] proposed the GCC scheme which creates a cloaking area by calculating the privacy protection level of the cloaking area by using entropy. Kim et al. [14] proposed a cloaking area creation scheme where a query issuer generates a cloaking area in a distributed manner by collaborating with other mobile users. Wang et al. [15] proposed the XStar scheme which creates a cloaking area by considering the road networks. However, these schemes just hide the user?s exact location information at the query time.

Thus, an attacker or malicious service provider can abuse the original spatial databases which are published to the service provider. Therefore, the original spatial databases should be transformed into the other form before the databases are outsourced to the service provider.

B. Spatial Transformation Scheme The typical spatial transformation schemes which protect  the spatial data in the outsourced databases are as follows.

Hacigumus et al. first introduced the idea of outsourcing database to a third-party service provider in [1] and addressed the confidentiality of the outsourced database in [2]. Evfimievski et al. [3] proposed a random noise addition approach. Gutscher et al. [4] proposed a spatial transformation scheme which converts the spatial data points by performing the parallel translation of plane coordinate.

However, because these schemes convert the data in a simple way, they are weak to data reconstruction attacks.

Meanwhile, Oliveira et al. [5] proposed the rotation perturbation scheme. Liu et al. [6] proposed a random projection perturbation scheme. However, these schemes have a problem that they do not guarantee exact answers over the transformed data. In addition, they are all threatened by an attacker with prior-knowledge.

Yiu et al. [7] proposed three transformation methods, i.e., hierarchical space division method (HSD), error-based transformation method (ERB), and an advanced HSD method (HSD*). HSD performs spatial transformation by using a data distribution transformation based on the kD-tree.

The data owner (DO) transforms a distribution of the original database to the other distribution (e.g., distribution of the other places, etc). Because HSD uses a different transformation equation for each partition, HSD greatly reduces the probability that the transformation equation can be disclosed to an adversary. However, HSD has a crucial problem. Assume that dist is a distance between an original point and its corresponding transformed point. In HSD, dist is very similar to a distance between another original point and its transformed point in the same node of the kD-tree. As a result, an adversary can infer the coordinates of the original data which are adjacent to the disclosed data.

On the other hand, ERB performs the transformation of spatial coordinates by inserting errors into the original data based on secure hash function, e.g., SHA-512. By doing so, ERB can prevent the disclosure of transformation equations.

However, if the inserted error is small, the transformed data is very similar to the original data. Therefore, even if the transformation equation is not disclosed, the original data can be inferred. Meanwhile, if the inserted error is large, it causes high query processing overhead because a query region becomes great due to the large error. It also causes numerous false positives since many candidate POIs can be included in the query result.

Finally, HSD* is a method which combines HSD with ERB. In HSD*, the DO transforms a distribution of the original database to the other distribution by using kD-tree, and the DO performs a data transformation by inserting error based on SHA-512. However, HSD* has the same problem of HSD. By using a disclosed original data and its transformed data, an adversary can infer the coordinates of other original data which are adjacent to the disclosed data. It means that from a small set of disclosed data, the original POI information, such as buildings and residences, can be disclosed, thus resulting in serious privacy threats.

C. Spatial Data Encryption Scheme In order to solve the problems of spatial transformation  schemes, studies on protecting spatial data by using an encryption scheme have been done. The typical encryption schemes which protect spatial data in outsourced databases are as follows. Khoshgozaran et al. [8] proposed a grid-based spatial data encryption scheme. In this scheme, a DO encrypts the information of cells by using DSA (Digital Signature Algorithm) [9]. Yiu et al. [7] proposed CRT method (cryptographic transformation). In this method, a DO indexes his/her spatial data by using R-tree. Then, the owner encrypts each R-tree node by using AES [10] and outsources the encrypted data to a service provider (SP). Meanwhile, a query processing algorithm of the CRT method is as follows.

An authorized user (AU) issues a query to a SP. The SP sends an encrypted root node of R-tree to the user. The AU decrypts the received root node by using a decryption key granted by the DO. Then the user searches a child node which overlaps a query region and requests the selected child node. This process is repeated until the algorithm reached a leaf node where data is stored. However, the CRT has a drawback that the communication cost for query processing increases as the depth of R-tree is increased. The problem is that it commonly happens because LBSs deal with the huge amount of spatial data.



III. HILBERT-CURVE BASED CRYPTOGRAPHIC TRANSFORMATION SCHEME  In this section, we first describe the motivation of the paper. Then, we explain the system architecture of the proposed scheme. Next, we present Hilbert-curve based cryptographic transformation scheme for protecting spatial data privacy.

A. Motivation Our key motivation is that existing cryptographic  transformation schemes for protecting spatial data has a problem that the cost of query processing is high. Even though these schemes guarantee high data privacy preservation level, an LBS user may not be satisfied if the query response time is not reasonable. For example, CRT, the most relevant work to our research, has a problem that the communication cost for query processing increases as the depth of R-tree is increased, as shown in Figure 1. Figure 1 shows the outsourced data which are stored as an R-tree structure. The root node A stores the information of node B including MBR (Minimum Bounding Rectangle) and is encrypted using AES encryption algorithm. Meanwhile, the leaf node B includes real spatial data a, b, and c which are also encrypted with AES algorithm.

Figure 1. Query processing example of CRT  The query processing procedure of CRT is shown in Figure 1. The AU first requests a root node A to the SP and finds out that node B overlaps the query region (q) by decrypting the information of node A. Then, the AU requests a leaf node B to the SP and receives the result. The AU decrypts data in B and gets the spatial data b as the final query result. As a result, a communication between the AU and the SP occurs two times, which is the same as the depth of R-tree. The communication cost for query processing increases as the total number of data in R-tree is increased or the number of data in each leaf node is decreased.

To solve the problem, in this paper we propose a Hilbert- curve based cryptographic transformation scheme (HCT) for preserving data privacy of the outsourced spatial databases in the cloud system. In our method, we design Hilbert aggregation index instead of using a tree structure in order to enhance the efficiency of the query processing. The proposed method minimizes the size of communication message by performing local data grouping based on Hilbert-curve order.

B. System Architecture The system architecture of our cryptographic  transformation scheme for spatial data is shown in Figure 2.

The system consists of three components: data owner (DO), service provider (SP) and authorized user (AU). The DO who has the original spatial data encrypts the spatial data and sends the encrypted data to the SP. The SP stores the encrypted data and offers location-related service to the AU.

To enjoy services from the SP, the AU receives the key for decrypting the data and verifying its permission.

To securely and efficiently manage the encrypted spatial data, we design 2 indices: Hilbert aggregation index (HAI) and transformed data index (TDI). HAI and TDI are defined as definition 1 and definition 2, respectively.

Definition 2 (Hilbert aggregation index) HAI is an index consisting of <ID, shv, ehv>, where ID is an identification of the HAI record and shv and ehv mean the start Hilbert-curve value and end Hilbert-curve value of the HAI record, respectively.

Definition 3 (Transformed data index) TDI is an index consisting of <ID, cell_info>, where ID is an identification of the TDI record and the cell_info stores the actual location data included in the TDI record. Each TDI record stores F (fan-out) numbers of data for privacy preservation.

The procedure of spatial data encryption in HCT method is as follows. First, a DO generates a HAI and a TDI by using Hilbert-curve from his/her own original database (1-a).

Secondly, the DO encrypts the HAI and TDI and sends them to the SP (1-b). Thirdly, the DO sends to the AU the key for decrypting the data (1-c). Meanwhile, the procedure of query processing on encrypted databases is as follows. First, the AU issues a query and receives the encrypted HAI (2-a).

Secondly, the AU decrypts the HAI by using the transformation key sent from the DO and retrieves records satisfying the query region (2-b). Thirdly, the AU requests to the SP the TDI corresponding to the retrieved records (2-c).

Finally, the AU obtains a query result by decrypting the returned TDI records (2-d).

C. Hilbert-Curve based Cryptographic Transformation Scheme In this section, we propose a Hilbert curve-based  cryptographic transformation scheme (HCT) for preserving spatial data privacy of the outsourced databases in the cloud system. In order to hide the coordinates of the original data, the proposed scheme transforms two-dimensional spatial data into one-dimensional data by using Hilbert-curve. For this, our scheme divides the whole spatial area into grid cells and assigns them their cell IDs based on Hilbert-curve (Figure 2).

The procedure of generating HAI and TDI is described as follows. At first, the DO retrieves the spatial data according to Hilbert-curve order. When the first F numbers of data are retrieved, the algorithm stores the first/last grid cell id as the shv(ehv) of the first HAI record. The F numbers of spatial data are stored in the cell_info of the first TDI record.

Similarly, for each set of F numbers of data, the algorithm stores it to the corresponding records of both HAI and TDI.

This process continues until all grid cells in the database are searched. For example, in case the value of fan-out(F) is 3, it is needed to retrieve both grid cells 0 and 1 in order to find three spatial data a, b and c (Figure 2). So the algorithm assigns shv(ehv) to 0(1) for the first HAI record. The retrieved results a, b, and c are stored into cell_info of the first TDI record. Then, the algorithm searches grid cells ranging from ID=2 to ID=5 in order to find next three data.

Thus the data d, f, and g are retrieved in grid cell 2, 4, and 5, respectively. The algorithm sets shv(ehv) to 2(5) for the second HAI record. The spatial data d, f, g are stored into the cell_info of the second TDI record. Similarly, the algorithm continues updating HAI and TDI records until all grid cells are searched. After generating HAI and TDI, the algorithm encrypts them by using AES [10] and sends both encrypted HAI and encrypted TDI to the SP.

By using the HAI instead of using a tree structure, we can enhance the efficiency of the query processing. By using  a grid structure and Hilbert-curve order based local data grouping, the proposed method can reduce the number of message transmission for query processing, and can minimize the size of communication message.



IV. RANGE QUERY PROCESSING ALGORITHM A range query processing algorithm on encrypted  databases with the HCT method is as follows. First, the AU receives the encrypted HAI by issuing a query, and decrypts the encrypted HAI by using transformation key received from the DO. Next, by using a Hilbert-curve, the AU searches the IDs of grid cells which overlap a query region, and retrieves the HAI records corresponding to the grid cells.

When the AU finds out the HAI records which satisfy the range query, the AU sends the IDs of HAI records to the SP.

The SP sends the TDI records corresponding to the received IDs to the AU. Since TDI records are encrypted by applying the AES algorithm, the AU decrypts them by using a decryption key. As a result, the AU obtains the final result set of the range query.

Figure 3 shows an example of a range query processing algorithm on the encrypted databases with our HCT scheme in case of F=3. An AU decrypts the HAI sent from a SP by using a transformation key (Figure 3(b)). The AU finds out that grid cells 2, 3, 4, and 7 overlap a query region (Figure 3(a)), and retrieves the HAI records corresponding to the grid cells. The IDs of grid cell 2, 3, 4 correspond to the second record of the HAI, whereas that of grid cell 7 corresponds to the fourth and fifth records of the HAI. Therefore, the AU requests the TDI records corresponding to the second, fourth, and fifth records of the HAI. When the AU receives the TDI records, the AU decrypts them by using the decryption key.

The AU obtains the spatial data {d, f, g} from the second record of the TDI, and the spatial data {k, l, e} and {m, n, o} from the fourth and fifth records of the TDI, respectively (Figure 3(c)). Thus, the AU can find out the actual results (i.e., d, e, f, k, l, and m) that overlap the query region.

Figure 2.  The system architecture for the proposed cryptographic transformation scheme for spatial data     (a) Query region       (b) Encrypted HAI  (c) Encrypted TDI  Figure 3. Example of range query processing  A range query processing algorithm on encrypted databases with the HCT method is as follows. First, an AU issues a query to a SP and receives the HAI from the SP (line 1). Secondly, the AU decrypts HAI by using the decryption key and searches the IDs of grid cells which overlap a query region (line 2-5). Thirdly, the AU sends to the SP tuple IDs corresponding to the searched grid cells and receives TDI records from the SP (line 6). Finally, the AU decrypts the TDI records and obtains the final result set for the range query (line 7-11). Algorithm 1 shows a range query processing algorithm on encrypted databases by using the HCT method.

Algorithm 1: HCT Range query()  Input : Q : Query region, Sk : Decryption key Output : Range query result 1: Encrypted_HAI = RequestRangeQuery(Q) 2: HAI = Decrypt(Encrypted_HAI, Sk) 3: for(each grid cell Ci overlapping Q) 4:      hilb_val ? calculate_HilbertValue(Ci) 5:      tuple ? retrieve_Tuple(hilb_val) 6: res = request_TDI(tuple) 7: data = Decrypt(res, Sk) 8: for(each di in data) 9:      if(IsInsideQ(di))  10:           result ? di 11: return result

V. PERFORMANCE ANALYSIS  A. Performance Environment In this section, we compare our HCT with the CRT  which is known to provide a distinguished performance. We make the performance analysis of both schemes in terms of spatial index construction time with encryption, range query processing time. We measure the metrics over the 100 queries, on the average. Table I shows our experimental environments.

TABLE I. EXPERIMENTAL ENVIRONEMENTS  CPU Intel Core2 Quad CPU Q6600 2.40GHz Memory 2GB  OS Windows XP professional Compiler Microsoft Visual Studio 2008  We evaluate our HCT scheme by using three spatial datasets: the real data (Northern East America (NE)),  uniform and Gaussian (mean 0.5, variance 0.1). The synthetic datasets containing 100,000 point of interests (POIs) are generated by using Generate Spatio Temporal Data (GSTD) [16], while the NE dataset contains 119,898 POIs.

B. Spatial Index Construction Time with Encryption For each method, the performance trends are almost  similar regardless of the data distribution, so we only depict the performance for the NE dataset as shown in Figure 4.

The index construction time with encryption for CRT is drastically increased as the total number of POIs increases.

This is because CRT uses a tree index structure which incurs high computation cost for the data encryption when the number of POIs is large. Meanwhile, our HCT shows the better performance than CRT because it makes use of HAI.

As each record of HAI consists of ID, shv and ehv, the encryption time for the HAI does not require much time as like that of the CRT.

Figure 4. Spatial index construction time with encryption  C. Range Query Processing Time Figure 5 presents the range query processing time of our  HCT method, according to fan-out ranged from 5 to 25. Our HCT shows the best performance when the fan-out is 15.

When the fan-out is below an optimal value, the communication cost for the required TDI records is increasing. The reason is that when each TDI record contains the less number of data, the more messages are transmitted between an AU and a SP. On the other hand, when the fan- out exceeds the optimal value, the query processing cost becomes higher due to the transmission and decryption of the unnecessary result. Based on the experimental results of the range query processing, we set the default fan-out to 15.

Figure 5. Range query processing time according to fan-out  Figure 6 shows the range query processing time according to the datasets. It is shown that CRT and our HCT methods show the best performances with uniform data set, whereas they show the worst performances with Gaussian one. This is because a query result contains a large number of POIs in the Gaussian dataset as the POI density of Gaussian dataset is higher than those of NE and uniform datasets. Thus, the communication cost for transmitting TDI records which overlap the query region increases. Overall,     our HCT method shows the better performance than CRT method for all cases. The reason is that our HCT method performs a decryption and a query processing by using the HAI, rather than using the tree index of CRT.

Figure 6. Range query processing time according to datasets  Figure 7 presents the range query processing time with varying the size of query region from 0.005 to 0.1. The size of the query region means the relational portion compared with the total map area. It is shown that our HCT is up to 6 times faster than CRT. In case of CRT, the query processing time is sharply increased when the query range is larger than the 0.05% area of the whole area. As a query region becomes larger, the number of POIs included in the query result is greater. When retrieving the result POIs, CRT has a problem that R-tree retrieval cost is greatly increased as the number of result POIs increases. Our HCT shows better performance than CRT because it makes use of a HAI. By using HAI, we can reduce the number of message transmission for query processing, and can minimize the size of communication message by performing local data grouping based on Hilbert- curve order.

Figure 7. Range query processing time according to fan-out

VI. CONCLUSION Recently, outsourced databases have attracted much  interests with the development of the cloud computing.

Hence, researches on protecting spatial data privacy in outsourced databases have been actively studied. Among researches, cryptographic transformation schemes show the better performance in terms of the data privacy protection.

However, the existing cryptographic transformation schemes have a problem that the cost of query processing is costly. To solve the problem, in this paper we proposed a Hilbert-curve based cryptographic transformation scheme (HCT) for preserving data privacy of the outsourced databases in the cloud system. To enhance the efficiency of the query processing, our HCT uses the newly designed HAI instead of using a tree structure. HCT reduces communication cost for query processing by performing local clustering based on Hilbert-curve order. From the performance analysis, we show that our HCT shows better performance than the existing CRT scheme.

As a future work, we have a plan to expand our work to support k-NN query processing and the user access control.

