A System for Mining Generalized Association Rules with Ontology Using  Genetic Network Programming

Abstract  In this paper, we propose a Genetic Network Programming based system to mine equalized association rules in multi concept layers of ontology.

There are three s in this system: Database, Equalizer and GNP Miner. We first introduce ontology to facilitate building the multi concept layers in Database module and propose Dynamic Threshold Approach (DTA) to equalize the different layers in Equalizer. We make use of an evolutionary computation method Genetic Network Programming (GNP) to mine the rules and develop a new genetic operator to speed up searching the rule space.

1. Introduction  Association rules in multi concept layers, also known as generalized association rules, or multiple- level association rules, could provide more information at multiple concept levels [1][2]. In Han and Fu?s method [1], a taxonomy should be first defined, and rules are discovered between concepts only within the same layer of the hierarchy. Srikant and Agrawal?s [2] method does not have this limitation, which could find rules among all the concepts in every layer.  But these methods have some shortcomings: 1) Hard to build a taxonomy: When a data mining  expert wants to start mining the generalized association rules, he or she always should first build the taxonomy without any tool or methodology to help building and maintaining the taxonomy.

2) Inequality among layers: If we mine rules among all the concept layers, most items in rules are picked up only from the upper concept layers.

3) Wait for too many rules: The traditional methods  usually could not give a single rule until finishing the whole calculation and result in too many rules after the whole calculation especially when dealing with large database.

In our system, we propose some new methods to solve these problems. There are three key features in our methods: 1) Use ontology instead of taxonomy: We build and  maintain our ontology instead of simple taxonomy by means of Protege [3] which could be shared with different data mining experts.

2) Equalize layers: We propose a Dynamic Threshold Approach to select a certain percentage of classes in each layer for rules mining by using different minimum support thresholds in different layers.

3) Use evolutionary method: Genetic Network Programming is applied to mine rules generation by generation.

2. System Architecture  In Figure 1, we demonstrate the main components of our system. Generally speaking, there are three parts: Database, Equalizer and GNP Miner.

In Database, transaction records, ontology library and rule pool are stored. We first build the ontology to describe the classes and relations in a specific domain.

In order to mine generalized association rules, the traditional plain transaction records should be transferred into Hierarchical Transaction. Protege accesses Database by JDBC API while other modules connect Database by ODBC API.

Because it is found that the classes in different layers have unequal chance to appear in the generalized association rules, we develop an Equalizer to equalize layers comparatively.

Genetic Network Programming is introduced to mine the association rules and we employ a new genetic operator, named renewal, to explore the global rule space more efficiently.

3. Ontology based Generalized Association Rules  Generalized association rules, also known as multiple-level association rules, could provide more information at multiple concept levels [1][2]. The idea of hierarchical taxonomy has been introduced into generalized association rules mining. In Han and Fu?s method [1], rules are discovered among concept items only within the same layer of the hierarchy.

A  ontology is a formal and explicit specification of shared conceptualization [4]. In the field of association rule mining, we introduce ontology to describe and share the understanding of the concepts in the mining domain, and find numerical information behind the concepts.

The items in the traditional transaction are replaced by instances in ontology, but the instances are not used for mining rules directly. The traditional transactions should be transfered into Hierarchical Transaction. In Hierarchical Transaction, the elements of each transaction consist of the classes in ontology instead of  the instances. Let T = {t1, t2, ti, tm}  be a set of transactions, and S = {s1, s2, sj, sn} be the instance set in the ontology, where n is the number of instances.

Each transaction is a subset of S, i.e., ti = {si1, si2, sik,  sip}, where p is the number of goods in each transaction. Let the set of classes in the ontology be denoted by C = {c1, c2, cl, cq}, where q is the number of classes. There are is-a relations between instances and classes. That is, instance sj belongs to a class and the super classes of this class, and we define these classes as Ancestor Classes of sj denoted by Ance( js ). The Hierarchical Transaction is denoted by  , and each element of Hierarchical Transaction is denoted as  , whose element  * * * * *  1 2{ , , , }i mT t t t t  * * * * *  1 2{ , , , }i i i ik ipt s s s s *  iks  consists of the Ancestor Classes of the instance sik, that is,  * { ( )ik ik  equalization  transaction ontology  hierarchical transaction  initial generation  mine rule  crossover  mutation of content  mutation of connection  renewal  rule pool  meaningfulness check  redundancy check  store rule  GNP Miner  end  protege  Database  Module  Information FlowProgram Flow  selection  Equalizer  Dataset  JDBC  ODBC  Figure 1. System Architecture  }s Ance s .

4. Equalization of Classes from Different Layers  If we mine rules among classes from all the layers, most of the items in rules may be from the upper layers, because the frequencies of the classes in the upper layers are much larger. We propose Dynamic Threshold Approach (DTA) for equalizing the classes from different layers in order to overcome the above problem.

First of all, some notations are defined to describe our method.

Definition 1: SUPmin(l) SUPmin(l) is the minimum support value in layer l.

When we check a candidate rule r, if all the classes  are from layer l, the support value of r Support(r) should satisfy Support(r)  SUPmin(l) if we want to store it into the rule pool.

If these classes are from different layers, there are three methods to get the minimum support value: maximum method, minimum method and average method.

In order to calculate SUPmin(l), we define Candidate Class Rate (CCR) in Definition 2.

Definition 2: CCR(l) Given a certain layer l, CCR(l) is defined as the ratio  of the number of classes in layer l whose support value is bigger than SUPmin(l). These classes could have the chance to be explored as the items in association rules while the other classes in this layer are deleted.

For example, there are ten classes with support    values in layer l in Table 1. We first sort the support values in descending order. If CCR(l) is set at 0.5, C4, C8, C2, C5 would have the chance to appear in the association rules and the other five classes are excluded. SUPL(l) should be 0.53.

5. GNP based Rules Miner  5.1. Genetic Network Programming  Genetic Network Programming (GNP) is an extension of GP, which uses directed graphs as genes for evolutionary computation [5] [6]. The basic structure of GNP has three kinds of nodes: a Start Node, some Judgment Nodes and some Processing Nodes. The start node is a special node, indicating the first position to be executed. Judgment nodes receive the information from the environment and determine the next node to be executed. Processing nodes represent some functional actions that could be taken.

GNP evolves the graph structure with the predetermined number of nodes, and reuses these judgment nodes and processing nodes during the execution. As a result, it could be quite compact and efficient and never cause the bloat.

When applying GNP to data mining, it is predigested into a kind of chain structure in Figure 2, Randomly Connected Chain (RCC). The items in RCC are not only selected randomly, but also connected randomly, which could have one next item and multiple previous items.

5.2. Fitness Function  There are two kinds of fitness functions defined in our method: Fitness of Individual (FI) and Fitness of Class (FC). We first define One Step Reward (OSR) to  make use of the reward difference between the current generation and the previous generation.

Definition 3: OSR After executing the (g-1)th generation, suppose  Mc(g-1) rules containing class c are produced. Then, after the gth generation, suppose Mc(g) rules containing class c are produced. We call Mc(g)=Mc(g) Mc(g-1) as One Step Reward (OSR) of class c.

Table 1. Support values of classes C1 C2 C3 C4 C5 C6 C7 C8  0.30 0.57 0.12 0.88 0.53 0.40 0.37 0.59  (without order) Definition 4: FI FI is the fitness of individuals used for selection.

C4 C8 C2 C5 C6 C7 C1 C3 0.88 0.59 0.57 0.53 0.40 0.37 0.30 0.12  (with order)  We introduce two methods to calculate FI for individuals: Number Policy Method and OSR Policy Method. When applying Number Policy Method, the fitness value of individual i in the gth generation is described by Equation 1:  FIi(g)=Ni(g),                                                         (1) where Ni(g) is the number of rules individual i produces in the gth generation.

When applying OSR Policy Method, FI of individual i is defined as:  If Nmax(g) Nmin(g),  min  max min  arctan ( ) ( ) ( ) 1FI ( ) ( ) , ( ) ( ) 2  c i  i c C i  M g N g N g  g N g N g  (2) ( ) ( 1) , 1  ( ) , ( ) ,                   1  c c c i i i c  i  M g M g g M g  M g g (3)  where Nmin(g) and Nmax(g) is the minimum and maximum number of rules individuals produce in the gth generation, ( )ciM g  is the number of rules including class c individual i produces in the gth generation, and C is the set of classes in the rules that individual i produces. ( )ciM g is OSR value. It could be easily inferred that 0 FIi(g) 1.

C=1B=1 E=1A=1 D=1 F=1  1P 2P 4P 5P3P 6P  SP ... ...

Figure 2.  Randomly connected chain FIi(g) mainly describes the potential ability of an  individual to find new rules. Considering the two major parts in FIi(g) in Equation 2, the first part measures the potential ability contributed by the individual while the second part represents the potential ability contributed by the judgment items of the individual.

If Nmax(g)=Nmin(g)=0, FIi(g)=0; if Nmax(g)=Nmin(g) 0, FIi(g)=1.

Definition 5: FC FC is the fitness of classes used for the selection of  classes. There are also two methods to calculate FC for classes: Number Policy Method and OSR Policy Method. When applying Number Policy Method, FC    of class c in the gth generation is FCc(g)=Mc(g),                                                     (4)  where Mc(g) is the number of rules containing class c produced in the gth generation.

When applying OSR Policy Method, the FC of class c in the gth generation is defined as:  If max ( ) cM g min ( )  cM g ,  min  max min  ( ) ( ) arctan ( ) 1FC ( ) ( ) , ( ) ( ) 2  c c c  c c c  M g M g M gg M g M g  (5) ( ) ( 1) , 1  ( ) , ( ) ,                   1  c c c  c  M g M g g M g  M g g (6)  where min ( ) cM g = M  ' min c C  c(g), max ( ) cM g = M  ' max  c C  c(g),  and C? is the set of classes in the rules produced by all the individuals in generation g. We could infer that 0 FCc(g) 1.

If max ( ) cM g = min ( )  cM g  =0, FIc(g)=0.

If max ( ) cM g = min ( )  cM g 0, FIc(g)=1.

5.3. Genetic Operators  There are four kinds of genetic operators in our method: crossover, mutation of content, mutation of connection and renewal.

Crossover operation is shown in Figure 3, and here we use only one crossover point.

There are two kinds of mutation in GNP: mutation  of content and mutation of connection shown in Figure 4 and Figure 5. We select classes randomly from class library to perform mutation of content.

Renewal operator selects classes from ontology class library according to their FC values to form the brand new individuals. This process is similar to the creation of the initial individuals, but renewal has considered the FC values of each class which could not  be considered for the initial stage. The reason for introducing renewal operator is that we want to find useful individuals as many as possible. Renewal can let some individuals jump to the brand new search spaces more immediately than crossover and mutation.

5.4. Meaningfulness Assurance  When we say that a rule is meaningful, it means that this rule cannot be deduced directly by other rules. For example, if rule (A B) exists and B Ance(A), this rule is not meaningful, because it can be simply deduced from B Ance(A).

We ensure the meaningfulness by deleting the meaningless part of the rules when checking the candidate rules. For example, in Fig. 4, when checking the candidate rule (A,B C), if B is an ancestor class of A, we can delete B from the candidate rule and check a new candidate rule (A C). Of course, the frequency of the classes in this new candidate rule should be counted again.

6. Conclusion  In this paper, we propose a system to extend the generalized association rules mining by ontology and introduce Dynamic Threshold Approach to equalize the different layers of ontology. We also apply Genetic Network Programming to mine rules generation by generation and use a new genetic operator renewal to explore the global rule space more efficiently.

