Improving the Effectiveness of Model Based Recommender  Systems for Highly Sparse and Noisy Web Usage Data

Abstract A number of approaches which use model-based  collaborative filtering (CF) for scalability in building recommendation systems in web personalization have poor accuracy due to the fact that web usage data is ojien sparse and noisy. Clustering, mining association rules, and sequence pattern discovely have been used to determine the access behavior model. Making use of some of the characteristics of the modeling process can pro- vide sign$cant improvements to recommendation egectiveness. In an earlier work, we introduced a fizzy hybrid CF technique which inherits the advantages of both memoly-based and model-based CF. In this paper, using relational fizzy subtractive clustering as the first level modeling and then mining association rules within individual clusters, we propose a two level model-based technique, which is scalable and is an enhancement over association rule based recommender systems. Our results from comprehensive experiments using a large real life web usage data and pegormance comparisons with memoly-based and model-based approaches help substantiate this claim.

1. Introduction Collaborative filtering (CF) [6] is a popular technique  used in web personalization for building recommender systems, which predicts the preferences of an active user (also called the current user), based on the preferences of past like-minded users. This approach relies on the history, which is a dataset recording all previous users? interests, which could be inferred from their ratings of the items at a website (products or web pages). Rating might be explicit, e.g., through previous purchases, customer satisfaction questionnaires, etc. or might be implicit, through browsing activity on a website.

Breese et al., 1998 [2] identified two major classes of CF algorithms. Memory-based algorithms operate over the entire user history dataset to make predictions. These algorithms employ a notion of distance to find a set of users, known as neighbors, which tend to agree with active user. The preferences of neighbors are then combined to produce recommendations for the active  user. Memory-based techniques are simple, provide high accuracy recommendations, and admit easy addition of new data. However, they are computationally expensive as the size of the user dataset increases.

Model-based algorithms on the other hand consider the user history dataset to estimate or learn a model offline, which is then used for predictions. Data mining techniques such as clustering, mining association rules, and sequence pattern discovery have been used for this purpose [7, 91. Usage data is often rather sparse and noisy. Many web sites, e.g., university sites, have large number of pages which are accessed by users with very diverse interests. Even a single user may browse with different interests at different times. Moreover, navigation pages near to the root in the site hierarchy are visited more frequently than the lower level pages which are more important content wise. Applying the aforementioned modeling techniques alone on such sparse web data, though reduces the online processing cost, often comes at the cost of reduced accuracy of recommendation results.

It is possible to make use of specific characteristics of the modeling process to provide significant improvements in recommendations. For example, the relational fuzzy subtractive clustering (RFSC) we proposed earlier [13] yields a model in the form of fuzzy clusters with specific sessions as cluster centers or protomes, and every session having some degree of memberships with each cluster. Using these characteristics, we proposed [14] a fuzzy hybrid CF technique, which is a hybrid of memory- based and model-based CF approaches that inherits the advantages of both. We showed that, compared to the model-based (clustering) approach, our fuzzy hybrid CF is scalable while providing increased recommendation accuracy for sparse web usage data. Unlike many existing clustering algorithms, RFSC does not require any user specified control parameters and scales up to large datasets. Besides, RFSC is relatively more immune to noise, and can deal better with noisy web usage data.

In this paper, we propose a two level model-based technique, which applies association rule mining technique within each RFSC cluster. As shown by the results of our experiments, this technique yields     significant enhancement over association rule based recommender systems applied to the original user dataset as a whole. The rest of this paper is organized as follows.

Section 2 provides an overview of the RFSC algorithm.

In section 3, we present related work and our two level model-based technique. Section 4 presents the results of experiments on real web log data. Concluding remarks are provided in Section 5 .

2. Relational Fuzzy Subtractive Clustering In this section, we briefly describe the RFSC  algorithm. Interested readers are referred to [13] for a detailed description along with experimental results.

Relational data [4] is presented as a matrix R, where Rij is the dissimilarity between objects xi and x,. It also holds that R$0, Rij=R,i, and Rii=O. RFSC algorithm operates on such a relational matrix R, starting by considering each object xi as a potential cluster center. The potential of xi is calculated using the formula:  P ; = g  e-"R: ,where a = 4 l J , j=1  in which Rij is the dissimilarity between objects xi and xj, NU is the total number of objects to be clustered , and y is essentially the neighborhood-dissimilarity value calculated from R [13]. The object with the highest potential (PI*) is selected as the first cluster center. Next, the potential of each object is reduced proportional to the degree of similarity with this previous cluster center.

Thus there is larger subtraction in potential of objects that are closer to this cluster center compared to those which are farther away. After this subtractive step, the object (xt) with the next highest potential (Pt) is selected as the next candidate cluster center. Now to decide if this candidate cluster center can be accepted as an actual cluster center or not, we make use of two thresholds Z'accept ratio) and 5 (reject ratio), where 0 <'Z, g < 1, and 5 < Z . If Pt > EP1*, then xt is selected as the next cluster center and this is followed by the subtractive step described above. If Pt < 5 PI*, then xt is rejected and the clustering algorithm terminates. If Pt lies between =PI" and  PI* (gray region), then we check if the object provides a good trade-off between having a sufficient potential and being sufficiently far from existing cluster centers. If this is the case, then the object is selected as the next cluster center.

After finding C cluster centers, we find the membership of every object x, with each cluster ci as follows.

R,,j is the dissimilarity of the i" cluster center x,! with the j& session xj. When x, = x,, , we have that R ,  = 0 and the membership uij = 1.

-"R$ ug= e , i = [1..C] & j = [l..N].

3. Two Level Model Based CF Technique Let U be the set of URLs in the session history  database D and M=]UI. Let SI, ..., SN,, denote the user sessions in D. Every user session is a M-tuple. We have sij = 1 if the i" user accessed the j" URL, or else sij = 0.

Let sa be the active user session. Also let NA c U be all the URLs not yet accessed by the active user. A collaborative filter is a function f that takes D as input and produces recommendation set from pages in NA [lo]:  saj=f(sl, ~ 2 ,  ..., SN~), Vj ENA Our goal in this paper is to improve the accuracy of  association rule based recommender systems while maintaining scalability. An association rule [ l ]  is a statement of the form X + Y, where X and Y are sets (of items, or web pages in our context). Rule X+Y indicates that whenever a session s in D contains itemset X, then s also contains itemset Y with some certainty, called as conJidence of the rule. In Sarwar et ul. 2000 [12], association rules are first discovered from D. Then preferences of the active user are matched against the items in the antecedent (w of each rule. The items on the right hand side of the matching rules are sorted according to the confidence values and the top N ranked items are recommended. As web usage data is highly sparse, there may be a large number of short rules due to which there is often no exact match between the preferences of the active user and antecedent of the rules. To improve the performance of recommender systems, [ 111 considers dimensionality reduction technique. Fu et ul., 2000 [5] suggest an alternative by finding rules with best match.

The degree of intersection of rules with active session can be used as a weight to determine the recommendation set.

Mobasher et al., 2001 [8] used a sliding window w over the current active session. The size of this window is iteratively decreased until an exact match with the antecedent of a rule is found. For this, the maximum size of the window has to be chosen, which is often chosen arbitrarily as there is no prior knowledge for this. Another problem with this technique is that it requires repeated search through the rules in case no match is found.

Also, during the learning phase, when association rules are extracted from the whole user dataset using a global minimum support, we may miss rare but important items (content pages occumng deep in site hierarchy) which may not occur frequently. In addition, during the online recommendation phase, many rules may not even be relevant to the active user. What is required is to search through only those rules that are relevant and meaningful to the active user and select the rules that best (may not be exact) match the preferences of the current use  With this background, we now present the proposed two level model-based technique. In the first level, we use RFSC algorithm to cluster the user sessions. Let W= {Z,,Z*, ..., ZC} be the set of C prototypes . Next, we     defuzzify the clusters by assigning the sessions to a cluster to which its membership is highest.

Defuzzification causes noise to be separated from the real structure in the data. In the second level, we find association rules within each cluster. In this paper, we restrict to generation of association rules with a single consequent. For an active session s,,, our algorithm first finds the nearest prototype, then matches the s,, with the antecedent of each rule in that cluster to find the match score for each rule. This is weighed with the confidence of each rule to obtain the recommendation score (rec-score) of the page which is the consequent of that rule. Algorithmic details are as follows.

Algorithm recommend: Input: W, set of prototypes;  Association rules for every cluster; s., active session.

Output: topN recommended URLS.

Begin /* STEP 1: findthe nearest prototype */  F o r i = l t o C Begin  Calculate DI,, the dissimilarity between hand the i* cluster prototype Z,;  EndFor find prototype Z, such that D,is minimum;  EndBegb  Begin I* STEP 2: find recommendation score for every association rule in cluster p */  For i = 1 to NumberOfRules in p match(s., rp,) = cosine (s,, I,,,); rec-score(s,, I,,,) =match(%, rp) * confidence (Ip$;  EndFor EndBegin  Begin /* STEP 3: find the url populanty */  Prune rules whose consequent is not in NA; If multiple rules recommend the same consequent, choose the rule with highest recommendation score; Sort rules according to their rec-score;  EndBegb Return top-N most popular URLs;  EndAlgorithm  Further, in step 1, instead of finding the nearest prototype, we can find K-nearest prototypes, Steps 2 and 3 are then carried out for each cluster, and at the end, the recommended URLs from each cluster can be combined.

4. Experimentations and Results Recommender system efficiency (computation time)  and effectiveness are two measures that we use to evaluate and compare the performance. Recall, precision and F1 have been widely used for measuring effectiveness [2, 10,121. We present comparative charts using these metrics. We had access to logs from the web server of our department during the period of June 15, 2004 to July 5, 2004. Access logs are at a fine level of granularity. Data cleaning [3, 71 activities were performed to remove entries for image files, failed requests, web crawlers and other such components. Sessions were created by considering 45 minutes as the maximum elapsed time between two consecutive accesses from a  single IP address. Root ?I? was filtered out, and short sessions of length 1 or 2 were removed. We obtained 12,227 sessions and 10,153 distinct URLs. The average length of a session was 8.54 pages. Sparsity level defined as 1 - (nonzero entries I total entries) was 0.9993 12, which indicates that the dataset is highly sparse. We then divided randomly this dataset into (1) the training set, with 10,000 sessions and (2) the test set, with 2227 sessions. Using RFSC and validity index formulated in [I31 34 clusters were obtained. We compare the predictive ability of five different approaches: (1) memory-based (k- nearest neighbor), (2) pure clustering (RFSC) based recommendation model, (3) pure association rule based recommendation model, (4) fuzzy hybrid CF technique [14], and (5) two level model-based technique. We adopted the all-but-1 protocol [2], by which one page is randomly withheld (hidden) from every session in the test set and evaluated the ability of the above techniques to predict this hidden page.

Figure 1 shows the comparison of recommendation quality for different values of K-Nearest Prototype (KNP). For two level model-based technique, 681 sessions do not get assigned to any clusters after dehzzification step. These sessions are essentially noise and are not considered further. Association rules are then mined in each cluster. We see that the recommendation quality for two level model-based technique has increased compared to that obtained by applying association rules directly to the entire dataset. Quality hrther increases as more nearest prototypes are considered. We provide examples of some rules which were found with a high confidence (> 95%) in different clusters, but were missed when rules were extracted from the dataset as a whole, since most items in these rules are content pages occurring deep in the site hierarchy.

[/CONCEFT/iindex.html], [/db/db/index.html] + [/research/research.html] [/-j~zhu/homepage/T4512~O/faq.html], [/programs/grad/coues.html] + [/progra1ns/~masters/comp65 11 .8html]  [/events/conferen/conferences,html], [/events/defenceses/defences.shtml], [/events/eventsbtml], [/events/other.html]+ [/~ents/seminars/semiminars.shtml]  The first rule indicates that users who are interested in research at CSE department have shown interest in both CONCEPT and database research groups. The second rule indicates that students who have taken database design course (comp6511) have been regularly visiting the faq page maintained by the teaching assistant of that course. The last rule indicates that students often keep themselves updated with different events within the department. From Figure 1, we can also observe that the recommendation quality of pure cluster based model is better than that of pure association rule based model. As TOPN increases, the recall increases but the precision is reduced, and the overall impact on F1 is a reduction (Figure 2). Also we see that for higher values of TOPN, all five techniques have almost the same quality. In     Figure 3, we compare the efficiency in terms of online recommendation time. The time taken by hybrid or two level model-based approach is the same as model-based but 30-40 times less than memory-based approach. Also for 1 -NP, 2-NP, 3-NP, and 4-NP the time increases in that order, but this small increase in recommendation time results in increased recommendation quality.

Improvements rn Hybrid .Two Level Model-based n Clustering Based mAssociationRule Based  ~-  0.04  0.02   Figure 1. Recommendation effectiveness  0.25 -.-.----- ---2-4-NP (Twoie& Modei-based)  * -SCI M odd-based (Clustering) +Model-based (Association Rules) 0.2 I  20 2 5  TOW l5 5  Figure 2. Impact of TOPN on Effectiveness  +M ernory-based  15 +Two Level Model-based --n-M odd-based (Clustering) +M ode-based (Association Rules)   0 1 2 3 4  K- Nearest Prototype (KNP)  Figure 3. Comparison of efficiency  5. Concluding Remarks Recommendation systems must be able to handle  sparse and noisy data such as web site access log. We compute the access behavior models using a relational fuzzy subtractive clustering (RFSC) technique we developed earlier. Each cluster centre acts as a prototype.

In our fuzzy hybrid CF technique, we choose K nearest prototypes and then limit our k-nearest neighbor search to  a smaller subset based on membership values. In two level model-based technique, we once again use the clusters by defuzzifying them and then computing association rules within each cluster. Our experimental evaluation and comparison of different approaches clearly show that both these techniques produce better quality recommendations than Dure model-based techniques, providing recommendations closer memory-based approach with much times than memory-based approach.

Acknowledgements: This work was supported in part by Grants and Concordia University support.

