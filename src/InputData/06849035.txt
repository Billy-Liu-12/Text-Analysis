Big Data Search for Environmental Telemetry

Abstract? This paper presents how Exalead CloudView is used to search for environmental parameters in big data. In particular, given an environmental application, we propose to leverage trivial and non-trivial connections between different sensor signals, in order to find patterns that are likely to provide innovative solutions to existing problems and to establish different data models. The aggregation of such data models will provide evidence of connections between different events and environmental responses to those triggers, faster and better than trivial mining sensors data. As a consequence, the software has a significant potential for matching environmental applications and challenges that are related in non-obvious ways.

Keywords? Big Data, sensors, data models, environment;

I.  INTRODUCTION Telemetry represents a communication process performed  by executing measurements at a distance. Usually some devices generate measurement data remotely from different environments and return the information to an accessible location. The data can be transported through different medium, from electrical current on wire to modulated pressurized air to light through optic fiber lines or simply through the air, but mostly in the radio band of the electromagnetic spectrum, due to the scalability nature of the link that can be established [1].

In this paper it will be described such an application, that transmits data through GSM-GPRS and Internet, or through the UHF band. We will detail the data acquisition techniques in the telemetry system and a procedure to index the Big Data [2].

There will be implemented a set of tools for processing data, building several advanced statistics for creating data models that are likely to provide patterns between some events and the environmental response to those triggers. The paper is organized as follows: Section II describes the telemetry system, considering the state of the art and strategic relevance. Section III presents the Big Data solution and the configuration, section IV shows the data models configuration in order to create the desired patterns. Finally, Section V concludes the paper.



II. TELEMETRY SYSTEM  A. System description The telemetry system that will be taken into account has  several key elements which ensure the communication between the remote stations and the servers that hold together the  information captured from the sensors. The Gateway ensures the communication with the remote telemetry unit and the available resource management. The central database is hosted on a hardware platform with server features, equipped with a software packet focused mainly on data presentation in various forms [2].

The installation system, as presented in Fig. 1, is built from a distant telemetry unit, sensors and actuators (for water level and temperature) connected to the remote unit, and a solar panel that powers the station and the sensor. The communication between the RTU and Gateway is realized through GSM-GPRS or Internet. In case of no coverage for GSM, there will be used remote stations in the UHF band of 430-440MHz. The station will communicate with the data concentrator through a bridge station which has to ensure the data conversion for UHF to GPRS and GPRS to UHF [3].

Fig. 1 Telemetry system structure  The central server has the ability to collect and store the data from the targeted locations, like weather monitoring data, hydrological data, or environment data. These datasets that can be used for monitoring, detection or actuation inside several processes. The database engine is based on a SQL structure, placed on the central server, providing data collection from the remote stations [4].

B. System components communication The communication protocol between the telemetry?s  system components is TCP/IP [5]. The protocol can be implemented through an A2A (addUPI to ASCII) tool to a server or a telemetry gateway. The specification described belongs to the application layer, according to the ISO OSI layered system, as presented in Fig. 2.

2014 IEEE International Black Sea Conference on Communications and Networking (BlackSeaCom)     Gateway  Server  Client  URL request  URL request  XML response  XML response   Fig. 2 The communication between the telemetry system components  addUPI servers are handling various information grouped together in entities called nodes. Each node has an ID that is to be unique on this server. Thus, when requesting the addUPI server using a node ID, this node (and its subnodes ? depending on request) is used for the response or none if this ID is unknown. The addUPI client on the other hand can import nodes, giving them a new ID that is unique locally, but also it needs to keep the ID on the addUPI server, called the remote ID [6].



III. RESULTING ARCHITECTURE FOR BIG DATA SOLUTION  A. Big Data Currently there are many solutions on the market for search  and analysis of large volumes of information [7], [8], focused on semantic technologies for aggregating and collating data, both structured and unstructured [9]. There have been developed solutions for BI (Business Intelligence) and web applications, like B2B (Business to Business), B2C (Business to Customer), using data from various sources (databases, web content, user generated content, etc.) [10]. Ontopica has released Dito, a software application based on semantic technologies and ontologies [11]. Knime [12] is a platform for performing statistical data analysis and data mining.

RapidMiner [13] combines machine learning, data mining and predictive analytics.

B. Exalead CloudView Exalead CloudView [14] is a search platform which offers  wide access to information on infrastructure level and is used for both SBA (Search Business Application) for online and enterprise level. It combines semantic technologies for developing applications, as well as qualitative and quantitative analysis to provide information to the user, and it is designed to implement semantic processing and selective navigation for the Web data volumes.

CloudView Administration Console  Data Model Creator  User Interface  Regular User  Big Data  JDBC  Sensors   Fig. 3 Processing and accessing data via Exalead CloudView  Exalead CloudView allows the exploitation of large volumes of structured and unstructured data from different sources, and enables their presentation in an intuitive search interface, using semantic technology platform combining formats, structures and terminologies in a modular [15]. The way Exalead CloudView processes and accesses data is illustrated in Fig. 3.

CloudView accesses documents from different information sources using so-called connectors. Each connector uses protocol data source to connect their own information source and access the documents to be indexed. A connector is part of the managed code that runs in CloudView, that sends data to CloudView using Push API. It can be developed in any language or through CloudView APIs. Fig. 4 provides a simplified view of the indexing process: connectors access data sources, convert files in documents and send them to the Push Server that divides documents into groups (analysis).

Search applicationsConnectors Search APIPush API  Localization  Analysis  Indexing End user  Indexing Search  Data sources       Fig. 4 Simplified view of the indexing process  Analysis is performed sequentially, each document being processed, making retrieval of text, semantic processing, and other custom operations and location. Once indexing is done and updated, the new documents are available for searching.

Connectors operate early in the CloudView indexing process.

They send documents from different sources to a Push API server through PAPI protocol.

C. Configuration Methodology for CloudView The CloudView configuration management is based on the  connectors in the indexing process. Standard connectors of CloudView include files, databases, HTTP, XML etc. The JDBC database type connector allows indexing the content of an SQL database accessible through JDBC by using configurable queries for extracting data records. These are then processed to compose the documents to be indexed.

Configuring a database type connector involves first installing and selecting a JDBC driver, setting connection parameters and testing the connection. Once the connection is established, a valid SQL query can be added to allow the automatic import of the selected fields. CloudView provides a direct connection parameter to the sources of the JDBC database called Connection String using information such as database name, server address and account if necessary.



IV. DATA MODELS Developing any search application in Exalead CloudView  requires defining what data to include in the index schema, and then configuring one of more search logics to control how the  2014 IEEE International Black Sea Conference on Communications and Networking (BlackSeaCom)     documents are presented to users as search results. Index fields are used for searching and to display data in hit content in the results that are returned [16].

Categories store static facet values, which allow users to narrow their search results by focusing on a certain aspect of the results [17]. The data model represents a starting point for configuring the index and the search processes, allowing the management of different types of data [18]. Property sets can be like alphanumeric, numeric, geographic types. After scanning the data sources, new index fields and categories are generated inside the index schema including several meta- elements or prefix handlers according to the data logic.

When creating a data model property, it can be chosen one of the following field types: either an index field or a category facet only, or both. The most common indexing method is to assign a dedicated Index field attribute in XML configuration to the property, represented in Fig. 5. The property can then be made searchable (user queries can be applied to this field) and retrievable (the field can display in the search results).

<IndexSchema allowIntensiveDiskAccess="false" name="default_model">  <AlphanumFieldConfig nbWordsPerLeaf="1000" implementation="strbtree" multiContext="false" gzip="true" bloomFilter="true" storeTf="true" patternSearchEnabled="false" useVariablePositionsEncoding="false" maxInlineWordPositions="16" maxStoredWordPosition="8192" ramBased="false" multivalued="false" retrievable="true" searchable="true" fieldName="text"> </AlphanumFieldConfig>  Fig. 5 XML configuration of the property  The property can also be stored as a facet and a category will be created with the value of the property. Faceted navigation will automatically be created for this property. In that case, it is possible to search for the value of the property. If the property belongs to the default class, the property can be searched with a prefix format of property:value field.

Otherwise, it can be searched with a prefix format of classname_property:value.

While the data model simplifies the set up of the most common features for index fields and category facets, sometimes the user may need to customize indexing or search behavior.



V. CONCLUSIONS In this paper we presented a way to interconnect Exalead  CloudView, a Data Mining tool, with a telemetry system in order to create several data models and patterns which are likely to provide innovative solutions to existing problems. The aggregation of such data models has the main purpose to provide evidence of connections between different events and environmental responses to those triggers, faster and better than trivial mining sensors data.

