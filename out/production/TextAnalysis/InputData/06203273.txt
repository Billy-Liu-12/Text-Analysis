A Novel Association Rule Mining Mechanism in

Abstract - Sensor association rules have been found to be very useful for improving the quality of service, energy conservation,  resource management, etc. in wireless sensor networks (WSN).

Most of the association rule mining algorithms for sensor  networks require the behavioral data, which describes the  sensor activities, to be sent to the central node (sink node) by  the sensors. Then, the sink node creates the sensor database and  applies different algorithms to find association rules from the  sensor database. In this paper, we propose an in-network  mechanism to find frequent sensor patterns in the sensors  themselves. So, the sensors send only the frequent senor  patterns to the sink, not the sensor activity sets.

Keywords - Sensor networks, Association rules.



I. INTRODUCTION  Wireless Sensor Networks (WSN) is a network of sensors, which are capable of sensing, processing and transmitting. Each sensor monitors different parameters such as light, temperature, humidity, etc. and reports to a predefmed central node(s) called sink(s) in multi-hop mode of transmission. WSN has been found to be very useful in various fields such as military applications, agriculture, weather monitoring and forecasting, forest fire monitoring, physical environment monitoring, etc. [1]-[3]  In addition to the unreliable wireless communication, nodes of a WSN have to work with limited resources such as limited energy, limited processing capacity, limited storage, limited memory, limited communication capacity, etc. So, WSN suffers from lot of problems such as lost messages, delay in data delivery, loss of data, data redundancy, etc. [3]? [5], resulting in poor quality of service(QoS). Various techniques and protocols have been suggested to improve the QoS of WSN [6], [7].

Recently, data mining techniques have been found to be very useful to extract the patterns describing the behavior of the sensors and the network, which can be used to improve the performance and QoS of the network. Among various data mining techniques, association rules, called sensor association rules, have been used extensively in WSN [5], [8]-[11 ].

Sensor association rules fmd the temporal relationships among the sensors. As an example, one sensor association rule may look like (SI, S2) -+ (S3, S4) , 75%, A. This rule states that if events are received from sensor 51 and 52, there is a 75% chance of receiving events from sensors 53 and S4 within A units of time. This rule can be used to predict the sources of future events, identifY the faulty nodes and predict the   overall behavior of the network. Mining sensor association rules involves two steps: the first step is about collecting the behavioral data, which shows the sensor activities, and the second step is about finding association rules from the behavioral data. Again, finding association rules involves two steps: fust step is to fmd the frequent sensor patterns and the second step is to fmd the association rules from the frequent patterns. This paper is about finding the frequent sensor patterns.

There has been some research works for applying data mining techniques, particularly association rule mining technique, to sensor data. Loo et al.[9] studied the problem of mining association rules from sensor data using a data model and online one-pass analysis of data. In [10] the authors proposed a Data Stream Association Rule Mining Framework(DSARM) for the data stream received from the sensor nodes. This framework is based on "Apriori" algorithm and can also tolerate the missed readings.

Boukerche et al.[ll] proposed another novel algorithm for mining association rules in sensor networks. In that paper, the authors proposed an efficient data mining algorithm for generating sensors' behavior patterns using PLT(Positional Lexicographic Tree), which is a new representational structure to store the sensors' behavioral data.

The contribution of this paper can be summarized as follows. Generally, the sink node collects the activity set or behavioral data from every sensor and creates the sensor database. Then, association rules are extracted from the sensor database in the sink node. This process requires lots of message passing between sensors and the sink node. In this paper, we have proposed a mechanism to calculate the frequent sensor patterns in the sensors themselves. So, the sensors will send the frequent sensor patterns along with support counts to the sink.

Rest of the paper has been organized as follows. Section II explains the sensor association rules, followed by section III, which discusses proposed mechanism. Section IV and V presents the experimental results and conclusion respectively.



II. SENSOR ASSOCIATION RULES  Association rule mining is an important data mining technique and has been used extensively in various domains [12]- [14]. However, sensor association rule mining is a little bit variation from the association rules discussed in [12], and can be defmed as follows. Let S = {51, 52"" 5n} be the set of sensors in a sensor network. Let time is divided into equal    sized slots {tb t2, ... tm} such that ti+1 - ti = A, where A is the size of each time slot. This = tm - tl is the historical period of the data defmed during the data extraction process is the historical period of the data defmed during the data extraction process. A set of sensors P = {sl.s2 . .  sd is called a pattern of sensors. An epoch is a couple E =(E'5> P) such that all sensors in the pattern P detect events within the same time slots (E'5)' and a sensor database DS(also called behavioral data) is defined to be a set of such epochs(Table I). An epoch E(E'5> P) is said to support a pattern PI. if PI C P. The frequency of a pattern PI in DS is the number of epochs in DS that supports PI. Sensor association rules between two patterns PI and P2 are the implication of the form PI ? P2, where PI , P2 C S and PI n P2 = 0. Support of the rule is the frequency of PI U P2, and confidence of the rule is calculated as frequencY(PI U P2)/ frequency(P I)'  TABLE I: DATABASE OF EPOCHS. Ts: TIME, S: SENSORS  Ts Epoch  I S,-S2, S5  2 SLS3, S5  3 S2, S4

III. THE PROPOSED MECHANISM  WSN can be assumed to be consisting of a set of sensor nodes S = {SI> S2, S3, .. "sn} '  It is also assumed that sensor ids are in a lexicographic order i.e. SI < S2 < S3,' . .  ,< Sn. Let time is divided into slots of equal size A. Each sensor has a buffer B, one entry for each time slot. At the end of every time slot, each sensor set the corresponding buffer entry to denote whether an event has been detected at that time slot. For example, the buffer of a sensor S with seven time slots may look like {O, 0, 1, 1, 0, 0, 1 }, which shows that events have been detected by the sensor during 3rd, 4th and 7th time slots. From this buffer, the sensor can create its activity set as {3, 4, 7}. The WSN is also designed to put more computational power to the sensors and each sensor is equipped with additional storage. In this context, it can be mentioned that researches have shown that current flash memories offer low-cost high-capacity energy-efficient solution in comparison with the cost of data transmission.

At the end of historical period, each sensor will create and store its activity set and calculate its frequency or support count. It is assumed that the sink has already broadcasted the parameters such as minimum support and minimum confidence to the sensor nodes. Then, each frequent sensor (sensor with support count more than the minimum support) sends its id and support count to other sensors using multi-hop protocol. Now, each frequent sensor will maintain an ascending order list of frequent sensors with higher ids starting with it. As for example, set of frequent sensors of S3 may look like {S3, S6, S9 } '  Then, each frequent sensor communicates with the sensors in its list of frequent sensors, finds the frequent sensor patterns for itself and stores them. For optimization purpose, the last frequent sensor will start the process. If require, every frequent sensor can also store set of common time slots and corresponding frequency for every frequent pattern to increase the efficiency. At the end, every frequent sensor will send the frequent sensor patterns to the sink.

Some pruning techniques and proper data structures to store the frequent sensor patterns in the sensors will increase the efficiency of the algorithm to a great extent. While communicating with other higher sensors, a sensor should use the shortest path using appropriate algorithm.

A. An Ex ample  Let us consider a sensor network with nine sensors (SI' S2, S3, . . .  ,S9) and nine time slots(1, 2, 3 ... 9). The Figure 1 shows the network with the sensors and corresponding activity sets after the historical period.

G  0 0 (:0 [1,2,3,5] [9] [1,3,5]  ? 0 0 [5,9]  0 ? ? [8] [1,2,3,4] [1,2,3,4,5]  Figure 1: Sensors with activity sets  Assuming minimum support to be 3, only SI, S3, S8 and S9 are frequent. SO, SI> S3, S8 and S9 will participate in the construction of frequent sensor patterns. Now, each frequent sensor will send its id to other frequent sensors, and each frequent sensor will create and store an ascending order list of higher frequent sensors as shown in Figure 2.

(0 0 G [1,2,3,5 (9) [1,3,5)  [1,3,8,9) [3,8,9)  0 0 ? [5,9)  0 ? ? (8) [1,2,3,4) [1,2,3,4,5)  [8,9) (9)  Figure 2: Sensors wtth list frequent ensors  After the sensor lists are created, the frequent sensors will start finding frequent sensor patterns. As mentioned earlier, it will start with the second highest frequent sensor i.e. S8.

SO, S8 will scan its list, communicate with S9 and find {S8' S9 } to be frequent. SO, S8 will store{s8, S9 } '  Then, S3 will scan its list and communicate with S8 and S9 . Only {S3' S9 } being frequent, S3 will store {S3, S9 } '  Finally, SI will communicate with S3, S8 and S9 to fmd the following frequent sensor patterns: {SI> S3 } ,  {SI' S3, S9 } {SI> sg} ,  {SI> S8, S9 } {SI' S9 } '    It should be mentioned here that when a sensor communicates with other frequent sensors in its list to find frequent sensor patterns, various strategies could be followed to optimize the limited processing power, limited storage and limited energy of the sensors. One simple technique is to construct a graph (Figure 3) with the frequent sensors and use depth-first-search technique to find the frequent sensor patterns. Storing set common time slots for every frequent pattern by the sensors will also increase the efficiency of the algorithm to a great extent.

Figure 3: A graph of frequent sensors of s1  At the end, the frequent sensors(s), S3, ss) will send the frequent sensor patterns to the sink.



IV. EXPERIMENTAL RESULTS  Several simulated experiments have been conducted to study the performance of the proposed mechanism. The simulation is based on C++, with 961 sensors deployed in a grid of 300m x 300m. The sensors are 10m apart among themselves, and each of them can communicate with its eight neighbors. TDMA based MAC protocol has been assumed for the experiments, and the experiments are based on the number of messages to be sent to the sink node. It has also been assumed that each element in the frequent patterns will be sent in a separate message to the sink node. A slot size of 1 minute, and historical period of 3 days and 5 days have been used for the experiments. The simulator has been run several times to fmd the number of messages for support values of 10% to 90%. Experimental results are presented in Figure 4.

1?3Days -+- 5 Days   ? 6]000 \ '"  ? II> ? ?JJOoo '\ :: ... 40000 \\.,  ? ? '" :moo ..::::  \-:: :lJOOO -------. z:   SUI1Ilort(%)  Figure 4: Experimental Results  CONCLUSION  This paper has presented a mechanism to calculate the frequent sensor patterns in the sensors themselves instead of in the sink. As sensors with more computational power and storage are becoming available, this approach will be very useful. However, more experiments are going on to evaluate the performance of the algorithm.

