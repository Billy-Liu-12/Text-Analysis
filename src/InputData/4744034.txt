Privacy-preserving DBSCAN on Horizontally Partitioned Data

Abstract  Privacy preserving data mining of distributed data is an important direction for data mining, and privacy preserving clustering is one of the main researches. At present, most privacy preserving clustering algorithms are concentrated on k-means and based on two parties and a trusted third party, clustering results are uncertain and hard to find complex shape clusters, and the protocols are inefficient because of using encryption, so we propose a algorithm called HPPDBSCAN based on semi-honest models for horizontally partitioned databases using some secure protocols such as secure sum computation, scalar product computation, standardization, and comparison by means of a semi-honest third party. The algorithm resolves the problem of privacy preserving under semi- honest circumstance for multi-party. Theoretic argument and example analysis demonstrate that the scheme is secure and complete with good efficiency.

1. Introduction  Advances in information technology and the ubiquity of networked computers have made personal information much more available. This has led to a privacy backlash. Privacy-preserving data mining techniques enable knowledge discovery without requiring disclosure of private data. Privacy-preserving methods have been developed for numerous data mining tasks, and many are described in [1-4].

Researches in this field typically involve two categories: data transformation to mask the private data, and secure multi-party computation to enable the parties to compute the data mining results without disclosing their respective inputs [4]. The existing privacy preserving algorithms mainly concentrated on association rules and classification, only few on  privacy preserving clustering and these algorithms mainly concentrated on centralized and vertically partitioned data. Techniques for privacy preserving association rule mining in distributed environments were proposed by Kantarcioglu and Clifton [1].

Privacy preserving techniques for clustering over vertically partitioned data was proposed by Vaidya and Clifton [1]. Only Jha et al [2] and Inan et al [3] proposed privacy preserving k-means clustering algorithms on horizontally partitioned data. Among them, Jha et al [2] present k-means clustering algorithm and Inan et al [3] proposed universal clustering algorithm.

The complexity of k-means clustering algorithm is only O(n), so most existing privacy preserving clustering algorithms are concentrated on k-means. But the algorithm requires users to specify k in advance and the original clustering centers are chosen randomly, the clustering results greatly depend on the choosing of original centers, which results in the uncertainty of clustering results, and this algorithm is not suitable for discovering clusters with non-convex shapes or clusters with very different size. Moreover, it is sensitive to noise and outliers, and a small number of such data can substantially influence the mean value.

But the algorithm DBSCAN (Density Based Spatial Clustering of Applications with Noise) has no the drawbacks above. So we proposed privacy preserving DBSCAN [5] algorithm on horizontally partitioned data, denoted as HPPDBSCAN. Our main contributions can be summarized as follows:  Introduction of two protocols for secure multi- party computation: secure comparison, and secure standardization.

Propose privacy preserving DBSCAN algorithm on horizontally partitioned data.

Proof of security of the algorithm, analysis of communication and computation costs, take an example to show the application of the algorithm.

Proceedings of 2008 IEEE International Symposium on IT in Medicine and Education      The paper is organized as follows. Section 2 gives problem formulation. Section 3 defines the secure protocols of privacy preserving. Section 4 describes the algorithm HPPDBSCAN. Section 5 gives the proof of security of the algorithm, analysis of communication costs. In section 6, we take an example to demonstrate the application of the algorithm. In section 7, we conclude with a discussion of areas for further work on this problem.

2. Problem formulation  There are r(r>=2) data holders P1, ,Pr, each of which owns a horizontal partition of the data matrix with m homogeneous attributes. The party Pi has database Oi with ni objects, and the total database is   r ii  O O , and the number of total objects is n,  and  r ii  n n . These parties want to cluster their data by means of a third party so that the clustering results will be public to data holders at the end of the protocol.  The third party does not have any data but serves as a means of computation power and storage space. Third party?s duty in the protocol is to govern the communication between data holders, receive and store the data sent by data holders, assist calculating and comparing distance, publish clustering results to data holders, so the third party is also called server party, denoted as SP. Each party, including the server party, is semi-trusted, that is, they follow the protocol as they are supposed to but may store any data that is revealed to them in order to infer private information in the future. Semi-trusted behavior [6, 7] is also called honest-but-curious behavior. Involved parties are also assumed to be non-colluding.

We assume the  and minpts has been specified by users in advance and the data type is numeric. All data holders and SP work together to calculate the distance between pair-wise and compare the distance with using secure protocols.

3. Secure protocols of privacy preserving  The data party need encrypt its data for concealing privacy data and get high creditable results, but encryption should not affect the clustering accuracy, and at present, there are not uniform encryption methods so that different cases need different protocols.

We use secure multiply computation, such as comparison and standardization protocols.

3.1. Preliminary knowledge  Definition 1(secure sum protocol [8]). Assuming r parties, P1,?,Pr, the party Pi holds data Vi, all involved parties are never colluding. Every party wants to get  the sum V=  r ii  V , but doesn?t want to reveal its own value. The server party (SP) generates a random number R and sends to P1, P1 calculates R+V1 and  sends the sum to P2, P2 calculates R+  1 ii V , and  sends it to P3, ?, until Pr gets R+ 1 r  ii V  and sends  it to SP, SP calculates R+  r ii  V -R=  r ii  V  and sends the sum to all involved parties.

Definition 2 (SPP (Scalar products protocol)).

Assume party Pa has a private X(x1,?,xm), party Pb has Y(y1,?,ym), party Pa wants to get the result of   m i ii  u X Y v x y v , where v is a random number which party Pb knows, and they agree with:(1) party Pa should not able to derive the result of X?Y or any value of yi from u and the execution of the protocol; (2) party Pb should not be able to derive the result of u or any value of xi from v and the execution of the protocol.

There are many scalar product protocols according to different communication complexity and security.

We use the one demonstrated in literature [9], because it is simple and efficient.

Definition 3 (Yao?s Millionaire problem). We use this primitive in one of our protocols. The purpose of this primitive is to compare two private numbers and decide which one is larger. This problem was first proposed by Yao in 1982 [10] and is widely known as Yao?s Millionaire problem. Essentially, the problem is Alice and Bob are two millionaires who want to find out who is richer without revealing the precise amount of their net wealth. Cachin [11] proposed a solution based on the -hiding assumption. The communication complexity of Cachin?s scheme is O(l), where l is the number of bits of each input number and the computation complexity is also linear on the number of bits used to represent both the numbers.

Definition 4 (Composition theorem for the semi- honest model). Suppose that g is privately reducible to f and that there exists a protocol for privately computing f. Then there exists a protocol for privately computing g.

PROOF. Refer to [7].

Proceedings of 2008 IEEE International Symposium on IT in Medicine and Education     3.2. Standardization protocol  Protocol 1  Assuming the vector of initial attributes is x(x1,x2,?,xm) and the standardized vector is x?  (x1 ' ,x2 ' ,?,xm ' ), then '  ix = xxi , let x be the mean  of and be the standard deviation of the m-attribute vector.

With horizontally partitioned data, the same kind of attribute was distributed in different parties, so secure methods are necessary to standardize these attributes. r parties, P1,P2,?,Pr, ni(1 i r) is the number of objects in Pi, for a attribute, the vectors in all parties are: x1( 1,1x , 2,1x ,?, 1,1 nx ), x2( 1,2x , 2,2x ,?, 2,2 nx ),?, xr( ,1rx , ,2rx ,?, , rr nx ), the steps of secure standardization are:  (1) Calculate the mean:  Let a1=  ,1  n  i ix , ?, ar=  rn  i irx  , , Pi computes ai  (i=1,?,r) independently, SP and all data parties  calculate r  i id   and r  i in   using secure sum  protocol twice, and SP gets r  i ia   and r  i in   , and  calculates x = r  i i  r  i i  n  d   .

(2) Calculate the standard deviation: Let b1=    ,1  n  i i xx , b2=    ,2  n  i i xx ,?,  br=   ,1  n  i i xx ,party Pi calculates bi (i=1,2,?,r)  independently, SP and all data parties use secure  sum protocol  and SP gets r  i ib  and calculates :  = 2 ,1 1   1 ( )ir n i jr i j ii  x x n  (1)  (3) SP sends x  and  to all data parties. Each party standardizes its own date using z-score standardization formula: 'ix = xx i .

In step 1, two neighboring parties need communication twice to finish secure sum computation once. In step 2, party Pi calculates bi independently and  sends it to SP, obviously, SP can?t infer actual attributes according to bi. In step 3, all data parties calculate independently. So the protocol is secure.

3.3. Secure comparison protocol  Protocol 2 The protocol is to decide whether the sum of two numbers is bigger than the constant c or not. The two numbers are belong to two parties respectively and are private. The sum of the two numbers is the distance between two points in this paper.

Assuming party Pa has a private vector X(x1,?,xm), party Pb has a private vector Y(y1,?,ym), the Euclidean distance between X and Y can be finished by calculating the square of the Euclidean distance between them, the square of the distance is given by:  2 2   2 2  1 1 1  ( , ) ( )  ( 2 )( )  m  i i i  m m m  i i i i i i i  d is t X Y x y  x y x y  (2)  The steps of the protocol are: (1) Pa calculates d1=  m  i ix   2  independently,  similarly, Pb calculates d2= m  i iy   2 ;  (2) Pa and Pb engage in secure scalar product protocol described in definition 2, and  Pa gets  d3=  (2 )( ) m  i i i  x y +v, where v is a random  number ; (3) Pa calculates d0= d1+ d3, and Pb calculates d4=  d2-v respectively ; (4) Pb generates a random value r (r 0); (5)    Pa constructs its vectors as ( 0d  c 1), and Pb  constructs its vector as(r, r( 4d c  ));  (6)  Now Pa and Pb invoke the secure scalar product  protocol  and Pa gets the scalar ( 0 d c  ,1) (r,  r( 4d c  )) r 0 4d d c  and without Pb  knowing the result;  (7)   Now Pa has r 0 4 d d  c and Pb has r Pa and  Pb run Millionaire protocol to decide whether r 0 4d d  c >r, that is whether 0 4d d >c.

Proceedings of 2008 IEEE International Symposium on IT in Medicine and Education     Step 1 and 3, each party calculates d1,d2,d0 and d4 independently and without involving of other parties and no information revealing. Step 2 is secure because the scalar product protocol in literature [9] has been proved to be secure. Step 4 is secure. In step 5, two parties construct their two-dimension vector and without information leaking. Step 6, the scalar product protocol is used and is secure. Step 7, Yao?s Millionaire protocol is used and two parties Pa and Pb can?t get the distance between X and Y, they only get whether the distance is bigger than constant c or not, because scalar product protocol and Yao?s protocol are proved to be secure, the step is secure according to composition theorem [7]. In summary, the protocol is secure. The protocol isn?t used din the protocol to compute the distance between two points, so the distance has been protected.

The computation complex is O(n2), if  denotes the bit of a input character, the communication cost of the scalar product is 4 , and the communication cost of Yao?s protocol is O(m), so the communication of the comparison protocol is O(m+t ), where t is the times of iteration of scalar product protocol.

4. Algorithm  4.1. Algorithm DBSCAN  DBSCAN is the first clustering algorithm based on density, which is not sensitive to the input order of data, can find clusters with any kinds of shapes, and is of the ability of dealing with noises. The time complexity is O n2 there are several definitions of the algorithm as follow.

-neighborhood: the -neighborhood of a point p can denotes as: N (p)={q O|d(p,q) }, the algorithm gets the set N (p) according to region query.

core point: a point is called core point when it meets the following condition: | N (p)| minpts.

Where and minpts are the parameters of algorithm DBSCAN, which mean the radius of the neighborhood and the minimum number of points in the - neighborhood of a core point respectively. They both can be designated by user in advance.

Input: the set of data O, the parameters and minpts.

Output: the clusters generated by the clustering algorithm.

/*note: At first, every point is signed as noise*/ (1) Get a unclassified object o from set O; (2) Construct the -neighborhood set of o, N (o); (3) if |N (o)|<minpts(that is, o is not a core point),  sign o as noise, and run step (1);  (4) else (that is, o is a core point), all points in N (o) are added signs ClId, then store o into set Seeds and set the core_tag=true;  (5) Repeat(1)-(4), get all core points, store them into Seeds, set core_tag=true, used_tag=true;  (6) Let CurrentObject = Seeds(i), and search the set N (CurrentObject), assign ClId for all the objects in the set;  (7) Judging whether Seeds is null or not, if null, exit, otherwise, run (6);  4.2. Algorithm HPPDBSCAN  DBSCAN is an effective algorithm, but it only adapts to centralized datasets, the key step is to get the -neighborhood of a point p and expands a cluster by  region query, but the privacy preserving DBSCAN algorithm for horizontally partitioned databases find out core points by secure protocols. The following is the description of HPPDBSCAN algorithm. At first, every point is signed noise, after be clustered, it is assigned ClId. A semi-honest party SP is used to construct a counter numi for every point to count the number of -neighbor.

Input: r parties, P1,P2,?,Pr; , minpts; the ith party Pi holding a subset of the objects Oi with ni objects; the  total objects sets  r ii  O O , the total number of  objects  r ii  n n .

Output: the clusters generated by the clustering  algorithm.

/*note: At first, all points? used_tag=0, ClId =null, core_tag=false*/ (1) Initialize all parties, set numi=0;/* Pi constructs its  counter to count the number of it?s - neighborhood. */  (2) Standardization. Standardize all parties? attributes using protocol 1;  (3) Choose a point oi from a party Pi randomly; (4) for(j=1&&j i; j<=n-1; j++){//compute dist(oi, oj) if (oj Pi)  Pi calculates dist(oi, oj) and compares with ; (5)      else // oi, oj not in the same party,let oj Pj Pi and Pj compute dist(oi, oj) and compare  with  using protocol 2; (6)         if (dist(oi, oj)< ) j=j+1; /*oj N (oi), compute the distance  between next point and oi */ (7)         else numi = numi +1; /* oj N (oi), the party oi  exists in update numi to decide whether it is core point or not. */  }  Proceedings of 2008 IEEE International Symposium on IT in Medicine and Education     (8) Repeat (1)-(7), get the set Seeds of all core points, the responding parties set the responding points exist in Seeds: core_tag=1 used_tag=1, SP gets all core points? IDs.

(9) For all points in Seeds, repeat (3)-(6), and get all points? -neighborhood, the responding parties set the responding points? tag, used_tag=1, and assign new cluster tag ClId.

(10)      if(Seeds==null) exit; /* find all points? -neighborhood, the responding points are set  used_tag=1 */  else run (9) (11) Every party counts the points which  core_tag=false, ClId=null, and sends the points? ID to SP, SP clusters the points into one cluster.

5. Algorithm analyse  5.1. Secure analysis  Step 1, initialization, no information leak; Step 2, using secure standardization protocol, the  key process is to use secure sum protocol, there is no leak of attributes information;  Step 3, it is secure; Step 4, the party oi and oj lie in compute dist(oi,oj)  and compare with if they are in the same party and there is no information leak;  Step 5, computing the distance between two points  which are not in the same party, Pa get d1= m  i ix   2 and  d3= )(2  m  i ii yx +v, but Pa only can infer to  x1y1+x2y2+?+xmym=a and x1, x2,?, xm,a, but Pa can not get m unknowns according to those equation only if m>1, so the process is secure;  Step 6, when oi and oj are not in the same party, compare dist(oi,oj) with  using protocol 2, the two parties can?t get dist(oi,oj) but the result whether dist(oi,oj) is bigger  or not, because protocol 2 has been proved to be secure, the step is secure;  Step 7, Pi compares whether numi is bigger than minpts or not, there is no information leak, so it is secure;  Step 8-9, they are secure; Step 10, repeat (4)-(8) and it is secure; Step 11, every party send the IDs of points which  not be clustered, and SP assign class IDs for them, the process has no information to leak.

5.2. Efficiency analysis  Computation cost: the computation cost of step 1 is O(mn), the main cost are step 2,4 and 6. Assume the number of iteration is t, then the cost of computing distance is O(tn2) in step 4,the cost of computing distance is O(n2) in step 6, the cost of step 7 is no more than O(n), generally, m<<n, t<<n, so the computation cost of the algorithm is O(n2), it is no more than the initial DBSCAN algorithm.

Communication cost: the key cost of communication are step 2 and 5,the cost of step 2 is O(r), and the cost of step 5 is O(m+t ),  is the bits of every input character. So the total communication cost is O(r+ m+t ), where t is the times of iteration of scalar product protocol.

6. Example  Privacy preserving mining of distributed data has broad applications. For example, several medicine organizations want to research on a disease by clustering, but patients? information can?t be published directly because of privacy concern. So our algorithm can be used. Choosing two groups of real datasets about heart disease from a hospital is to demonstrate the application of our algorithm. Two data parties Pa and Pb have a private dataset respectively, denote as table 1 and 2, the two parties want to get clustering result at the premise of unrevealing the private data of every party.

Table 1.Private dataset of Pa ID Age   weight H_rate A1 47 59 67 A2 46 58 70 A3 73 63 66 A4 57 72 66 A5 28 58 76  Table 2.Private dataset of Pb ID Age   weight H_rate B1 44 80 63 B2 34 73 83 B3 31 54 67 B4 56 65 79 B5 80 78 67  (1) Users set =4.50, minpts=3.00.

(2) Pa,Pb and SP standardize their datasets using  protocol 4.

Proceedings of 2008 IEEE International Symposium on IT in Medicine and Education     (3) Choose a point A4 from Pa randomly, compute all distance between A4 and other points.

Protocol 2 was used to compute dist(A4,Bi) and compare with , and this ensure two parties? privacy. Because N (A4)=4> minpts=3, A4 is a core point.Pa sign core_tag for A4,and get the - neighborhood of A4: { A1 ,A2 ,B1}.

(4) Get other core points using the above method: A2, A5, B4, and use all core points as seeds to expand clustering. Seeds={ A4, A2, A5, B4}.

(5) Every party count those points used_tag=0, and send their ID to SP, SP class them into a cluster.

(6) The final clustering results: {A1, A2, A4, A5, B1, B2, B3, B4}and{A3, B3}.

We regard Pa and Pb as a dataset and cluster the data running DBSCAN and get the same results. So the algorithm HPPDBSCAN has no precision losing and no information leaking because of the introduction of secure protocols.

7. Conclusion  In this paper, we use some secure protocols: scalar product, secure sum, comparison and standardization to solve the problem of privacy preserving, and present an algorithm called HPPDBSCAN based on DBSCAN to solve the problem of privacy preserving on horizontally partitioned data under semi-honest condition. We analyze the validity and prove security of the algorithm. At present, most privacy preserving clustering algorithms are concentrated on semi-trusted model, and the next work is to study privacy preserving clustering under malicious conditions.

