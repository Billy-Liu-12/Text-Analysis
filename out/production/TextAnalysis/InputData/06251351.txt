Incremental Multiple Fuzzy Frequent Pattern Tree

Abstract?In the past, the multiple fuzzy frequent pattern tree (MFFP tree) was proposed for extracting multiple fuzzy frequent itemsets from quantitative transactions. It kept the multiple transformed fuzzy regions of an item to form the multiple fuzzy frequent itemsets. In this paper, an incremental algorithm is proposed for efficiently mining multiple fuzzy frequent itemsets based on the FUP concepts and the MFFP-tree structure.

Experimental results show that the proposed incremental algorithm runs faster than the batch one.

Keywords-fuzzy set; incremetnal mining; dynamic database; transaction insertion; data mining

I.  INTRODUCTION Data mining techniques have been recently developed to  derive useful knowledge from datasets [1-3, 12, 16]. Among them, mining association rules from a transaction database is especially commonly seen in data-mining research [4, 20]. In the past, most of the mining approaches for association rules were based on the Apriori algorithm [1, 3], which generated and tested candidate itemsets level by level. Han et al.

proposed the Frequent-Pattern-tree (FP-tree) structure for efficiently mining association rules without generation of candidate itemsets [8]. Cheung et al. [7] proposed the Fast UPdated (FUP) algorithm to adopt the pruning techniques used in the DHP (Direct Hashing and Pruning) algorithm [20]. The FUP determined whether re-scanning the original database was needed, thus reducing the computational cost in maintaining the association rules.

In these years, the fuzzy-set theory [24] has been used more and more frequently in intelligent systems because of its simplicity and similarity to human reasoning [13]. Hong et al.

proposed a fuzzy mining algorithm for managing quantitative data [9-10], which was based on the Apriori algorithm.

Papadimitriou et al. proposed an approach based on FP-trees to find fuzzy association rules [19]. Lin et al. proposed the fuzzy FP tree to efficiently derive fuzzy frequent itemsets from a quantitative dataset [17].

The above approaches are executed in a batch way to generate the fuzzy association rules. When new transactions are inserted into the original database, these batch approaches must re-process the entire updated database to form the  updated rules. Thus, the already derived knowledge becomes useless in knowledge maintenance.

In this paper, an incremental multiple fuzzy frequent- pattern tree (abbreviated as incMFFP-tree) algorithm for handling newly inserted transactions based on the FUP concepts [7] is thus proposed to maintain the MFFP-tree structure [11]. The initial MFFP tree is firstly constructed from the original quantitative database. Different from the traditional FP-tree construction, the transformed fuzzy regions of each item are used to construct the MFFP tree as long as they are frequent. When new transactions are inserted into the database, the proposed incremental algorithm is then executed to update the tree structure correspondingly. The MFFP-growth algorithm is also used to efficiently derive the multiple fuzzy frequent itemsets from the updated tree structure [11].

Experimental results show that the proposed approach has a better performance than the batch one.



II. REVIEW OF RELATED WORKS In this section, mining fuzzy association rules and the FUP  concepts are shortly reviewed.

A. Mining Fuzzy Association Rules Chan et al. proposed an F-APACS algorithm to mine fuzzy  association rules [5]. Kuok et al. proposed a fuzzy mining approach to handle numerical data in databases and to derive fuzzy association rules [15]. Hong et al. proposed a fuzzy mining algorithm to mine fuzzy rules from quantitative transaction data [9-10]. Papadimitriou et al. proposed an approach based on FP trees to find fuzzy association rules [19].

Lin et al. then proposed the fuzzy FP tree to derive the fuzzy frequent itemsets from a quantitative dataset [17]. It used the one with the maximum cardinality among the transformed fuzzy regions to represent a frequent item for constructing a fuzzy FP tree. Hong et al. then proposed the multiple fuzzy frequent pattern tree (MFFP-tree) algorithm and designed MFFP-tree structure to keep all the fuzzy frequent regions derived from a database no matter whether they are generated from the same items or not [11]. The corresponding MFFP- growth mining algorithm is also designed to derive the fuzzy frequent itemsets from the tree structure by fuzzy operations.

*Corresponding author  U.S. Government work not protected by U.S. copyright  WCCI 2012 IEEE World Congress on Computational Intelligence June, 10-15, 2012 - Brisbane, Australia FUZZ IEEE    Here, an example is used to construct the MFFP-tree structure. Assume Table I shows an original quantitative database to be used in the example for demonstrating the construction process of MFFP tree [11]. It consists of 6 transactions and 5 items, denoted A to E. The numbers represent the quantities of items.

TABLE I.  A QUANTITATIVE DATABASE  TID Items 1 (A:5}, (C:10), (D:2), (E:9) 2 (A:8}, (B:2), (C:3) 3 (B:3), (C:9) 4 (A:7}, (C:9), (D:3) 5 (A:5), (B:2), (C:5) 6 (A:3), (C:10), (D:2), (E:2)    The fuzzy membership functions are the same for all the items for simplicity shown in Figure 1. In this example, amounts are represented by three fuzzy regions: Low, Middle and High. Thus, three fuzzy membership values are produced for each item in a transaction according to the predefined membership functions. The minimum support threshold is then set at 30%.

1 6 11  Low Middle High  Amount  M em  be rs  hi p  va lu  e   Figure 1.  The membership functions used in this example.

In this example, all the frequent fuzzy regions transformed from Table I are used to construct the initial MFFP tree [11].

The constructed MFFP tree is then shown in Figure 2. Thus, the multiple fuzzy frequent patterns can be extracted by the MFFP-growth algorithm [11]. The other methods for mining fuzzy association rules have been stated in [14, 21-23].

B. FUP Concepts In real-world applications, the derived association rules  may be changed in a dynamic database. Conventional batch- mining algorithms solve this problem by re-processing the entire updated databases, thus requiring lots of computational time and waste existing mined knowledge. Considering an original database and some new inserted transactions, the following four cases (illustrated in Figure 3) may arise [7].

{root}  A.Middle 2.4  C.High 1.4  D.Low 1.4  B.Low 1.4  A.Middle 0.6  C.Middle 0.4  C.High 0.6  C.Middle 0.4  B.Low 0.8  C.Middle 0.8  C.High 0.8  D.Low 0.8  A.Middle 0.4  C.Middle 0.2  Header_Table Fuzzy region Count  A.Middle 3.4 C.High 2.8  C.Middle 2.4 B.Low 2.2 D.Low 2.2  C.Middle 0.6  Figure 2.  The constructed MFFP tree.

Large  Large itemset  Small itemset  Case 1 Case 2  Case 3      Case 4  Small itemsetitemset  Inserted records  Original database   Figure 3.  Four cases arising from inserted transactions to an existing  database.

Case 1: An itemset is frequent both in an original database and in newly inserted transactions.

Case 2: An itemset is frequent in an original database but not frequent in newly inserted transactions.

Case 3: An itemset is not frequent in an original database but frequent in newly inserted transactions.

Case 4: An itemset is not frequent both in an original database and in newly inserted transactions.

In FUP concepts, Cases 1 and 4 will not affect the final  large itemsets. Case 2 and Case 3 may, however, remove existing large itemsets and add new large itemsets, respectively.



III. THE PROPOSED INCMFFP-TREE ALGORITHM The proposed incremental MFFP-tree (incMFFP-tree)  algorithm is stated as follows.

The incMFFP-tree algorithm:  INPUT: An original quantitative database with d transformed transactions, an already built MFFP tree with its corresponding Header_Table, a set of membership functions, a set of t inserted transactions, and a predefined minimum support threshold s.

OUTPUT: An updated MFFP tree.

STEP 1: Transform the quantitative value vi of each item I in the new transactions into a fuzzy region fij represented as (fi1/R1 + fi2/R2 + ?+ fij/Rj) using the given membership functions, where h is the number of fuzzy regions of each item I, Rj is the j-th fuzzy region of each item I, 1 j h? ? , and fij is vi?s fuzzy membership value in region Rj.

STEP 2: Calculate the scalar cardinality of each fuzzy region Rj in the new transactions as:   ( ) t  T j ij  i  S R f =  =? .

STEP 3: Divide the fuzzy regions Rj in the new transactions into two parts according to whether they are large (appearing in the Header_Table), or small in the original database.

STEP 4: For each fuzzy region Rj which is large both in the original database (appearing in the Header_Table) and in the new transactions, do the following substeps (Case 1):  Substep 4-1: Set the updated count SU(Rj) in the entire updated database as:  SU(Rj) = SD(Rj) + ST(Rj),  where SD(Rj) is the count of Rj in the Header_Table (original database) and ST(Rj)is the count of Rj in the new transactions.

Substep 4-2: Update the count of Rj in the Header_Table as SU(Rj).

Substep 4-3: Put Rj in the set of Insert_Regions, which will be further processed in STEP 9.

STEP 5: For each fuzzy region Rj which is large in the original database (appearing in the Header_Table) but small in the new transactions, do the following substeps (Case 2):  Substep 5-1: Set the updated count SU(Rj) in the entire updated database as:  SU(Rj) = SD(Rj) + ST(Rj).

Substep 5-2: If stdRS j U ?+? )()( , fuzzy region  Rj will still be large after the database is updated; update the count of Rj in the Header_Table as SU(Rj) and add Rj to the set of Insert_Regions;  Otherwise, fuzzy region Rj will become small after the database is updated; Remove Rj from the Header_Table, connect each parent node of Rj directly to the corresponding child node of Rj, and remove Rj from the MFFP tree.

STEP 6: For each fuzzy region Rj which is small in the original database (not appearing in the Header_Table) but large in the new transactions, do the following substeps (Case 3):  Substep 6-1: Rescan the transformed d transactions in the originally quantitative database to find out the transactions with fuzzy region Rj; calculate the count SD(Rj) of Rj in the original database.

Substep 6-2: Set the updated count SU(Rj) in the entire updated database as:  SU(Rj) = SD(Rj) + ST(Rj),  where SD(Rj) is the count of Rj obtained from Substep 6-1 and ST(Rj) is the count of Rj in the new transactions.

Substep 6-3: If stdRS j U ?+? )()( , fuzzy region  Rj will be large after the database is updated; Add fuzzy region Rj both in the set of Insert_Regions and in the set of Rescan_Regions for the further processing.

STEP 7: If the set of Rescan_Regions is null, nothing has to be done in this step; Otherwise, do the substeps as follows:  Substep 7-1: Sort the fuzzy regions in the Rescan_Regions in descending order of their updated counts.

Substep 7-2: Insert the items in the Rescan_Regions to the end of the Header_Table according to the descending order of their counts.

STEP 8: For each original transaction with a fuzzy region J existing in the Rescan_Regions, do the substep as follows:  Substep 8-1: Remove the fuzzy regions of the items not existing in the Header_Table.

Substep 8-2: Sort the remaining frequent fuzzy regions in each transaction by their membership values in a descending order.

Substep 8-3: For each updated transaction with an fuzzy region Rj existing in the Rescan_Regions, if Rj has been at the corresponding branch of the MFFP tree for the transaction, add the membership value of Rj in the transaction to the node of Rj in the branch; Otherwise, add a node of Rj at its corresponding position in the  branch, set the count of the node as the membership value of Rj, and insert a link from the node of Rj in the last branch to the current node.

If there is not such a branch with the node of Rj, insert a link from the entry of Rj in the Header_Table to the added node.

STEP 9: For each new transaction with a fuzzy region J existing in the Insert_Regions, do the substep as follows:  Substep 9-1: Remove the fuzzy regions of the items not in Header_Table from the new transactions of the transformed database.

Substep 9-2: Sort the remaining frequent fuzzy regions in each new transaction by their membership values in a descending order.

Substep 9-3: Insert the updated new transactions into the MFFP tree tuple by tuple. If a fuzzy region Rj in a transaction has been at the corresponding branch of the MFFP tree for the transaction, add the membership value of Rj in the transaction to the node of Rj in the branch; Otherwise, add a node of Rj at the end of the corresponding branch, set the count of the    node as the membership value of Rj, and insert a link from the node of Rj in the last branch to the current node. If there is not such a branch with the node of Rj, insert a link from the entry of Rj in the Header_Table to the added node.

In STEP 8, a corresponding branch is the branch generated from a transformed transaction according to the descending order of the membership values of the fuzzy regions in it.



IV. AN ILLUSTRATIVE EXAMPLE Assume the already constructed MFFP tree from Table I  was shown in Figure 2. Assume the two records shown in Table 2 are inserted into the original database shown in Table 1.

The minimum count for the entire updated database is calculated as (6 + 2)?0.3 (= 2.4).

TABLE II.  TWO INSERTED TRANSACTIONS  TID Items 7 (A:6), (C:11), (E:9) 8 (A:5), (D:3)    The quantitative values of the items in the newly inserted transactions in Table 2 are then transformed to represent as the fuzzy sets. After that, the scalar cardinality of each fuzzy region is calculated as the count value. The transformed fuzzy regions are then divided into two parts according to whether they are large (appearing in the Header_Table) or small in the original database. Each part is then processed by its own way.

Case 1: For each fuzzy region which is large both in the original database (appearing in the Header_Table) and in the new transactions is processed. In this example, fuzzy regions {A.Middle}, {C.High} and {D.Low} are then processed. After the designed algorithm has been processed, Insert_Regions = {A.Middle, C.High, D.Low}. The MFFP tree and the Header_Table are then correspondingly updated.

Case 2: For each fuzzy region in which is large in the original database (appearing in the Header_Table) but small in the new transactions is then processed. In this example, fuzzy regions {B.Low} and {C.Middle} are then processed. After the designed algorithm has been processed, Insert_Regions = {A.Middle, C.High, C.Middle, D.Low}. The MFFP tree and the Header_Table are then correspondingly updated.

Case 3: For each fuzzy region which is small in the original database (not appearing in the Header_Table) but large in the new transactions is then processed. In this example, only fuzzy region {E.High} satisfied the condition and then processed.

The originally transformed database is then re-scanned to find the count of {E.High}. The count of {E.High} is then updated to determine whether its count is larger than or equal to the updated minimum count. After the algorithm has been processed, the set of Rescan_Regions is null in this example, and nothing has to be done in this step.

The MFFP tree is updated according to the new transactions with fuzzy regions existing in the set of Insert_Regions. The corresponding branches for the new  transactions with any these fuzzy regions are then found and sorted in descending order according their fuzzy values in the transaction. The MFFP tree and its Header_Table are then correspondingly updated. After that, the final updated MFFP tree is thus shown in Figure 4.

{root}  A.Middle 4.8  C.High 2.4  D.Low 1.4  C.Middle 0.6  C.Middle 0.4  C.Middle 1.2  C.High 1.4  D.Low 0.8  A.Middle 0.4  C.Middle 0.2  Header_Table Fuzzy region Count  A.Middle 5.2 C.High 3.8  C.Middle 2.4 D.Low 2.8  D.Low 0.6    Figure 4.  The final updated MFFP tree.

The desired multiple fuzzy frequent patterns in Figure 4 can thus be extracted by the MFFP-growth [11].



V. EXPERIMENTAL RESULTS A real dataset called FOODMART from an anonymous  chain store was used in the experiments [18]. It contains quantitative transactions about the products sold in the chain store. There were totally 21,556 transactions with 1,600 items in the dataset.

In the experiments, three fuzzy regions (High and Middle and Low) for items were transformed. The first 19,556 transactions were extracted from FOODMART dataset to construct the initial MFFP tree. The next 400 transactions were then sequentially used each time as new transactions for the proposed incMFFP-tree algorithm. Experiments were then made to evaluate the efficiency of the proposed mining algorithm at different minimum support thresholds, with the results shown in Figure 5.

Figure 5.  The execution times for two algorithms in the different minium support thresholds.

From Figure 5, it could be seen that the proposed incMFFP-tree algorithm has a better performance than the batch one in execution time, including the construction and mining phases.



VI. CONCLUSIONS In this paper, an incremental multiple fuzzy frequent pattern  tree (incMFFP-tree) algorithm is proposed for efficiently handling transaction insertion in dynamic fuzzy data mining.

The proposed approach uses the multiple transformed fuzzy regions of an item to initially construct the MFFP tree, which is more realistic in real-world applications. When the new transactions are inserted into the original database, the proposed algorithm will divide the fuzzy frequent regions into four parts according to whether they are large or small in the original database and in the new transactions. Experimental results show that the proposed incremental algorithm has a better performance than the batch one for handling new transactions.

