FIAST: A Novel Algorithm for Mining Frequent Itemsets

Abstract?An efficient algorithm to mine frequent itemsets is crucial for mining association rules. Most of the previously used algorithms have generally been developed for using the computational time effectively, reducing the number of candidate itemsets and decreasing the number of scan in the database. However, the time can be reduced by aggregate transactions having similar itemsets. This paper, then proposes an efficient algorithm for mining frequent itemsets without generating candidate itemsets called FIAST (Frequent Itemsets Algorithm for Similar Transactions).  The algorithm uses a divide-and-conquer method to reduce the task into the bitwise AND operation for finding itemsets and uses a depth-first search strategy to generate all frequent itemsets. The time complexity is analyzed by mathematical proof.

Keywords-association rules; frequent itemsets; mining

I.  INTRODUCTION Data mining [1] is a tool of specific algorithms for  extracting patterns from data, and is actually a part of a larger process called Knowledge Discovery in Databases (KDD) [2] which describes the step taken to ensure meaningful result.

Association rules mining [3] is one of the most important and well researched techniques. It aims to extract interesting correlations, frequent patterns, associations or casual structures among sets of the items in the transaction database or other data repositories. It is widely used in various areas such as cross marketing [4], new product development [5], personalized service and commercial credit evaluation in e- business [6], etc. The process of discovering all the association rules [7] consists of two steps: 1) discovery of all frequent itemsets that have minimum support, and 2) creating of all rules from the discovered frequent itemsets that meet the confidence threshold.  Most researches have focused on efficient methods for finding frequent itemsets because it is computationally the most expensive step and solve the candidate itemsets generation by avoiding candidate generation, and reducing the time to scan database. However, they do not concentrate mining frequent itemsets based on more similar transactions in the database as found in the real world, e.g. wholesale transactions and medical prescription transactions. Therefore, in this paper,  we introduce a new algorithm to mining frequent itemsets named FIAST (Frequent Itemsets Algorithm for Similar Transactions) algorithm. We use an efficient data structure, the BitTable, to aggregate transactions that have similar itemsets, and avoid candidate generation. The FIAST algorithm consists of two steps as follows: 1) constructing the ItemTable and the BitTable by a single scan of the database, and 2) mining all the frequent itemsets of two or more items.

This paper gives the preliminaries and background in Section 2. The FIAST algorithm for mining frequent itemsets is described in Section 3. We discuss the time complexity of the algorithm in Section 4. A discussion of the results is given in Section 5. Finally, we conclude our work and indicate our future work in Section 6.



II. PRELIMINARIES AND BACKGROUND  A. Frequent Itemsets Mining Definitions In this section, we define the terms used for describing  frequent itemsets mining. The conceptual basic terms are presented followed by Definitions 1-4 [8].

Definition 1. Suppose that I = {i1, i2, ?, im} is a finite set of items. A transaction data set on I is a function T : {1, 2, ?, n} ? P(I). The set T(k) is the kth transaction of  T. The numbers 1, 2, ?, n are the transaction identifiers (tids).

Definition 2. A set K ? I is called an itemsets. An itemsets with k items are called k-itemsets.

Definition 3. Let T : {1, 2, ?, n} ? P(I) be a transaction data set on a set of items I. The support count of a subset K of the set of item I in T is the number of sup_countT (K) given by  { })(1|)(sup_ KTKandnkkKcountT ???=        (1)  The support of an itemsets K is the number given by    n  KcountK TT )(sup_)(sup =                          (2)   DOI 10.1109/ICFCC.2009.54    DOI 10.1109/ICFCC.2009.54        Figure 1.  Mining frequent itemsets with Apriori algorithm.

Definition 4. Let min_sup be the threshold minimum support value specified by the user. If supT (K) ? min_sup, itemsets K is called a frequent itemsets.

B. Fundamental Algorithm: Apriori Apriori [9] is a fundamental algorithm for mining  frequent itemsets. The algorithm starts scanning the database to construct the candidate 1-itemsets (C1) and checks the sup_count of the C1 for pruning some of the C1, if supT(C1) is lower than the min_sup. After the algorithm finds all the frequent 1-itemsets (L1), the Ck is constructed by joining the Lk-1, where k >1. Next, the process to prune some infrequent itemsets from the Ck is created which is called Lk. This process is repeated until no more candidate itemsets can be created.  Fig. 1 illustrates mining frequent itemsets using the Apriori algorithm with the assumption that the min_sup is 40%.

C. Related Work Generally, the method for finding frequent itemsets can  be divided into two approaches: candidate generation-and- test and pattern growth. A basic algorithm for candidate generation-and-test is the Apriori which makes use of items for the candidate and combines the pre-given threshold value to count frequent itemsets in the database. This algorithm shows that it requires multiple database scans, as many as the longest frequent itemsets.  In addition, Dong et al. [10] proposed a BitTableFI. The BitTableFI compresses the database into a BitTable which means a set of bits that  represents the items [11]. Although, the BitTableFI was focused on solving the candidate itemsets generation and helping to count transactions quickly, it did not reduce the size of the candidate itemsets and the time of scanning with a large number of frequent itemsets, long itemsets, or quite low min_sup thresholds. Afterwards, Song et al. [12] proposed an Index-BitTableFI, which is similar to BitTableFI. The BitTable structure is used horizontally and vertically to find itemsets and sup_count, respectively. This works especially well for dense datasets.

For a pattern growth approach, Han et al. [13] proposed a frequent pattern tree (FP-tree) structure, which is an extended prefix-tree structure and scans the database only twice called FP-Growth algorithm. This method is a depth- first search algorithm. However, for sparse datasets the tree will be bigger and bushier. Then, Sucahyo et al. [14] proposed a Compressed FP-Tree (CFP-Tree) structure with a new frequent itemsets mining algorithm named CT-PRO.

The CT-PRO makes only one pass through the database. The number of nodes in CFP-Tree could be up to as much as half less than in the corresponding FP-Tree.

As mentioned above, we found that each research is aimed at different work, e.g. solving the candidate itemsets generation, avoiding candidate generation, and reducing the time to scan the database. However, most researches do not propose mining frequent itemsets based on more similar transactions in the database. Therefore, we propose the FIAST algorithm (Frequent Itemsets Algorithm for Similar Transactions) to reduce the cost and time of mining frequent itemsets.



III. FIAST ALGORITHM There are two steps in the FIAST algorithm as follows: 1. Creating the ItemTable and the BitTable: The  ItemTable and the BitTable are constructed by a single scan of the database and aggregated the transactions that have similar itemsets.

2. Mining Frequent Itemsets: All frequent itemsets are mined by the FIAST algorithm.

The algorithm for constructing the ItemTable and the BitTable is shown in Fig. 2 and we describe how this algorithm works in Example 1.

Example 1. Let us consider the transaction database D in Fig. 1 and suppose that the min_sup is 40%.

Step 1: Creating the ItemTable and the BitTable This step starts scanning all transactions in the database  to construct both the ItemTable and the BitTable as shown in Fig. 3 (a) and (b), respectively. Then, the infrequent 1- itemsets in those tables are deleted and the index for each item is assigned as illustrated in Fig. 3 (c). Next, giving the index number in ascending order depends on the descendent sup_count as shown in Fig. 3 (d). Finally, the transactions of the BitTable with similar transactions are aggregated as shown in Fig. 3 (e).

1 Input: Database D, min_sup 2 Output: ItemTable, BitTable 3 Procedure IdentifyItems 4 For each transaction t ? D 5  For each item i ? t 6   If i ? ItemTable 7   Increment count of item i in ItemTable 8   Else 9    Insert i in ItemTable with count =1 10   End If 11   BitTable[t][k] = 1   //k is the kth item  of  item i in 12     ItemTable 13  End For 14 End For 15 Delete infrequent items in ItemTable and BitTable 16 Sort frequent items in ItemTable in descending order and 17   assign an index for each item 18 Sort in ascending order to rearrange the items in 19  BitTable by index 20 Aggregate transactions which have similar transactions  1 Input: ItemTable, BitTable, min_sup 2 Output: Frequent Itemsets 3 Procedure MiningFrequentItemsets 4 For each index i ? ItemTable from the least to the most 5             frequent 1-itemsets 6  For each transaction t ? BitTable 7   If bit ith of t =1 8    Insert bit 1st to ith of t in TempBits and 9                                  their sup_count 10    End If 11   End For 12   Mine(TempBits, min_sup, FI-Tree) 13  End For 14 Traverse the FI-Tree to print the frequent itemsets 16 Procedure Mine(TempBits, min_sup, FI-Tree) 17  For each transaction t ? TempBits 18  If t.sup ? min_sup 19   InsertToFI-Tree(t) 20  End If 21  AndBit = ?t ? P(TempBits) //not include the set itself and ? 22  If AndBit.sup ? min_sup 23   InsertToFI-Tree(AndBit) 24  End If 25 End For   Figure 2.  Algorithm for constructing the ItemTable and the BitTable.

Figure 3.  Creating the ItemTable and the BitTable.

Figure 4.  The TempBits of each index.

Figure 5.  Algorithm for mining frequent itemsets.

Step 2: Mining Frequent Itemsets All the frequent itemsets of two or more items are mined by using the FIAST algorithm that is described in Fig. 5.

The algorithm aims to find the frequent itemsets, that start from the least frequent 1-itemsets in the ItemTable, obtains bits called a set of bits which is a transaction in the BitTable, uses bitwise AND operation to find itemsets and eventually, creates a FI-Tree (Frequent Index Tree) to generate frequent itemsets. For example, the index 5 in Fig.

3 (e) is a least frequent 1-itemsets that has two transactions in the BitTable. Each set of bits stores in the TempBits as illustrated in Fig. 4 (a). We use bitwise AND operation with transactions in the TempBits, their result is inserted into FI- Tree for generating frequent itemsets described by 11011 AND operation with 10111 (transaction 1st and 2nd in the TempBits) and the sum of their sup_count is 2. Then, the result of bitwise AND operation is 10011 (that represents index 1, 4, 5) and their sup_count is inserted into the FI- Tree as shown in Fig. 6 (in the left-hand path) by the number after ?:? in the node that indicates the sup_count.

We traversed by using depth-first search in the FI-Tree for generating frequent itemsets. Thus, the following frequent itemsets generated are g:2, ge:2, gd:2, ged:2.  This process is repeated until the most frequent 1-itemsets in the ItemTable is constructed in FI-Tree.

Figure 6.  The complete FI-Tree.



IV. TIME COMPLEXITY Before we discuss the time complexity of the FIAST  algorithm, we summarize the notation used in the best-case and worst-case time complexity for mining frequent itemsets by the FIAST algorithm in Table 1.

TABLE I.  NOTATION  Symbols Definitions m All items in the database n All transactions in the database  p The total number of items in all transactions  qi The total number of transactions in the TempBits of each index i   Lemma 1. In the best-case, the cost of mining frequent itemsets is O(p).

Proof. The best-case for the FIAST algorithm happens when their supT(1-itemsets) is lower than the min_sup (no frequent 1-itemsets). The BitTable stores the total number of items in all transactions (p) and the ItemTable stores sup_count of their items (m). The sup_count of items in the ItemTable is checked to determine whether there are any frequent 1- itemsets or not (m). If there is infrequent 1-itemsets, the process to generate frequent itemsets is stopped.

Equation (3) shows the time complexity of the FIAST algorithm.

)()2( pOmp =+                             (3)  Therefore, the total best-case of the FIAST algorithm is O(p).

Lemma 2. In the worst-case, the cost of mining frequent itemsets is O(2m).

Proof. The worst-case occurs when all m items are frequent 1-itemsets and all association of them is displayed in n transactions (all transactions are frequent itemsets). The cost of this step is:  1) Creating the ItemTable and BitTable: The ItemTable consists of all items in the database (m) and sorting items in the ItemTable with their sup_count (p log2 p). Thus, the cost of creating the ItemTable is (m + p log2 p). The BitTable consists of all items in all transactions (n) and sorting transactions in the BitTable for aggregating similar transactions (n log2 n). Then, the cost of creating the BitTable is (n + n log2 n). Therefore, the cost of the first step is (m + p log2 p + n + n log2 n).

2) Generating all frequent itemsets: The process for doing bitwise AND operations for finding itemsets of each index is shown in (4).

)12(  ??? =  m  i i  q qi                               (4)  where 1 ? i ? m and constructing the FI-Tree for use to generate frequent itemsets (2m-1). Traversing the FI-Tree for generating frequent itemsets is 2m-1. Thus, the cost of this step is shown in (5).

22)12( ?? =  ++??? mm m  i i  q qi                  (5)  Equation (6) shows the time complexity of the FIAST algorithm.

)2()2)12(loglog(  mm  m  i i  q Oqnnnppm i =+??++++ ? =  (6)  Therefore, the total worst-case of the FIAST algorithm is O(2m).



V. DISCUSSION The FIAST algorithm is a pattern growth approach  without candidate generation. The algorithm shows the following profits:  1. Minimize I/O: The FIAST algorithm minimizes I/O resources by scanning database only once for mining frequent itemsets.

2. Save space: The FIAST algorithm saves space by storing items in the set of bits regardless of the size of the datasets.

3. Reduce time: The FIAST algorithm reduces time by using bitwise AND operation for fast finding itemsets, and using a divide-and-conquer method to reduce finding tasks into smaller ones.

4. Appropriate for similar transactions: The FIAST algorithm appropriates for mining frequent itemsets that have a number of similar transactions after deleting infrequent 1-itemsets, and works especially well for dense datasets.



VI. CONCLUSIONS AND FUTURE WORK In this paper, we have proposed a new algorithm called  the FIAST algorithm for mining frequent itemsets based on similar transactions after deleting infrequent 1-itemsets. The algorithm applies the BitTable to aggregate transactions that have similar itemsets. The aggregation significantly reduces the number of transactions in the BitTable and the time using the divide-and-conquer method to reduce the bitwise AND operation for finding itemsets. Also, a depth-first search strategy is used to generate all frequent itemsets. We scan the database only once and avoid candidate generation to minimize I/O. We are implementing the FIAST algorithm and comparing our algorithm with other pattern growth approaches.

