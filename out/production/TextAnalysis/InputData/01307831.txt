

Mining Protein Data Using ParalleYDistributed Association Rules  Hesyam Awadh Abdallah Bahamish, Rosalina Abdul Salam, Rosni Abdullah, Mohd.

Azarn Osman, Nuraini Abdul Rashid  School of Computer Science, Universiti Sains Malaysia, 11900 Penang Malaysia.

Tel: i-604-6533888 ext. 2486  E-mail: corn2OO3S~cs.usm.iizv , rosalinaO,cs.zism.mym, rosniacs. usm.my, nzam@,c.usnz. my, nurainiO,cs. usm. my  Data is being produced in an unexpected rate. Some databases reach terabytes in size. In biology the high-throughput technologies have led to exponential growth in genomic data, this data is flooding in at unprecedented rate. On average, the amount of information stored in protein database is doubling every 15 months [I]. The data stored in these databases is viewed as a resource, which contains much hidden valuable information [2]. Data Mining is used to extract the hidden information from large amount databases.

Association rules are one of the most researched data mining areas and one of the popular and widely used advanced data mining techniques. They are useful in deriving meaningful rules from large-scale data [ 3 ]  and have recently received much attention from database community [4] .They consist of two steps: finding the frequent itemsets and generating the association rules from the frequent itemsets. Association rules are used in mining Bioinformatics data to extract rules hitherto unknown, which can have significant biological implications.

The first step of association rules mining is computationally and I/O intensive. It demands a lot of CPU resources and disk IiO. Since the overall association rules mining performance is determined by this step, many sequential association rules algorithms were proposed to solve this problem. These algorithms can be classified into two approaches. Candidate generation and test, and pattern growth approach.

ParalleVdistributed computing achieves scalability and improves the performance of compute intensive algorithms. Since that few works have been done in paralyzing the pattern growth approach sequential algorithms, in this work a parallel version of ITL-Mine algorithm was proposed and implemented on Distributed Memory (shared nothing) architecture. The parallel algorithm was applied to mine the protein data extracted from SWSSPROT, PROSITE, and ENZYME databases to generate rules that concern structure, sequence and hc t ion  of protein.

Parallel ITL-Mine was proposed to improve the performance of the sequential ITL-Mine algorithm. The parallel ITL-Mine algorithm was tested with 2, 3 and 4 processors using a minimum support value ranged from 1% to 16% and minimum confidence 100%. The results were compared with the results of the sequential ITL-Mine. A ratio of 39.29%, 57.20% and 61.69% of execution time reduction of the sequential ITL-Mine execution time were achieved when 2, 3 and 4 processors were used receptively.

Figure 1 shows the reduction of execution time when the number of processors increased. The parallel ITL-Mine algorithm achieved the reduction of the execution time because of the distribution of the data over the processors where each processor worked on its data and communicate with other processors to complete its work.

The ratio of execution time reduction when the number of processor was 3 is 29.50% of the execution time when the number of processors was 2. This ratio decreased to 7% of the execution time of 3 processors when the number of processors was4. The reason for this small ratio of execution time reduction between 3 and 4 processors was the communication overhead which rose when the number of processors increased. The communication overhead was due to the increasing of the number of messages and data movement between processors.

0-7803-8482-2/04/$20.00 02004 IEEE. 46 1      U  3 12 B I O .n 8 s 5 6  3 4  .n U  U  a2    _ _ _ _ _ _ _ _ _  - _ _ _ _ _ ~ -  -Parallel  ITL-Mine ( t w o  processors) Paral le l  ITL-Mine ( t h r e e  processors) Paral le l  ITL-Mine ( f o u r  processors)  - - _  - _" _" -- -- -. I  1 2  3 4 5 6 7 8 9 1 0 1 1 1 2 1 3 1 4 1 5 1 6 Support  Figure 1. Parallel and sequential ITL-Mine performance execution time  Results from the parallel TTL-Mine shows significant improvement. 2.61 average speedup was archived when the number of processor was 4 on the original data size and 3.1 average speedup was achieved when the data size was tripled. The proposed parallel ITL-Mine algorithm can be used in other data mining task such as sequential patterns, max-patterns and frequent closed patterns, classification and clustering.

