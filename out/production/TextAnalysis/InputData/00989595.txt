Mining Frequent Closed Itemsets  with the Frequent Pattern List

Abstract The mining of the complete set of frequent itemsets will lead to a huge number of itemsets. Fortunately, this problem can be reduced to the mining of frequent closed itemsets (FCls), which results in a much smaller number of itemsets. The approaches to mining frequent closed itemsets can be categorized into two groups: those with candidate generation and those without. In this paper, we propose an approach to mining frequent closed itemsets without candidate generation: with a data structure called the Frequent Pattern List (FPL). We designed the algorithm FPLCI-Mining to mine the frequent closed itemsets (FCls). Experimental result shows that our method is faster than the previously existing ones.

Keywords: frequent closed itemset, frequent pattern list  *Corresponding author: Fax: 886-2-236281 67, Tel: 886-2-2391 -7406, Email: cchsu@csie.ntu.edu.tw  1. Introduction and Problem Definitions  The mining of the complete set of frequent patterns often leads to a huge number of results, and the effectiveness of the association rules derived from them will be decreased. Fortunately, Pasquier et al. showed that this problem could be solved by mining only frequent closed itemsets (FCIs), which are a small portion of the complete set of solutions. They developed an A-Close algorithm [ 11, which took the generation-and-test approach, for mining FCIs. Recently, Pei, Han, and Mao designed an algorithm CLOSET [2]  for mining FCIs without candidate generation by a combination of FT-tree and projected database. Here we use a simpler and more efficient data structure, the frequent pattern list (FPL) [3], for mining frequent closed itemsets without candidate generation. We redefine the frequent closed itemset, and then develop our  approach, FPLCI-Mining, for mining the frequent closed itemsets.

Let I = {i l ,  i2, ..... in) be a set of items. An itemset X is a non-empty subset of I. A transaction database DB is a set of transactions. Each transaction Tx is a pair <tid, X>, where tid is a unique transaction identifier, and X is an itemset. A transaction Tx = <tid, X> is said to contains an itemset Y, if Y X. Every item in Y is said to be contained in Tx if Y is contained in Tx. With these descriptions, we have the following definitions:  Definition 1. (Maximal frequent itemset).

A frequent itemset is called a maximal frequent itemset if there is no other frequent itemset to be its proper superset.

Definition 2. (Frequent closed itemset.) A frequent closed itemset is either a maximal frequent itemset, or a frequent itemset whose support is higher than the supports of all its proper supersets.

2. Algorithm for mining frequent closed itemsets with FPL  Based on Definition 2 ,  we take the following strategy for mining frequent closed itemsets (FCIs): finding frequent itemsets with items as many as possible, and with supports as high as possible. We formally define the algorithm FPLCI-Mining of mining frequent closed itemsets with FPL:  Algorithm FPLCI-Mining:  Input: FPL constructed using a transaction database DB  Output: The complete set of frequent closed itemsets.

Method: Call FPLCI-Mining(FPL,n, t, .7 , ? ) FPLCI-Mining (FPL, n ,  min-sup, parent-itemset, FCIS) { F o r j = n t o l ( I f  (there is no existing FCI in FCIS that contains {item j )U parent-itemset and has a support equal to (item node  and a support threshold t.

// check the necessity to visit item node j  0-7695-1119-8/01 $17.00 0 2001 IEEE 653    j).count) Then { / /bit  countingl. Examine the bit-count array of item node j ,  and ignore the LSB, which corresponds to item j ,  since it will always be included in the solution;2. Divide the surviving bits (whose counts are above min-sup) into two groups: Group One: bit counts equal to (item node j).count.

Group Two: bit counts less than (item node j).count.;  3 .  Generate a FCI, denoted as fci-Groupone: fci-GroupOne = {Group one items}U{ item j } U parent-iternset, with count = (item node j).count; 4. Use all the signatures in node item j ,  with the surviving bits in Group Two as filtering mask to keep their corresponding items, to form fci-Groupone?s conditional database and construct a conditional FPL FPL~ci-~,oupOnc from this database; Let FPLf,i~,~,up~,, have m item nodes; 5. Call FPLCI-Mining (FPLfcj-~rorrpOnrr m, min-sup, fci-Groupone, FCIS); } /I end of bit counting // conducting signature trimming and migration For each transaction Tx in item node j ,  consider its full-length j-bit signature  ( 1. Trim the LSB (corresponding to item j )  and then trim all the trailing 0-bits; 2. Find the least significant I-bit and find the item corresponding to this bit; 3. Migrate the trimmed signature to the item node containing this item; 4. For the bit-count array of the target item node, increment the count values by one for the elements that correspond to the I-bits in Tx.}  // end of signature trimming and migration } /I end of for loop of index j  Remove item node j from the FPL;  ) // end of procedure FPLCI-Mining  3. Experimental Results and Discussion  We test our algorithms on the synthetic data set T25.120.DIOOK. There are 10K items. The number of transactions is set to 100K. The average transaction size and average maximal potentially frequent itemset size are set to 25 and 20, respectively. To compare our method with the existing ones: A-Close [I] ,  CHARM [4], and CLOSET [2], we run our program on a Pentium 233-MHz PC with 128 megabytes main memory, running Microsoft Windows 98. The algorithms are implemented with Microsoft Visual C++ 6.0. The run time is the total execution time, including the time for disk YO and the time for constructing the FPL from the original databases. The result is shown in Figure 1.

From the result we see that FPLCI-Mining is much faster than A-Close and CHARM, and is also faster than CLOSET by 12 percent in average. The efficiency of our method is due to the following factors: no candidate generation and testing, simple data structures, and simple  operations. Besides, the optimization techniques of CLOSET can be implemented in our method. For optimization 1 ,  we encode the database into the global FF?L, and the conditional FPL can be derived directly in step 4 of FPLCI-Mining. Optimization 2 is implemented in step 2 and 3 of FPLCI-Mining to extract items appearing in every transaction of the item node; that is, the Group-One items.

The single-path FP-tree of optimization 3 can also be detected in our FPL data structure, and the same technique can be used to speed up the mining process. Finally, for optimization 4, the checking before bit counting for the necessity to visit the item node prunes the search space.

---e-. - A-Close - - - ) - -CHARM  w M.0  10.0  0.0  -~  0.7 09 1.1 1.3 1.5  Support threshold (%)  Figure 1. Experimental results  4 Conclusions In this paper we proposed an efficient approach,  FPLCI-Mining, to mining frequent closed itemsets with the simple structure FPL (frequent pattern list). There are several issues related to FTL-based mining. For example, the patterns in the transaction signatures should be studied to derive more efficient algorithms.

