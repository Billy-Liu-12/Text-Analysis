Research on Improving Apriori Algorithm Based on Interested Table

Abstract-The Apriori algorithm is a most influential one to  excavate association rules. The basic idea of the algorithm is:  identify aU the frequent itemsets to get association rule. This  paper presents the improved Apriori algorithm based on  interested items, which mainly construct an ordered interested  table and traverse it to excavate frequent itemsets quickly. The  paper also by writing c# code achieves the improved algorithm.

Confirmed by many experiments, this algorithm is better than  traditional algorithms in time consuming.

Keywords- Apriori algorithm; association rules; interested  itemsets; freq uent itemsets

I. BACKGROUND  Data Mining is a very popular topic in the business  community in recent years, it uses statistical and artificial  intelligence algorithm and find hidden laws from a large  industry historical data and then establish an accurate model  to predict the future. Besides, the mining of Association rule  is an important issue of Data Mining [1].

The mainly technology of data mining is association rules,  clustering, rough sets, neural networks, genetic algorithms  and so on. Large number of studies from different  perspectives on the association rules to do the extension, take  more factors into association rule mining method among the  association rules as a rich application areas, broaden the  scope to support management decision-making. In recent  years, association rules surrounding the research has focused  on two aspects, namely, the classic association rules extend  the scope of the problem to solve and improve the efficiency  of classical algorithms for mining association rules [21.



II. RELATED WORKS  A. Related Concepts  Suppose I = {iJ, i2 ... , in} is a collection of items, in  which element is called item. D is a collection of transaction  T, Transaction T is a collection of items, and Tct. In order to  avoid duplication of transactions are covered[31 .In this article,  I give a unique mark to each of transaction in the transaction  database TID. Suppose X is a collection of I .If Xg', then we  call that T contains X.

An association rule like X?y. Here XcI, YcI, and  XnY=CP. Support of Rule X?Y in Transaction database D is  the ratio between the number of transactions which contain X  and 1', that is support(X?Y) =P(X u Y).

978-1-4244-5540-9/10/$26.00 2010 IEEE   Confidence of Rule X?Y in Transaction database D is  the ratio between the number of transactions which contain X  and Y and the number of transactions containing X, denoted  confidence(X?Y), that is confrdence(X?Y) = P (X]Y). Given  a transaction set D, the problem of mining association rule is  to find an association rule whose support and confidence  respectively greater than the minimum support (minsup) and  minimum confidence (minconj) given by users[41.

B. The Example Illustrates the Traditional Apriori  Algorithms  Transaction database as shown in Table I, minsup =50%,  minconf =70%.Request the frequent association rules in  transaction database D.

TABLE I. THE TABLE OF TRANSACTION DATABASE  Tid Itemsets  1 A B CD E    2 A B C  3 CD E F  4 A B E  The implementation process is as follows:  Step 1: Find the frequent itemsets  L=Ll U L2 U L3={ {A},{B},{C},{D},{E}, {AB},{AC},  {AE},{BC},{BD},{CD},{CE},{ABC} }.

Step 2: Get association from {ABC}  Only  {AC} ? {B},{BC} ? {A},{A} ? {B},{B} ? {A} meet  the requirements. Confidence level is 100%.

Time Complexity Analysis:  Scan database 3 times; Data Processing of database 15  times to get frequent l-itemset; Data Processing 19 times to  get frequent 2-itemset; Data Processing of database 11 times  to get frequent 3-itemset, that is 45 times data processing in  all.



III. THE DESCRIPTION OF IMPROVED ALGORITHM  A. The Ideas and Implementation Steps of the Improved  Algorithm  From the above process, we see that some disadvantages  in the traditional data mining. Firstly, the process of scanning  database is too frequently. Secondly, many operations are  unnecessary duplication, waste of time and space. Thirdly,  we are not interested in EF, so it should not be start to  operate on EF.

The first step: This paper presents the various items of  interest in a subset of items of frequency.

1) Enter interest items and mining transactional  database  2) Scan the transaction database, construct interrelated  data structure  3) Scan the relevant queues and tables to record a  subset of items of interest in items of the frequency  4) Find frequent item sets in the subset of items of  interest.

The second step: find the association.

B. The Implementation Description of Improved Algorithm  Suppose transaction database has showed as Table I;  Interested Items: ABC.

First: Construct data structures  1) Scan database according to interested items and get    information as Table II.

TABLE II. THE INFORMATION TABLE OF TRANSACTION DATABASE  Frequency Item Mark No. ID Itemsets number  1 A B C 1 3 6  2 A B  2 2 4  3 C 1 1 1  ID is the key of Table II. Frequency marks that how  many times the itemsets appear in the transaction database.

Item number is the number of the itemsets. Mark No. derived  through an algorithm which we will introduce below.

Firstly, construct a database information queue  (Sq IInfo Queue), put some objects into SqlInfoQueue who  have the properties of the above form Table.2. Sec?ndly,  traversal transaction database, take out each record m the  database to fmd interest itemsets through the algorithm  which will introduce below; then ,find its Item number and  mark No. according to the interested itemsets. Finally, insert  the record into SqlInfoQueue index by the item number and  mark No., if the record has existed, frequency increase 1.

The construction of SqlInfoQueue has already completed.

Note: SqlInfoQueue is ordered by Item number and mark  number, the priority of item number is higher than mark  number.

2) Construct an Interested table by the interest items:  ID is the table primary key; Flag is bit array, the size of  the array of interest in a subset of the number of items,  namely, a subset of items and interest-one correspondence;  Frequency is the number of the set which contains in the  transaction database; Sign is a structure, In the column of  Pass mark, it contains a lot of Sign type object; The number  of itemsets and the marked number are the same as Table II;  The last column record the children address.

Each itemsets have some children, each child can search  by the function of SeekingChildren. And marked according  to the number of itemsets and the marked number, the  number of itemsets priority is higher than the marked  number. Complete to construct Interested Table.

3) Introduce the relevant jUnctions and related data  structures.

Data structure of Sign is showed in Table IV.

TABLE IV. PASS MARK TABLE    Count ill  int int  ID in Table 4 is used to mark any subset of interested  items, and it corresponds to ID in Table III, that is, each  itemset correspond to an ID. Count marked the number of  itemsets. We construct a result array, each item of the array  contains ID, each item of the array corresponds to an ID and  frequency of item sets. Result array saves the final result.

Methods of The mark number:  Input the itemsets, output the mark numbe? of the  itemsets. According to the interested items and theIr length,  each item of the interested item corresponds to an integer  (request: the integer plus the location of the item in the  interested items equal to the length of the interested items).

Traverse the itemsets and change each item into an integer,  and then add all the integers, the result is the one we need to  correspond to each item of the interested items.

Methods of SeekingChildren:  Input any itemset, output all its children. Get all its  subsets according to the itemsets. Traversal the subset, the  item whose item number plus 1 is equal to the item number  of the itemset we input is the child of this itemset.

Secondly: Traverse Interest table according to the  information in SqlInfoQueue  Step 1: Pop-up an element Queuing from SqlInfoQueue,  and judge whether Queuing is empty, if Queuing is empty,  we execute OnlyTable algorithm, otherwise execute step 2.

Step 2: Traverse Interested table, the method is as follows:  Traverse the line Tabling of the Interest table and  Queuing, if they have the same itemset, then we execute step  3, otherwise we execute step 4.

Step 3: Set Has accessed of Tabling to 1; Set the first ID  flag of Tabling to 1 ;Add the frequency of Tabling to the  frequency of Queuing; Traversing all the ?hildren nodes of  Tabling with the method of Child1 ;Traversmg the pass mark  of Tabling with the method of Child2. Get the Itemsets and  the frequency in the Tabling and save in the result array, then  we execute step 1.

Step 4: If the Has accessed of Tabling is 1, G?t the  Itemset and the frequency in the Tabling and save m the  result array, then we execute step 2, Else set the Has  accessed of Tabling to 1, deal with the Pass mark of Tabling    with the method of Child2, Get the Itemsets and the  frequency in the Tabling and save in the result array, then we  execute step 2.

Methods of OnlyTable:  Step 1: Remove an element (Tabling) from the interested  table. If Tabling is not null, then we execute step 2,  otherwise end of the algorithm.

Step 2: Traversal the Pass mark of Tabling with the  method of Child2.Get the Itemset and the frequency in the  Tabling and save in the result array, then we execute step 1.

Methods of Child1:  Add the frequency of each child node of Tabling to the  frequency of Tabling, According to the ID of Tabling, mark  the position located with the number of ID by 1 in each child  nodes. Then, execute AddSign method.

Methods ofChild2:  Step 1: Get an object Signing in the Pass mark, if Signing  is empty, then the algorithm is ended. Otherwise, execute  step 2.

Step 2: Get the ID of Signing, and judge the firstlD bit of  Tabling flag is whether 1 or not, if it is we execute step 3,  otherwise we execute step 4.

Step 3: Add the Signing directly to the Pass mark of all  children of Tabling, and then execute step 1.

Step 4:Make the first ID position of the flags of Tabling,  add the frequency of the Tabling with the Count of Signing,  add the Signing directly to the Pass mark of all children of  Tabling, then execute step 1.

Methods of AddSign:  Construct an object of Sign types; set its Count to the  frequency of Tabling; set its ID to the ID of Tabling. To the  object loaded into the pass mark under the appropriate.

Thirdly: Concentrated in the frequent item excavated to  meet the requirements of the association rules.

Note: There is a marked number TSign in the interested  table, we use TSign to mark the line of Interest table which  has traversed.



IV. THE EXPERIMENT AND ANALYSIS  A. The Improved Algorithm Flowchart  At the beginning, input the target data table and  interested items and construct the interested item table and  target data queue. Then scan interested items table and    modify the related items as elements pop-up from the queue  constantly. Finally, traverse the interested items table, output  the frequency of each item, get the frequent itemsets  according to the given minimum support degree and  excavate the association rule which has the minimum  confidence from the frequent itemsets. Child1 and Child2 are  as mentioned above. The full mining flaw chart is shown in  Fig. I.

B. c # code archive the algorithm  1) Method to get the subsets of interested items  public long Count(int length)  { long sum = 1;  for (int j = O;j < length;j++)  { sum *=2; }  return sum; }  public string[] GetSubSet(string set)//get the subsets   { int length = set.Length;  List<string> subsets = new List<string>O;  for (long i = 1; i < Count(length); i++)  { string s = "";  for (int j = 0; j < set. Length; j++ )  {long k = i & CountG);  if (k != 0) {s += set[j]; } }  subsets.Add(s); }  return subsets.ToArray();} }  2) Interested items in the record  public string Intresting(string sl, string s2)//get the  interested items in the record  { char[] delimiter = sI.ToCharArray();  string result = "";  for (int i = 0; i < delimiter. Length; i++)  { bool b = s2.Contains(delimiter[i].ToString());  if (b)  { if (!result.Contains(delimiter[i].ToString()))  result += delimiter[i]; } }  return result;  3) Judge whether there are duplicated items in 2  interested items  public static bool Check(string sl, string s2)  {bool b = false;  }    for (int i = 0; i < sl.Length; i++)  {b = s2.Contains(sl [i].ToString());  if (b) break; }  return !b;  4) Cut the item whose frequency is less then min Count  public static void Sub(int count, List<Str> str)  {for (int i = 0; i < str.Count; i++)  {if (str[i].1 < count)  {str[i].Istrue = false;  }}}  5) Get the frequency correspond to interested items  public static int GetCount(string s, List<Str> str)  { bool b = false;  int count = 0;  for (int i = 0; i < str.Count; i++)  { if ((s = str[i].SI)&str[i].Istrue)  { b = true;  count = str[i].I;  break;  }}  if (!b)  return 0;  else  return count; }

V. PERFORMANCE EVALUATION OF IMPROVED  ALGORITHM  The algorithm introduced in this paper can greatly  improve the mining efficiency. Firstly, the improved scan the  database only once; secondly, it reduces a lot of unnecessary  operations. The Improved mining algorithm has lower time  complexity as it has explicit object. We test the traditional  algorithm and the improved one based on the same situation  that all the data are from Table I, and lead to the results  showed on Fig. 2 and Fig. 3. Fig. 2 and Fig. 3 showed that  improved algorithm improved a lot on time. When it comes  to the case that the transaction database is huge and the  bigger interested items, the improved algorithm runs much  better. Figure 3 showed operate times to complete the  excavation when the interest items are different (A, AB,  ABC).

3.5 ,-  ------------.,    2.5 1-------  1.5  0.5  The number of scanning the database  C 1 mp"ovcd a 1 go.' i thrn  Trad it i ona 1  81 'orithrns  Figure 2. The comparison chart of scanning the database            o   The number of interested items  Figuire 3. The comparison chart of different interested Item

VI. CONCLUSION  We reach a conclusion after an analysis on Apriori  algorithm: (l) reduce the frequency we scan the database; (2)  reduce unnecessary duplication of effort. Experiments  showed that the algorithm in this paper can get the target to  improve the efficiency. The algorithm also has its  disadvantages, as we need larger memory to shore the flag  bit when interested items increase.

