Back-Forth Sorting Algorithm  Analysis and Applications Perspective

Abstract- Sorting is a very well known problem in computer science. It means arranging the data in either increasing or decreasing order. Here we present a new comparison based sorting algorithm whose complexity is theoretically shown to be ( )2nO .However graphs of total time taken by different sorting algorithms confirms the superiority of our algorithm over other existing similar algorithms. We have also proved the correctness of the proposed algorithm. The logic of this algorithm can be used for searching efficiently in a two dimensional array.



I.     KEYWORDS  Algorithm, adjacency matrix, big O notation, comparison sort, complexity, real time application, graph, swapping.



II.     INTRODUCTION There are mainly two types of comparison based sorting  algorithms (i) ( )2nO and (ii) ( )( )( )nnO log . In general ( )2nO sorting algorithms run slower than ( )( )( )nnO log  algorithms, but still their importance cannot be ignored, since these algorithms are non recursive in nature and hence they require much less space on the RAM. As an example the recursive quick sort algorithm gives optimal results with adequate RAM, but due to its recursive nature it copies portions of the array and its performance is degraded when the array does not fit in the RAM. Another importance of the ( )2nO  algorithms is that they can be used in conjunction with ( )( )( )nnO log  algorithms, for example divide a big array into smaller arrays, sort these arrays with ( )2nO sorting algorithm and then merge them to produce an entirely sorted array.

Like selection sort, Back-Forth sort is also unique in that  its running time is not affected by prior ordering of the list.

This fact can be seen as an advantage for some real time application, where variation in output time should not occur with different permutation of input.

This paper is organized as follows: section ? III gives the basic algorithm and an illustrative example, section ? IV illustrates the correctness of the algorithm, section ? V gives the detailed complexity analysis and the running time comparison graphs, section ? VI discusses the applications of the Back ? Forth algorithm ? first, searching in a 2D array, second, sorting of small arrays and third, using Back ? Forth in conjunction with QUICKSORT, and finally  section - VII concludes and gives an overview of future works.



III.  THE ALGORITHM  The algorithm of Back-Forth sort to sort an array A of maximum size ?max? is described below:               The working of presented algorithm can be illustrated by the following example. Consider the following array: 5, 7, 2, 3, 9, 11, 6 For the above array max = 7(size of array) Now we show the status of the input array after every iteration of first for loop:   5, 7, 2, 3, 9, 11, 6 5, 7, 2, 3, 9, 11, 6 5, 3, 2, 7, 9, 11, 6 5, 2, 3, 7, 9, 11, 6 3, 2, 5, 7, 9, 11, 6  2, 3, 5, 7, 9, 11, 6 2, 3, 5, 7, 9, 11, 6   Here we show the status of the input array after every iteration of second for loop:   2, 3, 5, 7, 9, 11, 6 2, 3, 5, 7, 9, 11, 6 2, 3, 5, 7, 9, 11, 6 2, 3, 5, 6, 9, 11, 7 2, 3, 5, 6, 7, 11, 9 2, 3, 5, 6, 7, 9, 11 2, 3, 5, 6, 7, 9, 11   Back-Forth -Sort ( A, max ) 1. for  j ? max ? 1 downto 0 2.      for i ? 0 to j/2 3.  do if  A[i] > A[ j? i] 4.             then 5.                 exchange A[i]?A[ j? i] 6. for j ? max ? 1 down to 0 7.      for i ? 0 to j/2 8.           do if  A[max?1?i] < A[max?1?j+i] 9.              then 10.              exchange A[max?1?i]?A[max?1?j+i] 11. return ( A )

IV.    CORRECTNESS OF ALGORITHM:   Theorem ? The necessary and sufficient condition for an  array a[max] to be sorted is for any pair of indices (p,q),  p?q ? a[p] ? a[q] where p,q ?[0 , max-1].

Claim:-  After completion of algorithm Back ? Forth, the output array satisfies the condition for sorting.

Proof:-  Let (p,q) a pair of  indices such that p ? q, as  p? [0,max- 1] and q?[0,max-1] so 0 ? p+q ? 2*(max-1)  Case 1: 0 ? p+q ? max-1 Case 2:  max-1 <  p+q ? 2*(max-1)   Case 1: 0 ? p+q ? max-1:- After   completion of first for loop, a[i] ? a[j-i], where  j?[0,max-1]and i?[0,j/2].

Because j takes all the values from 0 to max-1 so at some  time j will also be equal to p+q.

Now As    p ? q           , So,     p+p ? p+q   , or   2*p?j          , or    p?j/2  As clear from the for loop in the lines 1?5,  i  takes all  the values between 0 and j/2 so at some instant it will also be equal to p. Thus at this instant  j=p+q & i=p, After completion of  for loop   a[p] ? a[q] and hence this  pair of element a[p] and a[q] will be put on correct order when:  So,     j = p + q and i = p.

Case 2: max-1 < p+q ? 2*(max-1):- As in the second for loop, lines 6?10,  j varies from 0 to  max -1 so  at one time  j=2*(max-1)-(p+q), {as 2*(max-1)- (p+q) also within the 0 to max-1}.

As   p?q               , So    -q/2 ?  -p/2         , So    -q ?  -(p+q)/2     , or          max-1-q ?  (2*(max-1)-(p+q))/2   , or         max-1-q ? j/2    ,  so we will also have a situation when i=max-1-q and  j=2*(max-1)-(p+q)  At the end of the second for loop, a[max-1-j+i]?a[max-  1-i] keeping  value of  i and j , a[p] ? a[q];  p=max-1-j+i, q=max-1-i.

So for both the cases after completion we will have a[p]  ? a[q] whenever p ? q. Hence the resultant array is sorted.

Corollary:- After the completion of the first for loop in the lines 1?5,  first half of the array gets sorted.

Proof:-  Consider the input array: a1 a2 a3 ?????? an-1 an  After the first iteration of the first for loop we have an ? a1, and an-1 ? a2 and so on. After the second iteration we have an-1 ? a1 and an-2 ? a2 and so on. So at the end of the first for loop we have an  is greater than at least one element of the array,  an-1 is greater than at least two elements of the array and so on. So an/2 is greater than at least half the elements of the array.

Now for the first for loop we have Case 1, where 0 ? p+q ? max-1. So all the pairs (p,q) for which p and q lie in [0, n/2] we have 0 ? p+q ? max-1 and from Case 1 they are now sorted. Hence at the end of the first  for loop, half of the array has been sorted.



V.    THE COMPLEXITY OF THE ALGORITHM                              To compute ( )nf , the running time of Back-Forth Sort ,  we sum the products of the cost and times columns. Then we aggregate the constants into singular small constants to give a simplified expression for ( )nf .

Back-Forth -Sort (A, max)     cost    times 1.for j?max?1 down to 0                 1c      1+n  2.  for i?0 to j/2     2c     ?? ?  ? ?? ?  ? ?  =  n  j  j  )2/(  3.    do if  A[ i ] > A[ j?i ]                 3c       ?? ?  ? ?? ?  ? ?  =  n  j  j  )2/(  4.    then  5.     exchange A[ i ]?A[ j?i ]   4c      ?? ?  ? ?? ?  ? ?  =  2/   n  j jT    6.for j?max?1 down to 0                              5c      1+n  7.  for i?0 to j/2                               6c     ?? ?  ? ?? ?  ? ?  =  n  j  j  )2/(  8.    do if A[ max?1?i ] < A[ max?1?j+i ]      7c     ?? ?  ? ?? ?  ? ?  =  n  j  j  )2/(  9.    then  10.  exchange A[max?1?i]?A[max?1?j+i]  8c     ?? ?  ? ?? ?  ? ?  =  2/   n  j jT    11. return ( A )         9c        1       ( )nf   = 1c ( )1+n  + 2c  ?? ?  ? ?? ?  ? ?  =  n  j  j  )2/( + 3c ?? ?  ? ?? ?  ? ?  =  n  j  j  )2/(  +  4c ?? ?  ? ?? ?  ? ?  =  2/   n  j jT  + 5c ( )1+n  + 6c ?? ?  ? ?? ?  ? ?  =  n  j  j  )2/(  +  7c ?? ?  ? ?? ?  ? ?  =  n  j  j  )2/(  + 8c ?? ?  ? ?? ?  ? ?  =  2/   n  j jT  + 9c   Here jT  is a variable to store number of swaps, in the jth  iteration.

?? ?  ? ?? ?  ? ?  =  n  j  j  )2/(  = ? ? ?  ? ? ? +  )1(nn      and     ?? ?  ? ?? ?  ? ?  =  2/   n  j jT  = ( )? =  2/   n  j j = ?  ? ?  ? ? ? +  )2(nn    Hence ( )nf = 1c ( )1+n + 2c ? ? ?  ? ? ? +  )1(nn + 3c ?  ? ?  ? ? ? +  )1(nn +  4c ? ? ?  ? ? ? +  )2(nn + 5c ( )1+n + 6c ?  ? ?  ? ? ? +  )1(nn +  7c ? ? ?  ? ? ? +  )1(nn  + 8c ?  ? ?  ? ? ? +  )2(nn  + 9c  =  ? ? ?  ? ? ? +++++  2222 8764322 ccccccn +  ?? ?  ? ?? ?  ? ? ?  ? ? ?  ? +++++++   cccccc ccn  +  ( )951 ccc ++   This worst-case running time can be expressed as cbnan ++2 for constants a, b, and c that again depend on the  statement costs ci ; it is thus a quadratic function of n.

Hence, ( )nf  = ( )2n?  Hence from the complexity analysis of the Back ? Forth  sort we have that the complexity in the best and the worst case is the same i.e. quadratic.

The performance of the Back-Forth Sort can be further  improved by combining both the ?if ? conditions in a single for loop as the limits of j and i are same in both the loops,         Revised Algorithm for Back-Forth Sort:-             Though the complexity of the above algorithm is ( )2n? ,  it gives better performance relative to bubble, cocktail,  selection and other similar sorts because the number of iterations have been reduced to half. This fact has been confirmed by running all the algorithms on the same data and on the same system and drawing graphs (Fig 1) of respective times required.

Number of Data(10000)  Fig. 1. Graph between time taken for sorting and number of  data to be sorted ,by different algorithms.

Series1 Back-Forth  sort(improved) Series2 selection sort Series3 cocktail sort Series4 bubble sort Series5 gnome sort  Here the X ? axis unit is multiple of 10000 elements and  Y ? axis unit is multiple of 1 second.

Back-Forth Sort ( A, max ) 1. for  j?max ? 1 downto 0 2.   for i?0 to j/2 3.     do if  A[ i ] > A[ j?i ] 4.        then 5.          exchange A[ i ]?A[ j?i ] 6.     do if  A[ max ? 1 ? i ] < A[ max?1?j+I ] 7.         then 8.           exchange A[ max?1?i ] ? A[ max?1?j+i ] 9. return ( A )

VI. APPLICATION:

I. A SEARCHING ALGORITHM:   The proof for the correctness of the Back-Forth sort shows that the algorithm considers each and every possible   pair of indices  and arranges them in proper order. For  every pair (p,q) [p<q], a[p] and a[q] will be compared either in the first loop where   i = p            & j?i = q  or in the second loop where   max?1?j+i = p      & max?1? i = q   This capability of considering all possible pairs in the  smallest time can be utilized efficiently for searching element within a two dimensional array.

A general searching algorithm to search a value ?key? in a  two dimensional square array is of size ? max ? max

II. SORTING OF SMALL ARRAYS:   For sorting small sub arrays insertion sort and selection sort outperforms all other complex sorting algorithms of both  ( )2n?  as well as ( )( )( )nn log?  time bounds.

The size of the small array for which the above two algorithms give  better time bounds, vary from environment to environment, but lie typically between 10 to 50 elements.

The graph shown below shows the corresponding times taken by three different algorithms viz. ? insertion, selection and back forth.

0.02  0.04  0.06  0.08  0.1  0.12  0.14  0.16  0.18  0.2  1 2 3 4 5  insertion  backforth  selection    Here the X ? axis unit is x10 elements and Y ? axis unit is  x 10-4 seconds. Hence, a conclusion can be drawn that back forth sort can be efficiently utilized to sort small arrays.



III. IMPROVEMENT OF QUICKSORT:  It has been noted that for sorting small arrays it is better to  use ( )2nO  algorithms rather than ( )( )( )nnO log  as they require lesser time, hence improving the overall running time of the algorithms.

Here we propose an algorithm in which we use back forth sorting algorithm in conjunction with the quick sort.

As back forth sort works better than the other algorithm  (considering the best, average and worst cases), we can achieve a better running time using the above methodology.

Back-Forth -Search ( A, max, key ) 1. search=0 2. for  j ? ma ?1 downto 0 3.      for i ? 0 to j/2 4.  do if  A[i][ j?i ] = key 5.                 then 6.                       search=1 7.                       print i , j ? i 8.           do if  A[j?i][i] = key 9.                 then 10.                      search=1 11.                      print j ? i, i 12.     do if  A[max?1?i][max?1?j+i] = key 13.                then 14.                      search=1 15.                      print  max? 1?i, max?1 ?j+i 16.   do if  A[max?1?j+i][max?1?i] = key 17.                then 18.                      search=1 19.                      print  max?1?j+i, max ?1?i 20. do if search=0 21.      then 22.        print  ?value not present?  QUICKSORT (a[ ], lower, upper) 1.  do if (upper ? lower >40) 2.       i ? PARTITION(a, lower, upper) 3.       QUICKSORT (a, lower, i-1) 4.       QUICKSORT (a,i+1,upper) 5.  else 6.        do if (upper > lower) 7.            for n ? (upper ? lower) down to 0 8.                  for i ? 0 to (n)/2 9.                        do if (a[lower + i]>a[n + lower ? i]) 10.                           t ? a[lower + i] 11.                           a[lower + i] ? a[n + lower ? i] 12.                           a[n + lower ? i] ? t 13.                       do if(a[upper ? i] < a[upper ? n + i]) 14.                           t ? a[upper ? i] 15.                           a[upper ? i] ? a[upper ? n + i] 16.                           a[upper ? n + i] ? t 17. return     In the above scheme we sort the sub arrays of size less than 40 using back forth sort and for sub arrays of size greater than 40 we use general QUICKSORT procedure. The working of QUICKSORT and PARTITION can be easily found in standard textbooks [12]. Further information about the application ad improvements in the QUICKSORT can be found in [2], [3] and [13].

As we know that for external sorting we use MERGE ? SORT routine, we can improve its performance using back forth in conjunction with MERGE ? SORT, thus achieving better performance by saving unnecessary space allocation and better utilization of the RAM. In this case we can use the above methodology efficiently.



VII. CONCLUSION AND FUTURE WORKS:   In this paper we presented one new sorting algorithm and  one searching algorithm. Though there are other sorting algorithms but the graph of total time taken by different sorting algorithms confirms the superiority of our algorithm over other existing similar algorithms. We have also proved the correctness of the proposed algorithm. The main idea used in ?Back-Forth?, to compare all pairs efficiently, enables us to develop a new searching algorithm also. This idea can further be extended in many other applications (such as in taking join of two relational schema) in database management systems, in circuit theory and networking theory wherever we have to consider all possible pairs.

Our future work comprises of modifying the Back ? Forth sorting algorithm for decreasing its time bound and specific applications such as nearly sorted lists. Appropriate treatment can be found in [4].

