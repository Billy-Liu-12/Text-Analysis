Software Fault Detection using  Program Patterns

Abstract?Effective detection of software faults is an important activity of software development process. The main difficulty of detecting software fault is finding faults in a large and complex software system. In this paper, we propose an approach that applies program patterns to detect and locate software fault so that programmer can fix bug and increase software quality. The advantage of the proposed approach is that the defect-prone code segments can be detected. To facilitate the programmer to detect program bugs, this approach also includes a Graphic User Interface to locate the defect-prone code segments.

Keywords: Defect Prediction, Program segement, Program pattern.



I. INTRODUCTION Defect detection is an important activity during software  development process. For a software development project, it is highly desirable to reduce software defects. The main goal of building program patterns is to find software defects so that programmer can correct the faults. Over the past few years a considerable number of detecting software faults studies have been made on. Review and test software products are common approach. For example, Wohlin used two new methods to estimate the defect content [1].

This study proposes an approach to detect software fault using program pattern. We use the ANother Tool for Language Recognition (ANTLR) and the Bare Bones CDT (BBCDT) to retrieve program patterns. In this paper, we define program pattern is a set of important elements such as if, else, elseif, while, try, String.valueOf and so on. And program patterns also contain ?-1? which represent program scope. The user only need to provide historical coding data and defect reports, and this approach will show the defect- prone program segments automatically. It help programmer realize coding behavior and correct bug easily. The advantage of the proposed approach: 1. It provides programmer the information to find the problems. 2. It develops Graphic User Interface to locate defect-prone code  segments clearly. 3. It improves the software quality further.

The remainder of the work is as follows. Section 2  presents an overview of the related works. Section 3 describes the flows of the proposed approach. Section 4 presents analytical results and discussions, and Section 5 concludes with a summary and future work.



II. RELATED WORKS A software defect is the general term used to describe an  error, flaw, mistake, failure or fault in a computer program or system. Reducing software defect is an important activity to achieve high software quality, and it can be achieved by using software review and testing. Reviews are essential for defect detection. Wohlin and Runeson presented two new methods, the detection profile method and cumulative, to estimate the number of remaining defects after a review.

The results compared with maximum-likelihood method and it provided the new methods to estimate the defect content [1]. Collecting program slices is used to help programmer to understand complicated code at early stage. K.J. Ottenstein and L.M. Ottenstein used dependence graph methods to analysis program slicing [2]. Tip surveyed excellent and important paradigms and techniques for program slicing [3].

Data mining techniques generally involves the following classes of tasks: clustering, classification, regression and association rules learning [4]. In this paper, we use association rules to find program patterns. The association rule A ? C has support S and con??????? C in the transactions D, where s is the percentage of transactions in D that contains A C and c is the percentage of transactions in D containing A that also contain C respectively. S is taken to be the probability, P(A C). C is taken to be the condition probability, P (C|A).

That is S(A ? C) = P (A C) C(A ? C) = P (C|A) =s(A C)/s(A) [5].

___________________________________     Figure1. The diagram of the proposed approach  Figure 2. The algorithm of generating pattern

III. PROGRAM PATTERN IDENTIFICATION The proposed approach is based on the program patterns.

It is describe in Figure 1. The proposed approach contains three phases. The first stage is data collection. Data include defect reports which recorded the modified information and historical source codes which written by programmer.

In the phase one, the main goal is to find the important nodes. The first step is to generate the preorder of raw data in the tree point of view. The raw data can also regarding as code segment. The second step is to calculate each nodes? number of support and support in raw data. The third step is to pick the important nodes which support value greater than threshold, which is 0.05 in this paper.

In the phase two, the main goal is to generate the important patterns. Firstly, important nodes? four information numbers need to calculate. The first number is the times of nodes appear in the lines of raw data. The second number is the support of node, which is the times of nodes appear in the raw data divided by number of lines equal support value. The third number is the times nodes appear in the lines of raw data and that line?s quality is H. The fourth number is the second number, which is first number divided by the third number. Then, we only choose nodes if the support and confidence greater than threshold, 0.2 and 0.6 respectively.

Secondly, we combine single node into two nodes. Thirdly, we calculate two nodes? four numbers as the first step. We only calculates two nodes appear in the same lines of raw data simultaneously. This way of doing is too raw to express the program segments so we consider program levels to improve that. Fourth, we combine three nodes? and calculate information as same as previously described. Fifth, we combine four nodes? and calculate information as same as previously described until the numbers of important patterns equal zero.

In the phase three, the main goal is to detect the possible bugs during software development. The first step is to collect modified information, including modified ids, the location of modified source code file and modified line number. The second step is to generate the preorder of modified raw data.

The third step is to use the final patterns generated by phase two to compare the modified raw data. Finally, the results show the satisfied patterns. The code segment satisfy patterns might possible appear bug. It provide programmer defect-prone code segments.

A. Phase One  In the phase one, we use the tools; ANTLR (ANother Tool for Language Recognition) for java language, and BBCDT (Bare Bones CDT) for c/c++ language, to construct trees. The ANTLR is used to generate AST tree for information retrieval and the BBCDT serves as a plug-in.

For generating the raw data, we use tree view algorithms.

The tree view algorithm is depicted as following steps: 1. We find the target node according to line number which  recorded by user.

2. The root is the target node and we calculate the number  of subtree?s nodes.

3. If the value is greater than the threshold, it stops  appending nodes to the subtree. Otherwise, the target node?s parent become root and recalculate subtree?s node.

4. If the number of nodes exceeds the threshold, it removes the nodes with the longest distance to the target node.

After it generates the raw data, we calculate each node?s frequency in order to find important node.

B. Phase Two We implement the phase two as following steps:  1. We use single node to combine two nodes.

2. We find all keywords? locations in each raw data and  output to temp file.

3. Loading temp file and storing to vector.

4. We generate all patterns and all patterns information.

5. Finally, it output pattern and patterns information to file  and return number of output pattern for deciding end phase two or not.

Figure 3. The simple example of phase1  Figure 2 shows how to generate patterns. We only want to know the relationship between all keyword of patterns.

Therefore, we need to handle all keywords? interval expression as possible as simple. We simulate it as a stack.

From the left to right of the raw data, it push the stack when it meet not ?-1? symbol node.  If the current node meet ?-1? symbol and the head node of stack is not ?-1? symbol, then it pop the head node of stack. Otherwise, it push the stack.

C. Phase Three We generate the raw data according to modify line  number. Then, we find the satisfied patterns. The method is that finding all keywords of patterns appear in raw data. If all keywords which are exclude ?-1? symbol of patterns are not appear in raw data, it cannot be satisfied the patterns.

Otherwise, we needed to consider programming levels. So we used the same behavior in stack to handle ?-1? symbol.

If the programming levels are the same then it is the satisfied patterns.



IV. EXPERIMENTAL RESULTS AND DISCUSSION  A. An example The first diagram of Figure 3 is an example of defect  report. The field is separate by comma. The first field is consisting of three modified ids and separate by period. The first modified id means wanted solving problem. The second modified id means modification times of each problem that want solving. The third modified id means location of modification program. The second field is the location of modified source code file. The third field is the modified line number. In fourth field is the quality evaluation of execution result consists of H or L. High (H) is stand for meeting the original requirement after modify the program and Low (L) is stand for not acceptable after modify the program. The final line is stand for the end of first wanted solving problem.

1)Phase One We use ANTLR and BBCDT to generate tree in each  source file. Then, we create the tree which is composed of the node we wanted. Then, we use the tree viewpoint to generate the raw data for each source file. The second diagram of Figure 3 is a simple example of raw data. In the second diagram of Figure 3, the first four fields are as same as the first diagram of Figure 3. The remainders are raw data.

In raw data, we use ?-1? symbol to present program levels.

When tracing upper one level, adding ?-1? symbol to express.

After generating raw data, we calculate each node?s frequency for finding important nodes. It means that finding each node?s importance. In the third diagram of Figure 3, the first field is what language type of source file the keyword belongs for. The second field is the keyword type and keyword name. The third field is the times keyword appears in raw data and it called the count of keyword. The fourth field is the count of keyword divided by the total number of node and it called support value.  Then, we filter out the support values and the result show in the fourth diagram of Figure 3.

2)Phase Two  After generating important nodes, we use association rule learning which is a popular method for discovering interesting variable in large datum. In the first diagram of Figure 4, the first field is what language type of source file the keyword belongs for. The second field is the keyword type and keyword name. The third field is the keyword appears in line of raw data times which is called the count of keyword. The fourth field is the count of keyword divided by the line number which is called support value. The fifth field is the keyword appears in line of raw data times and that line?s quality of execution result is H. The sixth field is the fifth field divided by the third field which is called confidence value. We filter the data which support and confidence value less than threshold.

We use single node to become two nodes then it calculating two nodes? information. The information included the times appear in lines of raw data, support value, the times appear in lines of raw data which quality evaluation of execution result is H and confidence value.

In the third diagram of Figure 4, it considers programming levels. The patterns we find are include ?-1? symbol and they present programming levels. Two single nodes become two nodes. Two nodes and single node become three nodes and so on. Finally, we find the patterns which consist of six keywords.

3)Phase Three The user records the modification which consists of three  modified ids, the relative path of file and modified line number as shown in the first diagram of Figure 5. Then it generates raw data in tree viewpoint according to modified  Figure 4. The simple example of phase 2    line number as the second diagram of Figure 5 showed. We use the patterns which generated in phase two to compare raw data which is in the second diagram of Figure 5. The third diagram of Figure 5 shows the satisfied patterns.

B. Visualization  In this paper, we develop GUI tool to visualize the result of phase three as Figure 6 showed. It help user easy to use and realize the location of defect-prone program segments clearly.

It is executed as the following process: Step A: We click the select button and it pop-up a small  window for choosing the file which records the modified information.

Step B: Then, you double click to choose the file, it show  the source file field?s file contain as a tree structure in target file field. According to three modified ids to create tree. The same first modified id records are first modified id?s children. The same second modified id records are second modified id?s children and children sorted from id number?s small to large.

Step C: We double click to select the file in target file items  and it show the satisfied patterns and patterns? location line number in pattern field. In this field, it creates a tree structure and it composes two main elements. The patterns? location line numbers are the pattern nodes? children. We sort the patterns according to each pattern?s support and confidence values. The orders of patterns are large to small.

Step D: We click the line number which we wanted to see and it show in code segment filed. We show the whole source code. The keywords marked in blue color and the remainder of line marked in red color.

C. Discussion In this paper, we add ?-1? to represent program levels so  that code segments can be found more accurate. It spend much time to find satisfied code segments by user so that we develop tools to find code segments more easily. The advantage of this paper is that providing a GUI tool to locate code segment which possible generate bug more clearly.

The sources code can be analyzed by the approach proposed in this paper contain Java, C and C++ programming languages.

The disadvantage in this paper is that we not provide direct commands to correct bug and it not visualize complete approach for user. We only provide the code segments which are possible generate bug and we visualize the phase three. In our future work, we are going to provide how to correct the bugs. We also going to visualize phase one and phase two so that it can help user facilitate go through the approach we propose.



V. CONCLUSIONS This paper propose an approach to build program  patterns for detecting software fault. The main advantage of this paper is that the program patterns provide software engineering additional information to capture defect-prone code segments. In this study, the experiment results show that the proposed approach can be used to detect software fault. The main activities of the proposed approach include the phase one ,two and three. The results indicate the program patterns can be used for finding defect-prone code segments. In the future work, the presents method might be improved by providing how to correct bugs.

