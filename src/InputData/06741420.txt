Energy-aware Erasure Codes using XOR Reference Matrix   for SSD based RAID Systems

Abstract?This paper proposes an energy-aware XRM  erasure codes for SSD based RAID storage systems. It removes many small random read and write operations and reduces the number of CPU cycles for encoding and decoding data. For doing this, we use adaptive chunking strategy and XRM(XOR Reference Matrix) rules. The preliminary experimental results show that the proposed method has better performance than existing method using RS code in terms of throughput and energy cost. 1   Keywords?adaptive chunking, EXRM erasure codes, SSD

I. INTRODUCTION Data centers hosting distributed SSD based RAID systems  consume huge energy to do high performance computing. For keeping data reliability and tolerance, RAID systems use various kinds of erasure codes such as Reed-Solomon, Raptor, ZigZag and LDPC erasure codes. However, there are few methods considering energy consumption in the encoding and decoding step for read and write operations. The recent developed methods are SSD characterization aware scheduling [1], energy saving RAID-based configuration [2], Profiling energy cost [3], dynamic power mode scheduling and energy- efficient data allocation. Most of energy in storage systems is consumed for encoding or decoding parity or erasure codes with respect to a number of read and write operations. In the SSD based RAID, SSDs have various power modes such as ON, OFF, sleep, active and idle modes. SSD stays in active mode during read and write operations and in the rest of time, SSD will be automatically in idle mode. The performance of SSD may decrease because the number of small read and write operations are increased in case that workload has many small files less than the buffer size for allocating in memory. In this paper, we propose energy aware XRM (EXRM) erasure codes with an aim to increase the IO performance and energy efficiency by decreasing the number of small read and write operations and reducing the number of XOR operations for encoding and decoding process.



II. EXRM ERASURE CODES FOR RAID SYSTEM The proposed erasure codes using XOR reference matrix is called EXRM. The method tries to merge many small files into large chunk to remove lots of small random write operation by   *  Corresponding author  using an adaptive chunking strategy. Then, XRM RULES [4] are used to reduce CPU cycle for generating the parity codes instead of doing the real XOR operation. The proposed method encodes files into data and parity chunks, where the strips are placed into a two-dimensional matrix of SSD array, S = { S0, S1, S2,.., Sn}. SSD array consist of n data SSDs and one parity SSD.

Fig. 1.  Adaptive chunking strategy for EXRM erasure codes  A.   Adaptive chunking strategy As shown in Fig.1, encoding algorithm uses energy-aware based adaptive chunking strategy. Files are collected in a workload F = {f1, f2, f3, ... , fm, fm+1,.., flast}, which rearranges their file index  into a group of files with the size less than a threshold  Fm= { f1, f2, f3, ... , fm }, and a group of files with size equal to or larger than threshold Fr ={ fm+1,.., flast } (F = Fm ?Fr and ? = Fm ? Fr ). Since each file will be stored onto series of SSD disks in a stripe with n SSDs, let us set the chunk size and threshold value as a maximum accepted buffer size. In Fig.1, first classifier partitions workload F  into Fr and Fm workloads based on the threshold value. And so, the second classifier merges several small files in Fm  into one chunk and splits large file in Fr into several chunks. The k number of chunks, whose block size w2 is the same as threshold value, are allocated  into memory. k is equal to size     of F divide by threshold value and k  ? last. r denotes the number of files whose sizes are less than threshold and m denotes the number of files whose sizes are bigger than threshold. We also measure the effect of adaptive chunking in the SSD based RAID systems.  Let tread and  twrite be the total read and write time for given workload F.

? mthresholdsizeof  last  mi iread f ???  ?? ? ?? ?  ?? 1 ? ?? ????  ? ? ? ??  ? ?? ?  ? thresholdsizeof  last  i iread f  '? ?? ????????  ??????Note that, in Eq. 2, ??read denotes the number of read using adaptive chunking and , in Eq. 1, ? read denotes the number of read using traditional chunking.  As a result, the number of reads for the proposed method becomes less than those of traditional ones. Total number of write operations is calculated from total number of parity chunks plus total number of read operations. In the proposed method, as the number of small files increases, the number of reads and writes also decreases.

?  TABLE I.  ENERGY- AWARE XRM ENCODING ALGORITHM */ Initialization */  1. Let SSD array be  S = { S0, S1, S2,.., Sn-1, Sn }.

2. Set workload  F and Let threshold  be maximum buffer size.

3. Let number of iteration be ? = k  / (n2/2).

4. Let chunk array be CH[? ][ n2/2]= { Chunk1, .., Chunk  n  2/2,?, Chunk k }.

*/ read old data */ 5.  for  ( i=1; i ? ? ; i++) 6.          for  ( j=1; j ?  n2/2 ; j++) 7.              read   Chunk from host  and allocate  it  into  CH[i][j].

8.         end for 9.  Update data in buffer CH[? ][ n2/2]  */ New parity generation in energy aware coding using XRM rules */ 10.        for  ( j=1; j ? (n /2); j++) 11.           Set parity[i][j]= 0; 12.           for  (a=1; a ? n; a++) 13.                parity [i][j] = XRM _RULE (parity  [i][j], CH[i][a]).

14.           end for 15.        end for  */  write new data and parity  */ 16.        for  ( j=1; j ? n ; j++) 17.            for  ( a=1;a ? n /2 ;a++) 18.                write   CH[i][a] into  Data SSD.

19.                write   parity [i][a] into Parity SSD.

20.           end for 21.        end for 22.   end for  B.   EXRM erasure codes As shown in Table 1, in the first step of energy-aware XRM encoding algorithm, input entities are initialized, and in the second step, host reads workload using adaptive chunking strategy. In the third step, XRM_RULE function is used to generate new parity chunks from new data chunks. The XORing methods called XRM rules [4] are applied to reduce the energy cost and time complexity of erasure coding.  In the final step, new data and parity chunks are written into data and parity SSDs, respectively. The total energy cost of encoding Eencoding is calculated in Eq.3, where twaken , tidle , tcoding , and tactive are denoted as time to wake up SSD, idle time, time to generate parity and active time, respectively. However, the energy costs for waken, active and idle modes are denoted as  ewaken , eactive , and eidle. And so, the energy cost of coding ecoding depends on the number of XOR operations and CPU cycles.

Eencoding = twaken ewaken + tactive eactive + tidle eidle +  tcoding ecoding  (3) , where   tactive =  tread +  twrite .

Fig. 2.  Throughput and energy cost for encoding process

III. PRELIMINARY EXPERIMENTAL RESULTS We used Adaptec RAID controller with eight 64GB  Samsung SSDs. Three workloads TP1, TP2 and SPC1 are used.

We measured throughput and energy cost of traditional method and proposed method. EXRM codes are implemented in C++ language under Windows 7 operating system. Fig.2(a) shows the throughput with respect to various chunk sizes and Fig.2(b) shows energy cost with respect to ?(r:m), which denotes ratio of files in workload F and fixed threshold (1MB) is used. The results show that throughput of EXRM codes is improved than those of conventional RS erasure code and energy efficiency of proposed EXRM codes and Reed Solomon code with adaptive chunking are better than that of conventional RS code. In the future, we will extend EXRM erasure codes for applying decoding process in SSD based RAID systems.

