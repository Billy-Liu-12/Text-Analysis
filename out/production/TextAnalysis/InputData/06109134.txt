A Frequent Itemset Storing Structure   Chen Zuyi, and Zhao Taixiang

Abstract?Many decision support systems need to support online interactive frequent itemset mining, however, frequent itemset mining is an intensive computation process. This paper proposes an Fp-tree-based structure  BFp-tree to store frequent itemsets. This structure store pre-computed frequent itemsets on a disk to support online mining requests.

Keywords?decision support system; frequent item mining; BFp-tree

I. INTRODUCTION Frequent itemset mining is an important problem in  the data mining area. Many algorithms were introduced to mine the frequent itemset, but there are many problems, For example, they are CPU intensive, which makes online interactive frequent itemset mining a vey challenging task. Furthermore, frequent itemset mining requires a predefined minimum support threshold.

Different databases and applications often require different thresholds. For example, in data warehouses where summaries of data along various dimensions and their combinations are precomputed and stored so that OLAP queries can be answered quickly without the need for scanning the original database. In this paper, we propose a data structure to store precomputed frequent itemsets on a disk. This structure effectively utilizes the redundancy in frequent itemsets to save space and is based on FP-tree.



II. FP-TREE STRUCTURE  A. Related Conception A transaction database mining association rules can  be described as follows: Let I={i1, i2, ?, im} is an itemset, D={t1,t2, ?,tn }  is a transaction database, which is composed of a series transactions. These transactions have unique identifiers.

Each subset of I is called an itemset.

Definition 1 let Il! I, The support of itemset Il in database D is defined as the percentage of transactions in D containing il as: Support Il =||{t D|Il! t}/||D||.

Definition 2 if Support Il minsupport where minsupport is a user-specified minimum support threshold, then Il is called a frequent itemset in D.

B. Structure of Fp-Tree The excellent algorithm of discovering frequent  itemsets early is Apriori [3]. However, the shortcomings brought to light with the in-depth research.

1) Repeat to scan original database is necessary 2) Can produce huge candidate itemset.

There are many improved algorithm that have been proposed, such as frequent closed itemsets [2], generators [4], disjunction-free sets [5], generalized disjunction-free sets [7], non-derivable itemsets [1] and k-free sets [6]. Frequent closed itemsets are the maximal itemsets among the itemsets appearing in the same set of transactions and generators are the minimal ones. Disjunction-free sets, generalized disjunction-free sets, non-derivable itemsets and k-free sets are generalizations of generators, and they are more concise than generators.

J. Han proposed the structure of Fp-tree at 2000.To build the tree, scanning the original database twice is necessary. Association rules were generated according to the tree.



III. BFP-TREE  A. Structure of BFp-Tree and Analysis of Example The BFP-tree structure is a prefix-tree like structure.

TID Transactions 1 a,c,e,f,m,p 2 a,b,f,m,p 3 a,b,d,f,g 4 d,e,f,h,p 5 a,c,d,m,v 6 a,c,h,m,s 7 a,f,m,p,u  Figure 1. The transaction database D     ALL ITEMSETS (Min support=40%) c:3,d:3,p:4,f:5,m:5,a:6 cm:3,ca:3,pf:4,pm:3,pa:3,fm:3,fa:4,ma:5 cma:3,pfm:3,pfa:3,pma:3,fma:3 pfma:3  Figure 2. Frequent itemset      Figure 3. BFp-tree  Figure 1 shows the set of frequent itemsets discovered from the transaction database shown in Fig.

2 with minimum support of 40%. Fig.3 shows the structure of BFp-tree storing itemsets. Each node in a BFP-tree is a variable-length array. All entries in a node are sorted into ascending frequency order. An entry can contain multiple items if it is the only child of its parent. For example, node 2 in Fig.3 has only one entry and this entry contains two items m and a path starting from an entry in the root node represents one or more frequent itemsets and these itemsets have the same support. For instance, the path from the first entry of the root node to node 2 represents three itemsets: fc,mg; fc,ag and fc,ma. These three itemsets have the same support of 3.

B. The Construction Algorithm of BFp-Tree Input: l is a frequent itemset; Dl is the conditional database of l; El is the entry of l in the CFP-tree; min_sup is the minimum support threshold; Description: 1: Scan Dl count frequent items and sort them into  ascending frequency order, denoted as F; 2: I={i|i!F and support (l {i})=||Dl||}; 3: If I!!  then 4: Create a node tnode with one entry E and set  E.items=I;  5: El.child=tnode; F=F-I; l=l I; El =E; 6: Create a new BFP-treenode cnode with ||Fl||  entries, and each entry corresponds to one item in F; 7: El.child=bnode; 8: for all transaction t ! Dl do 9: Let t=t"F; Sort items in t according to their orders  in F; 10: Let i be the first item of t; Insert t into Dl {i};.

11: for all entry E in cnode do 12: S=l (E.items); 13: CFPtreee(S;D;E;min_sup); 14: for all transaction t!Ds do 15: t=t-{i}; 16: Let i be the first item of t,insert t into Dl {i}.



IV. PRODUCE FREQUENT ITEMSETS The BFP-tree constructed from a database with  respect to a given minimum support threshold is lossless, that is, it contains the complete set of frequent itemsets. We can produce concise representations of frequent itemsets, such as frequent closed itemsets, generators, disjunction-free sets, non-derivable frequent itemsets and cover equivalent classes, from a BFP-tree efficiently using the above query processing algorithms because these concise representations use the support information of itemsets and the superset?subset relationship among itemsets to remove redundancy.

Here we use frequent closed itemsets as an example to show how these concise representations can be produced from a BFP-tree.

An itemset is a closed itemset if all of its supersets are less frequent than it. The closed itemsets in a BFP-tree are identified as follows. For each itemset l in the BFP-tree, we search for its subsets. If a subset of l has the same support as l, then the subset is marked as non-closed. We traverse the BFP-tree in depth-first order from left to right, and search for the subsets of every itemset being visited. According to the left containment property, when an itemset is visited, all the supersets of the itemset have been visited except those that are in the subtree pointed by l. Therefore, if an itemset is not marked as non-closed when it is visited, then the itemset is a closed itemset if all the entries in its child node are less frequent than it.



V. PROPERTIES OF THE BFP-TREE In this section, we describe the properties of the  BFP-tree structure and show how to utilize these properties to process queries on a BFP-tree. We consider several types of queries:  1) Queries with minimum support constraints, for example, ??find the frequent itemsets with support no less than min_sup??, where min_sup should be no less than the construction minimum support of the CFP-tree;  c:3    d:3    p:4    f:5   m:5    a:6  ma:3 f:4 m:3   a:4  ma:3 a:3  a:5    2) Superset queries: for example, ??find the frequent itemsets containing a set of items I ??;  3) Subset queries: for example, ?find the frequent itemsets that are subsets of a given itemset I;  4) Similarity queries, for example, ?find the frequent itemsets that contain at least m common items with a given itemset I?, where m  I.

These several types of queries are very common in  practice, and they are also essential for efficiently evaluating more complex queries. At the end of this paper, we briefly discuss how to use the query processing algorithms.



VI. MAINTENANCE OF A BFP-TREE The database used in mining is often very large and  dynamic in nature. To avoid recomputing the whole BFP-tree when the underlying database is updated, we propose efficient algorithms to incrementally maintain a BFP-tree. The BFP-tree structure stores the frequent itemsets computed from a database instead of the database itself. Maintaining a BFP-tree is essentially to maintain the set of frequent itemsets stored in the BFP-tree. In a BFP-tree structure, not only the storage of frequent itemsets is shared, the update cost of frequent itemsets can be shared too. The BFP-tree structure itself also provides an efficient way to access the original frequent itemsets. Therefore, updating a BFP-tree is much easier and more efficient than updating the frequent itemsets stored in flat format or other structures. For the ease of presentation, in the rest of this section, we use D, d and U to denote the old database, the set of transactions to be inserted or deleted and the updated database, respectively, use Tx to denote the BFP-tree constructed from database x, where x = D, d or U, and use Lx to denote the set of frequent itemsets in x (x=D, d or U).



VII. UPDATING FREQUENT ITEMSETS It is inefficient to update the BFP-tree structure every  time a new transaction is inserted or an old transaction is deleted because a single transaction can affect many frequent itemsets. It is more suitable to conduct the update in batch so that different transactions can share their updating cost. Both insertion and deletion can cause the occurrence of new frequent itemsets either because the support of some itemsets increases or because the size of the database decreases which lowers the minimum count threshold. Our incremental update algorithm consists of two steps: the first step is to update the support of the original frequent itemsets and the second step is to generate new frequent itemsets.

Updating existing frequent itemsets. In the first step, the original BFP-tree and the set of new transactions to be inserted are scanned simultaneously. The original  BFP-tree guides the exploration of the search space over the incremental database d. The update process is similar to the construction algorithm of BFp-tree. One difference is that frequent items are now sorted according to their orders in the original BFP-tree instead of being sorted into ascending frequency order.

During the update process, if the count of an itemset does not change in U, then there is no need to access the descendants of that itemset in the original BFP-tree.

If the count of itemset l is changed, l can be in several situations:  1) l is frequent in D and is still frequent in U, i.e.L LD LU;  2) l is frequent in D but becomes infrequent in U,i.e. l LD-U;  3) l is on the negative border of TD and becomes frequent in U, i.e. l NB(LD) LU;  4) l is on the negative border of TD and is still infrequent in U, i.e. l NB(LD)-LU.

For the first case, we simply update the count of l.

For the second and the fourth cases, we update the count of l if they are on the negative border of U, otherwise they are removed from the BFP-tree. We maintain the set of itemsets in the third case and generate new frequent itemsets in the next step. For each itemset in l NB(LD) LU, we maintain its count, its candidate extensions and its position in the CFP-tree.

Generating new frequent itemsets. If some infrequent itemsets in D become frequent in U, that is, the negative border of the original BFP-tree expands, we scan the original database to generate new frequent itemsets.

The itemsets in NB(LD) LU are identified in the first step. In the second step, a conditional database is constructed for every itemset in NB(LD) LU, and all the new frequent itemsets are discovered from these conditional databases using the construction algorithm of BFp-tree. For itemset l in NB(LD) LU, only transactions containing l should be put into l?s conditional database. Each transaction in l?s conditional database contains only l?s candidate extensions. When constructing conditional databases for the itemsets in NB(LD) LU, we need to match every transaction with every itemset in NB(LD) LU. It can be a very costly operation especially when the size of the database and the number of itemsets in NB(LD) LU are both very large. We utilize prefix sharing among itemsets to reduce the cost for subset matching. Let l1 and l2 be two itemsets in NB(LD) LU and they share the same length-m prefix. If a transaction t does not contain the i-th item of itemset l1, where i m, then there is no need to match transaction t with l2. We maintain a length-l array for each itemset l in NB(LD) LU, called the jumping array of land denoted as l:jump_array. The i-th entry of l:jump_array contains the next new itemset    to be matched with transaction t if the i-th item of l is not contained in transaction t.



VIII. CONCLUSION The structure of BFp-tree utilize prefix and suffix  sharing to save space and it is efficient to condense dense data set. However, BFp-tree is suitable for batch data processing. The transaction database update processing requires further study.

