Toward A Data Desktop Grid Computing Based On BonjourGrid Meta-Middleware

Abstract?Desktop Grid or Voluntary Computing systems forms one of the biggest computing platforms in using idles resources over Internet or over LAN?s networks. Desktop Grids have been successfully used for solving scientific applications around the world at low cost. However,the data requirements of e-Science applications increase dramatically with the emer- gence of data-intensive applications. Hence data management becomes one of the major challenge of Desktop Grids. In this work, we describe important challenges that are needed to implementing scalable data-intensive solution in Desktop Grids systems. In addition, we explore the state-of-the art in tools and frameworks for Big Data handling. The proposal solution will be integrated in BonjourGrid Desktop Grid.

Index Terms?Desktop Grids, BonjourGrid, Big Data scheduling, Data Management, Decentralization, Data- intensive application.



I. INTRODUCTION  Currently, Desktop Grids (DGs) systems evolve in two global areas: Internet Computing (Volunteer Computing) and institution Desktop Grid computing. The first class benefits from exploiting the vast number of idle desk- top PCs (volunteers) over Internet. The second, usually called LAN-based DGs, refers to a grid infrastructure that is confined to an institutional boundary, where user participation is governed by the enterprise?s policy and desktop PCs are used to support the execution of the enterprise?s applications. DGs middlewares such as Con- dor [12], BOINC [8], PastryGrid [1] [4], XtremWeb [14], OurGrid [9] and GridMP provide researchers a wide range of high throughput computing systems by utilizing idle resources.

In fact,there are many scientific and enterprise appli- cations that deal with a huge amount of data for in- stance in parallel visualization. In order to process large data-sets, these applications typically need a high per- formance computing infrastructure. In recent years, high- throughput computing or desktop grid systems perform computational intensive application at low cost. However, since resources in a Desktop Grid are typically accessed through wide area network links, the bottleneck comes with the bandwidth limitation. The issue is to imagine architectures that are able to mask (in part) the bandwidth limitation. According to Fedak and al. in chapter 11 of [13],  in Desktop Grid environments, basic data-management tasks such as reliably storing large data-sets are very difficult to accomplish, first because of the volatility of nodes. Second, data privacy and security must be enforced on DGs because we deal with untrusted computers. The data protection mechanism may add non-trivial overhead when processing large volumes of data. Third, since the resources are geographically distributed, the design of a scalable data-intensive solution on these systems is an issue.

In this work, we focus on the latter issue, the other ones are left as part of either the computing or data exchange systems. we propose to build a new Data Desktop Grid system on demand. Our solution focuses on an extension of the BonjourGrid meta-middleware for supporting data- intensive applications by exploiting existing data proto- cols and middlewares.

Our schema is simple enough to be integrated into major desktop grid platforms. It does not capitalize on the data reuse pattern that can be exploited to achieve better performance. Data re-utilization can be either among tasks of the same particular job or among a succession of job executions of the same or related applications. This issue is left to the data middlewares that we plug in our system.

Our work is to coordinate computing and data platforms into a unified system. In this way, we choose a decoupling between the source site and the computation site by the mean of a remote cache and a local cache.

The paper is organized as follows. In section 2 we out- line the scientific issues in Data Desktop Grid computing by discussing some related works for data (scheduling, staging, storage and movement). In section 3 we present an overview of the BonjourGrid Meta-middleware. Fi- nally, we describe our data management approach in section 4 and we conclude the paper in section 5.



II. RELATED WORK  In this section we will discuss some of the key technolo- gies being developed in order to prepare an underlying infrastructure for scientist to manage the low-level data handling issues on Grid and Desktop Grid systems. In ad- dition, we present some high-level tools for co-scheduling  U.S. Government work not protected by U.S. copyright    of data and computation in Grid environment.

In recent years, the emergence of data-intensive ap-  plication has prompted scientists around the world to enable Data Grids. Data-intensive applications include bio-informatics, medical imaging, high energy physics, coastal and environmental modeling and geospatial anal- ysis .Very popular examples of Data Grids are EGEE [33], PPDG [35], Archer [16](Grid appliance [27], [34]), QADPZ [20], distributed.net [28] project and SETI@Home [32].

With over 227,000 active computers in the system (3.1 mil- lion total), as of March 2, 2012, SETI@home has the ability to compute over 562 teraFLOPS. For comparison, the K computer [29] was the world?s fastest supercomputer, achieved 8 162 petaFLOPS. In this way data management is still a challenging issue.

Data storage and movement systems, data scheduling, data-access and meta-data scheme are the main efforts to enable data-intensive applications in Desktop Grid systems. For this reason, Grid Computing researchers have developed several data management tools and dis- tributed file-system technologies. Some projects are based on Client-Server architecture such as GridFTP, SRM [23], Chirp [25], PetaShare [11], Freeloader [26] , while others are run with P2P paradigm like Bitdew [15] , GatorShare [30] and JuxMem [10].

A. Software for data storage and movement in Data Grid  Several tools are developed to enable Big Data man- agement in conventional Grid Computing. For large data transfer, GridFTP is the most widely used tool through parallel streams. Representative examples of storage sys- tems includes Storage Resource Managers (SRMs), SRB, IBP and NeST have been proven successful in traditional Grid like Globus, TeraGrid and EumedGrid but there are not fitting with the philosophy of DGs. Others systems have targeted Cluster and volatile Desktop to aggregate unused desktop storage.

B. Data storage framework over volatile desktop  Freeloader [26] framework is designed to aggregate space, and I/O bandwidth contributions from volatile desktop storage within a domain to provide a shared cache/scratch space for large, immutable data sets.

FreeLoader is designed to handle scientific data under local network.

Farsite [7] builds a secure file system using untrusted desktop computers. It provides file reliability and avail- ability through cryptography, replication and file. Farsite supports the high performance I/O of scientific applica- tions, rather than typical desktop file-I/O workloads in academic environments.

Chirp [25] is a user-level file system for collaboration across distributed systems such as clusters, clouds, and grids. Chirp allows ordinary users to discover, share, and access storage, whether within a single machine room or over a wide area network.

C. Data Desktop Grid Bitdew [15] [19] is an open source data management  for Grid, Desktop Grid and Cloud Computing. It can be easily integrated into Grid middlewares (XtremWeb, BOINC, Hadoop, Condor, Glite, Unicore etc..). The Bit- Dew framework offers a programmable environment for enabling data-intensive and long running applications by providing P2P technologies, DHT for data distribution and BitTorrent for data transfer. In order to manage data, programmers uses a specific APIs to define for every data these 5 abstractions replication, fault-tolerance, lifetime and affinity. BitDew run-time environment manage op- erations of data creation, deletion, movement, replication, and fault-tolerance operation.

GatorShare [30] is a data management framework that offers a file system interface and an extensible architec- ture designed to support multiple data transfer proto- cols, including BitTorrent. for Desktop Grid. It eases the integration with DGs and enables high-throughput data management for unmodified data-intensive applications.

For example, in Grid Appliance GatorShare provides an alternative cooperative data distribution service and users are able to download a fully or partial data. GatorShare does not contain mechanisms for replication and fault tolerance compared to Bitdew.

JuxMem (Juxtaposed Memory) [10] is a data sharing service for Grid Computing based on a compromise be- tween DSM systems and P2P systems. It is built over the JXTA middleware and it provides location-transparent data access as well as data persistence in a dynamic, distributed environment. JuxMem features includes data replication, localization and fault tolerance.

D. Coupling data and computation Today, the increasing need to stage large data from user  site to the computation site has incited researchers to find mechanisms for co-scheduling of data and computation.

Grid users move , manually or employing simple scripts, their data to Grid scratch space from remote archives using transfer tools like FTP and SCP.

Stork [18], a scheduler for data placement activities in a grid environment, is used to schedule data and computa- tion together in Condor and DAGMan. Using Stork input data will be queued, scheduled, monitored, managed, and even check-pointed. Stork provides solutions for data placement problems both in the Grid and Desktop Grid environment since it can interact with different data trans- fer protocols such as FTP, GridFTP, HTTP and DiskRouter and with . Besides, stork can interact with various data storage systems like SRB and NeST and data management middleware such as SRM.

In [17] PetaShare and Stork are coupled to enable data intensive collaborative science in institutions of Louisiana University by providing additional storage, and infras- tructure to access, retrieve and share data. Similarly, Con- dor and SRM are coupled in [21] to schedule jobs on compute nodes, where data is available.

In another example, Zhe Zhang and al [31] propose the orchestration of job scheduling with data staging/offload- ing and on-demand staged data reconstruction in HPC environments.

While the common context is the coordination of jobs and their data, our approach is fundamentally different from these work. We attempt to orchestrate, by extending BonjourGrid Desktop Grid, different data management middlewares and computing systems of Desktop Grid environment to deploy data-intensive applications.



III. BONJOURGRID META-MIDDLEWARE  In this section we remind the main concepts of the BonjourGrid system and its principal components.

The principal goal of BonjourGrid system [3], [2], [6] is to create, dynamically and in a decentralized way, a specific execution environment for each user to execute any type of applications without any system administrator intervention. Each user, behind a desktop machine in his office, can submit an application. BonjourGrid de- ploys a master (coordinator), locally on the user machine, and requests for participants (workers). Negotiations to select them should now take place. Using a publish/- subscribe infrastructure, each machine publishes its state (idle, worker or master) when changes occur as well as information about its local load or its use cost, in order to provide useful metrics for the selection of participants.

Under these assumptions, the master node can select a subset of workers nodes according to the selection criteria.

The master and the set of selected workers build the Computing Element (CE) which will execute and manage the user application. When the execution of an application of a CE terminates, its master becomes free, returns in the idle state and it releases all workers before returning to the idle state too. Then, the nodes can participate to others projects.

The key idea of BonjourGrid is to make a meta-grid middleware relying existing Institutional Desktop Grid middleware, and to orchestrate and coordinate multiple instances, i.e multiple CEs, through a publish/subscribe system. Each CE will be owned by the user who has started the master on his machine. Then this CE is respon- sible for the execution of one or many applications for the same user. As shown on Figure 1, in the user level, a user A (resp. B) deploys his application on his machine and the execution seems to be local. Level 1 (middleware layer) shows that, actually, a CE with 4 (resp. 5) workers has been dynamically created, specifically for the user A (resp.

B). Level 0 shows that all machines are interconnected and under the availability of any user.

BonjourGrid is based on three fundamental parts : a) A fully decentralized resources discovery layer, based on Bonjour protocol [24]; b) A CE, using a Desktop Grid middleware such as XtremWeb, Condor or BOINC, which executes and manages the various tasks of applications; c) A fully decentralized protocol of coordination between a)  and b) to manage and control all resources, services and CEs .

Figure 1. BonjourGrid abstract layers  In addition, we have proposed in [5] a fault tolerant mechanism for BonjourGrid to tolerate the faults of coor- dinators (see 2). The basic idea is to create, dynamically, k replicas coordinators for each application. We adopt a passive replication technique (where k is a configuration parameter depending on the size of the grid). If a main coordinator fails, a secondary coordinator is resumed.

BonjourGrid tries to keep, for each application, k replicas of the coordinator and if there are enough free available machines in the system. Thus, BonjourGrid allocates dy- namically a new machine to replace a coordinator ?leav- ing? the system and if the application is not yet completed.

Figure 2. Fault tolerance framework in BonjourGrid.



IV. OVERVIEW OF DESIRED APPROACH  Why not orchestrate existing data-intensive manage- ment system and Grid schedulers for the purpose of Computational Desktop Grid? To answer this question, our solution is focused on extending BonjourGrid meta- middleware to meet the following needs which are not     met by existing designs. We argue that systems like Stork, Bitdew, GatorShare and Chirp are easily integrated into DGs computing system such as Condor, Boinc and XtremWeb.

A. Purposes  ? Data scheduling. Users get difficulties to implement easily their applications. In fact, to deploy an applica- tion, user should place manually, using simple script, the data from its site to the computation platform. To accomplish this task, the user must necessarily have a knowledge about the data transfer protocols such as FTP, SRM tools and Globus GridFTP.

? An efficient high-throughput data management sys- tem to support data-intensive applications. In most cases, Desktop Grid middleware lacks dedicated tools for distributing and managing a huge amount of data job. Usually, data and computation are both managed by the job scheduler. This procedure influences nega- tively on performance, scalability and fault tolerance of the platform. Thus, An ideal Desktop Grid system would allow sophisticated cooperative techniques for data management.

? Enables high-throughput data management for un- modified data-intensive applications. The most im- portant issue is to make unmodified applications available to all participants via BonjourGrid. So, users are not required to modify their binary applications.

Also, the proposal platform would deploy bag-of- tasks and DAG applications.

? Hiding data management from users and applica- tions. To enable on-demand data management (Stag- ing and scheduling) on Desktop Grid , we plan to build a self-configurable schemes. To ensure this issue, we should provide a high-level API to manage automatically both data queue and job queue within the same framework.

? Data Prefetching. Scientists are already using Grid systems to schedule data intensive applications.

These applications are classified into two categories: Bag-Of-Tasks and Computational Work-flow (DAG).

Usually, the strategies employed to manage and schedule data in this kind of applications is as fol- lows: 1) Inputs files are staged into computation site before jobs execute 2) Output Files that are produced by jobs are transferred off a worker node to the storage escape of the submitter node. 3) In the case of DAG applications, extra data transfer operations of intermediate output files will be carried out from producer node to consumer node via the submitter node. Motivated by the above facts, we noted that prefetching can be used for optimizing various pur- poses such as the bandwidth limitation and applica- tion performance.

B. Solution design and capabilities With the above requirements in mind, the idea consists  in creating, dynamically and on demand for each user ap- plication, a decentralized data manager in addition to the computing system. The proposed solution supports exist- ing applications without any change in their implementa- tion. The data manager will be initiated and supervised by the BonjourGrid?s coordinator node in parallel with the chosen computing middleware (BOINC , XtremWeb or Condor). Thus, BonjourGrid becomes a Meta-Data Grids that orchestrates multiple simultaneous instances of data managers and computational systems. In this section, we present the design of the data manager framework.

We compose the data management framework in two data caches that interact continuously in order to maintain the availability of data throughout the execution of an application. Each cache has a set of services. In figures 3we propose a Remote Cache for data placement activities, in order to reserve the disk space for application and to transfer the required data from the user site to Bonjour- Grid. Once data are placed on the platform, a second cache called Local Cache is automatically launched to publish and to distribute data over workers [22].

(a) BonjourGrid Coordinator Node  (b) BonjourGrid Worker Node  Figure 3. BonjourGrid new design architecture with Data Manager. The two figures present the interaction between different daemons. Nodes change their status from Idle to Master or Worker. Stork is used as a remote cache for staging data from data sources into BonjourGrid. For locally data distribution, users can select Bitdew, GatorShare or Chirp.



V. CONCLUSION AND FUTURE WORKS Data management is a key point to perform data-  intensive applications of e-Science. In this paper, we have identified the requirement to build a decentralized Data     Desktop Grid based on BonjourGrid Meta-Middleware.

We have discuss existing tools and techniques to manage and schedule Big Data jobs in Grid environment. Further, we have proposed a novel way to coordinate and orches- trate in a transparent and decentralized manner multiple computing systems and data management frameworks into an unified system. Our approach aims to reuse exist- ing protocols and framework such as Bitdew, Chirp and Stork and to hide the difficulties from users to deploy these systems.

Several issues must be taken into account in our future works. The first issue is to evaluate the data manage- ment approach using bag-of-tasks and parallel applica- tions with data dependencies. Precisely, with different case studies,we envision to investigate the performance and scalability of BonjourGrid after graft a data manage- ment framework. Experimentation will be conducted on Grid?5000 testbed using a large number of machines.

