An Efficient Algorithm For Mining Top-Rank-K

Abstract? The analysis and management of uncertain data  has gained a lot of importance in the past few years because of their importance in a wide variety of applications such as sensor network and privacy preserving data mining applications. Many algorithms have been proposed to mine the frequent pattern over uncertain database. However the existing algorithms for uncertain data generate a large no. of candidate patterns and required to define an appropriate user defined threshold which is a challenging task for users. In this paper, we propose a new algorithm known as UFAE (uncertain filtering and extending) algorithm to mine top-rank-k frequent itemset or patterns.

Mining only top-rank-k frequent pattern greatly decrease the number of candidate pattern generated so reduce the mining time. Many algorithms exist to mine top-rank-k frequent itemset in case of precise data but none in case of uncertain database.

Experiments are performed to evaluate the performance of the algorithm on various dataset.

Keywords?Data mining, frequent pattern, uncertain database, existential probability, expected support, top-rank-k frequent pattern.



I.  INTRODUCTION The most important subfield of data mining is frequent pattern  mining [1] from many years. Data mining task is to discover  interesting, unexpected and useful pattern in a large database.

Frequent pattern are the building block for finding  associations rules that discovers the interesting relationship  between frequent items in a database which has important  applications in market basket analysis. A remarkable progress  has been made in this field and a number of effective  algorithms have been designed to mines the frequently  occurring patterns in a database. Frequent patterns are the  sequences or substructures that exist in the transactional  database equal to or greater than a threshold defined by the  user. An important aspect for consideration in frequent pattern  mining is whether the data to be mine is certain or uncertain.

Handling precise data is comparatively much easier than  uncertain data because there is lot of challenges that need to  face in management of uncertain data [11]. In precise data no  probability is assigned with the data and mining such type of  data is easier. However in uncertain data there exists a  probability value associated with each item in database. The  concept of frequent pattern mining from probabilistic database  has gained a lot of importance because the data generated by a  number of applications is uncertain such as sensor network.

From the first introduction of frequent pattern mining from  uncertain data many algorithm [2-10] has been proposed to  find the frequent pattern effectively.

In general, the minimum support threshold defined by the  user is used to generate the complete and accurate set of  frequent pattern from uncertain data. However this framework  has two problems. First setting the minimum support threshold  is difficult because user doesn?t know this threshold in  advance. A too small value of this threshold generates a large  number of candidate patterns while too big value generates  only a small number of candidate patterns. So both the  condition is undesired for user. Second the pattern generated is  very large in number however in real life only small number  of pattern needed.

The above mentioned two problems signify that it is  advantageous to change the problem of frequent pattern  mining to mining top-rank-k frequent pattern from uncertain  data where k indicate the required number of frequent patterns  that need to be mined. Top-k frequent itemset mining needs  not to specify any minimum support threshold value. Paper  [16] studied the similar mining problem from uncertain data  stream using the sliding window approach.

Mining the top-rank-k frequent itemset from precise data  has been studied efficiently and accurately in literature. Earlier  study in top-rank-k frequent itemset mining only deal with  precise data. A number of algorithms already exist in literature  to mine the top-k frequent itemset or pattern for certain data.

FAE [12], VTK [13], NTK [14], iNTk [15] are the well-  known algorithm in precise database. However in today era  the most of the application we deal with are uncertain in  nature such as sensor network management and mobile object  tracking. Now days these applications has gained a lot of  importance.

This paper proposed a new algorithm known as ?uncertain  filtering and extending? to mine the top-rank-k frequent  pattern for uncertain data and extended from the FAE [12]  algorithm for precise data.  Top-rank-k patterns are the pattern  having rank less than K. The algorithm need not to specify any  user defined minimum support threshold which is dilemma for  user. The algorithm gives accurate result and better  performance compared to frequent pattern mining algorithms.

The rest of the paper is categorized as follows:- section  II give the preliminary for the problem includes basic  definition and some properties. Section III describes the  proposed algorithm for top-rank-k frequent itemset mining  from uncertain data. The algorithm adopts the ?filtering and  extending? approach for efficiently mining top-rank-k  frequent pattern. Section IV gives the experimental results of  the algorithm. Section V gives the conclusion and point out  some scope for future research.



II. PRELIMINARIES In this section, we first give some important basic notion of  top-rank-k frequent pattern from uncertain data. Then we give  the problem of top-rank-k frequent pattern mining from  uncertain data and some related properties.

Let (i) Item in the transactional database consists of m domain  items I= {i1, i2? im} (ii) A transaction database DB= {T1, T2,..

Tn} consist of n transaction and has an individual identifier  and consists of set of items and (iii) X = {x1, x2, ?. .xk} be a  pattern of k-itemset, where X  Item and 1? k ? m.

A. Basic definition 1) Definition 1(Existential Probability of item):  Every item in xi in a transactional database is attached with a  probability value known as existential probability P (xi, tj)  which represent the probability of the presence of xi in tj.

0 < P (xi, tj) ? 1  A database consists of n transaction and each tj  The  database projected by X consists of every transaction that  contains X.

2) Definition 2(Expected Support of a itemset): The expSup(X, tj) expected support of a pattern X in a  transaction tj is thus the multiplication of the probabilities  value associated with item x within X when the items are  independent.

expSup(X, tj)  =  )                        (1)  Where P(x, tj) is the probability with which x exist in tj.

The expSup(X) of pattern X in the whole database is the  summation of expSup(X, tj) over all n transactions in the  probabilistic database:  expSup(X)=                        (2)  3) Definition 3(The rank of a pattern): Rank of a pattern X is characterized as:  Rx = | {ExpsupA  | A ? Expsupx }| where |N| denotes number of element in N.

4) Definition 4(Top-rank-k frequent pattern): Pattern X is said to be top-rank-k frequent pattern if and only  if Rx is less than or equal to K i.e. Rx ? K where k is threshold.

B. Some properties 1) Property 1(anti-monotonic property)  If any pattern X is not included in top-k frequent pattern then  any pattern Y that includes X i.e. superset of pattern X cannot  be a top-k frequent pattern.

Property 1 shows the basic UApriori property and still  preserved in top-rank-k frequent pattern mining.

2) Property 2 Given an uncertain transaction database DB, a threshold value  k, and set of pattern PS (  2I, 2I is the power set of I).then for  any pattern X ( PS), X cannot be a top-k frequent itemset in  DB if rank of X i.e. R(X, PS) is more than k.

UFAE algorithm greatly takes the advantage of this  property 2 to compact the size of searching space in finding  top-k frequent patterns from uncertain database.Mining top-  rank-k frequent patterns  C. UFAE Algorithm Top-k frequent patterns are the pattern having rank no  greater than k. Length of an itemset or pattern is defined as the  number of items contained in the pattern and is denoted by L-  pattern having L length. UFAE algorithm is extended from  FAE [12] algorithm for uncertain case.

UFAE (uncertain filtering and extending) uses the same  approach as used by the UApriori[2] which is iterative in  nature. UFAE algorithm uses the L-pattern to generate (L+1) ?  pattern which is the basic property of UApriori algorithm.

UFAE maintains a table known as top-rank-k table to store the  entire top-k frequent pattern. Below is the procedure how  UFAE algorithm efficiently mines the top-rank-k frequent  pattern from uncertain database.

1. Firstly  scan the uncertain transaction database 2. Gather the set of frequent 1-pattern with their expected  support using equation (2) i.e. top-rank-k frequent 1-  pattern.

3. Then these top-rank-k frequent 1-patterns are inserted into the top-rank-k table. Top-rank-k table have three  fields, (1) Rank of pattern (2) list of patterns (3)  expected support of patterns. Patterns having the same  expected supported are placed in single tuple with same  rank value. Tuples in the top-rank-k table should be  sorted in expected support descending order not be  greater than the k value.

4.  If number of tuple in the top-rank-k table is greater than k , then delete the tuples trailing the kth tuple.

5. Now use the 1-pattern from the top-rank-k table to produce candidate 2-patterns.

6. Scan the uncertain database again to calculate the expected support of candidate 2-pattern using equation  (1)  7. If the expected supports of any candidate 2-patterns are greater than the expected support of any candidate 1-  pattern i.e. the patterns in top-rank-k table, then the  candidate 2-pattern is inserted into the top-rank-k table.

8. After inserting candidate 2-pattern assure that number of tuples in top-rank-k table is no greater than k. if they are  more than k, delete the tuples trailing the kth tuple.

9. Repeat the step 5-8 by using l-pattrns from the top-rank- k table to produce top-rank-k (L+1)- patterns       Given below the proposed UFAE algorithm for mining top-  rank-k frequent pattern from uncertain database.

Algorithm UFAE Input: An Uncertain Transactional database and threshold K Output: - A top-rank-k table consists of complete set of top- rank-k frequent pattern  Method:-  Tabk ?    I?  For each T              ?    If (i < number of items in list) {  Create a new tuple;  Tuple. add item;  Tuple. Set expected support;  Tuple. Set rank;  Insert tuple as the last tuple;  Tab. Add tuple;  Rank++; } }  Sort the candidates in expected support descending order.

Rank=1; i=-1;  While (rank != k)  i++;  if (i < number of item in list)  if (rank == 1) {  Sort the item and create a new tuple;  tuple.addPattern(item);  tuple.setRank(rank);  Set support by expected support  tab.addTuple(tuple);  rank++; }  elseif (expectedsupport==support) {  add the item in list;  }  else {  create new tuple  tuple.addPattern(item);  tuple.setRank(rank);  tuple.setSupport(ExpectedSupport());  tab.addTuple(tuple);  rank++;       }     }    Procedure Candidate_gen(TP j-1  )  C k = ;  For each pattern p u  TP j-1    For each pattern p v  TP j-1  (p v ? p  u )  If (p u [1] = p  v [1]  p  u [2] = p  v [2]  ?p  u [j-2] = p  v [j-2]  p  u [j-1]  < p v [j-1]) then {  c = p u [1] p  u [2] ?p  u [j-2] p  u [j-1] p  v [j-1];  C k = C  k {c}; }  Return C k ;    Procedure SupportCalculationforCandidate (candidate C) { For each transaction do {  For each candidate do {  ExpSup= 0; (initialize expected support to zero)  For each item in candidate {  For each item in transaction {  If (Expsup==0)  Expsup = item.get probability;  Else  Expsup *= item.get probability ;} }  Increase support by expected support;  }  D. Case study with an example: Consider the following table 1 uncertain database to  demonstrate the proposed algorithm. An existential probability  is associated with each item between 0 and 1 and threshold is  5.

Table 1:- An uncertain database    TID Content of each transaction  T1 a:0.9, b:0.8 c:0.7,  d:0.6, f:0.7  T2 a:0.9, c:0.7, d:0.6, f:0.1  T3 a:0.6, b:0.9, c:0.2, e:0.8, f:0.5  T4 a:0.7, b:0.2, c:0.2, e:0.9  T5 b:0.9, c:0.9, g: 0.4   The first approach to mine the frequent is based on brute ?  force approach known as na?ve algorithm.  Brute force  approach first find all the combination of pattern in the  uncertain database and find the expected support of all the  patterns. Then the algorithm sort the pattern in term of  expected support in decreasing order and then extracts the top-  k frequent patterns from that list. Given below is the procedure     how na?ve algorithm works to mine top-rank-5 pattern from  the uncertain database shown in table 1. For transaction t1 {a, b, c, d, f}, patterns that are generated from t1 consist of all the non-empty subset of {a, b, c, d, f} i.e. {a}, {b}, {c}, {d}, {f}, {a, b}, {a, c}, {a, d}, {a, f}, {b, c} , {b, d}, {b, f}, {c, d}, {c, f} , {d, f}, {a, b, c}, {a, b, d}, {a, b, f}, {a, c, d}, {a, c, f}, {b, c, d}, {b, c, f}, {c, d, f}, {a, c, f}, {a, d ,f} , {a, b, c, d}, {a, b,  c, f}, {b, c, d, f}, {a, c, d, f}, {a, b, d, f} and {a, b,  c, d, f} are  all the patterns of transaction t1. In the similar way, {e}, {g}, {a, e}, {b, e}, {c, e}, {e, f}, {a, b, e}, {b, c, e}, {c, e, f}, {a, c, e}, {a, e, f}, {a, b, c, e}, {b, c, e, f}, {a, c, e, f}, {a, b, e, f}, {a,  b, c, e, f}, {g}, {b, g}, {c, g}, and {b, c, g} also are patterns.

Therefore, there are total 51 patterns generated by table 1  uncertain database. By scanning the database we can calculate  the expected supports of these patterns by using equation (1)  and (2). On the basis of expected support {a}, {b}, {c}, {d},  {a, c} are the top-rank-5 patterns. Their expected supports are  3.3, 2.6, 2.4, 2.2 and 1.7 respectively. Obviously, this method  is inefficient because it generate all the patterns. Suppose the  uncertain database has n transaction and the average transaction length is m. Then brute-force method will enumerate about n (2  m -1) patterns. Therefore, the brute-force  method is inefficient in both time and space.

On the other hand, UFAE algorithm decreases the number of generated patterns by using the Property 1 and 2. Given below  is the procedure how UFAE algorithm works: we know that  {a}, {b}, {c}, {d}, {e} are top-rank-5 frequent patterns by scanning the database once. {f} and {g} cannot be top-5  pattern using property 2. So they are useless pattern for  generating pattern having length greater than one because  superset of a non-frequent pattern can never be frequent by  using property 1. By {a} and {c}, we get a candidate pattern {a, c}. By scanning DB second time, we get to know that the expected support of {a, c} is 1.7, which is greater than the expected support of {e}. So, {a, c} replaces {e} from top- rank-5 table and becomes a frequent pattern also. So the  number of patterns generated by UFAE is very less compared  to na?ve algorithm. For table 1 uncertain database UFAE  algorithm generate only 20 candidate pattern which is less  than half compared to na?ve algorithm.



III. EXPERIMENTAL RESULT To evaluate the performance of our proposed algorithm  experiments are performed with both synthetic and real  datasets. Experimentation is done using Java JRE v1.6.0 on  Windows 8 machine with quad-core running at 2.30 GHz with  4 GB RAM and 1 TB disk. The experiments are performed  with different k values on different datasets. The datasets used  are connect and T20I6D300K (http://code.google.com/p/at- tree/downloads/list.).   The algorithms to be compared to evaluate the performance are Na?ve algorithm, UFAE and  UApriori. UApriori is the algorithm to mine frequent pattern in uncertain case. The experimental results reveal that the  proposed UFAE algorithm is much more efficient than the above mentioned two algorithms in term of running time.

Figure 1 show the running time of UFAE and UApriori as the threshold k increases from 100 to 700 on synthetic dataset  T20I6D10k, where the average size of each transaction,  average size of maximum potentially frequent item and  number of transaction are set to 20 ,6 and 10000 respectively.

To evaluate the performance we take a Threshold value k and  see the corresponding min sup that need to set in UApriori  algorithm because min sup is the input for UApriori algorithm.

Graph shows that the UFAE algorithm has shorter runtime  than UApriori for same value of K and corresponding min sup.

So UFAE performs much better than UApriori because UFAE  generates less number of candidate patterns.

Fig 1 running time of UFAE and U-Apriori for T20I6D10k dataset    Figure 2 also shows the runtime of UFAE and UApriori as K  increase from 100 to 700 on synthetic dataset T10I6D50k  where average transaction size is 10 and maximal potential  frequent item size is set to 6 while number of transaction is  50000.

Fig 2 running time of UFAE and U-Apriori for T10I6D50k dataset    Fig 3 shows the runtime of UFAE and UApriori on real  dataset connect as k increases from 20 to 600.

Fig 3 running time of UFAE and U-Apriori for connect datase     Fig 4 shows the mining time of Na?ve and UFAE algorithm  for T10I6D20  for different value of K. UFAE always perform  much better than Na?ve because of less number of candidate  pattern generation and avoids the time consuming  calculation  of expected support for all the patterns.

Fig 4 running time of UFAE and Na?ve algorithm for T10I6D20 dataset    Figure 5 shows the running time of na?ve and UFAE algorithm  for fixed value of K but different database size. In DB_X, X  denotes the number of transaction in uncertain database.

UFAE algorithm outperforms the na?ve algorithm on every database size.

Fig 5 running time of UFAE and Na?ve for different database size with fixed k  value

IV. CONCLUSION AND FUTURE WORK In this paper, we presented and analyzed the problem of  finding top-rank-k frequent itemset mining from uncertain  database, which is different in semantics from the past  proposals of top-rank-k frequent itemset mining from precise  database. We discussed the need of mining top-rank-k  frequent pattern for uncertain data. A novel UApriori based  algorithm known as UFAE algorithm was developed and  evaluated to mine top-k frequent itemset.

We evaluated the performances of our algorithm through the  above experiments, and the experimental results showed that  UFAE algorithm is efficient and feasible to mine top-k  frequent pattern.

For future scope, as we are well familiar that the tree based  algorithm are the fastest methods to mine frequent item for  uncertain database, because tree based algorithm are not based  on  level-by-level approach. So the tree based algorithms can  be applied to mine the Top-Rank-k frequent patterns.

