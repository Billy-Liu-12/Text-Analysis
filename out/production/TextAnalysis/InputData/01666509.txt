Online Client-AP Association in WLANs Gaurav S. Kasbekar, Pavan Nuggehalli and Joy Kuri

Abstract? In many IEEE 802.11 WLAN deployments, wireless clients have a choice of access points (AP) to connect to. In current systems, clients associate with the access point with the strongest signal to noise ratio. However, such an association mechanism can lead to unequal load sharing, resulting in diminished system performance. In this paper, we first provide a numerical approach based on stochastic dynamic programming to find the optimal client-AP association algorithm for a small topology consisting of two access points. Using the value iteration algorithm, we determine the optimal association rule for the two-AP topology. Next, utilizing the insights obtained from the optimal association rule for the two-AP case, we propose a near-optimal heuristic that we call RAT. We test the efficacy of RAT by considering more realistic arrival patterns and a larger topology. Our results show that RAT performs very well in these scenarios as well. Moreover, RAT lends itself to a fairly simple implementation.



I. INTRODUCTION  IEEE 802.11 based wireless local area networks (WLANs) have become ubiquitous in homes, workplaces, business cen- ters, campuses and other public areas. In these networks, the client device or station (STA) scans the radio channel to detect neighboring access points (APs). If only a single AP is found, then the user associates with this AP. However, in many deployments the user will find multiple APs in its neighborhood. The user will then have to select one of these APs to associate with. In current WLANs, the AP selection algorithm is very simple: The user associates with the AP that has the strongest signal to noise ratio (SNR), measured by the received signal strength indicator (RSSI). However, user throughput is a function of both received signal strength and the load of the AP to which the user is associated. If the spatial distribution of users is non-uniform, then it is likely that a few APs will be heavily loaded while the others are only lightly loaded. Such a skewed load distribution will bring down network performance and reduce user satisfaction.

In this paper, our objective is to design good client-AP asso- ciation rules that are sensitive to the loads on the APs as well as the location of the client. Starting with the analytical model proposed in [1], we employ stochastic dynamic programming to find the optimal strategy for a simple topology consisting of two APs. By defining cost functions appropriately, we can obtain optimal AP selection algorithms for different perfor- mance metrics, such as average delay, average throughput and average log-throughput. Next, by examining the nature of the optimal strategy, we propose a heuristic named ?RAT? for AP selection. It turns out that RAT is nearly optimal for the two-  AP tolopology in terms of all the performance metrics that we have considered.

The next step is to examine the performance of RAT in more general topologies and with more complicated arrival patterns.

In these larger topologies, it is computationally infeasible to find the optimal policy using dynamic programming. So, we compare the performance of RAT, again in terms of average delay, average throughput and average log-throughput, with three plausible AP selection algorithms. We find that our heuristic outperforms all other algorithms.

It may be worth pointing out here that we use the stochastic dynamic programming model for a small two-AP problem only, and the optimal solution to this problem motivates our heuristic (RAT) which is applicable to larger problems with many APs. Thus, we do not suggest the dynamic programming approach for practical scenarios, because that may lead to the well-known state space explosion problem. Rather, the insights obtained from the solution of the dynamic programming based formulation are utilized to come up with a heuristic that is generally applicable. Nevertheless, the link between the dynamic programming formulation and the subsequent heuristic is clear: Without the formulation, we would not be able to identify the critical parameters of the heuristic policy and its overall structure.

Many researchers have addressed the issue of client-AP association by proposing load sensitive AP selection algo- rithms. In [2], [3], [4], heuristics are provided for improving performance. [3] proposes decentralized algorithms which use the signal strength from each AP, the number of STAs currently associated with each AP and the packet error rates of STAs communicating with each AP to select an AP. [4] proposes a hand-off strategy based on the SNR that a STA can get with different APs, the AP?s load and the association time with the AP. Researchers have also built analytical models for this problem in [5] and [6]. [5] formulates the AP selection problem as an optimization problem to maximize different utility functions. [6] gives an off-line algorithm for association of STAs to APs to achieve max?min fair bandwidth allocation.

An on-line adaptation is provided that periodically runs the off-line algorithm and associates STAs arriving between two off-line optimizations using the algorithm in [7].

Our approach differs from previous research in several re- spects. In the past, optimal algorithms have been proposed only for static scenarios. Here, a number of users and APs are given, and the problem is to find the optimal user-AP association. In our work, users come and go (as in real life) and user-AP     associations are dynamic. For the dynamic scenario, several heuristics have been proposed in past work. These heuristics are based on intuition, and, to the best of our knowledge, no attempts have been made to relate these heuristics to policies that are optimal in some pre-defined sense. Our goal is to obtain association policies that are simple and yet imitate, as closely as possible, policies that are provably optimal in a dynamic scenario.

Moreover our optimization framework is flexible in that different optimization criteria can be incorporated into it. Our optimization framework is also not restricted to any specific notion of fairness. By employing different utility functions, our approach can be adapted to various notions of fairness [8].

In Section II, we describe our system model. We then apply the dynamic programming approach to a network topology consisting of two APs in Section III. We develop a heuristic by interpreting the optimal policy for this scenario. In Section IV, we simulate a larger topology using our heuristic as well as three other client-AP association algorithms. In Section V, we indicate how the heuristic may be implemented in practise.

We provide conclusions in Section VI.



II. MODEL  In our model, APs are located in an area . Mobile stations (STAs) arrive in such that the location of each STA is independently distributed according to some probability distribution. The arrival of STAs is assumed to be Poisson with parameter . Each STA brings with it a file to transmit, whose size is exponentially distributed with parameter . The STA chooses an AP to associate with according to the association policy being used. After completely transmitting the file, the STA departs. Suppose that at some point in time, there are  STAs associated with an AP. STA is associated at rate . Then Kumar et al. [1], [5] show by an analysis of the  IEEE 802.11 Distributed Coordination Function (DCF) that the aggregate uplink throughput is of the form:  (1)  where is an overhead term and depends only on , the IEEE 802.11 DCF parameters and the packet length. If overheads are not taken into account, (1) reduces to the simpler formula:  (2)  Moreover, the throughput of each STA is equal and is given by:  (3)  Note that if random polling were used to schedule packet transmissions of the STAs, then the throughput of each STA would be given by (3). This formula shows that even one STA associated at a low rate can pull down the throughputs seen by other STAs, even though these others may be associated at high rates.

We now describe the stochastic dynamic programming for- mulation. We model the system as a Continuous-Time Markov Decision Chain (CTMDC). Following the notation in [9], let denote the state space. In state , a controller must choose one action from a finite nonempty set of actions. If action  is chosen, then a cost rate of is incurred till the next transition. The time till the next transition is exponentially distributed with parameter . If action is taken in state , let be the probability that the next state is , where  . The objective is to minimize the long run expected average cost. Let be a policy, which is a rule for choosing actions given the current state and (possibly) past states and actions. Let be the total cost incurred during the first state transitions. Let be the initial state and be the expected total cost incurred during the first transitions, if policy is employed and the initial state is . Similarly, let be the expected total time spent under during the first transitions, if the initial state is . Let  (4)  (5)  A stationary policy considers only the current state in choosing actions, and does not consider past states and past actions. An optimal stationary policy , for which , exists in many cases. The objective is to find such a policy.

The states, actions, transition probabilities and cost rates in our model are given below.

A. States  Let be the number of APs. For concreteness, assume that there are four rates in the rate set, as in 802.11b. They are indexed by integers from to and correspond to 1, 2, 5.5 and 11 Mbps, respectively. This model readily extends to an arbitrary number of rates.

Define the population matrix as follows:  ...

...

...

...

(6)  where is the number of STAs associated at rate with AP . Define the rate vector as follows:  ...

(7)  In a CTMDC, a state is defined only at transition epochs. In our model, transitions can be either arrivals or departures. If the present transition is an arrival, then the th component of , , is the maximum rate that the newly arrived STA can get  with AP . We allow to model the case where the new arrival cannot associate with AP at all. However, we also    assume that when the present transition is an arrival, cannot be all-zeros. We assume that the APs cover the entire area , so a STA can associate with at least one AP. If the present transition is a departure, is the all-zero vector.

The state of our system is given by:  (8)  B. Action Set  If a transition corresponds to an arrival, the action set is given by:  (9)  In words, the action set includes all the APs with which it is possible to associate at a non-zero rate. The action , where means that the arriving STA associates with AP  . For departures, the only action is to continue, or the null action. So, for departure states, there is only one action given by:  (10)  C. Transition Probabilities  For a population matrix , the time till the next transition is exponential with parameter:  (11)  where is the physical rate corresponding to index . The term accounts for arrivals. The second term adds the transition rates due to departures from each AP. The form of this term follows from (3). It is also clear that the location of an arriving STA determines the vector that it sees. Therefore, the spatial distribution of arrivals determines the probability  that an arriving STA sees rate vector . Using and (3), it is straightforward, though tedious, to derive the transition probabilities in every state. For the sake of brevity, we do not provide a full derivation here.

D. Cost  Suppose the current state is and action is taken. In this section we will write down expressions for , the cost rate till the next transition.

1) Delay as the cost: In the delay as the cost model, there is a unit cost per STA in the system per unit time. The cost rate is given by:  (12)  The indicator adds the STA, if any, which associated at the current transition. If is the cost rate, the average cost in (4) is the average number in system. By Little?s law this is proportional to the average time that a STA spends in the system. Thus by minimizing the average cost, we minimize the average delay of a STA.

2) Average Throughput as the reward: Let be the set of all STAs in the system and be the throughput of STA .

is given by (3). Also, let . In the average throughput as the reward model, the cost rate is given by:  (13)  The reward rate is average throughput over all STAs in the system. The reward rate is incorporated into the model as a negative cost rate. The first term is added to make the cost rate non-negative. The average throughput per STA is a better measure of the system performance than the aggregate throughput of all STAs. For example, as the number of STAs in the system increases, the average throughput in general decreases but the aggregate throughput need not decrease.

Hence the average throughput is chosen as the reward rate instead of the aggregate throughput.

3) Average Log Throughput as the reward: The cost rate is  (14)  Maximizing sum of log throughput instead of aggregate throughput, called proportional fairness in the literature [8], leads to a fairer distribution of the throughput that different users get. If our objective is to achieve a fair distribution of throughput of STAs, we can use the cost rate in (14). Again, average log throughput is used as the reward rate instead of aggregate log throughput for the reason given above. Like log, other utility functions may be used to give different degrees of fairness.

E. Solution Methodology  We apply the value iteration algorithm [9] to find a sta- tionary optimal policy. To that end, we need to transform our CTMDC to an auxiliary Discrete Time Markov Decision Chain (DTMDC). Let  (15)  For the transformation to be valid [9], there must exist con- stants and such that  (16)  It can be easily shown that (16) is satisfied if we choose:  (17)  (18)  The DTMDC is as follows. States and actions are the same as in the CTMDC. The cost incurred if the system is in state  and an action is taken is given by:  (19)  The transition probability from state to state under action is given by:  (20)    Probability that a new STA arrives to the right of this diameter equals PRIGHT  1d  d2  STAs arrive inside this circle  AP 1  (?0.5,0) (0.5,0)  AP 2  1 unit  Within this annulus a STA can associate  Inside this circle a STA can associate  with AP 1 at rate c with AP 1 at rate c   Fig. 1. Topology in Section III  where are transition probabilities in the CTMDC as defined before and are the corresponding transition probabilities in .



III. A TOPOLOGY WITH TWO APS  We implemented the model in a simple topology which we now describe. In a unit circle with center at (0,0), two APs are located at and (See Fig. 1). These may be ceiling-mounted APs in an area. STAs arrive within the unit circle. A non-uniform arrival distribution of STAs is modelled as follows. The probability that a STA arrives to the right of the vertical diameter is PRIGHT, which is a parameter that can be varied. In each half of the circle the probability density of a STA arriving is uniform. There are two possible rates ? and  ? at which a STA can associate with an AP, with .

We use a simple distance based model: Let the distance of a STA from an AP be . If , it can associate at the higher rate . If it can associate at the lower rate . If  it cannot associate. The value iteration algorithm (VIA) was run for different values of the parameters PRIGHT and  and the optimal action for each state was printed out. The VIA operates on a finite state space. So the number of STAs in the system was limited to a finite number .

Using the approximating sequence method [9], we can easily solve for the infinite state space case.

A. Intuition for Heuristic  By studying the optimal actions given by the VIA, we must find a simple rule or heuristic which is close to optimal. We give the motivation for such a heuristic in this section.

First, let us define the selfish policy for AP selection. Under this policy, a newly arrived STA finds out the throughput that it will get if it joins AP 1, and, similarly, the throughput it will get if it joins AP 2. Then, it joins the AP which will give it the higher throughput.

TABLE I OUT OF DECISIONS, THE NUMBER OF DECISIONS IN WHICH THE  SELFISH POLICY IS CORRECT, THE NUMBER OUT OF THE WRONG DECISIONS OF THE SELFISH POLICY IN WHICH THE SNR DECISION IS  CORRECT AND THE NUMBER OF DECISIONS IN WHICH RAT IS CORRECT.

HERE DELAY IS THE COST  PRIGHT Selfish SNR RAT Correct Correct  1.0 0.5 8763 653 9199 1.0 0.8 8699 648 9097 1.5 0.5 8628 810 9298 1.5 0.8 8485 788 9050 2.0 0.5 8507 941 9319 2.0 0.8 8276 901 8921 2.5 0.5 8426 1042 9288 2.5 0.8 8108 981 8791  We ran the VIA for the topology described above with delay as the cost function (using (12)). The two rates in the rate set were 5.5 and 11 Mbps. There were 1 states in which the arriving STA could associate with both APs at a non-zero rate.

In these states a non-trivial decision has to be made. Column in Table I gives the number of decisions out of in which the selfish policy decision is also the optimal decision for different values of and . It can be seen that a large proportion of decisions are selfish policy decisions. Moreover, we observed the following pattern in a large fraction of the decisions in which the selfish policy decision was incorrect: The throughputs that the STA could get with the two APs were close to each other and the AP which gave the higher physical rate was the optimal choice. Column in Table I gives the number of decisions in which the selfish policy was incorrect and the optimal choice was the AP which gave the higher physical rate. This observation motivates our heuristic, which is given in the next section.

As an example, let the matrix in (6) be as follows:  (21)  Suppose the new STA can associate at rate 5.5 Mbps with AP 1 and at rate 11 Mbps with AP 2. The VIA yields AP 2 as the optimal choice. The throughputs that the STA would get if it associated with AP 1 and 2 are, respectively, 3.667 and 2.750 Mbps. Thus, the Selfish policy chooses association with AP1, and this is not the optimal decision. We see that the throughputs that the STA can get with the two APs are close to each other and the AP which gives the higher physical rate is the optimal choice.

B. Heuristic  Let be the throughput that the arriving STA would get if it associated with AP . Let be the rate at which the STA can associate with AP . Let  (22)  1This number comes from the finite state space approximation mentioned in section III    TABLE II OPTIMAL AVERAGE NUMBER IN SYSTEM AND THOSE ACHIEVED BY  DIFFERENT SCHEMES  PRIGHT Optimal RAT SNR Selfish Agg  1.0 0.5 0.680 0.681 0.765 0.681 0.695 1.0 0.8 0.680 0.683 0.913 0.688 0.695 1.5 0.5 1.197 1.206 1.419 1.228 1.259 1.5 0.8 1.207 1.213 2.122 1.236 1.271 2.0 0.5 1.958 1.982 2.453 2.061 2.157 2.0 0.8 2.000 2.051 4.817 2.090 2.196 2.5 0.5 3.147 3.202 4.116 3.427 3.642 2.5 0.8 3.252 3.338 8.044 3.561 3.685  where is a positive constant less than . The heuristic rule is that the STA must associate with that AP for which is higher (ties are broken randomly). Because both ate nd  hroughput are used, we refer to the heuristic as the RAT policy. Column in Table I gives the number of cases (out of 9520) in which decisions according to RAT are correct.

The value was used. It can be seen that there is a substantial improvement over the selfish policy.

C. Simulation Results with delay as the cost  We developed a program to exactly simulate the above model. That is, STAs arrived according to a Poisson process with exponentially distributed file-sizes. An arriving STA selected an AP according to the selection policy being used.

Packets were transmitted by random polling as follows. Sup- pose that at a given time, there are STAs associated with an AP. Then, a random integer between 1 and was generated and the th STA transmitted one packet. After the transmission of this packet was completed, another random integer was generated and so on. We examined the performance of the following schemes:  1) RAT Based Selection: The RAT policy was used with value .

2) SNR Based Selection: A newly arrived STA joins the AP to which it is nearer.

3) Selfish Selection: As defined in Section III-A.

4) Aggregate Throughput Maximizing Selection: The STA  finds out the values of , where is the aggregate throughput of all STAs in the system if the STA were to join AP . It chooses AP 1 if  and AP 2 if , with ties being broken randomly.

Table II presents the simulation results for different values of and . The third column gives the optimal average  number in system given by the VIA. The remaining columns give the average number in system achieved by RAT, SNR based selection, selfish selection and aggregate throughput maximizing selection, respectively. The results show that RAT outperforms the SNR based scheme by a large margin. Also, the average cost achieved by RAT is closer to the optimal cost than those achieved by the selfish and aggregate throughput maximizing schemes.

TABLE III OUT OF DECISIONS, THE NUMBER OF DECISIONS IN WHICH THE  SELFISH POLICY IS CORRECT, THE NUMBER OUT OF THE WRONG DECISIONS OF THE SELFISH POLICY IN WHICH THE SNR DECISION IS  CORRECT AND THE NUMBER OF DECISIONS IN WHICH RAT IS CORRECT.

HERE AVERAGE THROUGHPUT IS THE REWARD  PRIGHT Selfish SNR RAT Correct Correct  1.0 0.5 8942 564 9210 1.0 0.8 8831 561 9078 1.5 0.5 8783 721 9335 1.5 0.8 8574 714 9033 2.0 0.5 8635 871 9393 2.0 0.8 8349 842 8905 2.5 0.5 8508 998 9360 2.5 0.8 8171 940 8789  TABLE IV OPTIMAL AVERAGE COST WITH AVERAGE THROUGHPUT AS THE REWARD  AND THOSE ACHIEVED BY DIFFERENT SCHEMES  PRIGHT Optimal RAT SNR Selfish Agg  1.0 0.5 8.032 8.035 8.090 8.034 8.044 1.0 0.8 8.031 8.038 8.206 8.036 8.045 1.5 0.5 7.278 7.285 7.477 7.300 7.346 1.5 0.8 7.288 7.295 7.892 7.306 7.355 2.0 0.5 6.994 7.023 7.399 7.081 7.157 2.0 0.8 7.030 7.046 8.497 7.109 7.197 2.5 0.5 7.172 7.192 7.792 7.349 7.513 2.5 0.8 7.249 7.293 9.380 7.407 7.552  D. Results with average throughput and average log through- put as the reward  We ran the VIA with average throughput (expression (13)) and average log throughput (expression (14)) as the reward.

The nature of the optimal actions for both is similar to that with delay as the cost (Section III-A) and the same heuristic performs well. The results with average throughput as the reward are given in Tables III and IV. The results with average log throughput as the reward are given in Tables V and VI. It can be seen that overall, RAT is closer to the optimal policy than the other policies.

A comparison of Tables III and V shows that the number of decisions in which the selfish policy is correct is higher with average log throughput as the reward, than with average throughput as the reward. This shows that the selfish policy is a good policy from the point of view of fairness. This is also reflected in the results in section IV.



IV. A LARGER TOPOLOGY  A. Description of topology  It is desirable that the heuristic obtained by running the VIA on the small system perform well in a larger topology.

In this section, we present results for a larger topology which is as follows. STAs arrive within a square of side units.

There are nine APs located as shown in Fig. 2. A non- uniform spatial distribution of arriving STAs is modelled as follows. The probability that a STA arrives in the shaded area    TABLE V OUT OF DECISIONS, THE NUMBER OF DECISIONS IN WHICH THE  SELFISH POLICY IS CORRECT, THE NUMBER OUT OF THE WRONG DECISIONS OF THE SELFISH POLICY IN WHICH THE SNR DECISION IS  CORRECT AND THE NUMBER OF DECISIONS IN WHICH RAT IS CORRECT.

HERE AVERAGE LOG THROUGHPUT IS THE REWARD  PRIGHT Selfish SNR RAT Correct Correct  1.0 0.5 9170 326 8968 1.0 0.8 9117 333 8926 1.5 0.5 8994 508 9160 1.5 0.8 8881 505 9035 2.0 0.5 8838 668 9314 2.0 0.8 8636 661 9013 2.5 0.5 8706 802 9356 2.5 0.8 8440 781 8931  TABLE VI OPTIMAL AVERAGE COST WITH AVERAGE LOG THROUGHPUT AS THE  REWARD AND THOSE ACHIEVED BY DIFFERENT SCHEMES  PRIGHT Optimal RAT SNR Selfish Agg  1.0 0.5 1.554 1.589 1.601 1.585 1.591 1.0 0.8 1.554 1.585 1.627 1.580 1.587 1.5 0.5 1.345 1.355 1.405 1.356 1.374 1.5 0.8 1.344 1.356 1.545 1.358 1.371 2.0 0.5 1.254 1.255 1.385 1.262 1.310 2.0 0.8 1.260 1.262 1.815 1.271 1.315 2.5 0.5 1.285 1.285 1.524 1.327 1.415 2.5 0.8 1.305 1.313 2.267 1.345 1.429  Within this annulus a STA can associate with AP 7 at rate 5.5 Mbps  Inside this circle a STA can associate with AP 7 at rate 11 Mbps  Probability that a new STA arrives in the shaded area equals PCENTRE  AP 1 AP 2 AP 3  AP 4 AP 5 AP 6  AP 7 AP 8 AP 9   2.4    Fig. 2. Topology in section IV  is which is a parameter that can be varied. The probability density of a STA arriving is uniform in the shaded and unshaded areas. There are two possible rates ? and ? at which a STA can associate with an AP.

Let the distance of a STA from an AP be . If , it can associate at . If , it can associate at . If , it cannot associate. and are as before. There is no restriction on the number of STAs in the system. Packets are transmitted by random polling as described in section III-C.

We ran simulations with the schemes in section III-C for different values of and . The parameter in  the RAT heuristic (22) was maintained at . To evaluate the performance we use the average throughput and average normalized delay, where the latter is the average of the quantity (delay/filesize).

B. Simulation Results  In the following results, is kept constant and the load is varied by varying . Fig. 3 shows plots of the average normalized delay and average throughput for the four schemes for . This is a lightly loaded system. Informally, we say that a scheme is unstable if the number of STAs associated with an AP keeps increasing with time. 2 The SNR selection scheme becomes unstable for greater than about  . This is expected, because a considerable fraction of the arrivals occurs in the central square and the SNR selection policy causes all of them to associate with AP 5. As a result, AP 5 gets overloaded. The other three schemes are stable. The plots also show the average throughput for the four schemes as varies. For the SNR selection scheme, we show average throughput only for values of such that the system is stable. It can be seen that the average normalized delay and average throughputs achieved by the Selfish, Aggregate Throughput Maximizing and RAT based selections are close to one another. Thus, in this lightly loaded system, all the three schemes perform almost equally well.

Fig. 4 shows plots for a moderately loaded system, with . The plot of average normalized delay shows that  the SNR selection scheme becomes unstable for greater than about 0.18 in the manner described above. As the arrival rate is increased from to , the instability shows up at a smaller value of (0.18 instead of 0.34). It is also seen that the Aggregate Throughput Maximizing policy becomes unstable for greater than about 0.47. This is because it does not balance load among the APs. For example, consider a scenario with two APs A and B. Suppose there is one STA associated with AP A at 11 Mbps and two STAs associated with AP B at 11 Mbps.

Suppose a newly arrived STA can get a rate of 5.5 Mbps with both APs. If it selects AP A, the aggregate throughput of all STAs is 18.333 Mbps. If it selects AP B, the aggregate throughput is 19.25 Mbps. Hence the aggregate throughput maximizing choice is AP B. But this choice increases the imbalance in the number of STAs associated with the two APs. It can be easily verified that instead of two STAs, if there are STAs associated with AP B at 11 Mbps where , then the aggregate throughput maximizing policy still chooses AP B. Thus, the aggregate throughput maximizing policy does not balance load and hence becomes unstable in scenarios with non-uniform arrival distribution of STAs. Fig. 4 shows that the selfish and RAT schemes are stable. RAT achieves an average throughput much greater than the other schemes.

Fig. 5 shows plots for a heavily loaded system, with . As expected, the SNR based selection scheme  becomes unstable at a lower value of (0.15  2A formal study of stability has been carried out in [10].

6.2  6.4  6.6  6.8   7.2  7.4  7.6  7.8   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  A ve  ra ge  T hr  ou gh  pu t (  M bp  s)  PCENTRE  Average Throughput vs. PCENTRE for ? = 0.5 s-1  SNR Selfish  Agg RAT  0.1  0.15  0.2  0.25  0.3  0.35  0.4  0.45  0.5  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  A ve  ra ge  N or  m al  iz ed  D el  ay (  s/ M  b)  PCENTRE  Average Normalized Delay vs. PCENTRE for ? = 0.5 s-1  SNR Selfish  Agg RAT  Fig. 3. Results for a lightly loaded system . SNR becomes unstable for greater than about . The other three schemes are stable.

instead of 0.18) as increases from to . Similarly, with the increase in the arrival rate, the Aggregate policy becomes unstable at a of 0.19 instead of 0.47.

But the most notable point is the abrupt change in the behavior of the Selfish policy ? it moves from being stable at  , to becoming unstable at for all values of ! (For this reason, we do not show a plot corresponding to the Selfish policy in Figure 5). This occurs because in this scheme, a newly arrived STA selects an AP which gives itself the highest throughput, but the throughput of the STAs which are already present in the system may be severely affected as a result. This is illustrated by the example at the end of section III-A. Here, the new STA can get throughput of 3.667 and 2.750 Mbps with AP 1 and 2, respectively. The selfish policy chooses AP 1, but as a result, the throughput of the STA which was already associated with AP 1 goes down from 11 Mbps to 3.667 Mbps, a substantial decrease. If the new STA were to choose AP 2, the throughput of the two STAs already associated with AP 2 would only go down from 3.667 Mbps to 2.75 Mbps. A substantial decrease of throughput of old STAs occurs when  1.5   2.5   3.5   4.5   5.5  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  A ve  ra ge  T hr  ou gh  pu t (  M bp  s)  PCENTRE  Average Throughput vs. PCENTRE for ? = 1.0 s-1  SNR Selfish  Agg RAT   0.5   1.5   2.5   3.5   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  A ve  ra ge  N or  m al  iz ed  D el  ay (  s/ M  b)  PCENTRE  Average Normalized Delay vs. PCENTRE for ? = 1.0 s-1  SNR Selfish  Agg RAT  Fig. 4. Results for a moderately loaded system . SNR becomes unstable for greater than about . The aggregate-throughput maximizing scheme becomes unstable for greater than about  .

a new STA associates with an AP at a low rate in order to give itself a high throughput. RAT overcomes this problem by taking into account both the throughput and the rate that a new STA can get with an AP. Finally, RAT remains stable for all values of , and achieves noticeably higher values of average throughput.

In summary, we note that the unstable behavior exhibited by some policies is due to two distinct phenomena: (a) unbalanced loads and (b) low-rate associations. The SNR- based and Aggregate Throughput Maximizing policies become unstable because they cause unbalanced loads. On the other hand, even though the Selfish policy balances loads, instability occurs at high values of arrival rates because of low-rate associations. It appears from the results that RAT manages to balance loads well, and, at the same time, avoid low-rate associations.

RAT is, in fact, a generalization of the SNR-based and Self- ish policies, in that the metric used is a weighted combination of the throughput that would be seen by an arriving STA if it associates with AP and the rate that it can get if it associates with AP . The weights assigned to throughput and rate are,    respectively, 1 and 0.2. If the weights are 1 and 0 respectively, we get the Selfish Policy, while if the weights are 0 and 1 respectively, we get the SNR policy. It is seen that the two special cases (Selfish and SNR-based) are inadequate, but a non-trivial combination of throughput and rate leads to stable behavior. Our choice of 1 and 0.2 as the weights was arrived at by experimentation, and is seen to work well. We do not claim that this is the best possible choice ? this issue is being explored.

1.6  1.8   2.2  2.4  2.6  2.8   3.2  3.4  3.6  0.1  0.15  0.2  0.25  0.3  0.35  0.4  0.45  0.5  0.55  0.6  A ve  ra ge  T hr  ou gh  pu t (  M bp  s)  PCENTRE  Average Throughput vs. PCENTRE for ? = 1.2 s-1  SNR Agg RAT   0.5   1.5   2.5   3.5   0.1  0.15  0.2  0.25  0.3  0.35  0.4  0.45  0.5  0.55  0.6  A ve  ra ge  N or  m al  iz ed  D el  ay (  s/ M  b)  PCENTRE  Average Normalized Delay vs. PCENTRE for ? = 1.2 s-1  SNR Agg RAT  Fig. 5. Results for a heavily loaded system . SNR becomes unstable for greater than about . Aggregate-throughput maximizing scheme becomes unstable for greater than about  . Selfish selection is unstable for all values of .



V. IMPLEMENTATION  RAT can be implemented in practice as follows. Each AP, in its beacon frames, must broadcast the sum of reciprocals of the rates at which STAs are associated with it. Also, a newly arrived STA can find for each AP by measuring the signal strength from the AP. Using these, the STA can find out the value of for each AP . It must then choose the AP with the greatest value of .

Due to movement of STAs or a change in the wireless link conditions, the AP that a STA selected upon arrival may not remain the best choice as time progresses. So each  STA must periodically re-run the RAT heuristic. This may be implemented similar to the dynamic AP selection mechanism described in [3]. Moreover, the overhead in listening to the beacon frames of nearby APs may be reduced using the SyncScan algorithm described in [11].



VI. CONCLUSIONS  We considered an online STA-AP association problem in WLANs. In our model, STAs arrive to the WLAN at random epochs, join the WLAN and transfer files of random lengths and then depart. We formulated an optimal association prob- lem in this dynamic scenario using the Stochastic Dynamic Programming framework. For a small topology, we obtained the optimal association policy by using the value iteration algorithm. The optimal policy motivated our RAT heuristic that is very simple; nevertheless, this simple heuristic was found to perform almost as well as the optimal policy for the small network. More importantly, RAT continued to perform very well in a larger and more realistic network, and was clearly superior to several simple policies with which it was compared. We also remarked upon the underlying causes of the poor behavior of these other policies. Further, RAT is implementable in practice in a straightforward manner ? each AP needs to broadcast one additional parameter in the beacon frame. Thus, RAT is a promising candidate for experimental work as well.

