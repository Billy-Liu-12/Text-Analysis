<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">Proceedup of  the Thvd Internaaonal Conference on Machine Laming and Cybernetics, Sbanghm, 26-29 August 2004

Abstract: Although mining based on FP-Tree achieves high performance and eftiaency, it still suffers from creating wnditional FP-Tree separately and recursively d&amp;g the mining process. Moreover, update mining is very time-consuming. In this paper, we propose a new method that designs a new structure d e d  Trans-Tree, which stores all of the information in a highly wmpaft form. The algorithm mines frequent patterns are based on Trans-Tree. Updating with new data needs one scan of the new data only. Thus, it improves performance greatly.

Keywords: Frequent Patterns; FP-Tree; Trans-Tree 1. Introduction Association rule mining(-) has become one of the core data mining tasks and has attracted tremendous interest among researchers and practitioners. ARM is undirected or unsupervised data mining over variable-length data, and it produces clear, understandable results. An association rule is an implication of the form X=&gt;Y, where X and Y are sets of items and XnY=Q. The support s of such a rule is that s l  of transactions in the database contain X u  Y, the confidence c is that c% of transactions in the database contains X also contains Y at the meantime. A rule can be considered interesting if it satifies the minimum support threshold and minimum confidence threshold, which can be set by domain experts.

Most of the previous researches with regard to association mining was based on Apriori-like alg~rithms['.~,''. They can he decomposed into twosteps: 1. Find all frequent itemsets that hold transaction support above the minimum support thnvshold.

2. Generate the desired rules from the frequent itemsets if they also satisfy the minimum confdence threshold.

Apriori-like algorithms iteratively obtain candidate itemsets of size (k+l) from frequent itemsets of size k.

Each iteration requires a scan of the original database. It is costly and inefficient to repeatedly scan the datahase and check a large set of candidate for their occurrence frequencies. Additionally, when new data come in, we have to run the entire algorithms again to update the rules.

There are various methods to improve Apriori performance. While these measures improve the situation, there are still many problems. Recently, an FP-tree based frequent pattems mining141 method developed b Han achieved high efficiency, compared with Apriori" and TreeProjection'sl algorithms. It avoids iterative candidate generations. But there are some prohlems: 1 .Creating conditional FP-Tree separately and recursively during the mining process.

2. Updating of FP-tree requires two scans of the new data and existing data.

In this paper, we design a new structure called Trans-Tree, which stores all of the information in a highly compact form and updates easily. Thus, mining requires only one scan of the database and updating Trans-Tree  needs one scan of the new data without scanning the existing data.

The rest of paper are organized as follows. In section 2, we introduce a new structure, called Trans-Tree, and discuss how to generate the Trans-Tree by only one database scan in section 3. An illustrative example is shown    database scan in section 3. An illustrative example is shown in section 4. In section 5 ,  we present our experimental results. Finally, section 6 provides the conclusions.

2. Frequent Pattern and Trans-Tree The frequent pattern mining can he formally defined as follows. Let I={il, iz, ... , i,) be a set of items, and DB be a transaction database, where each transaction T is a set of items and T d .  An unique identifier, called its TID, is assigned with each transaction. A transaction T contains a pattem P, a set of items in I, if P c T .  The support of a pattem P is the number of transactions containing P in DB.

0-7803-8403-~04/$20.00 WOO4 IEEE 26-29 August 2004 We can say that P is a frequent pattern if P?s support is no less than a predefined minimum support threshold 6.

The FP-tree is a prefix-tree structure storing frequent items for the transaction database, the frequent items in eacb path are sorted in their frequency descending order.

The FP-tree based method has to scan the database twice to get an FP-trei, whose central idea is to get the list 6 of item frequencies in the fwst time and then construct the FP-tree in the second time according to L. The Trans-Tree, unlike FP-tree, which contains the frequent items only, contains all items that appear in the original database. Therefore, Trans-Tree is also a prefix-tree structure storing all items of transactions that are sorted in numerical order and record the actual support of every-item. Thus, the constriction method of Trans-Tree is similar with that oTFP-tree.

3. The Proposed Algorithm , .

The goal of this paper is deal with the following problems: mini.mize scans of the database and data is easy to use and update. Thus, we design a new data structure- Trans-Tree that stores all of the essential information of the database that is compact.. So, a new mining algorithm based on Trans-Tree can be divided into the following three steps: 1. Construct Trans-Tree and obtain the item frequency Z..Construct Frequent-Trans-Tree from the Trans-Tree 3.Call FIT-Mine algorithm to mining directly on Frequent-Trans-Tree Thus, mining requires only one scan of the database.

Since we can generate the Trans-Tree by scanning the database only once, we are also able to update the Trans-Tree by one scan of new data without the need for two scans of the existing database and the second?scan for the new data. Thus, we can first insert the new transactions into the Trans-Tree according to the item frequency list F and meanwhile update the list. Then .a new Trans-Tree can be restructured according to the updated item frequency list.

Thus, updating algorithm needs one scan of the new data only, and the existing data do not need to be re-scanned.

3.1. lkans-lkee Construction Input: A transaction database DE Output: Trans-Tree and the item frequency list F Description:.

list F  1.

2.

3.

Create the root of a Trans-Tree: T and label it as ?null?.

Initial the set of items F and their supports.

Scan the transaction database DE once, for each transaction T in DB do the following: a. Sort T into [t I Ti] in numerical order. Here in each sorted transaction T= [t I Til. t is the fmt item of the transaction and Ti1 is the    fmt item of the transaction and Ti1 is the remaining items in the transaction.

Updating F with items in [t I Ti] b. Insert([t I Til, T) c.

Function Insert([t I Ti], T) for each of T?s child N if Nitem-name=t.item-name then N.count++; else (Create a new node N ; ?.item-namet.item-name; N?.count= 1 ; T.childlist= N ; ] if Ti is not empty then Insert(Ti, T) Begin - end for End 3.2. Frequent-?Tkans-lh?e Construction , Input: Trans-Tree and minimum support threshold Output: Frequent-Trans-Tree Description: 1. Create the mot of Frequent-Trans-Tree: T and label it as ??at??.

2. For each path T in Trans-Tree do the following: a. Remove infrequent items.

b. Insert([t I Ti], T) / 3.3. FIT-Mine Algorithm Algorithm FIT-Mine (a) Input: a is the prefix path of a-prefix tree; Output: Frequent Patterns; Description: 1: 2 s ibthe right sibling of whose item equal to submot.item; 3: merge(submor, sib); , 4 endfor 5 for all children of a do 6 ifai.count 2 minsup then 7: add a.% and a.&amp;.count to the set of frequent pattern; 8: FlT-Mine (a.%); 9: endif 1 0  end for for all children submot of a do 26-29 August 2004 4. AnExample Let the transaction database DB be Table 1 and minsup =2. After scanning all the transactions, we can obrain Trans-Tree. Then, the Frequent-Trans-Tree constructed from Trans-Tree is shown in Figure 1. Finally, all frequent pattems in DE can be mined, which is shown in Table 2.

Table 1 A Transaction Database root .

C : 2 d : l - : I Fig.l frequent-prefix- tree of table 1 Database 5. Experimental Results In this section, we evaluate our mining algorithm FTT-Mine and updating algorithm FIT-UMine and compare them with the FP-based approach. All experiments ..,- .J~ perfamed on 1GHz Pentium 111 PC with 256MB of memory, running Windows 2000 Professional. A real database(mushroom database) hap://www.ics.uci.edu/-mlea"mary.html were    hap://www.ics.uci.edu/-mlea"mary.html were used as input in the experiments. The characteristics of mushroom database include: 8124 transactions and 23 items. Each method comsponding to the support thresholds 0.51, 1W.21, 31.4% and 5%. Their runtimes are shown in Figure 2. As shown, our mining algorithm is faster than FP-Growth algorithm because of scanning the database only once.

- miniup (X) --t FTT-Mine -P-Growth Fig. 2 comparision of mining Figure 3 shows the runtimes of each method when update happens to a database, which originally contains 4OOO transactions. The number of transactions in each update is 500,1000,2000,3000 and 4OOO respectively and the support threshold is 2%. Because updating Trans-Tree needs one'scan of the new data only without scanning the existing data, the runtime of OUT updating algorithm is greatly decreased, which is shown in Figure 3.

4000 3000 2000 1000 500 New data(") t FTT-Mine --C FP-Growth Fig.3 comparision of updating 6. Conclusions We have proposed a new data structure, Trans-Tree, and discussed how to get the Trans-Tree by one database scan and how to get the corresponding Frequent-Trans-Tree from the Trans-Tree. The efficiency of mining and updating based on Frequent-Trans-Tree is higher than those of based on FP-tree.

Acknowledgements This work has been supported by the National Natural Science Foundation of China under Grant No. 60273075.

