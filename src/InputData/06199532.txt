An Improved Association Rule Algorithm  Based on Trie and Inverted Index

Abstract?Because of the rapid growth in worldwide information, efficiency of association rules mining has been concerned for several years. In this paper, based on the original Apriori algorithm, an improved algorithm TIIA(Trie-Inverted-Index-Apriori) is proposed. TIIA adopts trie and inverted index structure to store the whole transactions with one scanning of transactions, generate frequent itemsets rapidly and also directly find frequent k itemsets.Experiments demonstrate that TIIA outperforms the original Apriori.

Keywords: association rule; frequent itemset ;trie;inverted index;apriori algorithm;

I. INTRODUCTION Within the area of data mining, the problem of  deriving associations from data has recently received a great deal of attention. The problem was first formulated by Agrawal et al[1] and is often referred to as the ?market basket? problem. In this problem we are given a set of items and a large collection of transactions which are subsets of these items. The task is to find relationships between the presense of various items within those baskets.

There are numerous applications of data mining which fit into this framework. The canonical example from which the problem gets its name is a supermarket.

The items are products and the baskets are customer purchases at the check out. Determining what products customers are likely to buy together can be very useful for planning and marketing.

Association rule and frequent itemset mining became a widely researched area, and hence, faster and faster algorithms have been presented[2-7].Many of them are APRIORI-based algorithms. Those who adopted APRIORI as a basic search strategy tended to adopt the whole set of procedures and data structures as well.

In this paper, we using trie[13] structure and inverted index[8-12] to improve the performance of the APRIORI.

The trie stores the whole transactions with one time scanning of transactions, while constructing trie, also constructing inverted index. With inverted index ,we can fastly access to the trie node in a short time, no need to scanning the whole trie. The main improvement of this paper is that this algorithm can directly find frequent k itemsets.



II. PROBLEM PRESENTATION A database in which an association rule is to be found  is viewed as set of tuples, where each tuple contain a set of items. Each item represents an item purchased while each tuple is the list of items purchased at one time. The support(s) of an item is the percentage of transactions in which that item occurs. Given a set of items I={I1,I2,?.Im} and a database transactions D={t1,t2??tn} where ti={Ii1,Ii2?.Iik} and Iij I , an association rule is an implication of the form XXX Y where X, YYYY I are sets of items called itemsets and  X Y = .The confidence or strength ( ) for an association rule XXX Y is the ratio of the number of transactions that contain X Y to the number of transactions that contain X.

The association rule problem is to identify all association rules with a minimum support and confidence.

The efficiency of an association rule algorithms usually discussed with respect to the number of scans of the database that are required and the maximum number of itemsets that must be counted.

The most common approach to find association rules is to break up the problem into 2 parts.

1. Find Large Itemsets.

2. Generate rule from the frequent Itemsets.

A Large (Frequent) Itemset is an Itemset whose number of occurance is above the threshold (s).

It is easy to find association rules while frequent itemset is determined, hence in this paper only concern with finding frequent itemset TIIA provides fast algorithms to find association rules.



III. APRIORI ALGORITHM The Apriori Algorithm is the most well known  association rule algorithm and it is used in most commercial products. It uses largest itemset property.

?Any subset of a large itemset must be large? The basic idea of Apriori algorithm is to generate  item sets of a particular size and then scan the database to count these to see if they are large. Only those candidates that are large are used to generate candidates for the next scan. Li is used to generate next Ci+1. L represent Large Itemset. C represents candidate items. All singleton itemsets are used as candidates in the first pass. The set of large item sets of the previous pass,Li-1 is joined with itself to determine the candidates. Individual itemsets must have all but one item in common in order to be  December 16-18, Changchun, China     combined.

In the rest of the paper,we make the assumption that  the itemset is ordered,and transactions are stored as sorted itemsets.



IV. TRIE-INVER_INDEX-APRIORI(TIIA) ALGORITHM  A. Trie The data structure trie was originally introduced to  store and efficiently retrieve words of a dictionary.A trie is a rooted,directed tree like a hash-tree.The root is defined to be at depth 0,and a node at depth j can point to nodes at depth j+1.Each node labeled with a letter.There is a flag which represents an end of word.If node ni points to node nj,then we call ni is the parent of nj,and nj is a child node of ni.A trie that stores the words "A", "to", "tea", "ted", "ten", "i", "in", and "inn" can be seen in Figure 1.

Figure 1 example of trie To fit TIIA algorithm,each node in Trie need extra  structure.Firstly,each node has a variable sp holds that item Ii at depth j?s support support(Iij).Sencondly,each node holds a variable depth that represents the node at depth d.Thirdly,there is k represents the current node already generated frequent k items.And lastly,holds an array which stores routine that from root to current node.

B. Inverted Index The inverted index (sometimes called inverted file) is  the data structure of choice for full-text indexing in search engines. Algorithms for building inverted indexes are widely published.In this paper,the inverted index structure like in figure 2.

Figure 2 inverted index example The first node represents Ii,holds total support of  Ii,from second node,each node has depth k,and support at depthk support(Iik),these nodes are sorted by descending order by depth,each node holds a pointer that point to the node from trie.If at same depth k,there has several nodes,they must be regarded as different node,because of this represents these nodes are from different route.

C. Building trie Find frequent k itemsets,to achieve this goal,several  procedures are working together. Constructing trie and inverted index,finding frequent k itemsets,removing useless nodes from inverted index.

Procedure construct_trie Init(root) Init(Invert_index[] list)  for each ti D{ for item {Ii1,Ii2?.Iik} do begin{  if(first_item) now=insert_into_trie(root, item)  else now=insert_into_trie(now, item) } } Procedure insert_into_trie (root,item) {  if (root.next[item] is null){ Create node root.next[item]  } root=root.next[item] root.support++ update_inverted_index return root }  D. Finding frequent k items Finding frequent 1 items is simple,we just scanning the  first nodes from inverted index,If itemi.support>=minsupport then put itemi to frequent 1 candidate set.To k>1, we scanning inverted index from bigger items to small items.Itemi I and ItemI.depth>=k and itemi.k<k then find out all nodes in this route,mark up each node?s k value as k that represents this node already generated frequent k items.Then remove items that not exists in frequent k-1 candidate set from this route. After that we generate all possible k combinations from remain items,put these k combinations to a hash table,if combinationm exists in hash table,add new support to hash table, each k combination?s support is the last item?s support.

After all nodes in inverted index scanned,checkout combinations which support>=minsupport, and then put these items to frequent k candidate set.

This procedure will discussed in detail in section 5.

From this structure we can easily find out TIIA algorithm can directly find frequent k items,no need to find out  frequent k-1 candidate set,a little modification can adjust new algorithm, remove step that ?Then remove items that  not exists in frequent k-1 candidate set from this route?,the new algorithm will effectively working on  directly find the frequent k items.



V. AN EXAMPLE This section have a look at what is going on in detail.Table 1 shows examing data that contains 10 transactions and 6 items.In this example,we define minsupport as 4.

table1 transaction data T_id       itemset  1        i1,i2,i4,i5,i6 2        i1,i3 3        i1,i3,i5 i6 4        i1,i2,i4,i5 5        i2,i3 6        i2,i3 7        i1,i3,i6 8        i1,i2,i3 9        i1,i2,i4 10       i2,i3  A. Build trie and inverted index Figure 3 shows trie state and inverted index state after  TIIA algorithm scanned transaction1 contains items(i1,i2,i4,i5,i6).

Figure 3 trie state and inveted index state  Figure 4 shows trie?s state and inverted index?s state when finished scanning trasaction data.

Figure 4 final trie and inverted index  B. Finding frequent k items To find frequent 1 items,scanning the first nodes from  inverted index,we found item 1,2,3 that support 4,add 1,2,3 to candidate set.

Next,we just need to scan item3 and item2.Because item1 itself cannot generate frequent 2 items.Second node from item3 ,its depth is 3,the route is 1,2,3,all items are frequent 1 candidate. Then generate 2 combinations <1 2>,<1 3>,<2 3> with support 4,1,1.then third node,depth 2,route is 1,3,so the only 2 combination is <1,3>,support is 3.We found <1,3> already exists in hash table, so modify the combination <1,3>?s support as 4.Last node from item3,route 2,3,so modify the  support as 4.Now we has 3 combinations <1,2>,<1,3>,<2,3> with support 4,4 and 4.All these are frequent 3 itemset.Put 1,2,3 to frequent 2 candidate set.

Then we are finding frequent 3 itemsets,only item3 is available.Easy to find out that only the second node from item3 from inverted index should be tested.The only 3 combination from the route 1,2,3 is <1,2,3> with support 1.Support 1<min support 4,so algorithm ended.

Now,here take a look at directly find 4 frequent items with min support 2.

We scanning from item6 to item4,other items skipped.From second node from item6,the route is 1,2,4,5,6,possible 4 combinations are <1,2,4,5>,<1,2,4,6><1,4,5,6>,with support 2,1,1.Third node from item6,4 combination is <1,3,5,6> with support 1.Item5 already processed,Item4?s depth is not enough.Then from the hash table,we found the only frequent 4 itemset <1,2,4,5> with support 4.See,no need to calculate frequent k-1 itemsets.



VI. EXPERIMENTAL RESULTS In this paper,we have used java platform examined the  original Apriori algorithm that read transaction data with java.io.DataInputStream, same algorithm with java.io.BuufferedInputStream,and TIIA algorithm with java.io.DataInputStream.We compare TIIA with Apriori on three aspects,reading transaction times ,ie I/O times,memory usage,and executing time.

We used a personal computer which has Intel i5 M460 2.53Ghz processor,4 Gbytes physical memory,500 Gbytes/5400 revolutions per minute hard drive disk and windows 7 premium operating system on it.And JDK(java developer toolkit) version is 1.6.0_20,JVM(java virtual machine) running memory was set to 512Mbytes.

A. I/O comparison Apriori algorithm need a input for each calculating of  frequent k itemsets,as min support decreasing,I/O time ascending.Compare to Apriori,TIIA algorithm needs only one I/O for construct the trie and inverted index.There is nothing to do with min support.This is one of main improvement.The other main improvement is TIIA algorithm can directly find out frequent k itemsets.

B. Memory usage Apriori algorithm?s memory is mainly used for storing  frequent k-1 candidate set.While TIIA algorithm is not.TIIA algorithm tries to storing the whole transaction to the trie,so TIIA algorithm at most needs O(2(2m-1)) memory,which m represents item size.But practices shows,we can hardly find a transaction set that meets the worst situation.

C. Executing time First we make a theoretical analysis.TIIA algorithm at  best situation,ie. all the transactions are the same,find frequent k itemsets need O( ),at worst situation,it need O( ),s represents router size,2m-1 at most for route size,and m represents router?s itemsize.In practice,always better than that too.

To make a compare to apriori algorithm,we examined several testcases.Figure 5-7 shows the results.

Figure 5 t_size 40,items=110,minsupport=10%  Figure 6 t_size 20000,items=20,minsupport=20%  Figure 7 t_size 20000,items=20,minsupport=2%  Figure 8 t_size 100000,items=8,minsupport=5%

VII. CONCLUSION In this paper,we proposed an algorithm using trie and  inverted index for solving association rule mining.The result proves that TIIA works very well with small item sizes,also in low supportance.But meet large item sizes,TIIA algorithm seems not doing so good.So we conclude that TIIA should be used for large-scale transactions with lower item size.

Our next research will mainly about make break through in item size threshold,to sure this algorithm can handle large-scale transactions,also large-scale item size.

