Massive Stream Data Processing to Attain Anomaly  Intrusion Prevention

Abstract - Most of the contemporary intrusion detection systems need the ability to process massive data streams to achieve  anomaly prevention. It is a hard issue since the streaming data have some tough characteristics, such as unknown or unbound size, possibly a variable arrival rate, lack of ability to backtrack over previously arrived transactions, and a lack of system control  over the order in which the data arrive. This paper will find a network model which is more suitable for high speed processing of massive data streams in real-time from various data sources by considering the frequency property of events. An Intrusion prevention system have been built with online mining of frequent item sets over a stream with Time-sensitive sliding window, which is one of the most important technique in stream data mining with broad applications. This approach will be used to set the rules for Backtracking to determine the intrusion characteristics then to implement the "Deny All except allowed" policy rules for prevention. Combination of stream processing and backtracking  is used to achieve this so-called Intrusion Prevention, so that in addition to detecting the existence of intrusion we do deny of intrusion as prevention.

Keywords - Intrusion Prevention, Data Stream, Frequent pattern mining

I. INTRODUCTION  The recent advances in hardware technology have eased the ability to collect data continuously. Simple transactions of everyday life such as shell commands, audit events, keystroke records and system calls lead to automated data storage.

Similarly, emergence of information technology has lead to large flows of data across IP networks too. In many cases, these large volumes of data are mined to fetch interesting and important information in a wide variety of applications. The frequency of computer intrusions by intruders has been increasing rapidly for several years. They have more effective delivery mechanisms, are more complex, hit more targets, and do more damage. Additionally, now attacks are more developed and very rapidly taking the advantage of vulnerabilities in most common communication system and their services. It may be enviable to perform in-network processing of data stream with limited processing and memory [11]. This paper demonstrates about stream data mining technique can be used for an Anomaly Intrusion Prevention System (IPS) which aims to avoid a wide range of security violations ranging from attempted break-ins by outsiders to system penetrations and maltreatment done by insiders [3].

Intrusion prevention is a vital system in the defence-in-depth network security framework. Currently we have detection  M. Suresh  Research Scholar, Anna University of Technology - Coimbatore  Tamil Nadu, India sureshmadhesan@gmail.com  models which lack the ability to prevent the intrusion through processing massive data streams. In general, the techniques for intrusion prevention fall into two major categories depending upon the modelling methods used: misuse detection and anomaly detection. Anomaly detection has been an active research area for more than a decade since it was originally proposed by Denning [1]. However, it may also cause a considerable number of false alarms because the normal behaviour varies generally and obtaining complete descriptions of normal behaviour is very much difficult. Still, many current anomaly detection models make the implicit assumption that data is relatively low dimensional, or only a small amount of data is used. This oversimplification limits the effectiveness of these models [2]. In recent years, IPS has been widely implemented to prevent from suspicious threat as Network? borne attacks are currently major threats to information security. Unlike traditional Intrusion Detection System (IDS), IPS has additional features to secure computer network system.

This identifies and distinguishes suspicious threats and trigger alarm, event notification, through responsible response. To achieve intrusion prevention stream mining techniques can be used, where mining frequent itemsets from data streams is very hard because of computational complication and the need for real-time response [14]. And as one can only keep a limited size window as a single window or single item-set, it is complicate to mine and update frequent patterns in a dynamic, data stream environment. Some of the challenges we face while mining the data stream are each data element should be examined at least once, restricted memory usage, minimal time, immediate response and more efficient [12].

A. Model of Intrusion  ? Preparation phase: Before the start of an intrusion attacking, hundreds of zombie computers and proxies had to be equipped well in advance. In addition, the vulnerability of the target networking system must be examined.

? Attacking phase: In this phase we consider a vast amount of data flow will be besieged on the target host or networking server and the user IP that used for attacking must be spoofed so that to know about the source of a network attacking might be very difficult.

? Covert phase: After attacking, most of the hackers will try to bury their attacking track and cleaning or omit the attacking records.



II. EXISTING METHODS  There are many existing research work on intrusion detection such as Wu et al. [6] proposed Support Vector Machines (SVM) for intrusion detection based on system call data to model program behavior and categorize each process as normal or abnormal when it terminated. Cho [7] applied soft computing techniques for anomaly detection. Z. Cai et al. [8] employed Rough Set Theory (RST) to leam and model normal behavior with improved detection accuracy while using much smaller size of training data sets. L. Feng, et al.[9] is based on plan recognition for predicting intrusion intentions by observing system calls and W. Wang et al. [10] is based on Non-negative Matrix Factorization (NMF) to profile program and user behavior. And also in data stream mining many previous studies like Chang, J., Lee, W [13, 15] contributed to the efficient mining of frequent item sets over data streams.

Barzan et al. [14] propose a frequent item set mining method for sliding windows. Thus we chose an effective algorithm from data stream mining which will hybrid with the Intrusion detection techniques

III. STRA TEGY TO PREVENT INTRUSION  This paper proposes a hybrid method of combining both data stream mining algorithm techniques and intrusion detection techniques to achieve intrusion prevention. This new method will be used to achieve intrusion prevention and information security can be achieved by an improved standard. To protect the information system from attacking, some detection mechanism are proposed such as based on the analysis of intruder activity and attack approaches, content classification of header, statistical and spectral analysis, and etc. Moreover, some institute might adopt central management with associated distributed defence systems to detect and prevent from intrusion. The goal of anti-intrusion is to protect the information and networking system such as mail servers, database servers, and HTTP servers from paralyzed and ensure the decrease of depletion of bandwidth and decrease the consumption of resource of servers. The experimental architecture is established based on the rationale of centralized management. All the recorded information that collected by system will be analysed by the expert system for integrated analysis. After then, all of the timing based information will be examined by a Time-sensitive Stream Mined Access to Network as shown in Figure 1.

Figure I. Illustration of Network topology and TISMAN Architecture  TIme-sensitive Stream Mined Access to Network (TISMAN) is a technique hidden inside the intrusion prevention architecture which is implicitly represented in the system. As a physical procedure, all of the factors of the recent pre-state that will control the output result in current state will be taken as input streams. The reason that the TISMAN has been adopted for early alert to against intrusion in the paper is because an initiation of intrusion to be performed must trigger a lot of zombies or proxies that have been setting up in advanced. Besides, before initiate a real attacking, some investigation must be performed. Therefore, all of the related features that collected in different timing must be integrated for associated analysis. Instead of allowing all traffic then looking for potential attack signatures, we propose "Deny All except allower/' strategy. In the following, a multilayer defence mechanism for intrusion has been proposed as the following. In which some modules are included such as:  ?  ?  ?  ?  Preliminary defence Module: which can be performed by rule based or IP based and deployed on each nodes or critical nodes and to monitor all of the possible anomaly activity and traffic packets.

Access Control Module: establish deny list and allow list for filtering.

Stream Processing Module: to analyse the stream data and result the frequency of the packets Authority module: in the module, the primary responsibility is to offer the detecting results of all possible networks attacking packet information, which can be used to send for back tracking [4] or denial of access.

A. Proposal for Intrusion Prevention System  The procedure for packet stream process is shown in Figure 2. In which, as the system that dispatched on the DMZ which is the first layer of the network face preliminary intrusion prevention, those collected information will be transferred to expert system in order to take properly actions to against the attacking. Within the Intranet, second layer of TISMAN is deployed to collect and analyse the stream with those penetrated intrusion attacking or network attacking which is initiated from insiders. In this proposed architecture, the second layer will have the protection mechanism layer that located inside the Intranet will be enhanced. Stream processing can be done using a novel approach called TISMAN to address the issues as described earlier which have a sliding-window model, as a given window size W, only the latest W transactions are utilized for mining. As a transaction arrives, the oldest transaction in the sliding window is expired.

Therefore, under this model, the methods for finding the expired transaction and for discounting the support counts of the item-sets involved are required. First of all, we develop a data structure named the discounting table (DT) to retain the frequent item-sets with their support counts in the individual basic blocks of the current Time sensitive sliding window (TS).

Networking Packet  Figure 2. Stream data analysis and processing procedure  Moreover, a data structure named the Potentially Frequent? itemset Pool (PFP) is used to keep the frequent item-sets in TSi and the frequent ones in Bi. Apart from mining and discounting methods, the further design of self-adjusting discounting table (SDT) that can automatically adjust its size when keeping the discounting information. Given a limitation on the size of SDT, the design devises a strategy to merge the information of more than one itemset kept in SDT. The main idea is to reduce the difference between the original support count of each itemset and its estimated count after merging. The most important finding is that the two guarantees described above still hold when SDT is deployed. The design includes the item sets that are frequent in Bi but not frequent in TSi-1 in PFP because they are possibly frequent in TSi.

I ThresholdArray I Input I DTMaintenance I Frequent Buffer Itemset (B0  I Itemset Discounting I Output  (M)  Figure 3. Data Stream Mining Architecture  Four parameters, the support threshold e, the basic unit of time period for each basic block P, the length of TS IWI, and the output mode M, are given before the system starts. As defined a data stream is divided into blocks with different numbers of transactions according to P. The buffer continuously consumes transactions and pours them block-by? block into our system [16]. After a basic block triggers these operations and goes through our system, it will be discarded directly. As the basic blocks may have different numbers of transactions, we dynamically compute the support count threshold for each basic bock Bi and store it into an entry in the threshold array (T A). The data stream technique which is mounted on network setup as shown in Figure 3, which will find the frequent item set stream data and these packet data are send for back tracking or for request denial based on the rule set in the system.

B. Performance evaluation  In this section, we will describe the experimental evaluation of the proposed TISMAN algorithms. All the programs are implemented using C# 2.0 and performed on a 2.60 GHz Core 2 Duo PC machine with 3072 MB memory running on Windows 7. For testing frequent itemset mining over sliding windows, synthetic data streams are generated by using IBM synthetic data generator proposed by Agrawal and Sri kant [5].

Synthetic data streams, denoted by T3.14.DI50K, T5.14.D150K and T7.14.D150K are generated, where T, I and D mean the average transaction length, the average length of the maximal frequent itemset, and the total number of transactions, respectively. To simulate data streams, the transactions in both synthetic data are looked up in sequence and feed them in the buffer. The parameter setting used in the experiments is shown in Table I.

TABLE I. PARAMETERS USED IN THE EXPERIMENTS  Param Description #1 #2 #3 D Number of transactions in 150K 150K 150K  data streams N Number of distinct items lK lK lK I Average length of maximal 4 4 4  frequent itemsets T Average length of transactions 3 5 7 s Minimum support thresholds 0.1% 0.1% 0.1%  C. Time Complexity and Space Complexity  First, we calculate the execution time of our approach assuming the selective adjustment for T=3-7. As the results show similar tendency, we show in the Figure 5 with T=7. The 4 curves show the execution time in 3 parts and the total, respectively. We observe that the mining part takes over most of the total execution time. That is, Insertion of new itemset is the bottleneck in our procedure, while the rest of the operations are fast. Second the implementation time of DT maintenance part is near to zero in most of the cases. It verifies the practicability of the SDT for mining data streams and finally even though the execution time of the mining part is sensitive to T, the total execution time increases proportion to growth of T. It shows the fast response time by our approach achieved.

u  ? 30 ,-----------------------------------, <U  E 1=  g '" u <U ><  u..l   10 r-  0 ./, ---  1 2 3 4 5 6 7 8 9  Block Number  I-+-PFP _DT Mining ---*"-Total l Figure 4. Execution time for T = 7  ...

Figure 6 shows the memory usage under various values of T.

The maximum peak of memory usage during the experimentation is not more than 380KB. It proves the feasibility of the SOT, especially for the streaming environment with only a small memory. In all the figures, the curves are near smooth when the data stream flows. It implies that our approach adapts itself very well no matter how long a data stream is.

? 300 -......

t 200 E <l.l 100 ?   2 3 4 S 6 7 8 9 10 NumberofWindows  I-+--T314DISOK -TSI4DISOK T714DISOK I Figure 5. Memory usage for T = 3, 5, 7

IV. CONCLUSION  In this paper, we present an effective anomaly intrusion prevention model based on time-sensitive data stream mining model. The model is more suitable for high speed processing of massive data streams in real-time than use of transition property or correlation property. All of the attacking information will be collected and transferred to the authority module for analysis. As those nodes dispatched on the DMZ or between the first and second layer of firewall face some attacking similar as the pattern of intrusion, the authority module which dispatched behind the second firewall will take some suitable actions and initiate the defence strategies to protect the information system. An attacker usually uses one or more programs and each program produces one or more processes. If one process is identified as abnormal, the program containing the process is then classified as abnormal and an intrusion alarm is reported. In addition, to evade these kind situations, the sliding window size will be specified as maximum length in each process, for example, transaction length of IS0K. There are also disadvantages for the models based on the frequency the system will produce the result slowly which will leads to annoy end user.



V. FUTURE WORK  We see several avenues for future work and describe few that we are actively pursuing. The current attack type we use a simple one which is for specific program behaviour; multiple point attack and multi point intrusion prevention should be handled with this same architecture which will produce more and new result which we can compare and know the pros and cons of the architecture used. The challenge then is to derive a new malicious activity signature from the specific activity  automatically. The system would then use this new signature to monitor a previously unknown vulnerability class. Furthermore the Internet routing mechanisms makes it really hard to trace back to the source of attacks. There is no effective and efficient method to deal with this issue so far, which we need new approach that should be fundamentally different from commonly used packet marking techniques. The future research should find solution with more accurate trace back with limited time for a large-scale attack network with thousands of zombies.

