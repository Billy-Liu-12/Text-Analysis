MINING MAXIMAL FREQUENT ITEMSETS FOR LARGE SCALE  TRANSACTION DATABASES

Abstract: We p m n t  a graph-based algorithm, MFIminer, for  mining maximal f q u e n t  itemsets (MFI) from transaction databases. Our method is especially effident in large transaction databases hecause the performance is not sensitive to the quantity of transactions. MFIminer adopts a directed association graph to guide the mining task efficiently. It uses the technique of depth-first traversal and complete graph checking to achieve reduction of seamhing time. Perfonnance study shows that MFMner outperfom MinMax, an algorithm to find MFI, in both speed and scalability property.

Keywords:  association des maximal frequent itemset; frequent itemset; data mining;  1. Introduction  Mining frequent itemsets (FI) or patterns plays a fundamental and essential d e  in mining association rules, which is widely applied in many fields such as consumer market-basket analysis and infemng rules from gene expression data [I ,  21. Apriori and support-confidence framework, which is the basic of many algorithms generated recently for mining association rules, were originally proposed by Agrawal et al. [3,4].

It was well known that frequent itemsets mining often results in a very large quantity of sets, including subsets as well as supersets, which lead to a remarkable reduction of both efficiency and effectiveness. Therefore people generated concepts of Frequent Closed Itemsets (FCI) and Maximal Frequent Itemsets (MFI), and found the following relationship holds: MFZ E FCZ FZ [lo]. Therefore, many people focus on FCI mining [5,  6, 71 or MFI [8, 91 mining altemativly.

Recently, due to the strong demand on efficiency of practical applications, many itemset-mining algorithms are proposed. MinMax [SI generates MFI based on depth-first traversal and iterative. Furthermore, it combines a vertical  tidset representation of the database with effective pruning mechanisms. GFCG [7] mines FCI by constructing an association graph to represent the frequent relationship between items and employing a recursion to achieve depth-first travel of the graph.

In this paper we present a novel MFI mining algorithm, MFlminer, which is based on an association graph with different construction from GFCG [7]. It searches the graph in depth-first style. Performance evaluation proves that it has a remarkable efficiency in very large transaction databases.

The organization of the paper is as follows. The conceptual ideas of mining maximal frequent itemsets and the corresponding graphs are discussed in Section 2. An analysis of the components of our algorithm, MFIminer, is presented in Section 3. Section 4 reports the performance comparison of our method with MinMax [SI as well as the scalability study. In Section 5, we conclude our work and discuss some future research directions.

2. Preliminaries  In this section, we describe related concepts of maximal frequent itemsets and graph.

Z = [ i, ,i, , . . . , i, 1 is a complete set of distinct items, and a transaction database D is composed of a set of transactions. Each transaction T is a set of items such that T C I , and is associated with a unique aansaction identity rid . An itemset is a non-empty set of some items in Z , and k - itemset is an itemset containing k items. A transaction T is said to contain an itemset X if X c T .

The support of itemset X is defmed as the ratio of transactions containing X in T .

~n itemset X is afrequent itemset (?3) if its support, donated as sup(X) , holds sup(x) 2 minsup, where  0-7803-6403-2/04/$20.00 WOO4 IEEE  mailto:xiaranxr@tom.com mailto:liujuan@whu,edu.cn    min sup is a given minimum support threshold. We can also say that itemset x is frequent if x is a FI. A FI X is a closed one, frequent closed itemset (FCI), if there exist no itemset x? such that x?3 x and every transaction containing X also contains x? . A FI X is a maximal one, maximal jkquenr iternset (MFI), if no superset of it is frequent.

For example, let I =(1,2,3,4,5) and D is described as Table 1. Let the minimum support threshold be 1, the set of all MFI is(1,2,3,4,5); the set of all FCI  set of all FI consists of the set (1,2,3,4,5) and its all non-empty subsets, 25 - 1 = 31 subsets totally,  Table 1: A database of Transaction  is(  (1,2,3,4,5),(1,3),(1,3,5),(1,4,5),(2,4,5) 1 ; and the  Itemset  2 4 5 1 3 5  1 2 3 4 5 006 1 4 5  A graph is a pair G = (V,E) of sets, where .the elements of V are the vertices (or nodes, or points) of the graph G , and the elements of E are its edges. If edges of G are ordered pairs (a, b) , where a ,  b are inV , we call G a digraph, or directed graph. The vertex a is the initial vertex of the edge and b the terminal vertex.

Two vertices a ,  b of G are said to he adjacent, or neighbors, i f (a ,b)  , usually written a s a b ,  is an edge  of G . If all the vertices of G are painvise adjacent, then G is complete. Let G=(V,E) andG?=(V?,E?), if V ? C V  and E?G E holds, G i s  a subgraph o f G  , or G is a supergraph of G, written as G G  G . G is said to be a maximal complete graph if there is no supergraph of it is complete. .

According to each edge (vi, v ) of graph G , if there exists a value w(vi,vj) , usually written as wg for short, we say G is a weighted graph and this value is the weight of G .

In this paper, MFIminer algorithm generates an association graph, which is directed and weighted. In this graph, each vertex presents a unique item, and then every  edge and the weight on it indicate the relationship of the two items. We assume that items in each transaction are kept sorted in their lexicographic order. When item i and item j appear in the same transaction and i < j holds, a directed edge from item i to item j is constructed, adding 1 to wi , which is initialed to 0 before :the construction of graph. In an association graph, a subgraph G?= (V?,E?) presents a subset where items are exact vertices in the vertex se tv?  . Figure 1 shows an example of an association graph constructed from the transaction database in Table 1. To distinguish from the weight value, vertices (1,2,3,4,5) are denoted as (vl,v2,~3,V4,~5) separately.

. V I  v2 v5  1 -  v3 v4  Figure 1. The association graph  3. Algorithm Description  In this section, we present an analysis of different components of MFIminer.

?Every subset of a frequent itemset must be frequent? 141 lays an essential principle for mining frequent itemsets.

In the association graph, this principle could be described as ?a subset may be a MFl if its corresponding subgraph is a maximal complete graph?. Therefore, the problem of mining maximal frequent itemsets can be decomposed into two subproblems: 0 Construct an association graph according to the given  transaction database, and prune those edges having weights smaller than the minimum support from this  Generate all maximal complete graphs from pruned one to be the candidate of MFl and check them to see whether they are frequent.

graph.

3.1 The Construction of A d a t i o n  Graph  To draw an association graph of a given transaction database is to update the weight of edges for every transaction. Given a transactionT = [ i , , i 2 ; . . , i k } ,  we will add directed edges [imin I(m,n=1,2;..,k)und(m<n)) where i, points to in , simultaneously adding value 1 to w,,,,, corresponding to every edge i,in . Figure 2 demonstrates the process of creating a graph of transaction database in Table 1 step by step.

Practically, all the edges and their weights present the support of 2-itemsets each of which consists of two items joined by the edge. To narrow the search space, all edges having weights smaller than the minimum support should be moved out. Let minsup=3 , Figure 3 shows the pruned graph.

Different from MFIminer, MinMax [7] makes vertices present the item?s bit-vector which reveal appearance of items in some transactions by setting relevant bits in the bit-vector to value 1. However, generally, computers assign 16 bits to an integer variable and 32 bits to a long integer one, that is to say, a bit-vector can store at most 32 transactions? appearance information about a item. It is well known that thousands of transactions are included in  V I   bit-vector to normal array.

v i r  3 rk  v4  F i y r e  3. Pruned association grnph  MFIminer adopts the relatively simple graph structure to avoid the capability limitation and uses an adjacent linked list as the data storage structure to achieve efficient storage.

3.2 Searching for Maximal Complete Graph  If a new vertex is added to a complete grapbG and this new vertex is adjacent to every vertex of G , inferred from the concept of complete graph, the flew graph is also a complete one. MFTminer searches the pruned graph in  depth-first way, and every time it travels to a new vertex U ,  ? I  ? I   Y ,  ? I  Figure 2. The construction of graph most databases. If a series of bit-vectors together describe the whole appearance information for one item, every time the algorithm visits the item, the exact bit in an exact bit-vector should be located, which is not easy to control and is time expensive to estimate and locate. Therefore, large magnitudes of transaction will weak the superiority of  it will check whether the new graph including U is a complete one, If it is, the algorithm will add U to original  graph G ,  and then further to one, on the other hand, if it is not, the will not include the G? and go to another vertex, at the same time, all vertices  that must start from U to reach will never be visited in this      Parameter Avg. Length # Records  #Items  travel. According to this principle, if no more vertices could be added toG', algorithm will return G' as a  maximal complete graph. Table 2 describes the pseudocode of MFlsubminer, a function used to mine all  maximal frequent itemsets which starts from a node appointed. And then MFlminer can find all MFl in the  whole graph by using MFIsubminer to every node in this graph.

completecheck(m, currentMFl) will check whether the node m is adjacent to every node in currentMFI. That is to say, completecheck(m, currentMFl) will check whether the graph G', generated by including m into the original complete one G , is also complete. maxcheck(surrentMFI) will check whether currentMFI is a subset of any MFl in MFlset. frequenctcheck(currentMi3) will check whether the support of currentMFI higher than min sup .

T 1 O.14.D 1 OK T20.16.D 1 OK 10 20 10K 10K loo0 loo0  4. Performance Evaluation  In this section, we present a performance comparison of our method with MinMax [XI i s  well as the scalability study. All the experiments were performed on a 2.02GHz PC machine with 256 MB memory and Windows X P installed. All the programs are written in C language and compiled in MicrosoftNisual C+t 6.0. We test two methods on various datasets, including two synthetic datasets generated hy the standard procedure described in [4], and a real one, connect-4, used in [121. Table 3 describes the parameters of the synthetic test data sets.

Table 3: Parameter Settings (synthetic datasets)  Table 2. Pseudocode of MFlsubminer.

Overview : MFIsubmina mines the exact set of maximal frequent itemsets having Starting node c as the first item in the itemset.

Pseudocode : MFIsubminer(Starting node c, MHset){  for(m = c;. ; ) [ for(currentMI3 = Q ; ; ){  m.flag=l: set all nodes n.flag = 0 where n > m; if (m has no subsequence node or all nodes.flag == I )  break, if completecheck(m, currentMFTj == Ocontinue; Add m to currentMFI; Curk t  node m = the first nodea in m's subsequence having (a.flag == 0);  I if m has no subsequence nodes or all of them have been visited {  if m = c return MFIset: if (maxcheck(currentMFl) = 1 and frequentcbeck(currentMFI) == I )  add currentMFI to MFIset; m = backtrack to the node right before m in currentMF1,  I I  I  First, in order to evaluate the speed property, we run two programs on these three datasets by changing the minimum support threshold. Figure 4, 5, and 6 shows that,      due to construct an association graph and prune it with minimum support threshold, MFIminer has better performance than MinMzy in synthetic datasets as well as real one. And then, to, test the scale up property, we generate a series of synthetic datasets having the same average size of the transaction and average size of the maximal potentially large itemsets, 5 transactions and 2 items separately, hut different database size varying from 10K to 50K transactions. Figure 7 present that the performance of MFIminer is not sensitive to the quantity of transactions.

The good performance of MFIminer lays in the employment of a directed association graph which guides the mining task efficiently. Depth-first traversal makes the algorithm avoid generation of MFI level by level, promoting MFIminer to mine maximal frequent itemsets directly. And complete graph checking help MFIminer decrease the time wasted in mining little itemsets so that less nodes will be backtracked in the whole process.

Figure 4. Performance Study on T1O.M.DIOK  Figure 5. Performance Study on T20.16.DlOK  Figure 6. Performance Study on CoMect-4  Figure. 7. Scales up Property Study  5. Conclusion  Generally, mining complete set of frequent itemsets is not efficient due to the large number of itemsets including subsets and supersets. Mining Maximal Frequent Itemsets provides a practical alternative in large databases mining.

In this paper, we present MFIminer, an algorithm for mining Maximal Frequent Itemsets efficiently in large transaction databases. The performance evaluation on some synthetic data sets and a real data set proved that this method is better than MinMax in both speed and scales up property in large databases.

Currently MFIminer has been successfdly employed in mining association rules. In the future, other methods of data mining, like clustering and classification, will be combined into MFlminer to make it fit for more applications, including discovery of causality between microarrays and cancer.

