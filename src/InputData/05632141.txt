Privacy Preserving Classification in Two-Dimension Distributed Data

Abstract?Within the context of privacy preserving data min- ing, several solutions for privacy-preserving classification rules learning such as association rules mining have been proposed.

Each solution was provided for horizontally or vertically dis- tributed scenario.

The aim of this work is to study privacy-preserving classifi- cation rules learning in two-dimension distributed data, which is a generalisation of both horizontally and vertically distributed data. In this paper, we develop a cryptographic solution for classi- fication rules learning methods. The crucial step in the proposed solution is the privacy-preserving computation of frequencies of a tuple of values, which can ensure each participant?s privacy without loss of accuracy. We illustrate the applicability of the method by using it to build the privacy preserving protocol for association rules mining and ID3 decision tree learning.



I. INTRODUCTION  Data mining has emerged as a significant technology for gaining knowledge from vast quantities of data. Data mining allows us to analyse personal data or organisational data, such as customer records, criminal records, medical history, credit records, etc. However, analyzing such data creates threats to privacy and thus, might prevent data mining works. The challenge then is whether we can obtain results of mining while still preserve the data secrecy. Privacy preserving data mining (PPDM) techniques have been proposed to address this type of problem [2].

Generally, there are mainly two kinds of privacy preserv- ing data mining approaches: the perturbation-based approach and the cryptography-based approach. The methods based on perturbation (e.g., [1], [3], [23]) have been proved to be efficient, but have a tradeoff between privacy and accuracy.

The methods based on cryptography (e.g., [22], [20], [11]) can safely preserve privacy without loss of accuracy, but have high complexity and high communication cost. These privacy preserving data mining methods have been presented for various scenarios in which the general idea is to allow mining datasets distributed across multiple parties, without disclosing each party?s private data [2].

Classification is an important data mining technique that  has found applications in various areas, such as business, ed- ucation, and defense. Within the context of privacy preserving data mining, several privacy-preserving classification solutions have been proposed, e.g., [9], [10] and [24]. The goal of these works is for one of the participants to obtain the global classification model from the joint data set of all parties. The requirement of these works is that no information about private data, except in the classification model, will be disclosed.

Each privacy preserving classification solution can be ap- plied in a particular privacy preserving data mining scenario.

In [9], [10] and [24], they developed a privacy preserving classification protocols from the vertically distributed data based on a secure scalar product method. These privacy preserving protocols have been applied for learning naive Bayes classification, association rules and decision trees. In [12], the privacy preserving classification was addressed for horizontally distributed data by computing the secure sum of all local frequencies of participating parties. Much more complicated solutions have been proposed for the fully dis- tributed setting [5], [22]. These works aimed to allow a miner to learn classification rules from a data set distributed across a large number of users, while preserving privacy of each user?s private data.

Some randomization-based solutions proposed in [1], [3], [15], [16] can be used in various distributed data scenarios.

The basic idea of these solutions is that every user perturbs its data, before sending it to the miner. The miner then can reconstruct the original data to obtain the mining results with some bounded error. These solutions allow each user to operate independently, and the perturbed value of a data element does not depend on those of the other data elements, but only on its initial value. Although these solutions are high efficient, their use generally involves a tradeoff between privacy and accuracy, i.e., if we require more privacy, the miner loses more accuracy in the data mining results, and vice-versa.

In this paper, we study a privacy preserving classification rules learning in two-dimension distributed data, which is a generalization of both horizontally and vertically distributed   DOI 10.1109/KSE.2010.38     data. The generality of this model would be experimental proved to be better suited at practical settings in which data may be mostly, but not completely, vertically or horizontally distributed. The contributions of the work include: ? The development of a cryptographic approach to privacy  preserving classification learning in two-dimension dis- tributed data. We proposed a protocol for privacy preserv- ing frequency computation. The protocol ensures each parties?s privacy without loss of accuracy. In addition, it is efficient and based on centered management model.

? The applicability of the approach. To illustrate it we present the design and analysis of the privacy-preserving association rule mining and ID3 learning protocols.

The rest of this paper is organised as follows: Section 2 presents the preliminaries. In Section 3, we introduce a privacy preserving protocol for frequency mining. We also prove the correctness and privacy properties of the protocol and present experimental results of the efficiency. In Section 4, we use the protocol for frequency mining in Section 3 as a building block to design a privacy preserving protocols for association rule mining and ID3 learning. We also evaluate the efficiency of these protocols in Section 4. The last section concludes our research work in this paper.



II. PRELIMINARIES  A. Privacy preserving frequency mining problem  Definition 1. (Two-dimension distributed data.) A data set ?? includes ? normal attributes {?1, ..., ??} with ? records.

?? is distributed into ? ?? blocks, where 2 ? ? < ? and 2 ? ? < ? .

The parties ??? with ? = 1, ..., ? and ? = 1, ...,?.

Each party holds a block ???? containing information about certain attributes set ?(?) and certain records. The ???? are such that: ? ???? and ????? (? ?= ??) have the same attributes set ?(?) but (parts of) different records of ??;  ? ???? and ????? (? ?= ??) have disjoint attributes sets ?(?) and ?(?  ?) but contain information about the same records of ??;  We call ?? be a two-dimension distributed data set.

Privacy preserving frequency mining problem: In this section, we consider a scenario in which a party plays a role as a miner, which mines the frequency of a tuples of attribute values from ??. Where, ?? is called the joint data set of all parties. Our aim is to design the distributed protocols to obtain the frequency while preserving privacy of each party?s data. We consider privacy as protecting individual data records as well as protecting the frequency of the local tuples of each party.

Let ? ? {1, ...,?} and 1 ? ??? ? ?. In general case, we assume that the miner needs to compute the frequency of a data tuple (? ) that consists ??? parts indexed in ?. Each part ?? (? ? ?) consists of some values for some attributes ? ?(?). Note that each record ??? (? = 1, ..., ? ) is partitioned into ? parts; where each part ???? consists of values for the  attributes in set ?(?) and is owned by a party ???. We consider the map of each record ? to ??? binary numbers as follows.

For each ? ? ?  ??? =  { 1, if ?? ? ????; 0, otherwise.

Thus, ?? is mapped to a binary matrix (? ) that consists of ??? columns and ? rows. Note that if ? ? ??? , all elements of the ??? row of the binary matrix have 1 that means ?? =?  ??? ??? ? ??? = 0, where each ??? is owned by a ???.

Therefore, our purpose is to design a protocol that allows  the miner learning the number of records ? to satisfy ?? = 0 while the party does not have to disclose the values ???.

B. Encryption scheme selection  Our protocol requires each party to send private data to the miner. In order to preserve privacy of each party?s data, each party encrypts its data and then send the encrypted data to the miner. The miner executes the protocol to obtain the frequency from the encrypted data. We use the ElGamal cryptosystem [21], a public key cryptosystem, consists of three algorithms: the key generation algorithm, the encryption algorithm, and the decryption algorithm. In the ElGamal cryptosystem, the key generation algorithm generates the parameters (?, ?, ?, ?), where ? be a generator for a cyclic group ? of order ?. ? be a private key that is uniformly chosen from {0, 1, ..., ? ? 2}.

The public key is ? = ?? that are publicly known.

The encryption of message ? ? the clear-text space ? defined as:  ?(?, ?) = (??? mod ?, ?? mod ?) = (?(1), ?(2)) = ?  where ? is uniformly chosen from {0, 1, ..., ? ? 2}.

Decryption of the cipher-text ? with the private key ? can  be executed by computing ? = ?1(??2 ) ?1.

The encryption scheme is based on the computational difficulty of computing the discrete logarithm of group G.

Given a prime number ?, a generator ? and an expression ?? mod ?, it is computationally difficult to find the value ?. The ElGamal encryption is semantically secure under the Decisional Diffie-Hellman (DDH) Assumption[4]. Thus, the encryption scheme has the indistinguishability property that any two different messages will have different cipher-texts since the random number ? can take many different values.

The ElGamal encryption has a randomisation property to allow computing a different encryption from a given encryption, ? .

C. Computation model  Privacy preserving mining protocols implement among a set of semi-honest parities. One of these parties play the special role, which is called the miner to collect messages from all parties and compute the final result.

We assume that all parties are online, where each party has a communication channel with the miner. To be applicable, we require that the protocol can ensure users? privacy in an environment that doesn?t have any secure channels between the party and the miner. In addition, it should not require any communication among the parties.

In our solution, ? of the parties act as commodity parties, that is called a moderator. Moderators have the special duty of randomising the data for protecting privacy of each party?s data. In order to make the protocol practical, we divide all parties? joint data sets into groups; where each group has ? records which is randomly chosen by all parties from their database. The miner computes the frequency from one group at a time. Our requirement is that each party should has its data at a time. In other words, the miner should compute the frequency of the data tuple from a group. In contrast, it should not know which frequency generated from which group record.

We assume that prior to the protocol, each party has obtained the key pairs for the Elgamal encryption scheme, and each party?s public key and the miner has known by members in the system.

D. Definition of privacy  The privacy preservation of the proposed protocol is based on the semi-honest security model. In this model, each party participating in the protocol has to follow rules using correct input, and cannot use what it sees during the execution of the protocol to compromise security. A general definition of the secure multi-party computation in the semi-honest model is stated in [6]. This definition was derived to make a simplified definition in the semi-honest model for privacy-preserving data mining in the fully distributed setting scenario [22], [5]. This scenario is similar to our computation model. In this paper, we consider the possibility that some corrupted parties share their data with the miner to derive the private data of the honest parties. One requirement is that no other private information about the honest parties be revealed, except the final result.

In our model, information known by parties is no more than information known by the miner. Thus, we do not have to consider the problem in which parties share information with each other.

A distribution ensemble ? = {??}? ? ? is a family of probability distributions indexed by some infinite set ? of binary strings. We sometimes take ? = {1? : ? ? ?}, in which case the indices in ? are viewed as natural numbers.

Definition 2. (Computational indistinguishability). Two en-  sembles, ? ???? {??}??? and ? ???? {??}??? are compu-  tational indistinguishable, denoted ? ?? ? if the following  holds: For every polynomial time algorithm, ?, and every ? > 0, there exists an integer ? such that for all ? ? ? .

???(?(??) = 1)? ??(?(??) = 1)? < 1 ??  For more general, we assume that there are ? parties involved in the frequency mining protocol in which a party plays the role as a miner. Each party ?? has the input ??, where ?? can be an integer number or the set of the binary numbers. The definition of privacy preserving in semi-honest model is presented as follows:  Definition 3. Assume that each party ?? has a private set of keys ?? and a public set of keys ??. A protocol for the above  defined frequency mining problem protects each user?s privacy against the miner along with ? corrupted parties in the semi- honest model if, for all ? ? {1, ...,?} such that ??? = ?, there exists a probabilistic polynomial-time algorithm ? such that  {?(?, [??, ??]??? , ??} ?? {? ????????,{??}??? [??, ??]??=1} where  ?? denotes computational indistinguishability.

Basically, the definition 2 states that the computation is  secure if the joint view of the miner and the corrupted parties during the execution of the protocol can be effectively simulated by a simulator. The miner and the corrupted parties have observed in the protocol using only the result ? , the corrupted parties? knowledge, and the public keys. Therefore, the miner and the corrupted parties can not learn anything from ? . By the definition, it indicates that there exists a simulator satisfied the above equation.



III. PRIVACY PRESERVING FREQUENCY MINING IN TWO-DIMENSION DISTRIBUTED DATA  A. Privacy preserving frequency mining protocol  Our goal is that the miner should obtain a random permu- tation of the set (??1?1 , .., ????? ), without knowing each ?? coming from which parties. Where, ?? is randomly chosen from [1, ? ? 2] by all other parties. Note that if we obtain this result, the miner can be counted the number ?? = 0 that is equal with ????? = ?0 = 1. Clearly, when ?? ?= 0, ????? is the random number, the protocol does not leak any other information except the frequency.

To achieve this goal, we use variants of the ElGamal encryption in which it replaces ? with ?? [22]. As the result, there are the following properties:  Property 1. The decryption algorithm is not efficient when ? is large, however, there exists an efficient algorithm that uses the private key to decide whether a ciphertext decrypts to 1 or (?0). That is suitable to our algorithms.

Property 2. It has the additive homomorphic property that can be used to perform computation on ciphertexts from different parts.

Property 3. It allows homomorphic computing of constant multiplication that can be performed without decrypting.

In our solution, we assume that each party has a key pair (??, ?? = ???) and there ? of the ?? parties play the role as moderators. Without loss of generality, we assume in the sequel that the moderators are numbered from 1 to ?. In practice, the choice of moderators can be arbitrary that depends on the requirement of privacy and the efficiency of the application.

Define  ? =  ?? ?=1  ??  ? =  ?? ?=1  ?? = ? ?  In our protocol, the parties use the public value ? as a public key to encrypt their data. Therefore, decrypting these     encryptions needs the private key ?, which is not known to any individual party. We call (?, ?) be the joint key pair. Basically, the idea of our protocol as follows:  (1) For each value ??? of the binary matrix, the party holding the value ??? encrypts this value using the joint public key of moderators and sends this encryption to the miner. Note that, without the help of all moder- ators, nobody can decrypt any of this encryption. By additional monomorphic property of Elgamal scheme, the miner connects all encryptions of the binary values ??? corresponding to the row ? to obtain the encryption of  ? ??? ???. It then adds ?  ???? to this encryption to obtain the encryption of ?? =  ? ??? ??? ? ???. At the  end of this step, the miner obtains the ? encryptions of ?1,..., ?? .

(2) The miner sends the set of encryptions of ?? (? = 1, ..., ? ) to moderators. Each moderator ? (? = 1, ..., ?) computes the encryption of each ??? = ????? and sends back to the miner. Where, ??? are non-zero elements of ? chosen independently and uniformly at random. The miner connects encryptions ??? (? = 1, .., ?) to obtain an encryption of ??? = ??  ?? ?=1 ??? . Note that ?  ? ? has a 0 if  and only if the original value ?? has a 0. On the other hand, all non-zero elements in the original values have been changed to the randomized element. As the result, no extra information is leaked.

(3) The miner together with ? moderators execute the ? round to permute and randomise the set of the en- cryptions of ??1, ..., ?  ? ? . Note that ElGamal supports  re-randomisation, which means computing a different encryption of M from a given encryption of M. A related operation is a permutation of the order of items. There- fore, it randomly rearrange the order of items. If we re- randomise and permute a sequence of cipher-texts, then we get another sequence of cipher-texts with the same multiset of clear-texts but in a different order. Looking at these two sequences of cipher-texts, the adversary cannot determine any information about the correspondence between the new cipher-text corresponding and the old cipher-text.

(4) Finally, the moderators jointly help the miner to decrypt the received new encryptions, which are in an indepen- dent order of the original encryptions. The miner counts how many of the decryptions are equal to 1 (?0). This number is equal to the frequency of the tuple.

The detailed protocol is implemented in phases as follows:  ? Phase 1. Data submission. For ? = 1, ..., ?  ? For each ? ? ?, the party holding ??? encrypts ??? using the public key ? :  ??? = (? (1) ?? , ?  (2) ?? ) = (?  ??????? , ????)  where ??? is chosen randomly from [0, ? ? 1] and after that ??? is sent to the miner.

? The miner computes:  ?? = (? (1) ? , ?  (2) ? ) = (?  ???? ? ???  ? (1) ?? ,  ? ???  ? (2) ?? )  ? Phase 2. Encryption randomisation.

? For ? = 1, ..., ?, the miner sends (?1,..., ?? ) to the  moderator ? ? Each moderator ? re-randomises the received encryp-  tions: for ? = 1, ..., ? ,  ??? = (? (1) ?? , ?  (2) ?? ) = ((?  (1) ? )  ??? , (? (2) ? )  ??? )  where ??? is chosen uniformly from [0, ? ? 1].

? For ? = 1, ..., ? , each moderator ? sets ??? = ???  and sends back to the miner.

? The miner computes: For ? = 1, ..., ? ,  ?? = (? (1) ? , ?  (2) ? ) = (  ?? ?=1  ? (1) ?? ,  ?? ?=1  ? (2) ?? )  ? Phase 3. Permutation. For ? = 1, ..., ?, ? At the beginning of this step, the miner sends (?1,..., ?? ) to the moderator ?.

? Each moderator ? permutes encryptions: For ? = 1, ..., ? ,  ?? = (? (1) ? , ?  (2) ? ) = (?  (1) ??(?)  ????(?) , ? (2) ??(?)  ????(?))  where ??? is an permutation on {1, .., ?} and ?? is chosen independently and uniformly from [0, ?? 1].

? For ? = 1, ..., ? , each moderator ? sets ?? = ?? sends (?1,..., ?? ) back to the miner.

? Phase 4. Frequency computation ? The miner sends (?(2)1 ,..., ?  (2) ? ) to all moderators.

? Each moderator ? computes: for ? = 1, ..., ? ,  ? (2)?  ?(?) = (? (2) ? )  ??  and sends ?(2) ?  ?(?) to the miner ? The miner sets ? = 0 and works as follows: for ? = 1, ..., ? ,  ?? = ? (1) ? /  ?? ?=1  ? (2)?  ?(?)  ?? ?? = 1 ???? ? = ? + 1;  ? The miner outputs ?  B. The correctness of the protocol  Theorem 1. If all participants follow the protocol, then the miner?s result is a frequency ? as description in Section 2.A.

Proof: - At the end of the first step, the miner obtains:  ?? = (? (1) ? , ?  (2) ? ) = (?  ? ??? ????????  ? ??? ??? , ?  ? ??? ???)  = (?????? , ??? )  Where, denote ?? = ?  ??? ??? ? ??? and ?? = ?  ??? ???     - In Phase 2, the miner receives (?(2)1 ,..., ? (2) ? ) from Phase  1 and randomises each ?? . It obtains:  ?? = (? (1) ? , ?  (2) ? ) = (  ?? ?=1  ? (1) ?? ,  ?? ?=1  ? (2) ?? )  = (  ?? ?=1  ???????????? ,  ?? ?=1  ?????? )  = (??? ??  ?=1 ???? ??  ?=1 ??)??? , ??? ??  ?=1 ??? )  - In Phase 3, the protocol receives the set (?(2)1 ,..., ? (2) ? )  and permutes this set ? times. Thus, the miner obtains: ?? = (?  (1) ?(?), ?  (2) ?(?)), where, ?(?) is the final result of the  permutation of the ? times.

? (1) ?(?) = ?  ??(?) ??  ?=1 ???(?)???(?) ??  ?=1 ???(?)+???(?) ;  ? (2) ?(?) = ?  ??(?) ??  ?=1 ???(?)+???(?)  Therefore, in Phase 4, the miner obtains  ?? = ? (1) ? /  ?? ?=1  ????  = ???(?)  ?? ?=1 ???(?)?(??(?)  ?? ?=1 ???(?)+???(?))  ?(??(?) ??  ?=1 ???(?)+???(?)) ??  ?=1 ??  = ???(?)  ?? ?=1 ???(?)?  ?? ?=1 ??(??(?)  ?? ?=1 ???(?)+???(?))  ?(??(?) ??  ?=1 ???(?)+???(?)) ??  ?=1 ??  = ???(?) ??  ?=1 ???(?)  Thus, if ?? = 1, ?? is the encryption of ?0 that means ?? = 0. It further follows that the tuple occurs at a record of the data set and so the frequency ? is increased to 1.

C. The privacy of the protocol  Theorem 2. The protocol in Subsection 3.A preserves the privacy of the honest parties against the miner and up to ?? ? 2 corrupted parties as long as at least one of honest parties is a moderator.

Proof: To prove this theorem, we will design a simulator ? that simulates the joint view of the miner and the corrupted users by a probabilistic polynomial-time algorithm. Subse- quently, this simulator is combined with a simulator for the ElGamal cipher-texts to obtain a completed simulator. To do so, basically we show a polynomial-time algorithm for com- puting the joint view of the miner and the corrupted parties.

The computation of the algorithm is based on what the miner and the corrupted parties have observed in the protocol using only the result ? , the corrupted parties information, and the public keys. The algorithm outputs the simulated values for the encryptions generated by a simulator of ElGamal encryptions.

Clearly, it suffices to consider the case in which only one moderator (?1) and one regular party (?2) are honest. Without loss of generality, we assume that ?1 is the moderator 1. We  will show the simulator that its steps follow the protocol?s steps.

- Phase 1, for each ?? ? ?1 or ?2, ? computes  ?? = (? (1) ? ,?  (2) ? ) = (  ? (1) ?  (? (2) ? )  ?? ?=2  , ? (2) ? )  = (?????? , ??? )  where ?? denotes the binary value in the row ? of the binary matrix owned by ?1 or ?2, and ?? denotes a random number in [0, .., ? ? 1]. Note that Elgamal encryption is semantically secure under the DDH; thus,? can simulates?? by a random ciphertext of the Elgamal encryption.

- Phase 2, ? has to simulate all ?1? = (? (1) 1? , ?  (2) 1? ).

Note that given (??1 , ??2 , ???1 , ???2 ), since the computational indistinguishability follows from the semantic security of ElGamal encryption, which is well known to hold under DDH, (??1 , ??2 , ???1 , ???2 ) and (??1 , ??2 , ??3 , ??4 ) are not computa- tionally distinguishable. Therefore, ? can simulate each ?1? by ? ?1? = (?  ?3 , ??4), where ?3 and ?4 are randomly and independently chosen in [0, ?? 1].

- Phase 3, ? has to simulate all ?? = (? (1) ? , ?  (2) ? ) =  (? (1) ?1(?)  ???1(?) , ? (2) ?1(?)  ???1(?)). ? simulates this using a ran- domly permuted vector of ? ElGamal cipher-texts, among these ? cipher-texts, the number of encryptions of ?0 should be equal to the output of the protocol, all the remaining cipher- texts should be the random number.

- Phase 4, each message ?(2) ?  ?(1) in the protocol can be simulated using:  ? (2)?  ?(1) = ?  (1) ?  ?? ??  ?=2 ? (2)? ?(?)  where it is similar to the choosing a uniformly random element of ?. This finishes the simulation algorithm.



IV. COMPLEXITY ANALYSIS  A. Communication analysis  Let us assume that the size of the moderator?s key is ? bits. Phase 1 requires the transmission of 2???? encryptions, for a total of 2????? bits. In phase 2, 2??? bits cipher-texts are transmitted. In each iteration of phase 3 , 2?? bits are transmitted, for a total of 2??? bits. Phase 4 transmits ??? bits. Since, the total is (5?+ 2???)??.

B. Computational complexity evaluation  In this section, we show the results of the complexity estimation of the protocol and the efficiency measurement of the protocol in practice. In the proposed protocol, the computational cost of all parties in the first phase is 2???? modular exponentiations. The computational cost of the miner is at most of all (??? + ?)? modular multiplications for the first phase and the second phase, and? modular multiplication inversions for the last phase. Each moderator uses 5? modular exponentiations. We conclude that the total computational complexity is ?((??? + ?)?) modular exponentiations. Note     N ??? 200 400 600 800 1000 2 0.22 0.44 0.67 0.88 1.11 3 0.33 0.66 0.97 1.32 1.65 5 0.55 1.08 1.64 2.14 2.75 10 1.2 2.2 3.2 4.3 5.5 20 2.1 4.3 6.5 8.7 10.8  TABLE I TIME (SECONDS) USED BY ALL PARTIES FOR DATA ENCRYPTION  ? 200 400 600 800 1000  Time 0.15 0.32 0.48 0.63 0.8  TABLE II TIME (SECONDS) USED BY EACH MODERATOR  that these computational costs do not include the overhead of key generation and computing two parameters ? and ?.

However, generating these parameters belongs to the prepa- ration period of the mining process. Therefore, it can be implemented before the protocol is executed without affecting the computation time of the protocol.

For evaluating the efficiency of the protocol in practice, we build an experiment on the privacy preserving frequency mining in C environment, which runs on a laptop with CPU Pentium M 1.8 GHz and 1GB memory. The used crypto- graphic functions are derived from Open SSL Library.

To measure the computation cost of the frequency mining protocol in worst case, we assume that all parties involve in the protocol except the miner are the moderators. We measure the computation cost of the frequency mining protocol for 10 parties. Before executing the protocol, we generate a pair of keys for each party, with the size of public keys set at 512 bits.

Table 1 illustrates our measurements of all parties?s compu- tation time in the submission phase: it is in regard to ? and ???, for a typical scenario, where ? = 1000, ??? = 20. The computation time of all parties is about 10.8 seconds. Table 2 illustrates our measurements of a moderator?s computation time: it is linear in ? and does not depend on ? and ???. For a typical scenario where ? = 1000, the computation time of a moderator is about 0.8 seconds. The miner?s computation time: it is linear in ? , ???, and ?. However, it is very small, it only is 65?? when ? = 10000, ??? = 20, and ? = 10.



V. PRIVACY PRESERVING FOR CLASSIFICATION RULES LEARNING IN TWO-DIMENSION DISTRIBUTED SETTING  A. Privacy preserving association rules mining  1) Association rules and frequent itemset: The association rules mining problem can be formally stated in [17]. Let ? = ?1, ?2, ..., ??} be the set of all items. Let ?? a transaction database, where each transaction ? is a set of items such that ? ? ? . Associated with each transaction is a unique identifier, denoted by ???. We say that a transaction ? contains ? , a set of some items in ? , if ? ? ? . The problem is to find the association rules that have an implication of the form ? ?  ? [?, ?], where ? ? ? , ? ? ? , and ? ? ? = ?. The support ? and the confidence ? of the rule ? ? ? are defined as:  ? = ? (? ? ? ) = ? (? ? ? )???? ? = ? (??? ) = ? (? ? ? )  ? (? )  Where ? (?) stands for the number of transactions containing the set ? in ?? and ???? denotes the total number of transactions in ??. The strong association rules are required to meet a minimum support (????) and a minimum confidence (????) defined by the miner.

A set of items is referred as an itemset. An itemset that contains ? items is a ?-itemset. The support count of an itemset is the number of transactions containing the itemset.

The minimum support count is defined as ????????. An itemset is frequent if its support count is not less than the minimum support count. Association rule mining is a two- step process: (1) Finding all frequent itemsets; (2) Generating strong association rules from the frequent itemsets.

Agrawal et al. [17], [2] presented the Apriori algorithm to efficiently identify frequent itemsets for boolean association rules. The name of the algorithm is based on the fact that the algorithm uses the Apriori property, i.e., all nonempty subsets of a frequent itemset must also be frequent.

2) Finding a frequent itemset: Assume that the transactions set ?? is two-dimension distributed into ?? parties as in Section 2.?. Each party ???(? = 1, ..?, ? = 1, ..,?) owns ???? that contains information about certain attribute set ?(?)  and certain records. Given a candidate set ? of the ? items, the parties wish to cooperatively find whether or not the candidate set is frequent from the joint transaction set (??), without disclosing each party?s individual transactions and even the local frequent itemsets.

Assume that ? is partitioned into parts ??, where ? ? ?, S? {1, ..,?}. Each ?? consists of items ? ?(?). Note that if ? is frequent in ??, it is frequent in at least one horizontal partition ???, where ??? = ???1? ...?????. In addition, if ?? is frequent in ???, every ?? (? ? ?) is frequent in ????.

Considering a map from each ???? to a binary number that is done by each ??? as follows:  ??? =  { 1, if ?? is frequent in ????; 0, otherwise.

Thus,?? is mapped to the binary matrix ??? (? ). Hence, ? is frequent in at least one horizontal partition ??? as long as at least a row ? in ? with all elements are 1. As the result, ?? =  ? ??? ??? ? ??? = 0. Clearly, using frequency mining  can allow the miner to find a random permutation of (??1 , ..., ???). Therefore, the miner can identify whether ? is frequent or not, without knowing ? be frequent in which ???.

3) Finding all frequent itemsets and their support counts: In the classic Apriori algorithm [17]. The key issue is com- puting the support of an itemset. To find out if a particular itemset is frequent, we count the number of records where the values for all the attributes in the itemset are 1. Thus, the     problem is to compute the frequency of values? tuples that all values in the tuple are 1. The privacy preserving protocol for finding frequent itemsets and support counts follows Apriori algorithm as below:  1: {Finding an item 1-Itemsets is frequent} 2: ?1 = ? 3: The miner sets ?1 = ? 4: for each ? ? ?1 do 5: The miner uses the frequency mining protocol to iden-  tify whether or not ? is frequent 6: if ? is frequent then 7: The miner does: ?1 = ?1 ? ? 8: Let ? ? ?(?), the miner broadcasts the requirement  for computing ???????(?) to all ??? (? ? {1, ..., ?}).

9: All parties involve in frequency mining protocol to  compute ???????(?) 10: end if 11: end for 12: for {? = 2; ???1 ?= ? ?++} do 13: The miner does: ??=Approri-gen(???1) 14: for each ? ? ?? do 15: The miner uses the frequency mining protocol to  identify whether or not ? is frequent 16: if ? is frequent then 17: The miner does: ?? = ?? ? ? 18: Let ? consists of items partitioned into the sets ??,  where ? ? ?, ? ? {1, ...,?}, the miner broadcasts the requirement for computing ???????(?) to all ??? (? ? ?).

19: The miner and the parties involve in frequency mining protocol to compute ???????(?)  20: end if 21: end for 22: end for  4) Analysis of protocol:  Statement 1. (Correctness). If all participants follow the protocol, then the miner?s result is the frequent itemsets and the support count of each frequent itemset  Proof:Candidate itemsets are generated by the Apriorigen procedure. The correctness of that procedure has proved [17].

The ?? sets are generated correctly as long as the input to the procedure is correct. We show by induction that the ?? sets are generated correctly. At steps 1 ? 9 with ? = 1, ?1 is correctly generated by the frequency mining protocol.

Assume that ???1 has been correctly generated, then ?? is correctly generated by Apriorigen procedure. Since frequency ming protocol is correct, the support count of each ? ? ???1 is computed correctly. Hence, ?? is generated correctly from ???1. The entire frequent itemsets and the support counts gives correct results.

Statement 2. (Privacy.) The protocol preserves the privacy of the honest users against the miner and up to ???2 corrupted parties as long as there is at least an honest be the moderator.

Proof: Since all support count computations and frequent itemsets identification are done independently using frequency mining. This statement follows immediately from Theorem 2.

5) Evaluation of complexity: The communication analysis critically depends on the number of frequency computations called. We incur the cost of privacy preserving frequency mining for each call. Let ? be the maximum size of a frequent itemset, and let ??(? = 1, ..., ?) and ??(? = 1, ..., ?) represent the number of candidate itemsets and the found number of fre- quent itemsets at each round, the total communication consists of cost of finding frequent and the cost of the support counts computation that is: ? =  ?? ?=1(5?+ 2??)??+ (5?+ 2??)??  bits. Similarity, the computational complexity is ?( ??  ?=1((?+ ??)?+ (?+ ??)?) modular exponentiations.

B. Privacy preserving learning of ID3 tree in two-dimension distributed data  Using the primitive of proposed privacy-preserving fre- quency mining, we can learn ID3 trees in two-dimension dis- tributed data without loss of accuracy. The miner?s algorithm has the same complexity as the original ID3 tree algorithm, except for an additional linear overhead factor. Which has a value determined by the number of times frequency mining protocol using to compute gain.

1) ID3 decision tree learning: we firstly present a brief review of ID3 decision trees. An ID3 tree is a rooted tree containing nodes and edges. Each internal node is a test node and corresponds to an attribute. The edges going out of a node correspond to the possible values of that attribute. The ID3 algorithm works as follows. The tree is constructed top-down in a recursive fashion. At the root, each attribute is tested to determine how well it alone classifies the samples. The best attribute is then chosen and the samples are partitioned accord- ing to this attribute. The ID3 algorithm is then recursively called for each child of this node, using the corresponding subset of data.

Thus, major problem of the algorithm is choosing the best attribute that can achieve the maximum information gain at each node. Clearly, the problem of choosing the best attribute can be reduced to computing entropies that require computa- tion of the frequency of tuples of values[24].

2) Protocol of privacy-preserving ID3 tree learning: Let ?? be a data set that has the set of (non-class) attributes ? = {?1, .., ??} and ? the class attribute. Without loss of generality, we assume that all attributes have the same domain size d: {?1, ..., ??}. ?? is two-dimension distributed into ?? parties as in Section 2.?. Each party ???(? = 1, ..?, ? = 1, ..,?) owns ????. There are ? parties ??? (? = 1, ..?) holding the classification attribute ? . The parties wish to cooperatively build the ??3 decision tree classifier from the joint data set of all parties, without disclosing each party?s individual transactions and even the number of the local records. Assume that parties have set a system as the computation model described in Section 3. In this section, we use frequency protocol as the primitive to design the privacy protocol for building decision tree following the ID3     Algorithm: PrivacyPreservingID3(?, ?,??)  1. If ? is empty, return a leaf-node with the class value assigned to the most of all transactions in ??.

2. Use the privacy preserving method to count the number of records with each class label. If ?? consists of records which have the same class label ?, return a leaf node with ?.

3. Otherwise: - Determine the best attribute ?? for ?? using the privacy-preserving method.

- For ?? = {?1, ..., ??}, let ??(?1) ,..., ??(??) be a partition of ?? that every record in ??(??) has attribute value ?? .

- Return a tree whose root is labeled ??, the root has outgoing edges labeled ?1,..., ?? s.t. each edge ?? goes to the tree ???????????????????3(????, ?,??(??)).

3) Analysis of protocol: The communication/computation depends on the number of records, number of vertically partition, number of attributes, number of attribute values per attribute, number of classes and complexity of the tree.

For a rough analysis, the cost of computation involves in terms of the time number of frequency mining protocol called to build the tree. Assume that there are ? nodes in final classification tree. In total, each node needs ?(1 + ??) the calls of frequency mining protocol. All node of the tree need ??(1 + ??) the frequency computation. Therefore, in total the entire classification process will require O(?????(? + ???)) encryptions and O(?????(?+ ???)?) bits communication.



VI. CONCLUSION  In this paper, we proposed a method for privacy-preserving classification learning in two-dimension distributed data, which has not been investigated previously. Basically, the proposed method is based on the ElGamal encryption scheme and it ensures strong privacy without loss of accuracy. We illustrated the applicability of the method by applying it to design the privacy preserving protocol for some learning meth- ods such as association rules mining, decision tree learning.

We conducted experiments to evaluate the complexity of the protocols. The experimental results showed that the protocols are efficient and practical.

