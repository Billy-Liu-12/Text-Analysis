Performing Combinatorial Testing on Web Service- based Software

Abstract?Although Web service-based software (WSBS) possesses a lot of merits such as loose coupling and good interoperability, its some new characters also bring challenges to latter maintenance activities inevitably. In the paper, we proposed a combinatorial testing framework for the WSBS, which mainly includes test cases generation and knowledge-based debugging. For the former, na?ve method and ?greedy +backtracking? method are detailedly addressed. At the stage of debugging, rough set reasoning is adopted to generate association rules, which can help maintainers to locate faults in the WSBS by using dynamic slicing technology. In addition, the feasibility and effectiveness of our approach is validated by some working examples and experiments.

Keywords-Web service; combinatorial testing; test cases generation; rough set; debugging

I.  INTRODUCTION Web services (WS) technique has been widely adopted in  constructing new-style software systems during it development.

Although Web service-based software (WSBS) possesses a lot of merits such as good interoperability, easy integration, reuse and evolvement, its some new characters also bring challenges to latter maintenance activities inevitably. Therefore, exploring new testing methods and strategies is a hot issue in the field of software engineering [1].

Web service is an independent software component with a specific function, thus developers of Web service-based software can access its interface merely through the related standards and protocols such as WSDL, SOAP and UDDI.

Furthermore, the whole system may contain several kinds of heterogeneous service units (i.e., components) and run in an open context. If testing problems of this system is taken into account, black-box testing (also called functional testing) [2] should be a preferred method during testing process. The service component or integrated system of some service units can be viewed as a black box, and testers can only change the value of its interface parameters during testing process. In order to ensure its high quality, the generated test cases should have the ability of covering combinatorial pairs of input parameters as many as possible, which is so-called combinatorial testing.

Combinatorial testing (CT) strategy defines ways to select values for individual input parameters and combines them to  form complete test cases [3]. It is not hard to find that, this method can achieve satisfactory coverage via the possible minimum number of test cases. Thus, it is a rational way for increasing efficiency and effectiveness of testing. In the paper, we adopt this testing strategy to test the WSBS according to the characters of this new kind of software. Furthermore, a debugging method based on rough set reasoning is proposed to locate faults.

The rest of the paper is organized as follows: In the next section, we address the foundation and running example for testing. In Section 3, the method of performing combinatorial testing on Web service-based software is discussed, and the framework of whole testing process is also introduced. The debugging method based on rough set reasoning is presented in Section 4. Section 5 presents the conclusions and future work in this area.



II. PRELIMINARY KNOWLEDGE AND RUNNING EXAMPLE Combinatorial testing has been extensively used across  many disciplines including medicine, agriculture, manufacturing, etc., and was recently applied to software testing [4]. As shown in Figure 1, we use  1 2{ ,  ,  ,  }nX x x x? ? to indicate the set of all input variables identified for use in testing WSBS. Let ip  denotes the number of parameters that have iv values (1 )i k? ? . Note that  k  iin p?? ? . Without loss of generality, we assume that iv  are listed in descending order (i.e., i jv v?  if i j? ). Thus, the testing problem can be uniquely represented as  1 2 1 2[ , , ,p pCTP v v? ?  ]kpkv .

Figure 1. WSBS with set of input variables X   DOI 10.1109/CSSE.2008.1284     In combinatorial testing, the conservative strategy is to test all possible combinations of input variables. For the model  5[4 ] , it needs 51024( 4 )?  test cases. Since the size of test suite will grow large very quickly, this strategy is not practical in most cases. Instead one can create test suites that guarantee t- way ( 2 t n? ? ) coverage or pair-wise (a.k.a. 2-way testing) [5].

In n-way testing, a set of test cases is generated to cover a subset of the possible combinations of the system?s input variables, rather than attempting to cover all possible combinations. While the trade-off between fault detection effectiveness (FDE) and cost is considered, pair-wise testing method seems better, and this paper only discusses this case.

In order to address the steps of our method clearly, we take a simple Web service-based application as an example. The application only contains one Web service component, with main function of date judgment and calculation. It has four input parameters: the former three are year, month, date, and flag. The value types of input parameters are listed as following.

TABLE 1. VALUES OF INPUT PARAMETERS IN EXAMPLE  Para. Abbr. Description  Y1 Y%100==0 && Y%400!=0 Y2 Y%400==0 Year (Y) Y3 Y%100!=0 M1 M in the set {1,3,5,7,8,10,12} M2 M in the set {2} Month (M) M3 M in the set {4,6,9,11} D1 D <= 28 D2 29 <= D <= 30 Date (D) D3 D ==31 F1 Leap year judgment function F2 Function for getting previous date Flag (F) F3 Function for getting next date  It?s obvious that this testing problem for the simple Web service-based application can be modeled as 4[3 ]CTP ? . In most cases, the internal structural information of Web service component can?t be obtained by WSBS developers and testers, who can only extract interface information from WSDL files.

This step usually can be automatically employed because WSDL is a universal standard for all service unit developers. In the following sections, combinatorial testing method and related debugging strategy will be addressed according to this abstract representation.



III. COMBINATORIAL TESTING FOR WSBS  A. Test Cases Generation  After obtaining interface information of Web service or WSBS, the crucial step of testing WSBS is to generate test cases which can cover the interactions between the input parameter pair. When interactions are considered, the number of possible tests grows very rapidly leading to a combinatorial explosion. In this situation, testers may try to manually identify ?important? input combinations to create a reasonable number of tests [6].

How to generate the minimum combinatorial test suite is a NP-hard problem [7], and hasn?t been perfectly resolved until today. For WSBS combinatorial testing issues, the paper provides two na?ve methods first, and then gives our primary settlement.

(1) Na?ve methods for WSBS testing  In fact, test cases that cover all pair-wise interface interactions can be viewed as a 2-factor design in experimental design theory. Therefore, the validated orthogonal tables (arrays) [8] can be treated as references to generate test suite.

For the working example, testers can look up a 4-factor and 3- level orthogonal table in mathematics handbook, and then convert each row in the table into a test case according to the candidate values of parameters. The limitation of this method lies in that, this algebraic approach mainly handles the case of all parameters having the same number of values, and nearly can?t deal with the case where parameters have different numbers of values.

D. M. Cohen et al. proposed a heuristic search-based approach to generate pair-wise test suite, and designed an automatic efficient test generator (AETG) [9] to help worldwide testers to perform combinatorial testing. This system can be accessed via Web, so we can input testing indicators into it to gain the combinatorial results for the WSBS under test. This method has been widely adopted and proven to be high effectiveness. However, the AETG adopts a greedy search technique to find a pool of test cases, so it doesn?t always produce test suites with known covering array numbers.

For this reason, we add a backtracking procedure to greedy algorithm to avoid Local optimization problem.

(2) A greedy + backtracking method  In order to overcome pure greedy algorithm?s difficulties in finding global optimal solution, we introduce the backtracking strategy into the process of greedy search. Suppose the initial situation is 0C , we enumerate k  kinds of parameter pair coverage first, and then apply greedy search to each enumeration. Subsequently, the ?best? one is selected from all enumerations according to some specific rule, so we can get a new situation 1C . Similarly, we can apply the above calculation process to 1C  recursively until all pairs of parameter values are covered. Two selection rules are introduced into above algorithm, the primary one is defined as the cardinality of projective set of covered parameter value pairs (denoted as CP ), and the second is defined as the dispersed degree of the reduplicate pairs. Furthermore, the factor k  is set as 2nC  (where 4n ? ) in the running example.

It is well known that backtracking is a time-consuming process, so we only adopt one step backtracking in the above search algorithm to ensure rational efficiency. We have employed experiments on some sample problem, the results showed that the greedy algorithm with one step backtracking was good at searching, which significantly reduced search time compared with all-backtracking method. According to our proposed method, nine test cases shown in Table 2 are generated and have been used in testing activity. In the example WSBS, some statements are mutated to validate     testing methods. The sixth column in Table 2 shows that this testing method can reveal some seeded faults. It should be noted that 0 represents the corresponding test case without failures, ?E1? and ?E2? represent two kinds of runtime exceptions.

TABLE 2. TEST CASES AND RESULTS OF THE EXAMPLE  No. Y M D F Results  x1 1 1 1 1 E1 x2 1 2 3 2 E1 x3 1 3 2 3 E1 x4 2 1 3 3 0 x5 2 2 2 1 E2 x6 2 3 1 2 0 x7 3 1 2 2 0 x8 3 2 1 3 0 x9 3 3 3 1 0    B. Testing Framework for WSBS  Due to the transparency of internal structure of WSBS, traditional testing methods, especially white-box testing methods, can?t be used to find faults. However, combinatorial testing can satisfy such requirement, and has high coverage ability. Here, we summarize the whole implementation process of that testing method in following figure.

WSDL Files  SOAP Files  Architecure Spec.

Extract interface parameter info.

Construct CT model  Generate test cases  Orthogonal arrays  AETG method  Greedy+back tracking method   Test suite  Execute  Test results  Rough set-based diagnosis  Debug rules  R ep  ai r   Figure 2. Combinatorial testing framework for WSBS  At first, testers can extract interface information about Web services or WSBS according to files such as WSDL and architecture specification. Then they can construct combinatorial testing model for Web service-based application based on such information. According to the abstract model, testers can generate test cases by na?ve methods or ?greedy+ backtracking? method. Subsequently, they can treat test cases as input to execute the WSBS under test and gather test results.

While considering some complex WSBS, the number of interface parameters and their values maybe very large, so the size of test cases must be huge. Naturally, test results will be too large to be analyzed in manual style. For this reason, we proposed a debugging method based on rough set reasoning.

Each test case and its result can be viewed as the subset of conditional attributes and subset of decision attributes in information system respectively. Then rule mining algorithms can be utilized to discover some useful rules for latter debugging activity.



IV. ROUGH SET-BASED DEBUGGING Generally speaking, Web service-based software is viewed  as a black box during functional testing. The relation between program?s input and output is the typical cause-effect mapping rule. For software debuggers, the chief task is to find the causes of software failure. In the other perspective, the problem can be induced into the process of mining rule such as ?reason ? failure type?. Extracting rules from information system is the main task in the field of data mining or knowledge reasoning. Here, we mainly use rough set-based reasoning to explore association rules from test results, and then employ these rules to program debugging.

Rough set-based WSBS debugging can be divided into two phases: (1) mining rules based on rough set reasoning, and (2) Locating faults based on association rules.

For the working example (i.e., Table 2), we can gain the following classifications through considering the values of conditional and decision attributes:  1 2 3 4 6 7 8 9 5/ {( , , ), ( , , , , ), ( )}U D x x x x x x x x x? ; 1 2 3 4 5 6 7 8 9/ (Y) {( , , ), ( , , ), ( , , )}U Ind x x x x x x x x x? ; 1 4 7 2 5 8 3 6 9/ (M) {( , , ), ( , , ), ( , , )}U Ind x x x x x x x x x? ;  1 6 8 2 4 9 3 5 7/ (D) {( , , ), ( , , ), ( , , )}U Ind x x x x x x x x x? ; 1 5 9 2 6 7 3 4 8/ (F) {( , , ), ( , , ), ( , , )}U Ind x x x x x x x x x? ;  Y 1 2 3 7 8 9( ) { , , , , , }Pos D x x x x x x? ; M( )Pos D ?? ; D( )Pos D ? ? ; F( )Pos D ?? .

Compared with attribute M, D and F, the positive domain of attribute Y isn?t null. Therefore, we choose Y as the gist for getting decision rules. In case of considering the objects  1 2 3 7 8 9( , , , , , )x x x x x x  in Y( )Pos D , the following rule can be achieved.

Y 1  E1D? ? ? ;  Y 3  0D? ? ? .

Subsequently, a new decision table (DT) can be produced after removing the objects in Y( )Pos D . Based on the new DT, we can further explore the potential rules in information system.



V. CONCLUDING REMARKS Web service-based system is a prevailing software form in  recent years. Although its new features such as loose coupling and good interoperability can help developers to construct software systems, they also bring challenges to latter maintenance activities. According to the black-box characters of WSBS, we introduce combinatorial testing method to verify this kind of software. For the key step in testing activities, i.e., test cases generation, two solutions are proposed in the paper.

One is to adopt na?ve methods such as orthogonal arrays and AETG, the other is an improved greedy algorithm called ?greedy+backtracking? method. In order to analyze test results effectively and improve debugging efficiency, a new debugging method based on rough set reasoning is presented to help maintainers to locate faults in WSBS. Finally, a combinatorial testing framework for WSBS is addressed. The current study only provide an important starting point, but experiments on larger and more complex WSBS should be employed in further.

