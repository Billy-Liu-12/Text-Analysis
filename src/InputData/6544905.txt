Data Services for E-tailers Leveraging Web Search Engine Assets

Abstract?Retail is increasingly moving online. There are only a few big e-tailers but there is a long tail of small-sized e-tailers.

The big e-tailers are able to collect significant data on user activities at their websites. They use these assets to derive insights about their products and to provide superior experiences for their users. On the other hand, small e-tailers do not possess such user data and hence cannot match the rich user experiences offered by big e-tailers. Our key insight is that web search engines possess significant data on user behaviors that can be used to help smaller e-tailers mine the same signals that big e-tailers derive from their proprietary user data assets. These signals can be exposed as data services in the cloud; e-tailers can leverage them to enable similar user experiences as the big e-tailers. We present three such data services in the paper: entity synonym data service, query-to-entity data service and entity tagging data service. The entity synonym service is an in-production data service that is currently available while the other two are data services currently in development at Microsoft. Our experiments on product datasets show (i) these data services have high quality and (ii) they have significant impact on user experiences on e-tailer websites. To the best of our knowledge, this is the first paper to explore the potential of using search engine data assets for e-tailers.



I. INTRODUCTION Retail is increasingly moving online[3]. Revenues of online  retailers, also known as e-tailers, follow a power-law dis- tribution: there are a few giant-sized e-tailers like Amazon and Buy.com while there is a long tail of small-sized e- tailers. Big e-tailers like Amazon have many users visiting and shopping at their websites. Their activities on websites yield a ?treasure trove? of data, e.g., queries they issue to search for products, search results they click on, products they actually buy. Big e-tailers mine such user data to offer superior experience to their users. We describe two illustrative examples of such experiences (We use the terms product and entity interchangeably in this paper.): ? Recognizing Synonyms: Users search for products on e- tailer websites using keyword queries, as they do in web search engines. Consider the product search query ?canon 650d? on Amazon.com as shown in Figure 1(a). The product ?Canon EOS Rebel T4i 18.0 MP CMOS Digital SLR Camera?, which is present in Amazon?s catalog, is also known as ?canon 650d?.

However, neither the name nor the description of the product has any mention of ?canon 650d?. Despite that, Amazon is able to correctly return it as the top result because Amazon understands that ?canon 650d? is a synonym for this specific camera. This is an example of how big e-tailers leverage data assets for user experience.

(a) (b)  Fig. 1. Features on Amazon: (a) Synonyms (b) Query Auto-completion  Lots of  users  Rich data assets  (e.g., query log)  Mine entity  information  Import the mined  entity information  Superior user  experience  Fig. 2. Virtuous Cycle in Big E-tailers  ? Query Auto-completion: Like web search engines, Amazon offers query auto-completion experience: it provides a list of query completions with each key stroke of the user (as shown in Figure 1(b)). This significantly reduces the typing effort of its users. Big e-tailers are able to mine the knowledge of most likely auto-completions from its query log.

These superior experiences make the sites more usable and therefore bring in even more users, leading to even richer data assets. This creates a virtuous cycle as depicted in Figure 2.

In contrast, small e-tailers cannot create the above virtuous cycle. They have much fewer users, hence they do not have the rich data assets possessed by the big e-tailers. Furthermore, even when such data assets are available, they often lack the mining expertise and the computing infrastructure to leverage them. Hence, they cannot match the rich user experiences offered by big e-tailers. For example, many successful camera e-tailers do not have synonym information: they fail to return ?Canon EOS Rebel T4i 18.0 MP CMOS Digital SLR Camera? for the query ?canon 650d? in spite of it being present in its catalog (as shown in Figures 3(a) and (b) of a prominent cam- era e-tailer). Similar comments apply to query auto-completion (as shown in Figure 3(c)).

Main idea and contributions: Over the last decade, search engines have been continuously evolving, attracting more users     (a) (c)  (b)  Fig. 3. Lack of Features on a Prominent Camera E-tailer Website: (a) Catalog Hit for Query ?canon t4i? (b) No Hits for ?canon 650d? Showing Lack of Synonyms (c) No Query Auto-completion  and gathering more data about user activities. So far, the benefit of their rich data assets is reaped only by the search engine themselves. At the same time, most small-sized e- tailers are suffering due to the lack of data assets. Our main idea is to leverage user behavior data assets of web search engines to offer superior user experiences to all e-tailers.

Furthermore, we propose that search engines should offer the mined signals as data services on the cloud. An e-tailer can subscribe to these data services and create superior experiences for its users. For example, search engine can offer entity synonyms as a data service; an e-tailer can use it to obtain the synonyms for the products in its catalog. E-tailer can then use such information for its product search (e.g., FAST Sharepoint Search [2], Endeca [1]) to improve search quality.

Our contributions can be summarized as follows: ? We present a general API for data services for e-tailers.

The API enables e-tailers to subset the signals to the specific products they are interested in (Section II).

? We present three data services for e-tailers: entity synonym data service (Section III), entity tagging data service (Sec- tion IV) and query-to-entity data service (Section V). All the data services comply to the general API. For each data service, we (i) define the data service, (ii) describe the algorithms to mine the desired signals for the subset of the products an e- tailer is interested in and (iii) discuss how the e-tailer can consume the output and implementation details. The entity synonym service is an in-production, publicly accessible data service known as the Bing Synonyms API (https://datamarket.

azure.com/dataset/bing/synonyms) while the other two are prototype data services accessible only within Microsoft.

? We perform extensive experiments on product datasets. Our experiments show that the mined signals are of high quality for all the three data services (Section VI).



II. API FOR DATA SERVICES FOR E-TAILERS  We have developed cloud-based data services that leverage the search engine?s data assets to serve rich information useful for products. Figure 4 shows the general API for a data service for e-tailers. It takes one or more entities as input and returns some information about each of those entities. We assume that each input entity is specified by the canonical string used to  Web Search  Query Log Web Crawl  Mine desired information for  each input entity  Names of  entities  (Entity, Info)  pairs  Fig. 4. API for Data Services for E-tailers  refer to the entity (say, the one used in its product catalog).

We refer to it as the entity reference string or simply entity name. For example, the entity reference string for the entity Canon EOS Rebel T4i Camera is ?Canon EOS Rebel T4i 18.0 MP CMOS Digital SLR Camera?. We assume a 1:1 correspondence between the entity and entity reference string; we use them interchangeably in this paper. This assumption does not hold for ambiguous entities. While such entities are very common for other domains (e.g., people names, location names), it is relatively uncommon for product names. We focus on unambiguous entities in this paper.

Although web search engines have many data assets, the data services described in this paper focus on two data assets: the query log which contains the queries issued on the search engine and the links clicked by users for those queries and the web crawl which contains a recent snapshot of all documents on the web.

We present three cloud data services, namely entity syn- onym data service, entity tagging data service and query-to- entity data service, in the next three sections that are consistent with the above API.



III. ENTITY SYNONYM DATA SERVICE  A. Problem Definition  People often use several alternative strings to refer to the same named entity. For example, the product ?Canon EOS T4i Digital SLR Camera? is also referred to as ?canon 650d? and ?canon kiss x6i?. As we saw in Figures 3(a) and (b), product search fails to return the product entity named ?Canon EOS T4i Digital SLR Camera? for query ?canon 650d? if it does not recognize that they are synonymous. Therefore, the knowledge of synonyms of entities could significantly improve the users? search experience. We develop an entity synonym data service for this purpose. Specifically, the entity synonym data service takes an entity reference string as input and outputs a set of entity synonyms (each a string) for the input entity. Formally, we define the problem as follows:  Definition 3.1: (Synonym Discovery Problem) Given en- tity reference string re of entity e, discover the set Se of synonym strings such that each string se ? Se in the set is a synonym of entity e, i.e., string se refers to entity e. ?  B. Mining Algorithm  The fact that different people use different ways to search for the same entity is captured by search engines in their query     canon eos t4i rebel 650d  rebel t4i  canon 650d  ?  ??  ??  650d lens  ??  nikon d7000  Fig. 5. Synonym Example  click log. Specifically, if two different search queries refer to the same entity, there will likely be significant overlap among the links clicked for the two queries. We thus leverage the query log to identify the various synonyms of a given entity.

We use a two-step data driven approach to mine the syn- onyms of a given entity.

Step 1: Candidate Generation: Given an entity, we first identify web documents that would be good representative documents of the entity. For example, for a camera, its page on Amazon or dpreview.com is a good representative document.

We look for the entity reference string in the query log; we treat the set of web documents clicked when the entity reference string is issued as the query as the representative documents for the given query. The queries that have clicked on at least one of these web documents are treated as candidate synonyms. Figure 5 shows the set of candidate synonyms of ?canon eos t4i?. A solid edge between a query and a document represents a click on the document for that query.

Step 2: Candidate Filtering: Many synonyms are spelling variants of the entity reference string (e.g., misspellings, normalizations); hence, one can use string similarity functions to identify such synonyms among the candidate synonyms.

However, a large fraction of synonyms are semantic in nature.

For instance, ?canon 650d? and ?canon eos t4i? are very far away in terms of string distance and therefore cannot be found using string similarity functions, although they represent the same camera. Toward the goal of a general synonym service which finds the broadest class of synonyms with good precision and recall, we need to exploit features leveraging the click information from query click log.

We now use the example in Figure 5 to illustrate how we filter out false synonym candidates, such as ?nikon d7000? and ?650d lens?, and obtain true synonyms such as ?canon 650d?, ?rebel t4i? and ?rebel 650d?.

We begin by looking at click similarity. Specifically, we examine the overlap and the difference between the clicked documents. Intuitively, a true synonym would have a large number of overlapped clicked documents with the corre- sponding entity reference string. This will help to eliminate candidates such as ?nikon d7000? as it will have a small number of overlapped click documents with the entity ?canon eos t4i?.

Often, many true synonyms of an entity are tail queries, i.e, they are asked by very few users and thus there are few  clicked documents. They often would have few or no clicked documents in common with entity. We illustrate this using the ?rebel 650d? candidate synonym in Figure 5 as an example.

?rebel 650d? is a tail query and has only one clicked document in common (d2) with the representative documents for the entity. Assuming the threshold is 2, ?rebel 650d?, in spite of being a true synonym, will not be adjudged a synonym. We refer to it as the query log sparsity problem.

We propose the concept of pseudo document similarity to address this sparsity problem. Just like the entity, we represent a synonym candidate by the set of documents it clicked on. In turn, each document is represented by the set of words from all queries for which someone clicked on the document. For instance, the document d1 in Figure 5 can be represented by words ?canon, 650d, rebel, t4i, lens?, which is referred to as its corresponding pseudo document. This can be matched with synonym candidates more easily. For instance, candidate ?rebel 650d? can be matched with document d1 via containment checking. As a result, we can establish a link shown by the dotted line in Figure 5 between document d1 and candidate ?rebel 650d?. Specifically, the pseudo document similarity from candidate string se to entity reference string re is the percentage of re?s pseudo documents which contain string se. This leads to much higher recall without sacrificing precision.

One of the key challenges in synonym discovery is to identify and eliminate strongly related yet false synonym candidates such as ?650d lens?. We notice that such candidates are often of a different entity type with respect to the input entity. In this case, the candidate is of the lens type whereas the input entity is of the camera type. We use query context similarity to filter out strongly related candidate synonyms which are of a different entity type of the input entity. For each entity and its candidate, we find longer queries that contain those strings and obtain the tokens that frequently co- occur with them (as prefixes or suffixes); we refer to them as context words. We use the query log to obtain a set of context words for an entity and its candidates by examining tokens which frequently appear with the entity or the candidates in queries. We observe that entities of different types typically have very different context words, whereas entities of the same type have similar context words. For instance, entities of the type camera often come with context words such as ?manual?, ?megapixel?, etc., whereas entities of the type lens come with context words such as ?filter?, ?protector?, etc. As a result, by checking the similarity between the context words, we can further filter out candidates such as ?650d lens? and improve precision.

Finally, it is important to perform two way checking of all similarity functions. This is due to the symmetric nature of synonym relationship, which states that if a is a synonym of b, then b is also a synonym of a. Specifically, we need to check the similarity from entity reference string re to synonym candidate se, and vice versa. More in depth discussion of this aspect may be found in [8].

C. Consumption by E-tailers  There are two ways entity synonyms can be incorporated into product search for e-tailers. We now discuss these two ways of consumption.

Catalog Enrichment With Synonyms: E-tailers can use the discovered synonyms to augment and enrich its product catalog. For instance, an e-tailer can introduce an additional attribute where the string ?canon 650d? can be put to enrich the information for entity ?Canon EOS T4i Digital SLR Camera?.

The enriched catalog can be subsequently indexed and used for capturing more queries. In this example, a user submitting the query ?canon 650d? can retrieve entity ?Canon EOS T4i Digital SLR Camera? in the search result.

Query Alteration Using Synonyms: Another way of leverag- ing the generated synonyms is in query alteration. An e-tailer will still use the synonym data service to obtain the synonyms for its entities. Once these entity and synonym pairs are stored, they can be used for query alteration. For instance, given the stored synonym pairs, the product search engine can choose to alter the query ?canon 650d? to query ?Canon EOS T4i Digital SLR Camera?. The altered query can then retrieve the right product. In fact, existing product search solutions like Microsoft FAST Sharepoint Search have API for e-tailers to specify their own synonym pairs offline, which is then used for query alteration in online search.

D. Implementation  We now discuss implementation options for the entity syn- onym data service. Since the mining algorithm deals with large scale query log and involves sophisticated computation, we leverage the MapReduce framework (specifically COSMOS, a MapReduce framework based on Dryad [13]). Our implemen- tation assumes that a snapshot of the query log already exists in the MapReduce framework. It is straightforward to implement both the candidate generation step and the candidate filtering step of the mining algorithm using MapReduce.

One option is to submit a MapReduce job to generate the set of entity synonyms when an input set of entities is given by performing the mining algorithm described above for each entity in the input set. This option, although an intuitive one, involves running a batch MapReduce job, which is typically time consuming. This means the e-tailer has to wait (typically in the order of hours) for the output. Can we overcome this inconvenience and offer e-tailers much faster turn-around time?

The second option is motivated by the insight that the entity reference strings of many entities are themselves web search queries. If we simply treat each web search query as an entity reference string, we can offline generate synonyms for all queries. Although this process is extremely expensive as it involves synonym generation for all queries, in practice it can be done in a scalable MapReduce framework where the computation can be highly distributed. Further, this job only needs to be run periodically (say once every week). Computing synonyms for all queries typically takes one day to finish over two years of query click log. The computation output is a  synonym pairs file, or a synonym thesaurus, upon which very efficient lookup can be performed. With this option, we can generate the set of entity synonyms for a given set of entities very efficiently, since it only involves dictionary lookup for each of the input entity. This way, e-tailer can get the output almost instantly. Our publicly available entity synonym data service (https://datamarket.azure.com/dataset/bing/synonyms) adopts this option which eliminates the need to run batch MapReduce job given input.

