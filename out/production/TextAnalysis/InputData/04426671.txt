Algorithm for Efficient Data Mining

Abstract Over the years, a variety of algorithms for finding frequent item sets in very large transaction databases have been developed. Data mining algorithms are used extensively to analyze business, commerce, scientific, engineering, and security data and dramatically improve the effectiveness of applications in areas such as marketing, predictive modeling, life sciences, information retrieval, and engineering.  The problems of finding these frequent item sets are fundamental in data mining, and from the applications, fast implementations for solving the problems are needed. In this paper, we propose a new, fast and an efficient algorithm with single scan of database for mining complete frequent item sets. Our proposed algorithm works well without any tree construction.  At last we performed an experiment on a real dataset to test the run time of our proposed algorithm. The experiment showed that it was efficient for mining dense datasets.

Keywords? Data Mining, Frequent Item sets, Efficient Mining Algorithm.

1. Introduction.

Data Mining is a concept that is taking off in the commercial sec Data Mining is a concept that is taking off in the commercial sector as a means of finding useful information out of gigabytes of data. In Business and Marketing domains large volumes of data are stored in centralized and distributed databases. In Business application, data need to be analyzed for sales forecast, business planning and marketing trend etc. To take the decision making process in Business application, which is distributed over different geographical location, data mining is very essential. or as a means of finding useful information out of gigabytes of data[1]. In Business and Marketing domains large volumes of data are stored in centralized and distributed databases. In Business application, data need to be analyzed for sales forecast, business planning and marketing trend etc. To take the decision making process in Business application, which is distributed over different geographical location, data mining is very essential. Data mining research during the last eight years has led to the development of a variety of algorithms for finding frequent item sets in very large transactional databases. Frequent item set mining is one of the fundamental problems in data mining and has many applications such as association rule mining, inductive databases, and query expansion. From these applications, fast implementations of frequent item set mining problems are needed. Acquiring new customers, delighting and retaining existing customers, and predicting buyer behavior will improve the availability of products and services and hence the profits. Thus the end goal of any Data   DOI 10.1109/ICCIMA.2007.150    DOI 10.1109/ICCIMA.2007.150     Mining exercise in e-commerce is to improve processes that contribute to delivering value to the end customer [4]. Data mining uses algorithms to sift through huge volumes of information for the purpose of detecting patterns hidden in the data. Understanding these patterns quickly leads to improved business intelligence. For example, a computer hardware company studying maintenance contracts tries to understand why some customers did not renew their contracts.

Within the company, management believed that PC owners were likely to defect and mainframe customers were likely to renew. Standard reports showed this to be the case. However, with data mining, they quickly discovered that the mainframe customers with junior account managers were just as likely to defect as PC customers. The key indicator was not the computer but the experience of the account manager. This information had been masked by the practice of assigning more experienced account managers to mainframe accounts. Data mining [3] helps identify trends such as:  ? Why customers buy certain products very often.

?  Ideas for very direct marketing ?  Ideas for shelf placement ?  Training of employees vs. employee retention ? Employee benefits vs. employee retention.

Data mining is ready for application in the business environment because it is supported by three technologies that [2] are now sufficiently mature:  ? Massive data collection and storage ? Powerful multiprocessor computers ? Data mining algorithms.

1.1. Data mining algorithms.

Data mining algorithms embody techniques that have existed for at least ten years, but have only recently been implemented as mature, reliable, understandable tools that consistently outperform older statistical methods. In the evolution from business data to business information, each new step has built upon the previous ones. In business application, finding frequent item sets is very essential. Especially in a business application, which is distributed in different location, the process of finding frequent item sets is very important. Because in distributed business application, taking decision on improving profit in different location is not an easy task. If we use Apriori algorithm to find frequent item sets in distributed system, then we need multiple scanning of the transactional database which is cost. The Apriori [5] algorithm performs a breadth-first search in the search space by generating candidate k+1- itemsets from frequent k-item sets. The frequency of an item set is computed by counting its occurrence in each transaction. FP-growth is a well-known algorithm that uses the FP-tree data structure to achieve a condensed representation of the database transactions and employs a divide-and-conquer approach to decompose the mining problem into a set of smaller problems. In essence, it mines all the frequent item sets by recursively finding all frequent 1- itemsets in the conditional pattern base that is efficiently constructed with the help of a node link structure.

2. Proposed algorithm.

We develop a fast and an efficient algorithm based on the occurrences of items as well as by performing Logical AND operation. We develop a simple and an efficient algorithm.

Step 1:  Scan the Transactional database to construct the support count (SCT) table and Bit Form   Table (BFT)  Step 2: //In the table SCT, consider the group of nodes which satisfies the minimum support count.

Find the group of nodes which are fully connected (G) with each other.

Step 3: For all G,  (i) Perform Logical ?AND? operation on BFT.

(ii) Find the total value of the resultant value of Logical ?AND? operation.

(iii) If the total value of Logical ?AND? operation satisfies the min_support count, and then add ?G? to the frequent item sets LK  Example Table1: Transactional Database            Consider the above transactional database. According to the proposed algorithm, scan the above transactional database to construct the table SCT and BFT .Both the tables SCT and BFT had been constructed using arrays. Initially in SCT, all the location had been initialized to zero. After scanning the first transaction ?abe?, in the SCT for the locations ab,ae & be 1 will be added to their  previous value. After scanning the first transaction, the SCT & BFT as shown below.

Table 2: SCT                                                   Table 3: BFT         After scanning the second transaction ?bd? in the location bd of SCT 1 will be added to its previous value.

Table 4: SCT           Table 5: BFT  a b c d e a  1 0 0 1 b   0 1 1 c    0 0 d     0  Trans. Id Items 1 abe 2 bd 3 bc 4 abd 5 ac 6 bc 7 ac 8 abce 9 abc  a b c D e a  1 0 0 1 b   0 0 1 c    0 0 d     0  a b c D e 1 1 0 0 1  a b c d e 1 1 0 0 1 0 1 0 1 0      In this way, after scanning all the transactions in the transactional database, the SCT and the BFT are as shown below.

Table 6: SCT       Table 7: BFT   a b c d e a  4 4 1 2 b   4 2 2 c    0 1 d     0       According to step 2, consider the values only if it satisfies the min_support count value in SCT. Now, the SCT is shown below.

Table 8:SCT  a b c d e a  4 4 0 2 b   4 2 2 c    0 0 d     0  Find the fully connected nodes now.For the row ?a? under b, c and e the values satisfy the min_support count value.Therefore check the item sets ?abce? is a fully connected or not.

For the ?a? row under b, c & e- non-zero values are present.For the row ?b? under c &e- non- zero values are present.For the row ?c? under e ?zero value is present. That means ?c? and ?e? cannot be combined in any way in frequent item sets.Therefore the fully connected item sets may be ?abc? and ?abe?.Now we can clearly find that both the item sets are fully connected.

After performing Logical [6] AND operation for abc and abe using BFT we will get the total values as 2 and 2 respectively. Since the total value of the Logical AND operation satisfies the min_support count value we can add these two item sets (abc & abe) to Lk- frequent item sets. For 2-itemsets, we can directly write it from SCT with their support count.

If necessary for 1-itemsets also we can write it from SCT directly (we have to make an entry while creating SCT). Similarly  find the remaining fully connected item sets by checking all the rows of SCT(Table 6) and find the Logical AND operation for them to find whether that fully connected item sets are  frequent item sets or not. . In our proposed algorithm, we can find the frequent item sets for all n-item sets as in Apriori algorithm. In Apriori algorithm, multiple scanning is needed for finding frequent item sets. But in our proposed algorithm, only one scanning of database is enough and there is no need of constructing tree.

3. Comparative Study.

In Apriori algorithm,  ? To discover a frequent pattern of size 100 (for example {a1, a2, ..., a100})one needs to generate 2100 = 1030 candidates  ?  Multiple scans of the database are needed (n+1 scans if the longest pattern is n items long)  a b c d e 1 1 0 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 1 0 1 0 1 0 0 0 1 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 0     ? Even though number of scanning of databases had been reduced in FP-Tree algorithm, the most difficult problem concerning it is to handle updates in the database. Once some new transactions are added, a new FP-tree has to be constructed to deal with these changes.

? In our proposed algorithm, all the above said problems of existing algorithms had been removed and the frequent item sets can be obtained in an easy and efficient way.

4. Experimental Results.

We performed an experiment on different data sets with different sizes to test the run time of our proposed algorithm and FP-Growth algorithm. The results are shown in Figure1.

Table 9: Run Time for Proposed and FP-Growth   Time in Seconds  Data sets  Data Size in KB Proposed FPGrowth  1 90.2 2.141 2.553 2 25.8 2.14 2.144 3 44.5 2.281 2.777 4 7.62 2.109 2.135 5 33.7 2.109 2.443 6 92.6 2.109 2.366   Figure1.FP-Growth Vs Proposed algorithm  5. Conclusion.

In this paper, we have presented a simple and new algorithm for mining frequent item sets. In the existing Algorithms, numbers of scans are needed stage by stage to find out the frequent item sets or  more  steps are involved in finding frequent item sets and are Tree-based. But in our proposed algorithm, repeated scanning of transactional database has been eliminated and the procedure applied for finding frequent item sets is very easy to understand and to implement and moreover it is not Tree-based algorithm.

6. References.

[1] Jagoda Crawford & Frank Crawford Information Management, Data Mining in a Scientific Environment, ANSTO, PMB 1,  Menai NSW 2234 Australia [2] http://www.thearling.com/text/dmwhi te /dmwhite.htm [3] http://www.ir.iit.edu/~ophir/cs761/OverviewDataMining.pdf [4]  N R Srinivasa Raghavan, s?adhan?a Data Mining in E-Commerce: A Survey, vol. 30, parts 2 & 3, April June 2005, pp. 275?289.

[5] Mingjun Song, and Sanguthevar Rajasekaran, Member, IEEE, A Transaction Mapping Algorithm for Frequent 472- 481.

[6] Doug Burdick, Manuel Calimlim and Johannes Gehrke.MAFIA: A Maximal Frequent Itemset Algorithm for Germany, April 2001.

