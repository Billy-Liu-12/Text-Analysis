Geotemporal Analysis Stephen G. Eick, Andrew Eick, Jesse Fugitt, James E. Heath, Mark Ross

Abstract We have developed thin client AJAX Web 2.0 visualization components called GeoTimelineTm and GeoTimeWheelTM for displaying temporal event data with geospatial information. The components are interactive, live, linked and contain many novel features for understanding temporal and geospatial patterns in event data. Our underlying data model extends GeoRSS and thus enables us to ingest common geo-coded data from web feeds. Our system is suitable for both off-line analysis of static datasets and real-time monitoring of live feeds.

TABLE OF CONTENTS  1. INTRODUCTION.........................1 2.RELATED WORK.........................2  3. GEoBOOST GEOTIMELINETM - VISUALIZING EVENTS IN TIME AND SPACE.........................2 4. GEOBOOST GEOTIMEWHEELTM - ANALYZING CYCLIC EVENTS.........................3 5. COMBINING GEOTIMELINE AND GEOTIME WHEELS  WITHGEOBOOST MAPS.........................4 6. SYSTEM IMPLEMENTATION .........................5  7.SUMMARY AND CONCLUSIONS......................... 6 8. REFERENCES.........................6 9. BIOGRAPHIES.........................7  1. INTRODUCTION We have developed a sequence of visualization and analytical techniques for understanding streams of time-oriented events that have spatial attributes. These techniques are implemented in a thin client software environment called GeoBoostTM (1). This type of data is quite common and includes, for example, streams of news articles where the events in the articles are geo-located, the sequence of observed positions of a delivery vehicle as recorded by an onboard GPS, and even the times and locations of Avian Flu Pandemic as reported by the government (2).1 2  Data of this type are commonly published using GeoRSS (3).

GeoRSS is a rather simple extension of RSS, an XML specification for publishing information that includes geographical encodings to describe the location of the feed event. There are two types of GeoRSS. The most basic type includes a "point" tag:  <georss:point>45.256 -71.92</georss:point>  that positions the event at the specific longitude and latitude. The  11-4244-1488-1/08/$25.00 C 2008 IEEE 2 IEEEAC paper # 1117, Version 5, Updated October 21, 2007  more complex type includes support for richer geospatial features using GML (4):  <georss:where> <gml:Point> <gml:pos>45.256 -71.92</gml:pos>  </gml:Point> </georss:where>  GML allows the geographical attributes to be described using squares, circles, and other complex polygons. Using GML it is possible to specify rich spatial attributes that are associated with the event.

The goal of our visualizations is to enable analysts to quickly grasp patterns latent in the temporal geospatial information. The patterns might involve geospatial relationships among the events, temporal relationships and cyclic patterns based in time, and other geo- temporal relationships.

There are four novel aspects to our work. First, our work focuses on geo-temporal relationships. We have combined traditional visualization techniques, e.g. timelines, time wheels, and maps in a novel way for understanding temporal information.

Second, we have improved upon traditional visualizations by adding interactivity. Each of our visual components is live, dynamic and interactive. Our visual components are building blocks that enable web authors to publish time-oriented geospatial content.

Third, we have built our software using Web 2.0 (5) techniques.

Our visualizations are browser-based and provide rich interactivity completely within the browser. The advantage of thin-client browser-based software is that it is easily accessed and may be broadly deployed without need for complex administrative procedures.

Fourth, our system is designed to ingest live (Geo)RSS data streams. RSS has become the standard way that streaming information is published on the web. By embracing this format we fit naturally into existing web infrastructures. Furthermore, since our visualizations are live, they automatically ingest new information as it is published by the information providers. New events are placed automatically on our maps and in our other visual components within a second or two after they are published.

We have added special features such as event "fade out" to support real-time monitoring tasks and situational awareness.

There is a huge advantage in embracing web protocols and building web infrastructure directly into our technology. By incorporating web technology we have included many of the most significant ideas from the web including open standards, real-time collaboration, and flexible but simple data models. The result is that we have built a powerful web-based capability for visualizing    temporal geospatial information.

2. Related Work The recent emergence of game-changing technologies such as the common availability of inexpensive GPS's and the popularity of Google Maps and Google Virtual Earth, geospatial visualization is an active research area. In the limited amount of space for this paper, it is only possible to mention a few of the projects that have influenced us.

Penn State's GeoVista is a very sophisticated Java application and development environment for building geospatial applications (6) (7) (8) and (9). GeoVista provides a rich, linked-view environment (10), and (1 1) for understanding geospatial heath care information.

Tufte (12) and (13) suggests a technique called "small multiples" for understanding where successive frames from an animation are tiled around the screen to display the information. Another project, GeoTime (14), demonstrates a 3D technique that combines geospatial with temporal information by mapping time to the z- axis in the view. In contrast to most previous projects, our focus is on web-based geospatial visualization where the visualizations run natively within the browser and exploit browser technology.

Two projects in particular have a similar focus and have influenced us. The first is MIT's SIMLE Timeline (15). The SIMILE Timeline is a web-based, multi-scale interactive timeline for understanding events in time. The second project is Google Maps (16) and a closely related effort at Microsoft that was originally called Microsoft Virtual Earth (17) and has subsequently been renamed Microsoft Live Maps. What Google showed is that is possible to do live interactive maps completely in a browser without need for complex desktop software.

These two projects are particularly interesting because that demonstrate that it is possible to build interesting software that is completely browser based and that show the utility of embracing open web protocols to enable users to create mashups. A mashup is a website that combines content from several sources into an integrated experience.

3. GeoBoost GeoTimelineTM - Visualizing Events in Time and Space  GeoBoost's GeoTimelineT is a web application used to visualize and interact with time stamped data in a browser without the need to install any additional software. To be more specific, our GeoBoost GeoTimelineTM is a thin client, AJAX enabled visualization of temporal data that is interactive and linked to other visualizations, such as maps and business charts. A number of important features make the GeoBoost GeoTimelineTM unique, including:  a) b) c) d)  e) f) g) h) i) j)  running in a thin client with no software install, interactive panning and interactive zooming different time scales, synchronization to other Timelines (detail and summary views), built in RSS support, linking to other visualizations, several data display modes, ability to select specific data items, ability to highlight specific data items, rich API to program against,  k) built in Toolbar, 1) visual scalability (overplotting) (18), m) best fit algorithms n) y axis plotting (line chart capability)  The GeoBoost framework, described below, provides the means of ingesting real-time and historical data that is often published as a (GeoRSS) feed. Once data is ingested into the thin client, it is stored as a collection of items, which is the basic data structure displayed by the different visualizations in the GeoBoost framework. The Timeline visualization itself can be thought of as a series of rectangle tiles that each represent one unit of time and are placed horizontally to fill up a specified number of pixels on the web page. The unit of time represented depends on the scale of the timeline, which can be set to Year, Month, Day, Hour, Minute, or Second.

Figure 1. Two GeoBoost GeoTimelines linked to show multiple timescales.

Figure 1 illustrates two simple GeoTimelines placed on a web page. The "Overview" GeoTimeline is set to Month scale and the "Detailed" GeoTimeline is set to Day scale. Each tile is labeled with its starting date and end date. Small vertical dashes are intelligently placed on the tile to indicate familiar time intervals and subintervals. For instance, the day tiles show each hour of the day as the smaller subinterval marks and the larger tick marks are used to divide the day into quarters. The tiles are automatically generated and labeled using configurable settings for background color and date format.

GeoTimelines are interactive. As the user drags a GeoTimeline to the left or right using the mouse, new tiles are created and destroyed to give them the impression they are "panning" through time. This new Web 2.0 interaction capability for web pages (where no page refresh is required was made popular by Google Maps and other rich internet applications) is very intuitive and easy to understand for users familiar with browser-based applications.

In addition, simple buttons on the toolbar allow the user to zoom the timeline in or out and to change the current timeline scale.

The advantage of using two (or more) GeoTimelines as shown in Figure 1 is the fact they can be synchronized together. When the user pans one of the GeoTimelines, the other GeoTimelines scroll accordingly. The blue lens in the center of the top GeoTimeline represents the entire time period displayed in the bottom GeoTimeline. This capability is desirable when attempting to display a summary level and detailed view of the same data.

The simplest approach for displaying time stamped data on a GeoTimeline would be to plot objects corresponding to the data     items on the timeline "canvas." This approach could support basic interactive operations like tooltips, selecting and highlighting individual items or toggling an item's visibility. However, implementing more advanced features such as hiding a group of items become computationally expensive. A second disadvantage of this approach is that it does not gracefully extend to display data from multiple data feeds described by many RSS feeds.

To overcome these problems our implementation renders each timeline event feed as a separate transparent overlay on top of the raw timeline canvas. Each overlay may be independently populated using different event feeds and the Z-order of the overlays may be adjusted. One advantage of this approach is that it is trivial to configure properties of an overlay such as toggling its visibility or changing its event feed.

Figure 2 Simple Events on GeoTimeline.

Figure 2 shows GeoTimeline's capability to ingest two separate data feeds corresponding to events generated from two Objects and display both feeds together on the same GeoTimeline. Red circles are in one overlay and indicate time stamped events for Object 1 and blue circles are in another overlay and indicate time stamped events for Object 2. With a single function call, all of the events for Object 1 could easily be hidden by setting the overlay's visibility to hidden. This is computationally much less expensive than iterating through each individual event for Object 1 and setting that individual event's visibility to hidden.

GeoTimeline's toolbar contains several useful buttons that allow the user to manipulate how the individual data items are displayed.

Text labels can be shown for the individual items and the item can be drawn as a circle, tick mark, sphere, or as a custom image (on a per item basis). Figure 3 shows the same data items from Figure 2 but with different display options set on the toolbar. Also, if the event for the data item has a duration, that time period can be displayed as a solid rectangle.

Figure 3. Eliding events corresponding to Object 1 simplifies the display.

One problem with timeline labels is overplotting for large numbers of events. To overcome this problem, GeoTimeline uses a best fit algorithm to place the data item as well as the text label and date range in the appropriate place on the canvas. If there is not enough space to place the item, the algorithm will move down the y axis until the item would be plotted off the visualization. In that case, an overplotting indicator (small dash at the bottom of the Timeline) indicates there is a data item at a certain point in time that cannot fit on the current display. The overplotting indicator acts as a visual cue to the user that they there is additional data at that moment in time and they could potentially view it by zooming in the timeline. An advanced use of GeoTimeline (not shown) is to use some property of the data items as a value that allows it to be plotted on the y axis. Essentially, this turns the Timeline into an interactive line chart with time along the x axis. Lines can optionally be turned on to show trends for each series of data items through time.

GeoTimeline supports highlighting, tooltips as well as select and sweep select for data items. This feature will be discussed below as it illustrates how analysis can be done when GeoTimeline overlays are linked to other visualizations like our GeoBoost Map and GeoTimeWheel.

4. GeoBoost GeoTimeWheelTM - Analyzing Cyclic Events  The GeoBoost GeoTimeWheelTM is a temporal visualization that plots temporal data on a radial chart similar to an analog clock face. Each hour of the day is represented as a different slice on the GeoTimeWheel and concentric rings represent each day of the week. It is an effective visualization to view cyclic events and answer questions like "What time of day do the most events occur?" or "What day of the week appears to have the most acitivity?" Temporal patterns become apparent that would be hard to spot when visualizing data using GeoTimeline over a long period of time.

Like GeoTimeline, the GeoTimeWheel is the basic visualization that exists under the overlays of data. Each slice (representing an hour of the day) can have a custom style to draw attention to that time period or simply break up different portions of the day. Data feeds are stored as collections of items which are then used to populate GeoTimeWheel overlays in the same manner as Timeline overlays. Figure 4 illustrates a simple use case for the GeoTimeWheel. A single overlay, made up of events from Object 1, has been attached to the GeoTimeWheel. By glancing at the     GeoTimeWheel visualization, it is apparent that most data occurred between 5:00 and 7:00 from Monday to Friday by simply noticing the clustering of points.

Figure 4 GeoBoost GeoTimeWheel shows cyclic patterns in temporal data.

The toolbar for the GeoTimeWheel is similar to the one that appears on GeoTimeline. It can be used to switch between display modes or to enable labels and date ranges for the data items. Data items can be shown as circles, tick marks, or colored tick marks.

There is no concept of panning or zooming the GeoTimeWheel, although functionality like highlighting, selection, and sweep selection are all supported so that the data displayed in the GeoTimeWheel can be linked to other visualizations. One option unique to the GeoTimeWheel is its ability to calculate the size of each slice based on the number of events that occurred during that time of day. Instead of each slice being equal in size, each becomes proportional to the number of events that occurred during that hour, allowing the user to see a quick volume analysis by hour of the collection of data items.

5. Combining GeoTimeLine and GeoTime Wheels with GeoBoost Maps  Visual Analysis with Linked Charts The GeoBoost framework is a set of linked visual components. Its power comes from its ability to display linked visualizations of real time and historical data. Viewing the data by itself on a GeoBoost Map or on a GeoTimeline might be helpful, but is limited in that it might not be possible to easily spot certain patterns or outliers in the data. Visualizing the data in multiple charts on the same page improves the ability to see different aspects of the data, but the real functionality comes from the GeoBoost's framework to highlight and select data items in one visualization and see the selections  propagate instantly to all other linked visualizations.

Figure 5. Linked GeoBoost visual components.

Figure 5 shows an example of three linked GeoBoost components.

On the top there is a GeoTimeline. Below the timeline is a GeoBoost map. On the right there is a (very simple) GeoBoost graph component showing relationships. An object on the Graph on the right is being moused-over by the user causing a tooltip to be shown describing the object. More importantly, however, this operation causes the blue data items on the GeoBoost Map and GeoTimeline to instantly highlight (outlining themselves in yellow), and thereby help the user visualize the "where" and "when" about the object's events. Each GeoBoost visualization component offers a user a different way to visualize the data items.

Linking unifies across the visualizations and allows the analysts to construct a mental model of the events in both time and space.

Often, a user wishes to select all data items that occurred at a specific point (or range) in time. For example, Figure 6 shows a user sweep selecting all events that occurred over the period of days in the Timeline. Instantly, those events display as selected in the GeoTimeWheel and GeoBoost Map components to also tell the user "where" those events occurred and "what time of day" those events occurred.

Figure 6. Sweep selecting a time range.

GeoTimeLine and GeoTimeWheel help users correlate "when" and     "where" for events. They enable users to find clumped or regularly occurring temporal events which would be impossible to find when viewed as a linear stream of data. Figure 7 shows a ISnhronizedmainesandpm regularly occurring event in the center of the top GeoTimeline and P.. p"rm haV ^mdx also a large clumping of temporal events towards the right of the ,, rC i top Timeline. Sweep selecting either of those groups of events shows "where" the events occurred or "when" they happened.

Figure 7. Clumping analysis of street crimes in Washington DC.

Figure 8. Temporal, spatial, and cycle analysis of news events for the Washington DC area.

Figure 8 illustrates how the clumping of events can be analyzed spatially on a map, temporally on a GeoTimeline, and cyclically on a GeoTimeWheel. The GeoTimeWheel shows that most of the new events occurred during the first 3 to 4 hours of the day. As new events occur they can be compared to previous events to see if they match the previously seen patterns.

Figure 9. Real-time monitoring of events for situational awareness. Old events "fade out" through time and eventually disappear.

Figure 9 shows GeoBoost Map and GeoTimeline used in a real- time monitoring mode. The GeoBoost platform continually monitors GeoRSS providers. As new events occur, they are automatically added to the map and timeline using AJAX programming techniques. One of the problems with real time monitoring is that eventually the display accumulates too many events which cause visual confusion. To overcome this problem, the GeoBoost visualization component automatically fade out the old events over time as they age. Aging off items gives the user a quick visual cue as to which events are the oldest and newest based on the data items' opacity.

6. System Implementation The GeoBoost framework, GeoTimeline and GeoTimeWheel are implemented as a set of JavaScript classes and thin client components. Using these components an application developer can create advanced thin client visualizations the run natively within web browser. The overall architecture consists of data components, visualization components, and framework/utility components.

From a data ingestion perspective, there are several classes that allow the framework to pull in RSS and GeoRSS data feeds. As pointed out in the introduction, RSS is a simple protocol for publishing information. The basic content of an RSS stream is a set of metadata tags organized into items that describe content.

The required tags in each item are <title>, <link>, <description>, <pubDate>, <guid>. The <link> tag is generally a hyperlink to retrieve the item content. Extending RSS with namespace extensions allows data to be added to a standard RSS feed without breaking existing parsers that understand RSS. GeoRSS extends RSS by adding location information.

One problem that we had is that we wanted specific shapes for some of our applications that were not part of the GeoRSS specification. These included ellipses, sectors, and slices of a circle. Although these shapes could be represented in GeoRSS using a GML polygon, it would be rather cumbersome. To overcome this problem, we developed a thinc name space extension to GeoRSS that specifically included our shapes. For example, the specification  <georss:where>     <thincml:sector center="38.82, -77.12" radius="4000" insideradius="3000"  arcangle="45"> </georss:where>  startangle="90" framework and into our components. The value of this is that attaching our components to a live data stream is the same operation as analyzing a fixed data source. Live and static data are handled by a unified model.

represents a sector of a circle or a pie wedge if the inside radius is zero.

By default, GeoBoost uses a XmlHttpRequest wrapper classes to asynchronously retrieve XML data from the server. This is how RSS and GeoRSS events are pulled asynchronously from the server by the web clients. The advantage of this approach is that XML data is quite standard and well understood. The disadvantage is that parsing XML data on a JavaScript client is somewhat cumbersome and slow. Recently, however, it has become popular in mashup applications to use the HTML <script> tags as a transport mechanism for pulling events from a server to a JavaScript client. We recently implemented support for for JSON (JavaScript Object Notation) items so that once the data arrives on the client, the data items are parsed directly into an item collection.

The basic idea in the GeoBoost framework is that data is represented using an ItemCollection class which is modeled after GeoRSS. By default, each data item has all of the attributes from the GeoRSS feed. GeoBoost visual components display data taken from ItemCollections. If two components are displaying the same ItemCollection, they are automatically linked via tooltips, selection, and highlighting. Item collections may be created and updated programmatically, via JSON, or by monitoring RSS providers.

Once a data item collection is loaded, it can be passed to one of the many visualization classes to be rendered. In addition to the temporal visualizations described previously, GeoBoost includes Map, Graph and standard business charts (e.g. Bars, Pies, Lines) visualization components.

Various utility and framework components exist to make working with the visualizations easier. An abstract rendering library to abstract vector drawing functions inside the visualizations so that GeoBoost platform will not be tied to a specific rendering API.

For instance, SVG is currently the most standardized vector drawing language available in modern web browsers, but other technologies like VML and WPF/E exist that could be used in place of SVG. By supporting different underlying renderers in our framework, our visualizations can run in a variety of web browsers depending on which vector languages they support.

7. Summary and Conclusions We have developed thin client, Web 2.0 AJAX visualization components for displaying temporal data. Our components display the data spatially on a map, temporally on a timeline and cyclically on a time wheel. The components are linked so that interactive operations, e.g. selection, tooltips, highlighting, automatically propagate to other components on the page. The components are particularly rich and include many features for understanding time- oriented event data. Some of the more interesting features include "fade outs," best fit algorithms for labeling, and techniques to increase visual scalability.

Our data model extends RSS and GeoRSS. Our idea is that information is now published as RSS and thus this idea and simple data structure is embedded throughout GeoBoost. By cleverly using AJAX technology, we have incorporated ideas from real- time monitoring and situational awareness right into our  There is nothing new about linked view visualization components.

What is new about our approach is that linking between the components is done completely in a thin client using JavaScript built around ideas from RSS. What is rather remarkable is how well it works. The interactive performance of our components are all real-time and often faster than equivalent desktop software. I have been told more than once that it is not possible to write thin client software that performs so well.

A downside of thin client applications is performance. Our JavaScript library overcomes this limitation for many visualization tasks. The upside of thin clients is that they inherit all of the benefits of the web including built-in collaboration, light weight protocols, hyper-linking, etc.

8. References 1. Thin Client Visualization. Eick, S. G., et al. 2007. Draft Manuscript Under Preparation.

2. AvinFlu.gov. Pandemic Flu website. [Online] www.pandemicflu.gov/index.html.

3. Geo, W3C. Geographically Encoded Objects for RSS feeds. GeoRSS Home. [Online] http://www.georss.org.

4. Wikipedia. Geography Markup Language. [Online] http://en.wikipedia.org/wiki/Geography_Markup_Language.

5. O'Reilly, Tim. What is Web 2.0. [Online] http:/www.oreillynet.com/pub/a/oreilly/tim/news/2005/09/3 0/what-is-web-20.html.

6. MacEachern, A. M. Visualization in Modem Cartography, Setting the Agenda. [book auth.] A. M.

MacEachem and F. (Eds.) Taylor. Visualization in Modern Cartography. s.l.: Pergamon, 1994.

7. Mapping Health Statistics: Representing Data Reliability.

MacEachern, A. M., Brewer C. and Pickel L. Barcelonia, Spain: s.n., 1995. International Cartographic Conference.

8. Explorator Cartographic Visualization: Advancing the Agenda. MacEachern, A.M. and Kraak, M. 1997, Computers and Geosciences, pp. Vol. 23, pp. 335-344.

9. Exploring High-D Spaces with Multiform Matricies and Small Multiples. MacEachren, A. M. [et al.]. 2003.

Proceedings of the International Symposium on Information Visualization.

10. High Interaction Graphics. Eick, S. G., and Wills, G.

1995, European Journal of Operations Research, pp. 445- 459.

11. Visual Discovery and Analysis. Eick, Stephen G. 1, Visualization, Vol. 6, pp. 44-59.

12. Tufte, Edward. Envisioning Information. Chesire, CT: Graphics Press, 1990.

13. . Visual Explanations. Cheshire, CT: Graphics Press, 1997.

14. GeoTime Information Visualization. Kapler, Thomas and Wright, William. s.l.: IEEE Computer Society, 2004.

Proceedings of the IEEE Symposium on Information Visualization (NFOVIS'04). pp. 25-32.

15. SIMILE. (Semantic Interoperability of Metadata and Information in unLike Environments). SIMILE Timeline.

[Online] http://simile.mit.edu/timeline/.

16. Google. Google Maps. Google Maps. [Online] http:llmaps.google.com.

17. Microsoft. Virtual Earth. [Online] http://maps.live.com.

18. Visual Scalability. Eick, Stephen G. and Karr, Alan F.

1, 2002, Journal of Computational Graphics and Statistics, Vol. "1, pp. 22-43.

9. BIOGRAPHIES Dr. Stephen G. Fick is afellow of the American Statistical Association, has received 30 patents, and has founded three startup companies. He is a leading academic information visualization researcher, has published over 75 refereedpapers, and has won many  awards for his technology including the Bell Lab 's President's award and the 2000 Computer-world Smithsonian awardfor key technologies that change the way people live and work. His educational background includes a B.A from Kalamazoo College, MA from the University of Wisconsin at Madison and his Ph.D. in Statisticsfrom the University ofMinnesota.

M. Andrew Eick has architected, developed and deployed many large scale content development and distribution applications. He has led development ofa 50,000 seat client application deployed worldwide in over 20 languages on every continent, and architected and led development ofa websitefor a leading  automotive manufacture which serves in excess of30 million logins a month. He has won numerous awards and recognition including three software patent's, an industry Trade Secretfor software invention, the Vice Presidents Select Project award, and the Division Outstanding project Award.

