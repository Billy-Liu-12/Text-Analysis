A New Concise Representation method of Generalized Frequent Itemsets

Abstract  Mining generalized frequent itemsets is one of important research area in data mining. Because not only the taxonomy data is widely exist, but also the information provided by the generalized frequent itemsets is richer and valuable than the traditional frequent itemsets. Like the traditional mining, the number of the generalized frequent itemset is also very large, which make it difficult to do further analysis. We propose a new method called CGIP-summary, which represent the whole frequent generalized itemsets by a set profiles and the profiles used to more concise.

1. Introduction Frequent Itemset Mining [1?4] is to find interesting frequent patterns from large transaction database, then provide the service of management decision and business marketing. This now has become the hot research direction in data mining. In real-life datasets, the items composed of transaction are taxonomy such as in Figure 1. In supermarket scenario, ?bread? can be classified into ?white bread? and ?wheat bread?, and ?wheat bread? is-?bread?, and we can say ?bread? is the generalization of ?wheat bread?. In this case, it is possible that itemset {wheat bread, milk} is infrequent, but {bread, milk} is frequent. Therefore taxonomy based frequent itemset mining can discover more informative, valuable information than traditional data mining.

To mine the generalized frequent itemsets[5-9], there are two different ways: Multi-level Frequent Itemsets Mining (MLFIM) and Generalized Frequent Itemsets Mining (GFIM). But this leads to enormous increase in candidate itemsets to be evaluated because much more generalized items are frequent than traditional frequent itemsets. And making the problem of MLFIM worse are too large. Now in the area of MLFIM, the solutions are Closed Frequent Itemsets Mining and Maxmium Frequent Itemsets Mining. In this two mining method, although the result is the  concise representation of generalized frequent itemsets, and the relationship of results and original frequent itemsets are broked. Recently, Yan[10], Jin[11], Ardian[12]  study the representation of frequent itemsets with  the profile of itemsets, which can not only compress the scale of frequent itemsets, but also preserve the relationship of result and the original frequent itemsets.

In this paper, By utilizating of the characteristics of taxonomy and closed itemset, we provided another compressing method named Closed Generalized Itemsets Profile summary (CGIP-summary), which can reduce the scale of generalized itemsets greatly.

Fig.1 Example of the taxonomy data in retail trade  2. Problem Statement Database is composed of transactions that can be  expressed as D={t1,t2,?,tn}. Suppose ti(i=1,2,?,n) is the unique identifier of one transaction signed with Tid, then a transaction is represented with a set of Itemlist.

When all elements {i1,i2,?,ik} of one itemset A are in transaction ti, we say transaction ti include itemset A, signed as ti?A. All transaction sets which include itemset A are represented with DA={ti|A?ti,ti?D}. The support of itemset A is the proportion of transactions which include itemset A and noted as Supp(A)=|DA|/|D|.

The |DA| is the transactions that include itemset A,  and |D| is the total numbers of the transaction database. To   DOI 10.1109/ICCSE.2012.21     the minimal support: ?minsup, if Supp(I) ?minsup, then we say itemset I is frequent.

We define other definitions related with itemset profile as following.

Definition 1. Itemset Profile (IP). A Itemset Profile can be expressed as IP={w:base<supp>|i1<Pr(i1)>, i2<Pr(i2)>, ?, in<Pr(In)>}, and w is the weight of IP. Base means the base of IP. ik represents any item of IP, among which, k=1,2,3,,,n. Pr(ik) is the probability of ik. If the item set of IP noted as IIP={i1,i2,,,in}, then IP covers the items of {x|base? x? base? IIP}.

Definition 2. The Probability Distribution of Item. Suppose all Frequent Itemset (FI) can concisely be expressed by their IP: IP1,IP2, ?, IPl, and then we define D =  i  l  fi i  D ?  by their  i  yy  fi i  Df ?  , and the item of IP?s probability distribution is  Pr(ik)= '  | ' | j D  i j  t t  D ?   , t?D.

Definition 3. The Support of Itemset Profile.

We define the IP?s support as that:  Supp(IP)= | ' | | | D D  Definition 4. The Pre-estimated Support of Itemset. We can estimate a itemset X?s support according to IP like that  ( ) Pr i X  Supp X w ?  ? ?( )Supp( )  Definition 5. Rehabilitation Error. The difference between a itemset X?s estimated support and its real support is the rehabilitation error, noted as  sup( )( ) |1 | sup( )  Xerr X X  ? ? sup( )  Definition 6. Precise Estimation. A itemset X can be rehabilitated only when the following two conditions are satisfied  ? If  X is infrequent, then supp(X)< ?minsup, and ( ) minsupSupp X ??  s eque ( )Supp( ? .

? Given the error  , if X is frequent, then  ( ) , err(X)<minsupSupp X ? ?( )Supp( .

Definition 7. Valid Itemset Profile (VIP).  A IP is valid only when it?s covered item sets can be derived from IP by precise estimation.

Definition 8. Valid Summary (VS). The Valid Summary of a transaction database D is a set of Valid Itemset Profile {IP1,IP2,...}, and any frequent itemsets in database D are covered by one IP at least.

To taxonomy and the associated rule, we define the following concept.

Definition 9. Taxonomy. Generally speaking, taxonomy can be depicted by Directed Acyclic Graph noted as Tax=(V,E) , V is the set of all item nodes, E is the set of all edges, V 0 represents the root node, each node represents a generalized item. For any simple path P=(v0,v1,?,vn), then :  (1) vn?1 is the parent item of vn noted parent(vn).

In contrast, vn is the child item of vn-1 noted child(vn- 1).

(2) v0,?,vn?1 are the ancestor items of vn, noted ancestor(vn). In contrast, v1,?,vn are the descendant items of v0 , noted descendant(v0).

(3) For any items x,y,z, if x and y are the children of z, then x and y are brother items.

(4) The depth of item v refers to the level of v located in taxonomy data, noted depth(v).

(5) If depth(vi) equals to depth(vj), we call vi and vj sibling items.

(6) An item without any children called leaf item.

(7) The items, except root and leaf items, are called interim items or generalized items (g-item).

Definition 10. Generalized Itemsets and Generalized Frequent Itemsets. In taxonomy, we call itemset IG Generalized Itemset which do not include any item and its ancestor or its descendant item at the same time. Any generalized itemset IG?s support is     defined as supp(IG)=|TG |/|T |. IF Supp(IG) ?minsup(?minsup is defined by user which represents the minimal support.), then the generalized itemset IG frequent.

Definition 11. Ancestor-Descendant generalized itemset. Given itemsets X1, X2?I, if |X1|=|X2|, and X1.itemi=X2.itemi 0?i<|X1| , and X1.itemj= ancestors X2.itemj i<j?|X1| , we say X1 is the ancestor itemset of X2.

Definition 12. The ?? operation between two generalized itemsets. Given two items i1, i2, if i1 is the ancestor of i2, then we say i1??i2, that is because , in taxonomy ?, we can see i1 is the generalized item of i2, and if i2 is frequent, then i1 also frequent, furthermore, ? i1 ?? i2 . Given generalized item i1 and generalized itemset G, if ?i2?G, i1??i2, and then we say i1??G. Given generalized itemsets G1 and G2, if ?i1?G1, ?i2?G2, i1??i2, and then we say G1??G2.

Definition 13. The ?? and ?? operations between generalized itemsets. Given generalized itemsets G1, G2, let G= G1??G2, then ?i1?G, we have i1??G1 or i1??G2. Let G= G1??G2, then ?i1?G we have i1??G1 and i1??G2.

3. The CGIP-summary  To solve this problem, we introduce the definition of frequent closed itemsets firstly.

Definition 14. Complete Lattice. Suppose <L, ?> is partial ordered set, and we can call <L, ?> a complete lattice, only when any subset of L have the least upper bound and greatest lower bound at the same time. Specially, = ?= L, L is the least element, and ? = ?= L, L is the greatest element. Among which, and are the operators of least upper bound and greatest lower bound separately. Completed Lattice <L, ?> can be expressed with <L, ?, , , , ? >. For example, the set comprised of leaf nodes and its? ancestor nodes construct a completed lattice.

Definition 15. Galois connection. Suppose (P, ?) and (Q, ?) are two partial ordered set, and ?: P?Q, ??Q?P are two mapping operators. Ordered pair <?, ?> are called as Galois connection, only when ?x?P,  ?y?Q, ?(x)?y, and x??(y), here ? is abstract operator, ? is concrete operator.

From the definition of Galois connection, there are two lemmas about abstract operator ? and concrete operator ?.

a) ?x?P, x??(?(x)) b) ?y?Q, ?(?(y))?y c) ? and ? are monotone increasing.

Which can be easily proved, Galois connection  has the following lemma.

(1) The addition of two Galois connection also is Galois connection.

(2) Broad sense of Descartes is a Galois connection.

For example, in taxonomy, the operation of searching for one node?s ancestor is the operation of abstract ?, correspondingly, the operation of searching for one node?s descendants is the operation of concrete ?.

Definition 16. Galois closure operators.

Suppose <L, ?> is a partial order set, if mapping operation ?:L?L satisfy the next two condition, then ? is the closure operator of L  (1) ? is increment, ?x?L, and x??(x).

(2) ? is idempotent, ?(?(x))= ?(x).

Definition 17. Closed Itemset (CI . Given  itemset X, if there does not exist the super set of X, X?(X?X?) having supp(X)= supp(X?), then we call X Closed Itemset.

Definition 18. Frequent Closed Itemsets (FCI).

Given any closed itemset X, if supp(X) ? ?minsup, then we call  X Frequent Closed Itemset, and it can be expressed as (FCI): {X | supp(X) ? ?minsup. There does not exist X?, X?X?, having supp(X) = supp(X?)}.

From the definition, have the Lemma 1.

Lemma 1. Any itemset X itself and null are closed itemsets. Any closed itemsets?s intersection is closed itemset, and any finite closed itemsets? union are closed itemset.

3.1 Main idea Taking advantage of closed itemset with the same support with the itemset, then we can add base?s closed itemset in it?s covered itemsets validly, but the number of profile can not be cut efficiently. To extend this method to generalized frequent itemsets mining, we add profile set in generalized covered itemsets, then one itemset?s profile can cover more itemsets, this cut the scale of generalized covered profile greatly.

Next , we give the definition of closed generalized itemsets profile.

Definition 19. Closed Generalized Itemset Profile (CGIP . CGIP={w: (B?Bg)([B]C?[[B]g]C)(s,sg)|GIP} W is the weights, B is the base, and Bg is the generalization or ancestor of B. [B?Bg]c  is the closed item of B?Bg. s, sg are the supports of B Bg seperately. GIP is the generalized itemset profile. The covered itemsets of CGIP {X1?X2|B?X1?B? [B] IGIP, [B]g?X2? [B]g? [[B]g] IGIP }.

The generalized itemset of one closed generalized itemset profil?s support can be caculated as that.

( [ ] [ ] )  , ( ) ( ); ? ( ) { , ( ) ( );  ( ), .

C g C  IP IP  cgip GIP IP g  GIP P a X B B B P  S if X I X B supp X S if X I X B  S W pr a otherwise? ? ? ?  ? ? ? ?? ? ? ? ? ? ? ?? ? ?    ? ?  3.2  The process of algorithm  To illustrate the process of algorithm, we use the date in Figure 2. Suppose the minimal support ?minsup =1/3, and the error =25%.

?  X Y  DCBA   Fig. 2. A transaction database and the taxonomy  ? Step 1.  Input Input {?, {A, B, C, D}};  ? Step 2. Constructing CGIP A. Constructing CGIP from {?, {A, E, B, C, D}},  according to the definition, we calculate the itemsets Bg, [B] , [[B]g] , IP, and their support SCP, SCGIP firstly.

There are several supports of SCGIP such as the data in Table 4.

B. Judging whether {{{?????? ????????????|{A,B,C,D}} is valid itemsets profile or not.?AD?X then  [ ] [ ] [ ] [[ ]]? ( ) Pr ( )C CIp P a X B B g B BgSupp AD S W p a? ? ? ? ??  ? = { , , , }  | | ( ) ( ) ( )  | | A B C D  Ip I  D S Supp A Supp D  D ?     = 2 11 1 3 2     =  We have  ? ( ) 1/ 3|1 | |1 | |1 2 / 3 | 1/ 3 25% ( ) 1/ 2  Supp AD Supp AD  ? ? ? ? ? ? !

So the itemset profile constructed by {?, {A, B, C,  D}} is not compressed, and need to be split.

Table1. The profile mined by algorithm CGIP- summary  Transaction ID  T_id Itemlist  1 AD  2 B  3 ABD  4 AC  5 ABCD  6 C     {{{?????? ????????????|{A,B,C,D}}  B Scp [B]g SCGI  P [B] c  [[B]g] c Ip Prp()  ?? 1 Y,Z 5/6 5/6 ?? ?? A,B,C,D 2/3 1/  1/  1/  ? Step 3. Splitting {?, {A, B, C, D}} A Searching for the best splitting item. The  supports of {A, B, C, D} are sorted by descending. To simplify the complexity of calculation, we take A as the best split item. After the splitting, we have {A, {B, C, D}} and {?, {B, C, D}}.

B Constructing the CGIP from {A, {B, C, D}} and {?, {B, C, D}} separately.

? Step 4. Constructing the CGIP from {A, {B, C, D}}: {{{A} {B, C, D}}={{{A},{Y}},{{Z}, {?}}|{B, C, D}}.

A If {A,{B,C,D}} is a new CGIP, then CGIP include itemsets {X1?X2|A?X1?{A?Z?IP}, Y?X2?{Y???IP } ={X1?X2|A?X1?{A}?{Z,B,C,D} }, Y?X1?{Y}?{B,C,D}}.

B Is the new CGIP compressible  If ?AD?X, then ? ( )|1 | 25%  ( ) Supp AD Supp AD  ? !

So {A, {B, C, D}} is not compressible, and need to be split further.

? Step 5. Making further splitting to {A, {B, C, D}}.

A As above, we take item B as the split item, splitting {A, {B, C, D}} into {AB, {D}} and {A, {C, D}}.

B Constructing CGIP from {AB, {D}} and {A, {C, D}}.

? Step 6. Repeating the step 2-5 and so on, constructing all CGIP, we can mine the generalized frequent itemsets profile such as the data in Table 2, having the compression ratio is 64.7%.

Table 2. The profile and the covered frequent itemsets from algorithm CGIP-summary  Generalized  Itemsets Profile  The covered generalized itemsets  {ABD {YZ,YC}|{}} {AB {Y},{Z,D}|{}} AB,ABZ,ABD,Y  {AC {YC,AZ,YZ}|{D}} AC,ACD,YC,AZ,YZ,YCD  {AD {YD,AZ,YZ}|{?} }  AD,YD,AZ,YZ  {A {Y},{Z}|{?}}  A,AZ,Y  {? {Y,Z}|{B,C,D}}  Y,Z,YC,YD,YCD,ZB,B,C,D,BC,BD,BC D  3.3  The conclusion of algorithm  Algorithm 2. CGIP-Summary Input I: Constructing the itemsets of transaction database, except generalized node; Taxonomy;  GFI: All the frequent items from transaction database, including the frequent generalized items.

Output Outputting CGIP Step 1: 1 C-Profiles Summarize 2 Begin 3 [?]g=?(?) 4 Return Build (?, [?]g, I) 5 End.

6 C-Profiles Build (itemset B, itemset [B]g, itemset  Tail) 7 Begin 8 Tail?"{#|#?Tail ? B  {#} is frequent}; 9 If {isCommpressible (B,Tail?) and  isCommpressible ([B]g,Tail?) } then 10 Return (BuildCProfile(B,[B]g,Tail?)); 11 Else 12 Return Split(B,Tail?); 13 End 14 End 15 C-Profiles Split (itemset B, itemset Tail) 16 Begin 17 Item a ? Tail " the best splitting item; 18 C-Profiles P1 " Build(B {a},Tail-{a}); 19 C-Profiles P2 " Build(B,Tail-{a}); 20 Return P1 P2;     21 end The analysis of algorithm. The process of mining  frequent itemsets from transaction database constructed a prefix-tree in taxonomy by calling the subroutine BuildCProfile( ) recursively. The first step is to calculate the ancestor of base. Its complexity |Base| H(T) is related to the depth of taxonomy and the length of base. The second problem we need to consider is verifying the frequent itemsets covered by a itemset profile. Firstly , its complexity related to the number of item in Ip. At the same time, it is related to all the frequent itemsets contained by the transaction database.

In worst case, Ip contain the items of |I|, so the complexity is Poly(|I| (|FI|+|GFI|)). The third problem we need to consider is the choosing method of splitting items, which involving the sorting process of Ip. In the initial stage, there are |I| items in Ip, so the complexity is |I|log|I|. As above, the algorithm?s complexity is O(|Base| H(T) |I|log|I|+Poly(|I| (|FI|+|GFI|))).

4. Conclusions In this paper, we studied the characteristic and  profile of taxonomy, and provided a new algorithm CGIP-summary, which can mine the generalized frequent itemsets profile more concisely.

