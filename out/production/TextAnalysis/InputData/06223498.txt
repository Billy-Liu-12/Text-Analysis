

Abstract?Association rules mining is an important research topic in data mining and knowledge discovery. Traditional algorithms for mining association rules are built on the binary attributes databases, which has three limitations. Firstly, it can not concern quantitative attributes; secondly, only the positive association rules are discovered; thirdly, it treat each item with the same frequency although different item may have different frequency.

In this paper, we put forward a discovery algorithm for mining positive and negative fuzzy association rules to resolve these three limitations (Abstract)

I. INTRODUCTION Association rules mining is an important research topic in  data mining and knowledge discovery, which is firstly proposed by R.Agrawal [1]. An association rule is formed as A?B, where A and B are disjoint itemsets, and its support is no less than a user-specified minimum support. Since this kind of correlation is positive, we call it positive association rule.

Contrasted to positive association rules, mining negative association rules is proposed in literature [3,4]. The negative association rule can be formed as A??B, which means that if A is in a transaction, then B would not in the same transaction with high probability. There are other forms negative association rules such as ?A?B and ?A??B.

In the real applications, not only binary attributes may be, but also quantitative attributes may be [5,6]. T. P. Hong put forward a method of mining fuzzy association rules from quantitative transactions[7], which integrates the fuzzy-set concepts and the AprioriAll algorithm. It first transforms quantitative values in transactions into linguistic terms, then filters them to find association rules by modifying the AprioriAll mining algorithm.

Just like pointed out with Liu [8], using only a single minimum support threshold implicitly assumes that all items in the data have similar frequencies in the database. This is often not the case in real-life applications. In many applications, some items appear frequently in the data, while others appear rarely. Liu [8] extend the existing association rule model to allow user to specify a different minimum item support for each item, which is calculated for each item based on the percentage of its support. This percentage-based approach can improve the performance over single minsup based approaches [8]. However, it still suffers from both ?rule missing? and ?rule explosion? problems because the minimum item support for  each item is calculated by its support multiplied with a uniform percentage. If minsup for the item is fixed by setting the percentage value high, the rare itemsets are missed as the minsup for the rare items becomes close to their support, and if minsup for the item is fixed by setting the percentage value low, the number of frequent itemsets explodes. So, this association rules model with the percentage-based multiple minimum supports also has the rare item problem.

To deal with the dilemma,we use a monotonous decreasing power function such as x/1  instead of the constant percentage to multiply with the support of each item for calculating the minimum item support. Thereby, the difference between the minimum item support for each item and its support will vary in a satisfying way. For the frequent items, the difference is small; for the rare items, the difference is large. Thus, the minimum item support for frequent item is slightly less than its support, and the minimum item support for rare item is much lower than its support.

In this paper, we combine these three extensions to propose a novel approach for mining both positive and negative fuzzy association rules with multiple minimum supports.

The rest of the paper is organized as follows. The definitions for positive and negative fuzzy association rule are given in Section 2. In Section 3, we describe the discovery algorithm for mining positive and negative fuzzy association rules with multiple minimum supports. Section 4 presents our primary experimental results. The conclusions are made in the last section.



II. PROBLEM DEFINITION  A. Association rules Let I = {i1, i2, ? ,im} be a set of literals called items. Let the  database D = { t1, t2, ? ,tn } be a set of transactions, where each transaction is a subset of I. A non-empty subset of I is called itemset. An itemset containing k items is called k- itemste. The support of an itemset X denoted as sup(X) is defined as the number of transactions containing X in D. An itemset is frequent if its support is greater than a user-specified threshold minimum support minsup.

An association rule is an expression of the from A?B, where X and Y are sets of items, A?B=?.The support of the     association rule is defined as sup(A?B), and the confidence of the association rule is defined as sup(A?B)/sup(A).

B. Positive and Negative Association rules Corresponding to a positive association rule such as A? B,  there are three possible negative association rules, A??B, ?A?B and ?A??B. For a negative association rule A??B and a certain transaction T, if A ? T and ?B ? T, we say that the transaction T supports A??B. Assume there is a negative association rule such as ({i1}, ?{ i2 , i3}), which means that if i1 is in a transaction T, i2 and i3 would not appeared in the transaction T at same time, but there is a possibility that one of the i2 and i3 is in transaction T.

To discover negative association rule, we need to consider all of the possible itemsets in transaction databases. If A??B is a negative association rule, it will hold that sup(A??B)>= minsup. A higher value for minsup possibly means sup(A? B)<minsup, i.e., (A, B) is infrequent sequence. However, there are too many infrequent sequences in database. If A is a frequent itemset while B is a infrequent itemset with support 1, we will have: sup(A)>=minsup, sup(B)?0, sup(A??B) ?sup(A)>=minsup. Therefore, it seems that A??B is a negative association rule. In fact, this kind of sequences is rather prevalent in real database, for example, a set of the goods rarely bought by customers in supermarket is an infrequent itemset. In practice, since the task of data mining is to find all kinds of valuable correlations, we usually more focus on the correlations between the well-sold goods, which are based on the frequent sequence. In other word, if A??B, ?A?B and ?A??B are negative association rules, A and B would be frequent sequence. In generally speaking, we only focus on the frequent sequence whether the association rules are positive or negative.

In order to find valuable association rules, Piatetsky- Shapiro had put forward an interestingness measurement of association rules [9]. If sup(X?Y) ? sup(X) ? sup(Y), X?Y is considered as uninteresting rules. In other words, we can say that as the association rule X?Y is interesting only if sup(X?Y) ? sup(X) ? sup(Y) is no less than a specified minimum interesting value, mininterest. Similarly, we adopt the same method to measure the interesting of negative association rules.

Definition 1: an interesting negative association rule A??B as:  (1) A ? B = ?;  (2) sup(A)>=minsup, sup(B) >= minsup, sup(A??B) >= minsup;  (3) sup(A??B) ? sup(A) ? sup(?B)>= mininterest.

Noted it need to satisfy condition sup(B)>=minsup since we are only interested in frequent itemset in association rules.

By the same way we can define conditions of negative  association rules forms as ?A?B and ?A??B  If A??B is a negative association rule, A?B will be an interesting infrequent itemset. If i is an interesting infrequent  itemset, there exists at least one expression, i=A?B, which makes one of A??B, ?A?B and ?A??B be interesting  negative association rule hold.

C. Fuzzy Association rules Most of current discovery algorithms for mining association  rules focused on binary valued transaction data. Since transaction data in real-world applications usually contains quantitative values, traditional association rules for binary valued transactions should be extended to fuzzy association rules for quantitative valued transactions.

Generally, quantitative values consist of numerical values and categorical values. To transform into transaction data format, the domain of quantitative and categorical attributes should be partitioned into disjoint intervals, each of which is considered as an attribute or item [5]. However, a sharp boundary problem results from the disjoint intervals. In order to solve this sharp boundary problem [6], fuzzy set theory has been introduced in the process of mining quantitative association rules, which results in a new category of association rules called fuzzy association rules [7].

In the context of fuzzy association rules, the support of an itemset can be counted as follows: for every transaction in the transaction database, take the fuzzy logic AND of the membership values of the items under consideration, and summate these numbers. Let the transaction database be D and an itemset X = {x1, x2, x 3, ? , xk} ? I.

Definition 2: the support of a transaction t?D to the  itemset X can be defined as ?ki x ttX i1 )(),sup( == ? Definition 3: If we take the fuzzy logic AND as the  product, the support of X from the transaction database D is  then defined as ? ?? ? ?  = ==  Dt Dt  k  i x ttXX  i1 )(),sup()sup( ?  The fuzzy association rules mining algorithm proposed in literature [3] first transforms each quantitative value into a fuzzy set with linguistic terms using membership functions. It then calculates the scalar cardinality of each linguistic term on all the transaction data, and calculate the support of itemset, carry an iterative search approach to find large itemset. Each item uses only the linguistic term with the maximum cardinality in later mining processes, thus making the number of fuzzy regions to be processed the same as the number of original items. The algorithm therefore focuses on the most important linguistic terms, which reduces its time complexity.

The mining process based on fuzzy counts is then performed to find fuzzy association rules from these large itemsets.

D. Positive and Negative Fuzzy Association rules In this section, we present the definitions of both positive  and negative weighted fuzzy association rules with the assumption that transaction data are fuzzy.

Assume ?x is the membership function of x for all x ? I. For each transaction t?D, ?x(t) represents the degree that t contains the item x. The positive and negative weighted fuzzy Association rules formed as A?B,A??B, ?A?B and ?A??B are described as the follows.

1) Positive Fuzzy Association rules We take the support of itemset X as the number of  transaction in D that contains X, which is denoted as sup(X).

The minimum support is denoted as minsup. Let A and B be two itemsets.

Definition 4: The A?B is positive fuzzy association rule, if the following conditions hold:  (1) A?B = ?; (2) sup(A?B) ? sup(A) ? sup(B)>= mininterest (3) sup(A?B) = )()( tt  By y SDt  Ax x ??? ? ?  ? ?? ?minsup;  (4) Conf(A?B)?minconf.

2) Negative Fuzzy Association rules Let A and B be two itemsets, if A??B is a negative  association rule, both A and B must be frequent, which means that their support should be not less than the support threshold, while A?B should be infrequent. The three types of negative fuzzy association rules can be defined as follows.

Definition 5: A??B is a negative fuzzy association rule, if the following conditions hold:  (1) A?B = ?; (2) sup(A)>=minsup, sup(B)>=minsup; (3) sup(A??B) ? sup(A) ? sup(?B)>= mininterest (4) sup(A??B) =  ))(1()( tt By y  Dt Ax x ??? ?  ? ?  ? ?? >=wminsup;  (5) Conf(A??B)=sup(A??B)/sup(A)=sup(A)-sup(A ?B)/sup(A)?minconf.

Definition 6: ?A?B is a negative fuzzy association rule, if the following conditions hold:  (1) A?B = ?; (2) sup(A)>=minsup, sup(B)>=minsup; (3) sup(?A?B) ? sup(?A) ? sup(B)>= mininterest (4) sup(?A?B) =  )())(1( tt By y  Dt Ax x ??? ?  ? ?  ? ?? >=minsup;  (5) Conf(?A?B)=sup(?A ? B)/sup(A)=sup(B)- sup(A?B)/(1-sup(A))?minconf.

Definition 7: ?A??B is a negative fuzzy association rule, if the following conditions hold:  (1) A?B = ?; (2) sup(A)>=minsup, sup(B)>=minsup; (3) sup (?A??B) ? sup(?A) ? sup(?B)>=  mininterest (4) wup(?A??B)=  ))(1())(1( tt By y  Dt Ax x ??? ?  ? ?  ?? ?? >=mins  up; (5) Conf(?A?B)=sup(?A??B)/sup(?A)=1-sup(A)-  sup(B)+sup(A?B)/(1-sup(A))?minconf.

2.5 Definition of multiple minimum supports  In multiple minimum supports model, every item ij of the itemset I={i1,i2,....,im} has been assigned a minimum item  support based on its support value sup(ij), denoted as mis(ij),and LS is denoted as least minimum support.

Definition 8: the minimum item support of an item ij is defined as   otherwise  LS )m(i if      )( )( j  ? ? ? >  = LS  im imis jj    )sup( 1)sup()(  j jj i  iim ?=   Definition 9: the minimum support for an itemset X is the minimum of minimum support of the items contained in the itemset, denoted as mis(X).

Definition 10: An itemset X is said to be frequent if )()sup( XmisX ? .



III. ALGORITHM FOR MINING POSITIVE AND NEGATIVE FUZZY ASSOCIATION RULES WITH MULTIPLE MINIMUM  SUPPORTS Our mining algorithm first transforms each quantitative value into a fuzzy set with linguistic terms using membership functions. It then calculates the scalar cardinality of each linguistic term on all the transaction data. Each item uses only the linguistic term with the maximum cardinality in later mining processes, thus making the number of fuzzy regions to be processed the same as the number of original items. The algorithm therefore focuses on the most important linguistic terms, which reduces its time complexity. The mining process based on fuzzy counts is then performed to find fuzzy association rules from these large itemsets. Notations used in our algorithm are described as Table 1.

TABLE I.  NOTATIONS  Notation meaning n The total number of transactions in database m The total number of items Di Di is the ith transaction in D, 1? i ?n Ig The gth item, 1? g ?m  Rgk The kth region of Ig, 1? k ? | Ig |, where | Ig | is the number of fuzzy regions for item Ig  g iv  The quantitative value of item Ig in Di g  if  The fuzzy set converted from g iv  gk if  The membership value of  g iv  in region Rgk  countgk The scalar cardinality of region Rgk maxcountg The maximum count value among countgk values  maxRg The fuzzy region of item Ig with maxcountg Ck the set of candidate itemsets with k items Lk the set of large fuzzy itemsets with k items  NLk the set of non-large weighted fuzzy itemsets with k items  LS The predefined least minimum support value miniconf The predefined minimum weighted fuzzy  confidence threshold     mininterest The predefined minimum interest threshold Our mining algorithm firstly transforms each quantitative  value into a fuzzy set with linguistic terms using membership functions. It then calculates the scalar cardinality of each linguistic term on all the transaction data. Each item uses only the linguistic term with the maximum cardinality in later mining processes, thus making the number of fuzzy regions to be processed the same as the number of original items. The algorithm therefore focuses on the most important linguistic terms, which reduces its time complexity. The mining process based on fuzzy counts is then performed to find fuzzy association rules from these large itemsets. The detail of the proposed mining algorithm is described as follows.

Algorithm: MPNFARMMS(Mining Positive and Negative Fuzzy Association rules with Multiple Minimum Supports) Input: A body of n transaction data, each consists of customer ID, the purchased items with their quantities, a set of membership functions and a predefine least minimum support threshold LS, minimum fuzzy confidence threshold miniconf, minimum interest threshold mininterest;  Output: A set of positive weighted fuzzy association rules: PAR;  A set of negative weighted fuzzy association rules: NAR;  (1) C1 = {candidate 1-itemset};  (2) For each item c in C1 do )sup(  1)sup()( c  ccm ?= ;  (3) If m(c)<LS mis(c) = LS Else mis(c) = m(c); (4) Transform the quantitative value giv of each itemset Ig  appearing in Di into a fuzzy set g  if represented as  )( 2    gl  gl i  g  g i  g  g i  R f  R f  R f +++ using given membership  functions, where Rgk is the kth fuzzy region of item Ig, gk  if is g iv ?s fuzzy membership value in region Rgk,  and l is the number of fuzzy regions for Ig(k=1,2,3,?, l).

(5) Calculate the scalar cardinality of each attribute region  Rgk as ? == n  i gk  i gk fcount  .

(6) Find maxcountg= )(1 gkl  k countMAX = , where 1? g ?m and l is the number of regions for item Ig. Let maxRg be the region with maxcountg for item Ig. The maxRg will be used to represent the fuzzy characteristic of item Ig in later mining processes.

(7) Calculate the fuzzy support of a region maxRg (for g=1 to m) wfsup(maxRg)= maxcountg . Check whether the fuzzy support of a region maxRg, for g=1 to m, is larger than or equal to the predefined minimum weighted support threshold sup. If the value of maxcountg is equal to or greater than sup, put maxRg in the large 1- itemsets L1. That is L1={ maxRg | maxcountg ? sup, 1? g ?m }.

(8) If L1is null, then exit the algorithm; otherwise, do the  next step.

(9) Set k=1, where k is used to represent the number of  items kept in the current large itemsets.

(10) Generate the candidate set Ck+1 from Lk in a way  similar to that in the apriori algorithm [1].

(11) Do the following substeps for each newly formed  (k+1)-itemsets s with items (s1, s2, ? , sk+1) in Ck+1: (a) Calculate the fuzzy value sif for of s in each transaction Di as: )(1  s i  n i  s i fMAXf == , and  121 +??= kSi s  i s  i s  i ffff .

(b) Calculate the scalar cardinality of s  as ? == c  i s  i s fcount  .

(c) If counts is not less than the predefined minimum fuzzy support threshold, Then {  (?) put s in Lk+1; (?) If the fuzzy support of s  )(1  smiscount sk i  ?? += , put s in Lk+1;  (?) Else put s in Sk+1}; (d) Else put s in Sk+1; (12) If Lk+1is null, then do the next step; otherwise, set  k=k+1 and repeat Step 10 to Step 12.

(13) kk LL ?= ; kk SS ?= ; (14) For each itemset i in WL Do { (15)    For any A?B=i and A ? B = ? Do { (16)        If sup(A?B) ? sup(A) ? sup(B)>= mininterest? (17)            sup(A?B)>= minsup ? Conf(A?B)?minconf (18)        Then PAR = PAR ? { A?B }; (19)        } (20)    } (21) For each itemset j in S Do { (22)    For any A?B=j and A ? B = ? Do { (23)        If sup(A)>=minsup ? sup(B)>=minsup ?  sup(A??B)>=minsup? (24)            sup(A??B) ? sup(A) ? sup(?B)>= mininterest  ? (25)               wsup(A??B)>= wminsup ?  Conf(A??B)>=wminconf (26)        Then NAR = NAR ? { A??B }; (27)        If sup(A)>=minsup ? sup(B)>=minsup ?  sup(?A?B)>=minsup? (28)            sup(?A?B) ? sup(?A) ? sup(B)>= mininterest  ? (29)               sup(?A?B)>= minsup ?  Conf(?A?B)>=minconf (30)        Then NAR = NAR ? { ?A?B }; (31)        If sup(A)>=minsup ? sup(B)>=minsup ?  sup(?A??B)>=wminsup? (32)            sup(?A??B) ? sup(?A) ? sup(?B)>=  mininterest ? (33)               sup(?A??B)>= minsup ?     Conf(?A??B)>=minconf (34)        Then NAR = NAR ? { ?A??B }; (35)        } (36)     }

IV. EXPERIMENT To test the performance of our proposed algorithm we  have done some experiments. The algorithm is implemented with C++. The synthetic experiment data set is generated by Assocgen[1] program of IBM Almaden research center. The  meanings of used parameters are showed in Table 2.

TABLE II.  PARAMETERS  Symbol Meaning D Number of customers(=size of database) C Average number of transactions per Customer T Average number of items per Transaction NI Number of maximal potentially large Itemsets N Number of items We set parameters C=10, T=5, NI =2500, N =10000, total  number of customers D=100000, and the generated dataset is named as C10T5I25. The membership functions used in our experiment are shown as figure 1.

Figure 1.  membership functions  Figure 2 shows the algorithm executing time variance with least minimum support decreasing from 1% to 0.2%. It demonstrates that the algorithm increases with the declining of LS.

C10T5I25       1 0.8 0.6 0.4 0.2  Least Mininum Support  R u n  t i m e ( s )  MPNFARM MS   Figure 2. Execution time  To examine the scalability of algorithm we increased the number of transactions from 50,000 to 150000, with LS=1%.

The results are shown in Figure 3. The executing time is  increased almost linearly with the increasing of dataset size. It can be concluded that our algorithm has a good scalable performance.

C10T5I15       50 75 100 125 150  Number of Transactions  R u n  t i m e ( s )  MPNFARMMS   Figure 3. Scale-up: Number of transactions

V. CONCLUSIONS In this paper, we addressed three limitations of traditional  association rules mining:crisp itemsets, only positive association rules and each item with the same frequency. The fuzzy extension of crisp itemsets results in approaches of mining fuzzy association rules, while negative association rules can be discovered as positive association rules are mined, and item with its support extension conduces association rules mining with multiple minimum supports. We put forward an algorithm for mining both positive and negative fuzzy association rules by combining these three extensions. The primary experiments demonstrated that the algorithm is efficient and scalable.

