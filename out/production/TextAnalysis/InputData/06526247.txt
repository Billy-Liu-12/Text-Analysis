Design and Implementation of Improved Algorithm

Abstract?A new frequent item sets mining algorithm based on linked list and stack data structure at the Apriori algorithm?s expensive disadvantage is given in this paper. This method create frequent item sets based on the linked list series and use the stack structure and subset judgment method to judge if the created frequent item sets are the maximum frequent item sets. Through demonstrates we can see that this method is cheap, with high accuracy and can provide some reference for related rules.

Keywords-data mining; frequent item sets; linked list; algorithm; implementation

I. INTRODUCTION In 1993, Agrawal?who proposed Apriori algorithm that  generate frequent item sets from a large number of candidate mining sets via layer-by-layer iterative manner, and then generate the strong association rules from the frequent item sets. Although the algorithm is still being widely discussed as a classical association rules mining algorithm, but there are still two fatal bottlenecks ? the huge I/O load for multiple database scan, and the huge candidate sets by possible.

This paper based on the reference of the improved Apriori algorithm [2-9] in recent years, starting from the linked list and stack, and proposed a new improved algorithm of frequent item sets mining. This algorithm solve the bottleneck of Apriori algorithm, reducing the cost of frequent item sets mining, improving the efficiency of the algorithm for mining frequent item sets.



II. ALORITHM DESCRIPTION  A. Some concepts[10]  Suppose I={i1, i2, ... , im} is a collection of items(j is the item number for item ij), the database D={t1, t2, ... , tn} is composed of a series transactions which have unique identification TID, and each transaction ti( i=1,2, ... , n) corresponding to a subset of I. So, for the collection of items I and database D, each item sets which meet the minimum support degree (minsupport) called the frequent item sets. The frequent item sets which not include in other frequent item sets are called the maximal frequent item sets.

Theorem 1: if the item sets X is frequent item sets, then all its nonempty subsets are frequent item sets.

Theorem 2: if the item sets X isn?t a frequent item set, then all its supersets aren?t frequent item sets.

B. Frequent item sets mining algorithm based on linked list 1) Generation of the list  If the item sets is I={i1, i2, ... , im}, then build n lists Li ( i=1,2, ... , n ), each list s is composed of head node and the transaction node. The head node consists of three data fields (FI, LastTID, count) and the two pointer fields (down, next).

FI (Frequent Item sets) field is used for store current frequent item sets. LastTID field is used for store current frequent item which has the largest item number. Count field is used for count the number of transaction nodes which in current list ( the initial value is 0). Down pointer is used for point the next list. Next pointer is used for point the next node in the list.

Transaction nodes consist of one data field and one pointer field. Data field is used for store transaction?s TID and pointer is used for point the next transaction node.

Structure of Li: scan the database, for any item Ii in Tj, establish a transaction node with the Tj data field, and connect it to the list Li (Li->FI=Li->LastTID=Ii), while Li->count add 1.

Delete the Li while its count value less than minsupport .

Then the remaining Li is for 1- frequent item sets list.

2) Establishment of stack Establish two stack?Stack1 and Stack2. Stack1 is used  for store current frequent item sets? superset. And Stack2 is used for store all the frequent item sets whose superset still not judge.

In addition, we can also establish two queues?Queue1 and Queue2.They are used for store frequent item sets (not maximal frequent item sets) and maximal frequent item sets.

3) The idea of algorithm The head node of 1- frequent item sets should ordered by  item number order and then linked together to become a head node linked list. Put all nodes in the head node linked list (all 1- frequent item lists? head node) to Stack1 one by one. The generation of i-frequent item sets (i=2,3, ...) and judging steps        of maximal frequent item sets are as follows:  Step 1: put the elements out of Stack2 and push them into Stack1 one by one.

Step 2: if Stack2 is empty, end the algorithm. Otherwise, put an element Li out of Stack2, and intersect Li with all the 1-frequent item sets list Lj which is behind Li->LastTID. If the number of new list?s transaction nodes is greater than or equal to minsupport, then establish a new list Lij, Lij->FI=Li->FI ?L j->FI, Lij->LastTID=Lj, Lij->count is Li the number of nodes in new.

Step 3: push the new list in Stack1.

Step 4: if Stack1 isn?t empty (It means there are frequent  superset of Li exist). Push Li into Queue1 and return to step 1.

Otherwise, estimate whether Li is subset of Queue2?s elements. If it is, push Li into Queue1, otherwise push Li into Queue2( It means Li is the maximal frequent item ). Return to step 2.

Description of algorithm:

III. EXAMPLES ANALYSIS Suppose there is a sample transaction database which has  9 transactions and 5 items as follows, shown in Table 1, minsupport=3.

TABLE I.  SAMPLE TRANSACTION DATABASE  TID Item Sequence 1 B,C,D 2 A,B,C 3 A,C,E 4 B,C,D,E 5 A,C,D 6 A,D 7 B,C 8 A,B,C,D 9 A,B,C,E   Establish a linked list after scanning database once and  order the head node by item number order as follows, shown in figure 1:                 Push FI in each node into Stack1, then operate according  to the algorithm steps: Step 1: put out elements in Stack1stack and push them  into Stack2 one by one.

Step 2: now the Stack2 isn?t empty, then put out element  A, and intersect A with B, C, D, E one by one. If the new list?s number of nodes is greater than or equal to minsupport, then establish a new list.

Step 3: push the new list which established in step2 into Stack1.

(Via the cycle of step2 and step3, there will be 3 new linked lists AB, AC and AD be pushed into Stack1)  Step 4:Stack1 is not empty (There are 3 frequent supersets of A?AB, AC and AD exist), so put A into Queue1, and return to step1.

Do the step until the end of the algorithm. In the algorithm implementation process, Stack1, Stack2 and Queue1, Queue2?s change processes is shown in figure 2:           Fig. 1 the linked list which order by item number order     main( ) { For (p=L; p! =NULL; p=p->down) //L is the head node list?s head pointer Stack1.push (p); / / push p into Stack1 While (Stack1! =NULL) Stack2.push (Stack1.pop ( )); / / put the elements out of Stack2 and push them into Stack1one by one While (Stack2! =NULL) { T=Stack.pop ( ); / / put one element out of Stack2 For (p=t.LastTID->down; p!=NULL; p=p->down) { New=insection (t, p); / / put the intersection of transaction list T and P to the new list If (new->count>=minsupport) { New->FI=t->FI ?p->FI; New->LastTID=p->LastTID; Stack1.push (new); } If (Stack1!=NULL) { While (Stack1!=NULL) Stack2.push (Stack1.pop ( )); Queue1.enqueue (t); / / put t into Queue1, Queue1 is used for store a non maximal frequent item sets } Else If (Judge (t, Queue2)) // function Judge is used for estimate whether the t is a subset of Queue2?s element Queue2.enqueue (t); //Queue2 is used for store the maximal frequent item sets Else Queue1.enqueue (t); } } } }

IV. ALGORITHM ANALYSIS The algorithm advanced in this thesis just need to scan the  database once and without generate candidate item sets. So compared with Apriori algorithm, the implementation efficiency improved. In addition, this algorithm?s storage structure is stack and queue which is simple than tree.

Therefore this algorithm storage structure is superior to FP-tree and the maximal frequent item sets mining algorithm based on linked list array.

The cost of this algorithm at time mainly depends on the time that scan the database once and the time that establish the list. Because the list has ordered by item number order at the beginning of the establishment, so in the intersection the current list just need to intersect with the list whose FI is behind current list?s LastTID. That means the cost of algorithm?s real time will be less than the theoretical time. At the end of algorithm, maximal frequent item sets and non maximal frequent item sets are stored separately in the different queues. Besides there is all frequent item sets support to provide some necessary reference data when generate the strong association rules. It?ll improve the generating efficiency of strong association rules.

Contrast with Apriori algorithm, and using the database  that containing 18 items and 7914 transactions ? and respectively minsupport=80, 160, 400, 800, 1600 (that is, minimum support around 1%,2%,5%,10% and 20% respectively) to test. The running time count from input to output. The results shown in Table 1.

TABLE II.  COMPARISON OF APRIORI ALGORITHM AND THIS ALGORITHM WITH THE RUNNING TIME  Minisupport(%) Running Time of  Apriori Algorithm(s)  Running Time of This Algorithm(s)  1% 40 35 2% 59 42 5% 88 54 10% 163 88 20% 315 143

V. THE ENDING This thesis advance a presents a frequent item sets mining  algorithm based on the linked list. It scans the database just once and stores the original database in linked list, and judge frequent item sets by the linked lists? intersection. Assist with the structure of stack and queue, this algorithm can not only judge the frequent item sets, but also the non maximal frequent item sets. Furthermore, when a database tuple changes ( such as add or delete ), or the minsupport changes, we don?t need to rescan the database, but just need to modify the linked list or rescan the list to get the new frequent item sets.

