A METHOD AND ALGORITHM OF DISTRIBUTED MINING  ASSOCIATIONRULES IN SYNCHRONISMS

Abstract Mining association rule is an important part of data mining.

In this paper, a method and its algorithm DMAR of distributed mining association rules in synchronisms are presented in distributed transaction database environments by using meta-learning technology. The algorithm has higher mining eMciency and lower data communication amount. The distributed factor y is also defined in the paper, which is to measure the effciency of mining algorithm, and it is pointed ont that the value of y is related to mining efliciency and data communication amount Experiments have been conducted to prove the correctness and effciency of the algorithm DMAR.

Keywords: Assodation rule; Distributed mining; Meta-learning technology  1 Introduction  Data Mining is to abstract interesting and useful and implicit information or knowledge from a large amount of original data, and it can be expressed as a concept, a rule, a pattern, etc. It is a new promising research field integrated with artificial intelligence and database, which has attracted a lot of scholars' attention to study its methodology, theory and instrument  The association rule proposed by Agrawal et al, as a major part in data mining, is a rule to describe a certain association relationship among a set of objects (that is: a set of transaction items) in a database. The mining of association rules may require iterative scanning of large transaction in database; therefore, the efficiency of mining is the key. At present, the scope of the study has been extended to incremental updating, parallell, distributed and sampling mining of association rules: Tovienven's sampling mining of association rule; [31, which contribute a lot to solve the problem of efficiency; Savaser et al's a partition way to settle the restrict of memory 14'; Jong's mining of association rules with adjustable accuracy aiming at validity being more important than c~mpleteness[~'. The above ways of mining can only apply to one machine or a single data set. David et al's a fast distributed algorithm for mining of association rules FDM but is not very efficient and its required communication amount is a little bit large; Wang Chunhua et al's distributed algorithm for mining of  association rules with adjustable accuracy SMDM ['I, which is only fit for the condition in which the transaction data balanced distributed and based on the condition in which the efficiency is more important than completeness.

As for conditions that demand a much higher completeness, this paper proposed an algorithm DMAR of distributed mining association rules by using meta-learning technology based on above studies. That is to mine local frequent itemsets, which are used as being meta knowledge at all sites respectively in the distributed transaction, and to generate the candidate global frequent itemsets by these meta knowledge, then to scan transaction database once and get entire global frequent itemsets. This algorithm has higher mining efficiency and requires lower communication amount, and defines the distributed factor y, which can measure the algorithm's efficiency and communication amount. Experiments with real supermarket transaction data as transaction data set, prove that the algorithm is correct and effective.

2 Problem definition  2.1 Association rules description  Given a transaction database DB,I=[Il,12, ..., IJis a set of itemsets with m different itemsets in DB, each transaction T in DB is a set of item (i.e. itemsets) , so TE I.

Definition 1: Itemset P is defined as A , n  A2n ... nAk, AisI  (i=1,2, ..., k),and P containing k items is called k- itemset.

Definition 2 The support of itemsets P is defined as cr(P/DB)=the support account containing P in DB/the total transaction amount in DB=IA/DBI/IDBI.

Definition 3: A and B are two itemsets and AflB=@, theb. mfidence of association rule A a B  in DB is defiii. {(AsB IDB)= a(AnB /DB)/ cr( A IDB).

Definition 4: Let the minimum support be o-, then the set of k frequent itemsets and the set of k non-frequent itemsets are defined separate1  Lk=[A,n AZn ... nAk (k1.2 ,..., k), cr( A , n A2n. . .nAk  /DB)>_ OM.)  0-7803-7508-4/021$17.00 a 0 0 2  IEEE   mailto:zjf@tyhmi,edu.cn    Lk'=(Aln A2n  ... nA, I AicI  (i=1,2 ,..., k), o( A l n Azn..  .nAk IDB)< odn)  To mine efficacious association rules in DB, minimum support ohn and minimum confidence vhn must be defined firstly. Mining association rules is to find all the association rules satisfying a(AnB IDB) Z oh" and v ( A 3 B  /DB)> vmin in DB. Owing to the fact that the result of ~I(ADB IDB) can be gotten from the value of o(AnB /DB) and o(A /DB), the key of mining association rule A 3 B  is to generate the set of k frequent itemsets,. therefore, the substantive study at present focuses on the generating of the set of k frequent item set^'^.^.^', which is the key of heightening the efficiency of mining.

2.2 Distributed mining association rules  Let distributed transaction database DB (DB,, DB2, ..., DB,) be stored in distributed system S(SI,S2, ..., S,), m is the number of distributed site and the set of transaction data in site Si is known as DBi.

Definition 5: To a given ohn, A being a itemsets in DB in distributed system S ,  if o(A /DB) 2 oh", then A is the globally frequent itemset in DB; if o( A /DBi) 2 oh,.,then A is the local frequent itemsets in DB,.

Lemma: Given a distributed transaction database DB {DB,,DBz, .... DB,],if itemsets A is a globally frequent itemsets in DB, then at least, A must be one of the locally frequent itemsets of DB;: Proof: Let minimum support be oen, A is the globally frequent itemsets of DB, therefore o(A/DB) =IA/DBI/IDBI2 oh,,,IAIDB121DBI*od,..

If itemset A is not a locally frequent itemset at any site, then o (A /DBJ =IA/DBiI/lDBil < ,o,,,lA/DBil < IDBil*oh., i=1,2 ,_._, m. Therefore  IDBzl*o-+. . .+ IDB,I*a,.=(IDBII+ IDB21+. . .+ IDB,I)*omi,=I DBI*adn. That is:IAIDBI<I DBI*o,.. By contradiction, A must be a locally frequent itemsets at some site DB,.

Theorem 1: To a given distributed transaction database DB (DB,,DB,, ..., DB,),the set of candidate globally frequent itemsets may be the union of all the set of locally frequent itemsets in the transaction data set at any site.

ProoE The theorem is easy to be proved by the above lemma.

The preview part shows that the key of mining association rule is to generate the set of frequent itemsets from transaction database. Therefore, the main task of distributed mining of association rules is to collaboratively get the set of globally frequent itemsets from the transaction data sets in manv sites.

IA/DBI=IA/DBII+IA/DBzI+. ..+ IA/DB,I< IDBII*o~,.+  frequent learning. The set of locally frequent itemsets L(i)(i=l,Z, ..., m) at any site can be seen as the result of the first learning. using meta-learning technology. We can generate the set of candidate globally frequent itemsets C by dealing with L(i), and get the set of globally frequent itemsets L by C. That is: to generate the set of locally frequent itemsets L (i)(i=1,2, ..., m) in transaction data respectively at any site, and calculate the set of candidate globally frequent itemsets C= L(1)u L(2)u ... uL(m); scan DBi(i=l,2, ...,m) once, and then get the support count of any itemsets in the set of itemsets C- L(i)in transaction data set DB,; add up the support count of each itemsets in C at any site, get the set of globally frequent itemsets I=[ A I support account of A t  IDBI*~,.,AGC].

Theorem 2: In distributed transaction database DB {DBl,DBz, ..., DB,), the set of globally frequent itemsets L which is generated by scanning DB based on C just once is complete.

Proof: From theorem 1, C= L(1)u L(2)u ... uL(m) is the set of candidate globally frequent itemsets, as for any one frequent itemsets A in DB and ABC, IAIDBiI< IDBil*o-, i=1,2, . . . ,m, IAIDBkI DBI*oh., that is: A is a non-frequent ihnsets in DB. By contradiction, we can induce that proposition is valid.

4 Distributed algorithm for mining of association NleS  There are several steps in the distributed mining of association rules, which applies the meta-learning technology: the first step is to mine the set of locally frequent itemsets; and to collect all the sets of locally frequent at any site, then to generate the set of candidate globally frequent itemsets; the second step is to scan transaction data set at any site, figure the support count of non-frequent itemsets at any site in the set of candidate globally frequent itemsets; finally to accumulate the support count of candidate globally frequent itemsets at any site, and generate globally frequent itemsets. The distributed algorithm of mining can be used in table 1 to collect locally frequent itemsets at each site and generate candidate globally frequent itemsets at any site.

Here: (1) Si is the support count of data set DBiin i-th site, -- ,~i=l,2,..7,m~...

~ (2) S= S;+Sz F... + S, is the supprt  count of itemsets  (3) o=S/lDBI is the suppoh~ of catididate globally _. 3 Distributed technique for mining of association in DB. .. rules by meta-learning technology  Meta-leming is to acquire the final result through frequent itemsets, if 02 odn that the itemsets must be globally frequent itemsets.

The items in itemsets are sequenced in dictionary to improve efficiency of pattern 'matching. Distributed algorithm for mining of association rules DMAR is shown as follows: Algorithm: DMAR InPut: Distributed transaction 'database DB (DBI,DB2 ,..., DB,J,minimum support oMn.

OutPut: the set of Globally frequent itemsets L in DB.

(1) For all sites do /* mining independently at each site  (2) L(i)=Local-Mining(DBi, omin) ;/* generate the set of locally frequent itemsets L(i)according to the data set DBi and omin at each site (3) receive(i,L(i)): /*collect the set of locally frequent  (4) fill all the itemsets in L(i) and the corresponding support count into the table of frequent itemsets;  (  itemsets at each site.

( 5 )  For i=l to m do [ (6) generate the set of candidate frequent itemsets C of every site from the table of frequent itemsets where C(i)=[MI the S,, corresponding to the itemsets M in the table of frequent itemsets, is 0); (7) send(i,C(i));/*transit the set of candidate globally frequent itemsets to i-th site (meta knowledge) (8) For all sites do ( (9) scan the data set DB, at i-th site once and then generate  (IO) receive(i,C(i)); /*collect the support count of  (11) fill the support count of itemsets in C(i) into the S, column in the table of frequent itemsets;  the support count of all the itemsets in C(i);  candidate globally frequent itemsets at any site.

I (12) L.==; (13) IDBI=IDBII+IDBzI+ . .. +IDB,I;/* calculate the amount of transaction in DB (14) For all the itemsets M in the table of frequent itemsets  (15) S= S,+S2+ ... + S, ;/*calculate the amount of support count of itemsets (16) o= S/IDBI; (17) if 02 amin Then L=Lu[M);/*generate the set of globally frequent itemsets  I  do (  (18) END DMAR Explanation of algorithm DMAR 1. In step (4). if there is the same locally frequent itemsets at different sites, then the itemsets will be filled in table 1 only once; 2. In step (6), the fact the Si, corresponding to the itemsets M in table 1, is 0 manifest M is not the locally frequent itemsets at i-th site but must be the locally frequent all of the other sites; 3. Steps (3)(7)(10), manifest the communication amount at any site; 4. In step (6)(7), C(i) as meta knowledge, has the second  chance of mining at i-th site; 5. (1)-(4) steps are the first mining, and the content in table 1 is the mete knowledge; 6. (5)-(7) steps draw the meta knowledge of each site from table I ,  which is the candidate globally frequent itemsets at any site: 7. (8)-( 11) steps are to use meta knowledge, to scan the set  of data once at any site, and calculate the support count of all the locally non-frequent itemsets at i-th site and fill them in table 1;  8. (12)-(17) steps are to accumulate the total amount of support count and support of all the itemsets in the table 1 and get the globally frequent itemsets.

5 Analysis and comparison of different algorithms  From the second part we can know one of the keys of improving efficiency is to get the set of k frequent itemsets.

In generating the set of k frequent itemsets Lkafter the k-th scanning database, what we want is to have the less of itemsets in the set of candidate frequent itemsets Ck generated from the set of k-l frequent itemsets 4,. since the less quantity of the itemsets of Cx, the higher its efficiency. If most of the locally frequent itemsets getting at any site is globally frequent itemsets in distributed mining, the efficiency of distributed mining would have high efficiency. To measure the ratio of globally frequent itemsets in all the locally frequent itemsets generating from all the sites, given the distributed factor of frequentitemsets as follows.

Detinition 6: The definition of distributed factor of frequent itemsets is: F(the account of globally frequent itemsets)/(the account of candidate globally frequent itemsets)=(the account of itemsets fulfilling o 2 o,.)/(the amount of different locally frequent itemsets n) (*(E [O,l])  5.1 Algorithm analysis  1. From lemma, theorem 1,2 we can see that the globally frequent itemsets in DB at least is one of the locally frequent itemsets in all sites, the algorithm DMAR can mine out all the globally frequent itemsets. So algorithm is of completeness.

2. The efficiency of the distributed mining algorithm DMAR is related to y, the table of frequent itemsets shows the bigger y, the higher efficiency of distributed mining.

The reason is that most of the candidate globally frequent itemsets getting from all the sites at the step (6) in algorithm DMAR are globally frequent itemsets. On the contrary, the smaller y, the lower efficiency of distributed mining.

3. The communication amount among sites in algorithm DMAR is related to y. The bigger y, the less itemsets contained in C (i) in step (7) (lo), the smaller, the more.

4. The value of yis related to the distributed environment of data. The bigger y, the more locally frequent itemsets     being globally frequent itemsets, and it shows that the data in DB are distributed more balanced at all sites, the smaller and the less.

5. When the number of sites varies, using the table of frequent itemsets, we can realize fast updating mining of association rules. For example: while deleting a site i, we only need to set the support account of the Si column in the table of frequent itemsets as zero, and recalculate the value of S and 0, then we can get the. globally frequent itemsets; while adding a site, we only need to add one column to register the support count of locally frequent itemsets at the site. If the locally freqnent,itemsets at the site is a new itemsets added in the table of frequent itemsets, we can use the new-added itemsets to scan the other sites once then we can get the support count of the itemsets, recount the value of S and 0, then get the set of globally freqnent itemsets.

5.2 Comparison between DMAR and other related algorithms  1. Completeness. Both the algorithm DMAR and FDM can mine out the entire frequent itemsets, but SMDM only can get the approximate frequent itemsets.

2. Communication. To mine out the set of globally k freqnent itemsets in every iterative step, the algorithm FDM need to exchange the support connt of the set of candidate k frequent itemsets and the locally itemsets, which results in a large amount and great frequency of communication and complicated communication protocol. Differently, algorithm DMAR transits and registers the set of locally frequent itemsets through step (3) in algorithm after mining the set of locally frequent itemsets at any site respectively, with once communication at step (7) and step (lO),and the communication data is a set of candidate frequent itemsets getting at each site from the table of frequent itemsets.

Therefore algorithm DMAR has less frequency (only three times) and small amount of communication (the set of locally freqnent itemsets and the non-freqnent itemsets in candidate global frequent itemsets at any site and the support connt of them).

3. Mining efficiency. AU the sites must be synchronously waiting for collecting the support counts of the candidate frequent iternsets at the other sites at the end of every iterative step in algorithm FDM. While the mining process at any site in algorithm DMAR is independent, and sometimes can be off-line with the small amount of communication. Therefore the mining efficiency of algorithm DMAR is higher than that of FDM.

6 Experiment analysis  Based on the tool pale Visual Basic at PentiumiV-1.4G CPU, 128M memory store and on the operation system Windows 2000, we made experiments using the real set of transaction itemsets of some supermarket for one month as transaction data set, there are 69231 transaction records, and 15169 pieces of merchandise, these commodities are  divided into three levels: the lowest is the 15169 pieces of commodities, the second is 228 kinds of ware, the fiat  level has 20 sets. The experiment is processed in 69231 transaction itemsets based on 228 items, that is lIl=228, IDBk69231, and the mining algorithm in the experiment is Apriori. The mining made by one machine. The other way of mining is the distributed mining, using three sites named as s l ,  s2. s3 under Windows 2000 LAN environment and the number of transaction records are 23000. 23000.

23231 respectively. The result of the experiment is figured as follows iig.1:  Fig.(a) describes the execution time of one machine mining and distributed mining (DMAR) under different minimum support. And the result is same, that is, the two different ways of mining have the completely same frequent itemsets and its support, so the experiment sufficiently manifested that the algorithm DMAR is correct, and effective as well for it.

I t D M A R  +One machine 1  .- e 8  m .* 4 , w  2   B h lo 2 1 6 + -  x + I , , , ,  Speedup ratio 1 0 .* 2. 5 E . S I W  0 0  ' Minimum support (%)  @)  /+Distributed factor 1  >-,  Fig.1. The result of experiment  Fig.@) describes the ratio of one machine mining time and distributed mining time (DMAR) under different minimum support, that is speedup ratio. From the experiment, we discovered that several factors influencing speedup ratio: (1) pruning time: It is related to transaction itemsets and minimum support, under the same minimum support, the more transaction itemsets, the more amount of       itemsets joining together, so the pruning time will be longer; while the same transaction itemsets, the less minimum support, the more the amount of produced k-frequent itemsets, and the amount of joining k+l itemsets will be more, then the pruning time will be longer too. At the same time, it manifests that the pruning time and the number of the itemsets needing.to mining have no direct relationship, while being the same transaction itemsets and minimum support, the effect of pruning to the final efficiency will be more bigger with the amount of transaction itemsets decreasing. Since the amount of transaction itemsets at each site in distributed mining is less than that of one machine, and the transaction itamsets and minimum support relatively keep same, the pruning time?will have more influence on the efficiency of distributed mining.(Z) The data balanced degree at each site: the balanced degree of the transaction data at each site affects the waiting time among sites, and the number of itemsets as meta knowledge contained in the table of frequent itemset?.. ?The .less balanced transaction data at each site, the longer waiting time among sites, and the more number of itemsets contained in meta knowledge at each si@; as a result at the corresponding site, the longer time counting the support count of itemsets contained in,meta knowledge, which degrades the efficiency. (3) Data communication: it is related to minimum support and the balanced degree of transaction data at each site. The smaller minimum support is, the more amount of locally frequent itemsets mined out at each site, the bigger amount of communication we need to tilling locally frequent itemsets into the table of frequent itemsets; the less balanced degree of transaction data at each site, is the more itemsets are contained in, meta knowledge, the bigger amount of communication we need, therefore the efficiency of distributed mining is lower.

Fig.(c) describes distributed factors under different minimum support, the bigger minimum support, the smaller amount of communication, and the higher efficiency, corresponding the bigger value of distributed factory.

7 Conclusions  In this paper, to meet the higher desirable completeness, we presented mining association rules using meta-leaming technology and correspondingly algorithm DMAR by scanning twice the set of data at each site. The algorithm DMAR is to mine the set of locally frequent itemsets being meta knowledge respectively at each site, which is used to collect all the candidate globally frequent itemsets, then after scanning transaction data set once, the entire globally frequent itemsets can be produced. The algorithm has some merits, such as higher efficiency, lower amount of communication and being unrelated with whether the transaction data being balanced. It defines the distributed factor y measuring the algorithm?s efficiency, and indicates the relationship between y and the communication. the algorithm?s efficiency. In the end, using really supermarket transaction data as transaction data set, we proved by  experiments tbat the algorithm is correct and effective.

Acknowledgements  Natural sciences grants item of Sbanxi Province  Referenca  [ l ]  Agrawal R, hielinski T. Mining association rules between sets of items in large database. In: hoc  of the 1993 ACM SIGMOD conf on Management of data, New York, 1993907-216.

[2] Agrawal R. Fast algorithms for mining association rules. In: proceedings of the 20th ICVLD?1994, Santiago, Chile, 487-499.

[3] Toivonen H. Sampling large database for mining of association rules. In: proceedings of the 22th ICVLD?1996, Bombay, India, 1-12.

[4] Savasere A,Omiecinski E. An efficient algorithm for mining association rules in large database. In: proc of 21th int; conf on Very Large Data Base, Swizerland,  [51 Park J S, Yu P S. Mining association rules with adjustable accuracy. 1n:Roc of the fourth Int conf on Knowledge Discovery and Data Mining, New York, 1998.

[6] Cheung D W, Han Jiawei. Fast distributed algorithm for mining association rules. 1n:Proc of Int?l conf On Parallel and Distributed Information Systems , Florida,  [71 Wang Chunhua. Distributed Mining Adjustable Accuracy Association Rules Using Sampling. In: Journal of computer research & development, 2000,37(9): 1101-1106.

[8 ]  Feng Yucai. Incremental Updating Algorithms for Mining Association Rules. In: Journal of software, 1998, Y(4): 301-306.

191 B a n g  Jifu. Updating Association Rule ,based on dynamic Transaction Item Set. In: Computer Engineering, 2000,26(7): 64-65.

[IO] Hu Kan. Large Data Warehouse-based Data Mining: a Survey. In: Journal of Software, 1998,9(1): 53-63.

1995:432-444.

1998: 31-44.

