A New Method of Software Security Checking Based  on Similar Feature Tree*

Abstract?In order to optimize the fault feature database(FFD) and to improve the checking efficiency of software fault, in this paper, a novel method of software security checking based on similar feature tree(SFT) is proposed. All of fault feature patterns in FFD are considered as nodes of SFT. SFT is a special binary tree in which the left child of each node is a super-pattern of the node and the right child is a brother-pattern of the node.

An improved K-modes clustering algorithm and association rules are used to construct SFT. According to the characteristics of association rules, if a fault feature which is obtained by program slicing from software procedure can?t successfully matches to root of SFT, then it matches to the right child of the root.

Otherwise the fault feature matches to the left child of the root.

This process is iterated according to ?even left not right? rule until leaf node in right sub-tree or no node can be successfully matched in left sub-tree. Finally, the checking result is given by SFT. Experimental results show that our method has higher efficiency of software fault checking.

Keywords-software security checking; K-modes; software fault

I. INTRODUCTION With the rapid development of Internet, people are more  interested in the software security [1]. Most of software security problems are caused by their own security bugs which are difficult to be found. Consequently, how to detecte the potential bugs has become the focus of software security checking. At present, software security checking technology contains dynamic analysis and statistic analysis. Static analysis [2] detects software bugs through scanning source code and analyzing binary executable files.

Recent years, much works have been done for finding software faults. For example, MOPS [3] is an infrastructure for examining security properties of software which uses model checking techniques to identify whether any state violating the desired security goal is reachable in the program. Chen reported on the practical experience of model checking one   * This work is supported by the National High Technology Research and  Development Program ("863"Program) of China (No. 2009AA01Z433) and the Natural Science Foundation of Hebei Province P. R. China(No.

F2008000888)  million lines of C code with MOPS and demonstrated that model checking is practical and useful for detecting software faults [4]. In order to improve efficiency of model checking, Paul T. Darga presents a glass box model checker [5], which adopts novel language and analysis techniques that significantly speed up software model checking of data structure properties.? The checker detects any red-black tree operation such as insert or delete touches only one path in the tree from the root to a leaf. It is sufficient to check every operation on every unique tree path, rather than on every unique tree. Huang use the technique of program restructuring [6] to pre-process the source code. The pre-processing can avoid unnecessary repetition of state space search so as to decrease the overhead of space and the time in model checking algorithm.

As a mining method, clustering [7] can be used to improve the efficiency of software security checking. K-means algorithm [8] is one of the most popular clustering algorithms because of its efficiency in clustering large data sets. However, K-means clustering algorithm fails to handle data sets with categorical attributes because it minimizes the cost function that is numerically measured. K-modes algorithm [9] extends the K-means to cluster data sets with categorical attributes.

Since the K-modes algorithm uses the same clustering process as K-means, it inherits the efficiency of the K-means algorithm.

However, K-modes also suffers two well-known problems as K-means algorithm: the solutions are only locally optimal and their qualities are sensitive to the initial conditions.

Taking into account all these fault feature datas which are stored in fault feature database (FFD) contain categorical attributes, we adopt K-modes algorithm to construct similar feature tree (SFT). However, since traditional K-modes can not guarantee correctness of SFT, we propose an improved K- modes clustering algorithm. In the clustering process, a fixed number of objects which are dissimilar to each other are selected as the initial points. SFT is constructed according to these clustering results. The characteristic of association rules is adopted by SFT to improve efficiency of software security checking. If fault features which are obtained by program slicing from software procedure can?t successfully match to the fault feature denoted by one node of SFT, then they need not to      be matched to the fault feature denoted by any node of left sub- tree of the node of SFT.



II. PROBLEM STATEMENT In this section, we present some improvements for  traditional K-modes and a method to construct similar feature tree (SFT).

A. Some  improvements  for traditional K-modes The K-modes algorithm extends K-means paradigm to  cluster categorical data by removing the limitation imposed by K-means through following modifications: (1) Using a simple dissimilarity measure or the hamming distance for categorical data objects. (2) Replacing means of clusters by their modes.

However it does not guarantee unique clustering result like k-means, because we get different results with randomly chosen initial cluster modes and hence the results cannot be trusted. So we present an improved K-modes algorithm to cluster FFD. We propose a method by which we choose initial modes. The clustering results are given by several trees in the improved algorithm.

To illustrate the clustering process of improved K-modes algorithm, the following definitions are necessary.

Definition 1. shared pattern In a pattern set, if a pattern is sub-items of all patterns of the pattern set, the pattern is defined as shared pattern.

Definition 2. sub-pattern and super-pattern If pattern A is a sub-items of pattern B, the pattern A is defined as sub-pattern of B and the pattern B is defined as super-pattern of A.

In the improved K-modes clustering algorithm, the operation which choose initial cluster modes is runned in whole process of clustering. First of all, M fault feature patterns are randomly chosen as initial cluster modes and the dissimilarity between them is computed. Among some similar modes, only shared pattern is preseved. Allocate pattern to the cluster whose mode is nearest to it according to dissimilarity. Adjustment the shared pattern in a cluster as new modes. If a pattern of FFD is dissimilar to each of cluster modes, take it as a new initial mode for another cluster.

Finally, the clustering results are given in the form of k trees, One example is shows in Fig. 1.

In Fig. 1, the tree T is a clustering result which obtained by K-modes clustering. Each of pattern denoted by node of T is similar to others. The root of T is shared pattern in its cluster result, and the patterns which are denoted by its child nodes are its super-pattern.

Figure 1.  A tree T is obtained by K-modes clustering  B. Similar Feature Tree (SFT) In order to improve the efficiency of checking software  fault, we construct similarity feature tree(SFT). SFT is a data structure which is obtained through converting the forest into binary tree based on the knowledge of K-modes clustering algorithm and characteristic of association rule. Association rules reflect the interdependence and correlation between two objects. If it has a certain relationship between two or more things, then, one thing can predicted by other things.

Association rule can be applied to detect fault in SFT. The interrelated definition of SFT is as follows:  Definition 3. brother-pattern In FFD, if pattern A is dissimilar to pattern B, A(or B) is defined as a brother-pattern of  B(or A).

Definition 4. Similar Feature Tree For a binary tree, the pattern P is stored in a node N of the tree satisfies the following two conditions:  (1) a super-pattern of P is stored in leftchild of N (2) a brother-pattern of P is stored in rightchild of N  The binary tree is defined as a similar feature tree, denoted by SFT. The constructing process of SFT is described as follows:  Since the fault feature patterns of the FFD are clustered by K-modes, and the fault feature patterns in each of clustering result are mined with the association rule. The shared pattern of each clustering result is considered as the root of a tree and its super-pattern is considered as its child recursively. Thus, K trees can be obtained (that is forest). We transform the forest into SFT. The following is the process which K trees are converted into SFT.

We select a root of tree T1 from K trees as root of SFT T.

The left sub-tree of T is composed of children nodes of T1, and right sub-tree of T is composed by other trees in forest.  Fig. 2 demonstrates the process that forest with two trees are converted into a SFT.

After the SFT has been constructed, the SFT needs to be updated. The update of SFT contains two aspects:  1) Add new fault feature patterns: For a new fault feature pattern P, if there is no sub-pattern of P in the FFD, the P is considered as a new node. It is inserted into the SFT as a right child of the right sub-tree. Otherwise, the P is inserted into the SFT as a left child of the node which represents its sub-pattern.

If the sub-pattern had left sub-tree, the left sub-tree is modified as right sub-tree of P. The process is illustrated in Fig.3.

2) Delete the outdated fault feature patterns: For a outdated fault feature pattern P, if there is no super-pattern of P in the FFD, the node corresponding to P can be deleted. If the super-pattern of P exists in the FFD, in other words,the nodes corresponding to P has left sub-tree, the node is replaced by the root of its right sub-tree and its left sub-tree is inserted as child of right sub-tree. As is showed in Fig. 4, the outdated feature pattern T1b is deleted from the SFT, it is replaced by its right child and its left sub-tree insert into its right sub-tree as right child.

TA  TA1 TB2TB1  TC TB  T      Figure 2.  Forest are converted into a SFT   Figure 3.  Add new fault feature patterns to the SFT   Figure 4.  Delete the old fault feature patterns from the SFT  In Fig. 3, the T3a and T1b1 are two new feature patterns, since there is not sub-pattern of T3a in the SFT, the T3a is inserted into the right sub-tree of SFT as a right child. In contrast, there is sub-pattern T1b of the T1b1 in SFT, so the T1b1 is inserted into the sub-tree whose root is T1b as its left child of the root, and the original left child T1bc is inserted into the SFT as right child of T1b1.



III. SOFTWARE SECURITY CHECKING BASED ON SIMILAR FEATURE TREE  In order to improve performance of software fault checking, all similar patterns in FFD are clustered by improved K-modes clustering algorithm and the characteristic of association rule is  applied in all patterns of same clustering result, SFT is constructed in final.

SFT, as a measure, can be used to evaluates software security. Its main purpose is to detect software faults. In the process of fault checking, A rule must be obeyed. The following is the definition of the rule.

Definition 5. Even Left Not Right  For each of node of SFT, if the leftchild Nl of some node N is matched to a fault feature F, the rightchild Nr of N not must be matched to F. The rule is defined as Even Left Not Right, denoted by ELNR.

In order to simplify software programs and reduce the scope and path of security checking, the technology of program slicing[10] has been applied in this paper. Program slicing is a technology or process which applies the slicing guidelines <p, v> to extract and simplify the program p for p?. The purpose of program slicing is to extract the relevant feature elements of m from p, ignore irrelevant elements, reduce the scope and path of checking to improve the efficiency.

After all the preparatory works are completed, we can use SFT to detect software fault. The processing of software security checking based on SFT is described as follows:  The fault feature pattern m which is denoted by root of SFT is extracted from FFD M, then the program P" which have been sliced matches to m. If P??m=null, it shows that the procedure of software is security for fault feature pattern m. Then the P" continue to matches to the fault feature pattern which is denoted by root of its right sub-tree. Otherwise if P??m?null, it denotes that the software has security fault m. Then the P" matches to the fault feature patterns is denoted by root of its left sub-tree. It is worth emphasizing that the P" cannot to matches to the rightchild of node n which is the leftchild of some node and have successufully been matched by P". This process is iterate obey ELNR until leaf node in right sub-tree or no node can be successfully matched in left sub-tree. Finally, the results of software security checking is produced, and the path and location of software fault is given.



IV. EXPERIMENTAL RESULT Since SFT is constructed by using clustering algorithm, a  direct factor which affect efficiency of software fault checking is accuracy of clustering algorithm. In this section, we mainly discuss how to obtain more accurate clustering results from software feature database. The correct clustering results are extremely important to constructing of SFT. The process of constructing SFT can not be separated from clustering. It's correct or not will directly affect the quality identify to software fault. Therefore, we design this experiment to verify the correctness of the improved K-modes clustering algorithm.

To test our approach, we use the following categorical data sets which are obtained from UCI Machine Learning Data Repository [11]. These data sets are showed in TABLE I.

In order to estimate the accuracy of our algorithm, we employ the measure method [12] to compute the accuracy of clustering result. Given the final number of clusters, K, clustering accuracy was defined as:  A  D F E  C B  T  a  c e  f  b  t  d  A  D  b  B  t  T  a  E  F  C  c  d  f e  T1a  T1ab  T2b  T1b  T2  T1  T2a  T1bc  T1bd  T1c  T2bc  T2bd  T3a  T1b1  T1a  T1ab  T2b  T1b  T2  T1  T2a  T1b1  T1bc  T1c  T2bc  T2bd  T3a  T1bd  T1a  T1ab  T2b  T1bb  T2  T1  T2a  T1bc  T1bd  T1c  T2bc  T2bd  T1a  T1ab  T2b  T2  T1  T2a  T1bc  T1bd  T1c  T2bc  T2bd       K  in i  r a =  = ? . (1) where n is the number of records in the dataset, ai is the  number of data objects occurring in both cluster i and its corresponding class, which had the maximal value. In other words, ai is the number of records with the class label that dominates cluster i. Consequently, the clustering error is defined as  e=1?r (2)  Low value of e suggests better clustering. Table ? and Fig.5 show our experimental results.

To conduct experimental comparison and to verify the efficiency of our proposed method, We run 10 times traditional k-modes clustering algorithm and our algorithm respectively in every data sets. Table ?. compiles the clustering results on the categorical data sets by tradition k-modes clustering algorithm and the k-modes clustering algorithm by our proposed.

TABLE I.  DATA SETS  Data sets Size of data set Attributes value Numbers  of clusters  Wisconsin Breast Cancer Data(D1) 699 {1,2,3,4,5,6,7,8,9,10} 6  Michalski soybean disease data set(D2)  455 35 multi-valued categorical variables 4  Zoo small data(D3) 101  Boolean or {0, 2, 4, 5, 6, 8} 7  Congressional Vote Data(D4) 435 Boolean 2  TABLE II.  AVERAGE CLUSTERING ERROR COMPARISON USING TRADITIONAL K-MODES ALGORITHM AND OUR ALGORITHM  Data sets  Average clustering error Traditional k-modes algorithm  Our algorithm  D1 0.214a 0.101 D2 0.451 0.161 D3 0.418 0.149 D4 0.301 0.043   0.1  0.2  0.3  0.4  0.5  D1 D2 D3 D4  Data sets  a v e r a g e  c l u s t e r i n g  e r r o r  traditional k-modes  improved k-modes   Figure 5.  Clustering error using traditional k-modes algorithm and using  our k-modes algorithm  Fig. 5 shows the results accoriding table ? , it clearly shows the superiority of our method. One important observation is that the initial modes computed by our proposed approach were quite similar to the actual/desired modes for these data sets and therefore better clustering and fast convergence is achieved.



V. CONCLUSIONS In this paper, to improve efficiency of software faults  checking, SFT is instructed to detect software fault as a measure. Association rules and clustering algorithm are used to construct SFT. The characteristic of association rules is adopted by SFT to speed up software security checking. We know incorrect clustering results lead to incorrect SFT. In order to ensure the accuracy of clustering and applied the clustering to FFD, We propose an improved K-modes algorithm, Since traditional K-modes algorithm suffers from the drawback of choosing random initial modes which may lead to formation of non-repetitive clustering results that are undesirable for software fault checking. We presented an new approach to select the initial modes for K-modes clustering algorithm. The selected modes are mostly representative of those patterns that are dissimilar to each other and come from different group.

Also, the modes computed using this method were found to be quite similar to the actual/desired modes of the datasets.

Therefore, consistent clustering with fast convergence was achieved with less variance in clustering error.

