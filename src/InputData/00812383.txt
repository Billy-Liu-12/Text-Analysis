Discovering Web Access Orders with Association Rules

ABSTRACT  In the past few years, the use of World-Wide-Web (WWW) has grown exponentially. It is important for companies to analyze the behaviors of their customers so as to have better profit and services. This paper ex- plores the technique of association rules to  discover the access patterns of WWW users. In order to support our proposed algorithms, there is a pre-mining phase which filters and transforms WWW access logs into a database of access transactions. Our first algorithm, Extended Apriori algorithm (EAA), is a variant of the infamous Apriori algorithm. This algorithm is modi- fied to  handle the item order in the counting and gener- ation steps of the candidate access patterns. However, the EAA does not deal with the minimal viewing time constraint directly. In the OPM algorithm, we propose to consider how to reduce the number of database scans and exploit the minimal viewing time constraint during the candidate itemset generation. In our experiments, the results showed that the OPM algorithm took less than half of the time required by by the EAA '.

1 INTRODUCTION  The problem of discovering association rules was first introduced in [l]. It is to find the possible associations between items when a user specifies a minimum sup- port (s) and a minimum confidence (c). For example, one possible association rule can be "there are 10% of customers who buy bread and 20% of them also buy butter." Those rules are usually used to  make better stocking and discounting decisions.

Recently, different knowledge discovery techniques have been attempted in the area of WWW because of its rapid growth and popularity. In (21, the original sequence of log data is converted into a set of max- imal forward references. From these references, the full-scan and selective-scan algorithms are developed to  determine the large traversal patterns of users. In the selective-scan algorithm, it can reduce the number of database scans by utilizing the candidate reference sequences. Borges and Levene proposed to use an in- cremental approach to find out the traversal patterns of users [3]. In their work, the concept of confidence and support for composite associate rules are redefined [3]. Two algorithms, Modified Depth-First Search Al-  lThe work of the authors were supported in part by the Hong Kong RGC Grant: Q l Z O .

3 0-7803-573 1 -0 /95@ 10.00 0 1999 IEEE Iv-99  gorithm and Incremental Step Algorithm are proposed.

There may be many traversal patterns of our  WWW users. Not all results are interesting. One sug- gestion in measuring a user's interest in the web pages is the viewing time of the pages [4]. Shahabi introduced a novel path clustering method based on the similarity of the history of user navigation. Therefore, instead of generating all the frequent patterns, we propose to allow users to  define their own interests  the number of web pages in a pattern, and  the minimum viewing time of the pages in the pat-  By exploiting, these information, it would improve the mining efficiency significantly.

The two new parameters above can be considered as new constraints in mining association rules. The first parameter is the size constraint which limits the number of items (pages) in each pattern. The sec- ond parameter is the viewing constraint which is an inequality of quantitative values associated with the items. Recently, Srikant et. al. [lo] have proposed the MuZtzpleJoin algorithm and the Direct algorithm to discover association rules which satisfy a given boolean expression over the items of a database. The expres- sion is used to indicate the existence or non-existence of the items. Only association rules satisfying the ex- pression are output. However, quantitative items are not supported. In [9], the CAP algorithm is developed to  deal with the constrainted association queries. The algorithm shows how to optimize the mining process when the input constraints are either anti-monotone or succinct or both.

In this paper, we suggest two approaches in ap- plying association mining to  discover WWW access patterns. The first approach is to  modify the infa- mous Apriori algorithm to handle the item order in the counting step and the candidate itemset generation step. However, the Extended Apriori algorithm (EAA) cannot deal with the minimal viewing constraint for the access patterns effectively. In the OPM algorithm, we propose to consider how to reduce the number of database scans and exploiting the minimal constraint during itemset generation.

tern.

2 ACCESS TRANSACTIONS  For most WWW servers, there are access logs to keep track of their utilizations. An example of such as a log    158.132.24.196 - - C07/0ct:12:37:34 158.132.24.196 - - [07/0ct:12:37:34 158.132.24.196 - - [07lO~t:I2:37:34 158.132.24.196 - - [07/0ct:12:37:34 158.132.24.196 - - [07/0ct:I2:37:34 158.132.24.198 - - [01/Ocf:12:42:43 158.132.24.196 - - [07fOct:l2:42:57 158.132.24.196 - - Co7fOct:12:45:12 158.132.24.198 - - COlIOst : 12:45: 15 158.132.24.187 - - [07fOct:l4:12:59 158.132.24.181 - - C07/0ct:14:13:00 168.132.24.187 - - [0710st:l4:13:00 158.132.24.196 - - [07/0st:l4:28:38 158.132.24.196 - - [0710ct:14:28:39  Wij O(i ,  j )  "GET ficmsfblank.gii HTTPfI.0" 200 148 "GET 1iconsfback.gii HTTPf1.0" 200 216 "GET lisonalfoldsr.gii HTTPII.0" 200 225  "GET ficonsftext.gir HTTPf1.0" 200 229 "GET fyuan.htm HTTPII.0" 403 288 "GET findex.htm1 HTTPII.0" 403 290 "GET lindsx.htm1 HTIPfI.0" 403 290 "GET Iyuen.htm HTTPI1.0" 403 288 "GET /-vti-ini.html HTTPfI.0" 403 293 "GET f-vti-inf.htm1 HTTPI1.0" 403 293 "GET f HTTPIl.0" 403 280 "GET f HTTPf 1 .O" 200 7122 "GET fImagasfnsvs.jpg HTTPfl.0" 200 3507  #-GET ficonsfinaga2.gii Hnpfi.o" 200 309  entries of Ti as ( P O ( ~ , ~ ) ,  d i j ) function to find the page label of the i th element of transaction T;  Figure 1: WWW access log.

di , j  S; A P ( S i )  is shown in Figure 1. It is difficult to apply any mining technique directly on these logs as their formats may vary. More importantly, each line in the log file only indicates one access of a particular Web page. This is only interesting from a single server view, but not for individual users. It is more useful if we can identify Web pages that are accessed by an individual user, or even a session done by an individual user. A normal WWW access log records the information of client IP address, name of html pages and the access time on those pages. Based on these information, our identifi- cation method is based on the followings assumptions  viewing time of the page in Wij a subsequence of size k in Ti set of access patterns (page labels) equivalent to SZ.

The server can be a WWW server or a proxy server as long as access logs can be recorded.

Only one user is active on a single IP address at a time.

Ak Lk CI,  0 When a user has been idle for a long time (say 1 hour), the current session ends.

0 Local cache in the client machines have been disable and every Web page access will need to be served by the server.

an acess pattern of size k set of frequent patterns of size k set of candidate Datterns of size k  S t e p  I S1ep 2 p2 * p, ' *  7 6  Figure 2: An access pattern.

p,  Each session of a user is transformed into an access transaction. For example, in Figure 2, User A accessed the web pages in the sequence of P2 + P4 + Ps -+ P4 + Ps + P7. The access sequence forms a list of order pairs in the format of (Pi, d i j )  where Pi is the page label (number) and dij the viewing time of the page. Each order pair of Ti is represented as Wij. For the example in Figure 2, the sequence of the access transaction is {(2,7), (4,5), (6,5), (4,5), (5,2), (7,9)}.

From the access log, we identify the sessions, trans- form them into access transactions and then prepare for mining of user behaviors. Suppose that there are two access transactions, Ti and Z, and Si  and Sk are two sub-sequences of size k in the transactions, respec- tively. We can then have the following definition.

Definition 1 S i  and S i  are are access equivalent iff 3 x , y  such that  PO(^,^+^) = Po(l,y+a) where a = 0,1,2, .  . . , k - 1 and O ( i ,  x) represent the page label for wix .

In Figure 3, we define the terminologies which will be used in later sections.

p,  T T; II i th access transaction  11 all access transaction in the database  S t e p  5 * p,  D  Figure 3: Some definitions.

3 PROBLEM DESCRIPTION  The support count of an access pattern is the number of the access equivalent patterns in the access transac- tions. As in [l], when the count exceeds the minimum support (s), it is called as a frequent access pattern.

That is,  Definition 2 APk E AP(Si )  is  frequent if I AP(Si )  )> s x  I T I  Next, we formally define our first problem statement.

Problem 1 Consider a database of access transac- tions as Tl,T2,. . . ,,. .. W e  would like t o  extract all the frequent access patterns APk for all k 's.

As discussed in the Introduction section, not all access patterns are interesting. Our second problem state-  w- 100    ment is to allow a user in specifying two constraints.

The first one is the number of web pages in a pattern, and the other is the minimum viewing time of the pages in the pattern. With a given size of a pattern, it allows us to  avoid the generation of non-interesting itemset.

Hence, there will be less database scans. The view- ing time constraint reveals the interest of users in the pages and allow us to prune away unnecessary candi- date sets. With these constraints, we define our second problem below.

Problem 2 A s  in the first problem statement, con- sider the following access transactions  Ti = Wil,. . . , Wi, Wij = (Po(i,j), d i j )  in a database. W e  would like to  extract all the frequent patterns of size k (APk ?s) where for each equivalent access pattern si of a APk, we have  F is  a threshold value representing the minimal viewing t ime of the pattern.

In fact, Problem 2 is the same as Problem 1 except with the introduction of the viewing time constraint.

4 EXTENDED APRIORI ALGORITHM  We first present the Extended Apriori Algorithm (EAA) for finding all frequent access patterns. It is a modified version of Apriori which considers the or- dering of the pages during the mining. The viewing constraint will only be applied after all the frequent pattern are generated. The EAA has two phases.

Find all the access patterns S?s whose supports are greater than the minimum support s and these pat- terns are called frequent access pattern.

Evaluate the total viewing time of the mined pat- terns and check if they satisfy the viewing con- straint.

Obviously, the first phase is the core of the algorithm.

In order to generate the large patterns, Lk, we need to consider the order of pages (items) in generating the candidate set ck. In the original Apriori algorithm, the order of items within a itemset is ignored. The candidate set generation part of the algorithm is mod- ified as in Figure 4. In the procedure, it ensures that ck is the superset of Lk with the consideration of the pages ordering within the pattern.

After ck+l is generated, we have to  prune those pattern whose support is less than the minimum re- quirements. So, we have to scan the database to count  Given a set of Lk, we want to  form the candidate item- set Ch+l.

1. For each pair of access patterns in Lk as Ak and Ak7 where  Figure 4: Candidate pattern generation  the number of support of each pattern in ck+l by stor- ing them into a hash tree. After the hashing, we get the desired pattern in Lk+l. The algorithm stops when reaching the size constraint set by the user. The sec- ond phase is simply done by checking the dij of each pattern s k  in Lk+l if they exceed F .

5 OPM ALGORITHM  In our work, only patterns of size k which is speci- fied by users and their viewing times longer than F are useful. We try to exploit these two constraints to achieve better efficiency. This is done by looking into the following aspects.

1. Reduce the number of scanning the entire database  2. Reduce the number of candidate pattern (viewing  (size constraint), and  time constraint).

With the new constraints, we developed the generat- ing sequence and max-man pruning techniques, respec- tively. These techniques are embedded in our second algorithm, Order Pattern Mining (OPM).

5.1 Generating Sequence  The idea is to  generate ck from Lk/2 if ever possible.

With this approach, we can skip the generation steps of Lk/2+1, Lk/2+2,. . ., and Lk-1. In the best case, it takes only log2 k steps in finding Lk instead of the k steps in Apriori. When IC is not a multiple of 2, we first find out the L?s up to L, where 2? < k < 2?+l. We then find Lk by utilizing L,, LWl2, Lw/4, . . ., etc. For example, if k is 31, instead of taking 31 steps to find out L31, we will only take 9 steps,  Iv-101    Given the generating sequence GS : gsl,  gs2, . . ., and let L,; be the current large itemset.

0 if ((gsi - gsi-1) # 1) then - For any two patterns A,; ,  A , ; ,  E L,;  * if ( (A,;  n A S i 7 )  = 4) then { c = A,; U A,; ?; Insert c into CSi+, ; }  else  - Apply the candidate generation procedure as in Figure 4.

Figure 5: Mining under generating sequence GS.

For a given integer value k, the generating sequence GS: (gs l ,  gs2, . . .) is obtained by the following formula  gs+ if gsi is even gsi-1 otherwise gsi-1 =  where gsl equals to 1 initially. The resultant sequence GS is then used to guide the generation of the can- didate pattern. The algorithm which make use of the generate sequence is shown in Figure 5.

5.2 MaxNin  Pruning  The performance of the Apriori algorithm is mainly depended on two integers X and Y ,  where X is the number of the database scanning and Y is the number of candidate itemsets in each iteration. In the previous section, we have discussed how to  reduce the value of X rapidly.

Here, we will discuss how to  reduce the value of Y .  There are two pruning possibilities in reducing the size of the candidate pattern. The first situation is when ck is generated from Lk-1. In this case, for any candidate pattern c if one of its (k - 1)-subsets is not in Lk-1, c should be removed from c k .  The second situation is when ck is generated from Lk/2.

Similarly, for any pattern that some of its k/Zsubsets is not in Lk/2, c should be removed also. There is a trade off when C2k is generated by Lk. In general, the number of candidate patterns is larger when compare to  the case that C2k is generated by L2k-1. To offset the problem, we can utilize the viewing time constraint in our pruning.

In the first database scanning to  find L1, we can obtain the maximum viewing time of individual pages and form the list maxlstl. After we obtained L2, the maximum viewing time of each pattern is the maxi- mum sum of the viewing times of these two pages in dif- ferent transactions. The list maxlstz ({V21 , Vz2, . . .}) is then re-sorted in a descending order according to the maximum values. This procedure is repeated at the end of each iteration and forms one maxlsti ev- erytime. The idea of MaxMin pruning is to  allow us  Given maxlsti as { vi,, vi, , . .  . }.

1. if the sum of the Vil + . . . + Vi, is greater than F  then  0 set counter c = ([(k - i ) / i l )  + 1 0 set maxsumi equal to  the sum of V,, + . . . + 0 Repeat  Vic-, items  - increase c by 1; until V,= +maxsumi 5 F  - remove all the items whose index is larger than c from Li and form Li?  Figure 6: Min-pruning for Li a t  iteration i  t o  remove a candidate access pattern whose maximum is less than the minimum viewing time set ( F ) ,  even before the database scanning. The pruning procedure of MaxMin is shown in Figure 6.

6 EXPERIMENTS  In this section, we compare the two proposed algo- rithms, EAA and OPM. We notice that it is not suffi- cient to  determine the efficiency of the algorithms by only counting the number of steps in generating the candidate itemsets. For the OPM, it takes fewer steps to  find Lki, but at the same time, it takes extra effort for MaxMin pruning process of the large itemsets at each step. For example, in pruning Lk, we need to ver- ify if all of the (k/2)-subsets for an element in c k  are in Lk/2. If items are totally associated with each other, the number of comparisons will be k c k p  x, c k p  at each mining step. On the other hand, for EAA, there will only be k c k - 1  x, c k - 1  comparisons at each step.

However, EAA generates the frequent patterns incre- mentally, and a post-mining process for the evaluating of the viewing time inequality is required. Obviously, the OPM algorithm will out-perform EAA by exploit- ing the two new constraints.

In order to  assess the performance of the algo- rithms, we have implemented the EAA and the OPM algorithm in C++. We ran our preliminary experi- ments on a SUN SPARC workstation with 32 Mbytes of main memory. There are two sets of experiments.

The first set is based on a fixed number of transac- tions (1000) generated by a program modified from the pseudo-data generation program in [l]. The spe- cific pattern size is 8, the minimum threshold of the viewing time is 30 minutes and support is set to  be 5%. We are interested in measuring the time to  dis- cover the constrainted access pattern under different numbers of pages among the transactions. The results are shown in Figure 7.

The second set of experiments is similar to the first  N -  102    0 500 1000 1500 2000 2500  Number of items (pages)  Figure 7: Discovery time for a database of lo4 access transactions but varying number of pages.

set, except that we have fixed the number of pages and experimented with different database sizes. The cor- responding results is shown in Figure 8. The results show that the OPM algorithm are more efficient and also the number of transactions has a larger impact than the number of pages in the access log database.

This is expected since we have to scan the whole database everytime for each iteration. The OPM al- gorithm skips many unnecessary iterations. Therefore, the more transactions in the database, the better the algorithm can save the computational effort. This can easily observed in Figure 8, and the OPM algorithm generally speeds up the mining process for more 100% when compared with OAA.

7 CONCLUSIONS  In this paper, we present two algorithms for the mining of access patterns in WWW pages. Before the mining process, there is a pre-mining phase which filters and transforms WWW access logs into a database of ac- cess transactions. Our first approach is to  modify the infamous Apriori algorithm to handle the item order in the counting and generation steps of the candidate access patterns. However, the Extended Apriori algo- rithm does not deal with the minimal time constraint for each access pattern effectively. In the OPM algo- rithm, we propose to consider how to reduce the num- ber of database scans and exploiting the minimal con- straint during itemset generation. In our experiments, the results showed the OPM algorithm took less than half of the time required by by the EAA  x 10' Number of Transactions  Figure 8: database transaction.

