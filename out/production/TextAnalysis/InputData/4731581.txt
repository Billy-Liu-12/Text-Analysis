A Bitmap Compression Algorithm for Vertical Association Rules Mining

Abstract?The vertical association rules mining algorithm is an effective mining method recently, which makes use of support sets of frequent itemsets to calculate the support of candidate itemsets. It overcomes the disadvantages that Apriori and its relative algorithms produce large amount of candidate itemsets and require scanning database many times. The vertical association rules mining algorithm needs to save support sets of frequent itemsets in the memory ? and usually adopts bitmap to store frequent itemsets? support sets. This is the main space expense of the algorithm, and also a key factor that restricts algorithm?s expansibility. Therefore, in this paper, we will present an improved algorithm which adopts compressed bitmap to improve on vertical association rules mining algorithm. It compresses the support sets which will be put into the memory to achieve the purpose of saving memory space. Our experimental results indicate that the bitmap compression algorithm for vertical association rules mining decreases memory space when the process is running.

Keywords- data mining; Bitmap; vertical; compression

I.  INTRODUCTION Association rule is an important data mining method,  mining of transaction database is mining relationship between transactions? attributes. At present, mining methods can be based on data horizontal structure and data vertical structure two types.

The classical algorithm of association rules, Apriori algorithm is based on data horizontal structure. K frequency itemsets is created by k-1 frequency itemsets, and then cut out the itemsets which contain non frequency item. Calculate the support of candidate frequency itemsets by scanning database. The weak point of this algorithm is that it needs to scan the database many times, also, the creation and validation of candidate frequency itemsets is rather complicated. Even some optimizations have been done to the algorithm, its inherent flaws still be there[2].

The vertical association rules mining algorithm based on the vertical distributing data overcomes the flaws of the Apriori algorithm which do not need to scan the database several times as well as avoid the complex creation and validation of candidate frequency itemsets. Vertical association rules usually use the bitmap to store the support sets of frequency itemsets[3]. By calculating the AND of  candidate itemsets and the minimum support, we can obtain the frequency itemsets[4]. Once the data set is too large, the memory space required by bitmap will also be great which will affect the efficiency of the algorithm to some extent.

This paper introduce a revised way to vertical association rules mining algorithm, which is, compress the support sets bitmap of data itemsets that to be sent to memory, so as to save the space required by the algorithm.



II. BASIC CONCEPTION  Def-1 Set D to be the set of T(transaction) , D={ t1,t2,? ,tn }, T(transaction) is the set of items. We can mark as: T={ i1,i2,?ip } and T?D. The elements in T, ij (j=1, 2,...,p) is called items. There is a unique mark corresponding every T.

Such as transaction number can be marked as TID.

Def-2 Set I= { i1,i2,?im } is the set of all the items of database, and it?s also set of the binary system character.

Any subset in I is called itemset, if |X|=k, then set X is called kitemset. Set tk and X to be the transaction and item set in D, if X?tk, we say transaction tk includes itemset X. The number of transactions of Dataset D including itemset X is called the support number of itemset X, mark as?x the support of item set X is marked as: support(X).

su p 1 0 0 %p o r t D ? ?= ?  (1) Here |D| is the number of transaction in data set D. If  support(X) is not less than the minimum support set by the user (marker as: minsupport), then X is called frequency itemset, otherwise X is called non-frequency itemset. An association rule is the implication formula like X?Y. X, Y are both itemsets, and X?I, Y?I, X?Y=?, X , Y are called the precondition (LHS) and conclusion (RHS) of rule X?Y.

Def-3 The support of Rule X?Y in database D is the ratio of the number of transactions containing both X and Y to all the transactions. Marked as support(X?Y). Set |D| is the total number of transactions in database: support(X Y)=|{T :X Y T,T D)|/|D|=support(X Y)? ? ? ? ? (2)  Support describes the probability that the two itemsets X and Y are both in the transaction.

2008 International Symposium on Computer Science and Computational Technology  DOI 10.1109/ISCSCT.2008.360     Def-4 The confidence of Rule X?Y is the ratio of the number of transactions containing both X and Y to transactions containing X. It can be used to describe the reliable degree. Marked as confidence (X?Y): confidence (X Y )=|(T : X Y T,T D)|/|{T:X T,T D)|  support(X Y)                                  = support(X)  ? ? ? ? ? ? ?  (3) Usually, the minimum confidence that users set according to mining demand is marked minconfidence.

The confidence of the association rules X?Y educed by frequency itemsets (X?Y) can be calculated by the support of frequency itemset X and (X?Y). Therefore, the problems of association rules can be divided into two sub ones[1]:  1). Find out all the frequency itemsets in database D according to the minimum support.

2).Create the association rules according to the frequency itemsets and minimum confidence.



III. VERTICAL ASSOCIATION RULES MINING Horizontal structure is the data distribute way by most  association rules mining algorithm, its dataset is made up of a series of transactions, each of them includes transaction?s ID TID and relevant transaction ? s inclusive itemsets.

However, vertical structure is that the dataset is made of a series of items; each of the items has its TID-list that is the ID list including all transaction of this item[6]. Table 1 is for transaction database:  TABLE 1. A TRANSACTION DATABASE  TID ITEM  1 A,B,C,E  2 A,B,E  3 B,C,E  4 A,B,D,E  5 A,B,C,D,E  6 B,C,D  TABLE 2. HORIZONTAL STRUCTURE AND VERTICAL STRUCTURE   At present, vertical association rules algorithm only  needs to scan database once, avoids Apriori and its relative algorithms scanning database many times, and conquers the disadvantage that Apriori produces large candidate itemsets simultaneity, makes the algorithm more effective[7].

The process of vertical association rules mining as follows[8]:  First step, produce bit-vector sets of data items, that is, phase frequent 1-itemset produced.

Scan the database once, set up a bit-vector for each data item, and calculate support of each data item at one time.

Then, find frequent 1-itemsets.

Second step, phase frequent 2-itemset and related matrix produced.

Calculate AND of any two bit-vectors of data items according to a certain strategy, and calculate the support of the AND, similarly, find frequent 2-itemset and related matrix.

Third step, phase frequent (k+1)-itemset(k?2) produced.

According to the related matrix, use Depth-first method  and bitmap to calculate candidate itemsets. After we gain frequent 2-itemsets, to every frequent k-itemsets(k ? 2), calculate AND with other data item and support according to a certain strategy. If the support is bigger than minimum support, then produce frequent (k+1)-itemset. Until there are not any longer frequent (k+1)-itemsets, end the algorithm.

Although vertical association rules algorithm conquers some disadvantages of Apriori, and adopts bitmap to store data, compress data to 1/8, there is a problem that it uses memory space too much when the data set is too large.

In this paper, combine the idea of bitmap; apply the bitmap compression method to vertical association rules algorithm. Compress large database file, relieve contradiction between vertical association rules algorithm?s run speed and memory space in a certain extent.



IV. BITMAP COMPRESSION ALGORITHM AND THE AND BASED ON COMPRESSED BITMAP  Vertical association rules algorithm makes use of AND operation of frequent itemsets ?  support sets to gain candidate itemsets. In order to decrease the memory space and make the algorithm terser, it adopts bitmap to store frequent itemsets usually[9]. But to the vertical association rules algorithm, storing frequent itemsets is still algorithm? s main space spending, and also an important factor restricting algorithm ? s expansibility. Be aimed at this problem, in this paper, we present a bitmap compression algorithm. It compresses the support bitmap to cut down the memory space that the algorithm needs and enhance algorithm?s expansibility.

A. Bitmap compression function Count 0?s of original bitmap?s sequential 0-substring  which will be compressed and express them as integers.

Then transform these integers into smaller binary strings [10].

The compression algorithm has two steps: 1) Count 0 ? s of original bitmap ? s sequential 0-  substring.

Read the original bitmap, when we fall across a sequence  of i 0?s followed by a 1, we call that sequence a segment and represent this segment by integer i.

2) Utilize the integers from step 1 and get compressed bitmap.

In our scheme, we first need to determine how many bits the binary representation of i has. This number j, which is       approximately log2i, is represented in ?unary?, by j-1 1? s and a single 0. Then, we can follow with i in binary.

Example: If i=13, then j=4; that is we need 4 bits in the binary representation of i. Thus, the encoding for i begins with 1110. We follow with i in binary, or 1101.Thus, the encoding for 13 is 11101101.

The encoding for i=1 is 01, and the encoding for i=1 is 00. In each case, j=1, so we begin with a single 0 and follow that 0with the one bit that represents i.

To appreciate the value of the encoding, suppose that there are n binary strings, length=n each of them. Notice that the code for a segment of length i have about 2log2i bits. If each bit-vector has a single 1, then it has a single segment, and the length of that segment cannot be longer than n. Thus, 2log2n bits are an upper bound on the length of a bit-vector ?s code in this case. The total number of bits to represent the records is at most 2nlog2n. Notice that without the encoding, n2 bits would berequired. As long as n>4, we have 2nlog2n<n2, and as n grows, 2nlog2n becomes arbitrarily smaller than n2.

B. AND operation based on compressed bitmap Fundamental idea: In order to enhance algorithm?s  operation speed after bitmap compressed, adopt a dynamic mode which is decoding and calculating at once. It doesn?t need to decode all bit-vectors at once, then, can calculate support sets? AND sets.

Through part 3, in vertical association rules algorithm, calculating item?s support needs to AND with each two rows of bit-vectors. By using this compression algorithm, we do not have to do the decoding all at once. The algorithm lets us decode one segment at a time, and we can thus determine where the next 1 is in each operand bit-vector. If we are taking the AND we produce a 1 if and only if both operands have their next 1 at the same position.

Algorithm concrete example: There are two bit-vectors called p and q: 100000010000  and 000000010000, their compressed bit-vectors are 00110110 and 110111. We can decode their first segments easily; we find they are 0 and 7. That is the fist 1 of the bit- vector for p occurs in position 1, while the first 1 in bit- vector for q occurs at position 8. Second, we must decode the next segment for p, since that bit-vector may produce another 1 in position 8 where q produces a 1. However, the next segment for p is 6, which says that this bit-vector next produces a 1 at position 8. Therefore, we can generate seven 0?s and the 1 at position 8. It comes if and only both p and q have the same 1 at position 8.

We conclude that the AND of these bit-vectors is 00000001. Referring to the original bit-vectors of length 12, we can see that is almost right; there are four trailing 0?s omitted. If we know that number of records is 12, we can append those 0?s. However, it doesn?t matter whether or not append the 0?s, since only a 1 can cause a record to be retrieved.

Figure 1. A concrete example for bitmap compression

V. EXPERIMENTAL RESULT In our experimental study below, the data files we tested  are simulative database files. All our experiments were performed on a 1.70GHz Pentium PC with 256MB of memory, running Windows XP.

We used three datasets named r10f1000, r10f10000 and r20f10000 to test. The datasets? filename structure is rNfD.

Thereinto N is the number of items, and D is the number of transactions. Fig 2 shows this algorithm? s compressed percentage for the datasets. We can see from the figure that this compressed percentage is basically stable.

Figure 2. Data compressed rate  Fig 3 shows that three datasets? runtime contract under different support which used vertical association rules algorithm without compressed bitmap and vertical association rules algorithm with compressed bitmap. We can see that, from the figure, time of data compressed is not far from that without compressed. But compressed data is decreased much in the memory.

Figure 3. Running time with minimum support changes

VI. SUMMARIZE Although vertical association rules algorithm conquers  the disadvantage that Apriori and its relative algorithms produce large amount of candidate itemsets and require scanning database many times, when the dataset is too large, dataset? bitmap engrosses most memory spending, effects algorithm? s expansibility. The algorithm we presented combines the bitmap compression algorithm and mining association rules together, compress the large datasets, have relieved contradiction between vertical association rules algorithm?s run speed and memory space.

