Variable Precision Rough Set-Based Fault Diagnosis for Web Services

Abstract ? Web service is the emergent technology for constructing more complex and flexible software system for business applications. However, some new features of Web service-based software such as heterogeneity and loose- coupling bring great trouble to the latter fault debugging and diagnosis. In the paper, variable precision rough set-based diagnosis framework is presented. In such debugging model, SOAP message monitoring and service invocation instrument are used to record service interface information. Meanwhile, factors of execution context are also viewed as conditional attributes of knowledge representation system. The final execution result is treated as the decision attribute, and failure ontology is utilized to classify system?s failure behaviors. Based on this extended information system, variable precision rough set reasoning is performed to generate the probability association rules, which are the clues for locating the possible faulty services. In addition, the experiment on a real-world Web services system is performed to demonstrate the feasibility and effectiveness of our proposed method.

Keywords ? Web services; rough set; association rule; fault diagnosis; service interface; failure

I. INTRODUCTION In the past decade, software pattern has undergone a  fundamental change. Software is from a product to the form of services, i.e., software as a service (SaaS). In this model, Web services [1] is a supportive technology. Software units are treated as the remote services over the Internet, and the whole system is built by composing them together. Although this new type of system can bring lots of benefits such as loose-coupling, heterogeneity and flexibility, how to maintain it is still an open problem, especially for fault diagnosis.

In the service-oriented architecture (SOA), Web service is encapsulated as a transparent unit, whose code is invisible to external users (i.e., system developers or maintainers).

They access services only through interface file written in WSDL [2]. Some distributed services are composed together according to the business logic described in business process execution language (BPEL) [3]. Due to the reasons of code invisibility, complex business process and service dynamic substitution, it is very difficult to diagnose potential faults in Web services system.

In general, Web services system is tested in the way of functional testing (also known as black-box testing) [4].

Hence, the information used for the further debugging is very  limited. The rational solution is to take full use of the recorded interface information of Web services in the system testing phase. In our previous work [5], rough set-based reasoning method has been introduced to produce the association rules to direct fault diagnosis. However, the basic rough set method has its inherent shortages. For instance, it is hard to deal with the situation of inconsistent or noise data.

Variable precision rough set (VPRS) [6] is designed to overcome this problem, which is a general form of Pawlak?s rough set theory [7]. VPRS can mine the rules with certain degree of consistency from the inconsistent data [8], thus it possesses stronger anti-jamming capability than the basic rough set method. Consequently, we adopt the reasoning method of VPRS to produce more meaningful rules for fault diagnosis.

On the other hand, only the information about interface parameters is considered in our previous diagnosis model [5].

In fact, some other factors expect input parameters, such as service run-time environment and network traffic, and also play an important role in affecting the successful execution of system. Therefore, we extend the information model used for describing the dynamic execution behaviors of Web services system.

The paper is structured as follows. In the next section, we will briefly introduce the Web services and composition techniques. Meanwhile, the basic concept of VPRS is also addressed. Then, the overall diagnosis framework and key techniques are discussed in Section 3. In Section 4, a real- world case is studied to demonstrate the feasibility and effectiveness of our proposed diagnosis method. Finally, the related work and concluding remarks are given in Section 5 and 6, respectively.



II. BACKGROUND In order to facilitate better understanding, the concepts  about Web services and variable precision rough set reasoning is introduced first in this section.

A. Web Services and Composition SOA provides a novel way to construct a new system or  integrate the legacy applications. In this new paradigm, software is not an entity to be installed in customer?s computer, but is treated as a service to be remotely invoked according to his / her demand. Web services technology has become the most representative approach to construct software system with SOA.

2011 International Joint Conference of IEEE TrustCom-11/IEEE ICESS-11/FCST-11  DOI 10.1109/TrustCom.2011.215     As a well-encapsulated and transparent software unit, Web service can be viewed as remote API over the Internet.

Service requesters invoke it according to the service specifications file, i.e. WSDL [9] file, but its source code is invisible. As shown in Figure 1, the input and output information for each operation can be found in the PortType part of WSDL file. Since WSDL is a worldwide standard about Web service description, so service interface information can be automatically extracted.

Figure 1.  The PortType of Web Service ConverterService.

Some services can be composed together to perform a specific business activity, whose execution process is usually defined in business process execution language [3]. In the process written in BPEL, we can find which services and the corresponding operations can be invoked in whole activity.

Therefore, the interface information of Web service composition can also be parsed from WSDL and BPEL files.

B. Variable Precision Rough Set VPRS is extended from the basic rough set through  introducing classification error parameter ? , so it allows some degree of misclassification rate.  In most cases, the admissible classification error ?  must fall within the range 0 0.5? ?? .In particular, VPRS is the ordinary rough set when 0?? .

A knowledge representation system can be denoted as ( ,  ,  ,  )S U C D V f? ? , where 1 2{ , , , }nU X X X? ?  is the set  of objects, A C D? ? is the set of attributes, which can be divided into conditional attribute set ( C ) and decision attribute set ( D ). These two subsets hold restrictions such as C D A??  and C D ? ?? . ( ,  )a A aV U V??  is the set of attribute?s value, and aV  is the range of value of attribute a .

:f U A V? 	  is an information function, which assigns a value to each attribute of each object, i.e., ,  ,a A x U ? ?  get  ( , ) af x a V? .

Suppose R  is an equivalence relation on U , also known  as an indiscernibility relation, the corresponding partition is denoted as 1 2/ { , , , }nU R E E E? ? . The -positive?  and ? - negative region of the set X U?  are defined as [6]:  ( )  { | ( , ) }i iCPOS X E c E X? ?? ? ?                                    (1)  ( )  { | ( , ) 1 }i iCNEG X E c E X? ? ? ? ?                             (2)  where ( , )c X Y  is the relative degree of misclassification of the set X  with respect to set Y , which can be defined as:  ( , ) 1 ( ) / ( )c X Y card X Y card X?  ? ,  if ( ) 0card X ? ( , ) 0c X Y ? ,  if ( ) 0card X ?                                         (3)  The relative significance of P  to D , or the quality of classification (QoC), is defined as,  ( ( ))( , ) ( )  Pcard POS XP D card U  ? ?  ??                                          (4)  where P C?  and ( )X E D?  is a set of equivalence classes w.r.t. D . In particular, if ( , ) 0P D ??? , it shows attribute set P  is not important.



III. VPRS-BASED DIAGNOSIS FRAMEWORK  A. Overall Framework As mentioned above, the interface information of single  Web service or whole system can be parsed from WSDL and BPEL files. Based on this information, the data about input parameters and output results can be recorded in the testing or actual execution environment. The run-time logging technique is used to monitor the message between service units. In general, the interchanged message between them is uniformed by a standard protocol, i.e. simple object access protocol (SOAP) [10]. Apart from the service interface, environment factor is also the important part of input data.

Based on the above work, the set of input-result records can be formed for the further processing.

As shown in Figure 2, a formal knowledge representation system (also known as information system, IS) should be constructed for facilitating the next step knowledge reasoning. In order to build an information system, two issues of pretreatment should be performed. One is discretization for service parameter data, and other is classification representation for system output results. After achieving a formal information system, the related VPRS reasoning methods can be used to produce the rules for purpose of system debugging. Generally speaking, the generated association rule is in the form as below.

( )  ( )confidencej i k l j k  C c D d? ? ????	? ?                                    (5)  where jC C?  is the conditional attribute (i.e., interface parameter or environment factor) and kD D?  is the decision attribute, ic  and ld  are the concrete attribute value, confidence means the confidence of the rule, which is usually represented via QoC.

Figure 2.  The Overall Diagnosis Framework for Web Service-Based System.

B. Data Recording and Pre-processing The data about service input, output and environment is  very important for constructing an information system. In general, the information about environment factor and system exception behavior is collected through monitoring run-time environment of Web services system. The system input parameter data can be achieved in the following two ways: SOAP message monitoring and service invocation instrument. Since SOAP message is usually passed in the format of HTTP protocol, the tool of HTTP Module can be used to intercept and analyze the message. Referring to the SOAP protocol specifications, the input data for specific service interface can be parsed from the message packets. On the other hand, aspect oriented programming (AOP) [11] paradigm provides a new mechanism to instrument software system, and can also be applied to Web services system [12].

For each invocation point of service operation, an advice module can be designed to record the parameter value at run- time.

Suppose the input-result records are collected during the execution of Web services system, we can formally define record set as following.

Definition 1 (Input-Result Record Set). The input-result records of Web services system can be denoted as a 2-tuple  ( ,  ) IRS EC fs? , where EC  is the execution context. It can be further subdivided into two parts: ( ,  )enEC PL F? , where  1 2( ,  ,  ,  )kPL p p p? ?  is the parameter list, 1 2( ,  ,  ,enF f f? ? )tf  is the environment factors such as service run-time environment and network traffic. fs  is the final execution result of services system under such parameter data and environment enF .

It is not hard to find that, a knowledge representation system can be formed according to the above input-result record set. PL  and enF  are combined together as the conditional attribute set, and fs  is treated as the decision attribute. Since some service interface parameters may be numerical type, they should be converted into the disaggregated data by discretization methods. In that way, any conditional attribute belongs to some specific classification. It is the basic pre-condition for the next rough set reasoning.

According to the above definition, system final state fs is an important element of input-result record. Similar to the service interface parameters, system failure behaviors should also be divided into some sub-sets. As illustrated in Figure 3, the slight failure is ?wrong output?, which means some logical errors in system. The second failure type is ?limitless waiting?, that is, the system will continue to run, but no reflection. The more serious type is ?Exception?, which means that system will throw some type of exception but not turn to crash. The exception types are determined via the implementation language such as Java and C#. The most serious failure is ?system crash?, which can also be further partitioned into several subtypes according to system?s external reactions. Based on this classification, preliminary failure ontology for Web services system can be described in XML format.

System Behaviors  Non-Failure Failure  Limitless WaitingException Wrong OutputSystem Crash  Ex ce  pt io  n  Ex ce  pt io  n  ...

Ex ce  pt io  n m  C ra  sh T  yp e   C ra  sh T  yp e   ...

C ra  sh T  yp e  n  Aborted  Figure 3. The Failure Ontology of Web Services System.

C. VPRS-based Rule Generation Up to now, several kinds of VPRS-based algorithms are  proposed to generate rules from knowledge representation system. The typical methods include the following three categories: ? -based reduction algorithm [6,13,14], dominance relation-based reduction [15], and fuzzy approximation-based algorithm [16]. In the paper, we only adopt the basic method, i.e. ? -based reduction, to generate approximate associate rules.

VPRS handles the classification error through introducing a parameter ? . The value of ?  represents the conditional probability of objects in the same conditional attribute set being classified into the same decision attribute.

In this algorithm, the final rules are generated by removing the redundant attributes and merging the reduplicate line of object in information system. In order to describe the ? - based reduction algorithm, some concepts about ? -reduct are addressed as below [6].

Definition 2 ( reduct? ). In VPRS, ( , )RED P D?  the set of condition attributes P  with respect to a set of decision attributes D  is a subset ( , )RED P D?  of P  which satisfies the following two criteria:  (1) ( , ) ( ( , ), )P D RED P D D?? ? ?? ? ; (2) no attribute can be removed from ( , )RED P D?  without affecting the criterion (1).

Definition 3 (Attribute Dependence / Independence). The  attribute a  is dependent on P  w.r.t. decision attribute set D if ( { }, ) ( , )P a D P D ?? ?? ? . Otherwise, attribute a  is independent to P .

Based on the above definitions, the rule generation process based on ? -reduct can be expressed as below.

Step 1. Perform pre-treatments on the original IS. For the value of service parameters or environment factors, the discretization technique is utilized to convert it into a classification type. For the final execution result, the failure ontology shown in Figure 3 is used for transform processing.

Step 2. Eliminate the redundant attributes from IS via ? -reduct algorithm to construct a simplified IS.

Step 3. Based on the results of the last step, some associate rules can be extracted and the corresponding QoCs can also be calculated.

Step 4. The partial rules with practical value are selected out for the further debugging activity.



IV. REAL CASE ANALYSIS In this section, we will use a real Web services system to  demonstrate the application of VPRS-based fault diagnosis.

As shown in Figure 4, a customer can take use of the  BusinessTravel system to plan his / her travel activity.

The BusinessTravel system is a well-known Web service composition system, and has been widely adopted for case study in many literatures [5,17,18]. In the system, three service units, i.e. FlightBook, HotelBook and Payment, are invoked and composed to complete travel planning task. The service composition logic can be described by BPEL file as shown in Figure 5.

Figure 4. The Real Case of BusinessTravel System for Experiment Analysis.

In general, each Web service can receive the input message in the format defined in WSDL file. The FlighBook service can book a ticket from airlines such as CZ, MU and ZH. The HotelBook service can reserve a room in several kinds of star-level hotels. Finally, the total fee can be paid by the Payment service. It provides several payment modes such as VISA, Master and Unionpay.

For the purpose of simplicity, we assume that the Web services system has been tested and the related execution information has been recorded here. Based on the test records, an information system for fault localization can be constructed as shown in Table 1. Apart from service?s parameters, the execution environment of services system is also considered during constructing IS. For the FlighBook service, its input parameter is airline company (C1). Hotel type (C2) is the interface for invoking HotelBook service.

For the Payment service, it also contains only one interface: the way of payment (payWay for short, i.e. C3). For the factor of system execution environment, operating system (C4) and network type (C5) for running service composition are treated as two important issues in Table 1. For the above all conditional attributes, C1, C3, C4 and C5 have two possible values, and the other one has three kinds of values.

<?xml version="1.0" encoding="utf-8"?> <process name="BusinessTravel" ...> <partnerLinks>  ......  </partnerLinks> <variables>  <variable name="flightRequest " ?/>  ?? </variables> <sequence> ??  <flow> <sequence> <invoke partnerLink="FlightBook" operation=" bookFlight" inputVariable="flightRequest" .../>  <receive partnerLink=" FlightBook " operation=" flightCallback" variable="flightResp" .../> </sequence>  <sequence> <invoke partnerLink="HotelBook" operation=" bookHotel" inputVariable="hotelRequest" ?/>  <receive partnerLink=" HotelBook " operation="hotelCallback" variable="HotelResp" ?/> </sequence>  </flow> ??  <invoke partnerLink="Payment" operation="paySubscription" inputVariable="payInfo" .../> </sequence> </process>  Figure 5. The Service Composition Logic for BusinessTravel System.

System execution behavior is reflected via the column ?Result? in Table 1, which is also viewed as the decision attribute ( d ) in IS. Based on the testing with 15 test cases, two kinds of exceptions (denoted as E1 and E2) appeared during its execution.

According to the IS as shown in Table 1, { 1,  2,C C C? 3,  4,  5}C C C , { }D d? , 0.4?? , then  1 3 7 2 4 5 6 8 9 10 11( ) {{ , , },{ },{ },{ },{ },{ },{ },{ },{ },Ind C t t t t t t t t t t t? 12 13 14 15{ },{ },{ },{ }}t t t t ;  1 4 7 2 3 6 8 10 11 12 14 15 5 9 13( ) {{ , , },{ , , , , , , , , },{ , , }}Ind D t t t t t t t t t t t t t t t? ; 0.4 ( )CPOS D U  ? ?? .

From the above results, we can draw the following  conclusion. Although some inconsistent objects such as 1t , 3t  and 7t  exist in IS, the noise data can be overcome when  setting classification error to 0.4, i.e. 0.4?? . In this error level, the conditional attributes should be checked whether they are redundant for generating association rules.

1 3 7 11 2 4 10 5 13 6 8 14( 1) {{ , , , },{ },{ , },{ , },{ },{ , },Ind C C t t t t t t t t t t t t ? 9 12 15{ },{ },{ }}t t t ;  0.4 2 5 6 8 9 12 13 14 151 ( ) { , , , , , , , , }C CPOS D t t t t t t t t t  ? ?  ? .

1 3 7 2 6 4 5 8 9 13 10( 2) {{ , , },{ , },{ },{ },{ },{ , },{ ,Ind C C t t t t t t t t t t t ?  12 11 15 14},{ , },{ }}t t t t ; 0.4  2 ( )C CPOS D U ? ?  ? .

1 3 7 2 4 5 6 8 9 10( 3) {{ , , },{ , },{ },{ },{ },{ },{ },Ind C C t t t t t t t t t t ?  11 12 13 14 15{ },{ },{ },{ },{ }}t t t t t ; 0.4  1 3 5 6 7 8 9 10 11 12 13 14 153 ( ) { , , , , , , , , , , , , }C CPOS D t t t t t t t t t t t t t ? ?  ? .

1 3 7 2 4 5 6 8 9 10( 4) {{ , , },{ },{ },{ },{ , },{ },{ },Ind C C t t t t t t t t t t ?  11 12 13 14 15{ },{ },{ },{ },{ }}t t t t t ; 0.4  4 ( )C CPOS D U ? ?  ? .

1 3 7 2 5 4 6 8 9 10( 5) {{ , , },{ , },{ },{ },{ },{ },{ },Ind C C t t t t t t t t t t ?  11 12 13 14 15{ },{ },{ },{ },{ }}t t t t t ;     0.4 1 3 4 6 7 8 9 10 11 12 13 14 155 ( ) { , , , , , , , , , , , , }C CPOS D t t t t t t t t t t t t t  ? ?  ? .

According to the above analysis, the classification  functions of attribute 2C  and 4C  are not significant. So they can be removed and will not affect the classification capability at level 0.4?? . After eliminating such two attributes from IS, the reduced form of IS will be shown as Table 2.

TABLE 2. THE REDUCED FORM OF INFORMATION SYSTEM FOR BUSINESSTRAVEL SYSTEM  No. C1 C3 C5 Result ( d ) POS NEG  t1, t3, t7 AA Master wireless E1 2 1  t2, t6, t8 AA VISA wired Succ. 3 0  t4 AA Master wired E1 1 0  t5 AA VISA wireless E2 1 0  t9, t13 DA VISA wireless E2 2 0 t10, t12 DA Master wired Succ. 2 0  t11, t15 DA Master wireless Succ. 2 0  t14 DA VISA wired Succ. 1 0  For the above reduced IS, we can perform the general rough set reasoning on it. Then, the following two rules about system exceptions can be generated as follows.

0.751 3 1C AA C Master E? ? ? ???	                                (6) 13 5 2C VISA C wireless E? ? ? ??	                              (7)  Based on the association rule (6) and (7), the debuggers of Web services composition can diagnose the system with the combination information of such interface parameters.

Then, the related faults in service unit or service composition can be revealed by the above reasoning results.



V. RELATED WORK As an effective information reasoning tool, rough set or  VPRS is suitable to treat small sample and uncertain data, and it can tackle some complicated cases such as inconsistency and data absence. It has been applied in many fields such as finance, manufacturing industry and so on.

However, its applications in software engineering are not so extensive. The representative work can be addressed as below. Ruhe applied rough set theory to the analysis of software engineering data resulting from goal-oriented measurement [19], and predicted the criticality of software modules based on metrics data from the early development phases. Tang et al. [20] introduced a new approach with dominance-based rough set to obtain knowledge from past applications of services to deal with three difficult problems in the field of service retrieval. Xie et al. used VPRS to perform risk management to software projects [21].

Furthermore, Ramanna et al. introduced rough set reasoning to software defect classification [22].

On the side of Web services fault diagnosis, Bhiri et al.

[23] proposed a set of mining techniques to discover service?s transactional behavior so as to improve system recovery mechanisms. L. Ardissono et al. proposed a model- based diagnosis method to enhance fault analysis [24].

Bayesian network-based method [25] is also used to identify the most likely problematic services in a Web service composition process. In our previous work, we adapted the basic rough set reasoning technique to reveal faults in WSC.

In [26], a model-based approach is proposed to diagnose the faults in a Web service-composed business process. Here, we  TABLE 1. THE INFORMATION SYSTEM FOR THE WEB SERVICES SYSTEM BUSINESSTRAVEL  FlightBook HotelBook Payment Environment No.

airComp (C1) hotelType (C2) payWay (C3) OS (C4) network (C5) Result ( d )  t1 AA Econ. Master Win wireless E1  t2 AA Buss. VISA Linux wired Succ.

t3 AA Econ. Master Win wireless Succ.

t4 AA Buss. Master Linux wired E1  t5 AA Buss. VISA Linux wireless E2  t6 AA Econ. VISA Linux wired Succ.

t7 AA Econ. Master Win wireless E1  t8 AA Econ. VISA Win wired Succ.

t9 DA Econ. VISA Linux wireless E2  t10 DA Buss. Master Linux wired Succ.

t11 DA Econ. Master Win wireless Succ.

t12 DA Econ. Master Linux wired Succ.

t13 DA Buss. VISA Linux wireless E2  t14 DA Econ. VISA Win wired Succ.

t15 DA Buss. Master Win wireless Succ.

* Here, E1 and E2 denote two exceptions respectively.

extend the existing method and use VPRS to handle the inconsistent case of test results data.



VI.CONCLUSIONS In recent years, Web service systems have been widely  used to handle the complicated business activities. However, how to maintain this new type of software system is a challenging problem. Due to the characters of heterogeneity and distribution, how to precisely locate the possible faulty services in whole system is very difficult. In the paper, we introduce variable precision rough set to tackle this problem.

In our approach, both service interface and factors of execution environment are taken into consideration. Mean- while, the case of inconsistent test results can also be solved by VPRS reasoning. In addition, a real-world Web service system is used to demonstrate the feasibility and effective- ness of our VPRS-based diagnosis method. In future work, we plan to implement an automated diagnosis tool to assistant fault location of Web services system. On the other hand, other intelligent methods such as fuzzy technique can be combined with VPRS to realize more efficient fault diagnosis for such type of system.

