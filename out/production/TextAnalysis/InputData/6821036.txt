PACO: A Period ACO_based Scheduling Algorithm  in Cloud Computing

Abstract?Tasks scheduling problem in cloud computing is NP-hard, and it is difficult to attain an optimal solution, so we can use intelligent optimization algorithms to approximate the optimal solution, such as ant colony optimization algorithm. In order to solve the task scheduling problem in cloud computing, a period ACO_based scheduling algorithm (PACO) has been proposed in this paper. PACO uses ant colony optimization algorithm in cloud computing, with the first proposed scheduling period strategy and the improvement of pheromone intensity update strategy. The experiments results show that, PACO has a good performance both in makespan and load balance of the whole cloud cluster.

Keywords-cloud computing; task scheduling; ant colony algorithm; scheduling period

I.  INTRODUCTION The cloud computing  is a kind of new computation method  that works for solving the new problem which combines the different computers to constitute a big computing system to execute some large tasks. The core technology of cloud computing is task scheduling, but the task scheduling problem of cloud computing is NP-hard, and it is very difficult to attain an optimal solution due to the isomerism and complexity of cloud resources. When the cloud resources are requested for by a big number of tasks, an efficient task scheduling algorithm is especially important. The characteristics of cloud computing resources such as heterogeneous, dynamic and self-governing, make the task scheduling for grid computing to be extraordinary complex. The robustness and self-adaptability of ant colony optimization (ACO) can just match the characteristics of cloud computing, which makes the ant colony optimization to have a good effect on the task scheduling for cloud computing.

Ant colony optimization (ACO) [1] is a probabilistic technique for solving computational problems. ACO has been proved to perform well in combinational optimization and other complex problems. Xu Zhihong and Sun Jizhou [2] have used ACO in grid computing task scheduling, but it doesn?t get a good performance since there are still some problems in pheromone intensity update. In that paper, when a task is assigned to a resource, the pheromone intensity of the selected resource will be increased, which will make more tasks select the resource and  lead to load imbalance. Moreover, it doesn?t consider scheduling period. If there are too many tasks to  assign, the total tasks size assigned onto each resource will be increased, which will make the performance of the algorithm in both makespan and load balance be reduced.

In order to let ACO get a better performance, a period ACO_based scheduling algorithm (PACO) has been proposed in this paper which improves the update of the pheromone intensity and proposes the scheduling period strategy.

The rest of paper is organized as follow: section 2 is some related work in cloud computing and grid computing. Section 3 proposes PACO algorithm.Section 4 elaborates the experiments and evaluation. Section 5 draws the conclusion and discussion about the future work.



II. RELATED WORK There are many researches on task scheduling algorithm in  cloud computing or grid computing which is similar with cloud computing in task scheduling technology.

Min-Min algorithm [3] assigned a task to the earliest available and the fastest processor. Max-Min algorithm [4] has a contrary idea with the Min-Min algorithm. It always assigns the task with maximum expected completion time to corresponding resource. He et al [5] has proposed the QoS- Min-Min Algorithm by improving the traditional Min-Min Algorithm and have made some progress on QoS (Quality of Service) of task scheduling. But both Min-Min algorithm and Max-Min algorithm don?t take the load factors into consideration.

A load-adaptive cloud resource scheduling model based on ant colony algorithm has been proposed in [6]. By real-time monitoring virtual machine of performance parameters, once judging overload, the algorithm schedules fast cloud resources using ant colony algorithm to bear some load on the load-free node. So that it can meet changing load requirements. A stochastic model of load balancing and scheduling has been proposed in [7]. They consider a stochastic model of a cloud computing cluster, where jobs arrive according to a stochastic process and request virtual machines. However, the algorithms in [6] and [7] don?t perform well when there are a large number of tasks.

We have proposed a DAG-based scheduling algorithm DTPBS [8]. DTPBS calculates the priority of each task according to the DAG(Directed Acyclic Graph), and the task  *Corresponding author : Tie Qiu, qiutie@dlut.edu.cn   DOI 10.1109/CLOUDCOM-ASIA.2013.85    DOI 10.1109/CLOUDCOM-ASIA.2013.85     1: initialize ?, ?, ?, ?, NC-max, T.

2: while NC<NC-max do 3:    for all ants in ANT 4:       for all tasks t in meta-task T, t T 5:   compute ( )kjp t 6:   select the resource and assign the task 7:    update the real-time pheromone intensity locally 8:        end for 9:        if this is the first ant when NC=1, compute T again.

10:  end for 11:  if the scheduling scheme is best by far 12:     cancel the locally update of the real-time pheromone intensity 13:      update the real-time pheromone globally 14: end while 15: assign the tasks to the selected resources.

16: end  with high priority will be scheduled first. Another two DAG based algorithm is the Heterogeneous Earliest Finish Time algorithm (HEFT) [9] and the Cluster Earliest Finish Time Duplication algorithm (CFTD) [10]. HEFT algorithm always selects the task with the highest upward rank at each step and then the selected task is assigned to a host that can minimize its earliest finish time. The CFTD algorithm is based on HEFT, and it attempts to insert suitable immediate parent nodes of the current selected node in order to reduce its waiting time on the processor. But, the DAG based algorithm in [8], [9] and [10] are all for dependent tasks.

Based on ACO, this paper has proposed an independent tasks scheduling algorithm PACO. PACO takes the scheduling period into consideration for the first time. And the experiments results show that PACO has a good performance in makespan and load balance.



III.  PACO ALGORITHM  A. ACO Algorithm in Cloud Computing Tasks Scheduling In general, the ant colony optimization (ACO) is given to  solve Travel Salesman Problem (TSP) [11]. In TSP, the initial pheromone intensity on every path is same as each other, namely every node has the same probability to be passed by at first, and then the pheromone intensity would be adjusted.

In cloud computing, the different resources have different capacity to executing the tasks, which leads to the difference of the initial pheromone intensity on each resource. And the assignment of tasks should be adjusted according to the real- time capacity of resources and the change of load. Thus it is necessary to make some change to the ant colony algorithm to get better performance in cloud computing task scheduling.

B. The Procedure of PACO When new resource j is added to the cloud cluster, the  number m of its processers would be provided, as well as the capacity of each processer p and the bandwidth of the resource b, the type of each processer, the memory size and so on. The innate pheromone intensity ? of resource j is initialized according to (1).

=  m  j i i  p b? =  +?                           (1)  At the beginning of the algorithm, the real-time pheromone intensity ( )j t?  is initialized according to the innate pheromone intensity of each resource:  (0)j j? ?=                                             (2) Every ant takes tasks and chooses resources to assign the  tasks. The ant chooses a resource for a task with the maximum probability according to (3).

( ) ,  ( ) ( )( )  0,  j j  k s sj s  t s avaliableresource  t tp t  otherwise  ? ?  ? ? ? ? ? ?  ? ? ? ? ?? ? ? ??? ? ? ? ?	 ? ? ? ? ? ?   ? =    ? ? ?        (3)  Where ( )j t?  is the real-time pheromone intensity of resource j at time t; ?j is the innate performance quantity of the resource j; ? and ? are variable parameters and they can be adjusted depend on circumstances. ? represents the importance degree of the real-time pheromone intensity, while ? represents the importance degree of the innate pheromone intensity.

When a resource is selected, the pheromone intensity of it will be updated according to (4).

( ) ( )j jt t K? ? ?= ?                                     (4) K is the length of the task assigned onto resource j at time t,  and ? (0<?<1) is also a variable parameter.

After all tasks are be assigned, compute the total execution time and check whether it is the shortest execution time in current. If so, the modification of the real-time pheromone intensity according to (4) will be canceled, and then update the real-time pheromone intensity according to (5).

( ) (1 ) ( )j j jt t? ? ? ? ?= ? + ?                           (5)  j?? is the total length of all the tasks assigned to resource j this time; and ?(0<?<1)is an another variable parameter. 1-? represents pheromone residue factor. (1 ) ( )j t? ?? avoids the pheromone accumulated too big, it simulates the memory of animals, which means that with the new information is stored in the brain, the old information is gradually forgotten.

j? ?? is to avoid the pheromone accumulated too fast.

Line 9 in Fig.1 is the period strategy we proposed for the first time. During the running of the first ant in first loop, if the pheromone intensity of a resource is reduced to the minimum value we set up, the resource will be shut down and doesn?t accept tasks any more; if all the resources are shut down, record the total number of the tasks as T, and T is the number of the tasks in this scheduling period. The tasks which are not be assigned will be assigned in next scheduling period.

The PACO algorithm is shown in Fig. 1.

Fig. 1.  The procedure of PACO .

1: compute the Estimate Completing Time (ECT) matrix 2: while each tasks is assigned 3:    select the task and resource corresponding to minimum value in ECT 4:     assign the task to the resource 5:     update the ECT matrix 6:  end while 7:  end  In the algorithm, line 1 initializes the argument by (1) and (2). Line 5 is according to (3) to compute the selected probability of each resource. Line 7 update the pheromone intensity according to (4), and line 13 update the pheromone intensity by (5).

C. The Analysis of PACO Algorithm In PACO, when a task is assigned onto a resource, the  pheromone intensity of the selected resource will be reduced.

That will lower the chance that other tasks select the resource and promote the load balance. When a loop ends, the pheromone intensity of the resources will be increased if the scheduling scheme is the best scheme by far, which let the ant select the better scheme and accelerate convergence velocity of the algorithm.

If there are too many tasks to assign, a resource will accept many tasks which will overtop its processing capacity. And if all the resources? pheromone intensity reduced to the minimum value, all the tasks that are not assigned will select the resource which has the largest innate pheromone intensity according to (3), and this will lead to load balance and increase the execution time. Considering this problem, we proposed a period strategy. In the strategy, if the tasks are too many, they will be assigned in different period.



IV. EXPERIMENTS AND EVALUATION We use CloudSim [12] which is a simulation tool of cloud  computing to simulate the PACO algorithm. And in order to know whether it can work well or not, at the same time we simulate the Min-Min algorithm to compare with PACO.

A. The Creation of Tasks and Resources Firstly, we use CloudSim to create 10 resources randomly.

Their properties are shown in the following Table I.

TABLE I.  THE PROPERTIES OF EACH CLOUD RESOURCE  Resource ID capacity Bandwidth 1 3434.0 272.0 2 4988.0 755.0 3 4050.0 875.0 4 10464.0 106.0 5 5316.0 869.0 6 5549.0 434.0 7 10904.0 795.0 8 11340.0 668.0 9 5832.0 716.0  10 8148.0 964.0   In order to simulate the real environment of cloud cluster better, the resources with different executive capability are created. For example, the executive capability of Resource 8 is larger than Resource 7, and Resource 7 is larger than Resource 10.

To simulate the randomness of the cloud tasks, we create the tasks randomly related to the properties, such as the size of the task, the length of the input and output and so on.

B. The prediction execution time model and parameters setting During the experiments, the execution time of one  scheduling scheme formed by an ant is needed to predict. The prediction execution time of each resource Tpre is given by (6).

( ) ( ( )/ ( ) ( )/ ( ))  j  pre i tasks  T j filesize i b j length i p j ?  = +?          (6)  Where taskj is the set of the tasks assigned onto resource j, filesize(i) is the size that needs to execute for task i , b(j) is The bandwidth of resource j, length(i) is the transmission size of task i, and p(j) is the capacity of resource j. Thus, filesize(i)/b(j) means the predicted  time of the task i executed on resource j , and length(i)/b(j) means the time that task i transfer to resource j. So the total prediction execution time of this scheduling scheme is as (7).

max( ( ))pre preT T j=                               (7)  For the settings of the four variable parameters ?, ?, ? and ? in ant colony algorithm, we have conducted experiments and analysis. And the results show that, when ? = 1, ? = 1 ?=0.3, ?=0.3, the performance and convergence velocity of the algorithm is better. For the loop times N-max, we find that, in general, the algorithm has already converged before 15 times loop, so we set the N-max is 15.

C. Comparison and Analysis of PACO and Min-Min Algorithm As one of the classic task scheduling algorithms, Min-Min  algorithm?s realization is simple, complexity is low and the scheduling performance is very good. The procedure of Min- Min algorithm is shown in Fig. 2. Therefore, many studies in task scheduling algorithm take Min-Min algorithm as a reference object to measure the performance of a new algorithm. We conduct multiple experiments to compare the two algorithms. The results are shown in Fig. 3, Fig. 4. In Fig .3, the horizontal axis represents the total size of all the tasks assigned in one experiment, and vertical axis represents makespan. In Fig .4, the horizontal axis represents the resource id, and vertical axis represents the ratio of the total size of tasks assigned onto a resource in all experiments to the capacity of the corresponding resource.

Fig. 2.  The procedure Min-Min algorithm.

For load balance, we take the processing capacity of each resource into consideration, not only think about the total tasks size of each resource.

The results show that, PACO is better than Min-Min algorithm both in makespan and load balance of the resources.

In Fig. 3, although the total size of the tasks of PACO is large than that of Min-Min algorithm, the makespan of PACO is still much smaller than Min-Min algorithm. In Fig. 4, the load of PACO is obviously more balanced than Min-Min algorithm.

We consider the STD (Standard Deviation) value of each algorithm in Fig. 4. As we know, std is defined by (8)    1 ( ) N  i i  S T D x x N =  = ??                          (8)  Where ix is the values of vertical axis in Fig. 4, x is the average value of ix , and N is the total number of ix . Then, we can calculate the STD values according to (8).

STDPACO    =  0.10235.

STDMin-Min  =  0.51384.

We can see that STDMin-Min  is almost four times bigger than STDPACO, and we can find that the fluctuation of PACO curve is much smaller than the fluctuation of Min-Min curve. That is to say that the load of PACO is much more balanced than the load of Min-Min algorithm.

This is because Min-Min algorithm takes insufficient account of the balance of innate processing capacity and dynamic performance of resources. Min-Min algorithm only computes the ECT matrix, and makes the resource with small capacity accept tasks overtopping its capacity. However, PACO takes good consideration for both innate processing capacity and dynamic performance of resources. We can see it in line 5 and line 8 in Fig. 1. Line 5 computes ( )kjp t according to both innate processing capacity and dynamic perform of the resources, and when the load is two heavy, line 8 will work.

Fig. 3.  The makespan of PACO algorithm and Min-Min algorithm.

Fig. 4.  The resources load of PACO and Min-Min algorithm.



V. CONCLUSION AND FUTURE WORK  A period ACO_based scheduling algorithm (PACO) in cloud computing tasks scheduling is proposed in this paper.

According to the first proposed scheduling period strategy and the improvement of the update strategy of pheromone intensity, the PACO algorithm works very well. The simulation experiments results demonstrate that PACO performs better than Min-Min algorithm in both makespan and load balance.

In this paper, we confirm that PACO can acquire good performance in cloud computing tasks scheduling. However, there are still some details we should consider more.  In the future, we will consider more about the arguments of the PACO and research the dynamically adjusting strategy. And then, we will research the strategy how to combine independent tasks algorithm and dependent tasks algorithm such as we proposed in [8].

