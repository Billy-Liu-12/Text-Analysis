Data Mining for Path Traversal Patterns in a Web  Environment

Abstract  In this paper, we  explore a n e w  data min ing  capa- bility which involves min ing  path  traversal patterns in a distributed in format ion  providing environment like world-wide-web. First ,  we  convert th,e original se- quence of log data i n t o  a set  of m a x i m a I f o m a r d  ref- erences and f i l ter out the  eflect of s o m e  backward ref- erences which are m a i n l y  m a d e  f o r  eaSIe of iiraveling.

Second, we  derive algorithms t o  de termine  t h e  frequent traversal patterns,  i.e., large reference sequences, f r o m the  m a x i m a l  forward references obtained. T w o  al- gor i thms  are devised f o r  determining large reference sequences: one i s  based o n  s o m e  hashing and prun- ing techniques, and the  other i s  f u r t h e r  improved w i t h t h e  opt ion  of determining large reference seqaences in batch so as  t o  reduce the  number  of database scans required. Per formance  of these t w o  method8 is com- paratively analyzed.

1 Introduction  Due to the increasing use of computing for vari- ous applications, the importance of database mining is growing a t  a rapid pace recently. Vairious data min- ing capabilities have been explored in the literature.

One of the most important data mining problems is mining association rules [3, 4, 9, 10, 111. For exam- ple, given a database of sales transactions, it is desir- able to discover all associations among items such that the presence of some items in a transaction will imply the presence of other items in the same transaction.

Also, mining classification is an approach of trying to develop rules to group data tuples together based  * J. S. Park is partially supported by KOSEF, Korea.

1063-6927196 $5.00 0 1996 IEEE Proceedings of  the 16 th  ZCDCS   Department of Computer Science* Sungshin Women's University  Seoul, Korea  on certain common features. This has been explored both in the AI domain [12, 131 and in the context of databases [2, 6, 81. Another source of data mining is on ordereld data, such as stock market and point of sales data,. Interesting aspects to explore from these ordered data include searching for similar sequences [I, 141, e.g., stocks with similar movement in stock prices, and sequential patterns [5], e.g., grocery items bought over a set of visits in sequence. It is noted that data mining is a very application-dependent issue and different applications explored will require differ- ent mining techniques to cope with.

In this paper, we shall explore a new data min- ing capability which involves mining access patterns in a dist cibuted information providing environment where documents or objects are linked together to fa- cilitate interactive access. Examples for such informa- tion providing environments include World Wide Web (WWW) [7] and on-line services, where users, when seeking fior information of interest, travel from one object to another via the corresponding facilities (i.e., hyperlinks) provided. Clearly, understanding user ac- cess patterns in such environments will not only help improving the system design (e.g., providing efficient access between highly correlated objects, better au- thoring design for pages, etc.) but also be able to lead to better marketing decisions (e.g., putting ad- vertisements in proper places, better customer/user classification and behavior analysis, etc.). Capturing user access patterns in such environments is referred to as mining  traversal pa t terns  in this paper. Note that although some efforts have been elaborated upon ana- lyzing the user behavior, there is little result reported on dealing with the algorithmic aspects to improve the execution of traversal pattern mining. In addition, it is important to mention that since users are travel-    ing along the information providing services to search for the desired information, some objects are visited because of their locations rather than their content.

This shows the very difference between the traversal pattern problem and others which are mainly based on customer transactions. This unique feature of the traversal pattern problem unavoidably increases the difficulty of extracting meaningful information from a sequence of traversal data. However, as these infor- mation providing services are becoming increasingly popular nowadays, there is a growing demand for cap- turing user behavior and improving the quality of such services.

Consequently, we shall explore in this paper the problem of mining traversal patterns. Our solution procedure consists of two steps. First, we derive an al- gorithm, called algorithm M F  (standing for maximal forward references), to convert the original sequence of log data into a set of traversal subsequences. Each tra- versal subsequence represents a maximal forward ref- erence from the starting point of a user access. As will be explained later, this step of converting the original log sequence into a set of maximal forward references will filter out the effect of backward references which are mainly made for ease of traveling, and enable us to concentrate on mining meaningful user access se- quences. Second, we derive algorithms to determine the frequent traversal patterns, termed large TefeTence sequences, from the maximal forward references ob- tained above, where a large reference sequence is a reference sequence that appeared in a sufficient num- ber of times in the database. Note that the problem of finding large reference sequences is similar to that of finding large itemsets for association rules [3] where a large itemset is a set of items appearing in a sufficient number of transactions. However, they are different from each other in that a reference sequence in min- ing traversal patterns has to be consecutive references in a maximal forward reference whereas a large item- set in mining association rules is just a combination of items in a transaction. As a consequence, although several schemes for mining association rules have been reported in the literature [3 ,4,  lo], the very difference between these two problems calls for the design of new algorithms for determining large reference sequences.

Explicitly, we devise two algorithms for determining large reference sequences. The first one, referred to as full-scan (FS) algorithm, essentially utilizes some tech- niques on hashing and pruning while solving the dis- crepancy between traversal patterns and association rules mentioned above. Although trimming the trans-  action database as it proceeds to later passes, algo- rithm FS is required to scan the transaction database in each pass. In contrast, by properly utilizing the candidate reference sequences, the second algorithm devised, referred to as selective-scan (SS) algorithm, is able to avoid database scans in some passes so as to reduce the disk 1/0 cost involved. Specifically, algo- rithm SS has the option of using a candidate reference set to generate subsequent candidate reference sets, and delaying the determination of large reference sets to a later pass when the database is scanned. Since SS does not scan the database to obtain a large reference set in each pass, some database scans are saved. Ex- perimental studies are conducted by using a synthetic workload that is generated based on referencing some logged traces, and performance of these two methods, FS and SS, is comparatively analyzed. It is shown that the option of selective scan is very advantageous and algorithm SS thereby outperforms algorithm FS in general. Sensitivity analysis on various parameters is also conducted.

This paper is organized as follows. Problem de- scription is given in Section 2. Algorithm MF to iden- tify maximal forward references is described in Section 3.1, and two algorithms, FS and SS, for determining large reference sequences are given in Section 3.2. Per- formance results are presented in Section 4. Section 5 contains the summary.

2 Problem description  As pointed out earlier, in an information providing environment where objects are linked together, users are apt to travel objects back and forth in accordance with the links and icons provided. As a result, some node might be revisited because of its location, rather than its content. For example, in a WWW environ- ment, to reach a sibling node a user is usually inclined to use ?backward? icon and then a forward selection, instead of opening a new URL. Consequently, to ex- tract meaningful user access patterns from the original log database, we naturally want to take into consider- ation the effect of such backward traversals and dis- cover the real access patterns of interest. In view of this, we assume in this paper that a backward ref- erence is mainly made for ease of traveling but not for browsing, and concentrate on the discovery of for- ward reference patterns. Specifically, a backward ref- erence means revisiting a previously visited object by the same user access. When backward references oc-     cur, a forward reference path terminates. This re- sulting forward reference path is termed a, m a z i m a l forward reference. After a maximal forward ireference is obtained, we back track to the starting point of the forward referencing and resume anotheic forward refer- ence path. In addition, the occurrence of a null source node also indicates the termination of ongoing for- ward reference path and the beginning of a new one.

While deferring the formal description of the algo- rithm to determine maximal forward ,references (i.e., algorithm MF) to Section 3.1, we give an illustra- tive example for maximal forward references below.

Suppose the traversal log contains the following tra- versal path for a user: {A ,  B ,  C, D, C, B ,  E ,  G ,  H ,  G , W, A ,  0, U ,  0, V}, as shown in Figure 1. Then, it can be verified by algorithm MF that the set of maximal forward references for this user is {ABCD, ABEGH, ABEGW, AOU, AOV}. After maximal forward refer- ences for all users are obtained, we then map the prob- lem of finding frequent traversal patterns into the one of finding frequent occurring consecutive subsequences among all maximal forward references A large refer- ence sequence is a reference sequence that appeared in a sufficient number of times. In a set of maximal forward references, the number of times a reference sequence has to appear in order to be qualified as a large reference sequence is called the minimal support.

A large Ic-reference is a large reference sequence with k elements. We denote the set of large k-references as Lk and its candidate set as ck. As pointed out earlier, a very difference between mining traversal pastterns and mining association rules lies in the fact that a refer- ence sequence in mining traversal patterns has to  be consecutive references in a maximal forward reference whereas a large itemset in mining association rules is just a set of items in a transaction. As a result, it is necessary to devise new algorithms for determining large reference sequences.

It is worth mentioning that after lairge reference se- quences are determined, m a x i m a l  reference sequences can then be obtained in a straightforward manner.

