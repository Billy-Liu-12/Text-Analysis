A Visualization Tool for Reverse-engineering of Complex Component Applications

Abstract?Nowadays, component applications can contain thousands of components whose structure is difficult to un- derstand. As a solution, we proposed a visualization technique that removes large part of connections from component binding diagrams. This technique uses a separated components area to display components with a big amount of connections detached from the main diagram. In this area, component interfaces are shown clustered instead of showing them all. Benefit of this ap- proach is improvement of application understanding by reducing the diagram?s visual clutter during its reverse engineering. In this work, we present implementation of the technique in a form of a tool, called CoCA-Ex. CoCA-Ex is a publicly accessible web application and a reverse-engineering solution for various component systems. The tool is built on modern technologies such as HTML5 and JavaScript and has Java EE server backend.

Keywords?software visualization; component; visual clutter;

I. INTRODUCTION  Software applications become more and more complex and their structure is difficult to handle. Although there are lots of tools helping with application reverse engineering, the tools are still limited in helping human understanding of the structure.

Software components are one of the ways to handle this complexity as they encapsulate functionality to (ideally black- box) components. However, applications can easily consist of hundreds or thousands of the components. It is therefore difficult to explore the structure of component bindings and create a mental model of the whole system.

One of the ways to get an insight into a component appli- cation structure can be UML component diagrams. However, when the diagrams become large, there are many problems with exploring it. One of them is a contradictory need of providing enough details and showing the overall structure at the same time. Another question is how to reduce visual clutter caused by the large number of elements and connec- tions between them. This visual clutter makes the tracing of dependencies difficult and hinders orientation in the diagram.

In this tool, we present implementation helps to reduce visual clutter in UML component diagrams and help user to form clusters of related components.

A. Structure of the Paper  In the following section, a problem of visual clutter is defined first. After that, a related work is described in Sec- tion III. Then, in Sections IV and V a technique called SeCo (Separated Components) and its implementation called CoCA-Ex (Complex Component Applications Explorer) are  presented. This technique helps to reduce the visual clutter in large graphs. After that, we briefly discuss extra-functional properties of CoCA-Ex in Section V-A.



II. PROBLEM DEFINITION  Developers often face multiple challenges in the reverse engineering of large applications and their visualization. While visualizing diagrams of such applications, there are usually problems like difficult orientation, limited amount of elements fitting to the screen when their details are shown, insufficient details when showing overview, or the visual clutter [1].

This paper focuses on the CoCA-Ex tool which copes with the problem of highly connected components and provides component clusters visualization.

The problem of highly connected components contributes to the visual clutter of the displayed area. Very often, only a small amount of components is connected to a large number of other components. The result of visualizing such a component is illustrated in Figure 1, where part of an Eclipse structure is shown in the Plugin Dependency Visualization tool1. Such components are often, among developers, informally called ?God Objects?. It is difficult to trace the connections in the surrounding area of these objects.

A component cluster visualization is a process to form and work with visual component groups, which usually represent one feature or a logical unit of the system. When clusters are not used, the screen space, which is one of the essential resources in the visualization, is rapidly exhausted

III. RELATED WORK  Visual clutter can be reduced by many techniques. The whole taxonomy of these techniques has been described by Ellis and Dix in [2]. A short description of those techniques related to our work is provided.

The clutter caused by the lines is often reduced by edge bundling [3]. Although this approach reduces the clutter, it makes it difficult to trace the dependencies between connected nodes leading through the edge bundles.

The visual clutter can be also lowered by using node clustering, where one cluster usually represents multiple nodes.

Thus the number of nodes in the whole diagram is lowered, though the connections among components are usually still  1http://www.eclipse.org/pde/incubator/dependency-visualization/   DOI 10.1109/ICSM.2013.82     Fig. 1. Visual clutter caused by highly connected component  present. Clusters can either be marked manually, in an auto- mated way or by a combination of those approaches.

Another influencing factor is the chosen layout algorithm, which can ease orientation.

Existing tools related to this domain were described in our previous paper [4]. One of the most related tool is SoftVision.

It is a software visualization framework described in [5] which is able to interactively explore relations between data structures. It is a desktop application which offers a genereic interface for describing a particular parser.

In the following section, our visual clutter reduction ap- proach is described.



IV. THE SEPARATED COMPONENTS AREA TECHNIQUE  A technique we have proposed reduces the visual clutter by removing components with a large number of connections from the main diagram into a so called separated components area (abbreviated as SeCo) placed on the border of a window (the right sidebar in Figure 2). When a user moves components from the main diagram to this area, the lines between these components and remaining components are elided. This essen- tially marks a component as a ?familiar one?. Once component removed, the user may continue getting familiar with the rest of the system.

SeCo consists of a list of items. Each item consists of clustered interfaces (indicated with the mark (T) in Figure 2), components (U) and one corresponding symbol (S). Interfaces are clustered into two sets (T): all provided interfaces (dis- played as ?lollipops?) and all required interfaces (displayed as ?sockets?). Numbers inside the clustered interfaces denote the number of elements clustered in the respective symbol.

The purpose of symbols is to create a clear and easily recognizable key which uniquely identifies items within SeCo.

These symbols can be used in the diagram area to represent connections between a given component and the corresponding item placed in SeCo. They are shown as small rectangles neighboring to the displayed components (K) and containing the symbol, which corresponds to the connected item (S).

These symbols have graphics, which may humans easily remember, to help build a mental model.

Often, a particular functionality of the system is imple- mented by several components. Such components are good candidates to be place to SeCo (M), when their functionality is used by a large number of other components. Then, graph?s visual clutter is usually considerably decreased.

One of the cases may be a component implementing a logger. Such a component is probably used by most of  Fig. 3. Complex Component Application Explorer tool demonstration upload screen  components in the system and its displacement reduces the graph complexity.

We assume both automatic and manual component selec- tion to be used. In the automatic case, all components with the number of connections overcoming a certain threshold are displaced. In the manual use, a user drags-and-drops the components from the main graph to the SeCo.



V. THE SEPARATED COMPONENTS AREA TECHNIQUE?S IMPLEMENTATION  SeCo technique implementation is called CoCA-Ex.

CoCA-Ex works on the ComAV platform (Component Appli- cation Visualizer) [6], so it benefits from ComAV?s reverse en- gineering and management features. ComAV can automatically reverse engineer the whole component-based applications from one of the supported component models. Further component models can be easily added using an extension mechanism offered by RCP (Rich Client Platform). ComAV is also able to add other visualization styles. It means that CoCA-Ex is only one way of how structures of applications can be visualized on ComAV platform.

In CoCA-Ex, a user starts the visualization process by pick- ing desired components from the local machine and uploading them to the server, as shown in Figure 3. Unsupported file types are automatically ignored, as indicated by a red sign.

The ComAV platform creates the model of the application and the CoCA-Ex shows the application diagram in the web page. The demonstration of the CoCA-Ex?s GUI is shown in Figure 2. It demonstrates the features of the tool on a reverse engineered component diagram of a OpenWMS application, a modern warehouse management systems which is based on components.

Figure 4 shows a data flow between ComAV and CoCA-Ex and CoCA-Ex?s client and server parts. While CoCA-Ex server emits raw component data to ComAV and receives reverse- engineered models, the CoCA-Ex client provides model?s visualization and user interaction.

CoCA-Ex uses servlets from the enterprise Java technology as the back-end technology. Servlets are used mainly because of the Java implementation of the ComAV tool. HTML5,     Fig. 2. Complex Component Application Explorer tool demonstration  Fig. 4. CoCA-Ex architecture  JavaScript, jQuery framework and CSS3 were used for the front-end. Canvas and SVG elements from HTML5 are used to represent the nodes of the diagram. Although the HTML5 technology is still not fully supported by all main browsers, its current state is sufficient for CoCA-Ex purposes. Also desired features such as SVG support or Canvas are likely to be stable in the near future. We chose these technologies because they are well-known and widely supported, which will ease further improvements. We also tested several graphical frameworks, but we concluded that their customization would be difficult because most of our present and future features require custom implementation. That is the reason why we implemented the GUI from scratch.

The tool provides standard features such as panning and zooming. There are two modes of manipulating the compo- nents with appropriate icons in the toolbar. First mode is for moving components (A) where the user can manually adjust the layout of the diagram. Second mode (B) serves for removing components from the diagram area to the SeCo area simply by clicking on the desired components, which should be removed. Last two icons in the toolbar serve for the automatic removal of a configured amount of components from the diagram to the SeCo area. The tool is currently configured to remove 15% of most connected components, but  more sophisticated algorithms are subject of a future work. The icon (C) is used for removing these components and adding them to the SeCo area as individual items. The next icon (D) creates one group for all of them.

The tool also offers to change the set of components the user works with. For this purpose the link ?Back to upload? (J) is in the toolbar. It is also possible to remove all components from SeCo area back to the diagram area by using the red cross icon (N). There is also a possibility to sort the components shown in SeCo (L). Currently, there is a possibility to sort components by their names or their amount in a group. Both mentioned sorting possibilities can be ascending or descending.

CoCA-Ex offers a fulltext search by components? names.

In Figure 2, one can see the search result for a string ?jpa?.

Two components in the diagram contain this word as indicated by the number two (F). Components matching the search are highlighted by an orange color (E).

If one clicks to the required interfaces of a component in SeCo, these interfaces and connected components become highlighted by a yellow color. This feature is demonstrated on a dependency between an org.openwms.core.domain com- ponent (H) and required interfaces (Y) of a blue group with the heart symbol (M). For the provided interfaces, a green color is used for highlighting. It can be seen between provided interfaces of the first component in SeCo (T) and org.openwms.core.service.spring component (G) in the dia- gram area.

For several components from the SeCo area (those with symbols? background highlighted by different colors (S)) there are delegates shown in the diagram area, e.g., (K). One can also see a group consisting of three components (M). For inspecting interfaces, the tool offers highlighting of a connection by a red color and showing the interfaces involved in the connection (P), as shown in the green tooltip. Each individual component     Fig. 5. Adding components from diagram to SeCo groups  shown in SeCo has its own button (R) to remove it back to its original position in the diagram area.

There is also possibility to add desired components from diagram area to existing items in SeCo by a context menu, as shown in Figure 5. The context menu will appear after a right mouse click on any components in the diagram area. It contains symbols and colors of all items included in SeCo.

There is also possibility to explore each of these items in the context menu by using the plus symbol. After such expanding, all components included in the corresponding SeCo area item are listed.

A. Extra-functional properties of CoCA-Ex  CoCA-Ex is able to work with thousands of elements on a usual desktop computer without uncomfortable delays. The longest delay in the reverse-engineering process is the initial upload and the diagram creation. It is caused by the fact that applications can have hundreds of megabytes and thus their uploading and processing can take some time, depending on the network connection speed and computer performance. For instance, diagram containing 914 components, which have in total 113 MB, took to show 10 seconds2. Another CoCA-EX property is its compatibility with browsers. Since the tool is written in new technologies, which are not fully supported in all browsers, the application currently works well in Firefox 21. We are working on compatibility with Chrome.

B. Deployment and Availability  The CoCA-Ex application is available online3 for testing.

Please note that due to new technologies, only Firefox 21 is officially supported 4. For the demonstration purposes, we provide a corpus of test data files5 to be uploaded to the CoCA- Ex server. The corpus needs to be extracted and components (.jar files) uploaded. The tool can be also downloaded as a Java EE WAR file6 and deployed to a Java EE server (e.g.

Apache Tomcat7). In a case of own installation, it is necessary to configure the storageLocation attribute for uploaded files in a configuration file8. All necessary information and screencasts are described on the information webpage 9.

2System configuration: Intel(R) Core(TM) i5-2300 @ 2.80 Ghz, Windows 7 64-bits, Firefox 17.0  3http://relisa.kiv.zcu.cz:8083/cocaex/ 4http://portableapps.com/apps/internet/firefox portable/localization 5http://home.zcu.cz/?lholy/visualization/demo\ data.zip 6http://home.zcu.cz/?lholy/visualization/cocaex.war 7http://home.zcu.cz/?lholy/visualization/apache-tomcat-7.0.27.exe 8cocaex.war/WEB-INF/configuration.properties 9http://www.kiv.zcu.cz/research/groups/dss/projects/cocaex

VI. CONCLUSION AND FUTURE WORK  In this paper, the CoCA-Ex tool for maintenance of com- ponent applications was described. The tool helps to reduce the amount of lines in UML component diagrams of large applications by removing the selected components from the main diagram area. The core concept of the tool is a Separated Components area where the selected components are detached.

Symbolic delegates replace lines from the original diagram.

In a typical scenario, developers remove highly connected components from the main diagram to get the insight of important parts faster.

This tool is useful in the reverse engineering process when the user is interactively getting familiar with a com- plex component system. It helps with creating the mental model of the application by easing the process of clusters creation. While the reverse-engineering process is delegated to the ComAV platform, the tool presented here concerns on a user interaction when maintaining a complex component applications and getting familiar with its structure.

Preliminary evaluation shows that the presented ideas are helpful in a large graph visualization, where one suffers from visual clutter caused by the large number of connection lines. In one experiment10, only 7 out of 202 components have been removed from the diagram area leading to 65% connection lines reduction. It showed up that by using the proposed technique, a significant visual clutter reduction may be achieved.

We are currently implementing a layout algorithms inte- gration and we will continue work on clustering techniques.

We have chosen force-directed algorithms to be used in the application after a short survey. These features should let the user get the insight faster. We also plan to evaluate above mentioned ideas by a case or user study.

