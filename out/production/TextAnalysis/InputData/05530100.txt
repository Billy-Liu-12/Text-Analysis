TOP-MATA: A Max-First Traversal Method for Top-? Cosine Similarity Search

ABSTRACT  Recent years have witnessed an increased interest in computing cosine similarities between  documents (or commodities).

Most previous studies require the speci?cation of a minimum similarity threshold to perform cosine  similarity search. How-  ever, it is usually dif?cult for users to provide an appropriate threshold in practice. Instead, in this  paper, we propose to  search top-? strongly related pairs of objects as measured by the cosine similarity. Speci?cally, we  ?rst de?ne the cosine  similarity measure from the association analysis point of view and identify the monotone property  of an upper bound of the  cosine measure, then exploit a Max-First traversal strategy for developing the TOP-MATA  algorithm. Compared with pre-  vious TOP-DATA method, TOP-MATA has the advantage of saving the computations for false-  positive item pairs. Finally,  experimental results demonstrate the computational ef?ciency of the algorithm.

Keywords: Cosine Similarity, Interestingness Measure, Anti-Monotone Property, Association  Analysis  1. Introduction  Since the introduction of the association rules in the early  nineties of the last century [1], association analysis has be-  come one of the core problems in data mining and database  communities. When facing a large set of items (objects)  and the observation data about co-occurring items, associa-  tion analysis is concernedwith the identi?cation of strongly  related subsets of items. It plays an important role in  many application ?elds such as market-basket analysis [2]  and bioinformatics [3, 4]. Although numerous scalable  methods have been developed for mining frequent patterns  in association analysis, the support and con?dence fram-  work, however, may not disclose truly interesting relation-  ships [5]. Let us demonstrate this by the following well-  known example [6] in Table 1.

Tab. 1: A Tea-Coffee Example.

Coffee Co?ee ?

Tea 15 5 20  Tea 75 5 80    ? 90 10 100  According to the table, we can ?nd an association rule  {Tea} ? {coffee} with a reasonably high con?dence  value: 75%. This rule implies that people who drink tea  will more likely drink coffee, which indeed is NOT true.

Now, note that the fraction of coffee drinkers, regardless of  whether they drink tea, is 90%. In contrast, the fraction of  tea drinkers who also drink coffee is only 75%. In other  words, knowing that a person who drink tea actually de-  creases his/her probability of being a coffee drinker from  90% to 75%! Therefore, the support-con?dent framework  is actually not suitable for this usual case. To meet this  critic challenge, many objective interestingness measures  have been proposed or borrowed for mining truly interest-  ing rules, such as ???? and ?2 [7], all-con?dence, coher-  ence, and cosine [8]. Most of these studies, however, re-  quire the setting of a minimum similarity threshold which  is actually a real challenge for users in practice. More im-  portantly, many applications and search engines require the  rankings of the item subsets instead.

To this end, in this paper, we propose a novel Max-First  traversal algorithm named TOP-MATA to search for the  top-? cosine similarity item pairs. TOP-MATA can uti-  lize the monotone property of the cosine upper bound so  as to ef?ciently prune item pairs without computing their  exact cosine values. In addition, TOP-MATA has the abil-  ity that can avoid the computations of cosine values for  false-positive item pairs. Finally, we conduct experiments  on various real-world data sets. Results reveal that, com-  pared with the brute-forth method and TOP-DATA algo-  rithm, TOP-MATA algorithm shows overwhelming com-  putational advantages for ?nding top-? item pairs.

RelatedWork: A key problem of using the interestingness  measures is the lack of the monotonicity, which makes it  dif?cult to incorporate the measures directly into the ex-  isting mining algorithms. Under this circumstance, Xiong  et al. inspiringly introduced an upper bound function to  the ?-coef?cient, and proposed the TAPER algorithm [9].

Ilyas et al. (2004) [10] also proposed a method for ef?-  ciently identifying correlated pairs, which applied the sam-  pling techniques. Zhang (2006) [11] also proposed a sim-  ple randomized algorithm whose false-negative probability    is negligible. Since it is often dif?cult for users to provide  an appropriate correlation threshold, Xiong et al. [12] pro-  posed the TOP-COP algorithm to ef?ciently compute the  top-? correlated pairs.

Outline: The remainder of this paper is organized as fol-  lows. Section 2 introduce the cosine similarity measure  and traversal method. Section 3 proposes the TOP-MATA  algorithm. Experimental results are presented in Section 4.

Finally, we draw the conclusion in Section 5.

2. Basic Concepts and Problem De?nition  Cosine similarity is a measure of similarity between two  high-dimensional vectors. In essence, it is the cosine value  of the angle between two vectors. That is, given two vectors  978-1-4244-6487-6/10/$26.00 2010 IEEE  ? and ? ,  cos(?,? ) =  ? ? ?

????? ?

, (1)  where ? indicates the dot product of the vectors, and ? ?

? indicates the length of the vector. A cosine similarity  value always lies in the range of [0, 1], where 1 indicates a  perfect match of two vectors, whereas 0 indicates an entire  difference.

From a support measure point of view adopted by the fre-  quent pattern mining, the cosine similarity for binary pairs  can be further transformed equivalently to a support form  as follows:  cos(?,? ) =  ????(?? )?

????(?)????(? )  . (2)  2.1. The Upper Bound and Its Monotonicity  For two items ? and ? , without loss of generality, we as-  sume ????(?) ? ????(? ). According to the de?nition of  the support measure, the number of co-occurrences of ?

and ? must be no more than the number of occurrences of  ? or ? alone. That is, ????(?? ) ? ????(? ).

Accordingly,  ????(?? )?

????(?)????(? )  ?

????(? )?

????(?)????(? )  =  ?

????(? )  ????(?)  .

(3)  Thus we get an upper bound for cos(?,? ), denoted as  ?????(cos(?,? )) =  ?

????(? )  ????(?)  . (4)  Further we formulate the property of the upper bound.

Theorem 1 Given two items ? and ? with ????(?) ?

????(? ), ?????(cos(?,? )) is monotonously increasing  in ????(? ) and monotonously decreasing in ????(?).

Suppose we have ? items: {?1, ?2, ? ? ? , ??}. We ?rst  sort the items in descending order of their support values:  ????(??), ? = 1, ? ? ? , ?. This leads to a sorted item-  sequence  ? = {?[1], ?[2], ? ? ? , ?[?]}, (5)  where ????(?[?]) ? ????(?[?]) if and only if ? ? ?.

Based on the sorted item-sequence, we can build a two-  dimensional Sorted Item-Matrix? = ?

?

?, as shown  by Figure 1 with ? = 6. Note that since the cosine sim-  ilarity is symmetric, we only need to consider the upper  triangle matrix ??.

For the pairs in the Sorted Item-Matrix, there exists the  Monotonicity mentioned above in rows or in columns,  which can be called 2-D Monotonicity.

2.2. Problem De?nition and Traversal Method  Now, suppose we have ? different items in a data set, each  of which is characterized by a binary vector. We then  X[1]  X[2]  X[3]  X[4]  X[5]    X[6]  X[1] X[2] X[3] X[4] X[5] X[6]  Fig. 1: The Sorted Item-Matrix: An Example.

formulate our problem as follows:  PROBLEM DEFINITION. Given itemset ? =  {?1, ?2, ? ? ? , ??} where each item is represented  by a binary vector, ?nd ? pairs of items whose cosine  similarity values are among the top-? ones.

For solving this problem, we can build and maintain the  list of the binary pairs with top-? cosine similarity values  (hereafter we call them the top-? pairs for simplicity)  during the computation. The rule for the update of the top-  ? list is as follows: 1) Compute the cosine value of a new  binary pair; 2) If this value is larger than the minimum one  of the current top-? pairs, the new pair should replace the  minimum pair.

Apparently, the cost of the direct way that computes the  values for all ?(? ? 1)/2 pairs in a brute-force manner is  typically very high. And this can be even worse if ? be-  comes extremely large  too large to be loaded into the  main memory  indeed this is a usual case for a market  basket data set. So the ?rst point is to alleviate the compu-  tational cost by exploiting the upper bound of cosine sim-  ilarity. Let ?????? denote the minimum cosine value of  the pairs in the current top-? list, we have two simple the-  orems as follows.

Theorem 2 (The Filtering Effect). A new pair {?,? }  can enter the top-? list only if ?????(???(?,? )) ?

??????.

Theorem 3 (The Pruning Effect). Given the current top-  ? list and its ??????, for pairs in sorted item-matrix, if  ?????(???(?[?,?])) ? ??????, then ? ? ? ? and ? ? ?,  ?????(???(?[?,?])) ? ??????.

The above theorems points out that the upper bound can be  used to ef?ciently ?lter and prune item-pairs in the sorted  item-matrix. According to 2, for any new pair {?,? },  if ?????(???(?,? )) ? ??????, we further compute  ???(?,? ) to check whether ???(?,? ) ? ??????.

Otherwise, we simply skip this pair without computing  ???(?,? ). We hereby call it the ?ltering effect of the  upper bound. According to 3, if ?[?,?] cannot enter the top-  ? list due to its small upper bound, then ?[?,?] will also fail    to do that given ? ? ? and ? ? ?.

Instead of the brute force traversal method, TAPEK-TOP-  K [12] and TOP-DATA[13] are two ef?cient methods to  ?nd the top-? pairs, whose key point is the use of the  upper bound of cosine similarity and its monotone prop-  erty. The TAPEK-TOP-K method traverse the item pairs  row by row, from top to bottom, from left to right, in the  item-matrix. And the TOP-DATA method conducts a di-  agonal traversal in the item-matrix. The search starts from  the principal diagonal, then goes to the diagonal above the  main diagonal, and so on. Previous studies have shown that  the TOP-DATA method is more ef?cient than the TAPEK-  TOP-K method.

3. The Max-First Traverse Algorithm  In this section, we revisit the top-? cosine similarity  computation problem, and propose TOP-MATA (Top-?

cOsine similarity Pairs using MAx-?rst TrAverse method)  for very large-scale data sets.

3.1. The Max-First Traversal Procedure  The max-?rst traversal procedure also takes use of the  sorted item-matrix. Roughly speaking, it is an iterative pro-  cedure. In each iteration, it selects one row in the upper tri-  angular matrix to check whether there is any pair that can  enter the top-? list. Two points should be addressed here:  ? First, the selection criterion is max-?rst; that is, the  row containing the item pair with the maximum cosine  upper bound will be selected.

? Second, one checking is not for one pair only, but in-  cludes all the pairs in the same row that have the same  maximum upper bound value.

The whole iteration process will be suspended if the maxi-  mum upper bound is no greater than??????, i.e., the min-  imum cosine value of the current top-? pairs. In what fol-  lows, we illustrate the pseudocode of TOP-MATA.

3.2. The Pseudocode of TOP-MATA  Fig. 2 shows the pseudocode of TOP-MATA. In Line  3 to 6, we initialize a max-heap data structure named  ????????????? to store the up-to-date maximum cosine  upper bound of each row in the sorted matrix. It is trivial to  note that the maximum cosine upper bound of each row is  exactly the one of the left-most pair remained unchecked in  this row (recall the monotonicity of the upper bound). And    the use of a max-heap is for the purpose of speeding up  the selection of the row with the maximum upper bound,  as show in Line 7.

Line 8 to 23 are for the iterative process. We ?rst check  whether the maximum upper bound???????? we ?nd is  larger than?????? in Line 8. If not, we stop the iterations  and return the current top-? pairs as the ?nal result in Line  24. Otherwise, we proceed to check whether the pairs with  ???????? can enter the top-? list. Line 12-14 are to ?nd  all the pairs with the same upper bound ????????, from  ?[?,??] to ?[?,???1 ]. Then we ?nd the TID-lists of the items  in these pairs for the computations of 2-item supports, and  check whether these pairs can enter the top-? list by com-  puting their exact cosine values By procedure Re?neTop-  KPairs. It is noteworthy that we employ the Vertical Data  Layout [14] to facilitate the computation of 2-item sup-  ports for cosine similarity. That is, for an item pair, we  1: procedure TOP-DATA(?,? ,?)  2: ?????? = ?1, ? =Size(?);  3: for ? = 0 to ? ? 2 do // initialize pairUpperHeap  4: ? = ?+ 1, ?????=  ?

????(?[?])/????(?[?]);  5: Add {?, ?, ?????} to ?????????????;  6: end for  7: ???????? = ?????????????.????.?????;  8: while ???????? ? ?????? do  9: ? = row index of ?????????????.????;  10: ?? = column index of ?????????????.????;  11: ?? = item index whose support is less then ??th  item;  12: for ? = ?? to ?? ? 1 do  13: Re?neTopKPairs(?[?], ?[?], ?????????);  14: end for  15: ?????=  ?

????(?[??])/????(?[?]);  16: if ????? > ?????? then  17: ?????????????.???? = {?, ??, ?????}  18: else  19: ?????????????.???? = {?, ?,?1}  20: end if    21: Heapify the max-heap of ?????????????;  22: ???????? = ?????????????.????.?????;  23: end while  24: return ?????????;  25: end procedure  1: procedure REFINETOPKPAIRS(?,?, ?????????)  2: Get the ????(?,? ) via the vertical layout?;  3: ??? = ????(?,? )/  ?

????(?)????(? );  4: if ??? > ?????? then  5: Update ????????? by {?,?, ???}.

6: end if  7: end procedure  Fig. 2: The TOP-MATA Algorithm.

search the vertical data layout for the transaction identi?er  list (TID-list) of each item, and then get the 2-item supports  by intersecting the TID-lists of the two items.

Finally, Line 15-22 are for the update of the max-heap.

That is, we should update the maximum upper bound for  the row we checked above. According to the monotonicity  of the upper bound, the next pair unchecked, i.e., ?[?,??] is  the candidate. If the cosine upper bound of ?[?,??] is greater  than ??????, then it can be added to the max-heap to up-  date the root, i.e., the checked ?[?,??]; otherwise, we only  need to disable the root and will not check this row any  more. Line 22 is to ?nd the new ???????? after the up-  date of the max-heap.

3.3. Avoiding the False-Positive Pair Computations  Here, we further explore the characteristics of TOP-MATA.

Indeed, compared with TOP-DATA, TOP-MATA can avoid  the computations of cosine values for false-positive pairs  the pairs that have upper bounds greater than the current  ?????? but smaller than or equal to the optimal thresh-  old, i.e., the minimum cosine value of the ?nal top-? pairs  which we do not know during the computational process.

Let ? denote the optimal threshold, we have the following  theorem.

Theorem 4 In the max-?rst procedure of TOP-MATA,  given the item pair ? to be checked and ?????? of the  current top-? list, we have  ?????(???(? )) > ???????? ?????(???(? )) > ?.

(6)  PROOF: It is trivial to note that ? ? ??????,  so the necessary condition is obvious. It remains to prove  the suf?cient condition. We use the proof by contradiction.

If ?????(???(? )) ? ?, we have  ?????? < ?????(???(? )) ? ?. (7)  Since the?????? is smaller than ?, there must be at least  one unchecked item pair that should enter the ?nal top-  ? list. However, according to the max-?rst rule of TOP-  MATA,  ?????(???(? )) = max  ?

?????(???(?)) ? ?, (8)  where ? is any item pair in the sorted matrix that remains  unchecked yet. This implies that there will be no more item  pair that can enter the top-? list due to the ?ltering effect  of the upper bound. This contradicts the above result. So  we complete the proof. ?

Remark. Theorem 4 implies that althoughwe cannot know  ? before we get the ?nal top-? list, the max-?rst strategy  can still guide us out of the pool of false-positive pairs,  as if we know ? already. This can further save the compu-  tational time of TOP-MATA.

3.4. An Example.

Tab. 2: The Example.

(a) The Transaction Data Set.

TID Items TID Items  1 a,b,c,g 11 a,d,e  2 a,b,c,d,e 12 a,d,e  3 a,b,c 13 a,f,h  4 a,b,c 14 a,f,h  5 a,b,c 15 a,f,h  6 a,b 16 a,g  7 a,b 17 a  8 a,b 18 a  9 a,d,e 19 b,c  10 a,d,e 20 b,c  (b) The Cosine Values.

Pair Cosine Pair Cosine  a,b 0.596 b,d 0.141  a,c 0.445 b,e 0.158  a,d 0.527 b,g 0.224    a,e 0.471 c,d 0.169  a,f 0.408 c,e 0.189  a,g 0.333 c,g 0.267  a,h 0.333 d,e 0.894  b,c 0.837 f,h 0.817  Note: Pairs omitted are with  cosine value 0.

Here we use a simple example to illustrate the procedure  of TOP-MATA. In this example, we use a simulated data  set which contains 20 transactions and 8 items, as shown in  Tab. 2(a). Tab. 2(b) lists the cosine similarity values of all  the item pairs computed in a brute-force fashion.

Suppose that we want to ?nd top-3 item pairs. First, we  sort the items into a sequence {?, ?, ?, ?, ?, ?, ?, ?} by the  their supports in the descending order, and then form the  sorted item-matrix in Fig. 3. Next, we compute the cosine  upper bounds for (?, ?), (?, ?), ? ? ? , (?, ?), and store them  into the max-heap.

For the iteration process, we  1. Find (?, ?) in the max-heap with the highest upper bound 1.000. Add (?, ?)  to the top-? list with ??? = 0, and disable the node for row ? in the max-  heap.

2. Find (?, ?) in the max-heap with the highest upper bound 0.894. Add (?, ?)  to the top-? list with ??? = 0.894, and update the upper bound for row ?

with 0.571.

3. Find (?, ?) in the max-heap with the highest upper bound 0.866. Add (?, ?)  to the top-? list with ??? = 0, and update the upper bound for row ? with  0.707. Set?????? = 0.

4. Find (?, ?) in the max-heap with the highest upper bound 0.846. Replace  (?, ?) by (?, ?) in the top-? list with ??? = 0.169, and update the upper  bound for row ? with 0.756. Set?????? = 0.

5. Find (?, ?) in the max-heap with the highest upper bound 0.837. Replace  (?, ?) by (?, ?) in the top-? list with ??? = 0.837, and update the upper  bound for row ? with 0.707. Set?????? = 0.169.

6. Find (?, ?) and (?, ?) in the max-heap with the highest upper bound 0.817.

Replace (?, ?) by (?, ?) in the top-? list with ??? = 0.817, and disable  the node for row ? in the max-heap. Set?????? = 0.817.

7. Terminate the iteration process for the maximal upper bound in the max-heap  is 0.756 < ?????? = 0.817. (?, ?), (?, ?) and (?, ?) are returned as  the top-3 pairs.

a b c d fe g h  a    b  c  d  e  f  g  h  0.745 0.624 0.527 0.471 0.408 0.3330.333  0.707 0.633 0.548 0.4470.447  0.756 0.655 0.5350.535  0.571 0.6330.633  0.7070.707  0.837  0.846  0.894  0.866  0.8170.817  1.000?  ?  ?  ?  ?  ?  Fig. 3: Illustration of the Max-First Traversal Procedure  of TOP-MATA.

Fig. 3 illustrates the TOP-MATA traversal procedure.

Compared with the brute-force method, TOP-MATA saves  the computations for the additional 21 cosine similarity val-  ues.

4. Experimental Results  In this section, we study the performance of TOP-MATA  algorithm on various real-world data sets.

4.1. Experimental Setup  Tab. 3: Some Characteristics of Experimental Data Sets.

Data set #Item #Record Source  Connect 129 67557 UCI  Wap 8460 1560 WebACE  Retail 16470 88162 Belgian Retail store  La12 21604 6279 LA Times (TREC)  In our experiments, we use four real-world data sets whose  general characteristics are summarized in Tab. 3. These  data sets were obtained from various application domains.

All the algorithms were coded in C#, and run in the en-  vironment of Microsoft .Net 3.5, on a Microsoft Vista Ul-  timate platform with SP2 32bit edition. The experimental  PC is with a AMDAthlon64 3800+ CPU, 4 GB DDRII 667  MHz RAM, and a Seagate Barracuda 7200.11 500GBHard  Disk.

4.2. The Performance Comparison  In this subsection, we would like to study the effectiveness  of the max-?rst traversal strategy for real-world data sets.

First, as can be seen in Fig. 4, due to the ?ltering effect  of the upper bound and the pruning effect of the max-?rst  traversal procedure, TOP-MATA consumes much less ex-  ecution time than the brute-force method. This is partic-  ularly true for small ? values. As ? grows, the gap be-  comes smaller.

50 150 250 350 450 550   0.5   1.5  K  Ex  ec  ut  io  n  tim  e(s  ec  )      Brute?force  TOP?MATA  (a) Connect  100 400 700 1000 1300 1600            K  Ex  ec  ut  io  n  tim  e(s  ec  )  (b) Retail  200       400         800  1600   3200 6400         K  Ex  ec  ut  io  n  tim  e(s  ec  )  (c) Wap  200       400         800  1600   3200 6400         K  Ex    ec  ut  io  n  tim  e(s  ec  )  (d) La12  Fig. 4: Computation Performance Comparison  50 150 250 350 450 550   0.1  0.2  0.3  0.4  0.5  K  Ex  ec  ut  io  n  tim  e(s  ec  )      TOP?DATA  TOP?MATA  (a) Connect  100 400 700 1000 1300 1600       K  Ex  ec  ut    io  n  tim  e(s  ec  )  (b) Retail  200       400         800  1600   3200 6400          K  Ex  ec  ut  io  n  tim  e(s  ec  )  (c) Wap  200       400         800  1600   3200 6400        K  Ex  ec  ut  io  n  tim  e(s    ec  )  (d) La12  Fig. 5: Computation Performance Comparison  Tab. 4: Computation Savings by TOP-MATA.

K Connect K Retail K Wap La12  50 58.35% 100 0.01% 200 0.83% 23.04%  150 55.91% 400 2.65% 400 30.12% 45.38%  250 53.61% 700 1.84% 800 20.03% 25.95%  350 48.28% 1100 3.95% 1600 13.06% 27.89%  450 43.12% 1400 1.48% 3200 6.14% 12.70%  550 39.36% 1700 4.00% 6400 5.63% 7.11%  Second, Fig. 5 shows the results of four data sets computed  by TOP-MATA and TOP-DATA, respectively. As can be  seen, in general, TOP-MATA shows a better performance  than TOP-DATA. And as the increase of the ? value, the  advantage tends to be even more impressive for these four  data sets.

4.3. The Computation Saving of TOP-MATA  As can be seen in the Tab. 4, four data sets, enjoy signi?-  cant computation savings brought by TOP-MATA. We can  conclude that the computation saving is a major factor  for the performance of TOP-MATA. That is, compared  with TOP-DATA, a higher computation saving implies a  much better performance of TOP-MATA. Since this saving  is more signi?cant as the increase of the items, TOP-MATA  works better for large scale data sets with a large number  of items.

5. Conclusion  In this paper, we studied the problem of searching for top-  ? item pairs with the highest cosine values among all item  pairs. Speci?cally, we provided a novel algorithm TOP-  MATA which employ a Max-First traversal strategy for ef-  ?ciently performing top-? cosine similarity search. Ex-  tensive experimental results veri?ed the effectiveness of the  algorithms, And TOP-MATA algorithm is superior to TOP-  DATA for large-scale data sets with multiple items.

