Improvement of Apriori Algorithm for  Association Rules

Abstract?Based on the analysis of principle and efficiency on Apriori algorithm, this paper points out its defects and presents an improved Apriori algorithm. The new algorithm can decrease the I/O operation of the process of mining by means of decreasing the times of database searching. It is shown by the experimental result that the improved algorithm is much more efficient than the traditional algorithm in being applied to mining association rule.

Keywords- Data mining;Association rule;Frequent itemsets;Apriori algorithm

I.  INTRODUCTION With the rapid development of the computer network  and database technology, more and more extensive attention are paid to the work about  the ways of founding valuable information and knowledge in mass data. Data mining is to mine out the knowledge and rules,  which is implicated, unknown, valuable for the decision, and the users might be interested in, from a large number of data.

Association rules mining is an important direction of data mining , the most classical association rules algorithm is Apriori algorithm. But there are some unsatisfactory aspects of Apriori algorithm in applications. A lot of literatures also aimed at improving these disadvantages of algorithm. Although these algorithms are better than traditional Apriori algorithm in the view of mining performance, they are so complex algorithms. Basing on the above, a new kind of association rule mining algorithm is proposed in this paper.



II. CONCEPT AND THEORY OF ASSOCIATION RULES Let us suppose I={i1,i2,?,im} is a itemsets, the D is  the gather of all transaction. The transaction T is a subset of I, set T ? I, each transaction have been marked by a TID. The association rules is as form as X =>Y, among  them, T ? I?Y ? I ? X?Y= ? , the X be called the condition of the rule, the Y be called rule of result. The support of association rule X=>Y for transaction set D is defined as the percentage that the either number of X and Y in the D. The confidence of association rule X =>Y is defined as the percentage that the number both of X and Y in the D to transaction X.



III. APRIORI ALGORITHM  A. Overview of Apriori algorithm The Apriori algorithm is a kind of basic algorithm that  look for a frequent itemsets, its basic principle is to use is a kind of iteration to search every layer, that is to search the k+1 dimensional itemsets  by k dimensional item sets. The Apriori algorithm uses the knowledge checked before, finds out the one dimensional itemsets L1.The L1 is used for finding out the two dimensional itemsets  L2, and the L2 is used for finding out L3, such descend to go to, until can't find out the k dimensional itemsets.

B. Analysis and shortage of Aprior algorithm The template is used to format your paper and style the  text. ns.

Although the Apriori algorithm oneself has some  optimization, still exists the problems of efficiency not high. The time of Apriori algorithm main consume at the following two aspects:  First, the combinations are excessive which created cycle when to create candidate itemsets at each step, the Apriori algorithm doesn?t exclude these excessive combinations which shouldn't participate in; Second, when to calculation itemsets?s support every time,all record in the database D will be scaned. If is a large database, this kind of scan comparison would increase the I/O expense of computer system, if it is a large database. But this kind of price is along with the increment of a record of the database to present a geometric progression of increment.



IV. IMPROVED ALGORITHM  A. Algorithm ideas Define abbreviations and acronyms the first time they  are us.

The first step is simple to statistics all item with a  chemical element to appear of frequency, and find out those bigger than or be equal to minimum support of the itemsets, then to creation one dimensional frequent itemsets L1.From the second step to begin circulation processing until cannot again the creation higher dimensional frequent itemsets. Circulation process is: in the k step, according to k-1 step born  k-1 dimensional frequent itemsets to come to creation the k dimensional frequent itemsets, because of at creation  k-1 dimensional    frequent itemsets, we can realization count the number of the elements which appear in the itemsets, so to some element but speech, if it count number is not arrive k-1, can be deleted in advance, thus expelling from the all big specification combination which be caused of this element.

This is because of wanting to become a element of the k dimensional itemsets, the element?s count number should attain k-1 in the factorial k-1 dimensional  frequent itemsets, otherwise it impossible born k frequent itemsets.

Then according to the Apriori algorithm,to test whether the k-1 dimensional  frequent itemsets which have been attained include all k-1 dimensional  frequent itemsets of new k dimensional frequent itemsets. If among them there is one doesn?t be included, then the combination should be deleted, so we can get an useful k dimensional  frequent itemsets.After Got this candidate frequent itemsets,we can carry on scan to each transaction TID of the database D, if the transaction include a element of the candidate frequent itemsets CK at lease, then we will reserve the transaction, otherwise we should make exchange the transaction record and the transaction record which didn't mark to delete in the database bitter end, and make deletion marking towards the transaction record which moving to the database bitter end, after scanning ,the whole database is the new transaction database D'.

Therefore along with the enlarge of k, the transaction record id D' will greatly reduce, for next transaction scan,it can consumedly great I/O expense.

B. The improved algorithm Our convertion:The Lk is a large itemsets which  length is k,Ck+1 is a candidate itemsets which length is k+1, the Tk is the subsets of the database D that correspond to Ck, the improvement of algorithm can be described as follows:  (1) L1={large1-itemsets}; (2) T1=D; (3) for(k=1; Lk?? ; k++); (4)   Ck+1=apriori_gen() (Lk); (5)   for all transactions t?Tk do begin (6)     Ct=Subset(Lk,t); (7)     t.count=|Ct|; (8)     if(t.count<k+1) Tk+1=Tk-<t.count,t>; (9)   end; (10)  for all transaction t?Tk+1 do begin; (11)    Ct=Subset(Ck+1,t); (12)    for all candidate c?Ct do begin; (13)      C.sup++; (14)    end; (15)    Lk+1={c?Ck+1|c.sup?min sup}; (16)  end; (17) Answer=Lk   C. The validation and implementation of improved algorithm To take it for example that the detailed deal in a  maternity and baby store of some customer, we have verification to the improved algorithm. The database D, such as form.1 show, support minsupport =3.

TABLE ?. DATABASE D  TID Items  customer1 bottle, nipple, Saliva towel, bottlebrush  customer2 bottle, nipple, Saliva towel, Milk partner,  bottlebrush  customer3 Milk powder, bottlebrush  customer4 bottle, Milk powder, nipple  customer5 Milk powder, nipple, Milk partner  customer6 Milk powder, nipple, Saliva towel  customer7 bottle, Milk powder, nipple, Saliva  towel, bottlebrush  customer8 Milk powder, nipple, Saliva towel, Milk  partner  To scan the database D first, we can get the one dimensional frequent itemsets L1, as is shown in table ?.

TABLE ?. L1  Items Support  bottle 5  Milk powder 6  nipple 7  Saliva towel 5  Milk partner 3  bottlebrush 4  In conjunction to L1, C2 will be born, as is shown in table ?.

TABLE ?. C2  Itemsets Support  bottle, Milk powder 2  bottle, nipple 4  bottle, Saliva towel 3  bottle, Milk partner 1  bottle, bottlebrush 3  Milk powder, nipple 5  Milk powder, Saliva towel 3  Milk powder, Milk partner 2  Milk powder, bottlebrush 2  nipple, Saliva towel 5  nipple, Milk partner 3  nipple, bottlebrush 3  Saliva towel, Milk partner 2    Saliva towel, bottlebrush 3  Milk partner, bottlebrush 1  To delete the itemsets which support smaller than the minsupport, L2 is born, as is shown in table ?.

TABLE ?. L2  Itemsets Support  bottle, nipple 4  bottle, Saliva towel 3  bottle, bottlebrush 3  Milk powder, nipple 5  Milk powder, Saliva towel 3  nipple, Saliva towel 5  nipple, Milk partner 3  nipple, bottlebrush 3  Saliva towel, bottlebrush 3  To statistics the number of times that each frequent itemsets appear in the L2?as is shown in table ?.

TABLE ?.

Items Support  bottle 3  Milk powder 2  nipple 5  Saliva towel 4  Milk partner 1  bottlebrush 3  Make use of the L2 to update database D, cut the transactions that doesn't include any itemsets, database D' will be born, as is shown in table ?.

TABLE ?. DATABASE D?  TID Items  customer1 bottle, nipple, Saliva towel, bottlebrush  customer2 bottle, nipple, Saliva towel, Milk partner,  bottlebrush  customer3 nipple, bottlebrush  customer4 bottle, nipple, Milk powder  customer5 bottle, Milk powder, Milk partner  customer6 bottle, Milk powder, nipple  customer7 bottle, Milk powder, nipple, Saliva towel,  bottlebrush  customer8 Milk powder, nipple, Saliva towel, Milk  partner  To delete the itemsets that appear less than 3 times in the new database, we will attain L2', as is shown in table ?.

TABLE ?. L2?  Itemsets Support  bottle, nipple 4  bottle, Saliva towel 3  bottle, bottlebrush 3  Milk powder, nipple 5  Milk powder, Saliva towel 3  nipple, Saliva towel 5  nipple, bottlebrush 3  Saliva towel, bottlebrush 3  To in conjunction with L2', C3 born, scanning a new database D', we can know L3 is C3, as is shown in table ? .

TABLE ?. C3?L3?  Itemsets Support  bottle, nipple, Saliva towel 3  bottle, nipple, bottlebrush 3  bottle, Saliva towel, bottlebrush 3  Milk powder, nipple, Saliva towel 3  nipple, Saliva towel, bottlebrush 3  To statistics the number of times that each frequent itemsets appear in the L3, as is shown in table ?.

TABLE ?.

Items Support  bottle 3  Milk powder 1  nipple 4  Saliva towel 4  bottlebrush 5  Make use of the L3 to update database D?, cut the transactions that doesn't include any itemsets, as is shown in table ?.

TABLE ?. D?  TID Items  customer1 bottle, nipple, Saliva towel, bottlebrush  customer2 bottle, nipple, Saliva towel, Milk partner,  bottlebrush  customer6 Milk powder, nipple, Saliva towel  customer7 bottle, Milk powder, nipple, Saliva towel,  bottlebrush  customer8 Milk powder, nipple, Saliva towel, Milk    partner  To cut the itemsets that include L3 and appear less than 3 times, we will attain L2', as is shown in table ?.

TABLE ?. L3?  Itemsets Support  bottle, nipple, Saliva towel 3  bottle, nipple, bottlebrush 3  bottle, Saliva towel, bottlebrush 3  nipple, Saliva towel, bottlebrush 3  To in conjunction with L3',and scan the database D', we can know L4 is C4, as is shown in table ?.

TABLE ?. L4?C4?  Itemsets Support  bottle, nipple, Saliva towel, bottlebrush 3  At this time of the database D?, as is shown in table XIII.

TABLE XIII. RESULT DATABASE D?  TID Items  customer1 bottle, nipple, Saliva towel, bottlebrush  customer2 bottle, nipple, Saliva towel, Milk partner,  bottlebrush  customer7 bottle, Milk powder,nipple,Saliva  towel,bottlebrush

V. CONCLUSION This paper proposes a new kind of association rule  mining algorithm and points out the limit of Apriori algorithm on the basis of researching Apriori algorithm.

The improved algorithm deletes useless itemsets after generated candidate itemsets everytime, reduces the number of itemsets generated in the next step, thereby reduces the times of database scanning, saving storage space required during algorithm and reduces the computation time. Verification results also show that the improved Apriori algorithm can make scanning fewer about half. The time of scanning and compared is even shorter when the database scale is quite large. In this way, the efficiency of the association rule mining is improved.

