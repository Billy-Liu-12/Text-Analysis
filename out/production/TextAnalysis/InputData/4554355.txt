Collaboration Framework for Data Compensation in  Sensor Networks

Abstract?This paper proposes a new approach of modeling the collaboration of sensor system artifacts to address the security and survivability concerns of sensor networks. The model considered is composed of sensors, base and users. Sensors are nodes that acquire and process data. Base is the node that acquires and processes data from sensors and provides an interface to access and monitor the sensor network while users monitor the system. The model proposed is instantiated and validated using association rule mining to compensate missing data in order to provide security and survivability to sensor networks.

Keywords-Sensor Networks; Security; Survavibility; Collaboration; Data Compensation.



I.  INTRODUCTION Networks of thousands of sensors present a feasible and  economic solution to some of our most challenging problems: real-time traffic modeling, military sensing and tracking, real- time pollution monitoring, wildlife tracking, and monitoring for bio-terrorist attacks. These small, fragile sensors are limited in energy, computational and storage resources [1]. Many applications, in particular military applications, are dependent on the secure and reliable operation of the sensor network. The survivability of the network is threatened by resource limitations and security attacks [13], [14], [18], [20].

Applications also require and expect the sensor network to deliver data with minimal lateness, loss and corruption so that optimal knowledge may be obtained by intelligent fusion.

Several issues in sensor networks still remain research challenges. Such as modeling and distributing the security and survivability concerns of sensor networks. It is also challenging to identify and estimate lost/corrupted data in such complex systems.

In this position paper we propose a new approach of UML modeling and distribution to address the security and survivability concerns of sensor networks. The model proposed is instantiated in the context of data estimation and validated using association rule mining on stream data to discover relationships between sensors and use them to compensate for missing data.



II. SYSTEM MODEL  A. Sensor Network Entities The system is composed of a number of entities as shown in  Figure 1.  Sensor is a node that acquires and processes data.

Base is the node that acquires and processes data from sensors, and provides an interface to access and monitor the sensor network [2], [3]. User is the entity that monitors the system.

The Sensing Application (SA) helps the base and sensors to acquire, process and route data. The Lightweight real-time Intrusion Detector (LID) on the sensor detects intrusion, processes the kind of intrusion and flags the base if an intruder is detected. The Intrusion Detector (ID) entity at the base detects security or erroneous data concerns, packet loss and intruders who may directly attack the base station. The Data Estimation (DE) entity estimates if data from a sensor conflicts with data from other sensors and helps compensate for the missing or corrupted data. The Intrusion Avoidance Agent (IAA) entity on the sensor senses possible intrusion activities [4], [5], [6] and sends a preemptive attack warning to the ID component at the base. The Decision Support Analysis and Knowledge Management component (DSAKM) is the application that supports decision making. It detects and makes a specific decision about security or erroneous data concerns.

The Key Management (KM) entity supports routing authentication protocols [7] to construct trust levels among the sensors and the base. This is needed not only when two nodes exchange data, but also to ensure that routing is established through trustworthy nodes.

Figure 1 depicts the entities of the sensor network system considered and provides their inter-relationships. The system has a base accessible by several users, and is composed of several sensors. The numbers 1..* between Base and User indicate that at least one user will monitor the system through the base. The numbers 1..1 next to Base indicate that the base is composed of one DSAKM, DE, ID, KM, and SA. Similarly, the numbers 1..1 next to Sensor indicate that a sensor is composed of one KM, SA, IAA, and LID. The numbers 0..* between Base and Sensor indicate that the base may function autonomously by sensing and processing data, or may receive data from one or several sensors. The numbers 0..* between Sensors indicate that a data sensed and processed by a sensor  This work is partly sponsored by the Department of Defense, DEPSCoR and the Department of Education, MSEIP, USA.

1..*  Base  Sensor  User 0..*  DSAKM  DE  ID  1..1  KM SA  1..1  1..1  1..1 1..1  1..1  IAA 1..1 1..1  LID 0..*    Normal Active Defensive  Start Attacked Resume  Safe  Warned  Ignore  Sense  Detect  may be forwarded directly to the base, or may be routed to the base through one or several intermediary sensors.

Figure 1. Sensor Networks Class Diagram  B. System Behaviors The system behavior involves both sensors and base state  diagrams.

Sensor?s state diagram presents the Warning and the Attacked cases (Figure 2). In the Warning case a sensor is active and pro-actively senses warnings [4]. The sensor transits to the ?Safe? state. When the warning signal is ignored, the sensor will return to the ?Active? state. In the ?Attacked? case a sensor is active and it detects an intruder [17], [19]. The sensor then transits to the ?Defensive? state. When the detection signal is ignored, the sensor will resume the ?Active? state.

Figure 2. Sensor?s State Diagram for Security and Survivability  Base?s state diagram distinguishes the following three cases.

Warnings from a Sensor. The base is active (Figure 3) and received a warning alert from a sensor. The base transits to the  ?Safe? state. If the suspicion is not confirmed, the warning signal is ignored, the base will return to the ?Active? state. In the ?Safe? state, the base will estimate if the data from that sensor conflicts with the data from other sensors. If there is a conflict, the base will transit to the ?Protected? state. In the protected state, the protection mechanism will invoke damage- control actions to ignore the data or to have the data analyzed [8], [9], [12] by the system. If the data is ignored the base will return to the normal functioning or the ?Active? state, if not, the base will transit to the ?Suspended? state where the data will be analyzed. When suspended, the base is in the ?Detected? state and the protection mechanism will evaluate the data for possible corruption or lost. In the case of corruption, the base transits to the ?Corrupted? state and the base compensates the illegitimate data. In the case of data lost, the base transits to the ?Missed? state and the base compensates the compromised data. At the end of the compensation the base will resume the ?Active? state.

Sensor Detected. The base is active (Figure 3) and detects an intruder. The base transits to the ?Attacked? state. In the ?Attacked? state, the base will evaluate the intrusion [4], [17], [18] and transit to the ?Protected? state. In the protected state, the protection mechanism will invoke damage-control actions to ignore the data and take action such as route change [11] or to have the data analyzed [9], [12] by the base. If the data is ignored and route change is proposed the base will return to the normal functioning or the ?Active? state; otherwise, the base will transit to the ?Suspended? state where corrective actions will be taken and the data analyzed [12] and compensated.

When suspended, the base is in the ?Detected? state and the protection mechanism will evaluate the data for possible corruption or lost. In the case of corruption, the base transits to the ?Corrupted? state and compensates the illegitimate data. In the case of lost, the base transits to the ?Missed? state and compensates the compromised data. At the end of the compensation the base will resume the ?Active? state.

Base Attacked. The base is active and detects an intruder [17], [19]. It transits to the ?Attacked? state, where it will evaluate the intrusion and transit to the ?Protected? state. In the protected state, the protection mechanism invokes damage- control actions to ignore the data and take actions such as route change [11] or to have the data analyzed [9], [12] by the system. If the data is ignored and route change is proposed the base will return to the normal functioning or the ?Active? state; otherwise, the base will transit to the ?Suspended? state where corrective actions will be taken and the data analyzed and compensated. When suspended, the base is in the ?Detected? state and the protection mechanism will evaluate the data for possible corruption or loss. In the case of corruption, the base transits to the ?Corrupted? state and compensate the illegitimate data. In the case of loss, the base transits to the ?Missed? state and compensates the compromised data. At the end of the compensation the base will resume the ?Active? state.

Normal Active  Corrupted  Safe  Start  Suspended  Missed  Corrupt Lost  Resume  Warned  Alert  Defensive  Attacked  Defend Ignore  Protect Protected  Detected  Detect  Analyze  Ignore     Figure 3. Sensor?s State Diagram for Security and Survivability  C. Entities Interaction Diagram The interaction diagram (Figure 4) models the behavior of  sensor networks by describing users, base and sensors interactions to address security and survivability concerns. The User(s) can log in or log out from the system, browse and manage base and sensor information. The Base processes data from sensors or data directly acquired and notifies users.

Sensors acquire, process and route data to the base. The system operates in one of the following modes.

Normal mode: The SA of the sensor acquires data ?AcquireData()? from the environment. Data is sent to the Sensor?s LID ?SendToLID()? for evaluation ?EvalData()?. If there is no warning ?[No Warning]? the data is sent from the sensor to the intrusion detection component ?SendToID()? at the base. Similarly, the SA at the base can also directly acquire data and forward to the intrusion detection component. ID analyses the data ?CheckData()? received and detects no security or erroneous data ?[No Error]? concerns. The data estimation component is therefore not invoked and data is sent to ?SendToDSAKM()? the DSAKM component.

Warning mode: The IAA of the sensor pro-actively senses ?Detect()? a warning  ?[Warning]? due to the nature of the data acquired. IAA invokes KM on the sensor to determine ?ExtractKey()? that the data comes from another sensor. If so, IAA checks ?CheckKey()? the sensor?s key returned to verify that the data originator is a legitimate sensor. If the key is not authentic ?[No Key]?, IAA notifies ?NotifyID()? ID at the base.

ID interacts with KM on the base to verify ?VerifyKey()? the nature of the key. If there is no key or the key is wrong ?[No/Wrong Key]?, DSAMK is notified ?NotifyDSKAM()? to take appropriate actions and the data received will be disregarded. If the data originator is authentic ?[Key]?, IAA forwards ?SendToID()? the warning information to the ID on the base. The ID analyzes the information ?AnalyzeData()? to confirm the suspicion. If the suspicion is not confirmed ?[No Warning]? the warning is disregarded and the data considered and forwarded to DSAKM ?SendToDSAKM()? as defined in the normal mode. If the suspicion is confirmed, the data may  have been damaged ?[Damage]? so ID invokes the damage- control function ?DamageControlDE()? of DE to deal with the case. Depending on the nature of the warning, the damage- control invocation may decide to compensate ?[Compensate]? the illegitimate data or not ?[Not Compensated]?. If the data is not to be compensated, it will be disregarded by DE at this point and the DSAKM is notified ?NotifyDSKAM()?. The DE will solicit the DSAKM to analyze ?AnalyzeDSAKM()? the data to determine if the data is corrupted ?[Corrupted]? or missed ?[Missed]?. The DSAKN will then invoke the compensation functions ?Compensate()?of the DE to compensate for corrupted ?Corrupt()? or missed ?Lost()? data.

Attack mode: The SA of the sensor acquires data ?AcquireData()?. Data is sent to the Sensor?s LID ?SendToLID()? for evaluation ?CheckData()?. If the LID detects an attack ?[Attack]? it flags the intrusion detection component ?FlagID()? at the base. Similarly, the SA at the base can also directly acquire data and flags the intrusion detection component. ID evaluates the intrusion ?EvalIntrusion()? and has to interact with KM on the base to check ?CheckKey()? that the data originator is legitimate. If the key is not authentic ?[Wrong Key]?, DSAKM is notified ?NotifyDSAKM()?. With appropriate key ?[Key]?, ID may recommend the system to change the route ?[Route]? used by data to reach the base or to take damage control actions ?[Damage]? to correct the data received. If the DE suggests a route change, it invokes the DSAKM with ?RouteChange()? function. If not, ID invokes the damage-control function ?DamageControlDE()? of DE to deal with the attack. From there the DE will function as described below for the warming mode.

As the incoming packet information can no longer be trusted, the data estimation layer is invoked to compensate for the illegitimate or compromised data. It is important to note that even in the warning and attack modes when the network is under threat or attack or suffering from data loss or error, the estimated data (not the received sensor data) is sent to the DSAKM component. This process increases the survivability of the system.



III. MODEL INSTANTIATION AND VALIDATION Due to loss and corruption of data caused by intrusions [5],  [6], node failures, or battery depletion, data may not be available when needed. Simply requesting sensors to resend the missing data to the base is not always a feasible solution since it will both increase the query response time and consume more computer resources and power from the base and sensors.

Below we present a validation of the attacked mode.

A. Instanciation for the Attacked Mode The SA of the sensor has acquired data that has been sent to  the Sensor?s LID for evaluation. The LID detected an attack and flagged the intrusion detection component at the base. ID evaluated the intrusion after interacted with KM on the base and found out that the data originator is legitimate. Because the key is authentic, DSAKM is not notified.

KM DE DSAKM  [No Warning] SendToID()  ID KMIAA LID SA  SendToLID()  CheckData()  BASE SENSOR  CheckData() [No Warning] SendToDSAKM()  AquireData()  Normal  [Key] [Warning] SendToID() VerifyData()  Warning  [Attack] FlagID()  EvalIntrusion()  Attack  Corrupt()  Detect()  SendToLID()  CheckData()  AquireData()  [corrupted]  DamageControlDE()  Disregard()  Lost() [Missed]  [compensate] Analyze()  Compensate()  SA  AcquireData() [No Warning] SendToID()  AcquireData() [Attack] SendToID()  [Damage] DamageControlDE()  [key] [Route]RouteChange()  [key] [Damage]  ExtractKey() CheckKey()  [No Key] NotifyID()  [No/Wrong Key] NotifyDSAKM()  ExtractKey() CheckKey()  [Wrong Key] NotifyDSAKM()  VerifyKey()  [Not compensate] NotifyDSAKM()  l ()[Not compensate]    Figure 4 Interaction Diagram for Security and Survivability  Many research projects have been conducted by different organizations regarding wireless sensor networks [10], [11], [14], [15]; however, few of them discuss how to estimate the sensor data that are missing because they are lost or corrupted or arrive late when being sent from sensors to the base.

Traditional methods to handle the situation when data is missing are to ignore them, making sensors send them over. As discussed in [23], these methods are not suitable for wireless sensor networks. Therefore ID may not recommend the system to change the route used by data to reach the base; instead it will take damage control actions to correct the data received.

ID invokes the damage-control function of DE to compensate the illegitimate data. At this point the DE solicits the DSAKM to analyze the data to determine if data is corrupted or missed.

If the data is missed, the DSAKM will then invoke the compensation functions of the DE to compensate for the missing data. A more favorable solution is to estimate the missing data using an efficient data estimation algorithm, so that we can use the estimated results to replace the missing data and respond to queries that require the missing data.

The DE and DSAKM function to compensate for missing data has been implemented using data mining association rules, called FARM (Freshness Association Rule Mining). Its goal is to derive estimated values that are not only accurate but also timely and power-aware. This is significant to many applications where exact data may not be necessary and certain approximate data is acceptable, such as traffic management, intrusion detection, and network routing. This approach also reduces the chance that real-time applications would miss their deadlines due to lack of data.

B. FARM Concepts In our earlier work [22], we developed the WARM  (Window Association Rule Mining) algorithm for estimating missing sensor data. WARM uses association rule mining [21] to identify the related sensors in the current sliding window and then estimates the missing data from a sensor by using the data reported by its related sensors in the window. As an example, a window of 24 hours contains only the sensor readings reported in the last 24 hours. An association rule X ? Y (s, c) is said to hold if both s and c are above or equal to     a user-specified minimum support and confidence, respectively, where X and Y are sensor readings from different sensors, s is the percentage of reading rounds that contain both X and Y, called support of the rule, and c is the percentage of reading rounds containing X that also contain Y, called the confidence of the rule. The task of mining association rules then is to find all the association rules among the sensors which satisfy both the user-specified minimum support and minimum confidence.

Experimental results show that WARM performs better than the average approach where the average reading reported by all sensors in the window is used for estimation. However, WARM treats all sensor readings in the window to be of equal importance regardless of when the readings were obtained, i.e.

all the sensor readings would contribute equally to the estimation of a missing data value in the current round of readings.    This treatment does not reflect the temporal nature of sensor data in many data stream applications, such as those that use sensors to monitor environmental conditions.  In those applications, the more recent a sensor reading is, the more relevant it is in answering queries that are based on the current sensor data. For example, the temperature collected at 2 PM is more similar to that collected at 2:05 PM than the one reported at 10 PM.  So, to estimate the temperature that was missing (i.e. did not get reported) at 2 PM due to a sensor data lateness/loss/corruption, the temperature reported at 2:05 PM should contribute more than the one reported at 10 PM. to the estimation.

To address the temporal sensor data problem, we have developed a new algorithm, called FARM (Freshness Association Rule Mining).  Here, we provide the key ideas and results of FARM; interested readers are referred to [24] for more detailed descriptions.   FARM associates a freshness value, called round weight, to each round of sensor reading.

The more recent a round of sensor readings is, the higher round weight it has in computing the estimated value for the missing data in the current round. Like WARM, FARM also uses association rule mining to find the relationships between sensors; however, with the inclusion of round weights, the relationships discovered by FARM reflect the temporal correlations between sensors as the time element manifests itself in many data stream applications. After identifying the related sensors through data mining, FARM computes the estimated value of the missing sensor reading based on the weighted average of the current readings of the sensors related to the sensor with the missing reading.

To reduce space overhead, FARM implements a data structure that compacts raw stream data by means of round weights. Data held in that structure is the result of a formula that creates a mapping between a sequence of raw data and a resultant datum and thus requiring a much less space. Only compacted data is needed for estimation. This makes it possible to hold an efficient number of data rounds, which offers an advantage over the typical sliding window solution used in many data stream mining algorithms. Sliding window approaches typically suffer a tradeoff between a large space requirement and being able to store enough samples to recognize patterns given the chosen window size.

Additionally, limiting their amount of data stored makes them systematically unfit to answer data stream queries.  With the data compaction scheme, space overhead to compute association rules is reduced, which in turn, reduce access time to data needed to perform data estimation.

To recapitulate, it is this duality between the data freshness and the data compaction scheme as well as their positive implications on the space and time complexities that derive the motive of the FARM method.

C. Missing Data Validation for the Attacked Mode  Using a climate sensing data set [25] where the temporal characteristic of sensor data exists, we have performed experiments comparing FARM, WARM and existing data estimation algorithms: SPIRIT [26], TinyDB [27], Simple Linear Regression (SLR), Multiple Linear Regression (MLR), Curve Regression (CE), and estimation by average (Avg) [28].

The accuracy of the estimation is evaluated using the normalized root mean square error (RMSE).  As shown in Table 1, FARM yields the best data estimation accuracy with 23.43% less error than the second best method (WARM) and 98.59% less error than the worst method (CE).

Method RMSEs for Climate Sensing data  How many % the best approach is better?

FARM 0.00487 Best Approach WARM 0.00636 23.43% TinyDB 0.0085 42.71% SPIRIT 0.0116 58.02% Average 0.015 67.53% MLR  0.121 95.98% SLR 0.342 98.58% CE  0.346 98.59%  Table 1. RMSEs for Climate Sensing Data Set

IV. CONCLUSION AND PERSPECTIVES This paper proposed a new approach of modeling the collaboration of sensor system artifacts to address the security and survivability concerns of sensor networks. The model considered is composed of sensors, base and users. Sensors are nodes that acquire and process data. Base is the node that acquires and processes data from sensors and provides an interface to access and monitor the sensor network while Users monitor the system. The model proposed has been instantiated and validated using association rule mining to compensate for missing data in order to provide security and survivability to sensor networks. Future work will instantiate and validate other modes presented throughout the paper.

