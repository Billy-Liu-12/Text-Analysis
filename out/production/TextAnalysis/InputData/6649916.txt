QTime: A Queuing-Time Notification System Based on Participatory Sensing Data

Abstract?People living in big cities often suffer from long queuing time waiting for checking out in supermarkets when the crowd density is high. This paper develops QTime, an application to inform queuing time in nearby supermarkets to help people make time-efficient plan about when and which store to go. QTime uses participatory sensing data collected by commodity sensors built into every-day smartphones without dependence on any pre-installed sensing hardware or software infrastructure. QTime calculates queuing time of an in-store user by detecting his/her queuing movement mode in the phone- side, and estimates the queuing time in given supermarkets by aggregating data from different users in the server-side, and notifies the users who have shopping plans through phones or webpages. Because even in a crowded supermarket, the queuing time of only a few customers can represent the majority, QTime can estimate queuing time accurately even only a few users upload data to the server. An experiment has been conducted and described to prove the validity of QTime.

Keywords-Pervasive Computing, Participatory Sensing, Mobile System, Queuing Time Estimation

I. INTRODUCTION People living in big cities often feel frustrated when they  have to wait in a long queue in front of cashiers in supermarkets. According to the survey published by IFOP, 30% of customers would give up their shopping plans, for they can?t bear with the long waiting time to pay the bills.

However, crowd density in supermarkets is fluctuated with times. An investigation conducted by Coodman et al. point out that the number of consumers changes dramatically during a day, especially in weekends [1]. So if consumers can make better plans about when and where to go shopping according to the current queuing time information in nearby supermarkets, the crowd condition is expected to be eased, thus bringing about enhancement of shopping experience for customers and convenience of arranging resources (such as staffs and equipments) for supermarket runners as well.

Motivated by the background above, we have developed a queuing time notification system, called QTime, which detects the queuing time in supermarkets and sends notifications to users. Although QTime currently only works for supermarket scenario, it is easy to apply in other places like bank, restaurant, ticketing houses in railway stations, or other hot place which often demanding queuing just by    adopting its techniques and slightly modifying some of its software modules.

QTime is a participatory sensing application, which consists of phone-side and server-side. In the phone-side, users can select their frequently-visited supermarkets and download locations, Wi-Fi fingerprints and features of environmental sound into the local database. When detecting user?s appearance in a pre-selected supermarket, the mobile phone will automatically collect data using phone-embedded accelerometer sensor and microphone, then recognize user?s movement mode. If the phone identifies that the user is waiting for bill payment, it records the queuing time and upload this information to the server just after queuing. In the server-side, QTime will collect queuing time measurements from different phones and eliminate the outliers. Then the data aggregation process is executed to calculate the queuing time in a certain supermarket.

Moreover, users can subscribe the crowd density information of specific supermarkets in a pub/sub manner or actively query for the information through phones or webpages.

In comparison to systems relying on dedicated or pre- installed sensors and related software, QTime need no sensing infrastructure supporting, thus making it much easier to be adopted and more likely to be widely used. At the same time, as customers always tend to choose to join the shortest queue in supermarkets, the queuing time among different lines are close to each other during the same short time period. That is to say, the queuing time measurements of only a few customers can represent the majority.

Consequently, for a given supermarket, even there are only a few users uploading queuing time information to the server, QTime is still able to make accurate estimations. This feature of QTime eases the common incorrect sensing problem caused by sparse sampling in participatory sensing applications [2].

The rest of this paper is divided into 6 sections. In section 2, we will give a system overview of QTime; Section 3 and 4 introduce two key functions. Section 3 introduces the recognition of user?s movement mode and the measurement of queuing time in phone-side, and Section 4 is about the data aggregation and queuing time estimation.

Section 5 is to give description about our experiment and data analysis. Section 6 reviews related works. Finally, we conclude with directions for future work in Section 7.

2013 IEEE 37th Annual Computer Software and Applications Conference  DOI 10.1109/COMPSAC.2013.127     Figure 1. System Architecture of QTime

II. QTIME:SYSTEM OVERVIEW Fig. 1 gives a brief overview of QTime system, which is  divided into phone-side and server-side, and the main modules are described in the follow.

A. Sensing Data Collection  QTime relies on end users to collect sensing data and report the measurements of queuing time to the server-side.

In this participatory sensing mode, data can only be collected and reported from the supermarkets and time where the users present. Furthermore, end users may choose to collect data only when their self-defined privacy preserving strategies are not violated and their phones have sufficient energy. Consequently, in participatory sensing applications, samples collected from mobile phones are typically randomly distributed in space and time [2], and sparse sampling may result in insufficient data to accomplish sensing goals. To ease this problem, we conducted an investigation in the supermarket scenario. It reveals that although there may be several or even dozens of cashiers in the same supermarket, customers? queuing time for checking out are quite close to each other during a short period of time. The reason is that customers always tend to join the shortest queue, thus making the length of queues are almost equal to each other. That is to say, even in a crowded supermarket, the queuing time of only a few customers can represent the majority. Consequently, with the elimination of noisy reports from phones, QTime is capable of making accurate estimation about queuing time in the supermarkets, even only a few queuing time measurements are reported to the server.

B. Sensing Data Processing  Customers? movement while queuing is in a similar standing-walking-standing mode, which means a customer in a queue will stand for a while (waiting for the queue to move), and then move one or several steps forward (moving along with the queue) and then stand again (waiting again).

QTime can recognize this movement mode by collecting data from phone embedded accelerometers and applying a simple data-mining algorithm. However, in some conditions a customer?s movement of scanning and selecting goods can  be identified incorrectly as in the queuing mode. For example, if the goods that a customer is interested are put nearby to each other in the shelves, the customer may walk to a product and then stand for a little while (browsing the commodity information), then move several steps to the next product and stand again. In this condition, the customer?s movement is also in the standing-walking-standing mode. So the task of identifying the correct queuing mode becomes challenging. In order to accomplish this task, we conducted an investigation in 22 supermarkets varying in size in our city. We found that all supermarkets are equipped with POS machine and stylus printers for printing receipts. The POS machine makes a beep while scanning the barcode of a good, and the stylus printers make a particular noisy sound for printing a receipt after a customer paying the bill. These two kinds of sounds are unique and particular in the circumstance of supermarkets, and can only be detected by phones near the cashiers. Because there is always some open space without shelves around the cashiers (for customers to wait in lines), if a customer is not in a queue for checking out, there is a very small possibility for she/he to move in a standing-walking-standing mode and her/his phone detect the noise made by POS machines and stylus printers in the same time. The accuracy of queuing recognition is significantly improved by combining movement mode detection and the POS/printer noise recognition in QTime.

By calculating the time of being in the queue mode, the queuing time can be easily measured. QTime processes all sensing data in the phone-side, and only uploads the results of measurement to the server-side. In this way, only very small data traffic is consumed.

C. Queuing time estimation  In the server-side, QTime first organizes data from different phones in a given supermarket and during the same short period of time into data groups, and then eliminate noisy data from each group, at last calculates the average of valid queuing time as the estimation.

D. User Notification  Users can subscribe notification service by publishing their shopping plans to the server-side, including the candidate period of time for shopping, the candidate     supermarkets and the maximum queuing time that she/he can bear with. As long as all the constraints are satisfied, the QTime will automatically notify the users through mobile client or text messages. Moreover, QTime also provides the service for users to query information actively through mobile clients or web browsers.

E. User Preference Configuration  For the participatory sensing applications, it is very important to encourage user?s participation by providing a flexible mechanism of preferences configuration. QTime provides rich preference options from four aspects including privacy preserving, energy consuming management, data traffic management and use habits. Typical options include when and where to collect data, under what energy condition for a phone to work, in which network connections (e.g.

WiFi, 3G, GPRS) to upload results of measurement, by which mode to interact with users (interactive or non- intrusive), and in which way to notify users (by mobile client or text message), etc.



III. CUSTOMER MOVEMENT MODE DETECTION  A. Scenario Introduction We take an ordinary customer Tom?s one time shopping  experience to illustrate the scenario for QTime to recognize a customer?s movement mode. Tom gets into the supermarket with a QTime equipped smartphone. As the location and Wi-Fi fingerprint of frequently visited supermarkets have already been downloaded into the local database of his phone, QTime can recognize the location as soon as he enters one recorded supermarket by utilizing the sensor of GPS or Wi-Fi. After entering the supermarket, Tom walks through shelves, browses goods, stops once in a while to read the commodity information, and puts some goods into his shopping cart. After finishing his shopping plan, Tom goes for checking out. So Tom walks towards the cashiers, and after taking a quick glance he selects the shortest queue to join. After getting into the queue, Tom stands still for seconds or minutes waiting for the customer at the head of the queue completing the deal and leaving.

Then, Tom moves several steps forward along with the queue and stand still waiting again. Tom?s movement in the queue repeats the pattern of standing-walking-standing until he pays his bill and walks away from the queue.

B. Movement Modes We divide the customer?s movement during shopping in  supermarkets into two modes, the queuing mode and the non-queuing mode. If a customer is in a queuing mode during the time period [ts, te], there are two conditions must be fulfilled:  Condition 1: Before ts and after te, the customer takes a continuous movement. The continuous movement is defined as a walk or running lasting for at least the time of Tm.

Before ts, the customer moves continuously to the end of a queue, and after te, she/he moves continuously again to leave the queue. Tm is set to 3 seconds in QTime.

As mentioned above, the movement of a customer in a queue can be considered as a process, which is made of a series interleaved short-term standing-still and moving- forward. We call one standing-still between two moving- forward one queue-waiting, and call one moving-forward between two standing-still one queue-moving.

Condition 2: Between ts and te, a customer?s movement consists of interleaved queue-waiting and queue-moving.

The queue-waiting is defined as a continuous still status lasting for the time less than Tw. The queue-moving is defined as a continuous moving status lasting for the time less than Tm.

According to our training data set, the possibility for the time of a queue-waiting to exceed 180 seconds is very small (0.12%), and Tw is set to 180 seconds in QTime. If a customer stand still for more than 180 seconds, QTime consider she/he is no longer in a queue. Also according to our training data set, with the possibility of 99.95%, the time of a queue-moving is less than 3 seconds (Tm is set to 3 seconds as above). Therefore, if a customer walks for more than 3 seconds, QTime consider she/he is no longer in a queue either.

Except for the queuing mode, all other customers? movements are considered to be in the non-queuing mode.

We found that, during the process of scanning and selecting goods, it is still possible for a customer?s movement to fulfill the above two condition, and thus causing the erroneous judgments. In order to solve the problem, we add the third condition as follow.

Condition 3: The queuing processes occur nearby the cashiers, and the customer in a queue is gradually moving closer to a cashier.

C. Queuing Mode Recognition QTime collects and processes sensing data aiming at  recognizing the queuing modes. For the above 3 conditions for determining the queuing mode, condition 1 and 2 are inspected based on the analysis of acceleration data gathered by the phone embedded accelerometers, and condition 3 is inspected by analyzing the acoustic data gathered by the phone micro-phones. Considering the limitation of computing, storage and energy in phones, where data collection and queuing mode recognition are implemented, we design relatively simple algorithms.

1) Acceleration Data Analysis The movement of customers in supermarkets includes  moving (walking or running) and still (standing or seating).

The difference of accelerometer data between these two movement statuses is very obvious. Fig. 2 shows the     acceleration data when a customer is standing still (Fig. 2.a) and walking (Fig. 2.b).

Figure 2. Acceleration data when a customer is standing and walking  QTime collects acceleration data with a sampling rate of 5Hz. Every sample is taken as a 3-dimensional vector denoted as (x, y, z). Movement status at a given time point, which is called a movement primitive, is judged by calculating the angle between the current sample vector and the adjacent sample vector. There are two types of movement primitives, still or moving. By statistically analyzing a 400 minutes? training data set, we select 5 degrees to be the threshold to differential still and moving, which reaches to the accuracy of 96.7%. The movement primitive is identified to be still when the angle between adjacent sample vectors is less than 5 degree, otherwise to be moving, as illustrated in Fig. 3.a.

Moreover, we use 0 and 1 to represent still or moving  primitives respectively, and thus generating a 0/1 series, which is called the Movement Identification Series (MIS), as shown in Fig. 3.b.

Next, the MIS is processed as the following steps: (a) Partition into blocks. A block is a fragment of  the MIS, which contains a series of continuous 0s or 1s, and is referred to as 0-block or 1-block respectively. And the number of 0s or 1s in a block is referred to as the length of the block.

(b) Noise Removing. The isolated 0 or 1 in a MIS is very possibly cause by noise in sensing data gathering.

Based on the statistical analysis of the training data set, QTime considers the block whose length less than 2 as noise, and the 0/1 value in a noise block will be modified and thus making the block be merged into the adjacent blocks.

(c) Block Tagging. As mentioned above, a queue- waiting is less than 180 seconds, and a queue-moving is less than 3 seconds. As adopting a 5Hz sampling rate, the length of the 0-block representing queue-waiting is less than 900, and the length of the 1-block representing queue-moving is less than 15. QTime scans the MIS, and tags the 0-blocks whose length less than 900 as queue- waiting, tags the other 0-blocks as continuously-still, tags the 1-blocks whose length less than 15 as queue- moving, and the other 1-blocks as continuously-moving.

(d) Candidate queuing series recognition. QTime scans MIS with block tags, all blocks series satisfying the following constraints are found and selected as candidate queuing series.

Constraint 1: the block series are between 2 blocks tagged as continuously-moving.

Constraint 2: there is no block tagged as continuously- still in the series.

(a) Angles between adjacent sample vectors  (b) Translating the acceleration data into a 0/1 series, called MIS Figure 3. Acceleration data transformation and interpretation     2) Acoustic Data Analysis First, we collect the sound made by POS machines  and stylus printers from different supermarkets, from which we extract the MFCC and MP features as sound benchmarks. Then we store these benchmarks in QTime server. Based on a user?s location and preferences, corresponding benchmarks are downloaded into phones.

When a customer is in a supermarket, microphone will collect acoustic data. The acoustic data is divided into 2- seconds sound frames, from which the MFCC and MP features are extracted and compared to the benchmarks.

In an experiment, we first gathered acoustic data in two supermarkets and extracted MFCC and MP features to be the benchmarks. Then, for each supermarket, we collected acoustic data using three brands of smartphones including Samsung Nexus S, Huawei T8950, Lenovo S880. For each supermarket, we collect the acoustic data within different distances from the cashier (less than 1m, 1m, 2m, 3m and 5m respectively). For each distance, data collection is conducted 30 times (each brand of phone collect 10 times), and the recognition recall is showed in table 1.

From the experiment we can see that the identification of the sound of POS machines and printers are closely related to the distance between the customers and the cashiers. A customer needs to move continuously to a cashier while waiting in a line, and the POS machine and the printer are surely to be used before the customer leaves the queue. Consequently, for every candidate queuing series, if in its time duration the sound of a POS machine or a printer is identified, then it is regarded as queuing series. Finally, when the queuing process is finished, the queuing time can be measured by counting the length of the recognized queuing series.



IV. DATA AGGREGATION AND QUEUING TIME ESTIMATION  After measuring a customer?s queuing time, the QTime phone-side sends a measurement (called a queuing time measurement instance, MI) along with current time stamps and supermarket ID to the server.  After receiving the data coming from different mobile phones, the server-side will make an aggregation and estimate current queuing time in each supermarket.

The basic idea of the estimation is described as follows.

First, QTime will define a time window with a fixed length (which is set to be 20 minutes in the current version). Then QTime will put MIs that belong to the same supermarket and same time window into a group (called MI-Group), and calculate the average value of each MI-Group as the queuing time estimation.

In the method described above, we assume that each MI is accurate and effective. However, it is not always the case.

On one hand, because precision of mobile phone sensors is limited and noise always exists in the environment, error may occur in the queuing mode recognition. On the other hand, customer?s abnormal behaviors may interrupt the queuing. For example, one may give up queuing in case of some emergent issues, or suddenly remember to buy something else and leave the queue to go back to the sale zone again. As a result, in the aggregation process, the server must evaluate MI?s validity and eliminate the invalid MIs.

QTime evaluates MI?s validity on a basis of such an assumption: in the supermarket, customers tend to choose the shortest queue. So in the same market and within the same time window (assume to be 20 minutes), the queuing time measurement of different customers should be close to each other.

Based on this assumption, in a MI-Group, the MIs that are obviously distant from other MIs should be detected and eliminated from group. The algorithm to evaluate MI?s validation is described in Fig.4.

Figure 4. Algorithm to evaluate MI?s validation  Denote a MI-Group as , where mi is the value of each MI in the MI-group, and n is the number of members in the MI-Group.

Step 1: Compute the average value of members in a MIG, denoted as .

Step 2: Compute where  Step 3: Compute the standard deviation of ,  Step4: Compare S and threshold D (a constant value), if , execute Step 5, otherwise consider each MI in  the MIG to be valid and exit. (Currently, D is set to be 0.2 in QTime.)  Step 5: If , execute step6, otherwise consider each MI in the MIG to be valid, and exit. (Explanation: when  , the number of MI is not sufficient enough to judge whether there is invalid MI, and all MIs are considered to be valid in this case.)  Step 6: Select from , where label to be  invalid, and eliminate it from Set and go back to Step1.

TABLE 1. RECOGNITION RECALL OF ACOUSTIC DATA OF CASHIERS IN SUPERMARKETS  LOC Data Source  Distance <1m 1m 2m 3m 5m  SMKTA POS Recognition recall (%  )  86.7 83.3 50.0 6.7 0 Printer 93.3 90.0 63.3 20.0 3.3  SMKTB POS 90.0 90.0 60.0 13.3 0 Printer 100 96.7 70.0 36.7 6.7

V. EXPERIMENT In our experiments, there were 12 volunteers to  participate in two big supermarkets. Experiments were conducted for 20 times, with 10 times in each supermarket.

In each experiment, 12 volunteers got into a supermarket, each carrying a smartphone with the pre-installed QTime phone-side application. All phone-side applications were set to collect data and upload results of measurement. For each experiment, volunteers are required to finish their queuing during the same time window. All experiments were conducted on weekends, and five time intervals were selected varying in the crowd density. The selected time interval is showed in table 2.

TABLE 2. TIME WINDOWS WHEN THE EXPERIMENTS PERFORMED  Id Time window Times of experiments 1. 9:40am~10:00am 4  2. 1:20pm~1:40pm 4  3. 4:40pm~5:00pm 5  4. 6:40pm~7:00pm 4  5. 9:40pm~10:00pm 3  In each experiment, QTime server-side estimated the queuing time of a certain supermarket based on the measurements uploaded by 8 volunteers, while other 4 volunteers? measurements were set to be test data to evaluate the estimation. The condition of queuing time in a supermarket was labeled as one of 4 levels, as in table 3.

TABLE 3. QUEUING TIME CLASSIFICATION Queuing Time (minutes) Classification  <5 Green  Between 5 and 10 Yellow  Between 10 and 15 Orange  >15 Red  If the test data and the estimation were in the same level, the estimation was considered to be accurate. The statistic result of these 20 experiments is showed in Fig. 5.

Figure 5. Estimation accuracy of the experiments  From the result, we conclude that QTime is able to give a good estimation of queuing time. When the queuing time is relatively short, due to the disturbance of noise, the accuracy is lower. When the queuing time is longer, the estimation accuracy becomes higher, because customers? movement mode of standing-moving-standing is much easier to be recognized.



VI. RELATED WORKS  A. Crowd Detection To the best of our knowledge, we haven?t found literature  about the measurement of queuing time in supermarket.

However, a research topic called crowd detection, which is aiming at estimating the density of crowd in public places, is closely related to our work. Because in most occasions, there is a positive correlation between crowd density and queuing time, and the crowd density can be considered as an alternative indicator to help customers to make better shopping plans. From the perspective of the data collection manner, existing works for crowd detection fall into two categories: one is based on video data collected by cameras, and the other is based on cellular network data which can be obtained from the base-stations.

For the former category, cameras are deployed in targeted public places and video processing algorithms are     adopted to count the number of heads in a frame [3][4][5][6][7]. This approach requires the pre-deployment of infrastructures such as cameras and relevant software systems. In comparison, our participatory sensing approach is economical as it is free from the requirement of extra sensing infrastructure in supermarkets, thus making it easier to be deployed and widely used.

For the latter category, cellular network data is used to estimate the number of people in a certain area [8][9][10][11][12][13]. At first, real-time interaction data between mobile phones and the cell towers are collected (such as phone calls, sending text messages, and etc.). The data mining algorithms are then applied to detect the flow of people into and out of commercial or residential parts of a given city. Compared to the camera-based approach, it is free from any dedicated devices by taking advantage of the ready-made cell towers. But this approach is relatively coarse-grained in terms of geographical scale. As a result, when it is applied in the supermarket-like scale, the accuracy wouldn?t be satisfied.

B. participatory sensing applications QTime obtains sensing data based on participatory  sensing, a new sensing paradigm leveraging mobile computing devices (usually smartphones) in a community to enable data gathering, analysis, and sharing[14][15]. The key idea behind participatory sensing is to empower ordinary citizens to collect and share sensing data from their surrounding environments using their mobile phones. Since the concept of participatory sensing was introduced in [15], several participatory sensing applications have been developed in domains like environmental monitoring, social network applications, traffic route navigation and personal health monitoring, etc. PEIR system [16] calculates personalized estimation of environmental impact and exposure using location data sampled from everyday mobile phones. Ear-Phone system [17] draws the noise map of a city by visualizing the microphone data form participatory mobile phones in different city areas. Systems like Nericell [18], VTrack [19] and Biketastic [20] are aiming at road conditions monitoring using combined data from participants? sensors. CenceMe project [21] is investigating the use of sensors in the phone to automatically classify events in people?s lives, called sensing presence, and selectively share this presence using online social networks such as Twitter, Facebook, and MySpace. PetrolWatch [22] presents a system for automatic collection of fuel prices using embedded cameras in phones. Users can query the system to determine the cheapest fuel that is available in their area of interest. DietSense [23] assists participants who want to lose weight by documenting their dietary choices by automatically taking images of the dishes in front of the users.

Unlike most of the existing participatory sensing applications, the participatory phones in QTime are  responsible for high-level situation identification and contribute high-level semantics to the server instead of uploading low-level context or even raw sensing data. As the mobile device becoming more and more powerful, assign more computing work to the participatory device may be more feasible, and in this way energy and bandwidth for uploading massive data can be saved.



VII. CONCLUSIONS In order to solve the frustrating long queuing problem in  big cities, this paper proposed QTime, a participatory sensing application. QTime uses the phone-embedded sensors in customer smartphone to collect sensing data in a non-intrusive way, recognizes customer?s movement mode, measures queuing time, and aggregates different use?s uploaded measurement to make the estimations. QTime doesn?t rely on any dedicated sensors or any other pre- installed infrastructure in the environment. Besides, QTime can make good estimations even if only a few customers uploading data to the server.

The future works about QTime include two parts.

First, queuing time prediction. With the accumulation of  sensing data, QTime should be able to analyze the statistical regulation in different supermarkets and time intervals, and predict the queuing time in the near future by combining both current and historical information.

Second, adaptive protocols for participatory sensing. In the current work, we found that in a certain supermarket and a specific time interval, if there are enough users to upload their measurement of queuing time to the server, then extra users? participation could not optimize the estimation. On the contrary, it may consume the restricted energy of mobile phones. Therefore, we plan to develop an adaptive protocol, which dynamically adjust the number of phones contributing data.



VIII. ACKNOWLEDGMENT This work is funded by the National High Technology  Research and Development Program of China (863) under Grant No. 2013AA01A605.

REFERENCE [1] Jack Goodman. ?Who does the Grocery Shopping, and When  Do They Do It?? The Time Use Institute, 2008 [2] Participatory Sensing: ?Crowdsourcing Data from Mobile  SmartPhones in Urban Spaces? 2011 [3] Kong, D., Gray, D., Tao, H.: ?Counting Pedestrians in crowds  using viewpoint invariant training?. In: British Machine Vision Conference ,2005  [4] Lin, S., Chen, J., Chao, H.: ?Estimation of number of people in crowded scenes using perspective transformation?. IEEE Trans.Syst. Man Cybernet. A, 2001,31 (6), 645?654 .

[5] Reisman, P., Mano, O., Avidan, S., Shashua, A., Ltd, M., Jerusalem, I.: ?Crowd detection in video sequences?. Intell.

Vehicles Symp. IEEE,2004, 66?71.

[6] Huang X., Li L., Sim T. ?Stereo-based human head detection  Processing, 2004. ICIP?04, Vol. 2, pp. 1353?1356  [7] McKenna, S., Jabri, S., Duric, Z., Rosenfeld, A., Wechsler, H.

?Tracking groups of people?.  Comput.Vis. Image Understanding 80 (1), 42?56 ,2000  [8] R. Becker, R. Caceres, K. Hanson, J. Loh, S. Urbanek, A.

Varshavsky, and C. Volinsky. ?A Tale of One City:Using Cellular Network Data for Urban Planning. IEEE Pervasive Computing?, Vol. 10, No. 4,October-December 2011  [9] R. Pulselli, P. Ramono, C. Ratti, and E. Tiezzi. ?Computing urban mobile landscapes through monitoring population density based on cellphone chatting?. Int. J. of Design and Nature and Ecodynamics, 3, 2008.

[10] Quercia, D., Lorenzo, G.D., Calabrese, F., Ratti, C. ?Mobile phones and outdoor advertising: measurable advertising?.

IEEE Pervasive Computing, 2011,28?36.

[11] J. Reades, F. Calabrese, A. Sevtsuk, and C. Ratti. Cellular census: ?Explorations in urban data collection?. IEEE Pervasive Computing , 6, 2007.

[12] F. Calabrese et al., ?Real-Time Urban Monitoring Using Cellphones: A Case-Study in Rome,? SENSEable Working Paper, SENSEable City Laboratory, Massachusetts Inst. of Technology, 2007  [13] F. Calabrese, F. Pereira, G. DiLorenzo, L. Liu, and C. Ratti.

?The geography of taste: analyzing cell-phone mobility and Pervasive Computing, 2010.

[14] S. Reddy, J. Burke, D. Estrin, M. Hansen, and M. Srivastava.

A framework for data quality and feedback in participatory sensing. In Proc. of the 5th Int'l. Conf. on Embedded Networked Sensor Systems, 2007, pages 417-418.

[15] J. Burke et al. Participatory sensing. Workshop on World- Sensor-Web, co-located with ACM SenSys, 2006.

[16] M. Mun, S. Reddy, et al. ?PEIR, the Personal Environmental Impact Report, as a Platform for Participatory Sensing Systems Research?, in Proceedings of ACM MobiSys, Krakow, Poland, June 2009.

[17] R. Rana, C.T. Chou, S. Kanhere, N. Bulusu and W. Hu, ?Ear- Phone: An End-to-End Participatory Urban Noise Mapping System?, in Proceedings of ACM/IEEE IPSN, Stockholm, Sweden, April 2010.

[18] P. Mohan, V. Padmanabhan, R. Ramjee, ?Nericell: Rich Monitoring of Road and Traffic Conditions using Mobile Smartphones?, in Proceedings of ACM SenSys, Raleigh, NC, USA, November 2008.

[19] A. Thiagarajan et al., ?VTrack: Accurate, Energy-Aware Traffic Delay Estimation Using Mobile Phones,? Proc. 7th ACM SenSys, Berkeley, CA, Nov. 2009.

[20] Reddy, S., Shilton, K., Denisov, G., Cenizal, C., Estrin, D.

and Srivastava, M. Biketastic: Sensing and Mapping for Better Biking. CHI ?10, Atlanta, GA, 1817-1820.

[21] E. Miluzzo, N. Lane, K. Fodor, R. Peterson, S. Eisenman, H.

Lu, M. Musolesi, X. Zheng, A. Campbell, ?Sensing Meets Mobile Social Networks: The Design, Implementation and Evaluation of the CenceMe Application?, in Proceedings of ACM SenSys, Raleigh, NC, USA, November 2008.

[22] Y. Dong, S. S. Kanhere, C. T. Chou and N. Bulusu, ?Automatic Collection of Fuel Prices from a Network of Mobile Cameras?, in Proceedings of IEEE DCOSS 2008,  Santorini, Greece, June 2008.

[23] S. Reddy, A. Parker, J. Hyman, J. Burke, D. Estin and M.

Hansen, Image Browsing, Processing and Clustering for Participatory Sensing: Lessons from a DietSense Prototype? in Proceedings of the Workshop on Embedded Networked Sensors (EmNetS), Cork, Ireland, June 2007.

