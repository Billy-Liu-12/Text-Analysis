<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">The 8th

Abstract This paper proposes a method that can discover users? frequent access patterns underlying users? browsing web behaviors. Firstly, the paper introduces the concept of access pattern according to a user?s access path, and secondly puts forward a revised algorithm(FAP-Mining) based on the FP-tree algorithm to mine fiequent access patterns. The new algorithm first constructs a fiequent access pattern tree and then mines users ?frequent access patterns on the tree. What?s more, the algorithm is accurate and scalable for mining frequent access patterns with diferent lengths.

1. Introduction Today Web Mining is one of the popular issues in data mining. Web Mining can be broadly defined as the discovery and analysis of useful information from the World Wide Web. [ I ]  In terms of its research domains, web mining can be divided into three branches: Web Content Mining, Web Structure Mining and Web Usage Mining.

Web content mining describes the discovery of us information from the web content/data/documents.[?] web content encompasses a broad rang of data such as text, image, audio, video-.. . Web structure mining is the process of discovering knowledge from the World Wide Web organization and links across the webs. Web usage mining is the process of extracting interesting patterns or knowledge from various web access log records.

@.

During the process of web usage mining, The rules and patterns in web log records are explored and analyzed mainly by means of these techniques relating to artificial intelligence, data mining, database theory and so on. In general, web usage mining consists of three phases, namely data preprocessing, pattern discovery and pattern analysis, shown in Figure l-lL3]. The main purpose of data preprocessing is to extract useful data from raw web log and then to map these data into the abstract data form necessary for pattern discovery; Pattern discovery finds out various rules and patterns, taking advantage of all sorts of data mining techniques such as statistics analysis, association rule analysis, classification, clustering, and sequential pattern analysis and so on; Pattern analysis filters out the ?useless? rules discovered in the period of pattern discovery, and then extracts the ?interesting? rules and patterns for the end users.

In this paper, mining web access log records discovers different access patterns of different users. In this way, web designers and maintainers can easily improve the link structure of web pages, enhance web server performance and provide characteristic service for customers. For example, corporations that deal with e-commerce can use this method to optimize customer strategy, discover target customers, and let all kinds of customers realize their excellent and characteristic services.

Consequently the mining of the web user access pattern can be applied into many industries widely  Preprocessing Pattern Discovery Pattern Analysis Raw Files Log 7 s e ; ; Z . s F  and Rules, Statistics Patterns ?f?teresting? Patterns and Rules, Statistics Figure 1-1. Web Usage Mining 0-7803-794 1- 1/03/$17.0002003 IEEE. 765 @ This paper is supported by Hefei University of Technology R&amp;D Fund No.

@ This paper is supported by Hefei University of Technology R&amp;D Fund No.

2. Problem Description User access pattern is the concept based on user access path, which is an important sequential pattern in web usage mining. After preprocessing web server log data, we can get user access paths from user session files. F i p 2 - 1 shows the user's(Uidl) browsing path through which Uidl accesses certain web site: A-B-C-D-B-G-E- H-G-C-A-1-K-1-D.

Figure 2-1. the User's(Uid,) Browsing Path The link structure between web pages can be mapped into a directed graph: Sitemap=(N, E). N={pl, p2, ---, p,, ..., p,}(n=1,2;.-) denotes the collection of all pixges of the web site, 1 INI(=n) denotes the number of pages.

E={&lt;pl, p2&gt;, &lt;p4, p7&gt;, .--, &lt;p,, pJ&gt;, -.} denotes the set of all the hyperlinks of all pages of the web site. &lt;p,, pj&gt; denotes that there is a hyperlink from page p, to pJ, i#j, 1 d i ,  j&lt;n Definition 1. 'd x, x,+~ EN(1dibk-1),  &lt;x,, X,+~&gt;E E, the duple AP=(userid, {XI, X2, *.-, XI, "', Xk-1, Xk}) (ka2)is called userid's access pattern.

Example 1.' In Figure 2-1, (Uidl, {A, B, C, D}) is one of the Uidl's access pattern.

The difference between user access pattern definited here and user access path is that access pattern is always the forward reference of access path, whereas user access path includes forward and backward references of web pages. For instance, the access path of page H shown in Figure 2-1 is A-B-C-D-B-G-E-H, whereas the corresponding access pattern is APH=(Uidl, {A, B, G, E, H}). So, it is concluded that access pattern presents users' browsing behavior more simply and clearly than access path and it facilitates the analysis and mining of users' access laws as well.

Definition 2. xE N, that duple AP=(userid, {x}) is called userid's meta-access pattern.

Example 2. In Figure2-1, (Uidl, {A}) is the Uidl's meta-access pattern 030503F.

Definition 3 .  If access pattern AP=(useiid, {xl, x2, -e-, x,, . .e ,  x,}) is known, we say that {xl, x2, - e . ,  x,, e-, &amp;.,, xk}(k&lt;s) is the length-k base of AP.

Example 3. {A, B}, {B, C}, and {C, D} are the length-2 bases of AP=(Uidl, {A, B, C, I)}); {A, B, C} and {B, C, D} are the length-3 bases of Al'=(Uidl, {A, B, c, D}).

Definition 4. 3 APl=(useridl, {xl, x2, * * e ,  x,, --e, xd) and bJ%=(usendz, {YI, YZ, -., Y,, e-, yt-l,  y t } ) ( l d i d s, l G j d t ,  sd t ) ,  iff useridl= userid*, XI= y,, x2= yJ+l, *-, x,= Y,+,-~, e - . ,  x,.~= yJ+s-2, xs= yJh-l, we say that API is the sub-pattern of A p 2 ,  which is denoted as PP1 A P 2 , Definition 5. If access pattern AP=(userid, {xl, x2 *.., xk-I, xk, q}), Definition 6.  If it is known that access pattern say that {he minimal access count among the access counts of all pages contained in AP is the access count of AP, which is denoted as [AP].

Definition 7. If it is known that access pattern SUP*,= bp1 ([Supwend] represents the total number of the access counts of each longest access pattern whose  user-name is ~ser id) . [~] XI, "* ,  &amp;-I, xk})(k=2, 3, *'.) is known, &amp; ?  N, and there doesn't exist (userid, {xl, xz, e . - ,  x,, so AP is ciilled userid's longest access pattern.

AP=(userid, {XI, X2, *", XI, "', Xk-1, Xk})(k=2, 3 ,  "*&gt;, We AP=(userid, {xi, Xz, +*., XI, +", xk-1, Xk})(k=2, 3 ,  *"), bPuscnd 1 Definition 8.

( I ) access pattern AP=(userid {XI, x2, e-., x,. -e-, xk})(k=2, 3, e..), if SupAp&gt;,nun-sup(he threshold of support) and the number of pages contained in AP is 14 we    support) and the number of pages contained in AP is 14 we say that AP is the frequent length-n access pattern. All the sub-patterms of frequent access pattern a ~ e  also frequent access patterns.

( 11) V the longest access pattern AP=(userid, {xl, X2, *'., XI, *", &amp;-I, Xk})(k=2, 3 ,  if sllpApalllin--SUp, we say that AP is the longest frequent access pattern.

This paper emphatically discusses how to mine frequent access patterns that satisfy minimum support (minimum support is the minimal threshold of support defined by experience.). Moreover, it must be indicated that the support of access pattern defined here is dBkrent from the concept of support defined in association rule.

The SUPPOII of association rule represents the relation among those items in the same item set, whereas the support o f  access pattern reflects univenality of certain access pattern in the entire users' browsing behaviors.

Consequeiitly, it is necessary to distinguish between the two similaa concepts.

3. FAP-Ming Algorithm FP-gr~wth[~] is an algorithm with good functionality when it is used in mining association rules and sequential patterns. There is no sequence among those elements of an item during mining association rules, whereas access pattern mining requires sequential page access. Thus the Fp-growth has to be revised before applied to mining user frequent access pattern. In this paper, the new algorithm is called Frequent Access Pattern Mining (FAP-Mining). The FAP-Mining is divided into two steps. Section 3.1 is Step One, which constructs frequent access pattern tree (FAP tree) according to access paths derived from user session files, and records the access counts of each page. Section 3.2 is Step Two, where the function of FAP-growth is used to mine both long and short access patterns on the FAP tree.

3.1. The Construction of FAP-Tree Algorithm: FAP_Tree(tree, p). Construct frequent Input: The set of user access path p.

Output: The set of use access pattern.

Procedure FAP-Tree(T, p); { access tree.

create-tree(T); /Construct the root of FAP-Tree signed with ?null? / while pOnil  do if p.name is the same as the name of T?s ancestor (n) then n.count:=n.count+ 1 ; T:=n; I else c if p m m e  is the same as the name of T?s child(c) then  c. count :=c.count+ 1 ; T:=c; I else insert-tree(T, p); /insert the new node of p into T, as a child of the current node / { p:=p.next; In order to facilitate frequent access pattern generation and FAP tree traversal, a page header table ascending on access counts of each page is built so that each page points to its occurrence in the tree via ,a chain of node-link. Table 3-1 shows an episode of access path of    node-link. Table 3-1 shows an episode of access path of certain user contained in the user session file. According to access paths in Table 3-1, the function of FAP-Tree constructs frequent access tree shown in Figure 3-1.

D: 1 Figure 3-1. FAP Tree Table 3-1. An Episode of U s e r  Access Paths in Users Session Files B Userid Userid Userid Userid I UserName I Sessionblame I Awess Path I s1 s2 A-B-C-D--C-B-E-G-E-C s3 A-B-A-C-I s4 C-1-G-1-K-1-D A -B -.C - D-B - E 3.2. FAP-growth The mining of FAP tree proceeds as follow. At first, according to the access counts of each page-node in FAP tree, the function of FAP-growth generates each length-1 frequent access pattern (as an initial suffix), then constructs its prefix pattern base, and finally builds a longer access pattern by every prefix pattern base connecting with its suffix. If the longer access pattern satisfies the min-sup, it becomes a new frequent access pattern The FAP-growth executes the procedure until all frequent length-1 access patterns have been done. In short, the FAP-growth method transforms the problem of mining long frequent access pattern to searching for shorter ones (as initial s a ixes )  and then concatenating the suffixes.

Algorithm: FAP-gowth(tree, a ), mine frequent access pattern.

Input: FAP tree, min_sup=2(the minimal acces., 4- count that satisfies the support threshold).

Output: the set of all the access patterns: a .

Procedure FAP-growth(tree, a ); { for each a, .count&gt;,min-sup / a, is a member of the page header table. / { ? generate access pattern p = a, ; a:=a U p ; p:=a, .next; /p points to the first location of a, in the FAP tree./ while (pfnull) and (p.countbmin-sup) do {  look for each a, ?s prefix access pattern base, then construct access pattern /3, by a, ?s prefuc access pattern base connecting with itself; if p ,  3 min-sup then a:=a u p , ; p:=p.next; /p points to the next location of ai in the FAP tree./ The mining of the FAP tree shown in Figure 3-1 is summarized in Table 3-2. And for the page-node D i n  the page headler table as an example, we illustrate the mning process of FAP-growth (tree, a ): ( 1 ) 11.count 3 min-sup, generate frequent len@h-l access pattern p =(Userid, {D}), a :=a U p ; ( 2 )  p(=D.next) points to the first location of the page-node: D in the FAP tree that lies in the branch of A- B-C-D; ( 3 )  p.count (=2) 2min_sup, construct the set ofD?s    ( 3 )  p.count (=2) 2min_sup, construct the set ofD?s prefix access patternbase({{C}:3. {B,C}::!, {A,B,C}:3}), then build access pattern ,8, by D?s prefix access pattern base connecting with D. (shown in Figure 3-1). if Suppp, &gt;,min_su]p, ,8, is a frequent access pattern.

( 4 )  p(=p.next) points to the next location of the page-node D in the FAP tree that lies in the branch of 12-1 -D; Because p.count(=l) doesn?t satisf;y the min--sup, the function doesn?t mine t h s  branch. Then the function will do with the next page-node in the page head table after the page-node D have been done.

4. Conclusion The mining of frequent access pattern from user?s browsing web behaviors is worth applying, to many fields such as the design and maintenance of web site, e-commence and education-. The FAP-]Mining method proposed in this paper is feasible by extracting users? access patterns from users? access paths of certain web site.

If being improved, this method would be widely applied to many fields. Next, we will use a large number of data to t e s t e  the functionality of this method, and make further exploration on the analysis of association rule and access pattern among users? browsing behaviors.

G D E Table 3-2. the Mining Result of the FAP Tree I a, I Set of Prefix Access Pattern Base 1 Frequent access pattern generatedwser name omitted) {I {G}:2 { {C}:3, {B,C}:3, {A,B,C}:3} {D}:2, {C,D}:2, {B,C,D}:2, {A,B,C,D}:2 {B}:5, {A,B}:4 {E}:3, {B,E}:3, fA,B,E}:3 I B I A l  {I 1 {A} :4 {C}:l {I}:3 {A}:4 {B}:5, {A,B}:4 C {B}:5, {A,l3}:4 {C}:3, {B,C}:3, {A,B,C}:3 I 5. References [ 11 Robert Cooley, Bamshad Mobasher, and Jaideep Srivastava, ?Web mining: Information and pattern discovery on the World Wide Web?, International discovev on Tools with Artificial Intelligence, Newport Beach, 1997. IEEE, pages 558- 567.

[2]  R. Kosala and H. Blocked, ?Web Mining Research: A Survey?, SIGKDD Explorations, 2(1): 1-15,2000. Page 3 [3] Robert Cooley, Bamshad Mobasher, and Jaideep Srivastava, ?Data Preparation for Mining World Wide Web Browsing Patterns?, Knowledge and Information Systems, I( l), 1999.

Shi Jiansheng, Wu Weiguo, Lu Lina, and Yang %ling, ?Study on Mining User Browsing Patterns in Web Log?, Journal of Xi?an Jiaotong University vo?0135, No 6, June. 2001, Page [4] 611-614 [5] Jiawei Han and Micheline Kamber, Data Mining Concepts and Techniques, Morgan Kaufmann Publishers, Page 239-242,.

