Towards Personalized Ranking in Web Service Selection

Abstract   Web service discovery is one of the most important  problems in implementing Service Oriented Architec- ture. Several approaches have been proposed to solve this problem among which semantic based web service discovery has been attained much importance by re- searchers in academic and industry community. How- ever, there is a challenge in semantic web service dis- covery process, that is, among the retrieved set of se- mantically equivalent web service candidates, how to discern which one is the best? In this paper, a ranking framework is proposed in which query?s context and web service candidate?s context is explored to assist matching beyond semantic level. We use user?s request history and current request to constitute query?s con- text while employing association rule to explore web services candidate?s context. Furthermore, we propose a RC-IRF method to calculate each candidate?s invo- cation possibility in query?s context and then the best suitable potential web service can be selected.

1. Introduction   Web service is a software system designed to sup- port interoperable machine-to-machine interaction over a network [1]. It is able to provide seamless application integration without considering development platform or operating environment, which makes it possible for business process to span technique boundaries. Cur- rently, a increasing number of web services have been advertised in public repository, e.g. Universal Descrip- tion, Discovery, and Integration registry (UDDI) [2], how to locate the proper one with respect to a user?s requirement has then become one of the most essential tasks, which is usually called web service discovery.

Typically, a web service discovery process includes three major steps that are indicated in figure 1. Firstly, providers advertise web services in a public repository by describing its programming interface in a standard  file, i.e. a file written with Web Services Description Language (WSDL) [3]; Secondly, a user submit a re- quest and a service discovery model will be employed to find a set of web service candidates. Finally, the users will invoke one of the retrieved web services.

With the increasing number of registered web ser- vices, it is becoming difficult to efficiently retrieve all possibly matched web service candidates. Furthermore, it is always anticipated that more than one matched candidate will be retrieved. Therefore, how to evaluate and rank the retrieved web service candidates in re- sponse to users? requirement is also an essential task. A lot of efforts have been attained in solving web service discovery problem among which semantic based ap- proaches has become one of the most important me- thods, e.g. DAML-S [4], WSDL-S [5], WSML [6], OWL-S [7]. These approaches try to understand the meaning of WSDL file and then retrieve a set of web services candidates, which are normally called seman- tically equivalent web service candidates.

Adding semantic information into web service dis- covery can alleviate semantic heterogeneities in mat- chmaking process, but it is not enough to study only the semantic information when ranking the retrieved set of web service candidates. Among the set of re- trieved semantically equivalent web service candidates, how to rank them with respect to user?s personal re- quirement? To answer this question, it is apparent that  Registry  User Provider  UDDI  Figure 1. Web service discovery protocol  Request Advertisement  Invocation   DOI 10.1109/ICEBE.2008.106    DOI 10.1109/ICEBE.2008.106     besides semantic information, other context informa- tion, e.g. user?s intention, involved business process and etc., needs to be taken into account. It is necessary to explore user, provider and the relationship between them further.

Unfortunately, these kinds of information would not be easily captured explicitly. We believe that the rea- sons are 1) limited information in provider?s side. Ac- cording to [8], average size of nearly 74% WSDL file are less than 10K and 67% WSDL files have less than 50 description words. With such limited information, it is impossible to explore more background informa- tion about the provider such as the domain informa- tion or involved processes; 2) limited information in user side. Normally only several keywords are pro- vided to express user?s needs. Some useful informa- tion such as user?s preference is lost during the inten- tional abstract; 3) pragmatic heterogeneities [9]. Web service users and providers have different way to im- plement domain specific process even they hold simi- lar terminology. They could hold different intentions with similar semantic expression; and 4) insufficient communication between user and provider. Currently web service discovery model assumes the user and provider are independent and employs broker me- chanism for advertising and querying web services.

To solve these problems, we try to constitute query and web service candidate?s context and further com- pare query and candidates by considering their context to facilitate the ranking process. It is believed by em- ploying context, we can get more information beneath the query terms from user and web service candidate?s capability beneath the WSDL file from provider.

It has been found that in real applications it is often when a business calls for a certain service but no single web service can fulfill the requirement, which leads to the need of services composition. From this viewpoint, most retrieved web service will join certain composi- tion processes. We can therefore claim that the web service discovery serves for the web service composi- tion. But if we look the process conversely, we can also argue the web service composition process may provide useful information for web service discovery.

Inspired by this thought, we try to define context from web service composition perspective. We will use mining technique to find associated web services re- lated to the query and the web service candidate. With such information, it is possible to find some more use- ful information beneath the semantic level.

The rest of this paper is organized as follows. Sec- tion 2 introduces background information about web service ranking. Section 3 discusses the possibility of building context for intention capturing. In section 4 and 5, how to query?s context and web service candi- date?s context are depicted. Section 6 illustrates the  proposed ranking mechanism and an example is elabo- rated in section 7. In section 8, the whole ranking framework is described. Section 9 gives conclusion and discusses the future work.

2. Background   As discussed in previous section, one of the essen-  tial tasks in web service discovery is web service rank- ing. Actually, as indicated by [10], the most challeng- ing issue in web service discovery is not the mat- chmaking process but the selection of a good service for certain user. Traditional semantic web service dis- covery is not powerful in ranking retrieved web servic- es and the inability including:  1) Low granularity of semantic similarity degree.

For example, in [11], a discovery method based on DAML-S is proposed to match the web services. The similarity degree consists of exact, plug in, subsumes and fail. In [12], a discovery model based on OWL-S only categorizes similarity degree into exact match, plug-in match, subsumes match, subsumes-by match, logic-based fail, Nearest-neighbor match and fail. Low granularity of similarity degree is easy for retrieving potential matched web service candidates, but it is in- convenient for ranking and selection of the most suita- ble web service.

2) Incapability of dealing with context information.

As discussed before, traditional semantic web service discovery methods are not capable of incorporating context into web service selection process.

Considerable approaches have been proposed in the community to add context into web service discovery, which is normally called context-aware web service discovery. However, since context is a broad concept, it is infeasible to discuss the general context in web service discovery. We believe context is too compli- cated to be modeled properly for all applications in one way. Context awareness in web service discovery should be domain oriented and problem oriented.

Anind K. Dey formally gives following definition of context: Context is any information that can be used to characterize the situation of an entity. An entity is a person, place, or object that is considered relevant to the interaction between a user and an application, in- cluding the user and applications themselves [13]. He further points out that one of the important features of context awareness is the ability to predict and capture user intention, which is the main research issue in this study.

Most context aware web service discovery ap- proaches use the physical attributes to define context and then propose several different methods, such as QoS aware discovery [14], location and time aware     discovery [15][16] and other related applications. Here we will mainly study how to capture implicit intention for ranking the retrieved set of web service candidates.

The intuitive thought is to divide web services into different groups [17]. This approach is based on the assumption that users from similar domain background are normally looking for similar web services. This proposed model is good at improving matchmaking throughout. However, domain information is not easy to be modeled in advance and the providers may not familiar with the classification definition.

User?s past experience is very strong indicative in- formation for user?s preference and domain back- ground. [18] utilize this kind of information and keep log for user-system interaction. By studying the log information the proposed model can help recommend the selection decision. Unlike the explicit classification of intention in [17], this approach tries to implicitly explore the user?s intention.

Considering user?s query terms for web service dis- covery reflects user?s intention directly. Exploring keywords will be helpful in capturing user?s real goal.

[19] propose an intention abstraction method to under- stand user?s real need and make the imprecise intention more clear, by which the selected web service provider will be more suitable for user?s requirement.

These above methods mainly study the intention from user?s side. Providers are also important part of web service ranking. If we can understand more back- ground about web service providers, it will be definite- ly help the personalized ranking process. [10] propose an agent based web service selection model in which agent are employed to rate each web services. When a new query comes, the agent will help each other based on their understanding of providers.

Inspired by these methods, we propose a persona- lized ranking mechanism, which will consider how to constitute query?s context to understand user?s inten- tion, how to constitute web service candidate?s context to get more background about provider and how to utilize the context for ranking.

3. Context for intention abstraction   Firstly, we need to understand what is context and its importance for user and provider?s intention capture in web service based applications.

We believe that while semantics deals with the meaning of the signs used, we should also focus on the examination of the intended purposes and effects of communication. The interpretation and understanding of the intended meaning will depend on the actors in- volved in the communication, actors? background knowledge, or the context. Most of them are subjec-  tively substantiated by the actors involved and deter- mined at the ?run-time? only. The context is constantly and dynamically formed, deformed, configured and re- configured. Context and intentions are therefore essen- tial to the performance and understanding communica- tion and information exchanged.

Generally, the relationship between intention and context can be interpreted by figure 2, where I1, I2, I3?Im reflect the intentions. Normally intentions are informal and difficult to be modeled. To formalize intentions, I1, I2, I3?Im will be abstracted to a set of output O1, O2, O3?On, which is formalized and ma- chine-readable. During the process, some useful infor- mation will be lost either explicitly or implicitly. This is because the user may not the expert in dealing with information abstraction. Furthermore, the real world cannot always be formally modeled and abstracted.

Therefore, if context information is available when dealing with outputs, it will be helpful to recover the real meaning that input represents.

In web service discovery process, the input will be the real need of the query and real capacity each web service candidate can provide. The output is the query terms and WSDL file, respectively. From user?s pers- pective, users will normally only submit several key- words. The context will be used to understand the real intention beneath these keywords. On the point of view of providers, the WSDL file though includes more in- formation than just keywords, it is still necessary to understand web service candidate?s context to capture provider?s suitability.

However, the difficulty is how to define such con- text. A possible approach is to list all related parame- ters, such as domain, actor, plan and etc. Enumeration of context attributes is easy to be implemented but it is tedious and cannot be easily defined in advance. In this study, we define query?s context and candidate?s con- text from web service dependency perspective.

4. Query?s context   To understand a certain query?s intention, it is vital to understand more background information about that  Processor I1, I2, I3?Im O1, O2, O3?On  Context  Figure 2. Context for information processing     user. That background information can be considered as query?s context.

As discussed before, query?s context is too compli- cated to be modeled properly or enumerated. In infor- mation retrieval (IR) applications, some approaches use user?s search history to predict user?s intention. In web service discovery area, [17] also point out similar thought and try to record user-system interaction in- formation. Inspired by those works, we propose a user context model in which the user?s query history infor- mation is explored to indicate the query?s potential intention.

Though history information reflects user?s back- ground and it is indicative in predicting user?s intention, we should also attain the importance on the current composition process where the querying web service is going to join because the current composition is also strongly indicative to understand query?s real require- ment to some extent. Therefore, we need to clarify the query?s context into two categories respectively: long- term context and short-term context. Long-term con- text is obtained to investigate user?s previous composi- tion history and short-term context is gotten from the study of the recent sessions.

To define user?s long-term context, let T be a web service composition transaction, which consists of a sequence of invoked web services, and define T = {S1, S2, S3?Sm}, where Si represents the ith web service invoked in T. After explore the previous N transactions the user implemented, we will get the log information database L = {T1, T2, T3, ?,Tn}. Now we can define us- er?s long-term context as: Cql = {S1, S2, S3?Sk}, in  which each web service Si satisfies >|| ||  L Si ? and |Si|  represents the number of occurrence of Si in L and |L| represents the overall number of occurrence of all web services in the L. ?is a threshold of frequency of the occurrence of a certain web service and can be ob- tained empirically.

Considering the importance of the current composi- tion the user is joining, here we define short-term user context Cqs = {S1, S2, S3,?, Sp}, where Si?S? and S? is the web service user who is querying.

After considering these two kinds of user context, we can refine the general user context as Cq = Cql? Cqs.

Employing long-term and short-term context is able to not only reflect user most frequent accessed web ser- vices but also recent accessed web services.

5. Web service candidate?s context   In the current web service discovery protocol, web service providers just advertise their web service in  public repository and afterwards they can only wait for invocation by users passively. The only source for user to study it is the standard file containing description of its capability. However, the description file does not contain rich information about the provider?s back- ground and its intention. Furthermore, the web service is advertised in advance, it has no chance to know the run-time information later on when it is invoked and joined into a composition process.

Our approach to constitute context information for web service candidate is based on the finding that there always exists some dependency among web services in a web service composition process to some extent.

That means in a certain composition transaction, if one web service Si is invoked, the other web service Sj will be also probably invoked. Some works have reported this finding and elaborated usage of dependency in web service discovery and composition applications.

For example, [20] argues there are service pattern in web service application and propose a mechanism to capture the patterns. [21] proposes a tool to discovery web service dependency.

It is believed if we investigate a certain set of com- position transactions, we cam find some similar rela- tionship among web services and use such dependency to describe web service candidate?s context.

In this study, association rule is employed to find dependency among web services in the repository. The following is a brief introduction of association rule.

Association rule is one of the most important tech- niques in the domain of data mining. It is mainly used to discover the correlations among objects in large- scale data collection [22][23][24].

Association rules are statements of the form A->B, where A ? I?B ? I, A? B?? , where I = (I1, I2, . . . In) is item set in the data collection. It means that if we find all items in item set A, then we have a good chance of finding the items of B. Then, given any association rule, its support and confidence should be above cer- tain thresholds.

The support of association rule A->B means the frequency of the rule and is defined as follows:  n BABAP ||)(B)(A-support ?? ==>  (1)  where || BA? represents the number of transac- tions containing not only items in A but also items in B?n is the number of all transactions in the data col- lection.

The confidence describes the probability of finding B on the condition of A. It reflects the association de- gree between A and B and is defined as:  || |||confidence  A BA)AB(PB)(A- ?==>  (2)     In the task of web service discovery, it is considered that different web services are not independent to each other. The implicit associations always happen among different web services and reflect the most optimal composition of different web services.

This paper adopts the most classic Apriori algo- rithm [33] to identify all useful association rules. The process can be divided into the following four steps:  1. Prepare a training database D, which consists of a certain number of composition transactions imple- mented with web services in the repository. Thus, D is defined as D = {T1, T2, T3, ?, Tm}. Each Ti contains a set of web services invoked in that transaction and Ti = {S1, S2, S3?Sk}, where Si is a web service invoked in that composition transaction. Therefore, we can get a web service set S including all web services invoked in all composition transactions;  2. Apply the mining Algorithm on D for frequent patterns based on prefix tree to obtain all the frequent web service sets [25];  3. Apply Apriori algorithm to find all the associa- tion rules based on the frequent web service sets;  4. Select the special association rules and construct the collection AR = {R1, R2?Rt}, where each associa- tion rule Ri is formed as Si->Sj, Si, Sj?S.

Therefore, we can define Sk, a given web service candidate?s context as Csk = {S1, S2, S3?Sm}, where confidence(Si -> Sk) > ?and Si ?S.

6. Ranking mechanism   In this section, we will illustrate our proposed rank-  ing mechanism. As discussed in previous section, in a typical web service discovery process, given a query Q, a set of semantically equivalent web service candidates will be retrieved. To rank them for a personalized se- lection, the problem now has become to how to eva- luate the relevance between Q and each web service candidate Sk beyond the semantic level.

By using expanding technique discussed before, the query?s context and web service candidate?s context can be constituted. Query context Cq can strengthen the expression of the user?s real need. Expanding context CSk for web service candidate Sk can predict the candi- date?s real capability. After obtaining the context in- formation, we will study context relevance from two different perspectives, namely 1) the relationship be- tween Sk and context Cq, and 2) the relationship be- tween CSk and all other web service included in S.

Firstly, after having identified query context Cq, the relevance between web service candidate Sk and the query Q can be further evaluated by the relevance be- tween Sk and Cq. As mentioned above, Sk is one of the web service candidates that satisfy the query semanti-  cally. Given a query context Cq = {S1, S2, S3,?, Sm}, the relevance between Sk and Cq can be therefore con- sidered according to the internal relationships between web services Sk and S1, S2, S3,?, Sm. Clearly, this kind of relationships among web services will be obtained from the result of mining association rule during the process of constituting web service candidate?s context.

Secondly, we need to study the associations be- tween Sk and all web services in S, which will tell the relationship of Sk to all other web services in S.

In fact, this two-perspective relevance approach is inspired by the idea of TF-IDF [26], which is widely applied to information retrieval to measure the relev- ance of term to document. In the definition of TF-IDF, TF describes the frequency of term Term in document Doc, while IDF describes the distribution of Term in the whole document collection. It is clearly that the more frequency of Term in Doc, the more importance of Term to Doc. However, the more even distribution of T in the whole document collection, the less impor- tance of Term to Doc. By considering a term from these two perspectives, TF-IDF can filter the common terms and retain the most important term. Please refer to [29] for more information about TF-IDF.

In our case, relevance between Sk and Cq also can be considered from similar TF-IDF perspective. What the difference is that we utilize association rules be- tween web services to evaluate the importance of the web service candidate Sk to the query context Cq.

According to the idea above, relevance between Sk and Cq can be measured by evaluating the association rules existing between Sk and web services in Cq. The more association rules, the more closeness of Sk to Cq.

Although association rules between Sk and Cq reflect the closeness of Sk to Cq to some degree, the other fac- tor should also be considered to verify this closeness more deeply. This factor reflects the scenario of asso- ciation rules between Sk and all web services S. The   Sk    R IR         Query  Context  Si  Si+1  Si+2  Si+3  Si+s  Figure 3. RC-IRF Model     more association rules exist between Sk and S, the less closeness of Sk to Cq should be considered. Formally, the relevance between Sk and Cq can be described as:  IRFRC)CS( qk *,R =  (3) As shown in Figure 3, RC is to measure the close-  ness of Sk to Cq according to the association rules ex- isting between Sk and web services in Cq. RC can be finally defined as:  )SS(RC qi CS  ki? ?  ?= confidence  (4)  where confidence(Si->Sk) is defined as the confi- dence of association rule Si->Sk. In the case that there is no association rule between Si and Sk, confidence (Si->Sk) is then valued zero.

IRF is to verify the closeness of Sk to Cq by consi- dering the association rules between Sk and web ser- vices in S. IRF is defined as:  50)ARS( 1tIRF  k .,num log  + +=  (5)  where t is number of association rules in collection AR, num(Sk, AR) is the number of association rules in AR, each of which satisfies the form of Si->Sk.

7. Illustration example   In this section, we will use an example to elaborate  how to calculate RC*IRF for personal ranking with context and discuss how RC-IRF works.

We suppose when a user submits a query Q, three semantically equivalent web services candidates are selected, Sk, Sm, and Sp, respectively. Let supposed query?s context Cq = {S1, S2, S3, S4}, where Si? S.

After using association rule method, N association rules have been mining and some association rules are list in table 2.

Furthermore, we suppose the number of association rules satisfying confidence(Si->Sk) > ?is 32, namely num(Sk, AR)=32, similarly,  we suppose num(Sm, AR)=16 and num (Sp, AR)=8, where AR is the collec- tion of all association rules in S.

According to the ranking mechanism proposed in section 6 and formula 4, when Cq = {S1, S2, S3, S4}, then the RCk = 0.20, RCm=0.15 and RCp=0.10. Ob- viously, Sk is closer with query in Cq than other two candidates from RC perspective.

However, we also need consider IRF to evaluate each candidate?s weight in S. Since IRF is related to the whole number of association rule existing N in S, then we set N=500, 300, 100, respectively for illustra- tion. By using formula 5 and 3, we can get the each set of IRF and corresponding RC, as list in table 3, 4 and 5.

From these three tables, it is found that when N=500, Sk is better than Sm and Sp. When N=300, though Sk is still better than Sm and Sp, they are more less the same. When N=100, Sp becomes the best. It is learned that when N is becoming larger, or the distribu- tion of candidate?s context is becoming even, IRF will be becoming less indicative but RC is becoming more and more important. Conversely, if candidate?s context has more influence in S, IRF will become more strong- ly indicative in ranking process.

Table 2. Part of association rules in S  rule confidence S1->Sk 0.08 S2->Sk 0.06 S3->Sk 0.04 S4->Sk 0.02  S1->Sm 0.08 S2->Sm 0.06 S3->Sm 0.01 S4->Sm -  S1->Sp 0.06 S2->Sp 0.04 S3->Sp - S4->Sp -   Table 3. N=500  RC IRF RC*IRF SK 0.20 1.187 0.237 Sm 0.15 1.482 0.222 Sp 0.10 2.047 0.205   Table 4. N=300  RC IRF RC*IRF SK 0.20 0.967 0.193 Sm 0.15 1.261 0.189 Sp 0.10 1.825 0.182   Table 5. N=100  RC IRF RC*IRF SK 0.20 0.492 0.098 Sm 0.15 0.787 0.118 Sp 0.10 1.351 0.135   8. Personalized selection framework   The proposed personalized ranking framework is  depicted as figure 4. The whole personal web service selection process consists of a web service query re- quest submitted by user (1); Afterward, by using the query context constitution method illustrated in section     4, through considering recent composition request (2) and past experience (3), the query context will be gen- erated via (5); At the same time, (4) the query will be sent to a semantic web service discovery model, which will be (6) return a set of semantically equivalent web service candidates. By (7), (9) calculating the RC and (8), (10) the IRF value for each candidate Si, we can compare RC*IRF value for each candidate Si and re- turn the maximum one.

9. Conclusions and future work   Web service discovery is one of the fundamental problems in web service based applications. A lot of efforts have been attained in this problem among them semantic based web service discovery methods has shown encouraging performance. However, after re-  trieving a set of semantically equivalent web service candidates, which one is the best suitable with respect to user?s requirements is a potential challenge. In this paper, we studied the possibility of employing context awareness into web service discovery process. A rank- ing mechanism is proposed to build context for query and web service candidate and then to capture user?s real need and the web service candidate?s real capabili- ty to some extent.

In this paper, we try to expand the simple query with user?s history query log and the current query circumstance to constitute query?s context. By employ- ing Association Rule we try to find dependencies among web services in the repository based on which web service candidate?s context can be built. After getting context information for both sides, we propose a RC-IRF method, which is inspired by TF-IDF me- thod in traditional Information Retrieval (IR), to calcu- late each candidate?s invocation possibility. A frame- work is proposed to illustrate our approach and it is believed it will help to alleviate the confusion for users in selecting the right web service during the web ser- vice discovery.

The advantages of our proposal are obvious. Firstly, this method does not ask enumeration of context attributes in advance. Secondly, it is automatic and does not rely on user?s heavy involvement. Thirdly, theoretically, if the web service collection, or training dataset for association rule mining, is big enough, it will sufficiently reflect the query?s real intention and candidate?s real capacity. Finally, our proposal consid- ers discovery from both sides of the query and the can- didate and also considers the relationship between them from past experience.

There are more works worthy exploring further in the future. In this paper, when association rule are em- ployed to find dependency among web services, we only consider one-to-one dependency like Si->Sj. This assumption is to simply the problem in the early stage.

However, dependency also exists between more than two web services, such as (Si,?Sj)->Sk. In the future, it is worthy to explore how such dependency can facili- tate the ranking process among semantically equivalent web services.

10. References  [1] H. Haas, and A. Brown, ??Web Services Glossary??, W3C Working Group Note 11, http://www.w3.org/TR/ws-gloss/.

[2] UDDI, ??The UDDI Technical White Paper??, http://www.uddi.org/pubs/Iru_UDDI_Technical_White_Pape r.pdf.

[3] E. Christensen, F. Curbera, G. Meredith, and S. Weera-  Figure 4. Personalized Ranking Framework  Composition Process Log  Query Semantic web  service discovery  S1  S2  S3  Sn  ?  Sem antically Equivalent  Query Context  RC  Web Service  Collection  IRF  RC1 RC2 RC3 .

RCn  IRF1 IRF2 IRF3 .

IRFn  Max (RCi * IRFi)  Ranking  2 3     7  8  9 10     warana, ?Web Services Description Language (WSDL) 1.1?, W3C Note, 2001.

[4] A. Ankolekar, M. Burstein, J. Hobbs, O. Lassila, D. Mar- tin, D. McDermott, S. McIlraith, S. Narayanan, M. Paolucci, T. Payne, and K. Sycara, ??DAML-S: Web Service Descrip- tion for the Semantic Web??, In Proceedings of 1st Interna- tional Semantic Web Conference, Italy, 2002, pp. 348-363.

[5] W3C, ??Web Services Semantics --- WSDL-S??, http://www.w3.org/Submission/WSDL-S/  [6] J. de Bruijn, Holger Lausen, A. Polleres, and D. Fensel, ??The Web Service Modeling Language WSML: An Over- view??, In Proceedings of 3rd European Semantic Web Confe- rence, Budva, Montenegro, 2006, pp. 590-604.

[7] D. Martin, M. Paolucci, S. McIlraith, M. Burstein, D.

McDermott, D. McGuinness, B. Parsia, T. Payne, M. Sabou, M. Solanki, N. Srinivasan, and K. Sycara, ??Bringing Seman- tics to Web Services: The OWL-S Approach??, In Proceed- ings of 1st International Workshop on Semantic Web Services and Web Process Composition, USA, 2004, pp. 26-42.

[8] Y. Li, Y. Liu, L. Zhang, G. Li, B. Xie, and J. Sun, ??An Exploratory Study of Web Services on the Internet??, In Pro- Services, Utah, USA, 2007, pp. 380-387.

[9] S. Overhage, ??On Specifying Web Services Using UD- DI Improvements??, In Proceedings of 2002 Net.Objectdays Workshops, Germany 2002, pp. 535-550.

[10] R. Sreenath, and M. Singh, ?Agent-based service selec- tion?, Journal of Web Semantics, vol. 1, no. 3, 2004, pp. 261- 279.

[11] M. Paolucci, T. Kawamura, T. Payne, and K. Sycara, ?Semantic Matching of Web Services Capabilities?, In Pro- ceedings of 1st International Semantic Web Conference, Sardinia, Italy, 2002, pp. 333-347.

[12] M. Klusch, B. Fries, and K. Sycara, ?Automated Seman- tic Web Service Discovery with OWLS-MX?, In Proceed- ings of the 5th International Joint Conference on Autonom- ous Agents and Multiagent Systems, Japan, 2006, pp. 915- 922.

[13] A. Dey, ?Understanding and Using Context?, Personal and Ubiquitous Computing, Vol. 5. No. 1, 2001, pp. 4-7.

[14] S. Ran, ?A model for web services discovery with QoS?, ACM SIGecom Exchanges, vol. 4, no. 1, 2003, pp. 1-10.

[15] Z. Maamar, G. AlKhatib, S. Most?faoui, M. Lahkim,  and W. Mansoor, ??Context-based Personalization of Web Services Composition and Provisioning??, In Proceedings of 30th EUROMICRO Conference, France, 2004, pp. 396-403.

[16] Q. Sheng, B. Benatallah, Z. Maamar, M. Dumas, and A.

Ngu, ?Enabling Personalized Composition and Adaptive Provisioning of Web Services?, In Proceedings of 16th In- ternational Conference on Advanced Information Systems Engineering, Riga, Latvia, 2004, pp. 322-337.

[17] D. Rocco, J. Caverlee, L. Liu, and T. Critchlow, ?Do- main-specific Web Service Discovery with Service Class Descriptions?, In Proceedings of 2005 IEEE International Conference on Web Services, USA, 2005, pp. 481-488.

[18] N. Kokash, A. Birukou, and V. D?Andrea, ?Web Service Discovery Based on Past User Experience?, In Proceedings Systems, Poznan, Poland, 2007, pp. 95-107.

[19] C. Lee, A. Liu, ?Toward Intention Aware Semantic Web Service Systems?, In Proceedings of 2005 IEEE International Conference on Services Computing, USA, 2005, pp. 69-76.

[20] Q. Liang, J. Chung, S. Miller, and Y. Ouyang, ?Service Pattern Discovery of Web Service Mining in Web Service Registry-Repository?, In Proceedings of 2006 IEEE Interna- tional Conference on e-Business Engineering, Shanghai, China, 2006, pp. 286-293.

[21] S. Basu, F. Casati, and F. Daniel, ?Web Service Depen- dency Discovery Tool for SOA Management?, In Proceed- Computing, Utah, USA, 2007, pp. 684-685.

[22] R. Agrawal, and R. Srikant, ?Fast algorithms for mining association rules?, In Proceedings of the 20th International Conference on Very Large Data Bases, 1994, pp. 487-499.

[23] J. Hipp, U. Guntzer, and G. Nakhaeizadeh, ?Algorithms for association rule mining: a general survey and compari- son?, SIGKDD Explorations, Vol. 2, No. 1, 2000, pp. 58-64.

[24] C. Zhang, and S. Zhang, S, ?Association Rule Mining Models and Algorithms?, Springer-Verlag, 2002.

[25] G. Grahne, and J. Zhu, ?Efficiently using prefix-trees in mining frequent itemsets?, In Proceedings of 1st Workshop on Frequent Itemset Mining Implementation, USA, 2003.

[26] G. Salton, and C. Buckley, ?Term-weighting approach- es in automatic text retrieval?, Information Processing & Management, Vol., No. 5, 1988, pp. 513?523.

