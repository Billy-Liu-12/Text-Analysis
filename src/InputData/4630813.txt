Comparative Association Rules Mining using Genetic Network

Abstract? In this paper, we present a method of comparative association rules mining using Genetic Network Programming (GNP) with attributes accumulation mechanism in order to uncover association rules between different datasets. GNP is an evolutionary approach which can evolve itself and find the optimal solutions. The motivation of the comparative association rules mining method is to use the data mining approach to check two or more databases instead of one, so as to find the hidden relations among them. The proposed method measures the importance of association rules by using the absolute difference of confidences among different databases and can get a number of interesting rules. Association rules obtained by comparison can help us to find and analyze the explicit and implicit patterns among a large amount of data. For the large attributes case, the calculation is very time-consuming, when the conventional GNP based data mining is used. So, we have proposed an attribute accumulation mechanism to improve the performance.

Then, the comparative association rules mining using GNP has been applied to a complicated traffic system. By mining and analyzing the rules under different traffic situations, it was found that we can get interesting information of the traffic system.



I. INTRODUCTION  Nowadays, traffic navigation systems are widely used in  the car society. The traffic flow prediction plays an im-  portant role to improve the performance of the navigation  system. There are many ways to do the prediction, such as  mathematic models, neural networks, etc. Data mining is an  effective approach to do the prediction.

Data mining[1,2] is a commonly used technique to help  people to uncover hidden patterns over a large amount of the  data, for instance, in business management and forecasting  fields. Association rules mining is one way to find out  interesting information from databases. An association rule  has the form of (X ? Y ), where X represents antecedent and Y represents consequent. The association rule ?X ? Y ? can be translated as ?database transactions indicating X are  likely to satisfy Y ?. For example, association rule mining  is used to discover elements that occur together frequently  in a database. Many data mining algorithms have been  recently developed which greatly facilitate the processing  and interpreting of databases. The most popular model for  us to mining association rules is Apriori algorithm[3]. This  model measures the importance of association rules with two  factors: support and confidence.

Association rules mining using Genetic Network Program-  ming(GNP)[4] is one of the effective methods which use  evolutionary approach to do the information digging. In this  paper, we extend the conventional association rules mining  using GNP for the purpose of obtaining the association  rules among related but, different databases, i.e., comparative  association rules.

Databases under different conditions may infer some ex-  plicit or implicit patterns which could be very useful for some  applications like prediction. Sometimes, the patterns are easy  to find out, but in some complex situations, or when there  are a lot of data in the databases, we can not intuitively find  out those patterns or rules. Therefore, a new method to find  out these rules is proposed by extending association rules  mining using GNP in such way that the different databases  are compared in terms of support and confidence. And we  use GNP data mining method with attributes accumulation  mechanism to improve the performance of the comparative  association rules mining.



II. GENETIC NETWORK PROGRAMMING (GNP)  The basic structure (phenotype) of GNP[5] is shown in  Fig.1. GNP is composed of three kinds of nodes: a start  node, judgment nodes and processing nodes. Judgment nodes  correspond nearly to elementary functions of Genetic Pro-  gramming (GP). Judgment nodes are the set of J1, J2, . . . ,  Jn, which work as if-then type decision making functions.

On the other hand, processing nodes are the set of P1, P2, . . . ,  Pm, which work as some kind of action/processing functions.

The practical roles of these nodes are predefined and stored in  the library by supervisors. Once GNP is booted up, firstly the  execution starts from a start node; secondly the next node to  be executed is determined according to the connection from  the current activated node or the judgment result in judgment  nodes.

The genotype expression of GNP node is shown in Fig.2,  which describes the gene of node i. The set of these genes  represents the genotype of GNP individuals. The genotype  decides the phenotype of GNP. NTi describes the node type,  NTi = 0 when node i is start node, NTi = 1 when node i  is judgment node and NTi = 2 when node i is processing  node. IDi is an identification number, for example, NTi =  1 and IDi = 1 mean node i is J1. Ci1, Ci2, . . . denote the  nodes which are connected from node i firstly, secondly, . . . ,  and so on depending on the arguments of node i. di and dij are the delay time. They are the time required to execute  the processing of node and delay time from node i to node      Cij , respectively. All programs in a population have the same  number of nodes.

GNP has three kinds of basic operations: selection,  crossover and mutation. Using the above operations for  evolution we can obtain the optimized solutions.

Fig. 1. GNP phenotype  Fig. 2. Gene structure of node i in GNP.

Conventional GNP with association rules mining[4,6] has  two kinds of nodes: judgment nodes and processing nodes.

Association rules are represented as the connections of the  judgment nodes. Processing nodes are used to measure the  importance of association rules.

Fig. 3. GNP with association rules mining

III. COMPARATIVE ASSOCIATION RULES MINING USING  GNP WITH ATTRIBUTES ACCUMULATION MECHANISM  Comparative association rules mining is an approach  where association rules mining is done by comparing the  support and confidence of the same rules between different  databases under different conditions. The flowchart is shown  in Fig. 4.

Fig. 4. Flowchart of comparative association rules mining  A. Association rules mining  Association rules are like:X ? Y . This kind of rules mean: if we can find X in the database we are inclined to  find Y . We extend the conventional GNP based association  rules mining in order to do the comparative association rules  mining. The following is a formal statement of the problem  of mining association rules.

There are three steps to do the conventional association  rules mining: first, to use GNP to generate the candidate  rules; secondly, to examine the candidate rules for all of the  databases and calculate the measurements of the candidate  rules; thirdly, evaluate the rules and obtain important rules by  the measurements, such as chi-squared value, support value,  confidence value, etc.

GNP examines the attribute values of databases using judg-  ment nodes and calculates the measurements of association  rules using processing nodes (see Fig. 3). Judgment node  determines the next node by a judgment result of Yes or  No, and has Yes-side and No-side. Yes-side of the judgment  node is connected to another judgment node. Judgment nodes  can be reused and shared with some other association rules  because of GNP?s feature. As a result, candidates of rules  are obtained effectively.

Each processing node has its own number and is connected  to a judgment node. Examinations of attribute values start  at each processing node. No-side of the judgment node is  connected to the next numbered processing node.

More exactly, if the examination of attribute values from  the last processing node Ps ends, then GNP examines the  next tuple. Thus, all tuples in the database are examined.

When the examination ends, then we can obtain the  measurements of the rules as follows. The total number  2008 IEEE Congress on Evolutionary Computation (CEC 2008) 293    of tuples moving to Yes-side at each judgment node is  calculated for every processing node, which is a starting point  for calculating association rules. In Fig. 3, a, b, c and d are  the numbers of tuples moving to Yes-sider at each judgment  node. On the other hand, N is the number of total tuples.

As a result, we can get the following association rules by  checking the database of cars? movement, for example:  link ? ? link ? ? link ? ? link ?.

B. Comparative association rules mining  The point of the extended GNP-based data mining method  is to check two databases of class p and class q at the same  time.

Then we can get data shown in Fig.5, where the suffix  of a, b, c, d and N indicates the class p and class q of  the databases, respectively. We use the absolute value of  the difference of the confidence of two databases as the  measurement to judge the important rules.

Then, we can get the rules like link ?? link ? ? link ? ? link ? which means the possibility that ? the cars which passed the link ? and link ? would pass link ? and  link ?? is different among different classes, i.e., class p and  class q. Changing the position of P1 from ? to ? in Fig.5  is for calculating support ?, ? ? ?, ? ? ? ? ? and so on.

Fig. 5. GNP with comparative association rules mining  C. GNP data mining with attributes accumulation mecha-  nism  For the case of a lot of attributes, the totally random  search among the large databases is inefficient and may cause  early convergence, especially, when the rules are discrete  and the total number of the rules is relatively small. That?s  the reason we extended the conventional GNP based mining  method to the GNP based data mining method with attributes  accumulation mechanism.

The basic idea is based on the division of the large  attributes into small ones. Firstly, for a round, we generate a  sub attribute set from the total attribute set. Then, we do the  GNP based data mining using the sub attribute set and we can  obtain important association rules and store them in the Small  Rules Pool(SRP) for the round. After that, the rules in SRP  are stored in the Big Rule Pool(BRP). Then, we calculate the  frequency of each attribute in the generated rules and select  the best twenty percent of the frequently appeared attributes  and move them to the sub attribute set for the next round.

The remaining eighty percent of the attributes are selected  randomly from the large attribute set.(see Fig. 6)  As a result, GNP individual can accumulate better at-  tributes in it gradually round by round.

Fig. 6. Flow of the GNP based data mining with attribute accumulation mechanism  D. Genetic operations for comparative association rules  Fitness function is as follows:  fitness = ? r?R  [| confpq(r) | +10 ? Length(r) + ?new],  where,  R: set of suffixes of extracted important association rules;  confpq(r)=conf(r, p)-conf(r, q); conf(r, p) is confidence of rule r in class p conf(r, q) is confidence of rule r in class q Length(r)= anteLength(r)+conLength(r) anteLength(r) is the length of antecedent of rule r conLength(r) is the length of consequent of rule r  ?new =  { ?, the rule is new  0, otherwise confpq(r), Length(r) and ?new are concerned with the  importance, complexity and novelty of the rule, respectively.

Crossover and mutations are carried out in the same way  as the conventional GNP-based data mining. Crossover we  used is the uniform crossover. Judgment nodes are selected as  crossover nodes with the probability of Pc. Parents exchange  the gene of the corresponding crossover nodes. Mutation-  1 operator affects one individual. The connection of the  294 2008 IEEE Congress on Evolutionary Computation (CEC 2008)    judgment nodes is changed randomly by mutation rate Pm1.

Mutation-2 operator also is a genetic operation and affects  one individual. This operator changes the function of the  judgment nodes according to the historical information by a  given mutation rate Pm2. We use the frequency of attributes  of the extracted rules in the pool to change the function of  the judgment nodes with the following probability of P g j .

P g j =  ng(Aj)+c? k?K  [ng(Ak)+c] ,  where, ng(Aj) is the frequency of the attribute Aj in the rules extracted in the latest g generations, K is the set of  suffixes of attributes, c is a constant given by users. In this  paper, Aj corresponds to ?, ?,..., ?, or ?. If no rules are  extracted, the probability of each attribute is the same, equal  to the inverse of the number of attributes.



IV. ROAD MAP AND TRAFFIC FLOW  We use a very simple model of the road traffic system  for simplicity in order to study our proposed method. Fig.7  shows our road map model for the traffic system. It is a 7?7 model, each edge intersection, i.e., OD(Origin/Destination) is  named: #N1, #N2,..., #N7; #S1, #S2,..., #S7; #W1, #W2,..., #W7; #E1, #E2,..., #E7.

Fig. 7. Simple road map model  The cars generation is based on the OD (Ori-  gin/Destination) table. Table. I shows a simple example of  OD table: The table shows how many cars are generated from  Origin to Destination in a certain fixed time. The distribution  of the arrival time of cars is supposed to be exponential.

TABLE I  EXAMPLE OF OD (ORIGIN/DESTINATION)  O D #N1 #N2 #N3 . . .

#N1 . . . 10 20 . . .

#N1 7 . . . 0 . . .

#N1 24 6 . . . . . .

. . . . . . . . . . . . . . .

For example: from #N1 to #N2 is 10.

The routing algorithm is very simple in order to simplify  the traffic situation. Basically all the cars on the road obey the  following simple routing method: first go straight then turn  to the destination as Fig.8(a) shows. If some of the roads  are blocked, the car will turn to the neighboring link and get  to the destination. Fig.8(b) shows the routing method when  links are blocked.

Fig. 8. Simple routing method  Under different situations (different time periods, different  OD tables, or different road situations) we can get the data  on the cars movements like Table. II(Greek letters stand for  the different links on the map).

TABLE II  DATA OF CARS? MOVEMENT  Class p CarID Route  1 ? ? ? 2 ? ? ? ? ? . . . . . .

Class q CarID Route  1 ? ? ? ? ? ? ? 2 ? ? ? ? ? . . . . . .

The data here are transformed to the mining database like  Table. III, where 1 means the car passes through the link, 0  otherwise.

TABLE III  TRANSFORMED MINING DATABASE  Class p CarID ? ? ? ? ? ? ? . . .

1 1 1 0 0 0 0 0 . . .

2 1 0 1 1 0 0 0 . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . .

Class q CarID ? ? ? ? ? ? ? . . .

1 0 1 1 0 0 1 1 . . .

2 0 0 0 1 1 1 0 . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . .



V. SIMULATION  The databases for the mining contains the information on  the cars? movements in the road map. Our aim is to get the  interesting association rules for two different databases using  2008 IEEE Congress on Evolutionary Computation (CEC 2008) 295    GNP based data mining method with attributes accumulation  mechanism.

The parameter setting of the proposed data mining is  presented in Table. IV.

TABLE IV  PARAMETER SETTING FOR EVOLUTION  Conditions Value  Judgement nodes size 100  Processing Nodes size 10  Population size 100  Attribute size 224  ?new 150  Pc 1/5  Pm1 1/3  Pm2 1/5  minDiffer 0.1  Two different data sources are based on different traffic  conditions(see Fig. 9). The data of class p are produced by  the original map, while the data of class q are produced by  the original map with one link being block (red).

Fig. 9. maps for two data sources  A. Comparison of GNP based data mining with and without  attributes accumulation mechanism  The comparison of the two methods: one without attributes  accumulation mechanism (conventional method), the other  with attributes accumulation mechanism (proposed methods)  is carried out. The condition of the comparison is shown in  Table. V.

We compared the number of rules obtained from two  mining methods. From Fig.10, we can see that the proposed  method with attributes accumulation mechanism performed  better than the conventional method without attributes accu-  mulation mechanism and not only the convergence speed is  improved but also the rules are searched more thoroughly.

B. Comparison on sub attribute set size  In order to check the influences of the number of sub  attribute set size, we simulated using the different sub  attribute set size of 10, 25, 30, 40, 50, 100, 150, 200 and  224 under the same conditions and the same databases as  the former simulation. The result is in the Fig. 11.

TABLE V  CONDITIONS FOR THE COMPARISON BETWEEN WITHOUT  ACCUMULATION MECHANISM AND WITH ACCUMULATION MECHANISM  Item without accumulation with accumulation  generations per round 50 50 sub attribute set size all attributes 50 way to build sub at- tribute set  totally random reini- tialization  20% best attributes from the last genera- tion, 80% random se- lection  Fig. 10. Number of rules by the conventional method without accumulation mechanism and the proposed method with accumulation mechanism  We can see from Fig. 11 that the size of 30 will give the  largest number of rules. Interestingly, size 10 results in the  worst result. This might be due to the fact that too small  size limit the searching space at each generation. For the  sub attribute set size larger than 40, the initial growth rate is  much higher than others, but after around 300th round, the  growth rate significantly decreases. We think that too large  searching space will decrease the searching efficiency and  cause the early convergence.

Fig. 11. Number of rules in case of changing the sub attribute set  296 2008 IEEE Congress on Evolutionary Computation (CEC 2008)    C. Simulation on the number of generations per round  The number of rules generated at each generation is shown  Fig. 12(a) and Fig. 12(b), where each round consists of  50 generations. Fig. 12(a) covers all generations, while Fig.

12(b) only covers early generations. We can see from Fig.

12(b) that the number of rules is converged in some rounds  and it is not converged in the others.

Fig. 12. Number of rules via generation (all generations, 50 genera- tions/round)  In order to get better performances and dig out more  rules more effectively, we tried the case in which each  round consists of 100 generations. Fig. 13(a) and Fig. 13(b)  corresponds to Fig. 12(a) and Fig. 12(b), respectively. We  can see that the number of rules converges in almost every  early round in this case.

D. Analysis on the rules obtained  We analyze the rule pool in terms of the proportion of  the number of rules, each of which has different confidence  between two related, but different databases. From Fig. 14,  it is found that a large amount of rules are obtained, whose  confidence difference is very large.

Fig. 13. Number of rules via generation (all generations, 50 genera- tions/round)  Among 11263 rules, confidence difference is larger than  0.5 for more than one third of the rules. Impressively, the  rules whose confidence difference equals to one occupy  fifteen percent of the whole rules in the Big Rule Pool(BRP),  which means some rules appear in one class and not appear in  the other class. It means the traffic flow is totally different in  the links related to the rules. These links are directly related  to the blocked link. In addition, we can get the information  about how the traffic flow pattern implicitly and explicitly  changes by the analysis of the obtained rules as well.

To study the results further, we picked up all of the rules  whose confidence difference is as large as one, and also  picked up top ten most frequently appeared attributes in the  rules, which are found to be the links around the blocked  link as shown in Fig. 15.



VI. CONCLUSIONS  In this paper, a method for comparative association rules  mining using GNP with attributes accumulation mechanism  is proposed in order to obtain the association rules be-  tween related, but different databases. In order to study  the characteristics of the proposed method, we simulated  2008 IEEE Congress on Evolutionary Computation (CEC 2008) 297    Fig. 14. Proportion of the number of rules, each of which has different confidence between two databases  Fig. 15. Links influenced by the blocked link  several cases using a simple model of the road traffic system.

The result shows that the method can obtain the important  association rules related to the changes between databases.

Further improvement are needed in the future, for example,  the combination with optimal route algorithms is needed.

