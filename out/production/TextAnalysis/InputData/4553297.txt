Time Aware Mining of Itemsets

Abstract  Frequent behavioural pattern mining is a very important topic of knowledge discovery, intended to extract correla- tions between items recorded in large databases or Web ac- ces logs. However, those databases are usually considered as a whole and hence, itemsets are extracted over the en- tire set of records. Our claim is that possible periods, hid- den within the structure of the data and containing compact itemsets, may exist. These periods, as well as the itemsets they contain, might not be found by traditional data mining methods due to their very weak support. Furthermore, these periods might be lost depending on an arbitrary division of the data. The goal of our work is to find itemsets that are frequent over a specific period but would not be extracted by traditional methods since their support is very low over the whole dataset. In this paper, we introduce the definition of solid itemsets, which represent a coherent and compact behavior over a specific period, and we propose SIM, an algorithm for their extraction. This work may find many applications in sensitive domains such as fraud or intrusion detection.

1. Introduction  The problem of association rule mining has been de- fined in [1]. The goal is to obtain, among a very large set of records, the frequent correlations between the items of the database. This problem has many application in mar- keting, business management or decision analysis, for in- stance. The core of this problem lies in the extraction of frequent itemsets. In market basket analysis, for instance, frequent itemset mining aims to discover sets of items that correspond to a large number of customer. If this num- ber is above a certain threshold (given by the user) then this itemset is considered frequent. However, in the ini- tial definition of frequent itemset mining, the search is per- formed over the whole database (i.e. given minsupp, the  user?s minimum support, the extracted itemsets appear in at least |D| ?minsupp transactions of database D). However, for many real world applications, this definition of frequent itemsets is not well adapted. Possible interesting itemsets might remain undiscovered despite their very specific char- acteristics. In fact, interesting itemsets are often related to the moment during which they can be observed. We may consider, for instance, the behaviors of the users on the web site of an on-line store after a special discount on recordable DVDs and CDs, advertised on TV. Similarly, the web site of a conference will observe that frequent behavior related to the submission procedure mainly occurs within a window of a few hours before the deadline. A necessary condition in order to discover this kind of knowledge is that each trans- action is associated to a time-stamp. This condition has al- ready been proposed, for instance in [2] and the authors pro- posed the notion of temporal association rules. Their idea consists of extracting itemsets that are frequent over a spe- cific period that is shorter than the whole database. How- ever, the periods proposed in [2] are defined by the lifetime of each item. Therefore, a data mining process for extract- ing the periods is not necessary since they only depend on the first and last occurrence of each item.

In this paper, we propose to find itemsets that are fre- quent over a contiguous subset of the database. For in- stance, navigations on the web page of recordable CDs and DVDs occur randomly all year, but the correlation between both items is not frequent if we consider the whole year.

However, the frequency of this behavior will certainly be higher within the few hours (or days) that follow the TV spot. Therefore, the challenge is to find the time window that will optimize the support of this behavior. In other words, we want to find B, a contiguous subset of D where the support of the behavior on B is above the minimum support and the size of B is optimal. Let us consider that the TV spot was on March 3 and it has influenced the cus- tomers for two days. Our goal is to find the following kind of knowledge: ?25% of the users, between March 3 and March 5, have requested the page about recordable CDs,  15th International Symposium on Temporal Representation and Reasoning  DOI 10.1109/TIME.2008.12   15th International Symposium on Temporal Representation and Reasoning  DOI 10.1109/TIME.2008.12     the page about recordable DVDs and the page about special discounts.? The support of this behavior would certainly be too low for its extraction over the whole year, but this knowledge (i.e. the behavior along with its associated pe- riod of frequency) may be very important for deciders since they will want to discover this behavior and its specific win- dow of frequency, and finally link it to the TV spot.

2. Definitions  The problem of association rule mining is based on the extraction of frequent itemsets. This problem has been pro- posed in [1], and numerous algorithms have been proposed in the literature to solve it. Definition 1 states the charac- teristics of frequent itemsets. It is different from the initial or traditional definitions in [1] since we consider that each item in the database is associated to a time-stamp. There- fore a transaction may cover a range of several timestamps.

Definition 1 Let I = {i1, i2, ..., in} be a set of items. Let X = {i1, i2, ..., ik}/k ? n and ?j ? [1..k] ij ? I. X is called a itemset (or a k?itemset). Let T = {t1, t2, ..., tm} be a set of times, over which a linear order <T is defined, where ti <T tj means ti occurs before tj . A transaction T is a couple T = (tid,X) where tid is the transaction iden- tifier and X is the associated itemset. Associated to each item i in X we have a time-stamp ti which represents the valid time of occurrence of i in T .

A transaction T = (tid, I) is said to support an itemset X ? I if X ? I . A transaction database D is a set of transactions. The cover of an itemset X in D is the set of transaction identifiers of transaction in D that support X: cover(X,D) = {tid/(tid, I) ? D,X ? I}. The sup- port of an itemset X in D is the number of transactions in the cover of X in D: support(X,D) = |cover(X,D)|.

The frequency of an itemset X in D is the fraction of transactions in D that support X: frequency(X,D) = support(X,D)  |D| . Given a user?s minimum threshold ? ?]0..1], an itemset X is said to be frequent if frequency(X,D) ? ?.

Definition 2 The set F of frequent itemset in D with respect to ? is denoted by F (D, ?) = {X ? I/frequency(X,D) ? ?}.

Given a set if items I, a transaction database D and a minimal threshold ?, the problem of frequent itemset min- ing aims to find F (D, ?) and the actual support of the item- sets in F . Example 1 gives an illustration of the notions presented above.

Example 1 Figure 1 shows the example database D. To each transaction Id is associated the set of items in the transaction. In order to simplify the illustration, we assume  that the transactions of D are recorded by order of date (i.e. T1 occurred before T2, etc.) and a unique time-stamp is associated to all the items of a transaction (whereas in our definition, each separate item has a time-stamp). Let us consider a minimum frequency ? = 12 given by the user.

With such a support, the frequent items (highlighted in the transactions of figure 1) are a, b and c. The frequent item- sets of D, with ? = 12 , are (a), (b), (c), with a threshold of 10 , and (a, c), with a threshold of  2 .

Figure 1. Frequent itemsets on D where ? = 12  Our problem is based on the timestamps associated to the records in D and aims to provide itemsets that are frequent on particular periods of times in D. In the following def- initions, we introduce the notions of temporal itemset and solid itemset, that are the core of this paper.

Definition 3 A period P = (Ps, Pe) is defined by a start time Ps and an end time Pe. The set of transactions that belong to period P is defined as Tr(P ) = {T/T ? D,?i ? T, Ps ? Pi ? Pe} with Pi the time-stamp associated to i in transaction T . We define as PR the set of all potential periods over D.

In other words, the set of transactions that belong to a period P is defined as the set of transactions having all their items associated to a time-stamp in the time range of P .

The frequency of x over Tr(P ) the transactions of a period P is denoted by frequency(x, P ) whenever it is clear from the context (as well as cover(x, Tr(P )) which is denoted by cover(x, P ) and support(x, Tr(P )) which is denoted by support(x, P )).

Definition 4 A Temporal Itemset x is a triple (xi, xp, x?) where xi is an itemset, xp is a period associated to xi and x? is the threshold of xi over xp. Let k be the size of xi, then x is called a k?temporal itemset.

Let us consider the temporal itemset y = ({a, b, c}, [7..10], 34 ) in D from figure 1. The itemset of y (i.e. yi) is {a, b, c}. The period of y (i.e. yp) is [7..10]     and the threshold of y over yp (i.e. y?) is 34 (yi is supported by transactions 7, 9 and 10 in period yp on D).

Given ?, a user?s minimum threshold, we introduce the characteristics of solid itemsets in Definition 5.

Definition 5 Let x be a temporal itemset. x is called a Solid Itemset (SI) iff the following conditions hold: 1) x? ? ? 2) ?p2 ? PR/xp ? p2 we have either a) or b) or both:  a) support(xi, p2) < ? b) cover(xi, p2) =cover(xi, xp)  3) ?p2 ? PR/p2 ? xp, cover(xi, p2) <cover(xi, xp) Let k be the size of xi, then x is a k-solid itemset. Finally, SIk is the set of all k-solid itemsets.

The first condition of definition 5 ensures that x repre- sents an itemset that is frequent over its associated period.

The second condition ensures that the size of xp is maxi- mal. Actually, if a larger period exists, then, on this period, xi is not frequent or the cover of xi is the same (i.e. it is not worth extending the period from xp to p2, since the ex- tension will not contribute to the support of xi). Finally, the third condition ensures that the size of xp is minimal. In fact, xi is supported by the first and last transaction in xp, so if a smaller period exists where xi is frequent, the cover will be lower anyway (i.e. relevant transactions supporting xi would have been dropped from the period and should be kept). An illustration is given in example 2.

Example 2 Figure 2 shows the example database D of fig- ure 1 and the extracted k-solid itemsets. We can observe that the solid itemsets of size 1 are (a), (b) and (c), and their period corresponds to the entire database with a threshold of 610 . Then, we have three solid itemsets of size 2:  ? (a c), with a threshold of 510 and a period that corre- sponds to the entire database.

? (a b) and (b c), on the period [7..10] with a threshold of 34 .

Finally, there is one solid itemset having size 3: (a b c) which occurs during the period [7..10] with a threshold of 4 . We can observe that, thanks to the definition of solid itemsets, a new kind of knowledge has been extracted. This knowledge concerns punctual behaviors of the users. In D it is illustrated by, for instance, a compact itemset of size 3 (i.e. (a b c)) occurring on a very specific period (i.e.

[7..10]). This itemset, associated to this period, is optimal (as stated in definition 5) since:  ? This itemset is frequent over this period.

? No longer period allows this itemset to have the mini-  mum threshold (condition 2 in definition 5 is respected for all periods larger than [7..10]).

? no shorter period allows this itemset to have the mini- mum threshold without diminishing the cover.

On the other hand, let us consider the following tem- poral itemsets: y = ((a b c), [9..10], 100%) and z = ((a b c), [6..10], 35 ). We can observe that yi and zi have the minimum support over their respective periods.

However, there exists a period p2 = [7..10] where (a b c) is frequent and the cover is larger than the cover of yi on yp. Hence, y is not a solid itemset since condition 2 of definition 5 is not respected. Finally, zi is frequent on p2 and its cover is the same on p2 and zp, so condition 3 of definition 5 is not respected and z is not a solid itemset.

Let us note that itemsets (a b), (b c) and (a b c) were not frequent over the whole database in example 1 with ? = 12 , since their threshold on D is 410 . However, thanks to the definition of solid itemsets, they can be discovered along with their associated periods of frequency.

Figure 2. Solid itemsets in D where ? = 12  Definition 6 The set of Maximal Solid Itemsets (MSI) is defined as follows: let x be a SI, x is a MSI if the following condition holds: ?y ? SI/x ?= y if xi ? xi then xp ?= yp.

The goal of this paper is to propose an optimized algo- rithm in order to extract the exact and entire set of maximal solid itemsets, as stated in definition 6.

3. General Principle  This section is devoted to the presentation of ?Solid Itemset Miner? SIM designed for the extraction of solid itemsets in databases. SIM introduces a new paradigm for the counting step of the generated candidates. Actually, let us consider t a temporal itemset that is not a solid itemset (i.e. t? < gamma). Any superset u = (ux, up, u?)/ux ? tx ? up ? tp of t cannot be a solid itemset (i.e. u? <     gamma). SIM thus extends the Generating-Pruning princi- ple of apriori in order to generate candidate solid itemsets and count their support. The generating principle is pro- vided with a filter on the possible intersection of the can- didates (i.e. if two solid itemset of size k have a common prefix but do not share a common period, then they are not considered for generating a new candidate).

However, the counting step (or ?pruning? in apriori) is not straightforward in our case. Let us consider c, a candi- date. A possible solution would be to count the occurrences of c over its lifetime within cp. This is not a good solution.

Now let us consider the candidate c = ((a b), [1..10], c?) the candidate temporal itemset that has been generated thanks to the solid itemsets of size 1: x = ((a), [1..10], 610 ) and y = ((b), [1..10], 610 ). c is not a solid itemset since c? = 410 . However cp contains a solid itemset c  ? = ((a b), [7..10], 34 ). Based on this observation, our goal, dur- ing the counting step, is to build ?kernels? of the candidate temporal itemsets over their period of possible frequency.

Then, the kernels will be merged in order to find the cor- responding solid itemsets. Details are given in Definition 7.

Figure 3. Kernels and period of itemset (b)  The following definition is based on the fact that we per- form successive scans over the data in order to find the pe- riods that correspond to solid itemsets. The way a scan is performed (i.e. reading the transaction from the first to the last one) implies discovering the kernels ?on-the-fly?.

Definition 7 A kernel is a period. Let K(x, P, ?) be the set of kernels for the item x over the period P with respect to the minimum threshold ?. K(x, P, ?) is defined as follows: Let k ? P be a period such that x ? Tr(ks) ? Tr(ks) is the first occurrence of x in P . If k does not exist then K = ?. If k exists, then let N be the set of timestamps such that ?n ? N,n ? P ?n > ks?frequency(x, [ks..n]) < ? (in other words, N is the set of timestamps in P such that extending the period k up to any of those timestamps leads to lose the frequency for x). If N is empty then ke is defined  as the last occurrence of x in P , and K(x, P, ?) = {k}.

Otherwise (i.e. N ?= ?), let m ? N/?n ? N,n > m (m is the first time-stamp such that frequency of x is lost on [ks..m]). Then, ke is defined as the last occurrence of x in [ks..m] and K(x, P, ?) = {k} ?K(x, P ? [ks..ke], ?)  Example 3 Let us consider the candidate temporal itemset of size 1 c = ((b), [1..10], c?). Figure 3 gives the boolean table of occurrences for the item b. There are two kernels of (b) over cp (i.e. [1..3] and [6..10]). Those kernels can be merged (the frequency of the itemset on the resulting pe- riod is above the minimum threshold) in order to obtain the resulting solid itemset ((b), [1..10], 610 ) .

Let us consider that we are provided with an itemset x and K the kernels of x over a period P with respect to ?. Merging the kernels with algorithm MERGEKERNELS allows finding the solid itemsets of x over P with respect to ? (due to lack of space, we do not provide the proof in this paper).

Algorithm MERGEKERNELS In: x an itemset, K a set of kernels for x  and ? a minimum support.

Out: The modifications of c.kernels, containing the  optimal periods for x with ? mergeable? true; While (mergeable) mergeable? false;  Foreach (q ? K) Foreach (r ? K/r ?= q? cover(x,q)|+|cover(x,r)||q?r| ? ?)  K ? K + q ? r; cover(x, q ? r) = cover(x, q) ? cover(x, r) mergeable? true; toRemove? toRemove +q + r;  endFor endFor Foreach (k ? toRemove) K ? K ? k; toRemove? ?  End while End Algorithm MERGEKERNELS  SIM, our algorithm, is based on the candidate generating principle. Our goal is to start with solid itemsets of size 1 and explore the support of larger solid itemsets with a lim- ited number of scans over the database. To this end, we need to find the periods of frequency for a candidate solid item- set in only one scan. Once the kernels and the associated k?itemset are found, SIM generates the {k+1}?candidates with a filter intended to avoid itemsets that do not share a period of time. Due to lack of space, we do not give more details on the algorithms.

4. Experiments  The goal of this section is to show the points of interest of our approach since the extracted patterns associated to their periods of frequency are the core of a new kind of relevant knowledge and they would not be extracted with a traditional method of itemset extraction. Our dataset comes from the Web access log of Inria Sophia Antipolis from March 2004 to June 2007. It represents 253 Go of rough data. The total number of navigations after the preprocessing is 36,710,616. SIM has been written in C++ on a PC (2.1Ghz) running Linux with 2Go of main memory. Given the characteristics of our data, a cover of 15 navigations would represent a threshold of 4.10?5  over three years of records. Our goal is not to extract ?frequent? navigations with a minimum threshold ? ? 0%, because that would be of no interest and would lead to a unpracticable number of behaviors (and there is no data mining algorithm able to handle such supports). In fact, thanks to the characteristics of the solid itemsets, we are able to extract patterns that have such a low support while being highly frequent on ?regions of interest?. This allows decreasing the number of patterns and consuming less CPU.

We propose to analyze some of the extracted solid itemsets on the web log of Inria Sophia from 2004 to 2007.

Joan Miro: our first behavior involves a Web page created in 2002. This page has been written by Christophe Berthelot, a member of Omega team at Inria Sophia Antipolis. Here is the corresponding solid itemset: start: Thu Apr 20 07:05:39 2006 end: Thu Apr 20 17:21:06 2006 frequency: 0.024565 cover: 120 itemset: with the prefix ?omega/personnel/Christophe.Berthelot/? { css/style.css, Omega/JoanMiro/joanmiro.html }  The interpretation of this behavior is not straightforward.

A cover of 120 navigations is exceptionally high (given the amount percentage of requests hidden by the caches of the proxies) and, according to our investigation on that point, the explanation lies in the following informations: 1) This Web page is dedicated to Joan Miro, a famous artist; 2) Joan Miro was born in 1893 April 20; and 3) This page is ranked fifth on Google with the keywords ?Joan Miro? (at the time we write this paper). Our conclusion is that on April 20, (i.e. Miro?s birthday) people have searched information on the artist and found Christophe?s page. This behavior is also discovered in April 2004, 2005 and 2007.

MC2QMC2004 Conference: our second behavior is organized by Omega (a team at Inria Sophia). Here is the extracted solid itemset: start: Mon May 17 09:22:41 2004 end: Mon May 17 12:49:26 2004 frequency: 0.0170512 cover: 19 itemset: { omega/MC2QMC2004, omega/MC2QMC2004/monday.html, omega/MC2QMC2004/tuesday.html }  This behavior may be interpreted as follows: ?during the period which begins on Monday May 17 at 09:22:41 and ends on Monday May 17 at 12:49:26 (2004) 1,7% of the users have requested the pages : the index of MC2QMC2004 and the program of MC2QMC2004 for the first day (Monday) and the second day (Tuesday).? After a discussion with the organizers, it appears that a message was widely sent to the community of this conference in or- der to advertise the program and remind people to regis- ter. This was immediately followed by the type of behavior which corresponds to this exact situation.

5. Conclusion  In this paper, we have proposed a new definition of item- sets that correspond to a high frequency on a specific period without specifying a time granularity or a particular period.

The periods of frequency and the corresponding itemsets have to be discovered by the algorithm based on the only notion of minimum support. However, discovering these itemsets is a true challenge since the periods of frequency and the corresponding itemsets have to be discovered at the same time. Furthermore the number of possible combina- tions is impracticable and has to be reduced. We provided the theoretical foundation of our approach and our algo- rithm is based on the discovery of ?kernels? of frequency and their possible aggregations. Our experiments showed that SIM is able to extract the solid itemsets from very large datasets and provide useful and readable results.

