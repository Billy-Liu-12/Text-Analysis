Towards XML Metamodel Patterns for XML Data Modeling

Abstract XML, as an emerging industrial standard markup  language, is very suitable for  representing the meta- model that contains data structure, data element, rela- tionship, rules etc. In this paper we will present a pat- tern-oriented approach for building metamodel and defining the basic elements of an XML metamodel pat- tern. We will also introduce some pattern examples, such as the embedding container, the self-embedding container, the link, and the Association. Finally we will define some rules on how to use those pattern exam- ples. The use of pattern-oriented approach will simplifi and speed up metamodeling.

KEY WORDS: XML, Metarnodel, Pattern  1. Introduction  Metamodeling is a process and an activity to find the most suitable and economical representation of real data on the abstraction level [2]. ?Metamodeling can result in great savings in development effort, and in much better reuse potential.?[l]. But it needs much effort for abstraction, synthesis, and classification. To reduce effort experience and knowledge are required.

The pattern-based approach helps people to collect and abstract the experience, thus to reduce the development cost and speedup the metamodeling process.

According to Alexander [3] the reusable recurrence (e.g. experience and rules) is the essential part of pat- terns. Buschmann grouped patterns into three categories of patterns: architectural patterns, design patterns and idioms [6].

Riehle and Zullighoven [7] also define three catego- ries of patterns: conceptual patterns, design patterns and programming pattern. The design pattern and program- ming patterns are similar to or as same as design pattern and idioms described by Buschmann. A conceptual pattern is a pattern whose form is described by means of  Gerhard Vollmar e-mail: gerhard.vollmar@de. abb.com  Speyerer Strasse 4, D- 691 I5 Heidelberg ABB Corporate Research Center  Germany  terms and concepts from an application domain. The conceptual pattern covers reusable recurrence on the application domain level.

The patterns defined by Gamma, Buschmann, Rihle and Zullighoven can therefore be classified to four layers - conceptual patterns, architecture patterns, de-  Architectural Pattern  Conceptual Patterns Design Pattern  Application Patterns Programming Pattern  Data Model Patterns  Data Instance Model Pattern  Data Metarnodel Pattern I  Figure 1 Pattern Structure  sign patterns and programming patterns. In this paper we introduce another layer of pattern - data model pattern to collect experience and knowledge and thus define rules for data modeling. It deals with reusability issue in the data modeling area. The data model pattern contains the data instance model pattern and the data metamodel pattern. Data instance models are the in- stances of the data mttamodels. The data instance model pattern is the model pattern on the instance level while the data metamodel pattern on the metamodel level. To better describe the pattern structure we put the three pattern groups - the architecture pattern, the de- sign pattern and programming pattern - introduced by Buschmann into one group called application pattern because they reflect internal different abstraction levels of a software application and are realized in it. Figure 1 shows the pattern structure.

2. XML metamodel pattern  XML [I21 data modeling is a processing of using basic XML elements to model data. The result of XML data modeling is XML data models that consist of XML  1529-4188/01 $10.00 0 2001 IEEE  mailto:zaijun.hu@de.abb.com   data instance models and XML data metamodels, or in short term, XML instance model and XML metamodel.

The focus of this paper is the XML metamodel. An XML metamodel pattern refers to a rule or a group of rules that describes the way of creating, using and com- posing the XML elements to establish XML metamod- els.

3. Elements of XML metamodel pattern  We use the basic element defined in [4][5][7][8] and adapt them to the XML metamodel pattern.

3.1 Name  Each XML metamodel pattern must have a mean- ingful name, which can be used to refer to the pattern.

The name must be explainable and understandable. A good name will simplify the abstraction activity or modeling activity, improve the communication among modelers, between the modeler and application devel- oper that uses models, because the modelers or devel- opers can use the pattern name in their discussion. A good name is also a good basis for pattern classification or categorization.

3.2 Problem and context  The problem describes what shall be modeled or the purpose of the pattern. It concentrates on the problem world that shall be described. The problem also covers the modeling problems that are encountered by model- ers. The context describes all issues such as bounding conditions, which are related to the problem. A clear description of the problem and the context will benefit to the decision.

3.3 Additional Use Cases  The additional use case describes other typical cases where the pattern can be used. A use case can be a structure, a special relationship, a special object, a spe- cial scenario etc.

3.4 Structure  The structure of XML metamodel pattern describes the elements that compose the pattern and their relation- ships. The XML metamodel pattern is built by means of XML elements that can be the basic XML elements or XML elements created by modelers. The structure of the pattern tells which elements are used and how the relationships among them look like.

3.5 Rules  The rules describe the conditions of using the pat- tern. It concentrates on the technical aspect rather than problem aspect. It might contain some modeling con- straints that have to be taken into account in the model- ing. It could also be some considerations coming from the usage and presentation of models or some con-  straints from modelers or developers. The rules help modelers to choose the suitable pattern.

3.6 Implementation  The implementation describes which XML language is used to realize the pattern and how the pattern is implemented. For example there are two XML schemas defined by W3C [9]  and Microsoft [13]. Both schemas define the basic elements that can be used to build the metamodel. The implementation only shows an example on how the pattern with pre-selected modeling language realized. Maybeit shall be adapted for the concrete case.

3.7 Consequence  The consequences are result of and tradeoffs of applying the pattern [4]. They describe the benefits and drawbacks of the pattern. They are used to evaluate the pattern in the modeling decision.

3.8 Related patterns  The related patterns refer to the patterns that are similar to this pattern or can be used for similar pur- pose, context or under similar conditions. The relation patterns help modelers to evaluate different alternatives so that the most suitable pattern can be selected and used.

4. Some XML Metamodel Patterns  4.1 Embedding Container  w: Embedding Container Problem and context: the embedding container is used to model an information element whose instance con- tains the instances of other information elements. There are two modeling problems here. First of all is to decide the direction of the relationship, namely which element contains which one. The second modeling issue is to decide if it is really necessary to embed an instance of an element into one of another element.

Additional Use Cases: the embedding container can  Figure 2 Embedding Container  also be used to model information hierarchy or a list that contains a list of information element of the same type  Structure: the embedding container involves at least two elements [Fig. 21: the embedding element A and the embedded element B. The relationship between A and B can be 1:n.

Rules: the embedding container is (or not) used under the following conditions.

Mandatory constraint [IO]: If instance of element B cannot exist without an instance of element A, em- bedding B in A is a possible expression of the rela-  <Schema name="EmbeddingContainerSchema" xmlns="urn:schemas-microsoft-com:xmldata' xmlns:dt="um:schemas-microsoftcom:datatyps"> CAttributeType name="color" dt:type="string"/>  CElernentType name="B" content="eltOnlf model="closed">  </ElementType> <ElementType name="A' content="eltOnlf model="closed">  </ElementType>  cattribute type="colof required="yes"/>  <element type=%" minOccurs="O maxOccurs="'"/>  </Schema>  Figure 3 Example for the Embedding Container  tionship between B and A. The part-whole relation- ship is an example of such a case.

Uniqueness: If an instance of element B is associ- ated with only one instance of element A then em- bedding B in A is a possible modeling way. If ele- ment B is referenced by other elements beside ele- ment A or an instance of element B can be refer- enced by more than one instance o f  element A, em- bedding B in A could result in redundancy on the instance model level.

Dependence: If instances of element B have to be organized together with the instance of element A, the embedding container can be used.

The embedding container can be used for building a tree structure. Each node in the tree structure could be different. But it is not suitable for model- ing graph-like structure where a child could have more than one parent. In this case we have multiple reference mentioned above.

Possibility: Sometimes it is impossible to embed B in A if B has a binary format such as binary file, image file etc.

Imulementation: In this paper we use MS XML schema for the implementation of XML metamodel (Fig. 3).

Conseauence: The embedding container is a simple modeling way. But the embedding container could result in redundancy on the level of the data instance model if the embedded element can be associated with other elements beside the embedding element.

ReIated Pattern: Self-Embedding Container, Link Container, Association Container.

4.2 Self-Embedding Container  &: Self-Embedding Container  Problem and context: In modeling we often face tree structure with each node containing an information element of the same type. The modeling problem is how to describe the homogenous hierarchical structure. Us- ing the embedding container could result in a compli-  cated model system. The self-embedding container could be the choice.

Additional Use Cases: The self-embedding container  Fiaure 4 Self-Embeddina Container can also be used for modeling linked list.

Structure: The self-embedding container is a kind of the embedding container with an exception that the embed- ded element has the same type as the embedding ele- ment. Figure 4 shows the structure.

U: the self-embedding container is (or not) used under the following conditions.

Mandatory constraint: If an instance of element A lives only in its parent or container of the same element type A then the self-embedding container can be used.

Uniqueness: If an instance of element A is associ- ated with only one parent, then the self-embedding container could be used. Otherwise the use of the  ~~~~ ~~~~ ~ ~ ~ ~ ~ ~ ~~  <Schema name="SeMmbeddingContainerSchema" xmlns="urn:schemas-micrasoft-corn:xrnldata' xmlns:dt='um:schemas-microsofiam:datatypes"> CAttributeType name="colof dt:type="string"/> 4lementType name="A" content="eltOnlf rnodel="closed'>  </ElernentType>  Cattribute type="wlof required="yes"/> <element type="A" minOccurs="l" maxOccurs="'"/>  </Schema>  Figure 5 Example for the self- embedding container  self-embedding container could result in redun- dancy on the data instance model level.

Dependence: If instances of embedded element have to be organized together with the parent ele- ment, the self-embedding container can be used.

The self-embedding container is suitable for build- ing a tree structure where each node has the same type.

