An improved Apriori algorithm based on the matrix

Abstract:  Apriori algorithm is a classical algorithm of association rule mining and also is one of the most important algorithms. But it also has some limitations. It produces overfull candidates of frequent itemsets, so the algorithm needs scan database frequently when finding frequent itemsets. So it must be inefficient. To solve the bottleneck of the Apriori algorithm, this paper introduces an improved algorithm based on the matrix. It uses the matrix effectively indicate the affairs in the database and uses the ?AND operation? to deal with the matrix to produce the largest frequent itemsets and others. It needn?t scan the database time and again to lookup the affairs, and also greatly reduce the number of candidates of frequent itemsets. This paper uses an example to analyze and compare the difference between the two algorithms and the result shows that the improved algorithm obtains the bonus time of calculating and promotes the efficiency of computing.

Keywords: Apriori algorithm; matrix; AND operation; affair; frequent itemsets

I. INTRODUCTION The associations between data are complicated and most  of them are hidden. Association rule mining is the most usually method in Association Knowledge Discovery which aim is to find out the hided information. The most famous is the Apriori algorithm[1] which has been brought in 1993 by Agrawal, etc. But it has two deadly bottlenecks[2]:  (1) It needs great I/O load when frequently scans database.

To each k circle, each element in the candidates of  frequent itemsets Ck needs scan database one time to decide whether it can join the Lk. It needs scan database ten times if the frequent itemsets has ten elements.

(2) It may produce overfull candidates of frequent itemsets.

The number of the candidate of frequent itemsets Ck which were produced by frequent itemsets Lk?1 increases in the speed of exponential. For example, 1000 1-frequent itemsets may produce 500000 candidates of 2-frequent itemsets. It is so large that is a challenge to the time and main Memory.

There are many scholars have advanced some improved algorithm to resolve the disadvantage of the Apriori algorithm. Such as: the method based on the tree[3], the  method based on the Cross List[4], quantified association rule mining algorithm[5], etc. This paper?s new algorithm also can be called the method base on the matrix, which takes full advantage of matrix and improves the efficiency of computing.



II. BACKGROUND We can describe the Association Rule Ming in an affair  database as follows: For I={i1,i2,...,im} is a collection of items, and ik(k=1,2,  ...,m) is an item, such as: the goods in basket, the client in a company, and so on. The affair database D?{t1,t2,...,tn} is composed of a series of affair which each has unique id TID, and each affair Ti(i?1,2,...,n) is a subset of I.

To an affair database, association rule mining is a process of finding out the strong associate rule base on the minsupport and minconfidence which were appoint by user, and it can divide into two small questions:  (1) Find out the frequent itemsets: Use the minsupport to find all the frequent itemsets which not less than the minsupport. In fact, they will contain each other.

(2) Produce the association rules: Find out the association rules which confidence is not less than the minconfidence in the largest frequent itemsets.

We can know that the second question can be solved easily if we know the answer of the first question, and there is little space for improvement whether in memory, I/O or in the efficiency of the algorithm to the second question. So, the first question, how to find out the frequent itemsets as soon as quickly, is not only the focus of association rule mining but also this paper.

There are two important natures in the association rule mining[2][6]:  Nature 1: If itemsets X is a frequent itemsets, then all of its not-empty subsets are frequent itemsets.

Nature 2: If itemsets X is not a frequent itemsets, then all of its supersets are not frequent itemsets.



III. ALGORITHM BASED ON THE MATRIX The algorithm based on the matrix needs use matrix to  describe the each affair in the database, so we just deal with the matrix to count the support of the candidates of frequent itemsets, and do not need to scan the database again. We can count the support quickly using the ?AND operation? [5] to deal with the matrix. The ?AND operation? is to AND the  2008 International Seminar on Future BioMedical Information Engineering  DOI 10.1109/FBIE.2008.80     rows according to the items in the candidate of frequent itemsets in the matrix, then add the result of the AND, and the result is the support. For example, we just AND the row ?a? and row ?c? in the matrix when we want to count the support of itemset {a, c}, and add the result, so we can get the support of it.

A. Process description The detailed process of the algorithm based on the matrix  as follows: (1) Convert the affair database to a matrix and operate it.

First, convert the affair database contained i items and t  affairs to a matrix which has i+1 rows and i+1 1 columns, the fist column notes items and the first row notes affairs. As shown in TABLE ?. Second, according to the minsupport simplified the matrix. When the sum of an item less then the minsupport, we can know that the item will not be in any frequent itemsets, so we should delete the row contained the item, which will simplify the later operation.

The matrix through the step is marked as the initial matrix ?Mat? which is the base of the later operation.

(2) Finding out the largest K-frequent itemsets uses the way of operating the matrix.

The largest frequent itemsets is a frequent itemsets which contains the most items than others. According the nature 1, it will be easier to find the frequent itemsets contained fewer items if we know the largest frequent itemsets.

There are several steps: (a) Finding out the affair in the matrix which has the most  items and the number of items is marked as K. If the number of affairs which the number of the items not less than the K less than the minsupport, which means the largest frequent itemsets cannot contain K items, so we should consider the affair which has K-1 items and use the K to mark the K-1.

We use this method until we find out the K that the number of affairs is not less than the minsupport.

(b) We use recursive algorithm to simplify the Mat, there are several steps: a) Deal with the column: because what we should judge is the support of the frequent itemsets contained K items, we should delete the column which the number of items less than the K. b) Deal with the row: through the step a), the row may have be changed. So, we should delete the row which the number of affairs less than the minsupport. c) Through the step b), the column may have been changed. We should go to the step a). If the a) and b) have not changed the Mat, we should mark the Mat as NewMat and go to the step (c). If the Mat is empty, which means there aren?t K-frequent itemsets, so we should go to the step (a) and consider the affair which has K-1 items.

(c) First, we select an affair ?t? in the NewMat and select K items in the t to form an itemsets. Second, Using the ?AND operation? count the Support of the itemsets. If its support is not less than the minsupport, the itemsets is a K-frequent itemsets. Or else it is not. Then we again select the K items in the t which is not the same as the former and judge the support. Use this method until there is no the  different K items in the t. Now, we can delete the column contained the t and simplify the NewMat using the same way as the step (b). Then, we use the same way to deal with the other affairs in the NewMat and the itemsets which has been counted should not be considered again. Use this way until the NewMat is empty. If there are not K-frequent itemsets, we should go to the step (a) and consider the affair which has K-1 items.

(3)Using the Mat finds out all the other frequent itemsets from 2-frequent itemsets to K-1-frequent itemsets, and the method is similar to the Apriori algorithm. But we should simplify the Mat which made counting the support easier.

According to the nature 1, because we have know the K-frequent itemsets, which contains a mass of K-a-frequent itemsets(0<a<K-1), we can reduce the amount of candidates of frequent itemsets, which means it will reduce the number of counting Support, connecting and pruning, which is the Apriori algorithm?s problem.

B. Algorithm description Input: affair database ?D?, minsupport; Output: all the frequent itemsets in the D; (1) [Produce the initial matrix Mat]  Mat?Create (D, Minsupport); If Mat?NULL  End, no frequent itemsets (2) [Find out the largest frequent itemsets] MaxK?Max (Mat, 0) [MaxK is the number of items in  an affair which contain the most items] While MaxK>0?repeat the following code  NewMat ? SimplifyMat (Mat,MaxK,Minsupport) [simplify the Mat]  If NewMat?NULL LMaxK?Find_Max(NewMat, MaxK)  [find out the MaxK-frequent itemsets] If LMaxK?NULL [if find out the MaxK-frequent  itemsets, then break] Break MaxK?Max (Mat, MaxK)  If LMaxK?NULL End?no frequent itemsets  (3) [Find out all the other frequent itemsets] L1?Find_1 (Mat) [the collection of items in the Mat is  1-frequent itemsets] While K from 2 to MaxK?execute Mat?SimplifyMat(Mat, K, Minsupport)  [simplify the Mat] Ck ? GenC(Mat, LMaxK ? LK-1) [find out the  candidates of frequent itemsets] LK?GenL(Mat, CK, Minsupport)  [find out frequent itemsets] (4) Answer?L1?L2???LK?LMaxK?L  [L is subset of LMaxK] (5) [END]

IV. CASE ANALYSIS As shown in TABLE?, the affair database has 8 affairs, D?  {T01,T02,T03,T04,T05,T06,T07,T08 }?the itemsets is I? {a,b,c,d,e,f,g,h},and the minsupport is 2.

TABLE? AFFAIR DATABASE  Name of affairs Itemsets T01 d?e?g T02 b?c?h T03 a?c?d?f T04 b?e?f?g T05 d?e?g T06 a?c?d?f T07 b?e?f?g T08 a?b?c?d?e  A. Find out the Mart As shown in TABLE ?, create the matrix according the  affair database. If an item in an affair, the position was set 1, or else set 0.

TABLE ?  THE INITIAL MATRIX  T01 T02 T03 T04 T05 T06 T07 T08 a 0 0 1 0 0 1 0 1 b 0 1 0 1 0 0 1 1 c 0 1 1 0 0 1 0 1 d 1 0 1 0 1 1 0 1 e 1 0 0 1 1 0 1 1 f 0 0 1 1 0 1 1 0 g 1 0 0 1 1 0 1 0 h 0 1 0 0 0 0 0 0 Obviously, there is only one ?1? in the row ?h?, it is less  than the minsupport 2, so we should delete row ?h? and don?t consider it again.

B. Find out the largest frequent itemsets LMaxK We can find out the largest frequent itemsets by  simplifying the TABLE ?(the row ?h? had been deleted).

Operations as follows:  (1) As shown in TABLE ?, the number of the most items in an affair is 5, but only an affair ?T08? has 5 items, so the number of affairs had 5 items is less than the minsupport ?2?. But there are 5 affairs have 4 items or more: T03?T04 ?T06?T07 and T08.

(2) We should simplify the matrix according 4 items. As shown in TABLE ?.

(3) As shown in TABLE ?, the affair ?T03? has an itemsets contained 4 items {a,c,d,f},  we do the ?AND operation? to the rows ?a?, ?c?, ?d?, ?f?, the result is 2 which is no less than the minsupport ?2?, so the itemsets {a,c,d,f} is one of the frequent itemsets. Because the affair ?T03? has only one itemsets contained 4 items, so we can delete the column ?T03? and simplify the matrix. We can know itemsets {b,e,f,g} also is a frequent itemsets when we use the same way to deal with the affair ?T04?. Now we delete the  column ?T04? and simplify the matrix again, we get an empty matrix, so the frequent itemsets are {a,c,d,f} and {b,e,f,g}.

TABLE ? THE MATRIX SIMPLIFIED  T03 T04 T06 T07 T08 a 1 0 1 0 1 b 0 1 0 1 1 c 1 0 1 0 1 d 1 0 1 0 1 e 0 1 0 1 1 f 1 1 1 1 0 g 0 1 0 1 0    TABLE ? MATRIX DELETED T03  T04 T06 T07 T08 a 0 1 0 1 b 1 0 1 1 c 0 1 0 1 d 0 1 0 1 e 1 0 1 1 f 1 1 1 0 g 1 0 1 0  C. Find out others frequent itemsets Because we have know the largest frequent itemsets,  {a,c,d,f} and {b,e,f,g}, so we can get some other frequent itemsets according Nature 1: 2-frequent itemsets {a,c}? {a,d}, {a,f}, {c,d}, {c,f}, {d,f}, {b,e}, {b,f}, {b,g}, {e,f}, {e,g}, {f,g}; 3-frequent itemsets {a,c,d}, {a,c,f}, {a,d,f}, {c,d,f}, {b,e,f}, {b,e,g}, {b,f,g}, {e,f,g}. So, we don?t count theirs Support again, which reduce the times of connecting and pruning.

(1) Find out the 2-frequent itemsets: According the TABLE ?(row ?h? had been deleted) and the 2-frequent itemsets had been know, we can know the candidates of 2-frequent itemsets are: {a,b}, {a,e}, {a,g}, {b,c}, {b,d}, {c,e}, {c,g}, {d,e}, {d,g}. It has only 9 itemsets, but the Apriori algorithm will has 21 itemsets. Do the ?AND operation? to the TABLE ?(row ?h? had been deleted) and we can know the support of the itemsets {b,c}, {d,e}, {d,g} is no less than the minsupport. So the 2-frequent itemsets are: {b,c}, {d,e}, {d,g}, {a,c}, {a,d}, {a,f}, {c,d}, {c,f}, {d,f}, {b,e}, {b,f}, {b,g}, {e,f}, {e,g}, {f,g}.

(2)Find out the 3-frequent itemsets: As shown in TABLE ?, it is the result of deleting the affairs which the number of items less than 3 in TABLE ? and simplifying the matrix. The more of the number of items we compute, the simpler of the matrix is. It will be easier counting the support. We should let the itemsets {b,c}, {d,e}, {d,g} in the 2-frequent itemsets as the center of  connecting and pruning when we want to find out the candidates of 3-frequent itemsets. So, they are: {b,c,f}, {d,e,f}, {d,e,g}, {d,f,g}. Do the ?AND operation? to the TABLE ? and we can know only the support of the itemsets {d,e,g} is no less than the minsupport. So the     3-frequent itemsets are: {d,e,g}, {a,c,d}, {a,c,f}, {a,d,f}, {c,d,f}, {b,e,f}, {b,e,g}, {b,f,g}, {e,f,g}.

Now we have found out all the frequent itemsets.

TABLE ? THE MATRIX DELETED COLUMN T02 AND ROW H  T01 T03 T04 T05 T06 T07 T08 a 0 1 0 0 1 0 1 b 0 0 1 0 0 1 1 c 0 1 0 0 1 0 1 d 1 1 0 1 1 0 1 e 1 0 1 1 0 1 1 f 0 1 1 0 1 1 0 g 1 0 1 1 0 1 0

V. ALGORITHM COMPARISONS If N is the number of transactions in the affair database, T  is the longest transaction, in the Apriori algorithm, the time of the first time scan database is O(T?N), the time of connecting is O(|Lk-1|?|Lk-1|), the time of pruning is O(|Ck|), the time of counting support is O(N?|Ck|). So the total time of the Apriori as follows: O(T?N)+?(O(|Lk-1|?|Lk-1|)+O(|Ck|)+O((N?|Ck|))(K>1)[4] ?  In the algorithm based on matrix, except content in the first formula ??? we should consider the time of finding the largest frequent itemsets, which is O(|T-MaxK| ? |T-MaxK|?|LMsxK|). So the total time of it as follows: O(T?N)?O(|T-MaxK|?|T-MaxK|?|LMsxK|)??(O(|LK-2| ?|LK-2|)?O(|CK|)?O(N?|Ck|))(1<K<MaxK)         ?  Although in the second formula there is the time of finding the largest frequent itemsets, the LK in the second formula is far less than the Lk in the first, and CK in the second also is far less than the CK in the first. The algorithm based on matrix don?t scan database frequently, which reduce the spending of I/O. So the new algorithm is better than the Apriori in the time complexity.

From the figure we can know that the new algorithm also is better than the Apriori in the space.

Figure 1 Competition in the number of candidates  Now, we compare the new algorithm with two other algorithms: the method based on the tree and the method based on the Cross List. As follows:  TABLE ? COMPETITION BETWEEN THREE ALGORITHMS  Runtime(s) Space The best case Based on the matrix  Best Smaller Small of minsupport  Based on the tree  Better Small Huge volume of data  Based on the Cross List  Good Smallest The incremental data mining  As shown in TABLE ?, all algorithms have their own disadvantages and advantages, and their performance will different when in the different conditions. So, we should choose a suitable algorithm according to the fact.



VI. TAGS The more important of the Data Mining, the more  important of the association rule mining which is the main research topics of the Data Mining at present is. The algorithm based on the matrix is better than the Apriori both in time and space. Through the test, we can know that this algorithm is good at finding the frequent itemsets which support is small. When it happened, its capacity has a great improvement.

