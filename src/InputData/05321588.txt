Structure of the updated ANKE DAQ System

Abstract?The three big experiments at the Cooler Syn- chrotron COSY in Juelich (ANKE, WASA and TOF) perma- nently require an improvement of their data aquisition systems.

We will use ANKE as an example for the overall structure of these data aquisition systems und the improvements in the last years.

We differentiate between three generations of our DAQ sys- tems. The 1st is not used any more. The 2nd uses intel-compatible computers running NetBSD and ?dumb? crate controllers. The synchronisation was done with special PCI modules in the computers with point-to-point connections building a ring. The 3rd generation was introduced with the transfer of the WASA detector from Uppsala) to Ju?lich. It uses special LVDS crates witch can be read out without any software overhead. It required a new synchronisation system consisting of LVDS modules only.

ANKE now uses a mixture of the 2nd and 3rd generation in order to make use of some of the new features but still has to deal with old systems like FASTBUS which make it impossible to use the pure 3rd generation.



I. INTRODUCTION  We differentiate between three generations of our DAQ  systems. 1st: VME processors and ?intelligent? crate con-  trollers running the real time operating system OS-9. For  the synchronisation of the crates a cable bus with special  VME-, CAMAC- and Fastbus-modules was used. 2nd: intel-  compatible single board computers running NetBSD and  ?dumb? crate controllers. The synchronisation was done with  special PCI modules in the computers with optical point-to-  point connections building a ring. 3rd: newly developed crates  with parallel LVDS bus and newly developed digitalisation  modules (various ADCs, TDCs and controllers). The readout is  done by FPGAs in the controllers without any general purpose  CPU involved. Each controller communicates directly with a  central synchronisation master in a star architecture.

The 1st generation is not used any more. ANKE uses a  mixture of generation 2 and 3. It has two new LVDS crates,  several CAMAC (FERA) crates and still one FASTBUS crate.

The two LVDS crates can be used with the 2nd generation  synchronisation system. But this would lead to a rather large  dead time because of the DMA and interrupt overhead (>  60?s). The 3rd generation synchronisation system allows to  operate the LVDS crates with full speed (dead time in the  order of 5 ?s per event). The 1st LVDS crates houses the  new synchronisation system and some F1-TDCs which are  already used in the other two experiments. The second LVDS  crate houses newly developed ADCs for the ANKE-VERTEX-  Detector.



II. 3RD GENERATION OF SYNCHRONISATION  In the first two generations of our DAQ system each single  event was read out by software in a genaral purpose processor.

The deadtime per event cannot further be decreased by use  of faster prcessors. The overall performance does not scale  with the performance of the processors themselves, it rather  depends on interrupt latency and peripheral access. There is a  nearly constant overhead if one wants to read out the data of  each event separately. The higher data throughput of modern  processors can only by used with large blocks of data (several  thousands events together).

Therefore the concept of a third generation of the DAQ was  developed [3]. Basic principle is the avoidance of software for  the readout. All buffer and event management must be taken  over by the hardware (FPGAs).

This concept is in use since 2005 when the WASA detector  was transferred from CELSIUS (Uppsala) to COSY (Ju?lich).

Because of the higher luminosity at COSY and several prob-  lems with the existing DAQ system we decided to build a  (nearly) complete new DAQ system using the 3rd generation  of DAQ and synchronisation system.



III. ANKE DAQ SYSTEM  Although it would be the best for the performance of the  ANKE system we cannot replace all existing DAQ modules.

ANKE is using mostly CAMAC/FERA modules, one FAST-  BUS crate with TDCs and one LVDS crate with F1-TDCs.

Recently we added a LVDS crate with special ADC modules  for the silicon microstrip detector (analog multiplexed signals).

The readout of the two LVDS crates with the 2nd generation  synchronisation system is rather slow because of the unavoid-  able DMA overhead for each single event. The 3rd generation  synchronisation system does not improve the situation with  the old CAMAC and FASTBUS crates but helps very much  to speed up the readout of the LVDS crates.

Fig. 1 shows a sketch of a part of the ANKE DAQ system.



IV. SYNCHRONISATION SYSTEM  The functionality is similar to our old system. The old  system has four trigger inputs and five trigger outputs (the  fifth is the OR of the other four). In some cases this was  not enough, therefore we now have 16 trigger inputs. There  is a veto input but the fast clear has been removed because  it was never used. For testing we have two auxiliary in- and  outputs. A 32 Bit event counter is maintained and its content is  propagated to the front end crates for each event. Performance  2009 16th IEEE-NPSS Real Time Conference TDAP-23     Output Module  Output Module  Detectors  Main Trigger  Logic  Digitizing Systems  Synchronisation System  ECL  LVDS Bus  Fibre  Readout Computer  (PCI)  Readout  Board  R ea  d o u  t B  o a rd  CAMAC  Synch  Slave  Synchronisation  Master  LVDS  Readout  Board  Vertex ADC  LVDS Crate  Controller  TDC  LVDS Crate  Controller  TDC  CAMAC  Controller  Fibre  Fibre  Readout  Board  Fibre  LVDS Bus  Fig. 1. Overall system  statistics (deadtime of each subsystem, number of rejected  triggers) are collected.

The synchronisation system consists of two major types  of modules: one master module and one or more output  modules. These modules reside in one of our LVDS crates and  can be mixed with other DAQ modules. The crate controller  provides the connection to an arbitrary computer for setup and  readout of statistical data but is not involved in processing and  distributing the trigger signals. The master module contains  the input connectors for the trigger signals, veto and all logic  needed for the interlock of the trigger inputs, and the event-  counter. It sends the trigger information and the eventcounter  over the ECL backplane to the output modules. The output  modules are responsible for the communication with the front  end crates. Because we use point to point connections one pair  of connectors is needed for each front end crate.

A. Master Module  The master module (Fig. 2) has NIM inputs for 16 different  triggers and veto. Two auxiliary in- and outputs are available.

They can be used by software e.g. to create soft triggers or  generate an interrupt in the host PC.

Fig. 2. Synchronisation modules  When a pulse arrives at one or more trigger inputs (in-  side the ?trigger acceptance window?) all trigger inputs are  blocked and the trigger pattern is sent as broadcast to all  output modules over the ECL backplane. The event counter  is incremented, its content is serialized and sent over the ECL  backplane to the output modules. The width of the trigger  acceptance window is determined by an external delay cable.

Then the master module waits for the acknowledgments of  all output modules that the front end crates are ready for the  next event. The trigger inputs are unblocked and some statistics  data are written to the output FIFO which can then read out  via the LVDS backplane: event counter, the total dead time  for this event (100 ns resolution) and the number of rejected  triggers during this dead time together with a rough timestamp  (12.5 ns resolution).

B. Output Modules  The output modules wait for the trigger information sent  from the master module. With the 16 Bit trigger pattern a  64k*8bit memory is addressed. The content of the addressed  cell is used as a mask for the eight outputs of the module. Thus  it is possible to trigger only the front end crates which may     Event Number 32 Bit  Trigger ID 16 Bit  to Frontend  from Frontend  Trigger ready for next Event  Deadtime  Fig. 3. Communications protocol between output modules and front end crates  have (according to the physics and the trigger logic) interesting  data. All other front end crates will never notice this particular  trigger.

The simple communication protocol between a output mod-  ule and a crate controller is shown in fig. 3. The first (rising)  edge sent to the front end crate defines the trigger time. After  the trigger edge the erialized event number and the trigger  pattern are sent out.

The trigger slaves respond simply by activating the busy  line. After the readout the busy line is released and the system  is now ready for the next event. The list of the selected front  end crates and the dead time of each front end crate is written  to the output FIFO and can be read by the system controller.

C. Slave Modules  The outputs of the output modules are connected (point-  to-point) to one slave module for each crate. In case of the  LVDS crates this is the crate controller itself. For the other  crates (CAMAC and FASTBUS) we use a PCI module inside  the associated computer. In case of VME a special VME slave  is available.

The LVDS controllers and the other synchronisation slaves  work different: The LVDS controllers use the first edge sent  from the output module as trigger time. They generate a  time stamp (from there internal TDC chip) and send it to all  modules in the crate. Then they read out the whole crate and  store the data into th output FIFO.

The PCI modules ignore the time of the first edge, they  simlpy receive the event number and the trigger pattern and  generate a PCI interrupt. It is up to the software to read out  the data and release the busy line.



V. SYNCHRONISATION SYSTEM  The only new DAQ modules in the ANKE system are the  ?VERTEX Modules? (Fig. 4). These are specialised ADC  modules for the readout of analog multiplexed signals coming  from silicon microstrip detectors.

Fig. 4. Vertex ADC modules  Each module has two independend channels (galvani-  cally decoupled) which digitise signals at a frequency of  max. 10 MHz. They contain sequencers for the readout of  the VA32TA2 and MATE3 chips. Common mode rejection,  pedestal subtraction and zero suppression is done in the FPGA.

