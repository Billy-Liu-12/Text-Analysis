CodeWeb: Data Mining Library Reuse Patterns

Abstract  Developers learn to use a sofnvare library not just from its documentation but also from toy examples and exist- ing real-life application code (e.g., by using grep). The CodeWeb tool takes this simple idea firther by a deeper analysis of a large collection of applications to see what characteristic usage of the library is like. We demonstrate the tool by showing how the KDE core libraries are used in real-life KDE applications. Moreover, we look at a re- cently developedfeature that helps software developersport an application from an old version of a library to a new one.

1 Introduction  While popular commercial libraries, such as MFC, are usually well-documented, open source or internally devel- oped libraries are often not. In either case - and particu- larly in the latter - developers today learn to use a software library not just from its documentation but also from toy ex- amples and existing real-life application code (e.g., by using grep or looking at browse information).

The CodeWeb tool [4] takes this simple idea further by a deeper analysis of a large collection of applications to see what characteristic usage of the library is like. Specifically, the tool uses data mining techniques to discover so-called ?Teuse patterns?. Reuse patterns can be used to guide and check library usage. By combining reuse patterns with the library reference (which we assume exists - at the very least as comments in the code), we start to approach the knowledge offered by hand-written tutorials combined with the depth of real-life code examples.

We demonstrate our approach by showing how the KDE  core libraries are used in over 75 real-life KDE applications.

(KDE is a graphical desktop environment for UNIX.) More- over, we look at a recently developed feature that helps soft- ware developers port an application from an old version of  a library to a new one. Specifically, we consider porting KDE applications from version 1 of the KDE core libraries to version 2.

2 ReuseTable  A reuse table shows the percentage of existing appli- cations that use various library classes. If a library class has been used by many applications in the past, then it is likely to be useful in future applications also - and so it is certainly worth knowing about. For example, we see from Figure 1, (a) that KApplication is used by 97.5% of all KDE 1 applications and 76.8% of KDE 2 applications.

Consequently, we should certainly consider using this class in any new KDE application that we write.

The reuse table also shows two usage deltas for each li- brary class. Roughly speaking, if a usage delta is a large positive (negative) number, then this indicates that there is a significant increase (resp. decrease) in the use of that class in KDE 2, so one may consider using (resp. no longer us- ing) this class when porting an application from KDE 1 to KDE 2.

3 ReusePatterns  Reuse patterns show characteristic ways in which library classes have been used in existing applications. Clicking on the ?Patterns? link to the right of KApplication in Fig- ure 1, (a) shows the reuse patterns in Figure 1, (b). Reuse patterns are basically if/then rules which indicate that appli- cation classes that contain the antecedent tend to also con- tain the consequent. For example, we see that application classes with KApplication in the code tend to also contain exec() and KCmdLineArgs. Rules of this form - which are known as association rules - are of extensive interest in the data mining community [ 13.

For each rule, four percentages are shown. The first two, under V1 and V2 usage, indicate the ?strength? of the rule  0-7695-1050-7/01 $10.00 0 2001 IEEE    Q S t l . m p I G ? & / B l I  96 25% -10% +17% KQndUneArp [C~de/PaUm&l 0.0% 4 8 8 %  466%  96.25% -8.2% 0 0%  848% 86 1%  0.0% 82 3% 0.0%  82.3% 63.3%  68 4% 658% 0 0%  658% 848% 48 1% 68.4% 36 7% 59 5% 0.0%  74 7%  97.5%  468%  4 4 6 % -56% -7.7%  -20.7% + r s m -9.5%  48.0% -14.3%  +1.5% +]SA% ? -5.2% -5.0% 1608% -66%  -26.4% 4 . 5 % -108% +19.3% -5.1%  +536% -12.7%  43 .1% 49% -1.7% -69%  46.2% -8.6%  c5.m +15.5% +19.0% +10.3% +12.l% +60.3% 4 . 6 %  -13.8% +17.246  -86% +24.1% +12.1% 165.5% -13.8%  +n.m  ZhaneDtlral- +319% 4 5 % +542% +279% +34.1% 4 5 % + i r m  -28% 4 7 5 %  +243% 48 .3% +253% 4 3 %  +246%  addAmhw2 48% +232% -14.5% -58% +139% -32%  00% +XO% +131% +156% +I1675 K?2uJkneOpuuw 00%  pwseclAm(I +230% 4 3 %  -182% 4 1 % +mA% +154% +11.3% 4 0 % +%3% -67%  +179% +WO% k?m& +17.5% +10 1% ER?* 4 3 %  -36% rerd?Enu*(l +29% +148%  +ir.4% +Ira%  Figure 1. CodeWeb screenshots.

in KDE 1 and KDE 2. The second two are usage deltas for each reuse pattern -analogous to the two in the reuse table.

For example, Figure 1, (b) clearly shows the usage of new KDE 2 classes such as KCmdLineArgs and KAboutData, whenever KApplication is used, as is indicated by the large positive usage deltas.

4 Related Work  Much of the research on tool support for software reuse has focused on component retrieval systems [2, 51. How- ever, such systems are limited: (1) the user may not know what kind of components to look for; and (2) even if the user does find the components of interest, they may not work to- gether to accomplish the desired task - and if they do, the component retrieval system doesn?t tell the user how.

Closer to our approach is the work done on exemplars [3] and reengineering libraries [6]. While the first method ad- dresses the same problem we do, it requires sophisticated domain analysis by an expert. The second method analyses library usage in existing applications in an automated man- ner, but the method is designed to help developers reengi- neer the inheritance hierarchy of a framework rather than help users develop applications using a framework.

5 Conclusions and Future Work  We have described a tool, CodeWeb, for data mining li- brary reuse patterns. Preliminary feedback from KDE de-  velopers has been encouraging. One developer said ?I used to use CVS Web to ?cheat? (basically find where someone else had done something that I wanted to do). Codeweb makes it ea$y to ?cheat? which is what design patterns are all about in my opinion.? In future work, we shall make CodeWeb more problem-oriented so that one can enter a query such as ?double buffering? and the tool will (1) search for code related to double buffering (perhaps by using CVS comments); and (2) data mine the search results to iden- tify characteristic ways in which KDE developers have done double buffering in the past.

