An Efficient Partial Key Pre-distribution Scheme for Chain Oriented Sensor  Networks

Abstract  Resource-constraint nature of Wireless Sensor Network  (WSN) makes the security issue certainly a big challenge.

An efficient key management scheme is the pre-requisite to ensure security in WSN. In this paper we present a secured key management protocol (SecCOSEN) adopted on COSEN, a chain oriented sensor network, which is used for periodic data collection. SecCOSEN uses partial key pre-distribution and symmetric cryptography techniques.

SecCOSEN shows high resilience to different security attacks. The protocol outperforms other random key pre- distribution protocols in the sense that it requires lower space, lower communication overhead and offers very high session key candidates.

1. Introduction   Security is one of the key concerns for wireless sensor  networks (WSN) nowadays. This is because of the envisioned growth in utilizing sensor networks in a wide variety of applications ranging from hospitals or emergencies to battle fields. Most of the usage areas of WSN are sensitive and thus prone to different kinds of attacks. A secured key management protocol is the pre- requisite for a secured WSN.

Key management is the process by which crypto- graphic keys are generated, stored, protected, transferred, loaded, used, and destroyed. The main objective of key management is to establish and maintain secure channels among communicating parties. Typically, key management schemes use administrative keys for the secure and efficient (re-)distribution and, at times, generation of the secure channel communication keys to the communicating parties. Communication keys may be pair-wise keys used to secure a communication channel between two nodes that are in direct or indirect communications [2?5], or they may be group keys shared by multiple nodes [6, 7].

Network keys (both administrative and communication keys) may need to be changed (re-keyed) to maintain secrecy and resilience to attacks, failures, or network topology changes.

Key management entails the basic functions of analysis, assignment, generation, and distribution [6, 7, 21]. During key analysis, keying requirements are analysed to determine the required number of keys for the network as well as the number of keys needed by each node. Key assignment refers to the mapping of keys to different parties. In the next step generation of administrative keys may take place once or multiple times over the lifespan of the network. The generation of communication keys is the responsibility of the communicating parties. In all cases, the key generating node(s) must be trusted by all key- receiving nodes. In static key pre-distribution schemes, administrative keys are generated by a key server and loaded into nodes prior to deployment [2]. The last step, key distribution, refers to the delivery of keys to their designated nodes after they have been generated and assigned to the nodes. The distribution of communication keys usually takes place after the network has been deployed. Communication keys are used for a short period of time and should be regularly updated of network keys.

In this paper we propose a secured key management protocol which can be adopted on COSEN [1] ? a chain oriented data collection protocol for WSN.  It is shown in [1] that COSEN outperforms other hierarchical protocols like LEACH [8] and PEGASIS [9] in both the cases of energy consumption and time requirements respectively.

The key management scheme presented here is based on partial key pre-distribution and uses symmetric key for encryption and decryption.

2. Related works   Traditionally the four basic functions, discussed in  section I, have been tightly coupled, where all of them were performed by a centralized server or collaboratively by the nodes in a network, with each node performing the same functions. Recent proposals, e.g., [2, 5, 6, 7], have moved to decouple these functions to various degrees.

Such decoupling can immensely benefit sensor networks due to their large scale, high vulnerability to attacks, and limited resources.

Several key distribution schemes have been proposed in WSN. Key management schemes in sensor networks    can be classified broadly into dynamic [21] or static [2, 3, 5] solutions based on whether re-keying (update) of administrative keys is enabled post network deployment.

Schemes can also be classified into homogeneous [2, 3, 5] or heterogeneous [24] schemes with regard to the role of network nodes in the key management process. All nodes in a homogeneous scheme perform the same functionality; on the other hand, nodes in a heterogeneous scheme are assigned different roles. Homogeneous schemes generally assume a flat network model, while heterogeneous schemes are intended for both flat and clustered networks.

Other classification criteria include whether nodes are anonymous or have pre-deployment knowledge (location, degree of hostility, etc.) is imparted to the nodes. Another classification criteria includes asymmetric (public key) cryptography or symmetric cryptography. Although there are some works done in [10, 11, 12] to customize public key cryptography and elliptic key cryptography for low- power devices, such approaches are still considered as costly due to high processing requirements. The last classification criterion includes pre-distribution [2, 3, 5, 14, 17, 19, 24] or post distribution of secret keys. Recent research suggests that symmetric secret key pre- distribution is possibly the only practical approach for establishing secure channels among sensor nodes [17].

Eschenauer and Gligor [2] proposed a probabilistic key pre-distribution technique to bootstrap the initial trust between sensor nodes. The Eschenauer-Gligor scheme is further improved by Chan, Perrig. and Song [3], by Du, Den, Han and vershney [19] and by  Liu and Ning [20].

Proposed protocol, SecCOSEN, can be classified by the characteristics of i) dynamic nature in re-keying of network keys (both administrative and communication), ii) heterogeneous as different nodes (member nodes, lower- level leaders, base station) perform in different ways, iii) being anonymous as the scheme does not assume any pre- deployment knowledge like location etc., iv) symmetric cryptography and v) pre-distribution of partial keys.

3. Overview of COSEN   In COSEN, all the sensors make up several fixed-  length chains. A leader is selected in each chain. Sensor data are aggregated and routed along the chains towards the leader of the chain. One of the chain-leaders then collects the aggregated data and sends it to the BS.

The architecture of COSEN protocol can be described in two phases: (i) chain formation phase and (ii) data collection and transmission phase. During the chain formation phase several chains called lower-level chains are formed including all the live nodes in the network and then a lower-level leader is selected in each chain based on some criteria. These lower-level leaders in turn form a higher-level chain from which a single leader called higher-level leader is finally selected depending on some   Figure 1.  Data and token passing in a chain    parameters to transmit to the Base Station (BS). On the other hand, data collection and transmission phase includes the node level data collection, data aggregation and the final transmission of information to remote BS. A detailed description of the two phases can be found at [1].

At the beginning of each round, each leader in a lower- level chain sends a token towards the one end indicating the beginning of data transmission phase. Node at one end of the chain sends its data toward the leader node through intermediate nodes as shown in figure 1.

4. SecCOSEN   The key management protocol SecCOSEN is based on partial keys pre-distribution and symmetric cryptography.

On account of resource-constraint nature of sensor network, both pre-distribution of keys and symmetric cryptography are appropriate with WSN. Furthermore, we do not assign keys randomly from a key-pool as in [2, 14]. Consequently number of keys generated is much lower when compared with [2, 14]. Nonetheless, the key management system remains secure because large number of keys can be generated by the sensors participating in a chain and each pair of sensor nodes uses different communication key.

Another important feature of the scheme is that two communicating nodes always use a new secret key for data encryption/decryption in each round. This feature enables WSN to achieve resilience to attacks as well as data freshness without generating a long nonce. The scheme is depicted in figure 3.

We propose each of the sensors keeps a set of partial key rather than the set of full keys. This has a two-fold advantages ? i) lower storage requirement and ii) even if a sensor is captured by an attacker, it cannot obtain the encryption/decryption keys. Two neighboring sensors establish their encryption/decryption key concatenating their partial keys.

A key pool of partial keys is generated at the base station prior to the deployment of sensors. The size of the key pool is an important factor to be considered. If we consider that an encryption/decryption key should be 32 bits long and the key pool contains 1000 partial keys of 16 bits long, the total memory consumption for storing all the partial keys in a sensor is ((32/2)*1000) bits or 2KB. It should be noted that, the Berkeley Mica Motes (one of the    oldest sensors) has 128K bytes of program storage, and 4K bytes of SRAM. Although SecCOSEN forces each sensor node to consume all the partial keys generated at BS, soon after the first chain formation phase a sensor can delete all the partial keys except the nominated keys for it. Thus if a sensor stores 50 half keys, it requires only 100 bytes to store the partial keys. Note that, using n partial keys, two neighboring nodes can establish up to 22n secret session keys. Number of session key candidates is one of the important performance evaluations metric. Number of session key candidates simply refers to the minimum number of session keys possibly being created for data encryption/decryption.

In SecCOSEN different notations and conventions are used. They are provided in figure 2. Now, before deployment, each sensor is loaded with key pool of partial keys P, list of identifiers of the partial keys L, a single network key NK and a unique identifier ID. Note that, if a key pool contains ?  number of partial keys, ( ?2log ) bits require identifying each of the partial keys. Thus a sensor node is loaded with around 2.7KB of partial keys and their identifiers. Soon after the chain formation each node requires 144 bytes (assuming each node keeps 50 partial keys and deletes the rest). The single network key and the unique identifier of each node are used for distributing the administrative keys securely and authentication purposes respectively.

During the chain formation phase of COSEN, SecCOSEN authenticates each sensor in a chain. Most of the sensor networks are used to protect or monitor critical infrastructures. In such structural monitoring applications, it would be a reasonable assumption that the sensor field is under super surveillance only during the deployment phase which usually does not last too long [18]. That is, we assume that adversaries do not actively catch or attack individual sensor nodes in this phase because otherwise they would run a high risk of exposing themselves. That?s why we assume a single network key is sufficient in early deployment phase. However, an adversary might send strong signals as HELLO messages to tempt a sensor to consider it as its neighbour and thus become a member of a chain. For this reason, we propose a three-tier authentication check after forming a chain. All members of the chain send their IDs (encrypted by the network key) to the leader of the chain. After collecting all the IDs, the local-leader sends all the IDs along with its own ID to the BS for authentication. If BS authenticates each member of the chain, it randomly chooses a predetermined number of partial keys and constructs an LPK (please refer to fig 2) using the ids of those partial keys. BS then sends the LPK   (encrypted by the network key) to the lower-level leader of he chain. The lower-level leader then disseminates the LPK (encrypted by the network key) in the same fashion described  in  figure  1. Once  sensor node  comes  to know     Figure 2. Notations and conventions   which partial keys it will use with its neighbor, it deletes rest of the partial keys and their corresponding ids.

Now the sensor nodes are responsible for establishing communication keys. In COSEN, a sensor node being a non-leader, only communicates its neighbor towards the lower-level leader of the chain. Furthermore, all the nodes of a chain share the same list of partial keys. To establish communication keys with its neighbor, a node A creates an order list AO which maintains the same cardinality with LPK but the order of the ids are different, and sends it (encrypted by the network key) to its neighbor B. B sends a similar order list BO  to A. Now both A and B can construct secret keys for each round as depicted in figure 3.

In the higher-level chain, the lower-level leaders can construct their session keys in a similar way if they share some common partial keys. This can be done by the BS when assigning LPKs.  It should keep some common partial keys in each LPK such that the local-level leaders can construct a secure communication key among themselves. When a new chain is reconstructed the aforementioned procedures take place.

N : number of sensor nodes deployed Ci  : ith chain LCi  : lower-level leader of chain Ci CL : avg number of sensors in a chain (chain length) n : number of chains (=N/CL) NK : network key A, B : sensor nodes BS : base station KP : key pool of partial keys KLi : key list of chain i PKi : ith partial key idn : identifier of nth partial key IDx : unique identification of node x L : list of ids generated at BS during pre-distribution LPKi : list of ids nominated for chain i E : encryption function OA : Order of ids of partial keys  selected by sensor node A RA : node A?s random function that Generates OA ENK(M) : message M being encrypted by  network key NK t ABK  : secret key established between  sensor nodes A and B for t-th round || : concatenation function A?B : node A sends message to node B    Figure 3.  SecCOSEN protocol    5. Discussion and evaluation   The first thing to consider, while designing a routing  protocol and imposing security constraint upon it , is the number of messages to accomplish security measures in a routing protocol. In order to reduce the total number of messages sent and thus save energy, sensor readings from multiple nodes may be processed at one of many possible aggregation points. An aggregation point collects sensor readings from surrounding nodes and forwards a single  message representing an aggregate of the values.

Aggregation points are typically regular sensor nodes, and their selection is not necessarily static. Aggregation points could be chosen dynamically for each query or event, for example. It is also possible that every node in the network functions as an aggregation point, delaying transmission of an outgoing message until a sufficient number of incoming messages have been received and aggregated. Note that COSEN choses the later one. Also note that in SecCOSEN two neighbours are not required to send messages to get each secret key.

Pre-distribution Before deployment, each sensor is loaded with  (i) a pool of  partial keys, P = {PK1, PK2, ?,  PKk} which is generated at BS (ii) a list ,,{ 21 ididL = ..., }kid that contains an identifier for each of the keys of key  pool P such that nn PKidL =)(  for 1=n , 2, 3, ?, k (iii) a network key NK.

(iv) a unique identification number iID  for i = 1, 2, 3, ?, N  Chain formation phase At the end of each chain iC  (i = 1, 2, ?, n) is formed, its member nodes send encrypted IDs to the Local-leaderLCi :  A? LCi : )( ANK IDE where iCA ? Local-leaderLCi collects all the IDs and then sends them along with its own ID to the base  station for authentication: LCi ? BS : ({NKE iAID ii CA ? , iLCID })  Following authentication base station sends encrypted list of ids nominated for chain Ci: BS ? LCi :   )( iNK LPKE  Receiving the LPKi, LCi disseminates LPKi to all member nodes of the chain using the same fashion depicted in Fig. 1.

Now each sensor member of the chain deletes the partial keys that are not mapped by LPKi from P to find out its key list :  =iKL )({{ xidLP ? ix LPKid ? }}  Data collection phase To establish an encryption/decryption key, two sensor nodes A and B  (where iCA? & iCB ?  ) act as follows:  ? A ? B:  ))(()( iANKANK LPKREOE =      where AR  is a random function that changes the order of the elements remaining the cardinality same.

? B ? A: ))(()( iBNKBNK LPKREOE = ? Now both A and B compute the secret key for the first round as  ]))[(||])[(( tOLtOLK BA t AB =  where || means concatenation and ][tOA  returns the t-th id of OA. For the next round A and B compute the secret key as ]))1[(||])1[((1 ++=+ tOLtOLK BA  t AB  and so on.

Power management in sensor networks is also critical.

At full power, the Berkeley Mica mote can run for only two weeks or so before exhausting its batteries.

Consequently, if we want sensor networks to last for years, it is crucial that they run at around a 1% duty cycle (or less). Similarly, since the power consumption of the radio is three orders of magnitude higher when transmitting or listening than when in sleep mode, it is crucial to keep the radio in sleep mode the overwhelming majority of the time. Also, communication bandwidth is extremely dear: each bit transmitted consumes about as much power as executing 800?1000 instructions [16], and as a consequence, any message expansion caused by security mechanisms comes at significant cost. That?s why we emphasise on calculating the future secret keys by collecting the order list from a sensor?s neighbour, rather than sending and receiving partial keys in each round.

Besides these, we consider several evaluation metrics namely (i) number of session key candidates (ii) scalability (iii) key connectivity (iv) resilience (v) storage complexity (vi) processing complexity and (vii) communication complexity to evaluate SecCOSEN.

Number of session key candidates simply refers to the minimum number of session keys possibly being created for data encryption/decryption. Figure 6 shows the exponential increase of session key domain with respect to the number of partial key assigned to a node. This means that finding out a secret key even knowing the LPK of a chain is impossible.

Scalability is the ability to support larger networks.

Larger networks can be supported if there is enough storage for the required security credentials which is related to storage complexity of the solution. Figure 6 also implicitly shows the scalability performance of SecCOSEN. Every sensor needs only 100 partial keys to store (which requires only 325 bytes ) one of the 20,000 session keys can be generated for a large sensor network.

Resilience can be defined in one of the following ways: (i) probability that a link is compromised when an adversary captures a node, (ii) number of nodes whose security credentials are compromised when an adversary captures a node, or (iii) number of sensor nodes required to be captured to compromise whole WSN. Third one is represented as n-secure meaning that it is enough to capture n+1 nodes to compromise whole WSN. As these values increase, network becomes less secure; therefore, resilience decreases. Note that in SecCOSEN, even if an adversary captures a node it cannot find out the encryption/decryption key as all the keys that remain in a sensor node are partial keys rather than full secret key.

Key connectivity, the most important factor for random key pre-distribution schemes, considers the probability that two (or more) sensor nodes store the same key or keying material to be able to establish pair-wise, group-wise or network-wise keys. Note that in SecCOSEN all the members of a chain share the same LPK therefore share  the same partial keys. Thus connectivity is always guaranteed in this scheme.

Efficiency of the solutions is generally measured with their storage, processing and communication complexities.

Storage complexity is the amount of memory units required to store security credentials. It is shown beforehand that SecCOSEN requires very low storages (144 bytes to preserve 50 partial keys) to keep the partial keys and their identifiers. Figure 5 depicts the memory requirement of SecCOSEN.

Communication complexity is measured as number and size of packets sent and received by a sensor node. Note that, in SecCOSEN a node communicates with its neighbor using only the identifiers rather than partial keys. Thus the packet size is relatively low.

Resilience against node capturing is defined as the percentage of secure links that are compromised after a certain number of nodes are captured by adversaries.

SecCOSEN shows a high resilience as the candidate key domain exponentially increases with the linear increase of number of partial keys.

Besides these, we examined all the security attacks up on SecCOSEN and found that the scheme handles each and every security attack. These could not be discussed here due to page restrictions.

6. Conclusion   In this paper, we first proposed the notion of pre-  distribution of partial keys for secured key management scheme and then proposed the detailed protocol to employ this on a chain oriented data collection sensor network, COSEN. Each sensor node establishes a pair-wise secret key for data encryption and decryption. The protocol outperforms other random key pre-distribution protocols in the sense that it requires lower space (due to partial keys rather than full keys stored in each sensor), lower communication overhead (as path-key establishment phase is absent in this protocol), and offers very high session key candidates.

