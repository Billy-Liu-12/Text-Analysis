An Efficient Algorithm for Updating Association Rules with Incremental Transactions  and Minimum Support Changes Simultaneously

Abstract? This paper proposes a new algorithm FIM_AIUA, which updates association rules with incremental transactions and minimum support changes simultaneously. The algorithm expands FIM algorithm and AIUA algorithm, improves the efficiency and corrects the mistakes of My_IUA algorithm.

Moreover, it modifies FIM algorithm with a new argument and presents a new function fim_aiua_gen() that rewrites the function aiua_gen() of AIUA algorithm. Experiments with real transaction data of a supermarket show that our proposed algorithm FIM_AIUA is efficient and outperforms both My_IUA algorithm and Apriori algorithm.

Keywords-Association Rules;Incremental Transaction;Minimum Support Change; Data Mining;

I.  INTRODUCTION Mining association rules is one of the vital data mining  techniques. It leads the discovery of interesting associations among items in large transactional databases. An influential algorithm for association rules mining is Apriori proposed by R.Agrawal and R.Sirkant[1]. It employs an iterative approach known as a level-wise search to find frequent itemsets. The important Apriori nature of frequent itemsets is used to reduce the search space. Since then, association rules mining has been well studied with many algorithms like DHP[2], FP-growth[3] and others[4,5].

With massive amounts of new incremental transactions, the updating of association rules is an important problem. In real world applications, user always adjusts the minimum support when new transactions are inserted into databases [6].

Because the incremental transactions increase the number of transactions of the original database, which decrease the support of original frequent itemsets. Thus, user is likely to decrease minimum support to make original association rules still valid or increase minimum support to discover more new association rules. Therefore, it is essential to update association rules with incremental transactions and minimum support changes simultaneously. Gao et al. presented My_IUA algorithm[6] that expanded IUA algorithm[7] to meet this end. However, it has mistakes in dealing with original frequent itemsets. In addition, as it is based on IUA algorithm[7], it requires many scans for the whole database and multiple iterations to generate many useless candidates.

But the original database is always very large and has many candidates. Thus, it is time-consuming and inefficient.

To update association rules with incremental transactions, Cheung et al. adopted the idea of Apriori algorithm and presented FUP algorithm[8], which is re-using frequent itemsets of previous mining to update with frequent itemsets of an incremental database. But it still needs to scan the original database multiple times and the original database is always very large. To improve the efficiency of FUP algorithm, T.F.Gharib et al. presented FIM algorithm[9], which requires only one scan for the original database and reduces the generation of candidates.

To deal with minimum support changes, Feng et al.

proposed IUA and a new function                      to generate new candidates[7].But this function require multiple iteration to generate many useless candidates and prunes useful frequent itemsets[6].To improve the efficiency of IUA, Yang et al. proposed a more efficient algorithm AIUA[10].He presented a new function            , which joins the corresponding frequent itemsets and avoids the iteration to generate many useless candidates.

In this paper, we proposed a new algorithm FIM_AIUA, which expands FIM and AIUA algorithm to update association rules with incremental transactions and with minimum support changes simultaneously. Our proposed algorithm improves the efficiency and corrects the mistake of My_IUA algorithm. This paper is structured as follows. In Section II, the definition and related concepts about updating association rules are introduced. In Section III, FIM_AIUA algorithm is proposed in details. In Section IV, experiments with transactions data of a supermarket are given to illustrate our algorithm is efficient and outperforms both My_IUA and Apriori algorithm. In Section V, a brief conclusion is given.



II. DEFINITION AND RELATED CONCEPTS  A. Update association rules with incremental transactions Let      be frequent itemsets in the database       ,       be  frequent itemsets in the incremental database      ,    be the minimum support,     be the number of transactions in and               be the support of item    in       .After some updates, an incremental database       is added to the original database       ,and    is the number of transactions in    . An itemset      is frequent in the updated database               if and only if                                        .Thus, the essence of update association rules with incremental transactions is to find the  L DB s  D SupportX . DB  db DB d db  X DBUdb )(. dDsSupportX +??  )( 1jLgeniua ?  ()genaiua ?  X  dbL db  DB  2012 Third Global Congress on Intelligent Systems  DOI 10.1109/GCIS.2012.42     frequent itemsets    that all its subsets satisfy the above equation. F.Gharib et al. analyze four possibilities of itemset  in the               and show in the table below [9].

db/DB                   Frequent                          Infrequent Frequent              1.Frequent            3.Frequent or Infrequent Infrequent   2. Frequent or Infrequent       4.Infrequent Case 1: if an itemset             and               , FIM adds     to and removes it from both     and       .

Case 2:FIM gathers each itemset              but                then it scans      only once to update                    .If it satisfies the equation                                        ,then adds      to     .

Case 3:FIM also gathers each itemset               but then it scans       only once to update                  .If it satisfies equation                                         , then adds     to     .

Obviously, the itemset   of Case 4 cannot change the association rule because it is infrequent in               .

Finally, all frequent itemsets in                are Case 1,2 and 3.

B. Update association rules with minimum support change Let      be original frequent itemsets of       ,       be new  frequent itemsets of        ,     be the number of transactions in ,   be old minimum support and    be new minimum support. Updating association rules with minimum support changes can be divided into two situations: (1)           , find the new frequent itemsets      , Note that a frequent itemset in       may not be that in       .

(2)           , find the new frequent itemsets       , Note that an itemset      not in       , may become a frequent itemset in       .

As to          , it is intuitive to find new frequent itemsets: Algorithm: Input:         ,       ,    , Output: Method: (1)                                           do begin (2) (3) end (4) Back to the other situation           , Feng et al proposed a new algorithm IUA[7]. In the first database scan, they calculated the support of 1-item that not in     , found frequent 1-items  among them, and obtained the new frequent 1-items . Then, they divided       into three categories:  1.

2.

3.

And their corresponding candidate itemsets are                 .

To generate             , they use the function of Apriori Algorithm. To generate      , they presented a new function                      , which requires multiple iterations to combine       with        ,                       and generates many useless candidates. In the prune step, it has a mistake in pruning the useful frequent                      those are composed of one item of     and            items of      , one item of      and  items of     [6].



III. PRESENTATION OF ALGORITHM  A. The problem of My_IUA algorithm (1) The problem of                  and In this situation, all original frequent itemsets? support  of original database        need to be updated in                .But My_IUA algorithm doesn?t update their support and simply finds itemsets from      those satisfy                                      .

Also, as it is based on IUA, it requires multiple iterations to generate many useless candidates and scans whole database  many times. But the original database is always very large and has many candidates. Thus, it is time- consuming and inefficient.

(2) The problem of                  and In this situation, we have the following lemma, and its  correctness is proved: Lemma  1 An itemset      in original frequent itemsets      of is not necessarily frequent in whole database under           . (   ,     are number of transactions in       ,      ) Proof.  Based on the definitions of frequent itemsets, an itemset     is frequent in the                  if and only if it satisfy .  .   .And an itemset     of     satisfy the equation                                    . As the conditions are  and                    , thus even if                                    , does not necessarily satisfy the equation .Thus, we have lemma 1.

According to lemma 1, unlike the My_IUA algorithm, original frequent itemsets      of       are not necessarily frequent in                 . However, My_IUA still regard       as a part of new frequent itemsets        in                and does not update new frequent itemsets of      in                under    .

Besides, the join step of                               is same with ,which requires multiple iterations to combine  with        ,                      and generates many useless candidates. Thus, it is also time-consuming and inefficient.

B. Our expansion to                and In this situation, all original frequent itemsets      of  need to be updated. Our proposed algorithm expands FIM algorithm[9] and treats the frequent itesmsets of        and separately. First, we find the itemsets      of     those only satisfy                                  .Next, we find frequent itemsets  of       those only satisfy                                  by Apriori algorithm.Finally,we modified FIM algorithm[9] with a new argument       to discover new frequent itemsets of under     from       and       .Note that our proposed algorithm scan        only once, which is more efficient than My_IUA.

C. Our expansion to                and In the case        , both IUA and AIUA algorithm face  the original database     , which means the original frequent itemsets       are still frequent under     .  However, according to lemma 1, the original frequent itemsets      of        are not necessarily frequent in               under    .Thus, we need to divide        of                  under     into three new categories:   DB  'L  L  'L  X  dbL  'L  kL DB  21211 ,...,2,1,'', mkLcLc =??  kL 'kL ss <' 'kL 2,...,2,1 mk =  X kL 'kL  ss >'  DB kL s 's 'kL  );;1( 1 ++<= kmkkfor }'.,{' DsSupportXLXL kk ???=  'kk LAnswer ?= ss <'  'kL  1L ''1L  ''' 111 LLL ?= }{),1(},,...,,{ 121  1 LikjjiiiL jkk ????= }''{),1(},,...,,{ 121  2 LikjjiiiL jkk ????= ,,,,},,...,,{ 21212121  3 ??? =?=????= ccccccciiiL kk 321 ,, kkk CCC  21 , kk CC ()genapriori ? kC  jL 2 jkL ?  DBUdb  LX ? dbLX ? X  LX ? dbLX ? db SupportX .

)(. dDsSupportX +?? X dbLX ? LX ?  DB SupportX .

)(. dDsSupportX +?? X  DBUdb X  )( 1jLgeniua ? 11 ??? kj  itemsetsk ? 1L )1( ?k ''1L ''1L  )1( ?k 1L  ss <' DB  kL  dbDB ? kL  dbDB ? ss >' kL DB  DB db kL  DsSupportX DB ?? '.

DB kL  db dsSupportX db ?? '.dbL  dbDB ? ss <'  DB 's  's 'kL dbDB ? 's  jL  jkL ? 11 ??? kj  dbDB ? ss >'  DB dbDB ?  dbDB ?  kL DB dbDB ?  X kL DB dbDB ?  D d DB db  X dbDB ? )('. dDsSupportX dbDB +??? X kL  DsSupportX DB ??.

()__ geniuaMy )( 1jLgeniua ?  D s 's  ss >' 'kL 2,...,2,1 mk =  'kL DB  'L  DBUdb  . ' ( )DBX Support s D d? ? +  dbDB ? ss <'  ss <' DdD >+ DsSupportX DB ??.

dbDBSupportX ?.

)('. dDsSupportX dbDB +???  dbDB ?'s 's DBkL dbL  DB  kL  kL  kL 'kL dbDB ?  dbDB ?  ss <'  's     Let {all frequent 1-items of         }; {all 1-items in      }    {all 1-items of       exclude    };   Thus we have three categories: 1.

2.

3.

and their corresponding candidates are                  and          .

To generate                 ,we still use function    To generate       ,we presented a function                                , which rewrites the function                      of AIUA[10].

D. Our proposed function The function                        is described in details[10] but  it faces original database    . But we now face the updated database                .Thus, we need to rewrite this function and presented a new function                                , which can be described as follows:  are divided into three categories:       are   -itemsets those are composed of one item of       and           items of      ;  are    -itemsets those are composed of one item of and           items of        ;          are rest candidate     -itemsets.

The generation of          is divided into three situations: (1)           ,           is generated by the function  :   a. Join:    insert into select                              from                         ;   b. Prune: for all itemsets                do for all 1-items    of     do if                  then delete     from       ;  (2)           ,           is generated by the function  :   a. Join:   insert into select  from where                               ;  insert into select  from where                                ;  insert into select from where                               ;   b. Prune: for all itemsets                 do for all 2-items     of     do  if                 then delete     from         ;  (3)          ,         is generated by the function   : a. Join:  insert into select   from  where   insert into select   from where   insert into select   from where   b. Prune: for all itemsets                do for all            -subsets     of if                    then delete     from         ;  E. FIM_AIUA Algorithm The main idea of FIM_AIUA algorithm can be  described as follows: Input:           : the original database  :  the number of transactions of :  the incremental database  :  the number of transactions of :  the old minimum support  :  the new minimum support :  the original frequent itemsets in the original  database        , Output:        : all new frequent itemsets in                  under Algorithm: (1) if              then do begin do begin  end for  (2)   Find all frequent itemsets of       under   by using the Apriori algorithm only on      .

(3)    for all  if                 then    new kC 3 new  kC  2=k newC32 )'',(2__ 11  newnew LLgenaiuafim newC32  1.,1. itemqitemp qLpL newnew '', 11 newCc 32?  c )'( 1Ls ? c  newC 32  3=k newC 33  k newL1 ( 1)k ? ''1  newL new  kC 33 k ''1newL  ( 1)k ? newL1  new kC 32 k  new kC  ),,(3__ 32   newnewnew LLLgenaiuafim newC 313  2.,2.,1. itemqitempitemp qLpL newnew 32  2 ,  1.1. itemqitemp = newC333  2.,2.,1. itemqitempitemp qLpL newnew 32  2 ,  1.1. itemqitemp =  newCc 33? c  s  s )'( 2Ls ? c  newC 33  4?k newkC 3  ),,,,,(  __       new  k new  k new  k new  k new  k new  k LLLLLL  genaiuafim  ?????? new  kC  ),2(.,...,2.,1. ?kitempitempitemp )1(.),1(. ?? kitemqkitemp  qLpL newk new  k   1 , ?? ,...,2.2.,1.1. itemqitempitemqitemp ==  );2(.)2(. ?=? kitemqkitemp new  kC  ),2(.,...,2.,1. ?kitempitempitemp )1(.),1(. ?? kitemqkitemp  qLpL newk new  k   1 , ?? ,...,2.2.,1.1. itemqitempitemqitemp ==  );2(.)2(. ?=? kitemqkitemp new  kC  ),2(.,...,2.,1. ?kitempitempitemp )1(.),1(. ?? kitemqkitemp  qLpL newk new  k   1 , ?? ,...,2.2.,1.1. itemqitempitemqitemp ==  );2(.)2(. ?=? kitemqkitemp 3new kc C?  )1( ?k s c )'( 1?? kLs c  new kC  DB  db  's kL  DB 'kL dbDB ?  );;1( ++<= kmkkfor };'.,{* DsSupportXLXL DBkk ???=  *;kk DB k LL ?=  _{ , . ' }db k db dbL X L X Support s d= ? ? ? db  DB kLX ?  dbLX ? dbDBdbDB SupportXSupportXSupportX ... +=?  }{'' XLL kk ?=  s  )'( ss >  ()_ genaiua ()__ genaiuafim  D DB  d db  mk ,...,2,1=  }{),1(},,...,,{ 121 1 new  jk new  k LikjjiiiL ????= }''{),1(},,...,,{ 121  2 new jk  new k LikjjiiiL ????=  ,,,},,...,,{ 212121 3 ccccciiiL k  new k =????= ??  1 2 1 1 2 1, , '', 1, 2,..., new newc c c L c L k m?? = ? ? =  { , . ' ( )};newk k DB dbL X L X Support s D d?= ? ? ? + =newL1  new kL  =''*1C db ? 1LDB * *  1 1'' { '', . ' ( )};DB dbL X C X Support s D d?= ? ? ? + )};''({'' 1  *  newnew LLXL ??=  new k  new k CC  21 , newkC  1 2,new newk kC C ()genapriori ? ;)( 1 1  1 new k  new k  new k LLgenaprioriC ??= ?  new kC 3 ()__ genaiuafim  ()_ genaiua  dbDB ? ()__ genaiuafim  );( 2 1 2 new  k new  k LgenaprioriC ??=  db 's  's   newC 2.,2.,1. itemqitempitemp  3 3 2 2,  new newL p L q 1.1. itemqitemp =  DB     remove     from remove     from  (4)    scan DB and compute                      for all (5)    for all   if                                                then   end for (6)     scan db and compute                      for all (7)     for all   if                                                 then   end for (8)     return  end (9)  if              then do begin for all               scan db and update if                                                   then   end for (10)   In the same scan db, find  //           {all 1-items of db}     {all 1-items of DB  those exclude     } (11)                                  // ; (12)                                              do begin (13)                                                                     ; (14) (15)  if               then   else if              then   else    (16)         for all transactions                      do begin   for all candidates            do    for all candidates             do    for all candidates             do   end for (17)     end for (18)   Return  Algorithm description: (1)?(8) expand FIM algorithm[9] to                and          : (1)   find new frequent itemsets       from     of        under    ; (2)  find frequent itemsets      of      under   using Apriori  algorithm only on      ; (3)?(8) modify FIM algorithm[9] with a new argument and find all new frequent itemsets       in                 under     : (3)  find the frequent itemsets that both in        and       of  under     and remove them from        and       ; (4)?(5) scan DB and find frequent itemsets from the rest  itemsets in        in                  under     ; (6)?(7) scan db and find frequent itemsets from the rest  itemsets in        in                  under     ; (8)  return all frequent itemsets        in                  under    .

(9)?(18) expand AIUA algorithm[10] to               and         : (9)  update                           of      and find frequent itemsets  from      in                  under      ; (10) find new frequent 1-items         in the                under    ; (11) delete those duplicate 1-items of         from        , name it            and obtain                              ; (12)?(18) modify AIUA algorithm[10] with a new function and find all new frequent itemsets        in the                 under     : (13)?(14) find new candidates                    in                by the function                            of Apriori algorithm; (15) find new candidates          in                under     by our proposed function                                 ; (16)scan                  and compute the subsets? support of in                ; (17) find corresponding frequent itemsets (18) return all new frequent itemsets in                 under    ,  namely,                                         .

Two examples are given in Fig.1 and Fig.2 to illustrate the flow of our algorithm in                          and                          :  Example 1: Consider the original database presented in Fig.1 contains seven transactions with old minimum support              .The user adds an incremental database that contains three transactions and adjusts new minimum support                .

Example 2: Consider the original database presented in Fig.2 contains ten transactions with old minimum support              .The user adds an incremental database that contains five transactions and adjusts new minimum support                .

We also find all frequent itemsets by Apriori algorithm in these two situations and the results are same with ours by FIM_AIUA algorithm.

kL DB kL  dbL    X DBkLX ? dbLX ?  DBSupportX . dbLX ? dbLX ?  dbDBdbDB SupportXSupportXSupportX ... +=? )('. dDsSupportX dbDB +???  }{'' XLL kk ?=  DB kLX ?  dbSupportX .

DB kLX ?  dbDBdbDB SupportXSupportXSupportX ... +=? )('. dDsSupportX dbDB +???  }{'' XLL kk ?=  'kL  )'( ss <  ?=? newnew LL 11 ''  );';2( 1 ++?= ? kLkfor k ? new k  new k  new k LLgenaprioriC ??= ? )(    );( 2 1 2 new  k new  k LgenaprioriC ??= ;3 ?=newkC )2( =k  );'',(2__ 11 3 newnewnew k LLgenaiuafimC =  )3( =k );,,(3__ 32    3 newnewnewnew k LLLgenaiuafimC =  );,,,,,(  __         new k  new k  new k  new k  new k  new k  new k  LLLLLL  genaiuafimC  ??????  =  dbDBt ?? );,( 11 tCsubsetC  new kt =  1tCc ? ;. ++countc  );,( 22 tCsubsetC new  kt = 2tCc ?  ;. ++countc );,( 33 tCsubsetC  new kt =  3tc C? ;. ++countc  ;};'.,{ 0110 newk new  k new  k new  k new  k LLLscountcCcL ?=??= };'.,{ 22 scountcCcL newk  new k ??=  };'.,{ 33 scountcCcL newk new  k ??= ;' 321  new k  new k  new kk LLLL ??=  ;'kL  dbDB ? ss >' DB kL DB  dbL db  'kL  dbDB ?  dbDB ? ss <' new  kL  new k  new k CC  21 ,  'kL  dbDB ?  ()_ genapriori  )};('.,''{'' *1 *  1 dDsSupportXCXL dbDB +???= ? ?  );''('' 1 *  newnew LLL ?=  's 's  db  's  's  DB kL dbL  dbDB ? 's DBkL dbL  dbL dbDB ? 's  DB kL dbDB ? 's  dbDB ? 's  kL dbDB ?  newL1  's dbDB ?  new kC 3 dbDB ? 's  ()__ genaiuafim dbDB ?  new k  new k  new k CCC  321 ,, dbDB ? new  k new  k new  k LLL 321 ,,  dbDB ? 's 1 2 3' new new newk k k kL L L L= ? ?  'kL  dbDBSupportX ?.kLX ? )('. dDsSupportX dbDB +???  }{XLL newk new  k ?=  =''*1C 1L  ''' 111 newnew LLL ?=  X  's  dbDB ? *  1 ''L 1 ''  newL ''' 111 newnew LLL ?=  ()__ genaiuafim  40%s =  ' 50%s =  , 'DB db s s? > , 'DB db s s? <  40%s =  ' 30%s =  dbDBSupportX ?.

kL  's*1 ''L  kL     'kL  DB kL  dbL dbL 'kL  DB kL   Figure.1 The flow chart of our algorithm in the case   new  kL newL1  ''1 newL   newC 12  newC 22  newC 32 newL 12  newL 22  newL 32   newC 13  newC 23  newC 313  newC 323  newC 333  newL 13  newL 23  newL 33    ADEF:5  ADFG:5 ADEG:5  AEFG:5 DEFG:5  ACDE:4  newC 334  newC 324  newC 14 ?  newC 24 ?  newC 314 ?  ?  ?   newL   newL  ADEF:5  ADFG:5 ADEG:5  AEFG:5 DEFG:5   newL     ?  ?  ?   newC   newC   newC  ?   newC  ADEFG:5   newC  ?  ?   newL   newL ADEFG:5   newL   Figure.2 The flow chart of our algorithm in the case

IV. EXPERIMENTS AND ANALYSIS In order to evaluate the performance of our proposed  algorithm FIM_AIUA, three experiments were conducted on transactions data of a supermarket. We conducted our experiments on a 3.1GHz Core i5 PC with 2GB memory on Windows 7 professional. In the following experiments results, we use the notation [Tx-Iy-Dm-dn] to denote a database in which x is the mean size of a transaction, y is the mean size of maximal frequent itemsets, m is the number of transactions in the original database     and n is the number of transactions in the incremental database     .

(the values of m and n are in thousands) In the first experiment, we mainly focused on the first situation               and         . The relative run time of Apriori, My_IUA and our proposed algorithm was evaluated. Fig.3 shows the relative run time of the three algorithms using transactions data of a supermarket T8-I3-D80-d10.The initial minimum support is 0.05% and the new minimum support increases from 0.15% to 1%. Fig.3 shows our proposed algorithm outperforms both Apriori and My_IUA algorithm.

In the second experiment, we mainly focused on the second situation               and           .The relative run time ratio of Apriori and our proposed algorithm was evaluated.

Fig.4 shows the relative run time ratio of these two algorithms using T14-I6-D200-d20.The three lines of Fig.4 shows that the initial minimum supports are 2.25%, 1.75% and 1.25%, which decrease to 0.25% respectively. Fig.4 shows our proposed algorithm runs up to 7 times faster than Apriori algorithm.

In the third experiment, we mainly focused on relative runtime ratio of My_IUA and our proposed algorithm in the situation               and          . Fig.5 shows the relative run time ratio of these two algorithms using T20-Iy-D150-d15, which y ranges from 5 to 10. The two lines of Fig.5 illustrates that the minimum support is decreased from 2.25% to1.75% and from 1.00% to 0.25% respectively. As is shown in the Fig.5, our proposed algorithm is more efficient than My_IUA algorithm especially when the mean size of maximal frequent itemsets is large.

The three experiments verify the effectiveness of our proposed algorithm.

dbDB ? ss >'  dbDB ? ss <'  dbDB ? ss <'  DB db  , 'DB db s s? > , 'DB db s s? <     (T8-I3-D80-d10)   Figure.3 The relative run time of three algorithms   (T14-I6-D200-d20)   Figure.4 The relative run time ratio of Apriori/Proposed alg.

(T20-Iy-D150-d15)   Figure.5 The relative runtime ratio of My_IUA/Proposed alg.



V. CONCLUSIONS In real world applications, user always adjusts the  minimum support when new transactions are inserted into databases[6]. This paper proposed a new algorithm FIM_AIUA, which is suitable for updating association rules with incremental transactions and minimum support changes simultaneously. Our proposed algorithm expands the FIM algorithm[9] and AIUA algorithm[10] to meet this end.

Moreover, we modify FIM with a new argument and present a new function                                  that rewrites the function  of AIUA algorithm.

In the situation                          , our proposed algorithm  requires only one scan for the original database. In the situation                           , it joins the corresponding frequent itemsets and prunes useless candidates by the Apriori nature of frequent itemsets, which avoids multiple iterations to generate many useless candidates. Our proposed algorithm improves the efficiency and corrects the mistake of My_IUA algorithm.The experiments show that our proposed algorithm outperforms both My_IUA algorithm and Apriori algorithm.

