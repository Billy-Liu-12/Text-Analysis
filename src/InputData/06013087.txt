Study on Efficient Algorithm of Frequent Item-set Mining

Abstract- To further improve the scalability of the algorithm for frequent item-set mining, studies on the frequent item-set  search space and the FP-tree operation method were made. On  this basis, an efficient algorithm for frequent item-set mining  based on the a set of frequent-pattern list(FPL)is presented,  which employs the strategy of incremental construction of a  candidate itemset and Apriori property to reduce the searching  space, and gets support-count of the frequent itemset by  intersecting tid-list. Lastly the algorithm is realized on  experiment and is proved to be valid.

Keywords- frequent-pattern list; FP-Growth; frequent itemset

I. INTRODUCTION  Mining frequent itemsets is a fundamental and essential problem in many data mining applications. The algorithms developed for mining frequent itemsets can be classified into two types: the first is the candidate itemsets generation approach, such as Apriori algorithm, called Apriori-inspired; another aspect is a method without candidate itemsets? generation approach, such as FP-growth algorithm, called FP-growth- inspired.

The well-known Apriori algorithm is the first proposed method to find frequent itemsets in a database. Some algorithms adopt an Apriori-inspired method, and are focused on reducing candidates, which in turn reduce the time required for scanning databases, are briefly described as follows. Park et al. proposed an efficient Direct Hashing and Pruning algorithm to reduce the number of candidates by collecting approximate counts in the previous level. The DLG algorithm uses a bit-vector per-item, noting the tids where the item occurred. It generates frequent itemsets via logical AND operations on the bit-vectors. Apriori-inspired algorithms show good performance with sparse datasets such as market-basket data, where the frequent patterns are very short.

Han et al. put forward the Frequent-Pattern-tree structure for efficiently mining association rules without generation of candidate itemsets. It uses a recursive divide-and-conquer and database projection approach to mine long patterns. Its main merits are: I) it does not need to produce candidates, only to construct FP-Tree and condition FP-Tree, and produce frequent pattern by visiting FP-Tree recursively; 2) Only two traversing to the whole transaction database is  Rui Chang  School of Information & Engineering, Changzhou Institute of Technology  CZU Changzhou, China  enough, one time to produce frequent I-itemsets and the other time to create FP-Tree, consequently decrease the visit times to the database apparently. Recently some FP-tree? based algorithms have been developed to capture the content of the transaction database only by one database scan which can be very useful for incremental updating of frequent patterns. The experimental results showed that FP-Tree and almost all its extensions have a high compactness rate for dense data set. However, they need a large amount of memory for sparse data set where probability for sharing common paths is low.



II. PROBLEM STATEMENT  A. Definition of association rule Let I be a set of items and D a database of transactions,  where each transaction has a unique identifier (tid) and contains a set of items. The set of all tids is denoted as T. A set X t;;;; I is also called an item set. An item set with k items is called a k-itemset. For an itemset X, we denote its corresponding tidset as tid(X), i.e., tid(X) = n x EO X tid(x).

The support count of X is denoted as a (X) and defined as the number of transactions in D that contain X, i.e., a (X) = Itid(X)I. X is frequent if a (X) is more than or equal to a user-specified minimum support-count (min_supc).

B. Theory of concept lattices Eclat algorithm is a typical depth-first search and cross?  counting algorithm. It use a lattice-theoretic approach to decompose the original search space (lattice) into smaller pieces (sublattices) which can be processed independently in main-memory. It use a new search strategy for enumerating the frequent item sets within each sublattice: bottom-up.

Definition 1 An ordered set :Let P be a set. A partial order on P is a binary relation < , such that for all X,Y,Z EO p, the relation is: (l)Reflexive:X<X. (2) Antisymmetric: X < Y and Y <X, implies X= Y. (3)Transitive: X < Y and Y< Z, implies X< Z.

Definition 2 Concept Lattice: Let L be an ordered set. L is called concept lattice if XVY(X/\ Y) EO L exists for all X, YEO L.

Definition 3 Equivalence classes: Define a function p:  P(I)XN?P(I),where p(X,k)=X[I:k], the k length prefix of X.

Define an equivalence relation 8 k on the lattice P(I) as  follows: X,Y E P(I),X= 8 kY ? p(X,k)=p(Y,K). That is,  two item sets are in the same class if they share a common k  length prefix. We therefore call 0 k a prefix-based equivalence relation.



III. THE FPL-GROWTH ALGORITHM  A. A summaryfrequent pattern list  In this section, we describe the algorithm which constructs and maintains the in-memory summary data structure called SFP-Iist (Summary Frequent Pattern list).

Definition 4 A summary frequent pattern list (SFP-Iist) is a summary data structure and is defined as follows: SFP-list consists of a frequent item list (FI-list), a frequent item transaction list (FI-Tidlist),and a list of frequent item-prefixs, denoted by FI-prefix-list. Each node in the FI-list consists of four fields: node-name, node-count, and node-tid, node-link.

Each node in the FI-prefix-list consists of three fields: item? name, item-count, and item-next. Each node in the FI-tidlist consists of tow fields: node-tid and node-next.

Algorithm I outlines the SFP-list construction of the proposed FPL-Growth algorithm. First of all, FPL-Growth algorithm scan the transaction database DB once, then gets FI-tidlist of frequent item and their supports, sort frequent item in support descending order as L, then gets FI-list. Scan DB again, select and sort the frequent items in each transaction according to the order of L. Let T be a new transaction ,where T={pl,p2, ... ,pn}. Then T is converted into n sub-transactios; that is, {pl,p2, ... ,pn}, {p2,p3, ... ,pn}, {pn-l,pn}and{pn} .This step is called transaction projection, which is denoted by TP(T) = {pll T, p2 IT, ... , pn-l IT, pn IT}, where pi IT=(pi pi+l ... pn),i=I,2, ... ,n. Finally, TP(T) will be inserted into the FI -prefix-list.

Algorithm 1 (SFP-list Construction) Input: A transaction database DB and a minimum support  threshold ?.

Output: SFP-list Method: The SFP-list is constructed in the following steps.

l.First of all, FPL-Growth algorithm scan the transaction  database DB once, then gets FI-tidlist of frequent item and their supports, sort frequent item in support descending order as L, then gets FI-list.

2.Scan DB again, for each transaction in DB do the following.(1) Select and sort the frequent items in each transaction according to the order of L. (2)T is projected into n sub-transactios, that is TP(T). (3)Call procedure Create FI? prefix-list (TP(T?.

Procedure Create FI-prefix-list Input: TP(T) and pi.FI-prefix-list  Output: modified FI-prefix-list,i=1 ,2, ... ,n l*i=I,2, ... ,nl Method:  For each [pi IT] E TP(T)  For each item pI do II=i+ l,i+2, ... ,n*1  If pl E pi.FI-prefix-list then  I*the entry already in the pi. FI-prefix-list *1 pl.item-count=pl.item-count+ I  End if End for  End for Example I: Let the transaction database be (the first tow  columns of)Tablel and ? =3.

TABLE I TRANSACTION DATABASE  Tid Item Bought Ordered Frequent Items  1 f, a, Co d, g, i, m, p c, f. a, m, p 2 a, b, Co f, I, m, 0 c, f. a, b, m 3 bo t; ho j, 0 0 4 b, c, k, s, p c,b,p 5 a, f, c, e, I, p, m, n c, f, a, m, p  First, a scan of DB denves FI-list ?c:4), (f:4), (a:3), (b:3), (m:3), (p:3? , (the number after ":" indicates the support), in which items ordered in frequency descending order. Fig.1 shows the construction of FI-tidlist and FI-list.

At the same time, the FI-prefix-Iist is initialized. Fig.2 shows the initialization ofFI-prefix-list  FI-IlQJlg FI-list  c 4 f 4  a 3 b 3  m 3  p 3  Figure 1. Structure of FI-Tidlist and Fl-list  FI-list  Figure 2. Initialization ofFI-prefix-list  While scanning DB secondly, select and sort the frequent items in each transaction according to the order of L.

Table 1 shows the ordered frequent items. Then call procedure Create FI-prefix-list to construct FI-prefix-list.

Finally, result can be seen in Fig.3.

VI-223     FI-list FI-prefix-list  Figure 3. The final FI-prefix-list  B. Determining Frequent Itemsets from SFP-List Once SFP-list is constructed, algorithm 2 can derive all  the frequent itemsets by traversing the SFP-list according to the Apriori principle.

Assume that there are k frequent items, namely ij, i2, ... , ib in the FI-list, and each item iJU=I,2, ... ,k) has an associated ij? FI-prefix-list. Note that the items, namely ej,e2, ... ,em, within the i]" FI-prefix-list are denoted by i]"ej, i]"e2, ... , i]"em, respectively, where the value m equals to Ii]" FI-prefix-list I.

Algorithm 2 (frequent-pattern mining) Input SFP-list and?.

Output L Method: R=<p /* R is used to store all frequent itemsets*/ For i=IFI-listl-l to 1 step -l  Prefix= FI-list[i].item-name Traverse FI-prefix-list which is associated with Prefix,  then store the item-name of the node into LI. Item-count of those nodes is no less than ?.

If ILd>O then call Create-FIS(L j,Prefix,R)  End if End for procedure Create-FIS Input Lj,Prefix,R Method: k=2 For i=1 to I Ld /* q ELI */  L= L U (prefix & q) End for do while ILK-II>=k  Ck=Gen(LK_I) For all pECk /*p=ele2"'ek * /  If pEL then M= prefix & p M.count=tid(prefix) n tid(el) n ... n tid(?) if M.count>=? then  Lk=LK U P R= RUM  End if End if  END FOR  k=k+l Loop Procedure Gen InputLK_1 OutputCk Mehtod: For all(p,q ELK_I) If pI=ql/\ P2=q2/\ ...... /\ Pk-2=qk-2/\ Pk-l<qk-l then  Ck=CK U {PIP2'" "'Pk-Iqk-I} End if  C. Optimization of the FI-Tidlis The main advantage of the vertical format is support for  fast frequency counting via intersection operations on transaction ids (tids) and automatic pruning of irrelevant data.

The main problem with these approaches is when intermediate results of vertical tid lists become too large for memory, thus affecting the algorithm scalability. To further improve the performance of the algorithm, a new mixed structure which is combination of the transaction id and its complement set. is presented.

Complement set of X(X <:;;;; I) is denoted as btid(X), btid(X)=T-tid(X).Because tid(X) and btid(X) mutually interchangeable, meanings are equal, every time we store tid(X) and btid(X) of cardinality less tidsets.

Let Xl and X2 be a set of items:  Property 1: if X 1 is stored as tid(X 1), X2 is stored as tid(X2), then a (XIX2)=ltid(XI) ntid(X2)1  Property 2: if X I is stored as tid(X 1), X2 is stored as btid(X2), then a(X 1 X2)=ltid(X I )-btid(X2)1  Proof: a (X I X2)=ltid(X 1 ,X2)1=ltid(X I) n tid(X2)1=lt id(Xl) n (T-btid(X2))I=ltid(Xl )-btid(X2)1  Property 3: if Xl is stored as btid(XI), X2 is stored as tid(X2), then a(X 1 X2)=ltid(X2)-btid(X 1)1  Proof: a (X I X2)=ltid(Xl ,X2)1=ltid(X I) n tid(X2)1=I(T? btid(X 1)) n tid(X2)1=ltid(X2)-btid(X 1)1  Property 4: if XI is stored as btid(Xl), X2 is stored as btid(X2), then a (X 1 X2)=ITI-I(btid(X 1) U btid(X2))1  Proof: a (X I X2)=ltid(X 1 ,X2)1=ltid(X 1) n tid(X2)1= I(T? btid(Xl)) n (T-btid(X2))I=IT-(btid(X I) U btid(X2))I= ITI? l(btid(Xl) U btid(X2))1

IV. EXPERIMENTAL EVALUATION  In this section, we present a performance comparison of FPL-growth with the classical frequent pattern mining algorithm Apriori and FP-Growth. Experiments were performed on an Intel Pentium IV3.0 PC with 1024MB of memory, running Windows XP. Algorithms were coded in JAVA. The synthetic data sets which we used for our experiments were generated by using IBM Data Generator.

The real data sets was the retail database.

Vl-224     The scalability of FPL-growth, FP-Growth and Apriori as the support threshold decreases from 1 % to 0.2% is shown in Table 2 and FigA ..

I 1  10 u ? n    FPL- Growth FP- Growth Apriori  rotail  ? --=: 0.20% 0.<10% 0.60% 0.80%  mlnJ;llP  1 -+-I'PL-Groll'th --I'P-GrOll'th I  Figure 4. Comparative Performance  TABLE II. RESULT ON T212NI D200K  0.20% 0.40% 0.60%  0.0073 0.006 0.49  11.49 7.86 4  2475 828.1 159.2

V. CONCLUSIONS  0.80%  0.36  1.94  43.53  1%  1%  0.3  0.94  12.4  The discovery of frequent item sets in large datasets is a fundamental task in data mining. FP-growth- inspired algorithms belong to the fastest of the available algorithms but have excessive memory consumption. This may force out-of-core processing, which significantly increases runtime.

To address this problem, we began to study the frequent item-set search space, Eclat algorithm, theory of concept  lattices and FP-Growth algorithm. On this basis, an efficient algorithm for frequent item-set mining based on the a set of frequent-pattern list(FPL )is presented, which employs the strategy of incremental construction of a candidate itemset and Apriori property to reduce the searching space, and gets support-count of the frequent itemset by intersecting tid-list.

Experiments tested on synthetic and real datasets show that FPL is efficient on both sparse and dense datasets.

