

Abstract?Sliding window is a widely used model for data stream processing and mining. Frequent itemset mining over sliding window is a challenging problem due to limited processing resources. In this study, an efficient representation of sliding window is proposed. In this representation, a blocked bit sequence technique is used to enhance both sliding and mining time. Experimental evaluations show that our algorithm outperforms a recently proposed algorithm.

Keywords: Data Stream Mining, Sliding Window, Bit Sequence

I.  INTRODUCTION Mining frequent Itemsets from transactional database plays  a key role in many data mining tasks. The problem of mining frequent itemsets in large databases was first proposed by Agrawal et al. [1] in 1993. An itemset is frequent when its frequency is not under user defined threshold. Traditional frequent itemset mining focused on problem of mining over static database, which were stored in secondary storage, and multiple scan on these static dataset is possible.

With the growing number of application of data stream such as stock analysis, wireless sensor network, web log analysis, telecommunication call records and network monitor, the research on stream becomes hot. A data stream is massive sequence of data elements continuously generating at rapid rate and have a data distribution that changes with time. Due to the characteristics of stream data, there are some challenges for stream data association rule mining. (1)  There is not enough time to perform a multi-scan as in traditional data mining algorithms whenever an update occurs. Furthermore, there is not enough space to store all the stream data for online processing. Therefore, a single scan of data and compact memory usage of the association rule mining technique are necessary. (2) The mining method of data streams needs to adapt to their changing data distribution. (3) Data streams need to be processed as fast as possible. (4) Mining of data streams should be an incremental process to keep up with the highly update rate.

Sliding window is an interesting model for data stream processing and mining. In this paper we propose an efficient sliding window based single pass algorithm called MFI-CBSW (Mining Frequent Itemset within Circular Block Sliding Window). The MFI-CBSW algorithm uses a sliding window to find frequent itemsets in the fixed number of recent transactions. The sliding window is composed of a sequence of blocks. Each block maintains a number of transactions. When the window is moving forward, the oldest block is disregarded and a new block containing newly generated transactions is appended to the window. An effective blocked-bit-sequence representation of items with a queue of non-zero block numbers, help us to store all transaction in current window in compressed format and is useful for mining frequent itemset with high speed and less memory consumption; Results shows that our algorithm is faster than MFI-TRANSW [2]; especially in sparse dataset.

The rest of this paper is organized as follows: In Section 2, we give an overview of the related work and present our motivation for a new approach. Section 3 presents our proposed MFI-CBSW in details. Experiments are reported in Section 4, Finally Section 5 concludes this paper.



II. RELATED WORK The first and most representative method for finding  frequent itemsets in a static dataset is the Apriori algorithm [1].

This algorithm requires multiple scans of a database. Therefore, considering the requirements of data stream processing, this is not suitable for finding frequent itemsets over an online data stream.

The first scholars to give much attention to mining all frequent itemsets over the entire history of the streaming data were Manku and Motwani [3]. The proposed algorithm Lossy Counting is a first single-pass algorithm based on a well-known Apriori-property [1]. Lossy Counting uses a specific array- representation to represent the lexicographic ordering of the hash tree, which is the popular method for candidate counting [1]. Chang and Lee [4] develop an algorithm estDec for mining frequent itemsets in streaming data in which each transaction     has a weight and it decrease with age. In other words, older transactions contribute less toward itemset frequencies.

Moreover, Chang and Lee [5] also proposed a single-pass algorithm for mining recently frequent itemsets based on the estimation mechanism of the algorithm Lossy Counting.

In [6], Chi et al propose a CFI mining over sliding window of stream and use CET (Closed Enumeration Tree) to maintain the main information of itemsets. Each node in CET represents an itemset and is with different type according to its weight and lexicographic order. When the window slides, a new transaction arrives and an old transaction disappears, then node is inserted, updated and deleted according to its type. The exploration and node type check cost much computation time when the minimum support is lower. In [7], Li et al propose NewMoment algorithm with bit-sequence to denote the occurrence of an itemset in sliding window?s transactions; furthermore, it maintains the NewCET to only store the CFI nodes, so memory cost and running time cost is reduced. [8] proposed an efficient algorithm, called IncSPAM, to maintain sequential patterns over a stream sliding window. The concept of bit-vector, Customer Bit-Vector Array with Sliding Window (CBASW), is introduced to efficiently store the information of items for each customer. The representation can reduce the memory requirement and execution time for the on-line maintenance.

Li et al. proposed prefix tree-based single-pass algorithms, called DSM-FI [9] and DSM-MFI [10], to mine the set of all frequent itemsets and maximal frequent itemsets over the entire history of offline data streams. Jin and Agrawal [11] proposed an algorithm, called StreamMining, for in-core frequent itemset mining over online data streams.

In [2] Li et al. proposed two Apriori-based algorithms, called MFI-TransSW and MFI-TimeSW, and to find complete set of frequent itemsets in online data streams with a transaction-sensitive sliding window and time-sensitive sliding window, and by using bit-sequence to keep the occurrence of items in recent sliding windows? transactions. In these algorithms bit-sequence representation of item is used to reduce the time and memory needed to slide the windows. Blocked- bit-sequence that we proposed in this paper is like to bit- sequence in [2], but with none-zero block queue we make it more efficient and faster.



III. PROPOSED ALGORITHM In this study, a novel technique named circular block  sliding window is developed to efficiently maintaining sliding window transactions over data streams. In this technique, for each item a blocked bit sequence is stored and dynamically updated. The window sliding process is managed efficiently to reduce the cost of this process. A circular queue is used to track non-zero blocks of the window. The mining phase uses this queue to efficient extraction of frequent itemsets when the user submits a request.

A. Blocked Bit Sequence of Items In bit sequence representation of items proposed in [2], for  each item X in a window W, a bit sequence named Bit(X) having length |W| is created.  In Bit(X), if the item is appeared  in the i`th transaction of the window, corresponding bit is set otherwise it is cleared. However, in our devised blocked bit sequence, each window is decomposed to a number of blocks  with length b. Therefore, for each item there is b w  n =  blocks  in which the item occurrences are shown by setting the corresponding bits.  A blocked bit sequence of an item X is called Bbit(X).

Example 1.  In Fig. 1 , 12 recently arrived transactions of a data stream DS is shown. Sliding window model is used to process this stream in which the window and block lengths are set to 9 and 3 respectively. Therefore two windows W1 and W2 are regarded on this data stream each of which contains 3 blocks of transactions. Each block is depicted in a separate line.

With assumption of minimum support equal to 25%, frequent itemsets in the first and second window is shown in this figure.

Similar to the window size, block size is fixed during the input stream data processing and is given by the user. A window containing blocked bit sequence of items is named blocked window.  Based on the definition of blocked bit sequence, the corresponding blocked window W1 of Error!

Reference source not found. is as follows:  Bbit(a)=101 000 110 Bbit(b)=000 011 011 Bbit(c)=000 111 000    Bbit(d)=101 000 000 Bbit(e)=111 101 111  In this blocked bit sequences the ordering of blocks is from right to left. Each block can be regarded as a binary number which has an equivalent integer. As can be seen from the above figure items b, c and d have some zero blocks. These blocked bit sequence are updated during input data stream processing.

In our technique, for each item, a queue is used to store nonzero blocks indices. By numbering blocks of window from left to right, the values of the queue for each item are as follows:  NzB(a)=1,3 NzB(b)=1,2 NzB(c)=2 NzB(d)=3 NzB(e)=1,2,3 Since we have a restricted number of non-zero blocks for  each blocked bit sequence, storing these block numbers have very small memory usage. Frequent patterns mining over data stream using the proposed mechanism including: window initialization, window sliding and mining. Using the novel circular blocked window mechanism these phases are performed efficiently.

B. Window Initialization The first phase of our method is window initialization. By  incoming first |W| transactions from the input stream, this phase Win ID DS  Frequent Itemsets of W1  Frequent Itemsets of W2  T1(be), T2(abe) , T3(ae) (a),(b),(c),(d),(e),  (ae),(ad),(bc),(be), (ce),(de),(ade)     T4(bce), T5(bc) , T6(ce) (a),(b),(c),(d),(e), (ac),(ad),(ae),(bc), (ce), (de), (ace) ,(ade)  T7(ade) , T8(e) , T9(ade)  T10(ace),T11(ac),T12(ace) . . .

Fig. 1: An example data stream and the frequent itemsets over two consecutive windows     is started. In this phase, based on incoming transactions, blocked bit sequences and non-zero queues for items are created. Fig. 2 shows the window content after the initialization.

As shown in Fig. 2 , for each item, the blocked bit sequence shows the item occurrences in all blocks of the window. Non- zero blocks are stored in the corresponding queue of the item.

Block number of front and rear of all queues is also maintained.

This numbers are identical for all items and are used in the window sliding phase.

C. Window Sliding After incoming |W| transactions and constructing blocked  bit sequence of each item of the window, window initialization is completed. In the sliding window model, by incoming new transactions they are inserted to the window and old transactions are removed from the window. This process is named window sliding. In MFI-TransSW algorithm [2], each sliding of window includes deletion of the oldest transaction and addition of new transaction. A right shift operation is applied on all bit sequences of items to remove information of the right most transaction. For each item of the window, if the new transaction includes the item, left most bit of corresponding bit sequence is set to 1, otherwise it is set to zero. Consequently, the window content is updated and the window sliding is performed. By deleting oldest transaction and inserting a new transaction the window size |W| is preserved. The process of window sliding using right shift of all bit sequences is inefficient especially when the window size is large.  For an example, suppose that bit sequence of item e is Bit(e)=111101111. By performing right shift, the bit sequence becomes Bit(e)=011110111. As can be inferred, for a right shift |W|-1 operations are performed to move all bits to the right.

Therefore, this process is inefficient for window having large number of items. For example, for a window having length 10000 and containing 1000 items, deleting oldest transaction by right shift on all bit sequences needs 1000?9999 moving which is time inefficient operation.

To overcome this shortcoming, here we have utilized our blocked bit sequence to efficiently performing window sliding.

We develop a new technique namely Circular Block Sliding (CBS) which significantly improve the window sliding process.

In this technique, unit of sliding is a block instead of single transaction. Therefore, the sliding phase includes inserting a new block and deleting oldest one from the window. In the CBS technique, each blocked bit sequence is regarded as a circular queue. Obviously, after the window initialization the front and rear numbers of all block queues are 1 and n respectively. For removing the oldest block, in each blocked bit sequence, corresponding bits of the block are set to zero. In the other word, block at the front of the queue are filled by zero.

Additionally, if the removed block was a non-zero block, its  block number is also deleted from corresponding non-zero queue. Subsequently, the front variable of the block circular queues is adjusted. That is, the value of the front variable is set to the next block number based on the rules of the circular queue. Similar to removing step, insertion of the new block is performed efficiently. Simply, for each item, the new block is substituted in the place of the removed block and its position becomes the new rear of the block queue. If the inserted block is a non-zero block, its number is appended to corresponding non-zero queue of the item. Fig. 2 shows the window sliding process.

D. The mining By the user request, the mining phase is started to extract  the set of frequent itemsets of the current window. Before describing the mining phase, the method that we use to compute the support of frequent itemsets is explained.

In MFI-TransW [2] method, the bit sequence of an itemset XY is constructed using its subsets X and Y using the AND operator as: Bit(XY)=Bit(X) AND Bit(Y) and then its support is computed by enumerating the number of ?1?s in the bits sequence. In our approach, using non-zero queue of each item, the support of an itemset is calculated efficiently. For computing the support of an itemset, first its blocked bit sequence is constructed using its subsets. For an itemset XY, between subsets X and Y, using corresponding non-zero queues, the itemset that has a smaller number of non-zero block is selected. Logical bitwise and operation is performed on these non-zero blocks and their corresponding non-zero blocks in the other itemset. Other blocks which are not contained in the list of non-zero blocks of the selected itemset are filled by zero in the resulting block sequence of XY. The following pseudo-code describes this process.

))()((])[(:)(  ))()((])[(:)( )()(  YBBitANDXBBitpXYBBitYNzQp else  YBBitANDXBBitpXYBBitXNzQp YNzQXNzQif  =??  =??  ?    After constructing each block of the blocked bit sequence XY, if the block was not zero, its number is inserted into the       Blocked bit sequences Transactions Win ID  {Bbit(a)=101 000 110 , NzB(a)=1,3} {Bbit(b)=000 011 011 , NzB(b)=1,2} {Bbit(c)=000 111 000 , NzB(c)=2} {Bbit(d)=101 000 000 , NzB(d)=3 } {Bbit(e)=111 101 111 , NzB(e)=1,2,3}   T1(be), T2(abe), T3(ae) T4(bce), T5(bc),T6(ce) T7(ade), T8(e), T9(ade)  W1  Front Block number =1 Rear Block Number=3    Fig. 3 . Window content after initialization  NzB=2,?,n  Removing the oldest block  ???...

Front Rear  1010111011 00000 00000??..

NzB=2,?,n,1  Inserting the new block  ???...

Front Rear  1010111011 00000 11010??..

Blocked bit sequence after the window initialization  NzB=1,2,?,n  ???...

Front Rear  10101 11011 00000 11001 ??..

Fig. 2 . Window sliding process on sample blocked bit sequence     non-zero queue of the itemset. For example, consider two items ?b? and ?c? that are used to compute the support of ab. Since the number of non-zero blocks of item c is smaller than item b, it is selected.

Bbit(b)=000 011 011  , NzB(b)=1,2  Bbit(c)=000 111 000  , NzB(c)=2  Then the blocked bit sequence of itemset bc is computed as follows:  Bbit(bc)[2]=(Bbit(b)[2] AND Bbit(c)[2]) = 011 AND 111= 011  Since Bbit(bc)[2] >0 , its number is inserted into the non- zero queue of the itemset, and final result is :  Bbit(bc)= 000 011 000  , NzB(bc)=2  For extracting frequent itemsets within the current window, the first step is identifying frequent single items. As described previously, the number of ?1?s in non-zero block is equal to the support of an item. If this number exceeds minimum support threshold, it is inserted into the set of frequent items (FI1). For finding other itemsets, similar to the Eclat algorithm [12] we have used a depth first method of traversing prefix tree of itemsets. This approach is a recursive process in which at each depth the candidate itemsets are generated by joining frequent itemsets of previous depth. After the joining, the support of generated itemset is computed using the method illustrated above. The process of itemsets generation continues until not any further frequent itemset is generated. Subsequently, the generation process in the reverse direction from bottom to up produces other frequent itemsets in the next branches. This depth first process and the result prefix tree generated as the result of the recursive process is shown in Fig. 4.



IV. EXPERIMENTAL EVALUATION In this section, the performance of MFI-CBSW algorithm is  empirically evaluated and compared to the recently proposed MFI-TransSW. All programs were written by C++ using Microsoft Visual Studio 2008. In MFI-CBSW, the length of each block is set to 32 since the length of integer is 32 bit. All experiments are performed on a system with 2.4 GHZ CPU and having 4 GB RAM which uses Windows XP operating system.

We use both artificial and real datasets to evaluate the MFI- CBSW algorithm. Synthetic datasets are generated using IBM synthetic data generator proposed in [13]. In this section, MFI- CBSW is compare to MFI-TransSW in terms of runtime.

In the first experiment, the window sliding phase of two algorithms is compared with respect to different window sizes.

Since MFI-CBSW performs blocked window sliding, for fair comparison, a blocked window sliding of MFI-CBSW is compared to 32 window sliding of MFI-TransSW. This is due to block size of 32 in MFI-CBSW. The results are shown in Fig. 5 . As shown in this figure, the increase in the size of window in our algorithm does not affect the runtime.

Moreover, for all window sizes the runtime is close to zero.

However, for MFI-TransSW, as we enlarge the window size, the window sliding time increases.

In the second experiment, the memory usages of both algorithms in the window sliding phase are measured. For each window size, amount of increasing in the memory usage to perform one sliding is measured for both algorithms. The results are plotted on Fig. 6.  As shown in this figure, the memory usages of both algorithms are acceptable due to compressing sliding window transactions using bit sequences.

However, the memory usage of MFI-CBSW is a little more than MFI-TransSW. This is due to storing the queue of non-zero block numbers.

It is important to note that, in our algorithm by using a little more memory, a considerable runtime is obtained in window sliding phase.

In the last experiment, the mining time of our algorithm is compared to MFI-TransaSW for different window sizes. For both algorithms, a same minimum support threshold of 0.1% is used. The results are shown in Fig. 7. As shown in this figure, by enlarging window size, the required time to extract set of frequent itemsets increases in both algorithms. However, the   Fig. 4 . Depth first mining process  a)T5I4    b)kosarak    Fig. 5 . Runtime of window sliding phase(s=0.1%)  Null  a b c d  ab ac ad bc bd cd  abc abd acd bcd  abcd  Null  a b c d  ab ac ad  abc abd  abc  Null  a b c d  ab ac ad  abc abd acd  abcNull  a b c d  ab ac ad bc bd  abc abd acd bcd  abcd     runtime of MFI-CBSW is far less than MFI-TransSW especially for higher window sizes. The reason of superiority of our algorithm is exploited depth first mining algorithm and using non-zero queue in joining itemsets.

a)T5I4   b)kosarak   Fig. 6 . Memory usage of window sliding phase  a)T5I4  b)kosarak  Fig. 7 . Runtime comparison of MFI-CBSW and MFI-TransSW(s=0.1%)

V. CONCLUSION In this paper, a new sliding window based algorithm for  mining frequent itemsets over data streams is proposed. This algorithm efficiently performs the sliding process using a blocked bit sequence. The algorithm uses a circular queue to maintain non-zero blocks for each item within the window. The  circular queue is updated when a new block is inserted into the window and the oldest block is removed. In the proposed algorithm, identifying and exploiting non-zero blocks not only reduces the window sliding time but also enhances the mining phase. Experimental evaluations show the superiority of our algorithm in terms of window sliding and mining times in cost of little increase in the memory usage.



VI. REFERENCES [1] R. Agrawal and R. Srikant,  "Fast Algorithms for Mining Association  Rules in Large Databases",  in Proc. VLDB, 1994, pp.487-499.

[2] H. Li and S. Lee,  "Mining frequent itemsets over data streams using  efficient window sliding techniques",  presented at Expert Syst. Appl., 2009, pp.1466-1477.

[3] G.S. Manku and R. Motwani,  "Approximate Frequency Counts over Data Streams",  in Proc. VLDB, 2002, pp.346-357.

[4] J. Chang and W. Lee. "Decaying Obsolete Information in Finding Recent Frequent Itemsets over Data Stream". IEICE Transaction on Information and Systems, June, 2004, Vol. E87-D, No. 6.

[5] J.H. Chang and W.S. Lee,  "A Sliding Window Method for Finding Recently Frequent Itemsets over Online Data Streams",  presented at J.

Inf. Sci. Eng., 2004, pp.753-762.

[6] Y. Chi, H. Wang, P.S. Yu,  and R.R. Muntz,  "Moment: Maintaining Closed Frequent Itemsets over a Stream Sliding Window",  in Proc.

ICDM, 2004, pp.59-66.

[7] H. Li, C. Ho, F. Kuo,  and S. Lee,  "A New Algorithm for Maintaining Closed Frequent Itemsets in Data Streams by Incremental Updates",  in Proc. ICDM Workshops, 2006, pp.672-676.

[8] C. Ho, H. Li, F. Kuo,  and S. Lee,  "Incremental Mining of Sequential Patterns over a Stream Sliding Window",  in Proc. ICDM Workshops, 2006, pp.677-681.

[9] Li, H.-F., Lee, S.-Y., & Shan, M.-K. An efficient algorithm for mining frequent itemsets over the entire history of data streams. in Proc. of the first Int. Workshop on Knowledge Discovery in Data Streams, 2004.

[10] H. Li, S. Lee,  and M. Shan,  "Online Mining (Recently) Maximal Frequent Itemsets over Data Streams",  in Proc. RIDE, 2005, pp.11-18.

[11] R. Jin and G. Agrawal,  "An Algorithm for In-Core Frequent Itemset Mining on Streaming Data",  in Proc. ICDM, 2005, pp.210-217.

[12] M.J. Zaki, S. Parthasarathy, M. Ogihara,  and W. Li,  "New Algorithms for Fast Discovery of Association Rules",  in Proc. KDD, 1997, pp.283- 286.

[13] R. Agrawal and R. Srikant,  "Fast Algorithms for Mining Association Rules in Large Databases",  in Proc. VLDB, 1994, pp.487-499.

