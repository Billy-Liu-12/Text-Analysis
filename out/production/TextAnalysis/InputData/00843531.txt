5E: A Framework to Yield High Performance in Real-time  Data Mining over the Internet

Abstract  The aim of the 5E (5 essentials) framework proposed in this paper is to yield high pe$ormance in real-time data mining over the fnternet. The essentials are: a )  realize the Internet power with object-based parallelism; b )  select an inter-object interaction pattern suitable for  the problem; c )  apply the correct programming model to cut communication overhead; d )  equip program objects with mobilip for  better system performance; e )  work with the correct hardware architecture for  timeliness. It was verified by dij?jerent experiments over the Internet that the 5E is irideed effective for  mining associution rules from very large databases. These experiments were performed in a stable environment involving a )  the Java-based Aglets platform for  mobile agents, b)  the IBM synthetic data package to generate the necessary large databases, c )  the Apriori algorithm for  the mining process, and d )  the S P D M  method for  program and data parallelizations. The test results however do not constitute a validation of the proposed 5E framework, but an indication that the research is in the right direction and more investigations would be worthwhile.

Keywords: f ive essentials, real-time data mining, mobile agents, SPDM, inter-object interaction, overlay elimination  1. Introduction  This paper presents the research findings of how the 5E (5 essentials) framework can yield high performance in real-time data mining over the Internet. The verification tests for the 5E were based mainly on the mining of association rules from very large databases. The central idea of the 5E is to combine the following five essential elements to work naturally together: a) Object-based parallelism: The goal is to realize the  Internet power with object-based parallelism, which is the natural outcome when encapsulated objects are running in parallel [ I ] .

b) lnter-object interaction pattern: There are three basic patterns [2] for cooperating objects to interact, namely, master and slaves, iterative process, and  network processes. The interaction pattern for a solution must fit the nature of the problem, and a wrong choice would impede both the correctness and the performance of the final system.

Programming model: There three basic programming models, namely, sequential, logically non-distributed where program objects communicate only by shared memory (e.g. Linda?s Tuple Space [31), and logically distributed where objects interact by message passing.

Choosing a wrong programming model for a solution would definitely lead to poor system performance as demonstrated in [4].

Mobility: It applies to both program and data objects.

It is vital in three aspects: i) for fault tolerance because objects can migrate to safer locations, i i )  for load balancing because objects can migrate to less busy nodes, and iii)  for distributed data mining when there are more data objects (databases) in different nodes than the data-mining program objects. The third aspect is actually a form of agenda parallelism [SI.

Hardware architecture: There are two basic types of architectures, namely, physically distributed where every node in the cluster has its own disjoint primary memory, and physically non-distributed where all nodes communicate by shared memory. Running logically distributed so&are on physically non- distributed hardware would result in poor performance because of the mismatch [4].

Many data mining systems are real-time phenomena because they have to meet the following two requirements: a) the mining results must be correct and reliable, and b) thc results must be produced within a sufficiently small interval. For example, data mining of financial data to assist instant on-line investment decisions must be completed before the stringent deadlines. It means that the data mining process must possess the characteristics of a hard real-time system [6] because missing any deadline may lead to catastrophic consequences. Data mining is a knowledge discovery process in which the targeted acknowledge may be represented in different forms, for example, association rules [7], and multimedia data [SI.

We restricted our experiments and tests, which were performed on the Internet, to mining association rules  0-7695-0589-2/00 $10.00 0 2000 IEEE    from large databases [9] because for this case stable tools and relevant creditable experience are available in-house.

1 The three aulmmous pcogram omts padhmed tom the some parallel program form a vlrtuol machine lky are runnrQ on dfferent nodes of a n e M  2 Each pcogram @ect pcccesses onb me resdenf database of the host node, a a  ?\., data Wk pamhoned ram a vg, large database  Figure 1. The passive form of object-based data mining  Object-based data mining can appear in two different forms: passive and acfive. In the passive mining form (Figure I ) ,  a unit consists of a program object and a data object, which may be a partitioned data block of a large database or a resident database in the host node. If the components in the unit migrate, then it  becomes the active  form of data mining (Figure 2). The migration of the data object usually applies to situations when the object is actually a data block partitioned from a very large database. The active form is especially suitable for successive mining of the resident databases on different hosts. When a mobile mining program object or ?miner? has finished with the current host it  will migrate to mine another node. A typical example of active data mining is to mine specific information from different Internet web sites with the help of a few intelligent mobile agents [IO].

The active form needs strong object mobility support, which is an important open issue with no consensus solution and is being actively addressed by many researchers [ 101. At present, there are some experimental platforms, which can support object mobility to different extents, and these platforms are generally known as mobile agents systems that include the relatively well- known examples such as Ara [ 1 I ] ,  Aglet [ 121, and Telescript [ 131.

Among them the IBM Aglets, which is aimed at supporting Java-based mobile agents on the Internet, is more stable because of its longer history and richer user experience. In fact, distributed programming based on mobile agents is new paradigm known as remote progrumming [ 141, which promises better performance for distributed systems by minimizing the overhead incurred by inter-object communications.

Program object migrates from Node # 1 to Node #2; migration of the databases happen only when they are actually data blocks partitioned from a very large database; these blocks may or may not be assigned to particular program objects.

Databas Node # 1  Migration of the same program object from Node # 2 to Node # 3  Databas Node # 2 Figure 2. The active form of data mining     2. Motivation and Related Work  The motivation of this research is to find a way to support efficient real-time data mining of very large databases over the Internet. The methodology is to seamlessly combine the five essential elements to work naturally together: object-based parallelism, inter-object interaction pattern, programming model, object and data mobility, and hardware architecture. The three objectives to be achieved in the project are as follows: a) Finding the correct pattern for inter-object  communications among the collaborating mobile objects in data mining.

Identifying the parallelization method that effectively supports both the active and passive forms of object- based data mining.

Identifying the strength and limitations of the 5E framework.

Despite the importance of parallel data mining, there is a lack of publications that directly address the issue.

Recent and relevant publications include [ 15,16,17,18], which however concentrate mainly on theoretical discussions with little empirical proof. The literature for the five essential elements are however abundant because of their relative maturity. The lack of a comprehensive methodology to exploit the synergy by the five elements over the Internet for real-time data mining of very large databases has motivated the present work.

b)  c)  3. Details of Our Research  The 5E research is divided into five phases as follows: a) Identify the suitable model for inter-object  communications in data mining.

b) Identify a suitable parallelization method to support  the two forms (active and passive) of object-based data mining.

Find a stable tool to generate the very large databases necessary for the mining of association rules in  the verification tests and experiments.

Choose a stable distributed programming system to generate the logically-distributed object-based test programs.

e) Choose a stable platform that can support object mobility over physically-distributed hardware.

Since the distributed computing paradigm is shifting from cluster based to Internet (web) based, we followed the trend by choosing an Internet/Java based distributed platform for the 5E tests and experiments.

In our previous work [ 2 ]  three basic communication models for inter-object interactions were identified: master and slaves, iterative stages, and process network. We had also proved that a) each of these models is in fact natural  c)  d)  to a specific class of problems, and b) choosing the right inter-object communication model is the first imperative step in the formulation of correct parallel data-mining algorithms.

3. I An Effective Parallelization Method  The objective of a parallelization method is to eliminate the VO time needed for managing the overlay structure when a large database is too large to be completely encoded into the primary memory in a standalone system [ 191. The elimination is achieved by partitioning a large database into smaller blocks so that each of them can be encoded completely in the primary memories of different machines. It is clear from this perspective that the parallelization process for distributed data mining is inherently data oriented and the SPMD (single program multiple data [20]) method (Figure 3) is a natural choice. In the SPMD approach, the data mining program object (A in  Figure 3) is duplicated (A?s), and the very large database ( C) is partitioned into smaller blocks (C?s) for distribution to different nodes for encoding into the local primary memories (B?s). Matching the SPMD method with a correct inter-object interaction model is of paramount importance for yielding high performance in parallel data mining  ,  A = mining process B=encoded database C=large database  1 parallel unl = A?tB+C?  I  Figure 3. Parallelization by SPMD - database partitioned and distributed; but the ?miner? (Apriori in this case) are duplicated and distributed  7 10    3.2 A Stable Environment for Verification  The environment for the tests and data collection consists of the following stable elements:  Apriori parallelization: The stable Apriori algorithm [9] was parallelized for the Verification tests involving mining association rules from large databases. In this case, the parallelization is achieved by duplicating the Apriori algorithm. The duplicates are then allocated to different nodes for parallel execution.

Aglets platform: The Java-based IBM Aglets platform [I21 was adopted for the parallel data mining tests over the Internet because it  supports mobile agents with known stability.

IBM synthetic data generation code (211: The large data bases necessary for the mining experiments were generated automatically by this stable package.

In these experiments, a large database was partitioned into smaller blocks by the SPDM concept so that each data block could be allocated to an Internet node for independent mining by the Apriori duplicate. Since every participating node had an Apriori duplicate and an allocated partitioned data block, the number of cooperating nodes was equal to the number of partitioned data blocks.

One of the participating nodes acted as the master and coordinated the slave nodes by barrier synchronization, which is natural for level-based mining strategies such as the Apriori. The Apriori duplicates were implemented as mobile agents (nglefs in  this case) to run on the Aglets platform. These mobile agents differ from other iitzits of parallelisni in the traditional distributed programming environments (e.g. PVM and p4). The traditional units of parallelism must be preinstalled in the predetermined nodes and locations before they can be invoked by various means that can incur high communication costs (e.g. RPC (remote procedure call), TCP/IP programming, or Java RMI (remote invocation)). The use of mobile agents, however, obviates the need of preinstallation and the result is that inter-object communications can be optimized. The behaviour by the aglets includes creation, cloning, dispatching, retraction, deactivation, disposal, and message retransniissioti.

3.3 Establishing the Reference for Comparison  In order to study and to empirically evaluate the performance of the 5E framework for data mining over the Internet, we needed to establish a reference so that comparisons can be made between this reference and the test results from the 5E verification exercises. The reference establishment task involved: a) Identifying three different decoding methods for the  bit-encoding scheme [ 191.

Incorporating these methods separately into original Apriori to create three different modified versions of the Apriori.

Running these three different sequential versions and compare their results to identify the fastest version among them.

Adopting the fastest version identified in step c) above as the basis for the SPDM parallelization and also as the reference for comparison with the 5E test data.

The test results from steps: c) and d) would be compared so that the efficacy of the 5E framework can be verified.

The modification of the sequential Apriori is achieved by embedding the chosen decoding mechanism, shown as highlighted program statements in Figure 4. The ultimate aim of encoding is to represent the whole database in thc primary memory so that in the subsequent data mining operations no accesses to the original database would be necessary. In reality, it would be impossible to encode a very large database into the primary memory without an overlay structure. It means that occasional accesses are still necessary no matter how effective the encoding method is and how efficient the access method would be.

Parallelization is a solution for the elimination of such overlay structures because a large database is partitioned  1 .  L,=[frequent-l itemsets] & encode (whole-db);  2. For(k=2; Lk-,!=( );K++){ 3 Ck=apriori-gen(Lk.,);  4. For(m=O; m<no-trans-in-encoded-db;m++){  5. decode-trans-m-for-level-k (encoded-db);  6. count-itemsets-for-Ck (trans-m);)  7. Lk=[itemsets-for-Ck 2MinsupI; }  8. Find-association-rules-for-large-itemsets (Lk);  Figure 4. Modified sequential Apriori algorithm (modifications highlighted)  Bitpawer 2O 2l 2a l3  Figure 5. Every item in a transaction is represented by its 2' value (X is a bit's position)     into blocks that are small enough to be encoded completely in the receivers' primary memories for parallel acceses.

3.3.1 Encoding and Decoding. In the bit-encoding scheme all the items in a transaction are represented by their unique bit positions in a vector. That is, the whole database will be encoded into a two dimensional matrix illustrated in Figure 5. Every vector in the matrix is uniquely represented by its encoded value V, =C2', where X is the unique bit position of a specific item. For example, the Is'  transaction in Figure 5 is represented by its encoded value of 14; that is, 2' + 2'+ 23 = 14.

For the above bit-encoding scheme, we have chosen three possible decoding schemes as follows: a) Basic decoding: For this method the following logic is  executed repeatedly until i, which initialized to the encoded value V,, is reduced 0: i f ( i  22') then ( i=i-zX; X'h-item(position)-in-transaction = TRUE; x = x - 1 ) else X = X -  I ;  In this case the encoded value of 14 in Figure 5 would represent the "TRUE states" for items in the 2'", 2*", and 2x=3 positions of the first transaction. The encoded transaction would be scanned bit by bit starting from the most significant bit.

Binary decoding: This method is based on the basic decoding approach above except that the first step is to find "the most significant TRUE position for  X" by binary search. The aim is to slash the scanning time of the basic decoding approach by half.

Logarithmic decoding: In this method, which saves decoding time by eliminating the entire data scanning process, the following logic is executed repeatedly until i (initialized to the encoded value V,) is reduced to 0:  [integer(l~g~(i))]'~-item-in-transaction = TRUE The infeger(/og,(i)) operation converts logZ(i) into an integer by truncating whatever after the decimal point.

For example, i t  yields the integer values of 3, 2, and 1 from the encoded value of V, = 14 successively.

The main difference among these three methods is the time required for data scanning in the decoding process.

The logarithmic decoding method requires no data scanning at all, and therefore should be the most efficient.

The database for the encoding/decoding experiments was generated by the IBM synthetic data generation package with the following specifications: a) number of transactions = 100,000 ( I O O K ) ,  b) average number of items per transaction = 10, c) total number of possible items = 1000 (NlOOO), and d) number of possible  b)  c)  i = i - 2 1nrrgrrllog2(1)).

transaction patterns = 1000. In the test results illustrated in Figure 6,  I" marks the basic decoding method; 2'Id marks the binary decoding method; 31d marks the logarithmic method, and Apriori marks the original Apriori. By comparing the four curves, i t  is obvious that logarithmic decoding has yielded the best performance in  Figure 6. Performance difference among four decoding methods (DlOOK.N200)  mining the association rules from the same large database.

3.4 Parallelization with Logarithmic Decoding  The fastest logarithmic decoding method was adopted for the SE verification tests, based on mining of association rules from very large databases. That is, every mobile agent is a copy of the modified Apriori shown in Figure 4, but with bit-encoding and logarithmic decoding.

With the same database (D 100K.N200) the test results  -4- Apriori -PE- Serial 3rd Pdralellelized 3rd (5 agents)  1 OK 20K 30K  Llatabase size (MOOKNl000)  Figure 7. Performance difference between sequential and parallel data mining     (Figure 7) show that the parallelized Apriori (marked Parallelized 3rd on the graph) performed much better than the original Apriori (with byte encoding; marked Apriori) and the sequential version before parallelization (marked Serial Yd).

5. Conclusion  In this paper, the 5E framework is proposed for the purpose of yielding high performance in real-time data mining over the Internet. The five essential elements in this framework are, namely, object-based parallelism, mobility, inter-object interaction pattern, programming model, and hardware architecture. The central idea is to combine the five essentials to work naturally together to achieve the required timeliness. The framework was tested over the Internet with stable tools and elements including the Aglets, the IBM synthetic data generation package, the Apriori algorithm (modified), and the SPDM parallelization method. The verification tests for 5E were based mainly on mining of the association rules from large databases. Although the preliminary test results have confirmed that the 5E framework can indeed support efficient data mining over the Internet, they do  not constitute a validation of the framework. But, they do indicate that the proposed 5E approach is a correct direction for achieving high performance for real-time data mining over the Internet, and therefore further work along the same line would be meaningful. The immediate future work will include the following:  Validate the 5E framework by more rigorous tests based on mining of association rules from very large databases over the Internet.

Test the 5E framework with other types of data mining operation, for example, multimedia data so that the usefulness of the 5E approach can be generalized.

Acknowledgement  The research is supported by the both the GY843 and GV894 central funds from the Hong Kong Polytechnic University, Hong Kong (SAR), P.R. China.

