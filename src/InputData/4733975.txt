Stream-Close: Fast mining of Closed Frequent Itemsets in high speed data streams

Abstract  With the emergence of large-volume and high-speed streaming data, the recent techniques for stream mining of CFI?s (Closed frequent itemsets) will become inefficient.

When concept drift occurs at a slow rate in high speed data streams, the rate of change of information across different sliding windows will be negligible. So, the user won?t be devoid of change in information if we slide window by mul- tiple transactions at a time. Therefore, we propose a novel approach for mining CFI?s cumulatively by making sliding width(? 1) over high speed data streams. However, it is nontrivial to mine CFI?s cumulatively over stream, because such growth may lead to the generation of exponential num- ber of candidates for closure checking. In this study, we develop an efficient algorithm, Stream-Close, for mining CFI?s over stream by exploring some interesting properties.

Our performance study reveals that Stream-Close achieves good scalability and has promising results.

Keywords:Data stream, CFI?s, Association rules.

1 Introduction  Mining CFI?s has the same power as mining the com- plete set of frequent itemsets, but it will drastically reduce the number of redundant frequent itemsets to be generated and increase the efficiency and effectivity of mining.

Recently, much research has been done on closed item- sets mining [1-4], but it is mainly for traditional databases where multiple scans are needed, and whenever new trans- actions arrive, mining should be performed from scratch on whole of the updated database instead of mining on new transactions with the help of already mined old CFI?s; there- fore, they are not suitable for data stream mining.

A data stream is an ordered sequence of transactions that arrives in a timely order. Unlike traditional static databases,  data streams pose the following challenges. First, they are continuous, unbounded and comes with high speed. Sec- ond, the volume of data streams is very large. Third, the data distribution in streams usually changes with time i.e, concept drift occurs.

As data stream model is motivated by emerging applica- tion involving huge data sets, e.g., customer click streams, telephone records, large sets of web pages and sets of retail chain transactions, much research on how to get frequent patterns in a data stream model has been conducted. In [5- 7], the authors propose algorithms to find frequent itemsets throughout the entire history of data streams. In [15], an algorithm for incremental mining of closed itemsets based on formal concept analysis and Galois lattice is proposed.

In [8-10], different sliding window models are used to find recent frequent itemsets in data streams. These algorithms mine frequent itemsets, instead of CFI?s, with one scan over entire data streams. In [11], Chi et al propose the Mo- ment algorithm to mine CFI?s over a data stream sliding window. In [12], Nan Jiang et al propose CFI-Stream algo- rithm to mine CFI?s over a sliding window by maintaining lexicographical ordered direct update tree. The algorithm checks for each and every itemset in newly arrived transac- tion to check for the closedness property. But, this generates an explosive number of itemsets to be checked which will be very costly. Moreover when volume and incoming rate of data streams are very high, the above proposed meth- ods consume significant time when window width is larger and support threshold is low. The number of arrived trans- actions overshoots the main memory and are to be stored in secondary storage devices, making access very expen- sive and finally leading to large increase in user response time. when concept drift is not too dramatic, the informa- tion change across different sliding windows will be negli- gible. Therefore In order to overcome the above problems we can slide the window by multiple transactions at a time.

In this paper, an efficient algorithm, called Stream-Close   DOI 10.1109/ICDM.Workshops.2008.53    DOI 10.1109/ICDMW.2008.51     is developed to cumulatively mine the CFI?s by using the sliding width(? 1) based on pattern-growth approach.

Several novel ideas are introduced in the algorithm development. Specifically, we make the following contri- butions:  ? Closure checking of itemsets is done directly in the mining process through Look-ahead approach to obtain the closure of itemsets in newly added part of the window.

? We perform mining process only once on the newly arrived block of transactions.

? Two optimization techniques, maximum itemset matching and Common prefix pruning, are de- signed to improve the performance.

? Dynamic reordering of items is done to assist max- imum itemset matching in pruning nonclosed item- sets.

Maximum itemset matching is used for obtaining new CFI which helps in direct pruning of non closed itemsets.

Common prefix pruning is designed to reduce the number of candidates for closed itemset checking for some itemsets which share a common prefix, thereby reducing the search space. Our performance study shows that Stream-Close is efficient and scalable.

The rest of this paper is organized as follows. Section 2 formally defines the concept of CFI?s, Lexicographical or- dered direct update tree (LDIU tree) and describes the nota- tions to be used throughout the paper. Section 3.1 gives an overview of algorithm Stream-Close. Section 3.2 explains the strategies for finding new CFI?s arising from newly ar- rived block of transactions. Section 3.3 discusses the op- timization techniques and ideas used in algorithm develop- ment. Section 3.4 presents our proposed Stream-Close al- gorithm. The performance evaluation is depicted in Section 4. Finally, Section 5 concludes the paper.

2 PRELIMINARIES  We use following notations in the rest of the paper.

? ?=?: denotes ?equals?.

? ?:=?: denotes an assignment.

Let I:= {i1, i2, ...., in} be a set of n elements, called items. A subset X? I is called an itemset. A m-subset is called a m-itemset. Each transaction t is a set of items in I.

Given a set of transactions T, the support of an itemset X is the percentage of transactions that contain X. An itemset X is a closed frequent itemset in T if X is frequent in T and        C, D  A, B, C  A, C, D  A, B  A, B, C  B, C  w indow  #1  w indow  #2  tid items  tim eline  Figure 1. A streaming example.

there exists no proper super-itemset Y of X such that Y has the same support as X in T.

The following notations are used throughout the paper and explained w.r.t figure 1:  ? W: Window consisting of block of transactions.

W represents transactions with tid?s 1-4(i.e window#1).

? d: Sliding width(?1).

d is equal to 2.

? d?-block: Newly arrived block of transactions(of width  d) when we slide window W by width ?d?.

d?-block represents transactions with tid?s 5-6 (of width  d:=2) when we slide window W by width ?d?:=2.

? d-block: Block of transactions (of width d) which left  W after sliding W by width ?d?.

d-block represents transactions with tid?s 1-2(of width  d:=2) which left W after sliding W by width ?d?:=2.

? W/d-block: Set of transactions which are in W but not  in d-block.

W/d-block represents transactions with tid?s 3-4.

? W ?: Union of W/d-block and d?-block.

W ? represents transactions with tid?s 3-6(i.e window#2).

? S: Minimum support threshold.

Next we will discuss lexicographical ordered Direct Up- date (LDIU) tree[12] used to store frequent closed itemsets in curent sliding window.

We assume that there is a lexicographical order among the items in I and we use A?B to denote that item A is lexi- cographically smaller than item B. Furthermore, an itemset can be represented by a sequence, wherein items are lexico- graphically ordered. For instance, {W, X, Y} is represented by WXY, given W ? X ? Y. We also use notation ? to denote lexicographical order between two itemsets. For ex- ample, AB ? ABC ? CD.

We use the above lexicographical order to store closed itemsets in LDIU tree. We use a lexicographical ordered DIU tree[12] to maintain the current closed itemsets. Each node in the LDIU tree represents a closed itemset. There are k levels in the LDIU tree, each level i stores the closed itemsets of length i, where k is the maximum length of the current closed itemsets. Each node in the LDIU tree stores a closed itemset, its current support and count information,     AB  C  ABC  CD   3 1       Figure 2. LDIU tree for transactions 1-4 in fig- ure 1.

and the links to its immediate parent and children nodes.

The count of an itemset indicates how many transactions in W are same as itemset. Figure 2 illustrates the LDIU tree after the first four transactions arrive in figure 1. The support of each node is labeled in the upper right corner of the node itself and count of node is labeled in lower right corner of node itself. The figure shows that currently there are 4 closed itemsets, C, AB, CD, and ABC in the LDIU tree, and their associated supports are 3, 3, 1, 2 and counts are 0,1,1,2 respectively.

We will explain how to fetch closure of an itemset from LDIU tree. For fetching closure of an itemset we perform depth-first scan from rightmost point of the LDIU tree. We declare the first superset of an itemset obtained during scan as the closure of the itemset. Suppose, there exists a closure of itemset other than first superset, then first superset will not be a closed itemset in LDIU tree which is not possible.

Therefore, first superset is the closure of the given itemset.

Let us consider obtaining the closure for itemset (c) from LDIU tree as shown in figure 2. We do depth- first scan from rightmost point of the LDIU tree. We obtain (c) with support equal to 3 as improper superset to be the closure of itemset (c). Now, if there exists a second superset of (c) with support greater than 3, then (c) is not a closed itemset in LDIU tree which is impossible.

Problem Statement-Given a sliding window W, a sliding width ?d?(?1), a minimum support threshold S, the set of CFI?s in W, when we slide window W by a width ?d?, problem is to mine the set of CFI ? cumu- latively in W ? based on CFI?s in W/d-block and on d?- block instead of mining on W ? from scratch.

3 Efficient Cumulative Mining of CFI?s  In this section, we present our proposed Stream-Close algorithm and optimization techniques to prune the number of candidate itemsets for closure checking with the help of an in-memory data structure, called lexicographical ordered  Direct Update (LDIU) tree, to perform the closure checking online over a data stream sliding window. We first give an overview of Stream-Close. Then, we discuss the conditions that we need to check for closed itemsets and how we check for them when performing addition and deletion operations.

Based on this, we develop an online algorithm to discover and incrementally update closed itemsets.

3.1 Algorithm overview  When a block of consecutive transactions arrives to or leaves the current data stream sliding window, the algorithm checks each itemset in the block of transactions on the fly and updates the associated closed itemset?s supports. Cur- rent closed itemsets are maintained and updated in real time in the LDIU tree. The CFI?s can be output at any time at user?s specified thresholds by browsing the LDIU tree.

Our algorithm is an incremental algorithm where we check for closed itemsets and update their associated sup- ports based on the previous mining results. This is more ef- ficient as compared with mining approaches that rescan and regenerate all closed itemsets when a new block of transac- tions arrives. Also in [12], they perform closure checking for each and every itemset in new transaction whereas we have several optimization techniques to prune the number of candidates for which closure checking has to be performed.

We discuss the update of the DIU tree and the closure checking procedure for addition and deletion operations in section 3.3.

3.2 Strategies to find new CFI?s arising from d?-block  We will be having a set of CFI?s in W. When we slide window by width d, some of CFI?s in W become infrequent closed or nonclosed, some will remain frequent closed or nonclosed in W/d-block and upon addition of d?-block some new CFI?s will arise in W ? which are not in CFI?s for W/d- block. Those new CFI?s have to be present in d?-block.

Therefore, To find new CFI?s in W ?, we need to check whether each and every itemset X with support?1 in d?- block is a new CFI in W ?.

For that we need to get the closure of X in W/d-block say Y and in d?-block say Z.

Case 1:If Y?Z=X and X/? CFI in W/d-block and support of X in W ?? S, then by closure definition X is a new CFI in W ?.

To illustrate case 1, consider an example from table 1 and table 2. Let us take itemset X:=(a,b). It?s closure in W/d- block is Y:=(a,b,c:3) and in d?-block is Z:=(a,b,d,e:1). Here, Y?Z=X and X:=(a,b) is not closed in W/d-block. Consid- ering S:=4, X:=(a,b) becomes a new CFI in W ?.

Transaction ID Items in transactions 1 a b c 2 a b c d 3 a b c d e 4 b c d 5 b c d e 6 b c d e f g  Table 1. Transactions 1-6 represent W/d- block.

Transaction ID Items in transactions 7 a b d e 8 a c e 9 b d e f  10 a c g  Table 2. Transactions 7-10 represent d?-block.

Case 2:If Y?Z=? and support of Z in W ?? S, then Z is a new CFI in W ?.

To illustrate case 2, consider an example from table 1 and table 2. Let us take the itemset X:=(a,c,g). It?s closure in W/d-block is Y:=? and in d?-block is Z:=(a,c,g:1). Here, Y?Z=? and X:=(a,c,g) is closed in W ?. Considering S:=1, X:=(a,c,g) becomes a new CFI in W ?.

First case is a general case where Y and Z exist for a given itemset X. Second case arises when Y=?. So in this case X cannot be a CFI in W ? since there exists a closure for X in W ? in the form of Z.

But the above mentioned approach is similar to brute force approach since it needs checking of each and every itemset in d?-block for closure. So we discuss in the next section optimization techniques and various ideas to prune the search space to reduce the number of candidates for clo- sure checking.

3.3 Optimization techniques  The following notations are used in this section: ? ?: to denote an item.

? (): to denote an itemset.

? { }: to denote todo-set or done-set or conditional set.

Most frequent pattern mining algorithms conduct depth-  first enumerations in the pattern space[13]. It starts from an empty pattern set, recursively calls the pattern-growth routine to expand the pattern set. Since the individual items are sorted, at any stage of the algorithm, all the single items can be partitioned into three disjoint sets: the conditional set (the items appearing in the current pattern), the todo-set (the items to be expanded based on the current pattern) and  {a}  {a,b}  {a,b,c}  {a,b,c,d} {a,b,c,e}  {a,b,c,d,e}  (a)  {a,b,d}  {a,b,d,e}  {a,b,e}  {a,c}  {a,c,d}  {a,c,d,e}  {a,c,e}  {a,d}  {a,d,e}  {a,e}  Figure 3. Depth-first search in pattern space.

the done-set (all the other items).

For example consider a search space with five single  items a,b,c,d,e as shown in Figure 3[13] in the same order.

At the time when the depth-first search reaches pattern (a,c), the conditional set is {a,c}, the todo-set is {d,e} and the done-set is {b}.

Optimization 1:Dynamic reordering We now discuss the item reordering routine [13] of the  algorithm. This pruning method is based on the following lemma. Further we will see how dynamic reordering tech- nique can be used to assist other optimization techniques in pruning non closed itemsets.

Lemma 1. Let P3 be a closed itemset, if closure of itemset P1 is P3 , then for any itemset P2 such that P1 ? P2 ? P3, P3 is a closure of P2.

Proof. Refer [16]  For example, if itemset (a)?s closure is itemset (a, b, c, d), so are patterns (a, b),(a, c),(a, d), (a, b, c), (a, b, d), and (a, c, d), thus all these itemsets can be safely pruned without further checking for closedness. However, the pruning tech- nique is nontrivial because the prunable space is embedded in the whole search space, removing this space would leave the whole search space unconnected.

Take figure 4[13] as an example. Assume itemset (a, b, c, d) is closure of (a), and (a, b, c, d) has been selected as a closure. According to Lemma 1, the search space con- taining (a, b, d), (a, c), (a, d), and (a, c, d) can be pruned.

However, if we remove them, those itemsets which contain item e i.e., ((a, b, d, e), (a, c, d, e), (a, c, e), (a,b,e) and (a, d, e) etc). will be unreachable. To overcome this problem, we dynamically reorder the search space as (a,e,b,c,d) shown in figure 5, where we enumerate patterns containing item ?e? first and items ?b?, ?c?, ?d? later. The search space within the dashed lines in figure 5[13] is pruned. We refer items ?b?,?c?,?d? as the set of prunable-items.

{a}  {a,b} {a,c} {a,d}  {a,e}  {a,b,c} {a,b,d} {a,b,e}  {a,b,c,d} {a,b,c,e}  {a,b,c,d,e}  {a,b,d,e}  {a,c,d}  {a,c,d,e}  {a,c,e} {a,d,e}  (a)  Figure 4. Search space without dynamic re- ordering.

{a}  {a,d}  {a,c,d}  (b)  {a,e}  {a,e,b}  {a,e,b,c}  {a,e,b,c,d}  {a,e,b,d}  {a,e,c}  {a,e,c,d}  {a,e,d}  {a,b}  {a,b,c}  {a,b,c,d}  {a,b,d}  {a,c}  Figure 5. Search space with dynamic reorder- ing.

Transaction ID Items in transactions 1 a b c e 2 a b c d 3 c f g h 4 c g h 5 d e f 6 d g h  Table 3. Transactions 1-6 represent W/d- block.

Transaction ID Items in transactions 7 a b f 8 a b f p 9 c d e f  10 c d g  Table 4. Transactions 7-10 represent d?-block.

Optimization 2:Look ahead approach As we saw in section 3.2 we need to have the closure  of itemset X in d?-block. one way is to run the non incre- mental algorithm on d?-block for finding CFI?s in d?-block and store the CFI?s obtained in LDIU tree. Then again run our incremental algorithm on d?-block to find new CFI?s in W ? by obtaining closure of X in d?-block already stored in LDIU tree. Clearly above method is not efficient since it needs two executions on d?-block. Therefore in order to cir- cumvent the above problem we use Look ahead approach.

Here we obtain the closure of X in d?-block directly in sin- gle execution. We will explain our approach w.r.t table 4.

So let us consider d?-block for pattern-growth by construct- ing FP-tree on it. During pattern-growth, if frequency of two items are equal we give priority according to alphabet- ical order. So If frequency of items ?b? and ?d? are equal, then ?b? comes above ?d? in fptree header.

When we get itemset (g) in pattern-growth, since LDIU tree is empty we look in to it?s conditional FP-tree and find items ?c? and ?d? with support same as (g). Therefore clo- sure of (g) is (c,d,g). let us consider itemset (a) and when we look in to it?s LDIU tree we get it?s closure as (a,b,f) which was found when we had itemset (b) by looking in to b?s conditional FP-tree.

Lemma 2. The closure of itemset X can be found by looking in to LDIU tree. If it doesn?t exist then items with the same frequency as itemset are directly merged into the conditional set from todo?set.

Proof. Refer [16]  Optimization 3:Maximum itemset Matching     Maximum itemset matching is used for obtaining new CFI which helps in direct pruning of non closed itemsets.

Let us consider an example from table 3 and table 4.

During pattern-growth on d?-block, consider an itemset (b) whose closure is (a,b,c) in W/d-block and (a,b,f) in d?-block.

Consider their intersection (a,b) which is a new CFI in W ?.

Here we directly got a new CFI (a,b) without looking at itemset (b,a).

Lemma 3. If the intersection of closures for itemset X in W/d-block and d?-block has common items in todo-set but not in done-set for X in d?-block, then the intersection Y is a newly discovered closed itemset.

Proof. Let Z be a CFI containing Y. Then there exists atleast one frequent item in Z which is not in Y. Consider CFI?s of Z in W/d-block and d?-block,which are CFI?s of Y also. Perform the intersection of CFI?s . By lemma 3 statement it is Y. Therefore Z doesn?t exist. Hence the proof.

We will see in optimization 5 the reason for mentioning the condition that intersection can have common items in todo-set but not in done-set for X in d?-block in lemma 3.

Optimization 4:Prune candidate itemsets for closure checking by Maximum itemset Matching and dynamic reordering  Considering similar example used in Maximum itemset Matching, we can prune itemset (b,a) without checking for it. For itemset (b) the todo-set items are {a,f}. Since inter- section of closures of (b) is (a,b) and common todo-set item is ?a? present in both intersection (a,b) and todo-set items {a,f}, we can skip (b,a) for closure checking by dynamic reordering {f,a} instead of {a,f}. This approach is very ef- ficient when itemset size is small and intersection size is large. The following lemma states the above property. The above property takes care of common suffix pruning since candidate itemsets containing common todo-set items are getting pruned.

Lemma 4. The todo-set items of an itemset X present in it?s maximum itemset matching along with itemset X do not form candidates for closure checking.

Proof. Refer [16]  Optimization 5:Common prefix pruning Common prefix pruning is designed to reduce the num-  ber of candidates for closed itemset checking for some item- sets which share a common prefix, thereby reducing the search space.

We shall explain our approach by considering an exam- ple from table 3 and table 4. During pattern-growth on d?- block, Consider the itemset (a). The done-set of (a) is {p,b} and todo-set is {f}. Consider intersection of closures of (a) in W/d-block and in d?-block i.e (a,b). Since (a,b) contains done-set item of ?a? i.e ?b?, therefore itemset (a,b) is already  found when we considered itemset (b). So there won?t be any CFI Z containing (a) and todo-set items of (a), Since itemset (b) would be present along with Z. For example itemset (a,f) cannot be CFI since (a,b,f) is the closure of (a,f).

Lemma 5. If the intersection of closures for itemset X in W/d-block and d?-block have common items in done-set for X in d?-block, then there exists no CFI containing X as a base and todo-set items of X in pattern-growth strategy.

Proof. Suppose intersection of closures for X in W/d-block and d?-block have common items in done-set for X in d?-block and Let Z be a CFI containing X as a base and todo-set items of X in pattern-growth strategy.

Then there exists a CFI Y which is a union of Z and items in intersection of closures for X which are in done-set for X in d?-block. Therefore Z is not a CFI. Hence the proof.

Optimization 6:Prune non closed itemsets by dy- namic reordering  From table 3 and table 4, Consider itemset (p) during pattern-growth on d?-block. (p) doesn?t have closure in W/d-block. Considering minimum support S:=1 in W ?, the closure of (p) in d?-block is (a,b,f,p). So (a,b,f,p) is a new CFI in W ?. Since todoset-items of p which are present in (a,b,f,p) are {a,b,f}, all possible subsets of (a,b,f) along with (p) won?t be having closure in W/d-block. So their closure will be (a,b,f,p) itself in W ? which is already found when we consider itemset (p). Therefore all possible subsets of (a,b,f) along with (p) can be pruned by dynamic reordering. This case may arise when itemset contains newly added items in d?-block or when itemset is not present in W/d-block. The following lemma states the above property.

Lemma 6. All combinations of todo-set items of an itemset X in it?s closure in d?-block with itemset X as a base including itemset X can be pruned when itemset X doesn?t have a closure in W/d-block and itemset X is frequent in W ?.

Proof. Refer [16].

Optimization 7: update the CFI?s in W after sliding W by width ?d?  It is easy to observe that deletion of d-block from W doesn?t result in new CFI?s in W/d-block.

When we delete d-block from W and update(decrease) the support of CFI?s in W w.r.t to d-block, some CFI?s in W will become infrequent (S=0), rest of CFI?s will become frequent closed or nonclosed in W/d-block.

We discuss the strategies to handle the above two cases when CFI X becomes infrequent and frequent in W/d-block.

Case 1:When CFI X become infrequent(S=0) in W/d- block, we delete it from LDIU tree for W.

Case 2:When CFI X become frequent in W/d-block, we check for it?s closure. If it is closed in W/d-block we retain it otherwise we delete it from LDIU tree for W.

we perform deletion operation step by step (i.e updating LDIU tree) for each transaction in d-block similar to [12].

But for closure checking of a closed itemset we adopt a dif- ferent method.

In the following part of this section, we use the notations as follows:  ? t: An outgoing transaction in Window W and belong- ing to d-block.

? W/t: Transactions in Window W excluding t.

After we perform deletion operation w.r.t t, W:=W/t. We  perform the above operation until W=W/d-block.

In[12] they state that to determine if a closed itemset in  t is closed or not in W/t, they find all the proper supersets of that itemset in W/t that are closed in W/t. They perform intersection of all those supersets. If intersection is equal to itemset itself then they declare itemset to be closed in W/t. They perform closure checking for itemsets based on precedence order of length in an outgoing transaction i.e, closure checking for itemset of length i will be performed first than for itemset of length j if i>j. The reason for this precedence will be known in Lemma 7.

But the above method requires searching for all proper supersets of that itemset in W/t that are closed in W/t.

So we propose the following lemma which advocates the determination of closedness of an itemset by searching only one proper superset of itemset in W/t that is closed in W/t.

Lemma 7. If Y is a closed itemset in W and Y is present in t, then scan the LDIU tree for the first proper superset of Y by traversing depth-first from rightmost point of the tree. If the first proper superset obtained from LDIU tree has support same as that of Y in W/t, then Y is not closed.

If the first proper superset has support less than that of Y in W/t or if there is no proper superset present, then Y is closed.

Proof. If the first proper superset obtained from LDIU tree has support same as that of Y in W/t, then by closure definition Y is not closed. If there is no proper superset present, then by closure definition Y is closed. Suppose, the first proper superset has support less than that of Y in W/t and there exist another proper superset of Y, say Z in LDIU tree whose support is same as Y. Then the first proper superset is not closed since there will be presence of (Z-Y) items wherever first proper superset is present in W/t. But first proper superset is closed in W/t by definition of lemma 7. Therefore Z does not exist.

Hence the proof.

Transaction ID Items in transactions 1 a b c f  Table 5. Transaction 1 represent d-block.

Transaction ID Items in transactions 2 a b c g 3 b c f 4 a b c d g 5 b c  Table 6. Transactions 2-5 represent W/d- block.

Since closure checking of itemset needs to obtain it?s proper superset, the support or closedness of proper superset should be known prior to the closure checking of the given itemset. This is the reason for precedence order of length for closure checking of itemsets.

To illustrate the above lemma consider d-block as shown in table 5, W/d-block in table 6 and the LDIU tree shown in figure 6.

Taking S:=1, let us consider itemset (a,b,c) present in table 5 which is a CFI in W. Now to check whether it is closed in W/d-block, we find first proper superset of (a,b,c) i.e (a,b,c,g) by scanning from rightmost point of LDIU tree.

Since support of (a,b,c) is same as that of (a,b,c,g) i.e, equal to 2 in W/d-block, we conclude (a,b,c) is not closed in W/d- block and delete (a,b,c) in LDIU tree. let us consider itemset (b,c,f) present in table 5 which is a CFI in W. Now to check whether it is closed in W/d-block, we find first proper su- perset of (b,c,f) by scanning from rightmost point of LDIU tree. Since there is no proper superset of (b,c,f) in LDIU tree, we conclude it is closed and just decrease it?s support by 1. let us consider itemset (b,c) present in table 5 which is a CFI in W. Now to check whether it is closed in W/d-block, we find first proper superset of (b,c) i.e (b,c,f) by scanning  bc  bcfabc  abcdg  abcf abcg        Figure 6. LDIU tree for d-block?W/d-block of table 5 and table 6.

from rightmost point of LDIU tree. Since support of (b,c,f) is 1 which is less than support of (b,c) i.e 4 in W/d-block, we conclude (b,c) is closed in W/d-block. There cannot exist any proper superset of (b,c) in LDIU tree with sup- port equal to 4 because if it exists, then (b,c,f) will not be a closed itemset in LDIU tree.

We do not need to update(increase) the support of CFI?s in W/d-block w.r.t d?-block, because during pattern-growth on d?-block , while intersecting the closures of an itemset X, we check whether the intersection is same as closure of X in W/d-block. If it is same we increase the support of CFI of X in W/d-block by the support of X in d?-block. So, If CFI?s in W/d-block are present in d?-block then they are updated during pattern-growth on d?-block otherwise we do not need to update them.

We integrate all the optimization techniques mentioned above in to Stream-Close Algorithm development which will be discussed in next subsection.

3.4 Stream-Close: DESIGN AND IM- PLEMENTATION  In this section, we formulate the Stream-Close algo- rithm which mines new CFI by FP-tree method.

Input: W, d, LDIUW(LDIU tree for W), LDIU- delta(LDIU tree for d?-block), d?-block, S:=1, IS//global pa- rameters.

Output: Set of CFI? in W ?.//global parameters.

BEGIN 1: CFI? := ?, LDIU-delta:=?; 2: For every CFI in LDIUW, update the support w.r.t  d-block;//Applying optimization 7 so that resulting CFI?s support will be in accordance with W/d-block and CFI?s in W which become nonclosed in W/d-block are removed.

3: Scan the items in d?-block according to their support in W ? w.r.t minsup S and create FP tree F on scanned d?- block with support:=1 in d?-block;//Since infrequent items in W ? present in d?-block don?t contribute to Set of CFI? in W ?.

4:IS := ? ;//global stack to keep itemsets.

5: Stream-Close:Addition(F);//Applying Optimiza-  tions 1-6.

6: CFI?:=CFI? ? set of all CFI?s in LDIUW.

END  procedure Stream-Close:Addition(F)  1: For each item i in F.headtable, push item into IS; 2: Fetch the closure X of IS from LDIU-delta. If X is  NULL extract X by look ahead approach from IS?s condi- tional FP-tree(w.r.t minimum support:=support of IS) and  insert X in to LDIU-delta.//Applying optimization 2 3: Fetch the closure Y of IS from LDIUW.

3.1:if Y is NULL, check for support of X.

3.1.1:If support of X is ? S, then  CFI?:=CFI? ? X and dynamically reorder the todo-set item?s of IS present in X and prune them later and Go to step 6.

//Applying optimization 6 and 1.

3.1.2:If support of X is < S, then pop item from IS and continue.

4: If sum of support of X and Y < S ,then pop item from IS and continue.

5: If sum of support of X and Y ? S ,then perform Z:=Y?X.

5.1:If Z contains done-set items of IS,then pop item from IS and continue.//Applying optimization 5.

5.2:If Z?Y, then CFI?:=CFI? ? Z and dy- namically reorder the todo-set item?s of IS present in Z and prune them later and Go to step 6. //Applying optimization 3 and 4.

5.3:If Z?Y=Y and if Y?s support<S then CFI?:=CFI? ? Y, update the support of Y by support of IS and dynamically reorder the todo-set item?s of IS present in Z and prune them later and Go to step 6.

5.4:If Z?Y=Y and if Y?s support?S, then update the support of Y by support of IS and dynamically reorder the todo-set item?s of IS present in Z and prune them later.

6:construct IS?s conditional FP-tree Fnew(w.r.t mini- mum support:=1),call Stream-Close(Fnew), pop item from IS.

Stream-Close algorithm illustrates how to find CFI? in W ? when we slide W by width ?d?. First we perform dele- tion operation w.r.t d-block and find the set of CFI? in W/d- block as illustrated in line 2 of BEGIN block. As shown in lines 3-5 of BEGIN block, we perform insertion opera- tion w.r.t d?-block and scan the items in d?-block according to their support in W ? w.r.t minsup S and create FP tree F on scanned d?-block to perform FP-growth routine. IS is a global stack to keep track of itemsets generated during FP- growth routine.

In procedure Stream-Close:Addition, we perform FP- growth routine to check for new CFI?s generated due to ad- dition of d?-block. For each itemset generated during FP- growth routine, we extract the closure of IS in d?-block say X from LDIU-delta. If it is not present in LDIU-delta, we extract from IS?s conditional fp-tree by merging items of same support as that of IS to form IS?s closure(line 2). Next we fetch the closure of IS in W/d-block say Y from LDIUW tree maintained for W/d-block(line 3). If Y is NULL, we check for support of X and if support of X is ? S we add X as a new CFI to the set CFI? and dynamically reorder the todo-set item?s of IS present in X and prune them later by     applying optimization 2(line 3.1 and 3.1.1). If Y is NULL and support of X is < S, then any itemset which is a super- set of IS has support<S in W ?, therefore pop item from IS and continue to examine next itemset(line 3.1.2). Similar is the case for line 4.

If sum of support of X and Y(i.e support of IS in W ?) is ? S, then we need to examine if their intersection say Z is a new CFI(line 5). If Z contains done-set items, then it should have been already examined earlier according to optimization 5, so all intersections of closures of supersets of IS contains done-set items. Therefore pop item from IS and continue(line 5.1). If Z is a subset of Y, then Z is non- closed in W/d-block but is closed in W ? due to addition of d?-block, therefore add it as a new CFI to set CFI? and prune common todo-set items by dynamic reordering(line 5.2).

Suppose if Z=Y and support of Y is <S in W/d-block, then Y(already closed) becomes frequent in W ? due to addition of d?-block, therefore add it as a new CFI to set CFI? and prune common todo-set items by dynamic reordering(line 5.3). If support of Y is ?S in W/d-block then it is already present in LDIUW tree, therefore just update it?s support by support of IS in d?-block and prune common todo-set items by dynamic reordering(line 5.4). Line 6 constructs IS?s conditional FP-tree Fnew(w.r.t minimum support:=1) to explore further itemsets based on dynamic reordering and recursively calls the procedure Stream-Close on Fnew.

Finally in line 6 of BEGIN block it merges CFI?s of CFI?  and LDIUW tree to output the set of CFI? in W?.

Lemma 8. An itemset is a CFI in W ? iff Stream-Close says so[1].

Proof. An itemset D is found as a CFI by Stream-Close when (1) D is frequent, (2) there is no item which appears in every transaction in D-conditional database, and (3) D is not a proper subset of any CFI already found. To assert correct- ness of the lemma, we show that there is no frequent closed itemset E which can be found later such that D is a sub- set of E. Suppose, we can find such an itemset E, then (E- D) 	=0 must happen in every transaction of the D-conditional database. This leads to a conflict with the fact that there is no item appearing in every transaction in the D-conditional database.

Thus, we have the lemma.

The correctness of the algorithm has been reasoned step- by-step. It generates the complete set of CFI?s in W ? as shown in above lemmas.

4 Empirical results  We compare our algorithm with Moment [11], which is the state-of-the-art algorithm to mine frequent closed item-  0 0.01 0.02 0.03 0.04 0.05 0.5   5.5   10.5   15.5   20.5  The Minimum Support (%)  R un  ni ng  ti m  e in  S ec  on ds     Moment Stream?Close  Figure 7. Performance comparisons of Mo- ment and Stream-close  0 0.01 0.02 0.03 0.04 0.05 0.4  0.9  1.4  1.9  2.4  2.9  The Minimum Support (%)  M em  or y  us ag  e in  n um  be r  of it  em se  ts     Moment Stream?Close  Figure 8. Memory usage results of Moment and Stream-close. The order of number of itemsets is 107.

sets in data streams. For performance evaluation, the syn- thetic dataset T10.I6.D100K is used.

The dataset is generated by the same procedure as de- scribed in [14], where the three numbers of each dataset denote the average transaction size (T), the average maxi- mal potential frequent itemset size (I) and the total number of transactions (D), respectively.

In our experiments, the transactions of T10.I6.D100K dataset are looked up incrementally in blocks in sequence to simulate the environment of an online data stream.

In our experiments we keep sliding width parameter ?d?:=10 for Stream-Close, window width:=1,00,000 for both Stream-Close and Moment and perform experiments over 100 sliding windows for Moment and 10 sliding win- dows for Stream-Close(since ?d?:=10) and take the average processing time for every 10 transactions processed under different minimum supports for T10.I6.D100K data set as shown in figure 7.

We can see from figure 7 that Stream-Close runs much faster than Moment when the support threshold is rela- tively low, because the number of boundary nodes stored in the data structure of Moment increases when the support threshold decreases; as the number of nodes to be processed     and checked for node property increase, execution time is increased. When the support threshold is relatively high, these two algorithms have comparable running time. Mo- ment runs a little bit faster than Stream-Close as the thresh- old increases. This is because as the threshold is increased, the number of the boundary nodes in Moment decreases, while Stream-Close processes the same number of closed itemsets independent of support information. This is advan- tageous when users have different specified support thresh- olds in their online queries.

Regarding memory usage, Stream-Close maintains only CFI?s in LDIU-tree but whereas for Moment when the user defined support threshold is small, the number of nodes it maintains in the memory increases dramatically, which con- sists of all the infrequent gateway nodes, unpromising gate- way nodes, intermediate nodes, and closed nodes as shown in figure 8.

We performed all our experiments on 2 GB RAM, 1.8 GHz AMD machine.

Our performance study shows that Stream-Close is very efficient and the optimization techniques proposed in this paper are effective in improving the algorithm efficiency.

5 Conclusions  In this paper, we investigated the issues for cumula- tive mining of CFI?s in high speed data streams and ad- dressed the inefficiency problem of mining the new window from scratch,sliding window by one transaction and also the problem associated with closedness checking of candidate itemsets in newly arrived block. We proposed an algorithm Stream-Close by exploring several novel techniques to in- crease efficiency and scalability. It is a promising algorithm to mine CFI?s over high speed data streams. In the future, we plan to explore how to mine compressed, top-k item- sets in datastreams and also how to adaptively vary sliding width according to speed of the data streams. Also we plan to perform experiments on different datasets.

6 Acknowledgements  We thank Dr. Yun Chi at the University of California for providing us the Moment algorithm source code.

