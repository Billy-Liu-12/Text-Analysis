Hoarding and prefetching for mobile databases

Abstract  One of the main goals of mobile data access is to reach the ubiquity inherent to the mobile systems: to access information regardless of time and place. Due to mobile systems restrictions such as, for instance, limited memory and narrow bandwidth, it is only natural that researchers expend efforts to soothe such issues.

This work will approach issues regarding the cache management in mobile databases, with emphasis in techniques to reduce cache faults while the mobile device is either connected, or with a narrow bandwidth, or disconnected at all. Thus, it is expected improve data availability while a disconnection.

In order to improve data availability on the DBMS hosted on mobile device side, this work proposes to select a priori a subset of the data available on the server side DBMS and copy them to the mobile device side DBMS. To the a priori data selection, this work proposes to mine the SQL history of the mobile device user.

1. Introduction  According to [4], disconnected operations are one of the open fields of research of mobile computing.

Various studies show that data broadcasting is a effective way of updating on the mobile environment [1,2,5,11,12]. This technique consists basically in a periodical transmission of data from the server or servers to their clients. The broadcasting approach is interesting because it is computationally cheap since it broadcasts the same data to all clients or to groups of clients. Another point that makes it interesting is the observation that the downlink server-to-client is usually wider than client-to-server uplink. In addition, the broadcasting technique is scalable, since it does not  depend on the number of clients to which the data is being sent.

Even though the broadcasting technique has its advantages, it also has its down side. For instance, the time for an item appear in result set may increase since the update depends on the server broadcast schedule.

One way to soothe this problem is to cache frequently accessed data on the client side. In this way, the clients can serve many requests from the local cache without sending uplink requests. This not only reduces the average query delay but also reduces the uplink and downlink bandwidth consumption.

To further reduce the query delay and improve the cache hit ratio, prefetching techniques can be used. In order to attend the specific need of clients, when the server broadcasts data on the broadcast channel, clients can prefetch their interested data without increasing bandwidth consumption. However, prefetching also consumes many system resources.

Automated hoarding is the process of predicting the hoard set without any user intervention, i.e., predict which set of data should be prefetched. An approach for automated hoarding based on clustering was proposed by Kunning and Popek [6]. Their clustering method was based on the notion of semantic distance.

The semantic distance between two operations was calculated by using the number of directory levels in a file system relative to objects. Another automated hoarding approach is based on finding relations among using data mining techniques. Saygin et al. [7] proposed to use association rules to find, in a client- server HTTP requests-response environment, what should be hoarded prior to the disconnection without the user interference. Yet, Song and Cao [8] proposed to use association rules in two distinct groups in order to prefetch web pages in a client-server environment: the always-prefetch and the miss-prefetch, which are the data that are often on the cache and the data that were not present in the cache, respectively.

International Workshop on Component-Based Software Engineering, Software Architecture and Reuse (ICIS-COMSAR?06)    In this paper, we propose to use automated hoarding to discover what should be early prefetched to the client-side DBMS. Hoarding through association rules [3] can be achieved through the following three phases of execution: 1) mining of the SQL queries history, 2) construction of the candidate set, and 3) construction of the hoard set and send it to the client.

In phase 1, the history of client requests are preprocessed and analyzed to come up with the association rules using data mining techniques. In phases 2 and 3 these rules are used to construct the candidate set and the hoard set, respectively.

The rest of the paper is organized as follows: Section 2 presents the hoarding and prefetching scheme proposed on this work. Section 3 describes the first and second phases of the hoarding process, respectively. Section 4 describes the simulation model and provides the experimental results we obtained, and finally Section 5 concludes the paper while discussing possibilities for future research.

2. The hoarding and prefetching scheme  The scheme for this paper we propose to find relationship between data the user queries and the data available on the server-side DBMS in order to download these related data hoping to reduce the dependency from the server by the client. By dependency we mean the waiting time for the user to get a result set including the data he queried about which was not yet available in his client-side DBMS.

We rely on that the related data is more likely to be queried in a recent future by the user, and thus this very data should be prefetched to the client-side DBMS.

The problem of finding association rules among items has been clearly defined by Agrawal et al. [3].

This definition is provided for clarity:  Let I = i1, i2, ... im be a set of literals, called items and D be a set of transactions, such that ?T?D, T?I. A transaction T contains a set of items X if X?T. An association rule is denoted by an implication of the form X Y, where X?I, Y?I, and X?Y =?. A rule X Y is said to hold in the transaction set D with confidence c if c% of the transactions in D that contain X also contain Y. The rule X Y has support s in the transaction set D if s% of transactions in D contain X?Y.

The problem of mining association rules is to find all the association rules that have a support and a  confidence greater than a user specified thresholds [3].

The thresholds for confidence and support are called minconf and minsup, respectively. The problem of mining association rules has been well studied and is outside the scope of this paper. In this paper, we focus on how a query history can be analyzed to construct association rules that capture the affinity among mobile client requests. We will examine the utilization of the resulting association rules in hoarding. In this approach, we assume that past data access queries of clients issued to the server are stored in a history log.

Association rules are obtained by analyzing the history of queries issued by clients.

To date, association rules have been used in various contexts. For example, they are useful in determining the placement and pricing of merchandise at megamarkets [3]. Automated use of association rules in hoarding has been used by [7] and [8], but both granularities were files such as web pages. However, to the best of our knowledge, the use of association rules has not been used for mining tuples in a mobile relational DBMS environment by any researcher.

3. Mining the rules  The association rules obtained after mining the request history are used for determining the candidate set and the prefetch set of the client upon disconnection. The candidate set is defined as the set of all candidates for hoarding for a specific client.

Prefetch set is the set of data items actually loaded to the client prior to disconnection. A candidate set is constructed using inferring on association rules as explained in Section 3.1. Some other heuristics are used to prune the candidate set to the hoard set so that it fits to the cache of the mobile client as explained in Section 3.2.

The process of automated hoarding via association rules proposed in the work can be summarized as follows:  ? Queries of the client are logged to further transmission to the server.

? The queries are processed by an inferring mechanism to build the candidate set prior to disconnection.

? Candidate set is pruned to generate the prefetch set.

? Prefetch set is pushed to the client.

International Workshop on Component-Based Software Engineering, Software Architecture and Reuse (ICIS-COMSAR?06)    Table 1. Queries samples.

1. select co_name, addr_city, addr_state, c_fname, i_title, i_publisher from customer, item, orders, order_line, address, country where i_id=ol_i_id and ol_o_id=o_id and c_id=o_c_id and c_addr_id=addr_id and addr_co_id=co_id and o_id=20934;  2. select co_name, addr_city, addr_state, c_fname, i_title, i_publisher from customer, item, orders, order_line, address, country where i_id=ol_i_id and ol_o_id=o_id and c_id=o_c_id and c_addr_id=addr_id and addr_co_id=co_id and c_id = 1500;  3.1. Finding the candidates  An inferring mechanism is used to construct the candidate set of data items that are of interest to the client to be disconnected. The candidate set of the client is constructed in two steps:  ? The inferring mechanism finds the association rules whose pre-conditions, i.e., left hand side, match with the client?s requests in the current session.

? The post-conditions, i.e., right hand side of the matching rules are collected into the candidate set.

In order to have an effective hoarding process, the set of rules should be large. This way, we could come up with a sufficient hoard set that will satisfy the client?s needs for most of the client request patterns.

To obtain a large rule set after mining the history, we need to have low minimum support and confidence values for the association rules. Priorities need to be assigned for the items obtained as a result of the inferring. Our priority metric is based on the rule confidence and support values; i.e., items inferred by a rule with a high confidence or support. To include both support and confidence value, the priority of a rule is set to be the multiplication of the confidence and support value for that rule.

3.2. Pruning the candidates  As of the nature of mobile devices, the client that issued the hoard request has limited resources. The storage resource is of particular importance for hoarding since we have a limited space to load the candidate set. Therefore, the candidate set obtained in the first phase of the hoarding set should be pruned to the hoard set so that it fits the client cache. Each result set item in the candidate set is associated with a priority. These priorities together with various  heuristics must be incorporated for determining the hoard set. The data items are used to sort the rules in descending order of priorities. The prefetch set is built out of the data items with the highest priority in the candidate set just enough to fill the cache. For an effective hoarding, both successful and missed SQL queries executed during disconnection should be recorded and reflected to the history upon reconnection. In this manner, we can capture the whole picture of client requests, both connected and disconnected.

4. The simulation  To validate this proposed method, we implemented the data mining algorithms and the association rules based hoarding and prefetching mechanism. Our prototype relied on the HSQLDB version 1.7.2 as the database management system for the mobile client side. As for the server-side, we used the PostgreSQL version 8.0.3. The database scheme used was the one specified by Transaction Processing Performance Council, benchmark on Web Commerce: the TPC-W [10]. The data generator was the Database Test 1 toolkit of the Open Source Development Labs, which is an open source version based on the TPC-W specification. The Figure 1 shows the database scheme used on this experiment.

In our simulation, the queries performed on the client side are logged by the QueriesStack agent and sent to the QueriesHoard agent on the client side when a connection is available. The QueriesHoard agent builds the candidate set and the prefetch set. When a connection is available, the prefetch set is pushed to the client-side DBMS. The Figure 2 shows the interactions between the prototype components in a UML collaboration diagram.

International Workshop on Component-Based Software Engineering, Software Architecture and Reuse (ICIS-COMSAR?06)    Figure 1. TPC-W scheme [6].

QueriesStack QueriesHoard  1:  Apriori  1.1:  AprioriItemSet  1.1.1:  ?actor?  HSQLDB  1.3.1:  1.3.1.1:  1.3:  ?actor?  PostgreSQL 1.2:  Figure 2. Collaboration diagram of the prototype.

4.1. The experiment  The Table 2 shows a sample of rule generated by the prototype for queries such as described in Table 1.

For instance, the on purchased on the US, the shipping type is likely to be the UPS with 72% confidence.

Table 2. Generated  rules sample.

1. co_name=United States 25 ==> o_ship_type=UPS 18    conf:(0.72)  It is the role of the QueriesHoard agent to push from the server to the mobile device the data which is within  the scope of the rule listed in Table 2, projected by the query:  select * from customer, item, orders, order_line, address, country where i_id=ol_i_id and ol_o_id=o_id and c_id=o_c_id and c_addr_id=addr_id and addr_co_id=co_id and co_name=?United States? and o_ship_type=?UPS?;  For validation purpose, it is compared the hoarding/prefetching with LRU scheme versus a LRU- only cache police implementation.

International Workshop on Component-Based Software Engineering, Software Architecture and Reuse (ICIS-COMSAR?06)    The graphic on Figure 3 shows a comparison between the quantity of queries versus the cache size.

Using the LRU police only, the data availability tends to equalize with the cache size when using the hoarding/prefetch scheme.

T             0 10 20 30  Cache size (x10)  H it  ra tio  Apriori LRU  Figure 3. Cache hit ratio versus cache size.

As observe on the Figure 3, generally, using the Apriori data mining technique to generate association rules are more effective early on the use of the client.

As the user queries the client-side DBMS, the LRU- only updating police will eventually store the same data the prefetched ser would hold when used the hoarding/prefetch scheme. This fact can be noticed because both data updating police is base don LRU police. Thus, using the hoarding/prefetch scheme depends of less number of connections to update the client-side DBMS. However, using the hoarding/prefetch scheme demands that more data is transferred at the same time as the prefetch set is likely to be bigger than the result set actually queried by the user.

5. Conclusion  In order to improve the data availability on the mobile client, data can be downloaded from the server prior to a disconnection without user knowledge. In this paper, we propose to use association rules to find which relations should be fetched prior to a disconnection from the server-side DBMS.

Firstly, we trace the query history to find relations between data and prefetch them to the client-side DBMS. As a second step, a candidate set is built upon the data queries. Then, the candidate set is pruned in order to build the prefetch set, which will be sent to the client to update its DBMS.

A prototype was implemented in order to verify the effectiveness of the proposal. It was observed that the use of data mining mechanisms can improve the data availability on the client-side database by downloading data before it is needed by the user.

The experiment performed for this work verified that can improve successful queries on the client side using less connections to the server DBMS, reducing additional traffic.

6. References  [1] Acharya, S.; Franklin, M. and Zdonik, S.. Balancing Push and Pull for Data Broadcast. Proc. ACM SIGMOD, pages 183?194, May 1997.

[2] Acharya, S.; Alonso, R.; Franklin, M. and Zdonik, S..

Broadcast disks: Data Management for Asymmetric Communication Environments. Proc. ACM SIGMOD, pages 199?210, May 1995.

[3] Agrawal, R., Srikant, R.. Fast algorithm for mining Databases, Santiago, Chile. 1994.

[4] Bernard, G.; Bem-Hotman, J.; Bougamin, L.; Canals, G.; Defude, B.; Ferri?e, J.; Gan?arski, S.; Guerraoui, R.; Molli, P.; Pucheral, P.; Roncancio, C.; Serrano-Alvarado, P.; Valduriez, P.. Mobile databases: A selection of open issues and research directions. In ACM Sigmod Record, volume 33, issue 11, 78-83. 2004.

[5] Hameed, S. and Vaidya, N.. Efficient Algorithms for Scheduling Data Broadcast. ACM/Baltzer Wireless Networks (WINET), pages 183?193, May 1999.

[6] Kuenning, G.; Popek, G.. Automated hoarding for mobile computers. Proc of ACM Symposium on Operating Systems Principles. St. Malo, France, 1997.

[7] Saygin, Y.; Ulusoy, ?.; Elmagarmid, A.. Association rules for supporting hoarding in mobile computer environments. In IEEE International Workshop on Research Issues in Data Engineering. San Diego, CA, USA. 2000.

[8] Song, H.; Cao, G.. Cache-miss-initiated prefetch in Mobile Data Management - MDM2004, Berkeley, CA, USA.

2004.

[9] Open Source Database Lab. Database Test 1. URL: http://www.osdl.org/lab_activities/kernel_testing/osdl_databa se_test_suite/osdl_dbt-1/  [10] Transaction Processing Performance Council (TPC).

TPC Benchmark W (Web Commerce). Specification version 1.8. February 2002. URL: http://www.tpc.org  International Workshop on Component-Based Software Engineering, Software Architecture and Reuse (ICIS-COMSAR?06)    [11] Vaidya, N, and Hameed, S..Scheduling Data Broadcast in Asymmetric Communication Environments. ACM/Baltzer Wireless Networks (WINET), pages 171?182, May 1999  [12] Yee, W. G.; Donahoo, M. J.; Navathe, S. B.. Scaling Replica Maintenance In Intermittently Synchronized Mobile Databases. In Conference on Information and Knowledge Management ? CIKM, Atlanta, GA. USA. 2001.

