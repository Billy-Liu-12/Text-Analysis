What Is Complex About 273 Applications?   Untangling Application Architecture Complexity

Abstract In this paper, we first derive propositions from  the current literature addressing the causes and impacts of application architecture (AA) complexity.

We then untangle AA complexity itself by differentiating four types of AA complexity that are mingled in extant literature: interdependency-, diversity-, deviation-, and overlap-related AA complexity. Based on this more differentiated view, we validate the propositions in the setting of a European Bank. Our findings suggest that only interdependency-related AA complexity behaves as currently assumed. Other types show partially opposite effects.

1. Introduction   Global competition, new or changing regulations, and changes in customer demand  lead businesses to increase their complexity by creating new organizational layers or units, issuing variations of their products that cater to new customer segments or adding geographies to their existing ones [1, 2].

Alongside business complexity, the complexity of information technology (IT) systems supporting the business (i.e. IT complexity) is increasing [1]. This is a critical issue because of the negative impacts that IT complexity has on business, e.g. on its agility and ? as the overriding concern ? on costs [1, 3-6].

Although a number of publications mention IT complexity, a literature review among the top IS and business journals shows that IT complexity often is not the actual object of research. Nevertheless, it is possible to derive propositions from the statements made in the (academic and consulting) literature.

However, these propositions remain conjectural, with anecdotal backing at most. They also implicitly use the concept of "IT complexity" to mean different things, indicating a lack of clarity on the different facets or types of IT complexity in current research (see Section 2).

Our research helps to addresses this issue by explicating the often implicit propositions on the causes and impacts of an important part of IT  complexity (namely application architecture (AA) complexity) and by validating them on 273 applications in the investment banking (IB) arm of a European bank. By relating back to the science of complexity, we untangle the vague concept of AA complexity into different types of AA complexity: interdependency-, diversity-, deviation-, and overlap- /redundancy-related AA complexity. We are able to show that in our case study, these types are strikingly different with respect to their causes and impacts and hence require more differentiated research than has been conducted previously.

To achieve this, we first study literature in order to derive current propositions about AA complexity (Section 1). We then briefly describe our case and the research method applied to validate the propositions (Section 2). After summarizing the results of the analyses performed (Section 3), we discuss our interpretations (Section 4) and conclude by pinpointing implications for practice and further research on AA complexity. Furthermore, an appendix presents the results of the analyses in detail.

2. Application architecture complexity ? deriving propositions from the literature   Literature on IT related complexity is very fragmented, in part due to the various meanings of complexity and the various disciplines that examine it. For example, theoretical computer science refers to the computational complexity of algorithms. Here complexity is defined as the efficiency with which a problem of a certain size can be solved [7]. As another example, software engineering looks at the (procedural) complexity within application programs as measured e.g. by lines of code [8], McCabe's cyclomatic number [9, 10] (the number of linearly independent paths through a program's source code) or the Halstead metrics [11] (a function of the number of operators and operands used  in relation to the available vocabulary). However, these metrics take the perspective of the developer or reviewer of an application program.

In contrast to these perspectives, we would like to take the perspective of the IT manager looking at a company's set of applications and their interconnections, also referred to as application architecture (AA). AA has been defined as being concerned with "individual applications and their interfaces" [4, p. 48]. Together with information architecture, business process architecture as well as technology architecture, AA forms the basis of "Enterprise Architecture" [4]. Although we stay on the level of applications and measure their degree of complexity, unlike the previously described views, we do not look at their "interior" complexity.

Instead, we move one level up by viewing the applications in relation to other applications.

From this perspective, we do not find many  research articles dealing directly with AA complexity. However, we do find a number of statements in the academic and consulting literature that include several implicit propositions on causes as well as on impacts of AA complexity. Table 1 analyzes a selection of these statements with respect to types of AA complexity, their causes and impacts as derived from the academic and consulting literature.

From this analysis, one can see that different authors (or sometimes even the same author) allude to complexity but are actually referring to different facets or types of AA complexity: interdependency, diversity, deviation from standards and overlap/redundancy. Currently, research does not differentiate between these types of complexity, which is why we would like to untangle them in this paper. "Interdependency" refers to the interconnectedness of the applications in terms of the interfaces they have with each other. Applications with more interfaces to other applications would be more interdependent than those with fewer interfaces1. "Diversity" relates e.g. to the number of different technologies that an application is built on,   1 Several types of interdependencies (or "coupling") have been differentiated with respect to modules within individual applications; this includes syntactic vs. semantic vs. pragmatic dependencies [16-18] or control- vs. data exchange dependencies [19]. These types of dependencies between intra-application modules might also be transferred to inter-application dependencies. While we did not explicitly differentiate between the types, we relied on "documented" interfaces which are mostly explicit ("syntactic", e.g. an application making a Remote Procedure Call to another one) and sometimes only implicit ("semantic", e.g. if an application expects a certain data format to be left by another one and hence also assumes a certain meaning of the data). Further research might differentiate between different types of interdependencies more explicitly than we did (see also outlook on further research in Section 5).

Statement Source Cause of AA complexity Type of AA complexity  Impact of AA complexity  "Growing complexity in companies' systems can fossilize operations", "legacy systems cobbled together to respond to each new business initiative create rigidity and excessive cost", "Inflexibility [?] was the result of systems so complex that any change required individually rewiring systems to all the other systems they connect to.  [?] every change becomes a [?] expensive adventure"  [4, p. 11], cf. also [12]  Age of applications ("legacy") Business requirements ("business initiatives")  Interdependence: systems heavily connected  to each other (interfaced or "wired"/"cobbled together")  Agility decreases ("rigidity", "fossilize", "inflexibility") Costs increase ("expensive")  "The complexity has not added value. Most managers can list processes they perform in many different ways in multiple parts of the company and support with many different systems"  [4, p. 11] Business requirements/ context: diverse business processes  Overlap/ redundancy: many applications supporting overlapping processes    "wide duplication of functions", "to combat complexity [?] produced millions of dollars in savings"  [1, p. 102] Business requirements/ context: diverse business processes ("functions")  Overlap (see above)  Costs increase  "Reducing complexity means developing and implementing companywide standards [?] will lead to lower costs [?]"  [13, p.

54], cf.

also [14]  None Deviation from standard  Costs increase  "Over time they had amassed a staggering number of disparate hardware platforms, operating systems, database management systems [?]" "reduce their IT complexity and, in the process, slash IT operating and maintenance cost"  [3], cf.

also [15]  Age ("over time") Diversity of (number of different) technological platforms  IT operations and maintenance costs increase  Table 1: Deriving propositions on AA complexity from the literature (selection)      such as operating systems (OS) or database management systems (DBMS). In contrast, "deviation from the standard" looks at whether the technologies upon which an application is built comply with the standard technology set by a policy within a company. An application could be built on one single DBMS (and hence exhibit low diversity), but this DBMS could be non-standard-compliant within the company (and hence the deviation of the application from the standard would be higher).

While diversity and deviation form connections from AA "downwards" towards the IT infrastructure (technology) architecture [4, p. 48], "overlap/redundancy" forms a connection "upwards" towards business process architecture [4, p. 48]: it describes the degree to which an application covers certain functionality already covered by other applications. If two applications are supporting the same business processes for the same business products, they overlap. Hence, within the different layers of architecture that have been identified in the literature [4, 20], we focus on applications architecture (especially when looking at interdependency) that is concerned with "individual applications and their interfaces" [4, p. 48], including its touch points with business process architecture (when looking at overlap/redundancy) as well as with technology architecture (when looking at diversity and deviation from standards).

The identified types of AA complexity fit well with mainstream definitions of complexity in general complexity science [7, 21-25]. In line with others, we view complexity as an intrinsic structural property of the respective system (here: the application architecture and the application), and not as something that is primarily psychological in nature or something relative to the person observing the system [12, 26].

Although not meant to be comprehensive, Table 1 allows us to rephrase the statements in the form of propositions, which are summarized in the conceptual model underlying our research (see Figure 1).

Causes of IT complexity ? Age ? Business requirements  IT complexity ? Interdependency ? Diversity of technologies ? Deviation from  technology standards ? Overlap/redundancy  Impact of IT complexity ? Cost ? (Agility)*   Figure 1: Conceptual model underlying the propositions   The propositions we derived (by applying the four  AA complexity types introduced above) are:  Related to causes2 of AA complexity: 1. Older applications have a higher complexity  (P1.1: interdependency, P1.2: diversity, P1.3: deviation from standards, P1.4: overlap/redundancy), than newer ones (cf. the first and last line of Table 1). The underlying logic is that over time, the business and IT environments change. These changes lead to adaptations of the applications. As many of those changes get implemented in a "rush" rather than in a "well-designed" way, older applications have a higher chance of being more complex than applications that have been introduced lately and hence not been exposed to so many changes.

2. Applications with a higher complexity of business requirements also exhibit higher AA complexity (P2.1 ? P2.4 as above for the different types) than those applications with simpler business requirements (cf. the second and third line of Table 1). The reasoning underlying this proposition is different from the first in the following way: regardless of the applications' age, some applications might just have to handle more (complex) business requirements than others and hence itself be more complex. This can be true for young as well as old applications.

Related to impacts of AA complexity: 3. Applications with higher AA complexity (P3.1  ? P3.4 as above for the different types) cause higher IT costs (maintenance and operations) than applications with lower AA complexity (cf. all lines except the second one in Table 1).

The logic underlying this proposition is that it takes more resources to operate and maintain applications that e.g. have more interfaces.

This might be because e.g. making a single change to the application could necessitate checking all interfaces. Hence, the more interfaces an application has, the more effort (and hence costs) are incurred. As another example, if an application uses more than one database or operating system, it will also "collect" more cost: when changes are applied to any of these platforms, the application might have to be checked for whether it still performs as expected on the changed platform.

Hence, an application using two DBMS has double the chance of having to be checked than an application only using one DBMS.

2 In fact, the factors we term "causes" might be proxies for other root causes (e.g. "rushed" changes), which are more difficult to measure. We relied on the propositions as found in the literature.

Also, if an application relies on technologies (e.g. DBMS) that are not compliant to the standard employed in a company, the company might have to build up new skills to support this application, further adding to the cost of maintaining and operating the application (see [1, 3, 13-15] for further examples).

4. Applications with higher AA complexity cause lower business agility than applications with lower AA complexity (cf. the first line in Table 1). One logic behind this proposition is that it might be more difficult to adapt an application to meet new business environmental conditions if the application is complex (e.g. because more interfaces have to be changed) ? the change in business conditions cannot be implemented swiftly within complex applications (cf. "adaptive agility" [27, 28]). However, because of the overriding importance of costs in practice and in order to stay focused, we do not consider proposition 4 in this paper.

Although intuitive, these propositions have not been validated in the literature on AA complexity so far3. Before laying out our approached to validating these propositions, we will highlight the conclusions that researchers and practitioners/consultants have drawn from them: the current mantra is clearly to reduce AA complexity, i.e. reduce the interdependency of applications, diversity, standard deviation and functional overlap in order to reduce costs. This way of thinking is especially evident in article titles such as "Fighting complexity in IT" [5] or in advices like "any company's first step should be to focus relentlessly on reducing complexity rather than increasing it" and that Leonardo da Vinci's motto, "Simplicity is the ultimate sophistication", should be adopted by "every CIO" [13, p. 54]. As another example, the objective to "combat IT complexity by creating simplification policies" was also found on Gartner's list of the top ten resolutions for the CIO [31]. Hence, a simple AA is usually seen as favorable [28, p. 141].

The results from validating the propositions will show whether these conclusions are always warranted. If not, adjusting these recommendations is an implication for further research and for practice.

3 To verify this, we conducted a comprehensive literature review [29]. We included top IS and business journals [30]: MISQ, ISR, JMIS, MS, OS, SMR, HBR, CMR, DSI, ASQ, AMR, AMJ. This resulted in 1850 articles, of which 196 were deemed relevant.

These were analyzed in detail with respect to the above propositions.

3. Brief description of case and method   We set out to validate the propositions identified above in investment banking (IB). This is because banking itself is a highly information-intensive industry [32]: IT "matters" in banking. IB in particular is a very dynamic area of banking, with quickly changing business requirements. The industry is driven by innovation and introducing new products quickly; because of the information- intensiveness of banks, there is also a concurrent need to quickly implement the related changes with IT. In addition, the impact of AA complexity (in terms of costs) is felt very strongly in IB when the business cycle (determined by the stock exchange) is experiencing a downturn because IT costs form a major part of the overall costs [32].

The company we selected for our study is a major European bank founded over 100 years ago with around 40,000 employees working in 28 first-level departments (i.e. departments below board level). It operates 1,000 branches and its assets are roughly EUR 500 billion. The bank has so far pursued mainly organic growth with few large acquisitions. Besides IB, the bank offers retail banking, real estate and treasury services towards its private and small to medium corporate and institutional customers.

Contributing around 25% of the bank's total profit before the subprime crisis, IB has been one of the bank's major offerings. Over the last three years (2005-2007), IB costs have remained stable, with revenues climbing at a CAGR of 28%. In the same time period, front-office IB staff rose from around 800 to around 900 FTE. IB has undergone some consolidation, with the former separate IB unit being integrated into the bank as a division. The division incorporates capital markets activities in credit, equities, interest rates and foreign exchange with a strong focus on derivatives and structured products.

The bank itself categorizes its IB business into a matrix of 11 processes and 14 products (called the product-process matrix). Examples of processes are "product development", "sales", "trading", "contract agreement", and "regulatory reporting". Examples of products include "listed derivatives", "securities", and "OTC derivatives".

On the IT side, 273 applications support these processes for each of the products. Hence, an application "covers" a certain number of cells within this product-process matrix.

3.1. Data collection   We collected data on these 273 applications from  the IT staff members responsible for the applications      (only one person per application). The data we collected are mapped to the different constructs and variables in Table 2 (column "N" indicates the number of applications for which data for the respective variables were available).

Construct Variables measuring the constructs N  A A  c om  pl ex  ity   Interde- pendency  gp3_y4_Sum_Intf: number of interfaces of the application to other applications (in- and outgoing)   Diversity  gp2_y7a_OS: number of OS used by application 212  gp2_y8a_DBMS: Number of DBMS used by application 146  Deviation from standard  gp2_y7b_OS_Dev: Degree of deviation from standard OS (for each OS used by an application we checked whether it was in the list of standard OSs supported by the bank)   gp2_y8b_DBMS_Dev: Degree of deviation from std. DBMS 146  Overlap/ redundancy  gp3_overlap_count: Count of how often an application covers functionality that is also covered by another application (relies on the product-process matrix introduced above)   C au  se s  of A  A c  om pl  ex ity  Application age  y14_Age: number of years since first go-live date of application 57  Business require- ments  y19_#_user_dpts: number of user departments using the application; measure of the diversity of requirements   y24_#_IB_bankprod number of IB products covered by the application; measure of the scope of the application   y26_#_IB_bankproc: number of IB processes covered by the application; measure of the scope of the application   Im pa  ct s  of A  A c  om pl  ex ity  : c os  ts   y36_Ops_cost:  cost of operating it or "keeping the application running", i.e. of making backups, supporting the servers it is running on, etc. Activities associated with these costs are performed by the infrastructure unit of the IT department. We recorded the costs incurred last year after confirming that they tend to remain stable over time   y37_Maint_cost: cost that an application produces for maintaining it, i.e. fixing errors and making minor changes needed to keep the current state of requirement-fulfillment.

Activities associated with these costs are performed by the development unit of the IT department. These costs were collected for the last three years (2005-2007).

Table 2: Variables measured4  3.2. Data analysis   Outliers/extreme values were identified using boxplots as well as by comparing means with 5%   4 Legend: OS = Operating system; DBMS = Database management system; IB = Investment banking  trimmed means. Where significant deviations were found (ingoing interfaces: 5.43 (mean) vs. 3.85 (5% trimmed mean); outgoing interfaces: 5.54 vs. 4.37; number of user departments: 3.33 vs. 2.44; operations costs: 292 vs. 164; maintenance costs: 377 vs. 261), the outliers were discussed with the company to ensure that the provided data were correct.

We conducted the analyses with and without the outlier data to ensure that they did not have a significant impact. Because the outliers were confirmed to be typical for IB, the following results are based on the data set that includes the outliers.

Preliminary analyses consisting of the inspection of histograms and normality (e.g. the Kolmogorov- Smirnov test, which showed a significance of .000 for all variables) indicated a potential violation of the assumptions of homoscedasticity [33]. Hence non- parametric tests were used that do not rely on the respective assumptions.

The complexity variables (interfaces, diversity, deviation, and overlap/redundancy) were first analyzed using Spearman's rank order correlation to ensure that they were not correlated with each other.

No correlation of any two of these variables indicated a significant correlation at the .01 level, the highest rho obtained with significance at the .05 level (p=.031) was rho=.198. This was interpreted as an indication that the variables measured different aspects of AA complexity  Thereafter, to address the skewedness of the complexity variables, we transformed them into categorical variables: for the total number of interfaces, we created three categories (for applications with 2, 3-7, or 8 interfaces); for the diversity of OS (and DBMS), we set up two categories (for covering one or more than one OS (DBMS) as there were only 36 (20) applications using two or more OS (DBMS)); for the deviation from standard OS (DBMS), we created two categories (deviating from standard or not; only 49 (70) applications deviated from the standard OS (DBMS)). For overlap/redundancy, we transformed the data into three categories (for applications overlapping with 34, 35-79 or 80 applications in their covered cells).

For those variables with only two categories (diversity of OS/DBMS and deviation from standard OS/DBMS) we performed the Mann-Whitney test; for those variables with three categories (interfaces and overlap/redundancy) we performed the Kruskal- Wallis test to check whether applications in the different categories differed significantly for each of the cause and impact variables.

Furthermore, to check for the impact of categorization, we performed a Spearman rank order      test between the variables representing AA complexity and the variables representing causes and impacts. The results match closely in terms of significance of category differences and correlation (i.e. for those variables where groups exhibited significant differences, we also observed medium correlation strength (in terms of rho values between 0.3 and 0.5) with significance at the .01 level, reinforcing that the categorization did not have a distorting impact on the data (with the exception of the complexity-impact relation of overlap/redundancy, as this exhibited a non-linear relation that cannot be measured using the Spearman correlation; see Section 4).

4. Results   For better readability, we summarize the results of the analyses described above. The appendix contains a detailed description. Table 3 depicts the results with respect to the support found for the propositions derived in Section 25.

Table 3: Summary of results   Overall, we found support for all propositions (1- 3) only for interdependency-related AA complexity.

Other types of AA complexity did not fully behave as proposed.

5 Legend: "+" highly significant (.01 level) support of proposition that higher value of 'causes' coincide with higher value IT complexity (e.g. older applications have higher level of interdependency) or higher value of IT complexity leads to higher impact (e.g. higher level of interdependency of applications also leads to higher maintenance cost). "(+)" significant (.05 level) support of proposition that that higher value of 'causes' coincide with higher value IT complexity (e.g. applications covering more products also exhibit a higher level of interdependence).. "(-)" significant (.05 level) inversion of propositions (e.g. older applications exhibit lower level of deviation from standard OS). "(- +)" significant (.05 level) U-shape inversion of propositions (e.g.

medium level of overlap/redundancy of applications leads to lower operations cost than applications with low or high level overlap/redundancy. "-+" ditto with highly significant (.01 level).

"N/A" not applicable as overlap is computed from the two variables process and products coverage. "" (empty cell): proposition not supported  More specifically, the results for interdependency-related AA complexity show that groups of applications with more interfaces record a higher median score in terms of age (P1.1) as well as in terms of user departments involved. The same is true at a lower significance level for the number of IB products and processes: the groups of applications with more interfaces also cover more investment banking products and processes (P2.1). When it comes to complexity impacts, we also found a statistically significant difference in operations cost as well as maintenance cost across the three different interdepency-groups of applications. The more interdependent group (i.e. applications with 3-7 or more than 8 interfaces) recorded a higher median of operations and maintenance costs than the less interdependent group (less than 3 interfaces) of applications (hence supporting proposition P3.1).

For diversity-related AA complexity, we got different results: almost none of the propositions found support. Although 8 different operating systems (OS) were used in total by the 273 applications6, our tests revealed no significant difference neither in the age nor in the number of user departments involved, number of IB products or processes covered for applications using one versus applications using more than one OS. Hence, propositions P1.2 and P2.2 cannot be supported (at least not when measuring OS-related diversity).

We see similar results when measuring diversity- complexity in terms of the number of DBMS used by an application (overall, we identified 6 different DBMS used by the 273 applications7). The only significant difference is for the age of applications: Applications with more than one DBMS were also older on average than applications with only one DBMS, in support of proposition P1.2 (in terms of DBMS). At a lower significance level, we see a significant difference in terms of the amount of user departments involved for those applications with one versus those with more than one DBMS: the former group involves less user departments than the latter.

This supports P2.2 stating that the more complex business requirements, the more diverse the applications get (in terms of DBMS). We do not find support for this proposition when looking at the   6 The OS used were: Windows XP/2003 (used by 28% of applications), SunOS (24%), Solaris (23%), zOS (13%), AIX (5%), Linux (4%), VMS (1%), Other Unix (1%); an application can use multiple OS, e.g. if the front-end of a multi-tier application runs on Windows and the back-end runs on AIX 7 The DBMS used were: Sybase (used by 38% of applications), Oracle (24%), DB2 (18%), MS SQL (13%), IMS (4%), proprietary DBMS (3%)      number of products or processes covered by the application, though.

We also found no significance with regards to cost impacts of diversity-related complexity (neither for DBMS nor for OS). Hence, propositions P3.2 could not be supported.

Turning to deviation-related AA complexity, we found significant differences in terms of the products covered and at a lower significance level in terms of age and processes covered between those applications that do not deviate and those that deviate from the standard OS. Non-standard-compliant applications cover more products and also more processes. However, compliant applications are slightly older (median: 3.2 years) than non-compliant ones (median: 2.2 years). These results lend support to proposition P2.3 (when measuring compliance to OS standards). Interestingly, the results also indicate that the relation between age and deviation from standard technology (in terms of OS) (proposition P1.3) is reverse to the proposition: older applications are more standard compliant.

Measuring the deviation of applications from the standard DBMS provides a somewhat different picture: significant differences only exist for the number of user departments involved in the application. Here, we find again a surprising result: the standard-conformant applications have more user- departments involved (median: 3) than non-compliant ones (median: 1 department; overall median: 2 departments). This is inverse to the original proposition. We do not find support for propositions stating that with an increase in either age (P1.3) or business requirements complexity (P2.3), applications also increase in their deviation from standard technology (in terms of DBMS).

As far as deviation-related impacts are concerned, we found only one significant result: the group of applications that did not comply to DBMS standards exhibit lower maintenance cost than the compliant applications. In contrast to the original proposition 3.3, for DBMS-standard deviation, we observe significantly lower maintenance cost for non- compliant than for compliant applications.

With regards to overlap-/redundancy-related AA complexity we found some support for proposition P2.4 stating that involvement of more users leads to more overlap of applications8. No significant differences are found regarding the age of the applications, hence, the proposition that older   8 The variables for the coverage of products and processes were not included in this test as the overlap was computed using these two variables (implying that there is a significant relation between the respective variables).

applications also exhibit a higher degree of overlap was not supported (P1.4).

However, interesting results were found for the impacts of overlap-redundancy-related AA complexity: it is striking to see that the applications with a medium level of overlaps have a lower median in operations cost than those with a low or high-level of overlap, implying a non-linear, U-shaped relation between overlap and operations cost. Interestingly, the same holds true for maintenance cost. Hence, the original proposition (P3.4) that applications with higher overlap also exhibit higher IT cost is not supported.

5. Discussion   Up to now, the (practical and academic) discussion of AA complexity has lacked differentiation. Various kinds of AA complexity have been lumped together with little attempt to distinguish between them. The implicit propositions underlying the respective statements and recommendations have been that all these kinds of AA complexity increase with age and business complexity, and in turn cause higher IT costs.

In our case, however, the result (Table 3) indicate that only interdependency-related AA complexity behaves as assumed by consultants and researchers with respect to causes and impact: older applications and those with more complex business requirements also exhibit more interfaces (i.e. a higher degree of interdependency); at the same time, more interdependent applications incur higher IT costs than less interdependent applications. An explanation for this is the intuitive assumption underlying the above- mentioned propositions: on the one hand, when a business grows over time, applications are added, and these have to be connected to ever more applications.

In former times, more point-to-point interfaces might have been used, while newer applications try to reduce interfaces e.g. by relying on central middleware. On the other hand, it might also be more difficult to maintain and operate applications with many connections because it is not easy to keep track of all the interdependencies: changing one application means that all of the other applications connected to it have to be changed, as well, thus leading to higher costs for those interdependent applications. The advice of "doing more with less" seems to hold true here. In this case, consultants would probably be right in advising their clients to either maintain the growth of or reduce the number of interfaces (e.g. by introducing Enterprise Application Integration (EAI) layers to eliminate point-to-point interfaces).

However, the other types of AA complexity (diversity, deviation, and overlap) do not act according to the general propositions of researchers and consultants in our case. In the following paragraphs, we would like to discuss the deviations from the propositions stated in the introduction.

The diversity of applications with respect to OS does not seem to be related to any of the causes or impacts we looked at in our case. Concerning DBMS, diversity seems to increase with age and the number of involved users. However, no relation to causes is found for DBMS-diversity either. There are multiple possible explanations for this. Firstly, looking at the data, we do not find many applications using multiple OS or DBMS in the company we chose for our case study (e.g. there were only 20 applications using more than one DBMS). Hence, the company might have already worked on the diversity issue.

Nevertheless, we would have expected some difference even among these few applications in the case of a strong relation. Secondly, we find differences in the support for the propositions depending on which level of the "technology stack" we look at. If we think of the different types of technologies as being organized in a layered stack, with the specificity of technologies increasing towards the top, OS would probably be on a low level and DBMS would be on a higher level (because a DBMS is less 'general purpose', i.e. more constrained in what it can be used for). We might find the propositions supported only for 'more specific' technologies, which we did not test for (such as middleware, e.g. application servers, directory services, etc.). Further research might extend the proposition to include a broader coverage of the "technology stack". Thirdly, it might well be that diversity (i.e. the sheer number of technologies used by an application) is indeed not an important complexity criterion on the level of applications.

However, it might still be important on more aggregate levels, such as application landscapes: If a business product (such as derivatives) makes use of applications that together employ a large number of different technologies on each layer of the technology stack, this combined diversity might very well have an impact on costs. Hence, we would have to look at higher levels of the IT architecture and could formulate the respective proposition for these levels even though they are not supported on the level of applications. Comparing complexity as well as its causes and impacts on different levels of IT architecture (e.g. applications vs. application landscapes) would enable dissecting the impact that the combination of application has in contrast to single applications (i.e. answer what the formation of  a landscape is really contributing to the overall complexity). Such research could serve to further disentangle AA complexity by not only differentiating different types of AA complexity (interdependency, diversity, deviation, and overlap), but also by distinguishing different levels of AA complexity (e.g. applications vs. application landscapes).

Regarding deviation, we again see differences depending on which level of the technology stack we look at: applications deviating from the standard OS also cover more investment banking products and processes. The reason for this might be that different investment products and processes were historically supported by applications on different platforms.

Hence applications that have been extended to also cover these products and processes had to be made compatible. This would also provide an explanation for why younger applications deviate more from the standard OS than older ones: introducing more "connector" applications serving multiple products and processes will bear out this observation. This explanation makes us aware of the fact that the propositions would benefit from taking into account the previous complexity management activities conducted by the bank. A mediating construct of "Complexity management activities and abilities" might hence improve the conceptual model for future research. For this purpose, variables would have to be identified to measure the level of activities that address the respective AA complexity type (e.g.

integration measures addressing interdependency, standardization efforts addressing deviation, and consolidation efforts addressing overlap/redundancy).

Complexity management activities might mediate both the causes-complexity relation as well as the complexity-impact relation (see Figure 2 for a refined conceptual model).

Causes of IT complexity ? Age ? Business requirements  IT complexity ? Interdependency ? Diversity of technologies ? Deviation from  technology standards ? Overlap/redundancy  Impact of IT complexity ? Cost ? (Agility)*  Complexity management activities   Figure 2: Refined Conceptual Model   Regarding DBMS-related deviation, we observed two surprising relationships in our case: those applications that deviated more from the standard DBMS involved fewer user departments and also incurred less maintenance costs. The propositions suggested the inverse relationship. An explanation might be that the IT department refused to maintain the applications that were not standard-compliant.

These applications might hence generate "hidden" IT costs somewhere else. These costs might then not be reported as IT cost, but e.g. as marketing cost in the case of a non-compliant marketing information system. This explanation would hint at a problem with allowing exceptions to standards if the user department itself takes care of the non-compliant application. In this case, official indicators might underestimate the costs incurred by non-compliance, unless the decentralized cost is being tracked as well.

We cannot think of an intrinsic argument that might warrant the introduction of non-compliant technologies with the aim of decreasing maintenance costs. It should be noted that this might not be the case for other impact variables (such as agility): short-term agility might very well improve if applications with non-standard technologies are added, because it would allow business requirements to be fulfilled more quickly in the short-term.

However, as we did not include agility as a dependent variable in our study, this claim remains conjectural.

Concerning overlap/redundancy of applications, we only see the proposition on increased user department involvement influencing a higher degree of overlap among applications. Interestingly, the degree of overlap among applications exhibited a U- shaped relation to both operations and maintenance costs, with medium-level overlapping applications incurring the least cost. The explanation for this might be that applications need to have some level of overlap in order to be integrated and should not only serve as silos that consume even more resources to keep them connected with other applications [4, p.

73]. On the other extreme, those applications with a very high overlap might be so redundant that they incur double work, which increases costs as well.

This explanation was confirmed when we discussed the results with the bank itself. It follows that at least in this case, reducing overlap is not always warranted, as there might be an optimal level of overlap that does not necessarily coincide with the lowest level of overlap. This reminds us that not all relationships have to be linear when it comes to complexity. Especially in relation to agility, for some types of complexity, a certain amount might be essential and even beneficial, but too much might again be detrimental. While this has been investigated to some degree in non-IT-related areas [1, 2], it has remained only a claim so far in the field of IT complexity (e.g. [32]: agility is hypothesized to decrease at the extreme ends of the vague construct "IT complexity", hence leaving ample room for future research.

6. Conclusions   We have shown that the propositions underlying current research and (consulting) practice do not hold true for all types of AA complexity. We disentangled the rather broad and vague AA complexity concept by proposing four types of AA complexity: interdependency-, diversity, deviation- and overlap/redundancy-related AA complexity. We would recommend against referring broadly to "AA complexity" without further differentiation in future research; we advise specifying which type of AA complexity (interdependency, diversity, deviation or overlap) is really meant. Being more precise will enable us to add further to the body of knowledge in this highly relevant area of IS research. This proved to hold especially true as we found that the general propositions were only valid for interdependency- related AA complexity and not for the other types of AA complexity. Future research should clearly be based on multiple case studies rather than just on a single case study in order to allow for generalization.

As we found support for the propositions for interdependency-related AA complexity, we propose honing in on this type of AA complexity further, e.g.

by differentiating the degree or type of interdependency between applications (see footnote 1). For example, a question of interest could be whether batch-oriented interfaces are more costly to maintain than online interfaces or interfaces facilitated by middleware.

We also pointed to potential differences for similar types of IT complexity on different architectural levels (such as for deviation and diversity on the level of applications vs. deviation and diversity on the level of application landscapes), which might warrant further research.

Based on the interpretation of our research findings, we also proposed several adjustments to the current propositions by referring to the technology- stack levels for diversity and deviation, and by introducing AA complexity management activities as a mediating construct.

We hope that this research will serve as a foundation for future research in this area, which has so far ? in its entangled form ? been marked by assumptions rather than the subject of actual research.

7. References  [1] Ashkenas, R., Simplicity-Minded Management. Harvard Business Review, 2007. 85(12): p. 101-109.

[2] Gottfredson, M. and K. Aspinall, Innovation vs Complexity. Harvard Business Review, 2005. 83(11): p. 62- 71.

[3] Scantlebury, S., et al., From IT Complexity to Commonality: Making Your Business More Nimble, in Opportunities for Action in Information Technology. 2004, The Boston Consulting Group.

[4] Ross, J.W., P. Weill, and D.C. Robertson, Enterprise Architecture As Strategy. 2006, Boston, MA: Harvard Business Scholl Press.

[5] Mattern, F., S. Sch?nw?lder, and W. Stein, Fighting Complexity in IT. McKinsey Quarterly, 2003(1): p. 57-65.

[6] Child, J., Parkinson's Progress: Accounting for the Number of Specialists in Organizations. Administrative Science Quarterly, 1973. 18(3): p. 328.

[7] Gell-Mann, M., What is complexity? Complexity, 1995.

1(1): p. 16-19.

[8] Park, R.E., Software size measurement: a framework for coutning source statements. 1992, Software Engineering Institute, Pittsburg.

[9] McCabe, T., A complexity measure, in Proceedings of Int'l Conf. Sofrware Engineering. 1976.

[10] McCabe, T. and D. Sharon, Cyclomatic Complexity and the Year 2000. IEEE Software, 1996. 13(3): p. 115.

[11] Halstead, M.H., Elements of Software Science. 1977, New York: Elsevier.

[12] Arteta, B.M. and R.E. Giachetti, A measure of agility as the complexity of the enterprise system. Robotics and Computer-Integrated Manufacturing, 2004. 20: p. 495-503.

[13] Shpilberg, D., et al., Avoiding the Alignment Trap in Information Technology. (Cover story). MIT Sloan Management Review, 2007. 49(1): p. 51-58.

[14] Boh, W.F. and D. Yellin, Using Enterprise Architecture Standards in Managing Information Technology. Journal of Management Information Systems, 2007. 23(3): p. 163-207.

[15] Child, P., et al., SMR Forum: The Management of Complexity. Sloan Management Review, 1991. 33(1): p.

73-80.

[16] Kaisler, S.H., F. Armour, and M. Valivullah, Enterprise Architecting: Critical Problems, in Proceedings System Sciences (HICSS'05) 2005: Hawaii.

[17] Xia, F., Module Coupling: A Design Metric in Asia- Pacific Software Engineering Conference (APSEC'96).

1996.

[18] Kubicek, H., The Organization Gap in Large-scale EDI systems, in Scientific Research on EDI. 1992: Alphen aan den Rijn.

[19] Hitz, M. and B. Montazeri, Measuring Coupling and Cohesion in Object-Oriented Systems, in Proc. Int.

Symposium on Applied Corporate Computing. 1995.

[20] Zachman, J.A., A framework for information systems architecture. IBM Systems Journal, 1987. 26(3): p. 276- 292.

[21] Johnson, G., Researchers on Complexity Ponder What It's All About, in New York Times. 1997. p. B4.

[22] Singh, K., The impact of technological complexity and interfirm cooperation on business survival. Academy of Management Journal, 1997. 40(2): p. 339.

[23] Axelrod, R. and M.D. Cohen, Harnessing Complexity: organizational implications of a scientific frontier. 2000, New York: Basic Books.

[24] Kelly, S. and M.A. Allison, The Complexity Advantage. 1999, New York: McGraw-Hill.

[25] Sherman, H. and R. Schultz, Open Boundaries: creating business innovation through complexity. 1998, New York: Perseus Books.

[26] Campbell, D.J., Task Complexity: A Review and Analysis. Academy of Management Review, 1988. 13(1): p. 40-52.

[27] Lee, O.-K., et al. IT-Enabled Organizational Agility and Firms' Sustainable Competitive Advantage. in on Information Systems. 2007. Montral.

[28] Oosterhout, M.v., E. Waarts, and J.v. Hillegersberg, Change factors requiring agility and implications for IT.

European Journal of Information Systems, 2006. 15: p.

132-145.

[29] Webster, J. and R.T. Watson, Analyzing the Past to Prepare for the Future: Writing a Literature Review. MIS Quarterly, 2002. 26(2): p. xiii-xxiii.

[30] AIS. MIS Journal Rankings.  2007  [cited 2007 18 April 2007]; Available from: http://www.isworld.org/csaunders/rankings.htm.

[31] Pruitt, S., Gartner issues 10 CIO resolutions for 2005, in InfoWorld. 2004.

[32] Porter, M.E. and V.E. Millar, How information gives you competitive advantage. Harvard Business Review, 1985. 63(4): p. 149-160.

[33] Tabachnik, B.G. and L.S. Fidell, Using multivariate statistics. 5th ed. 2007, Boston: Pearson.

[34] Martensons, A., Producing and Consuming Agility, in Agile Information Systems - Conceptualization, Construction, and Management, K.C. DeSouza, Editor.

2006, Butterworth-Heinemann. p. 41-51.

Appendix: Detailed description of results   We structured the results of the analyses described in Section 3 according to the two different types of propositions, namely those related to the causes and those related to the impacts of AA complexity.

A.1. Results from analyzing causes of AA complexity   Causes of interdependency-related AA  complexity: The Kruskal-Wallis test revealed a statistically significant difference in the age and number of user departments covered for the three different interdependency groups of applications (see Table 4 for n, ?, and p values). The groups of applications with more interfaces record a higher median score in terms of age as well in terms of user departments involved (see also Table 4). The same is true at a lower significance level (0.05 level) for the number of IB products and processes: the groups of applications with more interfaces also cover more products and processes (see Table 4 for for n, ?, and p values). Hence, we do find support for proposition P1.1, which states that the older an application, the higher its interdependency-complexity it is. We also find support for proposition P2.1, which asserts that the higher the complexity of business requirements, the higher the interdependency-complexity of applications is.

Causes of diversity-related AA complexity: The Mann-Whitney U test revealed no significant difference in either the age or the number of user departments involved, or in the number of IB products or processes covered for applications with one OS versus applications with more than one OS (see Table 5). Hence, we do not find support for propositions P1.2 and P2.2, which state that (OS- related) diversity complexity is caused by age or business requirements-complexity.

We obtained similar results when measuring diversity-complexity in terms of the number of DBMS used by an application. The only significant difference at the .01 level was in the age of applications: The group of applications with more than one DBMS was also older on average than those applications with only one DBMS. This supports proposition P1.2, which states that the older the applications get, the more diverse they become (in terms of DBMS). At a lower significance level (.05), we see a significant difference in terms of the amount of user departments involved for those applications with one DBMS versus those with more than one  DBMS: the former group was found to involve fewer user departments than the latter. This supports P2.2, which asserts that the more complex the business requirements are, the more diverse the applications become (in terms of DBMS). However, we do not find support for this proposition when looking at the number of products or processes covered by the application, though. See Table 5 for the detailed results of the analyses.

Causes of deviation-related AA complexity: A Mann-Whitney U Test (Table 6) revealed significant differences in terms of the products covered and at a lower significance level in terms of age and processes covered between those applications that do not deviate from the standard OS and those that do. Non- standard applications cover more products and also more processes (median: 1 vs. 2). However, standard- compliant applications at this firm are slightly older (median: 3.2 years) than the non-compliant applications (median: 2.2 years). These results lend support to proposition P2.3, which states that the higher the complexity of the business requirements (in terms of product and process coverage) is, the more deviation from the standard (in terms OS) is found in applications. Interestingly, the results also indicate that the relation between age and deviation from standard technology (in terms of OS) (proposition P1.3) contradicts the proposition: older applications are more standard compliant.

Measuring the deviation of an application from the standard DBMS provides a somewhat different picture. A Mann-Whitney U test (Table 6) revealed significant differences only for the number of user departments involved in the application (at .05 level of significance). Here, again we find a surprising result in that the standard-conformant applications involve more user-departments (median: 3) than the non-compliant ones (median: 1 department; overall median: 2 departments). We do not find support for the propositions stating that an increase in either age (P1.3) or business requirements complexity (P2.3) causes an increase in applications' deviation from standard technology (in terms of DBMS). We see indications for an inverse relationship between the number of user departments involved and the deviation of applications from standards in terms of DBMS technology.

Causes of overlap-/redundancy-related AA complexity: A Kruskal-Wallis (Table 7) test revealed significant differences in terms of the number of user departments involved for those applications that have a low to medium overlap and those with a significant overlap (the first two groups involve one user department and the last group involved 2.5 user      departments on average). No significant differences were found regarding the age of the applications. The variables for the coverage of the products and processes were not included in this test because the overlap was computed using these two variables (implying that there is a significant relation between the respective variables). This lends some support to proposition P2.4 stating that involvement of more users leads to greater overlap of applications. The proposition that older applications also exhibit a higher degree of overlap was not supported (P1.4).

A.2. Results from analyzing impacts of AA complexity   Impacts of interdependency-related AA  complexity: A Kruskal-Wallis test (Table 4) revealed a statistically significant difference in operations cost as well as maintenance cost across the three different interdependency-groups of applications. The more interdependent group (i.e. applications with 3-7 or with 8 or more interfaces) recorded a higher median of operations (Md=119,000 and 363,000 EUR respectively) and maintenance costs (Md=326,000 and 506,000 EUR respectively) than the less interdependent group (fewer than 3 interfaces) of applications (Md=52,000 EUR operations costs and 64,000 EUR maintenance costs). This supports the proposition (P3.1) that more interdependent applications also incur higher IT (operations and maintenance) costs.

Impacts of diversity-related AA complexity: Regarding OS-related diversity, a Mann-Whitney U test (Table 5) showed no significant difference between the operations costs of more (Md=93,890; n=105) and less diverse applications (Md=131,540; n=27), U=1209.5, z=-1.174, p=.24. The same holds for maintenance costs (Md=166,400; n=121 vs.

Md=116,900; n =31), U=1782, z=-.43; p=.668.

To measure DBMS-related diversity, a Mann- Whitney U test was conducted (Table 5) and revealed no significance difference in operations costs of more (Md=129,985; n=85) and less diverse applications (Md=154,777; n=16), U=654.5, z=-.237, p=.813. The same holds for maintenance costs (Md=210,500; n=98 vs. Md=245,700; n=19), U=836, z=-.704, p=.481. Hence, the proposition (P3.2) that diversity- related AA complexity leads to higher IT costs is not supported.

Impacts of deviation-related AA complexity: Regarding deviation from the standard OS, a Mann- Whitney U test (Table 6) revealed no significant difference between the maintenance costs and operations costs for standard-compliant (Md=83,581; n=94 for operations cost and Md=148,300; n=113 for maintenance cost) and non-compliant applications (Md=180,147; n=38 for operations cost and Md=166,400; n=39 for maintenance cost), U=1404, z=-1.921, p=.055 for operations cost and U=2116, z=-.371, p=.711 for maintenance cost.

Concerning deviation from the standard DBMS, a Mann-Whitney U test (Table 6) revealed a significant difference between maintenance costs for standard- compliant (Md=373,100; n=59) and non-standard- compliant applications (Md=170,200; n=58), U=1303, z=-2.231, p=.026. It is remarkable that the non-compliant applications had lower maintenance costs than the compliant applications. The difference between operations costs for compliant (Md=109,978; n=51) and non-compliant applications (Md=180,147; n=50) is not significant, U=1196.5, z=-.533, p=.594.

Thus, the proposition (P3.3) that application that deviate from technology standards incur higher IT costs is not supported. In contrast, for DBMS- standard deviation, we observed significantly lower maintenance cost for non-compliant than for compliant applications.

Impacts of overlap/redundancy-related AA complexity: a Kruskal-Wallis test (Table 7) showed significant differences in operations costs across the applications with a low (less than 34 overlaps; Md=90,442; n=37), medium (35-79 overlaps; Md=55,770; n=56) and high level of overlap/redundancy (more than 80 overlaps; Md=129,985; n=61), ?=6.862, p=.032. It is striking to see that the applications with medium overlaps have a lower median operations cost than those with a low or high-level of overlap, implying a non-linear, U-shape relation between overlap and operations cost. Interestingly, the same holds true for maintenance cost. Applications with a low degree of overlap exhibited a median maintenance cost of 96,600 (n=59), those with a medium level of overlap incurred a median of 81,300 (n=58), and highly overlapping applications a median of 248,700 (n=67), ?=9.791, p=.007. Hence, the proposition (P3.4) that  applications with a greater degree of overlap also exhibit higher IT costs is not supported.

In te  rd ep  en de  nc y ?  N um  be r o  f in  te rf  ac es  (g p3  _y 4_  su m  _i nt  f)  22 2 2 2 2Df  .047.000 .000 .016 .000 .000Asymp. Sig  6.13422.298 20.875 8.331 17.018 18.917  N  Median  4645 43 46 27 37  4141 41 41 36 38  2 intf.

8 intf.

1.00002.2000 1.0000 1.0000 52.3020 64.4000  2.00007.8000 4.0000 2.0000 363.9885 506.3500  2 intf.

8 intf.

Mean rank  55.8947.03 44.13 56.13 33.67 37.772 intf.

73.4683.40 76.61 76.21 60.89 68.898 intf.

4039 33 40 30 343?7 intf.

1.00003.2000 2.0000 1.0000 119.3940 326.20003?7 intf.

63.6359.97 56.50 60.54 42.33 58.223?7 intf.

