Efficiently Mining Closed Frequent Patterns with Weight Constraint from   Directed Graph Traversals Using Weighted FP-tree Approach?

Abstract   In this paper, a transformable model of EWDG (Edge- Weighted Directed Graph) and VWDG (Vertex-Weighted Directed Graph) is proposed to resolve the problem of weighted traversal patterns mining. Based on the model, an effective algorithm called GTCWFPMiner (Graph Traversals-based Closed Weighted Frequent Patterns Miner) is presented. The algorithm exploits a divide-and- conquer paradigm with a pattern growth method to mine closed frequent patterns with weight constraint from the traversals on directed graph. It incorporates the closure property with weight constrains to reduce effectively search space and extracts succinct and lossless patterns from graph traversal TDB. Experimental results of syn- thetic data show that the algorithm is an efficient and scalable algorithm for mining closed weighted frequent patterns based on graph traversals.

1. Introduction   Data mining on graph traversals has been an active re- search field during recent years. Graph and traversal on it are widely used to model several classes of data in real world. One example for this is WWW. The structure of Web can be modeled as a graph in which the vertices rep- resent Web pages, and the edges represent hyperlinks be- tween the pages. User?s navigation on the Web site can be modeled as traversals on the graph. Capturing user access patterns in such environments is referred to as mining tra- versal patterns [1]. Traditional model of traversal patterns mining hardly considered weighted traversals on the graph [1][2]. To reflect importance difference of Web sites, we can assign a weight to each site. Frequent pat- tern mining has been extensively studied in the last years [3][4]. Unfortunately, it has a poor performance when the support threshold is low and the pattern space is dense because of generating a huge number of patterns. Fre-   ?This work was supported in part by the Natural Science Fund of Shan- dong Province (No.Y2007G25), the Excellent Young Scientist Founda- tion of Shandong Province, China (No.2006BS01017) and the Scientific Research Development Project of Shandong Provincial Education De- partment, China (No. J06N06).

quent closed itemsets provide a compact yet lossless rep- resentation of the frequent itemsets.

In this paper, we extended previous works by attaching weights to the traversals and introduced a new effective & scalable algorithm called GTCWFPMiner to discover closed frequent patterns from weighed traversals on graph.

To our knowledge, ours is the first work to considering closed patterns mining from directed graph with weight constraints.

The rest of this paper is organized as follows. Section 2 reviews previous related works. The related definitions and model of problem are given in Section 3. Section 4 proposes the algorithm called GTCWFPMiner. Empirical research and the performance analysis of algorithm are reported in Section 5. Finally, Section 6 gives the conclu- sion as well as future research works  2. Related works   The main stream of data mining related to our work, can be divided into three categories, i.e. the traversal pat- tern mining, the closed frequent pattern mining and the (weight) constraint based pattern mining. For the traversal pattern mining, there have been few works [1][2], which only deal with the mining of un-weighted traversal pat- terns. In the last several years, extensive studies have proposed fast algorithms for mining closed frequent item- sets [6][7][11]. For the weighted mining, most of previ- ous works are related to the mining of association rules and frequent itemsets [10][9][8]. Although the above works take the notion of weight into account as examined in this paper, they only concerned on the mining from items, but not from traversals.

3. Problem statement  3.1. Definitions of mining traversal pattern   Definition 1 (Weighed Directed Graph). A WDG (Weighted  Directed  Graph), denotes as G, is a finite set of vertices and edges, in which each edge joins one or- dered pair of vertices, and each vertex or edge is associ- ated with a weight value.

2008 ISECS International Colloquium on Computing, Communication, Control, and Management  DOI 10.1109/CCCM.2008.393   2008 ISECS International Colloquium on Computing, Communication, Control, and Management  DOI 10.1109/CCCM.2008.393   2008 ISECS International Colloquium on Computing, Communication, Control, and Management  DOI 10.1109/CCCM.2008.393     From Definition 1, we know that there should be two kinds of WDGs. One is VWDG (Vertex-WDG) which as- signs weights to each vertex in the graph, and the other is EWDG (Edge-WDG) which assigns weights to each edge.

For example, Fig.1 (a) is VWDG which has 6 vertices and 8 edges. The two WDG cases can be reduced to one case (referring to Section 3.2).Here we discuss the problem based on VWDG.

Definition 2 (Traversal on Graph). A traversal on graph is a sequence of consecutive vertices along a se- quence of edges on a G.

Clearly, a traversal can be regarded as a pattern. To easily consider, we may assume that every traversal has no repeated vertices. The length of a traversal is the num- ber of vertices in it. A traversal database T is a set of tra- versals. Since there are two WDGs, then it must exit that there are two types of traversals-traversals on VWDG and traversals on EWDG. Figure 2(a) and (b) respectively de- scribe them, and (c) is the combination of two cases.

Definition 3 (Subtraversal). A subtraversal is any subsequence of consecutive vertices in a traversal.

Definition 4 (Support count & support). The support count of a pattern P, sup_count(P), is the number of tra- versals containing the pattern. The support of a pattern P, support (P), is the fraction of traversals containing the pattern P, denoted as: (|T| is the number of traversals.)  ( ) ( )sup_count Psupport P = T  .                             (1)  Definition 5 (Frequent closed traversal pattern). An traversal pattern Y is a frequent closed traversal pattern if it is frequent and there exists no proper superset Y?? Y such that support(Y?) =support(Y ).

Definition 6  (Weighted Pattern). A weighted pattern is a set of items each which has a weight.

Definition 7 (Weight of Pattern). The weight of pat- tern is an average value of weights of all items in it.

Given a weighted pattern P=<p1,p2,?.,pk>, the weight of each item in P, denoted as w(pi) (i=1,2,?,k), then the weight of P is represented as follows.

( ) ( )   k  i i  w p Weight P  P .==  ? (2)  Definition 8 (Weighted Support). The weighted sup- port of a pattern P, called wsupport (P), is:  ( ) ( )( )( ) .wsupport P Weight P support P=                 (3)  A P is said to be weighted frequent when its weighted support is no less than a given minimum weighted sup- port threshold called wminsup, i.e.,  ( )wsupport P min wsup .?                                      (4) However, the weight constraint is neither the anti-  monotone nor the monotone constraint. So we cannot di- rectly use the anti-monotone property to prune weighted infrequent patterns.

3.2. Model of transforming EWDG into VWDG   Essentially, two WDG cases can be reduced to one  case. Here we reduce the two cases to one case?VWDG.

Figure 3 describes this change method: Fig. 3(a), (c) and (e) are EWDGs, and (b),(d),(g) and (h)are VWDGs. In Fig.3(b) or (d), the nodes named ?bd?, ?de?, ?ec? and ?bc? respectively represents the corresponding nodes with di- rected edges named <B,D>,<D,E>,<E,C> and <B,C> in Fig.3(a) or (c). Figure 3(e),(f),(g)and(h) truly describe how to change EWDG into VWDG. Each edge?s direction in new birth VWDG is gotten as follows, e.g., for node ?de? in(h), because its corresponding field in (e) is joined by two directed edges named <B,D> (i.e. indegree) and <E,C> (i.e. outdegree), so there are two edges named <?bd???de?> and <?de???ec?> in (h), the other edges? direction are similar to the above. By the above change method, we can transform EWDG into VWDG. In practice, the fields in Fig. 3(a) and (c) may represent subnet of any size under the Web environments.

3.3. Revised weighted support   Can we use anti-monotone property to weighted fre-  quent pattern mining? The answer is ?yes?. We know that the weights of items on graph containing n nodes , de- noted as wi (i=1,2,?,n), must satisfy: min(W) ? wi ? max(W), there, W={w1,w2,?,wn}. To let weighted pat- terns satisfy the anti-monotone property (i.e., if wsup- port(P) ? minwsup ? wsupport(P?) ? minwsup, P??P ), we revise w (pi) as two following representations.

( ) ( )iw p =min W .                                               (5) or      ( ) ( )iw p =max W .                                               (6)  Thus, the anti-monotone property can be used in min- ing weighted frequent patterns since wsupport (P?) ? wsupport (P). However, if we adopt (5), we could prune some patterns which should have been weighted frequent  TID Traversal 1  <A,B> 2  <B,C,E,F> 3  <A,C> 4  <B,C,E> 5  <A> 6  <A,C,E,D>     to lead to incorrect mining results. Avoiding this flaw, we adopt (6) to compute revised weight of the pattern. Note that, the weight support value computed by this is only an approximate value, therefore, in final step, we should check if the pattern is really weighted frequent pattern with his real weight value, by the condition, i.e.,  ( ) ( )( )1  k  i i  w p support P minwsup .

k = ? ?    3.4. Order of joining the closure and constraint   There are two ways to joining the closure and con- strains with frequent patterns mining [5].

.?  ( )( )( ) ( )D D amDCl FTh sup X min sup FTh C? ?          (7) .?  ( )( )( )( )D D amCl FTh sup X min sup C? ?                 (8)  There, Cam is an anti-monotone constraint, as to weight constraint, it is revised weight constraints. In , frequent ? patterns are first tested whether the patterns are closed frequent patterns, and then for the closed patterns, weighted constraints are applied to discover weighted closed frequent patterns. is one the way round: the ? weight constraint is first mined and then the closures of the weighted frequent patterns are computed. From [5], we already know only way ? not can lead to information loss, so we adapt way ? in our problem.

4. Mining closed frequent patterns from WDG traversals using FP-trees  4.1. Weighted FP-tree construction   FP-tree is a compact representation of all relevant fre-  quency information in a database [4]. To get a high per- formance, we adopt a weighted FP-tree as a compression  technique based on pattern growth method. Each node in the weighted FP-tree has four fields: ?item-name?, ?sup_count? ?weight? and ?node-link?. Additionally, for each weighted FP-tree, there is a header table which has there fields: ?item-id?, ?support? and a ?headpointer? to the first node in the FP-tree with the item-id. Initially, in our approach, a weighted FP-tree has only a root node.

The weighted FP-trees in our algorithm are con- structed as shown as Fig. 4. Through this way, com- pressed data from the original TDB is stored in the FP- tree. For the transaction database shown in Fig.1 with support threshold minwsup= 1.5 (max(W)=12). Fig. 5 presents the corresponding global weighted FP-tree and a header table.

4.2. Search space pruning techniques and neces- sary checkings in GTCWFPMiner   In our approach, Item_merging and sub-itemset prun- ing are used [7]. However, it only generates approximate weighted frequent patters and can not assure that they are real closed weighted frequent patterns on directed graph G. we must carry out subset-checking to newly found weighted patterns. In our algorithm, we use RP (Result Pattern) tree [7] to store so far found closed weighted fre- quent patterns. In addition, because our all works are all based on graph traversals, we must check if the result mined patterns are included in G and if the order of (node) item in result mined patterns is corrected order referring to G.

In summary, through the process of mining, we use the item_merging and sub-itemset pruning methods to prune search space. In addition, we must do four ordered neces- sary checkings: (1). To extract the candidate weighted frequent patterns P from FP-tree, by checking if wsurpport(P)=support(P)*max(W)?minwsup. (2). To ex- tract real WFPs from newly found candidate weighted frequent pattern, those whose real wsupport? minwsup are remained, the others are removed. (3). Toward the real WFPs,  to check if they are included in the path of di- rected graph G. The patterns, which are included in the path of G but the order of items in it is not correct, must be revised the correct order referring to the path on G and then be inserted into RP-tree. (4). Toward the WFPs gen- erated in (3), compare them with already generated closed weighted patterns in RP-tree to check if it satisfies closure property. The WFP,  which is not the subpattern of a cer- tain pattern, whose support is equal to it, existing in the global RP-tree , will be inserted into the RP-tree..

4.3. Bottom up traversal of weighted FP-tree with divide-and-conquer paradigm     A 4 ?  C 4 ?  B 3 ?  E 3 ?  D 1 ?  F 1 ?     With the global weighted FP-tree, GTCWFPMiner mines closed weighted frequent patterns by adapting the divide-and- conquer approach. For the traversal transac- tion database shown in Fig. 1(b) (minwsup=1.5), it di- vides mining the FP-tree into mining smaller FP-trees with bottom up traversal of the FP-tree, and mines first (1) the patterns containing item ?F? and then (2) the patterns including ?D? but not ?F?,?, and finally the patterns con- taining item ?A?. Fig. 6 is the conditional FP-tree of each node in head table. Using item_merging, sub-itemset pruning techniques and 4 necessary ordered checkings described above, we can get the final closed weighted frequent patterns of each node in f_list. It is shown in Fig.

7(a). Due to the space limitation, here we do not give the detail of mining process.

4.4. GTCWFPMiner algorithm   GTCWFPMiner algorithm is given in Fig. 8. Figure 9 gives the procedure GTCWFPM (T, Close, RP-tree), in it, the RP-tree is used to store so far found closed weighted frequent patterns. For the traversal transactions in Fig. 1, after mining, the set of real closed weighted frequent pat- terns is: {<F>:1, <C,E>:3,<B,C,E>:2, <B>:3, <C>:4, <A,C>:2}, and the result pattern tree is shown as Fig.

7(b), there the node ?x:l:c? means that the node is for item ?x?, its level is ?l? (the length of path from this node to the root node) and that its up-to-date sup_count is ?c?.

5. Experimental evaluation   We explore our experimental results on the perform- ance of GTCWFPMiner in comparison with FPclose. Be- cause there are not real datasets about WDG currently, we test the algorithm performance using synthetic dataset.

We used C++ language and Microsoft SQL Server 2000 database to generate simulation of WDG and the travers- als no it. We implemented our algorithm with C++ lan- guage, running under Microsoft VC++ 6.0. The experi- ments were performed on Pentium IV PC at 2.93 GHz and 768MB RAM with Windows XP Professional operat- ing system. All the reported runtimes are in seconds.

5.1. Generate synthetic dataset   During the experiment, the WDG is generated mainly according to following parameters: number of vertices and max number of edges per vertex. And then, we as- signed random weight to each vertex of the graph. To eas- ily compare algorithm?s performance, we generated 8 sets of traversal database with the same set of weights, in each of which the maximum length of traversals varies from 5 to 10. The distribution of weight is shown as Fig.10. All experimental results are average of 8 sets of synthetic data. The detail of experimental parameters is in table 1.

Table 1 Experimental parameters parameters Meaning of parameters Value in exp.

Vn Emax w Min-sup |T| num_TSet Max_L  Number of nodes Max number of edges per vertex Weight of vertex User-specified support threshold Number of traversals per set Number of traversal set Max length of pattern per traversal set  100 to 500 1? Emax ?4 0< w? 1 10% ~ 30% 4k to 12k 5,6,7,8,9,10   5.2 Evaluation of algorithm performance   C 1 ?  B 1 ?  E 1 ?  A 1 ?  C 1 ?  E 1 ?  C 3 ?  B 2 ?  A 1 ?  C 2 ?  A 1 ?  A 2 ?  Suffix node in f-list  Result patterns  F <F>:1 D ?  E <C,E>:3,  <B,C,E>:2  B <B>:3  C <C>:4,  <A,C>:2  A ?  A ? C ? B ? E ? D ? F ?  Fig. 9. Procedure GTCWFPM  : (1) T, a FP-tree, (2) Close, the result set of closed weighted frequent patterns and (3) , a tree building with real closed weighted frequent patterns  : Set of real closed weighted frequent patterns  1: T only contains a single path B { 2: the single path B mine all (approximate) closed WFPs set, AWF 3: (?P AWF) { 4:    (?i=1,|P|weight(pi)/|P|*support(P) minwsup){ 5:       (?P PATH(G))  //PATH(G) is the sets of path on graph G 6:        LRWFP=LRWFP?P; //LRWFP is the set of local real WFPs 7:    }//end of ?if? in line 4 8: }//end of ?for? in line 3 9: for (?P LRWFP) { 10:    if (not Closed-subset-checking(P,RP-tree)) { 11:        Close=Close?P; 12:        insert P into RP-tree; } //end of ?if? in line 10 13:     } //end of ?for? in line 9 14: } //end of ?if? in line 1 15: else { 16:  (? f-list in T.header) { //from bottom-up 17:    initialize LRWFP= set Y=T.base?{i}; 18:    (max(W)*support(Y) minwsup) { 19: (?i=1,|Y|weight(yi)/|Y|*support(Y) minwsup){ 20:        (Y PATH(G))  LRWFP=LRWFP?Y; 21:      }//end of ?if? in line 19 22:  }//end of ?if? in line 18 23: for (?P LRWFP) { 24:    if (not Closed-subset-checking(P,RP-tree)) { 25:        Close=Close?P; 26:        insert P into RP-tree; } //end of ?if? in line 24 27:     } //end of ?for? in line 23 28:     Gen-conditionalDB(i); //generate i?s conditional database 29:     Gen-FP-tree(Y);  //generate the FP-tree of Y 30:     call GTCWFPM (FP-treeY,Close,RP-tree); 31:   } end of ?for? in line 16 32:  }//end of ?else? in line 15 33: output RP-tree and Close?  Procedure GTCWFPM (T, Close, RP-tree)     We made a set of comparing experiments between FPclose and GTCWFPMiner among min-sup, number of patterns, Max_L and execution time et. al. The difference between GTCWFPMiner and FPclose results from weight constraints.

Figure 11 shows the trend of the execution time of GTCWFPMiner and FPclose with respect to different specified minimum support threshold min-sup based on Max_L=7. As shown in figure, as min-sup decreasing the average execution time increases. When the min-sup is lowered, the performance difference becomes larger. In all case of min-sup, GTCWFPMiner outperforms algo- rithm FPclose. This is because GTCWFPMiner carries out the closed frequent pattern mining with weight constraints, and can reduced effectively search space, but FPclose do the closed frequent pattern mining without weight con- straints, its search space is larger than algorithm GTCWFPMiner. Figure 12 shows the trend of the number of patterns & runtime w.r.t. Max_L. As shown in Fig.

12(a), GTCWFPMiner generates fewer patterns than FPclose. The difference of the number of patterns be- tween two algorithms becomes smaller as the Max_L in- creases. In Fig. 12(b), GTCWFPMiner is faster than FPclose. The performance difference becomes larger when Max_L becomes longer. Figure 13 shows GTCWFPMiner has much better scale-up properties than FPclose for the numbers of nodes & traversal transactions (min-sup=15%). As shown in the figure 13(a), although itself runtime also increases, GTCWFPMiner runs faster than FPclose as the number nodes increases. In figure 13(b), GTCWFPMiner also has a better scalability in terns of number of traversal transactions and runs faster than FPclose. Our own experimental evaluation (not pre- sented in this paper) showed that WTMaxMiner is equally effective for other value of Max_L and min-sup as well.

6. Conclusions and future works   This paper explores the problem of discovering closed frequent patterns from traversals on WDG. A transform- able model between EWDG and VWDG is proposed.

Based on the model, we present the mining algorithm named GTCWFPMiner. This algorithm exploits a divide- and-conquer approach in a bottom-up pattern-growth  manner and incorporates the closure property with weight constrains to reduce effectively search space and extracts succinct and lossless patterns from graph traversal TDB.

Experimental results show the algorithm is an effective and scalable algorithm for CWFP based on graph travers- als. How to scale the model and algorithm proposed in this paper to a larger scale, e.g., Web-size scale and other large relation models etc.; can we deeply optimize the al- gorithm, and how to efficiently put it into practice are still be worthy doing further exploring for researches.

7. References  [1] M.S. Chen , J.S. Park and P.S. Yu, ?Efficient data mining for path traversal patterns?, IEEE Trans. on Knowledge and Data En- gineering, IEEE CS, Los Alamitos, CA, USA, 1998, pp. 209?221.

[2] A. Nanopoulos, Y. Manolopoulos, ?Mining patterns from graph traversals?, Data & Knowledge Engineering, Elsevier Science, Netherlands, 2001, pp. 243?266.

[3] R. Agrawal, R. Srikant, ?Fast algorithms for mining associa- tion rules?, Proceedings of the 20th Int'l Conference of VLDB, Morgan Kaufmann, San Francisco, USA, 1994.

[4] J. Han, J. Pei and Y. Yin, ?Mining frequent patterns without candidate generation?, Proceedings of SIGMOD?00, ACM, NY.

USA, 2000.

[5] F. Bonchi, C. Lunnhese, ?On closed constrained frequent pattern mining?, Proceedings of ICDM?04, IEEE Computer So- ciety, Los Alamitos, CA, USA, 2004.

[6] M. J. Zaki, C. J. Hsiao, ?Charm: an efficient algorithm for closed itemsets mining?, Proceedings of SIAM?02, Arlington, USA, 2002.

[7] J. Wang, J. Pei and J. Han, , ?Closet+: searching for the best strategies for mining frequent closed itemsets?, Proceeding of SIGKDD?03, ACM, NY. USA, 2003.

[8] U. Yun, J.J. Leggett, ?WLPMiner: weighted frequent pattern mining with length-decreasing support constraints?, Proceed- ings of  PAKDD?05, Springer, Berlin/Heidelberg, 2005.

[9] W. Wang, J. Yang and P.S. Yu, ?Efficient mining of Weighted Association Rules (WAR)?, Proceedings of SIGKDD?00, ACM, NY. USA, 2000.

[10] C.H. Cai, A.W.C. Fu and C.H. Cheng et. al., ?Mining asso- ciation rules with weighted items?, Proceedings of IDEAS?98, IEEE Computer Society, Washington, DC, USA,1998.

[11] G. Grahne, J. Zhu, ?Fast algorithms for frequent itemset Data Engineering, IEEE Computer Society, Los Alamitos, CA, USA,2005,pp.1347?1362.

5 6 7 8 9 10          Max length of traversal patterns  N um  be rs  o f p  at te  rn s      minimum support=15%  FPclose GTCWFPMiner  5 6 7 8 9 10         A ve  ra ge  e xe  cu tio  n tim  e( se  c.

)  Max length of traversal patterns      minimum=15%  FPclose GTCWFPMiner           Specified minmum support threshold(%)  A ve  ra ge  e xe  cu tio  n tim  e( se  c.

)      Max-L=7 |T|=10,000  FPclose GTCWFPMiner  100 200 300 400 500         Number of vertices  A ve  ra ge  e xe  cu tio  n tim  e( se  c.

)      Max-L=7,|T|=10,000,minimumsup=15%  FPclose GTCWFPMiner  4 6 8 10 12            Number of transactions  A ve  ra ge  e xe  cu tio  n tim  e( se  c.

