Towards a new mechanism of extracting cyclic

Abstract-Never before a such abundant volume of data is collected as the one which we attend nowadays. Thus, its explo? ration becomes increasingly difficult, especially if we highlight the temporal aspect during the extraction of association rules.

Therefore, several works were devoted to this problematic by introducing the temporal association rules mining. In this paper, we focus on cyclic association rules, classified as a category of the temporal association rules. Indeed, this class aims to discover new relationships between items that display regular cyclic variation over time. As a response to the anomalies characterizing the classical approaches addressing this issue, i.e., SEQUENTIAL and INTERLEAVED algorithms, we introduce in this paper, a new algorithm called peAR ALGORITHM. In fact, the major advantages characterizing our approach consist on its performance and its incremental aspect. The experiments were carried out to prove the robustness and the efficiency of our proposed algorithm vs the pioneering approaches in the same trend.



I. INT RODUCTION  The data mining area has for main interest the extraction of meaningful knowledge from large databases [3] using useful patterns like association rules [8] .  As soon as it was proposed by Agrawal et al [ 12] , the problem of mining association rules grabs exponentially the attention of the scientific community.

In this respect, several efforts were dedicated to the coupling between the temporal aspect and the association rules [7] by introducing temporal association rules [ 10].

To solve the temporal association rules issue, five streams of approaches are identified:  ? Interval Association Rules [9]: involve discovering of association rules during a time interval 1 related to each item [9];  ? Calendric Association Rules [ 13]: Ramaswamy et al have introduced the calendric association rules [ 13]. Then, Li et al generalized the already proposed model[ 15]. The Calendric Association Rules offer a generic model of calendric association rules extraction based on calendar algebra expression. In fact, the latter is a collection of time intervals describing some real-life phenomenon.

By integrating calendars and association rules, we can  1 A time interval is the period between the first and the last time the item appears transactional databases  Med Salah GOUIDER  Higher Institute of Management of Tunis  41, freedom Street, Bouchoucha City, Bardo,  2000, Tunis Email: ms.Gouider@isg.rnu.tn  generate discovered patterns. For example, we buy cars equipped with air conditioning in summer : Cars => Air conditioning in Summer. And we deduce that there are more accidents and victims on weekends : Accidents => Victims on Weekends;  ? Temporal Predicate Association Rules [2] :  extend the as? sociation rule model by adding to the rules a conjunction of binary temporal predicates that specify the relation? ships between the time stamps of transactions. By finding associated items first and then looking for temporal relationships between them, it is possible to incorporate potentially valuable temporal semantics. The approach of temporal reasoning accommodates both point-based and interval-based models of time simultaneously. For example, we buy milk and butter in a given time-interval : Milk => Butter between 19 o'clock and 23 o'clock.

And we buy bread and juice at a given time : Bread => Juice at nine o'clock;  ? Sequential Association Rules [ 1 1] :  dedicated to the ex? traction of association rules from data represented as sequences. Indeed, a sequence contains sorted sets of items ordered by transaction time [5]. For example, association rule mining does not take the time stamp into account, the rule can be Buy A => Buy B. If we take time stamp into account then we can get more accurate and useful rules likewise : Buy A implies Buy B within a week, or usually people Buy A every week;  ? Cyclic association rules [ 1] :  aim to discover association rules from articles having regular cyclic variation over time.

We focus, in this paper, on the last category: Cyclic As? sociation Rules. The remainder of the paper is organized as follows. We scrutinize, in Section 2, the related work. We define the concepts of our approach and introduce the PCAR algorithm in Section 3. We present an illustrative example to analyze the mechanism of our model in Section 4. We also relate the encouraging results of the carried out experiments in Section 5. Finally we conclude by resuming the strengths of our contribution and sketching future research issues.



II. REL ATED WORK  We assume that the transactional data to be analyzed is time? stamped and according to the considered time unit specified by the user we divide the data into disjoint segments. We believe that users will typically opt for 'natural' segmentations of the data based on months, weeks, days, .. . etc. From such databases, it seems obvious that discovering cyclic association rules consists on extracting association rules from articles characterized by regular cyclic variation in the time. The cycle is measured by its length. This latter is fixed by the user because we judge the users the best qualified to make this decision based on their understanding of the underlying data and their typical variation over time. Information about such variations will allow marketers to better identify trends in association rules and help better forecasting. For example, if we generate the association rules from monthly sales data [ 14] , we sketch out the seasonal variation of articles such as certain rules are valid approximately the same month every year. This analysis can concern annual, monthly, weekly or even daily sales. For example, we notice by analyzing annual sales that we tend to buy more chocolates and candies on the Christmas period. By scrutinizing monthly sales we figure out that sales of bags and shoes are largely greater at the beginning of the month than on its end. Finally, by considering weekly sales, we assume that buying wine and chips is more important in the weekend than the ones in the other days.

In this respect, two orthogonal research approaches for cyclic rules of association emerged: (i) the first one, called the SEQUENTIAL algorithm, stressed on the independency between association rule mining and cycle detection, and (ii) the second trend is the INTERLEAVED algorithm, employing the optimization techniques on discovering cyclic association rules.

A. SEQUENTIAL ApPROACH  Studying deeply these approaches, the SEQUENTIAL algo? rithm contains two phases: The first one is related to the extraction of association rules for every time unit. In fact, we extract large itemsets then we generate the corresponding association rules from the large itemsets. The idea is to discard most of the small k-itemsets during the support-pruning step so that the database is searched only for a small set of candidates for large k-itemsets. Afterward, the rules that exceed the confidence threshold MinCon! are constructed from the large itemsets generated in the first pass with one of the existing algorithms.

Example 1: For instance, given the context sketched by table II, with MinSup =75% and MinCon! =50%, the list of the generated rules is as follows: 0 =} C, 0 =} B, 0 =} A, A =} C, B =} A and A =} B.

Once the rules of all the units of time were discovered, the second phase related to the detection of the cycles is started.

In this procedure, each association rule is represented by a binary sequence with ' 1' corresponding to units of time in which the rule holds, '0' else.

Transaction ID Items  1 A,B,C 2 B 3 A,B 4 A,C  TABLE I CONTEXT OF EXTRACTION  Example 2: According to the considered context, the binary representation of the set of generated rules is summarized in the table II. Fixing the length of cycle to 2, only the rules verified in the transactions 1 and 3 will be retained : 0 =} B, o =} A, B =} A and A =} B.

Transaction ID I 0=>C 1 0 =>B I 0=>A I A=>C B=>A A=>B 1 I 1 I 1 I 1 I 1 1 2 0 1 0 0 0 3 1 1 0 1 0 4 1 0 1 0 1  TABLE II BINARY REPRESENTATION OF THE GENERATED RULES  In order to optimize this algorithm and reduce its runtime, the INTERLEAVED approach was introduced.

B. INTERLEAVED ApPROACH  Indeed, the INTERLEAVED algorithm is based on three optimization techniques:  ? Cycle skipping is a technique aiming to avoid counting the support for each time unit which we already know that cannot be part of the cycle of the itemset;  ? Cycle pruning is a technique allowing to approximate the cycles of itemsets. In fact, the cycles' number of an itemset X is less than or equal to the cycles' number of one of its subsets;  ? Cycle elimination is a technique used to further reduce the number of potential cycles in the purpose to discard cycles that an itemset X cannot have as soon as possible.

Building upon these techniques, the steps of this algorithm are highlighted as follows. Thanks to cycle pruning, we generate the potential cycles. For every unit of time, we apply the cycle skipping aiming to extract the itemsets for whose we compute the support using the cycle elimination. This is concluded by the generation of cyclic association rules.

Example 3: According to the context shown by Table II, we generate A and B as frequent items because they exist in the first and third transaction. Nevertheless, C isn't considered as frequent item for the same reason. If the context was larger thanks to cycle skipping we avoid counting the support of C in this case. Using cycle pruning we assume that the only possible frequent itemset is AB. Thus, the list of the generated rules based on the frequent itemset AB is as following : 0 =} B, 0 =} A, B =} A and A =} B.

C. Discussion  It is crucial to compare these two approaches. So that, the table III summarizes this confrontation. In fact, both    the sequential and the Interleaved algorithms are inspired from the APRIORI algorithm . However, the INTERLEAVED algorithm outperforms the SEQUENTIAL algorithm because the latter extract all the possible rules without scrutinizing if the itemsets are cyclic or not hence a huge waste of time is spawn. This issue is eliminated in the INTERLEAVED one.

The latter can manage dense databases against the failure of the SEQUENTIAL algorithm to accomplish this task.

I Criteria I SEQUENTIAL I INTERLEAVED Number of phases 2 phases 3 phases Performance less efficient more efficient Processing of large databases x Extension of apriori x x  TABLE III COMPARISON BETWEEN SEQUENTIAL VS INTERLEAVED.

The main advantage gained is the optimization introduced by the INTERLEAVED compared to the SEQUENTIAL. The downside of this success is the inability of the INTERLEAVED to handle the incremental side of databases in spite of the exponentially growth of the density of databases. Obviously, the data are added incrementally. Hence, it is fundamental to handle this aspect [4].

Based on the critical study established, we introduce a new approach dedicated to extract cyclic association rules. In the following section, a description of the problem is given.



III. PROBLEM DESCRIPTION  Let a set of n items and a set of m transactions, where each transaction consists of a subset of the set of items. Let BD be a database of m transactions with schema <tid,items>.

The problem of discovering association rules is defined as finding relationships between the occurrences of items within transactions. An association rule of the form X =} Y is a relationship between the two disjoint itemsets X and yean itemset is a set of items). An association rule is described in terms of support and confidence. The support of an itemset X is the fraction of transactions that contain the itemset. The confidence of a rule X =} Y is the fraction of transactions con? taining X that also contain Y. The frequency is determinated thanks to support and confidence thresholds.

Focusing on the cyclic dimension, we study only itemsets varying cyclicly according to the length of cycle, like X and Y which appeared in DB in the transaction I and sequentially at the transaction I+LENGTH OF CYCLE until I+(LENGTH OF CYCLE*K) transactions (table IV). This latter is the last transaction divisible by the length of cycle. Decision about the frequency of itemsets is related to given support threshold. If at [I+(LENGTH OF CYCLE * 2)] position X and Y don't appear in DB, we stop counting the support of this itemset. If its support exceeds the minimum support thus it's considered as a frequent itemset else it's an infrequent itemset.

To tackle this problematic, we introduce a new model PCAR described in the following section.

Transaction ID Items I i X , Y  ... . ..

i+length of cycle X , Y ... . ..

i+(length of cycle*2) X , Y . .. . ..

i+(length of cycle*k) X , Y  TABLE IV CYCLIC ITEMSETS IN DB

IV. NEW APPROACH PCAR  In the following, we briefly present elementary notions on cyclic association rules and their underlying concepts.

A. Basic concepts  We highlight in this section the key settings that will be of use in the remainder.

Definition 1: Time Unit Given a transactional database DB, each time unit Ui corre? sponds to the time scale on the database [ 1] .

Example 4: Let's consider the following example sketched in table V.

Transaction ID Items  I B 2 A, B 3 B,C, D 4 A, B,C 5 C  6 A, B 7 B, D 8 A, B  TABLE V INITIAL DATABASE DB.

The transactions illustrated in table V are extracted hourly, so the time unit considered is the hour.

Definition 2: Cycle A cycle c is a tuple (l, 0), such that 1 is the length cycle, being multiples of the unit of time; 0 is an offset designating the first time unit where the cycle appeared [ 1] .

Thus, we conclude that 0 :::; 0 < l.

Example 5: If we considerer a length of cycle l =  2 and the corresponding offset is 1. So that, the cycle c =(l, 0) =(2,1).

Definition 3: Partition and its length A partition, noted pi, is an adjacent subset of transactions of the original database. Its length, noted Ipil, is the number of partial transactions specific to a partition and it is set initially.

Example 6: If we divide the context illustrated in table V on 2 partitions. So, the length of the partitions is Ipil= Ipll= Ip21 = 4.

pI contains the first, the second, the third and the fourth transaction. And p2 is composed from the remainder of transactions otherwise the fifth, the sixth, the seventh and the eighth transaction.

Corollary 1: The length of the cycle l is less than or equal to the length of a partition, otherwise :  l :::;1 pi 1 .

Example 7: According to the context, Ipil = 4 > l = 2.

Definition 4: Relative minimum support  The relative minimum support is denoted by  M? S ,.JJi - [L?=l 1 pj I] M? S m Uj/ - 1 DB 1  * m up  with j the index of the partition.

Example 8: We propose M inSup =50%, the relative min?  imum support related to the first partition is denoted by  MinSup Pl_[ L;-llpjl ] * MinSup - IDEI =[? * 50%] = 25%.

Definition 5: Cyclic Item and Cyclic Itemset The cyclic item, denoted Xpi, is an itemset X included in a partition pi of initial database.

Let  be a sub-set of cyclic itemsets, containing k cyclic items,  belonging to a given partition denoted pi then  is called k? itemsetpi.

If supp(I) ? MinSuppi then the itemset is considered as frequent.

Definition 6: Support of cyclic itemset The support of an itemset  represent the number of oc?  currences of an itemset denoted supp(I) and given by this formula :  (1) {I OJ E pi, ! <;;; oj I} supp = . .  {I OJ E pz I} Example 9: According to our example, as cyclic item, we  have in the first partition pI Api because its support is supp(A) =50% ? MinSupp1 = 25%.

And as cyclic item set, we generate also in the first partition AB because its support is supp(AB) =50% ? MinSuppl = 25%.

Definition 7: Cyclic association rule A cyclic association rule is a rule having the following format X ==} Y with the itemset Xypi is relative to the last partition pi and the cycle c = (l, o) is the cycle in which the rule is verified. The rule is verified in a cycle c = (l, 0) where it checked in each time beginning with the first unit of the partition.

Definition 8: Measures of quality of a cyclic association rule  The quality measures of a cyclic association rule R : X =? Y are the support and the confidence: - Support of the rule R: X =? y, denoted supporteR), is given by the support of X and Y with respect to the last partition pi, otherwise supp( (X u y)pi ).

- Confidence of the rule R: X =? Y, denoted conf(R), is computed by this formula:  f(X Y) = supp(X U Y)Pi  con =?

(X) . supp P"  The rule is frequent if (conf(X =? Y)pi) ? MinConf.

Example 10: Continuing with the same example we can generate R : A =? B, with a support computed as follows supp( (A U B)P2 ) =  50%. And a confidence of rule R given according to the following formula  conf(A =? B) = supp(A u B)p2  = 50%  = 1.

supp(A)p2 50% After clarifying the fundamental concepts, we introduce our  approach in the following section.

B. Description of PCAR  The new model of generation of cyclic aSSOCiatIOn rules introduced is the PARTITION CYCLIC ASSOCIATION RULES algorithm, denoted PCAR algorithm. Fundamentally, it is based on the segmentation of the initial database, according to the choice of user, in a number of partition.

After partitioning the database, we browse it partition by partition, each partition is scanned to generate the frequent cyclic itemsets. Obviously, the given partition i will be scanned only once, the next partition i + I will use the frequent cyclic item sets already generated in the partition i hence we emphasize the incremental side of our model. Based on frequent cyclic item sets, we extract the corresponding cyclic association rules as a final step.

Principal steps for extraction of cyclic association rules are detailed in figure 1.

o Generation  of cyclic candidates  Selection of frequem itemsets  o o ExtractiD!

of cyclic  association rules  Fig. I .  The process of peAR.

C. PCAR algorithm  Table IV-C highlights the list of used notations.

VB IDBI MinSup MinCan!

NbPartitian ?engthCycle SetFrequentItemSet  JetRule  The database.

The cardinality of the database.

The minimum of support.

The minimum of confidence.

The number of partitions.

The length of the cycle.

The set of the frequent cyclic item? sets.

The set of rule.

TABLE VI LIST OF USED NOTATIONS IN THE PCAR ALGORITHM    Having introduced the key parameters such as database, minimum support threshold, minimum confidence threshold, number of partitions and length of cycle, the PCAR algorithm start the fragmentation of the database. Then, it goes through all the partitions one by one. For each one, it extracts all the frequent cyclic itemsets relative to the current partition compared to the new threshold of support related to the cardinality of the partition. Ending the last partition, only the frequent cyclic itemsets will be considered during the generation of the cyclic rules of association, being the last stage of the algorithm.

Algorithm 1 PCAR Input: Database 'DB, LengthCycle, NbPartition, MinSup, MinCon!

Ouput: set of cyclic association rules SetFrequentItemSet := 0; II 1. Extract frequent cyclic itemsets II Browse all the partitions  for i = I to NbPartition do II Browse the itemsets of each transaction  for j = I to IDBIINbPartition do II j: given transaction  for I = I to j do II I: Given itemset in a transaction j  IlVerfify the itemset is cyclic and frequent  if (Supp(I) > (MinSup * Iii) and IsCyclic(I) then  II IsCyclic( I) : Verify in the occurrence of I is cyclic given the length Cycle  if I E SetFrequentItemSet then Occurrence(I) := Occurrence(I)+ j;  else  S etFrequentI temS et SetFrequentItemSet U {I} ;  end if  end if  end for  j := j + 1; end for  i := i + 1 ; end for  II 2. Generate set of cyclic rules setRule:=0; II Browse the set of frequent cyclic itemsets  for i = I to SetFrequentItemSet do R:= GenerateSetRule(I); II Generate the set of rules from an itemset I  if conf(R) > MinCan! then II Add the rule to the set of cyclic ones  setRule := setRule U R; end if  end for

V. ILLUSTRATIVE EXAM PLE  Aiming to explain clearly the different steps of our proposed model, we consider the context sketched in in table V as DB and we fixe the following values of parameters:  ? Number of partition equal to 2; ? Length of cycle equal to 2; ? MinSup equal to 50%; ? MinConf equal to 50%.

First we start by partitioning the database. Having the cardinal? ity of the database IDB 1 =8 and a given number of partition = 2 th d? l' f th . . . I '1 I  DBI , e car ma Ity 0 e partitIOns IS pZ = number of Partition I?I= 4. Hence Ipll= Ip21 =4. The given partitions are sketched in the figure VII.

I Partition Transaction ID Items 1 B  pI 2 A, B 3 B, C,D 4 A, B, C 5 C  p2 6 A, B 7 B,D 8 A, B  TABLE VII THE PARTITIONS IN THE DATABASE DB.

Second, we focus on the first partition pI, the relative minimum support in pI is computed as follows  . The cyclic items generated are shown in the table VIII.

I Cyclic Items I Support I Cyclic occurrences I B A C  D  1 [1,3)[2,4] 0.5  0.25  0.25  TABLE VIII CYCLIC ITEMS IN pI  [2,4] [3)[4]  [3]  We notice that there are 4 items A, B, C and D hav? ing supports greater than the relative support threshold MinSuppl=25%. So that, all generated cyclic items are considered as frequent.

For cyclic 2-ltemsets, the generated candidates are detailed in table IX. All cyclic 2-itemsets have supports greater than 25%. So they are considered as frequent.

I Cyclic 2-ltemsets I Support I Cyclic occurrences A B A C B C B D C D  0.5  0.25  0.25  0.25 0.25  TABLE IX CYCLIC 2-ITEMSETS IN pI  [2,4]  [4]  [3)[4]  [3] [3]    For cyclic 2-Itemsets, the generated candidates are detailed in table IX. All cyclic 2-itemsets have supports greater than 25%. So they are considered as frequent.

Cyclic 3-Itemsets I Support Cyclic occurrences A B C  I 0.25 B C D  _ 0_25  TABLE X CYCLIC 3-ITEMSETS IN pl  [4] [3]  As for the second partition p2, the new relative minimum support related is recomputed:  MinSu]l'2 = [L 1 pj I] * MinSup j=l  = [L 1 pj 1 *MinSup = [4 + 4] * 50% = 50%.

j=l 8  The table XI accentuate the generated candidates in the second partition. Indeed, an update of the support of items and their cyclic occurrences will be made. And no rescan of the first partition is done hence we stress the incremental aspect of our method. According to MinSupp2, we prune the candidate cyclic items C and D because their supports are smaller than the new relative minimum support threshold.

I Cyclic Items I Support I Cyclic occurrences B A C  D  0_875 [1,3,5][2,4,6,8] 0.5 [2,4,6,8]  0.125 0.125  TABLE XI CYCLIC ITEMS IN p2  [3,5] [7]  As pointed up in table XII, the only generated candidate as a cyclic 2-ltemsets is AB and its support exceeds 50% so it's kept as frequent.

Cyclic 2-Itemsets Support Cyclic occurrences  A B  0_5 [2,4,6,8]  TABLE XII CYCLIC 2-ITEMSETS IN pl  The second pass of the model consists on the extraction of cyclic association rules based on the frequent cyclic itemsets.

Indeed, the cyclic rules are the following  ? R1 : 0 ? A ? R2 : 0 ? B ? R3: A ? B ? R4 :B?A  For R1 : 0 ? A, the support is computed as follows supp( AP2 )= 50%. And the confidence of rule R1 is given according to the following formula  f(0 A) _ supp(A)p2 _ 50% _ con ? - - -- -1 supp(A)p2 50%  .

Similarly for R2 : 0 ? B, the support is supp( BP2 )= 87.5 %. And the confidence of rule R2 is  conf(0 ? B) = supp(B)p2  = 87.5%  = 1.

supp(B)p2 87.5%  Now for the rule R3 : A ? B, the support is supp((AUB)P2 )= 50%. And the confidence of rule R3 is  conf(A ? B) = supp(A U B)p2  = 50%  = 1 supp(A)p2 50%  .

And finally for the rule R4 : B ? A, the support is supp((BUA)P2 )= 50%. And the confidence of rule R4 is  supp(B U A)P2 50% conf(B ? A) =  ( ) 2 = --0/ = 0.5714.

supp B p 87.5/0 After studying deeply our model thanks to the used illus?  trative example, we devote the next section to the evaluation of our algorithm PCAR through an experimental study.

V I. EXPERIM ENTAL STUDY  All experiments were carried out on a PC equipped with a Pentium IV PC, a CPU clock rate of 3 Ghz and a main memory of 2 Go in order to evaluate the performance of our algorithm PCAR implemented in java. Its user interface is shown on figure 2 .

???-??-- ? . ? - , .... ) ..

Fig. 2. User Interface of PCAR.

The algorithm was tested on benchmark datasets 2, whose characteristics are summarized in table XIII.

Database UTransactions Average size of transactions  TIOI4DIOOK 100000 10 T40IIODIOOK 100000 40 RETAIL 88162 10  TABLE XIII DESCRIPTION OF BENCHMARK DATABASES.

Through these experiments, we have a twofold aim: first, we have to put focus on some key parameters influencing the performance of our approach. Second, we propose to compare our algorithm with the pioneering approaches of  2 http://fimi.cs.heJsinki.fi/dala/.

cyclic association rules trend. In this respect, we present the variation of key parameters namely the minimum support, the number of partitions and the length of cycle. The figures related to experiments are in a logarithmic scale.

A. Minimum support variation  We recorded the total running time of our algorithm on the basis of test. As depicted by figure 3, we introduce a value of MinCon! equal to 100 %, a number of partitions equal to 20 and a length of cycle to 2. Indeed, we note that the more the minimum support increases, the more the runtime required decreases and conversely. In addition, for the same values of minimum support, the runtime of PCAR is the highest for the RETAIL database. This can be justified by the number of items in this dataset which hampers the performance of PCAR algorithm.

(TI0I4DIOOK) 700 '-';:'--'--'--'--'--"---""-'  peAR --+-      400 '--'--'--'--'--'--'---'---' ? ? 40 ? 60 70 00 00 100 MinSup(%)  (T4OI I OD lOOK) 1650 r-<""'--'--'--'--""-::;"""'"  peAR --+-  ? 1550 - 1500 ?1 1450 0:: 1400   1300 '--'--'--'--'--'---''---''---' 20 30 40 50 60 70 80 90 100  MinSup(%)  (RETAIL)  ? ?1 '"  1950 peAR --+-     1750 '--'--'--'--'--'--'--'---' 20 30 40 50 60 70 80 90 100  MinSup(%)  Fig. 3. Runtime of peAR with minimum support variation  B. Variation of number of partitions  As highlighted by figure 4, the carried out results of experiments are presented with a minimum support equal to 50 %, a minimum confidence equal to 50 % and a length of cycle is fixed to two while varying the number of partitions.

We notice that the more the number of partition is consid? erable, the more the performance of PCAR increases. For the same value of number of partitions, the execution of PCAR for TIOI4DIOOK is the fastest. This can be explained by the fact that the average size of transactions of this dataset is the least among the three databases.

By moment, these experiments stress on the proportionality between the performance of PCAR and the number of parti? tions of datasets. And they point out the incremental aspect which favors our approach.

In the following, we focus on the variation of length of cycle.

(TlOI4D lOOK) (T40IlOD lOOK) 430 r---r-,---,---r--,  peAR --+- 1440     380 '---'---'-'---'---'----' o 20 40 60 80 100  Partition Number  (Retail) 1850 ,---r-.,---,--...---,  peAR--  ? 1830 .? - 1820 ? 1810 0:: 1800 ----1   peAR --+-  20 40 60 80 Partition Number  1780 '---'---'----:'-,---:':---' o 20 40 60 80 100 Partition Number  Fig. 4. Runtime of peAR with variation of number of partitions  C. Variation of length of cycle   Figure 5 plots the runtime needed under variation of length of cycle, we remark that the increase of length of cycle improves the performance of PCAR according to the three databases. Indeed, if we decrease the length of cycle, we'll be obliged to scan more the partitions one by one, this can result the degradation of performance of PCAR. So that, we infer that the performance of PCAR and the length of cycle are negatively correlated.

(T I 0I4D lOOK)  peAR --+-  ; .

? '"  (T4OI I OD lOOK)  peAR --+-1340 i      280 '---'---'----'--......::? 1220 o 100 200 300 400 500 0 100 200 300 400 500 Length of Cycle Length of Cycle  (RETAIL)  PCAR --+-  ; 1560 .

? 1540 '"   0 100 200 300 400 500  Length of Cycle  Fig. 5. Runtime of peAR with variation of length of cycle  Compared to the sets of experiments, we proved the cor? relation between PCAR and parameters namely minimum support, length of partition and length of cycle. At times, it was crucial to assess on the performance of our approach versus the two others algorithms SEQUENTIAL and INTERLEVED.

D. Comparison of PCAR and the pioneering approaches in the same trend  We bring to light the evaluation of PCAR by its comparison with the SEQUENTIAL and the INTERLEVED algorithms as pioneering approaches dedicated to generate cyclic association rules.

Running the 3 algorithms with the same values set for the key parameters, we obtain the figure 6. As illustrated in this figure, the gap between the runtime needed tends to become wider in the measure of decrease of minimum support.

0' Q) .e 1500 Q) ; C 1000 '" a::    Sequentiel --+-? Interleaved ---)(--?  peAR ... ;< ...

x ...... _ ................ ...

,.

'X ......... .................. ?--------  40 60 MinSup (%)  80 100  Fig. 6. Comparison of experimental results of PCAR, INTERLEAVED and SEQUENTIAL algorithms.

In addition, by changing the support threshold, and fixing MinConf to 100%, we notice that for the same value of MinSup; PCAR requires only 54 1 seconds for its running while the INTERLEAVED requires 1 100 seconds and the SEQUENTIAL consumes 1200 seconds. Therefore, PCAR is twice as efficient as the INTERLEAVED and 2.22 times faster than the SEQUENTIAL. Obviously, in terms of efficiency, PCAR amply outperforms the other algorithms and proves that it is the best for various test cases.

Thus we have shown that our approach PCAR demonstrate to be effective remarkably by improving the results of the generation of cyclic association rules.

V II. CONCLUSION  In this paper, we point out the cyclic assocIatIOn rules.

Indeed, addressing the issues of cyclic association rules con? duct as to identify abnormalities affecting the pioneering approaches of this trend. To overcome these shortcomings, we introduced a new model PCAR. In light of its experimental study, we stress on the considerable performance of our contribution and its outperformance vs. the INTERLEAVED and SEQUENTIAL algorithms.

These encouraging results obtained through this work make our innovative approach stretching in several upcoming works.

Consequently, other avenues for future work address the following challenging issues :  ? Use data cubes to generate multidimensional cyclic as? sociation rules. In fact, by analyzing multidimensional context, we propose to introduce a new category of association rules based fundamentally on a cyclic optic.

? Involving the user in the extraction of association rules thus we'll progress towards anthropocentric approach. In this user-driven approach, the user is at the heart of the mining process of cyclic association rules.

? Addressing the problem of incremental maintenance [6] of cyclic association rules. Indeed, data sources are frequently updated. It follows that extracted cyclic rules describe a dataset at mining moment. This change of data implies invalidation of cyclic rules and necessity to maintain them ideally through an incremental model.

? Integration of uncertainty theory on extracting association rules and their cyclic incremental update. A combination with fuzzy logic may be a possible palliative issue.

In fact, in generalized cyclic association rule mining, the taxonomies concerned may not be crisp but fuzzy.

They reflect partial belongings among itemsets, (e.g., "chips" could be regarded as both "Preserved Product" and "Vegetable", each at a different degree in a given circumstance closely related to the cycle involved).

