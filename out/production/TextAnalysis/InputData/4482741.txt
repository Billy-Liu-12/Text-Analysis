Intelligent Dynamic XML Documents Clustering

Abstract  Clustering as an intelligent technique for mining XML documents has been utilised as an excellent way of grouping the documents by their content or structure. A main step in many distance based XML clustering algorithms is to calculate pair-wise distances between documents; naturally, a time-efficient technique requests the pair-wise distances to be determined in a timely manner.  In case of dynamic XML documents, the amount of changes between versions cannot be predicted. Therefore, in case of clustered dynamic XML documents, if changes were little or if they affected only some of the clustered documents, recalculating pair-wise distances every time would be highly redundant. In this paper we propose a time-efficient technique to reassess pair- wise distances between clustered dynamic XML documents which change in time, without performing redundant calculations but considering the previously known distances and the set of changes which might have affected the documents versions.

1. Introduction  With the spread of XML usage for data representation and exchange between applications [8], it also came the request for intelligence in manipulating XML documents. XML mining algorithms aim to determine interesting knowledge (patterns in data or structure, association rules etc) or to help in efficient information retrieval (via clustering, classification etc).

From a database perspective, clustering as an intelligent data mining task tries to find dense regions in a data set, using some distance measurement, based on the assumption that data space is not uniformly occupied by data points [3].

Research work has previously shown that the process of clustering XML documents can not just use the traditional clustering techniques. This is because:  (i) XML comes with a flexible way of storing the information, allowing the document to change depending on specific application requirements and (ii) an XML document combines the actual data with hierarchical relationships information between elements. Therefore, a number of XML-specific clustering techniques have been proposed [5], [6], [14], [15].

In an XML clustering approach, the distance between two documents implies the notion of documents similarity. XML documents have specific structure and each XML node also carries a semantic meaning (via its tag, or name). Therefore an XML- based clustering solution can be seen as a set of XML documents grouped by their structural, semantic or structural and semantic similarity.

So far, the issue of clustering XML documents has been approached from two main directions (detailed examples are given in the ?Related work? section): a) clustering static XML documents - in this case,  the documents to be clustered are all known and available in advance, before running the clustering algorithm. The documents do not change, therefore the pair-wise distances are calculated only once; the resulting clustering solution is static;  b) clustering series or streams of XML documents ? in this case, the documents to be clustered are not known in advance; they become available one by one, and the algorithm recalculates the distance between each incoming new document and the existing clusters.

With the increased use of XML [9], we have identified a third case, that is, when some (or all) of the already clustered XML documents change their structure or content in time, in order to reflect the dynamic of the application. Obviously, when the   DOI 10.1109/AINA.2008.122    DOI 10.1109/AINA.2008.122     clustered documents change, the previous clustering composition might become obsolete if changes were so significant that the modified documents were reallocated to different clusters or if new clusters were formed.

In our previous work, we named this type of documents as dynamic XML documents; they inherently contain the notion of time, whereby at least one element indicates the temporal coverage of the specific version of the document [12], [13].

Techniques for incremental or online clustering have been already proposed for metric data, but in our opinion they are not directly applicable for dynamic XML documents. The topic of clustering dynamic (multi-versioned) XML documents has not been thoroughly researched so far: in a clustering solution which contains dynamic XML documents members, the new document versions are not available beforehand, nor entirely new documents (they only differ in a certain degree from their previous versions); hence, none of the two types of existing XML-based approaches mentioned above (clustering XML static or clustering XML series) can be efficient for dynamic XML documents. This is because any of them would treat the new modified versions as completely new and different XML documents ? in this case redundant calculations would be performed in order to re- calculate the new similarity of each new version with the rest of the clustered documents.

In this paper we propose a novel and intelligent technique to reassess the new distances between clustered dynamic XML documents, not by running pair-wise full documents comparisons every time when documents change, but by directly assessing the effect of the historical changes on the previously known distances between documents.

2. Related work  In this section we discuss some of the existing work in the area of clustering XML documents, stressing the fact that any of the existing work does not deal with efficiently reassessing clusters of dynamic XML documents. Two main directions of research can be noticed, in this regard: (i) Techniques for clustering static XML documents and (ii) Techniques for clustering series of XML documents  In [5], the most typical structural characteristics of a set of XML documents are subsumed in a ?XML cluster representative?. The XML documents are seen as trees and the cluster representative is built in three steps: building optimal matching tree, building the merge tree and pruning the merge tree. The optimal  matching tree is also called a ?lower-bound tree? and it is a tree in which any node deletions leads to a worsening of the total distance between each tree in cluster and its representative. Oppositely, the merge tree, also called ?upper-bound tree?, is a tree in which a node insertion leads to a worsening of the abovementioned total distance. The authors argue that their proposal is efficient in building query plans on clustered documents, by comparing queries with cluster representatives? structures  In [6], XML documents are considered to be rooted, ordered and labelled trees and structural summaries are inferred from them, by nesting and repetition reduction. A ?tree edit distance? between each pair of structural summaries is calculated and the clustering phase is based on the ?structural distance? between structural summaries.

Starting from the fact that only 48% from the XML documents on the web are based on a schema [9], the work in [14] proposes to make use of both structural and semantic information in schemaless XML documents, by extracting ?macro-path?(s) (noted mPaths) from the analysed documents and finding similarity between them; each mPath is a three-tuple (path sequence, attribute sequence, content sequence).

A different approach is introduced by [15], where each XML document to be clustered is ?broken? down into ePaths, which are sequences of nested elements, with the most nested one being a simple content element. A two-dimensional bitmap index is built to detect the ePath contained in documents; then, a three- dimensional bitmap index (BitCube) is built by adding the ?words? dimension to the previous two-dimensional index. Three types of operations can be applied on BitCube, that is, ?ePath slice?, ?word slice? and ?document project?. Also, because the BitCube can be very large and very sparse, a number of approaches are proposed in order to enable easy access to information in BitCube.A technique for clustering series of heterogeneous XML documents (XCLS) was proposed in [10]. The authors consider series (streams) of XML documents and calculate the similarity between each incoming XML document and the existing clusters by using the concept of ?level structure?. In this way, similarity is determined at cluster level rather than pair-wise for individual documents in the clusters.

As mentioned in the previous section, both types of existing XML clustering techniques (static and series) do not respond well to the issue or clustering dynamic XML documents, because a dynamic XML documents cannot be classified as neither static nor as new document in series.

Figure 1 Overview of the proposed technique to reassess clustering solution composition     In this paper we propose an intelligent and time- efficient technique for reassessing the distances between clustered dynamic XML documents after they change, not by running full pair-wise comparisons but by calculating the effects of the changes on the previously known distances, that is, on the distances before documents have changed.

3. Proposed framework  Given C a clustering solution of a set of N XML documents, it can be visually represented as an initially fully connected graph, with 2/)1( ?NN total number of weighted edges where, in order to obtain single link clusters of level L , the edges with weight Lw ?  have been removed; the remaining connected components give the resulted clusters [Dalamagas et al., 2004].

If the clustering solution is based on the similarity between the XML documents, the weight of each edge which connects two documents represents the distance between them.

Definition 1. Given two XML documents D1 and D2, in their tree representation, the distance between them d(D1,D2) is given by the set of edit operations O {insert, update, delete} with minimal total cost which can transform one document into the other, that is:  d(D1,D2)=min(d(D1?D2),d(D2?D1))  Property 1. Higher the similarity between two documents, smaller the distance between them.

Property 1 says that two documents are said to be identical (that is, have maximum similarity), when no operations are required to transform one into another; in other words, the distance between documents (total cost of operations) is 0.

When one or more XML documents inside the clustering solution change (some of the nodes are updated, deleted or inserted) the distance (thus the similarity) between the modified document and the rest of the documents changes as well. The number and type of changes affecting each modified document will certainly influence the new similarity between itself and the other documents in the clustering solution.

Consequently, after the changes are applied, each modified document can be in one of the following situations: it might be still contained by the cluster which initially contained it, it might be contained by a different cluster, it might form a cluster by itself or with other documents etc.; a new clustering solution composition can only be obtained after determining the new distances between all pairs of XML documents available.

We show in Figure 1 an overview of the identified problem. As it can be noticed, one straightforward option (option A) would be to recalculate, after each set of changes, the distances between the XML documents by doing a full pair- wise comparison of them.

Clustering solution from XML documents before changes  D3 D2  D1  D1  ' 2D  D3  Set of XML documents, after some have changed  Option A (expensive)  ? set of changes  Calculate pair-wise structural distances  Structural distances  Reassessed structural distances  Clustering solution from XML documents after changes  Recalculate pair-wise structural distances  New structural distances  Option B ? our proposal  Set of XML documents before changes     This option would be very expensive from the operational point of view, because there is no distinction made between documents affected more or less by the set of changes; hence, in case of: (i) new versions of documents carrying only a small amount of changes or (ii) documents not modified at all, some (or all) operations involved in the full comparison of each pair of documents would be unnecessarily repeated.

The second option (option B ? our proposal) is to make use of the already known distances between pairs of XML documents in the clustering composition before the changes and the set of temporal changes, and use them together to reassess the new modified distances. This option has two major advantages: o for any pair of XML documents, our proposal  reassesses the new distance only if at least one of the documents was changed; oppositely, option A would do a full comparison and would recalculate the distance even if none of the documents in the pair was modified;  o for any pair of XML documents, our proposal acknowledges the fact that the modified documents are not entirely new documents, but versions of ?dynamic? ones, therefore there will always be a certain degree of similarity between the new and old versions;  Our proposal depicted in Figure 1 can be therefore split in two main steps:  Step 1 - Initial clustering run (one-off, not repetitive): (1a) run any distance based clustering algorithm for XML documents and determine the clusters; (1b) record the matrix of distances between all pairs of XML documents, together with the direction of minimum cost in each case (see Definition1);  The output of Step 1 is called the ?initial clustering solution? and forms the base for the first run of Step 2.

Step 2 - Reassessing clustering solution composition (this is repeated after each set of changes or whenever an up-to-date clustering solution view is required): (2a) get the set of changes between the initial clustering run and current timestamp; (2b) get the latest matrix of distances between pairs of XML documents; (2c) reassess each distance based on: previous distance, direction of minimum cost and set of changes;  The output of Step 2 is called the ?reassessed clustering solution? and forms the base for the next run of the iterative Step 2.

Certainly, the most critical phase in the iterative Step 2 is reassessing the distances (phase 2c), based on the previous distances and set of changes. We  present in the next section our proposed method to achieve this.

4. Distance measurement  For the purpose of the technique presented in this paper, the term of XML document (also called XMLdoc ) refers to a well-formed and valid XML  document, which has unique identifiers attached to each node (note that the method used to assign IDs to nodes is not critical) and an attached  tree representation T.

In case of dynamic (multi-versioned) XML documents, each new version is a new XMLDoc, obtained by modifying the previous version; this is done by applying a combination of insert, update and delete operations to the document version nodes.

The sum of these operations is known as delta, and this term is usually associated with the difference between two consecutive versions of an XML document:  Definition 2. Given a dynamic XML document, in two states, D and D?, where D ? D?, a generic XMLdelta  document (noted ? ) records the  changes of the document from one state to another.

It consists of a set of basic operations O {update, insert, delete} which, upon execution on the document in state D, will return the document in state D?.

Definition 3. Given a dynamic document with two consecutive versions, D and D? where D ? D?, the cost of delta between them (noted cost(?(D?D?))) is the total cost of the operations O {update, insert, delete} listed in the delta.

In Definition 1 (the distance between two different XML documents) and Definition 3 (the cost of delta between two versions of the same XML document), the cost of each operation O {update, insert, delete} depends on the position of the node affected by the operation O - that is, a leaf node would be cheaper to insert (or update, or delete) compared to a node which has one or more levels of children nodes.

Definition 4. Given two XML documents in two states, D and D?, and given an operation O{insert, update, delete} which, upon its application on the document in state D returns the document in state D?, then the reversed operation Orev is the operation which, upon its application would on the document in state D? returns the document in state D.

For example, insert(X) is the reversed operation corresponding to operation delete(X), and update(X?Y) is the reversed operation     corresponding to operation update (Y?X) etc. (X, Y and Z are nodes in an XML document).

We can now define the new distance between two XML documents where at least one of them has changed.

Definition 5a. Given a pair of XML documents D1 and D2 within a clustering solution C, with d(D1,D2) the distance between them and D1 D2 the direction of minimum cost, if a set of changes ? transformed D1 into a new version D1? then the new distance d? between D1? and D2 could be defined as follows:  d?(D1 ?,D2)=(d(D1,D2)? ?(D1, D1?))-  d(D1,D2)? ?(D1,D1?)) In other words, the shared set of operations  which contributed to the minimum distance between D1 and D2 and also to transforming D1 into new version D1? need to be deducted when calculating the distance between D1? and D2, as they have equal effect, whereas only the distinct operations need to be counted.

We give in Figure 2 an example of the situation defined by Definition 5a.

A  B C D  E F G  C D  E H  A  Document 1D  Document 2D  B  A  B C D  E H G  Version '1D  d (D1,D2)={delete G, delete F, insert H}  ?(D1,D1?)={delete F, insert H}  d?(D1?,D2)={delete G}   Figure 2. New distance between two XML  documents where the left document changes  Definition 5b. Given a pair of XML documents D1 and D2 within a clustering solution C with d(D1,D2) the distance between them and D1?D2 the direction of minimum cost, if a set of changes ?  transformed D2 into a new version D2? then the new distance d? between D1 and D2? could be defined as follows: d?(D1,D2  ?)=d(D1,D2)+?(D2,D2?)-  ? =  p  i 1 (Oi+Oi  rev)  , where Oi are the p operations from d (D1, D2) which have corresponding reversed operations Oirev in ?(D2,D2?), 1? i ? p.

In other words, the set of operations which contributed to the minimum distance between D1 and D2, and were subsequently reversed during D2 transformation into D2? need to be deducted when calculating the distance between D1 and D2?, as their combined effect is null, whereas only the distinct unreversed operations need to be counted.

We give in Figure 3 an example of the situation defined by Definition 5b.

A  B C D  E F G  C D  E H  A  Document 1D  Document 2D  B  A  B C D  E H G  Version '2D  F  d (D1,D2)={delete G, delete F, insert H}  ? (D2,D2?)= {insert F, insert G}  d?(D1 , D2?)={insert H}     Figure 3. New distance between two XML documents where the right document  changes  Definition 5c. Given a pair of XML documents D1 and D2 within a clustering solution C, with d(D1,D2) the distance between them and D1?D2 the direction of minimum cost, if a set of changes ?1 transformed D1 into a new version D1? and a set of changes ?2 transformed D2 into a new version D2?, then the new distance d? between D1? and D2? could be defined as follows: d?(D1  ?,D2 ?)=[(d(D1,D2)??1(D1,D1?)) ?  (d(D1,D2)? ?1(D1,D1?)]+  ?2(D2,D2?)-? =  q  i 1 (Oi + Oi  rev)  where Oi are q remaining operations from d(D1, D2) after removing repeated operations from ?1 which have corresponding reversed operations Oirev in ?2(D2, D2??), 1? i ? q.

In other words, when both D1 and D2 have changed into versions D1?and respectively D2?, the logic from both Definition 5a and Definition 5b is     applicable; the new distance d?(D1?, D2??) can be assessed in two steps: first add the costs of d and ?1 and eliminate the operations which are repeated in both d and ?1 (if any), and then eliminate from the remaining operations those which are reversed in ?2 (if any).

We give in Figure 4 an example of this situation (when both documents change).

Figure 4. New distance between two XML  documents where both documents change  Definition 5d. Given a pair of XML documents D1 and D2 within a clustering solution C, with d(D1 , D2) the distance between them and D1? D2 the direction of minimum cost, if D1 and D2 do not change, then the new distance d? is the same with the old distance d, that is  d?(D1, D2)=d(D1, D2).

5. Clustering algorithm  The algorithm in Figure 5 makes use of the proposed formulas for recalculating the new distances as defined in Section 4. We use the single link clustering algorithm and stoping-rule C-index as implemented in [6], based on [4]. Given n XML documents, we form a graph where the weight of each edge represents the distance between two documents. The single link clusters for clustering level L are obtained by removing the edges with weight > L. Note that our proposal can work with any other distance-based clustering algorithm.

._____________________________ Algorithm Reassess_Clusters Input Cluster solution C={C1,C2,?Cn}, where Ck={Dk  1,Dk 2,?Dk  n}, Dk j dynamic XML  document members,  1 ? j ? nk; cluster level L; Output New cluster solution C?={C1  ?,C2 ?,?Cn  ?}, 1 ? i ? n?, / Phase 1 ? reassessing distances / 1. For each  Di, Dj ? C, Di ? Dj 2.   If  ? Di? and ?Dj?then 3.      repeat_op_cost ? 0 4.  For each  Oi ? d(Di,Dj) 5.     If  Oi ? ?(Di,Di?) then 6. repeat_op_cost  ?repeat_op_cost + 2 * cost(Oi)  7.      End if 8.   Next Oi 9. d?(Di?,Dj) ?  d(Di,Dj)+cost(?(Di,Di?))- repeat_op_cost  10.   End if 11.   If  ? Dj? and ?? Di? then 12.     reversed_op_cost ?0 13.     For each Oi ? d(Di,Dj) 14.           If Oi  rev ? ?(Dj,Dj?) then 15. reversed_op_cost ?  reversed_op_cost + cost(Oi)+cost(Oi  rev) 16.        End if 17.     Next Oi 18. d?(Di,Dj?)=d(Di,Dj) +  cost(?(Dj,Dj?)) ? reversed_op_cost  19.    End if 20. If ? Di? and ? Dj?then 21.       For each Oi ? d(Di,Dj) 22.    If Oi ? ?(Di,Di?) then 23. repeat_op_cost ?  repeat_op_cost + 2 * cost(Oi)  24.   End if 25.         If Oi  rev ? ?(Dj,Dj?) then 26. reversed_op_cost ?  reversed_op_cost + cost(Oi) + cost(Oi  rev) 27.   End if 28.      Next Oi d?(Di?,Dj?)=d(Di,Dj)+ cost(?(Di,Di?))+cost(?(Dj,Dj?))- repeat_op_cost-reversed_op_cost 29.   End if 30.  If ?? Dj? and ?? Di?then 31.  d?(Di?,Dj?)=d(Di,Dj) 32.  End if 33. Next Di,Dj / Phase 2 ? new structure of level L clusters/ 34. Build n(n-1)/2 edges graph 35. For each  Di?,Dj?, Di??Dj? 36.   If d?(D1?,D2?) ? L then  A  B C D  E F G  C D  E H  A  Document 1D  Document 2D  B  A  B C D  E H G  Version '2D  F  A  B C D  E H G  Version '1D  d (D1,D2)={delete G, delete F, insert H}  ? (D1, D1?)= {delete F, insert H}  ? (D2 ,D2?)= {insert F, insert G}  d?(D1?,D2?)= {insert F}     37.   prune edge Di?? Dj? 38. End if 39. Next Di?,Dj? 40.Return C?={C1?,C2?,?Cn?  ?} ______________________________  Figure 5 Algorithm for reassessing clusters composition for dynamic XML documents   6. Experimental results  To test our proposed method we used XML documents (20kB and 50kB) extracted from the [16], with an average number of levels of 4.

Firstly, we clustered the documents to get the initial clusters composition (Step 1 in framework in Section 3), using minimum pair-wise distances; at this stage we also stored the distances between documents in the clustering solution together with the set of operations corresponding to each minimum distance. Then, in order to assess the efficiency of Step 2, we applied different percentages of changes to the documents in the clustered solution, in order to obtain new versions.

The purpose of the tests was to compare, after each set of changes, the time required to reassess the distance between documents using the same method as for the initial clustering (i.e. full pair-wise comparison of the XML documents) to the time of reassessing each distance using the method proposed in this paper and formulas in Definitions 5a, 5b and 5c.

Figure 6 Test results for 50kB doc (part 1)   We show in Figures 6, 7, 8 and 9 some of the  obtained results. They demonstrate clearly that our proposed technique to reassess the distances in dynamic XML clusters is much faster than performing a full pair-wise comparison on all new versions of the clustered documents. This can be explained by our technique: (i) performing only a minimum number of calculations and (b) reassessing  distances only for those pairs of XML documents where at least one of them has changed.

Figure 7 Test results for 50kB doc (part 2)     Figure 8 Test results for 20kB doc (part 1)     Figure 9 Test results for 20kB doc (part 2)   Also, from Figures 6, 7, 8 and 9 it can be noticed  that the difference between the full pair-wise and our proposed technique is more evident for higher number of documents modified or for higher percentages of changes applied.

Various number of medium-sized documents (50kB) affected by 10% changes        5 10 20  number of documents  tim e(  se co  nd s pair-wise full  comparison  proposed reassessing technique  50 small-sized documents (20kB) affected by various percentages of changes      10 20 50  percentage of change  tim e(  se co  nd s pair-wise full  comparison  proposed reassessing technique  20 medium-sized documents (50kB) affected by various percentages of changes      3 5 10 25  percentage of change  tim e(  se co  nd s pair-wise full  comparison  proposed reassessing technique  Various number of small documents (20kB) affected by 15% changes   5 10 20  number of documents  tim e(  se co  nd s pair-wise full  comparison  proposed reassessing technique      7. Conclusions  In this paper we have proposed an intelligent and efficient technique to reassess the distances between dynamic XML documents when one or all of the initially clustered documents have changed. After the changes, the initial clustering solution might become obsolete - the distances between clustered XML documents might have changed more or less, depending on the degree of modifications (insert, update, delete) which have been applied. Re-running full pair-wise comparisons on the entire set of modified documents is not a viable option, because of the large number of redundant operations involved.

Our proposed technique allows the user to reassess the pair-wise XML document distances, not by fully comparing each new pair of versions in the clustering solution, but by determining the effect of the temporal changes on the previously known distances between them. This approach is both time and I/O effective, as the number of operations involved in distance reassessing is greatly reduced.

