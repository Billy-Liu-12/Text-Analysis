A Theory of Inductive Query Answering

Abstract  We introduce the boolean inductive query evaluation problem, which is concerned with answering inductive queries that are arbitrary boolean expressions over mono- tonic and anti-monotonic predicates. Secondly, we develop a decomposition theory for inductive query evaluation in which a boolean query Q is reformulated info k sub-queries Q. = Qa A QM that are the conjunction of a monotonic and an anti-monotonic predicate. The solution to each sub- que'y can be represented using a version space. We investi- gate how the number of version spaces k needed to answer the query can be minimized. Thirdly, for the pattern do- main of strings. we show how the version spaces can be represented using a novel data structure, called the version spuce m e ,  and can be computed using a variant of the fa- mous Apriori alnorithm. Finally, we present some experi- ments that validate the appmach.

1. Introduction  Many data mining problems ad :ss the problem of f in ing a set of patternsthat satisfy a constraint. Formally, this can be described as the task of finding the set of patterns TIL(&, D, C) = { i p  E L I Q(q, D). i.e. those patterns p satisfying query Q on database D). Here C is the language in which the patterns or rules are described and Q is a pred- icate or constraint that determines whether a pattern 'p is a solution to the data mining task or not [ 151. This framework allows us to view the predicate or the constraint Q as an in- ductive query to an inductive database system. It is then the task of the inductive database management system to effi- ciently generate the answers to the query. This view of data mining as a declarative querying process is also appealing  as the basis for a theory of data mining. Such a theory would be analogous to traditional database theory in the sense that one could study properties of different pattern languages L, different types of queries (and query languages), as well as different types of databases. Such a theory could also serve as a sound basis for developing algorithms that solve induc- tive queries.

It is precisely such a theory that we introduce in this pa- per. More specifically, we study inductive queries that are boolean expressions over monotonic and anti-monotonic predicates. An example query could ask for molecular frag- ments that have frequency at least 30 per cent in  the active molecules or frequency at most 5 per cent in the inactive ones [ 141. To the best of our knowledge this type of boolean inductive query is the most general type of inductive query that has been considered so far in the data mining litera- ture. Indeed, most contemporary approaches to constraint based data mining use either single constraints (such as min- imum frequency), e.g. [2], a conjunction of monotonic con- straints, e.g. [17, 101, or a conjunction of monotonic and anti-monotonic constraints, e.g. [4, 141. However, [6] has studied a specific type of boolean constraints in the context of association rules and item sets. It should also be noted that even these simpler types of queries have proven to be useful across several applications, which in turn explains the popularity of constraint based mining in the literature.

Our theory of boolean inductive queries is first of all con- cerned with characterizing the solution space Th(Q,D,  C) using notions of convex sets (or version spaces [13, 12, 161) and border representations [15]. This type of representa- tions have a long history in the fields of machine learning [13, 12, 161 anddatamining [15.31. Thesedataminingand machine leaming viewpoints on border sets have recently been unified by [4, 141, who introduced the level-wise ver- sion space algorithm that computes the S and G set w.r.t. a conjunction of monotonic and anti-monotonic constraints.

0-7695-1754-4/02 517.00 Q 2002 IEEE 123  mailto:deraedt@informatik.uni-freiburg.de http://danleeminformatkuni-freiburg.de http://jaegermmpi-sb.mpg.de   In the present paper, we build on these results to develop a decomposition approach to solving arbitrary boolean queries over monotonic and anti-monotonic predicates.

More specifically, we investigate how to decompose ar- bitrary queries Q into a set of sub-queries Qh such that Th(Q,D,C)  = Ui Th(Q,,D,C), k is minimal, and each Th(Qi ,D;C)  can be represented using a single version space. This results in an operational and effective decom- position procedure for solving queries. Indeed, the overall query Q is first reformulated into the sub-queries Q,, which can then be solved by existing algorithms such as the level- wise version space algorithm of [4].

Our theory is then instantiated to answer boolean queries about string patterns. String patterns are widely applicable in the many string databases that exist today, e.g. in DNA nr in proteins. Furthermore, the present work is to a large extent motivated by the earlier MolFea system [14, 41, in which conjunctive queries (over anti-monotonic and mono- tonic constraints) for molecular features were solved using a version space approach. MolFea features are essentially strings that represent sequences of atoms and bonds. For string patterns, we introduce a novel data structure. i.e. ver- sion space trees, for compactly representing version spaces of strings. Version space trees combine ideas of version spaces with those of suffix trees. They have various desir- able properties. Most notably, they can be computed using a variant of traditional level wise algorithms for tries, rec- ognizing whether a string belongs to the version space is linear in the size of the string. and the size of the version space tree is at most quadratic in the size of the elements in the S set of the version space.

This paper is organized as follows. In Section 2, we de- fine the inductive query evaluation problem and illustrate it on the pattern domains of strings and item-sets: in  Section 3. we introduce a decomposition approach IO reformulate the original query in simpler sub-queries; in Section 4, we introduce version space trees that compactly represent the solutions to a sub-query in the pattern domain of strings: in Section 5 ,  we report on some experiments in this domain, and, finally, in Section 6, we conclude.

2 Boolean Inductive Queries  A pattern language C is a formal language for specifying patterns. Each pattern 4 E C matches (or covers) a set of examples &. which is a subset of the universeU of possible examples. In general, pattern languages will not allow to represent all subsets P(U) of the universe'.

Example 2.1 Let 1 = t i l , .  . . , in} be ajinite set of pos- sible items, and U, = 2= be the universe of item sets  'The terminology used here i s  similarto that in concepl-learning, where U would be the space of examples. P ( U )  the set of possible concepts, and C the set of concept-descriptions.

over Z. The traditional pattern language for this domain is Cz = U,. A pattern 4 E CI covers the set := {$ C Z I 4 $}, An alternative, less expressive, pattern lan- guage is the language C Z , ~  C Lr of item sets of size at most k .

Example 2.2 Let C be a finite alphabet and Uz = C' the universe of all strings over C .  We will denote the empty string with e. The traditional pattern language in this do- main is = &. A pattern q5 ? covers the set  $ denotes that 4 is a substring of $. An alternative, more expressive, lan- guage is the language of all regular expressions over C.

One pattern is more general than a pattern $, written 4 $, if and only if 2 $..

A pattern predicate defines a primitive property of a pat- tern, usually relative to some data set D (a set of examples), and sometimes other parameters. For any given pattern. it evaluates to either true or false.

We now introduce a number of pattern predicates that will be used for illustrative purposes throughout this paper.

Most of these predicates are inspired by MolFea [14]. Our first pattern predicates are very general in  that they can be used for arbitrary pattern languages:  minfreq(y,n,D) evaluates IO true iff p is a pattern that occurs in  database D with frequency at least 71 E N.

The frequency f(4, D) of a pattern 4 in  a database D is the (absolute) number of data items in D covered by 4. Analogously, the predicate maxfreqb, 71;  D) is defined.

= {$ E E' I 4 C $}, where 4  ismoregeneral(p.rl) is a predicate that evaluates to true iff pattern p is more general than pattern $. Dual to the ismoregeneral predicate one defines the ismorespecific predicate.

The following predicate is an example predicate tailored  lengthatmost@,n) evaluates to true for p E LE iff p has length at most 71. Analogously the length at least@^^) predicate is defined.

In all the preceding examples the pattern predicates have the form pred@,params) or pred@,D,params), where params is a tuple of parameter values, D is a data set and p is a pattern variable.

We also speak a bit loosely of pred alone as a pattern predicate, and mean by that the collection of all pattern predicates obtained for different parameter values params.

We say that m is amonotonic predicate. if for all possible parameter values params and all data sets D:  towards the specific domain of string-patterns over LE,  V#,$EC suchtha t@?$: m($, D,params) + m(d,D,params)     .I ---  The class of anti-monotonic predicates is defined du- ally. Thus, min-freq, ismoregeneral, and length-atmost are monotonic, their duals are anti-monotonic.

A pattern predicate pred@,D,params) that can he ap- plied to the patterns from a language C defines relative to D the solution set Th(pfed@, D,params),C) = {$ E C I pred($, D,params) = (rue}. Furthermore, for mono- tonic predicates m these sets will be monotone, i.e. for all g k $ ~ C : $ ~ T l r ( m , C )  - t $ ~ T h ( m , C ) .

Example2.3 Consider the string data set D = { a b c ,  abd, cd,  d ,  cd}.  Here we have pattern fre- quencies f ( a b c , D )  = 1, f ( c d , D )  = 2, f ( c , D )  = 3.

f ( a b c d ,  D )  = 0. And trivially. f(e,  D )  = ID1 = 5. Thus, the following predicates evaluate to true: min.freq(c; 2; DJ, min.freq(cd; 2; DJ, max.freq(abc; 2; D).

max.freq(cd; 2; DJ.

The pattern predicare rn := min_freq(p, 2 ,  D )  de- jines T h ( m ,  Cx) = { E ,  a ,  b ,  c, d ,  ab,cd}, and the pattern predicate a := max-freq(p: 2, D )  defines the infnire set Th (a ,Cx)  = &  \ {c,c,d).

Thedefinition ofTh(pred(p, D,params), C) isextended in the natural way to a definition of the solution set T h ( Q ,  C) for boolean combinations Q of pattern predi- cates over a unique pattern variable: Th( -Q,  C) := C \ T h ( Q , L ) ,  Th(Q1 V Qz,C) := Th(Q1,C) U Th(Qz,CC).

The predicates that appear in Q may reference one or more data sets D 1 , .  . . , D,. To emphasize the different data sets that the solution set of a query depends on, we also write T h ( Q , D 1  ,... ,D,:C)orTh(Q,D,C)forTh(Q,C).

We are interested in computing solution sets Th(Q; D, C) for boolean queries Q that are constructed from monotonic and anti-monotonic pattern predicates.

As anti-monotonic predicates are negations of monotonic predicates, we can, in fact, restrict our attention to mono- tonic predicates. We can thus formally define the boolean inductive query evaluationproblem addressed in this paper.

Given  a language C of patterns,  a set of monotonic predicates M = {ml(p,D1:paramsl) ,..., m,(p,D,,params,)},  a query Q that is a boolean expression over the predi- cates in M (and over a single pattern variable),  Find the set of patterns T h ( Q ,  D1, .  . . , D,,C), i.e. the solution set of the query Q in the language C with respect to the data sets D1 . . . , D,.

~   3 A decomposition approach  The query evaluation problem for a query Q will he solved by decomposing Q into k sub-queries Q, such that Q is equivalent to Q 1  V ... V Qk, and then computing Th(Q,D,C) as UiTh(Q,, D, C). Furthermore, each of the sub-queries Q, will be such that Th(Q;,D, C) is a version space (also called a convex space), and therefore can he ef- ficiently computed for a wide class of pattern languages C, and queries Q,.

Definition 3.1 Let C be a pattern language, and I .  C C.

I has dimension I ,  i fV& $?, $ E C : 4 5 $ 5 @ and $,@ E I =j $ E I. I has dimension k if it is the union of k subsets of dimension 1. but not the union of k - 1 subsets of dimension 1.

A query Q has dimension k (with respect to the pattern language C) if k is the maximal dimension of any solution se tTh(Q,D,C)  ofQ(whererhemarimumistaken w.L~.  all possible data sets ?D and w.rt. thejixed language CJ.

I f Q  hasdimension 1 w.r.t. C,thenTh(Q,D;C)isaver- sion space [I61 or a convex space [131. Version spaces are particularly useful when they can be represented by bound- ary sets, i.e. by the sets G ( Q ,  D, C) of their maximally general elements, and S ( Q ,  D, C) of their minimally gen- eral elements. For the theoretical framework of the present section we need not assume boundary representability for convex sets. However, concrete instantiations of the general method we here develop, like the one described in sections 4 and 5, usually will assume pattern languages in which con- vexity implies boundary representability.

Example 3.2 Reconsider the string domain. Let  Q1 = Q z  =  ismoregenera/(p, abcde) A /ength.at/easr(p, 3) isrnorespecific(p, ab) A ismorespecific(p, uw) A(/ength;rt/east(p, 6 )  V min.freq(p, 3, D ) )  The query Q1 does not reference any dataset, and T h ( Q 1 ,  C,) = {abcde, ab&, bcde, abc, bcd, cde}.

This set of solutions is completely characterized by S(Q1,C,) = {abcde} andG(Q1,Cx)  = {abc,bcd,cde}.

Th(Q2,  D , C x )  cannot in general be represented using a single version space. Howeves as our general method will show, the dimension of Th(Q2,  D; CE) is at most two, so that it can be represenred as the union of two version spaces.

With the following definition and lemma we provide an alternative characterization of dimension k sets.

Lemma 3.3 Let I C C. Call a chain 41 5 42,s . . . 5 Qzk-l C an altemaring chain (of length k) for I if $i E I for all odd i, and $i 6 I for all even i. Then the dimension of I is equal to the maximal k for which there exists in C an alternating chain of length k for I.

Example 3.4 Consider the following queries: Q3 = ismoregenera/(p, a&) A ismarespecific(p, a) , Q4 = ismoregeneral(p, c), and Q5 = Q3 V Qs.

Then c k a& is an alternating chain of length 2 for W Q 5 > . c d .

Given Q and L we are now interested in computing the dimension k of Q, and transforming Q into a disjunction V2=,Qi, such that each Th(Qi ,D,L)  is a version space.

The approach we take is to first evaluate Q in a reduced pattern language CGQ,. so that the desired partition VQ; can be derived from the structure of Th(Q, The solution set Th(Q, L$(Q)) does not depend on the datasets V that Q references. and the complexity of its computation only depends on the size of Q. but not on the size of any datasets.

Definition3.5 ForaqueryQ, l e r M ( Q )  = { m l ,  ... ,mn} be the ser of monoronic predicates contained in Q (where predicates rhar only differ wirh respect to parameter values also are considered distinct). Define LM(Q)  := ZM(Q).

A subset Q C M ( Q )  is called admissible if there exists darn sers V such thar Th(Amic@, A,,eg vn j , ?D ,L)  is notempty. LetC$yQ) = {Q E LM(Q)  I 4 admissible}.

Forthepredicares mi wedefineTh(mi, L M ( Q ) ) ,  respec- rively Th( mi, L%yQ)), os rhe set of (admissible) Q that con- rain mi. By rhe general definition this also derermines WQ: LM(Q)) and?WQ, C$Q)).

Example 3.6 Using only monotonic predicares, rhe query QZ from example 3.2 can be rewritten as v n l  A -Q A (-m3 V m4), wirh  ml = not-ismorespecific(y, ab) m2 = not-ismorespecific(p, uw) m3 = not-/ength_at/east(p, G ) ma = min.freq@, 3, D )  (where e.g. not-ismorespecific is the (monotonic) comple- ment of the anri-monoronic predicate ismorespecific; note that this is distinct from ismoregeneral).

Here every Q C { ml , . . . , m4} is admissible (a wirness for the admissibility of { m3, md}, for insrance, is a daroser D in which rhe srring abuw appears ar leasr three times, i.e.

abuw E Th(Tml A -rn2 A m3 A ma, D,  LE)).

Figure I (a) shows C M ( Q ~ )  = C z Q 2 ) ,  where e.g. pat- rern { m3, m 4 }  is just represented by its ?index string? 34.

Now consider a variant Q6 of Qz obtained by replacing m wirh m; := not-/ength.at/east@, 4).

Here nor every Q 5 { m l ,  m2,m??,m4} is admissi- ble: as ismorespecifiijp, ab) A isrnorespecific(y, uw) im- plies lengthatleas+, 4). we have that neither {m?}  nor { nf3 ~ m4} are admissible. These are the only two inadmissi- ble subsets of M ( Q ) ,  so rhar C$Q6, here is as infgure 1 (b).

(a) (b)  Figure 1. Pattern languages L G Q ,  Assuming that we can decide admissibility of subsets of M ( Q )  (for the types of pattern languages and pred- icates we have considered so far admissibility can al- ways be decided), we can construct L z Q ,  and compute Th(Q,L$(Q)). These solution sets are indicated for the queries QZ and Q B  in their respective languages L z Q , by circles in figure 1.  One sees that Th(Q2,Lz;Q2))  has dimension 2, and Th(Q6, L M o , ) )  has dimension 1. This gives an upper bound for the dimensions of the solutions ta the query:  Theorem 3.1 The dimension of Th(Q, C$yQ,) is an upper bound for the dimension of T h ( Q ,  D, C )  for all datasets ?D.

The dimension of Th(Q, L M ( Q ) )  is greater or equal the dimension of Th(Q; .C$(Q)), and therefore also can serve as an upper bound for the dimension of T h ( Q ,  V, L), In general, this will be a coarser bound: for &S.  for instance, we obtain for Th(Q, LM(Q, ) )  the same structure as shown for QZ in figure 1 (a), and therefore only the bound 2.

When Th(Q,L$yQ)) is of dimension k, we can de- fine each of its convex components &, as a solution to a query Qh in the predicates mi: if Q1,. . . ,Q1 are the max- imal and . . ,+, the minimal elements of Ihr  then I ,  = Th(&h,L$(Q)) for  Qh := (Vi,, -mj) A ( V ~ I  Am;c+; m j )  (1)  Theorem33 Th(Qh,V,L)  is convex for all darasers V, and T h ( Q , V , L )  = Th(Vk=,Qh,?D,L) = Uk,lTh(Qh,v,LC).

Example 3.9 Continuing from example 3.6, we can par- tition Th(Q2,  L$yQ2,) into WO convex components Il = { { m a } :  {m, m4}} and I2 = {l}. We rhus obtain the de-     composition of the query QZ into the two subqueries  QZ, =  QZ1 =  ismorespecifidp, ub) A isrnorespecifidp, uw) Amin-freq(p, 3; D ) ismorespecifidp, ab) A ismorespecific(p, uw) A/ength-at/east(p, 6) A -min.freq(p; 3, D)  Fur Q6 we have that Th(Q6, C$;Qe)) consists of one ver- sion space {I: {nu}}, so that Q6 is equivalent to the query  QBI =  The suh-queries ( I )  lo which the original query Q is reduced not only are known to have convex solution sets Th(Qh,D:C),  they also are of a special syntactic form Qh = Qh,M A Qh,a, where Qh,M defines a mOnOlOlle set Th(Qh,M:V: C), and Qh,a defines an anti-monotone set Th(Qh,a, D, L). This factorization of Qh facilli- tates the computation of the border sets G(Q,,:D,C) and S(Qh,'D, C), for which the level wise version space algo- rithm [4, 141 can be used. In the following section we will present an algorithm that for queries in the string domain uses the syntactic form of the Qh for efficiently computing and representing the solution sets Th(Qh: 2): C) with ver- sion space trees.

isrnorespecific(y, ab) A isrnorespecifidp, uw) A/ength.at/east(p, 4)  4. Version space trees  I n  this section, we introduce a novel data structure, called the version space tree, that can be used to elegantly represent and index a version space of strings, e.g. the Th(Qh; 2): Cr) introduced in the previous section. Further- more, we present effective algorithms that compute version space trees containing all strings that satisfy the conjunction of a monotonic and an anti-monotonic predicate (as in the queries Qh).

4.1. The data structure  A trie is a tree where each edge is labelled with a symbol from the alphabet C. Moreover. the labels on every edge emerging from a node must be unique. Each node n in a trie thus uniquely represents the string s(n) containing the characters on the path from the root r to the node n. The root node itself represents the empty string e .

A s u m  trie is a trie with the following properties:  For each node T L  and for each suffix t of s(n), there is also a node n' in the trie representing t, i.e. t = s(n').

Each node n has a s u m  link su&(n) = n', where s ( d )  represents the suffix obtained from s(n) by drop- ping the first symbol. The root node represents c, which has no suffixes. We define su&(rout) = I, where I is a unique entity.

:o "9 Figure 2. An example version space tree  Suffix tries have been well studied in the literature (18.

191. However, we make some importantdeviationsfromthe main stream approach:  instead of building a suffix trie on all the suffixes of a single string. we are indexing all the suffixes of aset  of strings; thus multiple strings are stored in the trie.

we usefilly labelled tries, in which each node is la- belled with either "@" or "8"; the @ label to indicate nodes that are interesting to us (say: belong to the ver- sion space) and e for those that are not.

because we need to store labels and counts for all substrings represented in the trie, we do not coalesce chains of nodes with only one out-going edge into a single edge label.

Note that a fully labelled trie may contain nodes for which its label as well as those of its descendants are all e. Thus the node as well as the suhtrie helow it are unin- teresting. Therefore, in practice we will often use a pruned labelled trie. This is a fully labelled trie with the additional property that all leaf nodes have the sign e. Both trees have the same semantics and each fully labelled tree has a unique equivalent pruned tree. Furthermore,as most of our results are valid for both types of trees, we will often employ the term "labelled trie".

Now a version space tree V is a labelled trie that rep- resents a version space of strings over Cx. More for- mally, let V he a set of strings of dimension I .  Then the corresponding (pruned) version space trie T is such that V = {U I n is a node in T with label and s (n)  = 2) }. Fig- ure 2 illustrates the (pruned) version space tree representing Th(Q,: D: L E ) ,  where Q7 = is_more4eneral(t, abcde) A (is.morespecific(t, bc) V ismoreApecific(t, cde)).

A version space tree VST representing version space V has the following properties:  1. All leaf nodes are labelled e.

2. Along every path from root to a leaf there is at most one sign change (from e to a); cf. Lemma 3.3.

3. If S = min V then VST will 1) have a leaf corre- sponding to each s E S and 2) have a node corre- sponding to each suffix s' of each s E S for which s' E v.

4. Therefore, the number of nodes in the version space tree VST is at most C,,&,l*, where Is1 denotes the length of the suing. However, the size of a VST is usually much smaller.

5. Testing whether a strings belongs to the version space represented by a version space VST is linear in  IsI, as the VST can be interpreted as a deterministic automa- ton on inputs.

6. Property 3 can be used as the basis for an algorithm for constructing a version space tree based on S and G .



I. For a given version space tree, one can easily and ef- ficiently construct the S and G-sets. Indeed, the S- set will contain all leafs I of the version space tree to whom no suffix pointer points: and the G-set will con- tain all nodes g with label @ whose parent node has label e and for which the node sufJix(g) either does not exist or also has the label 0.

As one can see, there is a close correspondence between version spaces of strings and version space trees. We will now show that there is also a close correspondence between version space trees and algorithms such as Apriori [2].

4.2. The algorithms  In this section. we sketch the VST algorithm to build a version space tree that satisfies the conjunction &a AQ,,~ of an anti-monotonic predicate &a and a monotonic one Q M .

This form of query corresponds to the one of the queries Q h  that would be generated by our decomposition (over anti-monotonic and monotonic constraints) approach. Al- gorithm VST is a level-wise algorithm based on the well- known Apriori [21 algorithm. The algorithm assumes I ) that the version space tree to be computed is finite and 2) that the alphabet C is given. It consists of two phases:  DESCEND: top-down growing of the version space tree us- ing the monotonic predicate QM.

ASCEND: bottom-up marking of the version space tree us- ing the anti-monotonic predicate &*.

Both phases are designed to minimize the number of database scansz. As such, they both exhibit the cyclic pattern: candidate generation, candidate testing (database scan) and pruning. The cycle terminates when no more new candidates patterns are generated.

Since only the monotonic pattern predicate is handled in the descend phase, we can reuse the idea of Apriori. The algorithm searches the strings satisfying &j,f in a top-down,  ?As m Apriori. one only needs to scan the data se& at most once for each level of the me.

breadth-first manner. At each depth level k, the descend algorithm first expands the nodes found in the previous iteration (Lk-1). The nodes resulting from the expansion constitute the set ck. These candidate nodes are then tested against the predicate Q M .  The testing involves one database scan for the whole iteration. The candidate patterns in c k that satisfy the constraints are put into L I .  Those that do not are pruned away from the lree. This process is repeated in a level wise fashion until ck becomes empty. All generated nodes are labelled with @ and the necessary suffix links are set up during this phase.

Note that the sets c k  and Lk are the same as the candi- date sets and ?large? sets in the Apriori algorithm. More- over, the generation of C, from Lk_l  also mimics the Aprion-join operation in the Apriori algorithm.? The de- scend algorithm makes use of the suffix like and parent- child relationship of a suffix trie to perform the join effi- ciently. More specifically, the candidate child nodes of a node 71 in L k - 1  (as well as the edges) correspond to the children of the node suffU(7i). So, the major difference be- tween DESCEND and Apriori is that the former also orga- nizes the discovered strings into a suffix trie. facilitating the join operation and the second phase of the VST algorithm.

The second phase is implemented with algorithm AS- CEND. This phase handles the anti-monotonic con- straint QA.  Here we assume that we have the set FO of leaf nodes in the tree T generated during the descend phase.

While DESCEND works top-down, ASCEND starts from the leaves and works upwards. It first checks the leaf nodes against the predicate Qa. The labels of all the nodes n that do not satisfy Qa, are changed into e. In addition, all their ancestors are also labelled as 8. This is sound due to the anti-monotonicity. So, we can propagate these 8 marks upwards until we have marked the root with 0.

Actually, we can stop as soon as we reach an ancestor al- ready marked with e, as another such leaf node 71? may share some ancestors with n. So, all the ancestors from that point upwards have already been marked with 8. Secondly, for those nodes p in  FO that satisfy &a, the label remains unchanged (i.e. e). Furthermore, we will enter their parent into the set Fl (and remove possible duplicates). Fl con- tains the nodes to be considered at the next iteration. This process is then repeated until Fk becomes empty.

So, after these two phases, namely DESCEND and then ASCEND, both the monotonic and the anti-monotonic con- straints are handled. With a simple tree traversal, we can prune away those subtrees that contain only 8 labels. The  ~ ~~  )There are some differences here since we are dealing with strings in- stead of sets. E.g., while Apriori-join generates item set {a, b. c )  from {a, b) and {a, c), the descend algorithm generates abc from ab and bc.

because these are the only immedialely shorter substrings of abc. At the same ume, it is not hard to imagine a vaiiant of the version space wee al- ganthm for use with item se-. Indeed. the kind of tr ie searched is quite similw to some of the data smctures used by e.g. 13, I I].

-- .

result is a tree that is a pruned suffix trie representing the version space of strings that satisfy the query QA A QM.

Theorem 4.1 The VST algorifhm performs ar mosf 2111 database scans, where m is length of fhe longest sfrings safisfying the monotonic quew QM.

5. Experiments  We have implemented the VST algorithm and performed experiments on datasets of command histories collected from 168 Unix users over a period of time [7]. The users are divided into four groups: computer scientists, experienced programmers, novice programmers and non-programmers.

The corresponding data sets are denoted ?sci?, ?exp?. ?nov? and ?non?. respectively. When each user accesses the Unix system, he first logs in, then types in a sequence of com- mands, and finally logs out. Each command is recorded as a symbol in the database. The sequence of commands from log in to log out constitutes a login session, and is mapped to a string in our experiment. Each user contributes to many login sessions in the database. Table 1 gives some statistics on the data.

In the first set of experiments we determined solutions of queries minfreq(p, n, D) for the four different datasets and for thresholds n that were selected so as to produce solution sets of around 300 frequent string patterns. Table 1 summa- rizes the datasets, the queries, and their solutions. Timings (wall-clock time on a Pentium III 600 Mhz) are reponed as well.

Whereas the first set of experiments only used the minfreq predicate, the second set of experiments involves the computation of two version space trees TI and Tz cor- responding to the queries Qs and QQ:  Qs : min.freq(p, nun, 24) A maxfreq(p, sci, 60)  QQ : minfreqb, nm, 80) A max_freq(p, e z p ,  36) Q S  and Qs are conjunctions of an anti-monotonic predicate and a monotonic one, thus their solution space is a version space. Furthermore, they are the suh-queries that are gener- ated for the query Qlo = Qs V QS using the decomposition approach outlined in Section 3.

The results of the second experiment are shown in Ta- ble 2. Each row shows the time the algorithm spent on building that tree. The columns of the table show the num- ber of nodes and total length of strings represented by those nodes. Each of the five sub-column in each case shows the number for a subset of the nodes in the final trie. The col- umn ?all? shows the figure for all trie nodes. The columns ?e? and ?0? show the figure aggregated over nodes with the respective labels only. The columns ?S? and ?G? show the figures for the maximally specific strings and the mini- mally specific strings, respectively. For what concerns the  query Qlo, there are in total 401 strings in its answer set, and together they have length 1953.

Our experimental results confirm our claim that the sets S a n d  G constitute a compact representation of the set of all patterns satisfying the given constraints Q w  and QA.  From Table 2, it can be seen that the total length of strings for S and G together is always smaller than that for all interesting patterns (i.e. e). In the case of 4, the space saving is significant. Moreover, algorithm VST is also very efficient in terms oftime and space. This shows that using suffix tries in the mining of string patterns is a promising approach.

The longest pattern found (represented by the deepest node in either TI or T2 having a e label) was ?pix urnacs pix umacs pix urnacs pix urnacs pix umacs pix urnacs pix urnacs pix m a c s  pix umacs pix?, which has a length of 19.

6. Conclusions  We have described an approach to the general pattern discovery problem in data mining. The method is based on the decomposition of the answer set to a collection of com- ponents defined by monotonic and anti-monotonic predi- cates. Each of the components is a convex set or version space, the borders of which can be computed using the level wise version space algorithm or - for the pattern domain of strings - using the VSTalgorithm, which employs a novel data structure called the version space tree. Experiments have been presented that validate the approach.

The results we have presented in this paper are by no means complete, a lot of open problems and questions re- main. First, it seems possible to adapt the version space trees and algorithm for use in other domains (such as item- sets). However, at present it is unclear how lo do this for some more expressive domains such as Datalog queries or even the string domain where one is using a coverage rela- tion based on subsequence matching rather than substring matching. Secondly, for the string domain, it is possible to funher optimize these algorithms for specific predicates (e.g. involving frequency counting on adatabase of strings).

Thirdly, we are at present also studying set operations on version space lrees. Such operations would allow us to per- form some of the logical operations directly on solution spaces. Fourlhly, the framework seems also useful in  the context of optimizing a sequence of inductive queries. Here, it would be interesting to see how the results to previous (sub) queries could be reused for more efficiently answer- ing the next question.

Although there are many remaining questions, the au- thors hope that the introduced framework provides a sound theoretical framework for studying these open questions as well as for developing practical inductive database systems based on the idea of inductive querying.

Data set  nov exP non sci  (D)  number number of of  users sequences 55 5164 36 3859 25 1906 52 7751  minimum frequent execution frequency strings time  (n) found (seconds) 24 294 3.24 80 292 2.88 80 293 0.72 48 295 4.89  memory used  (bytes)  Suffix Trie 'TI l'2  l ime  number of nodes total length of strings ' ( sec)  8 1 8 1 a l l I  S I G  8 le1 all I S I G  2.55 166 40 206 104 68 472 75 547 305 147 5.51 237 18 255 85 15 1489 23 1512 416 24  Acknowledgements  This work was partly supported by the European IST E T  project cInQ.

