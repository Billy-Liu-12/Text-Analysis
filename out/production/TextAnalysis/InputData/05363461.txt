Mining Frequent Patterns in Data Stream over Sliding  Windows

Abstract?Frequent pattern mining in data stream is an important task. Under the time decay model, this paper presents a new algorithm SWFP for mining frequent patterns over sliding windows. The new definitions of the infrequent, critical and frequent patterns which reflect the actual statistical property of each pattern within the sliding windows, grasp the real substance of mining process and help to improve the mining quality essentially. The support decay mechanism is designed not only to differentiate the current and history transaction, but also to make the online pattern maintain operation easily and accurately.

The reasonable strategy for the pattern pruning periodically is used to make big cuts in the maintenance cost and the error controlled in a small bound. Theoretical analysis guarantees no false negatives of SWFP. Experimental evaluation over a number of synthetic data sets demonstrates the efficiency and scalability of our method.

Keywords-frequent pattern mining; sliding windows; time decay model; data stream

I.  INTRODUCTION Recently, frequent pattern mining in data stream has  gradually become a research hotspot. The classical algorithms include LossyCounting[1] and FPstream[2] algorithm. The former can incrementally mine the frequent patterns online, but the storage complexity is too high. Adopting FP-Tree[3] as its basic data structure, under the tilted time window model, the later can store the pattern information for different data stream periods at various time granularity. In order to find the latest patterns, [4] proposed the MSW algorithm under the sliding window model, which used the decay factor to weaken the impact of history data, however, the efficiency had yet to be strengthened.

In practical application, the evolvement characteristics of the latest data stream are of more importance. Therefore, this paper proposes a method of data stream frequent pattern mining over sliding windows: SWFP. Innovative points include: 1) a new frame for frequent pattern mining essentially explains the connotation of the infrequent, critical and frequent pattern within sliding windows, guarantees no false negatives with the strategy, and fundamentally improves the mining quality; 2) a support decay mechanism prunes the overdue pattern information (according to the size of the current sliding window, the occurrence time of each pattern can be divided into two parts, i.e. active and overdue information which are within and outside the current window respectively; the overdue pattern is the part that only contains overdue information.) by eliminating its effect using the decay factor,  instead of pruning it factually, which helps to enhance the operability and efficiency of our algorithm; 3) a reasonable pattern periodical pruning strategy effectively prunes infrequent pattern and overdue pattern which are useless to the final mining result, and greatly reduces the time and space complexity of the algorithm. Theoretically analyses the effectiveness of SWFP. Several experiments on synthetic data set confirm the high efficiency and scalability of our algorithm.



II. PRELIMINARIES Data stream 1{ ,.., ,..}jDS TA TA=  is an infinite transaction  sequence, where jTA I? 1( { ,.., })MI i i=  with the dictionary order of the elements. Any pattern P is a subset of  I, i.e. P I? .

And, the members of  transactions which contain P consist of the support of P in data stream.

Definition 1. Transaction Projection[4]. Given a transa- ction TA={a1,a2,..,ak}. The projected transaction of TA, denoted as 'TA =  ' ' '1 2{ , ,..., }ka a a , is obtained by rearranging the elements of TA according to the dictionary order.

Unless particularly mentioned, there are no distinguish between the transaction and transaction projection.

Definition 2. m-Prefix[4]. Given a transaction TA={a1, a2,..,ak} and a pattern P={b1,b2,..,bm}(m ? k). If ,1i i m? ? ? and i ia b= , then we call P is the m-prefix of TA.

For the data stream frequent pattern mining over sliding windows, this paper employs the time decay model, where the decay function is ( ) 2 , 0tf t ? ??= > . To mine the complete frequent patterns, we define WTDF to represent the complete decayed support of a pattern within the current sliding window.

In the actual situation, the limited memory and processing speed make the algorithm be only able to maintain each pattern of incomplete information. Therefore, we define WADF to represent the incomplete decayed support of a pattern within the current sliding window.

Definition 3. Within the current sliding window, let the occurrence time set of pattern P maintained by an algorithm be Twa(P). At the current time tc, WADF is defined as  ( , )wa cD P t = ( )  ( ) 2 c j  j wa  t T  T T P  ?? ? ?? .

Definition 4. Within the current sliding window, let the complete occurrence time set of pattern P be Twt(P). At the current time tc, WTDF is defined as     ( )  ( ) ( , ) 2 c j  j wt  t T wt c T T P  D P t = ?? ? ?? .

According to WTDF, all patterns can be classified to three types, which are defined as follows:  Definition 5. Infrequent pattern, critical pattern and frequent pattern. Given the minimum support threshold  (0 1)? ?< < and the maximum error (0 )? ? ?< < . For any pattern P within the current sliding window whose size is M,  (1) if WTDF M?? , then P is called the frequent pattern; (2) if ( )WTDF M? ?< ? , then P is called the infrequent  pattern; (3) if ( )M WTDF M? ? ?? ? <  , then P is called the critical  pattern; (4) if the latest occurrence time of P is not in the current  sliding window, then P is called the overdue pattern.

In order to simplify the operation of mining within the  current sliding window, we set the decay factor to be 2 M? ?? < , which can eliminate the effect of the overdue pattern information avoiding any pruning operation. Therefore, we consider using TADF, TTDF to estimate WADF, WTDF, respectively.

Definition 6. At the end of current time tc, let the occurrence time set of pattern P maintained by an algorithm be Tta(P). Then TADF is defined as  ( )  ( ) ( , ) 2 c j  j ta  t T ta c T T P  D P t = ?? ? ?? .

Definition 7. At the end of current time tc, let the complete occurrence time set of P be Ttt(P), then TTDF is defined as  ( , )tt cD P t = ( )  ( ) 2 c j  j tt  t T  T T P  ?? ? ?? .

Here, we point out the goals for this paper. Let 0T  be the basic time unit. At any time 0( 1,2,...)T NT N= = , for frequent pattern mining, we must ensure the output over the current sliding window to satisfy:  (1) All the frequent patterns must be output; (2) Any infrequent pattern cannot be output; (3) Any overdue pattern cannot be output; (4) ,TTDF WTDF M TADF WADF M? ?? < ? < .



III. FREQUENT PATTERN MINING  A. Online Maintain Theory Data stream constantly produces plenty of overdue or  infrequent patterns. To reduce maintenance costs, it is necessary to prune them periodically (the pruning period  0DlT T= ). Pruning the overdue pattern only needs the latest occurrence time, however, pruning the infrequent pattern needs to use TADF, TTDF to estimate WADF, WTDF, respectively.

The theoretical basis is given as follows:  Propostion 1. Given 1/(1 2 ) M??? < , where M is the size of sliding windows. Suppose WADF, WTDF of P are  ( , )wa cD P t , ( , )wt cD P t , and TADF, TTDF are ( , )ta cD P t , ( , )tt cD P t . At the current time ct , we can get ( , )tt cD P t ? ( , ) ,wt cD P t M?<  ( , ) ( , )ta c wa cD P t D P t M?? < .

After introducing the periodic pruning mechanism, we need to define a TADF threshold function?  to determine whether WTDF is less than ( )M? ?? at time t.

Definition 8. Suppose the latest established time of P is tP.

At the current time tc, the TADF threshold function ? is defined as ( 1)( , ) (1 2 )( )c Pt tP ct t M  ?? ? ?? ? += ? ? .

Propostion 2. Suppose the latest pruned time of P is tm, the latest established time is tP. At the current time tc, if  ( , )ta cD P t <  ( , )P ct t? ,  then ( , ) ( )wt cD P t M? ?< ? .

If the TADF of P is less than ( , )P ct t? , according to Propostion 2, we know WTDF of P is less than ( )M? ?? , which means P is a infrequent pattern. Obviously, we can surely prune the patterns whose TADF is less than ( , )P ct t?  at the pruning period. With ( , ) ( , )tt c wt cD P t D P t M?? < ,  if the TADF is larger than M? , then ( , ) ( )wt cD P t M? ?> ? , which means P is not a infrequent pattern. Obviously, the algorithm output the active pattern whose TADF is larger than M? , can meet the requirement of goal (2), (4). According to the analysis and Propostion 1, we know goal (1), (3) can also be satisfied.

B. SWFP To begin with, we propose a new pattern tree of GSW-tree  based on SW-tree[4]:  each node except the root contains , ( , ), , ,ta P litem D P t t t nodelink , where, Pt is the latest  established time of P and lt is the latest occurrence time of P.

In ItemHeadTable, each item contains ,   item head of nodelink .

SWFP algorithm is given:  Algorithm 1:SWFP Algorithm 1 Get the newly arriving transaction T at current time tc; 2 Merge(T, Root ,tc); 3 If (tc % TD1)==0 then 4    For each item in ItemHeadTable 5      For each node in GSW-tree on the node link of item 6      where node.item=item 7          Update(node.(item,Dta(P,t),tp,tl,nodelink),tc); 8      End For 9    End For 10    If the request for mining result arrives then 11       Use the current GSW-tree to generate result; 12    End if 13 End if  Algorithm 1, Line 2 absorbs the newly coming transaction TA, whose concrete process will be explained in algorithm 2.

Line 4-9 express the pruning operations, which first update the data fields of each node and then prune the infrequent and overdue patterns (see algorithm 3, 4). Line 10-12, according to user requirements, output the active patterns whose TADF is larger than M? .

Next, in detail, we give algorithm 2-4 for describing the concrete operation processes:    Input: T, the arriving transaction; Root, the root of GSW-tree; tc, the current time.

Output: The updated GSW-tree.

1   Define and initialize the initiating insert position: 2 InsertPosition = Root; 3   For (i=0 ;i<|T| ;i++) 4        Extract the i-prefix-pattern P in T ; 5 Search the node that denotes P in GSW-tree ; 6 If the node exists then 7            Update(node.(item,Dta(P,t),tp,tl,nodelink), tc); 8 else 9            Create the new node to denote P and insert it into 10            GSW-tree as a child node of InsertPosition.

11                . ( , ) 1tanode D P t = ; . l cnode t t= ; . P cnode t t= ; 12                 Link the newly built node to ItemHeadTable; 13                 node.item = the last item in P; 14 End If 15         Let InsertPosition = node; 16   End For  In algorithm 2, Line 1-2 initialize the position for transaction inserting. Line 3-16 insert the new transaction, that is, incrementally lookup the representative node for the i-prefix pattern of the new transaction (Line 5): if there does not exist, then a new node is created, otherwise, the data fields are updated (Line 6-7), which is given in algorithm 3.

Algorithm 3:Update(node.(item,Dta(P,t),tp,tl,nodelink),tc ) Input:  node.(item,Dta(P,t),tp,tl,nodelink) for P ; ct ; 1DT .

Output: The updated node in GSW-tree.

1 If node need to merge  newly arriving pattern P then 2 Node. l ct t= ; 3       If 1( % ) .c c D lt t T node t? <  then 4 ( . ). ( , ) . ( , ) 2 1c lt node tta tanode D P t node D P t ?? ?= ? + ; 5       Else 6 1( % ). ( , ) . ( , ) 2 1c Dt Tta tanode D P t node D P t ??= ? + ; 7       End If 8 End If 9 If node need not to merge pattern P then  10       If 1.c l Dt node t T? >  then 11 1( ). ( , ) . ( , ) 2 DTta tanode D P t node D P t ??= ? ; 12       Else 13 ( . ). ( , ) . ( , ) 2 c lt node tta tanode D P t node D P t ?? ?= ? ; 14       End If 15 Estimate(node,tc); 16 End If  Algorithm 3 contains two different kinds of updating operations: the updating in absorbing new transaction (Line 1- 8) and the updating in periodic pruning (Line 9-16), whose detailed pruning process described in algorithm 4:  Algorithm 4:Estimate(node,tc) Algorithm Input: Node.(item,Dta(P,t),tp,tl,nodelink) ; ct ; 1DT ; Dl.

Output: void  1 If . l cnode t t M? ? then  2 Delete node; 3 Else If . ( , ) ( . , )ta c P cnode D P t node t t?<  then 4 Delete node; 5 End If

IV. ALGORITHM ANALYSIS  A. Scale analysis of GSW-tree In this section, we firstly analyse the scale of the infrequent  pattern group C within the current sliding window, where any two patterns don't share the same prefix. At the current time  c Dlt NT=  ( 1,2..)N = , similar to [5], we divide the current sliding window into /B DlNum M T=  buckets with the same width. Let in  (1 )Bi Num? ? denote the number of patterns in C whose earliest occurrence within the current sliding window is in bucket 1BNum i? + . Let mi denote the occurrence times for any pattern from bucket 1BNum i? + to BNum . Therefore, we can get 1 1( 1 ) ( 1,.., )j ji i Dl Bi in m T j Num= =? =? ? . According to the pruning rule, we know im i= , and then | | log( / )Dl DlC T M T? .

Let the maximal size of pattern be maxL such that the scale of C is max( log( / ) )Dl DlO T M T L? ? .

Next, we analyse the size of the critical and frequent pattern group C1 over the current sliding window, where any two patterns don't share the same prefix. Similar to [5], the overall weight of the current sliding window is a constant  0 2  iM M iW  ??? == ? . According to the threshold ( )M? ?? , we can  get 1| | ( /(( ) ))MC O W M? ?= ?  so that the scale of C1 is max( /(( ) ))MO L W M? ?? ? .

B. Error analysis Let the latest pruned time of P be tm. At the current time  1( 1,2..)c Dt NT N= = , suppose the TADF, TTDF of P is Dta(P,tc), Dtt(P,tc) , respectively. Since the algorithm prunes infrequent and overdue patterns, we only consider the error caused by critical and frequent patterns. So, they satisfy  ( )( , ) ( , ) 2 ( )c mt ttt c ta cD P t D P t M ? ? ?? ?? + ? . Combining with  1c m Dt t T? ? , we can get 12 ( )D Terror M? ? ??? ? .



V. EXPERIMENTAL ANALYSIS  A. Experimental settings In this section, we present an experimental evaluation of  SWFP. All experiments were performed on an Intel Core2 Duo CPU 2.1 GHz PC. We implemeted SWFP as well as the comparative method MSW[4] in Visual C++. The synthetic data sets were generated by the illiMine simulator, and marked as follows[3]: ?D? indicates the number of transcations in the data set, whereas ?T? and ?I? indicate the average transaction size and the average maximal potentially frequent pattern size, respectively. Unless particularly mentioned, the default parameters are setted as follows: the number of items 10,000, minimum support threshold 0.01? = , the largest error  0.1? ?= ? , the sliding window size 10000M = , the pruning period TD1=2500, and the decay factor ? = 0.001.

Algorithm 2:Merge(T,Root,tc) Algorithm    B. Execution time Firstly, we compare the efficiency between SWFP and  MSW. Figure 1 shows that the efficiency of the SWFP is superior to MSW, which is more obviously advantage as the data stream developing.

Figure 1.  Execution Time.

Secondly, test the efficiency of SWFP on data streams with different number of transactions, various average transcation size and average maximal potential frequent pattern size.

(a)   (b)   (c)  Figure 2.  Execution Time vs. Number of Transactions/Average Transaction Size/ Average Maximal Potentially Frequent Pattern Size.

Figure 2 (a) shows that the average processing time per transcation is approximate 4ms/Trans, which means it is very efficient, stable, and scalable to handle the high-speed data stream. Figure 2 (b) shows that as the average transcation size increases, the execution time is linear trend, obviously influenced by the size. Figure 2 (c) shows that the execution time sharply decreases with the average maximal potential frequent pattern size, but at the length between 10 to 15, the tend changes to be gentle.

Finally, we study the impact of the sliding window size on the efficiency of our algorithm. Figure 3 shows the efficiency of the algorithm is independent of the sliding Window size.

Figure 3.  Execution Time vs. Length of Sliding Windows.



VI. CONCLUSION The frequent pattern mining to reflect the recent  development trend is particularly important. On the basis of an introduction and a review of the existing methods of frequent pattern mining over sliding windows, an attempt is made to establish a new theory frame to improve the mining quality and efficiency, which is scientifically illustrated. When the data stream develops, the support decay mechanism is designed to prune the overdue pattern information of each pattern. At the same time, by the reasonable pruning strategy, the overdue pattern and infrequent pattern are pruned to reduce the cost of maintenance. Not only the theoretical analysis but also the experimental verification shows that our algorithm has high efficiency and scalability.

