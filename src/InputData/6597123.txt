Towards A Quality-Centric Big Data Architecture for Federated Sensor Services

Abstract?As the Internet of Things (IoT) paradigm gains popularity, the next few years will likely witness ?servitization? of domain sensing functionalities. We envision a cloud-based eco-system in which high quality data from large numbers of independently-managed sensors is shared or even traded in real-time. Such an eco-system will necessarily have mul- tiple stakeholders such as sensor data providers, domain applications that utilize sensor data (data consumers), and cloud infrastructure providers who may collaborate as well as compete. While there has been considerable research on wireless sensor networks, the challenges involved in building cloud-based platforms for hosting sensor services are largely unexplored.

In this paper, we present our vision for data quality (DQ)-  centric big data infrastructure for federated sensor service clouds. We first motivate our work by providing real-world examples. We outline the key features that federated sensor service clouds need to possess. This paper proposes a big data architecture in which DQ is pervasive throughout the platform.

Our architecture includes a markup language called SDQ-ML for describing sensor services as well as for domain applications to express their sensor feed requirements. The paper explores the advantages and limitations of current big data technologies in building various components of the platform. We also outline our initial ideas towards addressing the limitations.



I. INTRODUCTION Many important domains of human endeavor such as  meteorology, emergency services, logistics, and science are increasingly dependent upon remotely sensed information.

In this context, it is widely believed that the Internet of Things (IoT) paradigm will revolutionize these domains by enabling professionals in these and other similar domains to share and access remotely sensed data over the Internet in real-time. Cosm [1] is an early attempt in this direction. It provides RESTful services to upload and download sensor data.

If business and technology trends in other computing  domains are any indicators, the next few years will very likely see a cloud-based ?servitization? of domain sensing functionalities. Service providers will independently install and maintain domain sensing infrastructures, and the data feeds from various sensors will be exposed as services over the Internet. Service consumers can embed these data feeds into their applications. It is noteworthy that this is a manifes- tation of the Data as a Service (DaaS) model, the viability of  which has been validated by the recent emergence of several data markets including Azure DataMarket and InfoChimps.

However, currently most data markets only host static, pre- collected (mostly relational) data.

Although there has been considerable research on wire-  less sensor networks [2], [3] and sensor web [4], [5], the federated sensor services paradigm demands many advanced capabilities that are lacking in the current state of the art.

First and foremost, sensor service platforms will necessarily have multiple distinct stakeholders. There will be multiple sensor service providers possibly with very different capa- bilities and multiple service consumers with distinct sensor feed requirements. In addition, the sensor service platforms need to have auxiliary functionalities such as feed processing (e.g., filtering, sampling, etc.), feed storage and access control. These auxiliary services may again be operated by multiple service providers. The platform should be able to seamlessly support these multiple stakeholders. For example, each domain applications (sensor feed consumer) should be easily able to locate and utilize sensor feeds that best fit their data needs. Simultaneously, the sensor service providers must be able to cooperate (in collaborative settings) as well as compete (in business settings). Federation and service- orientation become very important in this regard. Second, domain applications generally have specific data quality (DQ) requirements. As mentioned above sensor-services are essentially data-services. Hence, service quality is to a large extent determined by the data quality of the sensor feeds.

Unfortunately, the notion of DQ is extremely weak in most current WSN and sensor web frameworks. Third, domain applications need efficient and effective mechanisms for discovering sensor feeds and creating composite feeds from elementary (single sensor) feeds and optimizing the feed processing workflows. Fourth, sensor feeds are subjected to variety of dynamics including sensor failures and sudden fluctuations in DQ of sensor feeds. Sensor service clouds have to be robust and agile to effectively handle them.

Fifth, sensor service platforms should be highly scalable; the number of feeds that need to be handled could easily be in the thousands, and they may originate from anywhere in the globe. Some may even originate from remote regions such as volcanic mountains. This means that the framework must  2013 IEEE International Congress on Big Data  DOI 10.1109/BigData.Congress.2013.21     be decentralized as well as geographically distributed. While cloud seems to be a natural choice for hosting sensor service platforms, there is surprisingly little work in this direction.

None, to the best of our knowledge, has comprehensively investigated mechanisms to apply data quality toward clouds for sensor service platforms.

In this paper, we outline our vision for a DQ-centric,  cloud-based framework for federated sensor services. This paper explores the big-data research challenges involved in building quality-aware, scalable and agile sensor service clouds. We study the data quality issues pertaining to sensor feeds and present an architecture for federated sensor service clouds in which DQ awareness is pervasive throughout the architecture. Furthermore, we analyze the appropriateness and limitations of various existing big data technologies in serving as the fundamental building blocks of federated sensor service clouds. We also outline our initial ideas towards addressing the limitations.



II. MOTIVATION AND BACKGROUND In this section, we first motivate the need for federated  sensor service clouds by discussing a few examples from diverse domains. We then discuss prior works that are most closely related to our research. Finally, we outline the research challenges in designing a federated sensor service cloud framework.

Currently, for the most part, each person or organization  that needs a particular sensor feed must install and operate a private sensor infrastructure. Obviously, this is very un- economical. The sensor services paradigm has several clear advantages. First, servitization amortizes the installation and operational overheads over all the consumers of a particular data stream thereby reducing the overheads for individual consumers. Second, by enabling scientists and businesses to share and access sensor data in real-time, the sensor services paradigm will enable scientific and business analytics on a truly global scale. Third, it will lay the foundation for sensor services industry with businesses specializing in providing high-quality sensor data from various domains in a cost effective manner. However, the sensor services paradigm also poses a number of significant challenges.

As an example, let us consider wind speed sensor feeds.

Many different domain applications may utilize wind speed sensor feeds. Wind speed feeds are used by weather monitor- ing applications for issuing emergency storm alarms. Wind energy companies rely upon these feeds for planning instal- lations and operations. Atmospheric scientists need them for analyzing effects of climate change on wind patterns. Cur- rently, each data consumer must install and operate their own sensor infrastructure, leading to unnecessary duplication and wastage. Sharing sensor feeds amongst these applications is quite intuitive. However, each of these applications may have very distinct requirements not only with respect to the content of the feed (i.e., the type of feed and the geographical  area of the feed) but also with respect to the quality of the feed. A storm monitoring application will likely need a continuously available sensor feed with very minimal delay. In contrast, the latency requirement may be more relaxed for an offline scientific data analytics application, but it will likely have stringent accuracy and completeness requirements.

Analogously, in any given geographical region, there  may be several wind speed sensors (anemometers), possibly owned by different agencies. The contents of their feeds will be similar. However, the quality of these sensor feeds may still be very different from one another because of variations in sensor hardware, quality of wireless links, and quality of power sources. For instance, there are many different classes of anemometers ? cup anemometer, windmill anemometer, hot-wire anemometer, laser Doppler anemometer, etc. Each of these classes has distinct DQ characteristics. For example, sonic anemometers provide fine temporal resolutions, wind- mill anemometers provide high accuracy, while hot-wire anemometers yield fine spatial resolution. A federated sensor clouds framework will ideally enable each data consumer to obtain the feeds (from one or more providers) that best suit its needs in terms of both feed content and feed quality.

A. Design Requirements We now discuss some of the important architectural  requirements with regards to federated sensor service clouds.

Models for Feed Content and Quality: As we discussed  above one of the primary functionalities of such a cloud will be to enable domain applications (feed consumers) to locate feeds that best suit their requirements in terms of both content and quality. A basic requirement in this regard is to come up with appropriate models for feed content and feed data quality. Between the two, modeling feed content is relatively simpler. For most applications, a combination of the physical parameter represented by the feed (e.g., temperature, wind speed, etc.) and some information with respect to the physical characteristics of origin of the feed (geographical location, sensor devise information) will suf- fice. Previous researchers have proposed using ontologies for representing the content feed metadata.

Modeling DQ of sensor feeds is inherently complex and  challenging. An ideal DQ model for sensor feeds must be powerful enough to holistically capture various quality aspects of sensor feeds and at the same time it must be flexible enough to accommodate various kinds of sensor feeds. First, DQ for sensor feeds is a broad concept involving multiple quality attributes including accuracy, availability, and latency. Second, sensor feeds are by nature continuously evolving data streams, and thus their DQ is inherently dynamic. Third, since most applications process sensor feeds in near real-time, they are mostly impacted by the quality of current data/recent-past data from the feed. Thus, it is expected that the quality of recent data from the feed should     have higher bearing on the current DQ of the feed than older data.

Techniques for Feed Discovery, Composition and  Adaptation: A federated sensor services clouds has to provide mechanisms for discovering sensor feeds, creat- ing composite feeds (from elementary feeds) and adapting to various environmental dynamics. Most current sensor platform require domain application authors to manually perform these operations, which is a very cumbersome process. Ideally, a sensor service cloud should incorporate autonomic techniques for sensor service discovery, composi- tion and adaptation, and to optimize these processes on cloud infrastructures. The application will just indicate its feed requirements in terms of content and DQ. The sensor service cloud will automatically locate the appropriate constituent sensor feeds and composes the stream using appropriate operators. Furthermore, the framework continuously adapts and optimizes the services as well as aids in failure recovery.

The sensor service cloud should also help feed providers to optimize their services based on the current DQ requirements of client applications.

Several challenges need to be addressed in this regard in-  cluding: (1) mapping of composite stream DQ requirements to the DQ requirements of constituent feeds; (2) mechanisms to continuously monitor the environmental parameters; and (3) optimizing the overall performance of the sensor service cloud by sharing sensor feeds, managing resource contention and prioritization.

Markup Language: The federated sensor service cloud  should incorporate a semantics-rich markup language for domain applications to express their data feed requirements and feed providers to meaningfully annotate their feeds.

The language should be able to support specification of composite data feeds. Stream processing language (SPL) may seem like a good choice at first glance. However, SPL requires end users to not only identify the streams (using stream ids) but also specify the operators that need to be applied. This is often too complicated for non-it profes- sionals. They should be able to specify their needs without having to manually identifying the feeds and operators. For example, a user should be able to specify that she needs a composite feed that reports temperature readings from all the counties in Georgia at the rate of 1 composite report per hour. Obviously, existing stream processing languages do not support such specifications.

Massively Scalable Feed Storage and Analytics: Appli-  cations may often need historical snapshots of sensor feeds.

Many applications also need analytics to be performed on sensor feeds. The federated sensor service cloud, therefore, needs to provide storage and analytics services for feeds.

These services need to be massively scalable ? a reasonably- sized sensor services cloud is expected to host several thousand sensor feeds. Furthermore, many of these feeds are long-running continuous data streams. Storing every data  value from every stream is obviously impossible. We need mechanisms that compress historical data by storing coarse- grained statistics about historical snapshots. The information should become coarser as we move back in time. The sensor service cloud should incorporate both batch analytics and on- line (real time) analytics. Batch analytics is usually required for historical data whereas online analytics is required for data that is currently streaming. In either case, for achieving scalability and efficiency, it is necessary to employ multi- node clusters for supporting analytics.

Pricing Models and SLAs: Pricing models are important  in sensor data markets (business settings where sensor feeds are traded). While there are some recent works on pricing strategies for pre-collected data (e.g., e-commerce data) [6], sensor data markets are different in multiple ways. First, since the data being traded is live or even in the future, the pricing model has to be contractual in nature. Second, DQ being extremely important for sensor services, it has to be one of the fundamental aspects of any pricing model. Third, DQ of a sensor feed is inherently dynamic, which further adds to the complexity of sensor feed valuation. Meaningful and effective SLA specification and enforcement frameworks are also critical for sensor data markets. Not surprisingly, DQ needs to be one of the key aspects of the SLA frameworks.

SLAs should be based on DQ metrics that are both practical and are easy to measure.

B. Related Work Wireless sensor networks (WSNs) and Sensor web can,  in some ways, be considered as predecessors to our vision of sensor service cloud. In a WSN, sensors use ad-hoc networks of routers to communicate with a local monitor- ing base station [2], [3]. Researchers have studied various issues involved in designing WSNs including architecture medium access control (MAC) layer protocols, routing, node localization, clock synchronization, energy management and security [2], [3], [7]. There are many works on developing operating systems, databases and other applications on sen- sor nodes [8], [9]. However, WSNs are not designed for sharing/trading sensor feeds in a geographically distributed setting. Our vision for sensor service cloud will incorporate WSNs. They will typically form the first mile for the sensor feeds in the sense that the data from a sensor will be first transported through a WSN to the base station, which acts as a gateway to the cloud. Thus, WSN design issues will continue to be important in federated sensor service clouds.

The Sensor web is targeted at wide area sensing, and it  utilizes the World Wide Web infrastructure for disseminating sensor data [4], [5], [10]. Projects such as IrisNet and Sen- sorWeb are among the notable efforts in this direction. These works mainly focus on system level issues such as optimiz- ing network bandwidth and energy consumption. Issues such as sensor feed discovery, sensor feed composition and inter- operability are not adequately addressed. Some researchers     ??  ?????	?  ????????  ????????	??????? ??????	?? ???	????   ????????? ??!??	?????"?#$%?  &??????? "????????  ?????  '??????? "????????  ?????   ????????	?? ?????  ??(  ?????? )???????%?	?????	#?? *? ????????  ?????	? ????????  &???	# +	??	?? ????  ??????  ,????  ??????  ?)? %?	????  ??	??? ???-???  ??	???? .??????  %?	?#??  ?)??/"'0./?? .

? ?+?   ?1??????? ???-???  ?????#?? ???-???  (??2??3? ???-???  Figure 1. High-level Architecture of Sensor Service Cloud Framework  have proposed semantic annotation of network feeds to address interoperability and integration concerns [11], [12].

However, few of these works place sufficient emphasis on DQ, which is important to IoT applications. Furthermore, to the best of our knowledge, none of these works have explored cloud-based big data techniques for storage and analytics for sensor feeds.

Data stream processing and event processing are also  related to our project. Projects such as Aurora, Borealis and Stream have studied various issues regarding data stream processing [13], [14], [15]. Our system will utilize some of these concepts and optimize them for cloud infrastructures.



III. SYSTEM ARCHITECTURE  In this section, we outline the architecture of our system.

Figure 1 shows the high-level architecture of the proposed system. Our architecture is based upon a broker-based service oriented model. Besides service orientation, our architecture is characterized by two other major features namely, virtualization of sensors and auxiliary services, and DQ-awareness. We will discuss these aspects a little later.

As shown in the left of Figure 1, our system can be  conceptualized as being comprised of three distinct layers, namely, physical resources and devices layer (bottom layer in the figure), virtualized services layers (middle layer in the figure) and domain applications (top-most layer in the figure). Each physical resource (e.g., sensors feeds, disks, computational elements) is represented as an appropriate virtual service. These virtualized services are annotated with meaningful quality parameters. For example, a server can be exposed as one or more VMs. The quality parameters will include processor speed, amount of RAM, amount of  disk-space, OS details and current load characteristics. The main advantage of this virtualization is that it will enhance transparency; applications can easily utilize resources with- out having to explicitly understand the internal details.

A unique manifestation of the above paradigm is the DQ- aware virtualization of sensor services. In other words, all sensors as well as all processed feeds (including partially and fully composed feeds) will be represented as data services.

DQ-aware virtualization will be done by enhancing each sensor feed?s meta data to include its DQ attributes (as discussed later in this section, the DQ attributes correspond to the feed?s coordinates in the novel DQ model that we propose for sensor services). DQ-aware virtualization is important because data quality essentially drives most of the operations of our sensor service cloud including sensor services discovery, composition, fault tolerance, adaptation, pricing and SLAs. It is important to note that data quality attributes of a feed are not static; they can change over time because of the dynamics of the environment (e.g., fluctuations in network bandwidth, sensor malfunctions etc.).

A key component of our architecture is the DQ-aware catalog of all sensor services. This catalog will be repeatedly queried by brokers when locating sensor feeds for serving client requests. The DQ-monitor component is responsible for continuously checking the data quality of each sensor feed. The DQ-aware adaptation and notification component is responsible for notifying clients when there is a significant change in the DQs of one or more virtual sensor feeds that are being utilized by the client. It also adapts the workflow to cope with the change, if the domain application desires so.

A. Data Quality Model for Sensor Feeds Since DQ is an important design criterion for sensor  service cloud, it is necessary to not only to study various DQ attributes that are important for sensor feeds but also come up with a powerful DQ model. Below, we provide an initial, non-exhaustive list of important DQ dimensions. Accuracy represents the closeness of reported values to the actual values. Error rate indicates the percentage of values of the stream that are erroneous (i.e., outside the accuracy range).

Frequency (temporal resolution) indicates the rate at which readings are reported in the feed. Availability indicates the percentage of time during which a sensor feed is operational (i.e., a client receives data values at specified frequency and accuracy levels). Timeliness (latency) indicates the delay between recording a data value and reporting the same to a client application. Validity (freshness) indicates the likeli- hood that values that are reported to a client application are still valid at the time of reporting. Trustworthiness indicates whether the sensor feed was collected and processed by trustworthy infrastructure.

An ideal DQ model for sensor feeds must be powerful  enough to holistically capture various quality aspects of sensor feeds and at the same time it must flexible enough to accommodate various kinds of sensor feeds. Our high- level vision is to model DQ as a temporally dynamic mul- tidimensional space. Individual DQ attributes form distinct dimensions of this model. With this model, each individual sensor feed maps to a specific point in the multidimensional space at any given point of time. On the other hand, each domain application maps to a region (sub-space) of the multidimensional space. This subspace indicates the value ranges along various DQ dimensions that are acceptable to the domain application.

B. SDQ-ML: Language for Sensor and Request Description In order to harness the full potential of a federated cloud  service it is necessary to design a markup language for describing the sensor services as well as a query language that can be used by domain applications to specify their feed requests for sensor feeds. These languages, on the one hand must be simple so that novice users can quickly learn and use them, on the other, they should also be broad and flexible enough to support advanced sensor applications. In Figure 2, for example, the student just wants a temperature stream from Athens, GA (with no restrictions on data quality), whereas the researcher requires a data stream comprising of the temperatures of all counties of Georgia at the granularity of one composite value per minute with each the accuracy range of each value being within ?2%.

Sensors Feed Description Language Since DQ is very important for sensor-service clouds, the markup language should not only be able to support description of the content of the feed but also its DQ  4??+(  /?/" ?/???/(?+"? ?/"'0./?.?+4?   ?5/(?6.? "7/  ?+.

?0+(8 ?5/(????  ?9&/8?/%&/" ?4"/  ??4?/(?  ?+.

?0+(8 ???.+4(?0/??+ ??  ?9&/8?/%&/" ?4"/ "/)4/(.98:?"????	#$%?  ?????8?;$6 ??  ?.0/(?0??  ??0((/??  Figure 2. Example Requests  characteristics. SensorML [16] is a popular system modeling language with xml encoding for describing sensor systems.

TransducerML [17] is a sensor markup language commonly used for recording sensor measurements. There are multiple declarative languages for specific domains such as WaterML (for hydrological observation) [18] and GroundwaterML.

However, these languages do not have certain key capa- bilities that are needed for our federated sensor services framework. Foremost among them is providing adequate support for DQ.

We are designing a XML-based markup language for  virtualizing sensors. This language will allow for accu- rate metric annotation, and DQ-aware sensor virtualization.

Recording the inter-workings of this DQ centric architecture is necessary for the full functioning capabilities of the sensor service cloud. While some of these language qualifiers can be borrowed from current environmental sensor-based declarative languages such as SensorML, TransducerML and WaterML, we have to develop appropriate descriptors for various DQ attributes. Furthermore, the set of descriptors should be extensible in the sense that if new DQ attributes are added in the future, the language must be easily extended to support them.

Table I indicates a partial list of tags in our markup  language. We adopted elements from the existing sensor modeling language SensorML and derive the markup lan- guage SDQ-ML. The SensorML element name denotes the physical parameter reported by the feed (e.g., temperature, pressure, wind speed). The element location denotes the location (latitude, longitude, altitude ) for which the feed is reported. These derived tags are similar to analogous xml encoding in sensorML noted as (S). The tags under SDQ- ML, noted as (DQ), correspond to various DQ attributes.

Feed Request Description Language The counterpart to a sensor feed description language is a feed request description language for domain applications to express their sensor feed needs in an easy, user-friendly and     TAGS DESCRIPTION (S=SensorML element, DQ=SDQ-ML tag)  Name (S) Sensors reading types: Temp, Light, CO2, Oxygen  Location (S) Sensor GPS longitude and latitude ValidTime (S) Freshness or Likelihood values are valid  when they reach the client Latency (DQ) Delay in feed from time of request Timeliness (DQ) Delay between data value recording  and report to client Trustworthy (DQ) Feed collected and processed by se-  cure agencies Responsetime (DQ) Response time of a given mote or  group  Table I FEED DESCRIPTION TAGS  well-described manner. However, designing such a language poses several challenges. First, the language should support requests for both simple feeds (feeds from a single sensor) and composite feeds (aggregate of feeds from multiple sensors). Second, the language should be able to support specifications with respect to both content and quality of feeds. Third, the domain applications should be able to specify operators (e.g., filter, sample, etc.) that need to be ap- plied on the streams. Thus our language should combine the capabilities of traditional stream processing languages [19] with those of feed discovery languages.

We provide an example to illustrate the above challenges.

Suppose a user wants wind speed readings from the Athens area that are above 80 Mph. Furthermore, the user wants the accuracy of the readings to be within ?2% of the actual values. A careful examination of this example reveals that there are two aspects to this request. First, the user is requesting sensor services cloud to find a wind speed sensor for the Athens area with the specified accuracy range (?2%).

Second, the user wants the cloud to apply the conditional filter operator to select the only feed readings whose values are above 80 Mph. Note that traditional stream processing languages only apply the second aspect; they require users to specifically identify the feeds (through feed ids).

We are designing an XML-based request specification language that addresses both of the above issues. Our request specification language will include content and DQ-specific tags for sensor-services discovery. It will also include tags for various feed processing operators. Table II indicates a partial list of tags of our request specification language. Of these, tags 1 and 2 are content specification tags (these for specifying user needs with respect to feed contents), tags 3 through 7 are DQ tags specifications tags (used for specifying DQ requirements) and the rest are operators tags (used for specifying operators that need to be applied on the feeds).

TAGS DESCRIPTION (S=SensorML element, DQ=SDQ-ML tag)  Id (S) Sensor id LocationReq (DQ) GPS Location requested: longitude  and latitude RelativeAccuracy (S) Closeness of reported values compared  to actual values Frequency (DQ) Rate at which readings are reported in  the feed PositionErrorEstimates (S) Error Rate Percentage of values outside  of accuracy range Range (DQ) Numeric range values. By Fahrenheit  or Celsius Aggregate (DQ) Calc average, count , MIN, MAX,  SUM of range of values  Table II USER REQUEST TAGS

IV. BIG DATA TECHNIQUES FOR SENSOR SERVICE CLOUDS  In this section, we study the scalability challenges in- volved in designing major components of our sensor service cloud and analyze the efficacy and limitations of well-known big data techniques in serving as basic building blocks of sensor service clouds.

A. Scalable Services Catalog One of the key components of our sensor service cloud  framework is a DQ-aware catalog of sensor services. The catalog has to incorporate many features. First, it should support lookup queries (including range queries) on a large- set of DQ attributes. Second, it should be able to scale to large numbers of sensors. Third, the search should be highly efficient. Fourth, since sensor services are constantly subject to various kinds of environmental dynamics, the catalog should be able to efficiently reflect the DQ changes.

Distributed hash table (DHT) is an attractive option for  constructing a sensor services catalog. DHT is a well- studied paradigm for decentralized lookups [20], [21]. It stores key-value pairs and supports efficient retrieval of value corresponding to a given key. Furthermore, DHTs exhibit strong fault tolerance properties. DHT protocols partition the key space into participating nodes using some form of consistent hashing. Chord, CAN, and Pastry are some of the earliest DHT protocols. However, these early DHTs may not be very appropriate for our services catalog because most of them do not support multiple attributes and range queries.

Some DHT protocols have been specifically designed for supporting multiple attributes and range queries [21]. These are better suited for constructing services catalog.

B. Storage Strategies for Massive Sensor Feeds Our sensor service cloud framework is intended to enable  domain applications to not only access live sensor feeds but also obtain historical sensor feed data. In order to support the latter feature, it is necessary to store data from sensor feeds.

Storing continuous feeds from large numbers of sensors requires highly scalable and efficient storage and retrieval mechanisms. Traditional relational database are probably not a good choice because they are usually bulky and cannot easily scale to large numbers of sensors feeds.

Two recent big data technologies are potentially attractive  for storing historical sensor feed data, namely, NoSQL doc- ument store and key-value stores. Document stores support storage and retrieval of data that is encoded in some standard format (XML, JSON, etc.). Some of the popular document stores include MongoDB and Apache CouchDB [22]. There are two major advantages to using document stores for our purpose. First, it can hold meta-data (including content and DQ attributes) along with the data from the feed.

Second, it is possible to query on any attribute (not just the ?key?). Key-values stores (such as BigTable, Dynamo, Apache Cassandra, etc.) on the other hand provide extreme scalability [23], [24]. There are also some in-memory key- value stores such as Redis, which provide extremely fast reads and writes. However, they are not well suited for complex queries. We believe a combination of document store and key-value store may work well in practice.

C. Analytics for Sensor Feeds  Two types of analytics on sensor feeds are important for our sensor services cloud framework, namely, online (real- time) analytics on live sensor feeds and batch analytics for historical data. Two distinct big data analytics technologies are important in this regard, namely stream processing technologies (for online analytics) and map-reduce-based technologies (for batch processing).

Cloud-based Online Feed Analytics In recent years, a significant body of literature has emerged on stream analytics and event processing. Projects like Aurora, Borealis, Cayuga, Stanford Data Stream manager and System S have explored many issues associated with stream and event processing [13], [25]. While the basic concepts and approaches explored by these projects are applicable to our framework, adapting and optimizing them to globally distributed sensor cloud environments raises many fundamental challenges.

First and foremost, most of the current stream processing  systems assume that the user identifies the stream that needs to be processed and the operators that need to be applied. However, as we mentioned in Section III, the sensor service cloud framework has to discover the appropriate feeds and determine the operators to be applied on these feeds. In essence, we need to combine feed and operator discovery with feed processing. This naturally exacerbates the scalability issue. Second, the stream processing workflow has to be distributed on a global scale. Third, the infrastruc- ture is highly heterogeneous, which makes stream workflow optimization even more challenging. For example, applying  filter operators close to the stream source is a well-known technique for optimizing network bandwidth. However, in our case, the source is likely to be a resource-constrained device (e.g., wireless sensor, tablet computer, etc.), which may not be able to support stream processing operators.

Fourth, the sensor service cloud environment is highly dy- namic because of wireless connectivity and battery-powered nature of certain parts of the infrastructure. Fifth, the above- stated issues have a direct bearing on the DQ of output feeds, which is central to sensor service environments.

Our sensor feed architecture produces stream process-  ing analytics in the form of quality of service attributes.

Much like the Borealis Stream Processing engine query optimization, our DQ engine will build on-line quality metrics collected throughout the real-time process. These metrics will allow dynamic updating of sensor feeds to ensure high performance DQ. It also allows the DQ engine to fine-tune virtual sensor feeds by blending the ?best- match? sensor combinations. Continuous query optimization is another powerful feature for maintaining useful metrics on user queries. This process will produce statistics used to determine the most optimal feed matches to each users query. Query metrics such as freshness, accuracy and timeli- ness will be utilized to determine the most optimal feeds for the virtual sensors. Ad-hoc query features will use historical statistics to optimize each user query.

Scalable Batch Analytics Map-reduce and associated technologies are attractive can- didates for batch analytics on historical sensor data [26].

However, analogous to current stream processors, map- reduce requires user to specify the data sources (usually in the form of flat files). Furthermore, map-reduce requires the user to provide the analytics logic in terms of mapper and reducer codes. However, we do not want to burden the end- users with the task of providing mapper and reducer codes.

One possible approach in this regard is to design a  translator that generates mapper and reducer codes from the feed request (expressed in the declarative language described in Section III. Recently, a few translators have been designed for generating mapper and reducer codes from SQL or SQL- like queries. These include systems like Pig/Pig-Latin and YSmart [27]. However, note that in our system, the user requirements are not available in SQL/SQL-like languages.

Rather, they are described in the XML-based request feed request specification language. To address this issue, our system will maintain mapper and reducer code skeletons corresponding to various code skeletons. When a request arrives, it is parsed to extract the operators. The code skeletons will be used to generate the actual mapper and reducer codes by instantiating them with the DQ parameters specified in the request. The optimality of the generated mapper and reducer codes remains an open problem. This can only be answered through extensive experimentation.



V. CONCLUSION AND FUTURE PLANS  The Internet of Things, which includes wide-area sensor systems will be a major contributor to the data generated on the planet. All the three major big data tasks, namely, big data collection, big data management and big-data analytics acquire new dimensions in IoT environments because of the importance of data quality to sensor-based applications.

This paper outlined our vision for a cloud-based federated framework for sensor services. Our main objective is to enable seamless sharing or even trading of feeds from large numbers of heterogeneous sensors.

Towards this end, we discussed the design requirements  of a sensor service cloud. This paper proposed a cloud- based big data architecture for supporting sensor services.

A key aspect of our architecture is that DQ is a first-class design artifact that is pervasive throughout the framework.

We presented a unique DQ-enabled XML-based markup language for not only annotating sensor feeds but also for do- main applications to specify their sensor feed requirements.

Furthermore, this paper presents a detailed analysis of the benefits and limitations of well-known big data techniques such as Map-Reduce, BigTable and MongoDB in addressing the challenges involved in building sensor service clouds.

The work reported in the paper forms the foundation  of our ongoing project. As a part of this project, we will build algorithms and techniques for DQ-aware sensor feed discovery and DQ-aware sensor service composition.

Another aspect of our ongoing work includes autonomic techniques for handling sensor failures and adapting to other environmental dynamics. Finally, pricing models are important for sensor data market settings where the sensor feeds are traded rather than shared. We will investigate DQ- centric pricing models as a part of our future work.

