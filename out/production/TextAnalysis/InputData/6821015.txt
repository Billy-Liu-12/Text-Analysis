Type based Keyword Search for Securing Big Data

Abstract?Big data is an up-to-date attractive research topic and also full of challenges. Sharing massive sensitive personal data in public cloud will arouse large-scale privacy concerns.

Data encryption is a widely accepted way to prevent information leakage. However, it is difficult for the users to retrieve desired information from encrypted big data. In this paper, we provide a novel keyword search method to enable customers easily searching keywords from encryption-protection data. Moreover, the encrypted big data could be managed by different type that was assigned by data owner. Moreover, the access right can be delegated to others according to the user?s willingness. Security and efficiency analysis are provided to prove the security and efficiency of the scheme.

Keywords?type based; keyword search; big data; proxy re- encryption

I. INTRODUCTION The era of big data has come. Big data and cloud  computing provide many business opportunities to the information technology industry and also attract a lot of attention from the research fields. Large scale applications of sensor networks, electronic health record systems, emails as well as social networks generate massive data each day. The volume of information collected and stored has exploded.

Aiming to make the most of the fast-growing volume of digital data, the Obama Administration [1] announced a ?Big Data Research and Development Initiative.? Cloud computing system process extraordinary storage capacity and computation power and is promising to handle the big data processing system with its outstanding features. However, since the cloud data service provider system are distributed to share and process sensitive information assigned to them, a malicious data stealer might probably bring about serious privacy problems [2,3].

Data encryption technology is extensively studied and also a widely accepted method to boost information privacy protection. However, traditional encryption primitives (such as symmetric key encryption and public key encryption) are not  capable to ensure the usability and hinder even authorized users from searching several keywords of encrypted files. It is necessary to explore new cryptographic primitives to provide data encryption and searchability for big data era.

Searchable encryption technology [4] could fulfill the requirements to realize operability and data confidentiality, simultaneously. Symmetric searchable encryption schemes are widely studied in [5,6]. Researchers also explore new search patterns for searchable encryption, such as fuzzy search [7], subset search [8], rank search [9] et al. The public key encryption with keyword search (PEKS) scheme was proposed by Boneh et al. [10] in order to offers the user to retrieve files through keyword searching. Consider an electronic health record system. A user sends an encrypted file m  appended with some encrypted keywords 1 2, , ,? nw w w  that are extracted from the message to the data service provider. The data are organized in the format  1( , ) || ( , ) || || ( , )?A A A nPKE pk m PEKS pk w PEKS pk w ,  in which Apk  is the public key of user. The user could generate a trapdoor that contains certain keyword iw . After receiving the trapdoor, data service provider search the encrypted files and returns all files that contain iw . Other researchers also try to extend searchable encryption scheme to multiple users [11-13].

Later, Shao et al. [14] combines proxy re-encryption technology and searchable encryption to propose a proxy re- encryption with keyword search scheme, in which a proxy is allowed to utilize re-encryption key to transform original ciphertext to a new ciphertext that can be decrypted by another user with his own private key. Yau et al. [15] present a new definition for proxy re-encryption with keyword search (Re- PEKS) scheme and give out a construction in random oracle model. However, the above proxy re-encryption related schemes have some limitations. Obtaining a re-encryption key, the proxy has the ability to re-encrypt all ciphertext. Then, the delegatee can get all the plaintext. In many scenarios, the  Identify applicable sponsor/s here. If no sponsors, delete this text box (sponsors).

DOI 10.1109/CLOUDCOM-ASIA.2013.107    DOI 10.1109/CLOUDCOM-ASIA.2013.107     delegator may only plan to delegate part of decryption right to his delegatee.

In this paper, we design a new system, in which ciphertexts are encrypted with respect to a certain type. The proxy can re- encrypt the ciphertext for another user if and only if the associated re-encryption key matches the corresponding type.

Compared with existing proxy re-encryption based searchable encryption scheme, our scheme enables the data owner to handle fine-grained delegation of decryption rights. Each delegatee is assigned decryption right related to designated type of documents. Moreover, the search function is provided to users in the scheme.

The remainder of the paper is organized as follows. In Section 2, we briefly outline the concept of bilinear map, the hardness assumption and the system model. In Section 3, we present our scheme for the type based keyword search scheme with correctness analysis. Section 4 shows the efficiency and security analysis. Section 5 concludes the paper.



II. PRELIMINARIES  A. Bilinear Group and Pairings Let G  and 1G  be two (multiplicative) cyclic groups of  prime order p  and g  be a generator of G . A bilinear map e is a map 1:e G G G? ?  with the following properties:  1) Bilinearity: for all , , , pu v G a b Z? ? , we have  ( , ) ( , )a b abe u v e u v? ; 2) Non-degeneracy: ( , ) 1e g g ? ; 3) Computability: there is an efficient algorithm to  compute  ( , )e u v   for all ,u v G? .

B. Hardness Problem We now review the definition of the Co-BDH [16] and  XDH [17] problem.

Definition 1: (Co-BDH: Co-Bilinear Diffie-Hellman problem) Given a group G  of prime order q , randomly choose generators 1 2,g g  from G . Given a tuple 21 1 1,( , ,?  a bTu g g g g  2, ) cg and 1Z G?  for unknown , , ? qa b c Z , the Co-Bilinear  Diffie-Hellman problem is to decide whether Z  equals to 1 2( , )  abce g g  or to a random element of 1G .

Definition 2: (XDH: eXternal Diffie-Hellman problem) Given a group G  of prime order q , randomly choose generator g  from G . Given a tuple ( , , )? a b cTu g g g for unknown , , qa b c Z? , the XDH problem is to decide whether c  equals to  ab  or to a random element of qZ .

C. System model We will design a secure big data storage system that  supports multiple users. In this system, authorized users are able to store encrypted data and carry out keyword queries on encrypted data without decrypting all the files. Moreover, data owners could delegate certain type of files to other users.

? Data Service Provider: Data service provider is responsible to generate global parameter for the whole system. Its main responsibility is to store user?s encrypted data, respond to user?s retrieve request and return corresponding files. Moreover, a new functionality is provided: re-encrypt second level ciphertext to first level ciphertext on behalf of delegatee.

We should point out that our scheme provides fine- grained delegation authority management. In other re- encryption based searchable encryption schemes, delegatee is capable to decrypt all files that belong to the data owner when delegation right is given. However, in this system, delegator could delegate a designated type of files to delegatee for decryption so that delegatee is only able to recover part of ciphertext of data owner.

? Delegator: Delegator is usually the data owner and can issue the keyword search query. Only data owner has the right to update the encrypted file and the encrypted keyword index. The data file could be images, documents, videos, programs, etc. In addition, delegator is responsible to generate re-encryption key for delegatee.

? Delegatee: Delegatee is responsible to generate its own private key and fulfill the delegation responsibility, i.e., to decrypt first level ciphertext on behalf of its delegator.

D. Syntax of Type based Proxy Re-encryption with Keyword Search Definition 3 (T-PRES) Type based proxy re-encryption  with keyword search scheme involves a data server, delegator and delegatee. It consists of the following algorithms.

? ( )GlobalSetup k : Run by the data server. Taking a security parameter k  as input, this algorithm generates a global parameter GP . For brevity, we assume that GP  is implicitly included in the input of the rest algorithms.

? ( ) iR  KeyGen GP : Run by a delegator iR . Taking GP  as input, this algorithm generates a public and private key pair ( , )  i iR R pk sk  for iR .

? ( ) jR  KeyGen GP : Run by a delegatee jR . Taking GP  as input, this algorithm generates a public and private key pair ( , )  j jR R pk sk  for jR .

? 2 ( , , , )iREncrypt m pk t w : Run by the delegator iR .

Taking a message m , a public key  iR pk , a type string t ,  and a keyword w  as input, this algorithm ouputs a ciphertext iCT  and encrypted keyword index ( , )I t w under the public key  iR pk . This algorithm is a second  level encryption algorithm. It outputs a second level ciphertext, which can be converted into a first level one with an appropriate re-encryption key.

? 2 ( , , )ii RDecrypt CT sk t : Run by the delegator iR . Taking a second level ciphertext iCT , a private key iRsk  and a type string t  as input, this algorithm outputs the message m .

? 1( , )jREncrypt m pk : Run by the delegatee jR . Taking a message m , a public key  jR pk as input, this first level  encryption algorithm ouputs a first level ciphertext jCT under the public key  jR pk . The first level ciphertext  cannot be re-encrypted for another user.

? 1( , )jj RDecrypt CT sk : Run by the delegatee jR . Taking a first level ciphertext jCT , a private key jRsk  as input, this algorithm outputs the message m .

? ( , , )iTrapdoor sk t w : Run by the delegator iR . Taking as input a private key  iR sk , a type string t , and a  keyword query for w , this algorithm outputs a trapdoor ,t wT  for ( , )t w .

? ,( ( , '), )t wTest I t w T : Run by the data server. Taking as input encrypted keyword index ( , ')I t w  and a trapdoor  ,t wT  , this algorithm returns '1' if '?w w  and '0' otherwise.

? ( , , ) ji RR  ReKeyGen sk k tp : Run by the delegator iR .

Taking as input keys ,  jiR R sk pk , and a type string t ,  this algorithm outputs re-encryption key ???ti jR R  rk  for  delegatee jR .

? ( , ) ???ti j iR R  ReEnc rk CT : Run by the data server. Taking  as input re-encryption key ???ti jR R  rk and second level  ciphertext iCT , this algorithm outputs a first level ciphertext jCT  of keywords w  for delegatee jR .



III. PROPOSED SCHEME  A. Our Construction Inspired by Tang?s [18] scheme, we design a type based  proxy re-encryption scheme with keyword search.

? ( )GlobalSetup k : Let k  be the security parameter.

Randomly choose generator 1g  of group G  and 2g  of group 1G . Choose two hash functions  * 1 :{0,1} ?H  * 2 2, :{0,1} {0,1}?  lG H , where l  is a polynomial in k and {0,1}l  is the plaintext space. The global parameter is 1 2( , )?GP g g .

? ( ) iR  KeyGen GP : Randomly choose *? pu Z , output user  iR 's public and private key pair 1 ,? ?i i u  R Rpk g sk u .

? ( ) jR  KeyGen GP : Randomly choose *? pv Z , output user  jR 's public and private key pair 2 ,? ?j j v  R Rpk g sk v .

? 2 ( , , , )iREncrypt m pk t w : The sender selects a keyword  w  and random values *? pr Z  and 1?G	 , and computes  1 1 2 2 3 1, ( ), ( , ( )) ,? ? ? ? i r r  RC g C m H C e pk H t  ? 1 2 1 1( , ) ( , ) , ( , ( , ))? ? i rRI t w I I C e pk H t w .

Then output second level ciphertext 1 2( , ,?iCT C C  3 )C  and the encrypted keyword index ( , )I t w .

? 2 ( , , )ii RDecrypt CT sk t : This algorithm computes the message m  in the following way:  2 2  1( , ( ) )  ? ? ? ? ?? ?  ? ? Risk  C m C H  e C H t .

? 1( , )jREncrypt m pk : The sender randomly selects *, ? px y Z  and 1?G? , and computes  0 1 1 2 2 3 1 2, , ( ), ( , )? ? ? ? ?j x y x y  RC g C pk C m H C e g g? ? .

Then output first level ciphertext 0 1 2( , , ,?jCT C C C  3 )C  under the public key jRpk .

? 1( , )jj RDecrypt CT sk : This algorithm computes the message m  in the following way:   2 2  0 1( , ) ?  ? ? ? ??  ? ? ? ?  R jsk  C m C H  e C C .

? ( , , )iTrapdoor sk t w : Randomly choose *? pZ?  and  outputs trapdoor , 1 2( , )?t wT T T  for type t  and keyword  w , where 1 2, ( , ) ?? ? RiskT T H t w ?? .

? ,( ( , '), )t wTest I t w T : After receiving encrypted keyword index ( , ')I t w  for keyword 'w  and trapdoor ,t wT  for keyword w , the data server checks whether the equation holds 11 2 2( , ) ?  Te I T I .

? ( , , ) ji RR  ReKeyGen sk k tp : Assuming the public and private key pairs of users iR  and jR  are  1 2( , ) ( , ), ( , ) ( , )? ?i i j j u v  R R R Rpk sk g u pk sk g v , respectively.

Randomly choose *? ps Z , this algorithm outputs the re- encryption key 1 2( , )??? ?ti jR Rrk rk rk , where  1 2 2( ) , ( ) ?  ? ? ? Ri j  sks s Rrk pk rk g H t .

? ,( , )???ti j i WR RReEnc rk C : Given a second level  ciphertext iCT  for delegator iR , data server utilizes the re-encryption key  ???ti jR R rk  to transform iCT  to a first  level ciphertext jCT  for delegatee jR . Choose a random *? pz Z . Given 1( ,?iCT C 2 3, )C C , the new ciphertext 0 1 2 3( ', ', ', ')?jCT C C C C  is constructed as follows  0 1 1  3 1 2 2  1 2 2   ' , ' ( ) , '  ( , ).

,  '  ? ? ? ?  ? ?? j  z  z R  C  C C C rk pk C C  e rkC C g  B. Correctness ? Correctness of 1( , , )ii RDecrypt CT sk t :  ?  ?  ?  ?      2 2     1 1  2 2   ( , ( ) )  ( , ( ) )  ( , ( )) ( )  ( , ( )) ( )  ( , ( )) ( )  ( ) (  ( , ( ) )  ( , ( ))  )  ?  ?  ? ?  ? ?? ?  ? ? ? ?  ? ? ?? ? ? ? ? ?  ? ? ? ? ? ? ?  ? ? ? ?  ?    ?    ?     ?  ?    ?     i  Ri  Ri  r R  r  r  r  u r  u  sk  sk  u  r  u  e pk H t m H  g  e  C C H  e C H t  H e H t  gH H tm H g  e H tm H g  m H  e H  m  t  gH e H t  H             ? Correctness of 2 ( , )jj RDecrypt CT sk :  ?  ?  ?     1 2   1 2  2 2  0 1    1 2  1 2  1 2  ( , ) ( )  ( , ) (  ( , )  ( , )  ( , )  (  )  ( , ) ,  ( ) )  ?  ?  ??  ? ? ? ?  ? ? ? ?  ? ? ? ?? ? ?? ? ? ? ? ? ? ?  ?    ? ?   ? ? ? ? ? ?  ?     ?  ?   ? ?  ? ?  R j  R  R R j  j  j  j  s  x y  x y R  x y  s yx  k  sk  k sk  x  y  y  x  C C H  e C C  H e  H e  H  e g gm H g pk  e g gm H g g  e g gm H e g  m g  ? ?  ? ?  ? ?  ? Correctness of ,( ( , '), )t wTest I t w T :  ?  11 2 1 1 1 2( , ) ( , ( , ) ) ( , ( , ))?? ? ? Tr u u re I T e g H t w e g H t w I ??  ? Correctness of ,( , )???ti j i WR RReEnc rk C :  0 1  1 1  ( )  2 2    3 1 2 2  1 1 2 2  1 1 1 2 ( )  1 1   1 2   ( ),  ( , )  ( , ( )) ( , )  ( , ( )) ( , )  ( , (  ' ,  ' ( ) ( ) ( )  ( ) ,  '  '  ( )  ()) ( , ))?  ?  ?  ?     ? ?  ? ? ? ?  ? ? ? ?  ? ? ?  ? ?  ? ? ? ?  ?  ? ?  ?  ?  ?  ?  ?  j j j  i  j  r  z  r z R  u r r z  u r r s  z s z R R R  s z R  s u  uz  g  m H C e C g rk  e pk H  C C  C rk pk pk pk  pk  C C C  g H t  t e C g rk  e g H t e g g e g H g Hg tt e          ( )1 1 1 1 2 ( )  1 2  ( , ( )) ( , ) ( , )  ( ,  )  )  ( ?  ?  ?? ?  ? ?  u r r r s z  r s z  ue g H t e g e e g g  H t g g   In the above construction, r  and ?s z  are deemed as x  and y , respectively.



IV. SECURITY AND EFFICIENCY ANALYSIS  A. Security Analysis In this subsection, we discuss our type based keyword  search for encrypted data from the following security requirements: data confidentiality, query privacy and query unforgeability. We assume that users? private keys are kept secret.

? Data confidentiality: The meanings of information confidentiality in our scheme are three fold. Both the first level and second level ciphertexts should be protected from both data service provider and malicious eavesdropper. Moreover, the curious data server and malicious adversary could not obtain any information about keyword from the encrypted index of keywords.

A. In our system, the second level ciphertext and index of keywords are enciphered before uploading to the data service provider through algorithm  2 ( , , , )iREncrypt m pk t w . The ciphertext consists of the following elements:  1 1 2 2 3 1, ( ), ( , ( )) .i r r  RC g C m H C e pk H t	 	? ? ? ?  Since data owner?s private key is kept secret, the data server could not get any information about the plaintext through illegal decryption operation without private key. The element *? pr Z  is chosen randomly to resist replay attack.

B. The discussion on security of first level ciphertext should be divided to two situations by generation method: directly encrypted from plaintext and re-encryption from second level ciphertext.

1) If the ciphertext is directly encrypted through user?s public key from plaintext, the information will not be recovered to both data server and malicious attacker unless user?s private key is leaked.

2) If the ciphertext is re-encrypted through re- encryption key from second level ciphertext, the re- encryption process is handled by data server. In this scheme, the input of re-encryption algorithm ReEnc contains two parameters: re-encryption key t  i jR R rk  ???  and second level ciphertext ,i WC .  As is discussed in point A, we can see that ,i WC  will not leak any information about plaintext. The data server also could not recover user?s private key from re-encryption key  ? 1 2 2( , ) ( ) , ( ) Rit ji j sks sRR Rrk rk rk pk g H t ???? ? ? ?  due to the well known hardness of DLP (discrete logarithm problem).

C. The index of keywords are enciphered by 2 ( , , , )iREncrypt m pk t w  under type t . The keyword  w is transformed to encrypted format  ? 1 2 1 1( , ) ( , ) , ( , ( , ))? ? i rRI t w I I C e pk H t w .

The encrypted index ( , )I t w  is protected by random  element r  and the public key cryptography system. It will not leak any information about w  without user?s private key.

According to the above discussions, it is shown that both security of first and second level ciphertext and index of keywords are ensured by different encryption algorithms.

? Query privacy: The meaning of query privacy here indicates that the protection of personal information of users and information which may be recovered by malicious party from the keyword retrieve phase. In the keyword retrieval process, the user firstly generates a trapdoor for the keyword and sends it to the data server.

Test algorithm ,( ( , '), )t wTest I t w T  is run by data server to look for the matching files that contain keyword w .

In the whole process, curious data server could not get any privacy information about keyword w .

? Query unforgeability: In this system, an individual private key is utilized to encrypt keywords by each user.

Various keyword trapdoor queries , 1 2( , )t wT T T?  ? , ( , ) RiskH t w ?? ??  generated by different users?s secret keys  iR sk  are distinctive. In multi-user big data system,  no user can create a spurious trapdoor query on behalf of another illegal user. Thus, the query unforgeability is offered in this system.

B. Efficiency Analysis In this subsection, we discuss the computation overhead  and storage cost to analyze the efficiency of our scheme. In the key generation phase, only one exponential operation is required to create user?s public and private key pair. In the encryption algorithm for first and second level ciphertext, the main computation is simply two exponentiation computations and a pairing computation. In the decryption phase, the main overhead is only one pairing operation. In the keyword query algorithm, no pairing operation is required. In the test algorithm, one exponentiation and one pairing computation is required to retrieve files that contain certain keyword.



V. CONCLUSION In this paper, we construct a type based searchable  encryption scheme to secure big data, which also allows re- encryption function. The plaintexts are generated with respect to a certain type. The security analysis shows that our scheme could provide data confidentiality, query privacy as well as query unforgeability.

