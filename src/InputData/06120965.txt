Detection DoS Attack on FPGA Using Fuzzy

Abstract?This paper proposes a programmable embedded system based on data mining and fuzzy logic to determine Denial of Service (DoS) attacks in real time. The proposed system detects the DoS attacks to a web service.  The system consists of two phases.  At the first phase, the number of terminated connection and the number of connection request statistics and so on have been extracted from packet. These obtained features constitute training data. Each record in training data was obtained with 2 sec intervals from network traffic. Then Fuzzy classification rules have been obtained from training data by data mining and fuzzy logic. At the second phase, DoS attacks have been detected using these rules in real time for testing purpose.

The proposed system has been tested on Altera Cyclone III EPC3C40F484C7 in the FPGA environment.

Keywords; SOPC, Embedded System, DoS Attack, Fuzzy  Classification Rules

I.  INTRODUCTION  The attack politics has showing a fasting change as proportional with the growing of computer network and Internet. So, it may not always be possible to detect the attack.

In network security, Intrusion Detection Systems (IDS) are very important to detect the attack done to system and to perform the serving of system with minimum damage.  IDSs are software and hardware based systems that learns training data and detects the attack. Intrusion detection can be categorized into signature detection and anomaly detection.

Normal behaviour of system is modeled in the anomaly detection system.  Deviations from this model is considered as attack.  The main advantage of anomaly detection is that it does not require prior knowledge of intrusion and can thus detect new intrusions. The main disadvantage is that it may not be able to describe what an attack is and may have high false positive rate. Signature detection recognizes an intrusion based on known intrusions or attack characteristics or signatures. The main advantage of signature detection paradigm is that it can accurately and efficiently detect instances of known attacks.

The main disadvantage is that it lacks the ability to detect the newly. Attacks are generally classified as DoS, Probe, User-to- Root (U2R) and Remote-to-Local (R2L). In order to detect these kind of attacks,  machine learning algorithms such as fuzzy logic, decision tree, neural network are used[1,2,3].

Using by one or several of these algorithms was developed hybrid intrusion detections[4].

IDSs detect using some features in the packet header such as port number, flags.  A model or rules set are obtained using the training data generated with this feature. Intrusion Detection System detects the attacks with respect to these rules or the model.

To obtain the rules which will use in signature based intrusion detection  systems, the most  widely approach is association rule discovery[5]. Standard appriori algorithm is employed to extract the association rules from network traffic[6,7]. The main task of association rule discovery is to extract frequent itemsets from data and to generate association rules from these frequent itemsets. An association rule r is an implication of the form X?Y, where X and Y are two disjoint itemsets. The association rules framework provides two useful measures for evaluating the association expressed by a rule[8].

The confidence of a rule measures the degree of the correlation among itemset, while the support of a rule measures the significance of the correlation itemset. These terms are defined as conditional probability in the following.

Support (X?Y)=prob(XUY)  Confidence (X?Y)=prob(Y|X)  It is possible to describe the attack behavior with fuzzy classification rules by analyzing the network traffic. These fuzzy classification rules can be obtained using appriori algorithm and fuzzy logic [8,10,11].

A Field-programmable Gate Array (FPGA) is an integrated circuit designed to be configured by the customer or designer after manufacturing. FPGAs have the ability to do parallel processing and   provide flexibility during the design. Using an FPGA platform for realizing the embedded system is one of the appropriate solutions. Therefore, using a FPGA for classifying the packets in high-speed networks is a good solution for realizing hardware based IDSs.

A programmable embedded system has been proposed to detect DoS attacks in real time by fuzzy classification rules.

The system has designed so as to evaluate the captured packets and then to transmit them to the network again. The advantage  2011 International Joint Conference of IEEE TrustCom-11/IEEE ICESS-11/FCST-11  DOI 10.1109/TrustCom.2011.171     of the system is to give an opportunity to be able to change the extracted rules and the algorithms used for the intrusion detection system.

The rest of the paper is organized as follows. Section 2 presents an overview of the architecture of our implemented system. Section 3 presents a brief definition association rules.

Section 4 introduces how to obtain classification rules. In section 5, we give an overview of testing and evaluation of the proposed system. Lastly Section 6 summarizes our contributions and concludes the work.



II. THE PROPOSED SYSTEM  DoS attacks are currently the most common attacks.  The aim of the DoS attacks is to consume network bandwidth or to prevent providing services in the network. DoS attacks are an attempt to make a computer resource unavailable to its intended users.

In this paper a programmable embedded system has been proposed to detect the DoS attacks to port 80. Packet statistics and some properties in the packet header, such as IP number and packet size play an important role in the determination of DoS attacks as SYN flooding and smurf. The packet statisticals used for the detection of the attacks are as shown Table.1. It is possible to increase the number of features for more accurate detection of attacks.

TABLE.1 ATTRIBUTES OF A PACKET  Attribute Definition  #SYN The number of incoming connection request to port 80  #FIN The number of terminated connection for port 80  #Count The number of incoming connection from same IP address  #RST The number of termination of abnormal connection  request  #Packet The incoming  total packet number to Port 80    DoS attack detection consists of two phases as shown Figure.1.

The aim at the first phase is to obtain fuzzy classification rules from training data. For this purpose, first, packet and segment headers are obtained capturing the flowing frames from network. Then, Training data from these packet and segment headers were created according to given statistics in Table.1. Next, each record in training data was obtained with time intervals of 2 sec. The generated training data consist of the normal and DoS attack classes.  Finally, Fuzzy classification rules from this training data were extracted by using data mining and fuzzy logic. How to extract the fuzzy classification rules will be discussed in the Section 4.

The second phase of the system consists of the test phase.

The fuzzy classification rules obtained at the first phase have been installed to program memory of embedded system.

Observing the network traffic in every two second in real time, at the begining the frames have been captured, then packet and segment headers have been obtained from these frames, and at the last step the records have been created according to Table.1 each record has been compared with fuzzy association rules in  real time. In the result of the comparison has been determined whether DoS attack occured or not.

Figure 1.  a) Training phase b) Test phase  In order to detect DoS attack in real time we have proposed a programmable embedded hardware or SOPC (System on Programmable Chip) system shown in Figure.2[1]. The system contains processor, On-Chip Memory, Direct Memory Access, Timer and 10/100 Ethernet IP MAC Core. These cores can be exactly implemented using Very High Speed Integrated Circuit Hardware Description Language (VHDL) or Verilog in FPGA.

The system can receive and  transmit the frames in real time.

So 10/100 Ethernet IP MAC Core has been added to the system.  A DMA controller has been added to system for receiving and transmitting frames fastly. In order words, DMA controller core has been added to perform data transfers between 10/100 Ethernet IP MAC Core?s FIFOs and On-Chip Memory address-space.

The processor used in the system has RISC arthitecture which is 32 bits Altera?s Nios soft processor. The Nios processor has been programmed to perform the following tasks.

? To check DMA core and to receive/transmit frames with 10/100 Ethernet IP MAC Core.

? To obtain packet and segment headers from frames  ? To obtain packet statistics  ? To detect DoS attack by using fuzzy classification rules.

Figure 2.  The Proposed system  In order to be able to receive or to transmit frames according to the IEEE 802.3 frame format, 10/100 Ethernet IP MAC Core has been added to the implemented system.

General features of the 10/100 Ethernet IP MAC Core are as follows[12].

? Implements the full 802.3 specification with preamble / SFD generation, frame padding generation, CRC generation and checking on transmit and receive respectively.

? Supports, for 10/100Mbps operation, full and half-duplex  ? Dynamically configurable to support 10Mbps, 100Mbps or Gigabit operation  ? In half-duplex mode, provides full collision support, including jamming, backoff, and automatic retransmission  ? Avalon System Interface with separate slave ports for data and control.

? Avalon data path ports with full streaming support allowing efficient DMA transactions.

? Supports Unicast, Multicast and Broadcast Ethernet frames.

All the cores in the system are SOPC Builder-ready and integrate easily into Altera SOPC Builder-generated system.

The MAC core offers two independent Avalon Slave  Interfaces, which support streaming transfers to and from the FIFOs. A DMA Controller should be connected between the MAC and Memory to use DMA copy operations instead of program loops for frame receive and transmit operations. The following system bus connections for the MAC are necessary:  ? The MAC receive FIFO (rxFIFO) connects to the DMA read master.

? The MAC transmit FIFO (txFIFO) connects to the DMA write master.

? The MAC control port (control_port) connects to the CPU data master.

The system has been built with SOPC builder as in the Figure.3 and has been uploaded to the FPGA. Furthermore, Figure.3 shows clock settings, interrupt and addresses.

After this, the processor should be programmed in any high-level language. For this reason, The system has been programmed in C language for determining DoS attacks. For example, Algorithm.1 is frame receiving function. In the function, first, DMA?s registers have been configured. Next, Frame has been copied to memory from the rxFIFO using the DMA. Finally, DMA has been released.

Figure 3.  Connection of the system on SOPC Builder environment[1]  Algorithm.1 Frame Receiving Function  int mac_sRxRead (mtip_mac_trans_info *mi, int *dest, int length){ while ( (IORD_ALTERA_AVALON_DMA_STATUS (base) & ALTERA_AVALON_DMA_STATUS_BUSY_MSK)){ if(timeout++ == 1000000) return -1; } IOWR_ALTERA_AVALON_DMA_CONTROL (base, 0);  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);  IOWR_ALTERA_AVALON_DMA_RADDRESS (base, (alt_u32) mi->rxFIFO);  IOWR_ALTERA_AVALON_DMA_WADDRESS (base, (alt_u32) dest);  IOWR_ALTERA_AVALON_DMA_LENGTH (base, (length+3) & 0xfffc );  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_WORD_MSK |  ALTERA_AVALON_DMA_CONTROL_GO_MSK   | ALTERA_AVALON_DMA_CONTROL_RCON_MSK |  ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);  cmd = IORD(&mi->mac->RX_CMD_STAT,0) | mmac_rcs_READ_CMD_mask; IOWR(&mi->mac->RX_CMD_STAT,0, cmd );  while (IORD_ALTERA_AVALON_DMA_STATUS (base) & ALTERA_AVALON_DMA_STATUS_BUSY_MSK); IOWR_ALTERA_AVALON_DMA_CONTROL (base, 0);  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);  return 0; }

III. ASSOCIATION RULES  Association rule induction is one of the most well-known approaches in data mining techniques. This technique was initially applied to the so-called market basket analysis, which aims at finding regularities in shopping behavior of customers of supermarkets. In particular, these kinds of rules, which are called Boolean association rules, try to identify sets of products (items) that are frequently bought together in a transaction. A discovered rule can tell, for example, people who buy butter and milk will also buy bread.

Agrawal and Srikant [9] defined an association rule using the following notation: database T is a collection of n transactions, {T1,T2, . . ., Tn} and I is the set of all items, {i1, i2, . . ., im}, where each of the transactions Tj(1 ? j ? n) in the  database T represents a set of items (Tj ? I). An itemset is defined as a non-empty subset of I. An association rule can be  represented as: X?Y(c, s), where X ?  I, Y ?  I and X ?  Y =?. In this association rule, s is called support and c is confidence of the association rule. The support is the percentage of the transactions in which both X and Y appear in the same transaction and the confidence is the ratio of the number of transactions that contain both X and Y to the number of transactions that contain only. Support and confidence terms denote respectively usability and accuracy of a rule.



IV. FUZZY CLASSIFICATION RULES  Appriori algorithm is used to extract Boolean association rules. One of the methods proposed to obtain fuzzy classification rules is Kuok?s[10].

Let us assume that we have training patterns  { }pnpp xxx ,...,1= , p=1,2,?,m from M classes where xp is an n- dimensional vector of attributes in which xpi is the i-th attribute value of the p-th training pattern (i=1,2,?,n). We use fuzzy ?if then? rules of the following form for our n-dimensional pattern classification problem:  Rule Rq: if x1 is Aq1 and ?and xn is Aqn then class Cq          (1)  where Rq is the label of the q-th if-then rule, X(x1,?xn) is n- dimensional vector of a pattern Aqi is an antecedent fuzzy set, Cq is a class label.

In the area of data mining, two measures called confidence and support have often been used for evaluating association rules[9]. Let T be the set of the m training  patterns { }pnpp xxx ,...,1= , p=1,2,..m in our pattern classification problem. Thus the cardinality of T is m. The confidence of a rule is defined as follows[9]:  ( ) ( ) ( ) ( )qqqqq ATCTATCAc ?=?           (2)  where ( )qAT  is the number of training patterns that are compatible with the antecedent Aq , and ( ) ( )qq CTAT ? is the number of training patterns that are compatible with both the antecedent Aq and the consequent Cq. The confidence c  indicates the grade of the validity of qq CA ? . In the case of  standard association rules in data mining, both the antecedent Aq and the consequent Cq are not fuzzy. Thus the calculations  of ( )qAT  and can be performed by simply counting compatible training patterns. On the other hand, each training pattern has a  different compatibility grade ( )pA xq?  with the antecedent Aq when qq CA ? is a fuzzy if-then rule. Thus such a  compatibility grade should be taken into account. Since the consequent Cq is not fuzzy the confidence in (2) can be rewritten as follows[10].

( ) ( ) ( )?? =?  =?  m  p  pApA xx qq 1C Class p  qq  q  CAc ??                  (3)  The compatibility grade ( )pA xq?  is usually defined by the minimum operator or the product operator.

The support of qq CA ? rule is defined as follows[9]:  ( ) ( ) ( ) TCTATCAs qqqq ?=?                          (4)  The support s indicates the grade of the coverage by  qq CA ? . Support value can be defined with fuzzy expression  as in the eq.5 [10].

( ) ( ) mx pAq? ?  =?  qC Class p  qq CAs ?            (5)  How to extract fuzzy classification rules by using in the table.2 data has been explained in below. There are four records in total in the Table.2 Each record consists of  { }Packet#Count,#RST,#FIN,#SYN,#  attributes. Each attribute is expressed with few fuzzy memberships. For example, If #SYN attribute has high, middle and low fuzzy memberships,  it is demonstrated with { }Low Medium, High,F syn# = . Figure.4 shows fuzzy membership function for this attribute.

Figure 4.  Fuzzy membership function for #syn attribute  TABLE.2 AN EXAMPLE DATABASE  #SYN #FIN #Count #RST #Packet Class  8 3 1 0 10 DoS  4 8 4 4 4 DoS  9 7 7 9 10 DoS  5 5 6 8 7 DoS    Table.3 shows how to obtain of fuzzy classification rules from  table.2 for s=0.3 and c=1     TABLE 3 THE PROCEDURE OF OBTAINING FUZZY CLASSIFICATION RULES  #SYN #FIN #Count #RST #Packet  L M H L M H L M H L M H L M H  0 .4 .6 .4 .6 0 .8 .2 0 1 0 0 0 0 1  .2 .8 0 0 .4 .6 .2 .8 0 .2 .8 0 .2 .8 0  0 .2 .8 0 .6 .4 0 .6 .4 0 .2 .8 0 0 1  0 1 0 0 1 0 0 .8 .2 0 .4 .6 0 .6 .4  2.4   2.6   2.4       2.4  ?temsets: #SYN(M), FIN(M), Count(M), Packet(H)  #SYN(M)  #FIN(M)  #SYN(M)  #Count(M)  #FIN(M)  #Count(M)  #FIN(M)  #Packet(H) .4 .2 .2 .6  .4 .8 .4 0  .2 .2 .6 .6  1 .8 .8 .4  2 2 2 1.6  Itemsets: #SYN(M) #FIN(M), #SYN(M)# Count(M), #FIN(M) #Count(M), #FIN(M)#Packet(H)  #SYN(M) #FIN(M) #Count(M)  .2  .4  .2  .8  1.6   These rules are as follows.

? #SYN(M) and #FIN(M) and #Count(M) ?DoS Attack  ? #FIN(M) and Packet(H)?DoS Attack

V. TESTS AND RESULTS  The system has been built in the FPGA as hardware, and it has tested in the Altera?s Cyclone III EP3C40F484C7N platform and software environment. To test the system in real time, the training data has been first created. Training data consist of connection request packets and data packets. The total number of packet is 3157 in the training data. Training data have two classes. Each record belong to either DoS attack class or Normal class. There are total of 115 DoS attacks record in the training data. Figure.5 denotes a part of training data which have been created using Colasoft Packet Builder.

Figure 5.  Training packets  Table.4 gives fuzzy classification rules for s=0.3 and c=1.

In total, 13 rules have been obtained from training data. Then, these rules have been uploaded based on FPGA board. Thus, These 13 rules control whether to occur an attack to the system or not in real time. Using these rules, all of the attacks in the training data have been identified as correct.

TABLE.4 FUZZY CLASSIFICATION RULES  1. #SYN(M) and #FIN(L) ?DoS 2. #SYN(M) and #Count(M) ? DoS 3. #Count(M) and #Packet(M) ? DoS 4. #FIN(M) and  #Packet(M) ? DoS 5. #Packet(H) ? DoS 6. #SYN(H)? DoS 7. #Count(L) ? DoS 8. #RST(H) ? DoS 9.#FIN(L)  and  #Count(M) ? DoS 10. #FIN(L) and #Packet(M) ? DoS 11. #FIN(M) and Count(M) ? DoS 12. #Count(M) and RST(M) ?DoS 13. #SYN(M) and #Packet(M) ?DoS   2000 packets was used in test stage. These packets have  been transmitted continuously to the system. Figure.6 shows a packet received in real time, statistical values in termination of 2 sec. and whether to occur an attack or not. The system has detected total 58 DoS attack.

Figure 6.  Generated  a result  The DoS attack variation obtained at the end of the test stage is as shown in the figure.7.

Figure 7.  Generated alarms

VI. CONCLUSIONS  The system has provided the possibility to update both hardware and classification rules because the system has flexible structure. Furthermore, the system allows to add, to delete and to update the new rules. In addition the system can be developed to detect not only DoS attack but also the other attacks such as Probe. For this purpose, the various features should be taken from packet and segment structures. Then, uploading the fuzzy rules extracted according to these new features is sufficient. The frames in both training and test data have been captured in real time and DoS attacks have been detected the attacks in terms of fuzzy classification rules.

ACKNOWLEDGEMENT  This work was supported by the TUBITAK (The Scientific and Technological Research Council of Turkey) under Grant No: 108E166.

