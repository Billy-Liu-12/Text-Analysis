Maintenance of Generalized Association Rules  with Multiple Minimum Supports

Abstract Mining generalized association rules between items in the presence of the taxonomy has been recognized as an important model in data mining. Earlier work on generalized association rules confined the minimum supports to be uniformly specified for all items or items within the same taxonomy level. This constraint would restrain an expert to discover some more inter- esting but much less supported association rules. In our previous work, we have addressed this problem and proposed two algorithms, MMS-Cumulate and MMSStratify. In this paper, we examined the problem of maintaining the discovered multi-support, general- ized association rules when new transactions are added into the original database. We proposed an algorithm MMS-UP. Empirical evaluation showed that MMS-UP is 2-6 times faster than running MMS-Cumulate or MMS-Stratify on the updated da- tabase afresh.

Keywords: Data mining, generalized association rules, maintenance, multiple minimum supports, and taxon- omy  1. Introduction Mining association rules from a large database of busi- ness data, such as transaction records, has been a hot topic within the area of data mining [1][2][10][13].

This problem is originally motivated by applications known as market basket analysis to find relationships between items purchased by customers, that is, what kinds of products tend to be purchased together. For example, an association rule,  Desktop Ink-jet (Support=30%, Confidence=60%),  says that 30% (support) of customers purchase both Desktop PC and Ink-jet printer together, and 60% (confidence) of customers who purchase Desktop PC also purchase Ink-jet printer. Such information is use- ful in many aspects of market management, such as store layout planning, target marketing, understanding customer?s behavior, etc.

cbc@isu.edu.tw  In many applications, there are taxonomies (hierar- chies), explicitly or implicitly, over the items. In some applications, it may be more useful to find associations at different levels of the taxonomy than only at the primitive concept level [6][ 141. For example, consider Figure 1, the taxonomy of items from which the previ- ous association rule derived.

Printer Scanner / \  Non-impact Dot-matrix Desktop Notebook  Laser Ink-jet I/\  Figure 1. An example taxonomy T.

It is likely to happen that the association rule  Desktop 3 Ink-jet (Support=30%, Confidence=60%)  does not hold when the minimum support is set as 40%, but the following association rule may be valid,  PC a Printer.

Besides, note that in reality the frequencies of items are not uniform. Some items occur very frequently in the transactions while others rarely appear. In this case, a uniform minimum support assumption would hinder the discovery of some deviations or exceptions that are more interesting but much less supported than general trends.

To meet the mentioned situations, we have investigated the problem of mining generalized association rules across different levels of the taxonomy with non- uniform minimum supports. We proposed two efficient algorithms, called MMS-Cumulate and MMSStratify [16], which not only can discover associations that span different hierarchy levels but also have high po- tential to produce rare but informative item rules.

The proposed approaches, however, are not effective to the situation for frequently update to the large source database. In this case, adopting the mining ap-  0-7803-7078-3/0U$lO.~ (C)U)ol IEEE. Page: 1294    proach tends to re-applying the whole process on the updated database to reflect correctly the most recent associations between items. This is not cost-effective and is unacceptable in general. To be more realistic and costeffective, it is better to perform the associa- tion mining algorithms to generate the initial associa- tion rules and then when update to the source database occurs, apply an incremental maintenance method to re-build the discovered rules. The challenge falls into deploying an efficient maintenance algorithm to facili- tate the whole mining process. This problem is nontriv- ial because updates may invalidate some of the discov- ered association rules, turn previous weak rules into strong ones and import new, undiscovered rules.

In this paper, we addressed the issues for developing efficient maintenance methods and proposed an algo- rithm, called the MMS-UP. Our algorithm can incre- mentally update the generalized associated rules with non-uniform support specification and is capable of effectively reducing the number of candidate sets and database re-scanning. The performance study showed that MMS-Up is 2-6 times faster than running MMS-Cumulate or MMS-Stratify on the updated da- tabase afresh.

The remaining of the paper is organized as follows. A review of related work is given in Section 2. The prob- lem of maintaining generalized association rules with multiple minimum supports is formalized in Section 3.

In Section 4, we explain the proposed algorithms for updating large itemsets with multiple minimum sup- ports. The evaluation of the proposed algorithm on IE%M synthetic data is described in Section 5.  Finally, our conclusions are stated in Section 6.

2. Related Work The problem of incremental updating association rules was first addressed by Cheung et a1 [3]. They coined the essence of updating the discovered association rules when new transaction records are added into the incremental database over time and proposed an algo- rithm called F W  (Fast Update). By making use of the discovered large itemsets, the proposed algorithm can dramatically reduce the efforts for computing the large itemsets in the updated database. In [4], they extended the model to incorporate the situations of deletion and modification, and examined further the maintenance of multi-level association rules in [5]. Since then, substantial techniques have been proposed to improve the efficient aspect of incremental updating algorithin, including the negative 'order in [ 12][ 151, the dynamic counting in [9],  time window in I1 11, and two support thresholds in [7][11] , etc.

3. Problem Statement 3.1 Mining multi-support, generalized association rules Let I= {i,, i2, -, i,,,} be a set of items and DB = { t , ,  t2, -, tn}  be a set of transactions, where each transaction ti = (ti4 A)  has a unique identifier tid and a set of items A ( A d .  We assume that the taxonomy of items, T, is available and is denoted as a directed acyclic graph on I U J, where J = Ql , j2 ,  -,jp} represents the set of gen- eralized items derived from I. An edge in T denotes an is-a relationship, that is, if there is an edge f fomj  to i, we call j  a parent (generalization) of i and i a child ofj.

For example, in Figure 1 I = {Laser printer, Ink-jet printer, Dot matrix printer, Desktop PC, Notebook, Scanner} and J = {Non-impact printer, Printer, Per- sonal computer}.

Definition 1. Given a transaction t = (tid, A) ,  we say an itemset B is in t if every item in B is in A or is an ancestor of some item in A. An itemset B has support s, denoted as s = sup(B), in the transaction set DB i fs% of transactions in DB contain B.

Definition 2. Given a set of transactions DB and a taxonomy T, a generalized association rule is an implication of the form A a B, where A ,  B c Z U J, A n B = 0, and no item in B is an ancestor of any item in A. The support of this rule, sup(A 2 B), is equal to the support of A U B. The confidence o f  the rule, conAA 3 B), is the ratio of sup(A U B )  versus s q ( A ) .

The condition in Definition 2 that no item in A is an ancestor of any item in B is essential; otherwise, a rule of the form, a ancestor@), always has 100% confi- dence and is trivial.

Definition 3. Let m(a) denote the minimum support of an item a in I w J. An itemset A = {a, ,  aZ, ..., ai}, where ai E Z u  J, is large if the support of A is larger than the lowest value of minimum support of items in A, i.e., sup(A) 2 min a, EA ms(a,).

Definition 4. A multi-support, generalized association rule A =$ B is strong i f  the support satisfies the follow- ing condition  s ~ P ( A  * B )  2 min a, E A ~ B  m s ( 4 and  conAA 3 B )  2 minconJ  Definition 5. Given a set of transactions DB, a taxon- omy T, the user-specified minimum supports for all items in T, {m(a,), ms(a2), ..., m(a,,)}, and the min- con$ the problem of mining multi-support, generalized  0-7803-7@78-3/0V$10.00 (C)U)ol IEEE Page: 12%    association rules is to find all association rules that are strong.

As founded in [I], the task of mining association rules is usually decomposed into two steps:  1. Itemset generation: find all large itemsets that have support exceeding a threshold minimum support.

Rule construction: from the set of large itemsets, construct all association rules that have a confi- dence exceeding a threshold minimum confidence.

2.

Since the solution to the second subproblem is straight- forward, the problem can be reduced to finding the set of large itemsets that satisfy the specified minimum support.

3.2 Maintaining multi-support, generalized associa- tion rules In real business applications, the database grows over time. This implies that if the updated database is proc- essed afresh, the previous discovered associations might be invalid and some undiscovered associations should be generated. That is, the discovered associa- tion rules must be updated to reflect the new circum- stance. Analogous to the associations mining, this problem can be reduced to updating the large itemsets.

Definition 6. Let DB denote the original database, db the incremental database, UD the updated database containing db and DB, i.e., UD = db + DB, T the tax- onomy of items, and LDB the set of large itemsets in DB.

The problem of updating the large itemsets with tax- onomy and multiple supports is to find  LuD = {AI supuD(A) 2 min E A  ms(uj)},  given the knowledge of DB, T, db, LDB, and SU~,(A) Q A E LDB.

4. Update of Large Itemsets for Multi-support, Generalized Association Rules  In this section, we will describe the proposed algorithm MMS-UP (stands for Multiple Minimum Support as- sociation rules Update). For discussion purpose, we first introduce the primary issues for mining multi- support, generalized association rules, and present our proposed algorithms, MMS-Cumulate and MMSStratify, for generating the large itemsets.

4.1 Mining of multi-support, generalized associa- tion rules The proposed algorithms MMS-Cumulate and MMS-Stratify follow the level-wise approach to gen- erate all large k-iternsets. First, scan the whole data-  base DB and count the occurrence of each item to gen- erate the set of all frequent 1-itemsets (&). In each subsequent step k, k 2 2, the set of large k-itemsets, Lk, is generated as follows. 1) Generate a set of candidate k-itemsets, ck+I, from Lk-1, using the apriori-gen de- scribed in [2]; 2) Scan the database DB, count the oc- curcence of each itemset in Cbl, and prune those with less support. The resulting set is Lk.

The above paradigm, however, has to be modified to incorporate taxonomy information and multiple mini- mum supports. First, note that in the presence of tax- onomy an item can be composed of items, primitive or generalized, in the taxonomy. To calculate the occur- rence of each itemset, the current scanned transaction t is extended to include the generalized items of all its composed items. Secondly, the apriori-gen procedure based on the concept of downward closure does not work for multiple support specification. For example, consider four items U ,  b, c, and d that have minimum supports specified as ms(a) = 15%, ms(b) = 20%, ms(c) = 4%, and m(d) = 6%. Clearly, a 2-itemset {a ,  b }  with 10% of support is discarded for 10% min{ms(u), ms(b)}. According to the downward closure, the 3- itemsets {a,  b, c }  and {a, b, d }  will be pruned even though their supports may be larger than m(c) and ms(d), respectively. To solve this problem, we follow the sorted closure property in [7]. First, all items within an itemset are sorted in increasing order of their minimum supports, and a sorted itemset, called frontier set, F = (aj, ai,, uj2, . . ., ai,>, is facilitated to generate the set of candidate 2-itemsets, where a, = min{m(uj)bup(a$ 2ms(aj)), ms(aj) I ms(aj,) I ms(uj2) I . .. s ms(aj,), sup(aj,) 2 ms(aj), 1 I i 5 1. For Ck, k 2 3, the candidate generation is not changed.

For details on the mining of multi-support, generalized association rules, please refer to [ 161.

4.2 Update of multi-support, generalized associa- tion rules As the pioneer work in [3] stated, the primary chal- lenge of devising effective association rules mainte- nance algorithm is how to reuse the original large item- sets and avoid the possibility of re-scanning the original database DB.

Let lDBl denote the number of transaction records in the original database DB, pbl be the number of transaction records in the incremental database d6, and I UDI be the number of transaction records in the whole updated database UD containing db and DB. For a sorted k-itemset A = (al, a,, .. ., ar) with ms(al) 5 ms(uz) 5 ... 5 ms(ak), we define its support counts in db as  0-7803-7078-3/0U$10.00 (C)u)ol IEEE. Page: 12%    A.COUntdb, in DB as A.COUntDB and in UD as A.countuD.

Note that IUD1 = Jdbl + lDBl and A.countUD = A.COUntdb + A.COUntDB. After scanning the incremental database db, we have A.countdb(A) and can proceed further according to the following conditions.

If A is a large itemset both in db and DB, i.e.,  x )DBJ, then A is a large itemset in UD. There is no need to compute if A.countuD 2 ms(al) x I UDl.

If A is a large itemset in db but not large in DB, then A is an undetermined itemset in UD. Since A.COUntDB is not available, we must re-scan DB to compute A.countUD to decide whether A is large or not in UD.

If A is not a large itemset in db but is large in DB, then a simple calculation can determine whether A is large or not in UD.

If A is not a large itemset in db nor in DB, then A is not large in UD. There is no need to compute if A.countuD2 ms(aI)xI UDl.

A.COUntdb 2 m S ( U l )  Idbl and A.COUntDB 2 mS(U1)  In the above four conditions, only condition 2 yields the essence of re-scanning the original database DB.

The process of updating the large itemsets with taxon- omy and multiple minimum supports is performed as follows. First, count all I-itemsets in db including gen- eralized items. According to the itemset counts in db and DB, create the large 1-itemsets L, using the four conditions. Create the frontier set F and use it to gen- erate candidate 2-itemsets C2. The large 2-itemset & is generated following the same procedure for L1. Finally, for k 2 3, repeat the above procedure until no large k- itemsets L k  are created, except that the candidate k- itemset Ck is generated fiom  Lemma 1. For any two itemsets A and B such that A @, sup(A) 2 sup(B), i.e., A.count 2 B.count.

Corollary 2. For any sorted k-itemset A = (al, a2, ..., ak), k 2 2, A can be pruned if A is not a large itemset in DB and there exists a subset of A, say (uj1, aj2, . . ., ajkJ, such that sup((aj,. uj2, . .., aj,.,)) -= ms(a,) in db.

From Corollary 2, any sorted k-itemset A = (a1, Q ~ ,  ..., a& with m(aJ I ms(a2) I . . . 5 ms(ak), for k 2 2, can be pruned if A is not a large itemset in DB and there exists a subset of A, say (ail, ui2, ..., a,,), such that sup((ail, ai,, ..., ait-,)) c ~ ( Q J  in db. The main steps of MMS-UP Algorithm are presented as follows: Inputs: (1) DB: the original database; (2) db: the in- cremental database; (3) ms: userdefined minimum supports; (4) T: the item taxonomy; ( 5 )  LDB = Uk LfB :  the set of all large itemsets in DB; (6) A.countDE: the support count for each itemset A in LDB.

Output: The new set of large itemsets in MI.

Steps: 1.

2.

3.

4.

5.

6.

7.

8.

Count in db the supports of all items in Tand sort items in increasing order of their ms.

Divide the items into two parts: one consists of items in Lf?and the other contains those not in  Lf? . For items in the former part, calculate items supports directly. For items in the latter part, scan DB and calculate the support counts.

Create frontier set F and L , .

Generate candidates C2 fiom F.

Divide the candidates C, into two parts: the item- sets in L y  and those not in L y  . For the itemsets not in Ly , prune them according to Corollary 2.

Scan db to calculate the support counts of all items remaining in C2. For itemsets that are in ~ycalculate  the resulting support counts in UD  directly. For any itemsets A that are not in Ly and A.countdb 1 ms(al)xldbl, scan DB to obtain  Generate L2 according to the results in Step 5.

Generate candidates C, &om Lz.

Repeat Steps 5-7 for new candidates C,until no large k-itemsets created.

A.COUntDB and the resulting A.countUD.

An example illustrated the MMS-UP algorithm is pro- vided in Appendix, where item A stands for Printer, B for Non-impact printer, C for Laser printer, D for Dot matrix printer, E for Ink-jet printer, F for Personal computer, G for Desktop PC, H for Notebook, and I for Scanner.

5. Experiments In this section, we evaluate the performance of the algorithm, MMS-UP, using the synthetic dataset gen- erated by TSM data generator [2, 141. The parameter settings are shown in Table 1. The experiments were performed on an Intel Pentium-I1 350 with 64MB RAM, running on Windows 98.

We first use the following formula [7] to generate mul- tiple minimum supports for each item U:  a x supDB (a), a x SUPDB (a) 2 1 .O (1.0, otherwise  ms(a) =  where 0.5 2 a 2 0.1 and S U ~ D B ( U )  denotes the support of item Q in the original database DB. We compared the MMS-UP algorithm with its mining counterparts, MMS Cumulate and MMS-Stratify, at various a val- ues based on 85,792 transaction records for DB and  0-7803-7078-3/Ol/$?lO~~ (C)2001 EEE. Page: 1297    Table 1. Parameter settings for synthetic data genera- tion.

rithms MMS-Cumulate and MMS-Stratify to the up- dated database afresh.

10,000 records for db. The result is depicted in Figure 2. As the figure shown, MMS-UP performs signifi- cantly better than MMS-Stratify and MMS-Cumulate; the improvement is ranging from 3 to 6 times.

0:  3?   0.5 0.4 0.3 0.2 0. I  a  Figure 2. Execution time for various a values.

We also conducted another experiment to compare the efficiency of these three algorithms under various sizes of incremental database. The minimum supports were specified to items randomly, ranging fiom 1.0% to 6.0%. Here, we adopt the ordinary case that the mini- mum support of an item a is no larger than any of its ancestors ii , i.e., ms(a) I ms( Ci ). The result is de- picted in Figure 3. Again, MMS-UP outperforms MMS-Stratify and MMS-Cumulate both in execution time and scalability.

6. Conclusions We have investigated in this paper the problem of maintaining association rules in the presence of taxon- omy and multiple minimum supports. We presented the algorithm, MMS-UP, for maintaining multi- support, generalized Iyge itemsets. Empirical evalua- tion showed that the algorithm is very effective and have good linear scale-up characteristic, compared with applying our previous proposed mining algo-  I 4nnn 4nnn . - - -  3000 03 h  s 2000  0 I 2  Number of Incremental Transactions x 10,000 I  Figure 3. Execution time for various sizes of incre- mental transactions.

