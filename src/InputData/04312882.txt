Frequent Pattern Mining using Bipartite Graph

Abstract   In this paper, we propose an efficient ALIB algorithm that can find frequent patterns by only onetime database scan. Frequent patterns are found without generation of candidate sets using LIB-graph.

LIB-graph is generated simultaneously when the database is scanned for 1-frequent items generation.

LIB-graph represents the relation between 1-frequent items and transactions including the 1-frequent items.

That is, LIB-graph compresses database information into a much smaller data structure. We can quickly find frequent patterns because the proposed method conducts only onetime database scan and avoids the generation of candidate sets. Our performance study shows that the ALIB algorithm is efficient for mining frequent patterns, and is faster than the FP-growth.

1. Introduction   Association rule discovery is a technique to investigate the possibility of multiple occurrence of items. A variety of methods have been studied to improve the performance of the algorithms[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]. Most previous studies adopt an Apriori-like heuristic approach. The essential idea is to create smaller candidate sets and to reduce database volume.

[5] proposed the FP-growth algorithm, that can find frequent patterns(itemsets) without generation of candidate sets by twice performing a database scan.

This algorithm finds frequent patterns using the FP- tree structure, which is also used in the FP-growth algorithm. The algorithm demonstrated good performance by avoidance of candidate set generation.

However, FP-growth spends non-trivial costs: 1) it includes pruning of non-frequent items and sorting of 1-frequent items to generate a FP-tree structure through twice performing a database scan, and 2) it conducts repeated tree scans to find frequent patterns.

In this paper, we propose the ALIB(Algorithm using LIB-graph) algorithm. The ALIB can find frequent patterns by performing only onetime database scan. The proposed algorithm doesn?t generate candidate sets. Further, our algorithm employs a LIB(Large Items Bipartite)-graph structure. The advantages of the ALIB algorithm are as follows.

First, it conducts only onetime database scan. After the database scan, 1-frequent items are found.

Simultaneously, the LIB-graph structure is generated.

This graph represents the relationship between items and transactions. Through the graph, we can verify whether a transaction includes some items or an item is included into some transaction. So, we can find frequent patterns using LIB-graph, without scanning the entire database. Specially, we can find k-frequent patterns, where k is no less than 2, using only 1- frequent items. Therefore, our algorithm demonstrates good performance.

Second, our algorithm doesn?t generate candidate sets. Finding frequent sets is done to verify if the number of transactions including the item sets is no less than a predefined minimum support threshold, ?.

We can find the number of transactions, including some item sets, through the edges of LIB-graph. That is, we can compute the support of item sets using LIB- graph. Therefore, our algorithm has the ability to find frequent patterns without generation of candidate sets.

Most of the previous studies spent their costs on the scanning of the entire database and the handling of candidate sets. However the ALIB algorithm greatly reduces the computation costs because it conducts only onetime database scan and don?t generate candidate sets. A performance study has been conducted to compare the performance of the ALIB algorithm with a representative frequent pattern mining method, FP- growth.

The rest of paper is organized as follows. In Section 2, we introduce LIB-graph structure and its method of construction. In Section 3, we discuss a method of finding frequent patterns using the LIB-graph. In  18th International Workshop on Database and Expert Systems Applications  DOI 10.1109/DEXA.2007.110     Section 4, we demonstrate the performance of the ALIB algorithm by simulation. In Section 5, we summarize our work and provide directions for future work.

2. LIB-graph: Design and Construction   The Bipartite graph is defined as follows. In graph G=(V, E), V(vertices) is split into two group sets, X and Y(=V-X). Each edge of the edges connects vertex in the X and vertex in the Y. Our LIB(Large Items Bipartite)-graph structure is defined as follows. LIB- graph consists of two group sets. The first group is set of items, which are included in the DB, and the second group is set of transactions. The edges of LIB-graph represent the inclusive relationship between two group sets. That is, the edge represents the relationship between an item and transaction identifier(TID), hereafter called TID. Therefore, the number of edges of a item indicates its support.

Table 1. Sample Database TID Items 100 f, a, c, d, g, i, m, p 200 a, b, c, f, l, m, o 300 b, f, h, j, o 400 b, c, k, s, p 500 a, f, c, e, l, p, m, n  We use a sample database, which was used in [5], to explain the LIB-graph structure. Let support be 3.

Table 1 indicates a Sample database. The method of LIB-graph construction is as follows. First, we find 1- frequent items from a database scan. Length-1 frequent items and their support is {(a, 3), (b, 3), (c, 4), (f, 4), (m, 3), (p, 3)}. Simultaneously, the edge is created when transactions are scanned to find 1-frequent items.

Two group sets, which are connected for the edges, are constructed beforehand in the previous database scan.

In most of the application, it is possible to generate two group sets beforehand because we know items and the number of transaction in the database.

In table 1, the first transaction is T100={f, a, c, d, g, i, m, p}. These are connected with vertex 100 because the items are included in transaction 100. The second transaction T200={a, b, c, f, l, m, o} is connected with vertex 200. When all transactions are scanned, we can find 1-frequent items and construct a LIB-graph.

Figure 1 represents the LIB-graph constructed later whole transaction scan. We don?t use any other operations when 1-frequent items are found and the LIB-graph is constructed. Therefore, the cost of LIB- graph generation is O(|D|), where |D| indicates the number of transactions in the entire database. Hereafter k-frequent patterns mining, where k is no less than 2, can be conducted using LIB-graph because LIB-graph  has relation information between frequent items and transactions including them. So, LIB-graph is a form of compressed database.

3. Frequent Patterns Mining using the LIB-graph   We find an important property of LIB-graph, in the  inclusion relation between 1-frequent items and transactions. In Figure 1, Group 1 is a set of items, which are contained in the database, and Group 2 is a set of TIDs. Each vertex included in the Group 1 indicates 1-frequent items. We omit the remaining non-frequent items because our interest is only in frequent items. Each vertex of Group 2 indicates TIDs.

Each edge of items in Group 1 is linked to the TIDs, which are including them. As shown in Figure 1, if we track the edges of each TID connected to an edge of a 1-frequent item, we can find all transactions that contain 1-frequent items. The rest phase is used to find frequent patterns in the tracked transactions. To understand the algorithm, we explain the algorithm using the LIB-graph example shown in Figure 1.

Figure 1. The LIB-graph created from the sample database  For the vertex (a), a 1-frequent item of Group 1, the number of edge at the vertex (a) is 3. The number 3 indicates the support of 1-frequent item {a}. We can find transactions, which are {100, 200, 500}, including the 1-frequent item {a}. As shown in Figure 1, the number of edge linked in the TID100 is 5. We use following notation to express the transactions that contain frequent item {a}. The notation is SLIa_T100={a | c, f, m, p}( SLIa indicates that Start Large Item is {a}). SLIa_T100 means the transaction has TID ?100? and the first frequent item of the transaction     is {a}. Although the transaction ?100? has more edges, we omit the remaining items because the non-frequent items are not of interest. The edge links of the second transaction ?200?, which is linked to the item {a}, are SLIa_T200={a | b, c, f, m}. The edge link of the third transaction ?500?, which is linked to the item {a}, is SLIa_T500={a | c, f, m, p}. We found all transactions, which include frequent item {a}, and other frequent items existing together with frequent item {a} through edges of the transactions. Therefore we can find all frequent patterns through above the three transactions.

Here the first item in the frequent pattern is {a}.

We use a tree structure to find frequent patterns from generated transactions. This tree is similar to the FP-tree. This tree is created when SLIitem_Ttid is generated. The root of the tree is SLIitem. We call this tree the SLIitem-tree. We explain the phase of the tree generation with SLIa.

First, we generate the root node of SLIa-tree. Each node of the tree consists of item and support of the item. The root node of the SLIa-tree is (a) and the support is initialized to zero. The scan of the first SLIa_T100 leads to the construction of the first branch of the tree: {(a,1), (c,1), (f,1), (m,1), (p,1)}. Notice that the frequent items in Group 1 are listed according to alphabetical order. In the second SLIa_T200, since its frequent item list {a, b, c, f, m} shares only the root node (a), (a)?s count is incremented by 1, and a new branch {(b,1), (c,1), (f,1), (m,1)} is created and linked as a descendant of (a,2). For the last SLIa_T500, its frequent item list {a, c, f, m, p} is identical to the first, the path is shared, with the count of each node along the path incremented by 1. Figure 2 shows a tree construction example.

Figure 2. the example of SLIa-tree and SLIb-  tree Based on this example, a SLIitem-tree can be  designed as follows.

Definition (SLIitem-tree) A Start Large Item tree, which uses a frequent item as the root node, is a tree structure defined as follows.

1. It has one root node, which is labeled as a frequent item and its support.

2. Each node in the tree consists of two fields: item- name and support, where item-name registers the item this node represents, and support registers the number  of .transactions represented by the portion of the path reaching this node.

Construction of a compact SLI-tree ensures that  subsequent mining can be performed with a rather compact data structure. If a tree was generated, subsequent mining is simple. We explain tree tracking to find k-frequent patterns. We will use SLIa-tree as an example. We obtain two paths, which are {(a,2), (c,2), (f,2), (m,2), (p,2)} and {(a,1), (b,1),(c,1), (f,1), (m,1)} in the SLIa-tree. The first path indicates that {a, c, f, m, p} appears twice in the database. Notice that although frequent item (a) appears three times in the database, it appears twice together with {c, f, m, p}. Similarly, the second path indicates {a, b, c, f, m} appears once in the set of transactions in the DB. In the two paths, we can get the frequent pattern {(a,3), (c,3), (f,3), (m,3)} which is no less than the predefined minimum support threshold ?. The frequent pattern length is 4 and its subset is also a frequent pattern. So, this results in a frequent pattern (ac, 3), (af, 3), (am, 3), (acf, 3), (acm, 3), (acfm, 3) from the SLIa-tree. These patterns include frequent item (a). This means that we do not need to consider frequent item (a) in subsequent mining, because all frequent patterns including frequent item (a) are found from the SLIa-tree. As shown in Figure 2, frequent item (a) is omitted in the SLIb-tree. As a result, subsequent mining becomes progressively faster. The remaining frequent patterns can be found using the same method as that above.

The advantages of ALIB are as follows. First, this algorithm can find frequent patterns by only onetime database scan. We generate LIB-graph, which represents the relationship between items and transactions. The subsequent mining is conducted using LIB-graph. Therefore, we can reduce the cost arising from repeated database scans. Second, our algorithm does not generate candidate sets. Previous algorithms require many operations in solving the problem. The representative operations are to generate candidate sets and to search these if the candidate sets are frequent. This operation cost is non-trivial. As a result, we are able to conduct frequent pattern mining, without generation of candidate sets, using LIB-graph.

4. Experimental Studies   In this section, we conducted testing to compare the  ALIB and FP-growth algorithms. We conducted performance analysis using the time complexity theory and performance measurement through simulation.

4.1. Performance Analysis by the Time Complexity Analysis   We measured the performance of the ALIB and FP-  growth algorithms using time complexity analysis. We considered the various components, such as database scan,   new data structure generation, and searching of the generated data structure. For time complexity analysis, we assume that the number of transactions is N, the average number of items in each transaction is M, and the number of 1-frequent items is L.

Table 2. the time complexity of the FP-growth  the operation time complexity  (1) Database scan to find 1-frequent  items Database scan : O(N ? M)  (2)  Non-frequent items pruning and the rest  frequent items sorting  Database scan : O(N ? M) Pruning : O(N ? M)  Sorting : O(N ? LlogL)  (3) Tree generation Tree generation : O(N ? M)  (4) Tree scan &  frequent patterns mining  Tree scan : O(L ? logL) Patterns mining : O(L2)  First, for the FP-growth algorithm, the operation of FP-growth can be divided into four parts: (1) it scans a database to find 1-frequent items, (2) it prunes non- frequent items and sorts the remaining frequent items to generate the FP-tree, (3) it generates the FP-tree by scanning sorted transactions, and (4) FP-growth finds frequent patterns in the FP-tree. The time complexity for the four operations is presented Table 2.

Table 3. the time complexity of ALIB the operation time complexity  (1) Database scan to find 1-frequent items and  to generate LIB-graph Database scan : O(N ? M)  (2) Tree generation by LIB-graph scan  Graph scan : O(L ? N) Non-frequent item Pruning : O(N ? M) Tree generation : O(L ? M)  (3) Tree scan & frequent patterns mining Tree scan : O(L ? logL) Patterns mining : O(L2)  Second, for the ALIB algorithm, the operation of ALIB can be divided into three parts. (1) It scans a database to find 1-frequent items and generate the LIB- graph. This operation includes a database scan, 1- frequent items generation, and LIB-graph generation.

These operations are conducted in onetime database scan. So, the time complexity for these operations is O(N ? M). These don?t consume other operation costs, because we only connect the two groups in the pre- created LIB-graph structure after database scan. Hence we can solve the three operations with onetime database scan. (2) We create the SLIitem-tree using  LIB-graph. (3) And, we find frequent patterns using the SLIitem-tree scan. The time complexity for the three operations is demonstrated in Table 3.

We compared the time complexity for the two algorithms. As shown in the above Table 2 and Table 3, ALIB is less than FP-growth in the number of times of operation. ALIB reduced at least two operations. The first was to only scan the database once, and the second was to conduct operations without the sorting for 1-frequent items.

4.2. Performance Measurement by the Simulation Experiment   All experiments were conducted under Microsoft  Windows XP, with a PC consisting of 1 GB main memory, and a 2GHz Pentium 4 CPU. The code for ALIB and FP-growth was written using Microsoft/Visual C++ 6.0. The operation time indicates the entire running time. The entire running time indicates that we measured the time from data input to frequent pattern print. The synthetic dataset was created using a data generator, which was used in the measurement of the previous experiment.

D1 data set         0.1 0.2 0.3 0.4 0.5 1 1.5 2 2.5 3 Support threshold(%)  R un  tim e(  se c.

)  FP-growth ALIB   Figure 3. the performance comparison of  ALIB and FP-growth We present the experimental results on two  synthetic datasets. The first is T10.I4.D10K with 1K items. Hereafter, this dataset is denoted as D1. In this dataset, the average transaction size and average maximal potentially frequent pattern size are set to 10 and 4, respectively, while the number of transactions in the dataset is set to 10K. The second synthetic dataset used is T20.I10.D100K, with 10K items, hereafter this dataset is denoted as D2. The average transaction size and average maximal potentially frequent pattern size are set to 20 and 10, respectively. There exist an exponential number of frequent patterns in this dataset when the support threshold is lowered. The dataset contains long abundant mixtures of short and long frequent patterns.

The FP-growth algorithm proposed a novel data structure, the FP-tree, to reduce the number of database scans. The FP-tree structure consists of 1-frequent items in the database. The path from root to leaf node     indicates a transaction that consists of 1-frequent items.

This transaction (or one path) has only 1-frequent items. FP-growth is conducted efficiently using the FP- tree. However, the costs for the construction of the FP- tree are very large because FP-growth conducts operations by sorting, comparison, and pruning of the massive database to construct the FP-tree.

Both figures show the result of performance using the datasets D1 and D2. The runtime of ALIB and FP- growth on synthetic datasets as the support threshold decreases from 0.3% to 0.01% is shown in Figure 3 and Figure 4, respectively. As seen from the result shown in the figures, both(FP-growth and ALIB) achieve good performance in the frequent pattern mining. However, ALIB is faster than FP-growth. The result is shown in Figure 3 and Figure 4.

D2 data set            0.1 0.2 0.3 0.4 0.5 1 1.5 2 2.5 3  Support threshold(%)  R un  tim e(  se c.

)  FP-growth ALIB   Figure 4. the performance comparison of  ALIB and FP-growth The main costs in FP-growth are frequent items  pruning, frequent items sorting, and tree generation. In a database with a large number of transactions, the computation cost as frequent items pruning and frequent items sorting increases substantially.

Although ALIB conducts non-frequent item pruning and tree generation, ALIB avoids the operation of frequent item sorting. So, ALIB can conduct only onetime database scan.

5. Conclusion   In this paper, the ALIB algorithm was proposed.

ALIB reduces the number of database scan and finds the frequent patterns efficiently. The algorithm can find frequent patterns by executing only onetime database scan. This is made possible from the use of LIB-graph. We can find the relationship of the frequent items and transactions including them through the LIB-graph. We can reduce the unnecessary operation costs for the non-frequent items. Further, ALIB doesn?t generate candidate sets. The majority of costs in frequent patterns mining are in generating and verifying the candidate sets. So, ALIB can reduce the cost considerably, since it doesn?t need to verify the candidate sets.

We demonstrated that our algorithm is more efficient than the FP-growth algorithm, through time complexity analysis and simulation experiment. The main contribution of ALIB is that it can conduct frequent patterns mining without generation of candidate sets, by only onetime database scan.

However, the downside of ALIB is that it needs more large memory requirements than FP-growth algorithm.

In future research, we will reduce memory consumption and improve the speed of the algorithm.

