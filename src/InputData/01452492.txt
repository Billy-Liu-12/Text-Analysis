Mining Calendar-based Asynchronous Periodical Association Rules with Fuzzy Calendar Constraints

Abstract? We propose a new representation of calendars such that users can specify fuzzy calendar constraints to discover asynchronous periodical association rules embedded in tempo- ral databases. We borrow the fuzzy set theory and use the conjunction operation to construct fuzzy calendar patterns and each fuzzy calendar pattern represents an asynchronous period- ical behavior. Moreover, different time intervals have different weights corresponding to their matching degrees to the specified fuzzy calendar pattern. An efficient algorithm is also proposed to find association rules with the specified fuzzy calendar pattern.

Unlike levelwise Apriori-based approaches, our method scans the underlying database at most twice. In the first scan, frequent 2-itemsets with their weighted counts in the specified fuzzy calendar pattern are obtained and then all candidate itemsets are generated from the discovered frequent 2-itemsets. Finally, all frequent itemsets with their weighted counts in the specified fuzzy calendar pattern are discovered in one shot. Asynchronous periodical association rules in the specified fuzzy calendar pattern are then obtained.



I. INTRODUCTION  Recently, temporal association rules are attracting more and more attention. Unlike traditional mining techniques [1,3] which discover unordered correlations between items from a given database of transactions each of which contains a collection of items activated at a certain time, the temporal patterns reveal ordered correlation between transactions. For example, in a temporal database, a kind of periodic behavior like ?customers might look for chocolates and flowers together on February 14th every year? may be discovered. There are various forms of periodic temporal patterns, e.g., periodical association rules [2], cyclic association rules [5], and calendric association rules [4,6,7]. Both periodical and cyclic patterns are basically in terms of a single time granularity, but cal- endar patterns are based on a framework with multiple time granularities. In real world, humans usually use multiple time granularities instead of single granularities. Therefore, system support and reasoning involving calendars with multiple time granularities have been recognized to be an important issue.

For mining association rules in temporal databases, several kinds of approaches to specify periodicities with multiple time granularities have been studied. In [6], users could specify the interesting period with multiple time granularities by them- selves. In [4] and [7], two different algorithms are proposed to discover all calendar-based temporal association rules in a specified calendar schema. However, all the approaches above are crisp descriptions about their desire periodicities. To  consider the activities of humans, they may often be shifted from original schedules by external factors. And in real world, humans usually don?t act on a certain time interval but during several continuous time intervals. Those situations above can?t be described successfully with crisp descriptions. Therefore, a new representation of calendars to specify uncertain period- icities and continuous time intervals of time granularities is necessary.

To achieve the purposes mentioned above, the technique using fuzzy set theory is adopted, which can describe the uncertainty and can give different weights corresponding to their matching degrees to different time intervals by specifying the calendars. In fact, an useful fuzzy calendar algebra was developed to allow users to describe desired temporal require- ments in fuzzy calendars easily and naturally [8]. In this paper, we allow users to describe their desired periodicities with fuzzy calendars of multiple time granularities and combine fuzzy calendars with a conjunction operation to form a fuzzy calendar pattern, then, each time interval of the fuzzy calendar pattern can have a weight corresponding to its matching degree. When the fuzzy calendar pattern is given, association rules in the specified fuzzy calendar pattern can be discovered.

For example, an association rule in a fuzzy calendar pattern is ?turkey and pumpkin pie are frequently purchased together near November 25th every year?, where ?near November 25th every year? is a fuzzy description of periodicities.

We also propose an efficient algorithm to discover asyn- chronous periodical association rules with fuzzy calendar constraints. Unlike levelwise Apriori-based approaches, our method scans the underlying database at most twice. In the first scan, frequent 2-itemsets with their weighted counts in the specified fuzzy calendar pattern are obtained and then all candidate itemsets are generated from the discovered frequent 2-itemsets. Finally, all frequent itemsets with their weighted counts in the specified fuzzy calendar pattern are discovered in one shot. Asynchronous periodical association rules in the specified fuzzy calendar pattern are then obtained. The rest of the paper is organized as follows. In Section 2, we briefly describe the concept of the fuzzy calendar pattern. A formal description about calendar-based asynchronous periodical as- sociation rules is also given. In Section 3, we describe our method in detail. Simulation results are presented in Section 4, and finally a conclusion is given in Section 5.

5 10 12 13 14 15 16 20 25 30  0.5   days  ou tp  ut  colse to 14  1 2 3 4 5 6 7 8 9 10 11 12  0.5   months  ou tp  ut  February  2001 2002 2003 2004 2005  0.5   years  ou tp  ut  every year  Fig. 1. Membership functions describing (a)the days ?close to 14? (b)?February? (c) the years of ?every year?.



II. FUZZY CALENDAR PATTERNS  A. Calendar Schema  A calendar schema is a structured collection of time in- tervals by a hierarchy of calendar concepts. Generally, the calendar schema is constructed with multiple time granular- ities. For example, the hierarchy of time granularities of a calendar schema can be (year, month, day). A calendar schema is specified by users with the interesting time granularities they want to discover.

B. Basic Fuzzy Calendars  For each time granularity U , users can specify a fuzzy set which describes the distribution of all the time intervals and gives a degree to each time interval in the corresponding time granularity. And each fuzzy description of time granularities forms a basic fuzzy calendar. A basic fuzzy calendar, A, can be described by a membership function ?A and for every time interval Ti ? U , there is a degree corresponding to the basic fuzzy calendar, where  0 ? ?A ? 1. (1) The function value ?A indicates whether Ti is included in A. If the function value is nonzero, then T i is included in A, otherwise, Ti is not included. Furthermore, time intervals which are more important can have a larger matching degree.

For example, in Fig. 1(a), the degrees of 13, 14 and 15 are 0.5, 1, 0.5. That is, 14 contributes a bigger influence than 12 and 15 to the fuzzy calendar ?close to 14? and the others are not included in the fuzzy calendar ?close to 14?. Generally, fuzzy calendars can also be used to describe crisp time intervals. For example, February can be described by fuzzy calendar with a singleton, as shown in Fig. 1(b).

C. Complex Fuzzy Calendars  For a calendar schema with m time granularities, i.e., U1, U2, . . . , Um, and the basic fuzzy calendars of those time granularities, i.e., c1, c2, . . . , cm, specified by users, the com- plex fuzzy calendar, FC, constructed with the basic fuzzy calendars can be described by a membership function ?FC , where  FC = c1 ? c2 ? . . . ? cm, (2)  ?FC = ?c1?c2?...?cm = ?c1 ? ?c2 ? . . . ? ?cm (3)  where the symbol ??? represents the conjunction operation, and we suggest to use the algebraic product for the fuzzy conjunction. For every time interval T ? U1?U2?. . .?Um, let T = (t1, t2, . . . , tm) have a matching degree ?FC(T ) where  ?FC(T ) = ?c1(t1) ? ?c2(t2) ? . . . ? ?cm(tm) (4) for each tj ? Uj , and j = 1, 2, . . . , m.

Example 1. The complex fuzzy calendar ?days close to 14th of February in every year? is constructed with three basic fuzzy calendars, i.e., ?every year? described in Fig.

1(c), ?February? described in Fig. 1(b), ?close to 14? de- scribed in Fig. 1(a), and the function value of ?13th Febru- ary in 2004? to the complex fuzzy calendar ?days close to 14th of February in every year? is computed below.

?(days close to 14th of February in every year) (2004, 2, 13) = ?(every year)(2004)? ?(2)(2) ? ?(close to 14)(13) = 1 ? 1 ? 0.5 = 0.5 D. Fuzzy Calendar Patterns  To specify the periodical property, an approach in [4] asks the calendar pattern to include at least one calendar which includes all time intervals in the corresponding time granularity. We adopt the concept to specify the periodicity in this paper, and define the asynchronous periodicity as a fuzzy calendar pattern. For a user to specify a fuzzy calendar pattern to describe their desired periodicities he wants to discover, the definition of the fuzzy calendar pattern is as follow.

Definition 1. fuzzy calendar pattern is a complex fuzzy calendar and at least one basic fuzzy calendar included in the complex fuzzy calendar which includes all time intervals in the corresponding time granularity.

For example, if the calendar schema is (year, month, day), then a fuzzy calendar pattern under the calendar schema must have at least one of the three basic fuzzy calendars, i.e., ?every year?, ?every month? and ?every day?. The complex fuzzy calendar ?days close to 14th of February in every year? in Example 1, is a valid fuzzy calendar pattern, because it is a complex fuzzy calendar and includes the basic fuzzy calendar ?every year? which includes all time intervals in the time granularity ?year? of the calendar schema.

E. Calendar-based Asynchronous Periodical Association Rules  A temporal database D consists of transactions, with each transaction t in D being associated with an identifier TID and a time information tt which indicates the time when the transaction occurred. Let I = i1, i2, . . . , in be a set of items, and each transaction t in D is a subset of I , that is, t ? I .

Given m time granularities, i.e., U1, U2, . . . , Um, let D be divided into a sequence of k partitions, i.e., P1, P2, . . . , Pk, each Pi containing a set of transactions occurring in the corresponding time interval Ti. Given a user-specified fuzzy calendar pattern FC consisting of m basic fuzzy calendars, discovering the calendar-based asynchronous periodical association rules in a temporal database is to find all interesting patterns in FC in the temporal database. That is, we want to discover all association rules which have an enough weighted average constrained by FC.

1) Association rules in time intervals: An association rule with respect to a time interval, Ti, is an implication of the form  X ?Ti Y, (5) where X ? I, Y ? I and X ? Y = ?. Let |Pi(J)| be the number of transactions containing itemset J in the partition Pi where each transaction occurring in T i is included in Pi, and |Pi| denotes the number of transactions in the partition Pi. The association rule X ?Ti Y, is said to have support SX?Y in the partition Pi, where  SX?Y = |Pi(X ? Y )|  |Pi| , (6)  and the association rule X ?Ti Y, is said to have confidence CX?TiY in the partition Pi, where  CX?Ti Y = |Pi(X ? Y )| |Pi(X)| or  SX?Y SX  . (7)  For a user-given pair of confidence and support thresholds, c% and s%, association rules in a time interval Ti are those which have confidence and support greater than or equal to c% and s% in Pi, respectively.

2) Calendar-based Asynchronous periodical association rules: A calendar-based asynchronous periodical association rule with respect to a user-specified fuzzy calendar pattern, FC, is an implication of the form  X ?FC Y. (8) The match ratio, m, represents the frequency of an association rule in the fuzzy calendar pattern needs to be calculated.

Intuitively, we adopted the weighted average to calculate the match ratio. However, by taking crisp cycles and fuzzy cycles into the same position, the measurement will lose some patterns discovered in only crisp cycles.

To keep general patterns in crisp cycles and discover patterns in fuzzy cycles, we define two criteria to let the match ratio be more practical. The first criterion GM is the general match ratio as in [6] and [7], which measures the frequency of an association rule occurring in crisp periodical time intervals. And the second criterion FM is the influence of fuzzy calendars, which represents the frequency of an association rule occurring in the time intervals close to crisp periodical time intervals. Let an association rule, which is included in an user-specified fuzzy calendar pattern FC, then, the general match ratio and fuzzy calendar match ratio of the association rule, GM and FM , are as follows:  GM = ?  ?FC(Ti) ? ei? ?FC(Ti)  , for each ?CF (Ti) = 1 (9)  FM = ?  ?FC(Ti) ? ei? ?FC(Ti)  , for each 0 < ?CF (Ti) < 1. (10)  Where each time interval Ti ? U1?U2?. . .?Um, and ei is the existence of the association rule in Ti. If the association rule exists in Ti, ei = 1, else ei = 0. After the general match ratio and the fuzzy match ratio of the association rule are obtained, the match ratio m of the association rule in the fuzzy calendar pattern is obtained as follows:  m = GM + ?FM. (11)  For emphasizing and ensuring the influence of the certain time intervals of crisp cycles, it is necessary to keep the patterns discovered in the general crisp cycles. Therefore, we suggest keeping the value of the general match ratio, GM . We address the fuzzy match ratio as an assistant and propose to give a weight, ?, to the fuzzy match ratio, FM , where ? is a value between 0 and 1. Usually, we define the threshold of a match ratio, ?, between 0 and 1. To avoid the match ratio being much great than 1, we suggest ? be assigned as (1 ? ?). That is, when the general match ratio of an association rule is equal to ?, we expect that  GM + ?FM ? 1, when GM = ?, (12) where FM is at most equal to 1. We expect that the match ratio will be equal to 1 when the fuzzy match ratio is equal to 1. Then, the weight of fuzzy match ratio can be calculated as follows:  GM + ?FM = 1,  ? = 1 ? GM  FM =  1 ? ?  = 1 ? ?. (13) If the match ratio m of an association rule is greater then the user-given match ratio threshold ? , we say the association rule is a calendar-based asynchronous periodical association rule in the user-specified fuzzy calendar pattern. Refer to Example 1.

Assume the match ratio threshold ? = 0.6. Then, the weight ? = 1 ? 0.6 = 0.4 and an association rule A exists in (2001, 2, 13), (2001, 2, 14), (2002, 2, 14), (2002, 2, 15), (2003, 2, 13), (2003, 2, 15), (2004, 2,14) , and (2005, 2, 15). The match ratio, mA, of A can be calculated as follows. For simplicity,     we denote the fuzzy calendar pattern ?days close to 14th of February in every year? as ?FC1?.

mA = GMA + ?FMA = {[?FC1(2001, 2, 14) + ?FC1(2002, 2, 14) + ?FC1(2004, 2, 14)]/[?FC1(2001, 2, 14) + ?FC1(2002, 2, 14) + ?FC1(2003, 2, 14) + ?FC1(2004, 2, 14) + ?FC1(2005, 2, 14)]} + 0.4 ? {[?FC1(2001, 2, 13) + ?FC1(2002, 2, 15) + ?FC1(2003, 2, 13) + ?FC1(2003, 2, 15) + ?FC1(2005, 2, 15)]/[?FC1(2001, 2, 13) + ?FC1(2001, 2, 15) + ?FC1(2002, 2, 13) + ?FC1(2002, 2, 15) + ?FC1(2003, 2, 13) + ?FC1(2003, 2, 15) + ?FC1(2004, 2, 13) + ?FC1(2004, 2, 15) + ?FC1(2005, 2, 13) + ?FC1(2005, 2, 15)]} = {(1+1+1)/(1+1+1+1+1)+0.4?{(0.5+0.5+0.5+0.5 +0.5)/(0.5+0.5+0.5+0.5+0.5+0.5+0.5+0.5+0.5+0.5)} = 0.6 + 0.4 ? 0.5 = 0.6 + 0.2 = 0.8

III. OUR METHOD  Roughly, our method for discovering the calendar-based asynchronous periodical association rules with an user- specified fuzzy calendar pattern can be divided into three phases, i.e., discovery of all frequent 2-itemsets which satisfy the match ratio threshold in the user-specified fuzzy calendar pattern, generation of candidate patterns from frequent 2-itemsets discovered in phase 1, and discovery of all frequent itemsets which satisfy the match ratio threshold in the user-specified fuzzy calendar pattern. It must be noted that the single-item frequent itemsets are not generated for our method. Suppose a fuzzy calendar pattern, FC, and a match ratio threshold, ?, are given by users. Let L, L2 and Lk be the sets of all frequent itemsets, frequent 2-itemsets and frequent k-itemsets, with their general match ratios, GMs, and fuzzy match ratios, FMs, in the fuzzy calendar pattern. Initially, both L and L2 are empty. For each partition Pi which has a matching degree, di, to the fuzzy calendar pattern, where di is a real number between 0 and 1. Let G be the sum of all di, where each di is equal to 1, and let F be the sum of all di, where each di is less than 1.

In phase 1, for each partition Pi which has a nonzero degree di, find all frequent 2-itemsets, l2, in the partition. To count supports of all 2-itemsets, we calculate all combinations of any two items of transactions in the partition. Then we consider the following cases:  Case1 The degree of the partition is equal to 1. For each 2-itemset l ? l2, if l is not currently in L2, then, it?s inserted into L2 and the general match ratio of l, l.GM , is assigned as 1. If l is currently in L2, then, the general match ratio of l, l.GM , increases by 1.

Case2 The degree of the partition is less than 1. For each 2-itemset l ? l2 , if l is not currently in L2, then, it?s inserted into L2 and the fuzzy match ratio of l, l.FM , is assigned as di. If l is currently in L2, then, the fuzzy match ratio of l, l.FM , increases by d i.

When the first scan over the database is done, the match ratio of each 2-itemset l ? l2, l.m, can be calculated as follows:  l.m = l.GM  G + (1 ? ?) ? l.FM  F . (14)  Then, all frequent 2-itemsets which have match ratios greater than the match ratio threshold in the user-specified fuzzy calendar pattern are obtained, where  L2 = {l|?l ? L2, l.m ? ?}. (15) Once frequent 2-itemsets have been obtained in phase 1, phase 2 begins. Candidate itemsets Ck , for k ? 3, are generated as follows:  Ck = {  L2 ? L2 , k = 3 Ck?1 ? Ck?1 , k > 3  (16)  where ? is the JOINT operation given in [1], and the generation of candidates will stop when no candidate k- itemset could be generated from (k ? 1)-itemsets. Initially, for each candidate itemset c ? Ck, k ? 3, the general match ratio and the fuzzy match ratio of c, c.GM and c.FM , are assigned as 0. Once all candidate itemsets are generated, the second scan of the database is performed.

In the final phase, for each partition Pi which has nonzero degree di, we count the supports of candidate itemsets in the partition, and for each candidate itemset c ? Ck, k ? 3, we consider the following cases:  Case1 If the degree of the partition is equal to 1, the general match ratio of c, c.GM, increases by 1.

Case2 If the degree of the partition is less than 1, the fuzzy match ratio of c, c.FM , increases by di.

When the second scan over the database is done, the match ratio of each candidate itemset c ? Ck, k ? 3 , c.m, can be calculated as follows:  c.m = c.GM  G + (1 ? ?) ? c.FM  F . (17)  Furthermore, the itemsets whose match ratios are greater than the match ratio threshold can be obtained as follows:  Lk = {c|?c ? Ck, c.m ? ?, k ? 3}.

After the third phases, all frequent itemsets whose match  ratios are greater than the match ratio threshold in the user- specified fuzzy calendar pattern can be obtained as follows:  L = L2 ? Lk, k ? 3. (19) Therefore, all asynchronous periodical association rules in the user-specified fuzzy calendar pattern are obtained.



IV. EXPERIMENTAL RESULTS  We present the results of our algorithm with a fuzzy calendar pattern and with a general calendar pattern, to show the effect of fuzzy calendar patterns. We also compare the performance of our method with an Apriori-based method proposed in [4] in this section. The experiments described below are performed on a PC with 2.2 GHz CPU and 1.0G     2001 2002 2003 2004 2005  0.5   years  ou tp  ut  every year  1 2 3 4 5 6 7 8 9 10 11 12  0.5   months  ou tp  ut  every month  5 10 12 13 14 15 16 17 18 20 25 30  0.5   days  ou tp  ut  close to 15  Fig. 2. Membership functions describing the fuzzy calendar pattern ?days close to 15 of every month in every year?.

memory. The calendar schema ( year : [2001, . . . , 2004], month : [1, . . . , 12], day : [1, . . . , 31] ) is used in the experiments, and the user-specified fuzzy calendar pattern FC ?days close to 15 of every month in every year? is shown in Fig. 2. The technique introduced in [1] is used to generate synthetic datasets, T10.In.D1000K.Ch%, for n=3, 4, 5, 6, and h = 15, 25, 35, 45, where T is the mean size of transactions, I is the mean size of potential maximal large itemsets, and C is the correlation between patterns. We divide the dataset into 1000 partitions, where each partition contains 1000 transactions and is corresponding to one basic time interval in the calendar schema. In Experiment 1, we insert some target patterns into the dataset, T10.I4.D1000K.C25%, to design a specific dataset with asynchronous periodical association rules in the specified fuzzy calendar pattern, and compare the results discovered by our algorithm with a fuzzy calendar pattern and with a general calendar pattern to show that our algorithm with the fuzzy calendar pattern can discover asynchronous periodical association rules successfully. In experiment 2, we compare the performances of our method and the Apriori-based method with a general calendar pattern by using both methods to discover general calendar-based periodical association rules with a specific general calendar pattern in several different datasets. In experiment 3, we compare the results discovered by the algorithm with the fuzzy calendar pattern and the algorithm with the general calendar pattern in several synthetic datasets to show the effect of the fuzzy calendar patterns in general cases.

A. Experiment 1.

To identify the effect of the fuzzy calendar pattern constraint in discovering the calendar-based asynchronous periodical association rules, we insert 240 frequent itemsets as targets into partitions around the 15th day of every month in every year in the dataset T10.I4.D1000K.C25% randomly.

In this experiment, the match ratio threshold is specified to be 0.5, 0.6, 0.7 and 0.8, the support threshold is specified to be 0.07, and the specified fuzzy calendar pattern FC is ?days close to 15 of every month in every year? as shown in Fig.

2. To compare with general calendar patterns, we run the same thresholds of match ratio and support with the general calendar pattern ?15th of every month in every year?, where the membership functions of ?every year? and ?every month? are the same as FC, and the membership function of ?15th? is described with a singleton whose function value is equal  to 1 only when the day value is 15.

In TABLE I, the column ?total? is the total number of frequent itemsets discovered with the general calendar pattern and the fuzzy calendar pattern FC, and the column ?target? is the number of target patterns discovered by the general calendar pattern and the fuzzy calendar pattern. As shown in TABLE I, for match ratio thresholds from 0.5 to 0.8, the number of target patterns with the general calendar pattern is zero, that means the target patterns are not appeared in the crisp period enough, and it is possible to get the target patterns when the match ratio threshold is smaller than 0.5.

However, the number of target patterns with fuzzy calendar pattern indicates that our method with fuzzy calendar patterns can discover the association rules in asynchronous periodicities successfully, while the general calendar pattern can?t be used to mine the asynchronous periodical association rules.

B. Experiment 2.

In Experiment 2, we use both the Apriori-based method and our method to discover general calendar-based periodical association rules with a general calendar pattern ?15th of every month in every year? in 16 different datasets on different scales of support thresholds to compare the performances of the Apriori-based method and our method. In Fig. 3, the average execution time of the Aprori-based method applying to different datasets with support thresholds, 0.03, 0.04, 0.05, 0.06 and 0.07, is drawn in a dotted line while our method is drawn in a solid line. From the figure, we can see that our method has better performance for smaller support thresholds.

For smaller support thresholds, the length of maximal frequent itemsets will be longer. Therefore, the number of database scans in the Apriori-based method increases when the support threshold decreases, but our method always scans the database at most twice. As the result, our method is efficient in all kinds of support thresholds, but the performance of the Apriori-based method varies dramatically for different cases.

C. Experiment 3.

To observe the influence of the fuzzy calendar pattern in general cases, we use our method with a fuzzy calendar pattern ?days close to 15 of every month in every year? and a general calendar pattern ?15th of every month in every year?, respectively, to discover association rules in the fuzzy calendar pattern and the general calendar pattern in 16 different datasets     ? = 0.5 ? = 0.6 ? = 0.7 ? = 0.8 total target total target total target total target  General 216 0 180 0 143 0 125 0 FC 556 240 488 240 434 240 141 0  TABLE I  THE NUMBER OF FREQUENT ITEMSETS WITH GENERAL AND FUZZY CALENDAR PATTERNS.

0.03 0.04 0.05 0.06 0.07        support threshold  av er  ag e  ex ec  ut io  n tim  e (s  ec )  Our method Apriori based method  Fig. 3. Performance comparison between our method and Apriori-based method.

0.02 0.03 0.04 0.05 0.06 0.07 0.08        support threshold  av er  ag e  nu m  be r  of fr  eq ue  nt it  em se  ts  Fuzzy calendar pattern General calendar pattern  Fig. 4. The average number of frequent itemsets generated by our method and Apriori-based methods, respectively.

on different scales of support thresholds. In Fig. 4, the average number of frequent itemsets of the method with the general calendar pattern applying to different datasets with support thresholds, 0.03, 0.04, 0.05, 0.06 and 0.07, are drawn in the black pillars while the average number of frequent itemsets of the method with the fuzzy calendar pattern are drawn in the grey pillars. Apparently, using the fuzzy calendar pattern can discover more patterns than using the general calendar pattern.

Using the fuzzy calendar pattern not only can discover all the patterns discovered with the general calendar pattern, but also can discover patterns in the asynchronous periodicities that can?t be discovered using the general calendar pattern.



V. CONCLUSION  We have proposed an algorithm to discover calendar-based asynchronous periodical association rules with fuzzy calendar constraints. To specify the fuzzy calendar patterns, a conjunc- tion operation is proposed to combine basic fuzzy calendars to form a complex fuzzy calendar as a fuzzy calendar pattern.

By using fuzzy calendar pattern constraints, the algorithm can discover all association rules occurring in an asynchronous periodicity described by the user-specified fuzzy calendar pattern. When the fuzzy calendar pattern is specified by users, the frequent 2-itemsets are obtained after the first scan over the database. After that, all candidate itemsets are generated from the frequent 2-itemsets discovered in the first scan. Finally, the general match ratio and fuzzy match ratio of all candidate itemsets in the database are computed in one shot. Then, all frequent itemsets whose match ratios are greater than the user- given match ratio threshold are obtained. In this way, more interesting patterns than using general calendar patterns can be found. However, the JOINT operation may generate too many candidates when all candidate itemsets are generated from the frequent 2-itemsets in some cases, and that will affect the performance of our method. But, in general, our method is more efficient than others.

