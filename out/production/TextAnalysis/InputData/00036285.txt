A SECURITY MODEL FOR OBJECT-ORIENTED DATABASES

Abstract  The integration of object-oriented programming concepts wi th databases i s  one of the most significant advances in tho evolution of database systems and several recent projects are developing object-oriented databases Among the many issues brought along by this combination, one tha t  i s  becoming important i s  the protection of information  We develop here an authorization model for  object- oriented databases This model consists of a set of policies, a structure for authorization rules, and an algorithm to  evaluate access requests against the authorization rules For concreteness we use a specific database system to illustrate our model, but i t s concepts are applicable t o  a range of object-oriented databases  1 Introduction  The integration of object-oriented programming concepts wi th databases i s  one of the most significant advances in  the evolution of database systems and several recent projects are developing object-oriented databases Among the many issues brought along by this combination, one that i s  becoming important I S  the protection of information  Most of the current models for authorization in database systems were developed for relational databases [Fern81, Grif761 Object-oriented databases have a much richer structure and thore models are not adequate The addition of semantic relationships makes the authorization problem even more complex There IS a need for new models Until now very few authorization models for object-oriented databases have been proposed [Rabi87, Rabi881 A related study [Tost881 considers a Smalltalk system without a database system  We develop here an authorization model for object oriented databases This model consists of a set of policies, a structure for authorization rules, and an algorithm to evaluate access requests against the authorization rules For concreteness we use a specific database system, which i s  n o w  under development at the University of Florida This system Intended for CAD/CAM applications, incorporates knowledge rules wi th a database of objects combined through an Object Oriented Semantic Association Model (OsAM*) ([SuSY8S].[SuSY88]) The database i s  composed of objects that include a collection of facts and a collection of relevant rules An object binds knowledge rules t o  database facts  * O n  leave from Ben Gurion University, Israel  CH2703-7/89/0000/0110$01.00 0 1989 IEEE  All the knowledge manipulation operations can be used t o express the rules Some of these rules could be integrity or security rules, I e ,  they could be the basis for a mechanism to enforce integrity or security  Section 2 considers security policies and the structure of the authorization rules for such a system, while Section 3 discusses access requests validation Section 4 develops an algorithm for access validation in  the context of the OSAM* model, Section 5 shows some possible extensions, while the last section describes conclusions and directions for future worh  2 Securitv policies and authorization rules  A coherent set ot policies i s  needed as a guideline for the design and use of a database system The choice of policies for security i s  important because it can influence the flexibility.

usability, and performance of the system [Fern811  A fundamental choice i s  having an open or a closed system In an open system everything i s  accessible unless forbidden, while in  a closed system we have the inverse situation Security requires closed systems while flexibility indicates open systems In general, when security i s  an important objective, we should use a closed system Another issue i s  the use o f  positive or negat ive authorization rules, For example, the system described in [Rabi87] uses positive and negative authorizations a subject may be denied access t o  an object either because it has no authorization for it or because it has a negative authorization on it The use of predicates for  negative author izat ion present evaluat ion problems as well as possible contradictions i n  the security structure which may be hard t o  detect However, in a system with a rich data model negative authorizations may be needed to express subtle access constraints Negative author izat ion constraints are also required by the Orange book for security classes 83 and A1 [DODCSS ]  Another dimension i s  ownership versus administration In the first case users own and administer their data, in the second case the information belongs to  the enterprise, users are given access t o  i t  t o  perform their  functions and special users (administrators) control the structure and the use o f  t h e information Since a Data Base Management System i s  used to support an enterprise, administration i s  a more logical choice for this case This view i s  also supported by recent work on enterprise policies [Moff88] Additionally one may want to allow some (or all) user to  define private databases  Another relevant policy i s  the choice between discretionary and multilevel security The National Computer Security Center recommends the  use o f  mu l t i leve l  systems fo r  genera l computational environments [DoDC851 For the environment considered here a discretionary pol icy seems adequate  I I O    ' Mult i level security for object-oriented databases i s  under development at SRI and Honeywell  Figure 1 illustrates a portion of a university database using the OSAM* model (A few other concepts are introduced in the example of Section 3) Class Person (P) has attributes SSN (Social Security Number), Name (and maybe others) Classes Student (5) and Teacher (T) are subclasses of Person The generic properties of Student and Teacher define Person through a generalization association (G in Figure 1) Attribute "Year"(year of graduation) i s  defined for Student and attribute "Course" for Teacher Foreign Student (FS) i s  a subclass of Student Attributes defined for subclasses reflect the fact that some features or properties only apply to specific subclasses, e g , Visa is  only meaningful for Foreign Students Person, Student, Teacher, and Foreign Student are object classes (similar to Smalltalk classes) Their attributes correspond to Smalltalk tnstance vartab/eS In addition to the generalization association, Figure 1 also shows an aggregation association indicated by A, which defines a set of attributes for some class  Class inheritance properties make Figure 1 to define the effective ddtabase of Figure 2, where i t  can be seen that all attributes of a class are inherited by its subclasses (the dotted attributes are the inherited attributes) I t  is  clear now that access to  zome at t r ibute o f  a class implies also access to  the corresponding values in i t s  subclasses Note that these values are a subset of those of the superclass. I e ,  SSN as an attribute of Student represents only the SSNs of Students, while the values of SSN as an attribute of Person represent SSNs of Students as well as of Teachers  '  These considerations can be summarized in the following micies  P1 (inheritance policy) - a user that has access to a class IS allowed to have similar type of access in the corresponding subclasses to  the attributes inherited from that class  P2 - -  access to  a complete class implies access t o  the attributes defined in that class as well as i o  attributes inherited from a higher class (but only to the class-relevant values of these attributes)  P3 -- an attribute defined for a subclass I S  not accessible by accessing any of i t s  superclasses  Additional policies are necessary to consider predicates and multiple inheritance A discussion of possibilities for discretionary and mandatory systems i s  given in [Spoo88]  In general, an authorization rule is a tuple (U, A 0, p, f), which defines that sublect or user U has authorization of type A (access type) to  those occurrences of object class 0 for which predicate p is  true (note that the word object here i s  not used in the sense of  object-oriented databases but i t  represents any named entity) User U can grant the access right (0,A) i f  the copy flag f i s  true This model has been used to describe most of the authorization systems for relational databases We use here a more specific version of these rules defined as below  An authorization rule i s  a triple (U,A,AO) where U i s  a user or user group, A is an access type or set of access types, and A 0  i s the set of attributes of the object to be accessed, I e ,A 0 = (01 a,.

01 a2, } A rule can either refer to A 0  as a whole or to i t s individual components Attribute a, must be defined for object 01, or inherited by i t  For example, consider the graph of Figure 2 Assume the following authorization rules are defined  R1 (SA, R, 5 SSN) ~ - The Student Advisor can read SSN of students  R2  (FSA, R, (FS SSN, FS visa)) Advisor can read SSN and visa of foreign students  - The Foreign Student  A Student Advisor (SA) could have access to  SSNs of all students (Pi), but no access to  their visas (P3), a Foreign Student Advisor (FSA) could have access to  visas but only to  SSNs o f Foreign Students (Pz)  We can also separate user rtghts defined by user authorization rules as described above from administrative rights.

the ability to control the database access actions Administrative rights are defined by admtnistrative rules described by tuples (U, A, 0,  f) Examples of administrative access types are the rights to create and delete administrative groupings of data, to define user authorization rules, t o  revoke delegated rights. etc This separation proved t o  be useful in  a decentralized model [Wood79) and has been further elaborated in (Moff881  a G  a G  Figure 1 A university database  Figure 2 Effective structure of the database of Figure 1    3 Validation of access requests  Access validation occurs by extracting a data request from a user query or from an executing program This request has a structure (U?,A?, O?), where U? i s  the subject (user, process) making the request, 0? i s  the requested object, and A? IS the requested access type This request i s  validated against the authorization rules to decide if the request should be granted totally or partially  A security context i s  a set o f  object classes grouped together for security purposes A security context may be equivalent t o  a conventional view or other partitions of the database schema A security context defines a partially ordered set of object classes (in terms of the associations) which delimits the access for user queries, i e ,  a data request i s  validated using the rules in a specific context In Figure 3 we show a more global picture of the university database Security Context S C i  IS defined t o  include Classes Person, Student, Teacher, and Foreign Student, as well as their corresponding associations Validation of a user?s request associated with this security context wi l l  only consider classes and associations within SCl  (the portion in the dotted circle) SC1 is used as a boundary when constructing the Query Security Graph (def ined later) for the  user?s query Authorization rules are usually associated w i t h  a partlcular security context  Consider now rules R1 and R2 of Section 2 According to Placement rule 1, R1 must be placed at class Student Similarly, R2 can only be placed at class Foreign Student  A query-graph IS  the subgraph of the security context defined by the nodes that the query intends t o  access and their corresponding associations  For the example above we define the fo l low ing  t w o queries, each o f  which is issued by SA and FSA  Q1: read SSN for all students Q2: read SSN and visa for all foreign students  The corresponding query-graphs are shown in Figure 4  Query Graph for 01  I I Academic Institute A  - - I  ./ sc1 .

c . _ -  Figure 3 A security context in  the university database  The placement of authorization rules affects considerably the way of validating access requests Authorization rules can be placed at special classes (e g , a context root), at the class to  which they refer (I e , the class defined by the object part of the rule), or propagated throughout the hierarchy as discussed in  [Fern751  We consider the following placement rule  Placement Rule 7 an access rule (U.A,{Oi al, 0, a l .  }) can be placed only at node 01  I Foreignstudent I  Query Graph for Q2  Figure 4 Query-graphs for example  According to the policies of Section 2 we expect the following behavior as a result of the evaluation of the indicated requests?  (SA.Ql) = (SA, Read, S SSN) - - all SSNs can be read (since we do not deal wi th exceptions or negative authorizations, we do not exclude, for example, foreign students or other subgroups tha t  may no t  be accessible t o  a student advisor )(Policy PI)  (SA,Q2) = (SA, Read, {FS Visa, FS SSN)) - -only SSNs of foreign students are to  be read and not their visas. (Policy P3)  (FSA,Ql) = (FSA, Read, S SSN) - - only foreign student SSNs are to be read (Policy Pz)  (FSA.Q2)= (FSA, Read, {FS Visa, FS SSN}) - - both foreign student SSNs and visas are to  be read (Policy Pz)  We now define the concept of the Query Security Graph for each node in the query graph we add all of i t s  descendants (recursively) and all of i t s  ancestors (recursively) until we reach the boundaries of the security context The result i s  the query security graph for example the query security graphs for queries Q1 and Q2 issued within SC1 are shown in Figure 5 (in this case this i s  the same graph for both queries)  *We denote a request as (U.Q), where U i s  a subject and Q a query Their combination is equivalent to  the set of components of the request model defined in  Section 2 For clarity we show also the expanded request  I I2    m Person G  G  e Foreign Student Figure 5 Query Security graphs for the example  4 Access request evaluation alqorithm  This algorithm assumes Placement Rule 1 and that the security graph i s  a tree (a more general algorithm, that  can handle arbitrary class graphs, has been developed [fern891 ) for each node i n  the  query graph the  a lgor i thm checks fo r authorization in the corresponding node in the query security graph If i t  finds a rule authorizing all the requested access, it returns Otherwise i t  looks for more general rules in  the ancestor of the current node If still not fully authorized, it looks for more restrictive rules in i t s  descendant subtrees using, for example, a depth-first search procedure The algorithm i s  based on the policies defined earlier  f o r  the algor i thm we use the fo l low ing  add i t iona l deftni tions  AT - - set of requested attributes AT yes - - the set of attributes already authorized at a given moment  QG i s  the query graph, SG i s  the query security graph AUTH UP and AUTH DOWN are procedures to traverse the tree  The algorithm i s  composed of three major procedures  -  AUTH, AUTH-UP and AUTH-DOWN  AUTH may traverse the entire query security graph for each node of  the query graph (the examples below assume a single query node ) If the current query node contains access rules which completely authorize access, then the algorithm stops and sets the set AT to empty, and the set AT yes t o  the set AT If only partial authorization i s  found (le ,-only some o f  the attributes in AT are authorized), this i s  indicated by substracting the authorized attributes from the set AT, and adding them to the set AT yes In this case. the security tree has to be traversed up and down looking for other authorizing rules This is  done by procedures AUTH-UP and AUTH  AUTH UP looks for rules authorizing attributes in  the remaining set AT in all ancestors of the current node until the root o f  the SG On the way up, it may not be possible t o  find  DOWN respectively -  access rules for all attributes because some of them are not known at higher level nodes, and according to  placement rule 1 they cannot be authorized there Therefore such attributes are temporarily eliminated from the set AT If at any point the set AT becomes empty, the traversal up stop, although this may not indicate full authorization because of the eliminated attributes  If AUTH UP did not get the full authorization for the set AT, then A U m  DOWN must be invoked AUTH-DOWN traverses the subtree rooted in the current node in a depth-fbrst manner AUTH DOWN must consider restrictive authorization This means givins authorization to a subclass even i f  access to  the full class was requested (e g , giving access to only FS in case access t o  S was required ) In order to maximize authorization, all children of the current node must be searched However, once restrictive authorlzation was given t o  all attributes in  the set AT, there is  no need t o  search further down because n o  more authorization can be found  After both procedures fimsh, either full authorization IS given (set AT i s  empty), or partial authorization i s  given by the set AT yes The set AT yes i s  then used by the  query evaluation algorithm to restzct access to authorized attributes only  AUTHlU'.A'.QG.SG)  lor each node NI rn QG do  "AT I S  the set of atlrlbutesto be accessed at NI .  aeterminea from QG. and  0 I S  m e  obiecl c l a s s  of N8.l  AT yes = @  i f  t n e r e ~ s a r ~ i e ~ U . A A O ~ r u c n t h a 1  ( U ~ L I ' . A > A ' , A O ~ A : ~  then  -  I*accesi authorlied for all a : m b ~ i e 5 * ~  do  AT-yes = A T ,  AT = + exit end  else i f  there I S  a rule (U.A,ATl) such [hat (U Ju' .  A i A ' )  ana uhere AT2 = fATi a", A-)  andAT2 s 0 then  !*access aufhoruea for some alir#butes*  do  AT-yei :AT2  AT nAT-AT2  end  I *  now check ancestors *  AUTH IIPlU',A'.O' A:,AT-yes)  if AT = then emf,  /*now check descendants'  0 = i e h  son101 In SG  If 0 L null then AUTH-DOWN(U',A',O,AT.AT-yes)  -  -  end do  end AUTH  I I3    AUTH UPIU'.A'.O,AT.AT-~er) ' 'go "pwardr In SG'I - 0 = larher(O1 in SG  if 0 =null thenreturn  / * # I  lhere 4s any allribule in AT which 15 not known a t  this node remove 11 from AT  slnce inere cannot oe any rule referencing 11 a i  this node or above*/  ATR =AT . atmnuter not known ai  0  I'ATR ts used not 10 destroy the original AT'/  r f  lhere ira rule IU.A.AO) such that U I U '  and A I A ' .  and A02ATR then  do  AT - yes =AT-yerUATR.

AT =AT - ATR return,  end  else I f  lhere 8s a rule (U.A.AT1) such lhar U l U  and AZA ' .  wnere AT2 = (AT1 nATR)  and AT2 L c$ and AT2 not included In AT-yes then  do  AT yes =AT yer U AT2  AT =A'-Ar2  ATR = ATR - AT2  - -  end  if ATR = 0 then return. ;*no need 10 conllnue gotng up"  else AUTH-UPlU'.A'.O.AT AT-yer)  end AuTH-UP  AUTH - DOWN(U',A',O.AT.AT-yes) ;'go downwaror an SG'i  ,f inere 15 a rule iU.A,ATl) where u l u '  and AZA '  and AT2 = (ATII?ATI and AT2 = + and AT2 "01 Nncludea 8 "  AT-yes  then do  AT fer =AT qesu OAT2  ' * # n  tnlscareO I S  a more reslricriie onlea ana inat  m u r l  ne nolea 8n AT - yes*/ r f  ATTRI AT-,erl= ATTRiAT) rhen  - -  NO - GOWN = T R U E  ,'h0-50Wt.1 I S  a rlag ana ATTRIOI g've rne re1 01 a!lrlOulr names o f  0':  *no neea 10 go more aovrn 0111 *ve ri i i i  may nave 10 100" :o me rignr for aodirionai  re$ir8cred ooieclr.

