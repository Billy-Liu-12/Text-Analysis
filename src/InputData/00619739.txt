Fuzzy Modelling Operator Navigation Behaviors

Abstract  The paper presents af izzy  modelling method for static and dynamic systems and its application as a tool for learning navigation behaviors from operator ?s actions. The modelling process starts from a set of experimental input- output data, and automaticalb produces a set o f f icq rules, whose number depends on the desired degree of model?s accuracy. The method is based on least squares techniques, and can be used in association with the most common fizzy operators and sets. The paper illustrates the application of the method to model the behaviors of a human expert operator driving a real mobile robot equipped with ultrasonic sensors. Leaming the j3.z-y behaviors makes possible the adaptation of the robot to the environment, and saves design time and efjcorts. The resulting rulebases can be used as building blocks in executing purposeful and robust autonomous navigational tasks.

1. Introduction  Mobile robotics is a field where the application of fuzzy control techniques is beneficial on account of the non- linearities posed by the control system as well as the imprecision of vehicle models and sensor measurements. In general, there are two ways to generate a fuzzy controller.

One is to obtain the rulebase directly from the experience of a seasoned operator or a knowledge engineer. The other consists on fuzzy modelling the operator?s control actions or the process itself, which becomes necessary in complex systems where rules are difficult to state.

Fuzzy modelling techniques represent a good strategy to obtain reasonable nonlinear models. These can be achieved by means of a variety of different approaches, ldce least squares [7][ 131 and another regression techniques [6], gradient descent learning methods, which lie on some traditional methods used in neural nets [2] [IO], and the application of stability criteria over experimental measures  Unfortunately, many of these techniques are difficult to apply in the real world on account of their inherent limitations in some aspects like the type of f izzy operators, defuzzification techniques, shapes of fuzzy sets and, more frequently, their important computational requirements.

P I .

The method presented in b s  paper makes use of efficient least squares techmques to identify the parameters of the rule consequents, as well as improved algorithms to determine the antecedent fuzzy partitions [4]. The result is an automatic fuzzy modelling method that achieves efficient and accurate models at a relatively low computational cost in comparison with existing techmques.

The paper presents results on how to use the identification method as a tool for the design of behavioral control for a real mobile robot, where input-output measures are obtained during human-dnven experiments.

Behaviors for navigation control have been widely and successfidly applied over; the last decade, following Brooks? subsumption archtecture [3]. Basically, in most applications, behaviors are defined as specialized functions that establish a relationship between input values and control actions in order to achieve some particular objectives of autonomous navigation. Appropriately combining and arbitrating the activation of behaviors results in robust navigation in the face of uncertain sensors, unpredictable environments and a dynamic world. Fuzzy logic can be used in the frame of  behavioral control for designing individual behaviors [ 1 I][ 15 1, processing input data from disparate sensors [9][14], or blending outputs from several active behaviors [ 1 13.

The paper is organized as follows. Section 2 presents the modelling procedure. Section 3 discusses the use of fuzzy logic for navigation behaviors. Section 4 describes the application of the method for the design of the fuzzy controller from human driven experiments, and section 5 presents the conclusions. Appendix A shows how the least squares techniques have been applied to obtain rule consequents.

2. Identification Algorithm  The rule base generated automatically by the modelling method consists of rules of the type:  Rk: IF (x, is A,, and x-, is A ,  and ... and x,, is And  where k is the rule number; i, j,.., m vary from 1 to the number of membership functions of the variables x,, x2, ..., x, respectively; and C, is the consequent parameter of the k- th rule, which is a numeric constant.

The fuzzy model is obtained through the following steps:  THEN y is Ck  0-7803-3796-4/97/$10.00019971EEE 1339    FUZZ-IEEE'97  I .  Input the desired accuracy of the fuzzy model.

2. Set the initial fuzzy inference rules.

3. Derive the inference errorfiom the input-output data.

4. Repeat until the inference error falls within the desired accuracy:  4. I .  Select the appropriate region to be divided.

4.2. Produce and add the corresponding new fizzy inference rules to the existing ones.

4.3. Obtain the consequent parameters by the recursive least squares algorithm.

4.4. Derive the inference error f iom the input-output data.

The f i a l  model accuracy is expressed by the user in the first step in terms of an estimation of inference error, i.e. the difference between the real inpub'output data and the values generated by the model. Particularly, the root mean squared error has been used in the implementation:  I N d  where Ndis the numbkr of availible data, andy;, y>are the model-estimated output and the real output, respectively, for the p-th set of data.

In step 2, the rulebase is initialized with a minimum set of membership functions for each variable (e.g., 2 sets per variable). The sets must comply with the two-overlapped condition, i.e. they satisfy, for every value v of the input variable xi = v, the following relations:  with k # j , j  + 1 , where pAj(xi)  and pAj+ (xi) are the membership functions of two consecutive fuzzy sets corresponding to two consecutive linguistic labels in the ordered sets. The consequent parameter of each of these rules is then computed by using the inpub'output data with the recursive least squares algorithm, as described in Appendix A.

Equation (1) is then used in step 3 to estimate the inference error, which is used as the ending condition of the loop comprising steps 4.1 to 4.4.

The universe of discourse of each input variable is divided into regions, which are defied as the space where two consecutive fkzzy sets are overlapped. For instance, the example on Fig. l.(a) has four regions (two for each variable), of which the one defined by sets AQ and A n  is shaded. In order to refme the rulebase, the method decides in step 4.1 which of all these regions needs to be more f ie ly adjusted to its inpub'output data. It must be noticed that this choice is essential because it affects the accuracy of the resulting model as well as the increase of the number of rules. In general, the selection should balance  CLAj(V1 + CLAj+,  ( v >  = 1, PAk(V) = 0,  simultaneously the following priorities: Regions with a h g h  deviation from the original input-  output data.

Regions with a higher number of input-output data,  because their adjustment will have more effect over the general inference error.

Wider regions, in systems with uneven distribution of input-output data, to avoid over-adjustment in small regions with great concentration of data.

The choice of the region might depend on a defrnition of inference error, like in [2], where the mean deviation is considered, leading to the selection of the region with the hghest mean absolute error, regardless of its size or its number of measured data. This approach makes possible the division of regions defmed by few data, which may be undesirable, since it might produce little improvement of accuracy for the whole system and even over-adjustment to noisy input-output data.

Alternatively, the proposed method contemplates the three conditions exposed above by selecting the region that maximizes the following expression:  (2) Nd  where w stands for the width of the region, i.e. the difference between the upper limit of the region and the lower one. This expression takes into account the fact that not all the regions have the same number of data because of their size, without abandoning the mfluence of the concentration of data Ndinside the region. The equilibrium between the concentration of data in a region and the importance of their accuracy in relation with its relative sue is obtained by w/Nd Comparative studies have revealed that the use of (2) for region selection instead of an estimation of inference error (such as (1)) significantly reduces the ratio of number of rules to accuracy.

Then, a twofold partition of the selected region (see the example in Fig. 1) increases the number of rules (step 4.2).

The limits of the two membership functions that originally defined the region must be modified so that the two- overlapped condition is maintained when the new one is  (a) CO) Fig. 1. The selected region (a) is subdivided and  a new membership function is introduced (b).

FUZZ-IEEE?97  inserted. The rule consequents corresponding to the new set of rule antecedents are computed in step 4.3 by the least squares algorithm (see Appendix A).

Finally, expression (1) is used again to check the model accuracy. After a model is available, it can be further refined with new data (or improve its adjustment to the original data) by simply taking up the modelling loop again.

3. Fuzzy logic for the design of navigational behaviors  The behavioral control approach to purposeful mobile robots deals with the decomposition of complex tasks into simple units called behaviors. Thus, appropriately sequencing or blending the outputs of different predefined behaviors results on an ?emergent behavior? that meets the mission?s objectives. Depending on implementations, the complexity of these units may vary from low level actions like ?approaching to the left? or ?going ahead? to lugher level activities such as ?following a corridor.?  The design of autonomous navigation behaviors for real world mobile robots is prone to a fuzzy approach. This is a nonlinear control problem in which the relationship between the real control variables and values perceived by the robot is unknown (due to imperfect sensors and/or actuators), and the models of the environment and the performing system are, at most, partially known. Moreover, behaviors are mostly reactive, i.e. they provide an output control value resulting from some input variables, namely sensor information about the robot and its surroundings.

f i s  trait allows for a mapping of inputs and outputs to antecedents and consequents of fuzzy control rules.

Directly programming the sets of rules is possible for relatively simple control actions, like following a wall [9] or a road [15]. Nevertheless, even in those cases, where advantage can be taken from the linguistic flavor of fuzzy systems, the definition of the rule base and the scaling factors can be a cumbersome time-consuming work, which requires successive refinements over a simulated system andor the real robot. Moreover, more complex behaviors can be too hard to program, given the imprecisions mentioned above. Consequently, effort must be devoted to the development of techniques that facilitate fuzzy modelling approaches.

4. Identification of fuzzy behaviors  In their pioneering paper about fuzzy control for navigation, Sugeno and Nishida [ 121 demonstrated the usefulness of control rules obtained from an experienced operator?s control actions for the particular activity of driving a model car along a crank-shaped corridor.

The Fuzzy Modelling Method presented above has been  Fig. 2. The AURORA mobiie robot.

used to implement fuzzy behaviors on the AURORA mobile robot (see Fig. 2), a four wheeled robot equipped with two ultrasonic sensors at the front and another one at each side, with a ranging distance of about 1.3 meters (see Fig. 3). This robot is 1.4 meters long by 0.8 meters wide [8].

The fuzzy behaviors have been incorporated within the navigation architecture depicted in Fig. 4. Basically, a plan, generated either by a user or an automatic planner, is a sequence of behaviors and their finishing conditions. A supervisor module is in charge of activating and deactivating the behaviors, as the conditions are detected through the sensing system. Sensor information is also used  tractson wheels  Fig. 3. AURORA?S sensing ranges and locomotion.

/ ULTRASONIC  .t SUPERVISOR  \ I \ I  1 Odometry I VEHICLE CONTROL I  Fig. 4. Architectural framework.

FUZZ-IEEE'97  by the behaviors to produce the control action, namely the desired speed and curvature.

The modelling tool has been used to model some of the behaviors needed to make up purposeful tasks in indoor environments, which are sketched in Fig. 5: following walls, following corridors, aligning to walls, and inside comers. The first two behaviors are characterized by tracking a continuous natural feature of the environment (walls and corridors), and the variables needed to accomplish them are just the relative position to the landmark and its first derivative. Details about the wall following behavior model can be found in section 4.1.

Aligning to walls and inside comers are more complex behaviors; both are similar in that the robot reaches a wall perpend~cularly and has to align with it without collisions.

Their input variables involve complex relations between several sensors. The inside comer implementation is described in section 4.2.

In general, a number of teaching experiments (ranging from 15 to 40) where performed for each of the behaviors.

The input-output data were collected at each control interval (every 0.15 s). Only the sensors hectly involved in the behavior were considered (the corresponding side sensor in the case of walls, both sides for the corridor, and the two front sensors together with the inner side sensor for wall aligninment and inside corners). In any case, it is important to consider for the model the least possible number of input variables, because of the size and complexity of the resulting rulebase.

Regardmg the output variables, only curvature has been considered, whereas speed has been kept at a constant value appropriate for each behavior. Speed control can be dealt with independently [SI, because it involves consideration of several kinds of restrictions which depend not only on the status of the current behavior, but also on vehicle constraints, operationaI requirements, security in the face of moving or unexpected obstacles, etc.

During the measurement experiments, the vehicle was driven by the operator through a joystick connected directly to it (see Fig. 6). One of the advantages of fuzzy identification of the driver's behavior is that as long as the available sensors provide enough information to achieve the task, the information perceived by the operator for training  Actual robarporioon \ ' - L  I L _ _ _ - - _ _ -  1  Fig. 6. Operator control and model bounds.

the robot does not necessarily have to be the same. In fact, the dnver's experience and ability to guide the vehicle rests on first-hand visual perception of the operation rather than the interpretation a flow of sensor readings, even if these are presented graphcally.

Another important decision in the design of the teachmg experiments refers to where the output control value is actually measured from. Model bounds in Fig. 6 show how instead of measuring digital pulses from the joystick in order to obtain a "pure" model of the operator, output curvature has been measured from the system response Thus, a high degree of dynamic and hemat ic  adrmssibility is obtained for the modelled control actions.

4.1. Wall and Corridor Following.

Tracking a natural landmark like a corridor or a wall is one of the most common behaviors for indoor navigation Obtaining a curvature control value for these cases is possible by alternative methods, like PID control [15] or direct fuzzy programming [9] .  Nevertheless, there are two interesting reasons for acquiring a fuzzy model from operator guidance: fust, obtaining the rulebase drectly by the modelling tool saves time and developing effort in parameter tuning; second, obtaining a controller that is adapted to the worklng environment, with the capability of reacting to real conditions, llke wall irregularities.

The speed for these behaviors was 0.3 m/s, and it has been observed that the resulting behavior works well with speeds of at least +I- O.lm/s. In these experiments, the operator tried to drive the vehicle along a line on the floor, drawn in the middle of a corridor or parallel to the wall (0.85 meters from it). Most of the interest in these training experiments was on starting from a variety of different initial postures, so that the state space was covered as much as possible with inputloutput data. On the other hand, no attention was paid as to obtain an homogeneous input' output sample. In fact, data is mostly concentrated around  (A) (B) (C) @) the equilibrium status (centered along the conidor or Fig. 5. Some useful behaviors for indoor aligned to the wall at the desired distance), since all training  navigation. A) Following wall, B) Corridor, C) experiments eventually reach it.

Align with wall, D) Inside Corner.

FUZZ-IEEE'97  Travelled distance (m)  -0.5 ' 0 1 2 3 4 5 6  Travelled distance (m)  Fig. 7. Curvature and distance to wall in one of the teaching experiments.

Two input variables were used in both behaviors: the  measured distance and its first difference for the wall behavior, and the difference between both sides and its fmt difference in the case of the corridor behavior. The resulting rulebases contain 12 and 18 rules respectively. It must be mentioned that for the corridor case, more input variables were tried (considering independently the measures fiom both sides and their first differences), but the result was not good enough to compensate for an increase in the number of rules.

Fig 7 shows data fiom one of the corridor training experiments. The control action produced by the human operator was quite nervous and over-actuated, so it takes some time for the robot's dynamics to react completely.

When the equilibrium is reached, oscillating (and contradictory) actions were taken. All of these were filtered by the fuzzy model, whose results on a similar experiment are presented in fig. 8. The controller's actions are smoother, and they do not oscillate so much when the center is reached.. These results are similar to what could be expected if alternative control methods were used, but at a lesser development cost.

4.2. Inside Corner and Wall Alignment.

These behaviors, in which the robot reaches more or less perpendxularly a wall and alings with it, are much more complex than tracking a single landmark. In the first place, they involve several different inputs, not just the deviation from an objective. Then, several important decisions must be taken based on inaccurate input data: when to start turning, and what curvature exhibit at each moment. Sensor inaccuracies arise not only from operational errors, but also about the moment in which the data were obtained, since the robot is moving while sensors are being automatically fired.

