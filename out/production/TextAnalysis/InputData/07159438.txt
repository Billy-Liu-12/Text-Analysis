

Abstract - The main objective of Network monitoring is to understand the active events that happen frequently and can influence or ruin the network.  In this paper, we have introduced an efficient method of Closed Frequent item set mining over data streams for visualizing these events. The proposed MFCI-SWI (Mining Frequent Closed Item sets using Sliding Window with Intersection method) algorithm processes the data stream for mining only when user requires.

Otherwise simply slides the window and receive the new transactions. Experimental evaluations on real datasets show that our proposed method outperforms recently proposed TMoment algorithm.

Keywords: Data mining; Frequent Closed Itemsets; Sliding windows; Trans-sequence representation

I. INTRODUCTION  It is very difficult to implement efficient monitoring in real time, because of the varying and dynamic characteristics of network traffic including fast transfer, huge volume, shot-lived, and infinite.

Due to these challenges, a frequent pattern mining algorithm over data streams must scan every incoming transaction only once. Moreover, it must adapt itself to recent changes of incoming data stream. Furthermore, due to high speed and large amount of incoming data, algorithm must require a limited memory and processing time.

Frequent itemsets are the itemsets that come together frequently. Closed frequent itemsets are the itemsets whose superset does not have the same support count. Closed frequent itemsets require limited memory space while it contains the same information. Hence we have concentrated on mining closed frequent itemsets. Recently, a number of algorithms for mining closed itemsets and other type of compact representations of itemsets within data stream have been proposed [9-15].

In the proposed algorithm, substring operation is used for window sliding and intersection method is used for mining frequent closed itemsets.

The proposed method is very efficient since it processes the data stream for mining only when user  requires. Otherwise simply slides the window and receive the new transactions. Experimental evaluations show that MFCI-SWI has better runtime and consumes lower amount of memory with respect to recently developed TMoment algorithm. In the next section, some related works are reviewed.

Section 3 states the problem. In section 4, the proposed algorithm is introduced. Experimental results are presented in Section 5. Finally Section 6 concludes the paper.



II. RELATED WORK  Mining frequent itemsets in data stream can be divided into three categories: landmark-window based mining, damped-window based mining and sliding-window based mining.

In a landmark window model, frequent pattern mining is performed based on the values between a specific timestamp called landmark and the present [1-4]. In the damped window model, recent windows are more important than previous ones [5-6]. In a sliding window model, knowledge discovery is performed over a fixed number of recently generated data elements which is the target of data mining [7- 9].

Moment is the first streaming algorithm to mine closed frequent itemsets within a transaction- sensitive sliding window proposed by Chi et al. [10].

An in-memory data structure called closed enumeration tree (CET) maintains a dynamical set of itemsets which contains closed frequent itemsets and itemsets that form a boundary between closed frequent itemsets and the rest of the itemsets. In Moment, the exploration and node type checking are time consuming. The algorithm Stream_FCI[11] mines frequent closed itemsets from data streams using sliding window. It uses a DFP-tree with a head table. In processing each new transaction, the algorithm changes the head table and modifies the DFP-tree. The algorithm TMoment [12] uses sliding window model to find closed frequent itemsets. Data structure named TCET is used for storing and updating closed frequent itemsets of the window. In       this study, we have proposed an algorithm called MFCI-SWI for mining closed frequent itemsets within sliding window.



III. PROBLEM STATEMENT  Let I={ i1,i2,i3, ???,im} be a set of distinct data items and a subset X?I is called an itemset. A Transaction Data Stream TDS= {(tid1,t1), (tid2,t2), ?.., (tidn,tn) ?.}, is infinite sequence of transactions, where tidj is the transaction identifier and tj?I (j=1,2,?..,n) is an itemset. The support sup(X) of an itemset X is defined as the number of transactions with X as a subset. The itemset X is frequent if sup(X) ? min_sup, where min_sup is the minimum support threshold given by the user and it is in the range of [0,w]. Sliding Window SW is defined as the recent W number of transactions. In other words, Sliding Window always contains constant number of transactions. In SW an item set X is closed, if it is frequent and it does not any superset with the same support count.

Example 1 let ? = {A;B;C;D}, D ={CD;AB;ABC;ABC}, and s = 1/2 , then Frequent Itemsets are F = {(A; 3); (B; 3); (C; 3); (AB; 3); (AC; 2); (BC; 2); (ABC; 2)} Closed Frequent Itemsets are CFIs = {(C; 3); (AB; 3); (ABC; 2)}       Fig.1. Processing a data stream using sliding window model.



IV. MFCI-SWI ALGORITHM  In this section, we describe the proposed algorithm named MFCI-SWI. This algorithm is based on storing transactions in an efficient manner. The algorithm uses three hash tables each for storing bit- sequence representation, trans-sequence representation and Frequent Closed Itemsets.  The hash table, which uses for storing bit sequence representation, is only used frequently. Others are used only when users require the output.

A.  Bit-sequence representation of items  In MFCI-SWI algorithm, for each item in the current sliding window, a bit-sequence with w bits, denoted as bit(X) is constructed. If an item X is in the ith transaction of current SW, the ith bit of bit(X) is set to be 1; otherwise, it is set be 0. For example, the bit-sequence representation for the items in SW1 from the Fig.1 as bit(A)=0111, bit(B)=0111, bit(C)=1011 and bit(D)=1000.

B. Calculating support counts  The support count for an itemset is calculated by counting the number of ones in bit-sequence representation of items. For example, in SW1 the support count for the item A is bit(A)=0111=3, B is 3, C is 3 and D is 1. For every window sliding phase remove the item from the bit-sequence hash table if all the bit values are zero.

C. Trans-sequence representation of items  Trans-sequence representation is formed only for the items which are having greater than or equal to the minimum support count values.

TABLE 1. BIT-SEQUENCES AND TRANS-SEQUENCES OF ITEMS IN SW1 AND SW2  Wind ow id  Transa ctions  Bit-sequences of Items  Trans-sequences of items  SW1 CD AB ABC ABC  Bit(A)=0111 Bit(B)=0111 Bit(C)=1011 Bit(D)=1000  Trans-seq(A)=234 Trans-seq(B)=234 Trans-seq(C)=134 Trans-seq(D)=1  SW2 AB ABC ABC BCE  Bit(A)=1110 Bit(B)=1111 Bit(C)=0111 Bit(E)=0001  Trans-seq(A)=123 Trans-seq(B)=1234 Trans-seq(C)=234 Trans-seq(E)=4   Hence there is no need for forming trans-sequence for all the items in the current sliding window. Trans- sequence representation is the one which converts 1s from bit sequence form into their corresponding position in decimal representation. For example, Bit(A) is written in Trans-sequence representation as Trans-sequence(A)=234. Similarly, Trans-sequence (B)=234, Trans-sequence(C)=134 and Trans- sequence(D)=1.

D. Updating Closed Frequent Itemsets Hash Table  Initially the Hash Table for the closed frequent itemset contains frequent-1itemsets with values. Then for every intersection operation the values are updated as follows:            Case (i)   IF A=B  A B Case (ii) IF A?B  B Case (iii) IF B?A  A Case (iv) IF A?B  B A   Fig.2. Activities to be taken on various cases  For example, we are considering two items A=123 and B=12. From the Fig .2, the example falls on the case (iii). Hence the item B is deleted from the Hash table and AB is added.

E. Mining FCIs through intersecting items  Once the Trans-sequences of items are formed, only the items whose support count value greater than or equal to the minimum support,  are considered for FCI generation. In SW1, Trans-seq(A) is intersected with Trans-seq(B) and Trans-seq(c).

Trans-seq(B) is intersected only with Trans-seq(c).

FIs(AB) = Trans-seq(A) ? Trans-seq(B) = 234 FIs(AC) = Tran-seq(A) ? Trans-seq(B) = 34 FIs(BC) = Tran-seq(B) ? Trans-seq(C) = 34 FIs(ABC) = Trans-seq(A) ? Trans-seq(B) ? Trans-seq(C)=34  The algorithm uses three hash tables each for storing bit-sequences, trans-sequences and Frequent Closed Itemsets. The hash table for storing bit- sequences is only used frequently. Others are used only when users wish to view the FCIs.

The hash table for FCIs is initially started with frequent 1-itemset values. Then for every, successive iteration values in the hash table are updated. Finally it contains only the frequent Closed Itemsets. For every intersection operation, base item with equal support count value of the resultant item is removed from the hash table and the resultant item which satisfies the minimum support count is added to the hash table.

Algorithm MFCI-SWI Mining Frequent Closed Itemsets over Data Stream using Sliding Window with Intersection   Input:  Transaction Data Stream TDS Minimum Support count threshold in the range of [o,1] ms Sliding window size wsize   Output: Set of Frequent Closed Itemsets FCIs  1. Read wsize and ms 2. Read wsize number of transactions  1For every transactions, form bit- sequences of every items  3. Get the user?s choice whether they wish to view the FCIs.

If yes, 1. Calculate the support count for every items.

2. If  Support count >= ms then 1. store the item with its support count values  in a hash table 2. Form the trans-sequences of items 3. Repeat Until there are no more transactions  formed 1. For every trans-seq(X), form the  intersecting itemsets with every other succeeding trans-seq(Y) items.

1. If sup(trans-seq(X) ? trans-seq(Y) >=  ms) then 1. Add the resultant itemset with its support  count values into a hash table  2. If trans-seq(X) = trans-seq(y) then remove both items with its values from  the hash table  3. else if trans-seq(X)?trans-seq(Y) then remove item X with its value from the hash table  4. else if trans-seq(Y) ?trans-seq(X) then remove item Y from the hash table  4. Display all the FCIs from the hash table 4. Remove the first bit for all items of bit-  sequences using substring method.

5. If all the bit values are zero, remove the item  from the hash table of bit-sequences.

6. Repeat the steps through 3 to 5 for every new  incoming transaction.

Fig. 3 Algorithm MFCI-SWI       If A=B Delete A from the Hash table Delete B from the Hash table ADD AB into the Hash Table  If B?A Delete B from the Hash table Add AB into the hash table  If A?B Add AB into the hash table  If A?B Delete A from the Hash Table  Add AB into the hash table       TABLE 2. FCI HASH TABLE CONTENTS FOR SINGLE ITEMSETS  Wind- ow id  Transa c- tions  Bit- sequences  Trans- sequences  FCI Hash table Contents  SW1 CD AB ABC ABC  Bit(A)=0111 Bit(B)=0111 Bit(C)=1011 Bit(D)=1000  Trans- seq(A)=234 Trans- seq(B)=234 Trans- seq(C)=134 Trans- seq(D)=1  A: 3 B: 3 C: 3    TABLE 3.  FINAL HASH TABLE CONTENTS   Window id  Trans- sequences for 2- itemsets  FCI Hash table Contents  Trans- sequences for 3- itemsets  FCI Hash table Contents  SW1 Trans- seq(AB)=234 Trans- seq(AC)=34 Trans- seq(BC)=34  A: 3 AB: 3 B: 3 AC: 2 C: 3 BC: 2  Trans-seq (ABC) =34  C: 3 BC:2 AB: 3 ABC: 2 AC: 2

V. EVALUATING THE PERFORMANCE OF MFCI-SWI  In this section, we compare the performance of  MFCI-SWI to recently proposed TMoment[12] algorithm. Two programs have been implemented using Java language in NetBeans IDE 6.0.1. The experiments were performed on a desktop computer with intel? core2duo CPU processor having 2GB main memory and running on windows XP. We have performed extensive experiment using several real and artificial datasets.

Fig. 4 shows the comparison of memory utilization and Fig. 5 shows the runtime performance with TMoment algorithm.

Fig. 4. Comparisons of Memory utilization

VI. CONCLUSION   In this study, we have introduced a new approach named MFCI-SWI for mining all closed frequent itemsets in the field of Network monitoring. Hash table based storage improves the efficiency as well as reduces the memory requirements. Intersecting only the minimum supported itemsets reduces the repeated scanning of the itemsets. Experimental evaluations on real and artificial datasets show that the proposed approach is better than previously proposed algorithms since it uses a lower memory and requires smaller time. Therefore, it is suitable for high speed and unbounded transactional data streams.

