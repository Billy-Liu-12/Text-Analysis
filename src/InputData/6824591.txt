An Application of Recommender System with Mingle-TopN Algorithm on B2B  Platform

Abstract?Personalized Recommender systems have been widely used on many large websites in various business fields to tackle with problems like excessive information and information overload. For the purpose of improving user experience and stickiness, this study proposes a personalized Recommender system for facilitating the users in the B2B E- Commerce platform to retrieve and extract information. The proposed Mingle-TopN hybrid Recommendation algorithm combines collaborate filtering and content-based filtering, to improve the effectiveness and efficiency of the recommendation. The Mean Absolute Error (MAE) is used as the metric to evaluate the developed Recommender system.

Results show that: when the number of items exceeds 600, the proposed method trends to achieve a stable performance with a MAE of 0.73. These experiments validate that the improved recommendation algorithm is better than the Pearson-TopN and Cos-TopN by 10.61 % and 13.45%, respectively.

Keywords?recommender system; collaborative filtering; Mingle-TopN algorithm; B2B platform

I. INTRODUCTION With the rapid development of internet technology and  E-commerce, the growing amount of information and data volumes are threatening individuals as well as enterprises.

Although having sufficient information will benefit people, but the massive data sizes have also led to users spending extra time on retrieving useful information. Therefore, information retrieval techniques that adapt to this modern world of drastically increasing data are in urgent demand.

In the case of E-commerce where excessive varieties of goods are available online nowadays, internet buyers could experience a hard time finding the exact items they want. It has become a major demand that internet marketplaces make quality recommendations to buyers based on their personalized preferences. Under this circumstance, Personalized Recommender Systems for E-Commerce emerged. Unlike traditional techniques that make generalized recommendations to all buyers, personalized recommendation techniques emphasize on providing each buyer with recommendations based on their individual interest and preference.

In the meantime, recommender systems are becoming a significant means of solving information overload for various websites. Many well-known websites had success getting visitors to buy and finding buyers' potential needs. A  buyer may have multiple interests. A good user preference history log (or user log) should be able to reflect all one's interests and enables quality recommendations under various occasions. In general, recommender systems extract useful information from user logs and store it in corresponding buyer profiles for making recommendations in the future.

Techniques in Personalized Recommender Systems include content-based filtering and collaborative filtering. These two types of techniques have their own advantages and disadvantages; they both involve a process of extracting essential contents, representing user interests, as well as relating contents to user interest. However, collaborative filtering is shown to be less effective in making recommendations to cold start users [1], which is a reasonable outcome since it is based on user similarities and cold start users usually have insufficient data in their logs.



II. RELATED WORK A typical Recommender system consists of an input  module, an output module, and an algorithm module. The algorithm module, the core of a Personalized Recommender System for E-Commerce, determines the performance of the whole system. It analyzes contents obtained from the input module and passes the results to the output module in a real- time and accurate manner. Real-time updates to recommendation results are required if any alter occurred to user preferences; only accurate recommendations can meet the purpose of finding users' potential interests. The algorithm module is made up of an analyzer and a predictor.

The analyzer retrieves information from input and quantifies it based on certain models, e.g. the vector space model. The predictor, which is essentially a Recommendation algorithm, determines the quality of recommendations. Several common recommendation algorithms will be introduced in the following section.

A. Collaborative Filtering The collaborative filtering technique was first introduced  and applied to Tapestry by Goldberg, Nicola et al [2]. It became a new method for recommendation, though lacking technological maturity. As improvements were implemented over time, Automated Collaborative Filtering (ACF) technique based on rating scores emerged [3]. At the present time, collaborative filtering have became a crucial technique for Personalized Recommender System for E-Commerce,   DOI 10.1109/CBD.2013.10     used by well-known companies such as Taobao, Amazon, and Jingdong.

The evolution of collaborative filtering has two stages: memory-based and model-based. Memory-based collaborative filtering primarily 1) seeks for users who share the same patterns with the current user (the user whom the prediction is for) and 2) calculate the ratings from the similar users found in 1) to determine a prediction for the current user.

The There are three main steps in a memory-based collaborative filtering process:  1) Retrieve valid user Information: Valid user information comes in the form of a Buyer-Item matrix where rows correspond to buyers and columns correspond to items. It is obtained from the web server database. mnR is used to represent click rates or purchase rates, which is based on ratings for n items from m users.

2) Query " neighbors" of Current User: Querying for a certain user's neighbors requires calculating similarities between users. For example, similarity between user ? and user ?  is calculated as  ?? ?  ??  ?  ??  ?? =  ????  ??  ????  ???? ??  Ii iIi i  Ii ii  RRRR  RRRR sim  ,  ,  ,,  )()(  ))(( ),(  (1)  where  ??I stands for items both user ?  and user ?  rated  in the past, iR ,? is user ? 's rating for item i, ?R  is user  ? 's average rating for all rated items; ?R is user ? 's rating  for item i, ?R  is user ? 's average rating for all rated items.

Once similarities are calculated, a set of N other users  with the highest similarities can be regarded as the current user's nearest-neighbor group.

3) Generating Recommendation Items: Querying The set of recommendation items for the current user is obtained based on nearest-neighbor-user data and extracted from items that have not been rated by the current user. User? 's interest for an item that has not been visited is measured as  ? ?  ?  ? ??  += ?  ?  ?  ? ?? ?  ??  ??  SNI  SNI n na sim  RRsim RP  ),(  )(),( , ,      (2)  Where  nP ,? is the interest measure value, ?R is user ? 's average rating for all rated items, ?SNI is the set of ? 's nearest-neighbor users, ),( ??sim  is the similarity between user ?  and one of ? 's nearest neighbors ? , nR ,?  is user ? 's rating for item n, ?R  is user ? 's average rating for all rated items.

Recommender systems based on collaborative filtering exploited all user information, so that the amount of total  effective information is maximized, therefore effectiveness and efficiency could be improved. However, with the increasing complexity web structure and web contents, shortcomings of collaborative filtering emerge, to name a few:  ? Early rater problem. Collaborative filtering systems cannot provide recommendations for new items since there are no user ratings on which to base a prediction. Even if users start rating the item it will cost some time before the item has received enough ratings in order to make accurate recommendations.

Similarly, recommendations will also be inaccurate for new users who have rated few items.

? Sparsity problem. In many information domains the existing number of items exceeds the amount a person is able (and willing) to explore by far. This makes it hard to find items that are rated by enough people on which to base predictions.

? Gray sheep. Groups of users are needed with overlapping characteristics. Even if such groups exist, individuals who do not consistently agree or disagree with any group of people will receive inaccurate recommendations.

B. Content-based Filtering The Content-based filtering technique has its roots in  information filtering and text mining techniques.

In the example of a content-based Recommender system  of a movie website, recommended items can be documents, while each document is represented by a set descriptors or terms (properties of a movie) that occur in the document.

The content-based recommender system categorizes items (movies) based on their properties, thereby recommending items that are similar to users' reviewed or watched items.

Content-based filtering uses users' history data to create user profiles, just like collaborative filtering; the long term models take into account user preferences that change over time and updates user profiles.

Well known weaknesses in content-based filtering include:  ? Content description. In some areas, generating a useful description of the content can be very difficult.

When items consist of music or video it is not always possible with today?s technology.

? Over-specialization. A content-based filtering system will not select items if the previous user behavior does not provide evidence for this. Additional techniques have to be added for the system to make suggestion beyond what the user has already shown interest in.

? Subjective domain problem. i.e., difficulty in distinguishing between subjective information such as points of views and humor [4].

C. Hybrid Filtering Techniques A system that combines content-based filtering and  collaborative filtering may have advantages of both the representation contents as well as the similarities between users. Although there are several ways to combine the two techniques, a distinction can be made between two basic approaches. A hybrid approach combines the two types of information while it is also possible to use the recommendations of the two filtering techniques independently [5].

D. Purpose of Study Most recommender systems today use user ratings to  describe users' preferences toward items. Such rating systems have been applied to B2B E-commerce platforms.

Ratings used in B2B E-commerce platforms are extracted and calculated based on user behaviors; by applying recommendation techniques, recommendations of items or business information are then provided to users. Recent years, most E-commerce platforms rely on just one recommendation algorithm or hybrid recommendation algorithms, e.g. Pearson-TopN and Cos-TopN [4].

Accuracies as well as efficiencies of these algorithms are not satisfactory. Moreover, conducting evaluations on algorithms can be difficult with lags for the effects of recommender systems, which can be up to weeks and months.

In this study, for the purpose of better user experience on B2B E-commerce platforms, a combined personalized recommendation technique is introduced, thoroughly evaluated, and applied to real-world applications. Emphasis is put on designing a full-function recommender system for B2B E-commerce which is optimized for various recommendations, e.g. recently-viewed items, same category items, searched keywords, and what-is-also-viewed by similar users.



III. THE PROPOSED ALGORITHM AND RECOMMENDER SYSTEM  A. How a Recommender System Work Users may have various behaviors while on a B2B  website, such as browse, search, request a quote, etc. These behaviors indicate that users have not yet found the product that they want to buy and are open to suggestions and recommendations; this is when a recommender system comes in. Showing users items that appeal them could result in significant increase in the total number of inquiries.

First of all, fine classification of user activities on a B2B website is conducted. User activity data is analyzed on users' different level of attention on various items. Then, appropriate technique(s) is chosen and recommendations of items of interest can be made. The process is shown in Fig.1.

Fig. 1.  Chart of a typical Recommender system work flow  Recommendations can be divided into various types: a) Recommendations based on user's recently viewed  items; this is made by analyzing real-time properties of items.

b) Recommendation of quality items in the same  category; category of recommended item is the same as the item the user is currently browsing.

c) Neighbors-preferred recommendation, which is based on the current users recent browsing history as well as what similar users have browsed or inquired.

d) Selected category recommendations; this is based on a selected category relevant to the item viewed by the user.

e) Recommendations based on searched keywords.

According to the keywords user used in the current search, quality items associated with that keyword are recommended.

Recommender system technique that is eventually adopted, determined by the property of different website module as well as which type of recommendation is chosen, is critical to making accurate recommendations.

B. Recommender System Architecture A complete B2B E-commerce Personalized  Recommender System consists of six modules: behavior tracking module, pre-processing module, input module, recommendation algorithm module, output module, and application module.

Behavior tracking module is responsible for tracking and recording user behaviors that reflects users' preferences, such as searched keywords, browsed items, inquired companies and items, and viewed offers. This module contains user logs and scheduler for importing logs and related data into the data warehouse.

The pre-processing module pre-processes the data that goes into the data warehouse. It cleans the data and effectively controls data size in order to improve efficiency in future calculations. It also reduces data noise to achieve better precision. The final product of the pre-processing module is a data market table ready for recommendation algorithms that hold user behaviors, potential behaviors, and item properties. The input module integrates and converts data from the pre-processing module into a format required by the recommendation algorithm module. The main     function of the recommendation algorithm module is to analyze user behavior and item properties stored in the data market. It adopts suitable algorithms to generate lists of recommended items that meet the demand of the application module. The final module in the recommender system, the application module filters output of the recommendation module and extracts recommendations the current user possibly needs under the current scenario.

In this study, different recommendation techniques, i.e.

collaborative filtering, content-based filtering, and hybrid filtering, are adopted according to different scenarios defined in the application module. Fig.2 demonstrates the full structure of the Recommender system. The fundamental technique used is content-based filtering. However, user- based collaborate filtering and content-based-combined filtering are adopted for better accuracy and performance in making Neighbors-preferred recommendations.

Fig. 2.  FocusTech Recommender System architecture  C. Mingle Recommendation Algorithm The Mingle-TopN algorithm employed in this study is an  improved version of Mingle Personalized Recommendation algorithm. It first establishes a user model; afterwards, similarities are calculated and Top-N recommendations are made. Improvements in the following aspects are implemented: 1) the rating system in collaborate filtering is set as implicit in Mingle-TopN; ratings are all standardized.

2) When calculating similarity, Jaccard Similarity is used in substitution for the traditional Pearson correlations and Cosine similarity. 3) Collaborate filtering and content-based filtering works in a hybrid way, where the content-based  counterpart takes keywords of products as item properties (All products listed in the FocusTech database has a field Keywords, which is ideal for item information extraction and analysis).

1) User Model:  TABLE I.  USER RATING MATRIX SAMPLE   Table 1 demonstrates an example of user rating matrix.

Each user's behaviors associated with an individual item has a standardized rating in the range of 1 to 5.

TABLE II.  PRODUCT KEYWORD DIMENSION TABLE   As shown in Table 1, behavior record for buyer1 is  Action(product2,product4, product5); user profile is based combined contents in Table 1 and Table 2. For instance, Buyer1's profile would contain Content(keyword2, keyword4, keyword5, keyword6). The ultimate user model, therefore, will be in the form Buyer1(Action(product2,product4, product5), Content (keyword2, keyword4, keyword5, keyword6)).

2) Similarity Calculation. Calculation of similarities consists of user behavior similarity and item similarity. For behavior similarity of user a and user b based on Jaccard Index, Action_sim(a,b) is measured by intersection set of a and b's preferences divided by the complement set of a and  b's preferences: )()( )()(  bActionaAction bActionaAction  ? ?  . When both  user a and user b expressed same actions toward a non- popular item, this should be a stronger indication of similarity between these two users; on the contrary, indication of similarity should be weaker if they shared behaviors towards popular items. For example, if user a and user b both bought a tube of toothpaste, it is hardly a sign of high similarity. If they both bought durian flavor soda, which should show that they are both interested in durian  Product  Product  Product  Product  Product  Buyer1 2 3 2 5 3 Buyer2 1  4 2 4 Buyer3 3 4  2 Buyer4 2  3 4 5 Buyer5 5 1 3  2  Product Name Keywords Product1 Keyword1 Product2 Keyword2 Product3 Keyword3 Product4 Keyword4, Keyword5 Product4 Keyword6     flavor. Thus a weighting factor 1)(int  ?iereste  is involved in the equation for Action_sim(a,b), based on the fact that item popularities follow a log distribution[7]. Here interest (i) is the total number of users who are interested in item i.

Finally, the measure of user behavior similarity can be derived:   )()(  )1( ),(_ )()(  )(int  bActionaAction  e basimAction bActionaActioni  ierest  ?  ? =  ? ??         (3)  Item similarity can be calculated following an equation in a similar form. Knowing user models for user a and user b: a(Content(keyword1, keyword2, keyword3,?keywordk,..)), b(Content(keyword 1, keyword3,?keywordk,..)), by taking item popularities into consideration, item similarity can be measured as:   )()(  )1( ),(_ )()(  )(int  vContentuContent  e vusimContent vContentuContentt  ierest  ?  ? =  ? ??          (4)  Where Content (a) and Content (b) are sets of item that a  and b interacted with, respectively. )(int ierest  represents the number of users that have interacted with item i.

The final user similarity is defined as weighted average of user behavior similarity and item similarity, i.e.:  ),(_)1(),(_),( vusimContentvusimActionvusim ?? ?+= Here ? is a weighting factor called the Recommendation  Coefficient. It is within the range of [0, 1] need to be determined via experiments for optimal performance in real- world applications. An optimal ? weighting factor will be derived for FocusTech's B2B E-commerce platform in the next section (Section 4.4).

3) Mingle-TopN Recommendation Algorithm: In real- world applications, the Top-N methodology, which takes the top N items with highest user preference ratings, is widely adopted. User a's preference towards an item i not yet rated by a is determined by:   )()(  )1(  )(),(  ),( ),( )()(  )(int  )(),(  iContentaContent  e  imKaS  basim iap iContentaContentt  ierest  imKaSv  ?  ? +  ? =  ?? ????         (5)  The first term on the right-hand side of the equation,  )(),(  ),( )(),(  imKaS  basim imKaSv  ?  ? ??  represents the preference measured based on  neighboring users, where S(a,K) is a set of K users that are most similar to user a, m(i) is the set of users who had actions relating to item i, and sim(a,b) is a and b's user  similarity.

)()(  )1( )()(  )(int  iContentaContent  e iContentaContentt  ierest  ?  ?? ??  calculates a preference value  based on item contents, where )(aContent  is the set of item user a interacted with, )(iContent  is properties (keywords) of item i.



IV. RESULTS  A.  Experiment Setting Data used in this study are Made-in-China.com (a B2B  website operated by FocusTech) access log, login log, and user inquiry logs for January to June, 2013, and full record of user data and product information. Ratings are results of weighting and standardizing collected user behavior (inquire, click, viewing an offer, etc.) data.

Each user's behaviors associated with an individual item has a standardized rating in the range of 1 to 5. No recorded behavior results in a null value. Rows in the table indicate buyers' rating vectors, while columns indicate products' rating vectors.

Product keyword dimension table shown above is an example of FocusTech's product data table contents. As for content-based filtering, additional fields and product properties need to be taken into consideration as well for optimal result in product feature extraction and indexing.

Normally, the keyword field associated with every product contains multiple keywords, all stemmed using Porter Stemmer [8].

B.  Evaluation of Recommendation Effectiveness The accuracy of a Recommendation is evaluated by  measuring the Mean Absolute Error (MAE) of Recommendation algorithm between predicted ratings and actual user ratings. Specifically or B2B platforms, MAE needs to be converted to an estimate of real-world effectiveness, i.e.:  ? ?  =  =  ? =  n  i  m  j iji  Un  NmM MAE   ,  )(  /)(   (6)  U is the full set of users in the buyer database, n is the number of items recommended, m is the number of total months studied; Mij is the rating of item i after the first j months, Ni is the rating of item i after the Recommender system is under use. The larger the value of MAE is, the higher the accuracy of algorithm achieve. Thereby, as long the recommendations are made in a timely manner, quality is assured.

C.  Mingle Top-N Test Experimental Results Test data is real-world data from FocusTech B2B E-  commerce platform database. It includes records of 5,000 users, 6,000 products, and approximately 2,000,000 ratings.

The data is divided into 2 counterparts: one counterpart (January to June, 2013) is data before the Recommender system is implemented, the other counterpart (July 2013) for comparison with the first counterpart to evaluate the accuracy and effectiveness of the Mingle Recommendation Technique.

Fig. 3.  Comparison for effectiveness of Mingle TopN Algorithm with  Pearson TopN and Cos Top-N through MAE  As shown in Fig.3, Recommender System using Mingle TopN Algorithm has an improved MAE as the number of products increases; MAE eventually stables at about 0.87.

When the number of products reaches the threshold of 600, the Mingle TopN Algorithm have shown to have a better MAE than Pearson TopN and Cos Top-N by 10.61 % and 13.45%, respectively. This demonstrates Mingle TopN Algorithm's superior performance over Pearson TopN and Cos Top-N on FocusTech's B2B E-commerce platform.

D. The Influence of the Coefficient ? An optimal Recommendation Coefficient ?, i.e. the best  weighting factors of user behavior similarity and item similarity need to be derived, so that Mingle-TopN Recommendation algorithm can perform at its best. The ? factor has a range of [0, 1]. A ? factor of 0 means user similarity is solely based on item similarity, while a ? factor of 1 means user similarity is based on just user behavior similarity.

Fig. 4.  The Influence of the Coefficient ?  Here MAE is used to determine the performance of Mingle TopN Algorithm with varying ? values (Figure 4).

When ?=0.72, MAE reaches its peak value of 0.72. As ? approaches either 0 or 1, MAE gradually decreases. The optimal Recommendation Coefficient of ?=0.72 also reflects that user behavior similarity is a better predictor for user similarity, though item similarity should also be taken into account.



V. CONCLUSIONS In this study, common recommender system technique,  content-based filtering, collaborate filtering, and hybrid Recommendation techniques, are all investigated and discussed for B2B E-commerce applications. An improved Mingle-TopN Recommendation technique, which combines content-based filtering and collaborate filtering is introduced and implemented into a B2B E-Commerce Personalized Recommender System. The Mingle-TopN algorithm calculates the similarity of user behavior and the similarity between items. An optimal weighting of the two factors is derived to achieve the best user similarity. Recommendation results for FocusTech B2B E-commerce platform proved to be superior to recommendations made through other algorithms tested using FocusTech's Mada-in-China.com business data.

Several minor problems are encountered when using the Mingle-TopN algorithm. Trouble with tackling with large data sizes, calculating similarities, and keyword matching are some of the factors influencing the quality of recommendations. Future improvements to the algorithm as well as evaluation methodology require further study to achieve higher recommendation accuracy and extendibility.

