Data Mining based CIDS: Cloud Intrusion Detection  System for Masquerade Attacks [DCIDSM]

ABSTRACT?Data mining has been gaining popularity in knowledge discovery field. In recent years, data mining based intrusion detection systems (IDSs) have demonstrated high accuracy, good generalization to novel types of intrusion, and robust behavior in a changing environment. Still, significant challenges exist in design and implementation of production quality IDSs.

Masquerade attacks pose a serious threat for cloud system due to the massive amount of resource of these systems.

This paper presents a Cloud Intrusion Detection System (CIDS) for CIDD dataset, which contains the complete audit parameters that help in detecting more than hundred instances of attacks and masquerades that exist in CIDD. It also offers numerous advantages in terms of alert infrastructure, security, scalability, reliability and also has data analysis tools.

Keywords- Dataset, Data mining, Intrusion detection

I. INTRODUCTION  With the rapid development in technology during the past decade and the unprecedented growth of the Internet, people have become increasingly aware of the threats to personal privacy through computer crime. Attackers have become more sophisticated in the methodologies they use to intrude into the corporate networks [15]. Intrusion detection is an area growing in relevance as more and more sensitive data are stored and processed in networked systems. The goal of intrusion detection system (IDS) is to provide another layer of defense against malicious (or unauthorized) uses of computer systems by sensing a misuse or a breach of a security policy and alerting operators to an ongoing (or, at least, recent) attack. A comprehensive IDS requires a significant amount of human expertise and time for development. Data mining- based IDSs require less expert knowledge yet must provide good performance [7, 15, 16, 9].

Current approaches to masquerade detection integrate anomaly and misuse detection. Anomaly detection foresees future behavior based on past actions. Misuse detection applies a statistical approach to determine if an action constitutes an attack [6]. IDSs can also be distinguished on the basis of the audit data source (e.g., network-based, host-based, cloud-based). [9, 7] Building IDS is a complex task of knowledge engineering that requires an elaborate  infrastructure. An effective production-quality IDS need an array of diverse components and features, including:  ? Centralized view of data ? Data transformation capabilities ? Data mining methods ? Real-time detection ? Alert infrastructure ? Reporting capabilities ? Data analysis ? System availability A masquerader is an attacker who masquerades as a legal  user after violating the user account. Security technologies such as firewalls or authentication protocols are useless because, after logging as a legal user, an attacker can exploit any user privilege. The detection of masquerade attacks is quite difficult because even the legitimate daily activity can easily become malicious according to its context. Furthermore, since cloud systems include a massive amount of resources and users can have different activities in several VMs, a profile can be defined only by correlating these activities [10, 6].



II. DATABASE CENTRIC ARCHITECTURE  Database component plays a key role in the architecture, where the database is only a centralized data repository, in DAID; all major operations take place in the database itself [9]  Fig.1. Database Centric Architecture for IDS  IEEE - 31661  4th ICCCNT 2013 July 4-6, 2013, Tiruchengode, India    DAID has the following major components:  ? Sensor ? Extraction, transformation and load (ETL) ? Centralized data warehousing ? ?Automated rule generation ? Real-time and offline detection ? Report and analysis ? Automated alerts  A. Sensor  A sensor is a system that collects audit information. Many types of audit streams can be used for detecting intrusions ? examples include network traffic data, system logs on individual hosts, and system calls made by processes. Network sensors typically filter and reassemble TCP/IP packets in order to extract high level connection features (e.g., duration of connection, service, number of bytes transferred).

Host sensors monitor system logs, CPU and memory usage on a machine. In the IDC prototype, we simulate a cloud environment by streaming previously collected cloud activity data. This dataset was originally implemented by 2012 with the help of DARPA Intrusion Detection Evaluation Group of MIT Lincoln Laboratory. The same dataset has already been successfully used for demonstrating the capabilities of another intrusion detection framework [7, 8, 9].

B. ETL  Typically, sensor audit streams require further pre- processing and feature extraction before the data can be successfully used for data mining rule generation. In the RDBMS context, SQL and user-defined functions offer a high degree of flexibility and efficiency when extracting key pieces of information from the audit stream.

The CIDD cloud activity data used in our study had already been suitably pre-processed. Therefore the current version of the IDC prototype does not include feature extraction or other raw data transformations at the processing ETL stage [4, 6, 8].

C. Data Warehouse  Using the RDBMS databases as a centralized data repository offers significant flexibility in terms of data manipulation. Inputs from different sources can be combined through joins. Without replicating data, database views or materialized views can capture different slices of the data (e.g., data over a given time interval, data for a specific host).

Such views can be used directly for rule generation and data analysis. The RDBMS databases have the additional benefits of data security, high availability, load support, and fast response time.

D. Rule Generation  A number of data mining techniques have been found useful in the context of misuse and anomaly detection. Among the most popular techniques are association rules, clustering,  support vector machines (SVM), and decision trees. In this IDC prototype we have used association rule mining technique. This approach determines interesting relationships between large set of data items.

Agrawal in [1] has proposed the Apriori algorithm to find quickly Boolean association rules, which is known as a fundamental algorithm for mining frequent itemsets in a set of transactions. This algorithm can be classifieds with minor changes into three categories:  1) Apriori (normal), which is used for large datasets.

2) AprioriTID, is used if datasets fit into memory.

3) Apriori Hybrid, where switching consumes time.

[1, 2, 13] For IDC prototype, AprioriTID is very suitable because Data mining is used for Transactional database.

Two phases of Apriori Algorithm:  1) Find frequent itemsets  Fig.2. Example for finding frequent itemsets  This algorithm will scan the database many times to find the large itemsets.

2) Generate strong rules  If Confidence would be 100%, then those are exact rules.

If Support and Confidence both are high, then those are strong rules [1, 13].

Intrusion Database and Preprocessing of Features:  In 1998, Defense Advanced Research Project Agency (DARPA) funded an ?intrusion detection evaluation program (IDEP)? in Lincoln Laboratory at the Massachusetts Institute  IEEE - 31661  4th ICCCNT 2013 July 4-6, 2013, Tiruchengode, India    of Technology. Since 2012, CIDD was built based on the data captured in DARPA?98 but used for Cloud.

Fig.3. IDC prototype for generating rules  Fig.4. IDC prototype for finding strong rules  TABLE I. Attack types found in CIDD dataset  Attack Types Class  Insider  Outsider Masquerade  Insider-U2R  Outsider-U2R  Keylogger  This dataset has 13 attributes and labeled as either normal or attack. Attack types in this dataset are fall into five main categories: Denial of Service (DoS), Probe, User to Root  (U2R), Remote to Local (R2L) and Masquerade. Among them here we are only considering Masquerade type of attacks which is detailed in Table1. This category is summarized in five subclasses of attacks.

TABLE II. Name of 13 attributes in CIDD dataset  Serial No Attributes  01 Order  02 Real Order  03 Type  04 Date  05 Time  06 Event  07 Category  08 Domain\User  09 User Name  10 VM Name  11 Audit Action  12 Description  13 Masquerade type  In this research, we use CIDD to evaluate our prototype.

The name and type of attributes in the CIDD dataset are listed in Table 2. We can continuously merge the rules from a new run to the aggregate rule set (of all previous runs).

E. Alert  Fig.5. IDC prototype showing alert message through pop-up  Upon detection of malicious or anomalous activity, an IDS needs to generate an alarm, which gives alerting message and makes to admin be careful. IDS alerts can be also delivered via a diverse range of channels (e.g., e-mails, cell phone  IEEE - 31661  4th ICCCNT 2013 July 4-6, 2013, Tiruchengode, India    messages, pop-up). Figure 5 showing alert message through pop-up and as alarm background sound like intrusions have been detected.

F. Detection  Intrusion detection can be performed either real time or offline. An IDS typically handles large volumes of streaming audit data. [8] Real-time detection is critical for the instrumentation of an effective system.

Fig.6. IDC prototype for detecting intrusions  Corrected data, which contains intrusions, are used to generate the rules with the apriori algorithm and use these rules for finding the intrusions in the test data (Figure 6).

G. Report and Analysis  Fig.7. IDC prototype showing Data Analysis page  As we are using the database as the platform for the implementation of the IDS, it?s easy to generate the data analysis results and reports. Collected audit data, rules generated, finding the intrusions, analysis and reports can be seen using crystal reports and visualization tools in .NET. This  allows the lengthy application development process and provides a standardized and easily customized report generation [10, 12].

On the rule generation page (Figure 3) admin can generate the rules by double clicking on the training data with a specific type of attacks and use this rules for finding the intrusions in the test data (Figure 4).

On the analysis page (Figure 7) users can monitor number of intrusions:  ? Break down of the cloud activity into normal and Masquerade types of attacks.

? ?Break down of the cloud data into two different VMs ? Break down of the cloud data into multiple users.

Fig.8. IDC prototype showing Report generation page  On the report generation page (Figure 8) users can take the copy of the report generated showing the attack types, different VMs and multiple users in the network data that has been tested for intrusions.



III. PERFORMANCE EVALUATION  TABLE III. Comparison of four different dataset  DARPA KDD SSENet CIDD  Open Source  NO YES NO YES  Purpose Experim  ental Host and Network  Network Cloud  Implement ed  1998 1999 2011 2012  Attack types  -  DoS, U2R, R2L, Probe  Probe, Flood, Priest  Masquerade  Security level  Private Public Private Public  Time to Identify  Intrusions - 270 sec >50 sec 30 sec  Attributes - 41 23 13  IEEE - 31661  4th ICCCNT 2013 July 4-6, 2013, Tiruchengode, India

IV. CONCLUSION  Masquerade attacks are critical for cloud systems, as they enable the attacker to control cloud resources. CIDD contains the complete audit parameters that help in detecting more than hundred instances of attacks and masquerades that exist in CIDD. Database-centric IDSs offers many advantages over alternative systems. These include integration of individual components, security, scalability, and high availability. It provides administrator the privileges for finding the intrusions which is reliable, secure and fast. This IDS can be developed in a reasonably short time ? frame and at a low development cost. It also provides a good GUI?s for the users to work with.

This system also helps in securing the network.

The system developed can also be extended to find the host-based intrusions and also for Real Time. For Real time, we can use WireShark tool for capturing live network data after that preprocess it and stored it into .csv format, which is more understandable. If intrusions will be there, then we can identify Intrusions in real time. This will be investigated in future work.

