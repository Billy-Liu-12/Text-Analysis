Web Services Monitoring: An Initial Case Study on  the Tools Perspective

Abstract? Web Services are an XML-based technology that has been recently viewed as capable of being used for network management. An aspect of WS-based management is monitoring.

Monitoring is concerned with the collection of management data reflecting the status of a managed system. WS-Based monitoring has to be performed efficiently reducing machine and network resource consumption since in such systems latency, memory and traffic overhead is increased by using XML tags to describe data .This is a big challenge that requires sophisticated mechanisms to retrieve data, such as bulk or selective retrieval to be employed.

One technology suggested to address this goal is the XML Path Language. Still XPath as a filtering tool raised a lot of concerns in the NetConf mailing list, about its scalability. Based on these concerns a parser has been developed by the authors to also address data retrieval in network management. This paper is an initial scalability study on these tools to identify potential problems that will need further investigation.

Keywords: WS, XML, XML Path, Monitoring, Event Reporting

I.  INTRODUCTION  The growing use of the eXtensible Markup Language (XML) for data representation along with the development of many XML-based technologies has spurred research in many fields. One such technology is Web Services (WS) whose promise for application integration interoperability etc. has lead researchers to consider it for network management.

An aspect of using WS for network management is monitoring. Monitoring usually involves retrieving data from a managed system by requesting for it and receiving the response on the same channel the request was sent from (pull synchronous invocation style).

For WS-based monitoring an efficient way to retrieve management data is required. This is important since management data represented in verbose XML documents and tags, increase network resource overhead of WS-based management operations.  Therefore tools to process construct or manipulate XML documents are required so as to be able to extract data efficiently and reduce the extra overhead.

Two of the industry?s options for processing and querying XML documents are the XML Path (XPath) Language v. 1.0 [1] and 2.0 [2]. Though these two tools were not developed  implicitly for network management information retrieval, they can still be used to address this domain.

Network management operations though, require keeping resource usage, latency and traffic overhead low.  Therefore tools that may take into account the network management goals could also be developed. One such tool is a parser developed and presented by the authors in [3]. The parser is built on Java?s regular expression engine, allowing extraction of management data using queries to perform bulk and selective operations on WS interfaces exposing these data.

This paper is an initlal scalability study of the perfomance of these tools to identify potential problems needing further investigation The remainder of this paper is structured as follows. In section II, some details of the tools whose latency performance we will be assessing for WS-based monitoring are going to be provided.  Section III analyzes a management information retrieval scenario of a QoS-enabled Traffic Engineered (TE) network based on which these three technologies would be compared upon. Section IV explains the queries that need to be performed with each tool for the previous scenario. In Section V an inital comparison of these three tools in terms of latency is presented to identify potential tool?s problems. Finally, section VI presents our conclusions.



II. INFORMATION RETRIEVAL TOOLS  A. XPath 1.0 XPath version 1.0 [1] and 2.0 [2] are W3C candidate  recommendations in 1999 and 2005. They took their name from the path notation syntax with slashes (/) they use to control the selection of specific portions of an XML document.

As already implied, XPath?s 1.0 main use is to locate elements in an XML document. A secondary use of it is to perform operations on data (Numeric, String, Boolean).

XPath 1.0 is a subset of its successor and has limited capabilities compared to v2. XPath 1.0 is not a programming language and has to be embedded in a host language to be used.

Some of the shortcomings of XPath1 compared to its predecessor are: (a) a limited number of supported functions (b) very simple data model (c) not taking advantage of processors data-typing capabilities and (e) has simple validation and error management capabilities.

The most important shortcoming of XPath1 compared to its predecessor though is expressiveness. This allows the latter to form more flexible queries and thus search an XML document to find specific nodes more effectively. Though XPath?s2 functionality has increased, so has its memory requirements.

Due to its size and complexity, XPath 2.0 may require more long term memory than XPath1.

XPath 1 and 2 though include more than enough, and even more than required, functionality to be able to address the WS- based management requirements for monitoring. Still the luck of functionality and expressiveness of XPath 1.0 on one side and the heavier memory requirements and complexity XPath 2 has on the other side may have an impact on latency, traffic and memory footprint. This paper is an initial performance study of these tools on latency, to identify potential problems that may opt us to perform further investigations.

B. Custom based Tool  The development of a custom based tool for retrieving management data could in theory address management goals.more efficiently Since efficient retrieval for monitoring at the SOAP level is not an option as more data than required would have to be retrieved, encoded, processed or filtered and since depending heavily on XML parser for data processing may be a heavy solution for management tasks as large documents may need to be searched or loaded into memory, the parser in [3] was developped to (a) work in the application level (b) process raw data for selective or bulk retrieval (c) use an XML parser to only send response to queries in XML format over SOAP.  More parser details are given in [3].



III. MANAGEMENT INFORMATION RETRIEVAL SCENARIO FOR COMPARING TOOLS PERFORMANCE  A. Quality of Service (QoS)  Management  Providing QoS in a single or across multiple domains is a widely researched topic. Currently QoS is provided on the basis of Service Level Agreements (SLAs). These are a set of terms that clients and service providers have to respect when using or providing a service.  The technical part of an SLA is a Service Level Specification (SLS) and it represents the means to quantify QoS services [5]. IP Differentiated Services [4] (DiffServ) is considered as the most prominent framework for providing QoS-based services and one of the means to support it is over Multi-Protocol Label Switching (MPLS) networks.

Monitoring of the network status and its resources is an essential process so as to ensure that a QoS network?s operation will not be compromised. To guarantee the latter Traffic Engineering (TE) is used. TE requires suitable scalable monitoring systems for the collection of various data in order to ensure the network?s smooth operation. This constitutes a significant challenge in QoS-enabled networks.

B. Data Retrieval for QoS Management with each tool  Previous examples of research in monitoring has been performed in the TEQUILA [6], the CADENUS [7], and the ENTHRONE frameworks [8].  All these frameworks rely on  their monitoring systems that capture their network state in order to offer QoS guarantees to their clients. The monitoring systems used for data collection in these frameworks are mostly based on the Manager-Agent paradigm.

In the scenario we will present later on, measurements at the LSP, or SLS level have to be performed. For this reason we have selected two of SNMP?s MPLS MIBs to represent management data. These are the MPLS Label Switching Router (LSR) MIB [9] and the MPLS Forwarding Equivalence Class to Next Hop Label Forwarding Entry (FEC-To-NHLFE) MIB [10]. The former MIB is used to perform PHB and LSP measurements and the latter for SLS measurements.

Having the MPLS MIBs as the management data source, WS equivalent interfaces exposing the same management data were built and deployed for all tools. Both the custom parser and XPath are designed to be used as side tools by WSs exposing management data.

For XPath 1.and 2 each WS allows three views to its data by maintaining them in XML documents. The views are: (a) a single instance data view (b) a multiple-instance data view (c) both single and multiple instance data view. The process to retrieve data with XPath 1&2 is based on the manager-agent paradigm. The manager after selecting the appropriate method depending on the view of the data it wants to have, sends a number of XPath queries to the agent. At the agent, the WS method that is accessed by the manager extracts all the XPath queries and uses its XPath instance to analyze them and access the XML documents? data it has view upon. After the required data are selected the agent sends the response to the manager in an XML document format.

For the custom based tool each WS allows three views to its raw data (a) simple structures view (b) complex structures view (c) all data view. The process to retrieve data with the custom based parser is similar to XPath and is also based on the manager agent paradigm. The only main difference in this case is that the custom based parser processes raw data.  For all three tools, bulk and selective retrieval is supported by queries that are interpreted by the instances of each tool used in each WS.

C. Information Retrieval Scenario  In the management scenario we will be using in section V to identify potential problems that will need further investigation for each tool, we assume that the interface of a router of an MPLS network providing QoS-based services fails. When this occurs the manager is notified of this event.

On receiving this event the manager performs queries so as to find out the LSPs and SLSs affected by the failing interface and take appropriate actions.



IV. SCENARIO QUERIES  For an entity like a manager to determine with any tool the affected LSPs and SLSs for the scenario in the previous sections three queries must be sent to the entity hosting the management information such as an agent. These queries sent from the manager to the agent supervising the router whose     interface failed perform the following: (a) Determine the interface indices of the LSPs associated with the failing interface, (b) Use these indices to determine the affected LSPs (c) Determine the affected SLSs using the LSP IDs from step b. The relevant queries for XPath 2&1, and the parser are given in Figs 1, 2 and 3 respectively.

A. XPath 1.0 and 2.0 queries  In XPath the most common perception that people have about an XML document is that of a tree of nodes. There are various types of nodes and they share various types of relationships.

More details are given in [11].

Selecting nodes in XPath is performed with a series of path expressions most common of which are given in Table 1.These expressions are used to navigate the nodes and the relationships they share.  Looking at the scenario XPath 2&1 queries in Figs 1&2 respectively, it can be seen that XPath1 queries are more verbose than their XPath2 counterparts. This occurs, because though XPath 1.0 has most mathematical and logical operators, XPath 2 is richer in logical expressions and functions. This allows the latter to be more expressive. For example though XPath1 allows expressions such as (a|b|c)/d/e making use of parentheses for grouping operations, it does not allow expressions such as /a/b/(c |d | e). XPath 2.0 supports parentheses usage anywhere in the path expression and allows us to perform sufficiently less filtering operations (operator ?[ ]?) and search the document more effectively for merging operations (operator ?|?) in addition to less verbose queries (Fig 1&2). This may mean performance penalties for XPath1.

TABLE 1 Path expression in XPath for selecting nodes [11] Nodename Selects all nodes after this node / Selects nodes having as start point root node // Selects nodes from the current node that match the  selection no matter where they are . Selects the current node .. Select the parent of the current node @ Selects attributes from a node * Selects any element node [ ] Find a node that contains a specific value.

Fig. 1 XPath 2.0 queries  B. Custom based Parser  The custom based parser in [3] was built to support bulk and selective retrieval from WSs that expose management  Fig. 2 XPath 1.0 QoS scenario queries  data. Thus, the parser was built to allow the user to select the WS(s) to retrieve data from and also to define specific data to retrieve from each WS. This is supported by appropriate queries [3]. Each query has a special functionality. There are four types of queries each of which is use to retrieve specific data from different data structures. More details are given in [3].

The fact that there are only 4 types of queries and a small number of operators supported by the parser means that the latter has less functionality and can not be as expressive as XPath 1&2. On the other hand limiting functionality can help keep the grammar of the parser simpler, less verbose, easier to learn and keep latency consumption overhead low.

Examples of the custom parser queries equivalent to their XPath counterparts in Fig 1&.2 are given in Fig. 3.

Fig. 3 Custom based parser queries  Comparing the queries in Figs 1, 2 and 3 it can be seen that the row identifiers of each SNMP table row entry are also retrieved with each query. Using the custom parser this is performed by default since the SNMP information model mandates this so as to be able to distinguish table row entries.

This increases latency overhead and thus it is also performed for XPath implementations to keep things for measurements on the same terms.  All queries allow us to check the latency overhead performance of each tool for performing merging (bulk retrieval) and filtering operations of varied complexity.



V. EVALUATION  A. System Setup for measurements  For the evaluation aspects of our scenario the MPLS LSR and FEC-to-NHLFE MIBs are exposed as WS interfaces.. The Apache Axis 1.4 SOAP toolkit is used to deploy WS interfaces using a Document/literal encoding style. For XPath     1.0 functionality JAXP 1.3 is used. XPath 2.0 is supported by SAXON 8.9. Java?s 1.5.6 regex engine is used for the parser.

Both XPath implementations come from respected bodies are very mature and fully conformant to standards. To our knowledge there are no other java based or different language based tools that meet all these requirements.  Latency measurements were performed using Java?s currentTimeMillis() function by averaging on 10 samples. The manager and agent were deployed on a 1000MHz/256MB RAM and 466MHz/192MB RAM machine respectively, thus simulating a lower end system for the agent. Both machines ran Red-hat Linux 7.3.

B. Measurements  The measurements we will analyze in this section involve traffic overhead for the QoS-based scenario presented in section III-C to identify if there can be potential scalability problems with any of the used tools which will signify whether a deeper investigation needs to be performed.

For assessing each tool performance for our QoS scenario the ingress router is configured to have 30 LSPs to simulate a small QoS network each of which is assigned to a different customer. The reason behind assigning a different customer to each LSP is to keep things simple with respect to validity checks on the data returned after a query. A further assumption in this experiment is the number of LSPs & SLSs affected by the failing interface, which is six. This seems like a plausible number for small networks although an optimal number is difficult to identify. This main reason behind this selection though is to use a plausible number of   filtering operations in each tool query to check for potential issues.

P ar  se r_  Q u  er y1  _3 0L  S P  s  P ar  se r_  Q u  er y2  _3 0L  S P  s  P ar  se r_  Q u  er y3  _3 0L  S P  s  P ar  se r_  T o  ta l_  L  S P  s  X P  at h  1.

0_  Q u  er y2  _3 0L  S P  s  X P  at h  1.

0_  Q u  er y1  _3 0L  S P  s  X P  at h  1.

0_  Q u  er y3  _3 0L  S P  s  X P  at h  1.

0_  T o  ta l_  L  S P  s  X P  at h  2.

0_  Q u  er y1  _3 0L  S P  s  X P  at h  2.

0_  Q u  er y2  _3 0L  S P  s  X P  at h  2.

0_  Q u  er y3  _3 0L  S P  s  X P  at h  2.

0_  T o  ta l_  L  S P  s            Measurement Type  L at  en cy  ( m  s)   Fig. 4 Latency overhead for a small QoS network  From figure 4 it can be seen that the custom parser we have developed performs better than XPath 1&2 even for a small network where a small number of data needs to be processed. XPath 2.0 and 1.0 produce 116% and 166% times respectively more latency than the custom parser.

Additionally since the operations for the queries that are performed involve a varied number of filtering and merging operations (bulk) we  can detect that while the custom parser is relatively unaffected by this, both XPath implementations  performance is affected when the number of merging and filtering operations varies. Lastly it is also evident from the queries in Figs 1 & 2 that XPath 2 expressiveness allows it to perform less filtering queries and at the same time perform merging operations better which is evident from the latency improvement on all queries compared to XPath 1.



VI. CONCLUSIONS  In this paper we have shown that W3C mature and fully conformant to standards XPath implementations present potential scalability problems in terms of latency compared to the custom parser for accessing a small network?s management data. As such we consider that there is a lot of ground to investigate on many other issues. One such issue is how these tools perform compared to an increasing data volume size. It is also worth considering finding the potential root of this scalability problem and possible solutions to alleviate it. Moreover it is necessary to check if the latency scalability problem is applicable to memory and traffic overhead as well. Furthermore acceptance, grammar simplicity and verboseness, development time and expressiveness are also things that need to be considered under the scope of such an investigation.

Nevertheless although this is an initial study it has shown that there are potential problems with XPath implementations when these tools are used for monitoring and these issues need to be investigated. We have also shown that custom implementations and in general tools built to fit management objectives may also have some application potential, since management tasks require from tools used to address management objectives, to balance between what is required to support functionality, expressiveness and performance.

ACKNOWLEDGEMENTS  The research work in this paper was partly supported by the IST EU EMANICS and the IST ENTHRONE phase 2 projects.

