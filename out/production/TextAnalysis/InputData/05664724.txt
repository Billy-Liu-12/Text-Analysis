An Efficient Projected Database Method for Mining

AbstractThe mining of sequential patterns has been studied for  several years, however, to our best knowledge, no study has  considered the mining of sequential association rules despite such  rules also providing valuable knowledge about many real  applications. The sequential association rule represent that a set  of items usually occur after a specific order sequence. In this  paper, the concept of sequential association rule is proposed and  an efficient algorithm, the SAR (Sequential Association Rules)  algorithm, is proposed to discover these hidden knowledge. A set  of experiments is also performed to show that the benefit of our  approach.

Keywords-component; sequential association rule; projected  database method;data mining

I. INTRODUCTION  Over the past decade, sequential pattern mining is an  important data mining problem with many applications, such as  the behavior of customer purchase in the market prediction,  alignment of DNA sequences and disease diagnoses and  treatments. The basic idea of sequential pattern mining was  first introduced in [2]. Given a set of data sequences, an  apriori-based algorithm was proposed to discover all the  subsequences whose supports are larger than a user-defined  threshold. Subsequently, many approaches have been proposed  to improve the efficiency of mining process, such as FreeSpan  [3], PrefixSpan [4], SPADE [6], and SPAM [1], etc. In [3], by  constructing projected databases, FreeSpan algorithm was  proposed to find sequential patterns. And in [4], PrefixSpan  algorithm was proposed to improve the performance of    FreeSpan algorithm. It also used the projection scheme except  that the projection is based on frequent prefixes. It is because  that any frequent subsequence can be mined out according to  the frequent prefixes. [6] and [1] introduced the vertical format  and lattice concept methods, SPADE and SPAM algorithm,  respectively. The SPADE algorithm was introduced to divide  the candidate sequences into distinct groups such that each  group can be completely stored in the main memory. By using  a lexicographic sequence tree and bitmap representation,  SPAM algorithm can speed up mining process of sequential  patterns. Then, constraint-based sequential pattern mining  based on constructing projected databases have been studied in  [5]. By characterizing constraints for sequential pattern mining,  it can find highly interesting sequential patterns to user.

Therefore, it introduced a PG algorithm which is based on a  prefix-monotone property to generate these patterns.

Exploring frequent sequential pattern can indeed extract  useful information. In traditional sequential patterns mining, it  usually mined out the specific order sequences, because the  support of these sequences is higher than that of generic  sequences. However, in real application, it is worth noting the  conclusions of items which occurs after mining the specific  order sequences. For example, in disease analysis, obesity  (BMI ? 25) usually results in hypertriglycemia. Moreover,  obesity and hypertriglycemia usually cause a higher incidence  of complications, such as hypertension, diabetes mellitus and  hyperuricemia. There is no a specific occurring order of the  three complications. Therefore, in this application, <obesity,  hypertriglycemia> forms a sequential pattern and  {hypertension, diabetes mellitus, hyperuricemia} is the itemset  which occurs frequently after the sequence <obesity,  hypertriglycemia>.

The contribution of our work is that it introduces a new  concept of sequential association rules. A sequential pattern s  with positive conclusion A is a sequential association rule,  s A? , where s is a sequential pattern and A is a frequent  itemset following s. Moreover, an efficient algorithm, SAR  algorithm, which is based on PrefixSpan algorithm is proposed  to generate them. Experimental results show the effectiveness  of our approach in mining sequential association rules.

The remainder of the paper is organized as follows. Section  2 defines the problem and Section 3 discusses the main    concepts of our algorithm. Experimental results and analyses  are presented in section 4 and conclusions and future work is  discussed in section 5.



II. PROBLEM DEFINITION  In this section, we formally define the problem of mining  sequential association rule and some notations. Let  1{ , ..., }nI i i=  be a set of items and itemset A is a subset of I. A  978-1-4244-7571-1/10/$26.00 2010 IEEE 274  sequence s is an ordered list of items which is denoted as  , ... , ...,s i i i  ? ? ?=< > , where ,i i? ?  and i? are  items belonging  to I, i.e., , ,i i i I  ? ? ? ?  and 1 , , n? ? ?? ? . s  and A  denote  the lengths of s and A, respectively. A sequence database S is a  set of sequence transactions, <Sequence_id, Sequence>, and  the list of sequence is ordered by increasing time. A sequence  transaction Si is said to contain a sequence s if and only if s is a  subsequence of Si. ( )s?  is the collection of Sequence_id which  contains s. The number of Sequence_id contained in ( )s?  is  called the support of s, denoted as sup(s). Given a user-defined  support threshold min_sup > 0, a sequence s is a sequential  pattern in S if and only if sup( ) min_ sup  | |s S?  .

TABLE I. A SEQUENCE DATABASE  Sequence_id Sequence  1 a b c d f e  2 a d e b c  3 e a b d c  4 a c b f e  Example 2.1 Refer to the sequence database listed in Table I.

Given min_sup = 0.5. The set of items in the sequence database  is {a, b, c, d, e, f}. Take sequence <a,c> as an example,  ( , )a c? < > ={1, 2, 3, 4} and sup( , ) 4a c< > =  min_ sup   4 = 2?  . Sequence <a, c> is a sequential pattern.

In the past researches on sequential patterns mining, the  mining results are usually a set of specific order sequences.

However, it is worth noting another specific type of sequential  patterns. For example, refer to Table I, we know that <a,b>,  <a, b, c> and <a, b, d> are sequential patterns, but <a, b, c, d>  or <a, b, d, c> are not frequent in sequence database. However,  the itemset {c, d} usually occurrs after the sequential pattern  <a, b>. Therefore, in this paper, the concept of sequential  association rule ( s A? ) is introduced. As mentioned in    section 1,  obesity usually results in hypertriglycemia.

Moreover, obesity and hypertriglycemia usually cause a higher  incidence of complications, such as hypertension, diabetes  mellitus and hyperuricemia. Therefore, <obesity,  hypertriglycemia> ?  {hypertension, diabetes mellitus,  hyperuricemia} form a sequential association rule. Based on  above discussion, the following definition is proposed:  Definition 2.1 (Sequential Association Rule)  Given a sequential pattern s in S, where | |  2s ? , and an  itemset A I? , they constitute a sequential association rule  s A? ,  if and only if the following conditions hold:  1) Let , ... , ...,s i i i  ? ? ?=< > , it satisfies that  { , ... , ..., }i i i A  ? ? ? ? = ?

2) It satisfies that sup( s A? ) ? min_sup and  conf( s A? ) ? min_conf.

3) There does not exist , ...,k ms j j? =< >  such that  ' min_ supss ?  and  'j s  A j  ? ?

? *  , where ,k mj j I?  and  1 ,k m n? ? .                                                                       ?



III. SAR ALGORITHM  The basic concept of our approach, SAR algorithm, is  based on PrefixSpan algorithm [4]. It can be decomposed into  three stages: (1) it finds the frequent 1-itemsets, and for each  frequent 1-itemset, a projected database is constructed. Then,  2-sqeuential patterns are mined from the projected database  accordingly; (2) Begin from 2-sequential patterns, projected  databases are constructed and used to mine out next length of  sequential patterns and sequential association rules,  recursively; (3) Finally, sequential association rules generated  in stage 2 are compared with sequential patterns to eliminate  the rules which violate condition 3 of definition 2.1.

A detailed description of the algorithm is given in Fig. 1  and 2. The algorithm takes three inputs: a sequence database, S,  min_sup, and min_conf. Two arrays, SP[ ] and SAR[ ], are used  to store the set of sequential patterns and sequential association  rules, respectively. In line 1 of Fig. 1, the subroutine  Modify_PrefixSpan is executed to find sequential patterns and    sequential association rules. Continuously, by comparing SP[  ]and SAR[ ], the sequential association rules which violate  condition 3 of definition 2.1 are removed from SAR[ ] to avoid  false positive(line 2- line 9). The final output is the set of  sequential association rules.

Figure 1. The SAR algorithm.

The subroutine Modify_PrefixSpan is discussed in Fig. 2.

According to Definition 2.1, by considering the length of  sequential pattern, it can be decomposed into two parts (line 2  and line12). We generate all 2-sequential patterns in the first  part (line2- line 11). Second, for the sequential patterns  generated in the first part, by constructing projected databases  of the sequential patterns, we can mine out sequential patterns  Algorithm  Input: A sequence DB S, the minimum support threshold  min_sup, and the minimum confidence threshold  min_conf.

Output: The set of sequential association rules  Method:  1.  Modify_PrefixSpan(< >, l, S)  2.  For each sequential association rule X in SAR[ ] do  3.  {  For each sequential pattern Y in SP[ ] do  4.     {  If (X=Y)  5.          Delete X  6.        Else  7.          Output X  8.     }//end for  9.  }// end for   and sequential association rules level by level, recursively (line  12- line 28). Moreover, the confidence of sequential  association rule is calculated in this part and used to check  whether the rule is strong (line 25). Example 3.1 is used to  illustrate the main concept of our algorithm.

Figure 2. Modify_PrefixSpan subroutine.

Example 3.1 Refer to Table I. Let min_sup = 0.5 and  min_conf = 0.5, sequential association rules can be found in the  following steps.

1) Scan S once to find all frequent 1-sequential patterns,  <a>: 4, <b>: 4, <c>: 4, <d>: 3, <e>: 4, <f>: 2  2) According to the six prefixes, the corresponding  projected databases are constructed and frequent 2-sequential    patterns are generated. For example, sequences in S containing  <a> form the a-projected database. By scanning a-projected  database, the 2-sequential patterns having prefix <a> can be  mined, <a, b>: 4, <a, c>: 4, <a, d>: 3, <a, e>: 3, <a, f>: 2.

3) Subsequently, for the sequential patterns generated in  the step 2, by constructing projected databases of the sequential  patterns, we can mine out sequential patterns and sequential  association rules level by level, recursively. For example, by  using 2-sequential patterns having prefix <a, b>-, <a, c>-, <a,  d>-, <a, e>-, and <a, f>-, five projected database are  constructed. Mining <a, b>-projected database returns four 3-  sequential patterns, <a, b, c>: 3, <a, b, d>: 2, <a, b, f>: 2, and  <a, b, e>: 2, and two frequent 2-itemsets, {c, d}: 2 and {e, f}:  2. Because conf( ,  { ,  }a b c d< >? )=2/4=0.5 min_ conf?

and conf( ,  { ,  }a b e f< >? )=0.5 min_ conf? , these two  sequential association rules are strong. Therefore, the rules  ,  { ,  }a b c d< >?  and ,  { ,  }a b e f< >?  are stored into the  array SAR[ ]. Similarly, we can find sequential patterns and  sequential association rules on prefix <b>, <c>, <d>, <e>, and  <f>. The constructing projected databases and mining process  are illustrated in Fig. 3.

4) Eventually, we check that <a, b, f, e> and <a, c, f, e>  are sequential patterns. Therefore, , { ,  }a b e f< >?  and  ,  { ,  }a c e f< >?  are not the valid sequential associateion  rules. The final result is  {  }a b c d< >?  and this phase is  shown in Fig. 4.



IV. EXPERIMENTAL RESULTS  TABLE II. PARAMETER SETTING OF THE SYNTHETIC DATASETS  Notation Meaning  Value  Default Range  C Average number of transactions per customer 10  T Average number of items per transaction 1  min_sup Minimum support threshold  0.005~0.03  min_conf Minimum confidence threshold 0.5  A. Simulation Platform  This section describes a set of simulations performed to  assess the benefit of our approach. The test data were generated  by an IBM synthetic data generator. The parameter settings for  generating the test dataset and evaluating the approach are  listed in Table II. In this paper, due to the limit of space, only  the results on default dataset C10T1 are reported. In this    dataset, the number of distinct items is 1000, and the number of  sequences is 10000. C10 represents the average number of  transactions of each customer is 10 and T1 means that each  transaction contains only one item. The simulations are  implemented in C++ and all the experiments are performed in  an Intel Pentium 3.20GHz with 3GB of memory, running  Windows 7.

B. Efficiency Analysis  In the first experiment, we test the execution time of  scalability with support threshold are shown in Fig. 5.The  result show that when the support threshold is high, few  sequential patterns are mined and the length of patterns is short.

Comparatively, as the support threshold decreases, there are  Subroutine Modify_PrefixSpan(a, l, Sa)  a: a sequential pattern  l: the length of a  Sa: the a-projected DB  Method:  1. s =< >  2.  If (l<2)  3.  {  Scan Sa  4.     Find the set aF of frequent items  5.     For each frequent item ab F?  do  6.        s s ab= ? < >  7.     For each a s? ?  do  8.     {  Construct a-projected DB Sa  9.        Modify_PrefixSpan(a, l+1, Sa)  10.     } // end for  11.  } // end if  12. Else  13.  { Scan Sa  14.     Find the set aF  of frequent items  15.     Find the set FI of frequent itemsets A  16.     For each frequent item ab F?  do  17.     {   s s ab= ? < >  18.        [ ]SP s?

19.     } // end for  20.     For each a s? ?  do  21.     {  Construct a-projected DB Sa  22.        Modify_PrefixSpan(a, l+1, Sa)  23.     } // end for  24.     For each frequent itemset A FI?

25.     {  if( conf ( ) min_ confa A? ? )  26.        [ ]SAR aA?

27.     } // end for  28. }// end else   Figure 3. An example of SAR algorithm  Figure 4. The final results of SAR algorithm  Sequence_id Sequence  1 a b c d f e  2 a d e b c  3 e a b d c  4 a c b f e  Frequent 1-sequence  a:4  b:4  c:4  d:3  e:4  f:2  A sequence database  a-projected DB  1 b c d f e  2 d e b c  3 b d c  4 c b f e  b-projected DB  1 c d f e  2 c  3 d c  4 f e  f-projected DB  1 e  4 e  .

.

.

Frequent 2-sequence  <a b>:4  <a c>:4  <a d>:3  <a e>:3  <a f>:2    Frequent 2-sequence  <b c>:3  <b d>:2  <b e>:2  <b f>:2  .

.

.

<a b>-projected DB  1 c d f e  2 c  3 d c  4 f e  <a c>-projected DB  1 d f e  4 b f e  .

.

.

<a f>-projected DB  1 e  4 e  Frequent 3-sequence  <a b c>:3  <a b d>:2  <a b f>:2  <a b e>:2  Frequent 2-itemset of  prefix <a b>  {c d}:2  {e f}:2  .

.

.

<a b c>-projected DB  1 d f e  <a b d>-projected DB  1 f e  3 c  <a b f>-projected DB  1 e  4 e    Frequent 4-  sequence  <a b f e>:2  SP[ ]  <a b>:4  <a c>:4  <a d>:3  <a e>:3  <a f>:2  <a b c>:3  <a b d>:2  <a b f>:2  <a b e>:2  <a b f e>:2  <a c f>:2  <a c e>:2  <a c f e>:2  .

.

.

compare SAR[ ] <a b> ?{c d}: 2  <a b> ?{e f}:2  <a c> ?{e f}:2  output  <a b> ?{c d}: 2   many sequential patterns and the length of patterns is long.

Therefore, the execution time increases as the support threshold  is decreased because of a large increase in the number of  sequential patterns in the result. The number of sequential  association rules generated in different support thresholds is  shown in Fig. 6. When min_sup is 0.5%, few sequential  association rules are mined. This is because that there are many  sequential patterns as support threshold is low. Therefore, only  longer sequences can satisfy the properties of sequential  association rules in a low min_sup. As support threshold  increases from 0.5% to 1.5%, the number of sequential  association rules increase. This is because that few sequential  patterns are mined and the length of patterns is short. However,  according to the property of apriori, the support of short length  of sequences is larger than that of long length of sequences. As  a result, the probability of a short sequential pattern to form a    sequential association rule is higher than that of a long  sequential pattern. As the support threshold is between 1.5%  and 3%, the number of sequential association rules decreased.

The main reason for the decrease is that the minimum support  is high enough, the restriction of sequential association rules  become more tightly.

In summary, the experimental results described above  demonstrate that our SAR algorithm offers the scalability in  efficiency and reports sequential association rules with  different support thresholds.

Figure 5. Execution time of our algorithm with different min_sup.

Figure 6. Number of sequential association rules.



V. CONCLUSION AND FUTURE WORK  In this paper, a new concept of sequential association rules  is introduced. Mining sequential association rules provide  valuable knowledge which cannot get from sequential patterns  mining and it can be applied in many applications, such as  disease analysis and market decision. Moreover, SAR  algorithm is proposed for mining sequential association rules.

The experiments show that the proposed algorithm offers  execution time of scalability with support threshold and reports  sequential association rules.

There remain some problems that are worth studying in the  future. First, investigating more efficient algorithms to improve  the scalability of mining sequential association rules is  important. Furthermore, extending to find negative sequential  association rules will also be worthwhile.

