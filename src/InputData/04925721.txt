A Simple Algorithm for (l, d) Motif Search1

Abstract - Extracting meaningful patterns from voluminous amount of biological data is a very big challenge. Motifs are biological patterns of great interest to biologists. There are different versions of the Motif Finding Problem. In this paper we concentrate on the Planted (l, d) Motif Search Problem. There have been numerous algorithms designed to solve this problem. Many instances of the Planted (l, d) Motif Problem have been identified as challenging instances. The algorithm proposed here is an extension of PMS3 [1].

It uses a very simple approach and solves challenging instances ((21, 8), for example) that have not been reported solved before in the literature. We also propose a new algorithm PMS3p. We expect PMS3p to be significantly faster than PMS3.



I. BACKGROUND 1Genomic sequencing allows the  identification of nearly all of the genes in an organism, from which the potential gene products can be inferred. However, genomic sequencing does not provide direct information on the function of the individual gene products, nor their interrelationships.

Motifs provide clues on this function. Several computational approaches for identifying motifs can be found in the literature. These   1 This work has been supported in part by the following grants: NSF 0326155, NSF 0829916 and NIH 1R01GM079689-01A1.

techniques differ in how motifs are defined and modeled. Each approach looks at a different facet of motifs. No single model or technique can identify all possible motifs.

The final verification, as to whether a motif is functional or not, can only be assessed experimentally. Since experiments are expensive and time consuming, computational techniques that can select potential functional motifs with high accuracy are desirable.

Three versions of motif search have been identified in the literature: planted (l, d) motif search (PMS), edit distance based motif search (EMS), and simple motif search (SMS). In this paper we focus on PMS. PMS algorithms have been employed to solve various biological problems. For example, Buhler and Tompa [5] have employed PMS algorithms to find known transcriptional regulatory elements upstream of several eukaryotic genes. Eskin and Pevzner [6] used PMS algorithms to find composite regulatory patterns; and so on.

Problem Statement: The (l, d)-motif problem takes as input n sequences each of length m. Input also are integers l and d. The problem is to find a motif M (a string of length l) that occurs in each input sequence up to hamming distance of d.

Numerous algorithms have been developed to solve PMS. PMS algorithms can be categorized into two, namely, exact algorithms and approximation algorithms.

An exact algorithm (also called an exhaustive     enumeration algorithm) always finds the correct answer(s). On the other hand, an approximation algorithm may not always output the correct answer.

Some examples of algorithms proposed for PMS are Random Projection [5], MITRA [6], Winnower [7], Pattern Branching [8], PMS1 [1], PMSP [9], CENSUS [10] and Voting [11]. Out of these algorithms, CENSUS, MITRA, PMS1, PMSP and Voting are exact algorithms.

Certain instances of PMS have been identified to be challenging instances. In particular, an (l, d)-motif instance is said to be challenging if the expected number of motifs that occur in the input by random chance is greater than or equal to one (when the input sequences themselves are generated randomly). For example, the instances (9,2), (11,3), (13,4), and (15,5) are examples of challenging instances. It is customary in the literature to show the performance of PMS algorithms only on challenging instances. It is always a challenge to solve as large a challenging instance of PMS as possible. The largest instance reported solved in the literature thus far is (19, 7) [9]. For the first time, in this paper, we present an algorithm that can solve the (21,8) instance. Before presenting details on our algorithm we summarize some of the prior algorithms.

Pevzner and Sze [7] have proposed the WINNOWER algorithm. It generates a list of all the l-mers present in the database and constructs a graph out of them. Each l-mer represents a node and there is an edge between two nodes if the hamming distance between these two nodes is at most 2d and they belong to different sequences. The problem of finding motifs is then reduced to finding large cliques in this graph. The problem of finding a maximum clique in a graph is known to be NP-hard. The authors use some novel pruning techniques to find large cliques.

WINNOWER [7] uses a technique to generate Extendable Cliques. It is an iterative  algorithm. The run time of this algorithm is O(N2d+1), where N=nm.  SP-STAR uses a technique which eliminates more edges than WINNOWER and hence is faster. It uses less memory as well.

PatternBranching [8] performs a local search. It generates the neighbors of all l-mers present in the sequences and uses a scoring method to assign scores for these neighbors.

There are n(m-l+1) l-mers present in the sequences. Each l-mer has 3d neighbors.

The scores of all the neighbors of all the l- mers are computed and the best scoring neighbors are identified. Since it searches through only a selected set of l-mers, it is very efficient. This algorithm takes a u, and then computes the best neighbor u1 of u. In the next step it identifies the best neighbor u2 of u1 and so on till it computes ud. The ud values for all possible u are computed and then the best ud value becomes the output. In every step it keeps only one value of the best neighbor but there could be a set of l-mers which could be the best neighbors for u.

MITRA [6] is based on WINNOWER [7].

It uses pair wise similarity information. It uses a mismatch tree data structure and splits the space of patterns into subspaces which start with a given prefix. Pruning is applied to each of these subspaces. MITRA performs very well in practice and is one of the best performing algorithms designed for Planted Motif Search Problem.

Several algorithms for PMS have been proposed in [1]. These are exact algorithms based on radix sorting. The first algorithm proposed was PMS1. PMS1 simply generates neighbors of all the l-mers present in a sequence and saves it in an array Ci, where i is the sequence number. It repeats this for all the sequences. The arrays are then sorted. The l-mers we get with the intersection of all Ci?s, where 1?i?n, is the list of motifs. However, PMS1 is not capable of solving challenging instances with large values of l. Some improvements have also been proposed on    PMS1 in [1]. Another algorithm proposed is PMS2 [1], which is capable of solving challenging instances up to d = 4. For instance, it could not solve the Challenging instance (15, 5). The third algorithm proposed in [1] was PMS3 which was never implemented or investigated. In this paper we extend and test the performance of PMS3.

Two new algorithms PMSP and PMSi were  proposed in [3] which were built upon PMS1 and perform a lot better than PMS1.

PMSP [3] uses the idea of exploring the neighbors  of all the l-mers that occur in the first sequence and then checking if these represent a motif or not. The worst case time bound of this algorithm is worse than that of PMS1 but in practice it performs much better. It is capable of solving the challenging instance (17, 6).

PMPprune [3] is another algorithm based on PMS1 and is an improvement over PMSP.

It uses a branch and bound approach. It shows significant improvements in terms of time taken and is also capable of solving the challenging instance (19, 7). This is the largest challenging instance that has been solved until this paper.

Another algorithm MCL-WMR was proposed in [4] and it consists of 3 steps. The first step is a graph construction. Each l-mer in each input sequence is represented as a vertex and an edge is constructed between two vertices when the hamming distance between the two is less than 2d and a weight is assigned to the edge. The next step is clique finding using graph clustering. The aim of clustering is to decompose the set of vertices into subsets of highly intra- connected vertices. The final step is to identify the motifs, which is done by identifying cliques of size n that have a weight greater than a calculated threshold.

This algorithm does not work for the challenging instances like (17, 6). It can solve  the (non-challenging) instance (18,6). As one could see, this algorithm is similar to WINNOWER. The algorithm that we propose in this paper is much faster than MCL-WMR.



II. ALGORITHM  PMS3  Algorithm PMS3 was initially proposed in [1]. The concept behind PMS3 is that if M is a motif of length l, we can divide it into two parts M1 and M2 where M1 is the first half of M and M2 is the second half of M. Let S=s1,s2,?,sm be an input sequence and let Si be an occurrence of M in S. Let l=2l? and let S?=si,si+1,?,si+l?-1 and S??=si+l?,si+l?+1,?,si+l-1.

Clearly, either the hamming distance between M1 and S? is at most d? (where d?=d/2) or the hamming distance between M2 and S?? is at most d?. Algorithm PMS3 is based on this observation.

Algorithm PMS3  Get the set R of all motifs of length l?  that occur in at least n?  of the input sequences at a hamming of at most d?.

Here l? = l/2, n? = n/2, and d? = d/2.

for i := 1 to n do for h := 0 to d?  do  Find all the occurrences of all the motifs of R in Si with a hamming distance of h. This can be done as follows: form all the l?-mers of Si (keeping track of the starting position of each in Si); For each l?-mer u ? Si, and all the l?- mers v such that u and v are at a hamming distance of h. If R?  is the collection of these l?-mers, sort R and R? and  merge them; and figure out all the occurrences of interest.

For every position p in Si, let L(i, p, h) be the list of all motifs of R that are in Si with a hamming distance of h starting from position p.

In the above algorithm, A is the set of candidate motifs. Followed by the computation of A, we check if each one of these candidates is a valid answer. Each valid answer is then output. Note that for each candidate we need O(mnl) time to check if this is a valid answer or not.



III. IMPLEMENTATION  PMS3 is much simpler than prior algorithms such as PMSP, PMSi, PMSprune, etc. Also, PMS3 solves the challenging  instance (21, 8) that has not been reported solved before. All the algorithms for planted motif search employ random data as a benchmark. We also use the same data. This data is constructed as follows. There will be 20 sequences of length 600 each. Each of these sequences is randomly generated such that each character in each position is equally likely to be one of the symbols in the alphabet. The motif M is also generated randomly in a similar manner. 20 instances of M are generated from M such that each instance is at a hamming distance of d from M. These instances are then planted in the input sequences starting from random positions. There are some challenges in implementing the algorithm. The challenging step is the one where the array Ai is obtained.

The simple method explained in the algorithm works fine with lower values of l but does not work for higher ones. So, instead of generating the arrays one sequence at a time and then taking the intersection, we pick one l?-mer at a time from the list R and then check for all the occurrences in all the sequences. Next we generate lists Q? and Q?? with the neighbors of prefixes and suffixes respectively and get the smaller list Ai. Thus it solves the problem of space required to save the list Ai as initially proposed in the algorithm. The algorithm was implemented on Xeon processor with 3GHz frequency and 4GB RAM. The coding was done in C++.



IV. NEW ALGORITHM  Both PMSprune [3] and PMS3 [1] are extensions over PMS1[1]. Instead of using arrays to generate and store the neighbors of l-mers, PMSprune[3] uses a tree to store the neighbors for each l-mer. It also uses a pruning technique, which helps improve the runtime significantly. We use a similar idea to improve the performance of PMS3.

A := ?; for i := 1 to n  do Ai := ?; for p := 1 to m? l? + 1 do for h := 0 to d? do  Let q?  be the l?-mer of Si  ending at position p - 1 and q?? be the l?-mer starting from position p + l?.

Generate Q?, the set of all l?-mers that are at a hamming distance of d - h from q?.

Also generate Q??, the set of all l?-mers that are at a hamming distance of d? - h from q??.

for every u ? L(i, p, h) do for every v ? Q?? do  Append v to the end of u to form an l-mer. Add this l-mer to Ai.

for every v ? Q? do Append u to the end of v to form an l-mer and add this l-mer to Ai.

If A is empty and Ai is nonempty then A := Ai else if both A and Ai are nonempty  then A := A ? Ai;       Before discussing the algorithm, we need to explain a tree T(u) employed by PMSprune. It  is constructed with u as the root node. The nodes of the tree are the neighbors of u. The tree would be of depth at most d. At a level i, the nodes would be at a distance of i from the root. The distance between any node and its parent is always 1.

Pruning is applied to a node v if a certain condition is satisfied. The details and a proof for the pruning technique is provided in [3].

However, it is briefly explained in this paper.

D(v, S) is defined as follows:  d(v, Si) = min ( distance of v with each l2-mer in sequence Si).

D(v, S) = max( d(v, Si) , where 1? i ? t) ).

Now, for any node v in tree T(u), we decide to prune based on the following conditions:  If D(v, S) > 2d-h, no descendants of v would be a motif.

If D(v, S) = 2d-h, consider only v?,where v? is a child of v and D(v,S)=D(v?,S)-1.

If D(v, S) = 2d-h-1, consider only v?, where v? is a child of v and D(v?, S)<=D(v, S).

Similar to PMS3, PMS3p  divides the l- mer into two parts, of size l1 and l2. When l is an even number, l1 and l2 are equal, otherwise, l2 is 1 greater than l1. We take the first sequence and for each l2 ?mer, u, in that sequence we form a tree T(u). The tree is traversed in the depth first way. For each neighbor v of u, we check if v occurs in all the sequence with a hamming distance less than equal to d or not. Then, we also need to check if we need to prune the descendants of v based on the conditions above. If v is pruned, we go to the next neighbor of u. If v is not pruned, we check for all occurrences of v in the sequences. If v occurs at location p in a sequence s at a hamming distance of h, then  we generate  all the neighbors of l1 ? mer at p+ l2 at a hamming distance  of d-h and store it a list Q?. Similarly, we generate  all the neighbors of l1?mer at p- l1 at a hamming distance  of d - h and store it a list Q??.  We merge the list Q? and Q?? and store it in As, where s is the sequence number.  At the end, we find the intersection of all As, where 1?s? t and output that as motifs.

Algorithm PMS3p Let l1 = l/2 and l2 = l-l1.

Let, d1 = [d/2].

For each l2-mer u in S1 {   Construct a tree T(u).

The tree is traversed in the depth first way.

For every neighbor v of u, {    If v has already been covered previously, If the tree needs to be pruned for v,  switch to the next neighbor v.

Let A = null For ( s= 1 to t) { As = null  For (i=1 to m-l2+1) {      Calculate h = dist( l2-mer(s, i) and v) If h <= d Let, q1 be the l1-mers, i+l2).

Let, q2 be the l1_mer(s, i-l1).

Generate neighbors of q1 at a distance (d-h) & save in the list Q1.

Generate neighbors of q2 at a distance (d-h) & save in the list Q2.

For each element x in Q1, Add l2-mer(s, i) +x to As.

For each element x in Q2, Add l2-mer(s, i) +v to As.

} Apply radix sort to As.

If (A= null)  A=As Else A = A intersection As.

} Output the l-mers in A.

} }

V. ANALYSIS AND RESULTS  PMS3 is a very simple algorithm which does not use complicated data structures. It is capable of solving the challenging instance (21, 8) which has not been solved by any other algorithm yet (to the best of our knowledge). Table 1 shows the results of PMS3. The table does not include the result for L less than 17. Although, PMS3 is an efficient algorithm, we had to implement it in such a way so that it is able to work for higher values of L and D. Thus, the algorithm does not perform better than the previous algorithms for the lower values of L.

L d Time 17 6 20,000 sec 18 6 12,000 sec 19 7 26 hrs 21 8 22 days Table1. Performance results for PMS3  Although, PMSP [3] and PMSprune [3] which are also improvements over PMS1 perform better than PMS3 for (17, 6), they are still not able to solve the challenging instance (21, 8). MCL-WMR [4] shows good results but it can?t solve the challenging instance (17, 6).

For challenging instances, the list R generated in PMS3 is of the size nearly equal to 4l?. Thus, for such cases we actually check for all possible l?-mers. This problem is solved in PMS3p by using the pruning technique. For the l2-mers in Sequence 1, we generate all neighbors with a hamming distance less than or equal to d. For challenging instances, this would be of the size 4l2. The space complexity of this algorithm would be O (mn). Theoretically the time complexity of PMS3p would be same as PMS3. But, in practice there would be a significant improvement. We can claim this, because PMSprune which is an improvement over PMSP, take only 69 minutes to solve  (17, 6) compared to 12 hours taken by PMSP.

PMS3 takes about 5.5 hours to solve the same problem. So, if we implement PMS3p, we expect the time taken to be less than an hour. It is noteworthy that MCL-WMR does not work for the challenging instances like (17, 6). It can solve the (non-challenging) instance (18,6) but the algorithm proposed in this paper is much faster compared to it.



VI. CONCLUSION  We have extended and implemented PMS3 which was initially proposed in [1].

The algorithm uses a very simple concept.

Although it takes a little more time than PMSP and PMSprune [3], it is capable of solving (21, 8). None of the previous algorithms have been able to solve challenging instances for d>7. For instance, our algorithm is better than the algorithm proposed in [4]. The algorithm has scope for improvements and in future we would be working on methods to reduce the time.  The new algorithm PMS3p proposed here has not been implemented yet, but we expect that it would be much faster than PMS3 and will also outperform PMSprune.



VII. REFERENCES   [1] S. Rajasekaran, S. Balla, and C.-H.

Huang,  ?Exact Algorithms for Planted Motif Problems?, Journal of Computational Biology, Oct 2005, Vol. 12, No. 8: 1117-1128.

[2] S. Rajasekaran, ?Motif search algorithms?, in Handbook of Computational Molecular Biology, CRC Press, 2005.

[3] Jaime Davila, Sudha Balla, Sanguthevar Rajasekaran, ?Fast and Practical Algorithms For Planted (l, d) Motif Search?, IEEE/ACM Transactions TCBB, 2007.

[4] Christina Boucher, Daniel G. Brown, Paul Church, ? A Graph Clustering Approach to weak Motif Recognition?, WABI 2007, LNBI 4645.

[5] J. Buhler and M. Tompa, ?Finding motifs using random projections?, Proceedings Computational Molecular Biology (RECOMB), April 2001.

[6] E. Eskin and P. Pevzner, ?Finding composite regulatory patterns in DNA sequences?, Bioinformatics S1, 2002, pp.

354-363.

[7] P. Pevzner and S.-H. Sze, ?Combinatorial approaches to finding subtle signals in DNA sequences?, Proc. Eighth Systems for Molecular Biology, 2000, pp.

269-278.

[8] A. Price, S. Ramabhadran, P. Pevzner, ?Finding subtle motifs by branching from sample strings?, Bioinformatics supplementary edition, Proceedings of the Second European Conference on Computational Biology (ECCB-2003).

[9] J. Davila, S. Balla and S. Rajasekaran, ?Space And Time Efficient Algorithms for Planted Motif Search?, Second International Workshop on Bioinformatics Research and Applications (IWBRA 2006), May 2006.

[10] M. Li, B. Ma and L. Wang,?On the Closest String and Substring Problems?, Journal of the ACM, Vol. 49, No. 2, March 2002.

[11] F Y.L. Chin and H C.M. Leung, ?Voting Algorithms for Discovering Long Motifs?, Proceedings of the Third Asia-Pacific Bioinformatics Conference (APBC2005), Singapore, 261-271, January 2005.

