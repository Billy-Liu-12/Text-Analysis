UAP-MINER: A REAL-TIME RECOMMENDATION ALGORITHM BASED ON  USER ACCESS SEQUENCES

Abstract: Recommendation is an application of web mining.

However, most of the current recommendation mechanisms need to generate all association rules before recommendations.

This takes lots of time and can?t provide real-time recommendations for online users. In this paper, we propose a novel algorithm, called User Access Pattern mining (UAP-miner), to provide real-time recommendations based user access patterns. UAP-miner uses a data structure named as User Access Pattern tree, or UAP-tree in short. The User Access Pattern tree can efficiently store large number of user access information. According to the user access patterns, the UAP-miner scans relevant sub-trees of the User Access Pattern tree to generate real-time recommendations.

Keywords: Web mining; Sequential patterns mining; UAP-tree;  Real-time recommendations  1. Introduction  Web mining [1] applies the data mining technologies to huge Web data repositories. With the explosive growth of data available on the World Wide Web, Web mining is becoming important and even necessary. For example, analyzing and discovering user access behavior is helpful for understanding what online information users inquire and how they behave. The analyzed result can be used in intelligent online applications, refining web site maps, improving searching accuracy when seeking information, and leading decision makers towards better decisions in changing markets (e.g., putting advertisements in ideal places, better customer classification, etc.). Researchers have proposed various recommendation techniques.

Collaborative filtering [2] is a successful and widely used recommendation technique. However, pure collaborative filtering approaches require maintaining persistent individual profiles, which can be restrictive and impractical for anonymous users. Consequently, some recently proposed recommendation systems have relied solely on Web access data instead of content or user profiles [3], [9],  [10].

In general, mining user access patterns can be  considered as a special type of sequential patterns mining in the field of web mining. The most popular sequential patterns mining algorithm seem to be the Apriori algorithm [4], which is the foundation of most known algorithms. It uses a property stating that if a k-itemsets is frequent, all of its (k-1)-itemsets must be frequent. However, the Apriori algorithm generates and tests candidate itemsets level-by-level. This may cause iterative database scan and high computational cost.

Han et al. [5] thus proposed the frequent-pattern-tree (FP-tree) structure for efficiently mining frequent itemsets in transactional databases without generation of candidate itemsets. The FP-tree is used to compress a database into a tree in which stores only large items. It alleviates the multi-scan problem and improves the candidate itemset generation. The algorithm requires two scans of the dataset to build the tree and then mines this structure directly. Pei et al. [6] proposed an efficient complete Web access patterns mining algorithm based on highly compressed Web access patterns tree (WAP-tree) similar to the FP-tree. WAP-tree was proposed for mining sequential patterns web log. The WAP-tree stores the sequential web access log in a tree structure. The authors of this algorithm report that their algorithm is faster than the Apriori-based counterpart for mining Web access patterns.

In this paper, we present a compact structure named User Access Pattern Tree to model the user access patterns.

Additionally, we apply the search mechanism called UAP-miner to mine the User Access Pattern Tree, and the mining results are pruned by use of association rules. The association knowledge can be used to dynamically recommend the proper sites or pages for web users.

The remainder of this paper is organized as follows. In Section 2, we define relevant terms used in user access patterns mining. In Section 3, we introduce the definition and construction of User Access Pattern Tree. Section 4 contains a description of the UAP-miner algorithm and      Section 5 draws the conclusions of this study.

2. Preliminaries  In general, a Web log can be regarded as a sequence of pairs of user identifier and event. It records all Web access information. With the data-preprocessing techniques, the original Web log can be translated into the data adaptable to the mining algorithm [11]. The data-preprocessing techniques can be roughly classified into two categories [7].

The first approach maps the web log into the relational database, and then applies adapted mining algorithms to analyze it. The second method adopts special preprocessing process to transform the log data to fit mining algorithms.

The main data-preprocessing included data cleaning, user identification, session identification and transaction identification. More details about the data-preprocessing techniques of web mining can be found in [8].

Now we give some concepts and notations. Let E be a set of items. The user access sequence S is an ordered collection from E:  1 2, ,..., mS e e e=   ( ,  1ie E i m? ? ? ) The length of the sequences S is . A user access sequence with length  is also called a -sequence. A sequential transaction database is:  | |S m= m m  1 2{ , ,..., }nSDB S S S= Let  refer to a user access sequence in SDB.

The user access pattern P represents the browsing behavior and is characterized as a series of items. The support of a user access pattern P is the number of sequential transactions containing P in SDB:  (1 )iS i n? ?  sup( ) |{ | , } |i i iP P P P P SDB= ? ?        (1) The pattern P is said a frequent user access pattern if P?s support satisfies a predefined minimum support threshold ? . Otherwise, it is called a non-frequent user access pattern.

Given a sequential transaction database SDB, a user access pattern P, and a minimum support threshold ? , our objective is to recommend the proper item to user according to the user access pattern.

3. UAP-tree construction  In this section, we introduce the definition and construction of a User Access Pattern Tree.

3.1. Definition of UAP-tree  A User Access Patterns tree structure, or UAP-tree in short, can be defined as follows.

1) It is composed of a root node, a set of item prefix subtrees as the children of the root, and an item header table. Each node in a UAP-tree registers two pieces of information label and count, denoted as label: count.

2) The root of the UAP-tree consists of three fields: item_name, child_node_link, and total_count, where item_name represent the name of the root node and is labeled as ?null?, child_node_link points to a set of the prefix nodes and total_count registers the number of sequential transactions stored in the UAP-tree.

3) Each node in the item prefix subtree consists of four fields: item_name, count, child_node_link, and node_link, in which item_name registers which item node represents, count registers the number of transaction represented by the portion of the portion of the path reaching this node, child_node_link points to a set of the prefix nodes, and node_link links to a set of the next nodes in the UAP-tree carrying the same item_name.

4) Each entry in the item header table consists of three fields: item_name, next_object_link, head_node_link, where item_name registers which item this object represents, next_object_link links to the next object in the item header table, head_node_link points to first node in the UAP-tree carrying the item_name.

Notice that each item_name of the objects in the item header table is unique.

3.2. UAP-tree construction algorithm  Based on the above definition of the UAP-tree, we develop the following UAP-tree construction algorithm.

Algorithm 1 shows the UAP-tree construction algorithm, which is based on the set of sequential transaction that is the result of data-preprocessing.

Algorithm 1: UAP-tree construction (SDB) Input: A sequential transaction database, SDB Output: The UAP-tree, T, and Headers Method: 1) Create a root node for T; 2) For each sequence S ? SDB, denoted as S=e1, e2,? em do  a. Increase the total_count of T by 1      b. sub_T?T c. For each item e ?S do d. If sub_T has a child labeled ei, increase the  count of ei by 1 and make sub_T point to ei else create a new child node (ei: 1), set sub_T point to the new child node, and insert it into the item header table.

3) Return T, and Headers  3.3.  Example of UAP-tree construction  Now we give an example to show a complete process of constructing a UAP-tree. Table 1 shows the sequential transaction database SDB in our example.

Table 1. A sequential transaction database    The corresponding UAP-tree is shown in Figure 1. To  construct this UAP-tree, starting from the root node T, and set the item_name of the root to ?null?. Then reading the sequential transaction <A, B, C, D> from SDB, inserts them into the tree, and increases total_count simultaneously.

Each item becomes a new child node of T, and each node is labeled in the form (label: count). The second sequential transaction <A, B, D> shares the common prefix path, <A, B>, with the existing UAP-tree, the count of each node along the prefix is increased by 1, and a new node (D: 1) is created. For the third sequential transaction <A, B, C>, there is a prefix path <A, B, C, D> and shares the same items with the third sequential transaction. Therefore, it can increase the count of the shared prefix path <A, B, C>. At the same time, it shares the common prefix path <A, B>, with the second sequential transaction. For the fourth sequential transaction <B, C, A>, it does not share any part with the existing UAP-tree, so we have to create another branch of the tree. Finally, for the last sequential transaction <B, A>, as same as above, it increases the count of node B which in path <B, C, A> for the shared prefix part <B>.

Then, it creates a new node A. Whenever a new node is inserted into UAP-tree, the link adjusting process runs immediately. Coming with the construction of UAP-tree, an  item header table is built in which each item points to its occurrence in the tree via a head_node_link. Nodes with the same item_name are linked via node_link. The UAP-tree with its associated node_link and item head table is shown in Figure 1.

Figure 1. The item header table and UAP-tree  The UAP-tree shows the complete information for user access pattern mining. It avoids repeatedly scanning the sequential transaction database. From the UAP-tree construction process, we can see that one only scans the transaction database SDB once to construct the UAP-tree.

This saves lots of processing time that can be used for further analyses. The cost of inserting a user access sequence S into the UAP-tree is O(|S|), where |S| is the number of items in S. The next section introduces the algorithm for mining frequent user access patterns via a UAP-tree.

4. UAP-miner  In this section, we describe the novel UAP-miner algorithm for mining frequent user access patterns on the UAP-tree. It searches for the best matching user access path in the UAP-tree according to a user?s current access sequence. We remove the current user access sequence?s heading repeatedly until we find a matching path. The UAP-miner consists of two pieces of algorithm cooperating with each other. The Recommend algorithm controls the mining process and manages the input/output of the Prune algorithm. Prune algorithm can eliminates the recommendations not satisfying the minimum support threshold ? .

4.1. Description of UAP-miner  Algorithm 2 shows the Recommend algorithm to mine      the frequent user access patterns on the UAP-tree. Its major job is to coordinate with the other algorithm to achieve the mining task.

Algorithm 2: Recommend (Headers, P, ? ) Input: An item header table pointing to UAP-tree, Headers; a current user access sequence, P; the minimum support threshold, ? ; an index variable to indicate the item in P, index Output: recommend results, RR Method: 1) Initialize RR=  ? 2) Let e ? P[1]  // P[1] means the first item in P 3) For each header_object?Headers do 4) If header table has a object named e  a. If the node labeled e in the UAP-tree has child nodes, and the name of item_name as the same as P[index] then  b. insert the child of these child nodes into RR with its count  c. Else remove the first item from P 5) Return Prune(RR, ? ) The algorithm Recommend invokes the Prune  algorithm. The function Prune prunes the infrequent items according to the count, and returns the frequent user access patterns as recommendations. The detail of the Prune algorithm is given as Algorithm 3.

Algorithm 3: Prune (RR, ? ) Input: A set of recommending nodes, RR; a minimum support threshold, ? Output: The recommending results satisfy support threshold ? , RR Method: 1) For each item in RR 2) If the count?? 3) Delete this item from RR 4) Return RR  4.2.   Example of UAP-miner  Let?s consider the UAP-tree in figure 1. Suppose P=<D, B, C> be the user?s current access pattern, 0.1? = be the minimum support threshold. It consumes the first item D in P, and finds the corresponding object D registered as item_name in the item header table. According to object D?s head_node_link, it can find two nodes labeled as D.

Because the two nodes have no child node, we then remove the first item of P?that is, P=<B, C>. We repeat the matching process. Now, we can find the matching path B?C in the UAP-tree, which is marked as the bold, white node. There are two matching paths and each node C has child, node D and node A which are marked as gray nodes shown in Figure 2. Node D and node A are the un-pruned recommended results. Then UAP-miner checks the support threshold to prune off the infrequent user access patterns.

Figure 2. The UAP-miner example The minimum support can be calculated as ?  multiplied by the number of user access patterns (root node?s total_count) in SDB. So the minimum support is 0.5.

For each recommended result, its count should satisfy the minimum support. Node D and node A satisfy the minimum support threshold (1 ?  0.5), then we obtain the recommended result A and D via the UAP-miner. We can present the recommended result as association rule <B, C>?<A> and <B, C>?<D>, then we can rank the recommended results by calculating confidence as:  ( , )( ) ( )  countconfidence count  ? ?? ? ?  ? ?? = ? ?  (2)  In this example, the  can refer to the sum of the count of node C, and  (count ?? ?) ( , )count ? ?? ?  can  refer to the count of node A and D. Therefore, <B, C>?<A>, confidence=1/3; and <B, C>?<D>, confidence=1/3. Our approach can provide more precise recommendations for users.

5. Conclusions  In this paper, we study the generating of recommendations for an online user based on the user access pattern. We propose a new data structure named UAP-tree to store user access sequence. We have used the UAP-tree in our new algorithm named UAP-miner with which real-time recommendation can be done. Web user      access pattern mining is a new research field. It will develop and be applied widely. For the commerce demand increase day by day, there are lots of problems need to be resolved, and we will work further in this field.

