News Feeds Optimization via Users? Interaction  Graph over Mobile Social Networks

Abstract?Online social networks are increasingly playing roles of propagating news. We are surrounded with diverse data every day in today?s information exploding era and suffer from the littery contents. Furthermore, due to most users of online social networks have turned their platforms from PCs to smart phones, it is a challenge to select contents that users interested in with resource constraints in mobile social networks. Considering the contradiction between large volume of data and memory constraints in mobile social networks, we present an efficient news filtering mechanism via users? interaction to avoid unnecessary display of data that barely read. By leveraging the Bloom filter technology, we can record users? interaction dynamically with a slight false positive, and filter the little possible readable updates of friends from their News Feed sites. We conduct a simulation to evaluate our design.

Results show significant performance for storage saving and high filtering rate.

Keywords-News Feeds; interaction graph; mobile social  network; Bloom filter

I.  INTRODUCTION Online social network services are increasingly playing  roles of propagating news [1, 12]. Users of these social networks such as Facebook, Myspace and Google+, share information, communicate ideas, opinions, videos, and photo or other data, among their circles of friends all over the world [19]. These interactions of social media generate an unprecedented amount of data. We are surrounded with diverse data every day in this information exploding era.

Moreover, with the prevalence of smart phones in the past few years, we have all witnessed that many users of OSNs have shifted from desktop to mobile devices at an incredibly fast pace. For an example, total number of monthly active Facebook users is 1.11 billion, and about 680 million of which are mobile users (i.e. 61.26% users of Facebook are mobile users) [13]. Due to the constraint of the memory capacities, CPU usages and energy consumptions, it is impossible to post this huge amount of raw data without filtering.

Considering the contradiction between this huge volume of messages being posted and limited memory spaces, it is a challenge for online social service platforms to select useful information to post in front of users. Facebook for instance, when users login at the first time, they will gain all the latest  updates of their friends from their News Feed pages.

However, many people may have the experience that they have little interests to read these updates, for most of them are comes from the friends we contact barely or even do not know who they are. An analysis of Facebook shows that users tend to interact mostly with a small subset of friends, often having no interaction with up to 50% of their friends [16]. These fractions of data from unacquainted friends are wasting time to browse and space of the News Feed. Getting rid of this proportion unnecessary data from the News Feed will save amount of time and space, which is important for the mobile users of OSN.

To address this issue, we present a novel filtering mechanism by leveraging the users? interaction relations instead of friendships. It comes from the instinct that users may pay much more interests to the news from friends who contact frequently rather than the ones communicates barely.

The main idea of the filter mechanism is illustrated in Fig.1.

Suppose there is a user of Facebook with a number of friends, whose updates posted to him/her. Friends marked as red points are the friends contact with each other frequently, while the yellow points mark the friends that they communicate with sometimes. Friends marked as black points are the friends barely contact with, or even unacquainted, updates of these parts of friends are the objects we want to remove from the News Feed lists.

Updates with friendships Updates with interaction  relations Filtering  Frequently  Sometimes Barely  Fig.1. The sketch of filtering mechanism with interaction relations  Due to the dynamic of users? interaction relations [6], it is much more difficult for the system to maintain users? interaction relations than users? friendships, which are more stable. In this paper, we present an adjustable Bloom filter method to maintain users? interaction relations with a slight   DOI 10.1109/CLOUDCOM-ASIA.2013.80    DOI 10.1109/CLOUDCOM-ASIA.2013.80     memory cost. It can record the evolution of users? interaction relations efficiently.

We simulate the filtering mechanism compared with the mechanism without filtering. The results show great performance with immense memory saving and high hit ratio (i.e. the ratio of contents user interested divided by the total contents posted).

In summary, this paper makes three main contributions: ? A novel filtering mechanism for news feeds of  Facebook by leveraging users? interaction relations.

? An adjustable Bloom filter method to maintain the  dynamic of users? interaction relations.

? A simulation to evaluate the mechanism.

The rest of the paper is organized as follows. Section II  reviews the background and related works. Section III describes the design rationale. Section IV presents the simulation results. Section V concludes this work and proposes future works.



II. RELATED WORK Recently, with exploding data generated by online social  networks, researchers have paid considerable interests on data filtering. We will summarize the state of the art on analysis of users? interaction relationships, Bloom filter mechanism in a dynamic environment, and existing information filtering research in online social networks.

Relationship strength. Due to the hundreds to even thousands of social links generated by users, it is unsurprisingly that not all links are created equally. Gilbert et at. [7] have demonstrated that the strength of ties are ranging from best friends to enemies. Some of the previous researches provide only a coarse representation of the relationships, friends or not. Researchers founds that differentiate the relationship ties with binary relation ties can improve link prediction models [10, 18] and viral marketing [4]. As the divergent users behaviors of strong ties (e.g., close friends) are likely to exhibit greater similarity than those weak ties (e.g., acquaintances), treating all the relationships as equal will lead to degradation in performance. Researchers [11, 17] have paid much attention to represent the accuracy of relationships in fine granularity.

However, because of the spurious of the relationships, these static relationships established without change can not represent users? real activities. Recent studies [9, 15, 16] have focused on the actual interaction between users rather than mere friendship to distinguish strong and weak ties. In this paper, we present a user filtering mechanism with the interaction to follow users? actual activities.

Bloom filter technologies. In this paper, we leverage the Bloom filter technologies as the basic filtering mechanism for recording users? interaction activities. The Bloom filter is a space-efficient probabilistic data structure that supports set membership queries with a slight false positive ratio (i.e.

claiming an element to be a member of the set when it is not inserted) [14]. The standard Bloom filter was first presents by Burton H.Bloom [2], which can only represent static sets.

However, due to the dynamic and no upper bound properties of online social networks, static sets are not sufficient.

Recent studies have focused on the dynamic set  representations. Guo et al. [8] present the dynamic Bloom filters to suit for the cardinality of sets represented unknown.

In [3], Deng et al. propose the stable Bloom filter to realize duplicate detection in a stream of data. We present a variant of counting Bloom filter [5], which can be adjusted with time and cells of the set increased slowly. We will describe it in section III in detail.

Information filtering. Some of recent studies have seen the opportunities of information filtering. Stajner et al. [12] focus on the responses to an online news articles. They propose a near-optimal solution by leveraging the sub- modularity property of objective function to help users to select interesting responses to display. Yang et al. [19] propose a framework for summarizing and analyzing Twitter Feeds for efficient querying and retrieval, which can help users to find interesting data. Different from these studies, we help users to filter the contents with users? interaction instead from the contents sides. We present a novel filtering mechanism by leveraging users? interaction.



III. DESIGN In this section, we first introduce the background of news  feed of Facebook and users? interaction which are used through the paper. After this, we give a brief overview of design. Then, we describe the summary mechanism of users? interaction, which is an important module for the design. We will describe how the summary of interaction works to filter the unnecessary posted data. Finally, we will discuss some issues considered in this paper.

A. Background News Feed. In Facebook, the news feed site is a place of  displaying any activity of users? friends. It serves like a message board to display friends? activities asychronously.

Users can see at a glance what his/her friends have been doing on Facebook, including activity in applications and interactions with common friends. It allows users to know who uploads photos, who writes an article, who generates comments on new events, and who updates the status of his/her profiles. The news feed is ordered by date.  However, due to the large number of hundreds or thousands friends of users and most of which are untrusted or barely contact with, browsing these data is worrisome.

Interaction. Users of Facebook can interact with each other in many ways, such as send messages to friends, view friends? photos, chat with each other, access friends? profiles or homepages, update status. In this paper, we refer interaction as any interaction between user and his/her friends.

B. Overview of Design As described in Fig.2, the news feed of Facebook is the  place of displaying updates of users with friendships.

However, there is a large fraction of friends who are unacquaintances or even faked users. Updates of this part will be barely read, and flood out the ones really want to be read. We filter this part of updates from the news feed by utilizing the users? interaction relations, which can represent the actual activities of users in a recent interval. Therefore,     when users login at first, the updates of users? friends placed at news feed will be filtered previously. Thus, the updates displayed in front of users are from the friends they contact recently. To realize this, every user should maintain a compact summary index of his/her interaction relations, which records the user?s recent activities with his/her friends.

News  Feed  Filtering  Mike Story 1  Terry Story 2  Luccy Story 3  Bob Story 4  Lily Story 5  Terry 0 Mike 12 Luccy 7  Name Times  Lily Bob 6   Interaction  News  Feed  Mike Story 1  Luccy Story 3  Bob Story 4   Fig.2. The main idea of our filtering mechanism. For instance, suppose Alice has 5 friends, record interactions between Alice and her friends in a recent time window (e.g. 2 weeks). Interaction over 10 times marked as frequently (red points), while below 3 times marked as barely (black points), others as sometimes (yellow points)  C. Summary of Interaction Due to the dynamic of users? interactions, it is difficult  for the user to maintain users? interactions as a static table.

Because we do not need to actually record users? interaction always, we just want to filter the friends that contact with barely. Therefore, we leverage the Bloom filter technologies to maintain users? interaction roughly instead of accurately recording at a table.

Each user maintains an adjustable counting Bloom filter (ACBF) which is a variant of standard Bloom filter (SBF) supporting deletion and duplicated insertion, because the interactions of users and their friends are not only one time.

A SBF is essentially a bit vector bitvec_m with m bits, initially the set to 0, that facilitates the membership test against a finite set S = {x1, x2, ?, xn} consisting of n elements from a universe U. It uses a set of k uniform and independent hash functions {h1, h2, ?, hk} to map the elements in the set S to the bit address space [1-m]. For each inserted element x, the bits hi(x) are set to 1 for 1 ? i ? k. To check whether an item y is in S, we check whether all bits hi(y) are set to 1. If not, y is not a member of S. Otherwise, we assume that y is in S. However, there is a probability that this could be wrong. It is clear that Bloom filter may yield a false positive due to hash collisions, for which is suggested that an element y is in S even though it is not. The reason is that all indexed bits were previously set to 1 by other elements. After all the n elements of S are hashed and inserted into the CBF, the probability that a random bit of bitvec_m is still 0 is given by:  1(1 )k n kn mp em ?= ? ?                         (1)  The probability of a false positive after n elements inserted in the bitvec_m is:  (1 ) (1 )k kn m k n  f p e?= ? = ?                   (2)  Given a lower bound of the acceptable false positive rate ? (f ? ?), a SBF with fixed length m0, can represent a set with known cardinality upper bound,   2 2log log  m n n  e ? =?  ? (3)  To support the deletion and duplicated insertion suiting for our needs, we use the counting Bloom filter with c bits for a cell as a counter. Therefore, the CBF is a set that consists of the names of friends. Figure 3 shows an example of CBF used with interactions. When there is an interaction between Alice and her friends, we insert the names of the friends in the set once at a time. If the interactions between Alice and Bob are not only once, then Bob can be inserted repeatedly. When we want to check whether there is an interaction between Alice and Bob, we just need to check whether all bits of hi(Bob) is not 0. If so, we consider Alice and Bob have interactions. Otherwise, they have no interactions.

0 3 2 0 0 4 1 0 5 0 6 13 02 0 1 30 2 10 00 27 0 00 10 3  Bob Lily Mike  m = 32 n = 3 k = 3 c = 3  1 2 3 4 7 8 9 10 11 12 17 2213 1614 15 18 2119 20 2723 2624 255 6 3228 3129 30   Fig.3. An overview of an adjustable counting Bloom filter of Alice. Where m is the number of cells, each cell is regarded as a counter with c bits, n is the number of members, k is the number of hash functions  D. Operations of Summary After the summary of users? interactions is built, it will  be changed with time. We will describe how it can adjust to suit the dynamic of interactions.

We first describe the time window used to keep the recency of the summary or interaction. Users of Facebook have much more interests on recent activities of friends than the ancient ones. A recent study [15] has discovered that most fraction of user pairs discontinue their conversation after the first month of interaction, and users interact less and less over time. Only 30% of Facebook user pairs interact consistently from one month to the next. Therefore, we set the interaction time window at one month and set the value of c at 5. Then, we split the friends of users via the interaction times at a coarse granularity within the time windows. We define the times of interaction over Tf (threshold of frequently interaction, e.g. 20) as frequently, and below Tb (threshold of barely interaction, e.g. 2) times as barely, while others as sometimes.

New interaction inserted. As described in Algorithm 1, when there is a new interaction generated between a user and his/her friend, we first should check whether all of the bits corresponding to the friend are set over Tf. If so, we regard the certain friend is a close friend with frequent interaction.

Then, we only make the lowest bits of Bloom filter added by     one. If not, we make all of bits corresponding to the friend added by one. In this way, we can make sure the bits of bloom filter increasing slowly.

Algorithm 1: Pseudo code for interaction insertion Data: x is the object key to inset into the ACBF Function: insert(x) flag = 2c - 1; temp = 0 ; for j : 1 ?  k do    /* search for the minimum value of hj(x) if  hj(x) < flag then flag = hj(x); temp = j ; end if end for if flag > Tf then    /* addition only for the minimum value hj(x) += 1; else                      /* addition for all the hj(x) for j : 1 ? k do if hj(x) < 2c - 1 then hj(x) += 1; end if end for end if /* Loop all hash functions k   Interaction expired. As described in Algorithm 2, when  the time window has arrived, all bits of the Bloom filter divided by 2. Therefore, all the frequency of interaction decreased as half as before.

Algorithm 2: Pseudo code for interaction expired  Data: all cells of ACBF Function: expired() for i : 1 ?  m do Bi = Bi /2 ;           /*  Bi is the value of position i end for   E. Filtering Mechanism  The main idea of this paper is to filter the barely interacted friends by leveraging the summary of interaction.

When there is an update of a friend, it will first query the interaction Bloom filter whether they have interaction recently. How to query is described in Algorithm 3. When all the bits of Bloom filter corresponding to the friend are set above Tb, we regard the friend is an acquaintance. This part of updates is what we want to read, and the updates of the friends should be displayed in front of users. Conversely, if any bit of the Bloom filter corresponding to the friends is lower than Tb, we consider the certain updates are from the friend we barely contact with. Therefore, updates should be removed from the news feed list.

F. Discussion False positive. Due to the false positive of Bloom filter,  some of the friends may be regarded as acquaintances even though they have no any interaction at all. For this part of friends, their updates will be displayed after filtering. As the false positive rate is very low, the slight of shortcoming can be thought as a surprise for news from non-acquaintances.

Flexible selection. Some people may have the interests to the news that come from all of his/her friends. For this part of users, they can select whether to use the filter mechanism or not flexibly. On the other hand, if the number of friends is  very small, then the number of interaction is even smaller, it needs not to filter at all. In this paper, we only consider the users who have over 100 friends, and do not use the filter mechanism for the rest of users

IV. SIMULATION RESULTS In this section, we will describe the simulation conducted  to evaluate the performance of our design. We first describe the data sets and methodology. Then, we show the results of filtering mechanism compared with the original news feed method.

A. Data Collection Due to the extremely large scale of current online social  networks, such as Facebook has more than 1 billion active users [13], it is impossible to obtain the complete social graph. In this paper, we collect a subset of the social graph.

We have crawled the social network topology during June 15th, 2011 and July 15th, 2011. We have developed a crawler in Java running in parallel using 50 threads. The crawler starts with a randomly selected seed and visits all friends of the user and their friends in a breadth-first-search (BFS) sampling technique. We have crawled a data set consists of 2 million users, almost 50% of whom have more than 100 friends.

As we mentioned in section 3.1, the interaction of pairwise users can be in various ways, such as send messages to friends, view friends? photos, chat with each other, access friends? profiles or homepages, update status (i.e., any kind of activity between users is an interaction between users). It is difficult to crawl this kind of data completely. We randomly generate interaction between users in the simulation.

For the activities or news feeds of users? friends, we set the contents follow the uniform distributions. The parameters of Bloom filter are adjustable in this paper. As the time window is set at 31, we set the counter of Bloom filter c = 5.

Because of the maximum number of friends is 5,000 in Facebook, the members of the Bloom filter can not be over 155,000. Therefore, after setting a fix false positive rate, we can construct a large enough Bloom filter to suit for the interaction summary needs.

0.15 0.2 0.25 0.3 0.35 0.4        % of interaction/friendship  A ve  ra ge  s to  ra ge  c os  t ( K  B )  interaction friendship  0.15 0.2 0.25 0.3 0.35 0.4  0.2  0.4  0.6  0.8   % of interaction/friendship  Fi lte  rin g  ra te interaction  friendship  Fig.4. Average storage cost of news feed using the filtering mechanism compared with the original method. The x axis is the ratio of updates from the friends with interaction divided by the whole friendships  Fig.5. The filtering rate of news feed using the filtering mechanism compared with the original method. The x axis is the ratio of updates from the friends with interaction divided by the whole friendships  B. Simulation Methodology As aforementioned, we propose a filter mechanism based  on users? interaction in order to avoid unnecessary storage cost and traffic cost. Therefore, we first generate users? interaction graph randomly in the time window interval. By setting a fix false positive rate ?, each user maintains an adjustable counting Bloom filter to summarize interactions between users and their friends. When a user logins, the contents of news feed will be filtered by the interaction summary at first. To measure the filtering accuracy, we use the notion of filtering. Filtering is used to measure the accuracy after filtering the contents of news feed. In our context, filtering is defined as the rate of contents from the friends with interaction among all the friends:  i r  i w  CF C C  = +                                  (4)  where Fr is the fitering rate after using the filter mechanism, Ci is the contents from friends with interaction, Cw is the contents from friends without interaction.

C. Results In this subsection, we show the results of the simulation.

As mentioned before, we first consider the storage cost saving after using our filter mechanism for the news feed.

From Fig.4, we can see that the storage cost has significantly saved after using the interaction based filter mechanism. The x axis of the figure is the ratio of the friends with interaction divided by the whole friendships. With the increase of the ratio, using the original method of news feed without filtering the updates almost has the same storage cost, while it has great storage saving after using the interaction filtering mechanism. We can discover that the lower ratio of friends with interaction, the higher storage saving of news feed. The result demonstrates great consistency with our design.

Another feature we concern about is filtering which is defined in subsection 4.2. Filtering is used to measure the  accuracy of the filter mechanism. The principle of our idea is based on the interactions of friends, and leverage the adjustable counting Bloom filter to summarize the interaction of friends, The filtering rate is heavily influenced by the false positive rate of the Bloom filter. In this paper, we set the false positive rate of the Bloom filter at 1%, and then we can see from Fig.5 that the filtering rate is almost 99%. That is almost 99% updates of news feed are from friends with interaction recently after filtering by using the mechanism. The rest of nearly 1% of updates is from unacquaintance. Furthermore, we can see that the filtering rate in almost stable with the ratio of friends with interaction.

We can see that the core of our design the summary of interaction using adjustable counting Bloom filter. We next analyze the Bloom filter. Figure 6 shows the filtering rate using the interaction filtering mechanism with a time span in a month when the false positive rate is set at 1%, 2%, and 3%, respectively. We can see that the filtering rate trend is almost the same after the first month. Filtering rates have a slight increase after the first month and then become stable.

It may because that the Bloom filter of interaction becomes stable after the first month.

We also concern about how to set the threshold of frequently interaction defined in section 3.4. Figure 7 shows the filtering rate using the interaction filtering mechanism with different Tf when the false positive rate is set as 1%, 2%, and 3%, respectively. From the figure, we can see that there is a general downward trend. It may because the slow down of insertion operation described in Algorithm 1.



V. CONCLUSION Online social networks are increasingly playing roles in  propagating news, which has heavily changed our lives. We are surrounded by a huge amount of data every day and suffer from these littery contents. How to pick interesting data from the diverse and chaotic data is a challenge, especially in the mobile environment, where the storage is constrained.

1 2 3 4 5 6 0.96  0.965  0.97  0.975  0.98  0.985  0.99  0.995   Time span in month  Fi lte  rin g  ra te  1% 2% 3%  20 21 22 23 24 25 0.96  0.965  0.97  0.975  0.98  0.985  0.99  0.995   Threshold of frequency  Fi lte  rin g  ra te  1% 2% 3%  Fig.6. The filtering rate of news feed using the interaction filtering mechanism with the time span in month when the false positive rate is set as 1%, 2%, and 3%, respectively  Fig.7. The filtering rate of news feed using the interaction filtering mechanism with threshold of frequently increasing when the false positive rate is set as 1%, 2%, and 3%, respectively  In this paper, we study the news feed of Facebook, which is an important place for users? friends to display their activities. However, due to a large fraction of friends are barely contact with, there are a large amount of updates from this part of friends will not be read at all. It wastes a lot of time to filter these low valuable data from users? news feeds and cause unnecessary space cost. Therefore, we present an optimization of news feed to filter the little possible read data by leveraging users? interaction graph instead of friendships.

In order to suit the dynamic of users? interaction graph, we use the adjustable counting Bloom filter technology with a slight modification to record users? interaction during a time window. Then, we filter the updates of friends by checking whether there are interactions between users and their friends.

Finally, we conduct a simulation to evaluate the design. The results show significant performance for storage saving and high filtering rate.

In the future, we will consider about how to filter the news feed in the content side, and select the interesting data that users actually concern about not only from users? interaction graph. Next, we will pay much attention to other factors such as access times, frequency of updating news to help users to select the most valuable data from their close friends. Furthermore, we will continue our experiments by using the actual users? interaction data in the future.

