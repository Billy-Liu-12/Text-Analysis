Incremental Maintenance of Discovered Spatial Colocation Patterns

Abstract  Unlike the traditional incremental updating problem for discrete data, the appended data to spatial dataset may in- troduce lots of new relations between the added events and the existing events. Moreover, as the measure in mining of colocation patterns, participation index is complicated to handle compared with simply support counter. Thus, the in- cremental maintenance of colocation patterns for dynamic spatial dataset becomes a challenging problem. Previous work on traditional incremental maintenance can not tackle it directly. In this study, we introduce the concept of cross in order to reuse the already-known knowledge. Further- more, we propose an efficient updating algorithm (IMCP) for maintenance of discovered spatial colocation patterns when a set of new spatial data comes.

1. Introduction  Spatial colocation patterns represent the subsets of fea- tures whose events are frequently located together in ge- ographic space [11]. In many application domains such as M-commerce, earth science, biology and transportation, colocation pattern mining is of great value. As an example, in mobile computing, to provide location based services, service providers may tend to find services requested fre- quently located in spatial proximity. In another example, geologists are interested in the relationships of spatial dis- tributions among various kinds of mineral elements. There- fore, mining colocation patterns is an important spatial data mining task.

As in the traditional databases for discrete data, spatial dataset also allow frequent or occasional updates which may introduce new spatial colocation patterns and invalid some existing spatial colocation patterns at the same time. Fur- thermore, the appended data to spatial dataset may be even larger and more complex due to their spatial characteris- tics. Recomputing the new qualified patterns will be luxury.

Hence, we suggest in this paper an efficient algorithm IMCP to maintain the discovered colocation patterns without re-  running the pattern mining algorithms on the total spatial dataset.

1.1. Related Work  The problem of mining spatial association rules was first discussed in [9]. Then, Morimoto [10] used a support counter based algorithm to find frequent neighboring class sets in spatial dataset, whereas this method may miss some colocation instances.

A general framework of mining spatial colocation pat- terns was first proposed in [8] where an instance Join- based algorithm was introduced according to Apriori-Gen [1]. Yoo and Shekhar [12, 13] proposed a Partial-Join and Joinless approach respectively to improve the performance on identifying colocation instances based on the framework of Huang et al.[8]. In [7], a novel measure with rare events was introduced, whose work also under the framework of Huang et al.[8].

The incremental maintenance technique for discovered association rules with traditional discrete data was first pro- posed in [3] with an algorithm named FUP. Later, other techniques involved in incremental maintenance of discov- ered association rules were proposed successively including methods with both additional storage of frequent itemsets [5] and non-storage [6, 4]. A study of incremental min- ing of spatial association rule was proposed in [14], which was limited in the reference feature centric model defined in [9] and its own application background. To best of our knowledge, no previous work has been done on incremen- tal maintenance of discovered spatial colocation patterns in spatial dataset until now.

1.2. Contributions  In our study, the work is constructed under the frame- work defined in [8]. We make the similar assumption in [3] that the two thresholds, minimum prevalence threshold and conditional probability threshold, do not change. Compared with the traditional incremental updating issues, there are two important characteristics in our spatial updating prob- lem.

DOI 10.1109/ICDM.Workshops.2008.62    DOI 10.1109/ICDMW.2008.60     1. The appended data to spatial dataset may introduce lots of new relations between the added events and the ex- isting events. There is no natural method to divide the updated dataset into several disjoint parts.

2. As the measure in mining of colocation pattern, partic- ipation index is complicated to handle compared with simply support counter. Directly applying FUP alike approach may lead to over-count or under-count prob- lem. It?s also nontrivial to filter out the losers early due to the property of measure.

In this paper, to overcome these issues, we make the fol- lowing contributions:  1. An efficient algorithm IMCP (stands for Incremental Maintenance for Colocation Patterns) is presented to compute the new qualified colocation patterns in up- dated dataset. A property of maximum participation ratio raised in [7] is found to prune the candidates in early stage. A multi-lookup strategy is also used to guarantee the correctness for the counting of participa- tion numbers.

2. We define the concept of cross that can be used to transform the dataset into three sets of neighborhoods without losing the completeness. Extensive experi- ments are conducted to show the IMCP algorithm is al- most 2 times faster than re-running Joinless algorithm within a wide range of cross extent.

The remainder of the paper is organized as follows: In Section 2, a detailed description of the problem is given.

In Section 3, we state the algorithm IMCP and describe the algorithm design for updating colocation patterns. Section 4 presents the experimental evaluation. Conclusion and future work are discussed in Section 5.

2. Problem Description  In this section, we describe the basic concepts for spatial colocation pattern mining and the updating problem defini- tion.

2.1. Coloction Pattern Mining  Given a set of spatial features F, a set of their in- stance objects E, and a neighbor relationship R over E, the objective of spatial colocation pattern mining is to find colocation rules in the form of C1 ? C2 (p, cp), where C1 ? F, C2 ? F, and C1 ? C2 = ? . The in- terest of a colocation rule can be measured by its preva- lence (p) and conditional probability (cp) [11]. As the key concept of algorithms, the participation ratio Pr(C, fi)  of feature fi in a colocation C = {f1, f2, ..., fn} is de- fined as: Pr(C,fi) = Number of distinct objects of fi in instances of CNumber of objects of fi .

From this, two measures mentioned above can be con- cluded. The participation index Pi(C) of a coloca- tion is defined as: Pi(C)=minfi?C{Pr(C, fi)}. And the formal description for conditional probability of a colo- cation rule C1 ? C2 can be estimated as: P (C1|C2) = Number of distinct instances of C1 in instances of C1 ? C2  Number of instances of C1 .

In our study, the work is constructed based on Joinless approach. Hence, we briefly describe the essential defini- tions here. The star neighborhood of ei (ei ? E), is defined as SN={ej ? E|ej = ei ? (fj > fi ? R(ej, ei))}, where fj ? F is the feature type of ej and R is a neighbor rela- tionship. Let SI = { e1, e2, ..., eg } be a set of events whose feature types {f1, f2, ..., fg} are different. If all events in SI are neighbors to e1, SI is called a star instance of colo- cation C = {f1, f2, ..., fg}. Furthermore, if all events in SI are neighbors to each other, it is called a clique instance of colocation C [11]. The table instance of C is a collection of all the clique instances of C [8].

In Joinless approach, the algorithm scan the dataset to generate the total star neighborhoods at the first stage. Then at each kth iteration, it filters out the star instances for can- didates. Using instance lookup schema, the kth clique in- stances are gotten from those star instances. Thus, with the prune technique based on the concept of participation in- dex and conditional probability, colocation patterns can be derived.

2.2. Incremental Maintenance of Colocation Patterns  We focus on maintenance of discovered spatial colo- cation patterns when a set of new events come. Some additional storage is necessary for the completeness of the algorithm. The formal problem description is as follows.

Given: 1) A set of spatial feature types F = {f1, f2, ..., fn}.

2) The original spatial dataset containing a set of spatial events E = {E1, E2, ..., En}, where Ei (1 ? i ? n) is a set of events of feature type fi. Each event ei ? Ei has the vector information of <event id, feture type, space location>. The dataset is named as ODataset in the rest of paper.

3) The incremental spatial dataset containing a similar set of appended data as ODataset, J = {J1, J2, ..., Jm} (1 ? m ? n). The dataset is named as IDataset in the rest of paper.

4)Additional storage for ODataset: a) For each discovered colocation C = {f1, f2, ..., fg}, store the participation ratio Pr(C, fi) for every feature fi(1 ? i ? g). b) Store the id of every event for each clique instance of discovered     C.1  D.2  A.3  D.1  C.2  B.2  A.2  A.1  B.1  C.3  B.3  F.i: event i of feature type F  : event from ODataset; : event from IDataset  : neighbor relationship (Thicker lines indicate cross pairwises)  Center feature object Neighbor objects  A  A.1   A.1, B.1, C.1, C.3, D.2  A.2   A.2, B.2, C.2, D.1  A.3   A.3, C.3  B  B.1   B.1, C.1, C.3, D.2  B.2   B.2, C.2, D.1  B.3   B.3, C.3, D.2  C  C.1   C.1  C.2   C.2, D.1  C.3   C.3, D.2  D D.1   D.1  D.2   D.2  Complete star neighborhoods  Center feature object Neighbor objects  B B.3   B.3, C.3, D.2  C C.3   C.3, D.2  D D.2   D.2  Incremental  neighborhoods  Center feature object Neighbor objects  A A.1   A.1, B.1, C.3, D.2  A.3   A.3, C.3  B B.1   B.1, C.3, D.2  C C.3   C.3, D.2  D D.2   D.2  Cross  neighborhoods  Center feature object Neighbor objects  A  A.1   A.1, B.1, C.1  A.2   A.2, B.2, C.2, D.1  A.3   A.3  B B.1   B.1, C.1  B.2   B.2, C.2, D.1  C C.1   C.1  C.2   C.2, D.1  D D.1   D.1  Original  neighborhoods  Lossless split of neighborhood  Figure 1. An illustration of lossless construction for three set of neighborhoods.

colocations.

5) A spatial neighbor relation R.

6) A minimum prevalence threshold (min prev) and a mini- mum conditional probability threshold (min cond prob).

Objective: Find a correct and complete set of colocation rules more efficiently than re-running the Joinless algorithm, with participation index ? min prev and conditional probability ? min cond prob in updated spatial dataset, ODataset ? IDataset.

Precondition: The definition of spatial neighbor relation R, the values of min prev and min cond prob do not change.

3. Incremental Algorithm IMCP  3.1. Basic Definitions and Process  In traditional databases for discrete data, transactions are disjoint, so Cheung et al.[3] divide the updated database into the original database and the incremental database nat- urally. With a divide-and-conquer approach, the thinking of reusing the already-known knowledge of the original  database can be applied. By contrast, the events of spatial features are embedded in a continuous space and share a variety of spatial relationships with each other [8]. When new events of spatial features are appended, they may generate new relations with the existing events, which lead to ambiguous problem when partitioning the total dataset into disjoint parts. In our study, the concept of cross is defined to solve thus problem. The following terms are helpful to distinguish the cross part from the others.

Definition 1. Given two events that under the neighbor relation R, they are called an original pairwise if both of them belong to ODataset; Else if, both of them belong to IDataset, they are called an incremental pairwise; Else if each of them belongs to different kind of dataset, either ODataset or IDataset,they are called an inter pairwise.

Obviously, it is a disjoint partition for the complete set of pairwises. For example, in figure 1, the updated dataset consists of two different parts: the dotted events compose the original part ODataset while the star events compose the incremental part IDataset. The solid lines indicate the neighbor relationship between events. According to the definition, (A.1, B.1) and (A.1, C.1) are original pairwises; (B.3, C.3) and (C.3, D.2) are incremental pairwises; (A.1,     Original Pairwises  Original Neighborhoods  Incremental Pairwises  Cross Pairwises  Incremental Neighborhoods  Cross Neighborhoods  Figure 2. Dataflow in the IMCP algorithm.

C.3) and (A.1, D.2) are inter pairwises.

Definition 2. Given an event e from updated dataset, it is called a cross event if it takes part in at least one inter pairwise.Contrarily, it is called a non-cross event.

For example, A.1 and A.3 are cross events while B.3 and C.1 are non-cross events.

Definition 3. A pairwise is called a cross pairwise if it consists of both two cross events. Contrarily, it is called a non-cross pairwise if it contains at lease one non-cross event.

For example, (A.1, B.1) and (A.1, C.3) are cross pairwises while (A.1, C.1) and (B.1, C.1) are non-cross pairwises.

Definition 4. Given three sets of different types of pair- wises, original neighborhoods is defined as the set of star neighborhoods generated from original pairwises; incremental neighborhoods is defined as the set of star neighborhoods generated from incremental pairwises; and cross neighborhoods is defined as the set of star neighborhoods generated from cross pairwises. The star neighborhoods generation method is described in [11].

(Note: there may exist duplications for these different types of pairwises in the updated dataset.)  In figure 1, three different types of star neighborhoods according to our definition are generated for the left exam- ple compared with the complete set of star neighborhoods listed below. We?ll show such three sets of star neighbor- hoods hold the complete information for computing all the clique instances of a colocation C.

Lemma 1. A complete set of clique instances of a coloca- tion C can be scanned from original, incremental and cross neighborhoods.

Proof. The clique instances of C can be simply divided into three parts: original clique instances whose events all from ODataset; incremental clique instances whose events all from IDataset; and cross clique instances whose events either from ODataset or IDataset, at least one of them is different from others. Obviously, orig- inal clique instances can be scanned from the original neighborhoods. Because the original neighborhoods are generated from all the original pairwises, and the other two kinds of pairwises in Definition 1 cannot take part in such clique instances. The proof to incremental neigh- borhoods is similar.

As to the third part of the division, we?ll show that it?s not necessary to generate them with non-cross pair- wises. Given any star neighborhood (SN) of ei gener- ated from all pairwises, if ei is non-cross event, the re- maining events in SN are either original or incremental ones same as ei according Definition 2. Thus, SN ei- ther belongs to original or incremental neighborhoods. If ei is cross event, the remaining events can be divided into two disjoint parts simply: one is composed from all cross events notated as SN Cross = {ej ? SN |ej ?= ei?e j is cross event}, another notated as SN Non Cross = {ej ? SN |e j is non-cross event}. Obviously, as mentioned above, SN Non Cross either belongs to origi- nal or incremental neighborhoods according Definition 2.

Thus, the clique instances scanned from SN Non Cross are already included which were generated from the first two neighborhoods. Moreover, no clique instances are composed from events both in SN Non Cross and SN Cross, for there is no R relation between any event in SN Non Cross and in SN Cross. Therefore, cross in-     kth Incremental table instance  kth Cross table instance  kth Original table instance  Instance table for incremental winners  Instance table for original winners  (Include storage winners)  Instance table for cross winners  C.max_pr(new) >= min_prev  C.pi(global) >= min_prev  multi-lookup  Winners  Winners  Losers  Losers  colocation table for each eventlookup  lookup  lookup  C.pi(global) >= min_prev  count Pr(new) for features  count Pr(original) for features  scan Incremental neighborhoods  scan Original neighborhoods  scan Cross neighborhoods  Instances of [k-1]th winners  Figure 3. Process in kth iteration of the IMCP algorithm.

stances can be generated from a complete set of SN Cross with themselves generated only from cross pairwises.

Thus, original neighborhoods, incremental neighbor- hoods and cross neighborhoods can be scanned to gen- erate a complete set of clique in stances of a collo- cation C with themselves generated by original pair- wises,incremental pairwises and cross pairwises respec- tively.

From another point of view, our definition of three types  of star neighborhoods is a lossless split of the complete neighborhood. For example, in figure 1, (B.1, C.1) of original neighborhoods and (B.1, C.3, D.2) of cross neigh- borhoods are the split of (B.1, C.1, C.3, D.2) preserving the total information for computing complete clique in- stances. As the basic process of the IMCP algorithm, we scan ODataset and IDataset respectively, count event num- ber of each feature in each dataset separately and generates all pair neighborhoods using plane sweep algorithm [2].

Then, all pair neighborhoods are categorized into original pairwises, incremental pairwises and cross pairwises. The time complexity of categorization is O(N), where N is the number of all pairwises. We generate three types of neigh- borhoods based on different types of pairwises. The data flow of the process is described in figure 2.

3.2. Kth Iteration in the IMCP algorithm  Based on the three types of star neighborhoods we defined, the divide-and-conquer approach can be applied.

Following properties are useful in the derivation of the prevalent colocation patterns.

Lemma 2.Given a colocation C = {f1, f2, ..., fg} not prevalent in ODataset, if C.max pr < min prev for  new incremental data (including the new neighbor relationships between ODataset and IDataset), it is not prevalent in the updated dataset.

Proof. If C.max pr < min prev for new incremental data, then every feature fi(1 ? i ? g) of C has the property of Pr(C, fi) =  ni mi  < min prev(ni is the participate number of fi for C in new incremental data, (mi is the total number of fi in IDataset). Since the participation ratio of fi in ODataset nomo < min prev (no is the participate number of fi for C in ODataset, mo is the total number of instances of fi in ODataset), the final participation ratio of fi= ni+nomi+mo < min prev. Hence, C is not prevalent if C.max pr < min prev for new incremental data.

Lemma 3.Given a colocation C = C = {f1, f2, ..., fg}, it is prevalent in the updated dataset if and only if the final participation index minfi?C{ nofi+nifimofi+mifi } > min prev (nofi is the participate number of fi for C in ODataset, mofi is the total number of instances of fi in ODataset; nifi is the participate number of fi for C in IDataset, mifi is the total number of instances of fi in IDataset).

Proof. Based on the definition of participation index for prevalent colocation patterns.

The core process of the IMCP algorithm is carried out based on these properties. Figure 3 gives a detailed illustra- tion.

1. Generate the candidates with Apriori approach based on [k-1]th winners. Scan the incremental neighbor- hoods and cross neighborhoods of all the candidates.

A lookup schema is used to filter out clique instances from those star instances. The lookup for instances     scanned from incremental neighborhoods should be carried out within a instance table of [k-1]th incre- mental winners. The table can be easily generated by drawing out the ids of every event from instances of winners and index them by technique of hashing. For instances scanned from cross neighborhoods, a multi- lookup should be taken within three sets of instance tables, incremental, cross and original (including ad- ditional storage of original dataset for completeness).

Because a size k clique instance from cross neighbor- hoods may contain a size k-1 clique instance with ev- ery event all from ODataset or IDataset. Some du- plicate clique instances may be generated from cross neighborhoods that should be filtered out by checking whether all the events are incremental or original.

2. By merging the information from two sets of the clique instances for candidates, some losers can be pruned by checking the condition C.max pr < min prev accord- ing to Lemma 2. If C is a winner in the original dataset ODataset, the additional storage for its Pr(C, fi)s can be found. According to Lemma 3, the judgment for C can be made by easily adding the two parts of count- ing and making division. There still exists a problem with over-count or under-count. For example, in figure 1, consider the candidate C=(A,C). When encounter- ing the instance (A.1, C.3), obviously the increment of feature A should not be made since A.1 has already taken part in (A.1, C.1). However, an increment should be made for (A.3, C.3), since A.3 hasn?t be in any such kind of instance. Such ambiguous problem may lead to either over-count or under-count of participation num- ber of features. We introduce a lookup schema by keeping a table of colocations for every event. Every row of the table is a set of colocations the event has been take part in since now. Every time before count- ing, the algorithm takes a look in this table, the incre- ment is made when no such colocation is in the entry.

After that, the entry is added.

3. For the rest of candidates, scan the original neighbor- hoods to get the Pr(C, fi) for C in ODataset. By com- bining the information with incremental data, the fi- nal participation index is computed, and the winners can be found. The table of colocations for every event is also used to avoid similar counting problem in this step.

3.3. Outline of the IMCP Algorithm  The IMCP algorithm is presented following based on the above discussion.

Algorithm 1: The IMCP Algorithm Inputs: ODataset: original dataset with some additional  storage mentioned above; IDataset: incremental dataset;R: a spatial neighbor relationship; min prev: prevalence threshold; min cond prob: condition probability threshold.

Output: A set of colocation rules with participation index ?min prev and conditional probability ?min cond prob in updated spatial dataset, ODataset ? IDataset.

Variables: k: Colocation Size;GP, OP, IP, CP: global pairwises, original pairwises, incremental pairwises, cross pairwises; ON, IN, CN: original neighborhoods, incremental neighborhoods, cross neighborhoods; OCIk, ICIk, CCIk: a set of clique instances of size k candidates scanned from ON, IN, CN; TISk: a table of size k clique instances from storage. TCEk: a table of size k colocations for all the events; Ck: candidate collocations of size k; Pk: a set of size k prevalent collocations; Rk: a set of size k collocation rules; IPNk, OPNk, SPNk: a set of participation number of features of Ck for incremental data, original data (new found candidates) and storage.

Method: GP=line sweep(ODataset ? IDataset);1 OP, IP, CP=classify pairwises(GP);2 ON=gen star neighborhoods(OP);3 IN=gen star neighborhoods(IP);4 CN=gen star neighborhoods(CP);5 k=2;6 while not empty Pk?1 do7  TCEk=construct colocation table(TISk);8 Ck=gen candidate colocations(Pk?1);9 ICIk=apply joinless approach(IN, Ck);10 CCIk=apply joinless approach(CN, TISk, Ck);11 filter duplicate instances(CCIk);12 IPNk=calculate pariticpate num(ICIk, CCIk,13 TCEk); Ck=filter candidates by max pr(IPNk, Ck);14 Pk=primarily select prevalent colocations(IPNk, SPNk);15 OCIk=apply joinless approach(ON, TISk, Ck);16 OPNk=calculate pariticpate num(OCIk , TCEk);17 Pk+=select prevalent colocations(IPNk, OPNk,18 min prev); Rk=gen colocation rules(Pk ,min cond prob);19 k=k+1;20  end21 return ?(R2, R3, ..., Rk);22  3.4. Additional Storage for ODataset  In the IMCP algorithm, additional storage is necessary for the completeness of the algorithm. In our implementa- tion of the algorithm, the storage includes two parts:     Table 1. Experimental parameters and their values in experiments.

Parameters Meaning Ex1 Ex2 Ex3  S Size of initial colocation obeying Poisson distribution. 10 P Number of initial colocations. 20 F Number of features. 50 N Number of events in original spatial dataset. 100000 D Spatial frame size(D ? D). 10000 d Distance threshold of neighborhoods. 10  min prev Prevalence threshold. 0.3 0.25-0.5 0.3-0.5 incr ratio The ratio of incremental dataset over original dataset. 0.1 cross ratio The ratio of cross events over total events in updated dataset. 0-0.8 0.2 0.2  clump Number of colocation instances generated in a same neighborhood grid. 1 1,2  ?The participation ratio Pr(C, fi) of fi(1 ? i ? g) for each discovered colocation C ={f1, f2, ..., fg};  ?The id of every event for each clique instance of dis- covered colocations (size ? 3).

The first part of the storage can be derived directly from the result of Join, Joinless or Partial-Join algorithm. The second part actually can be scratched from the intermediate results from the three algorithms. We write these interme- diate results to disk for storage. These data can be reused in the other way around. Furthermore, in spatial databases, the information of the storage can be stored by a more appropri- ate object-oriented way with less cost. The second part of the storage makes up of most of the storage. we will discuss the space cost of it in the next section.

4. Experimental Evaluation  We study the performance of the IMCP algorithm in this section. All algorithms are implemented in C/C++ and are memory based algorithms. All the experiments were per- formed on an Intel Core 2 Duo 2.2GHz E4500 machine with 2G MB main memory, running Windows XP operation sys- tem.

4.1. Generation of Synthetic Data  To evaluate the performance of the IMCP algorithm, syn- thetic dataset are generated using a spatial data generator similar to [8] and [3], with some extensions for our incre- mental mining study. The main parameters of data genera- tor are described in Table 1 above. The procedure of gener- ating synthetic data is as follows. First, the initial patterns of ODataset are generated whose average size(S) obeying Poisson distribution. The feature types of each pattern are randomly chosen from F. Second, the average colocation instances size of each pattern are computed and the table in- stances are generated later. The whole spatial frame D*D is  divided into regular grids whose side length was d. For pro- ducing a colocation instance, a grid is randomly chosen and all events of the colocation are located within the chosen grid. Moreover, we use clump to control the data density in neighborhood grids. When a new grid cell was chosen ran- domly for locating a colocation instance, a clump number of instances was generated in the same grid cell. Finally, the appended data is generated whose size is N*incr ratio and whose feature is chosen from colocation features. To gener- ate our specialized dataset, the size of cross events is calcu- lated through the formula of N*(1+incr ratio)*cross ratio.

Then, a grid is chosen from the used grids which contains colocation instances and a new event is located within it.

Finally, we generate the remainder events of IDataset ran- domly. For each experiment, we generate 5 random datasets for evaluation.

4.2. Performance of the IMCP algorithm  Following experiments were conducted to evaluate the performance of the IMCP algorithm.

Performance with cross extent. The execution time of the IMCP algorithm and re-running Joinless algorithm were compared with a large range of cross extent mentioned in Section 3. We changed the cross ratio of an incremental dataset from 0 to 0.8 with the original dataset. The datasets were generated parameters described as Ex1 in Table 1. As figure 4(a) shows, both of the execution time increases since more computations were needed for additional relations be- tween the original data and the incremental data. But the IMCP algorithm performs better since lots of candidates were pruned in early stage.

Performance with participation index threshold. We ex- amined the performance effect as participation index thresh- old increases. The cost ratio is set to 0.2 for the datasets.

From figure 4(b), both the execution time decrease since fewer candidates was generated. However, the IMCP al- gorithm has a better performance when participation index     0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8          Cross Ratio (a)  E xe  cu tio  n T  im e(  se c)     IMCP Joinless  0.25 0.3 0.35 0.4 0.45 0.5         Participation index threshold (b)  E xe  cu tio  n T  im e(  se c)     IMCP Joinless  Figure 4. Performance of the IMCP algorithm and the Joinless algorithm (a)with cross extent (b)with participation index threshold  0.3 0.35 0.4 0.45 0.5  0.5   1.5   2.5  Participation index threshold  A dd  tio na  l S to  ra ge  O ve  r O  rig in  al D  at as  et     clump = 1 clump = 2  Figure 5. Space cost with participation index threshold.

threshold is small, since the smaller the prevalent threshold is, the more the already-known knowledge can be reused.

Other parameters are described as Ex2 in Table 1. The space cost for additional storage is acceptable as discussed below.

4.3. Space Cost for Additional Storage  We estimate the space cost ratio of the additional storage over the original dataset with the participation index thresh- old. In Ex3, the datasets were generated with clump set to be 1 and 2 respectively. The Joinless algorithm was imple-  mented on the datasets where the intermediate results were recorded.

For different values of participation index threshold from 0.3 to 0.5, the space cost ratio decreased as figure 5 shows.

That?s because lots of colocation candidates were pruned when the participation index threshold increased. However, when given a low value of participation index threshold, the space cost of the the IMCP algorithm increased rapidly. In the other hand, the space cost of the IMCP algorithm is sen- sitive to the clump degree, for the larger clump may result in a larger number of clique instances needed to be recorded.

Thus, the IMCP algorithm performed unefficient when the participation index threshold is too low or the data den- sity in neighborhood grids is too high due to the large size of intermediate results. However, in view of engineering, the size of the intermediate results could be reduced by com- pressing with Huffman encoding. The time to compress and uncompress the results is relatively short compared with the total implementation time of the IMCP algorithm.

5. Conclusion and Future Work  We present the problem of incremental mining of spatial colocation patterns in spatial dataset and propose an updat- ing algorithm IMCP. The concept of cross is introduced to transform the updated dataset into three sets of neighbor- hoods with which a divide-and-conquer approach can be carried out. The algorithm is efficient in most situations since it reuses the already-known knowledge of the origi- nal dataset. The experimental evaluation shows our algo- rithm has superior performance compared with re-running the best algorithm studied so far on updated spatial dataset.

Some additional storage is necessary for the completeness of the IMCP algorithm. The experiment shows the algo- rithm is space cost effective unless the participation index threshold is too low or the data density in neighborhood grids is too high .

As feature work, we plan to explore methods to store less information of the original dataset for efficient incre- mental mining. As far as a set of complete operations for spatial dataset is concerned, the decremental maintenance of discovered spatial colocation patterns is supposed to be considered in future research.

