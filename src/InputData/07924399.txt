An Efficient Intrusion Detection Approach for Visual Sensor Networks Based

Abstract?Visual sensor networks (VSNs) are highly vulnerable to attacks due to their open deployment in possibly unattended environments. To improve the network security of VSNs, an intrusion detection system (IDS) is an effective countermeasure.

However, as visual sensors can produce big and dynamic video data, it is a tough task to rapidly and effectively detect attacks in VSNs. Moreover, attack samples in VSNs are generally too rare for IDSs to fully understand the behaviors of attacks. Facing these difficulties, in this paper, we propose an efficient intru- sion detection approach for VSNs, which is based on traffic pattern learning. In the proposed approach, a traffic model is developed to describe the dynamic characteristics of network traffic in VSNs. Based on this model, the optimal feature set for traffic pattern learning can be extracted. Then a hierarchical self-organizing map (HSOM) is employed to learn traffic patterns and detect intrusions. Furthermore, an active learning strategy is devised to accelerate the training process of the HSOM and better learn the patterns of attacks. Experimental results show that the proposed approach has high detection accuracy and good real-time performance.

Index Terms?Active learning, big data, intrusion detection, self-organizing map (SOM), visual sensor networks (VSNs).



I. INTRODUCTION  V ISUAL sensor networks (VSNs) are networks that consistof a large number of sensor nodes which have imaging capabilities [1]. With rapid improvements in CMOS sensors, embedded computing, and video coding techniques, VSNs have been widely used in traffic enforcement, factory monitor- ing, habitat sensing, and many other surveillance applications.

As the visual sensors of VSNs are usually deployed in unpro- tected or even hostile environments, security is an issue of great concern.

Manuscript received September 19, 2016; revised February 1, 2017; accepted April 18, 2017. This work was supported by the National Natural Science Foundation of China under Grant 61433006 and Grant 61272204.

This paper was recommended by Associate Editor J. Wu. (Corresponding authors: Chunjie Zhou; Yuanqing Qin.)  K. Huang, Q. Zhang, C. Zhou, and Y. Qin are with the Key Laboratory of Ministry of Education for Image Processing and Intelligent Control, School of Automation, Huazhong University of Science and Technology, Wuhan 430074, China (e-mail: hyanglu1573@hust.edu.cn; qiqi@hust.edu.cn; cjiezhou@hust.edu.cn; yuan_qing@163.com).

N. Xiong is with the Department of Business and Computer Science, Southwestern Oklahoma State University, Weatherford, OK 73096 USA (e-mail: neal.xiong@swosu.edu).

Color versions of one or more of the figures in this paper are available online at http://ieeexplore.ieee.org.

Currently, research efforts in securing VSNs typically focus on encryption, watermarking, and secure protocols [2]. But these techniques lack the intelligence of observing and rec- ognizing attacks possibly present in the system. So intrusion detection systems (IDSs) are important for VSNs to maintain proper network security. Specifically, machine learning tech- niques have been widely applied to the problem of intrusion detection in computer networks by learning what constitutes the normal system behavior, where all unidentified behav- iors are considered as potential attacks [3]. However, machine learning-based IDSs face several obstacles when they are applied to VSNs.

1) While traditional visual sensors typically collect data periodically, many newly smart cameras support event- driven delivery [4]. These two kinds of heterogeneous working manners together will generate bursty and non- stationary network traffic, which poses a big challenge to learn regular traffic patterns.

2) VSN-based networks are expected to be deployed on large scales [5], so the large number of visual sensors will produce bulky data at high speed. The big sensor data in VSNs make it a tough task to rapidly train IDS classifiers and detect attacks.

3) It is impractical to acquire enough attack samples in VSNs to sufficiently train a machine learning-based intrusion detection algorithm. If this imbalance prob- lem was not properly addressed, the class boundary learned by standard machine learning systems would be skewed toward the majority class, thereby leading to an excessively low detection rate.

As VSNs are automated systems that will seldom or never be changed once deployed, the traffic pattern is relatively stable in some sense, and attacks will somehow induce anoma- lies into network traffic [6]. Based on this rationale, in this paper, we propose a novel intrusion detection approach for VSNs, which employs machine learning techniques to learn traffic patterns and detect intrusions. First, we develop a traf- fic model to describe the dynamic characteristics of network traffic in VSNs. By means of this model, we can extract the most valuable features of traffic patterns, which will be fed into a hierarchical self-organizing map (HSOM) neural net- work for pattern learning and intrusion detection. Considering that the training data acquired from VSNs is big and imbal- anced, an active learning strategy is designed to solve the class imbalance problem and accelerate the training speed.

See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

mailto:hyanglu1573@hust.edu.cn mailto:qiqi@hust.edu.cn mailto:cjiezhou@hust.edu.cn mailto:yuan_qing@163.com mailto:neal.xiong@swosu.edu http://ieeexplore.ieee.org http://www.ieee.org/publications_standards/publications/rights/index.html   This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

TABLE I COMPARISON OF THE IDSS PROPOSED FOR VSNS  Fig. 1. Architecture of VSNs.

Finally, we conduct several experiments in Omnet++ to verify the effectiveness of our approach.

The remainder of this paper is organized as follows. In Section II, we begin with a brief introduction of VSN struc- ture and intrusion detection in VSNs. Section III describes the details of the proposed intrusion detection approach, as well as the learning method. Then, the experiments used to evalu- ate the performance of the proposed approach are described in Section IV. Finally, we conclude this paper with future work in SectionV.



II. BACKGROUND AND RELATED WORK  A. Architecture of VSNs  Akyildiz et al. [7] classified the architecture of VSNs into two groups: 1) single-tier and 2) multitier architectures. Single- tier architectures are based on flat topologies, while multitier ones have hierarchical structures. In a multitier VSN, traf- fic accumulates sharply on its routing path to the cluster head (CH), which poses a high possibility of sensor fault for the nodes close to the CH. So most VSNs are currently designed with a single-tier architecture [8]. Therefore, refer- ring to [9] we present a single-tier network architecture for VSNs, which is shown in Fig. 1.

According to Fig. 1, a VSN is composed of many clusters and a base station, where each cluster has a CH which is wirelessly connected with many one-hop visual sensors. Every visual sensor may have one auxiliary sensor node (scalar or  visual), and the base station is responsible for local storage of the collected video data or uploading it to the Cloud for user access.

B. Intrusion Detection for VSNs  VSNs belong to the category of wireless sensor networks (WSNs), for which a large number of intrusion detection solu- tions have been proposed [10], [11]. However, VSNs have some features quite different from common WSNs.

1) The amount of data obtained from visual sensors is much larger than that of scalar values read from WSN sensors.

2) While WSNs typically gather data periodically, many VSNs support event-driven transmission which leads to bursty and dynamic varying network traffic.

3) The network topology of VSNs is usually simpler than that of WSNs because of the bandwidth limit. Therefore, the IDSs designed for WSNs are not directly applicable to VSNs.

So far, a few papers have discussed VSN-specific IDS issues. Czarlinska and Kundur [12], [13] investigated the intrusion detection problem for event-driven VSNs.

Czarlinska et al. [14] used Neyman?Pearson detector to decide whether VSNs were under attack. Lin et al. [15] proposed a trust-based intrusion detection model for VSNs.

Mali and Misra [16] made use of the received signal strength values received at the receiving nodes to detect attacks in VSNs. All these IDSs proposed for VSNs are summarized in Table I, showing their detection techniques, advantages, and limitations. According to Table I, we know that the existing studies have proposed different methods to detect only some kinds of intrusions in VSNs. Furthermore, they did not pay enough attention to the unique features of VSNs (big sensor data and dynamic network traffic). So, in this paper, we intend to use machine learning techniques to rapidly and efficiently detect various kinds of attacks for VSNs which have big and dynamic traffic data.

C. Machine Learning-Based Intrusion Detection  Over the past two decades, many machine learning tech- niques have been utilized for intrusion detection in computer networks [3], such as clustering, neural network, and support vector machines (SVMs). Aiming at constructing an IDS with    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

HUANG et al.: EFFICIENT INTRUSION DETECTION APPROACH FOR VSNs BASED ON TRAFFIC PATTERN LEARNING 3  low computational complexity and high detection accuracy, we adopt the HSOM neural network in our approach. HSOM is a hierarchical version of self-organizing map (SOM), an unsu- pervised learning method. The motivations of applying HSOM to intrusion detection in VSNs include the following.

1) It has been proved that HSOM can perform well in intrusion detection problems [17].

2) HSOM can well explore the topological relationships between input features by utilizing competitive learn- ing [18].

3) An HSOM-based IDS can detect intrusions faster because the SOMs in the same level can be trained and run in parallel.

Surveillance video is generally regarded as the biggest big data. Therefore, it is a great challenge to rapidly train a machine learning-based IDS for VSNs which have mas- sive video data. Facing this difficulty, we suggest that an appropriate traffic model could significantly accelerate the learning process because traffic models are able to describe the dynamic characteristics of network traffic and the feature sets extracted by means of traffic models could have a much smaller size [19]. When it comes to the problem of intrusion detection in VSNs, the traffic data is not only huge in size but also imbalanced. Therefore, we try to use active learning [20] to deal with these problems. Active learning makes the learn- ing process faster and more effective by querying training sets, and the goal of querying is to select as representative as pos- sible examples and achieve better generalization ability with fewer training samples. Thus, active learning can accelerate the training speed of IDS classifier by providing much fewer but more balanced and useful training data.



III. INTRUSION DETECTION USING TRAFFIC PATTERN LEARNING  A VSN usually has many clusters and each cluster can have a lot of nodes [5]. Thus, it is complex and time-consuming to detect attacks in such large-scale VSNs. With consideration of the network architecture shown in Fig. 1, a divide-and- conquer strategy might be quite favorable for efficient intrusion detection. In other words, IDSs can be independently deployed in each cluster [21], which might significantly increase the real-time performance of IDSs.

In this section, we introduce our intrusion detection approach for cluster-based VSNs. After describing how the features for traffic pattern learning are extracted using the CNB model, we explain the details of the HSOM-based intru- sion detection algorithm, as well as the learning strategy for training HSOM.

A. Traffic Modeling  Inspired by the N-Burst model [22] which is commonly used to evaluate the burstiness of network traffic in computer networks, we try to design a modified N-Burst model for VSNs. N-Burst model describes an arrival process which is a superposition of traffic streams from N independent and statis- tically identical ON/OFF sources, as illustrated in Fig. 2. Each ON/OFF source consists of an ON period, namely 1 burst, and  Fig. 2. N-Burst model.

an OFF period. In the case of VSNs, when there is no target in the surveillance area, visual sensors do not transmit data (event-driven transmission mode) or transmit data with a low and nearly constant bit rate (continuous transmission mode) to the CH. This can be regarded as the OFF period. When a target enters the view of a camera, this camera will transmit video to the CH with a higher bit rate [23], which corresponds to the ON period.

In order to understand the behavior of the N-Burst model, consider the simplest case when N = 1, then we use the following terminologies to present the model.

1) TON: Duration of an ON period.

2) TOFF: Duration of an OFF period.

3) ?ON: Mean packet transmission rate during an ON  period.

4) ?OFF: Mean packet transmission rate during an OFF  period.

5) ?ON: Mean packet interarrival time during an ON period.

6) ?OFF: Mean packet interarrival time during an OFF  period.

7) ?: Mean arrival rate (including ON and OFF periods).

When packets come from N sensors, the overall packet trans- mission rate ? is the sum of individual transmission rate, i.e., ? = ?Ni=1 ?i, where ?i indicates the mean packet arrival rate of the ith node.

As explained above, N-Burst model assumes that the N ON/OFF sources are independent. However, the visual sensors in VSNs are generally not totally independent of each other.

When a target is moving in the surveillance area of a VSN, multiple sensors may detect this event and a bulk of data will be transmitted to the CH in a short period of time. Generally, the sensor nodes will emit data packets in accordance with a relatively fixed sequence, and the sequence is determined by the available pathway, obstruct and shortest route in the scene being monitored. In other words, all the sensor nodes start their ON periods one after another and there are temporal drifts between the ON period start time of each node, denoted as (?t1,?t2, . . . , ?tN). This is the spatial-temporal correla- tion between VSN sensors nodes. On the basis of this kind of correlation, we propose a correlated N-Burst (CNB) model, as shown in Fig. 3. This model is a variant of the N-Burst model while the difference is that the N nodes are not independent and each node is a derivation from an ON/OFF source with a time delay ?ti.

In a VSN cluster which has many modes, it is a chal- lenging task to model the transition time of the ON periods between these nodes [24]. As an alternative, we use n-gram method [25], which can model the transition sequences of    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

TABLE II TRAFFIC FEATURES  Fig. 3. CNB model.

the ON periods, to describe the spatial-temporal correlation between these nodes. Each n-gram is comprised of a predefined number (i.e., n) of successive sensor IDs in our case. All the possible n-grams can be learned to form a knowl- edge base, and any n-gram that cannot be recognized will be classified as an anomaly. In order to reduce the size of search space, we simply adopt a 2-gram model.

B. Feature Extraction  According to the CNB model, traffic features can be categorized into two groups: 1) node-level features and 2) network-level features. The node-level features are used to describe the activities of specific sensor nodes, while the network-level features present the overall network condition of the whole system. Table II shows all the traffic features extracted from the CNB model.

It is noted that the traffic features that have scalar values can be directly fed into SOM, whereas the 2-gram sequences must be rearranged before they can be recognized by SOM.

Given a CH communicating with N nodes, we can trans- form the 2-gram sequences collected in a time period to a frequency vector. The frequency vector is created by comput- ing the occurrence probability of each 2-gram sequence. The length of the frequency vector is N2, because every 2-gram sequence can be represented by a numerical value within the interval [1, N2]. For example, suppose that a sequence (2, 3) which corresponds to the number ((2? 1)?N + 3) appeared six times in the total 40 2-gram sequences, then the entry in location ((2?1)?N+3) in the frequency vector has the value 6/40.

Fig. 4. HSOM architecture.

C. HSOM-Based Intrusion Detection Algorithm  The architecture of an HSOM used for intrusion detection is designed to correlate relevant features in the lower layers and integrate the low-layer SOMs into a single final view of the whole system. Specifically, a two-layer HSOM is employed here. Fig. 4 shows the proposed HSOM architecture. In layer 1, the number of SOMs is equal to the number of the nodes connected with the CH; the node-level traffic features of each node are fed into each SOM. The outputs of the layer-1 SOMs, coupled with the network-level traffic features, are the inputs of the only one SOM in layer 2.

In addition to providing data to the layer-2 SOM to evaluate the overall security status, the SOMs in layer 1 can also be used to judge whether a node is under attack. Moreover, the layer-1 SOMs can run in parallel. Therefore, by constructing an HSOM which imitates the architecture of VSNs, the pro- posed IDS cannot only rapidly carry out the intrusion detection tasks with a comprehensive description of system operating status, but also help to find out where attacks come from.

To acquire the network parameters of the HSOM, training should be conducted. As an HSOM is composed of multiple SOMs, the training process of HSOM is divided into many sub SOM training processes. In this paper, a particular kind of SOM which has a feed-forward structure with a single out- put layer is adopted. The output layer of the SOM has many neurons arranged in a 2-D hexagonal map and each neuron has an associated weight vector which has the same dimen- sionality as the input vectors. The learning process of an SOM involves five steps.

This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

HUANG et al.: EFFICIENT INTRUSION DETECTION APPROACH FOR VSNs BASED ON TRAFFIC PATTERN LEARNING 5  1) Given that an SOM has J neurons and each input vector has I dimensions, initialize the network weight W = {wj, j = 1, 2, . . . , J} with random values, where wj is a I-dimension vector.

2) Pick an input vector, say x, from the training set.

3) Compute the Euclidean distance between x and each  neuron in the SOM map. The neuron that has the smallest distance to x is called the best matching unit (BMU).

4) Use a neighborhood function (typically a Gaussian func- tion) to update the weight of the BMU and the points in its near vicinity. The update formula is  wj(s+ 1) = wj(s)+?(k, j, s)?(s) ? ?x? wj(s)  ? ? (1)  where s is the epoch index, k indicates the BMU, ?(k, j, s) is a neighborhood function which calculates the distance between the neuron j and the neuron k in epoch s, ?(s) is the learning rate, and ?x?wj(s)? is the Euclidean distance between x and neuron j.

5) Repeat from step 2 until the training times reach a previously set value.

After training SOM with normal samples and attack sam- ples, the input vectors that are close with each other are projected to a same cluster in the output layer, then all the BMUs for the normal samples can be acquired and we denote the set of these winning neurons as Wwin = {w pwin, p = 1, 2, . . . , P}, where P < J. Then, for each wpwin ? Wwin, we calculate the mean and standard deviation of the distances between wpwin and its corresponding input vectors, denoted as ?  p win and ?  p win, respectively.

After the layer-1 SOMs have been trained, they need to pro- vide a set of vectors which will be the inputs to the high layer.

This can be achieved by calculating the distances between an input vector and every neuron in an SOM map in layer 1 [26].

However, this method will drastically increase the dimension- ality of the input data for the layer-2 SOM. So we adopt another method where only one output is produced by each layer-1 SOM for each input, and the output vector is con- structed as follows. First, for a trained SOM in layer 1, we figure out the cluster center of all the neurons associated with normal samples, denoted as wC, using the following equation:  wC = P?  p=1 wp?p (2)  wherein ?p is the hit probability of neuron wp, i.e., the propor- tion of the number of the associated input vectors the neuron wp has over the total number of all the normal samples. Then, for an input vector x, the output vector xo is given by  xo = ?x? wC?. (3) In the intrusion detection process, by extracting features  from network traffic in a short period of time, an input vector x is fed into the HSOM for pattern classification. Referring to [27], we present the intrusion detection algorithm for each SOM, as shown in Algorithm 1. In the following pseudo code, wj represents the weight of the jth neuron in a trained SOM, and ? is an adjustable threshold factor that penalizes the false  Algorithm 1 Intrusion Detection Algorithm Input: an input vector x Output: normal or abnormal  1: for all w ? {wj, j = 1, 2, . . . , J} do 2: Calculate its distance to wj by dj = ||x? wj|| 3: end for 4: Find the BMU for x, whose weight is wb, then the distance  of x to its BMU is db 5: if wb ? Wwin then 6: if |db ? ?bwin| < ?? bwin then 7: x is normal 8: else 9: x is abnormal  10: end if 11: else 12: x is abnormal 13: end if  alarm rate. As shown in Algorithm 1, we first find the BMU for an input vector x, and then judge whether the BMU belongs to the set of the winning neurons for normal samples. If this criteria is met, then a threshold value is used to further iden- tify whether the input vector is normal or not; if this criteria is not met, then x is immediately classified as abnormal.

D. Imbalanced Big Data Learning  Recently, active learning has been used for training SVMs on imbalanced dataset by selecting the support vectors near the hyperplane with a higher probability. This kind of train- ing strategy is rapid and effective for training SVMs because the support vectors are more informative than others and they only account for a small portion of training set. However, as SOM is a clustering method that tries to fit the topology and distribution of input vectors, if we take too many vectors near the class borders to train SOM, the cluster centers in the out- put layer will be biased toward the class borders, which makes these clusters not easily distinguishable. Moreover, in the case of intrusion detection, misclassifying an attack leads to more serious consequences than misclassifying a normal event [20], so the cluster associated with normal behaviors should be com- pact enough for not incurring a high false negative rate. As a result, when actively selecting instances from imbalanced datasets for training SOMs, the samples from anomalous data should be extensively considered, whereas the samples from normal data should be more concentrated on their cluster center.

Based on the analysis above, we propose an active sub- set selection (ASS) method, which does not necessitate a full search through the entire training set but only samples a small number of representative data for training SOM. First, as the attack samples in VSNs are too rare to be discarded, we over- sample them by means of the SMOTE technique [28]. The principle of SMOTE method is to generate new observations in the minority class by interpolating the existing instances.

On the other hand, the normal instances are under-sampled from the training set by selecting the instances that are near the cluster center of normal instances with a higher proba- bility. The detailed steps of the ASS method are summarized in Algorithm 2. In the pseudo code of Algorithm 2, ceil(x) is a function that rounds x to the nearest integer toward    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

Algorithm 2 ASS Algorithm Input: the normal set SetN whose size is SizeN , the attack set  SetA whose size is SizeA Output: a subset SetS  1: for i = 1 to ceil(??SizeN/SizeA) do 2: Randomly pick L samples from SetN to create a query  pool SetL = {x1, x2, ..., xL}, where L = 2SizeA 3: Find the geometric center CL of SetL by CL =  ( ?L  l=1 xl)/L 4: for all xj ? SetL do 5: Calculate its distance to CL by Dj = ||xj ? CL|| 6: end for 7: According to D = {D1, D2, ..., DL}, create a set Setnear  that contains all the instances which are among the top ?% instances closest to CL in SetL  8: Create another set Setfar = SetL ? Setnear 9: for k = 1 to SizeA do  10: Set z to be a random integer derived from a [1, 100] discrete uniform distribution  11: if z > ? then 12: Randomly choose an instance from Setnear and add  it to SetS 13: else 14: Randomly choose an instance from Setfar and add  it to SetS 15: end if 16: end for 17: if i = 1 then 18: Add SetA to SetS 19: else 20: Use SMOTE to create a set whose size is SizeA, and  add it to SetS 21: end if 22: end for  infinity. ceil(? ?  SizeN/SizeA) is the number of iterations for subset selection and ? determines the size of the subset. ? (0 < ? < 50) indicates how compact the cluster associated with normal samples is in the output layer of SOM.



IV. EXPERIMENT AND RESULT ANALYSIS  In this section, we use Omnet++ [29] to simulate a VSN and evaluate the detection performance of our IDS with the generated traffic data. All the experiments that follows were run on a computer running Windows 10, with a 3.0 GHz CPU and 4 GB RAM.

A. Simulation Setup  Here, we construct a hypothetical VSN scenario, as shown in Fig. 5, which has 22 cameras monitoring a crossroads. This crossroads has four entry/exit points: A, B, C, and D. Assume that a target moves along the dashed line marked in Fig. 5, then there exist 12 available routes for the target. When the target is within the sensing range of a camera, the camera will detect this event with probability 1 and transmit data to the CH. When there is no target in the surveillance area, cameras do not send any data.

Some other parameter values of the VSN are specified in Table III. A Poisson process is used to describe the target arrival process [30]. Subsequently, the mean of the Poisson distribution, i.e., 1/?, indicates that the target is expected to appear ? times in a time unit.

To generate synthetic network traffic, Omnet++ is adopted to simulate the communication between the sensors and the CH. Pham and Makhoul [31] proposed the WVSNMODEL,  Fig. 5. Hypothetical VSN scenario.

TABLE III PARAMETER SETTING  Algorithm 3 Packet Traffic Generation Algorithm 1: Initialise the network with the parameters specified in  Table III 2: t? 0 3: while t < Ts do 4: A target chooses a path randomly and moves in the  monitoring area with velocity V 5: while The target is within the monitoring area do 6: for all q ? {1, 2, ..., N} do 7: if The target is within the view of camera q then 8: Send packets to the CH with rate r 9: end if  10: end for 11: end while 12: Set c to be a random value chosen from a Poisson  distribution with mean 1/? 13: t? t + c 14: end while  a simulation model of VSNs developed under Omnet++ sim- ulator. WVSNMODEL is open-source and provides strong capability of building large-scale VSNs, so we build the VSN model of our simulation experiments on the basis of WVSNMODEL. Besides, we make the simulation realistic by taking into account the interference between the sensor nodes and the CH. The interference is modeled by a Gaussian noise added to the packet interarrival time and a packet loss ratio for the packets being transferred. The following algorithm is used to generate sample packet traffic. In Algorithm 3, t indicates the elapsed simulation time, q is the index for camera ID, and Ts is the simulation time limit.

Apart from normal network traffic, anomalous traffic data is generated by performing some attacks to the VSN at    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

HUANG et al.: EFFICIENT INTRUSION DETECTION APPROACH FOR VSNs BASED ON TRAFFIC PATTERN LEARNING 7  runtime. Five common types of attacks defined in [32] are considered here.

1) Jamming: Jamming attacks are realized by introducing end-to-end time delay and packet loss. In our simula- tions, packet delay is set as a Gaussian noise with mean 10 ms and standard deviation 5 ms; packet loss ratio is set to be 10?2.

2) Man-in-the-Middle Attack: Man-in-the-Middle (MITM) attack is a form of network attack in which an attacker relays and possibly alters the packet content between two parties. This type of attack is simulated by increasing transmission delay. The delayed time is modeled by a Gaussian noise with mean 20 ms and standard deviation 5 ms.

3) Denial of Service: A denial of service (DoS) attack is conducted by totally blocking a sensor node.

4) Node Replication Attack: To conduct this kind of attack, we add one sensor node into the network and make it behave just like a normal one.

5) Node Compromise Attack: A node compromise attacker can capture a node and extract useful information to carry out further damages. We only consider the sit- uation, where a compromised node selectively sends packets at a probability of 0.95 every time it detects an event.

B. Configuration of HSOM  Before the IDS can be applied to the simulated VSN, we must carefully choose the parameters of HSOM, including the neuron number, the training iterations, the variance of the Gaussian neighborhood function, denoted as (s), and the learning rate ?(s). These parameters are set as follows.

1) The number of neurons in each layer-1 SOM is cho- sen as the square root of the size of input vectors. The number of neurons in the layer-2 SOM is set to be a lit- tle larger for better discriminatory capability, whilst not incurring too much overhead [17].

2) Usually, the number of iterations is minimally set to be 500 times the number of neurons [18].

3) SOM training is done in two phases. The first phase is the ordering process while the second is the tuning phase [33]. During the tuning phase, (s) is always set to L. And during the ordering phase, (s) decreases from H down to L in accordance with  (s) = L + (H ? L) (  1? s SO  )  (4)  where s is the training epoch index, H is set to 3, L is set to 1, and SO is the ordering phase steps which is usually set to 100 [33].

4) During the ordering phase, the learning rate is given by  ?(s) = ?L + (?H ? ?L) s SO  (5)  where ?H is set to 0.9 and ?L is set to 0.02. During the tuning phase, ?(s) is given by  ?(s) = ?L SO s  . (6)  Fig. 6. Overall detection performance.

C. Detection Performance Evaluation  After sample traffic is generated, we try to evaluate the per- formance of the proposed IDS. In particular, we will evaluate the overall detection performance, detection rates for different types of attacks, the capability of detecting new attacks, and the real-time performance of the IDS. The evaluation criterion used to model the detection performance of the IDS include: true positive rate (TPR), false positive rate (FPR), and overall accuracy (OA). TPR is defined as the ratio of the number of detected attacks to the total number of attacks, and FPR is the ratio of misclassified normal instances over the total num- ber of normal instances. OA describes how correctly an IDS works, which is given by OA = (TPR+ 1?FPR)/2. Besides, in the following experiments, the threshold ? in Algorithm 1 is set to ? = 2 after some preliminary tests.

First, we test the overall detection performance of the pro- posed IDS by training it with several balanced datasets. The results of this experiment are shown in Fig. 6. According to Fig. 6, we know that, when training data is too less, the IDS tends to have an extremely high FPR. In contrast, when there is enough training data, the HSOM-based intrusion detection algorithm has a high detection rate and a relatively low false alarm rate. In addition, it is observed from Fig. 6 that the over- all detection accuracy does not improve proportionally to the size of training data when it exceeds a certain threshold.

Second, we test the detection rates of our IDS for different types of attacks. The test results are shown in Table IV and it suggests that DoS, node compromise and node replication attacks can be easily detected by the IDS, but to recognize jamming and MITM attacks is a bit more difficult. This can be interpreted by the fact that jamming and MITM attacks sometimes do not cause obvious traffic anomalies into net- works [34]. In addition, Table IV also tells us that the layer-1 SOMs which only learn from node-level traffic patterns can accurately detect node-level attacks and recognize most of network-level attacks, and a two-layer HSOM which combines both the node-level and network-level traffic features can have even better performance.

Third, we evaluate the performance of the IDS when it is detecting new attacks. Table V shows the experiment setup and    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

TABLE IV DETECTION RATES FOR DIFFERENT TYPES OF ATTACKS  TABLE V PERFORMANCE OF THE IDS WHEN DETECTING NEW ATTACKS  TABLE VI EXECUTION TIME OF THE LAYER-1 AND LAYER-2 SOMS  results. In Table V, ? ?  ? means that the samples of the corre- sponding attack type in that column are included in the training set, and ??? means not. In each experiment in Table V, the attack samples which are not included in the training set will be merged with normal samples and fed into the IDS to per- form intrusion detection operations. According to Table V, we know that the IDS performs well when detecting new attacks.

Specifically, the node compromise attack, when it is treated as a new type of attack, cannot be easily detected by the IDS (TPR = 71.6%). This is because that a compromised node can have random behaviors and may behave just like a normal node sometimes.

Fourth, we evaluate the real-time capability of the IDS by running the intrusion detection process for 1000 times. In this experiment, the layer-2 SOM and each layer-1 SOM are set to be a 16? 16 map and a 10? 10 map, respectively. Table VI depicts the minimum, mean, and maximum execution time of the layer-1 and layer-2 SOMs. It is obvious that the execu- tion time of the layer-2 SOM is longer than that of a layer-1 SOM. This is because the layer-2 SOM has more neurons and thereby needs longer execution time. Considering that the layer-1 SOMs in the HSOM can perform the intrusion detec- tion tasks in parallel when implemented on GPU, FPGA, or multicore CPU, the minimal time needed to detect an attack is the sum of the execution time of one layer-1 SOM and one layer-2 SOM. Hence, the mean detection time is only about 75 ms according to Table VI. This is an empirical substan- tiation that the computational complexity of our algorithm is particularly low.

D. ASS Method Evaluation  To verify the effectiveness of the ASS learning strategy when it is applied to the problem of imbalanced data learning, we compare it with three other training methods.

Fig. 7. Comparison of ROC curves for the four training methods: ASS, TA, RUS, and ROS.

1) Training-All: Training all (TA) the instances in the imbalanced datasets.

2) Random Under-Sampling: Randomly under-sampling the majority class to form a balanced subset for training.

3) Random Over-Sampling: Randomly over-sampling the minority class to form a balanced training set.

For the ASS method, the parameter ? is set to 0.5, and ? is set as ? = 35.

Because attack samples in VSNs are extremely rare, whereas normal samples are abundant, the imbalance ratio of training set tends to be very high. Therefore, in this experi- ment, we construct a set whose imbalance ratio is 100:1 for traffic pattern learning. In order to compare the detection per- formance of the IDS when trained with different methods, the receiver operating characteristic (ROC) curve is adopted here.

ROC curve is usually used to illustrate the performance of a binary classifier system by plotting the TPR against the FPR at different parameter settings. Better detection performance is indicated by an ROC curve that is closer to the top left corner in the ROC space. Fig. 7 depicts the ROC curves for different training methods when FPR is within the interval [0, 0.2].

In Fig. 7, the curve whose label is STD stands for the detec- tion performance of the IDS when it is trained on a large and balanced dataset. As can be seen in Fig. 7, the ASS method has the beset detection performance among the four training    This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.

HUANG et al.: EFFICIENT INTRUSION DETECTION APPROACH FOR VSNs BASED ON TRAFFIC PATTERN LEARNING 9  Fig. 8. Comparison of training time for the four training methods: ASS, TA, RUS, and ROS.

TABLE VII COMPARISON OF IDSS  methods, while both the random under-sampling (RUS) and random over-sampling (ROS) methods perform poorly. The worst performance comes from the RUS method. This may be because that the under-sampled training set is too small to contain enough pattern information. Besides, if we use the TA method, i.e., simply training the IDS with all the instances in the imbalanced datasets, the performance degradation is also serious. As a result, by utilizing the ASS method, the detection performance of the IDS when trained on imbalanced datasets can be notably improved.

Next, we test the training time needed for training a layer-1 SOM (10 ? 10) with different training methods (ASS, TA, RUS, and ROS). The training set used here has 10 000 nor- mal samples and 100 attack samples. According to the results shown in Fig. 8, the RUS method has the best time efficiency, but its detection performance is poor, as illustrated in Fig. 7.

The ROS method is extremely time-consuming because it con- tains too much redundant data. When compared with the TA method which simply uses all the instances in the imbalanced datasets for training, the ASS method gains an improvement of training speed at a factor of 7.45. Therefore, by using the ASS method, the training speed of the HSOM can be significantly accelerated.

E. Discussion  Through the previous experiments, it is clear that the pro- posed IDS can efficiently and rapidly detect intrusions for VSNs, and the ASS method can well solve the class imbalance problem in VSN applications and accelerate the training speed.

Table VII presents the comparison of our IDS with several previous studies on intrusion detection for VSNs. According to Table VII, it suggests that our IDS can detect more vari- ety of attacks at a slight cost of detection performance, and it has good real-time capability. In particular, our IDS can perform better when it is trained on a large and balanced  training set. To summarize, the proposed IDS is better qualified for detecting intrusions in VSNs which have big sensor data.



V. CONCLUSION  In this paper, we have proposed an intrusion detection approach for VSNs. In this approach, a traffic model is designed for extracting valuable features which are fed into an HSOM neural network to learn traffic patterns and detect intrusions, and an active learning method is proposed to deal with the problem of big and imbalanced training data. The novelty of this paper lies in the following aspects. First, we have applied HSOM to the problem of intrusion detection in VSNs and showed that it can perform well in this context.

Second, a traffic model is developed to describe the dynamic characteristics of the network traffic in VSNs. With the help of this traffic model, the size of training set used for traffic pattern learning can be significantly reduced. Third, we have designed a light-weight active learning method for training SOM on big and imbalanced datasets by actively selecting a small number of representative instances from the training set. This learning method can fairly well address the class imbalance problem and accelerate the training speed of SOM simultaneously.

In the future work, we plan to collect a large amount of traffic data from real world VSN applications to test the pro- posed IDS. In addition, it is necessary to further accelerate the training speed of the HSOM with other algorithm-level optimization methods, such as extreme learning machines.

