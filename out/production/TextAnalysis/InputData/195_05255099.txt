Mining Closed Frequent Itemset based on FP-Tree

Abstract   Closed frequent itemsets provide a minimal repre- sentation of the itemset without losing their support information and they can greatly reduce the number of patterns. So how to obtain all the closed frequent itemsets effectively is of good importance. This paper constructs a FP-Tree according the matrix which only scans the database once. Also we design an algorithm to mine closed frequent itemsets which use the structure of the FP-Tree. We construct a link for every single node in the FP-Tree, and then give the closed frequent itemsets and the pruning of the link. This algorithm is an algorithm which only scans the data- base once, also it avoids the defect about patterns tree based on terms and can mine the closed frequent items efficiently.

1. Introduction   Frequent items are patterns[1] which appear in the datasets. And they are the key techniques and important steps when mining association rules, mining sequence patterns, correlation analysis and the mining application. When mining the frequent items, it will appear many frequent items. Especially when the set of support threshold min-sup is low so it leads to many long patterns in the datasets, we will find it so hard to get the interesting information. Due to these problems, Pasquier et al.[2] proposed a concept of closed frequent items FCI. FCI means those items which support counts can?t equal to other items and they are the superset of the frequent items. A formal definition of a closed frequent set is presented below. The set of FCI is equivalent to the set of all the frequent items. FCI greatly reduces the numbers of items and can also avoid redundancies.

In the study of closed frequent itemsets, Pei et al.[3] proposed CLOSET based on the FP-Tree Mining Algorithm. Then on the basis of the results of previous, Wang et al.[4] proposed an algorithm called CLOSET+.

CLOSET+ is the classic algorithm based on the FP-tree for mining closed frequent itemsets and the theoretical basis is a "frequent pattern growth" strategy to search closed frequent itemsets. In the process of realization, CLOSET+ used the FP-tree structure to store the global database in memory, that is to say, in the FP- tree, each node represents a frequent item and the shared support in some transactions in the database.

From the leaf nodes through the pointer can be returned back to the parent root node, such a link is called a path, the nodes included in the path which represent the entire sets of transactions which contain these items.

An indepth study based on FP-tree?s  data structure and the closed frequent itemsets, in this paper I proposed an algorithm called FCI-base-Fplink algo- rithm for mining FCI. A matrix constructed to temporarily store all the transactions in the database, and then in accordance with the matrix structure we construct the FP-tree. And this tree structure used the single frequent item as the first node, and gradually joined other items to the links which consider the above path as a prefix to the itemset list. According to the support information, we can obtain the closed frequent itemsets. The advantage of the FCI-base- Fplink algorithm is that we use the links to check and compare the item?s support to obtain the set of all FCIs and in the same time it improves the efficiency in the mining process.

2. Problem definition   In this section, we will give the basic concepts and a  simple example.

2.1. Basic definition   Given an itemset I = (i1, i2, , im), in which ik (k = 1, 2, , m) is a single item; transaction database D = (t1, t2, , tn), each transaction tj (j = 1, 2, , n) contains a unique identification TID and a subset of the    itemset I. The support count of X itemset is marked as sup_count(X). Sup_count(X) is the numbers of transactions in the database D which contains itemset X; the support X, support (X) = sup_count (X)/|D|, which |D| is the transaction?s numbers in the database D.

Definition 1(Frequent Itemset). The predefined minmum support threshold min_sup, if support (X) is not less than the min_sup, X is a frequent itemset [5].

Definition 2(Maximal Frequent itemsets). A Maximal frequent itemset is defined as a frequent itemset for which none of its immediate supersets are frequent[5].

Definition 3(Closed Itemsets). An itemset is closed if none of its immediate supersets has exactly the same support count as X[5].

Definition 4(Closed Frequent Itemsets). An itemset is a closed frequent itemset if it is closed and its support is greater than or equal to the min support[5].

2.2. A simple example   Example 1: Given the following transaction database D (Table 1). If min_sup is 50%, frequent itemsets? numbers are 19, but the closed frequent itemsets are only 7.The FCIs are follows: ACTW, CDW, ACW, CT, CD, CW, C. And we can quickly mining the maximal frequent itemsets[6]. Maximal frequent itemsets are ACTW, CDW.

Table 1. Transaction Database D TID Items  1 ACTW  2 CDW  3 ACTW  4 ACDW  5 ACDTW  6 CDT  3. Construction of FCI-base-Fplink matrix and the FP-Tree   In this section we will introduce the FCI-base- Fplink algorithm. In accordance with transaction database we can construct the matrix structure. Based on matrix, only need to visit the database once, we can create a tree structure of FP-Tree smoothly. We still choose the database table 1 as an example. So according the database we can construct the following matrix conveniently, which is shown in table 2.

Based on the database TID in turn to read in the matrix and the corresponding item we set the value to 0  or 1. If the transaction contains the corresponding item we set it to 1, otherwise we set it to 0. Based on this principle, we constructed the rows of 1 to 6 in the above matrix. The 7th row can be easily obtained according the operation of summing of the matrix .We can calculate every item?s sum. Take the T sets for example, we compute the sum of the columns is (1 +0 +1 +0 +1 +1 = 4), we also write the sums to the matrix as a new row.

Table 2. The matrix of Database D A C D T W 1 1 1 0 1 1 2 0 1 1 0 1 3 1 1 0 1 1 4 1 1 1 0 1 5 1 1 1 1 1 6 0 1 1 1 0 Count 4 6 4 4 5   So the sum row is not a transaction in the database,  but it expresses the support counts of all the single items in the database. It is not difficult to see that this matrix is equivalent to the database D given above.

Then we can read the database based on the last line and can be according the count value to read out rows.

This is also relatively easy to achieve. Firstly we established an array named sort. This array of sort stores elements (the name of itemsets), based on value of the matrix?s count row according ascending order.

Of course, when storing the items we had already deleted the items which support counts are less than the given minimum support threshold .In other words we do not process those item sets that support count are not satisfied with the given minimum support threshold. When the value of the count row is the same, in this circumstance we based on the lexicographic order. Base the database D, as the five single items all have to meet the set minimum support threshold. It should be sorted as the C, W, A, D, T.

Then we used the sorted array sort to build FP-Tree.

In the building process, we read TIDs based on the sort array, for example, we read in the transactions TID1, we can read based on sort array as the order CWAT, the second transaction?s order is CWD. The rest are also read in to the FP-Tree and the establishment of FP-Tree. In the end we built the FP- Tree as shown in figure 1.

The final outcome of FP-Tree?s construction seems to be simple, but in the construction of FP-Tree the FCI-base-Fplink stored it in the form of the links.  So FCI-base-Fplink is not so simple. We will describe the    structure of the FCI-base-Fplink in the next section.

We will use an example to explain the construction.

C  DA  DW  T D  T  T  Null   Figure 1. The FP-Tree of the database D   4. The construct and pruning of the FCI- base-Fplink   In this section, we will introduce the construction of the structure FCI-base-Fplink. In the same way, we take the database D as the example and the process will be described in detail in the following passages.

4.1. Construct the links after the read of transaction TID1   First of all, we read the transaction TID1 (CWAT), and establish the following list (see below) for the first node the TID1. The basic structure of the node has four fields. It includes two content fields, two pointer fields.

One content filed store the candidate itemsets? names, the other store itemsets? support count; two pointer fields: one pointer points to brother nodes, the other points to the immediate superset of which the prefix of the node?s contents.

CWAT 1  CA 1CW 1C 6 CT 1  AT 1  WAT 1  WT 1WA 1W 5  CWT 1  CAT 1CWA 1  A 4 Figure 2. The link after the reading into TID1  Due to the constraints of the space, in the links the  unused pointers are not marked. If the nodes of TIDs  have appeared in the link which first node is the head node, so the last node?s pointer is null and not marked in the links. Such as the node?s content of CT, CWT, CWAT, WT, AT, etc, those nodes used one pointer or none, only some nodes as CWA used its two pointers.

The link is as Figure 2.

4.2. Read all the TIDS and improve the FCI- base-Fplink   We read the following records in turn, and modified the links based on the original list. Now we give the FCI-base-Fplink after inserting the second transaction.

1 Because of adding the transaction TID CWD.

First we join the node CW. As a result, it has already had the node so we only have to add the support count only from 1 to 2. Then CD should insert to the links by adding nodes to C and the list which the head node is C use the nodes CD as the tail node. And there are nodes CWD which prefix is CW. We have to add CWD node to the link which head node is CW. 2 The head is W, we have to add the node WD, and the support count is set to 1. 3  Now nodes D is the leaf node of the FP- Tree nodes so we do not give it the link structure.

According to this method, we register all the transactions of the database, the final structure of the FCI-base-Fplink is illustrated in Figure 3. The figure 3 is also the final structure of the link.

CWAT 3  CA 4CW 5C 6 CT 4  D 4  WT 3WA 4W 5  CWT 3  CAT 3CWA 4  A 4  CWD 3  WD 3  CD 4  CWAD 2  CWADT 1  WAT 2  WAD 2 WADT 1  ADT 1  AD 2AT 2  DT 2  WDT 1   Figure 3. The final structure of the  FCI-base-Fplink  4.3. The connection of the single item   As a result, the single item?s support count has already given in the matrix. In the building process of FP-Tree, we can write the count to the FCI-base-Fplink immediately and uses a pointer to point to the next single frequent item.

4.4. Prune the FCI-base-Fplink   As the nodes in the FCI-base-Fplink can prune by the minimum support threshold. In this example we set the min_sup to 50% for the pruning. We delete the nodes which are not satisfied with the support threshold in FCI-base-Fplink. The following link is the structure after pruning. As Figure 4 in below:    CWAT 3  CA 4CW 5C 6 CT 4  D 4  WT 3WA 4W 5  CWT 3  CAT 3CWA 4  A 4  CWD 3  WD 3  CD 4  Figure 4. The pruned FCI-base-Fplink  5. The search of FCIs in the FCI-base- Fplink   We used the below passage to describe the algo- rithm FCI-base-Fplink:  The algorithm is iteratively, 1 At first the algorithm come into the link which  the first node is C, then check the support count of C.

If there are no items that support count is more than the C node?s support in the link which the items are the immediate superset that use the C as a prefix. Then C is a FCI, so we can output of this node at this time.

2 Then the algorithm comes to the node CW after the node C and search the support counts. We use the same method as described above. CW node is a FCI, we can follow the CW output more FCIs: CWA, CWD, CWAT.

3  In this step, the algorithm backed to the C List, to CA node as well as the prefix of this node. Then we should compare the output of the FCIs. We can find support count of CWA  is equal to the CA, so the node CA is not a frequent itemset. Then we can output CT, CD, those two FCIs.

4 If the list is not empty, we will continue to the next node along the C node to W. Then the algorithm output W joined FCI set, and then WA, WT, WD compared with the collection they are not the FCI.

5  Then for A and D they are not FCI either. At this point, we have mined all the closed frequent itemsets.

The set of FCI is: C, CW, CWA, CWD, CWAT, CT, CD.

In the above-mentioned algorithm, we take the database D as an example of the FCI-base-Fplink algorithm. Due to the space limite, we don?t give the pseudocode and the experiments of the algorithm.

6. Conclusions and the outlook   In this paper, we used the FCI-base-Fplink algor- ithm improves the efficiency greatly in the mining of FCIs. The algorithm uses the matrix to store the database in the mining process. In this method the algorithm only need to scan the database once; and made the use of cross linked list to search the set of FCI. Checking the frequent itemsets are FCI or not, the algorithm has reflected the superiority when comparing the items which are the item?s immediate superset, in the same time it avoid the need for recursively to construct FP-Tree over the past conditions, it also reduced the space. Then how to search the link structure of FCI-base-Fplink more effective and mining FCI rapidly still need to be further explored and the experimental analysis should be carried out simultaneously.

7. Acknowledgment  The authors would like to thank the Henan Innovation Project For University Prominent Research Talents (2007KYCX018).

8. References  [1]Jiawei Han, Micheline Kamber. the Concept and Technique of data mining[M].: Machinery Industry Press 2007.3:146-149.

[2]Pasquier N, Bastide Y, Taouil R, et al. Discovering closed frequent itemsets for association rules[C]//ICDT?99, 1999: 398-416.

[3] Pei J, Han J, Mao R. CLOSET: an efficient algorithm for mining frequent closed itemsets[C]//DMKD?00, 2000: 11- 20.

[4] Wang J, Han J, Pei J. CLOSET+: searching for the best strategies for mining frequent closed Itemsets[C]//Proc of ACM SIGKDD?03,2003:  236-245.

[5] Han Jiawei, Kamber M. Data ming: concepts and techniques[M]. [S.l.]: Morgan aufmann Publishers, 2001: 225-279.

[6]Pang-Ning Tan,Michael Steinbach,Vipin Kumar.

Introduction to Data Mining [M].: Posts & Telecom Press,2006.5:217-221.

