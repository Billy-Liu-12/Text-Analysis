A Multi-objective Genetic-Fuzzy Mining Algorithm

Abstract   In this paper, we propose a multi-objective genetic- fuzzy mining algorithm for extracting both membership functions and association rules from quantitative transactions. Two objective functions are used to find the Pareto front. The first one is the suitability of membership functions. It consists of two factors, coverage factor and overlap factor, to avoid two bad types of membership functions. The second one is the total number of large 1-itemsets from a given set of minimum support values. The two criteria have a trade-off relationship. Experimental results also show the effectiveness of the proposed approach in finding the Pareto-front membership functions.

1. Introduction   Data mining is commonly used in attempts to induce association rules from transaction data. An association rule is an expression X?Y, where X is a set of items and Y is a single item [1]. In real applications, different items, however, may have different criteria to judge their importance and quantitative data may exist. Fuzzy data mining approaches can be divided into two types, respectively for solving Single-minimum-Support Fuzzy-Mining (SSFM) [2, 8, 13] and Multiple- minimum-Support Fuzzy-Mining (MSFM) [14] problems.

In fuzzy data mining, the membership functions have a critical influence on the final mining results.

Besides, several criteria may be considered in a real application. The multi-objective evolutionary algorithms, that are used to find a set of solutions with trade-offs among different criteria, are thus very suitable for solving such a task [4, 5]. Kaya et al. thus  proposed an approach that integrated the multi- objective genetic algorithm into clustering for fuzzy mining [11]. The number of large itemsets and the spent execution time were considered as two objective functions to derive appropriate membership functions for mining fuzzy association rules. Besides, Kaya also proposed an approach based on multi-objective genetic algorithms for mining optimized fuzzy association rules [12]. He defined three objectives, namely strongness, interestingness and comprehensibility, to derive appropriate membership functions for mining optimized fuzzy association rules.

In the past, we proposed a genetic-fuzzy data- mining algorithm for extracting both association rules and membership functions from quantitative transactions [7]. Its fitness function was evaluated by the number of large 1-itemsets over the suitability of membership functions. The suitability measure was used to reduce the occurrence of bad types of membership functions. The two criteria, the number of large 1-itemsets and the suitability of membership functions, also have a trade-off relationship. In this paper, we thus propose a multi-objective genetic-fuzzy mining approach to find the Pareto solutions based on the two objective functions for deriving membership functions for the SSFM problem. Experimental results also show the effectiveness of the proposed algorithm.

2. GA-based multi-objective optimization problems   In traditional optimization problems, some certain goals are to be achieved and are usually transformed into fitness functions for maximization or minimization. Unfortunately, it is not easy to find the best fitness function for a problem in advance. Besides,    several criteria may be considered in a real application, such that multi-objective optimization problems become more and more important. Formally, a multi- objective optimization problem can be defined as follows:  Min/Max y = g(x) = (g1(x), g2(x), ?, gm(x)) subject to x = (x1, x2, ..., xn) ? X and  y = (y1, y2, ..., ym) ? Y,  where x is the decision vector, y is the objective vector, X represents the decision space, and Y represents the objective space. In the past, several GA-based approaches were proposed to get the solutions. For example, Schaffer first proposed the Vector Evaluated Genetic Algorithm (VEGA) to solve the multi- objective optimization problem [16]. Fonseca et al.

pointed out that VEGA had two problems [6]. The first one was that two non-dominated individuals were sampled at different rates. The second one was that the population would tend to split into different species.

They thus proposed a modified approach called Multi- Objective Genetic Algorithm (MOGA) by using the extended rank-based fitness assignment [6] for solving the above two problems. They also defined three relationships among chromosomes, namely inferiority, superiority and non-inferiority. The MOGA strategy was thus proposed to find the set of non-inferiority solutions, also called Pareto optimal solutions or Pareto front. Figure 1 explains the three relationships and the Pareto optimal solutions.

Pareto-Optimal Solutions  Objective function1  Objective function2  c1  c2  c3 c4  c5 c6  c7  c8  c9  c10  good  bad  bad good  Pareto-Optimal Solutions  Objective function1  Objective function2  c1  c2  c3 c4  c5 c6  c7  c8  c9  c10  good  bad  bad good Figure 1. An example for the Pareto optimal solutions  In Figure 1, there are ten chromosomes and two objectives. The two objective values of a chromosome are represented by a data point in the figure. Take chromosomes C1 and C2 as an example. The chromosome C2 is said to be inferiority to C1 since both the objective values of C2 is worse than those of C1. In this case, we also say that C2 is dominated by C1.

On the contrary, chromosome C1 is said to be superiority to C2. We also say that C1 dominates C2.

Besides, the chromosome C1 is said to be non- inferiority to C7 or vice versa. In this case, we also say  that both C1 and C7 are non-dominated points. The goal of MOGA is thus to find the non-dominated points, also called Pareto optimal solutions. In this example, the chromosomes C1, C7, C8, C9 and C10 are non- dominated points.

3. The multi-objective genetic-fuzzy mining approach  3.1 Chromosome representation   It is important to encode membership functions as string representation for GAs to be applied. Several possible encoding approaches have been described in [3, 15]. In this paper, the set of membership functions for an item is encoded as shown in Figure 2.

cj1wi1  Membership value  R j1  Quantity  Rjk Rjl  cjkwik cjlwil  Rj2  cj2wi2cj1cj1wi1wi1  Membership value  R j1  Quantity  Rjk Rjl  cjkcjkwikwik cjlcjlwilwil  Rj2  cj2cj2wi2wi2 Figure 2. The membership functions for an item Ij In Figure 2, each membership function is assumed to  be isosceles-triangle and represented by a pair (c, w), with c indicating the center abscissa and w representing half the span. Rjk denotes the membership function of the k-th linguistic term of item Ij. All pairs of (c, w)'s for a certain item are concatenated to represent its membership functions. Since both c and w are numeric values, a chromosome is thus encoded as a fixed- length real-number string rather than a bit string.

3.2 Initial population   A genetic algorithm requires a population of feasible  solutions to be initialized and updated during the evolution process. As mentioned above, each individual within the population is a set of isosceles- triangular membership functions. Each membership function corresponds to a linguistic term in a certain item. The initial set of chromosomes is randomly generated with some constraints for forming feasible membership functions.

3.3 The two objective functions   In our previous work, we have also proposed a  genetic-fuzzy approach to learn an appropriate set of membership functions for mining problems [7]. In that paper, the fitness values were evaluated by the numbers of large 1-itemsets over the suitability of membership functions. The two factors (numbers of    large 1-itemsets and suitability of membership functions) usually show a trade-off relationship. In this paper, we thus consider the mining of membership functions and fuzzy association rules as a multi- objective optimization problem, in which the above two factors are used as two objectives functions. A MOGA-based mining algorithm is thus proposed to find the Pareto optimal solutions. The first objective function (Obj1) for a chromosome Cq is defined as follows:  )()(1 qq CysuitabilitCObj = , where suitability(Cq) represents the shape suitability of the membership functions with Cq. Suitability(Cq) is defined as:  )],(_)(_[  qjqj  m  j  CfactorcoverageCfactoroverlap +? =    where m is the number of items. Overlap_factor(Cqj) represents the overlap factor of the membership functions for an item Ij in the chromosome Cq and is defined as:  ? ?  ?= ik jijk  jijk qj ww  RRoverlap Cfactoroverlap ],1)1),  ),min( ),(  [max(()(_  where overlap(Rjk, Rji) is the overlap length of Rjk and Rji. Coverage_factor(Cqj) represents the coverage ratio of a set of membership functions for an item Ij in the chromosome Cq and is defined as:  ,  )max( )...,,(  1)(_  j  jlj qj  I RRrange  Cfactorcoverage =   where range(Rj1, Rj2, ?, Rjl) is the coverage range of the membership functions, l is the number of membership functions for Ij, and max(Ij) is the maximum quantity of Ij in the transactions. The suitability factor is used to reduce the occurrence of the two bad kinds of membership functions shown in Figure 3, where the first one is too redundant and the second one is too separate.

5 8 9  Low Middle High  Quantity0  (a)  5 20 25  Low Middle High  Quantity0  (b)  5 8 9  Low Middle High  Quantity0  (a)  5 20 25  Low Middle High  Quantity0  (b)   Figure 3. Two bad membership functions  The second objective function is the total number of large 1-itemsets in a given set of minimum support values {ms1, ms2, ?, msh}. It is formally defined as follows:  ,||)()(  12 ? =  == h  g  ms qqq  gLCtotalNumL1CObj  where || 1 gms  qL  is the number of large 1-itemsets obtained when the minimum support value is msg.

Using the number of large 1-itemsets can achieve a trade-off between execution time and rule interestingness. Usually, a larger number of 1-itemsets will result in a larger number of all itemsets with a higher probability, which will thus usually imply more interesting association rules. In this paper, the proposed approach uses the above two objective functions to find appropriate Pareto solutions for the SSFM problems.

3.4 Fitness assignment   The fitness assignment is similar to that used in MOGA [6]. Basically, it contains three steps including ranking chromosomes, assigning fitness, and averaging fitness values of the individuals with the same rank.

For example, the previous ten chromosomes in Figure 1 are ranked according to their two objective values, with the results shown in Figure 4.

c3 3  c6  c4  c2 2  Objective function1  Objective function2  c1  c5  c7  c8  c9  c10  good  bad  bad good       c3 3  c6  c4  c2 2  Objective function1  Objective function2  c1  c5  c7  c8  c9  c10  good  bad  bad good        Figure 4. The ranking results of the ten chromosomes  In Figure 4, a chromosome with a lower ranking value represents it has a better quality. Besides, the chromosomes with their ranking values at 1 are also called non-dominated solutions. The fitness value of a chromosome is then assigned according to its rank value. For a chromosome Cq with its ranking value at 1, its fitness value is assigned by the following formula:  f(Cq) = DomonatedBy(Cq) / (P + 1),  where DominatedBy(Cq) is the number of chromosomes dominated by the chromosome Cq and P is the population size. For a chromosome with its ranking value larger than 1, its fitness value is assigned by the following formula:  ? ?  += qpp CdominatesCandPC  pq CfCf )(1)( ,  where f(Cp) is the fitness value of the chromosome Cp which dominates chromosome Cq. The constant value 1 is used here to ensure the fitness value of a dominated chromosome is larger than a non-dominated chromosome. Therefore, a chromosome with a smaller    fitness value is considered better. For instance, the chromosome C1 in Figure 4 dominates three chromosomes. Its fitness value is thus 3/11, which is 0.27. In the same way, the fitness values of the chromosomes C7, C8, C9 and C10 are 0.36, 0.36, 0.27 and 0.18, respectively. The chromosome C2 is dominated by C1 and C7. Its fitness value is thus calculated as 1+0.27+0.36, which is 1.63. The results of other chromosomes are shown in Figure 5.

c3  c6  c4  c2 1.63  Obj1  Obj2  c1  c5  c7 c8  c9  c10  good  bad  bad good  0.27 0.36  0.36 0.27  0.18 1.99  1.81  3.62  6.24  c3  c6  c4  c2 1.63  Obj1  Obj2  c1  c5  c7 c8  c9  c10  good  bad  bad good  0.27 0.36  0.36 0.27  0.18 1.99  1.81  3.62  6.24   Figure 5. The results of assign fitness of the ten  chromosomes There are five non-dominated chromosomes in  Figure 5 and their fitness values may be different.

Since they are all non-dominated, they are assumed to have equal importance to be reproduced in the selection procedure. Therefore, instead of the original fitness values, the average fitness value of the non- dominated chromosomes is calculated and assigned to each of them. In this example, the average fitness value of the non-dominated chromosomes is 0.288 (= (0.27+0.36+0.36+ 0.27+0.18) / 5). The fitness values for the chromosomes with the same ranks are also calculated in the above way.

3.5 Genetic operators   Genetic operators are important to the success of specific GA applications. Two genetic operators, the max-min-arithmetical (MMA) crossover proposed in [3] and the one-point mutation, are used in the proposed approach. The max-min-arithmetical (MMA) crossover operator will generate four candidate chromosomes from them. The best two chromosomes of the four candidates are then chosen as the offspring.

The one-point mutation operator will create a new fuzzy membership function by adding a random value ? (between -wjk to + wjk ) to the center or to the spread of an existing linguistic term, say Rjk. Assume that c and w represent the center and the spread of Rjk. The center or the spread of the newly derived membership function will be changed to c + ? or w + ? by the mutation operation. Mutation at the center of a fuzzy  membership function may however disrupt the order of the resulting fuzzy membership functions. These fuzzy membership functions then need rearrangement according to their center values. Besides, the selection strategy used in the proposed approach can be the elitist or the roulette-wheel strategy.

4. The proposed mining algorithm   According to the above description, the proposed multi-objective genetic-fuzzy algorithm for mining both membership functions and fuzzy association rules is described below.

The Multi-Objective Genetic-Fuzzy Mining Algorithm: INPUT: A body of n quantitative transactions, a set of  m items, each with a number of linguistic terms, a population size P, a crossover rate Pc, a mutation rate Pm, a set of h minimum support values, and a confidence threshold ?.

OUTPUT: A set of non-dominated solutions (sets of membership functions) with their fuzzy association rules.

STEP 1: Randomly generate a population of P individuals, with each one being a set of membership functions for all the m items, encode each set of membership functions into a string representation according to the schema stated in Section 3, and initialize the non-dominated set NDS as empty.

STEP 2: For each chromosome Cq, calculate its two objective values, the suitability (sutiability(Cq)) and the total number of large 1-itemsets in the given set of minimum support values (totalNumL1(Cq)), by the following substeps.

SUBSTEP 2.1: For each transaction datum Di, i = 1 to n, and for each item Ij, j = 1 to m, transfer the quantitative value vj(i) into a fuzzy set fj(i) represented as:  ? ? ?  ? ? ? ?  ? +++  jl  i jl  j  i j  j  i j  R f  R f  R f )(   )(   )( 1 .... ,  using the corresponding membership functions represented by the chromosome, where Rjk is the k-th fuzzy region (term) of item Ij, fjk(i) is vj(i)?s fuzzy membership value in region Rjk, and l (= |Ij|) is the number of linguistic terms for Ij.

SUBSTEP 2.2: For each item region Rjk, calculate its scalar cardinality on the transactions as follows:  ? =  = n  i  i jkjk fcount   )( .

SUBSTEP 2.3: Calculate the suitability value suitability(Cq) by using the formula defined in Section 3; set it as the first objective value of Cq.

SUBSTEP 2.4: For each Rjk , 1 ? j ? m, 1? k ? |Ij|, and for each minimum support value msg, 1? g ? h, check whether countjk is larger than or equal to the minimum support value msg. If Rjk satisfies the above condition, set || 1 g  ms qL  =  || 1 g ms qL  + 1, where || 1 g  ms qL  is the number of large  1-itemsets obtained by using the set of membership functions in chromosome Cq and the minimum support value msg; let  ? =  = h  g  ms qq  gLCtotalNumL1  1 ||)( as the second  objective value of Cq.

STEP 3: Rank the chromosomes according to the two  objectives, suitability(Cq) and totalNumL1(Cq), by the following substeps.

SUBSTEP 3.1: Set the variable r for representing the current rank, which is initially at 0.

SUBSTEP 3.2: Find the non-dominated chromosomes among the un-ranked ones in the population, set r = r + 1, and set the ranking values of the non-dominated chromosomes as r.

SUBSTEP 3.3: If there still exist un-ranked chromosomes in the population, go to SUBSTEP 3.2; otherwise, do the next step.

STEP 4: The fitness value of each chromosome is then calculated based on the ranking value by the following substeps.

SUBSTEP 4.1: Calculate the fitness values of the chromosomes with their ranking values equal to one as follows:  f(Cq) = DomonatedBy(Cq) / (P + 1), where DominatedBy(Cq) is the number of chromosomes dominated by the chromosome Cq and P is the population size.

SUBSTEP 4.2: Calculate the fitness values of the chromosomes with their ranking values larger than one as follows:  ? ?  += qpp CdominatesCandPC  pq CfCf )(1)( ,  where f(Cp) is the fitness value of chromosome Cp which dominates chromosome Cq and the constant value 1 is used to ensure the fitness values of dominated chromosomes are larger than those of non-dominated ones.

STEP 5: Calculate the average fitness values of the chromosomes with the same ranking values such that each of them can be selected equally by the selection strategy.

STEP 6: Copy the chromosomes with their ranking values equal to one into the non-dominated set NDS and remove the chromosomes which are dominated by other chromosomes in NDS.

STEP 7: Execute the crossover operation on the population.

STEP 8: Execute the mutation operation on the population.

STEP 9: Calculate the fitness values of the new chromosomes by STEPs 2 to 8.

STEP 10: Use the selection operation to choose appropriate individuals from the set of NDS to form the next generation. Here, the selection strategy can be elitist or roulette wheel. If the size of NDS, called NDSSize, is less than population size, PSize, all the chromosomes in NDS are copied into next population and the number (PSize ? NDSSize) of chromosomes are selected from the difference set of the offspring chromosomes and the current NDS.

STEP 11: If the termination criterion is not satisfied, go to Step 6; otherwise, do the next step.

STEP 12: Execute the truncation operator is used on the non-dominated set NDS to find the best k solutions. Since there may be more than one chromosome kept in NDS, the goal of this step is to keep the k representative solutions at the Pareto front. Note that this step is optional.

STEP 13: Mine fuzzy association rules from the given database and based on the derived chromosomes in NDS (or the k representative chromosomes if STEP 12 is applied), where each chromosome represents a set of membership functions. The fuzzy mining algorithm proposed in [9] is then adopted to achieve this purpose for each set of membership functions.

STEP 14: Output the non-dominated set NDS and their corresponding fuzzy association rules.

5. Experimental results   In this section, experiments made to show the performance of the proposed approach are described.

They were implemented in Java on a personal computer with Intel Pentium IV 3.20 GHz and 512 MB RAM. 64 items and 10000 transactions were used in the experiments. The dataset followed the exponential distribution. The initial population size P is set at 50, the crossover rate pc is set at 0.8, and the mutation rate pm is set at 0.001. The parameter d of the crossover operator is set at 0.35 according to Herrera et al.?s paper [10] and the set of minimum support values is {3%, 4%, ?, 13%}. The experiments were first made for demonstrating the evolution of the Pareto fronts by    the proposed approach. The evolution of the Pareto fronts along with different generations by the proposed approach is shown in Figure 6.

Exponential Distribution            60.00 70.00 80.00 90.00 100.00 110.00 120.00 130.00 140.00  Suitability Value  T ot  al N  um be  r of  L  G = 0 G = 100 G = 200 G = 300 G = 400 G = 500 Figure 6. The evolution of the Pareto fronts  From Figure 6, it can be observed that the solutions were distributed on the Pareto fronts in different generations. Besides, the final solutions (after 500 generations) were better than those in other generations. Since the data distribution followed the exponential distribution, the solutions on the Pareto fronts were a little narrow. The proposed approach is thus effective in finding an appropriate set of solutions.

6. Conclusion and future works   In this paper, we have proposed a multi-objective genetic-fuzzy mining algorithm for extracting membership functions from quantitative transactions for the SSFM problem. Two objective functions, namely suitability and totalNumL1, have been used to find the Pareto-front solutions. Experimental results also show that the proposed approach is effective in finding the Pareto-front solutions. In the future, we will continuously enhance the multi-objective genetic-fuzzy approach for more complex problems, such as for solving the MSFM problem.

7. Acknowledgment  This research was supported by the National Science Council of the Republic of China under contract NSC 96-2213-E-390-003.

8. References  [1]R. Agrawal and R. Srikant, ?Fast algorithm for mining Large Databases, pp. 487-499, 1994.

[2]C. C. Chan and W. H. Au, ?Mining fuzzy association rules,? The Conference on Information and Knowledge Management, Las Vegas, pp. 209-215, 1997.

[3]O. Cord?n, F. Herrera, and P. Villar, ?Generating the knowledge base of a fuzzy rule-based system by the genetic  Systems, Vol. 9, No. 4, pp. 667?674, 2001.

[4]C. A. Coello, D. A. Van Veldhuizen and G. B. Lamont, Evolutionary Algorithms for Solving Multi-objective Problems, Kluwer Academic Publishers, 2002.

[5]K. Deb, Multi-objective Optimization Using Evolutionary Algorithms, John Wiley & Sons, 2001.

[6]C. M. Fonseca and P. J. Fleming, "Genetic algorithms for multiobjective optimization: Formulation, discussion and generalization," The International Confidence on Genetic Algorithms, pp. 416-423, 1993.

[7]T. P. Hong, C. H. Chen, Y. L. Wu and Y. C. Lee, "A GA- based fuzzy mining approach to achieve a trade-off between number of rules and suitability of membership functions", Soft Computing, Vol. 10, No. 11, pp. 1091-1101. 2006.

[8]T. P. Hong, C. S. Kuo and S. C. Chi, "Mining association rules from quantitative data," Intelligent Data Analysis, Vol.

3, No. 5, pp. 363-376, 1999.

[9]T. P. Hong, C. S. Kuo and S. C. Chi, "Trade-off between time complexity and number of rules for fuzzy mining from quantitative data," International Journal of Uncertainty, Fuzziness and Knowledge-based Systems, Vol. 9, No. 5, pp.

587-604, 2001.

[10]F. Herrera, M. Lozano and J. L. Verdegay, ?Fuzzy connectives based crossover operators to model genetic algorithms population diversity,? Fuzzy Sets and Systems, Vol. 92, No. 1, pp. 21?30, 1997.

[11]M. Kaya and R. Alhajj, ?Integrating mutlti-objective genetic algorithms into clustering for fuzzy association rules Mining, pp. 431-434, 2004.

[12]M. Kaya, ?Multi-objective genetic algorithm based approaches for mining optimized fuzzy association rules,? Soft computing, Vol. 10, pp. 578-586, 2006.

[13]C. Kuok, A. Fu and M. Wong, ?Mining fuzzy association rules in databases,? SIGMOD Record, Vol. 27, No. 1, pp. 41- 46, 1998.

[14]Y. C. Lee, T. P. Hong and W. Y. Lin, ?Mining fuzzy association rules with multiple minimum supports using maximum constraints?, Lecture Notes in Computer Science, Vol. 3214, pp. 1283-1290, 2004.

[15]H. Roubos and M. Setnes, ?Compact and transparent fuzzy models and classifiers through iterative complexity 4, pp. 516-524, 2001.

[16]J. D. Schaffer, ?Multiple objective optimization with vector evaluated genetic algorithms,? The International Conference on Genetic Algorithms, pp. 93-100, 1985.

