An algorithm of mining long frequent itemsets based  on digit sequence

Abstract?In order to fast generate candidate frequent itemsets, avoid redundant calculation and reduce the time of scanning database, this paper proposes an algorithm of mining frequent itemsets based on digit sequence, which is suitable for mining long frequent itemsets. The algorithm firstly turns all transactions into digital transactions by binary, and then computing digit sequence of every attribute item. Finally, the algorithm uses the method of forming digital pure subset of digital transaction to generate candidate frequent itemsets by declining the value of digital pure subset, and uses the method of computing dimension of digit sequence of attribute items to compute support of candidate frequent itemsets, this method is used to reduce the time of scanning transactions database. The algorithm only scans once database when mining all these association rules, which is different from presented algorithms of mining long frequent itemsets. The experiment indicates that the efficiency of the algorithm is faster and more efficient than presented algorithms of association rules mining.

Keywords-association rules; digital pure subset; declining value; digit sequence; long frequent itemsets

I. INTRODUCTION Apriori as in [1] mainly wants to solve two key problems:  one is how to reduce the number of candidate frequent itemsets and the times of scanning database, the other is how to easily generate candidate frequent itemsets and fleetly compute their support. Aiming to the first problem, people present some algorithms, Max-Miner as in [2], Pincer-Search as in [3], DMFIA as in [4] and IDMFIA as in [5]. And then, to solve the second problem, some algorithms based on binary were presented, B-Apriori as in [6], B_ARDSM as in [7] and B_UDMA as in [8]. The kind of algorithm improved the method of generating candidate frequent itemsets and computing support by binary logic operation to indeed improve efficiency. However, B-Apriori, B_UDMA and B_ARDSM need repeated scan database when computing support. These algorithms based on binary are inefficient because they still use traditional way of computing support. Therefore, this paper proposes an algorithm of mining frequent itemsets based on digit sequence, denoted by AMFIBDS. The algorithm only scans once database when mining all these association rules, which is suitable for mining frequent itemsets by declining value of digital pure subset to generate candidate.



II. BASE NOTIONS AND PROPERTIES  Let I= {i1, i2?im} be a set of items, suppose each ik has been changed into Boolean quantity from multiattribute.

Definition 1 Binary Transaction (BT), a transaction is expressed as binary, binary transaction of transaction T is expressed as BT=(b1 b2?bm), bk [0,1],k=1?m, if ik Ti, and then bk=1, otherwise bk=0.

Example, let I={1,2,3,4,5,6} be a set of items, if T={1,4,6}, and then BT=(100101).

Definition 2 Digital Transaction (DT), which is an integer, its value would be obtained by turning binary transaction into algorism.

Example, if BT= (011001), and then DT=25.

Definition 3 Relation of digital transaction accord with relation of transaction set.

Example, suppose digital transaction of a transaction T1 is denoted by DT1, digital transaction of a transaction T2 is denoted by DT2. If T1?T2, and then DT1?DT2, DT1 is regarded as subset of DT2, which is regarded as superset of DT1.

Definition 4 Digit Sequence (DS), it is a group of digits, here, these digits may be repeated, and each digit is called a sub-Item of digit sequence.

For example, let DS= {25, 55, 98, 127, 78, 63, and 111} be a digit sequence, thereinto, 98 is called a sub-Item of DS.

Definition 5 Sub Item Dimension (SID), it is an integer, which is equal to the number of ?1? contained by binary code of sub-Item.

For example, let 62 be a sub-Item, and then SID (62) = SID (111110)2=5.

Definition 6 Digit Sequence Dimension (DSD), it is an integer, which is equal to the sum of items? SID contained by DS.

For example, let DS = {25, 55, 98, 127, 78, 63, and 111} be a digit sequence, and DSD = SID (25) + SID (55) + SID (98) + SID (127) + SID (78) + SID (63) + SID (111) = 3 + 5 + 3 + 7 + 4 + 6 + 6 = 34.

Property 1 A transaction is expressed as Tp, let Tq be another transaction, and Tp ? Tq, let F be frequent itemsets.

If Tq?F, then Tp?F. If Tp?F, then Tq?F.This work was fully supported by science and technology research projects of Chongqing Education Commission. (Project No. KJ091108)

III. DATA MINING ALGORITHM BASED ON DIGIT SEQUENCE  A. Data Structure and Generating Digital Pure Subset Data structure adopted by this algorithm is expressed as  follows:  Struct definition {  Int value; // saving digital transaction  Int [] location=new int [m]; //location[0] saving the number of item contained by transaction, the other saving location of item  } p_Node  For example, suppose I= {i1, i2, i3, i4, i5}, let T1= {i1, i3, i5} be a transaction, and so the transaction is saved as follows:  p_Node.value=21= (10101)2;  p_Node.location [0] =3;  p_Node.location [1] =0;  p_Node.location [2] =2;  p_Node.location [3] =4.

We use above digital transaction to explain the process of generating digital pure subset:  The number of generating digital pure subset is denoted by Max, which is express as follows:  Max= 2p_Node.location [0]-2=23-2=6, Vi  [1, Max], Vi is from big to small; means Vi declines the value of digital pure subset.

DPSi expresses digital pure subset;  (1)V1=1= (001)2, DPS1=1;  1=0?2p_Node.location[3] + 0?2p_Node.location [2]+1?2p_Node.location [1].

(2)V2=2= (010)2, DPS2=2;  4=0?2p_Node.location[3] + 1?2p_Node.location [2]+0?2p_Node.location [1].

(3)V3=3= (011)2, DPS3=3;  5=0?2p_Node.location[3] + 1?2p_Node.location [2]+1?2p_Node.location [1].

(4)V4=4= (100)2, DPS4=8;  16=1?2p_Node.location[3] + 0?2p_Node.location [2]+0?2p_Node.location [1].

(5)V5=5= (101)2, DPS5=9;  17=1?2p_Node.location[3] + 0?2p_Node.location [2]+1?2p_Node.location [1].

(6)V6=6= (110)2, DPS6=10;  20=1?2p_Node.location[3] + 1?2p_Node.location [2]+0?2p_Node.location [1].

B. The Method of Computing Support The method of computing support adopted by the algorithm  is expressed as follows:  Step1: Turning original transaction into Binary Transaction according to definition 1.

Step2: Aiming to each item of database, its corresponding Binary code is turned into Digit Sequence in fragment according to definition 4.

Step3: Aiming each candidate frequent itemsets, we knew that each item contained by candidate has own Digit Sequence, and then we will use Boolean calculation compute these Digits Sequence in turn, and finally the result is new Digit Sequence.

Step4: Computing Digit Sequence Dimension of the new Digit Sequence according to definition 6. The Digit Sequence Dimension is equal to support of candidate frequent itemsets.

For example, there are ten transactions in database. The course of computing support is expressed as follows:  Step1: Turning original transaction into Binary Transaction.

T1: {a, b, e, f},     BT1 = (110011)2;  T2: {a, c, d, e, f},     BT2 = (101111)2;  T3: {a, b, d, e, f},       BT3 = (110111)2;  T4: {a, b, c, d, f},     BT4 = (111101)2;  T5: {a, b, c, d, e, f},     BT5 = (111111)2;  T6: {c, d, e, f},       BT6 = (001111)2;  T7: {a, c, d, f},       BT7 = (101101)2;  T8: {b, c, d, e},      BT8 = (011110)2;  T9: {a, b, c, e, f},     BT9 = (111011)2;  T10: {b, d, e, f},        BT10 = (010111)2;  Setp2: Computing Digit Sequence of each sub-Item in database is expressed as table I.

TABLE I. COMPUTING SEQUENCE NUMBER  No. a b c d e f BT1 1 1 0 0 1 1 BT2 1 0 1 1 1 1 BT3 1 1 0 1 1 1 BT4 1 1 1 1 0 1 BT5 1 1 1 1 1 1  Item1 15 23 11 15 29 31 BT6 0 0 1 1 1 1 BT7 1 0 1 1 0 1 BT8 0 1 1 1 1 0 BT9 1 1 1 0 1 1 BT10 0 1 0 1 1 1 Item2 10 7 30 29 23 27  DS {15, 10} {23, 7}  {11, 30}  {15, 29}  {29, 23}  {31, 27}  Step3: Let C = {a, b, d} be a candidate frequent itemsets, and then Computing its support, denoted by Support (C):  DS ({a}) = {15, 10};  DS ({b}) = {23, 7};  DS ({d}) = {15, 29};  DS ({a, b, d}) = {15&23&15, 10&7&29} = {7, 0};  Support (C) = DSD ({7, 0}) = DSD (7) + DSD (0)  =3+0=3;    C. The Process of Algorithm Mining We define some signs expressed as follows:  D: saving all transactions according to the content of chapter A.

F: saving frequent digital transaction.

NF: saving non frequent digital transaction.

Step1: Transforming data, original database is turned into D on ascending by digital transaction according to definition 1, 2 and data structure.

Step2: Searching frequent digital transaction, the algorithm begin to search candidate itemsets from maximal digital transaction Di (i=n), if the digital transaction neither belong to subset of frequent itemsets nor superset of non frequent itemsets, and then computing its support. If it is frequent itemsets, and then it will be written to F and delete its subset in F, otherwise it will be written to NF and generate its all digital pure subsets by chapter A. And all frequent itemsets are written to F, all non frequent itemsets are written to NF which has not repeated itemsets.

Step3: Variable i automatically declining. And so the algorithm repeats executing step2 until searching all transactions.

Step4: Mining association rules from frequent itemsets according to min-confidence.

D. The Program of Generating frequent itemsets According to above hypothesis, the program is expressed  as follows:  (1) For (all D[i] D) {  (2)    IF ((D[i].value?F) && (NF?D[i].value)) {  (3)       IF (Support (D[i].value)  minimal support) {  (4)         Write D[i].value to F and delete its subset in F;}  (5)       ELSE {  (6)         Subset (D[i], S);  (7)         For (all Sk S) {  (8)            IF (Sk?F) && (NF?Sk) {  (9)             IF (Support (Sk)  minimal support)  (10)              Write Sk to F and delete its subset in F;  (11)           ELSE  (12)             Write Sk to NF; }  (13)         }  (14)        }  (15)      }  (16)   }  Input: a digital transaction.

Output: support of digital transaction  Support (int Candidate)  (1) int i = 0, j = 0, Support = 0, exit = 0;  (2) int [] Set = new int[Line];  (3) i = 0;  (4)  While ((i < Row) && (Exit == 0)) {  (5)     IF ((Candidate & 1) == 1) {  (6)        Exit = 1;  (7)        For (j = 0; j < Line; j++) {  (8)         Set[j] = Data [j, i] ;}  (9)     }  (10)     ELSE {  (11)         Candidate = Candidate >> 1;  (12)         i++;}  (13)   }  (14)   j = i;  (15)   While ((j < Row) && (Candidate! = 0)) {  (16)       IF ((Candidate & 1) == 1) {  (17)         For (i = 0; i < Line; i++) {  (18)           Set[i] = Set[i] & Data [i, j] ;}  (19)       }  (20)       Candidate = Candidate >> 1;  (21)       j++; }  (22)   For (i = 0; i < Line; i++) {  (23)     Support = Support + SID (Set[i]) ;}  (24)  Return Support;  Input: a node of definition.

Output: a set include digital transaction.

Subset (p_Node D, int[] S)  (1) For (i=1; i 2D.location[0]-2; i++) {  (2)    Subset=0;  (3)    Variable = i;  (4)    For (j=1; j D.location [0]; j++) {  (5)       If (Variable &1=1) Subset+=2D.location [j];  (6)       Variable>> 1 ;}  (7)   Write Subset to S ;}  (8)  Return S;

IV. COMPARING CAPABILITY OF THESE ALGORITHMS Here we use B-Apriori and B_UDMA to compare with  AMFIBDS via two aspects including the method of generating candidate itemsets and the time of scanning database.

A. Analyzing the Capability of Algorithms B-Apriori: The algorithm generates candidate frequent  itemsets that contain the number of items from fewness to many, which is suitable for mining short frequent itemsets.

However, the algorithm uses traditional method to compute supports of candidate, namely, it need scan once database when computing once support, and so there are many times of scanning database.

B_UDMA: The algorithm generates candidate frequent itemsets that contain the number of items from many to fewness, which is suitable for mining long frequent itemsets.

But the algorithm still uses traditional method to compute supports of candidate, which is the same as above the method.

AMFIBDS: The method of generating candidate frequent itemsets is used to declining the value of digital pure subset, which is suitable for mining long frequent itemsets, and the algorithm uses computing dimension of digit sequence of attribute items to compute support, which need only scan once transactions database, this is different from B_UDMA.

Conclusion: the efficiency of AMFIBDS is faster and more efficient than B-Apriori and B_UDMA when mining long frequent itemsets according to analyses.

B. Comparing the Experiment of Algorithms Now we use result of experiment to testify above analyses  and conclusion. Above three algorithms are used to generate frequent itemsets from these digital transactions, which are from 3 to 8191, these transactions don?t include any single items, and so the number of attributes is expressed as m=13, the sum of transactions is expressed as n=8178.

Our experimental circumstances are expressed as follow: Intel(R) Celeron(R) M CPU 420  1.60 GHz, 1.24G, language of the procedure is Visual C# 2005.NET, OS is Windows XP Professional.

The experimental result is expressed as Fig. 1, where support is absolute value. The runtime of three algorithms is expressed as Fig. 2 as support of itemsets changes. The runtime of two algorithms is expressed as Fig. 3 as length of itemsets changes.

Figure 1. The experimental result of algorithms.

Figure 2. The runtime of algorithm as support of itemsets changes.

Figure 3. The runtime of algorithm as length of itemsets changes.



V. CONCLUSIONS This paper proposes an algorithm of mining long frequent  itemsets based on digit sequence. The algorithm only scans once database, which is different from presented algorithms of association rules mining. The experiment indicates that the efficiency of the algorithm is faster and more efficient than presented algorithms of association rules mining.

